Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
8-pool records not consumed by openjdk8uX fixversions,SKARA-1626,5084706,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-10-04 12:36,2022-10-07 13:01,2023-10-01 09:56,2022-10-07 13:01,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,The logic for matching *-pool records in backports is not matching openjdk8uX to an issue with fixVersion 8-pool. This looks like an oversight in Backports.java.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yscb:",9223372036854775807,,,,,,,,,,,,"2022-10-04 13:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1389
Date: 2022-10-04 19:58:33 +0000;;;","2022-10-07 13:01;roboduke;Changeset: 68b4f587
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-10-07 20:00:34 +0000
URL:       https://git.openjdk.org/skara/commit/68b4f58708ef4c113a81ce38455192a692f4c86b
;;;",,,,,,,,,,,,,,,,,,,,,
Validate input from /summary command,SKARA-1625,5084675,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,erikj,erikj,2022-10-04 09:01,2022-11-02 09:47,2023-10-01 09:56,2022-11-02 09:47,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"The /summary command is currently not performing any validation on the input. This makes it possible for a user to either mistakenly or willingly enter a bad summary that will cause CheckRuns to fail with exceptions when parsing the commit message. Once in this state, there is currently no way for the PR bot to recover. (Clearing the summary with an empty /summary command doesn't work, because the bot wants to run CheckWorkItem first, which is failing)

I would like to fix this in two ways:

1. Add validation to the SummaryCommand that makes sure the resulting commit comment is valid and produces a suitable error message otherwise. It should also check for obvious things that aren't a ""summary"" message, like ""Reviewed-by:"" or ""<bugid>:"".

2. Handle a bad commit message better without throwing exception. If the commit message is invalid, I think this should be treated as an integration blocker instead.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ys5f:",9223372036854775807,,,,,,,,,,,,"2022-10-20 09:37;zsong;Hi Erik,
Could you please give me some examples about invalid summary? 

I just know that if the summary contains ""Co-authored-by:"", ""Reviewed-by:"" and ""Backport-of:"", it will cause some problem. But I couldn't think of more invalid summary.;;;","2022-10-20 10:08;erikj;Also check for lines starting with something that looks like a bugId. Something like: ""^[0-9]+: ""

For the complete answer you need to look at the definition we have for a valid commit message. This was defined in this JEP: https://openjdk.org/jeps/357 (Note that the regex for bugid there is exactly 8 digits. This is currently true for the JDK project, but Skara needs to support other projects as well (where new bugIds start from 1), and eventually the JDK project will flip over to 9 digits.);;;","2022-10-21 14:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1401
Date: 2022-10-21 21:08:55 +0000;;;","2022-11-02 09:47;roboduke;Changeset: dedb1571
Author:    Zhao Song <zsong@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-11-02 16:46:47 +0000
URL:       https://git.openjdk.org/skara/commit/dedb157185c92780f645b985e913f64d5ddbedf4
;;;",,,,,,,,,,,,,,,,,,,
Add GitHub user macarte,SKARA-1622,5084443,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,macarte,macarte,2022-09-29 12:27,2022-09-29 16:29,2023-10-01 09:56,2022-09-29 16:29,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yqpv:",9223372036854775807,,,,,,,,,,,,"2022-09-29 16:29;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,
Add GitHub user bric3,SKARA-1621,5084402,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,bdutheil,bdutheil,2022-09-29 02:35,2022-09-29 05:53,2023-10-01 09:56,2022-09-29 05:01,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,For reference here's the github link : https://github.com/bric3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yqgr:",9223372036854775807,,,,,,,,,,,,"2022-09-29 05:01;kcr;Done.;;;","2022-09-29 05:53;bdutheil;Cool thank you @Kevin;;;",,,,,,,,,,,,,,,,,,,,,
Add GitHub user benty-amzn,SKARA-1620,5084371,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,btaylor,btaylor,2022-09-28 15:11,2022-09-28 16:37,2023-10-01 09:56,2022-09-28 16:37,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,https://github.com/benty-amzn,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yq9v:",9223372036854775807,,,,,,,,,,,,"2022-09-28 16:37;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,
CSR bot failed to update PR when CSR was approved,SKARA-1618,5084261,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2022-09-27 13:14,2022-10-07 13:02,2023-10-01 09:56,2022-10-07 13:02,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"This CSR JDK-8293975 was approved yesterday but the associated PR didn't update: https://github.com/openjdk/jdk/pull/10324. The user worked around it by adding a comment to the PR and was able to integrate.

I have browsed logs and tried to reproduce but I'm unable to reproduce the issue. The IssueWorkItem is finding the main bug from the CSR and I see it is listing comments, but then it's not mapping to the PR. I'm not sure, but it kinda looks like it's not getting any comments to parse, but I'm not completely sure.

Unclear what to do about this now, but recording it here to have a record.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yplf:",9223372036854775807,,,,,,,,,,,,"2022-09-27 16:40;dholmes;I have the same problem with

https://github.com/openjdk/jdk/pull/10352

The CSR was approved yesterday.;;;","2022-09-28 07:49;gli;I suspect the `csr` bot which triggers updating the pull request and the `notify` bot which adds the pull request link don't have the same issue tracker account. So the method `PullRequestUtils#pullRequestCommentLink` can't find any pull request link when filtering `comment.author().equals(issue.project().issueTracker().currentUser()`.

Could somebody in Oracle help to check the configuration? The related code is at `BotRunnerConfiguration#parseIssueHosts`. The configuration seems like `issuetrackers --> jira --> username`.;;;","2022-10-04 13:54;erikj;That would be a good guess, but from what I can see, it's Robo Duke everywhere.;;;","2022-10-05 09:16;erikj;I think I have figured it out. This is caused by a mistake in the CSRBotFactory. I intended to create one CSRIssueBot instance for each unique IssueProject, but end up creating one for each repository instead. The reason for this is that JiraProject does not implement hashcode, so storing those in a HashSet does not eliminate duplicates. All of these CSRIssueBot instances will find updated CSR issues and try to spawn CSRIssueWorkItems for them, but only one or two will actually get to run because of the automatic elimination of duplicate WorkItems. Given that we have 10+ repos configured for CSR, the likelihood of the right one getting to run is pretty slim.;;;","2022-10-05 09:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1391
Date: 2022-10-05 16:49:52 +0000;;;","2022-10-07 13:02;roboduke;Changeset: 55084b1b
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-10-07 20:01:59 +0000
URL:       https://git.openjdk.org/skara/commit/55084b1bc6ff1d1d3261c19347a6eb3ec120104d
;;;",,,,,,,,,,,,,,,,,
Add GitHub user JohnTortugo,SKARA-1614,5084167,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,cslucas,cslucas,2022-09-26 13:55,2022-09-26 14:20,2023-10-01 09:56,2022-09-26 14:20,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yp0j:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user merykitty,SKARA-1613,5084143,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,qamai,qamai,2022-09-26 11:32,2022-09-26 11:54,2023-10-01 09:56,2022-09-26 11:54,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,"Please associate my GitHub account with my OpenJDK identity.

https://github.com/merykitty
https://openjdk.org/census#qamai

Thanks a lot.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yov7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Temp workaround GitLab returning 500 when modifying labels,SKARA-1612,5084142,Bug,Resolved,SKARA,Skara,software,darcy,,,P1,Fixed,erikj,erikj,erikj,2022-09-26 11:28,2022-10-13 13:54,2023-10-01 09:56,2022-09-26 14:39,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,"We are currently experiencing an issue where GitLab returns 500 when we add or remove labels to a merge request. The label change still happens though, so to keep things running, I'm going to implement a temporary workaround to ignore the 500 result on these particular REST calls.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1610,SKARA-1636,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2youz:",9223372036854775807,,,,,,,,,,,,"2022-09-26 11:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1384
Date: 2022-09-26 18:31:07 +0000;;;","2022-09-26 14:39;roboduke;Changeset: b061577e
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-09-26 21:38:43 +0000
URL:       https://git.openjdk.org/skara/commit/b061577e3ed45b464e73b865d8b73528b9166e07
;;;",,,,,,,,,,,,,,,,,,,,,
Add GitHub user rgiulietti,SKARA-1609,5084132,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,rgiulietti,rgiulietti,2022-09-26 08:13,2022-09-26 08:32,2023-10-01 09:56,2022-09-26 08:32,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yosr:",9223372036854775807,,,,,,,,,,,,"2022-09-26 08:32;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,
Handle shenandoah tags in IssueNotifier,SKARA-1608,5084038,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-09-23 08:56,2022-11-22 09:30,2023-10-01 09:56,2022-11-16 09:25,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"As discussed in SKARA-1574, we need to add Skara support for the new shenandoah project style tags when matching them against a fixVersion in the IssueNotifier.

In the shenandoah repo, this is en example fixversion ""shenandoah8u332"" and this is a corresponding tag ""shenandoah8u332-b01"". In other cases, any prefix to an 8u style fix version would be ignored in when matching tag versions (e.g. fixversion ""openjdk8u332"" uses tags ""jdk8u332""). To handle this I propose introducing a configuration setting for the issue notifier that specifies that tag and version prefix need to match.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1574,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yo7v:",9223372036854775807,,,,,,,,,,,,"2022-10-04 07:46;andrew;Tag format is now present: https://github.com/openjdk/shenandoah-jdk8u/releases/tag/shenandoah8u332-b01;;;","2022-10-04 07:51;andrew;Is it preferable to wait for this change before pushing further tags?;;;","2022-10-04 08:28;erikj;Until this is fixed, you may get bad ""Resolved in Build"" updates based on the mainline tags. Other than that, I don't think anything bad will happen from adding the new tags.;;;","2022-10-31 15:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1406
Date: 2022-10-31 22:03:19 +0000;;;","2022-11-16 09:25;roboduke;Changeset: 803be3fa
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-11-16 17:24:31 +0000
URL:       https://git.openjdk.org/skara/commit/803be3fa1301ec01bbd2548fe204b3379596c677
;;;","2022-11-18 11:36;erikj;I believe I have all the configuration correct now so you will get automatic resolving of bugs with the shenandoah version (including for vulnerability issues) as well as tag notifications to the Resolved In Build field. I did rerun the shenandoah8u332-b01 tag and that updated a bunch of backports.;;;","2022-11-22 09:30;andrew;Great news, thanks Erik! I've got a merge of 8u332-b02 waiting locally so I'll give that a try.;;;",,,,,,,,,,,,,,,,
PullRequestPoller always processes the last updated MR for GitLab,SKARA-1606,5083973,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-09-22 10:48,2022-10-07 11:02,2023-10-01 09:56,2022-10-07 11:02,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"The new PullRequestPoller from SKARA-1565 is inefficient in combination with GitLab. In the most common case, when no MRs have been updated, you would expect it to only do one GET query and be done. Instead, that initial query will always return the last updated MR, and then continue to fetch all the metadata for it, which adds up to a lot of time.

This was supposed to be mitigated with the ""paddingNeeded"" boolean field, which tracks when we need to apply the query padding on the updatedAfter parameter. Unfortunately, this isn't enough for GitLabRepository. The merge_requests REST API specifies the ""updated_after"" parameter like this:

""Return merge requests updated on or after the given time. Expected in ISO 8601 format (2019-03-15T08:00:00Z).""

So the timestamp is inclusive as well as only on 1s resolution. This creates a similar situation like we have in the IssuePoller, where Jira queries have a resolution of 1 minute. In comparison, the GitLabRepository does the timestamp filtering on the client side, using an exclusive ZonedDateTime::isAfter check. What this amounts to is basically this:

GitLabRepository::pullRequestsAfter(myPr.updatedAt()) -> will include myPr
GitHubRepository::pullRequestsAfter(myPr.updatedAt()) -> will not include myPr

I see two possible ways of solving this:

1. Add client side filtering on timestamps in GitLabRepository, to make the semantics the same between GitLabRepository and GitHubRepository.

2. Implement the same kind of padding for the updatedAfter parameter in PullRequestPoller as we already have in IssuePoller. That means, when enough time has passed since we last found something (1s in this case), we add 1s to the updatedAfter parameter.

Alternative 1 is simpler, and having semantic parity between the two implementations would be good. However, it depends on us being able to trust that the internal timestamp resolution on the forges is high enough that two PRs can't end up with the same updatedAt timestamps, while only one is returned from an updatedAfter query at that same time. If we choose to not trust that, then we need to fix 1 by changing GitHubRepository to have an inclusive check, and do 2 as well. I'm choosing to do the latter.

Another inefficiency is the amount of queries a GitLabMergeRequest needs to perform to gather comments and reviews. These are fetched for all MRs by the poller as we need to potentially compare them for updates. In reality, both of these are stored as ""notes"" by GitLab and if we only need them for comparison purposes, we can just fetch all notes in a single query. I think we can abstract this with a new method on PullRequest that returns an Object that we only use for isUpdated comparisons. Adding a lazy cache for this snapshot will also help, as PullRequestPoller currently needs to call it twice for most PRs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yntf:",9223372036854775807,,,,,,,,,,,,"2022-09-22 14:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1380
Date: 2022-09-22 21:20:19 +0000;;;","2022-10-07 11:02;roboduke;Changeset: 4b40646d
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-10-07 18:01:53 +0000
URL:       https://git.openjdk.org/skara/commit/4b40646da7589e3dd88e34d00112bddc3dd1428b
;;;",,,,,,,,,,,,,,,,,,,,,
Unify behavior in gradlew and gradlew.bat,SKARA-1604,5083602,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2022-09-16 10:24,2022-09-20 12:19,2023-10-01 09:56,2022-09-20 12:19,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,"I recently needed to run the Skara test suite on Windows and had some issues with the gradlew.bat launcher script. It's probably not used much as the gradlew bash script works fine in Cygwin, but I specifically wanted to verify running the tests without any Cygwin involvement. The problem is that they aren't downloading and extracting the JDK and Gradle in the same locations, but the two locations interfere with each other.

I'm changing the gradlew.bat script to download and extract in the same locations as gradlew, so that running either script interchangeably works fine in the same workspace.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yliz:",9223372036854775807,,,,,,,,,,,,"2022-09-16 10:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1377
Date: 2022-09-16 17:26:27 +0000;;;","2022-09-20 12:19;roboduke;Changeset: f7103d7d
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-09-20 18:05:48 +0000
URL:       https://git.openjdk.org/skara/commit/f7103d7dedaca89afddd1d8734d88f8674436705
;;;",,,,,,,,,,,,,,,,,,,,,
Make labels handling consistent in all Issue implementations,SKARA-1603,5083519,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,erikj,erikj,2022-09-15 14:50,2022-10-05 05:53,2023-10-01 09:56,2022-10-05 05:53,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,"When investigating SKARA-1602, I realized that the way labels are handled in the new TestIssue/TestPullRequest is consistent with JiraIssue, but not with GitHubPullRequest and GitLabMergeRequest. This discrepancy may be hiding buggy behavior, or will at least risk introducing bugs in the future.

In JiraIssue, the add/remove/set label methods only updates the server through a REST call, but the locally cached value does not change. This is also how TestIssue was implemented. But in the PullRequest implementations, add/remove/set label also updates the local cache, so that future labels/labelNames calls will reflect those updates.

I think the most consistent behavior would be to make all implementations update the cache so that added or removed labels are properly reflected. This should cause the least confusion.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1602,SKARA-1589,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yl0j:",9223372036854775807,,,,,,,,,,,,"2022-09-30 13:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1387
Date: 2022-09-30 20:18:42 +0000;;;","2022-10-05 05:53;roboduke;Changeset: 32a07238
Author:    Zhao Song <zsong@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-10-05 12:53:07 +0000
URL:       https://git.openjdk.org/skara/commit/32a07238fde7773d64f0330e76d77f8d5d44f82a
;;;",,,,,,,,,,,,,,,,,,,,,
Add GitHub user jdksjolen,SKARA-1600,5083408,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,jsjolen,jsjolen,2022-09-14 07:14,2022-09-14 07:31,2023-10-01 09:56,2022-09-14 07:31,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,"Please associate my Github account with my OpenJDK account, thank you!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ykbv:",9223372036854775807,,,,,,,,,,,,"2022-09-14 07:31;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,
Add GitHub user janto001,SKARA-1599,5083407,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,aj,aj,2022-09-14 07:01,2022-09-14 14:12,2023-10-01 09:56,2022-09-14 14:12,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,"Request for Link my GitHub account with my openjdk id
my openjdkid is: aj",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ykbn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GitRepository.isHealthy takes a long time in ArchiveWorkItem,SKARA-1598,5083402,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-09-14 06:14,2022-12-14 09:04,2023-10-01 09:56,2022-12-14 09:04,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"A common operation for several WorkItems is to materialize a handful of repos. Most of the time, there are already local copies available that just need to fetch the latest. This seems like a reasonably efficient strategy. However, before using a local copy, the materialize method will first check Repository::isHealthy. For Git repos this will run:

'git fsck --connectivity-only'

Depending on the repo this is run on, it can take a lot of time. Luckily, our JDK repos usually take <10s. The mlbridge archive repo doesn't fair so well however, taking between 45s and 1m15s currently, and this time is just expected to increase over time, as we send more and more emails that get archived. In the JDK (or other product) repo case, I don't think we can get around this. Operating on the target repos is Skara's main job. However, using repositories for metadata storage and treating them the same way was not a great design decision. Especially for data where each user/WorkItem only cares for a very small part of the data, but still has to keep a complete copy of all the data up to date. This just doesn't scale well.

Changing the backend storage model for these metadata repos is probably too much work at this point, but we can do things to improve the current situation. For the mlbridge archive repo specifically, each ArchiveWorkItem only reads and writes to a single file in the repo. So instead of requiring a local clone of the complete repo and spending a whole minute making sure it's healthy, we could just fetch the contents of the single file we are interested in from the HostedRepository and then write back the new version in the same way, using the REST API. This should speed up mailing operations quite a bit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ykaj:",9223372036854775807,,,,,,,,,,,,"2022-12-12 15:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1442
Date: 2022-12-12 23:52:50 +0000;;;","2022-12-14 09:04;roboduke;Changeset: affcd47d
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-12-14 17:03:29 +0000
URL:       https://git.openjdk.org/skara/commit/affcd47dcc5c996fd2c1bcfcf13c7a2b904688a4
;;;",,,,,,,,,,,,,,,,,,,,,
Add GitHub user DingliZhang,SKARA-1593,5083173,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,kcr,dzhang,dzhang,2022-09-09 18:57,2022-09-10 06:42,2023-10-01 09:56,2022-09-10 06:42,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,"Please associate my GitHub account with my OpenJDK identity.

https://github.com/DingliZhang
https://openjdk.org/census#dzhang",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yivn:",9223372036854775807,,,,,,,,,,,,"2022-09-10 06:42;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,
Add GitHub user bwhuang-us,SKARA-1592,5083171,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,bhuang,bhuang,2022-09-09 15:17,2023-04-13 10:53,2023-10-01 09:56,2022-09-12 09:49,,,,,,,,bots,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yiv7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adding review comments should not mean approval status change,SKARA-1587,5083074,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,ihse,ihse,2022-09-08 04:46,2022-11-02 09:46,2023-10-01 09:56,2022-11-02 09:46,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"In Github, if a user leaves additional comments using the ""Review changes"" dialog, and selects the ""Comments"", then their approval is considered revoked. This is surprising. Selecting ""Changes requested"" should be considered a revoke of the approval, but just adding comments should not change the state of approval.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yi9n:",9223372036854775807,,,,,,,,,,,,"2022-10-19 12:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1399
Date: 2022-10-19 19:22:42 +0000;;;","2022-11-02 09:46;roboduke;Changeset: ee75ee0a
Author:    Zhao Song <zsong@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-11-02 16:45:38 +0000
URL:       https://git.openjdk.org/skara/commit/ee75ee0a81c3098576c559b2bc9bd5317042a8a2
;;;",,,,,,,,,,,,,,,,,,,,,
Add GitHub user eastig,SKARA-1585,5083031,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,eastigeevich,eastigeevich,2022-09-07 13:40,2022-09-07 13:59,2023-10-01 09:56,2022-09-07 13:59,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,"Hi,

I am an OpenJDK Committer: https://openjdk.org/census#eastigeevich

Could you associate my GitHub account https://github.com/eastig with my OpenJDK username eastigeevich?

Thanks,
Evgeny Astigeevich",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yi03:",9223372036854775807,,,,,,,,,,,,"2022-09-07 13:59;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,
/integrate defer should be named /integrate delegate,SKARA-1582,5082846,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,ihse,ihse,2022-09-05 01:54,2022-11-04 08:42,2023-10-01 09:56,2022-11-02 13:01,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"The ""/integrate defer"" command name is a bit unfortunate. It is easy to confuse it with ""/integrate auto"", which will automatically integrate when all formal prerequisites are fulfilled; which of course is one way to defer an integration.

A better name would have been ""/integrate delegate"", since that is what it does -- it gives any other committer the right to integrate.

We should introduce ""/integrate delegate"", at least as an alias. Preferably we should also mark ""/integrate defer"" as deprecated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ygv7:",9223372036854775807,,,,,,,,,,,,"2022-10-27 11:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1404
Date: 2022-10-27 18:19:06 +0000;;;","2022-11-02 13:01;roboduke;Changeset: 5d9dcc24
Author:    Zhao Song <zsong@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-11-02 20:00:36 +0000
URL:       https://git.openjdk.org/skara/commit/5d9dcc24a74ed4e960b79ee2aec35d3e3dc8dbab
;;;","2022-11-04 06:31;kcr;The Wiki page for the ""/integrate"" command needs to be updated to reflect this change:

https://wiki.openjdk.org/display/SKARA/Pull+Request+Commands#PullRequestCommands-/integrate

;;;","2022-11-04 08:42;zsong;Thanks for reminding, Kevin! This patch hasn't been deployed to the service skara bots. So I think if we update the wiki page right now, it might confuse some people. After the skara bots is re-deployed, I will update the wiki page ASAP.;;;",,,,,,,,,,,,,,,,,,,
Commit command error message misleading,SKARA-1581,5082792,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,erikj,erikj,2022-09-02 06:23,2022-11-02 09:53,2023-10-01 09:56,2022-11-02 09:53,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"When a github user without an associated openjdk census account issues any of the commit commands (`/backport` or `/tag`), they are greeted with the following error message:

@user Only OpenJDK contributors can use the /backport command

With the word contributor being a link to: https://openjdk.org/bylaws#contributor

Where the definition of contributor reads:
A Contributor is a Participant who has signed the Oracle Contributor Agreement (OCA), or who works for an organization that has signed that agreement or its equivalent and makes contributions within the scope of that work and subject to that agreement. A Contributor may submit changes larger than a simple patch, may propose new Projects, and may take on various roles within Groups and Projects.

What the error message really should be saying is that you need to be in the OpenJDK census and that your github account needs to be linked with it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ygj7:",9223372036854775807,,,,,,,,,,,,"2022-10-27 13:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1405
Date: 2022-10-27 20:57:44 +0000;;;","2022-11-02 09:53;roboduke;Changeset: c694b0e6
Author:    Zhao Song <zsong@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-11-02 16:53:14 +0000
URL:       https://git.openjdk.org/skara/commit/c694b0e6de26fcf1be381b163dd55e6760a3c07c
;;;",,,,,,,,,,,,,,,,,,,,,
Add GitHub user zhaosongzs,SKARA-1579,5082721,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,zsong,zsong,2022-09-01 15:41,2022-10-04 14:28,2023-10-01 09:56,2022-10-04 14:28,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yg3f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user Bhavana-Kilambi,SKARA-1577,5082641,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,bkilambi,bkilambi,2022-09-01 03:02,2022-09-01 05:11,2023-10-01 09:56,2022-09-01 05:11,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,"My GitHub user name is ""Bhavana-Kilambi"". Please associate my Openjdk user name ""bkilambi"" with my github username ""Bhavana-Kilambi"". As appropriate please also add me to the OpenJDK github organization. Thank you. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yfln:",9223372036854775807,,,,,,,,,,,,"2022-09-01 05:11;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,
The method 'IssueWorkItem#run' may get the wrong pull request,SKARA-1569,5082400,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,gli,gli,gli,2022-08-27 00:03,2022-09-02 07:31,2023-10-01 09:56,2022-09-02 07:31,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"When one issue has two PRs in the same repository and one PR is in state `open` and another PR is in state `closed`, the method 'IssueWorkItem#run' may get the wrong PR which is in state `closed`.

The related code is shown below. The `findAny` method causes this bug. We should get all the corresponding PRs firstly and then filter the open PRs.

```

        Stream.concat(mainIssue.stream(), backports.stream())
                .flatMap(i -> PullRequestUtils.pullRequestCommentLink(i).stream())
                .map(uri -> bot.repositories().stream()
                        .map(r -> r.parsePullRequestUrl(uri.toString()))
                        .flatMap(Optional::stream)
                        .findAny())
                .flatMap(Optional::stream)
                .map(pr -> new PullRequestWorkItem(pr.repository(), pr.id(), csrIssue.project()))
                .forEach(ret::add);
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ye43:",9223372036854775807,,,,,,,,,,,,"2022-09-01 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1366
Date: 2022-09-01 07:30:00 +0000;;;","2022-09-02 07:31;roboduke;Changeset: 7000e67e
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2022-09-02 14:30:44 +0000
URL:       https://git.openjdk.org/skara/commit/7000e67eed6e8dcaf31fb94e63299e3ee1715050
;;;",,,,,,,,,,,,,,,,,,,,,
Dependency PR Resolution Detection Does Not Check Means of Resolution,SKARA-1568,5082336,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,andrew,andrew,2022-08-26 08:07,2022-09-08 09:05,2023-10-01 09:56,2022-09-08 09:05,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"When a PR that dependency on another PR is closed, the dependent PR is updated to apply against the master branch:

https://github.com/openjdk/jdk8u-dev/pull/71#event-7078228994

However, SKARA does not seem to take into account that the PR may have been closed for other reasons than integration. In this case, the dependency, https://github.com/openjdk/jdk8u-dev/pull/66, timed out, but SKARA still tried to update the dependent as if it had been integrated.

I only spotted this when trying to work out what the AArch64 changes were in the changes on GitHub. These changes were not in the generated webrev https://openjdk.github.io/cr/?repo=jdk8u-dev&pr=71&range=01",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ydzf:",9223372036854775807,,,,,,,,,,,,"2022-08-31 22:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1365
Date: 2022-09-01 05:29:35 +0000;;;","2022-09-08 09:05;roboduke;Changeset: 08693831
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2022-09-08 16:04:35 +0000
URL:       https://git.openjdk.org/skara/commit/08693831f52227eff57da8357f712bdf5a2b0bf7
;;;",,,,,,,,,,,,,,,,,,,,,
Add GitHub user mernst,SKARA-1566,5082295,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,mernst,mernst,2022-08-25 12:53,2022-08-25 14:01,2023-10-01 09:56,2022-08-25 14:01,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,"I have already signed the OCA.

This is related to https://github.com/openjdk/jdk/pull/10029 .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ydqb:",9223372036854775807,,,,,,,,,,,,"2022-08-25 14:01;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,
Backport command fails to load census,SKARA-1560,5082217,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2022-08-24 13:48,2022-08-25 10:43,2023-10-01 09:56,2022-08-25 10:43,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"In the PR bot module, there is a class, CensusInstance, that handles loading of the census from the backing datastore. This class will eagerly load everything at instance creation. Depending on the context from where the census is loaded, we may not always be able to resolve every part of the census, more specifically the Project may not be resolvable in certain cases. One such case is a commit command that gets issued on a very old commit, where the .jcheck/conf file points to an old inactive project, which may not be defined in the census data.

If this happens, we end up with the bot endlessly retrying and always failing to resolve the census project. In the case of commit commands, none of them are using the project data today, so a simple fix to this problem would be to lazy load the project data. It's not a very nice solution, I would prefer to have this supported by types instead, so that it's clear that the CensusInstance returned for commit commands does not have a project.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1558,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yd8z:",9223372036854775807,,,,,,,,,,,,"2022-08-24 14:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1362
Date: 2022-08-24 21:25:25 +0000;;;","2022-08-25 10:43;roboduke;Changeset: c7fc108a
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-08-25 17:42:43 +0000
URL:       https://git.openjdk.org/skara/commit/c7fc108a271580fa7e6afecf290d5ba0fafeba05
;;;",,,,,,,,,,,,,,,,,,,,,
Add GitHub user zapster,SKARA-1550,5081926,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,jeisl,jeisl,2022-08-19 01:53,2022-08-19 04:47,2023-10-01 09:56,2022-08-19 04:47,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,"https://github.com/openjdk/jdk/pull/6513/files#r949950843
{quote}


Hi @zapster, thanks for making a comment in an OpenJDK project!

All comments and discussions in the OpenJDK Community must be made available under the OpenJDK Terms of Use. If you already are an OpenJDK Author, Committer or Reviewer, please click here to open a new issue so that we can record that fact. Please Use ""Add GitHub user zapster for the summary.

If you are not an OpenJDK Author, Committer or Reviewer, simply check the box below to accept the OpenJDK Terms of Use for your comments.

    I agree to the OpenJDK Terms of Use for all comments I make in a project in the OpenJDK GitHub organization.

Your comment will be automatically restored once you have accepted the OpenJDK Terms of Use.
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ybgb:",9223372036854775807,,,,,,,,,,,,"2022-08-19 04:47;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,
Census Namespace missing hashCode and equals,SKARA-1542,5081473,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-08-11 13:37,2022-08-11 14:41,2023-10-01 09:56,2022-08-11 14:41,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,"The other data classes in the Census module have hashCode and equals implemented, but the Namespace class does not. This is preventing the change in SKARA-1529 from actually taking effect, as we can't compare two instances of Namespace to see if they have the same contents.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1527,,,,,,,,SKARA-1529,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y8nn:",9223372036854775807,,,,,,,,,,,,"2022-08-11 13:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1356
Date: 2022-08-11 20:40:10 +0000;;;","2022-08-11 14:41;roboduke;Changeset: 4ac1e709
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-08-11 21:40:46 +0000
URL:       https://git.openjdk.org/skara/commit/4ac1e7097f69435ede9eb8aaa7b662ba7eea8679
;;;",,,,,,,,,,,,,,,,,,,,,
Allow dots in merge PR branch name,SKARA-1539,5081406,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,mikael,mikael,2022-08-10 16:38,2022-08-11 10:42,2023-10-01 09:56,2022-08-11 10:42,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"The regex used to match merge style PR titles is currently ""^Merge ([-/\w:+]+)$"". This does not match/support merging from branch names containing dots (e.g. ""jdkX.0.1"").",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y88r:",9223372036854775807,,,,,,,,,,,,"2022-08-11 03:45;kcr;I think the fix may be as simple as:

--- a/forge/src/main/java/org/openjdk/skara/forge/PullRequestUtils.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/PullRequestUtils.java
@@ -39,7 +39,7 @@ public class PullRequestUtils {
                                 committer.name(), committer.email(), ZonedDateTime.now(), List.of(targetHash(localRepo)), localRepo.tree(finalHead));
     }

-    private final static Pattern mergeSourcePattern = Pattern.compile(""^Merge ([-/\\w:+]+)$"");
+    private final static Pattern mergeSourcePattern = Pattern.compile(""^Merge ([-\\./\\w:+]+)$"");
     private final static Pattern hashSourcePattern = Pattern.compile(""[0-9a-fA-F]{6,40}"");

     private static Optional<Hash> fetchRef(Repository localRepo, URI uri, String ref) {
;;;","2022-08-11 06:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1355
Date: 2022-08-11 13:51:02 +0000;;;","2022-08-11 10:42;roboduke;Changeset: 1b79f292
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-08-11 17:41:37 +0000
URL:       https://git.openjdk.org/skara/commit/1b79f292f76562be87681fbd115e031ae667dfc0
;;;",,,,,,,,,,,,,,,,,,,,
SponsorCommand can fail indefinitely with '/integrate auto',SKARA-1537,5081373,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2022-08-10 10:18,2022-08-11 15:27,2023-10-01 09:56,2022-08-11 15:27,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"If an author without integration permission issues '/integrate auto' and a committer then issues '/sponsor' before after the PR is marked with label 'auto', but before the bot has added the automatic '/integrate' and posted the 'ready for sponsor message', then the SponsorCommand will get stuck in a failure loop like this:

java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.orElseThrow(Optional.java:377)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.SponsorCommand.handle(SponsorCommand.java:62)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommandHandler.handle(CommandHandler.java:42)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.PullRequestCommandWorkItem.processCommand(PullRequestCommandWorkItem.java:144)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.PullRequestCommandWorkItem.prRun(PullRequestCommandWorkItem.java:193)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.PullRequestWorkItem.run(PullRequestWorkItem.java:66)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.runMeasured(BotRunner.java:236)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:186)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

Together with SKARA-1534, this is also causing the bot to repost '/integrate' over and over again.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y81f:",9223372036854775807,,,,,,,,,,,,"2022-08-10 14:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1354
Date: 2022-08-10 21:21:40 +0000;;;","2022-08-11 15:27;roboduke;Changeset: 16025165
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-08-11 22:27:18 +0000
URL:       https://git.openjdk.org/skara/commit/16025165f07d96d3a698c651d229d6980bc0e6ee
;;;",,,,,,,,,,,,,,,,,,,,,
"The method ""JiraIssue#setState"" is invalid when using the argument ""State.CLOSED""",SKARA-1536,5081367,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,gli,gli,2022-08-10 07:27,2022-08-10 10:10,2023-10-01 09:56,2022-08-10 10:10,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"When the method ""JiraIssue#setState"" is invoked with the argument ""State.CLOSED"", it can't work as expected. This bug has never occured in the past because the current SKARA code (including the tests) never invoke ""JiraIssue#setState"" with the argument ""State.CLOSED"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y803:",9223372036854775807,,,,,,,,,,,,"2022-08-10 07:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1353
Date: 2022-08-10 14:46:18 +0000;;;","2022-08-10 10:09;roboduke;Changeset: 670ec1e5
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2022-08-10 17:08:54 +0000
URL:       https://git.openjdk.org/skara/commit/670ec1e53a33037ea6f484f1336070c4718d0094
;;;",,,,,,,,,,,,,,,,,,,,,
Bot posts multiple /integrate commands,SKARA-1534,5081308,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-08-09 13:45,2022-08-11 15:27,2023-10-01 09:56,2022-08-11 15:27,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"In this PR, ""/integrate auto"" was used. The bot got a bit too enthusiastic and posted '/integrate' 3 times in a short amount of time. This didn't cause any real issues, more than looking bad and triggering a warning from another bot. The PR was still integrated as expected.

https://github.com/openjdk/jdk/pull/9812",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y7mz:",9223372036854775807,,,,,,,,,,,,"2022-08-10 01:03;gli;The bot processes the commands in order now. Erik, what is your expection about this situation? Let the bot skip the other two duplicated commands?;;;","2022-08-10 05:49;erikj;My expectation would be that the bot would only post ""/integrate"" once. This is likely caused by a race, but I haven't investigated yet.;;;","2022-08-10 06:27;gli;I know what you mean now. I misunderstand the usage of the command `/integrate auto` in the past. The bot posted the command `integrate` three times which is wrong, but I misread that the developer typed `/integrate` three times in the PR.;;;","2022-08-10 09:34;erikj;Looks like this is also happening with /sponsor, and much more than 3 times. I suspect this is caused by SKARA-1530.;;;","2022-08-10 14:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1354
Date: 2022-08-10 21:21:40 +0000;;;","2022-08-11 15:27;roboduke;Changeset: 16025165
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-08-11 22:27:18 +0000
URL:       https://git.openjdk.org/skara/commit/16025165f07d96d3a698c651d229d6980bc0e6ee
;;;",,,,,,,,,,,,,,,,,
CSRBot is too inefficient,SKARA-1532,5081213,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-08-08 13:05,2022-08-22 15:58,2023-10-01 09:56,2022-08-19 09:53,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,"The CSRBot has started causing some problems in the execution environment. One round of the CSRBot WorkItem for the jdk repo is currently taking ~48 minutes. These WorkItems (one for each configured repository) are always running back to back, essentially completely hogging one execution thread each in the BotRunner. This is both taking away resources from other bots/WorkItems as well as making the average response times for CSR updates to PRs much longer than what users would expect. 

The reason it ended up this way is because how SKARA-1308 and SKARA-1071 were implemented. There is just one kind of WorkItem, and it reads all open PRs to find which JBS issues it needs to check for CSR updates. The jdk repo currently has 200+ open PRs, so that is a lot of PRs and JBS issues to trawl through on each round. When starting with the PRs, there there is no way of limiting what to look at, as you can't know which JBS issues you actually need to look at until you have looked through the complete backport list for CSR links. As described in SKARA-1308, just looking at updated PRs, or updated JBS issues isn't enough to detect changes in the CSR JBS issues.

I think that to be able to solve this, we will need to change things on a fundamental level. We need two different WorkItems. One that triggers on PR updates and one that triggers on JBS updates. The new WorkItem would work similar to the SyncLabelBot, and look at every updated issue in JBS that has type CSR. The current WorkItem could continue to work like today, but would preferably be split to have one WorkItem created per PR instead of one per repo. A PR WorkItem would also only be created for PRs that have changed since the last check.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1554,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y72b:",9223372036854775807,,,,,,,,,,,,"2022-08-10 15:27;erikj;I have a reasonable implementation for this on the Skara side now, but one thing still needs to be polished: the actual querying of JBS to find updated CSR issues.

There are two main issues:

1. Jira only has time based queries on a resolution of minutes. This means we will quite frequently return the same issues more than one time. With the intended query interval (if the system is running as expected) of 30s, this would mean that around half of the issues would be returned twice. To avoid the rather costly re-evaluation this would lead to, we need to implement a filter for recently found issues.

The current SyncLabelBot solves this by putting every returned Issue in a Map and when an issue is returned again, the updatedAt timestamp is compared with the one in the map. This works, but is essentially a memory leak as the map is never pruned.

I think a better solution would be to only store a current and a previous map, so we can always throw away the previous map when we are done with the current evaluation.

2. Trusting time between separate services on a network is always a hassle, especially if it needs to be in relation to some notion of ""now"". If we perform the query with absolute times as recorded on the Skara bot host, we may end up missing issues if the Skara clock is ahead of the Jira clock. If we instead opt for relative time queries, delays in execution may cause us to miss issues. 

The current SyncLabelBot solves this by using relative time and padding the timestamp range very generously (30m extra). This probably works well enough, but still is no guarantee that nothing is missed if there is a longer network outage.

My solution here is to only use timestamps originating from Jira when performing the query. By saving the highest updatedAt previously received from any issue, we can use that for the next query. This leaves the initial query needing a special case. The best solution I can think of there is to simply ask for all issues, sorted by updatedAt time and limit results to 1.

In addition to this, we probably need to actively configure the correct timezone. The timezone is configured per user in Jira, and any absolute timestamps in queries need to be in that timezone. I think the easiest solution here is to add the timezone of the bot user to the issuetracker configuration so we can convert any timestamps before generating any query strings.

Another improvement in this case would be to only query for issues of CSR type. I think that would be worth it too.;;;","2022-08-12 15:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1357
Date: 2022-08-12 22:19:58 +0000;;;","2022-08-19 09:53;roboduke;Changeset: 972cbb68
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-08-19 16:52:10 +0000
URL:       https://git.openjdk.org/skara/commit/972cbb685e9406ec9d245fd201e4182f7a2c0a6f
;;;",,,,,,,,,,,,,,,,,,,,
Fix spotless finding after JMC-7903,JMC-7910,5084398,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2022-09-29 02:17,2023-01-11 02:36,2023-10-01 09:56,2022-09-29 04:58,,,,,,,8.3.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,"After resolving JMC-7903, spotless bails out:

Error: Failed to execute goal com.diffplug.spotless:spotless-maven-plugin:2.14.0:check (default-cli) on project common: The following files had format violations:
Error: src/main/java/org/openjdk/jmc/common/collection/FastAccessNumberMap.java
Error: @@ -255,4 +255,4 @@
Error: \t\t\tthrow·new·UnsupportedOperationException();
Error: \t\t}
Error: \t}
Error: -}
Error: +}
Error: Run 'mvn spotless:apply' to fix these violations.
Error: -> [Help 1]
Error: 
Error: To see the full stack trace of the errors, re-run Maven with the -e switch.
Error: Re-run Maven using the -X switch to enable full debug logging.
Error: 
Error: For more information about the errors and possible solutions, please read the following articles:
Error: [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
Error: 
Error: After correcting the problems, you can resume the build with the command
Error: mvn <args> -rf :common
Error: Process completed with exit code 1.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yqfv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41b535f7,,,,,,,,,"2022-09-29 02:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/433
Date: 2022-09-29 09:20:10 +0000;;;","2022-09-29 04:58;roboduke;Changeset: 9d99d881
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-09-29 11:57:54 +0000
URL:       https://git.openjdk.org/jmc/commit/9d99d8819e020b98f11ae6a8d2950d8fbed00382
;;;",,,,,,,,,,,,,,,,,,,,,
FastAccessNumberMap is slow for sparse values,JMC-7903,5084242,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,hirt,hdafgard,hdafgard,2022-09-27 09:14,2023-01-11 02:36,2023-10-01 09:56,2022-09-28 07:58,,,,,,,8.3.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yph7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41b535f7,,,,,,,,,"2022-09-27 09:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/431
Date: 2022-09-27 16:50:00 +0000;;;","2022-09-28 07:58;roboduke;Changeset: 7cd2f3e7
Author:    Richard Startin <richard.startin@datadoghq.com>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2022-09-28 14:53:47 +0000
URL:       https://git.openjdk.org/jmc/commit/7cd2f3e730480c833930e36951f8658b4addead4
;;;",,,,,,,,,,,,,,,,,,,,,
UseCompressedOopsRule has flipped comparison,JMC-7902,5084144,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,hdafgard,hdafgard,hdafgard,2022-09-26 11:47,2023-01-11 02:36,2023-10-01 09:56,2022-09-29 08:55,,,,,,,8.3.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,The UseCompressedOopsRule implementation should look for heaps _smaller_ than 32 GiB. It's currently only triggering on _larger_ heaps.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yovf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@25ad7987,,,,,,,,,"2022-09-28 15:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/432
Date: 2022-09-28 21:53:59 +0000;;;","2022-09-29 08:55;roboduke;Changeset: 1696e03a
Author:    Henrik Dafgård <hdafgard@openjdk.org>
Date:      2022-09-29 15:53:14 +0000
URL:       https://git.openjdk.org/jmc/commit/1696e03a1fddb9cc68d32bf21a281ef24366e552
;;;",,,,,,,,,,,,,,,,,,,,,
JMC Automated UI MasterPasswordTests is failing ,JMC-7892,5082903,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,schaturvedi,bbanathur,bbanathur,2022-09-05 23:32,2023-01-11 02:36,2023-10-01 09:56,2022-09-21 04:07,8.3.0,,,,,,8.3.0,Infrastructure,,0,regression,sqe-8.3.0,,,,,,,,,,,,,,,,,,"JMC Automated UI MasterPasswordTest is failing with the following unhandled exception and requires manual intervention to proceed with further testing.

 

Steps to reproduce.

1) clone the jmc repo into a Windows machine.

2) SET JAVA_HOME=D:\Workspace\Java\JDK11.0.MIN

3). Modify build.bat skip spot bugs and ignore test failures
{code:java}
call mvn verify -P uitests -Dspotbugs.skip=true -Dmaven.test.failure.ignore=true{code}
4. Modify Application.java class  to include display.setCursorLocation(0, 0);

(under jmc\application\org.openjdk.jmc.rcp.application\src\main\java\org\openjdk\jmc\rcp\application) 
{code:java}
Display display = PlatformUI.createDisplay(); display.addListener(SWT.OpenDocument, openDocProcessor); display.setCursorLocation(0, 0);
{code}
5. The MasterPassword related tests are failing with following error message

!image-2022-09-06-12-01-35-695.png|width=584,height=165!

 

 
{code:java}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-09-06 01:18;bbanathur;Windows.log;https://bugs.openjdk.org/secure/attachment/100669/Windows.log","2022-09-05 23:31;bbanathur;image-2022-09-06-12-01-35-695.png;https://bugs.openjdk.org/secure/attachment/100665/image-2022-09-06-12-01-35-695.png","2022-09-20 08:53;bbanathur;uitest.patch;https://bugs.openjdk.org/secure/attachment/100804/uitest.patch",,,,,,,,,,,,,,,,,,,,,"0|i2yh7v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@166a4dc0,,,,,,,,,"2022-09-06 01:18;bbanathur;Attachment <JMC-7892.log> could not be scanned. The system has removed attachment. Please check the file before attempting to upload it again;;;","2022-09-21 01:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/427
Date: 2022-09-21 08:34:29 +0000;;;","2022-09-21 04:07;roboduke;Changeset: de649008
Author:    Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2022-09-21 11:05:56 +0000
URL:       https://git.openjdk.org/jmc/commit/de649008bf4b5eec761c2487e0c8c9069ff5ab31
;;;",,,,,,,,,,,,,,,,,,,,
"Adding artifacts to third-party pom file, which are not getting resolved by maven",JMC-7872,5081200,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,vpurnam,vpurnam,vpurnam,2022-08-08 10:02,2023-01-11 02:35,2023-10-01 09:56,2022-08-16 01:55,,,,,,,8.3.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,"Sometimes below mentioned artifacts are not getting resolved by *mvn p2:site*. 
* jetty-security
* jetty-server
* websocket-core-server
* jetty-xml

These plugins will be missing in jmc -> releng -> third-party -> target ->repository -> plugins.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y6zf:",9223372036854775807,,,,,,,,,,,,"2022-08-08 23:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/418
Date: 2022-08-09 06:00:21 +0000;;;","2022-08-16 01:55;roboduke;Changeset: 195d32c0
Author:    vpurnam <vpurnam@VPURNAM-7420.in.oracle.com>
Committer: Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2022-08-16 08:53:46 +0000
URL:       https://git.openjdk.org/jmc/commit/195d32c00510f28b77756a7f262af5877d371606
;;;",,,,,,,,,,,,,,,,,,,,,
Cyclic constructor error is non-deterministic and inconsistent,JDK-8295024,5084439,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,acobbs,webbuggrp,webbuggrp,2022-09-29 10:01,2023-01-10 19:23,2023-10-01 09:56,2022-10-14 06:54,18,20,,,,,20,tools,,0,20ea,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
openjdk version ""18.0.2.1"" 2022-08-18
OpenJDK Runtime Environment Homebrew (build 18.0.2.1+0)
OpenJDK 64-Bit Server VM Homebrew (build 18.0.2.1+0, mixed mode, sharing)



A DESCRIPTION OF THE PROBLEM :
The ""recursive constructor invocation"" compiler error message is generated when there exist any constructors which (indirectly) invoke themselves.

However, in the case of mutual recursion between two or more constructors, the source code location associated with the error message is generated non-deterministically in two different ways:
1. The choice of which constructor
2. The choice of constructor definition vs. constructor invocation

For example, consider this source file:

    public class Cyclic {
        public Cyclic(int x) {
            this((float)x);
        }
        public Cyclic(float x) {
            this((int)x);
        }
    }

There are two possible error messages that javac will generate:

Error #1:

Cyclic.java:2: error: recursive constructor invocation
    public Cyclic(int x) {
           ^

Error #2:

Cyclic.java:3: error: recursive constructor invocation
        this((float)x);
        ^

Note that in error #1, the Cyclic(int) constructor is the ""culprit"" and its declaration is identified, whereas in error #2 the Cyclic(float) constructor is the ""culprit"" but its invocation is highlighted.

Why is this a problem? Unnecessary non-determinism is, in general, always a problem to avoid if possible. For example, people may have automated scripts that run and expect certain output in certain situations, etc.

To give a more concrete example that is closer to home, consider that it's currently not even possible to add a ""golden output"" negative unit test to OpenJDK for this compiler error - because the output is non-deterministic!

Another problem is that highlighting the constructor declaration (as in the case of Error #1) is less useful than highlighting the point of constructor invocation, because it's a less precise pinpointing of where the problem occurs.

Looking at the code, it's clear the two sources of inconsistency have two different causes:

1. The choice of which constructor

This is caused by the method Check.checkCyclicConstructors() using a HashMap. The keys to the map are Symbol objects, and Symbol does not override hashCode(), so the map is using System.identityHashCode() values which are non-deterministic.

Changing the HashMap to a LinkedHashMap is the easy fix here.

2. The choice of constructor definition vs. constructor invocation

The problem here is that the method TreeInfo.diagnosticPositionFor() is used to identify the error location by searching the AST for a match to the Symbol of the (first) constructor involved in the recursion. However, the Symbol will match the AST at both the constructor's definition and at any point of its invocation. Whichever happens to occur first in the source code is the one that's found and reported.

To fix this we could e.g. add a variation on TreeInfo.diagnosticPositionFor() that accepts a Predicate<JCTree> and then use it to filter out the JCMethodDecl's so the declarations would be skipped and therefore the invocations would always be found and reported.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile and run ""Source code for an executable test case"".

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The same error repeated 10 times, e.g.:

/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error
/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error
/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error
/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error
/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error
/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error
/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error
/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error
/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error
/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error

ACTUAL -
Some random combination of three different possible errors, e.g.:

/Cyclic.java:2: error: recursive constructor invocation
        public Cyclic(int x) {
               ^
1 error
/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error
/Cyclic.java:2: error: recursive constructor invocation
        public Cyclic(int x) {
               ^
1 error
/Cyclic.java:6: error: recursive constructor invocation
            this((long)x);
            ^
1 error
/Cyclic.java:6: error: recursive constructor invocation
            this((long)x);
            ^
1 error
/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error
/Cyclic.java:2: error: recursive constructor invocation
        public Cyclic(int x) {
               ^
1 error
/Cyclic.java:6: error: recursive constructor invocation
            this((long)x);
            ^
1 error
/Cyclic.java:3: error: recursive constructor invocation
            this((float)x);
            ^
1 error
/Cyclic.java:2: error: recursive constructor invocation
        public Cyclic(int x) {
               ^
1 error


---------- BEGIN SOURCE ----------
    import java.net.*;
    import java.util.*;
    import javax.tools.*;
    public class CyclicErrorsNonDeterministic {
    
        static final String SOURCE = """"""
                public class Cyclic {
                    public Cyclic(int x) {
                        this((float)x);
                    }
                    public Cyclic(float x) {
                        this((long)x);
                    }
                    public Cyclic(long x) {
                        this((double)x);
                    }
                    public Cyclic(double x) {
                        this((int)x);
                    }
                }
            """""";
        static final SimpleJavaFileObject FILE = new SimpleJavaFileObject(
          URI.create(""string:///Cyclic.java""), JavaFileObject.Kind.SOURCE) {
            @Override
            public String getCharContent(boolean ignoreEncodingErrors) {
                return  SOURCE;
            }
        };
    
        public static void main(String[] args) throws Exception {
            JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
            for (int i = 0; i < 10; i++)
                compiler.getTask(null, null, null, null, null, Collections.singleton(FILE)).call();
        }
    }

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None known.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-09 05:28;adev;CyclicErrorsNonDeterministic.java;https://bugs.openjdk.org/secure/attachment/100999/CyclicErrorsNonDeterministic.java",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yqoz:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-09 05:34;adev;I have attached the reproducer for cyclic constructor invocation. The discussion is over non determinism of the cyclic constructor invocation and the error message it produces.
;;;","2022-10-12 07:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10679
Date: 2022-10-12 14:22:40 +0000;;;","2022-10-14 06:54;dukebot;Changeset: 786ce1c2
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2022-10-14 13:52:50 +0000
URL:       https://git.openjdk.org/jdk/commit/786ce1c27b1da6096ad820170263d6b354e0d41a
;;;",,,,,,,,,,,,,,,,,,,,
Cannot call a method with a parameter of a local class declared in a lambda,JDK-8295019,5084714,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,webbuggrp,webbuggrp,2022-10-04 15:39,2023-02-13 11:08,2023-10-01 09:56,2023-02-07 08:25,17,19,20,,,,21,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OpenJDK 17.0.4.1+1, 19+36, 20-ea+17

A DESCRIPTION OF THE PROBLEM :
The compiler complains about an invocation of a method that has a parameter whose type is a local class C declared in a lambda by passing it an instance of C returned by a method because ""C cannot be converted to C"". The lambda also has to be passed to a method: if it is assigned to a variable, the code compiles.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
javac -Xdiags:verbose Bug.java
Code is below.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No error.
ACTUAL -
Bug.java:11: error: method takeC in class C cannot be applied to given types;
                        C.takeC(C.giveC());
                         ^
  required: C
  found:    C
  reason: argument mismatch; C cannot be converted to C

---------- BEGIN SOURCE ----------
class Bug {
	static void run(Runnable r) {}

	static void main() {
		run(() -> {
			class C {
				static void takeC(C c) {}
				static C giveC() {return new C();}
			}

			C.takeC(C.giveC());
		});
	}
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
I was able to work around this bug by declaring the local class outside the lambda.
class Workaround1 {
	static void run(Runnable r) {}

	static void main() {
		class C {
			static void takeC(C c) {}
			static C giveC() {return new C();}
		}

		run(() -> {
			C.takeC(C.giveC());
		});
	}
}

Additionally, storing the argument in a variable and passing the variable's value to the method allows the code to compile.
class Workaround2 {
	static void run(Runnable r) {}

	static void main() {
		run(() -> {
			class C {
				static void takeC(C c) {}
				static C giveC() {return new C();}
			}

			var c = C.giveC();
			C.takeC(c);
		});
	}
}

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-09 04:47;adev;Bug.java;https://bugs.openjdk.org/secure/attachment/100997/Bug.java",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yse3:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-09 04:48;adev;The issue is reproducible with the error:
PS C:\test> javac -Xdiags:verbose Bug.java
Bug.java:10: error: method takeC in class C cannot be applied to given types;
                C.takeC(C.giveC());
                 ^
  required: C
  found:    C
  reason: argument mismatch; C cannot be converted to C
1 error;;;","2023-01-30 21:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12303
Date: 2023-01-31 05:32:28 +0000;;;","2023-02-07 08:25;dukebot;Changeset: a73d012c
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2023-02-07 16:23:52 +0000
URL:       https://git.openjdk.org/jdk/commit/a73d012c727ecbd5fcf97a624fc969ba6305db5f
;;;",,,,,,,,,,,,,,,,,,,,
Cancelling a request must eventually cause its response body subscriber to be unregistered,JDK-8294916,5084840,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dfuchs,dfuchs,2022-10-06 09:32,2023-01-31 03:44,2023-10-01 09:56,2022-10-20 10:07,19,,,,,,20,core-libs,,0,httpclient,regression,ursqe-triaged,,,,,,,,,,,,,,,,,"When JDK-8277969 was implemented a list of outstanding response subscribers was added to HttpClientImpl. A body subscriber is added to the list after being created and is removed from the list when it is completed, either successfully or exceptionally. 

It appears that in the case where the subscription is cancelled before the subscriber is completed, the subscriber might remain registered in the list forever, or at least until the HttpClient gets garbage collected. This can be easily reproduced using streaming subscribers, such as BodySubscriber::ofInputStream. In the case where the input stream is closed without having read all the bytes, Subscription::cancel will be called. Whether the subscriber gets unregistered or not at that point is then racy.  

Indeed, the reactive stream specification doesn't guarantee whether onComplete or onError will be called or not after a subscriber cancels its subscription. Any cleanup that would have been performed by onComplete/onError might therefore need to be performed too when the subscription is cancelled.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298340,JDK-8296889,,,JDK-8277969,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yt63:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-10-11 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10659
Date: 2022-10-11 15:49:14 +0000;;;","2022-10-20 10:07;dukebot;Changeset: dcd46501
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-10-20 08:48:40 +0000
URL:       https://git.openjdk.org/jdk/commit/dcd46501e6a25ac875d61bfbd412555b933ce34c
;;;",,,,,,,,,,,,,,,,,,,,,
Memory leak in PKCS11 NSS TLS server,JDK-8294906,5084824,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,djelinski,djelinski,djelinski,2022-10-06 05:53,2023-06-26 11:59,2023-10-01 09:56,2022-10-13 02:31,11,17,19,20,8,,20,security-libs,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-hard,,,,,,,,,,,,,,"P11TlsKeyMaterialGenerator leaks 2 handles (hClientMacSecret and hServerMacSecret) every time a connection using AES-GCM is established. PKCS11 library used was NSS.

MAC keys are not needed when using AEAD, and the PKCS spec [1] suggests that they don't need to be created. However, it doesn't prohibit creating MAC keys, and come libraries like NSS create them. 

https://docs.oasis-open.org/pkcs11/pkcs11-spec/v3.1/cs01/pkcs11-spec-v3.1-cs01.html#_Toc111203671",,,,,,,,,,JDK-8306295,JDK-8304201,JDK-8300764,JDK-8300763,JDK-8306294,JDK-8300762,,,,,,,,,,,,,,,,,,,,,,JDK-7030966,,,,JDK-8304807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yt2j:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-10-06 12:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10594
Date: 2022-10-06 13:27:23 +0000;;;","2022-10-11 11:43;djelinski;added noreg-hard because the new tests don't really check for presence/absence of the leak; they only confirm that the new code can still generate keys for AES+GCM;;;","2022-10-12 11:10;djelinski;The issue is present in NSS 3.82, which is 2 months old at the moment; verified with Ubuntu binaries.;;;","2022-10-13 02:31;dukebot;Changeset: 94caecbe
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-10-13 09:29:17 +0000
URL:       https://git.openjdk.org/jdk/commit/94caecbe574227b232e22d9f56361f8ecd507be6
;;;","2023-04-16 08:10;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.20/17.0.8-oracle.
Low risk, simple change.
Clean backport. In 11 I had to resolve a Copyright in a test. Marked clean.
Tests pass with and without the fix. Well, it is labeled noreg-hard.
SAP nitghly testing passed.
;;;","2023-04-16 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1246
Date: 2023-04-16 15:10:02 +0000;;;","2023-04-16 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1831
Date: 2023-04-16 15:16:04 +0000;;;",,,,,,,,,,,,,,,,
Undefined Behavior in C2 regalloc with null references,JDK-8294902,5084821,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aph,shade,shade,2022-10-06 05:05,2023-02-24 11:58,2023-10-01 09:56,2022-12-14 05:35,11,17,19,20,8,,20,hotspot,,0,c2,c2-regalloc,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,redhat-interest,,,,,,,,,,,,,,"This is currently obscured by -Waddress warning disabled for Hotspot. If you enable this warning, then GCC would complain:

```
/home/shade/trunks/jdk/src/hotspot/share/opto/postaloc.cpp: In member function 'int PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)':
/home/shade/trunks/jdk/src/hotspot/share/opto/postaloc.cpp:260:14: error: the compiler can assume that the address of 'value' will never be NULL [-Werror=address]
  260 |   if( &value == NULL ) return blk_adjust;
      |              ^
```

This thing is not theoretical, I played with the following snippet in Godbolt:

```
#include <cstddef>

class X {};

bool test(X& ref) {
    return (&ref == NULL);
}

int main() {
    return test(*((X*)NULL));
}
```

With -O2, GCC 5.5 and lower compiles `test` to actual check, like you would expect for pointers:

```
 test   rdi,rdi
 sete   al
 ret    
```

With -O2, GCC 6.1 and higher compiles `test` to ""return false"", as warning told it might happen:

```
 xor    eax,eax
 ret   
```

Plus, adding these asserts to Hotspot:

```
diff --git a/src/hotspot/share/opto/postaloc.cpp b/src/hotspot/share/opto/postaloc.cpp
index 96c30a122bb..23b78305af2 100644
--- a/src/hotspot/share/opto/postaloc.cpp
+++ b/src/hotspot/share/opto/postaloc.cpp
@@ -536,4 +536,6 @@ void PhaseChaitin::post_allocate_copy_removal() {
       // Remove copies along phi edges
       for (uint k = 1; k < phi_dex; k++) {
+        assert(blk2value[pb->_pre_order] != nullptr, ""UB"");
+        assert(blk2regnd[pb->_pre_order] != nullptr, ""UB"");
         elide_copy(block->get_node(k), j, block, *blk2value[pb->_pre_order], *blk2regnd[pb->_pre_order], false);
       }
```

Fails immediately during the build,  so we do experience nulls here.",,,,,,,,,,JDK-8299028,JDK-8303190,JDK-8298805,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300080,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yt1v:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-06 05:33;rcastanedalo;ILW = undefined behavior without observable test failure; exploited by GCC 6.1 and higher; compile with earlier GCC or lower optimization level = MHM = P3;;;","2022-10-06 13:42;aph;This is related to one I analysed a while ago. OK if I grab it?;;;","2022-10-06 14:31;kvn;Yes, Andrew.;;;","2022-10-31 07:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10920
Date: 2022-10-31 14:40:32 +0000;;;","2022-12-12 13:28;kvn;testing v15:
https://mach5.us.oracle.com/mdash/jobs/vkozlov-8294902_t1-20221212-2128-39676513
https://mach5.us.oracle.com/mdash/jobs/vkozlov-8294902_t2-20221212-2326-39680707
https://mach5.us.oracle.com/mdash/jobs/vkozlov-8294902_t3-20221212-2327-39680721
https://mach5.us.oracle.com/mdash/jobs/vkozlov-8294902_t4-20221212-2327-39680742
https://mach5.us.oracle.com/mdash/jobs/vkozlov-8294902_xcomp-20221212-2327-39680768
https://mach5.us.oracle.com/mdash/jobs/vkozlov-8294902_stress-20221212-2328-39680791
;;;","2022-12-13 08:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/26
Date: 2022-12-13 16:27:37 +0000;;;","2022-12-14 05:35;dukebot;Changeset: 0bbc4181
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-12-14 13:32:21 +0000
URL:       https://git.openjdk.org/jdk20/commit/0bbc4181cdbccfc3a542f306ce1902cc2e9f36cb
;;;","2023-01-24 01:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1106
Date: 2023-01-24 09:10:37 +0000;;;","2023-01-24 01:20;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Medium risk, touches a row of different places. There is also a follow-up because of compiler problems.
I'll watch what happens to that change before pushing this.
I had to do a simple resolve.
SAP nighlty testing passed.;;;",,,,,,,,,,,,,,
remove pre-VS2017 checks in Windows related coding,JDK-8294901,5084818,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-10-06 04:51,2022-11-13 12:13,2023-10-01 09:56,2022-10-11 00:13,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"After ""8293162: Drop support for VS2017"" limited current support to VS2019 and VS2022 it is most likely safe to remove various checks related to older VS compilers like VS2015 or VS2013.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285506,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,,"0|i2yt17:",9223372036854775807,b19,,,,,,,,,,,"2022-10-07 00:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10600
Date: 2022-10-07 07:29:16 +0000;;;","2022-10-11 00:13;dukebot;Changeset: 5e05e421
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-10-11 07:11:59 +0000
URL:       https://git.openjdk.org/jdk/commit/5e05e421ed49158185167c010bd1e4f690eab610
;;;",,,,,,,,,,,,,,,,,,,,,
Process.waitFor() throws IllegalThreadStateException when a process on Windows returns an exit code of 259,JDK-8294899,5084772,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rriggs,webbuggrp,webbuggrp,2022-10-05 08:59,2023-01-31 03:44,2023-10-01 09:56,2022-11-14 06:22,11,17,18,19,20,8,20,core-libs,,0,additional-information-received,dcsaw,reproducer-other,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows (any version), OpenJDK (any version)

A DESCRIPTION OF THE PROBLEM :
When a Java application spawns a process on Windows that returns an exit code of 259 (0x103), the call to `Process.waitFor()` throws an IllegalThreadStateException.

It does this because the implementation method, `waitFor()` in ProcessImpl.java, calls `exitValue()`. In turn, `exitValue()` checks if the exit value is 259, which on Windows is returned when the process has not yet exited. `exitValue()` then goes ahead and throws an exception.

This can easily be fixed by having `waitFor()` call `getExitCodeProcess()` directly, thus bypassing the check for ""not yet exited"" since we know it actually has exited. In other words, in https://github.com/openjdk/jdk/blob/master/src/java.base/windows/classes/java/lang/ProcessImpl.java, replace line 575, containing ""return exitValue();"", with ""return getExitCodeProcess(handle);""

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a Process that exits with an exit value of 259 on Windows. Call process.waitFor().

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
It should return 259.
ACTUAL -
It throws an exception saying the process has not exited.

CUSTOMER SUBMITTED WORKAROUND :
There is no workaround, but it can be easily fixed in the JDK source.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-06 04:18;tongwan;Demo.java;https://bugs.openjdk.org/secure/attachment/100964/Demo.java",,,,,,,x86_64,,,,,,,,,windows,,,,,,,"0|i2ysqz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-10-06 00:59;tongwan;Requested a simple reproducer from the submitter.;;;","2022-10-06 04:15;tongwan;Additional information from the submitter:
As requested, here is a self-contained reproducer. Save it to Demo.java, and run ""javac Demo.java"" followed by ""java Demo"" on any Windows machine. It should print ""259"" but instead it throws an exception.

import java.io.IOException;

public class Demo {
    public static void main(String[] args) throws IOException, InterruptedException {
        Process process = new ProcessBuilder(""cmd"", ""/c"", ""exit /b 259"").start();
        int exitValue = process.waitFor();
        System.out.println(exitValue);
    }
}
;;;","2022-10-06 04:17;tongwan;The observations on Windows 10:
JDK 8: Failed, IllegalThreadStateException thrown
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19: Failed.
JDK 20ea+4: Failed.;;;","2022-10-06 05:38;rgiulietti;Changing the semantics as suggested by the reporter might be risky, as the code of the Windows impl of exitValue() goes back at least 15 years.;;;","2022-10-12 09:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10680
Date: 2022-10-12 16:30:07 +0000;;;","2022-10-19 20:24;tongwan;Additional information from the submitter:
This issue doesn't occur frequently. I encountered it while prototyping an idea involving a Java application spawning a process running a C++ application that returned an exit value indicating the number of items it processed. On that occasion, it just happened to be 259 by sheer fluke.;;;","2022-10-20 23:02;jpai;Thank you for that detail.

> I encountered it while prototyping an idea involving a Java application spawning a process running a C++ application that returned an exit value indicating the number of items it processed.

So in this specific case it indeed was the process itself returning a 259 and not the Windows system.;;;","2022-11-14 06:22;dukebot;Changeset: 9c399326
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-11-14 14:17:46 +0000
URL:       https://git.openjdk.org/jdk/commit/9c399326724dc47eae90076d1237ff582b783863
;;;",,,,,,,,,,,,,,,
test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java fails,JDK-8294881,5084801,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,fyang,fyang,2022-10-05 20:05,2023-08-07 01:32,2023-10-01 09:56,2022-11-15 09:24,,,,,,,20,core-svc,,0,,,,,,,,,,,,,,,,,,,,"On AArch64, command to reproduce:
$ make run-test TEST=""./test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java""

......

ACTION: main -- Failed. Execution failed: `main' threw exception: java.lang.NullPointerException: Cannot invoke ""String.equals(Object)"" because ""<local1>"" is null
REASON: User specified action: run main/othervm nsk.jdi.VirtualMachine.dispose.dispose003 -verbose -arch=${os.family}-${os.simpleArch} -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""${test.vm.opts} ${test.java.opts}""
TIME:   0.407 seconds
messages:
command: main nsk.jdi.VirtualMachine.dispose.dispose003 -verbose -arch=linux-aarch64 -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""-Xmx768m -XX:MaxRAMPercentage=3.125 -Djava.io.tmpdir=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/tmp -ea -esa ""
reason: User specified action: run main/othervm nsk.jdi.VirtualMachine.dispose.dispose003 -verbose -arch=${os.family}-${os.simpleArch} -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""${test.vm.opts} ${test.java.opts}""
started: Thu Oct 06 10:17:40 CST 2022
Mode: othervm [/othervm specified]
finished: Thu Oct 06 10:17:41 CST 2022
elapsed time (seconds): 0.407
configuration:
STDOUT:
binder> VirtualMachineManager: version 20.0
binder> Finding connector: default
binder> LaunchingConnector:
binder>     name: com.sun.jdi.CommandLineLaunch
binder>     description: Launches target using Sun Java VM command line and attaches to it
binder>     transport: com.sun.tools.jdi.SunCommandLineLauncher$2@98aea6e
binder> Connector arguments:
binder>     main=nsk.jdi.VirtualMachine.dispose.dispose003a -vbs -verbose -arch=linux-aarch64 -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""-Xmx768m -XX:MaxRAMPercentage=3.125 -Djava.io.tmpdir=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/tmp -ea -esa "" -pipe.port=38895
binder>     includevirtualthreads=y
binder>     quote=
binder>     home=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/images/jdk
binder>     vmexec=java
binder>     suspend=true
binder>     options=-Xmx768m -XX:MaxRAMPercentage=3.125 -Djava.io.tmpdir=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/tmp -ea -esa
binder> Launching debugee
binder> Waiting for VM initialized
Initial VMStartEvent received: VMStartEvent in thread main
--> debugger: nsk.jdi.VirtualMachine.dispose.dispose003a debuggee launched
debugee.stderr> **> dispose003a: debuggee started!
--> debugger: 'ready' recieved
debugee.stderr> **> dispose003a: waiting for an instruction from the debugger ...

==> nsk/jdi/VirtualMachine/dispose/dispose003        TESTING BEGINS
debugee.stderr> **> dispose003a:        thread2 is created
debugee.stderr> **> dispose003a:        synchronized (waitnotifyObj) { enter
debugee.stderr> **> dispose003a:        before: test_thread.start()
debugee.stderr> **> dispose003a:        before:   waitnotifyObj.wait();
debugee.stderr> **> thread2: method 'run' enter
debugee.stderr> **> thread2: entered into block:  synchronized (waitnotifyObj)
debugee.stderr> **> dispose003a:        after:    waitnotifyObj.wait();
debugee.stderr> **> thread2: exited from block:  synchronized (waitnotifyObj)

==> nsk/jdi/VirtualMachine/dispose/dispose003  new checkready: #0
--> debugger: getting ThreadReference object
--> debugger:       suspending thread2
--> debugger:       vm.dispose()
--> debugger: ......forcing the main thread to leave synchronized block
--> debugger:       Waiting for thread2 is not alive
debugee.stderr> **> dispose003a: mainThread is out of: synchronized (lockingObject)
debugee.stderr> **> thread2: entered into block:  synchronized (lockingObject)
debugee.stderr> **> thread2: exited from block:  synchronized (lockingObject)
debugee.stderr> **> thread2: call to the method 'runt1'
debugee.stderr> **> thread2: method 'runt1': enter
--> debugger: ......sending to the debuggee: 'check_alive'
--> debugger:        expected reply: 'not_alive'
debugee.stderr> **> dispose003a: checking on: thread2.isAlive
debugee.stderr> **> thread2: method 'runt1': body: i0 == 1
debugee.stderr> **> thread2: method 'runt1': exit
debugee.stderr> **> thread2: returned from the method 'runt1'
debugee.stderr> **> thread2: method 'run' exit
debugee.stderr> Exception in thread ""main"" java.lang.UnsupportedOperationException
debugee.stderr>         at java.base/java.lang.Thread.resume(Thread.java:1837)
debugee.stderr>         at nsk.jdi.VirtualMachine.dispose.dispose003a.main(dispose003a.java:139)
STDERR:
java.lang.NullPointerException: Cannot invoke ""String.equals(Object)"" because ""<local1>"" is null
        at nsk.jdi.VirtualMachine.dispose.dispose003.lambda$runThis$0(dispose003.java:249)
        at jdk.test.lib.Utils.waitForCondition(Utils.java:590)
        at nsk.jdi.VirtualMachine.dispose.dispose003.runThis(dispose003.java:243)
        at nsk.jdi.VirtualMachine.dispose.dispose003.run(dispose003.java:77)
        at nsk.jdi.VirtualMachine.dispose.dispose003.main(dispose003.java:72)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
        at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.NullPointerException: Cannot invoke ""String.equals(Object)"" because ""<local1>"" is null
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.NullPointerException: Cannot invoke ""String.equals(Object)"" because ""<local1>"" is null
rerun:
cd /home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/scratch/0 && \
HOME=/home/realfyang \
LANG=en_US.UTF-8 \
LC_ALL=C \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/images/test \
_JVM_DWARF_PATH=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/images/symbols \
CLASSPATH=/home/realfyang/openjdk-jdk/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003:/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/classes/0/vmTestbase:/home/realfyang/openjdk-jdk/test/hotspot/jtreg/vmTestbase:/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/classes/0/test/lib:/home/realfyang/openjdk-jdk/test/lib:/home/realfyang/tools/jtreg-7+1/lib/jtreg.jar \
    /home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/images/jdk/bin/java \
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=3.125 -Djava.io.tmpdir=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/tmp -ea -esa' \
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=3.125 -J-Djava.io.tmpdir=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/tmp -J-ea -J-esa' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts= \
        -Dtest.jdk=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/images/jdk \
        -Dcompile.jdk=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/images/jdk \
        -Dtest.timeout.factor=4.0 \
        -Dtest.root=/home/realfyang/openjdk-jdk/test/hotspot/jtreg \
        -Dtest.name=vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java \
        -Dtest.file=/home/realfyang/openjdk-jdk/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java \
        -Dtest.src=/home/realfyang/openjdk-jdk/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003 \
        -Dtest.src.path=/home/realfyang/openjdk-jdk/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003:/home/realfyang/openjdk-jdk/test/hotspot/jtreg/vmTestbase:/home/realfyang/openjdk-jdk/test/lib \
        -Dtest.classes=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/classes/0/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.d \
        -Dtest.class.path=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/classes/0/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.d:/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/classes/0/vmTestbase:/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/classes/0/test/lib \
        -Dtest.class.path.prefix=/home/realfyang/openjdk-jdk/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003:/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/classes/0/vmTestbase:/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/classes/0/test/lib \
        -Xmx768m \
        -XX:MaxRAMPercentage=3.125 \
        -Djava.io.tmpdir=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/tmp \
        -ea \
        -esa \
        com.sun.javatest.regtest.agent.MainWrapper /home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.d/main.0.jta -verbose -arch=linux-aarch64 -waittime=5 -debugee.vmkind=java -transport.address=dynamic '-debugee.vmkeys=""-Xmx768m -XX:MaxRAMPercentage=3.125 -Djava.io.tmpdir=/home/realfyang/openjdk-jdk/build/linux-aarch64-server-release/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_jdi_VirtualMachine_dispose_dispose003_TestDescription_java/tmp -ea -esa' ""

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.NullPointerException: Cannot invoke ""String.equals(Object)"" because ""<local1>"" is null
--------------------------------------------------
Test results: failed: 1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8226587,,JDK-8310940,JDK-8226587,JDK-8249627,,JDK-8289607,,,,,,,,"2022-10-10 09:26;dcubed;jdk-20+18_linux.8294881.zip;https://bugs.openjdk.org/secure/attachment/101014/jdk-20%2B18_linux.8294881.zip","2022-10-28 10:59;dcubed;jdk-20+20_linux.8294881.zip;https://bugs.openjdk.org/secure/attachment/101246/jdk-20%2B20_linux.8294881.zip","2022-11-10 13:35;dcubed;jdk-20+21_linux-x64.8294881.zip;https://bugs.openjdk.org/secure/attachment/101551/jdk-20%2B21_linux-x64.8294881.zip","2022-11-10 13:53;dcubed;jdk-20+21_macosx-aarch64.8294881.zip;https://bugs.openjdk.org/secure/attachment/101554/jdk-20%2B21_macosx-aarch64.8294881.zip","2022-11-14 13:23;dcubed;jdk-20+23_linux-x64.8294881.zip;https://bugs.openjdk.org/secure/attachment/101592/jdk-20%2B23_linux-x64.8294881.zip","2022-11-14 13:53;dcubed;jdk-20+23_macosx-aarch64.8294881.zip;https://bugs.openjdk.org/secure/attachment/101595/jdk-20%2B23_macosx-aarch64.8294881.zip",,generic,,,,,,,,,generic,,,,,,,"0|i2ysxf:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-10-07 06:26;dcubed;Looks like we missed another test that uses Thread.resume():

debugee.stderr> Exception in thread ""main"" java.lang.UnsupportedOperationException
debugee.stderr> at java.base/java.lang.Thread.resume(Thread.java:1837)
debugee.stderr> at nsk.jdi.VirtualMachine.dispose.dispose003a.main(dispose003a.java:139) ;;;","2022-10-07 06:38;dcubed;These are the relevant recent bugs:

    JDK-8249627 Degrade Thread.suspend and Thread.resume

    JDK-8289607 Change hotspot/jtreg tests to not use Thread.suspend/resume

For some reason, JDK-8289607 does not include any changes
for this test:

vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java;;;","2022-10-10 09:26;dcubed;Here's the log files from my sightings in my jdk-20+18 stress runs:

$ unzip -l jdk-20+18_linux.8294881.zip
Archive:  jdk-20+18_linux.8294881.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    23652  2022-10-06 19:22   jdk-20+18_1/failures.linux-x86_64/TestDescription.jtr.release
    23632  2022-10-08 14:22   jdk-20+18_3/failures.linux-x86_64/TestDescription.jtr.release
---------                     -------
    47284                     2 files

I don't quite understand why this test failure didn't reproduce in all three
'release' bits runs. ;;;","2022-10-10 09:28;dcubed;I also don't understand why the test passed in all three 'fastdebug' and 'slowdbug'
bit runs:

$ grep vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java jdk-20+18_?/logs.linux-x86_64/do_jdi_tests-*
jdk-20+18_1/logs.linux-x86_64/do_jdi_tests-fastdebug.log:Passed: vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java
jdk-20+18_1/logs.linux-x86_64/do_jdi_tests-release.log:TEST: vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java
jdk-20+18_1/logs.linux-x86_64/do_jdi_tests-release.log:        -J-Dtest.name=vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java \
jdk-20+18_1/logs.linux-x86_64/do_jdi_tests-release.log:        -J-Dtest.file=/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/open/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java \
Binary file jdk-20+18_1/logs.linux-x86_64/do_jdi_tests-release.log matches
jdk-20+18_1/logs.linux-x86_64/do_jdi_tests-slowdebug.log:Passed: vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java
jdk-20+18_2/logs.linux-x86_64/do_jdi_tests-fastdebug.log:Passed: vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java
jdk-20+18_2/logs.linux-x86_64/do_jdi_tests-release.log:Passed: vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java
jdk-20+18_2/logs.linux-x86_64/do_jdi_tests-slowdebug.log:Passed: vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java
jdk-20+18_3/logs.linux-x86_64/do_jdi_tests-fastdebug.log:Passed: vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java
jdk-20+18_3/logs.linux-x86_64/do_jdi_tests-release.log:TEST: vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java
jdk-20+18_3/logs.linux-x86_64/do_jdi_tests-release.log:        -J-Dtest.name=vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java \
jdk-20+18_3/logs.linux-x86_64/do_jdi_tests-release.log:        -J-Dtest.file=/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/open/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java \
Binary file jdk-20+18_3/logs.linux-x86_64/do_jdi_tests-release.log matches
jdk-20+18_3/logs.linux-x86_64/do_jdi_tests-slowdebug.log:Passed: vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java;;;","2022-10-10 11:58;cjplummer;[~dcubed] It looks like we have two issues here. The first is the use of Thread.resume(). The exception that results is hiding the root cause of the test failure, which is the fact that the thread was not suppose to be alive in the first place. Since the thread is not suppose to be alive, normally the test does not call Thread.resume():

In the main test (the debugger) we have:

                            pipe.println(""check_alive"");
                            String reply = pipe.readln();
                            if (reply.equals(""alive"")) {
                                log3(""ERROR: thread2 is alive"");
                                return false;
                            } else if (reply.equals(""not_alive"")) {
                                log2(""     thread2 is not alive"");
                                return true;
                            } else {

In the debuggee we have:

                             } else if (instruction.equals(""check_alive"")) {
                                 log1(""checking on: thread2.isAlive"");
                                 if (test_thread.isAlive()) {
                                     test_thread.resume();
                                     pipe.println(""alive"");
                                 } else {
                                     pipe.println(""not_alive"");
                                 }
                             } else {

So the expectation is that the thread will not be alive, and therefore resume() will not be called. If the resume() call had been removed (which is should be), then the test case would still have failed due to the thread having been alive when it is not suppose to be. So now the question is how did the filer trigger the thread to be alive.;;;","2022-10-26 08:13;mbaesken;We see the issue in our nightly tests also on Linux x86_64, not only aarch64 .;;;","2022-10-26 18:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10877
Date: 2022-10-27 01:03:59 +0000;;;","2022-10-28 11:00;dcubed;Here's the log files from my sightings in my jdk-20+20 linux-x64 stress runs: 

$ unzip -l jdk-20+20_linux.8294881.zip
Archive:  jdk-20+20_linux.8294881.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    23653  2022-10-20 14:08   jdk-20+20_1/failures.linux-x86_64/TestDescription.jtr.release
    23630  2022-10-21 11:45   jdk-20+20_2/failures.linux-x86_64/TestDescription.jtr.release
---------                     -------
    47283                     2 files;;;","2022-11-10 13:35;dcubed;Here's the log file from my sighting in my jdk-20+21 linux-x64 stress runs:

$ unzip -l jdk-20+21_linux-x64.8294881.zip
Archive:  jdk-20+21_linux-x64.8294881.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    23652  2022-10-28 10:28   jdk-20+21_2/failures.linux-x86_64/TestDescription.jtr.release
---------                     -------
    23652                     1 file;;;","2022-11-10 13:54;dcubed;Here's the log files from my sightings in my jdk-20+21 macosx64-aarch64 stress runs:

$ unzip -l jdk-20+21_macosx-aarch64.8294881.zip
Archive:  jdk-20+21_macosx-aarch64.8294881.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    25119  10-27-2022 12:17   jdk-20+21_1/failures.macosx-aarch64/TestDescription.jtr.release
    25211  10-27-2022 12:17   jdk-20+21_1/failures.macosx-aarch64/TestDescription.jtr.release.1
    25339  10-28-2022 10:47   jdk-20+21_2/failures.macosx-aarch64/TestDescription.jtr.slowdebug
---------                     -------
    75669                     3 files;;;","2022-11-14 13:23;dcubed;Here's the log file from my sighting in my jdk-20+23 linux-x64 stress runs:

$ unzip -l jdk-20+23_linux-x64.8294881.zip
Archive:  jdk-20+23_linux-x64.8294881.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    23631  2022-11-11 09:59   jdk-20+23_2/failures.linux-x86_64/TestDescription.jtr.release
---------                     -------
    23631                     1 file;;;","2022-11-14 13:53;dcubed;Here's the log file from my sightings in my jdk-20+23 macosx64-aarch64 stress runs:

$ unzip -l jdk-20+23_macosx-aarch64.8294881.zip
Archive:  jdk-20+23_macosx-aarch64.8294881.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    25221  11-11-2022 11:22   jdk-20+23_2/failures.macosx-aarch64/TestDescription.jtr.release
---------                     -------
    25221                     1 file;;;","2022-11-15 09:24;dukebot;Changeset: 216c6f63
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-11-15 17:19:48 +0000
URL:       https://git.openjdk.org/jdk/commit/216c6f63409e60604beb3c4f0e1e0661b1124f8f
;;;",,,,,,,,,,
The spec on the method MemorySegment::segmentOffset() should be corrected,JDK-8294871,5084786,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pminborg,lkuskov,lkuskov,2022-10-05 13:52,2022-10-25 04:02,2023-10-01 09:56,2022-10-25 04:02,20,,,,,,,core-libs,,0,,,,,,,,,,,,,,,,,,,,"The spec on the methods MemorySegment::long segmentOffset(MemorySegment other) states:
===
The offset is relative to the base address of this segment and can be a negative or positive value. For instance, if both segments are native segments, the resulting offset can be computed as follows:
other.baseAddress().toRawLongValue() - segment.baseAddress().toRawLongValue()
===
The reference to the method baseAddress() is a leftover from old API. It should be changed to address().
Expected assertion is:
===
other.address().toRawLongValue() - segment.address().toRawLongValue()
===",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ysu3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-10-25 03:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/749
Date: 2022-10-25 10:12:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Correct failure of RemovedJDKInternals.java after JDK-8294618,JDK-8294869,5084784,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-10-05 12:14,2022-10-10 15:34,2023-10-01 09:56,2022-10-05 12:31,20,,,,,,20,tools,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294618,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ystn:",9223372036854775807,b18,,,,,,,,,,,"2022-10-05 12:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10580
Date: 2022-10-05 19:17:22 +0000;;;","2022-10-05 12:31;dukebot;Changeset: 0ec18382
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-10-05 19:27:20 +0000
URL:       https://git.openjdk.org/jdk/commit/0ec18382b74396eec0681f2fdf0dac40f8fe108b
;;;",,,,,,,,,,,,,,,,,,,,,
Enable partial tier1 testing in GHA for JDK8,JDK-8294863,5084771,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,zzambers,zzambers,2022-10-05 08:35,2022-11-03 04:31,2023-10-01 09:56,2022-10-11 05:15,,,,,,,openjdk8u362,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,,,"This change adds support for tier1 testing in github actions by fixing workflow to work with JDK8. (Changes were needed due to build system difference compared to newer JDK.) Support for running tests is done for all systems. This includes adding code to run tests on windows x86, which was missing. Currently only jdk_tier1 on linuxes and macos is enabled, as currently only this is passing without failures (see details below). Testing on windows is currently disabled (no tier1 groups are passing there currently). Disabled tests can be easily enabled once, they are fixed. Ultimate goal is of course to run all tier1 groups (jdk_tier1, langtools_tier1, hotspot_tier1) on all platforms.

Tier1 status:

jdk_tier1
- enabled on linuxes and macos (passes there)
- disabled on on windows, where com/sun/jdi/*.sh shell tests are currently failing

langtools_tier1
- disabled everywhere
- 1 failure: tools/javac/diags/CheckExamples.java (all platforms, see: [1])

hotspot_tier1
- disabled everywhere
- there are several faiures of compiler/rtm/* tests. These tests seem to broken on some systems (see: [2]), including machines used by GHA. Some tests are already excluded [3], but there are few more. Also exclusions were made only on x64 but it also affects x86.
- on x86 (32-bit) platforms there are few additional failures

[1] https://bugs.openjdk.org/browse/JDK-8265527
[2] https://bugs.openjdk.org/browse/JDK-8183263
[3] https://bugs.openjdk.org/browse/JDK-8226899",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ysqr:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-05 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/131
Date: 2022-10-05 15:36:47 +0000;;;","2022-10-05 11:07;zzambers;Fix request (8u)

Adds support for tier1 testing by GHA, by doing workflow fixes for JDK8. It also enables tier1 testing in limited form (parts which are passing). Only changes github workflow file.;;;","2022-10-11 05:15;dukebot;Changeset: a93344b2
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-10-11 12:13:44 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/a93344b27d4b3df6cbca7185bcfca1410b51a984
;;;","2022-11-03 04:31;dukebot;Changeset: a93344b2
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-10-11 12:13:44 +0000
URL:       https://git.openjdk.org/jdk8u/commit/a93344b27d4b3df6cbca7185bcfca1410b51a984
;;;",,,,,,,,,,,,,,,,,,,
[lworld] Add java.util.Objects.isValueObject,JDK-8294860,5084767,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rriggs,rriggs,rriggs,2022-10-05 07:41,2022-10-12 07:00,2023-10-01 09:56,2022-10-12 07:00,,,,,,,repo-valhalla,core-libs,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"Add a method to check for value objects to java.util.Objects that match Objects.isIdentityObject.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yspv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-10-11 12:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/786
Date: 2022-10-11 18:51:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
XMLStreamReader does not respect jdk.xml.maxXMLNameLimit=0 for namespace names,JDK-8294858,5084713,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,joehw,webbuggrp,webbuggrp,2022-10-04 15:01,2023-01-31 03:45,2023-10-01 09:56,2022-11-03 10:07,11,18,19,20,8,,20,xml,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
I am able to reproduce with jdk 11 and 19.

A DESCRIPTION OF THE PROBLEM :
According to the documentation[0] a value of 0 for jdk.xml.maxXMLNameLimit should disable the limit. Instead, it is interpreted as a limit of 0 for namespace names, resulting in failure to parse XML that contains ""xmlns"" attributes (attached example). 

Note that the value of 0 is handled according to the documentation for other names, such as element or attribute names. I think the problem comes from this code[1] not handling values <=0 as special.

[0] https://docs.oracle.com/javase/tutorial/jaxp/limits/limits.html
[1] https://github.com/openjdk/jdk/blob/master/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/impl/XML11NSDocumentScannerImpl.java#L640

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Set jdk.xml.maxXMLNameLimit=0 via a system property
2. Create an XML stream reader using XMLInputFactory.newInstance().createXMLStreamReader()
3. Try to parse an element which includes ""xmlns"", such as ""<foo xmlns='bar'/>""

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Parsing is successful
ACTUAL -
Parsing fails with:
Message: JAXP00010005: The length of entity ""bar"" is ""3"" that exceeds the ""0"" limit set by ""system property"".
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLStreamReaderImpl.next(XMLStreamReaderImpl.java:652)
	at Test.parse(Test.java:23)
	at Test.main(Test.java:14)

---------- BEGIN SOURCE ----------
import javax.xml.stream.*;
import java.io.*;

class Test
{
    public static void main(String[] args)
            throws Exception
    {
        String xml = ""<foo xmlns='bar'/>"";

        parse(xml); // Succeeds

        System.setProperty(""jdk.xml.maxXMLNameLimit"", ""0"");
        parse(xml); // Fails
    }

    private static void parse(String xml)
        throws Exception
    {
        InputStream is = new ByteArrayInputStream(xml.getBytes());
        XMLStreamReader reader = XMLInputFactory.newInstance().createXMLStreamReader(is);
        while (reader.hasNext())
            reader.next();
        System.err.println(""Parsed successfully"");
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Set maxXMLNameLimit to a large value instead

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-05 07:05;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/100953/Test.java",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2ysdv:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@69235025,,,,,,,Verified,,"2022-10-05 07:04;tongwan;The observations on Windows 10:
JDK 8: Failed, Parsing failed.
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19: Failed.
JDK 20ea+4: Failed.;;;","2022-11-02 12:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10958
Date: 2022-11-02 19:32:47 +0000;;;","2022-11-03 10:07;dukebot;Changeset: 2ff9d3af
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-11-03 17:04:14 +0000
URL:       https://git.openjdk.org/jdk/commit/2ff9d3af815c0f6ff2643d8fc562cec20ef6c324
;;;",,,,,,,,,,,,,,,,,,,,
Fix calculation of G1 effective scanned cards prediction,JDK-8294847,5084753,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tschatzl,tschatzl,tschatzl,2022-10-05 02:08,2022-10-19 23:15,2023-10-01 09:56,2022-10-13 05:04,20,,,,,,20,hotspot,,0,gc-g1,gc-g1-prediction,gc-pending-review,,,,,,,,,,,,,,,,,"When calculating base time needed for evacuation, G1 tries to predict the cards that are actually scanned during the next gc. This calculation is bugged:

  size_t effective_scanned_cards = _analytics->predict_scan_card_num(rs_length, collector_state()->in_young_only_phase());

The calculation completely ignores the cards pending in the log buffers which often make up a significant part of the prediction.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295267,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ysmr:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-10-11 04:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10647
Date: 2022-10-11 11:35:01 +0000;;;","2022-10-13 05:04;dukebot;Changeset: 7e4868de
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-10-13 12:00:01 +0000
URL:       https://git.openjdk.org/jdk/commit/7e4868de7b0d3c20a35f06671ec0b68cfd441793
;;;",,,,,,,,,,,,,,,,,,,,,
langtools OptionalDependencyTest.java use File.pathSeparator ,JDK-8294840,5084746,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2022-10-05 01:42,2022-11-09 00:12,2023-10-01 09:56,2022-10-05 07:42,20,,,,,,20,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,noreg-self,,,,,,,,,,,,,,"The test/langtools/tools/jdeps/optionalDependency/OptionalDependencyTest.java: 
introduced with 8293701 needs to use File.pathSeparator instead of "":""   to work on all platforms.",,,,,,,,,,JDK-8295932,JDK-8296494,JDK-8296313,JDK-8296598,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293701,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,,"0|i2ysl7:",9223372036854775807,b18,,,,,,,,,,,"2022-10-05 04:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10572
Date: 2022-10-05 11:01:35 +0000;;;","2022-10-05 07:42;dukebot;Changeset: f531dae4
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-10-05 14:41:29 +0000
URL:       https://git.openjdk.org/jdk/commit/f531dae4a0ffd2a5663cf4a4bde581d68fc728d5
;;;","2022-10-19 04:45;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well because the issue is present there too; it is a little follow up to 8293701. The patch applies cleanly and is low risk.;;;","2022-10-25 04:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/833
Date: 2022-10-25 11:46:55 +0000;;;","2022-10-26 04:22;clanger;Fix request (19u):
This backport is needed as a follow-up for JDK-8293701. Otherwise we'll see test failures on Windows. I'll hold back integration of JDK-8293701 until I get approval here. I can't open a PR yet since this change will only apply after JDK-8293701.
;;;","2022-11-03 07:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/60
Date: 2022-11-03 14:49:43 +0000;;;",,,,,,,,,,,,,,,,,
unify Windows 2019 version check in os_windows and java_props_md,JDK-8294837,5084743,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-10-05 01:15,2023-03-02 13:57,2023-10-01 09:56,2022-10-06 00:14,17,20,,,,,20,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"Currently the buildNumber check for Windows 2019 server differs in   os_windows.cpp  and java_props_md.c  ( java_props_md.c still checks pre GA versions , this is probably not necessary any more ).
The check should be unified.",,,,,,,,,,JDK-8295941,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,,"0|i2yskj:",9223372036854775807,b19,,,,,,,,,Not verified,,"2022-10-05 02:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10570
Date: 2022-10-05 09:21:50 +0000;;;","2022-10-06 00:14;dukebot;Changeset: 7012d4ba
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-10-06 07:12:07 +0000
URL:       https://git.openjdk.org/jdk/commit/7012d4ba5529f8d5b3db508ac4924073ae1eb4cd
;;;","2022-10-07 07:19;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well, because the Windows OS version check should be the same in this release as well at both source code locations. Patch is low risk and applies cleanly.;;;","2022-10-07 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/775
Date: 2022-10-07 14:14:18 +0000;;;",,,,,,,,,,,,,,,,,,,
C2: Math.min/max vectorization miscompilation,JDK-8294816,5084719,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,bkilambi,dlong,dlong,2022-10-04 20:02,2023-01-23 05:50,2023-10-01 09:56,2022-11-04 10:25,20,,,,,,20,hotspot,,0,c2,c2-superword,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,,,,,,,,,,,,,"The attached reduced test case (Reduced.java) fails with:
  $ java -Xcomp -XX:CompileOnly=Reduced -XX:-TieredCompilation Reduced.java

The same test case passes with:
  $ java -Xcomp -XX:CompileOnly=Reduced -XX:-TieredCompilation -XX:-UseSuperWord Reduced.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288107,,,,,,,,"2022-10-27 01:22;pli;Foo.java;https://bugs.openjdk.org/secure/attachment/101207/Foo.java","2022-10-04 20:06;dlong;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/100943/FuzzerUtils.java","2022-10-05 05:46;rcastanedalo;Reduced.java;https://bugs.openjdk.org/secure/attachment/100951/Reduced.java","2022-10-04 20:06;dlong;Test.java;https://bugs.openjdk.org/secure/attachment/100944/Test.java",,,,,,,,,,,,,,,,,,,,"0|i2ysf7:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-10-05 05:28;thartmann;I narrowed this down to JDK-8288107. Stuart, could you please have a look?

To reproduce, run the attached test with ""-Xcomp -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation"" and compare the output to a run with ""-Xint"". It differs.;;;","2022-10-05 05:34;thartmann;ILW = Incorrect result of C2 compiled code (regression by JDK-8288107 in JDK 20), reproducible with generated test, disable min/max intrinsic = HMM = P2;;;","2022-10-27 00:54;pli;My attached `Foo.java' is a simpler reproducible case. It can be reproduced on any platforms that support Math.min/max vectorization.

To reproduce, use

$ java Foo
100

$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Foo.bar Foo
CompileCommand: compileonly Foo.bar bool compileonly = true
0;;;","2022-11-02 05:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10944
Date: 2022-11-02 12:06:14 +0000;;;","2022-11-04 10:25;dukebot;Changeset: b49bdaea
Author:    Bhavana Kilambi <bkilambi@openjdk.org>
Committer: Nick Gasson <ngasson@openjdk.org>
Date:      2022-11-04 17:22:54 +0000
URL:       https://git.openjdk.org/jdk/commit/b49bdaeade8445584550dbd5c48ea3c7e9cf1559
;;;",,,,,,,,,,,,,,,,,,
jpackaged-app ignores splash screen from jar file,JDK-8294806,5084705,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,asemenyuk,asemenyuk,2022-10-04 12:23,2023-04-17 10:42,2023-10-01 09:56,2023-04-11 09:18,18,19,20,,,,21,tools,,0,sn_137,sn_141,,,,,,,,,,,,,,,,,,"Use jpackage for packaging SwingSet2.jar. When launched with SwingSet2.exe it doesn't display a splash screen, However, if SwingSet2.jar is launched with ""java -jar SwingSet2.jar"" command the splash screen is displayed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2ysc3:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-10-04 12:26;asemenyuk;When packaging a jar (--main-jar), jpackage should check for ""SplashScreen-Image"" property in MANIFEST.MF file and honor its value.
Alternatively, it can set ""app.jarfile"" instead of ""app.mainclass"" and ""app.classpath"" properties in .cfg file to make jvm run the jar properly.;;;","2023-04-10 11:09;asemenyuk;Setting ""app.jarfile"" instead of ""app.mainclass"" and ""app.classpath"" properties in .cfg file looks more appealing than duplicating more functionality of java launcher in jpackage app launcher;;;","2023-04-10 14:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13413
Date: 2023-04-10 21:16:19 +0000;;;","2023-04-11 09:18;dukebot;Changeset: 1de772cd
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2023-04-11 16:16:07 +0000
URL:       https://git.openjdk.org/jdk/commit/1de772cd899b535f04380088ee82badc325865be
;;;",,,,,,,,,,,,,,,,,,,
[lworld] update javadoc to remove references to primitive classes,JDK-8294797,5084696,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2022-10-04 11:22,2022-10-06 11:11,2023-10-01 09:56,2022-10-06 11:11,repo-valhalla,,,,,,,core-libs,,0,lw4,,,,,,,,,,,,,,,,,,,lworld contains javadoc changes for primitive classes that should be reverted.  Keep javadoc changes for Value Objects only.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ysa3:",9223372036854775807,,,,,,,,,,,,"2022-10-04 12:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/774
Date: 2022-10-04 18:53:23 +0000;;;","2022-10-04 13:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/776
Date: 2022-10-04 20:08:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,
add more regression tests for value objects,JDK-8294774,5084670,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-10-04 08:07,2022-10-05 20:23,2023-10-01 09:56,2022-10-05 20:23,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"the current number and scope of regression tests for value objects is very good, although there are some completeness, missing, issues that should be addressed. More examples should also be added for uncovered compiler keys that are now listed in the not-yet.txt file",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ys4b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-04 17:44;vromero;https://github.com/openjdk/valhalla/pull/777;;;","2022-10-05 20:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/777
Date: 2022-10-04 20:59:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,
"8u contains two copies of test/../FileUtils.java, one uses JDK9+ features",JDK-8294767,5084662,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jdowland,jdowland,jdowland,2022-10-04 06:22,2023-01-30 20:17,2023-10-01 09:56,2022-12-05 21:30,openjdk8u345,,,,,,openjdk8u372,client-libs,,0,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,,,"There are two copies of the test utility class FileUtils.java in the jdk8u-dev source tree:

```
$ find . -name FileUtils.java
./jdk/test/lib/testlibrary/jdk/testlibrary/FileUtils.java
./jdk/test/lib/jdk/test/lib/util/FileUtils.java
```

One of them is not used by anything. It also uses language features that are not present in 8u:

```
$ $JAVA_HOME/bin/javac ./jdk/test/lib/jdk/test/lib/util/FileUtils.java
# snip
./jdk/test/lib/jdk/test/lib/util/FileUtils.java:166: error: cannot infer type arguments for SimpleFileVisitor<T>
            java.nio.file.Files.walkFileTree(dir, new SimpleFileVisitor<>() {
                                                                       ^
  reason: cannot use '<>' with anonymous inner classes
```

The soluton for this case is simple, just remove the above file.

This is part of a wider issue of duplicated test material, but I'm filing for the one I found for now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ys2j:",9223372036854775807,b01,,,,,,,,,,,"2022-10-04 06:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/129
Date: 2022-10-04 13:25:24 +0000;;;","2022-12-05 01:12;jdowland;Fix request (8u)

Please consider this simple clean-up for jdk8u-dev, which might make working in this area a little easier.;;;","2022-12-05 21:30;dukebot;Changeset: 2ad48cb3
Author:    Jonathan Dowland <jdowland@openjdk.org>
Date:      2022-12-06 05:29:01 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/2ad48cb3ca0e79346d74dccb5c172a7f017c5c6d
;;;","2023-01-30 20:17;dukebot;Changeset: 2ad48cb3
Author:    Jonathan Dowland <jdowland@openjdk.org>
Date:      2022-12-06 05:29:01 +0000
URL:       https://git.openjdk.org/jdk8u/commit/2ad48cb3ca0e79346d74dccb5c172a7f017c5c6d
;;;",,,,,,,,,,,,,,,,,,,
JFR: Docs build fails after changes to RecordedObject and Timespan,JDK-8294758,5084649,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,egahlin,egahlin,egahlin,2022-10-04 05:19,2023-01-23 05:44,2023-10-01 09:56,2022-10-04 06:16,20,,,,,,20,hotspot,,0,noreg-build,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294242,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yrzn:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,Verified,,"2022-10-04 06:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10555
Date: 2022-10-04 12:45:01 +0000;;;","2022-10-04 06:16;dukebot;Changeset: b850f052
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-10-04 13:14:27 +0000
URL:       https://git.openjdk.org/jdk/commit/b850f052d88bdc012ae91893fd1b63cfce601a8e
;;;",,,,,,,,,,,,,,,,,,,,,
Cleanup unneeded references to hg,JDK-8294748,5084638,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-10-04 00:29,2022-10-10 15:34,2023-10-01 09:56,2022-10-05 00:26,17,20,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"There are still a number of unneeded references to hg, for example

make/autoconf/spec.gmk.in
 
772 HG:=@HG@
 
make/autoconf/basic_tools.m4
 
345   UTIL_LOOKUP_PROGS(HG, hg)

Those can be cleaned up.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yrx7:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-04 05:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10554
Date: 2022-10-04 12:22:24 +0000;;;","2022-10-05 00:26;dukebot;Changeset: be82cff6
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-10-05 07:25:49 +0000
URL:       https://git.openjdk.org/jdk/commit/be82cff625c919e332da0879e2be0002485f1d1c
;;;",,,,,,,,,,,,,,,,,,,,,
AArch64: applications/kitchensink/Kitchensink.java crashed: assert(oopDesc::is_oop(obj)) failed: not an oop,JDK-8294744,5084634,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pchilanomate,dholmes,dholmes,2022-10-03 19:29,2023-01-17 15:56,2023-10-01 09:56,2023-01-10 09:18,20,,,,,,20,hotspot,,0,intermittent,regression,tier3,tier5,,,,,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94902/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2bcc81d4-11a4-454b-b693-b4de2771d176/runs/c4fc7d15-e479-4a77-afb5-74071239888a/workspace/open/src/hotspot/share/runtime/handles.cpp:41), pid=1597014, tid=1597054
#  assert(oopDesc::is_oop(obj)) failed: not an oop: 0x0000fffc07c14974
#
# JRE version: Java(TM) SE Runtime Environment (20.0+18) (fastdebug build 20-ea+18-1242)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+18-1242, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xd74de8]  HandleArea::allocate_handle(oop)+0x108
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94874/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/26a25f8e-ee5f-4606-a754-e896ab61a47c/runs/71ccaf50-8a17-4a5c-8c2c-1f88dc8e68c7/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/core.1597014)
#
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94874/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/26a25f8e-ee5f-4606-a754-e896ab61a47c/runs/71ccaf50-8a17-4a5c-8c2c-1f88dc8e68c7/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/hs_err_pid1597014.jfr
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#


---------------  T H R E A D  ---------------

Current thread (0x0000fffc185f66f0):  JavaThread ""ExceptionStressModule"" [_thread_in_vm, id=1597054, stack(0x0000fffbd09c0000,0x0000fffbd0bc0000)]

Stack: [0x0000fffbd09c0000,0x0000fffbd0bc0000],  sp=0x0000fffbd0bbdd90,  free space=2039k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd74de8]  HandleArea::allocate_handle(oop)+0x108  (handles.cpp:41)
V  [libjvm.so+0x8439f8]  Handle::Handle(Thread*, oop)+0xa8  (handles.inline.hpp:42)
V  [libjvm.so+0xe651cc]  InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)+0x108  (interpreterRuntime.cpp:466)
j  java.io.FileInputStream.open(Ljava/lang/String;)V+6 java.base@20-ea
j  java.io.FileInputStream.<init>(Ljava/io/File;)V+96 java.base@20-ea
J 1908 c1 applications.kitchensink.process.stress.modules.ExceptionStressModule.testCheckedIO()V (112 bytes) @ 0x0000fffc00919b70 [0x0000fffc009199c0+0x00000000000001b0]
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.runOneIteration()V+17
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.execute()V+20
j  applications.kitchensink.process.stress.modules.StressModule.run()V+118
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x0000fffc07c0017c
V  [libjvm.so+0xe78a9c]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x5ac  (javaCalls.cpp:417)
V  [libjvm.so+0xe790c0]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x3b0  (javaCalls.cpp:331)
V  [libjvm.so+0xe79414]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x64  (javaCalls.cpp:193)
V  [libjvm.so+0xff35b8]  thread_entry(JavaThread*, JavaThread*)+0x118  (jvm.cpp:2876)
V  [libjvm.so+0xeaeb20]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:699)
V  [libjvm.so+0x17aee58]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x14c4134]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:710)
C  [libpthread.so.0+0x7908]  start_thread+0x188",,,,,,,,,,JDK-8300364,JDK-8300004,,,,,,,,,,,,,,,,,,,,,,JDK-8299279,,,,JDK-8299279,,,,JDK-8288971,JDK-8289698,,,,,,,"2023-01-03 15:42;pchilanomate;redzonetest_aarch64.c;https://bugs.openjdk.org/secure/attachment/102191/redzonetest_aarch64.c","2023-01-08 18:07;fyang;redzonetest_riscv64.c;https://bugs.openjdk.org/secure/attachment/102237/redzonetest_riscv64.c","2023-01-03 15:41;pchilanomate;redzonetest_x86.c;https://bugs.openjdk.org/secure/attachment/102190/redzonetest_x86.c",,,,,aarch64,,,,,,b05,20,,linux,,,,,,,"0|i2yrwb:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-04 11:08;mseledtsov;ILW = HLM = P3;;;","2022-10-17 07:13;coleenp;Looks like an exception oop was clobbered.  It's only on aarch64 and it looks like a C2 bug. Edit. I don't think C2 because one failure has a C1 compiled frame in the stack trace.;;;","2022-10-20 13:16;coleenp;(gdb) print exception
$3 = (oopDesc *) 0xfffd23a64974
(gdb) x 0xfffd23a64974/10x
exception in InterpreterRuntime::exception_handler_for_exception isn't an oop;;;","2022-10-28 14:44;dcubed;Here's the crashing thread's stack for the jdk-20+22-1566-tier5 sighting:

applications/kitchensink/Kitchensink.java

---------------  T H R E A D  ---------------

Current thread (0x0000fffda85fa6a0):  JavaThread ""ExceptionStressModule"" [_thread_in_vm, id=473272, stack(0x0000fffd69e80000,0x0000fffd6a080000)]

Stack: [0x0000fffd69e80000,0x0000fffd6a080000],  sp=0x0000fffd6a07de00,  free space=2039k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xda0468]  HandleArea::allocate_handle(oop)+0x108  (handles.cpp:41)
V  [libjvm.so+0x858c58]  Handle::Handle(Thread*, oop)+0xa8  (handles.inline.hpp:42)
V  [libjvm.so+0xe9375c]  InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)+0x108  (interpreterRuntime.cpp:467)
j  java.io.FileInputStream.open(Ljava/lang/String;)V+6 java.base@20-ea
j  java.io.FileInputStream.<init>(Ljava/io/File;)V+96 java.base@20-ea
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.testCheckedIO()V+21
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.runOneIteration()V+17
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.execute()V+20
j  applications.kitchensink.process.stress.modules.StressModule.run()V+118
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x0000fffd983c017c
V  [libjvm.so+0xea71dc]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x5ac  (javaCalls.cpp:417)
V  [libjvm.so+0xea7800]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x3b0  (javaCalls.cpp:331)
V  [libjvm.so+0xea7c78]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x64  (javaCalls.cpp:193)
V  [libjvm.so+0x10238c8]  thread_entry(JavaThread*, JavaThread*)+0x118  (jvm.cpp:2876)
V  [libjvm.so+0xedd400]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:699)
V  [libjvm.so+0x17f2b18]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x1500564]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:710)
C  [libpthread.so.0+0x7908]  start_thread+0x188

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.io.FileInputStream.open(Ljava/lang/String;)V+6 java.base@20-ea
j  java.io.FileInputStream.<init>(Ljava/io/File;)V+96 java.base@20-ea
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.testCheckedIO()V+21
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.runOneIteration()V+17
j  applications.kitchensink.process.stress.modules.ExceptionStressModule.execute()V+20
j  applications.kitchensink.process.stress.modules.StressModule.run()V+118
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x0000fffd983c017c;;;","2022-11-16 12:20;coleenp;Not all failures are parallel GC.;;;","2022-12-01 08:05;coleenp;#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94906/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3c0e181b-13b3-4e75-b2c4-4d68ecfbeee5/runs/93ec8f4b-0aca-4ebd-8450-f34ad559691a/workspace/open/src/hotspot/share/runtime/handles.cpp:41), pid=473227, tid=473272
#  assert(oopDesc::is_oop(obj)) failed: not an oop: 0x0000fffd983d49f4
#

This address is in the code heap.;;;","2022-12-02 16:06;coleenp;I think this is a compiler bug.  Somehow the exception points into the code cache.  The interpreter frame could be the result of deoptimization.

Run with below and you'll get lots of the same failure:

mach5 remote-build-and-test -b linux-aarch64-debug --test applications/kitchensink/Kitchensink.java --test-repeat 400 -a
 -XX:+UseParallelGC -XX:+IgnoreUnrecognizedVMOptions -XX:-TieredCompilation -XX:+StressReflectiveCode -XX:-ReduceInitial
CardMarks -XX:-ReduceBulkZeroing -XX:+UnlockDiagnosticVMOptions -XX:+ExpandSubTypeCheckAtParseTime;;;","2022-12-02 16:07;coleenp;I reset it to 'new' so you'd see it.;;;","2022-12-07 23:35;rcastanedalo;This failure can be traced to JDK-8288971 and/or its follow-up fix JDK-8289698, moving back to runtime.;;;","2022-12-08 05:51;coleenp;[~rcastanedalo] Thank you for tracking down the cause.;;;","2022-12-08 07:07;coleenp;I didn't see anything confidential in the description so made the bug open.;;;","2022-12-09 05:02;coleenp;[~aph] we can help you run these closed tests if needed and send nmethod print outs.;;;","2023-01-03 15:41;pchilanomate;Ok, found the issue. The problem is a tricky interaction between part of the changes in JDK-8288971, JFR sampling, and the fact that on Linux there is no red zone defined in the ABI (nor implemented it seems) for aarch64.

The problem starts in JDK-8288971 with the value we set initially for extended_sp on natives frames, which is later used to restore the machine stack pointer. It doesn't account for the oop that could be pushed to the stack in case the method throws an exception. This can create a situation in Interpreter::_throw_exception_entry where we push an exception oop to the Java expression stack below the actual physical stack pointer. 
Looking at the code where this happens it might seem this shouldn't be an issue because after pushing the oop we always immediately branch to Interpreter::_remove_activation_entry (no exception handler for native code) and the first instruction pops it back. Unfortunately when JFR is present the JavaThread could receive a suspend signal right between the push and pop operations. And here comes the last part of the puzzle: unlike the System V AMD64 ABI [1] (...""The 128-byte area beyond the location pointed to by %rsp is considered to be reserved and shall not be modified by signal or interrupt handlers""...), there is no red zone defined on Linux aarch64. This means the kernel can use the memory right below sp when setting up the signal handler. And this is actually what is happening. The oop is overwritten during the handling of the suspend signal and upon return we pop from the expression stack what we think should be the oop but it's not anymore. When passing it around while rethrowing in the caller of this native method we crash.

Just to confirm the behavior of signal handling regarding this red zone on different platforms I wrote a small C program with inline assembly (attached both x86 and aarch64 versions). It writes to the two words below the stack pointer, forces a sigsegv, and upon return from the signal handler it reads the two words back and verifies they were not overwritten. The test passes on macOS and Linux running on x86-64. This makes sense as per the ABI requirements mentioned before. On aarch64 however, the test passes on macOS but fails on Linux! I did a little bit of search and found that macOS does defines a redzone on aarch64 [2], so the fact it passes also makes sense (and also explains why we have only seen crashes on Linux but not on macOS).

The more detailed scenario of the crash is as follows:

1 - In the native wrapper, after returning from the native method the JavaThread sees it has a pending exception. After jumping through some hoops we end up in Interpreter::rethrow_exception_entry().
2 - Here we clear the expression stack (esp now points to interpreter_frame_monitor_block_top_offset in frame).
3 - We call InterpreterRuntime::exception_handler_for_exception(). Since this is a native method, i.e. no exception handler, the continuation returned is Interpreter::_remove_activation_entry. 
4 - Before making a branch there we do two things. First we restore the machine sp with the extended_sp value saved when creating the frame. Now sp and esp are pointing to the same place (interpreter_frame_monitor_block_top_offset in frame). Second, we push the exception oop on the Java stack (this is a shared path in case we actually jump to an exception handler). Since esp and sp are equal, that means the pushed value will be stored below sp!
5 - Now, before branching to Interpreter::_remove_activation_entry, or right after it but before popping back the oop, we receive a signal from the JFR sampler. The set up of the signal handler by the kernel happens right below sp and the stored oop is now overwritten.
6 - We return from the signal handler, pop from the Java stack what we think should be the oop and pass it around when rethrowing in the caller where we crash.

I verified all this trace by adding appropriate logging, including catching the JFR sampler suspending the crashing thread at a pc right between the push and pop.

Before JDK-8288971 this wasn't an issue because we always added more space when restoring the machine sp. [3]


I see two possible solutions:

1- Add extra space for sp when creating a native frame as we do with normal frames.
2- When branching to Interpreter::_remove_activation_entry the oop will always be in r3, so although we need to do the pop we don't need the value.

I'll test the first approach and send the patch for review if there are no issues.


[1] https://refspecs.linuxfoundation.org/elf/x86_64-abi-0.99.pdf
[2] https://developer.apple.com/documentation/xcode/writing-arm64-code-for-apple-platforms
[3] https://github.com/openjdk/jdk/pull/9239/files#diff-243849000dba105909d30e884da7afeaea0dae7bd788732a1ef359d5f1f8a9f6L1746;;;","2023-01-05 12:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/85
Date: 2023-01-05 20:24:25 +0000;;;","2023-01-08 18:09;fyang;JVM on linux-riscv64 bears the same problem as it has the same handling as aarch64 on this part [1][2]. And linux-riscv64 doesn't have a redzone defined/implemented either, which I have verified with a small C program with inline assembly like you do for x86 and aarch64. So I have prepared a fix for linux-riscv64. See comment on PR. Thanks.

[1] https://bugs.openjdk.org/browse/JDK-8290280
[2] https://github.com/openjdk/jdk/commit/4dd236b40abfeb1200e884021b90226046bc4b85;;;","2023-01-10 09:18;dukebot;Changeset: 151450ea
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2023-01-10 17:16:26 +0000
URL:       https://git.openjdk.org/jdk20/commit/151450ea9b78243130eb89a1c8ea9ad7ac13fb4a
;;;",,,,,,,
Add cgroups keyword to TestDockerBasic.java ,JDK-8294740,5084629,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,dholmes,dholmes,2022-10-03 16:12,2023-06-29 06:27,2023-10-01 09:56,2022-10-03 20:24,20,,,,,,20,core-svc,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier5,,,,,,,,,,,,,"test/jdk/jdk/internal/platform/docker/TestDockerBasic.java fails with

[Error: OCI runtime error: runc: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: process_linux.go:508: setting cgroup config for procHooks process caused: cannot set memory limit: container could not join or create cgroup

This happens on OL8 not OL7. This started with the integration of JDK-8293540.

This test uses cgroups features but is missing the ""@key cgroups"" line. See JDK-8255787",,,,,,,,,,JDK-8295397,JDK-8297262,JDK-8305633,JDK-8306205,JDK-8305243,JDK-8305241,,,,,,,,,,,,,,,,,,,,,,JDK-8293540,,,,JDK-8255787,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,"0|i2yrv7:",9223372036854775807,b18,,,,,,,,,,,"2022-10-03 17:07;iklam;Failure here. Apparently our runtime does not allow the combination of the following in the command-line

     --memory 300m --volume /sys/fs/cgroup:/cgroup-in:ro

https://github.com/openjdk/jdk/blob/07ed68efb2e9758732787447fb0339d0899be884/test/jdk/jdk/internal/platform/docker/TestDockerBasic.java#L56-L71

    private static void testXshowSettingsSystem(boolean addCgroupMounts) throws Exception {
        String testMsg = (addCgroupMounts ? "" with "" : "" without "") + "" additional cgroup FS mounts in /cgroup-in"";
        Common.logNewTestCase(""Test TestDockerBasic "" + testMsg);
        DockerRunOptions opts =
                new DockerRunOptions(imageName, ""/jdk/bin/java"", ""-version"");
        opts.addJavaOpts(""-esa"");
        opts.addJavaOpts(""-XshowSettings:system"");
        opts.addDockerOpts(""--memory"", ""300m"");
        if (addCgroupMounts) {
            // Extra cgroup mount should be ignored by product code
            opts.addDockerOpts(""--volume"", ""/sys/fs/cgroup:/cgroup-in:ro"");
        }
        DockerTestUtils.dockerRunJava(opts).shouldHaveExitValue(0)  <<<< LINE 68
            .shouldNotContain(""AssertionError"")
            .shouldContain(""Memory Limit: 300.00M"");
    }
}

----------System.err:(17/1035)----------
 stdout: [];
 stderr: [Error: OCI runtime error: runc: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: process_linux.go:508: setting cgroup config for procHooks process caused: cannot set memory limit: container could not join or create cgroup
]
 exitValue = 126

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [126]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at TestDockerBasic.testXshowSettingsSystem(TestDockerBasic.java:68)
	at TestDockerBasic.main(TestDockerBasic.java:49)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1588)


;;;","2022-10-03 18:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10547
Date: 2022-10-04 01:03:25 +0000;;;","2022-10-03 20:24;dukebot;Changeset: ae79af2a
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-10-04 03:21:10 +0000
URL:       https://git.openjdk.org/jdk/commit/ae79af2ad67b51a7608f4c9060421dd175cabf3f
;;;","2022-10-14 07:05;sgehwolf;Fix Request (OpenJDK 17u):

Follow up, test-only fix for JDK-8293540. Should be very little risk as it's only touching a comment in a test.;;;","2022-10-14 07:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/795
Date: 2022-10-14 14:03:36 +0000;;;","2022-11-17 06:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1527
Date: 2022-11-17 14:33:34 +0000;;;","2022-11-17 07:27;sgehwolf;Fix Request (OpenJDK 11u):

Follow up, test-only fix for JDK-8293540. Should be very little risk as it's only touching a comment in a test. ;;;",,,,,,,,,,,,,,,,
jdk/jshell/ToolShiftTabTest.java timed out,JDK-8294739,5084628,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asotona,dholmes,dholmes,2022-10-03 15:33,2022-11-28 14:44,2023-10-01 09:56,2022-11-15 04:17,20,,,,,,20,tools,,0,intermittent,tier1,,,,,,,,,,,,,,,,,,"Test: jdk/jshell/ToolShiftTabTest.java

----------System.out:(38/1139)*----------
|  Welcome to JShell -- Version 20-ea
|  For an introduction type: /help intro
\u001b[?2004h \u0005123\u0007
Unexpected character after Shift+Tab.
Use ""i"" for auto-import, ""v"" for variable creation, or ""m"" for method creation.
For more information see:
/help shortcuts

 \u0005123
\u001b[?2004l\u001b[?2004h \u0005
\u001b[?2004l\u001b[?2004h \u0005/exit
\u001b[?2004l|  Goodbye
test ToolShiftTabTest.testFixBad(): success
|  Welcome to JShell -- Version 20-ea
|  For an introduction type: /help intro
\u001b[?2004h \u0005Frame
No candidate fully qualified names found to import.
Results may be incomplete; try again later for complete results.
\u0007
 \u0005Frame1.WIDTH
\u001b[?2004l|  Error:
|  cannot find symbol
|    symbol:   variable Frame1
|  Frame1.WIDTH
|  ^----^
\u001b[?2004h \u0005Frame
No candidate fully qualified names found to import.
Results may be incomplete; try again later for complete results.
\u0007
 \u0005Frame1.WIDTH
\u001b[?2004l|  Error:
|  cannot find symbol
|    symbol:   variable Frame1
|  Frame1.WIDTH
|  ^----^
\u001b[?2004h \u0005Frame
No candidate fully qualified names found to import.
Results may
result: Error. Agent error: java.lang.Exception: Agent 9 timed out with a timeout of 1200 seconds; check console log for any additional details",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,,"0|i2yruz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-10-19 06:11;dcubed;Bumping from P4 -> P3 since this failure has been happening
in Tier1.;;;","2022-10-26 02:14;asotona;There is exhaustive busy waiting in one of the tests.;;;","2022-10-26 02:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10869
Date: 2022-10-26 09:26:56 +0000;;;","2022-11-15 04:17;dukebot;Changeset: c49e4841
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2022-11-15 12:13:36 +0000
URL:       https://git.openjdk.org/jdk/commit/c49e48417d8e58dc34455cb5b503a1ba83a710aa
;;;",,,,,,,,,,,,,,,,,,,
RSASSA-PSS RFC link incorrectly formatted,JDK-8294735,5084621,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mullan,mullan,mullan,2022-10-03 12:26,2023-08-09 06:21,2023-10-01 09:56,2023-03-24 05:15,,,,,,,21,security-libs,,0,docs-only,starter-bug,,,,,,,,,,,,,,,,,,"In the standard algorithms spec, the RSASSA-PSS RFC link is not formatted correctly, and you just see the text of the hyperlink, as so:

[PKCS #1 v2.2] (https://tools.ietf.org/html/rfc8017)",,,,,,,,,,JDK-8302359,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yrtf:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,,,,,,,,,,,,,,,,,,,,,,,
Redundant override in AES implementation,JDK-8294734,5084619,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-10-03 12:09,2022-10-10 15:34,2023-10-01 09:56,2022-10-05 10:28,,,,,,,20,security-libs,,0,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,,,"In the AES cipher implementation, the override of engineDoFinal() method in the following code is not necessary as it only calls super.

    /**
     * Finalize crypto operation with ByteBuffers
     *
     * @param input the input ByteBuffer
     * @param output the output ByteBuffer
     *
     * @return output length
     * @throws ShortBufferException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     */
    protected int engineDoFinal(ByteBuffer input, ByteBuffer output)
        throws ShortBufferException, IllegalBlockSizeException,
        BadPaddingException {
        return super.engineDoFinal(input, output);
    }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yrsz:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2022-10-03 12:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10545
Date: 2022-10-03 19:18:20 +0000;;;","2022-10-05 10:28;dukebot;Changeset: f2c57186
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-10-05 17:25:58 +0000
URL:       https://git.openjdk.org/jdk/commit/f2c57186a40bea4d5ad1c3ba010b59e552db624d
;;;",,,,,,,,,,,,,,,,,,,,,
[s390] Implement nmethod entry barriers,JDK-8294729,5084614,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsteele,tsteele,tsteele,2022-10-03 10:47,2022-11-14 19:11,2023-10-01 09:56,2022-10-31 09:02,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"Currently, support for nmethod entry barriers (JDK-8210498) is missing on s390. Since JDK-8290025, this has lead to a build error--failing at BarrierSetNMethod::disarm

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/ty/openjdk/jdk-current/src/hotspot/cpu/s390/gc/shared/barrierSetNMethod_s390.cpp:34), pid=446585, tid=446664
#  Error: ShouldNotReachHere()
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.ty.jdk-current)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc.ty.jdk-current, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-s390x)
# Problematic frame:
# V  [libjvm.so+0x397aa0]  BarrierSetNMethod::disarm(nmethod*)+0x30
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294363,,JDK-8210498,JDK-8290025,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,linux,,,,,,,"0|i2yrrv:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-10-26 12:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10558
Date: 2022-10-04 14:27:09 +0000;;;","2022-10-31 09:02;dukebot;Changeset: f4d8c20c
Author:    Tyler Steele <tsteele@openjdk.org>
Date:      2022-10-31 15:58:44 +0000
URL:       https://git.openjdk.org/jdk/commit/f4d8c20c3b81f65f955591c64281a103225691d9
;;;",,,,,,,,,,,,,,,,,,,,,
Update URLs in minefield tests,JDK-8294726,5084611,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-10-03 10:26,2022-10-10 15:32,2023-10-01 09:56,2022-10-03 13:23,20,,,,,,20,tools,,0,noreg-self,,,,,,,,,,,,,,,,,,,"This comment in PR #10366  was accidentally overlooked before the change was integrated:

Please change this and other github URLs to use ""https://git.openjdk.org/jdk"" as the prefix, e.g.:

https://git.openjdk.org/jdk/blob/jdk-19%2B36/test/langtools/tools/javac/Paths/Class-Path.sh",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yrr7:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-03 11:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10542
Date: 2022-10-03 17:59:06 +0000;;;","2022-10-03 13:23;dukebot;Changeset: 090cdfc7
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-10-03 20:20:53 +0000
URL:       https://git.openjdk.org/jdk/commit/090cdfc7a2e280c620a0926512fb67f0ce7f3c21
;;;",,,,,,,,,,,,,,,,,,,,,
(bf) DirectByteBuffer constructor will leak if allocating Deallocator or Cleaner fails with OOME,JDK-8294717,5084599,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,alanb,alanb,2022-10-03 06:07,2023-05-25 11:36,2023-10-01 09:56,2022-10-07 10:44,11,17,20,8,,,20,core-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,noreg-hard,,,,,,,,,,,,,,,,"This was reported on nio-dev. In DirectByteBuffer, if allocating the Deallocator or Cleaner failed with OOME then the constructor will throw without releasing the memory that it has allocated.",,,,,,,,,,JDK-8308893,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yroj:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-10-05 16:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10588
Date: 2022-10-05 23:54:47 +0000;;;","2022-10-07 10:44;dukebot;Changeset: 4cbac40d
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-10-07 17:43:00 +0000
URL:       https://git.openjdk.org/jdk/commit/4cbac40de956974760cf54183b3ba29f0b5ec331
;;;","2023-05-24 12:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1396
Date: 2023-05-24 19:44:11 +0000;;;","2023-05-25 01:56;shade;Fix Request (17u)

Eliminates a memory leak in a corner case. Applies cleanly. Testing passes, see 17u PR.;;;",,,,,,,,,,,,,,,,,,,
Disable an assertion in test/jdk/java/util/DoubleStreamSums/CompensatedSums.java,JDK-8294705,5084583,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,rgiulietti,rgiulietti,2022-10-03 01:15,2023-08-07 14:13,2023-10-01 09:56,2022-10-20 10:07,11,17,18,19,,,20,core-libs,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"Due to floating-point addition being inherently non associative, and due to the unpredictable scheduling of the threads used in parallel streams, a specific assertion in this test can fail intermittently.

This fix silences that specific assertion, leaving the rest of the code intact for future enhancements.",,,,,,,,,,JDK-8301102,JDK-8301259,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288280,,JDK-8313297,,,,JDK-8288280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yrkz:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@c356540,,,,,,,Verified,,"2022-10-03 01:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10529
Date: 2022-10-03 08:23:36 +0000;;;","2022-10-20 10:07;dukebot;Changeset: c08ff2c7
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2022-10-20 10:47:39 +0000
URL:       https://git.openjdk.org/jdk/commit/c08ff2c7b88e94885f6b4701654a9e47e49567b0
;;;","2023-01-23 17:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1103
Date: 2023-01-24 01:37:28 +0000;;;","2023-01-24 05:36;serb;Fix request (17u)

Clean backport. The fix for the unstable test which intermittently fails in GA.
Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1103;;;","2023-01-25 11:02;serb;Fix request (11u)

Clean backport. The fix for the unstable test which intermittently fails in GA.
Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/1691;;;","2023-01-25 11:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1691
Date: 2023-01-25 18:14:47 +0000;;;",,,,,,,,,,,,,,,,,
BufferedInputStream uses undefined value range for markpos,JDK-8294702,5084579,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mkarg,mkarg,mkarg,2022-10-03 00:17,2022-10-17 13:54,2023-10-01 09:56,2022-10-11 09:09,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,"The code of BufferedInputStream.transferTo contains several code locations where markpos is using an undefined value range by checking `markpos < 0`. The spec of BIS is very clear about markpos either being exactly -1, or being a value larger than that. To be spec compliant, the code should be changed from < 0 to == -1 everywhere.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yrk3:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2022-10-03 00:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10528
Date: 2022-10-03 07:29:02 +0000;;;","2022-10-11 09:08;dukebot;Changeset: 619cd825
Author:    Markus Karg <markus@headcrashing.eu>
Committer: Brian Burkhalter <bpb@openjdk.org>
Date:      2022-10-11 16:07:31 +0000
URL:       https://git.openjdk.org/jdk/commit/619cd825b53465c4d533d5cab70070c08964fa91
;;;",,,,,,,,,,,,,,,,,,,,,
java/lang/Thread/virtual/ThreadAPI.testGetStackTrace2 failed with non-empty stack trace,JDK-8294697,5084563,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2022-10-02 07:05,2022-10-12 23:08,2023-10-01 09:56,2022-10-06 01:03,20,,,,,,20,core-libs,,0,loom,noreg-self,,,,,,,,,,,,,,,,,,"ThreadAPI.testGetStackTrace2 failed with a debug build and -Xcomp -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation with:

test ThreadAPI.testGetStackTrace2(): failure
java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertTrue(Assert.java:45)
	at org.testng.Assert.assertTrue(Assert.java:55)
	at ThreadAPI.testGetStackTrace2(ThreadAPI.java:1897)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1588)

The test uses a delay of 3 seconds when testing if all carriers are saturated. It needs to be made more robust for test runs like this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yrgj:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-10-05 08:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10576
Date: 2022-10-05 14:05:38 +0000;;;","2022-10-06 01:02;dukebot;Changeset: ad7b7d40
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-10-06 07:59:43 +0000
URL:       https://git.openjdk.org/jdk/commit/ad7b7d40ce7b71d9e1e13e1b92f3ca6b30e635a2
;;;",,,,,,,,,,,,,,,,,,,,,
dynamicArchive/RelativePath.java is running other test case,JDK-8294691,5084548,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,matsaave,ccheung,ccheung,2022-09-30 18:19,2022-10-12 23:09,2023-10-01 09:56,2022-10-07 13:46,20,,,,,,20,hotspot,,0,cds,noreg-self,starter,,,,,,,,,,,,,,,,,"The problem is due to the runTest statement below:
     public static void main(String[] args) throws Exception {
         runTest(AppendClasspath::testDefaultBase);       
     }

It should be:
    runTest(RelativePath::testDefaultBase);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yrd7:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-30 18:21;ccheung;After correcting the runTest statement, the test needs to create a dynamic CDS archive before calling runWithRelativePath().
Otherwise, the dynamic archive will not be found.;;;","2022-10-06 09:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10597
Date: 2022-10-06 15:35:50 +0000;;;","2022-10-07 13:46;dukebot;Changeset: 3466e999
Author:    Matias Saavedra Silva <matias.s.saavedra.silva@oracle.com>
Committer: Calvin Cheung <ccheung@openjdk.org>
Date:      2022-10-07 20:44:35 +0000
URL:       https://git.openjdk.org/jdk/commit/3466e999348696c8666afd7a59c6947f61fe4d6a
;;;",,,,,,,,,,,,,,,,,,,,
Refactor scaled border rendering,JDK-8294680,5084532,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,honkar,aivanov,aivanov,2022-09-30 10:32,2023-05-30 12:43,2023-10-01 09:56,2023-01-19 10:46,11,17,19,20,,,21,client-libs,,0,11-bp,17-bp,hidpi,sn_132,sn_133,sn_134,sn_135,,,,,,,,,,,,,"There are several issues which deal with border rendering. The first one was JDK-8279614, it dealt with EtchedBorder.

The next one is JDK-8015739. It uses the same approach. Now that two borders are fixed, it is time to refactor the approach to avoid duplicate code.

I propose adding a utility method to SwingUtilities3:

1. Reset the transform;
2. Call the passed interface* to render the unscaled border;
3. Restore the transform.

It will unify border rendering. Other border types will use the utility method.

* The method which renders the border with unscaled Graphics could be a private method in the calling class, method reference could be passed to the utility method.",,,,,,,,,,JDK-8308998,,,,,,,,,,,,,,,,,,,JDK-8294484,,,,JDK-8307447,JDK-8294921,,,JDK-8015739,JDK-8279614,,,JDK-8282958,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,"0|i2yr9n:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-11-07 08:48;honkar;Add instance of check before converting Graphics object to Graphics 2D.;;;","2022-12-07 13:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11571
Date: 2022-12-07 21:34:12 +0000;;;","2023-01-19 10:46;dukebot;Changeset: 80ab50b3
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-01-19 18:43:54 +0000
URL:       https://git.openjdk.org/jdk/commit/80ab50b3389cbdae6bced7cea3f3a84b94c5bb82
;;;",,,,,,,,,,,,,,,,,,,,
[lworld] Update AccessFlags tests to include ACC_IDENTITY and ACC_VALUE,JDK-8294678,5084529,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2022-09-30 07:18,2022-10-06 07:19,2023-10-01 09:56,2022-10-06 07:19,,,,,,,repo-valhalla,core-libs,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"The tests for Class.accessFlags should be updated to check ACC_IDENTITY and ACC_VALUE.

The Class.getModifiers does not specify ACC_IDENTITY and ACC_VALUE for array classes, primitive classes, and void.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yr8z:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-10-04 12:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/775
Date: 2022-10-04 19:16:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
chunklevel::MAX_CHUNK_WORD_SIZE too small for some applications,JDK-8294677,5083989,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,webbuggrp,webbuggrp,2022-09-22 17:28,2023-02-21 00:18,2023-10-01 09:56,2023-01-23 22:36,17,,,,,,21,hotspot,,0,amazon-interest,dcsswa,jdk17u-fix-request,jdk17u-fix-yes,metaspace,regression,reproducer-no,sap-interest,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Failed to compile if a test has lots of function blocks if running on JDK 17, but JDK 8 works.

REGRESSION : Last worked in version 8

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home
export PATH=${JAVA_HOME}/bin:${PATH}

git clone https://github.com/delta-io/delta.git
cd delta
git checkout 6a30e958de4322100b2ccfa13fa29ae155369a07
build/sbt clean  ""core/testOnly *.DeltaErrorsSuite""

ACTUAL -
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (metaspaceArena.cpp:93), pid=45644, tid=6147
#  guarantee(requested_word_size <= chunklevel::MAX_CHUNK_WORD_SIZE) failed: Requested size too large (528698) - max allowed size per allocation is 524288.
#
# JRE version: Java(TM) SE Runtime Environment (17.0+35) (build 17+35-LTS-2724)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17+35-LTS-2724, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /Users/yumwang/opensource/delta/core/hs_err_pid45644.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Exception in thread ""Thread-9"" java.io.EOFException
  | => cat java.base/java.io.ObjectInputStream$BlockDataInputStream.peekByte(ObjectInputStream.java:3192)
        at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1693)
        at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:514)
        at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:472)
        at org.scalatest.tools.Framework$ScalaTestRunner$Skeleton$1$React.react(Framework.scala:839)
        at org.scalatest.tools.Framework$ScalaTestRunner$Skeleton$1.run(Framework.scala:828)
        at java.base/java.lang.Thread.run(Thread.java:833)

---------- BEGIN SOURCE ----------
https://github.com/delta-io/delta/blob/2499f5408c63de39914a789cf8bb57137224fb3a/core/src/test/scala/org/apache/spark/sql/delta/DeltaErrorsSuite.scala#L146
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
https://github.com/delta-io/delta/pull/1391/files#diff-7fb91cd0f8dfcccf78ab6ff32c97945a15df962a6572f6236575addc3067d824R146

FREQUENCY : always


",,,,,,,,,,JDK-8302942,JDK-8301827,JDK-8302617,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301786,,,,JDK-8300729,JDK-8251158,,,,,,,"2023-01-14 02:11;stuefe;DeltaErrorsSuiteBase-javap.txt.tar.gz;https://bugs.openjdk.org/secure/attachment/102318/DeltaErrorsSuiteBase-javap.txt.tar.gz","2023-01-14 02:08;stuefe;DeltaErrorsSuiteBase.class;https://bugs.openjdk.org/secure/attachment/102317/DeltaErrorsSuiteBase.class","2023-01-13 04:48;simonis;hs_err_pid30425.log;https://bugs.openjdk.org/secure/attachment/102302/hs_err_pid30425.log","2023-01-13 04:48;simonis;hs_err_pid7192.log;https://bugs.openjdk.org/secure/attachment/102303/hs_err_pid7192.log",,,,generic,,,,,,,,,generic,,,,,,,"0|i2ynwz:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-25 11:17;mseledtsov;ILW = HLM = P3;;;","2023-01-13 05:00;simonis;This issue is a direct consequence of JDK-8251158 which limited the maximum allocation size in Metaspace to MAX_CHUNK_WORD_SIZE (currently 4M / 524288 words). It seems that some class files can have larger stackmap tables (see attached hs_err files).

The problem is easily reproducible (see CUSTOMER SUBMITTED WORKAROUND in the initial report):
```
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home
export PATH=${JAVA_HOME}/bin:${PATH}

git clone https://github.com/delta-io/delta.git
cd delta
git checkout 6a30e958de4322100b2ccfa13fa29ae155369a07
build/sbt clean  ""core/testOnly *.DeltaErrorsSuite""
```

Looks like we have to increase MAX_CHUNK_WORD_SIZE and/or make it configurable through a command line options to avoid such issues in the future.
;;;","2023-01-14 02:08;stuefe;Seems rare but another occurrence found here: https://github.com/rakudo/rakudo/issues/4952 . 

In both cases (here and there) gigantic generated classes are involved with insane stack maps.

In case of delta, I boiled it down to a single class, ""org/apache/spark/sql/delta/DeltaErrorsSuiteBase.class"", that is 6.8MB and about 10x the size of any other large class. There is one StackMapTable with 1600~ entries, and the entries are very large themselves.

See class and javap output attached.

I'll check what the best way to deal with this is.

;;;","2023-01-14 05:11;stuefe;The generated code contains two functions, both seem from the bytecode-like very large switch constructs. They both scrape at the very end of method size (37k resp. 56k bytecodes). 

They accumulate an ever growing local var array, in the thousands range. I'm pretty sure this is unintended. 

e.g. 

```
grep store DeltaErrorsSuiteBase-javap.txt
       143: astore        7    
       148: astore        8    
       164: astore        9    
       201: astore        6    
       244: astore        11   
       249: astore        12   
       265: astore        13   
       302: astore        10   
       383: astore        14   
       390: astore        16   
       395: astore        17   
       411: astore        18   
       448: astore        15   
...
      37041: astore_w      1148
      37084: astore_w      1145
      37134: astore_w      1150
      37157: astore_w      1151
      37183: astore_w      1152
      37226: astore_w      1149
      37311: astore_w      1153
      37322: astore_w      1155
      37329: astore_w      1156
      37355: astore_w      1157
      37398: astore_w      1154
      37448: astore_w      1159
      37455: astore_w      1160
      37481: astore_w      1161
      37524: astore_w      1158
      37574: astore_w      1163
      37597: astore_w      1164
      37623: astore_w      1165
      37666: astore_w      1162
```

Also not optimal is the way the stackmap table is present. There are a lot of function blocks, hence a lot of stackmap entries (>1000). All of them are full entries (https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.4). Unfortunately, since the operand stack seems to never be empty, or only 1-element-sized, none of the ""same_frame_"" presentations can be used, which means that on each StackMapTable entry the whole insane local var array is repeated.

;;;","2023-01-14 06:36;stuefe;I have a VM with - as a test - increased Root chunk size of 32MB. Such a change would be minimally invasive and it fixes the problem here with Delta.

However, understanding more about the problem, I think StackMapTables can get really big for very large and inefficiently generated methods. Therefore another option - possibly in addition to increasing the root chunk size - would be to allow side allocations per malloc. I dislike this on principle, since it makes the allocator and things like ""Metaspace::contains()"" more complex. Therefore lets see if the increased root chunk size already does the trick.

A little mental calculation:
A method with 64k of byte codes, consisting of almost exclusively stores into the local var array, having a stack map table entry for every bytecode (I am still unsure about the ""block"" term in the class file spec), and each entry being expressed in full, could come to a stack map table size of several GB. 64k byte codes -> 64kish stack map table entries, each repeatedly describing an ever growing var array of max 64k size... 

Of course, such a class would be absurd, and would it be loadable, it would eat up tons of memory.;;;","2023-01-19 23:31;stuefe;I will write a simple bandaid patch that increases root chunk size to 16M. That can be easily downported. Since that is not a full solution to the problem, I also opened https://bugs.openjdk.org/browse/JDK-8300729, a proposal to have limitless metaspace allocations.;;;","2023-01-20 07:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12115
Date: 2023-01-20 15:15:01 +0000;;;","2023-01-23 22:36;dukebot;Changeset: 2292ce13
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-01-24 06:35:26 +0000
URL:       https://git.openjdk.org/jdk/commit/2292ce137c16accf0622600d5a096403b8a8058d
;;;","2023-02-01 02:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1142
Date: 2023-02-01 10:43:30 +0000;;;","2023-02-02 23:20;stuefe;Fix Request 17u
 
This fixes an issue where the VM would fail to load a generated class.
The risk is small. It increases the maximum size of metaspace chunks from 4M to 16M. As a side effect, this may subtly change the geometry of non-class metaspace mappings on 32-bit (less of them, but larger) but this should be benign.
Patch does not apply cleanly; changes are very minor.
Tests:
- manually ran hotspot_metaspace on x64 and x86
- SAP nightlies
- GHAs
- I also manually tested x64 to check that we don't have a memory usage regression.
;;;",,,,,,,,,,,,,
[JVMCI] InstalledCode.deoptimize(false) should not touch address field,JDK-8294676,5084523,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2022-09-30 06:19,2022-11-10 02:38,2023-10-01 09:56,2022-10-01 04:22,20,,,,,,20,hotspot,,0,jdk11-graalvm,jdk17-graalvm,jdk19-graalvm,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,"The ability to make an nmethod non-entrant via an InstalledCode object was added by JDK-8292917. However, the implementation also clears the InstalledCode.address field. This severs the connection between an InstalledCode object an its nmethod. This makes it impossible for users of the InstalledCode object to do things like subsequently deoptimize the nmethod which may be necessary if assumptions used when compiling the nmethod are invalidated (a common case in Truffle).

The fix is to only clear the InstalledCode.address field when calling InstalledCode.invalidate(true).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8163894,,,,,,,,JDK-8292917,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yr7n:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-30 09:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10514
Date: 2022-09-30 16:32:25 +0000;;;","2022-09-30 17:13;dlong;ILW = incorrect/undesired behavior; always; no workaround = LHH = P4;;;","2022-10-01 04:22;dukebot;Changeset: b8b9b97a
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-10-01 11:20:46 +0000
URL:       https://git.openjdk.org/jdk/commit/b8b9b97a1a3e07777da2e39ac4779ef7b77434c7
;;;",,,,,,,,,,,,,,,,,,,,
JFR: Add SecurityProviderService#threshold to TestActiveSettingEvent.java,JDK-8294673,5084521,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,egahlin,egahlin,2022-09-30 05:46,2023-04-26 23:53,2023-10-01 09:56,2022-10-04 07:27,,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,Test fails because SecurityProviderService#threshold is not included in the list of settings that should not be checked.,,,,,,,,,,JDK-8306973,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254711,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yr77:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-10-04 07:27;dukebot;Changeset: 3644e26c
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-10-04 14:24:55 +0000
URL:       https://git.openjdk.org/jdk/commit/3644e26cef71c00e1a2638d2b8bed9c1bda965ca
;;;","2022-10-04 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10511
Date: 2022-09-30 12:55:50 +0000;;;","2022-10-04 08:01;coffeys;Problem listed since June via JDK-8287832;;;","2023-04-19 00:11;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Required follow up of 8254711.;;;","2023-04-19 00:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1260
Date: 2023-04-18 15:08:29 +0000;;;",,,,,,,,,,,,,,,,,,
Typo in description of JDWP VirtualMachine/AllThreads command,JDK-8294672,5084520,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,alanb,alanb,2022-09-30 05:41,2022-11-14 11:42,2023-10-01 09:56,2022-10-28 10:29,20,,,,,,20,core-svc,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"The second paragraph of the AllThreads command has ""and and all native threads attached to the target VM with JNI code"" (double ""and"").",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yr6z:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-09-30 10:25;cjplummer;This is already being addressed by https://github.com/openjdk/jdk/pull/10029 which is out for review.;;;","2022-10-04 11:06;alanb;Okay, maybe Michael should take it as it looks PR 10029 is stuck as it is covers so many areas. It would be good to fix this typo in the spec.;;;","2022-10-04 11:20;cjplummer;I'll keep this assigned to me and make sure it is taken care of in 20 if 10029 doesn't end up dealing with it.;;;","2022-10-27 18:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10895
Date: 2022-10-28 01:04:57 +0000;;;","2022-10-28 10:29;dukebot;Changeset: 1c86cf55
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-10-28 17:27:52 +0000
URL:       https://git.openjdk.org/jdk/commit/1c86cf5507a3126a00052d8c2d13c8fdc6e1da55
;;;",,,,,,,,,,,,,,,,,,
Enhanced switch statements have an implicit default which does not complete normally,JDK-8294670,5084518,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-09-30 05:19,2022-11-14 11:32,2023-10-01 09:56,2022-10-20 10:07,19,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,"From:
https://mail.openjdk.org/pipermail/amber-dev/2022-September/007508.html

This should compile:
---

public class Example {
  sealed interface Action {
    record PrintAction() implements Action {}
    record DeleteAction() implements Action {}
  }


  public int foo(Action action) {
    switch (action) {
      case Action.PrintAction printAction -> {
        return 1;
      }
      case Action.DeleteAction deleteAction -> {
        return 2;
      }
    }
  }
}
---
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yr6j:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-03 08:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10540
Date: 2022-10-03 14:48:57 +0000;;;","2022-10-20 10:07;dukebot;Changeset: 7bc9692a
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-10-20 15:21:26 +0000
URL:       https://git.openjdk.org/jdk/commit/7bc9692a5181a0db92ac2e0bca83dfe0bf2de05a
;;;",,,,,,,,,,,,,,,,,,,,,
[Panama] Copying from a StringCharBuffer-backed MemorySegment results in crash,JDK-8294621,5084070,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pminborg,webbuggrp,webbuggrp,2022-09-24 12:43,2022-10-18 03:41,2023-10-01 09:56,2022-10-18 03:41,19,,,,,,,core-libs,,0,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Attempting to copy from a MemorySegment backed by a StringCharBuffer results in the JVM crashing, as both the buffer's 'address' field is 0 and the 'base' object (the 'hb' array) is null


---------- BEGIN SOURCE ----------
import java.lang.foreign.MemorySegment;
import java.nio.CharBuffer;

public class Main {
  public static void main(String[] args) {
    MemorySegment src = MemorySegment.ofBuffer(CharBuffer.wrap(""Hello""));
    MemorySegment dst = MemorySegment.ofArray(new char[5]);
    dst.copyFrom(src);
  }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-09-29 23:59;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/100911/Main.java",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yoez:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-09-26 00:25;tongwan;Got the following error:
Error occurred during initialization of boot layer
java.lang.module.FindException: Module java.lang.foreign not found
From the error log:
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
v  ~StubRoutines::jshort_disjoint_arraycopy 0x00007fc4cc37769d
V  [libjvm.so+0xe7375f]  Unsafe_CopyMemory0+0xcf

Moved to hotspot/runtime.;;;","2022-09-26 00:43;tongwan;Requested more details from the submitter.;;;","2022-10-02 22:46;tongwan;Additional information from the submitter:
I downloaded JDK 19 GA (as of today, build 36) and ran the reproducer code with '/path/to/jdk-19/bin/java --enable-preview --source 19 Main.java'. I run Arch Linux but the issue occurs on Windows as well.;;;","2022-10-02 22:57;tongwan;The observations on Windows 10:
JDK 19: Failed, vm crashed.
;;;","2022-10-05 02:25;rgiulietti;Crash confirmed on Linux x64

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f7d4bc9565d, pid=7523, tid=7524
#
# JRE version: Java(TM) SE Runtime Environment (19.0+36) (build 19+36-2238)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19+36-2238, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# v  ~StubRoutines::jshort_disjoint_arraycopy 0x00007f7d4bc9565d
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e"" (or dumping to /home/<user_name>/dev/core.7523)
#
# An error report file with more information is saved as:
# /home/<user_name>/dev/hs_err_pid7523.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)
;;;","2022-10-06 03:40;mcimadamore;This is a bug - the API should reject buffers obtained from Strings - as the buffer doesn't point to a char[]. Instead, these buffer wrap an entire String object, and use String operations to get/set elements.;;;","2022-10-14 04:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/741
Date: 2022-10-14 11:32:19 +0000;;;",,,,,,,,,,,,,,,,
"SetupTextFileProcessing() function doesn't escape ""&"" in replacements",JDK-8294619,5084454,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,asemenyuk,asemenyuk,2022-09-29 18:20,2022-11-02 06:20,2023-10-01 09:56,2022-10-04 11:17,11-pool,,,,,,11.0.18-oracle,infrastructure,,0,jdk11u-na,,,,,,,,,,,,,,,,,,,"JDK-8223319 added escaping of ""&"" in replacements for SetupTextFileProcessing() function from open/make/common/TextFileProcessing.gmk file, but other files were also changed in the patch.
Don't need other changes, but only the fix for SetupTextFileProcessing() function.",,,,,,,,,,JDK-8296069,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8247874,,,,JDK-8223319,JDK-8275446,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yqsb:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-02 06:20;goetz;[11u-na]
The fix was backported by JDK-8247874 in 11.0.9 to open jdk11u.;;;",,,,,,,,,,,,,,,,,,,,,,
java/net/vthread/HttpALot.java is slow on Linux,JDK-8294610,5084442,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,alanb,alanb,2022-09-29 11:25,2022-10-05 23:20,2023-10-01 09:56,2022-10-01 02:19,20,,,,,,20,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,,This test runs in 5-6s on macOS and Windows. On Linux it takes 60-70s.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294146,JDK-8294723,,,JDK-6968351,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yqpn:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-09-29 11:27;alanb;Sean Coffey has suggested this may be related to Nagle and Jakikrian has done some initially testing with -Dsun.net.httpserver.nodelay=true.;;;","2022-09-30 02:12;jpai;I've opened a PR with a change which improves the test run duration on Linux https://github.com/openjdk/jdk/pull/10504. 

Additionally, we will be investigating if anything additional needs to be done in the JDK networking layer to improve this situation without the use of TCP_NODELAY. Those experiments will be carried out under another existing JBS issue https://bugs.openjdk.org/browse/JDK-6968351;;;","2022-09-30 02:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10504
Date: 2022-09-30 09:10:05 +0000;;;","2022-10-01 02:19;dukebot;Changeset: fd594302
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-10-01 09:17:53 +0000
URL:       https://git.openjdk.org/jdk/commit/fd594302f79b934c9eca713d84313b73f4899aa3
;;;",,,,,,,,,,,,,,,,,,,
Fix cast-function-type warnings in signal handling code,JDK-8294594,5084425,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-09-29 09:08,2022-10-31 04:12,2023-10-01 09:56,2022-10-18 01:46,20,,,,,,20,hotspot,,0,signals,,,,,,,,,,,,,,,,,,,"After JDK-8294314, we would have signals_posix.cpp excluded with cast-function-type warning:

```
/home/shade/trunks/jdk/src/hotspot/os/posix/signals_posix.cpp: In function 'int SR_initialize()':
/home/shade/trunks/jdk/src/hotspot/os/posix/signals_posix.cpp:1727:20: error: cast between incompatible function types from 'void (*)(int, siginfo_t*, ucontext_t*)' to 'void (*)(int)' [-Werror=cast-function-type]
 1727 |   act.sa_handler = (void (*)(int)) SR_handler;
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~
```

A closer look would reveal that we are using the wrong slots for SR_handler, `sa_handler` vs `sig_handler`, which manifests in type cast errors. `man sigaction` says:

```
       If SA_SIGINFO is specified in sa_flags, then sa_sigaction (instead  of  sa_handler)  specifies  the  signal-handling
       function for signum.  This function receives three arguments, as described below.
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295125,JDK-8294314,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yqlv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-29 09:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10494
Date: 2022-09-29 16:12:11 +0000;;;","2022-10-18 01:46;dukebot;Changeset: b06f1b14
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-10-18 08:45:28 +0000
URL:       https://git.openjdk.org/jdk/commit/b06f1b149c8f8a49d4e42c4b782a4b3a22aa79f6
;;;",,,,,,,,,,,,,,,,,,,,,
MenuBarSkin: memory leak when changing skin,JDK-8294589,5084420,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,angorya,angorya,angorya,2022-09-29 08:25,2022-12-09 16:12,2023-10-01 09:56,2022-12-05 08:19,,,,,,,jfx20,javafx,,0,sn_128,sn_129,sn_130,sn_132,sn_133,,,,,,,,,,,,,,,"as determined by SkinMemoryLeakTest (remove line 169) and a leak tester 
https://github.com/andy-goryachev-oracle/Test/blob/main/src/goryachev/apps/LeakTest.java

caused by:
- adding skin nodes and not removing them in dispose()
- adding listeners and not removing them in dispose()",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294809,JDK-8241364,,,,,,,,,,,,,,,,,,,,"2022-09-29 08:43;angorya;Screen Shot 2022-09-29 at 08.43.02.png;https://bugs.openjdk.org/secure/attachment/100906/Screen+Shot+2022-09-29+at+08.43.02.png",,,,,,,,,,,,,,,,,,,,,,,"0|i2yqkr:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-10-03 14:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/906
Date: 2022-09-29 23:00:17 +0000;;;","2022-12-05 08:19;dukebot;Changeset: 2c18c181
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2022-12-05 16:16:36 +0000
URL:       https://git.openjdk.org/jfx/commit/2c18c1816f81daf49d022de590f406a7dfc67e8e
;;;",,,,,,,,,,,,,,,,,,,,,
JShell: NPE in switch with non existing record pattern,JDK-8294583,5084411,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,abimpoudis,abimpoudis,2022-09-29 05:44,2022-11-30 23:44,2023-10-01 09:56,2022-11-25 04:34,19,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,"The following crashes with the appended exception. 

switch (d) {
   case Foo() -> {}
};

Exception in thread ""main"" java.lang.InternalError: Exception during analyze - java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.code.Symbol$ClassSymbol.getRecordComponents()"" because ""deconstructionPatterns.head.record"" is null
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:415)
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.<init>(TaskFactory.java:406)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$analyze$1(TaskFactory.java:178)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$runTask$4(TaskFactory.java:213)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskPool.getTask(JavacTaskPool.java:193)
        at jdk.jshell/jdk.jshell.TaskFactory.runTask(TaskFactory.java:206)
        at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:175)
        at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:161)
        at jdk.jshell/jdk.jshell.Eval.compileAndLoad(Eval.java:1023)
        at jdk.jshell/jdk.jshell.Eval.declare(Eval.java:893)
        at jdk.jshell/jdk.jshell.Eval.eval(Eval.java:140)
        at jdk.jshell/jdk.jshell.JShell.eval(JShell.java:493)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSource(JShellTool.java:3624)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSourceCatchingReset(JShellTool.java:1348)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processInput(JShellTool.java:1246)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.run(JShellTool.java:1217)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.start(JShellTool.java:1001)
        at jdk.jshell/jdk.internal.jshell.tool.JShellToolBuilder.start(JShellToolBuilder.java:261)
        at jdk.jshell/jdk.internal.jshell.tool.JShellToolProvider.main(JShellToolProvider.java:120)
Caused by: java.lang.IllegalStateException: java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.code.Symbol$ClassSymbol.getRecordComponents()"" because ""deconstructionPatterns.head.record"" is null
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:383)
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:412)
        ... 18 more
Caused by: java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.code.Symbol$ClassSymbol.getRecordComponents()"" because ""deconstructionPatterns.head.record"" is null
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.coversDeconstructionFromComponent(Flow.java:806)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.coveredSymbols(Flow.java:783)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.coveredSymbolsForCases(Flow.java:748)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitSwitch(Flow.java:693)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitch.accept(JCTree.java:1287)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:447)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.scanStat(Flow.java:507)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.scanStats(Flow.java:515)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitBlock(Flow.java:607)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1082)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:447)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.scanStat(Flow.java:507)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitMethodDef(Flow.java:571)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:912)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:447)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitClassDef(Flow.java:551)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:810)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:447)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.analyzeTree(Flow.java:1082)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.analyzeTree(Flow.java:1074)
        at jdk.compiler/com.sun.tools.javac.comp.Flow.analyzeTree(Flow.java:223)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.flow(JavaCompiler.java:1377)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.flow(JavaCompiler.java:1341)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:404)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$analyze$1(JavacTaskImpl.java:379)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:379)
        ... 19 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297821,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yqir:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-11-20 04:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11251
Date: 2022-11-20 12:20:21 +0000;;;","2022-11-25 04:34;dukebot;Changeset: 4f655702
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-11-25 12:31:47 +0000
URL:       https://git.openjdk.org/jdk/commit/4f65570204e2d38415e7761bd81660b081eae882
;;;",,,,,,,,,,,,,,,,,,,,,
frame::interpreter_frame_print_on() crashes if free BasicObjectLock exists in frame,JDK-8294580,5084408,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rrich,rrich,rrich,2022-09-29 04:44,2022-12-21 08:11,2023-10-01 09:56,2022-10-12 01:51,20,,,,,,20,hotspot,,0,interpreter,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,loom,,,,,,,,,,,,,,"Symptom: SIGSEGV in frame::interpreter_frame_print_on()

Bug: missing null check before dereferencing BasicObjectLock::_obj. _obj is nullptr if the lock is free.

Can be reproduced with -XX:+VerifyContinuations -Xlog:continuations=trace and a
test that yields a continuation after leaving a synchronized block (see attached test).

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007ffff5cb342e, pid=2791965, tid=2791966
#
# JRE version: OpenJDK Runtime Environment (20.0) (slowdebug build 20-internal-adhoc.USER.jdk)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 20-internal-adhoc.USER.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x35542e]  oopDesc::klass() const+0x22
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /builds/jdk_HOST__slowdebug/core.2791965)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:+WhiteBoxAPI -Xbootclasspath/a:/git/work/testclasses/lib --patch-module=java.base=/git/work/testclasses/patches/java.base --add-exports=java.base/jdk.internal.vm=ALL-UNNAMED -XX:+UnlockDiagnosticVMOptions -Xms768m -Xmx768m --enable-preview -XX:+VerifyContinuations -XX:-PauseAtStartup -Xbatch -XX:CompileThreshold=1000 -XX:CompileCommand=dontinline,*::*dontinline* -XX:CompileCommand=dontinline,*::*dontjit* -XX:CompileCommand=exclude,*::*dontjit* -XX:CompileCommand=dontinline,java/lang/String*.* -Xlog:continuations=trace BasicExp

Host: HOST, Intel(R) Xeon(R) CPU E5-2660 v3 @ 2.60GHz, 40 cores, 125G, Ubuntu 20.04.5 LTS
Time: Thu Sep 29 07:19:06 2022 CEST elapsed time: 13.296406 seconds (0d 0h 0m 13s)

---------------  T H R E A D  ---------------

Current thread (0x00007ffff002aeb0):  JavaThread ""main"" [_thread_in_vm, id=2791966, stack(0x00007ffff570e000,0x00007ffff580f000)]

Stack: [0x00007ffff570e000,0x00007ffff580f000],  sp=0x00007ffff580b790,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x35542e]  oopDesc::klass() const+0x22  (oop.inline.hpp:86)
V  [libjvm.so+0x10f86e4]  oopDesc::print_value_on(outputStream*) const+0x60  (oop.cpp:83)
V  [libjvm.so+0xa92f19]  frame::interpreter_frame_print_on(outputStream*) const+0x1cb  (frame.cpp:574)
V  [libjvm.so+0xa92d4b]  frame::print_on(outputStream*) const+0x4f  (frame.cpp:549)
V  [libjvm.so+0x12e69b4]  StackChunkFrameStream<(ChunkFrames)1>::print_on(outputStream*) const+0xaa  (stackChunkFrameStream.cpp:37)
V  [libjvm.so+0x12f3073]  bool VerifyStackChunkFrameClosure::do_frame<(ChunkFrames)1, SmallRegisterMap>(StackChunkFrameStream<(ChunkFrames)1> const&, SmallRegisterMap const*)+0x289  (stackChunkOop.cpp:512)
V  [libjvm.so+0x12ef98f]  void stackChunkOopDesc::iterate_stack<(ChunkFrames)1, VerifyStackChunkFrameClosure>(VerifyStackChunkFrameClosure*)+0x299  (stackChunkOop.inline.hpp:227)
V  [libjvm.so+0x12ea917]  void stackChunkOopDesc::iterate_stack<VerifyStackChunkFrameClosure>(VerifyStackChunkFrameClosure*)+0x37  (stackChunkOop.inline.hpp:192)
V  [libjvm.so+0x12e7a8a]  stackChunkOopDesc::verify(unsigned long*, int*, int*, int*)+0x43e  (stackChunkOop.cpp:589)
V  [libjvm.so+0x909f19]  Continuation::debug_verify_continuation(oopDesc*)+0x215  (continuation.cpp:390)
V  [libjvm.so+0x90c82f]  verify_continuation(oopDesc*)+0x1c  (continuationFreezeThaw.cpp:173)
V  [libjvm.so+0x910e7d]  freeze_epilog(JavaThread*, ContinuationWrapper&)+0x24  (continuationFreezeThaw.cpp:1384)
V  [libjvm.so+0x910f8a]  freeze_epilog(JavaThread*, ContinuationWrapper&, freeze_result)+0x83  (continuationFreezeThaw.cpp:1402)
V  [libjvm.so+0x921e49]  int freeze_internal<Config<(oop_kind)0, G1BarrierSet> >(JavaThread*, long*)+0x67a  (continuationFreezeThaw.cpp:1464)
V  [libjvm.so+0x91fb98]  Config<(oop_kind)0, G1BarrierSet>::freeze(JavaThread*, long*)+0x27  (continuationFreezeThaw.cpp:266)
V  [libjvm.so+0x915206]  int freeze<Config<(oop_kind)0, G1BarrierSet> >(JavaThread*, long*)+0x131  (continuationFreezeThaw.cpp:233)
J 544  jdk.internal.vm.Continuation.doYield()I java.base@20-internal (0 bytes) @ 0x00007fffe093c1d5 [0x00007fffe093c180+0x0000000000000055]",,,,,,,,,,JDK-8298847,JDK-8299219,JDK-8299040,JDK-8298844,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-09-29 05:42;rrich;VTSleepAfterUnlock.java;https://bugs.openjdk.org/secure/attachment/100894/VTSleepAfterUnlock.java",,,,,,,,,,,,,,,,,,,,,,,"0|i2yqi3:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-29 22:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10486
Date: 2022-09-29 12:49:27 +0000;;;","2022-10-12 01:51;dukebot;Changeset: bdb4ed0f
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2022-10-12 08:48:26 +0000
URL:       https://git.openjdk.org/jdk/commit/bdb4ed0fb136e9e5391cfa520048de6b7f83067d
;;;","2022-12-13 06:09;rrich;Fix request (11u, 17u)

I would like to backport this to avoid the described issues.
Applies cleanly but 11u does not compile. Had to replace `nullptr` with NULL to fix the build.
Risk is minimal because the change is not part of the PRODUCT build.
The fix passed GHA and CI testing at SAP which includes JCK and JTREG tests on the standard platforms and also on Linux/PPC64le.
;;;","2022-12-14 01:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/952
Date: 2022-12-13 13:31:15 +0000;;;","2022-12-14 01:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1590
Date: 2022-12-13 14:17:28 +0000;;;",,,,,,,,,,,,,,,,,,
[PPC64] C2: Missing is_oop information when using disjoint compressed oops mode,JDK-8294578,5084407,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2022-09-29 03:58,2022-10-20 06:26,2023-10-01 09:56,2022-10-04 03:14,11,17,20,,,,20,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,,,,,,,,,,,,,,"New assertion from JDK-8293844 was hit on PPC64 while running jdk/jfr/event/gc/configuration/TestGCHeapConfigurationEventWithHeapBasedOops.java:
#  Internal Error (/src/hotspot/share/opto/output.cpp:941)
#  assert(t->base() == Type::Int || t->base() == Type::Half || t->base() == Type::FloatCon || t->base() == Type::FloatBot) failed: Unexpected type: inst:

Debugging shows that the C2's decodeN_mergeDisjointNode misses a set_oop call which causes the issue.
The usage in decodeN_Disjoint_isel_Ex is not problematic because it is only inserted in the middle of a postalloc_expand sequence. But, the usage in decodeN_Disjoint_notNull_Ex should get fixed because it produces an oop at the end of the postalloc_expand sequence.
",,,,,,,,,,JDK-8294846,JDK-8295733,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293844,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,,"0|i2yqhv:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-29 04:08;shade;> I don't think this causes real problems because the node is only inserted by postalloc_expand. Nevertheless, it should get fixed. 

Nice! It might be a real bug, though. Because the assert prevents recording the ""oop""-holding register as `Location::normal`, which would make deopt machinery pass over it without applying the GC barriers. See a giant switch in `StackValue::create_stack_value`.
;;;","2022-09-29 04:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10484
Date: 2022-09-29 11:07:34 +0000;;;","2022-09-29 06:22;mdoerr;Thanks! Updated description. Should probably also get backported.;;;","2022-09-29 16:28;dlong;ILW = assert in debug build; seen in one test so far; disable compilation of affected method = MMM = P3;;;","2022-10-04 03:14;dukebot;Changeset: f03934e2
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-10-04 10:13:57 +0000
URL:       https://git.openjdk.org/jdk/commit/f03934e270aa86de3c6832f9754caba05726726b
;;;","2022-10-04 03:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/769
Date: 2022-10-04 10:29:25 +0000;;;","2022-10-04 03:50;mdoerr;Fix Request (17u, 11u):
Should get backported to LTS releases. Missing is_oop information may potentially cause broken Oops after GC when disjoint compressed Oops mode is used. Fix is simple and applies cleanly.;;;","2022-10-04 13:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1389
Date: 2022-10-04 20:23:00 +0000;;;",,,,,,,,,,,,,,,
IGV: IllegalStateException in search,JDK-8294567,5084393,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,tholenstein,tholenstein,tholenstein,2022-09-29 00:29,2022-10-28 06:22,2023-10-01 09:56,2022-10-03 00:16,20,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,starter,,,,,,,,,,,,,,"1) import any group with at least two graphs
2) open any graph
3) search for a node that is not in the open graph
4) get an IllegalStateException

[INFO] java.lang.IllegalStateException: Problem in some module which uses Window System: Window System API is required to be called from AWT thread only, see http://core.netbeans.org/proposals/threading/
[INFO] 	at org.netbeans.core.windows.WindowManagerImpl.warnIfNotInEDT(WindowManagerImpl.java:1802)
[INFO] 	at org.netbeans.core.windows.WindowManagerImpl.topComponentIsOpened(WindowManagerImpl.java:1430)
[INFO] 	at org.openide.windows.TopComponent.isOpened(TopComponent.java:516)
[INFO] 	at org.openide.windows.TopComponent.isOpened(TopComponent.java:507)
[INFO] 	at com.sun.hotspot.igv.view.EditorInputGraphProvider.searchForward(EditorInputGraphProvider.java:77)
[INFO] 	at com.sun.hotspot.igv.view.NodeQuickSearch.evaluate(NodeQuickSearch.java:91)
[INFO] 	at org.netbeans.modules.quicksearch.CommandEvaluator$3.run(CommandEvaluator.java:242)
[INFO] 	at org.openide.util.RequestProcessor$Task.run(RequestProcessor.java:1418)
[INFO] 	at org.netbeans.modules.openide.util.GlobalLookup.execute(GlobalLookup.java:45)
[INFO] 	at org.openide.util.lookup.Lookups.executeWith(Lookups.java:278)
[INFO] 	at org.openide.util.RequestProcessor$Processor.run(RequestProcessor.java:2033)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,JDK-8293480,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yqer:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-09-29 02:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10483
Date: 2022-09-29 09:14:23 +0000;;;","2022-09-29 03:34;chagedorn;ILW = IllegalStateException when searching for a node which breaks searching functionality, with 2 or more graphs, no workaround = MMH = P3;;;","2022-09-29 03:37;tholenstein;starts to fails after JDK-8293480;;;","2022-10-03 00:16;dukebot;Changeset: 6e8f0387
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-10-03 07:14:16 +0000
URL:       https://git.openjdk.org/jdk/commit/6e8f0387d64c9620bdd4c8913b2f41eade805348
;;;",,,,,,,,,,,,,,,,,,,
IGV: ClassCastException when clicking on an edge in the graph,JDK-8294565,5084391,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2022-09-29 00:18,2022-11-14 11:35,2023-10-01 09:56,2022-10-24 07:20,20,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,starter,,,,,,,,,,,,,,,"1) open any graph
2) click on any edge in the graph 
3) get an java.lang.ClassCastException

SEVERE [global]
[INFO] java.lang.ClassCastException: class com.sun.hotspot.igv.view.widgets.InputSlotWidget cannot be cast to class com.sun.hotspot.igv.graph.Figure (com.sun.hotspot.igv.view.widgets.InputSlotWidget is in unnamed module of loader org.netbeans.StandardModule$OneModuleClassLoader @4f60761f; com.sun.hotspot.igv.graph.Figure is in unnamed module of loader org.netbeans.StandardModule$OneModuleClassLoader @3de8ecd2)
[INFO] 	at com.sun.hotspot.igv.view.widgets.LineWidget$1.select(LineWidget.java:142)
[INFO] 	at org.netbeans.modules.visual.action.SelectAction.mouseReleased(SelectAction.java:86)
[INFO] 	at org.netbeans.api.visual.widget.SceneComponent$Operator$3.operate(SceneComponent.java:535)
[INFO] 	at org.netbeans.api.visual.widget.SceneComponent.processLocationOperator(SceneComponent.java:250)
[INFO] 	at org.netbeans.api.visual.widget.SceneComponent.mouseReleased(SceneComponent.java:137)
[INFO] 	at java.desktop/java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:297)
[INFO] 	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6626)
[INFO] 	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3389)
[INFO] 	at java.desktop/java.awt.Component.processEvent(Component.java:6391)
[INFO] 	at java.desktop/java.awt.Container.processEvent(Container.java:2266)
[INFO] 	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5001)
[INFO] 	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2324)
[INFO] 	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4833)
[INFO] 	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4948)
[INFO] 	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4575)
[INFO] 	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4516)
[INFO] 	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2310)
[INFO] 	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2780)
[INFO] 	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4833)
[INFO] 	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
[INFO] 	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)
[INFO] 	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:716)
[INFO] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
[INFO] 	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
[INFO] 	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:97)
[INFO] 	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:746)
[INFO] 	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:744)
[INFO] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
[INFO] 	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
[INFO] 	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:743)
[INFO] 	at org.netbeans.core.TimableEventQueue.dispatchEvent(TimableEventQueue.java:136)
[INFO] [catch] at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
[INFO] 	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
[INFO] 	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
[INFO] 	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
[INFO] 	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
[INFO] 	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,JDK-8282547,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yqeb:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-09-29 03:39;chagedorn;ILW = ClassCastException when clicking on edges, always, no workaround = LHH = P4;;;","2022-10-17 05:41;tholenstein;JDK-8282547 IGV: add control-flow graph view introduced this issue;;;","2022-10-21 03:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10760
Date: 2022-10-19 11:13:35 +0000;;;","2022-10-24 07:20;dukebot;Changeset: c055dfc3
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-10-24 14:17:33 +0000
URL:       https://git.openjdk.org/jdk/commit/c055dfc3ce5fe1cdc3e1a0d5a182df355a40c6b7
;;;",,,,,,,,,,,,,,,,,,,
"IGV: IllegalArgumentException for ""Difference to current graph""",JDK-8294564,5084390,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2022-09-29 00:14,2022-10-28 06:22,2023-10-01 09:56,2022-10-04 00:31,20,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,"1) open a graph in group A
2) right click on another graph in group B
3) select ""Difference to current graph"" 
4) get an java.lang.IllegalArgumentException

[INFO] SEVERE [org.openide.util.Exceptions]
[INFO] java.lang.IllegalArgumentException: No element of a node selection may be null.
[INFO] 	at org.openide.explorer.ExplorerManager$1AtomicSetSelectedNodes.checkAndSet(ExplorerManager.java:223)
[INFO] 	at org.openide.explorer.ExplorerManager$1AtomicSetSelectedNodes.run(ExplorerManager.java:274)
[INFO] 	at org.netbeans.modules.openide.util.DefaultMutexImplementation.readAccess(DefaultMutexImplementation.java:172)
[INFO] 	at org.netbeans.modules.openide.util.DefaultMutexImplementation$1R.run(DefaultMutexImplementation.java:1016)
[INFO] 	at org.openide.nodes.Children$ProjectManagerDeadlockDetector.execute(Children.java:1914)
[INFO] 	at org.netbeans.modules.openide.util.DefaultMutexImplementation.doWrapperAccess(DefaultMutexImplementation.java:1035)
[INFO] 	at org.netbeans.modules.openide.util.DefaultMutexImplementation.readAccess(DefaultMutexImplementation.java:162)
[INFO] 	at org.openide.util.Mutex.readAccess(Mutex.java:241)
[INFO] 	at org.openide.explorer.ExplorerManager.setSelectedNodes(ExplorerManager.java:279)
[INFO] [catch] at com.sun.hotspot.igv.coordinator.OutlineTopComponent.lambda$changed$2(OutlineTopComponent.java:248)
[INFO] 	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:318)
[INFO] 	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:771)
[INFO] 	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)
[INFO] 	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:716)
[INFO] 	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
[INFO] 	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
[INFO] 	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:741)
[INFO] 	at org.netbeans.core.TimableEventQueue.dispatchEvent(TimableEventQueue.java:136)
[INFO] 	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
[INFO] 	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
[INFO] 	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
[INFO] 	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
[INFO] 	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
[INFO] 	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,JDK-8263384,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yqe3:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-09-29 03:37;chagedorn;ILW = IllegalArgumentException when using difference selection, only when using difference selection, no workaround = MLH = P4;;;","2022-09-30 04:29;tholenstein;""Difference to current graph"" stopped working after 8263384;;;","2022-10-03 06:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10533
Date: 2022-10-03 13:05:52 +0000;;;","2022-10-04 00:31;dukebot;Changeset: f957ce99
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-10-04 07:29:29 +0000
URL:       https://git.openjdk.org/jdk/commit/f957ce995969a39827c17023b083d3bd84a1317c
;;;",,,,,,,,,,,,,,,,,,,
assertion raised in newBuiltinSwitchPoint,JDK-8294560,5084216,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,attila,webbuggrp,webbuggrp,2022-09-27 05:14,2023-02-07 10:33,2023-10-01 09:56,2023-02-07 10:33,11,17,18,19,20,8,tbd,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
nashorn 15.4 / JDK 17

A DESCRIPTION OF THE PROBLEM :
Context.newBuiltinSwitchPoint raises an assertion when trying to access a lazily initialized built-in object like JSON from the Global scope.
It seems the code is not thread-safe and multiple parallel access during initialization can lead to an assertion error.
Previous versions of nashorn from JDK 1.8 without lazy global initialization did not have the problem.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the test code and after sometime you get an internal assertion

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Script execution is thread-safe
ACTUAL -
```
Caused by: java.lang.AssertionError
	at org.openjdk.nashorn.internal.runtime.Context.newBuiltinSwitchPoint(Context.java:1737)
	at org.openjdk.nashorn.internal.objects.Global.tagBuiltinProperties(Global.java:2950)
	at org.openjdk.nashorn.internal.objects.Global.initConstructorAndSwitchPoint(Global.java:2552)
	at org.openjdk.nashorn.internal.objects.Global.getBuiltinJSON(Global.java:2089)
	at org.openjdk.nashorn.internal.objects.Global.getJSON(Global.java:294)
	at org.openjdk.nashorn.internal.scripts.Script$Recompilation$79$17A$\^eval\_.entrypoint(<eval>:3)
	at org.openjdk.nashorn.internal.runtime.ScriptFunctionData.invoke(ScriptFunctionData.java:648)
	at org.openjdk.nashorn.internal.runtime.ScriptFunction.invoke(ScriptFunction.java:513)
	at org.openjdk.nashorn.internal.runtime.ScriptRuntime.apply(ScriptRuntime.java:520)
	at org.openjdk.nashorn.api.scripting.ScriptObjectMirror.call(ScriptObjectMirror.java:111)
	at org.example.AppTest.lambda$test$0(AppTest.java:46)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
```


---------- BEGIN SOURCE ----------
package org.example;


import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.script.Bindings;
import javax.script.CompiledScript;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import org.junit.Test;
import org.openjdk.nashorn.api.scripting.JSObject;
import org.openjdk.nashorn.api.scripting.NashornScriptEngine;

public class AppTest {
    @Test
    public void test() throws InterruptedException, ExecutionException, ScriptException {
        String script1 = """"""
                var entrypoint = function(param) {
                var out = busy(param);
                return JSON.stringify({""out"":out}); };
                function busy(count) {
                var j=0;
                for (i=0;i<count;i++){j++;}
                return j;
                }"""""";

        ExecutorService taskExecutor = Executors.newFixedThreadPool(100);

        while (true) {
            List<Future<Integer>> futures = new ArrayList<>();
            ScriptEngineManager manager = new ScriptEngineManager();
            NashornScriptEngine engine = (NashornScriptEngine) manager.getEngineByName(""nashorn"");
            for (int i = 0; i < 10; i++) {
                CompiledScript compiledScript = engine.compile(script1);
                for (int j = 0; j < 1000; j++) {
                    futures.add(taskExecutor.submit(() -> {
                        Bindings bindings = compiledScript.getEngine().createBindings();
                        compiledScript.eval(bindings);
                        JSObject jsObject = (JSObject) bindings.get(""entrypoint"");
                        String jsonResult = (String) jsObject.call(null, 100);
                        return new ObjectMapper().readTree(jsonResult).get(""out"").intValue();
                    }));
                }
            }
            for (Future<Integer> f : futures) {
                f.get();
            }
            System.out.println(""."");
            TimeUnit.SECONDS.sleep(1);
        }
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
load json in the context after compiling the script and before doing mulithreaded script calls
compiledScript.getEngine().eval(""JSON"")

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-09-28 22:41;tongwan;AppTest.java;https://bugs.openjdk.org/secure/attachment/100886/AppTest.java",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2ypbf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@51b0542d,,,,,,,,,"2022-09-28 20:07;tongwan;The observations on Windows 10:
JDK 8: Failed, assertion failed.
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+32: Failed.
JDK 20ea+4: Failed.;;;","2022-09-29 03:10;attila;Nashorn script engines are not safe for concurrent use from multiple threads.

NashornScriptEngineFactory returns null[0] when asked for getParameter(""THREADING""), which according to the javax.scripting API[1] declares that: ""The engine implementation is not thread safe, and cannot be used to execute scripts concurrently on multiple threads.""

[0] https://github.com/openjdk/nashorn/blob/main/src/org.openjdk.nashorn/share/classes/org/openjdk/nashorn/api/scripting/NashornScriptEngineFactory.java#L126
[1] https://docs.oracle.com/en/java/javase/19/docs/api/java.scripting/javax/script/ScriptEngineFactory.html#getParameter(java.lang.String);;;","2022-09-29 03:20;attila;FWIW, I did speak few times over the years how to efficiently use Nashorn in a multithreaded environment, specifically in web servers too, e.g.:

http://gotocon.com/dl/goto-chicago-2015/slides/AttilaSzegedi_NashornUnderTheHoodMakingThisRhinocerosThunder.pdf

Specifically, you can use a single engine instance, but need to evaluate with per-thread bindings.;;;","2022-09-29 03:47;attila;Ok, I can see the reporter did use separate bindings. They still share a global scope with this invocation, though. If instead they tried to use a separate script context, would it work then? Like this:

Bindings bindings = compiledScript.getEngine().createBindings();
ScriptContext context = new SimpleScriptContext();
context.setBindings(bindings, ScriptContext.ENGINE_SCOPE);
compiledScript.eval(context);
;;;","2022-12-14 10:29;attila;I decided to fix this by relaxing expectations on switchpoints creation. They'll be created atomically as needed using ConcurrentHashMap.computeIfAbsent.;;;",,,,,,,,,,,,,,,,,,
Sealed check for casts isn't applied to array components,JDK-8294550,5084377,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,dlsmith,dlsmith,2022-09-28 17:09,2022-11-14 11:31,2023-10-01 09:56,2022-10-20 10:07,18,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,"Casts to a sealed class check that the input type is castable to one of the permitted subclasses (which may themselves be sealed or final). When casting from one array type to another, the same check should be performed for a cast between the component types.

sealed class A permits B, C {}
class B extends A {}
class C extends A {}

jshell> (A) (Runnable) null // compiler error
|  Error:
|  incompatible types: java.lang.Runnable cannot be converted to A
|  (A) (Runnable) null
|      ^-------------^

jshell> (A[]) new Runnable[5] // no compiler error
|  Exception java.lang.ClassCastException: class [Ljava.lang.Runnable; cannot be cast to class [LREPL.$JShell$17B$A; ([Ljava.lang.Runnable; is in module java.base of loader 'bootstrap'; [LREPL.$JShell$17B$A; is in unnamed module of loader jdk.jshell.execution.DefaultLoaderDelegate$RemoteClassLoader @3764951d)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294586,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yqb7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-09-29 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10490
Date: 2022-09-29 14:24:18 +0000;;;","2022-10-20 10:07;dukebot;Changeset: 78dc4977
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-10-20 13:01:12 +0000
URL:       https://git.openjdk.org/jdk/commit/78dc4977863a92f990b355f6b4d2609a674ab19b
;;;",,,,,,,,,,,,,,,,,,,,,
java/io/BufferedInputStream/TransferTo.java fails with OOME,JDK-8294541,5084365,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,mkarg,dholmes,dholmes,2022-09-28 14:11,2023-01-31 03:44,2023-10-01 09:56,2022-10-09 06:56,20,,,,,,20,core-libs,,0,tier2,,,,,,,,,,,,,,,,,,,"----------System.out:(42/2758)----------
Seed from RandomFactory = -4767755349057858823L
test TransferTo.testNullPointerException(): success
test TransferTo.testStreamContents(): failure
java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3537)
	at java.base/java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.java:100)
	at java.base/java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:132)
	at java.base/java.io.InputStream.transferTo(InputStream.java:791)
	at java.base/java.io.BufferedInputStream.implTransferTo(BufferedInputStream.java:611)
	at java.base/java.io.BufferedInputStream.transferTo(BufferedInputStream.java:595)
	at TransferTo.checkTransferredContents(TransferTo.java:198)
	at TransferTo.testStreamContents(TransferTo.java:133)
	at java.base/java.lang.invoke.LambdaForm$DMH/0x0000000801038000.invokeVirtual(LambdaForm$DMH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x0000000801038800.invoke(LambdaForm$MH)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:154)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at org.testng.TestRunner$$Lambda$75/0x000000080102fce0.accept(Unknown Source)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)

===============================================
java/io/BufferedInputStream/TransferTo.java
Total tests run: 2, Passes: 1, Failures: 1, Skips: 0
===============================================",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279283,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,"0|i2yq8j:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,Verified,,"2022-10-01 04:34;mkarg;Unfortunately I cannot reproduce this bug using `make test TEST_VM_OPTS=""-Dseed=-4767755349057858823"" TEST=java/io/BufferedInputStream/TransferTo.java`, maybe I am doing something wrong?;;;","2022-10-01 08:58;alanb;[~mkarg] It reproduces for me each time with that command. Did you remove (or comment out) the test from test/jdk/ProblemList.txt as the test was temporarily excluded because of the frequent failures? It may be that this test needs -Xmx1g in the run tag or else changed to not require so much memory.;;;","2022-10-01 10:25;mkarg;Thank you, Alan, after removing it from the ProblemList.txt file I was able to reproduce the problem.;;;","2022-10-01 10:57;mkarg;You are right, Alan, it works pretty well with `-Xmx1g`. The memory consumption is bound to the huge data tests explicitly wanted last year, so I think we should stick with the 1G solution. See https://github.com/openjdk/jdk/pull/10524.;;;","2022-10-01 10:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10524
Date: 2022-10-01 17:54:37 +0000;;;","2022-10-01 23:30;alanb;-Xmx1g may not be enough, in which case then maybe the test should be re-examined.


```
----------messages:(6/263)----------
command: testng -Xmx1g TransferTo
reason: User specified action: run testng/othervm/timeout=180 -Xmx1g TransferTo 
started: Sun Oct 02 06:23:42 UTC 2022
Mode: othervm [/othervm specified]
finished: Sun Oct 02 06:23:44 UTC 2022
elapsed time (seconds): 1.887
----------configuration:(0/0)----------
----------System.out:(42/2712)----------
Seed from RandomFactory = 423700318514983733L
test TransferTo.testNullPointerException(): success
test TransferTo.testStreamContents(): failure
java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3537)
	at java.base/java.io.ByteArrayOutputStream.toByteArray(ByteArrayOutputStream.java:187)
	at TransferTo$1$$Lambda$83/0x0000000801038ef0.get(Unknown Source)
	at TransferTo.checkTransferredContents(TransferTo.java:204)
	at TransferTo.testStreamContents(TransferTo.java:133)
	at java.base/java.lang.invoke.LambdaForm$DMH/0x0000000801030800.invokeVirtual(LambdaForm$DMH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x0000000801031000.invoke(LambdaForm$MH)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:154)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at org.testng.TestRunner$$Lambda$73/0x000000080102ead8.accept(Unknown Source)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
```;;;","2022-10-09 06:56;dukebot;Changeset: 8713dfa6
Author:    Markus Karg <markus@headcrashing.eu>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2022-10-09 13:55:27 +0000
URL:       https://git.openjdk.org/jdk/commit/8713dfa64ef4c55c8b9a3be8aab2bb5e16c627da
;;;",,,,,,,,,,,,,,,,
Remove Opaque2Node: it is broken and triggers assert,JDK-8294540,5084364,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,dholmes,dholmes,2022-09-28 14:03,2022-12-14 00:47,2023-10-01 09:56,2022-12-05 00:32,11,17,20,,,,20,hotspot,,0,c2,oracle-triage-20,tier3,,,,,,,,,,,,,,,,,"Test: compiler/loopopts/superword/SumRed_Long.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\sb\prod\1664381000\workspace\open\src\hotspot\share\opto\loopTransform.cpp:2226), pid=34748, tid=3064
#  Error: assert(opaq->outcnt() == 1 && opaq->in(1) == limit) failed
#
# JRE version: Java(TM) SE Runtime Environment (20.0+17) (fastdebug build 20-ea+17-1191)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+17-1191, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1664393007\testoutput\test-support\jtreg_open_test_hotspot_jtreg_tier1_compiler_3\scratch\3\hs_err_pid34748.mdmp
#

---------------  T H R E A D  ---------------

Current thread (0x000002336782fb00):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=3064, stack(0x0000007ecd900000,0x0000007ecda00000)]


Current CompileTask:
C2:   1080  274             java.net.URI$1::create (10 bytes)

Stack: [0x0000007ecd900000,0x0000007ecda00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc04b11]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe687ee]  VMError::report+0x10be  (vmError.cpp:841)
V  [jvm.dll+0xe6a2fe]  VMError::report_and_die+0x65e  (vmError.cpp:1700)
V  [jvm.dll+0xe6aa84]  VMError::report_and_die+0x64  (vmError.cpp:1481)
V  [jvm.dll+0x57aa67]  report_vm_error+0xb7  (debug.cpp:285)
V  [jvm.dll+0xa7d58d]  PhaseIdealLoop::do_unroll+0x4bd  (loopTransform.cpp:2226)
V  [jvm.dll+0xa847a1]  IdealLoopTree::iteration_split_impl+0x7c1  (loopTransform.cpp:3905)
V  [jvm.dll+0xa83ea0]  IdealLoopTree::iteration_split+0x160  (loopTransform.cpp:3929)
V  [jvm.dll+0xa83d6f]  IdealLoopTree::iteration_split+0x2f  (loopTransform.cpp:3913)
V  [jvm.dll+0xa83fc0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3945)
V  [jvm.dll+0xa83fc0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3945)
V  [jvm.dll+0xa83fc0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3945)
V  [jvm.dll+0xa83fc0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3945)
V  [jvm.dll+0xa83fc0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3945)
V  [jvm.dll+0xa83fc0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3945)
V  [jvm.dll+0xa92271]  PhaseIdealLoop::build_and_optimize+0x1131  (loopnode.cpp:4530)
V  [jvm.dll+0x51037b]  Compile::Optimize+0x109b  (compile.cpp:2414)
V  [jvm.dll+0x50d1ed]  Compile::Compile+0x14ad  (compile.cpp:831)
V  [jvm.dll+0x433715]  C2Compiler::compile_method+0x145  (c2compiler.cpp:116)
V  [jvm.dll+0x527047]  CompileBroker::invoke_compiler_on_method+0x8a7  (compileBroker.cpp:2243)
V  [jvm.dll+0x5247dd]  CompileBroker::compiler_thread_loop+0x23d  (compileBroker.cpp:1917)
V  [jvm.dll+0x7efa82]  JavaThread::thread_main_inner+0x282  (javaThread.cpp:700)
V  [jvm.dll+0xde1ec7]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc03468]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293993,,JDK-8298176,,,,JDK-8298019,JDK-8269820,JDK-8298089,JDK-8292088,,,,,"2022-11-17 07:39;thartmann;GraphAtAssert.png;https://bugs.openjdk.org/secure/attachment/101665/GraphAtAssert.png","2022-09-28 14:20;kvn;replay_pid34748.log;https://bugs.openjdk.org/secure/attachment/100885/replay_pid34748.log",,,,,,x86_64,,,,,,,,,generic,,,,,,,"0|i2yq8b:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-28 14:21;kvn;I attached replay file. We had few loop optimization changes pushed in past week.;;;","2022-09-28 16:30;dlong;ILW = assert in debug build; intermittent; disable compilation of affected method = MMM = P3;;;","2022-09-30 10:54;kvn;I was not able to reproduce the failure because of method's class:

     96    3    b  4       java.net.URI$1::create (10 bytes)
Error while parsing line 999 at position 4096: Can't find holder klass
;;;","2022-09-30 13:12;dlong;[~kvn], I'm not seeing the error.  What is the length of line 999 in your replay file?  It should be 6796.  ""position 4096"" seems strange.;;;","2022-09-30 13:38;kvn;You are right, Dean. My local copy of replay file was wrong.  After updating I reproduced failure with next flags:

java -Xbatch -XX:+ReplayCompiles -XX:ReplayDataFile=replay_pid34748.log -XX:+ReplayIgnoreInitErrors -XX:+PrintCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:LoopUnrollLimit=250 -XX:CompileThresholdScaling=0.1 -XX:-SuperWordReductions -XX:LoopMaxUnroll=8 -XX:-TieredCompilation -ea -esa 
;;;","2022-09-30 16:21;kvn;Looks like it was ""pre-existing"" bug which was exposed by changes in java.net.URI class:
 JDK-8272702: Resolving URI relative path with no / may lead to incorrect toString
https://github.com/openjdk/jdk/commit/79597f1ea6844f374beeeba219719cd9d5fe7d03

Compilation replay passed after I revert the change.
;;;","2022-10-04 02:48;epeter;I can reproduce it on my ubuntu linux too, not just windows, changed OS to ""generic"".
Will look into this.

opaq->in(1) == limit
does not hold, we have two different CastII nodes.

(rr) p opaq->in(1)->dump_bfs(100,limit,""#+-"")
dist dump
---------------------------------------------
   0  6332  CastII  === _ 6331  [[ 5917 ]]  #int:1..max-2:www !jvms: String::<init> @ bci:3 (line 1487) StringBuilder::toString @ bci:5 (line 453) URI::validSchemeAndPath @ bci:24 (line 867) URI::<init> @ bci:17 (line 860) URI$1::create @ bci:6 (line 3647)
   1  6331  AddI  === _ 6330 1418  [[ 6332 ]]  !jvms: String::<init> @ bci:3 (line 1487) StringBuilder::toString @ bci:5 (line 453) URI::validSchemeAndPath @ bci:24 (line 867) URI::<init> @ bci:17 (line 860) URI$1::create @ bci:6 (line 3647)
   2  1418  ConI  === 0  [[ 1501 952 1517 515 387 390 2698 487 486 485 484 6083 444 2654 478 477 476 2687 472 5505 1497 396 466 465 464 463 461 389 1461 404 403 495 439 451 449 497 526 2139 1318 397 5482 440 5477 2676 435 434 433 432 5489 494 5927 492 426 425 424 419 418 417 416 5646 1323 388 491 6185 6188 6201 6325 6328 6331 6334 6337 ]]  #int:-1 !jvms: URI$Parser::at @ bci:2 (line 2970) URI$Parser::parse @ bci:33 (line 3148) URI::<init> @ bci:19 (line 620) URI::validSchemeAndPath @ bci:27 (line 867) URI::<init> @ bci:17 (line 860) URI$1::create @ bci:6 (line 3647)
   3  6328  AddI  === _ 6327 1418  [[ 6329 ]]  !jvms: String::<init> @ bci:3 (line 1487) StringBuilder::toString @ bci:5 (line 453) URI::validSchemeAndPath @ bci:24 (line 867) URI::<init> @ bci:17 (line 860) URI$1::create @ bci:6 (line 3647)
   4  6329  CastII  === _ 6328  [[ 2690 ]]  #int:1..max-2:www !jvms: StringBuilder::toString @ bci:5 (line 453) URI::validSchemeAndPath @ bci:24 (line 867) URI::<init> @ bci:17 (line 860) URI$1::create @ bci:6 (line 3647);;;","2022-10-13 11:59;dcubed;Here's the crashing thread stack for the jdk-20+20-1380-tier3 sighting:

compiler/loopopts/superword/RedTest_int.java

---------------  T H R E A D  ---------------

Current thread (0x000001de6569eda0):  JavaThread ""C2 CompilerThread2"" daemon [_thread_in_native, id=54920, stack(0x0000005c04300000,0x0000005c04400000)]


Current CompileTask:
C2:   1351  304             java.net.URI$Parser::parse (243 bytes)

Stack: [0x0000005c04300000,0x0000005c04400000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc0b6d1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe6e21e]  VMError::report+0x10be  (vmError.cpp:841)
V  [jvm.dll+0xe6fd14]  VMError::report_and_die+0x644  (vmError.cpp:1700)
V  [jvm.dll+0xe70454]  VMError::report_and_die+0x64  (vmError.cpp:1481)
V  [jvm.dll+0x57fb77]  report_vm_error+0xb7  (debug.cpp:285)
V  [jvm.dll+0xa8486d]  PhaseIdealLoop::do_unroll+0x4bd  (loopTransform.cpp:2228)
V  [jvm.dll+0xa8ba81]  IdealLoopTree::iteration_split_impl+0x7c1  (loopTransform.cpp:3907)
V  [jvm.dll+0xa8b180]  IdealLoopTree::iteration_split+0x160  (loopTransform.cpp:3931)
V  [jvm.dll+0xa8b04f]  IdealLoopTree::iteration_split+0x2f  (loopTransform.cpp:3915)
V  [jvm.dll+0xa8b2a0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3947)
V  [jvm.dll+0xa8b2a0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3947)
V  [jvm.dll+0xa8b2a0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3947)
V  [jvm.dll+0xa8b2a0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3947)
V  [jvm.dll+0xa8b2a0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3947)
V  [jvm.dll+0xa8b2a0]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3947)
V  [jvm.dll+0xa995c1]  PhaseIdealLoop::build_and_optimize+0x1131  (loopnode.cpp:4519)
V  [jvm.dll+0x51534b]  Compile::Optimize+0x109b  (compile.cpp:2415)
V  [jvm.dll+0x5121cd]  Compile::Compile+0x148d  (compile.cpp:832)
V  [jvm.dll+0x438a65]  C2Compiler::compile_method+0x145  (c2compiler.cpp:116)
V  [jvm.dll+0x52bf84]  CompileBroker::invoke_compiler_on_method+0x884  (compileBroker.cpp:2243)
V  [jvm.dll+0x52977d]  CompileBroker::compiler_thread_loop+0x23d  (compileBroker.cpp:1917)
V  [jvm.dll+0x7f5f92]  JavaThread::thread_main_inner+0x282  (javaThread.cpp:700)
V  [jvm.dll+0xde8e27]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc09fe8]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x2268a]
C  [KERNEL32.DLL+0x17974]
C  [ntdll.dll+0x5a0b1];;;","2022-11-14 00:31;thartmann;While this is similar to JDK-8269820, the root cause seems to be different (I verified this by applying the prototype fix that Roland proposed in https://github.com/openjdk/jdk17/pull/208#issuecomment-878257990).;;;","2022-11-17 07:52;thartmann;Attached GraphAtAssert.png shows the 5942 Opaque1 and the 6348 CastII. Both CmpI compare against the same limit but the problem is that PhaseIdealLoop::reorg_offsets added nodes in-between that confuse the verification code.

A straightforward fix would be to disable PhaseIdealLoop::reorg_offsets which is useless anyway in its current form (see [~chagedorn]'s nice analysis in https://github.com/openjdk/jdk/pull/10306).;;;","2022-11-29 08:24;epeter;Will remove Opaque2 node, as it seems broken anyway;;;","2022-12-02 02:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11477
Date: 2022-12-02 09:58:22 +0000;;;","2022-12-05 00:32;dukebot;Changeset: 619b68c5
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-12-05 08:30:31 +0000
URL:       https://git.openjdk.org/jdk/commit/619b68c5d1908de335cefd536963cadd57472925
;;;",,,,,,,,,,
Augment discussion of equivalence relations on floating-point values,JDK-8294539,5084363,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-09-28 13:28,2022-10-18 13:23,2023-10-01 09:56,2022-10-04 17:22,20,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294814,JDK-8257086,,,JDK-8295517,JDK-8295391,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yq83:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-09-29 18:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10498
Date: 2022-09-29 22:14:24 +0000;;;","2022-10-04 17:22;dukebot;Changeset: 1dafbe3f
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-10-05 00:18:55 +0000
URL:       https://git.openjdk.org/jdk/commit/1dafbe3f944fdb3027df38a886fd15abc3b476a7
;;;",,,,,,,,,,,,,,,,,,,,,
missing is_unloading() check in SharedRuntime::fixup_callers_callsite(),JDK-8294538,5084362,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dlong,dlong,dlong,2022-09-28 13:26,2023-01-04 01:41,2023-10-01 09:56,2022-10-21 19:14,17,18,19,20,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,noreg-hard,oracle-triage-11,oracle-triage-20,,,,,,,,,,,,"From JDK-8293648, Erik Österlund wrote:

I also noticed that SharedRuntime::fixup_callers_callsite() patches callsites if the c2i adapter's Method's code is is_in_use(). It seems to miss an ""&& !is_unloading()"" in there. In practice that has not made a big difference until I removed the sweeper. Because nmethods would typically be is_unloading, because the Method is also unloading, in which case the c2i adapter entry barrier will take care of it. But now that an nmethod can become is_unloading also because it's ""cold"" or such, its Method is way more likely to be is_alive. And then we can get past the c2i adapter entry barrier, and end up calling fixup_callers_callsite, and miss the is_unloading check on the code, and break unlinking monotonicity of the inline cache cleaning. That could have pretty disasterous consequences when using ZGC. ",,,,,,,,,,JDK-8299583,JDK-8296278,JDK-8297512,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295097,JDK-8291832,JDK-8293648,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yq7v:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-28 13:30;dlong;[~eosterlund], I also noticed that in make_not_entrant(), we bail out if is_unloading().  I'm wondering if we have code that assumes !is_in_use() after calling make_not_entrant().  If we always had make_not_entrant() change the nmethod state, then would we still need to check is_unloading() in fixup_callers_callsite()?;;;","2022-09-28 23:51;eosterlund;We would still need to check for is_unloading when patching callsites. But you are right that there might be places where we assume an nmethod is !is_in_use after calling make_not_entrant. I’ll look around and see if I can spot anything. Such nmethods are obviously already not entrant, but it isn’t reflected in the is_in_use question.
When I prototyped removing inline caches, I had is_in_use check if the state is in_use && !is_unloading. Because that tends to be what you mean. Maybe we should do that.;;;","2022-09-29 17:18;dlong;ILW = potential for weird crashes; suspected as possible cause of some rare crashes; no workaround = HLH = P2;;;","2022-09-29 17:51;dlong;It would be nice if nmethods could have fewer states, so that we could check fewer conditions to see if everything is fine, or something has changed and we need to do something.  Having fewer states would also make reasoning about nmethod states and transitions easier.  Here's a list of staleness indicators off the top of my head:

1. nmethod->is_unloading [dead oops or cold]
2. !nmethod->is_in_use or not_entrant
3. nmethod has references to is_old methods
4. nmethod has references to unloading metadata
5. nm->method()->code() != nm [replaced]
6. nmethod is ""cold""
7. nmethod references dead oops
8. nmethod references other nmethods that are cold/unloading/not_entrant/is_old/replaced

Making sure that is_unloading implies !is_in_use seems like a good start.;;;","2022-09-30 00:14;eosterlund;Agreed. Would also like to see is_not_used disappear as it's only used by AoT which is no more. And is_not_installed seems to also be a relatively low hanging fruit to remove.;;;","2022-10-13 02:33;dlong;By carefully instrumenting the JVM, I was able to guide it into a crash because of this bug.  The result was calling into memory that was filled with 0xcccccccccccccccc. ;;;","2022-10-13 23:03;dlong;Based on our understanding of the bug, I'm going to assume this affects releases with the sweeper, such as 17.;;;","2022-10-18 10:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10747
Date: 2022-10-18 17:37:30 +0000;;;","2022-10-21 19:14;dukebot;Changeset: b5efa2af
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-10-22 02:11:55 +0000
URL:       https://git.openjdk.org/jdk/commit/b5efa2afe268e3171f54d8488ef69bf67059bd7f
;;;","2022-11-22 07:52;thartmann;Fix Request (JDK 19u)
Fixes potential crashes, especially with ZGC. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u.;;;","2022-11-22 08:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/81
Date: 2022-11-22 15:51:17 +0000;;;","2023-01-03 01:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1021
Date: 2023-01-03 09:26:14 +0000;;;","2023-01-03 02:15;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Acceptable risk, see also 19u fix request above.
Clean backport.
SAP nightly testing passed.;;;",,,,,,,,,,
Documentation mistake in Process::getErrorStream and getInputStream,JDK-8294533,5084352,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,nlisker,nlisker,2022-09-28 08:13,2022-10-05 23:20,2023-10-01 09:56,2022-09-30 12:13,19,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/lang/Process.html#getInputStream()

The API note for Process::getInputStream reads:

""Use getInputStream and inputReader with extreme care.The BufferedReader may have buffered input from the input stream.""

Which makes sense. However, the same note exists for Process::getErrorStream, where I think the note should refer to getErrorStream and errorReader instead.

In addition, the link tags to inputReader point to the private variable and causes them not to render. They should point to the method.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yq5n:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-09-29 08:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10492
Date: 2022-09-29 15:01:25 +0000;;;","2022-09-30 12:13;dukebot;Changeset: d207da8a
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-09-30 19:10:55 +0000
URL:       https://git.openjdk.org/jdk/commit/d207da8a8c2806ea254909658f2a50e037554866
;;;",,,,,,,,,,,,,,,,,,,,,
Some java.security.debug options missing from security docs,JDK-8294527,5084343,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rwallace,coffeys,coffeys,2022-09-28 06:38,2023-02-06 10:43,2023-10-01 09:56,2023-02-01 05:52,,,,,,,21,security-libs,,0,noreg-trivial,starter-bug,,,,,,,,,,,,,,,,,,"A scan of the security-libs code base shows Debug.getInstance calls that have properties which don't appear to be documented:

java.base/share/classes/java/security/Security.java:                        Debug.getInstance(""properties"")

java.base/share/classes/sun/security/provider/SubjectCodeSource.java:        sun.security.util.Debug.getInstance(""auth"", ""\t[Auth Access]"");

java.base/share/classes/sun/security/x509/CertificateExtensions.java:    private static final Debug debug = Debug.getInstance(""x509"");

java.smartcardio/unix/classes/sun/security/smartcardio/PlatformPCSC.java:    static final Debug debug = Debug.getInstance(""pcsc"");

SubjectCodeSource.java will probably be deleted via JDK-8294526 so that can be disregarded. The others are probably worthy of entry in the security docs guide and in the help output generated by the JDK",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yq3n:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-09-29 13:58;mullan;Moving to docs component. The debug property is documented at: https://docs.oracle.com/en/java/javase/19/security/troubleshooting-security.html;;;","2022-09-29 14:05;mullan;Ah, I just realized there  is a coding part of this, to enhance the ""help"" option to emit these options. Moving back to security-libs for now. We should  instead create a docs subtask.;;;","2022-10-07 06:54;mullan;I don't think it is worth documenting ""pcsc"" as a general debugging option, as there is only a single debug line in the unix code: https://github.com/openjdk/jdk/blob/master/src/java.smartcardio/unix/classes/sun/security/smartcardio/PlatformPCSC.java#L64;;;","2022-10-07 07:05;mullan;The ""x509"" option has an additional ""ava"" suboption that embeds non-printable/non-escaped characters in AVA components as hex strings in the string form of these names. Not sure if it is worth documenting this suboption as it is not something that is emitted to standard error.;;;","2023-01-30 02:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12289
Date: 2023-01-30 10:23:59 +0000;;;","2023-02-01 05:52;dukebot;Changeset: bc750f70
Author:    ryawalla <ryan.w.wallace@oracle.com>
Committer: Sean Mullan <mullan@openjdk.org>
Date:      2023-02-01 13:50:40 +0000
URL:       https://git.openjdk.org/jdk/commit/bc750f70f2ac1f14f5b8e6236c593dcbe99cb12f
;;;",,,,,,,,,,,,,,,,,
sun/security/provider/SubjectCodeSource.java no longer referenced,JDK-8294526,5084342,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rwallace,coffeys,coffeys,2022-09-28 06:20,2023-01-09 11:13,2023-10-01 09:56,2023-01-03 05:55,,,,,,,21,security-libs,,0,noreg-cleanup,starter-bug,,,,,,,,,,,,,,,,,,"https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/sun/security/provider/SubjectCodeSource.java

no longer used since JDK-8191139 

suggest that it's removed along with the class reference in our test base.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8191139,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yq3f:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-09-29 13:51;weijun;Yes we can remove this file. Note that the file name appears in a summary of a test at test/jdk/sun/security/provider/PolicyFile/Comparator.java. The test is still useful because the same type check is also in sun/security/provider/PolicyFile.java.;;;","2022-11-08 01:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10550
Date: 2022-10-04 08:25:10 +0000;;;","2023-01-03 05:55;dukebot;Changeset: 92dfc735
Author:    Ryan Wallace <ryan.w.wallace@oracle.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2023-01-03 13:52:47 +0000
URL:       https://git.openjdk.org/jdk/commit/92dfc735f2297441a99b3e39464fb8f77a354d55
;;;",,,,,,,,,,,,,,,,,,,,
(fs) java/nio/file/Files/CopyProcFile.java fails intermittenly due to unstable /proc/cpuinfo output,JDK-8294519,5084333,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,shade,shade,2022-09-28 04:19,2023-01-02 16:58,2023-10-01 09:56,2022-09-29 14:07,,,,,,,20,core-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,,"The new test from JDK-8293502 fails frequently, usually at high load. Fails reliably in tier2 testing for me:

$ CONF=linux-x86_64-server-fastdebug make test TEST=java/nio/file/Files/CopyProcFile.java

...

Using source file ""/proc/cpuinfo""
Copied 98894 bytes from /proc/cpuinfo
config CopyProcFile.createBufferedCopy(): success
test CopyProcFile.testCopyAndTransfer(CopyProcFile$FHolder@bb8c28f): failure
java.nio.file.NoSuchFileException: bufferedCopy
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at java.base/sun.nio.fs.UnixFileSystemProvider.isSameFile(UnixFileSystemProvider.java:378)
	at java.base/java.nio.file.Files.isSameFile(Files.java:1538)
	at java.base/java.nio.file.Files.mismatch(Files.java:1590)
	at CopyProcFile.testCopyAndTransfer(CopyProcFile.java:168)


The real root cause is that test tries to copy from /proc/cpuinfo and check that copied contents are identical. The failure is obscure, because createBufferedCopy masks the initial copy check result by throwing RuntimeException, which the subsequent catch(Exception) block silently captures and deletes the bufferedCopy. Which means ""config CopyProcFile.createBufferedCopy(): success"" in the output above is actually misleading. 

But /proc/cpuinfo output is not guaranteed to be stable, because it includes CPU frequency. Simple test on my desktop:

$  while true; do cat /proc/cpuinfo > 1; sleep 1; cat /proc/cpuinfo > 2; diff -uwb 1 2; done
--- 1	2022-09-28 13:17:50.905173889 +0200
+++ 2	2022-09-28 13:17:51.929201003 +0200
@@ -5,7 +5,7 @@
 model name	: AMD Ryzen Threadripper 3970X 32-Core Processor
 stepping	: 0
 microcode	: 0x8301025
-cpu MHz		: 2263.655
+cpu MHz		: 2200.000
 cache size	: 512 KB
 physical id	: 0
 siblings	: 64

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293502,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yq1f:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-09-28 04:33;alanb;/proc has been very troublesome because several system calls behave difference, you can't trust inode data, etc.  I wonder if the test could use /proc/version as it should be stable.;;;","2022-09-28 04:44;shade;I wonder if we want to copy something large from /proc to exercise buffering? /proc/version is tiny. Let's problemlist the test (JDK-8294520), and see what options there are for test stabilization.;;;","2022-09-28 11:57;bpb;It might not matter whether the test file /proc/<somefile> is tiny as we just want to ensure that *something* is read, not zero bytes like before.;;;","2022-09-28 18:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10479
Date: 2022-09-29 01:17:36 +0000;;;","2022-09-29 14:07;dukebot;Changeset: a07975bf
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-09-29 21:06:49 +0000
URL:       https://git.openjdk.org/jdk/commit/a07975bf3e321bdf02748693930c2523fa1df22d
;;;",,,,,,,,,,,,,,,,,,
Update jdk19u fix version to 19.0.2,JDK-8294517,5084331,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,robm,robm,robm,2022-09-28 03:50,2022-11-08 10:39,2023-10-01 09:56,2022-09-28 04:10,,,,,,,19.0.2,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296594,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yq0z:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2022-09-28 03:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/42
Date: 2022-09-28 10:52:48 +0000;;;","2022-09-28 04:10;dukebot;Changeset: 3d1cabb1
Author:    Rob McKenna <robm@openjdk.org>
Date:      2022-09-28 11:08:04 +0000
URL:       https://git.openjdk.org/jdk19u/commit/3d1cabb1477e3b461349916f2e796ee0ff825dd1
;;;",,,,,,,,,,,,,,,,,,,,,
Wrong initialization of nmethod::_consts_offset for native nmethods,JDK-8294514,5084323,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rrich,rrich,rrich,2022-09-28 02:57,2022-10-10 15:34,2023-10-01 09:56,2022-10-05 02:36,11,17,20,,,,20,hotspot,,0,oracle-triage-20,,,,,,,,,,,,,,,,,,,"Symptom 1: Negative sizes of constants sections for native nmethods

Reproduce:

* Build with attached patch
* Run `java -Xcomp -Xlog:jit+compilation=debug -version`

The output will contain ""NEGATIVE constants section size"" for every native nmethod.

Symptom 2: Empty constants section in PrintAssembly output for (Loom) continuation
enter intrinsic even though, at least on PPC, it is not empty.

Analysis: JDK-6961697 [1] moved the constants section before the instruction section. This was
reflected in the initialization of nmethod::_consts_offset done by the nmethod
constructor for c1/c2 compiled nmethods. It was forgotten though to update the
constructor for native nmethods.

[1] Commit for JDK-6961697
    https://github.com/openjdk/jdk/commit/6a0c40f1fee892687ab615dd2566109e8204ec96
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6961697,,,,,,,,,,,,"2022-09-28 03:00;rrich;log_negative_size.patch;https://bugs.openjdk.org/secure/attachment/100881/log_negative_size.patch",,,,,,,,,,,,,,,,,,,,,,,"0|i2ypz7:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-28 16:28;dlong;ILW = incorrect log output; always; no workaround = LHH = P4;;;","2022-09-29 04:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10482
Date: 2022-09-29 08:16:27 +0000;;;","2022-10-05 02:36;dukebot;Changeset: b4e74aea
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2022-10-05 09:33:45 +0000
URL:       https://git.openjdk.org/jdk/commit/b4e74aeabfd41ee76b6bf8b779c1741b30b6f438
;;;",,,,,,,,,,,,,,,,,,,,
"The sign extension bug applies to 'public static int[] convertSeedBytesToInts(byte[] seed, int n, int z)' in RandomSupport",JDK-8294509,5084238,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,webbuggrp,webbuggrp,2022-09-27 08:06,2023-09-08 01:41,2023-10-01 09:56,2022-10-04 03:28,17,18,19,20,,,20,core-libs,,0,19ea,amazon-interest,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
This is related to bug JDK-8282144.  Please see https://bugs.openjdk.org/browse/JDK-8282144?focusedCommentId=14482366&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14482366 for more details.

The method attempts to create an array of longs by consuming the input bytes most significant bit first. New bytes are appended to the existing long using the OR operator on the signed byte. Due to sign extension this will overwrite all the existing bits from 63 to 8 if the next byte is negative.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
The bug will not readily manifest as a poorly seeded RNG with many of the bits in the generated int[] set to 1 quickly recovers and outputs a random sequence. Reproducing cannot be done without access to the internal class RandomSupport.

I have extracted the part of the class with the bug into a driver program:

public class RandomSupportInts {
  private static final char[] HEX_DIGITS =
      {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};

  public static int[] convertSeedBytesToInts(byte[] seed, int n, int z) {
    final int[] result = new int[n];
    final int m = Math.min(seed.length, n << 2);
    // Distribute seed bytes into the words to be formed.
    for (int j = 0; j < m; j++) {
      result[j>>2] = (result[j>>2] << 8) | seed[j];
    }
    // Filling the rest of the int[] has been removed for brevity
    return result;
  }

  public static int[] convertSeedBytesToIntsFixed(byte[] seed, int n, int z) {
    final int[] result = new int[n];
    final int m = Math.min(seed.length, n << 2);
    // Distribute seed bytes into the words to be formed.
    for (int j = 0; j < m; j++) {
      result[j>>2] = (result[j>>2] << 8) | (seed[j] & 0xff);
    }
    // Filling the rest of the int[] has been removed for brevity
    return result;
  }

  public static void main(String[] args) {
    RandomGenerator rng = RandomGeneratorFactory.of(""L64X128MixRandom"").create(42);
    for (int i = 1; i < Integer.BYTES; i++) {
      byte[] seed = new byte[i];
      for (int j = 0; j < 10; j++) {
        rng.nextBytes(seed);

        for (byte b : seed) {
          System.out.printf(""%c%c"", HEX_DIGITS[(b & 0xf0) >> 4], HEX_DIGITS[b & 0xf]);
        }
        System.out.printf(""  %-16s  %-16s%n"",
            Integer.toHexString(convertSeedBytesToInts(seed, 1, 1)[0]),
            Integer.toHexString(convertSeedBytesToIntsFixed(seed, 1, 1)[0]));
      }
    }
  }
}


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile and run the driver program:

> javac RandomSupportInts.java
> java RandomSupportInts


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Column: Description
1: Hex representation of the input byte[], most significant bits first
2: Current long output (hex representation) 
3: Corrected long output (hex representation)

12  12                12              
10  10                10              
38  38                38              
ec  ffffffec          ec              
8a  ffffff8a          8a              
7e  7e                7e              
cf  ffffffcf          cf              
12  12                12              
11  11                11              
d4  ffffffd4          d4              
7ae2  ffffffe2          7ae2            
47c8  ffffffc8          47c8            
3cc0  ffffffc0          3cc0            
2475  2475              2475            
fdce  ffffffce          fdce            
7c04  7c04              7c04            
16a4  ffffffa4          16a4            
0bf1  fffffff1          bf1             
cb22  ffffcb22          cb22            
63eb  ffffffeb          63eb            
6d72b7  ffffffb7          6d72b7          
ddd3a6  ffffffa6          ddd3a6          
6194a2  ffffffa2          6194a2          
d54bc0  ffffffc0          d54bc0          
3142f5  fffffff5          3142f5          
643056  643056            643056          
ff94ba  ffffffba          ff94ba          
86923e  ffff923e          86923e          
faf8f0  fffffff0          faf8f0          
b69017  ffff9017          b69017
ACTUAL -
See expected result. The int created by the current code has many bits of the original input bytes overwritten with 1s (the output hex representation contains a lot of leading f characters). This results in loss of information in byte[] seeds.

CUSTOMER SUBMITTED WORKAROUND :
None. Currently any generator created using a random byte[] will not be seeded with the full randomness of the bytes. Using a random byte[] will generate an int[] array for seeding where only the least significant 8-bits of each long are ensured to be random. The more significant bits have an increasing chance of being set to 1s. This is 1 - 1/(2^3) = 0.875 for the highest 8-bits in the int if 4 bytes were used to create it (as it has 3 chances to overwrite the bits as they are shifted up).

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282144,,,,,,,,"2022-09-28 01:04;tongwan;RandomSupportInts.java;https://bugs.openjdk.org/secure/attachment/100878/RandomSupportInts.java",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2ypgb:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-09-28 01:01;tongwan;The observations on Windows 10:
JDK 17: Failed, the output hex representation contains a lot of leading f characters.
JDK 18: Failed.
JDK 19ea+32: Failed.
JDK 20ea+4: Failed.;;;","2022-10-03 02:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10530
Date: 2022-10-03 09:45:23 +0000;;;","2022-10-04 03:28;dukebot;Changeset: 5a9cd336
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2022-10-04 10:25:11 +0000
URL:       https://git.openjdk.org/jdk/commit/5a9cd33632862aa2249794902d4168a7fe143054
;;;",,,,,,,,,,,,,,,,,,,,
Delete KCMS transforms wrappers,JDK-8294488,5084290,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-09-27 20:11,2022-11-14 19:18,2023-10-01 09:56,2022-11-04 13:59,11,17,19,,,,20,client-libs,,0,,,,,,,,,,,,,,,,,,,,"The shared code for the colors transformation still uses some wrappers which can be simplified and/or deleted. For example each transform from one color space to another create 3 wrappers, for the first and second color profile and one which combines first two. But for the lcms library we only need the list of color profiles and rendering intent -> only one transform object can be used.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yprv:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-10-03 19:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10459
Date: 2022-09-28 03:12:55 +0000;;;","2022-11-04 14:00;dukebot;Changeset: d8573b2c
Author:    Sergey Bylokhov <serb@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-11-04 20:57:38 +0000
URL:       https://git.openjdk.org/jdk/commit/d8573b2c5bd235a3cc6442b6bda8d1bd2da495a0
;;;",,,,,,,,,,,,,,,,,,,,,
Remove vmTestbase/nsk/jvmti/ tests ported to serviceability/jvmti.,JDK-8294486,5084278,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-09-27 14:51,2022-12-16 12:49,2023-10-01 09:56,2022-10-25 15:49,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,Some events and thread tests were ported from vmTestbase/nsk/jvmti/  to serviceability/jvmti.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298979,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ypp7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-10-11 12:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10665
Date: 2022-10-11 19:00:11 +0000;;;","2022-10-11 14:53;lmesnik;Ported tests are:
lmesnik@lmesnik-mac:~/ws/jdk/open/test/hotspot/jtreg$ ls serviceability/jvmti/thread/
GetAllThreads              GetFrameCount              GetStackTrace              GetThreadState             ResumeThreadList           SuspendThreadList
GetCurrentContendedMonitor GetFrameLocation           GetThreadInfo              ResumeThread               SuspendThread
and
lmesnik@lmesnik-mac:~/ws/jdk/open/test/hotspot/jtreg$ ls serviceability/jvmti/events/
Breakpoint              ClassPrepare            ExceptionCatch          FieldModification       MethodEntry             MonitorContendedEnter   MonitorWait             NativeMethodBind        ThreadEnd               VMObjectAlloc
ClassLoad               Exception               FieldAccess             FramePop                MethodExit              MonitorContendedEntered MonitorWaited           SingleStep              ThreadStart;;;","2022-10-11 15:21;lmesnik;Tests were not removed as a part of porting just to give some time so see if new tests work well, However, maintaining 2 copies is a bad idea and it is needed to remove nsk/jvmti.;;;","2022-10-25 15:49;dukebot;Changeset: 3bd3caf8
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-10-25 22:48:00 +0000
URL:       https://git.openjdk.org/jdk/commit/3bd3caf897dcb6d53fae6e94ba1cc281b30277ea
;;;",,,,,,,,,,,,,,,,,,,
MetalBorder's FrameBorder & DialogBorder have border rendering issues when scaled,JDK-8294484,5084276,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2022-09-27 14:36,2023-02-15 23:16,2023-10-01 09:56,2023-02-08 16:46,11,17,19,20,,,21,client-libs,,0,sn_132,sn_136,sn_137,,,,,,,,,,,,,,,,,MetalBorder's FrameBorder & DialogBorder have border rendering issues when scaled similar to JInternalFrame.,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294680,,,,,,,,,JDK-8282958,JDK-8015739,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2ypor:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-09-29 10:02;honkar;Work on refactoring to utility method is in progress.;;;","2022-10-04 14:58;aivanov;There's a lot of duplicate code in *Border classes. All of them, FrameBorder, DialogBorder, InternalFrameBorder, mostly look the same except for the colors and the condition when resizable highlights are painted.

I propose to abstract these into a helper class which does the painting, the colors are set in a subclass and the condition whether the resizable highlights are to be painted or not could be passed as a Predicate<T> or, more effectively, abstracted into another abstract method which can be called directly.

Private border classes can be safely refactored this way.

Some of the border classes are public API, we can't change inheritance in this case. However, we can still change the implementation and delegate to painting job to the new border painter class.;;;","2023-02-02 12:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12391
Date: 2023-02-02 20:09:18 +0000;;;","2023-02-08 16:46;dukebot;Changeset: 5561c397
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-02-09 00:44:58 +0000
URL:       https://git.openjdk.org/jdk/commit/5561c397c53b8a821a200491abd8f7b3297fbd31
;;;",,,,,,,,,,,,,,,,,,,
Remove vmTestbase/nsk/jvmti/GetThreadState tests.,JDK-8294483,5084274,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-09-27 14:34,2022-10-03 12:32,2023-10-01 09:56,2022-09-27 15:49,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,Tests in the vmTestbase/nsk/jvmti/GetThreadState were ported to serviceability/jvmti/thread/GetThreadState and should be removed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271065,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ypob:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-09-27 14:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10457
Date: 2022-09-27 21:36:32 +0000;;;","2022-09-27 15:49;dukebot;Changeset: f8d9fa88
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-09-27 22:47:01 +0000
URL:       https://git.openjdk.org/jdk/commit/f8d9fa88735d8451108a0664990b8fc7409338e9
;;;",,,,,,,,,,,,,,,,,,,,,
SpecTaglet is inconsistent with SpecTree for inline property,JDK-8294471,5084248,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-09-27 11:52,2022-10-03 12:32,2023-10-01 09:56,2022-09-27 14:21,20,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,"The `@spec` tag is now just a block tag, and not an inline tag.

But, the `SpecTaglet` declares that it can be inline.   This is inconsistent.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6251738,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ypij:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-09-27 12:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10456
Date: 2022-09-27 19:27:42 +0000;;;","2022-09-27 14:21;dukebot;Changeset: 22b59b66
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-09-27 21:18:12 +0000
URL:       https://git.openjdk.org/jdk/commit/22b59b66d975845da778220d983a1693e7f7055f
;;;",,,,,,,,,,,,,,,,,,,,,
Minimize disabled warnings in java.desktop,JDK-8294466,5084241,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-09-27 09:13,2022-11-14 11:34,2023-10-01 09:56,2022-10-24 02:56,20,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,"After JDK-8294281, it is now possible to disable warnings for individual files instead for whole libraries. I used this opportunity to go through all disabled warnings in java.desktop native libraries.

Any warnings that were only triggered in a few files were removed from the library as a whole, and changed to be only disabled for those files.

Some warnings didn't trigger in any file anymore, and could just be removed. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295868,JDK-8295847,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ypgz:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-18 15:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10453
Date: 2022-09-27 16:14:32 +0000;;;","2022-10-20 03:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10790
Date: 2022-10-20 10:36:08 +0000;;;","2022-10-24 02:56;dukebot;Changeset: 74606614
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-24 09:50:58 +0000
URL:       https://git.openjdk.org/jdk/commit/74606614e0a2e81dadf27e20028055f6305e2ac4
;;;",,,,,,,,,,,,,,,,,,,,
[lworld] Add jdk.internal.misc.ValhallaFeatures to reflect -XX:+EnableValhalla,JDK-8294462,5084236,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2022-09-27 07:00,2022-09-28 06:52,2023-10-01 09:56,2022-09-28 06:52,,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"The implementation of value objects is enabled by the -XX:+EnableValhalla command line switch.
The implementation of the value class  java libraries will be conditioned on the command line switch.
A internal class jdk.internal.misc.ValhallaFeatures is added.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ypfv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-27 07:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/769
Date: 2022-09-27 14:38:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
wrong effectively final determination by javac,JDK-8294461,5084234,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,acobbs,sundar,sundar,2022-09-27 06:20,2023-04-03 14:16,2023-10-01 09:56,2022-10-27 09:00,19,,,,,,20,tools,,0,release-note=no,,,,,,,,,,,,,,,,,,,"File: Demo.java


public class Demo {
    public static void main(String[] args) {
        for (int i = 0; i < 10; i++) {
            Runnable r = () -> System.out.println(i);
            r.run();
            break;
        }
    }
}

Expected: compilation failure (as ""i"" is not effectively final)
Observed: javac compiles without error.

Source: compiler-dev email

https://mail.openjdk.org/pipermail/compiler-dev/2022-September/020481.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296148,,,,,,,JDK-8299416,JDK-8299861,,,JDK-8299849,JDK-8043179,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ypff:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-09-27 06:26;sundar;Same behaviour seen in jdk 18, 17, 11.0.9 and 8 (1.8.0_241) as well (versions I tested);;;","2022-09-27 08:04;vromero;could be related to JDK-8043179;;;","2022-10-25 08:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10856
Date: 2022-10-25 15:36:05 +0000;;;","2022-10-27 09:00;dukebot;Changeset: b8ad6cd9
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2022-10-27 15:58:46 +0000
URL:       https://git.openjdk.org/jdk/commit/b8ad6cd98a7e4b577b888dc5f9d93c2e4d3bf177
;;;","2023-01-10 23:53;jlahoda;This change has been reverted as JDK-8299849, and hence should not have a release note anymore. A specification bug has been filled as JDK-8299861, and once that is resolved, we need to re-evaluate how exactly we will fix this bug.;;;",,,,,,,,,,,,,,,,,,
CodeSection::alignment checks for CodeBuffer::SECT_STUBS incorrectly,JDK-8294460,5084233,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bulasevich,shade,shade,2022-09-27 06:03,2022-11-14 11:33,2023-10-01 09:56,2022-10-21 01:59,19,20,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,"Code added in CodeSection::alignment by JDK-8287373 triggers -Wint-in-bool-context warning on GCC (currently globally ignored), due to apparent bug. 

Patching current code with:

```
diff --git a/src/hotspot/share/asm/codeBuffer.hpp b/src/hotspot/share/asm/codeBuffer.hpp
index 96af0eebbdc..79b383e7287 100644
--- a/src/hotspot/share/asm/codeBuffer.hpp
+++ b/src/hotspot/share/asm/codeBuffer.hpp
@@ -752,11 +752,11 @@ inline int CodeSection::alignment(int section) {
   if (section == CodeBuffer::SECT_INSTS) {
     return (int) CodeEntryAlignment;
   }
-  if (CodeBuffer::SECT_STUBS) {
+  if (section == CodeBuffer::SECT_STUBS) {
     // CodeBuffer installer expects sections to be HeapWordSize aligned
     return HeapWordSize;
   }
-  ShouldNotReachHere();
+  fatal(""What: %d"", section);
   return 0;
 }
```

Yields the failure right at build time:

```
#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/asm/codeBuffer.hpp:759), pid=1422115, tid=1422120
#  fatal error: What: -1

Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8aae01]  CodeSection::alignment(int)+0x45  (codeBuffer.hpp:759)
V  [libjvm.so+0x8aab52]  CodeSection::alignment()+0x22  (codeBuffer.hpp:260)
V  [libjvm.so+0x8a54ff]  CodeBuffer::initialize(int, int)+0x2f  (codeBuffer.cpp:103)
V  [libjvm.so+0x8aacf5]  CodeBuffer::CodeBuffer(char const*, int, int)+0xcb  (codeBuffer.hpp:539)
V  [libjvm.so+0x1396a28]  StubGenerator::generate_throw_exception(char const*, unsigned char*, Register, Register)+0x68  (stubGenerator_x86_64.cpp:3540)
V  [libjvm.so+0x13970e9]  StubGenerator::generate_initial()+0x1d5  (stubGenerator_x86_64.cpp:3653)
V  [libjvm.so+0x1398707]  StubGenerator::StubGenerator(CodeBuffer*, int)+0x57  (stubGenerator_x86_64.hpp:523)
V  [libjvm.so+0x1398367]  StubGenerator_generate(CodeBuffer*, int)+0x42  (stubGenerator_x86_64.cpp:3918)
V  [libjvm.so+0x13e6e3d]  StubRoutines::initialize1()+0x113  (stubRoutines.cpp:228)
V  [libjvm.so+0x13e7d8d]  stubRoutines_init1()+0xd  (stubRoutines.cpp:389)
V  [libjvm.so+0xc6c782]  init_globals()+0x34  (init.cpp:123)
V  [libjvm.so+0x1485e0b]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x3f3  (threads.cpp:570)
V  [libjvm.so+0xd8b591]  JNI_CreateJavaVM_inner(JavaVM_**, void**, void*)+0xed  (jni.cpp:3628)
V  [libjvm.so+0xd8b8da]  JNI_CreateJavaVM+0x36  (jni.cpp:3714)
C  [libjli.so+0x891f]  InitializeJVM+0x150  (java.c:1457)
C  [libjli.so+0x560c]  JavaMain+0xe0  (java.c:413)
C  [libjli.so+0xc4a5]  ThreadJavaMain+0x2b  (java_md.c:650)
```

...as this code touches the `alignment()` before relevant sections are initialized:

```
void CodeBuffer::initialize(csize_t code_size, csize_t locs_size) {
  ...
  assert(SECT_LIMIT == 3, ""total_size explicitly lists all section alignments"");
  int total_size = code_size + _consts.alignment() + _insts.alignment() + _stubs.alignment() + SECT_LIMIT * slop;
  ...
  // Set up various pointers into the blob.
  initialize(_total_start, _total_size); // <---- actually initialized here
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287373,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ypf7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-27 06:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10450
Date: 2022-09-27 13:11:01 +0000;;;","2022-09-27 08:50;chagedorn;ILW = Incorrect enum test, no crash/failure observed due to the wrong behavior, no workaround = MLH = P4 ;;;","2022-10-20 00:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10699
Date: 2022-10-13 13:50:55 +0000;;;","2022-10-21 01:59;dukebot;Changeset: 50647187
Author:    Boris Ulasevich <bulasevich@openjdk.org>
Date:      2022-10-21 08:57:20 +0000
URL:       https://git.openjdk.org/jdk/commit/50647187e8b0314ad67b0767f71c56fd50e8feaf
;;;",,,,,,,,,,,,,,,,,,,
Fix misleading-indentation warnings in core JDK libraries,JDK-8294456,5084229,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,shade,shade,2022-09-27 05:53,2022-10-12 23:08,2023-10-01 09:56,2022-10-06 02:34,11,17,19,20,8,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,"There are number of places where misleading-indentation is reported by GCC. Currently, the warning is disabled for the entirety of JDK which is not good.

There seem to be a bona-fide bug in there, JDK-8294455.

Otherwise, the draft fix is attached.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294455,,,,,,,,,,,,,,,,,,,,,"2022-09-27 05:54;shade;8294456-mindent-1.patch;https://bugs.openjdk.org/secure/attachment/100872/8294456-mindent-1.patch",,,,,,,,,,,,,,,,,,,,,,,"0|i2ypeb:",9223372036854775807,b19,,,,,,,,,,,"2022-09-27 07:47;rgiulietti;The fix for e_asin.c changes the original semantics of the fdlibm code, so should be rejected. Of course, the code could be re-indented go avoid gcc warnings.
https://netlib.org/fdlibm/e_asin.c

The fix for k_rem_pio2.c preserves the semantics of the fdlibm code (although not the admittedly misleading formatting), hence could be accepted to avoid gcc warnings
https://netlib.org/fdlibm/k_rem_pio2.c
;;;","2022-09-29 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10487
Date: 2022-09-29 13:11:03 +0000;;;","2022-10-06 02:34;dukebot;Changeset: 2ceebf68
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2022-10-06 09:31:26 +0000
URL:       https://git.openjdk.org/jdk/commit/2ceebf681ffd6f9bf6967fd81b30d721bc010b94
;;;",,,,,,,,,,,,,,,,,,,,
Fix misleading-indentation warnings in hotspot,JDK-8294438,5084210,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-09-27 03:26,2022-11-14 11:31,2023-10-01 09:56,2022-10-20 10:06,11,17,19,20,,,20,hotspot,,0,redhat-interest,,,,,,,,,,,,,,,,,,,"There are number of places where misleading-indentation is reported by GCC. Currently, the warning is disabled for the entirety of Hotspot, which is not good. 

Note this actually solves a bug in lir_alloc_array, where do_temp are called without a check.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294314,,,,JDK-8295709,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ypa3:",9223372036854775807,b21,,,,,,,,,,,"2022-09-27 05:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10444
Date: 2022-09-27 10:28:54 +0000;;;","2022-10-20 10:06;dukebot;Changeset: 545021b1
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-10-20 07:16:41 +0000
URL:       https://git.openjdk.org/jdk/commit/545021b18d6f82ac8013009939ef4e05b8ebf7ce
;;;",,,,,,,,,,,,,,,,,,,,,
java/nio/channels/FileChannel tests slow on Windows,JDK-8294437,5084209,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2022-09-27 01:53,2023-01-02 16:58,2023-10-01 09:56,2022-10-03 10:47,,,,,,,20,core-libs,,0,noreg-self,performance,tier2,,,,,,,,,,,,,,,,,"The following tests take much longer to execute on Windows, as compared to other platforms:
java/nio/channels/FileChannel/TransferTo6GBFile.java - 91 seconds
java/nio/channels/FileChannel/Transfer4GBFile.java - 85 seconds
java/nio/channels/FileChannel/Transfer2GPlus.java - 85 seconds

On other platforms the same tests complete under a second.
The tests are run in exclusive mode, which means that they are never run in parallel, which slows down tier2 testing even more.

We can probably speed up these tests by making sure that the test files are created with StandardOpenOption.SPARSE.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294723,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,,"0|i2yp9v:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-09-27 01:57;alanb;[~djelinski] Can you check with [~bpb] as I think he is already looking to changing these tests to use sparse files.;;;","2022-09-27 02:36;djelinski;[~alanb] I chatted with Brian briefly; he said he was not looking into these tests at the moment, and I could take them if I wanted to.;;;","2022-09-27 05:50;alanb;Thanks. One other thing is that I think the tests run with exclusive.dirs set so that they don't running concurrently with each other. This has a bit impact on macOS systems with HDD. The tests will of course run concurrently with tests in other directories.

;;;","2022-09-27 23:29;djelinski;one more test to examine:
java/nio/channels/FileChannel/LargeMapTest.java - 172 seconds
it's slow on all platforms, but again much slower on Windows, and could see some improvement from sparse files;;;","2022-09-28 04:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10464
Date: 2022-09-28 10:58:43 +0000;;;","2022-10-03 10:47;dukebot;Changeset: a4f2078b
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-10-03 17:42:56 +0000
URL:       https://git.openjdk.org/jdk/commit/a4f2078bd60d06795099c52ca8d437a8128eb8f6
;;;",,,,,,,,,,,,,,,,,
jshell reports error on initialisation of static final field of anonymous class,JDK-8294431,5084204,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,sundar,sundar,2022-09-27 00:32,2022-10-05 23:20,2023-10-01 09:56,2022-10-03 00:24,19,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,"File: Main.java

public class Main {
  public static void main(String[] a) {
    var obj = new Object() {
      public static final String msg = ""Hello"";
    };
    System.out.println(obj.msg);
  }
}

$ java Main.java
Hello

$ jshell 
|  Welcome to JShell -- Version 19
|  For an introduction type: /help intro

jshell> var obj = new Object() {
   ...>     public static final String msg = ""hello"";
   ...> }
|  Error:
|  cannot assign a value to final variable msg
|      public static final String msg = ""hello"";
|     ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yp8r:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-09-29 06:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10489
Date: 2022-09-29 13:51:16 +0000;;;","2022-10-03 00:24;dukebot;Changeset: 8e9cfeb1
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-10-03 07:23:42 +0000
URL:       https://git.openjdk.org/jdk/commit/8e9cfeb17ccb6c37243d43f76d5eecb3f521141f
;;;",,,,,,,,,,,,,,,,,,,,,
Check boxes and radio buttons have rendering issues on Windows in High DPI env,JDK-8294427,5084200,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rmahajan,shadowbug,shadowbug,2022-09-26 23:38,2023-09-29 07:46,2023-10-01 09:56,2023-07-26 16:36,11,17,19,20,,,17.0.10-oracle,client-libs,,0,11bpr-critical-approved,bugdb_34641530,cssn22_12_01,cssn22_12_02,cssn23_01_01,cssn23_01_02,cssn23_02_01,cssn23_02_02,cssn23_03_01,cssn23_03_02,cssn23_04_01,cssn23_04_02,hidpi,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,sustaining,"Check boxes and radio buttons in Windows Look-and-Feel have rendering issues when window is moved from display with one scale to display with a different scale on a multi-monitor setup:

- Scrawly ticks in checkboxes;
- Wrong circle relations in selected radio buttons.",,,,,,,,,,JDK-8316759,JDK-8313502,JDK-8317319,JDK-8311070,JDK-8314238,JDK-8313266,JDK-8316575,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314001,JDK-8211715,JDK-8311585,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,,"0|i2yp7v:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-12-09 10:30;rmahajan;In Java_sun_awt_windows_ThemeReader_getPartSize() in ThemeReader.cpp, 
rescale() function is called on checkbox's/radio button's size to calculate
correctly scaled size of these, and that is where the issue seems to arise from.

In rescale(), we calculate the DPI based on the screen where the window is. 
For example when the application sets scaling to 1.75, we still calculate the DPI as 144(since my
monitor has 150% scaling) instead of 168 and scale incorrectly thus. 
If I change it to 168(hard-code) in this function I see checkbox and radio-button rendered correctly
with 1.75 scaling.

Trying to figure out what API can we use to correctly set the DPI/Scaling in rescale() function so as to match what the application is setting.
;;;","2022-12-16 17:56;rmahajan;Debug update:

We always call OpenThemeData() on a AwtToolKit window since it is hardcoded in there. This specific window is always created on Primary monitor and stays there. So, even when the app window is moved to Secondary monitor with different DPI and we send WM_THEME changed message in response to the DPI change , it still keeps the same theme due to the them being opened for the same AwtToolKit window. This is the reason why getPartSize() calculates the incorrect size (according to primary monitor DPI) of checkboxs/radio buttons etc., and hence they are not scaled correctly on secondary monitor. 

So, currently I am looking into how to get the handle for the app window and open theme on it to make sure that everything is correctly scaled.

Also, I have added code in awt_Component to check for WM_GETDPISCALEDSIZE message and send WM_THEMECHANGED message in response to that. 
Currently I am broadcasting this message to all windows for testing my logic,  but will narrow it down to app window only as a next step.
;;;","2023-02-12 20:35;rmahajan;As of now I have added code to open themes for radio button and check boxes
based on DPI
of the monitor where the window is.
Also, added code changes so getPartSize() and other related functions always
use 96 DPI.
This is done so we don't have to rescale the parts underneath in getPartSize
in Native code.
After this I see crisp rendering of radio buttons and checkboxes with 100%,
150%, 200% scaling but not
with 125%, 175%, 225%, etc.
This is true for both Primary and Secondary monitor.
There is code in CachedPainter which seems to be double scaling causing the
above issue.;;;","2023-04-18 11:13;rmahajan;I have cleaned up the code changes and testing locally, as well on mach5.
Will send it for code review as a next step.

Summarizing the changes for the Fix:
Open a new Theme Handle per the DPI of the Screen where the App window is.
This helps make sure we get correct size for UI buttons based on the DPI from windows.
  
2. GetPartSize() of icons returns size based on standard size = 96 DPI
This change makes sure that the default size of UI buttons is 96 since we use this on Java side to do our Scaling calculations.

3. Rect size for icons in native paintBackground() function is in accordance with what windows returns for that specific DPI. 	
This helps make sure that the UI buttons are scaled correctly once we get their size back from Windows.

4. Adjust width and the height of the resolution variant image so that for scaling values   of  1.25 , 2.25 , and such we  always  floor ,while for 1.5, 1.75, 2.5, 2.75 , and such we always ceil.  	 
This helps make sure that for .25s scaling we get crisp rendering. This is because when we go from Double to Int for pixel rendering we sometimes need to floor or ceil to get crisp rendering.
;;;","2023-04-27 12:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13701
Date: 2023-04-27 19:25:55 +0000;;;","2023-07-06 03:41;aivanov;[~rmahajan] You forgot to change the fix version of the mainline. Because of it, the mainline fix is in a backport record.;;;","2023-09-11 11:43;rmahajan;Fix request (21u)
Clean backport. This change ensures checkboxes and radio buttons are rendered crisply when window is moved from a High DPI display with one scale to a display with a different scale on a multi-monitor setup.

https://github.com/openjdk/jdk21u/pull/152;;;","2023-09-11 11:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/152
Date: 2023-09-11 18:36:21 +0000;;;","2023-09-15 00:51;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Medium risk, bigger change in awt coding.
Trivial resolves needed.
SAP nightly testing passed.
;;;","2023-09-15 00:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1744
Date: 2023-09-15 07:50:48 +0000;;;","2023-09-19 22:10;clanger;This should be backported to jdk21u as well.;;;","2023-09-20 00:09;goetz;Yes, Rajat has already addressed this.;;;",,,,,,,,,,,
Two fingers tap generates wrong mouse modifiers on M2 MacBooks,JDK-8294426,5084199,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mkartashev,mkartashev,mkartashev,2022-09-26 23:37,2022-10-19 23:17,2023-10-01 09:56,2022-10-14 07:16,11,17,19,20,,,20,client-libs,,0,aarch64,macos,,,,,,,,,,,,,,,,,,"Tapping (not pressing) on Apple M2 MacBooks with two fingers on a trackpad generates wrong mouse modifiers (which are returned by MouseEvent.getModifiersEx).

Steps to reproduce
1. Enable System Preferences -> Trackpad -> Tap to click
2. Tap with two fingers in the following app:
import javax.swing.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

class MouseWindow {
    final JFrame frame;

    MouseWindow() {
        frame = new JFrame();
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        frame.setTitle(""Mouse window"");

        frame.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                System.out.println(e);
            }
        });

        frame.pack();

        frame.setSize(300, 300);

        frame.setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(MouseWindow::new);
    }
}

Expected

Printed mouse event has modifiersEx is 4096 (which is InputEvent.BUTTON3_DOWN_MASK)

Actual

Printed mouse event has modifiersEx is 4352 (which is InputEvent.BUTTON3_DOWN_MASK | InputEvent.META_DOWN_MASK)

The bug is 100% reproducible on M2 MacBooks (at least under macOS 12.5). It's also reproducible on M1 MacBooks, but much more rarely (about 10-15% of reproducibility).",,,,,,,,,,JDK-8295398,JDK-8295399,JDK-8295453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,,"0|i2yp7n:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-09-26 23:38;mkartashev;There's an open pull request to fix this issue: https://github.com/openjdk/jdk/pull/10429;;;","2022-09-27 04:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10429
Date: 2022-09-26 17:36:04 +0000;;;","2022-10-14 07:16;dukebot;Changeset: 2da079c6
Author:    Nikita Provotorov <nikita.provotorov@jetbrains.com>
Committer: Alexey Ushakov <avu@openjdk.org>
Date:      2022-10-14 14:14:23 +0000
URL:       https://git.openjdk.org/jdk/commit/2da079c64e880835c9c0eb36f5e63a7752ebb328
;;;",,,,,,,,,,,,,,,,,,,,
Test runtime/handshake/HandshakeDirectTest.java failed: JVMTI_ERROR_WRONG_PHASE,JDK-8294406,5084181,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lmesnik,dholmes,dholmes,2022-09-26 18:07,2022-10-10 15:33,2023-10-01 09:56,2022-10-04 06:00,20,,,,,,20,hotspot,,0,loom,tier1,tier4,,,,,,,,,,,,,,,,,"----------System.err:(6/333)----------
STATUS:Passed.
jvmti.JVMTIUtils$JvmtiException: JVMTI ERROR: 112
	at jvmti.JVMTIUtils.resumeThread(JVMTIUtils.java:80)
	at HandshakeDirectTest.resumeThread(HandshakeDirectTest.java:63)
	at HandshakeDirectTest$1.run(HandshakeDirectTest.java:121)
STATUS:Failed.`main' threw exception: jvmti.JVMTIUtils$JvmtiException: JVMTI ERROR: 112

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289607,,,,JDK-8294313,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,"0|i2yp3n:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-09-28 14:16;dholmes;jdk-20+17-1194-tier1

https://mach5.us.oracle.com/mdash/jobs/mach5-one-jdk-20+17-1194-tier1-20220928-1928-36943048/tasks/mach5-one-jdk-20+17-1194-tier1-20220928-1928-36943048-tier1-debug-open_test_hotspot_jtreg_tier1_runtime-linux-aarch64-debug-87/results?search=status%3Afailed%20AND%20-state%3Ainvalid

https://mach5.us.oracle.com:10060/api/v1/results/mach5-one-jdk-20+17-1194-tier1-20220928-1928-36943048-tier1-debug-open_test_hotspot_jtreg_tier1_runtime-linux-aarch64-debug-87-1664394835-409/log;;;","2022-09-29 18:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10502
Date: 2022-09-30 01:32:44 +0000;;;","2022-10-04 06:00;dukebot;Changeset: 2dbedf0e
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-10-04 12:57:55 +0000
URL:       https://git.openjdk.org/jdk/commit/2dbedf0e9326d8b3d79206787528d18e9fef25bd
;;;",,,,,,,,,,,,,,,,,,,,
Provide media support for libavcodec version 59,JDK-8294400,5084172,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,almatvee,almatvee,2022-09-26 16:13,2023-01-04 23:15,2023-10-01 09:56,2022-11-02 13:25,8,jfx20,,,,,jfx20,javafx,,0,sn_129,sn_130,ubuntu22.10,,,,,,,,,,,,,,,,,"Ubuntu 22.10 uses libavcodec59 (https://packages.ubuntu.com/kinetic/libavcodec59). We need to add support for libavcodec59.

Note: Support will be added only for libavcodec based on ffmpeg. libav does not have release for libavcodec59.",,,,,,,,,,JDK-8296261,JDK-8297498,JDK-8297434,,,,,,,,,,,,,,,,,,,,,,,JDK-8299652,JDK-8295222,JDK-8295222,JDK-8215894,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,,"0|i2yp1n:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2022-10-24 22:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/932
Date: 2022-10-25 05:07:05 +0000;;;","2022-11-02 13:25;dukebot;Changeset: ac8382bd
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-11-02 20:21:17 +0000
URL:       https://git.openjdk.org/jfx/commit/ac8382bd378c7b51ccd625af46bdf10d24176692
;;;","2022-11-22 04:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/96
Date: 2022-11-22 12:24:31 +0000;;;","2022-11-22 12:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/119
Date: 2022-11-22 20:29:10 +0000;;;",,,,,,,,,,,,,,,,,,,
Replace StringBuffer with StringBuilder within java.text,JDK-8294397,5084165,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2022-09-26 13:47,2022-12-09 19:48,2023-10-01 09:56,2022-10-05 11:43,,,,,,,20,core-libs,,0,noreg-cleanup,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,Locating instances of StringBuffer found internally and replacing with StringBuilder,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yp03:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2022-09-29 14:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10475
Date: 2022-09-28 22:54:33 +0000;;;","2022-10-05 11:43;dukebot;Changeset: 87acfee3
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-10-05 18:42:00 +0000
URL:       https://git.openjdk.org/jdk/commit/87acfee3c3e8dbc36b87e449f69fda6fca0088f6
;;;",,,,,,,,,,,,,,,,,,,,,
Missing comma after copyright year,JDK-8294379,5084141,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shurailine,shurailine,shurailine,2022-09-26 11:20,2023-04-19 06:58,2023-10-01 09:56,2022-09-26 12:28,20,,,,,,20,client-libs,,0,jdk11u-na,jdk17u-na,noreg-self,testbug,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304187,JDK-8303953,JDK-8303759,,,,,,,,,,,,,,,,JDK-8225012,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2your:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-09-26 11:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10431
Date: 2022-09-26 18:24:14 +0000;;;","2022-09-26 12:28;dukebot;Changeset: aca4276e
Author:    Alexandre Iline <shurailine@openjdk.org>
Date:      2022-09-26 19:27:46 +0000
URL:       https://git.openjdk.org/jdk/commit/aca4276e8938127e7e6a416cfbe325764b2c2e3f
;;;",,,,,,,,,,,,,,,,,,,,,
URLPermission constructor exception when using tr locale,JDK-8294378,5084140,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,rwallace,shadowbug,shadowbug,2022-09-26 11:18,2023-01-31 03:45,2023-10-01 09:56,2022-11-11 17:39,11,17,19,20,8,,20,core-libs,,0,bugdb_34338356,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"URLPermission class is having an issue , inside it's constructor we are calling .toLowerCase() API which converts the chars depending on the locale , in this case Turkish locale replaces upper case 'I' with a non-ascii lower case 'i'.
r:~$ cat URLPermissionTest.java
import java.net.*;
public class URLPermissionTest {
        public static  void main(String[] args) throws Exception {
        String title = ""https://IOU.COM"";
        URL u = new URL(title);
        URLPermission perm = new URLPermission(title);
    }
}
r:~$ java -Duser.language=tr URLPermissionTest
Exception in thread ""main"" java.lang.IllegalArgumentException: Invalid
characters in hostname
      at java.base/java.net.HostPortrange.toLowerCase(HostPortrange.java:189)
      at java.base/java.net.HostPortrange.<init>(HostPortrange.java:150)
      at
java.base/java.net.URLPermission$Authority.<init>(URLPermission.java:528)
      at java.base/java.net.URLPermission.parseURI(URLPermission.java:496)
      at java.base/java.net.URLPermission.init(URLPermission.java:205)
      at java.base/java.net.URLPermission.<init>(URLPermission.java:185)
      at java.base/java.net.URLPermission.<init>(URLPermission.java:242)
      at URLPermissionTest.main(URLPermissionTest.java:6)

This issue is reproducible on latest JDK , across all release platforms.",,,,,,,,,,JDK-8297394,JDK-8299473,JDK-8300217,JDK-8297395,JDK-8297266,,,,,,,,,,,,,,,,,,,,,,,JDK-8297383,,,,JDK-8297569,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2youj:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-11-08 01:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10903
Date: 2022-10-28 13:48:04 +0000;;;","2022-11-11 17:39;dukebot;Changeset: ff2c9876
Author:    Ryan Wallace <ryan.w.wallace@oracle.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2022-11-12 01:37:46 +0000
URL:       https://git.openjdk.org/jdk/commit/ff2c987669523613f3e5dc19493a41f849f882f6
;;;","2022-12-30 09:05;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle. Requires follow-up!
Low risk, small and obvious change.
Clean backport.
Test passes. SAP nightly testing passed.
;;;","2022-12-30 09:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1007
Date: 2022-12-30 16:59:24 +0000;;;","2023-01-12 08:53;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle. Requires follow-up!
Low risk, small and obvious change.
Clean backport.
Test passes and fails without the fix.  SAP nighlty testing passed.;;;","2023-01-12 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1650
Date: 2023-01-12 16:52:54 +0000;;;",,,,,,,,,,,,,,,,,
Prepare to stop auto-inheriting documentation for subclasses of exceptions whose documentation is inherited,JDK-8294377,5084134,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-09-26 09:48,2022-10-17 13:53,2023-10-01 09:56,2022-10-10 09:57,20,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,This is to prepare for a seamless integration of JDK-8287796.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8187386,JDK-8291803,JDK-8295154,JDK-8287796,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yot7:",9223372036854775807,b19,,,,,,,,,,,"2022-09-27 04:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10449
Date: 2022-09-27 11:43:08 +0000;;;","2022-10-10 09:57;dukebot;Changeset: eb90c4fc
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-10-10 16:54:57 +0000
URL:       https://git.openjdk.org/jdk/commit/eb90c4fc0479379c8c1452afca8f37746c762e18
;;;",,,,,,,,,,,,,,,,,,,,,
Minimize disabled warnings in java.base,JDK-8294376,5084133,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-09-26 08:30,2022-10-10 15:33,2023-10-01 09:56,2022-10-04 22:59,20,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,"After JDK-8294281, it is now possible to disable warnings for individual files instead for whole libraries. I used this opportunity to go through all disabled warnings in java.base native libraries.

Any warnings that were only triggered in a few files were removed from the library as a whole, and changed to be only disabled for those files.

Some warnings didn't trigger in any file anymore, and could just be removed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yosz:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-26 08:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10426
Date: 2022-09-26 15:31:53 +0000;;;","2022-10-04 22:59;dukebot;Changeset: 755958e5
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-05 05:56:44 +0000
URL:       https://git.openjdk.org/jdk/commit/755958e5ee40f83f3deb5c922d51e425e3bd412c
;;;",,,,,,,,,,,,,,,,,,,,,
Fix allocation bug in java_lang_Thread::async_get_stack_trace(),JDK-8294370,5084125,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pchilanomate,pchilanomate,pchilanomate,2022-09-26 07:15,2022-10-05 23:19,2023-10-01 09:56,2022-09-29 08:37,20,,,,,,20,hotspot,,0,sync,,,,,,,,,,,,,,,,,,,"The GrowableArrays created in the GetStackTraceClosure constructor to store the bci and Method* of each frame found while traversing the stack are allocated in the resource area of the thread that calls async_get_stack_trace(). But if the handshake is executed by the target and if the number of frames in the stack exceeds the initial size of the GrowableArrays then we will hit an assertion when trying to grow the size of the array. 
Example of crash when running the vmTestbase/nsk/stress/strace/ tests with a lower value of init_length or increasing DEPTH in one of those tests beyond 512:

STDOUT:
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/growableArray.cpp:69
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/scratch/pchilano/random4/open/src/hotspot/share/utilities/growableArray.cpp:69), pid=44913, tid=45008
#  fatal error: allocation bug: GrowableArray could grow within nested ResourceMark
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-2022-09-20-1654122.pchilano...)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-2022-09-20-1654122.pchilano..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xeff27a]  GrowableArrayMetadata::on_stack_alloc_check() const+0x5a
#
# Core dump will be written. Default location: /scratch/pchilano/random4/open/build/linux-x64/test-support/jtreg_test_hotspot_jtreg_vmTestbase_nsk_stress_strace_strace003_java/scratch/0/core.44913
#

The arrays should be created in the C heap instead. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yor7:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-26 08:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10424
Date: 2022-09-26 14:23:38 +0000;;;","2022-09-29 08:37;dukebot;Changeset: 5d48da45
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2022-09-29 15:35:41 +0000
URL:       https://git.openjdk.org/jdk/commit/5d48da4574f6aacb0db445dd5750566330aa383d
;;;",,,,,,,,,,,,,,,,,,,,,
Java incremental builds broken on Windows after JDK-8293116,JDK-8294368,5084123,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jvernee,erikj,erikj,2022-09-26 06:30,2022-10-10 15:34,2023-10-01 09:56,2022-10-05 03:28,20,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,,,The *.modfiles  are created with unix style paths which the javac plugin naturally can't interpret correctly on Windows. We need to figure out how to best convert them to Windows or mixed style.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293116,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,,"0|i2yoqr:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-26 06:57;jvernee;Potential fix for the unix style paths:

diff --git a/make/common/JavaCompilation.gmk b/make/common/JavaCompilation.gmk
index 880f65267ad..66c95a89d0e 100644
--- a/make/common/JavaCompilation.gmk
+++ b/make/common/JavaCompilation.gmk
@@ -467,7 +467,8 @@ define SetupJavaCompilationBody
     $$($1_MODFILELIST): $$($1_SRCS) $$($1_DEPENDS) \
         $$($1_VARDEPS_FILE) $$($1_EXTRA_DEPS) $$($1_JAVAC_SERVER_CONFIG)
                $$(eval $1_MODFILES := $$?)
-               $$(eval $$(call ListPathsSafely, $1_MODFILES, $$($1_MODFILELIST)))
+               $$(eval $1_FIXED_MODFILES := $$(call FixPath, $$($1_MODFILES)))
+               $$(eval $$(call ListPathsSafely, $1_FIXED_MODFILES, $$($1_MODFILELIST)))

     # Do the actual compilation
     $$($1_COMPILE_TARGET): $$($1_SRCS) $$($1_FILELIST) $$($1_DEPENDS) \

However, this doesn't fix the issue of changes in the source not being picked up. There seems to be more going on.;;;","2022-09-26 07:14;jvernee;The Depend plugin also does a string based comparison of the paths. The above fix outputs paths with double slashes '\\' which I think is making the comparison fail.

Switching to path-based comparison seems to fix the issue:

diff --git a/make/jdk/src/classes/build/tools/depend/Depend.java b/make/jdk/src/classes/build/tools/depend/Depend.java
index d42a7d50a64..ce58ced90f8 100644
--- a/make/jdk/src/classes/build/tools/depend/Depend.java
+++ b/make/jdk/src/classes/build/tools/depend/Depend.java
@@ -154,7 +154,9 @@ public class Depend implements Plugin {
             if (internalAPIPath == null) {
                 throw new IllegalStateException(""Expected internalAPIPath to be set using -XDinternalAPIPath=<internal-API-path>"");
             }
-            Set<String> modified = new HashSet<>(Files.readAllLines(Paths.get(modifiedInputs)));
+            Set<Path> modified = Files.readAllLines(Paths.get(modifiedInputs)).stream()
+                                                                              .map(Paths::get)
+                                                                              .collect(Collectors.toSet());
             Path internalAPIDigestFile = Paths.get(internalAPIPath);
             JavaCompiler compiler = JavaCompiler.instance(context);
             Class<?> initialFileParserIntf = Class.forName(""com.sun.tools.javac.main.JavaCompiler$InitialFileParserIntf"");
@@ -255,7 +257,7 @@ public class Depend implements Plugin {
     }

     private com.sun.tools.javac.util.List<JCCompilationUnit> doFilteredParse(
-            JavaCompiler compiler, Iterable<JavaFileObject> fileObjects, Set<String> modified,
+            JavaCompiler compiler, Iterable<JavaFileObject> fileObjects, Set<Path> modified,
             Path internalAPIDigestFile, AtomicBoolean noApiChange,
             boolean debug) {
         Map<String, String> internalAPI = new LinkedHashMap<>();
@@ -272,10 +274,11 @@ public class Depend implements Plugin {
         }
         Map<JavaFileObject, JCCompilationUnit> files2CUT = new IdentityHashMap<>();
         boolean fullRecompile = modified.stream()
+                                        .map(Path::toString)
                                         .anyMatch(f -> !StringUtils.toLowerCase(f).endsWith("".java""));
         ListBuffer<JCCompilationUnit> result = new ListBuffer<>();
         for (JavaFileObject jfo : fileObjects) {
-            if (modified.contains(jfo.getName())) {
+            if (modified.contains(Path.of(jfo.getName()))) {
                 JCCompilationUnit parsed = compiler.parse(jfo);
                 files2CUT.put(jfo, parsed);
                 String currentSignature = treeDigest(parsed);
@@ -289,7 +292,7 @@ public class Depend implements Plugin {

         if (fullRecompile) {
             for (JavaFileObject jfo : fileObjects) {
-                if (!modified.contains(jfo.getName())) {
+                if (!modified.contains(Path.of(jfo.getName()))) {
                     JCCompilationUnit parsed = files2CUT.get(jfo);
                     if (parsed == null) {
                         parsed = compiler.parse(jfo);
@@ -320,6 +323,7 @@ public class Depend implements Plugin {
                          .findAny()
                          .orElseGet(() -> ""unknown"");
             String nonJavaModifiedFiles = modified.stream()
+                                                  .map(Path::toString)
                                                   .filter(f -> !StringUtils.toLowerCase(f)
                                                                            .endsWith("".java""))
                                                   .collect(Collectors.joining("", ""));
@@ -879,13 +883,13 @@ public class Depend implements Plugin {
     private class FilteredInitialFileParser implements InvocationHandler {

         private final JavaCompiler compiler;
-        private final Set<String> modified;
+        private final Set<Path> modified;
         private final Path internalAPIDigestFile;
         private final AtomicBoolean noApiChange;
         private final boolean debug;

         public FilteredInitialFileParser(JavaCompiler compiler,
-                                         Set<String> modified,
+                                         Set<Path> modified,
                                          Path internalAPIDigestFile,
                                          AtomicBoolean noApiChange,
                                          boolean debug) {;;;","2022-09-26 07:25;jvernee;The fixpath fix I posted above actually doesn't work in all cases, since the argument list can be too long:

    make[3]: execvp: /usr/bin/bash: Argument list too long;;;","2022-09-26 09:32;erikj;Yes, the FixPath call isn't handling long paths, that's what ListPathsSafely is all about, but at least it's a start. What I think we need is to make fixpath.sh able to translate files, or accept input from a file.;;;","2022-10-04 10:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10560
Date: 2022-10-04 16:19:24 +0000;;;","2022-10-05 03:28;dukebot;Changeset: 8ebebbce
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2022-10-05 10:26:53 +0000
URL:       https://git.openjdk.org/jdk/commit/8ebebbce32c7021cc0983dece4bb2644c79e64aa
;;;",,,,,,,,,,,,,,,,,
LoopOverOfAddress.java benchmark fails to compile,JDK-8294365,5084119,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-09-26 05:05,2022-09-26 06:07,2023-10-01 09:56,2022-09-26 06:07,,,,,,,,core-libs,,0,,,,,,,,,,,,,,,,,,,,"LoopOverOfAddress.java benchmark fails to compile

warning: [lossy-conversions] implicit cast from long to int in compound assignment is possibly lossy
      res += MemorySegment.ofAddress(i % 100).address();",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293367,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yopv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-09-26 05:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/736
Date: 2022-09-26 12:08:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
IGV: scheduled graphs contain duplicated elements,JDK-8294356,5084106,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2022-09-26 02:19,2022-10-17 13:54,2023-10-01 09:56,2022-10-11 00:16,20,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,"Ideal graphs dumped after GCM contain duplicated nodes and edges. This leads to duplication in edge tooltips (sea of nodes views, see sea.png) and node input lists (control-flow graph view, see cfg.png), and adds unnecessary overhead to the graph files.

To reproduce the issue:

1. Run IGV
2. Run $ java -Xbatch -XX:PrintIdealGraphLevel=1
3. Open any 'Final Code' graph
4. Look at edge tooltips in the sea of nodes view or node input lists in the control-flow graph view.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-7024475,,,,,,,,,,,,"2022-09-26 02:18;rcastanedalo;cfg.png;https://bugs.openjdk.org/secure/attachment/100859/cfg.png","2022-09-26 02:17;rcastanedalo;sea.png;https://bugs.openjdk.org/secure/attachment/100860/sea.png",,,,,,,,,,,,,,,,,,,,,,"0|i2yomz:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-26 03:58;rcastanedalo;The bug was introduced by JDK-7024475 but has only become visible now with the recent additions of edge tooltips (JDK-8265433) and a control-flow view (JDK-8282547).;;;","2022-09-26 05:00;chagedorn;ILW = Duplicated edges in tooltips, only in sea of nodes view, no workaround = LLH = P5;;;","2022-09-26 07:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10423
Date: 2022-09-26 13:55:56 +0000;;;","2022-10-11 00:16;dukebot;Changeset: 97f1321c
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-10-11 07:13:00 +0000
URL:       https://git.openjdk.org/jdk/commit/97f1321cb455b536f1e4e056dec693c24f39d641
;;;",,,,,,,,,,,,,,,,,,,
Insufficient build rules for tzdb.dat,JDK-8294317,5084063,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2022-09-23 14:53,2022-10-03 12:31,2023-10-01 09:56,2022-09-27 09:04,,,,,,,20,infrastructure,,0,noreg-build,,,,,,,,,,,,,,,,,,,"The dependency in the current makefile for `tzdb.dat` (`GendataTZDB.gmk`) only accounts for time zone data files, not for other files that are needed to build the file, such as `VERSION`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yodf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-23 15:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10415
Date: 2022-09-23 22:10:03 +0000;;;","2022-09-27 09:04;dukebot;Changeset: 71511283
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-09-27 16:01:47 +0000
URL:       https://git.openjdk.org/jdk/commit/71511283ce02f52aba855a84cc67ba579ab8b586
;;;",,,,,,,,,,,,,,,,,,,,,
SA core file support is broken on macosx-x64 starting with macOS 12.x,JDK-8294316,5084062,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,never,cjplummer,cjplummer,2022-09-23 14:16,2023-07-12 13:35,2023-10-01 09:56,2023-06-27 12:59,20,,,,,,22,hotspot,,0,problemlist,,,,,,,,,,,,,,,,,,,"It appears that SA no longer works with core files on macosx-x64, I believe starting with macOS 12.x.  macosx-aarch64 seems to be fine, as are earlier versions of macosx-x64. The failure that happens with all the SA core file tests in test/hotspot/jtreg/serviceability/sa is:

ERROR: failed to workaround classshareing
Unable to open core file

I added some debugging code to SA's init_classsharing_workaround(), and it indicated that the cause was related to the fetching of the value of SharedArchivePath from the core file. This is suppose to point to a cstring containing the classes.jsa path, but instead seemed to contain garbage. I modified hotspot to print out  &SharedArchivePath, SharedArchivePath, and the cstring it points to:

log_info(cds)(""Got default archive path: %p %p %s"", &SharedArchivePath, SharedArchivePath, SharedArchivePath);

When SA fails to open the core file, I see:

[0.003s][info][cds] Got default archive path: 0x10faccb30 0x6000008b8010 /System/Volumes/Data/mesos/work_dir/jib-master/install/2022-09-22-2232312.chris.plummer.jdk/macosx-x64-debug.jdk/jdk-20/fastdebug/lib/server/classes.jsa

This all looks fine. However, SA looks up the ""SharedArchivePath"" symbol to get its address, so in turn it can get its value, which then points to the classes.jsa path. So I also modified SA to print out this info:

      printf(""sharedArchivePathAddrAddr(%p)\n"", (void*)sharedArchivePathAddrAddr);
      printf(""sharedArchivePathAddr        (%p)\n"", (void*)sharedArchivePathAddr);

In the passing test cases it would match up with the CDS log output above. When it fails you get something different:

Opening core file, please wait...
hsdb>
sharedArchivePathAddrAddr(0x10f881b30)
sharedArchivePathAddr        (0x7364616572687420)

sharedArchivePathAddrAddr should match the hotspot &SharedArchivePath output, but it doesn't. SA is doing a symbol table lookup to get this value, so there appears to be a bug in SA's mach-o symbol table handling code.

This problem has gone unnoticed because we have problem listed all core file testing on macoxx-x64 for probably a year now due to occasional issues with timeouts (slow core dumps). This issue seems to only be happening on 12.3.1, 12.4 and 12.5.1 host, and happens every time on these hosts, so likely the issue was introduced with  macOS 12.

I'm not seeing this on macos-aarch64, although on occasion I was seeing the same ""ERROR: failed to workaround classshareing"" failure message. However, I believe it was for a different reason. From what I could tell with some debugging I did with lldb, it looked like the memory where SharedArchivePath pointed to was not in the core file. However, for some reason I can't reproduce this anymore. It could be related to JDK-8293563, which is caused by the java heap not being in the core file. Possibly sometimes other areas of memory are also missing.

Note if you try using -Xshare:off, you still see this same issue with SharedArchivePath, even though SA should not need to access it. This is because SA first accesses UseSharedSpaces to see if it is 0 or 1. It should be 0, but due to the same issue we see with SharedArchivePath (symbol lookup not working properly), UseSharedSpaces could contain anything, and usually it is not 0. To work around this I forced SA to just quickly exit init_classsharing_workaround() no matter what UseSharedSpaces is set to. This caused SA to instead fail at a later point during intialization when trying to lookup some hotspot types. It does so through vmstructs, which SA accesses via other global symbols that it appears SA is not looking up properly. So it appears that in general SA's symbol table lookups are broken with core files on 12.x, and it is not just just some global symbosl.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293068,,,,JDK-8294411,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,,"0|i2yod7:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-09-27 10:21;mwthomps;ILW=MLH=P4;;;","2023-06-20 11:02;never;I believe I have a fix for this.  I was investigating a mac core and needed working SA support.  The problem seems to be that the core file contains a randomly sized section just before the actual mapping for the beginning of the core file.  The otool -l output looks like this:
Load command 82
      cmd LC_SEGMENT_64
  cmdsize 72
  segname 
   vmaddr 0x00000001076ea000
   vmsize 0x0000000000008000
  fileoff 5267456
 filesize 0
  maxprot 0x00000007
 initprot 0x00000001
   nsects 0
    flags 0x0
Load command 83
      cmd LC_SEGMENT_64
  cmdsize 72
  segname 
   vmaddr 0x00000001082e3000
   vmsize 0x0000000000b84000
  fileoff 5267456
 filesize 12075008
  maxprot 0x00000007
 initprot 0x00000005
   nsects 0
    flags 0x0

The fix seems to be to ignore load commands with filesize == 0 when looking for the library mappings so that you select the real mapping.

diff --git a/src/jdk.hotspot.agent/macosx/native/libsaproc/ps_core.c b/src/jdk.hotspot.agent/macosx/native/libsaproc/ps_core.c
index 721eb625797..508df64696e 100644
--- a/src/jdk.hotspot.agent/macosx/native/libsaproc/ps_core.c
+++ b/src/jdk.hotspot.agent/macosx/native/libsaproc/ps_core.c
@@ -297,13 +297,17 @@ static bool read_core_segments(struct ps_prochandle* ph) {
         print_debug(""failed to read LC_SEGMENT_64 i = %d!\n"", i);
         goto err;
       }
-      if (add_map_info(ph, fd, segcmd.fileoff, segcmd.vmaddr, segcmd.vmsize, segcmd.flags) == NULL) {
-        print_debug(""Failed to add map_info at i = %d\n"", i);
-        goto err;
+      // The base of the library is offset by a random amount which ends up as a load command with a
+      // filesize of 0.  This must be ignored otherwise the base address of the library is wrong.
+      if (segcmd.filesize != 0) {
+        if (add_map_info(ph, fd, segcmd.fileoff, segcmd.vmaddr, segcmd.vmsize, segcmd.flags) == NULL) {
+          print_debug(""Failed to add map_info at i = %d\n"", i);
+          goto err;
+        }
+        print_debug(""LC_SEGMENT_64 added: nsects=%d fileoff=0x%llx vmaddr=0x%llx vmsize=0x%llx filesize=0x%llx %s\n"",
+                    segcmd.nsects, segcmd.fileoff, segcmd.vmaddr, segcmd.vmsize,
+                    segcmd.filesize, &segcmd.segname[0]);
       }
-      print_debug(""LC_SEGMENT_64 added: nsects=%d fileoff=0x%llx vmaddr=0x%llx vmsize=0x%llx filesize=0x%llx %s\n"",
-                  segcmd.nsects, segcmd.fileoff, segcmd.vmaddr, segcmd.vmsize,
-                  segcmd.filesize, &segcmd.segname[0]);
     } else if (lcmd.cmd == LC_THREAD || lcmd.cmd == LC_UNIXTHREAD) {
       typedef struct thread_fc {
         uint32_t  flavor;

With this fix I was able to successfully open core files.  Looking at the live process with vmmap shows the library mapping with the extra offset but doesn't seem to show any mapping related to the filesize == 0 part.;;;","2023-06-20 11:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14569
Date: 2023-06-20 18:05:09 +0000;;;","2023-06-27 12:59;dukebot;Changeset: 269852b9
Author:    Tom Rodriguez <never@openjdk.org>
Date:      2023-06-27 19:57:06 +0000
URL:       https://git.openjdk.org/jdk/commit/269852b90634aa43d4d719c93563608e42792fc6
;;;",,,,,,,,,,,,,,,,,,,
Minimize disabled warnings in hotspot,JDK-8294314,5084059,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-09-23 13:11,2022-10-19 23:18,2023-10-01 09:56,2022-10-17 02:32,20,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,"After JDK-8294281, it is now possible to disable warnings for individual files instead for whole libraries. I used this opportunity to go through all disabled warnings in hotspot. 

Any warnings that were only triggered in a few files were removed from hotspot as a whole, and changed to be only disabled for those files.

Some warnings didn't trigger in any file anymore, and could just be removed.

Overall, this reduced the number of disabled warnings by roughly half for gcc, clang and visual studio. The remaining warnings are sorted in ""frequency"", that is, the first listed warnings are triggered in the most number of files, while the last in the fewest number of files. So if anyone were to try to address the remaining warnings, it would make sense to chop of this list from the back.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,JDK-8294438,JDK-8294467,JDK-8294594,JDK-8294591,JDK-8294468,JDK-8295435,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yocj:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-23 13:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10414
Date: 2022-09-23 20:22:37 +0000;;;","2022-10-17 02:32;dukebot;Changeset: 7743345f
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-17 09:29:50 +0000
URL:       https://git.openjdk.org/jdk/commit/7743345f6f73398f280fd18364b4cea10a6b0f2f
;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] Add java.util.Objects.isIdentityObject,JDK-8294312,5084057,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rriggs,rriggs,rriggs,2022-09-23 12:39,2022-09-30 11:16,2023-10-01 09:56,2022-09-30 11:16,,,,,,,repo-valhalla,core-libs,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"A method is needed to identity identity object instances.
Using `o.getClass().isIdentity` is insufficient in the case of java.lang.Object.
Object.class is a special case that is neither a identity class or a value class.
But an instance of java.lang.Object is an identity object.

Adding a final instance method to Object is convenient but pollutes the method name space of all classes and may be a compatibility issue for some class somewhere.

A static `Object.isIdentityObject(o)` method would not raise compatibility issues but is not the most natural to supply the result.

`java.lang.System.isIdentityObject(o)` was also suggested. System.identityHashCode is there too.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yoc3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-09-23 12:57;forax;A static Object.isIdentityObject(o) will raise issues because it's no usual to see reflection codes filtering out final methods of java.lang.Object but not filtering static methods.
;;;","2022-09-28 09:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/770
Date: 2022-09-28 15:49:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,
compare.sh fails on macos after JDK-8293550,JDK-8294310,5084055,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,erikj,erikj,erikj,2022-09-23 12:27,2022-12-08 07:48,2023-10-01 09:56,2022-10-05 05:44,20,,,,,,20,infrastructure,,0,jdk17u-critical-request,jdk17u-critical-yes,,,,,,,,,,,,,,,,,,"Since JDK-8293550 we are adding adhoc signatures to all binaries on macos, the compare script is no longer running cleanly. I don't think we can ever expect signatures to be binary equal between builds, so we will likely have to always strip before comparing them on mac from now on.",,,,,,,,,,JDK-8298396,JDK-8298394,JDK-8294995,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293550,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,,"0|i2yobn:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-26 15:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10435
Date: 2022-09-26 22:51:22 +0000;;;","2022-10-05 05:44;dukebot;Changeset: b9eeec2b
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-10-05 12:42:05 +0000
URL:       https://git.openjdk.org/jdk/commit/b9eeec2b6b8f97d2ba33462b27d091f918067f78
;;;","2022-12-02 08:28;phh;Fix Request (17u)

Clean Oracle parity backport. Required after 17u JDK-8293550 backport.
;;;","2022-12-02 08:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/944
Date: 2022-12-02 16:22:48 +0000;;;","2022-12-07 02:27;clanger;This needs to be moved to jdk17u and to be a jdk17u-critical-request now. Sorry for not handling earlier.;;;","2022-12-07 08:20;phh;Moved to jdk17u https://github.com/openjdk/jdk17u/pull/359 and issue tagged.;;;","2022-12-07 08:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/359
Date: 2022-12-07 16:13:44 +0000;;;",,,,,,,,,,,,,,,,
Downcall and Upcall unboxing code should reject heap segments,JDK-8294309,5084054,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2022-09-23 12:16,2022-10-04 06:37,2023-10-01 09:56,2022-10-04 06:37,repo-panama,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,"Heap segments can not be passed to native code, but the current code generated for address unboxing doesn't check for heap segments. Passing a heap segment to native code will not be caught, and as a result a malformed pointer (derived from the heap segment's offset + array base) is passed to native code instead.

(similar rules should apply to MemorySegments returned from upcalls)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yobf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-10-04 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/737
Date: 2022-10-03 21:16:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
ISO 4217 Amendment 173 Update,JDK-8294307,5084052,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jlu,naoto,naoto,2022-09-23 09:58,2023-02-15 00:50,2023-10-01 09:56,2022-09-30 10:12,,,,,,,20,core-libs,,0,8bpr-critical-approved,iso4217,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,"---
23 September 2022
ISO 4217 AMENDMENT NUMBER 173
Please find the following PUBLIC NOTICE from the Bank of Sierra Leone in regards the redenomination
of the Sierra Leonean LEONE (SLE/925).
Double click on the picture to open the PDF
Change of country name
With immediate effect, the following minor correction is made to “Table A.1 – Currency and funds code
list” (as advised by the ISO 3166 Maintenance Agency):
TURKEY to
TÜRKİYE
---

The amendment number needs to be updated in CurrencyData.properties and the related test case.",,,,,,,,,,JDK-8297050,JDK-8294764,JDK-8298714,JDK-8296993,JDK-8294719,JDK-8298623,JDK-8296853,JDK-8300351,JDK-8294720,JDK-8294721,JDK-8296851,JDK-8299878,,,,,,,,,,,,,,,,JDK-8296239,,,,JDK-8289549,,,,,,,,"2022-09-23 10:04;naoto;AMENDMENT NUMBER 173.pdf;https://bugs.openjdk.org/secure/attachment/100852/AMENDMENT+NUMBER+173.pdf",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yoaz:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Not verified,,"2022-09-29 17:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10499
Date: 2022-09-29 23:19:16 +0000;;;","2022-09-30 10:12;dukebot;Changeset: 3b1bc217
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-09-30 17:10:49 +0000
URL:       https://git.openjdk.org/jdk/commit/3b1bc21727636cb50cd04d958031832f48fe17e3
;;;","2022-10-24 06:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/46
Date: 2022-10-05 19:36:39 +0000;;;","2022-11-10 22:59;yan;Fix request (13u, 15u)
this is a regular update I need to backport. Everything is clean and tests pass but src/java.base/share/data/currency/ is make/data/currency/ in older releases.;;;","2022-11-10 23:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/428
Date: 2022-11-11 06:59:52 +0000;;;","2022-11-10 23:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/302
Date: 2022-11-11 07:05:51 +0000;;;","2022-11-11 04:44;goetz;Fix request [11u,17u]

I backport this for parity with 13, 14 and 19u.
No risk, only a version/comment change.
Clean backport from 15.
SAP nightly testing passed.;;;","2022-11-11 04:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/879
Date: 2022-11-11 12:47:21 +0000;;;","2022-11-11 05:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1514
Date: 2022-11-11 12:56:34 +0000;;;","2023-01-06 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/225
Date: 2023-01-06 12:27:34 +0000;;;","2023-01-06 09:19;andrew;Fix Request [8u]

Regular currency data update, in this case only a fileversion bump. Patch has been reviewed and Currency tests pass.;;;",,,,,,,,,,,,
ForkJoinPool.getAndAddPoolIds should use Unsafe.staticFieldBase,JDK-8294278,5084019,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,phofer,phofer,2022-09-23 04:55,2022-12-08 15:28,2023-10-01 09:56,2022-12-01 02:42,,,,,,,20,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,"ForkJoinPool.getAndAddPoolIds passes ForkJoinPool.class to Unsafe.getAndAddInt to write a static field of ForkJoinPool. This assumes that static fields are stored in Class objects, which is the case on HotSpot, but according to the documentation on Unsafe.getAndAddInt, the object returned by Unsafe.staticFieldBase should be called.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297757,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,,"0|i2yo3n:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2022-09-27 08:23;alanb;I think the context here is GraalVM and native-image. It may be an issue in other areas of JDK too, e.g. ThreadNumbering.;;;","2022-09-27 08:37;phofer;True, context is GraalVM Native Image where static fields are not stored in class objects. ThreadNumbering should also use staticFieldOffset rather than objectFieldOffset.;;;","2022-10-10 09:55;mchung;In the HotSpot VM implementation, Unsafe::staticFieldBase returns the declaring class of that given field.   i.e.  calling staticFieldBase on the ForkJoinPool::poolIds field returns ForkJoinPool.class.    So passing ForkJoinPool.class to Unsafe::getAndAddInt works.;;;","2022-10-24 03:14;phofer;Yes, it *works* on HotSpot, but it doesn't follow the rules that Unsafe lays down, so shouldn't this be considered an issue still?;;;","2022-10-25 08:28;cwimmer;Sorry, how can you just close an issue like this as ""Not an Issue""? It 1) clearly is a wrong use of Unsafe, and 2) it has a pretty easy fix.;;;","2022-10-26 09:14;martin;I agree with Peter and Christian that the Unsafe spec should be followed.  

My only doubts about that are due to the long term efforts to make Unsafe go away entirely from ""user"" code, and to eventually allow implementations without fixed offsets.  Perhaps the owner of Unsafe should make a ruling here?  That used to be John Rose IIRC.;;;","2022-10-26 11:13;alanb;We can change both cases to use staticFieldBase/staticFieldOffset. Both cases are relatively new usages which may be why native image is only running into now.

In passing, I should mention that ideally this, and several other classes in java.base, should be using VarHandles. It was attempted for ForkJoinPool in JDK 19 but had to be reverted back to Unsafe due to bootstrapping and initialization issues, and more specifically interaction between reference processing and the MethodType cache. It may be something to look at again in the future.;;;","2022-11-23 01:05;burban;With Espresso (Java on Truffle) we are running into the same issue as it doesn't store static fields into the Class object either, but in a separate storage object.

Other offenders we have stumbled over:
- Thread$ThreadNumbering, same assumption violated: https://github.com/openjdk/jdk19u/blob/045c1f64897dbd8c12795ba84396ef12598f70a0/src/java.base/share/classes/java/lang/Thread.java#L1106-L1117
- In j.linvoke.VarHandles#getStaticFieldFromBaseAndOffset it's assumed that staticFieldBase returns a Class object and therefore can cast it as such: https://github.com/openjdk/jdk17u/blob/20f3576cd1bbe516360b0d9f7deaacdad94df4d7/src/java.base/share/classes/java/lang/invoke/VarHandles.java#L194-L195

It would be great if those usages could be fixed.;;;","2022-11-26 00:50;alanb;The VarHandle::describeConstable implementation for static fields is a bit hacky and should re-examined. I think we'll separate out to a separate issue. ;;;","2022-11-26 04:36;dl;looks OK. The initial implementation was the only one that worked on hotspot at the time (but was years ago and should have been updated).;;;","2022-11-29 08:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11369
Date: 2022-11-25 14:53:57 +0000;;;","2022-12-01 02:42;dukebot;Changeset: cd776093
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-12-01 10:40:36 +0000
URL:       https://git.openjdk.org/jdk/commit/cd776093c79e9a1a4c40c0adfdbfeedf293d99c7
;;;",,,,,,,,,,,
improve error messages issued by javac if primitive classes are not supported,JDK-8294272,5084013,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-09-23 04:11,2022-09-23 11:54,2023-10-01 09:56,2022-09-23 11:54,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,,,,,,,,,,,,,,,,,,primitive classes won't be available by default. They are hidden behind the -XDenablePrimitiveClasses option. The error messages issued by javac is they are not supported could be improved,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yo2b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-09-23 11:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/768
Date: 2022-09-23 18:37:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
"make test passes awkward -status:-status:error,fail to jtreg",JDK-8294270,5084011,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-09-23 03:39,2022-09-28 23:20,2023-10-01 09:56,2022-09-23 09:30,11,17,18,19,20,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"JDK-8230067 added jtreg retries, but it does so awkwardly: it sets `export JTREG_STATUS=""-status:error,fail"";` on retry, and then uses it as `-status:$$$${JTREG_STATUS}`.

Which means we end up passing either: `-status:` or `-status:-status:error,fail` to jtreg. I confirmed this by also instrumenting the local jtreg build.

Now, it is not a problem for current jtreg, because it checks the status codes awkwardly with `String.contains`:
https://github.com/openjdk/jtreg/blob/aeb552e6df73e039e20de59b3ec847f36ab6e202/src/share/classes/com/sun/javatest/regtest/tool/Tool.java#L1635-L1640

But it will be a problem if jtreg ever starts to validate the arguments properly. I propose we fix this in current build system.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8230067,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yo1v:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-23 03:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10404
Date: 2022-09-23 10:44:40 +0000;;;","2022-09-23 09:30;dukebot;Changeset: 6ecd0817
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-09-23 16:27:07 +0000
URL:       https://git.openjdk.org/jdk/commit/6ecd08172b6f0db62af5c0955ddb175a29386faf
;;;",,,,,,,,,,,,,,,,,,,,,
AArch64: compiler/vectorapi/TestReverseByteTransforms.java test failed on SVE machine,JDK-8294262,5083994,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,eliu,eliu,eliu,2022-09-22 20:54,2022-10-17 13:53,2023-10-01 09:56,2022-10-10 18:39,20,,,,,,20,hotspot,,0,noreg-self,oracle-triage-20,sve,vectorapi,,,,,,,,,,,,,,,,"Failed IR Rules (3) of Methods (3)
----------------------------------
1) Method ""public void compiler.vectorapi.TestReverseByteTransforms.test_reversebytes_int_transform2(int[],int[])"" - [Failed IR rules: 1]:

@IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr= {""asimd"", ""true"", ""avx2"", ""true""}, applyIf={}, applyIfCPUFeature={}, counts={""(\\d+(
s){2}(ReverseBytesV.*)+(
s){2}===.*)"", "" > 0 ""
}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
- counts: Graph contains wrong number of nodes:
* Regex 1: (\d+(\s){2}(ReverseBytesV.*)+(\s){2}===.*)
- Failed comparison: [found] 0 > 0 [given]
- No nodes matched!

2) Method ""public void compiler.vectorapi.TestReverseByteTransforms.test_reversebytes_long_transform2(long[],long[])"" - [Failed IR rules: 1]:
* @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={""asimd"", ""true"", ""avx2"", ""true""}
, applyIf={}, applyIfCPUFeature={}, counts={""(\\d+(
s)

{2}(ReverseBytesV.*)+(
s){2}
===.*)"", "" > 0 ""
}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""

counts: Graph contains wrong number of nodes:
Regex 1: (\d+(\s) {2}(ReverseBytesV.*)+(\s){2}
===.*)

Failed comparison: [found] 0 > 0 [given]
No nodes matched!
3) Method ""public void compiler.vectorapi.TestReverseByteTransforms.test_reversebytes_short_transform2(short[],short[])"" - [Failed IR rules: 1]:

@IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr= {""asimd"", ""true"", ""avx2"", ""true""}
, applyIf={}, applyIfCPUFeature={}, counts=

Unknown macro: {""(\d+(\s){2}(ReverseBytesV.*)+(
s){2}===.*)"", "" > 0 ""}
, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""

counts: Graph contains wrong number of nodes:
Regex 1: (\d+(\s) {2}(ReverseBytesV.*)+(\s){2}
===.*)

Failed comparison: [found] 0 > 0 [given]
No nodes matched!
>>> Check stdout for compilation output of the failed methods",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,,"0|i2yny3:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-23 01:58;rcastanedalo;It seems that TestReverseByteTransforms.java should be simply disabled for Aarch64 SVE machines (there is a specific TestReverseByteTransformsSVE.java version for those). This could be done e.g. by adding the following annotation to TestReverseByteTransforms.java:

@requires !(vm.cpu.features ~= "".*sve.*"")

Alternatively, an applyIf = {""UseSVE"", ""= 0""} or similar precondition could be added to each failing test in TestReverseByteTransforms.java, but this would require addressing JDK-8294236 first (work in progress).;;;","2022-09-23 02:00;rcastanedalo;ILW = test bug; only on Aarch64 SVE platforms; disregard test failures or disable affected tests = MLM = P4;;;","2022-09-27 02:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10442
Date: 2022-09-27 09:31:43 +0000;;;","2022-10-10 18:39;dukebot;Changeset: 9d116ec1
Author:    Eric Liu <eliu@openjdk.org>
Date:      2022-10-11 01:37:20 +0000
URL:       https://git.openjdk.org/jdk/commit/9d116ec147a3182a9c831ffdce02c98da8c5031d
;;;",,,,,,,,,,,,,,,,,,,
Add link to DEFAULT_WAIT_TIME in javadoc for SunToolKit.realsSync,JDK-8294255,5083982,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-09-22 13:09,2022-11-07 10:40,2023-10-01 09:56,2022-10-04 12:19,20,,,,,,20,client-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"Suggestion to modify the javadoc for SunToolKit.realsSync:

-     * Parameterless version of realsync which uses default timeout (see DEFAULT_WAIT_TIME).
+     * Parameterless version of realsync which uses the {@link #DEFAULT_WAIT_TIME default timeout}.

Or alternatively to

Parameterless version of {@code realsSync} which uses the default timeout of {@link #DEFAULT_WAIT_TIME}.

https://github.com/openjdk/jdk/pull/8328#discussion_r977107022",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ynvf:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-09-23 01:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10399
Date: 2022-09-23 01:11:14 +0000;;;","2022-10-04 12:19;dukebot;Changeset: b2e86a62
Author:    SWinxy <swinxythecat@gmail.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-10-04 19:16:14 +0000
URL:       https://git.openjdk.org/jdk/commit/b2e86a620936cc0d65ca884ff2b6644998530354
;;;",,,,,,,,,,,,,,,,,,,,,
[macOS] javax/swing/plaf/aqua/CustomComboBoxFocusTest.java failure,JDK-8294254,5083979,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnguyen,azvegint,azvegint,2022-09-22 12:04,2022-11-09 21:40,2023-10-01 09:56,2022-10-17 20:57,20,,,,,,20,client-libs,,0,mach5-found,macos,sn_128,sn_129,,,,,,,,,,,,,,,,"Compare screenshots...
x 60 y 1 refRGB java.awt.Color[r=143,g=190,b=239] customRGB java.awt.Color[r=98,g=168,b=240]
----------System.err:(11/612)----------
java.lang.RuntimeException: Test failed.
	at CustomComboBoxFocusTest.main(CustomComboBoxFocusTest.java:85)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test failed.


Might be related to JDK-8054572

cb_diff.png cb_ref.png and their diff(compare -compose src cb_* diff.png) attached",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8054572,,,,,,,,"2022-09-22 12:03;azvegint;cb_custom.png;https://bugs.openjdk.org/secure/attachment/100845/cb_custom.png","2022-09-22 12:03;azvegint;cb_ref.png;https://bugs.openjdk.org/secure/attachment/100844/cb_ref.png","2022-09-22 12:03;azvegint;diff.png;https://bugs.openjdk.org/secure/attachment/100843/diff.png",,,,,,,,,,,,,,,,,,,,,"0|i2ynur:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-09-28 13:59;dholmes;The frequency of this failure is increasing - I have linked 8 cases in the past 24 hours alone! Can the test be ProbemListed please if there is no immediate solution. Thanks.;;;","2022-09-29 09:23;azvegint;Problem listing PR: https://github.com/openjdk/jdk/pull/10495;;;","2022-10-09 22:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10626
Date: 2022-10-10 05:26:23 +0000;;;","2022-10-17 20:57;dukebot;Changeset: 358ac072
Author:    Damon Nguyen <dnguyen@openjdk.org>
Committer: Jayathirth D V <jdv@openjdk.org>
Date:      2022-10-18 03:55:23 +0000
URL:       https://git.openjdk.org/jdk/commit/358ac07255cc640cbcb9b0df5302d97891a34087
;;;",,,,,,,,,,,,,,,,,,,
JFR: jfr print doesn't handle infinite duration well,JDK-8294242,5083964,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-09-22 09:34,2022-10-10 15:33,2023-10-01 09:56,2022-10-04 04:48,17,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"Example:

jdk.ActiveRecording {
  startTime = 17:31:30.818 (2022-09-22)
  id = 1
  name = ""1""
  destination = ""/Users/erik/git/jdk20/ropa.jfr""
  maxAge = 106751991167 d 7 h
  flushInterval = 1,00 s
  maxSize = 0 bytes
  recordingStart = 17:31:30.810 (2022-09-22)
  recordingDuration = 106751991167 d 7 h
}

Would be nicer if maxAge and recordingDuration could be N/A or infinite.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294518,,,,,,,JDK-8294758,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ynrf:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-09-29 16:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10497
Date: 2022-09-29 21:00:59 +0000;;;","2022-10-04 04:48;dukebot;Changeset: 4d6668e7
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-10-04 11:45:53 +0000
URL:       https://git.openjdk.org/jdk/commit/4d6668e7ee492de828bc36afea7daa535532a2b1
;;;",,,,,,,,,,,,,,,,,,,,,
[IR Framework] CPU preconditions are overriden by regular preconditions,JDK-8294236,5083956,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2022-09-22 06:41,2022-11-02 03:30,2023-10-01 09:56,2022-10-03 00:44,20,,,,,,20,hotspot,,0,c2,ir-framework,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,"If both CPU feature preconditions and regular preconditions are specified for a test, the CPU feature preconditions are ignored and only the regular preconditions are evaluated. The expected behavior is that both sources of preconditions should be evaluated in a conjunction.

The problem can be reproduced by following these steps:
1. Download and copy the attached reproducer file to test/hotspot/jtreg/compiler/Reproducer.java.
2. Run $ make run-test TEST=""compiler/Reproducer.java""

The test ""testApplyBoth()"" should pass since the conjunction of its preconditions is false, however it fails because only the regular precondition (""applyIf"") is evaluated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287525,,,,,,,,"2022-09-22 06:41;rcastanedalo;Reproducer.java;https://bugs.openjdk.org/secure/attachment/100837/Reproducer.java",,,,,,,,,,,,,,,,,,,,,,,"0|i2ynpn:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-22 06:46;rcastanedalo;ILW = unexpected IR test framework behavior; using different precondition sources; move one of the preconditions to the entire test file = MLM = P4;;;","2022-09-23 02:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10402
Date: 2022-09-23 07:55:15 +0000;;;","2022-10-03 00:43;dukebot;Changeset: 5fe837a3
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-10-03 07:40:53 +0000
URL:       https://git.openjdk.org/jdk/commit/5fe837a35e03dc7a1a5f7fc8a2d0350573f4b81f
;;;",,,,,,,,,,,,,,,,,,,,
"[lworld] sun.jvm.hotspot.interpreter.Bytecodes refers to ""defaultvalue"" (not aconst_init)",JDK-8294229,5083948,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,dsimms,dsimms,2022-09-22 05:25,2022-09-22 06:03,2023-10-01 09:56,2022-09-22 06:03,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"Rename ""defaultvalue""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ynnv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-22 05:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/767
Date: 2022-09-22 12:38:12 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Assertion failure: parsing found no loops but there are some,JDK-8294217,5083469,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,webbuggrp,webbuggrp,2022-09-15 06:33,2023-01-04 01:44,2023-10-01 09:56,2022-11-14 07:11,11.0.16.1,17,20,,,,20,hotspot,,0,c2,dcsswa,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Arch: x86_64
OS: Ubuntu 20.04

Java: 
- openjdk version ""11.0.17-internal"" 2022-10-18
- OpenJDK Runtime Environment (fastdebug build 11.0.17-internal+0-adhoc.congli.jdk11u-dev)
- OpenJDK 64-Bit Server VM (fastdebug build 11.0.17-internal+0-adhoc.congli.jdk11u-dev, mixed mode)

Release:
```
IMPLEMENTOR=""N/A""
JAVA_VERSION=""11.0.17""
JAVA_VERSION_DATE=""2022-10-18""
LIBC=""gnu""
MODULES=""java.base java.compiler java.datatransfer java.xml java.prefs java.desktop java.instrument java.logging java.management java.security.sasl java.naming java.rmi java.management.rmi java.net.http java.scripting java.security.jgss java.transaction.xa java.sql java.sql.rowset java.xml.crypto java.se java.smartcardio jdk.accessibility jdk.internal.vm.ci jdk.management jdk.unsupported jdk.internal.vm.compiler jdk.aot jdk.internal.jvmstat jdk.attach jdk.charsets jdk.compiler jdk.crypto.ec jdk.crypto.cryptoki jdk.dynalink jdk.internal.ed jdk.editpad jdk.hotspot.agent jdk.httpserver jdk.internal.le jdk.internal.opt jdk.internal.vm.compiler.management jdk.jartool jdk.javadoc jdk.jcmd jdk.management.agent jdk.jconsole jdk.jdeps jdk.jdwp.agent jdk.jdi jdk.jfr jdk.jlink jdk.jshell jdk.jsobject jdk.jstatd jdk.localedata jdk.management.jfr jdk.naming.dns jdk.naming.ldap jdk.naming.rmi jdk.net jdk.pack jdk.rmic jdk.scripting.nashorn jdk.scripting.nashorn.shell jdk.sctp jdk.security.auth jdk.security.jgss jdk.unsupported.desktop jdk.xml.dom jdk.zipfs""
OS_ARCH=""x86_64""
OS_NAME=""Linux""
SOURCE="".:git:74daa996b521""
```

Javac: javac 11.0.17-internal


A DESCRIPTION OF THE PROBLEM :
This is a JIT compiler bug triggering an assertion failure in the C2 compiler:

#  Internal Error (/zdata/congli/hotspot-build-env/jdk11u-dev/src/hotspot/share/opto/loopnode.cpp:2925), pid=2522998, tid=2523010
#  assert(_ltree_root->_child == __null || C->has_loops() || only_has_infinite_loops() || C->has_exception_backedge()) failed: parsing found no loops but there are some

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. javac T.java
2. java -Xmx1G -XX:-BackgroundCompilation -XX:-PrintWarnings --illegal-access=deny T

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
NO crash
ACTUAL -
Crashed

---------- BEGIN SOURCE ----------
import java.net.Socket;

class T {
  long l;

  void q() {
    if (b) {
      Socket s = new Socket();
      return;
    }
    do {
      l++;
      while (l != 1) --l;
      l = 9;
    } while (l != 5);
  }

  public static void main(String[] p) {
    T t = new T();
    for (int i = 524; i < 19710; i += 1) {
      b = true;
      t.q();
      b = false;
    }
    t.q();
  }

  static Boolean b;
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8299585,JDK-8298826,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297642,,,,JDK-8253923,JDK-8257574,,,,,,,"2022-09-22 04:45;sswsharm;T.java;https://bugs.openjdk.org/secure/attachment/100832/T.java","2022-09-22 04:46;sswsharm;hs_err_pid14024.log;https://bugs.openjdk.org/secure/attachment/100833/hs_err_pid14024.log","2022-09-22 04:46;sswsharm;replay_pid14024.log;https://bugs.openjdk.org/secure/attachment/100834/replay_pid14024.log",,,,,x86_64,,,,,,,,,,,,,,,,"0|i2ykpf:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-22 04:49;sswsharm;Issue is reproduced .
Crash is observed on fastdebug build.

OS: Windows 10
JDK 11.0.16.1 fastdebug: Fail

Moving it to dev team for further analysis.

ILW = assertion failure in debug build (no failure observed in release build); reported once ; disable compilation of affected method = MLM = P4;;;","2022-09-23 02:55;rcastanedalo;The assertion is introduced in JDK 11.0.12 by a backport of JDK-8253923. JDK-8257574 (also backported into JDK 11.0.12) partially addresses the failure, but does not seem to deal with the exact case reported here. The failure cannot be reproduced in JDK 16 (where JDK-8253923 is originally fixed) or later, passing on to sustaining.;;;","2022-09-26 06:58;roland;Reproducible with current jdk with this change:
diff --git a/src/hotspot/share/opto/compile.cpp b/src/hotspot/share/opto/compile.cpp
index b3c9c9a4784..abe1b071268 100644
--- a/src/hotspot/share/opto/compile.cpp
+++ b/src/hotspot/share/opto/compile.cpp
@@ -2315,7 +2315,7 @@ void Compile::Optimize() {
     if (has_loops()) {
       // Cleanup graph (remove dead nodes).
       TracePhase tp(""idealLoop"", &timers[_t_idealLoop]);
-      PhaseIdealLoop::optimize(igvn, LoopOptsMaxUnroll);
+      PhaseIdealLoop::optimize(igvn, LoopOptsNone);
       if (major_progress()) print_method(PHASE_PHASEIDEAL_BEFORE_EA, 2);
       if (failing())  return;
     }

;;;","2022-10-28 07:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10904
Date: 2022-10-28 14:34:42 +0000;;;","2022-10-31 00:12;chagedorn;ILW = Debug assert in C2, single test case and debug VM only, no workaround = MLH = P4;;;","2022-11-14 07:11;dukebot;Changeset: 8c472e48
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-11-14 15:08:15 +0000
URL:       https://git.openjdk.org/jdk/commit/8c472e481676ed0ef475c4989477d5714880c59e
;;;","2023-01-03 05:39;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Typical C2 risk, but we should go along.  Two related issues are fixed in 16, the other
is only loosly related and will be backported, too.
Clean backport.
Test passes, but passes also without the fix. SAP nightly testing passed.;;;","2023-01-03 05:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1024
Date: 2023-01-03 13:44:06 +0000;;;",,,,,,,,,,,,,,,
Zero: JVM_handle_linux_signal should not assume deopt NOPs,JDK-8294197,5083914,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-09-22 02:39,2022-09-28 23:17,2023-10-01 09:56,2022-09-22 07:55,19,20,,,,,20,hotspot,,0,redhat-interest,,,,,,,,,,,,,,,,,,,"This is a simple regression from Loom added code. In `JVM_handle_linux_signal` there is a new block that handles deopt NOPs. Zero does not have them, and so it currently encounters `ShouldNotReachHere()` when entering the block and doing either `os::Posix::ucontext_get_pc(uc)` or `NativeDeoptInstruction::is_deopt_at(pc)`.

This block should not be entered with Zero at all.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yngb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-22 02:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10389
Date: 2022-09-22 09:45:22 +0000;;;","2022-09-22 07:55;dukebot;Changeset: f751e608
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-09-22 14:51:12 +0000
URL:       https://git.openjdk.org/jdk/commit/f751e6087d24012ecc0e6bc74d5572794a7c85d6
;;;",,,,,,,,,,,,,,,,,,,,,
Files.createDirectories throws FileAlreadyExistsException for a symbolic link whose target is an existing directory,JDK-8294193,5083910,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-09-22 01:37,2023-01-26 08:55,2023-10-01 09:56,2022-09-25 22:19,11,17,19,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,"As noted in https://bugs.openjdk.org/browse/JDK-8293792, if Files.createDirectories(...) is called with a Path which is a symbolic link to a directory then the method unexpectedly throws FileAlreadyExistsException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293792,,,,JDK-8293792,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ynff:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-09-22 01:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10383
Date: 2022-09-22 06:34:53 +0000;;;","2022-09-25 22:19;dukebot;Changeset: 169a5d48
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-09-26 05:16:31 +0000
URL:       https://git.openjdk.org/jdk/commit/169a5d48afbc6627f36a768c17c2a5e56219d9c7
;;;",,,,,,,,,,,,,,,,,,,,,
Incorrect check messages in SharedRuntime::generate_uncommon_trap_blob,JDK-8294190,5083907,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-09-22 01:10,2022-10-11 11:45,2023-10-01 09:56,2022-09-22 07:52,11,17,19,20,,,20,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,,,"The checks added by JDK-8141133 are not consistent. The blocks that verify `Deoptimization::Unpack_uncommon_trap` kind are saying ""last_Java_fp not cleared"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8141133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yner:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-22 01:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10388
Date: 2022-09-22 08:13:01 +0000;;;","2022-09-22 07:52;dukebot;Changeset: 4a6060ba
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-09-22 14:49:55 +0000
URL:       https://git.openjdk.org/jdk/commit/4a6060ba2cbdadf7784c432abe0d8dd2297e4ef2
;;;",,,,,,,,,,,,,,,,,,,,,
AArch64: VectorMaskToLong failed on SVE2 machine with -XX:UseSVE=1,JDK-8294186,5083877,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,eliu,eliu,eliu,2022-09-21 23:51,2022-11-01 05:19,2023-10-01 09:56,2022-10-17 06:33,19,20,,,,,20,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,"Bug: Specify UseSVE=1 on SVE2 machine.

A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/mnt/local/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/c2_MacroAssembler_aarch64.cpp:1046), pid=2235380, tid=2235395
#  assert(false) failed: unsupported
#
JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-git-277e7c486)
Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-git-277e7c486, mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
Problematic frame:
V  [libjvm.so+0x7daaa8]  C2_MacroAssembler::sve_vmask_tolong(Register, PRegister, BasicType, int, FloatRegister, FloatRegister)+0x398
#
No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
An error report file with more information is saved as:
/tmp/work/scratch/hs_err_pid2235380.log
#
Compiler replay data is saved as:
/tmp/work/scratch/replay_pid2235380.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282966,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,,"0|i2yn83:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-22 00:53;rcastanedalo;ILW = assertion failure in aarch64 debug build; using UseSVE=1 on a SVE2 machine; use default SVE level = MML = P4;;;","2022-09-27 02:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10443
Date: 2022-09-27 09:48:24 +0000;;;","2022-10-17 06:33;dukebot;Changeset: 0919a3a0
Author:    Eric Liu <eliu@openjdk.org>
Date:      2022-10-17 13:28:33 +0000
URL:       https://git.openjdk.org/jdk/commit/0919a3a0c198a5234b5ed9a3bb999564d2382a56
;;;",,,,,,,,,,,,,,,,,,,,
AArch64: Wrong macro check in SharedRuntime::generate_deopt_blob,JDK-8294183,5083874,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fyang,fyang,fyang,2022-09-21 22:27,2023-05-29 11:55,2023-10-01 09:56,2022-09-22 18:12,17,20,,,,,20,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"In SharedRuntime::generate_deopt_blob, there is following assertion code:

2279 #ifdef ASSERT0
2280   { Label L;
2281     __ ldr(rscratch1, Address(rthread,
2282                               JavaThread::last_Java_fp_offset()));
2283     __ cbz(rscratch1, L);
2284     __ stop(""SharedRuntime::generate_deopt_blob: last_Java_fp not cleared"");
2285     __ bind(L);
2286   }
2287 #endif // ASSERT

We check macro 'ASSERT0' at line 2279, which is wrong.
The correct macro name here should be 'ASSERT'.",,,,,,,,,,JDK-8309062,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,,,"0|i2yn7f:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-21 23:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10382
Date: 2022-09-22 06:32:57 +0000;;;","2022-09-22 18:12;dukebot;Changeset: f3ba332f
Author:    Fei Yang <fyang@openjdk.org>
Date:      2022-09-23 01:09:51 +0000
URL:       https://git.openjdk.org/jdk/commit/f3ba332fdcd19abd863804739bb34babadb3a45f
;;;","2023-05-25 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1398
Date: 2023-05-25 15:17:08 +0000;;;","2023-05-26 00:40;shade;Fix Request (17u)

Improves AArch64 testing. Applies cleanly. Tests pass.;;;",,,,,,,,,,,,,,,,,,,
automatically generated tests under test/jdk/java/lang/invoke/VarHandles/ have been modified by mistake,JDK-8294159,5083851,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-09-21 20:01,2022-09-22 13:43,2023-10-01 09:56,2022-09-22 13:43,repo-valhalla,,,,,,repo-valhalla,core-libs,,0,lw4,lworld,noreg-self,,,,,,,,,,,,,,,,,most tests under test/jdk/java/lang/invoke/VarHandles/ should be generated from a template. Several of them have been modified directly instead of modifying the template. This should be corrected,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yn2b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2022-09-21 22:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/765
Date: 2022-09-22 05:16:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
JFR: Unclear exception message when dumping stopped in memory recording,JDK-8294151,5083841,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-09-21 14:24,2022-10-10 15:34,2023-10-01 09:56,2022-10-05 04:51,11,17,19,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"try (Recording r = new Recording()) {
   r.setToDisk(false);
   r.start();
   r.stop()
   r.dump(Path.of(""recording.jfr""));;
}

results in:

Exception in thread ""main"" java.io.IOException: Unexpected error during I/O operation
	at jdk.jfr.internal.WriteableUserPath.doPrivilegedIO(WriteableUserPath.java:139)
	at jdk.jfr.internal.PlatformRecording.dumpStopped(PlatformRecording.java:714)
	at jdk.jfr.internal.PlatformRecording.dump(PlatformRecording.java:707)
	at jdk.jfr.Recording.dump(Recording.java:388)
	at Name.main(Name.java:16)

Problem is that JFR tries to make a dump file, but there are no chunks in the repository since it's an in memory recording. Documentation should make it clear under what circumstances it's possible to dump a recording. The error message should be changed so user understands why it fails.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294530,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yn03:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-09-29 13:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10488
Date: 2022-09-29 13:50:49 +0000;;;","2022-10-05 04:51;dukebot;Changeset: 13a5000d
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-10-05 11:49:53 +0000
URL:       https://git.openjdk.org/jdk/commit/13a5000d4885d4624788580f56634b93a135429b
;;;",,,,,,,,,,,,,,,,,,,,,
[11u] Revert change from JDK-8210962 in basic.m4,JDK-8294138,5083828,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,ihse,clanger,2022-09-21 10:59,2022-11-02 03:52,2023-10-01 09:56,2022-09-27 22:54,12,,,,,,11.0.18,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,"The backport of JDK-8239708 (commit: https://github.com/openjdk/jdk11u-dev/commit/75b3e45fe9d16a8e29f4fd51f93e01acc9436562) brought a change from JDK-8210962 to basic.m4.

Diff:
-      CONF_NAME=""${OPENJDK_TARGET_OS}-${OPENJDK_TARGET_CPU}-${JDK_VARIANT}-${JVM_VARIANTS_WITH_AND}-${DEBUG_LEVEL}""
+      CONF_NAME=""${OPENJDK_TARGET_OS}-${OPENJDK_TARGET_CPU}-${JVM_VARIANTS_WITH_AND}-${DEBUG_LEVEL}""

This should be reverted as JDK-8210962 changes build system behavior and is hence not a good fit for a backport.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293299,JDK-8210962,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ymx7:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-26 02:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1368
Date: 2022-09-22 10:00:42 +0000;;;","2022-09-26 02:50;clanger;Fix request (11u):
Reverts a change from JDK-8210962 that was introduced inadvertently. Tested via GHA and Aleksey Shipilev's build script.;;;","2022-09-27 22:54;dukebot;Changeset: 1215ef18
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-09-28 05:51:00 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/1215ef1893ffc51938bd02bf4437a6cd048d39b4
;;;","2022-11-02 03:52;dukebot;Changeset: 1215ef18
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-09-28 05:51:00 +0000
URL:       https://git.openjdk.org/jdk11u/commit/1215ef1893ffc51938bd02bf4437a6cd048d39b4
;;;",,,,,,,,,,,,,,,,,,,
JNI local refs exceeds capacity warning in NetworkInterface::getAll,JDK-8294115,5083799,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2022-09-21 05:46,2022-10-05 23:19,2023-10-01 09:56,2022-09-29 23:02,11,17,20,8,,,20,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,"JDK-8187450 half-fixed the issue on Windows; the warning is now absent when running with -Djava.net.preferIPv4Stack=true, but still present otherwise.

Example test output from test\jdk\java\net\NetworkInterface\Test.java:

WARNING: JNI local refs: 33, exceeds capacity: 32
	at java.net.NetworkInterface.getAll(java.base@20-internal/Native Method)
	at java.net.NetworkInterface.getNetworkInterfaces(java.base@20-internal/NetworkInterface.java:353)
	at Test.main(Test.java:42)
...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261719,JDK-8187450,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,,"0|i2ymqr:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-09-21 09:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10377
Date: 2022-09-21 15:37:24 +0000;;;","2022-09-29 23:02;dukebot;Changeset: 9dce8652
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-09-30 06:00:37 +0000
URL:       https://git.openjdk.org/jdk/commit/9dce8652f258ba88f17aa315af529c79bb8a41cf
;;;",,,,,,,,,,,,,,,,,,,,,
compiler/uncommontrap/Decompile.java fails after JDK-8293798 ,JDK-8294110,5083793,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2022-09-21 04:27,2022-09-26 09:45,2023-10-01 09:56,2022-09-21 06:13,20,,,,,,20,hotspot,,0,noreg-self,oracle-triage-20,tencent-interest,,,,,,,,,,,,,,,,,"It fails with release VMs.

STDERR:
Error: VM option 'AlwaysIncrementalInline' is develop and is available only in debug version of VM.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293798,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ympf:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-21 04:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10374
Date: 2022-09-21 11:33:59 +0000;;;","2022-09-21 06:13;dukebot;Changeset: 07afa3f4
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-09-21 13:10:10 +0000
URL:       https://git.openjdk.org/jdk/commit/07afa3f41e937019173ef31fbc1f2a5eb4b89f90
;;;","2022-09-21 16:48;dlong;ILW = same as JDK-8293798 = P3;;;",,,,,,,,,,,,,,,,,,,,
JavaDoc search should search whole index,JDK-8294109,5083792,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2022-09-21 03:41,2022-11-14 19:18,2023-10-01 09:56,2022-11-04 09:04,17,18,19,,,,20,tools,,0,javadoc-search,noreg-hard,,,,,,,,,,,,,,,,,,"JavaDoc search limits search result to a certain number per category and that number varies between the in-page popup search and the standalone search page. For the popup search the maximum number of results per category is 500 whereas for the standalone search page it is 1000. 

The problem is that the search script stops searching the index once it reaches the maximum number of results, which means that top matches further down the index may be lost in favor of lower quality matches earlier in the index. 

The proper way to do this is to always search the whole index, sort results by match quality and only then truncate the result list to the number of results to show. 

Fortunately, searching the index is a very fast operation, the slow part being rendering the results. Therefore the performance impact of always searching the whole index should be neglectable.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ymp7:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-09-28 10:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10470
Date: 2022-09-28 17:47:10 +0000;;;","2022-11-04 09:04;dukebot;Changeset: f9c7cdae
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2022-11-04 16:00:36 +0000
URL:       https://git.openjdk.org/jdk/commit/f9c7cdaed693934a366145b15dcbb2aa65a9da0a
;;;",,,,,,,,,,,,,,,,,,,,,
RISC-V: RVC: Fix a potential alignment issue and add more alignment assertions for the patchable calls/nops,JDK-8294087,5083764,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-09-20 20:44,2023-07-09 19:19,2023-10-01 09:56,2022-09-22 04:46,20,,,,,,20,hotspot,,0,oraclejdk-na,oracle-triage-20,,,,,,,,,,,,,,,,,,"With RVC turning on, we must carefully keep all runtime-patchable instructions aligned. Code is running at full speed, when patching unaligned instructions spanning cache lines, concurrency issues may occur. This patch fixes a potential alignment issue of the patchable nop after MachUEPNode, with adding some strong alignment assertions as well.",,,,,,,,,,JDK-8311722,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,19,,linux,,,,,,,"0|i2ymiz:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-20 21:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10370
Date: 2022-09-21 03:54:03 +0000;;;","2022-09-21 16:51;dlong;ILW = potential crash; never seen?; no workaround = HLH = P2;;;","2022-09-22 04:46;dukebot;Changeset: a216960d
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-09-22 11:43:47 +0000
URL:       https://git.openjdk.org/jdk/commit/a216960d71bdf111a9c232a0228cc43256a01b29
;;;","2023-01-23 05:13;enikitin;As I see no obvious way to verify this, I close it as is.;;;","2023-03-14 22:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/14
Date: 2023-03-15 04:54:10 +0000;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,
RISC-V: Minimal build failed with --disable-precompiled-headers,JDK-8294083,5083760,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fyang,fyang,fyang,2022-09-20 19:10,2023-07-09 19:18,2023-10-01 09:56,2022-09-21 06:01,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"====================================================
A new configuration has been successfully created in
/home/fyang/openjdk-jdk/build/linux-riscv64-minimal-release
using configure arguments '--with-debug-level=release --with-jvm-variants=minimal --with-zlib=system --with-boot-jdk=/home/fyang/tools/boot-jdk --with-native-debug-symbols=internal --disable-precompiled-headers --with-jtreg=/home/fyang/tools/jtreg-7+1 --with-gtest=/home/fyang/tools/googletest'.

Configuration summary:
* Name:           linux-riscv64-minimal-release
* Debug level:    release
* HS debug level: product
* JVM variants:   minimal
* JVM features:   minimal: 'compiler1 minimal opt-size serialgc'
* OpenJDK target: OS: linux, CPU architecture: riscv, address length: 64
* Version string: 20-internal-adhoc.fyang.openjdk-jdk (20-internal)
* Source date:    1663723199 (2022-09-21T01:19:59Z)

Tools summary:
* Boot JDK:       openjdk version ""20-testing"" 2023-03-21 OpenJDK Runtime Environment (build 20-testing-builds.shipilev.net-openjdk-jdk-b202-20220913) OpenJDK 64-Bit Server VM (build 20-testing-builds.shipilev.net-openjdk-jdk-b202-20220913, mixed mode) (at /home/fyang/tools/boot-jdk)
* Toolchain:      gcc (GNU Compiler Collection)
* C Compiler:     Version 11.2.0 (at /usr/bin/gcc)
* C++ Compiler:   Version 11.2.0 (at /usr/bin/g++)

Build performance summary:
* Build jobs:     4
* Memory limit:   15990 MB

Building target 'images' in configuration 'linux-riscv64-minimal-release'
Compiling 1 files for BUILD_TOOLS_HOTSPOT
Compiling 8 files for BUILD_TOOLS_LANGTOOLS
Compiling 2 files for BUILD_JVMTI_TOOLS
Generating classes for compiler.properties launcher.properties
Compiling 17 properties into resource bundles for jdk.javadoc
Compiling 15 properties into resource bundles for jdk.jdeps
Compiling 9 properties into resource bundles for jdk.jshell
Compiling 20 properties into resource bundles for jdk.compiler
Compiling 127 files for BUILD_java.compiler.interim
Compiling 408 files for BUILD_jdk.compiler.interim
Compiling 243 files for BUILD_jdk.javadoc.interim
Creating support/modules_libs/java.base/minimal/libjvm.so from 565 file(s)
Creating hotspot/variant-minimal/libjvm/libgtest/libgtest.a from 2 file(s)
Creating hotspot/variant-minimal/libjvm/gtest/libjvm.so from 146 file(s)
Creating hotspot/variant-minimal/libjvm/gtest/gtestLauncher from 1 file(s)
Compiling 31 files for BUILD_JRTFS
Creating support/modules_libs/java.base/jrt-fs.jar
Compiling 186 files for BUILD_TOOLS_JDK
Compiling 2 files for COMPILE_DEPEND
Compiling 4 properties into resource bundles for jdk.httpserver
Compiling 11 properties into resource bundles for jdk.jartool
Compiling 71 files for COMPILE_CREATE_SYMBOLS
Compiling 11 properties into resource bundles for jdk.management.agent
Compiling 4 properties into resource bundles for jdk.jdi
Compiling 9 properties into resource bundles for jdk.jlink
Compiling 4 properties into resource bundles for jdk.jlink
Compiling 1 properties into resource bundles for jdk.jlink
Compiling 224 properties into resource bundles for jdk.localedata
Compiling 11 properties into resource bundles for java.base
Compiling 6 properties into resource bundles for java.base
/home/fyang/openjdk-jdk/src/hotspot/cpu/riscv/templateInterpreterGenerator_riscv.cpp: In member function 'u_char* TemplateInterpreterGenerator::generate_Reference_get_entry()':
/home/fyang/openjdk-jdk/src/hotspot/cpu/riscv/templateInterpreterGenerator_riscv.cpp:829:31: error: 'java_lang_ref_Reference' has not been declared
  829 |   const int referent_offset = java_lang_ref_Reference::referent_offset();
      |                               ^~~~~~~~~~~~~~~~~~~~~~~
gmake[3]: *** [lib/CompileJvm.gmk:149: /home/fyang/openjdk-jdk/build/linux-riscv64-minimal-release/hotspot/variant-minimal/libjvm/objs/templateInterpreterGenerator_riscv.o] Error 1
gmake[3]: *** Waiting for unfinished jobs....
gmake[2]: *** [make/Main.gmk:252: hotspot-minimal-libs] Error 2
gmake[2]: *** Waiting for unfinished jobs....

ERROR: Build failed for target 'images' in configuration 'linux-riscv64-minimal-release' (exit code 2)

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-minimal_libjvm_objs_templateInterpreterGenerator_riscv.o:
/home/fyang/openjdk-jdk/src/hotspot/cpu/riscv/templateInterpreterGenerator_riscv.cpp: In member function 'u_char* TemplateInterpreterGenerator::generate_Reference_get_entry()':
/home/fyang/openjdk-jdk/src/hotspot/cpu/riscv/templateInterpreterGenerator_riscv.cpp:829:31: error: 'java_lang_ref_Reference' has not been declared
  829 |   const int referent_offset = java_lang_ref_Reference::referent_offset();
      |                               ^~~~~~~~~~~~~~~~~~~~~~~

* All command lines available in /home/fyang/openjdk-jdk/build/linux-riscv64-minimal-release/make-support/failure-logs.
=== End of repeated output ===

No indication of failed target found.
HELP: Try searching the build log for '] Error'.
HELP: Run 'make doctor' to diagnose build problems.

make[1]: *** [/home/fyang/openjdk-jdk/make/Init.gmk:315: main] Error 2
make: *** [/home/fyang/openjdk-jdk/make/Init.gmk:186: images] Error 2
Wed Sep 21 09:49:10 CST 2022",,,,,,,,,,JDK-8311720,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257743,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,,,"0|i2ymi3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-20 20:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10368
Date: 2022-09-21 03:01:00 +0000;;;","2022-09-21 06:01;dukebot;Changeset: 0746bcb6
Author:    Fei Yang <fyang@openjdk.org>
Date:      2022-09-21 12:57:09 +0000
URL:       https://git.openjdk.org/jdk/commit/0746bcb68fde1d59e71c573aaf448bc54a0897d3
;;;","2023-03-02 06:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/6
Date: 2023-03-02 14:40:47 +0000;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,
Improve ant detection in idea.sh,JDK-8294076,5083751,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-09-20 14:42,2022-09-26 09:45,2023-10-01 09:56,2022-09-21 01:24,20,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,The ant detection in bin/idea.sh is very rudimentary. It fails at a modern aarch64 macOS installation.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ymg3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-20 14:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10364
Date: 2022-09-20 21:45:05 +0000;;;","2022-09-21 01:24;dukebot;Changeset: 8d1dd6a6
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-09-21 08:22:47 +0000
URL:       https://git.openjdk.org/jdk/commit/8d1dd6a6cf2bc11e0cf5ac3600e78dc192a819e4
;;;",,,,,,,,,,,,,,,,,,,,,
gtest/AsyncLogGtest crashes with SEGV,JDK-8294075,5083750,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xliu,dholmes,dholmes,2022-09-20 13:43,2022-09-28 23:18,2023-10-01 09:56,2022-09-22 09:40,20,,,,,,20,hotspot,,0,tier6,,,,,,,,,,,,,,,,,,,"Test: gtest/AsyncLogGtest

[==========] Running 6 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 6 tests from AsyncLogTest
[ RUN      ] AsyncLogTest.asynclog_vm
[0.092s][warning][logging] 1Warning
[0.092s][error  ][logging] 1Error
[       OK ] AsyncLogTest.asynclog_vm (1 ms)
[ RUN      ] AsyncLogTest.logMessage_vm
[       OK ] AsyncLogTest.logMessage_vm (0 ms)
[ RUN      ] AsyncLogTest.logBuffer_vm
[       OK ] AsyncLogTest.logBuffer_vm (1 ms)
[ RUN      ] AsyncLogTest.droppingMessage_vm
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000fffc1d98f97c, pid=33194, tid=33201
#
# JRE version: OpenJDK Runtime Environment (20.0+16) (build 20-ea+16-1055)
# Java VM: OpenJDK 64-Bit Server VM (20-ea+16-1055, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xcdf97c]  AsyncLogWriter::write()+0x1ac
#
---------------  T H R E A D  ---------------

Current thread (0x0000aaacfaa24780):  AsyncLogWriter ""AsyncLog Thread"" [stack: 0x0000fffbf8190000,0x0000fffbf8390000] [id=33201]

Stack: [0x0000fffbf8190000,0x0000fffbf8390000],  sp=0x0000fffbf838e690,  free space=2041k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xcdf97c]  AsyncLogWriter::write()+0x1ac  (logAsyncWriter.cpp:149)
V  [libjvm.so+0xcdfb88]  AsyncLogWriter::run()+0x38  (logAsyncWriter.cpp:184)
V  [libjvm.so+0xf9de08]  Thread::call_run()+0xb8  (thread.cpp:224)
V  [libjvm.so+0xe25414]  thread_native_entry(Thread*)+0xe0  (os_linux.cpp:710)
C  [libpthread.so.0+0x7908]  start_thread+0x188


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0054676f4c636e79


4 crashes seen in passed few days: Linux x64 and Aarch64
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292989,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ymfv:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-20 13:47;dholmes;No obvious changes in the build that first started showing this failure. But this was shortly after integration of JDK-8292989;;;","2022-09-20 13:52;dholmes;Assigning to [~xliu] for investigation;;;","2022-09-20 16:27;xliu;I can trigger this error on Linux, release build. 
$make test TEST=""jtreg:hotspot/jtreg/gtest/AsyncLogGtest.java"" CONF=linux-x86_64-server-release

I am looking into it. ;;;","2022-09-20 19:05;xliu;Analysis:
This is a race condition in 'AsyncLogTest::test_asynclog_drop_messages'.  in order to test ""drop messages"", I replace the serving buffers with shrunk buffers. 
This is done using RAII class 'AsyncLogWriter::BufferUpdater'.  The race condition occurs when AsyncLog thread is still processing buffer_staging but it is deleted by dtor of BufferUpdater.

;;;","2022-09-20 19:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10367
Date: 2022-09-21 02:34:03 +0000;;;","2022-09-22 09:40;dukebot;Changeset: 5285035e
Author:    Xin Liu <xliu@openjdk.org>
Date:      2022-09-22 16:37:42 +0000
URL:       https://git.openjdk.org/jdk/commit/5285035ed9bb43a40108e4d046e0de317730f193
;;;",,,,,,,,,,,,,,,,,
Unconditional and eager load of nio library since JDK-8264744,JDK-8294068,5083741,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,redestad,redestad,2022-09-20 07:29,2022-09-26 09:45,2023-10-01 09:56,2022-09-21 07:53,20,,,,,,20,core-libs,,0,noreg-other,performance,startup,,,,,,,,,,,,,,,,,"We noticed a startup and footprint regression on multiple applications starting since 20-b14. Cause appears to be JDK-8264744 which adds a call to load the nio library in the LinuxFileSystem <clinit>. 

I think refactoring the LinuxFileSystem::directCopy0 method (also recently introduced with JDK-8293121?) into LinuxNativeDispatcher would resolve this startup regression",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264744,,,,,,,,,,,,,,,,,,,,,,,,,b14,20,,,,,,,,,"0|i2ymdv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-09-20 09:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10362
Date: 2022-09-20 16:47:09 +0000;;;","2022-09-21 07:53;dukebot;Changeset: e1958971
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-09-21 14:51:21 +0000
URL:       https://git.openjdk.org/jdk/commit/e1958971c95a651da9e7fca7a98828f7fd0391bb
;;;",,,,,,,,,,,,,,,,,,,,,
[macOS] javax/swing/JComboBox/6559152/bug6559152.java Cannot select an item from popup with the ENTER key.,JDK-8294067,5083740,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnguyen,azvegint,azvegint,2022-09-20 07:03,2022-09-26 09:44,2023-10-01 09:56,2022-09-20 11:17,20,,,,,,20,client-libs,,0,mach5-found,macos,sn_127,,,,,,,,,,,,,,,,,"Test started to fail after JDK-8054572

----------System.out:(1/12)----------
Test failed
----------System.err:(13/795)----------
java.lang.RuntimeException: Cannot select an item from popup with the ENTER key.
	at bug6559152.checkResult(bug6559152.java:126)
	at bug6559152.test(bug6559152.java:106)
	at bug6559152.main(bug6559152.java:59)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8054572,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ymdn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-09-20 09:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10359
Date: 2022-09-20 15:57:24 +0000;;;","2022-09-20 11:17;dukebot;Changeset: 3b438a68
Author:    Damon Nguyen <dnguyen@openjdk.org>
Committer: Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2022-09-20 18:15:13 +0000
URL:       https://git.openjdk.org/jdk/commit/3b438a68ea605959edcb836e116f29a4a55c31fa
;;;",,,,,,,,,,,,,,,,,,,,,
IGV: Graph changes when deleting a graph in the same group with smaller index,JDK-8294066,5083738,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,ksakata,tholenstein,tholenstein,2022-09-20 06:41,2023-02-06 00:32,2023-10-01 09:56,2023-01-30 01:51,20,,,,,,21,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,starter,,,,,,,,,,,,,,,"The `RangeSliderModel` in IGV selects which graph to display from the `Outline`. `RangeSliderModel` just saves the group and the index of the graph within the group. If the user deletes a graph in the same group but with a smaller index as a showing graph, `RangeSliderModel` selects the wrong graph because the index of the graph has changed. This is not expected",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297694,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ymd7:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-21 01:56;rcastanedalo;ILW = minor UI annoyance; when deleting an opened graph; re-open the desired graph = LML = P5;;;","2023-01-25 21:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12210
Date: 2023-01-26 05:47:57 +0000;;;","2023-01-30 01:51;dukebot;Changeset: 08b24ac7
Author:    Koichi Sakata <ksakata@openjdk.org>
Committer: Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-01-30 09:50:09 +0000
URL:       https://git.openjdk.org/jdk/commit/08b24ac7aacaff32577dc07e77ed0961dd804904
;;;",,,,,,,,,,,,,,,,,,,,
Early use of lambda introduced in JDK-8285263 cause startup regressions in 20-b02,JDK-8294058,5083727,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,redestad,redestad,redestad,2022-09-20 03:41,2022-09-26 09:40,2023-10-01 09:56,2022-09-20 07:52,20,,,,,,20,security-libs,,0,performance,startup,,,,,,,,,,,,,,,,,,"SecureClassLoader.getProtectionDomain is invoked by the launcher when loading the main class, so is part of the bootstrap path on most applications. Switching from using an anonymous class to a (capturing) lambda means we are loading a variety of classes and taking a small hit to startup and footprint on all measured startup tests. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285263,,,,,,,,,,,,,,,,,,,,,,,,,b02,20,,,,,,,,,"0|i2ymar:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-09-20 04:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10357
Date: 2022-09-20 11:19:07 +0000;;;","2022-09-20 07:52;dukebot;Changeset: 584de68d
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2022-09-20 14:50:33 +0000
URL:       https://git.openjdk.org/jdk/commit/584de68d7888b709b2eaa251541cd9fdcef3b244
;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] asPrimaryType/asValueType intrinsics broken after JDK-8287692,JDK-8294054,5083720,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2022-09-20 01:37,2022-09-20 02:34,2023-10-01 09:56,2022-09-20 02:34,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,c2,,,,,,,,,,,,,,,,,,,"1) Method ""public boolean compiler.valhalla.inlinetypes.TestIntrinsics.test2()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={}, applyIfAnd={}, failOn={""(\\\\d+ (.*LoadK.*)+ ===.*)""}, applyIfOr={}, applyIfNot={})""
     - failOn: Graph contains forbidden nodes:
       * Regex 1: (\\d+ (.*LoadK.*)+ ===.*)
         - Matched forbidden nodes (18):
           * 983  LoadKlass  === _ 7 982  [[ 984 ]]  @precise java/lang/Object: 0x00007f562c007fa0:Constant:exact+bot *, idx=7; # *  Klass: *
           * 1022  LoadKlass  === 457 7 1021  [[ 1023 ]]  @java/lang/Object: 0x00007f562c007fa0+bot *, idx=7; # *  Klass: *
           * 1058  LoadKlass  === 350 7 1057  [[ 1059 ]]  @java/lang/Object: 0x00007f562c007fa0+bot *, idx=7; # *  Klass: *
           * 1094  LoadKlass  === 243 7 1093  [[ 1095 ]]  @java/lang/Object: 0x00007f562c007fa0+bot *, idx=7; # *  Klass: *
           * 1130  LoadKlass  === 136 7 1129  [[ 1131 ]]  @java/lang/Object: 0x00007f562c007fa0+bot *, idx=7; # *  Klass: *
           * 1166  LoadKlass  === _ 7 1165  [[ 1167 ]]  @precise java/lang/Object: 0x00007f562c007fa0:Constant:exact+bot *, idx=7; # *  Klass: *
           * 741  LoadKlass  === 732 7 740  [[ 744 1002 1012 984 979 979 ]]  @rawptr:BotPTR, idx=Raw; # *  Klass: * !jvms: TestIntrinsics::test2 @ bci:134 (line 111)
           * 663  LoadKlass  === 654 7 662  [[ 666 1184 1194 1167 1162 1162 ]]  @rawptr:BotPTR, idx=Raw; # *  Klass: * !jvms: TestIntrinsics::test2 @ bci:114 (line 110)
           * 607  LoadKlass  === 598 7 606  [[ 608 ]]  @rawptr:BotPTR, idx=Raw; # *  Klass: * !jvms: TestIntrinsics::test2 @ bci:102 (line 109)
           * 549  LoadKlass  === 540 7 548  [[ 550 ]]  @rawptr:BotPTR, idx=Raw; # *  Klass: * !jvms: TestIntrinsics::test2 @ bci:90 (line 108)
           * 439  LoadKlass  === 430 7 438  [[ 453 1040 1035 1021 1021 ]]  @rawptr:BotPTR, idx=Raw; # *  Klass: * !jvms: TestIntrinsics::test2 @ bci:61 (line 106)
           * 424  LoadKlass  === 415 7 423  [[ 440 1040 1035 1023 1018 1018 ]]  @rawptr:BotPTR, idx=Raw; # *  Klass: * !jvms: TestIntrinsics::test2 @ bci:61 (line 106)
           * 332  LoadKlass  === 323 7 331  [[ 346 1076 1071 1057 1057 ]]  @rawptr:BotPTR, idx=Raw; # *  Klass: * !jvms: TestIntrinsics::test2 @ bci:46 (line 105)
           * 317  LoadKlass  === 308 7 316  [[ 333 1076 1071 1059 1054 1054 ]]  @rawptr:BotPTR, idx=Raw; # *  Klass: * !jvms: TestIntrinsics::test2 @ bci:46 (line 105)
           * 225  LoadKlass  === 216 7 224  [[ 239 1112 1107 1093 1093 ]]  @rawptr:BotPTR, idx=Raw; # *  Klass: * !jvms: TestIntrinsics::test2 @ bci:32 (line 104)
           * 210  LoadKlass  === 201 7 209  [[ 226 1112 1107 1095 1090 1090 ]]  @rawptr:BotPTR, idx=Raw; # *  Klass: * !jvms: TestIntrinsics::test2 @ bci:32 (line 104)
           * 117  LoadKlass  === 108 7 116  [[ 132 1148 1143 1129 1129 ]]  @rawptr:BotPTR, idx=Raw; # *  Klass: * !jvms: TestIntrinsics::test2 @ bci:18 (line 103)
           * 102  LoadKlass  === 92 7 101  [[ 118 1148 1143 1131 1126 1126 ]]  @rawptr:BotPTR, idx=Raw; # *  Klass: * !jvms: TestIntrinsics::test2 @ bci:18 (line 103)

2) Method ""public java.lang.Object compiler.valhalla.inlinetypes.TestIntrinsics.test26()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={}, applyIfAnd={}, failOn={""(\\\\d+(\\\\s){2}(LoadI.*)+(\\\\s){2}===.*)""}, applyIfOr={}, applyIfNot={})""
     - failOn: Graph contains forbidden nodes:
       * Regex 1: (\\d+(\\s){2}(LoadI.*)+(\\s){2}===.*)
         - Matched forbidden nodes (3):
           * 447  LoadI  === 494 129 446  [[ 452 ]]  @rawptr:BotPTR, idx=Raw; #int !jvms: Array::newInstance @ bci:2 (line 79) TestIntrinsics::test26 @ bci:30 (line 481)
           * 432  LoadI  === 400 7 411  [[ 434 ]]  @java/lang/Object: 0x00007f562c007fa0+12 *, idx=9; #int !jvms: Array::newInstance @ bci:2 (line 79) TestIntrinsics::test26 @ bci:30 (line 481)
           * 412  LoadI  === 400 129 411  [[ 419 425 ]]  @java/lang/Object: 0x00007f562c007fa0+12 *, idx=9; #int !jvms: Array::newInstance @ bci:2 (line 79) TestIntrinsics::test26 @ bci:30 (line 481)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287692,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ym97:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-20 02:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/762
Date: 2022-09-20 08:56:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Unneeded local variable in handle_safefetch(),JDK-8294053,5083719,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fbredberg,fbredberg,fbredberg,2022-09-20 01:07,2022-09-28 23:18,2023-10-01 09:56,2022-09-23 05:35,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"The input argument ""pc"" is shadowed by a local variable with the same type and name, and is initialized to the same value as is passed into the handle_safefetch() function by its callers. The local ""pc"" variable can therefore be removed from handle_safefetch().




",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292166,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ym8z:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-22 00:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10373
Date: 2022-09-21 10:11:55 +0000;;;","2022-09-22 05:45;dholmes;This is one of a number of issues already listed in JDK-8292166.;;;","2022-09-23 05:35;dukebot;Changeset: acd75e0f
Author:    Fredrik Bredberg <fredrik.bredberg@oracle.com>
Committer: Robbin Ehn <rehn@openjdk.org>
Date:      2022-09-23 12:34:06 +0000
URL:       https://git.openjdk.org/jdk/commit/acd75e0f1cddf8307bf0ef4f95a6f11051c30bc2
;;;",,,,,,,,,,,,,,,,,,,,
HttpResponseInputStream swallows interrupts,JDK-8294047,5083664,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dclarke,webbuggrp,webbuggrp,2022-09-19 06:10,2023-01-31 03:45,2023-10-01 09:56,2022-12-07 17:41,11,17,18,19,20,,20,core-libs,,0,dcsaw,release-note=yes,reproducer-other,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
On this line:

https://github.com/openjdk/jdk/blob/master/src/java.net.http/share/classes/jdk/internal/net/http/ResponseSubscribers.java#L483

HttpResponseInputStream catches InterruptedException and ignores it. This makes it impossible (?) to interrupt or a cancel a thread that is downloading a file by copying the inputstream to disk. There's no explanation in the code of why the code swallows exceptions in this way.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298163,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2ylwr:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-09-19 22:26;tongwan;The same code can also be found at:
https://hg.openjdk.java.net/jdk/jdk11/file/ee6f7a61f3a5/src/java.net.http/share/classes/jdk/internal/net/http/ResponseSubscribers.java#l380;;;","2022-09-20 02:54;dfuchs;We should consider cancelling the subscription and closing the input stream in that case. This would require a CSR.;;;","2022-11-23 06:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11323
Date: 2022-11-23 14:21:13 +0000;;;","2022-12-07 17:41;dukebot;Changeset: 3aa4070d
Author:    Darragh Clarke <Darragh.clarke@oracle.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2022-12-08 01:39:07 +0000
URL:       https://git.openjdk.org/jdk/commit/3aa4070d4ca21b9e90388995efbcde318892e25f
;;;",,,,,,,,,,,,,,,,,,,
Newly added test test/jdk/javax/swing/JTabbedPane/TestNPEStateChgListener.java fails in macos,JDK-8294046,5083708,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,psadhukhan,psadhukhan,2022-09-19 22:24,2022-09-26 09:41,2023-10-01 09:56,2022-09-20 08:23,20,,,,,,20,client-libs,,0,mach5-found,sn_127,,,,,,,,,,,,,,,,,,"Newly added test for fix JDK-6286501 is failing in macos citing

java.lang.NullPointerException: Cannot invoke ""javax.swing.JTabbedPane.getSelectedIndex()"" because ""this.this$0.tabPane"" is null
	at java.desktop/com.apple.laf.AquaTabbedPaneUI$2.stateChanged(AquaTabbedPaneUI.java:813)
	at java.desktop/javax.swing.JTabbedPane.fireStateChanged(JTabbedPane.java:446)
	at java.desktop/javax.swing.JTabbedPane$ModelListener.stateChanged(JTabbedPane.java:297)
	at java.desktop/javax.swing.DefaultSingleSelectionModel.fireStateChanged(DefaultSingleSelectionModel.java:148)
	at java.desktop/javax.swing.DefaultSingleSelectionModel.setSelectedIndex(DefaultSingleSelectionModel.java:79)
	at java.desktop/javax.swing.JTabbedPane.setSelectedIndexImpl(JTabbedPane.java:650)
	at java.desktop/javax.swing.JTabbedPane.setSelectedIndex(JTabbedPane.java:625)
	at TestNPEStateChgListener.lambda$main$0(TestNPEStateChgListener.java:66)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,,"0|i2ym6j:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-09-20 02:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10354
Date: 2022-09-20 09:16:39 +0000;;;","2022-09-20 08:23;dukebot;Changeset: df8ec09f
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-09-20 15:21:34 +0000
URL:       https://git.openjdk.org/jdk/commit/df8ec09f8dd21de2910212a6d98c1970a2a1a3d3
;;;",,,,,,,,,,,,,,,,,,,,,
"Remove ""Classpath"" exception from java/awt tests",JDK-8294039,5083700,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,aivanov,aivanov,2022-09-19 12:18,2022-11-07 09:59,2023-10-01 09:56,2022-09-21 10:04,11,17,20,,,,20,client-libs,,0,cssn22_09_02,noreg-cleanup,sustaining,,,,,,,,,,,,,,,,,"The test files should not contain the ""Classpath"" exception in the copyright header.

Yet there are 29 files in test/jdk/java/awt which do:

Component/CompEventOnHiddenComponent/CompEventOnHiddenComponent.java
Focus/ModalDialogActivationTest/ModalDialogActivationTest.java
MenuBar/DefaultMenuBarDispose.java
MenuBar/TestNoScreenMenuBar.java
Window/FullWindowContentTest/FullWindowContentTest.java
Window/GetWindowsTest/GetWindowsTest.java
Window/HandleWindowDestroyTest/HandleWindowDestroyTest.java
Window/MainKeyWindowTest/libTestMainKeyWindow.m
Window/MainKeyWindowTest/TestMainKeyWindow.java
datatransfer/Clipboard/BasicClipboardTest.java
datatransfer/Clipboard/GetContentsInterruptedTest.java
datatransfer/ImageTransfer/ImageTransferTest.java
datatransfer/Independence/IndependenceAWTTest.java
datatransfer/Independence/IndependenceSwingTest.java
datatransfer/SystemFlavorMap/AddFlavorForNativeTest.java
datatransfer/SystemFlavorMap/AddFlavorTest.java
datatransfer/SystemFlavorMap/AddNativeForFlavorTest.java
datatransfer/SystemFlavorMap/AddNativeTest.java
datatransfer/SystemFlavorMap/GetFlavorsForNewNativeTest.java
datatransfer/SystemFlavorMap/GetNativesForNewFlavorTest.java
datatransfer/SystemFlavorMap/InvalidMapArgumentsTest.java
datatransfer/SystemFlavorMap/ManyFlavorMapTest.java
datatransfer/SystemFlavorMap/SetDataFlavorsTest.java
datatransfer/SystemFlavorMap/SetFlavorsForNativeTest.java
datatransfer/SystemFlavorMap/SetNativesForFlavor.java
datatransfer/SystemFlavorMap/SetNativesTest.java
datatransfer/SystemSelection/SystemSelectionAWTTest.java
datatransfer/SystemSelection/SystemSelectionSwingTest.java
event/ComponentEvent/MovedResizedTwiceTest/MovedResizedTwiceTest.java


This list is obtained by running
grep -R -l '""Classpath"" exception' *
in test/jdk/java/awt.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294038,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ym4r:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-09-20 09:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10361
Date: 2022-09-20 16:38:45 +0000;;;","2022-09-21 10:04;dukebot;Changeset: 711e2520
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-09-21 17:01:39 +0000
URL:       https://git.openjdk.org/jdk/commit/711e2520adf87b8c285db07ff485fe4f6d0c349b
;;;",,,,,,,,,,,,,,,,,,,,,
"Remove ""Classpath"" exception from javax/swing tests",JDK-8294038,5083699,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,aivanov,aivanov,2022-09-19 12:13,2022-11-07 09:56,2023-10-01 09:56,2022-09-21 10:02,11,17,20,,,,20,client-libs,,0,cssn22_09_02,noreg-cleanup,sustaining,,,,,,,,,,,,,,,,,"The test files should not contain the ""Classpath"" exception in the copyright header.

Yet there are 11 files in test/jdk/javax/swing which do:

JButton/TestMnemonicAction.java
JComboBox/6406264/bug6406264.java
JPopupMenu/6583251/bug6583251.java
JScrollPane/6274267/bug6274267.java
JToolBar/4529206/bug4529206.java
Popup/6514582/bug6514582.java
regtesthelpers/JRobot.java
regtesthelpers/SwingTestHelper.java
text/AbstractDocument/DocumentInsert/DocumentInsertAtWrongPositionTest.java
text/GapContent/4496801/bug4496801.java
text/html/CSS/ColorValue/RGBColorValueTest.java


This list is obtained by running
grep -R -l '""Classpath"" exception' *
in test/jdk/javax/swing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294039,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ym4j:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-09-20 09:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10360
Date: 2022-09-20 16:34:41 +0000;;;","2022-09-21 10:02;dukebot;Changeset: 27b8e2f4
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-09-21 17:00:40 +0000
URL:       https://git.openjdk.org/jdk/commit/27b8e2f49e372e09e8f070e9c90babd82e015dbf
;;;",,,,,,,,,,,,,,,,,,,,,
x86_64: libm stubs are missing,JDK-8294033,5083693,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,ecaspole,ecaspole,2022-09-19 10:24,2022-12-13 22:46,2023-10-01 09:56,2022-11-11 14:51,20,,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,perf-regression,,,,,,,,,,,,,,,,"I did a CI build by build trend, this seems to be related to JDK-8293285.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293285,,,,,,,,,,,,,,,,,,,,,,,,,b14,20,,,,,,,,,"0|i2ym37:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-08 17:01;vlivanov;Is the difference still observed with -XX:+ForceUnreachable (when enabled on both builds)? ;;;","2022-11-09 14:57;vlivanov;I found the bug: it's a missing StubGenerator::generate_libm_stubs() call on x86_64.

Profile shows the following:
932:  1.44%        runtime stub  StubRoutines::libmExp
vs
933:  2.92%           libjvm.so  SharedRuntime::dexp
;;;","2022-11-09 14:59;vlivanov;Fix: 
diff --git a/src/hotspot/cpu/x86/stubGenerator_x86_64.cpp b/src/hotspot/cpu/x86/stubGenerator_x86_64.cpp
index 35772ef7401..77be6f9e871 100644
--- a/src/hotspot/cpu/x86/stubGenerator_x86_64.cpp
+++ b/src/hotspot/cpu/x86/stubGenerator_x86_64.cpp
@@ -3719,6 +3719,8 @@ void StubGenerator::generate_initial() {
   if (UseAdler32Intrinsics) {
      StubRoutines::_updateBytesAdler32 = generate_updateBytesAdler32();
   }
+
+  generate_libm_stubs();
 }
 
 void StubGenerator::generate_phase1() {;;;","2022-11-09 23:40;chagedorn;ILW = Missing libm stub results in performance regressions, medium?, no workaround = MMH = P3;;;","2022-11-10 18:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11100
Date: 2022-11-11 02:07:22 +0000;;;","2022-11-11 14:51;dukebot;Changeset: 34a499de
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-11-11 22:50:08 +0000
URL:       https://git.openjdk.org/jdk/commit/34a499de8edc9a6b750ae7af356fa9cb1d2a0748
;;;",,,,,,,,,,,,,,,,,
improve errors for record declarations,JDK-8294020,5083676,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-09-19 07:23,2022-11-14 19:20,2023-10-01 09:56,2022-11-07 12:18,18,19,20,,,,20,tools,,0,javac-record,,,,,,,,,,,,,,,,,,,"as reported in compiler-dev:

Please consider this trivial code:

public record Record {

}

Trying to compile this results in:

javac Record.java

Record.java:1: error: record header expected

public record Record {
          ^

1 error

It isn't too clear what that error message means. It took me a while to realize that I had missed using the () after the record's name. Changing the source to:

public record Record() {

}

is what the error was trying to convey. Could this error message be improved?

By the way, notice that the error message was pointing to the ""r"" letter of the ""record"" keyword with the ^ sign. Is that right place for this error or should it have been after the ""d"" of the ""Record"" name, similar to what appears to be reported for constructors of classes, for example:

public class Event {
    public Event {

    }
}

javac Event.java

Event.java:2: error: <identifier> expected
    public Event {
                      ^
1 error

(not sure if mail clients will preserve the spacing - that ^ appears between the ""t"" and the ""{"") 

see: https://mail.openjdk.org/pipermail/compiler-dev/2022-September/020420.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylzf:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-02 15:06;vromero;I don't see the error message per se as bad, it is a syntax error and syntax errors are usually concise with no suggestions of how the syntax should be modified for the code to compile. It is true that the position of the error is off and that can be improved but I think that the message is acceptable;;;","2022-11-02 19:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10963
Date: 2022-11-03 02:39:07 +0000;;;","2022-11-07 12:18;dukebot;Changeset: 60db5f2b
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2022-11-07 20:16:04 +0000
URL:       https://git.openjdk.org/jdk/commit/60db5f2ba271176292374b21c343cfc3167df562
;;;",,,,,,,,,,,,,,,,,,,,
[lworld] Missing class init barriers in c2i adapter,JDK-8294013,5083669,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2022-09-19 06:42,2022-10-05 04:36,2023-10-01 09:56,2022-10-05 04:36,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,,"The ""// Class initialization barrier for static methods"" code needs to be added to c2i_inline_entry as well (c2i_inline_ro_entry does not need it because the corresponding method is non-static by definition).

diff --git a/test/hotspot/jtreg/runtime/clinit/ClassInitBarrier.java b/test/hotspot/jtreg/runtime/clinit/ClassInitBarrier.java
index 402b38e0666..51ea157a56d 100644
--- a/test/hotspot/jtreg/runtime/clinit/ClassInitBarrier.java
+++ b/test/hotspot/jtreg/runtime/clinit/ClassInitBarrier.java
@@ -85,6 +85,7 @@ public class ClassInitBarrier {
                 changePhase(Phase.FINISHED);
             }
 
+            static              void staticM2(Runnable action, MyValue val) { action.run(); }
             static              void staticM(Runnable action) { action.run(); }
             static synchronized void staticS(Runnable action) { action.run(); }
             static native       void staticN(Runnable action);
@@ -99,7 +100,11 @@ public class ClassInitBarrier {
 
         static class B extends A {}
 
-        static void testInvokeStatic(Runnable action)       { A.staticM(action); }
+        static value class MyValue {
+            int x = 42;
+        }
+
+        static void testInvokeStatic(Runnable action)       { A.staticM2(action, new MyValue()); }
         static void testInvokeStaticSync(Runnable action)   { A.staticS(action); }
         static void testInvokeStaticNative(Runnable action) { A.staticN(action); }
 



java.lang.AssertionError: NON_BLOCKING: wrong phase: IN_PROGRESS
	at ClassInitBarrier.lambda$disposableAction$1(ClassInitBarrier.java:328)
	at ClassInitBarrier$Test$A.staticM2(ClassInitBarrier.java:88)
	at ClassInitBarrier$Test.testInvokeStatic(ClassInitBarrier.java:107)
	at ClassInitBarrier.lambda$checkBlocked$7(ClassInitBarrier.java:401)
	at java.base/java.lang.Thread.run(Thread.java:1589)
java.lang.NoClassDefFoundError: Could not initialize class ClassInitBarrier$Test$A
	at ClassInitBarrier$Test.testNewInstanceA(ClassInitBarrier.java:113)
	at ClassInitBarrier.lambda$checkBlocked$7(ClassInitBarrier.java:401)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Caused by: java.lang.ExceptionInInitializerError: Exception java.lang.AssertionError: not blocked [in thread ""MainThread""]
	at ClassInitBarrier.checkBlocked(ClassInitBarrier.java:421)
	at ClassInitBarrier.checkBlockingAction(ClassInitBarrier.java:351)
	at ClassInitBarrier$Test.runTests(ClassInitBarrier.java:134)
	at ClassInitBarrier$Test$A.<clinit>(ClassInitBarrier.java:80)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:516)
	at java.base/java.lang.Class.forName(Class.java:495)
	at ClassInitBarrier.triggerInitialization(ClassInitBarrier.java:389)
	at ClassInitBarrier$Test.lambda$run$0(ClassInitBarrier.java:178)
	at ClassInitBarrier.execute(ClassInitBarrier.java:188)
	at ClassInitBarrier$Test.run(ClassInitBarrier.java:178)
	at ClassInitBarrier.main(ClassInitBarrier.java:480)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:579)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	... 1 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylxv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-20 04:54;thartmann;Related issues: JDK-8222841, JDK-8223213, JDK-8227260;;;","2022-09-20 05:49;thartmann;Similar to the nmethod barriers, the slow path of the class init barriers calls into SharedRuntime::get_handle_wrong_method_stub. We need to verify that the right entry point is selected, depending on the calling convention that is used.

We also need to verify that the c2i_entry_barriers work as intended (see also JDK-8293994). This naive stress code triggers asserts (might simply be false positives):

+++ b/src/hotspot/cpu/x86/gc/shared/barrierSetAssembler_x86.cpp
@@ -338,6 +338,8 @@ void BarrierSetAssembler::nmethod_entry_barrier(MacroAssembler* masm, Label*, La
 }
 #endif
 
+static volatile uint32_t _counter = 0;
+
 void BarrierSetAssembler::c2i_entry_barrier(MacroAssembler* masm) {
   BarrierSetNMethod* bs = BarrierSet::barrier_set()->barrier_set_nmethod();
   if (bs == NULL) {
@@ -345,6 +347,13 @@ void BarrierSetAssembler::c2i_entry_barrier(MacroAssembler* masm) {
   }
 
   Label bad_call;
+
+  __ incrementl(ExternalAddress((address) &_counter), rscratch1);
+  __ movptr(rscratch1, ExternalAddress((address) &_counter));
+  __ andl(rscratch1, 0x100);
+  __ cmpl(rscratch1, 0);
+  __ jcc(Assembler::notEqual, bad_call);
;;;","2022-10-03 03:36;thartmann;See also code marked with ""// TODO 8294013"";;;","2022-10-05 04:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/778
Date: 2022-10-05 11:11:27 +0000;;;",,,,,,,,,,,,,,,,,,,
RISC-V: get/put_native_u8 missing the case when address&7 is 6,JDK-8294012,5083668,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vkempik,vkempik,vkempik,2022-09-19 06:37,2023-07-09 19:18,2023-10-01 09:56,2022-09-20 07:59,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"In src/hotspot/cpu/riscv/bytes_riscv.hpp , the switch for u8 is missing an case when address&7 equals 6, those resulting in 1-byte put/get when 2-byte operations can be used.
Thanks Xiaolin for noticing",,,,,,,,,,JDK-8311719,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,,,"0|i2ylxn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-19 07:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10344
Date: 2022-09-19 14:50:38 +0000;;;","2022-09-20 07:59;dukebot;Changeset: 09af637a
Author:    Vladimir Kempik <vkempik@openjdk.org>
Date:      2022-09-20 14:58:28 +0000
URL:       https://git.openjdk.org/jdk/commit/09af637a9be106a0a6b82b3638ae004d9248fc78
;;;","2023-04-19 19:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/46
Date: 2023-04-20 02:41:00 +0000;;;","2023-06-19 20:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,
Grapheme implementation of setText() throws IndexOutOfBoundsException,JDK-8294008,5083662,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,naoto,kganapureddy,kganapureddy,2022-09-19 05:57,2023-02-21 11:58,2023-10-01 09:56,2022-09-20 09:48,20,,,,,,20,core-libs,,0,conformance,tck-red-20,tier9,,,,,,,,,,,,,,,,,"Some of the existing JCK tests are failing with IndexOutOfBoundsException
during invocation of setText(StringCharacterIterator).

Noticed that when setText() invoked with the StringCharacterIterator with the 
(https://download.java.net/java/early_access/jdk20/docs/api/java.base/java/text/StringCharacterIterator.html#%3Cinit%3E(java.lang.String,int,int,int)

where 'begin' is > 0 the setText() throws IndexOutOfBoundsException.
But, the values are valid.

Please find the attached code snippet.

sample output is - 
""java.lang.IndexOutOfBoundsException: Range [1, 5) out of bounds for length 4
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)
	at ""

I see this could be a side effect of JDK-8292387

For more details  on JCK failures - https://bugs.openjdk.org/browse/JCK-7318139
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291660,JDK-8292387,,,JCK-7318139,,,,,,,,"2022-09-19 05:57;kganapureddy;SampleTest.java;https://bugs.openjdk.org/secure/attachment/100798/SampleTest.java",,,,,,,,,,,,,,,,,,,,,,,"0|i2ylwb:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2022-09-19 12:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10349
Date: 2022-09-19 19:01:57 +0000;;;","2022-09-20 09:48;dukebot;Changeset: e3358e77
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-09-20 16:46:18 +0000
URL:       https://git.openjdk.org/jdk/commit/e3358e77f524f4d448c2ebb7c5afd0aa432f0d44
;;;",,,,,,,,,,,,,,,,,,,,,
Avoid hardcoding object file suffixes in make,JDK-8294006,5083661,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-09-19 05:55,2022-09-26 09:41,2023-10-01 09:56,2022-09-20 10:27,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,,,"Replace hardcoding of object file suffixes in make, to ensure they are always reliably set from a single place in autoconf, which also simplifies things",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylw3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-19 06:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10341
Date: 2022-09-19 12:55:47 +0000;;;","2022-09-20 10:27;dukebot;Changeset: cb5771dc
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-09-20 17:23:49 +0000
URL:       https://git.openjdk.org/jdk/commit/cb5771dc2a5e8c84436e300992f3c791a013062e
;;;",,,,,,,,,,,,,,,,,,,,,
"Filler array klass should be in jdk/vm/internal, not in java/vm/internal",JDK-8294000,5083654,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2022-09-19 04:01,2022-09-26 09:45,2023-10-01 09:56,2022-09-21 01:00,19,20,,,,,20,hotspot,,0,gc-pending-review,,,,,,,,,,,,,,,,,,,"While looking at jmap heap outputs I saw that the internal, fabricated klass for filler arrays is called 

  Ljava/vm/internal/...

however all similar klasses are in jdk.vm.internal...

Fix the typo.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284435,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yluj:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-09-19 04:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10336
Date: 2022-09-19 11:24:59 +0000;;;","2022-09-21 01:00;dukebot;Changeset: 8ecdaa68
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-09-21 07:58:07 +0000
URL:       https://git.openjdk.org/jdk/commit/8ecdaa68111f2e060a3f46a5cf6f2ba95c9ebad1
;;;",,,,,,,,,,,,,,,,,,,,,
[JVMCI] need support for aligned constants in generated code larger than 8 bytes,JDK-8293999,5083653,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bulasevich,dnsimon,dnsimon,2022-09-19 03:59,2022-11-14 11:42,2023-10-01 09:56,2022-10-29 07:10,20,,,,,,20,hotspot,,0,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,"JDK-8287373 reduced the alignment of CodeBuffer::SECT_CONSTS from CodeEntryAlignment down to sizeof(jdouble). This is fine for C1 and C2 which presumably do not put larger constants in the constants section. However, Graal vectorization requires larger, aligned constants such as 32-byte vector masks. As a result, Graal code installation now fails with:

Fatal error: jdk.vm.ci.common.JVMCIError: invalid data section alignment: 32 [constants alignment: 8]
at 0x00007fca7d300757 in HotSpotCompiledCode stream",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287373,,,,JDK-8273459,,,,,,,,"2022-09-22 03:30;dnsimon;JDK-8293999-reproducer.patch;https://bugs.openjdk.org/secure/attachment/100830/JDK-8293999-reproducer.patch",,,,,,,,,,,,,,,,,,,,,,,"0|i2ylub:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-19 04:31;rcastanedalo;ILW = JVMCI error; fails when installing Graal code; no known workaround = MMH = P3;;;","2022-09-19 05:05;dnsimon;I think a new CodeSection::_alignment field is required to support this.;;;","2022-09-20 04:34;thartmann;[~bulasevich] could you please have a look at this?;;;","2022-09-21 11:15;bulasevich;Ok!;;;","2022-09-22 02:32;bulasevich;@dnsimon Can you suggest how to reproduce the issue?;;;","2022-09-22 03:32;dnsimon;You should be able to reproduce by applying JDK-8293999-reproducer.patch and running:

make TEST=test/hotspot/jtreg/compiler/jvmci/errors/TestInvalidCompilationResult.java test

When I do this, I get:

jdk.vm.ci.common.JVMCIError: invalid data section alignment: 32 [constants alignment: 8]
at 0x00007f79882573d7 in HotSpotCompiledCode stream
Last 59 bytes up to current read position 0x00007f79882573d7 in HotSpotCompiledCode stream for dummyMethod:
0x00007f798825739c: 010b 0000 0064 756d 6d79 4d65 7468 6f64  .....dummyMethod
0x00007f79882573ac: 00a8 b640 c879 7f00 0000 0000 0000 0000  ...@.y..........
0x00007f79882573bc: 0000 0000 0000 0100 0000 0000 0000 0000  ................
0x00007f79882573cc: 0000 0000 0000 0800 0000 20              ..........

	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.CompilerToVM.installCode0(Native Method)
	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.CompilerToVM.installCode(CompilerToVM.java:522)
	at jdk.internal.vm.ci/jdk.vm.ci.hotspot.HotSpotCodeCacheProvider.installCode(HotSpotCodeCacheProvider.java:139)
	at jdk.internal.vm.ci/jdk.vm.ci.code.CodeCacheProvider.addCode(CodeCacheProvider.java:51)
	at compiler.jvmci.errors.CodeInstallerTest.installEmptyCode(CodeInstallerTest.java:81)
	at compiler.jvmci.errors.TestInvalidCompilationResult.testValidAlignment32(TestInvalidCompilationResult.java:103);;;","2022-10-23 02:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10392
Date: 2022-09-22 14:30:10 +0000;;;","2022-10-29 07:10;dukebot;Changeset: f3ca0cab
Author:    Boris Ulasevich <bulasevich@openjdk.org>
Date:      2022-10-29 14:08:30 +0000
URL:       https://git.openjdk.org/jdk/commit/f3ca0cab75f2faf9ec88f7a380490c9589a27102
;;;",,,,,,,,,,,,,,,
[PPC64] JfrGetCallTrace: assert(_pc != nullptr) failed: must have PC,JDK-8293998,5083652,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2022-09-19 03:56,2023-01-03 09:04,2023-10-01 09:56,2022-09-27 00:56,11,17,19,20,,,20,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"The assertion was hit in JavaThread::pd_get_top_frame_for_profiling (after JDK-8290004 was fixed) while testing jdk/jfr/api/consumer/log/TestSystemEvents.java.

The acquire barrier from JDK-8290004 has helped, but not fixed all problems. ""last_Java_pc"" can still be observed as 0 in rare cases because not all writers use a release barrier.
",,,,,,,,,,JDK-8295002,JDK-8294756,,,,,,,,,,,,,,,,,,,,,JDK-8290004,,,,,JDK-8295872,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,,"0|i2ylu3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-09-19 05:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10339
Date: 2022-09-19 12:24:05 +0000;;;","2022-09-27 00:56;dukebot;Changeset: 14c6ac45
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-09-27 07:54:13 +0000
URL:       https://git.openjdk.org/jdk/commit/14c6ac457d319a2e7f9cc9e7355c81c421a065dd
;;;","2022-09-27 02:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/740
Date: 2022-09-27 09:19:58 +0000;;;","2022-09-30 01:25;mdoerr;Fix Request (17u):
Makes JFR and Async Profiler a bit more reliable. We should have the improvement in the LTS releases. Doesn't apply cleanly, but the code can simply be taken from upstream (see PR above).;;;","2022-10-04 13:41;mdoerr;Fix Request (11u):
Reason: see above (17u). The 17u-dev version applies cleanly, but requires a trivial adaptation (see 11u-dev PR).;;;","2022-10-04 13:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1390
Date: 2022-10-04 20:32:31 +0000;;;",,,,,,,,,,,,,,,,,
C2: fix and simplify IdealLoopTree::do_remove_empty_loop,JDK-8293996,5083467,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,webbuggrp,webbuggrp,2022-09-15 06:28,2023-04-04 03:26,2023-10-01 09:56,2022-09-27 01:54,10,11,17,18,19,20,20,hotspot,,0,c2,dcsswa,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,oracle-triage-20,regression,reproducer-yes,webbug,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Arch: x86_64
OS: Ubuntu 20.04

java: 
- openjdk version ""11.0.17-internal"" 2022-10-18
- OpenJDK Runtime Environment (fastdebug build 11.0.17-internal+0-adhoc.congli.jdk11u-dev)
- OpenJDK 64-Bit Server VM (fastdebug build 11.0.17-internal+0-adhoc.congli.jdk11u-dev, mixed mode)

javac: javac 11.0.17-internal


A DESCRIPTION OF THE PROBLEM :
This is a JIT compiler bug which triggers an assertion failure in the C2 compiler:

#  Internal Error (/zdata/congli/hotspot-build-env/jdk11u-dev/src/hotspot/share/opto/loopnode.cpp:1606), pid=2489456, tid=2489469
#  assert(false) failed: should be able to adjust outer loop

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. javac T.java
2. java -Xmx1G -XX:-BackgroundCompilation -XX:-PrintWarnings --illegal-access=deny T

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
NO crash
ACTUAL -
Crashed

---------- BEGIN SOURCE ----------
class T {
  long b;

  void a(double d) {
    int e;
    int w = 43542;
    int o = 11;
    e = w;
    for (int i = 524; i < 19325; i += 1) {
      for (int j = 0; j < 32767; j++) o++;
      for (int k = 0; k < o; k++) e += 7;
    }
  }

  void p(long l, float f, long l1) {
    double z = 83.31189;
    for (; ; ) a(z);
  }

  void f() {
    p(b, 93.934F, b);
  }

  public static void main(String[] q) {
    T t = new T();
    t.f();
  }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8299465,JDK-8296359,JDK-8297506,JDK-8299819,JDK-8296281,,,,,,,,,,,,,,,,,,,,,JDK-8294413,,,,,,JDK-8186027,,,,,,,,"2022-09-19 03:20;sswsharm;T.java;https://bugs.openjdk.org/secure/attachment/100793/T.java","2022-09-19 03:21;sswsharm;hs_err_pid18980.log;https://bugs.openjdk.org/secure/attachment/100795/hs_err_pid18980.log","2022-09-19 03:21;sswsharm;replay_pid18980.log;https://bugs.openjdk.org/secure/attachment/100794/replay_pid18980.log",,,,,,,,,,,,,,,,,,,,,"0|i2ykoz:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-19 03:35;sswsharm;Issue is reproduced on fastdebug builds.
Crash is observed on JDK 11,17,19 and 20, however crash is not observed on JDK 18 

OS: Windows 10

jdk 11.0.16 : Fail
jdk 11.0.16.1 : Fail
jdk 18ea10 : Fail
jdk 18ea11 : Pass
jdk 18.0.2.1 : Pass
jdk 19ea36 : Fail
jdk 19.0.1 : Fail
jdk 20ea15 : Fail

ILW = assertion failure in debug JDK(regression in 19,20), reproducible with single test , no workaround available =  HLM = P3

Moving it to dev team for further analysis.;;;","2022-09-19 06:50;rcastanedalo;The failure can also be observed in JDK 18 using -Xbatch -XX:-TieredCompilation to enforce a more deterministic compilation sequence.;;;","2022-09-20 00:59;rcastanedalo;The assertion fails for this test case since its introduction by JDK-8186027 in JDK 10.;;;","2022-09-20 01:23;rcastanedalo;ILW = assertion failure in debug build (no failure observed in release build); reported once since JDK 10 release; disable loop strip mining (-XX:LoopStripMiningIter=0) or compilation of affected method = MLM =  P4;;;","2022-09-20 01:27;rcastanedalo;[~roland] This test case fails since the introduction of loop strip mining in JDK 10 (JDK-8186027), could you please have a look? Thanks!;;;","2022-09-20 01:36;epeter;Just reproduced it like this:
./java -XX:+PrintCompilation -XX:CompileCommand=compileonly,T::* -Xbatch -XX:-TieredCompilation T.java

.....
   7897   83 %  b        T::a @ 27 (70 bytes)
   7901   84    b        T::a (70 bytes)
   7902   83 %           T::a @ 27 (70 bytes)   made not entrant
   7903   85 %  b        T::a @ 47 (70 bytes)
   7907   85 %           T::a @ 47 (70 bytes)   made not entrant
   7907   86 %  b        T::a @ 27 (70 bytes)
   7912   84             T::a (70 bytes)   made not entrant
   7912   87 %  b        T::a @ 47 (70 bytes)
   7918   88    b        T::a (70 bytes)
   8164   89 %  b        T::p @ 5 (14 bytes)# A fatal error has been detected by the Java Runtime Environment:
#  Internal Error (/home/emanuel/Documents/fork4-jdk/open/src/hotspot/share/opto/loopnode.cpp:2851), pid=152451, tid=152464
#  assert(false) failed: should be able to adjust outer loop;;;","2022-09-20 01:49;epeter;In adjust_strip_mined_loop, we iterate all Phi nodes of the inner_cl.
Turns out that we have an empty loop. So there is no Phi, and we cannot find the iv_phi.

Further info:
OSR compilation of T::p
T::a inlined, and loop stripmined

We discover that the loop is empty in IdealLoopTree::do_remove_empty_loop, then remove the Phi, replace the phi with final value, hope the loop collapses because backedge cannot be taken now. Somehow this seems not to have happened yet by the time we assert and crash.;;;","2022-09-21 04:38;epeter;I can make the failure reproduce with this
rr ./java -XX:+UseG1GC -XX:CompileCommand=compileonly,T::* -Xbatch -XX:-TieredCompilation T.java

If I add -XX:+StressIGVN, the failure becomes intermittent.

Analysis:
We miss to propagate constant folding for AddI. AddI looks at inputs and inputs of inputs to constant fold. But if only inputs of inputs change, the node is not notified, and IGVN does not call Ideal on it again.

This means that in some cases, the condition that is supposed to collapse may not collapse. -XX:+StressIGVN makes the issue intermittent, because randomly that node gets processed after the input of the input turns to a constant, and then all can be folded.;;;","2022-09-26 00:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10393
Date: 2022-09-22 14:38:33 +0000;;;","2022-09-27 01:54;dukebot;Changeset: dd51f7e0
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-09-27 08:52:19 +0000
URL:       https://git.openjdk.org/jdk/commit/dd51f7e0b75d3a16403608d89cd206ac0bedf882
;;;","2022-11-22 08:06;thartmann;Fix Request (JDK 19u)
Fixes an assertion during C2 compilation because an empty loop is not removed. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 11u and 17u.;;;","2022-11-22 08:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/86
Date: 2022-11-22 16:06:43 +0000;;;","2022-12-29 04:41;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Typical risk of a C2 change. Has verification code but no test. In 20 for a while now. Take to keep up with Oracle.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-12-29 04:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/998
Date: 2022-12-29 12:44:05 +0000;;;","2023-01-03 08:50;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Typical risk of a C2 change. Has verification code but no test. In 20 for a while now. Take to keep up with Oracle. 
Clean backport except for Copyright.
Test passes.  SAP nighlty testing passed including Windows.;;;","2023-01-03 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1628
Date: 2023-01-03 16:49:36 +0000;;;",,,,,,,
[lworld] Deoptimization from nmethod entry barrier breaks scalarized calling convention,JDK-8293994,5083649,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-09-19 03:22,2022-10-03 05:05,2023-10-01 09:56,2022-10-03 05:05,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,intermittent,lworld,,,,,,,,,,,,,,,,,,The recent sweeper removal (JDK-8290025) always enabled nmethod entry barriers. This revealed an issue where deoptimization from the slow path breaks the scalarized calling convention.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294624,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yltf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-03 04:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/773
Date: 2022-10-03 11:41:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
java/lang/Float/Binary16ConversionNaN.java fails on silent NaN conversions,JDK-8293991,5083645,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-09-19 03:04,2023-02-21 17:12,2023-10-01 09:56,2022-09-23 02:06,20,,,,,,20,core-libs,,0,testbug,,,,,,,,,,,,,,,,,,,"Reliably reproduces on x86-32 with FPU:

```
$ CONF=linux-x86-server-fastdebug make test TEST=java/lang/Float/Binary16ConversionNaN.java TEST_VM_OPTS=""-XX:UseAVX=0 -XX:UseSSE=0""
...
Roundtrip failure on NaN value 7de2	 got back 7fe2
Roundtrip failure on NaN value fde2	 got back ffe2
```

Since there are many NaN values in FP16 -- basically any non-zero significand works, we should probably just relax the test.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302976,JDK-8289551,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylsj:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-09-19 03:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10333
Date: 2022-09-19 10:25:50 +0000;;;","2022-09-22 06:05;rgiulietti;Does this failure mean that the x86 FPU converts a signaling NaN to a quiet NaN while preserving the other bits?;;;","2022-09-22 07:32;shade;Yes. This is not the first time we see this, see for example JDK-8285985.;;;","2022-09-22 09:04;rgiulietti;Gulp!
And even JDK-8076373 encountered the signaling/quiet issue.;;;","2022-09-23 02:06;dukebot;Changeset: 0b56b822
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-09-23 09:03:18 +0000
URL:       https://git.openjdk.org/jdk/commit/0b56b822436a0662170c11777ff0009b89a667eb
;;;",,,,,,,,,,,,,,,,,,
[JVMCI] re-use cleared oop handles,JDK-8293989,5083641,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2022-09-19 01:52,2022-09-26 09:40,2023-10-01 09:56,2022-09-20 00:59,17,19,20,,,,20,hotspot,,0,jdk17-graalvm,jdk19-graalvm,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,"It's possible for a libgraal isolate to live long enough that JVMCIRuntime::__oop_handles grows so much that it overflows when trying to expand. This results in a VM crash something like:

# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (malloc) failed to allocate 18446744056529682432 bytes for AllocateHeap

V  [libjvm.so+0xe1f441]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x1a1
V  [libjvm.so+0xe2006d]  VMError::report_and_die(Thread*, char const*, int, unsigned long, VMErrorType, char const*, __va_list_tag*)+0x2d
V  [libjvm.so+0x5d8ed3]  report_vm_out_of_memory(char const*, int, unsigned long, VMErrorType, char const*, ...)+0xc3
V  [libjvm.so+0x39f7c2]  AllocateHeap(unsigned long, MEMFLAGS, AllocFailStrategy::AllocFailEnum)+0x92
V  [libjvm.so+0x8303f2]  GrowableArrayWithAllocator<_jobject*, GrowableArray<_jobject*> >::grow(int)+0x112
V  [libjvm.so+0x995385]  JVMCIRuntime::make_global(Handle const&)+0x105

The solution is to re-use cleared (i.e. NULL) entries in JVMCIRuntime::__oop_handles.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylrn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-19 02:37;rcastanedalo;ILW = OOM JVMCI crash; long runs using JVMCI + libgraal; no known workaround = MLH = P4;;;","2022-09-19 05:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10337
Date: 2022-09-19 12:07:50 +0000;;;","2022-09-20 00:59;dukebot;Changeset: fe541f05
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-09-20 07:55:22 +0000
URL:       https://git.openjdk.org/jdk/commit/fe541f05cc4092752d9d33ea41002fe907283655
;;;",,,,,,,,,,,,,,,,,,,,
Incorrect double-checked locking in com.sun.beans.introspect.ClassInfo,JDK-8293986,5083635,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2022-09-19 00:23,2022-10-17 13:53,2023-10-01 09:56,2022-10-10 23:00,11,17,18,19,20,,20,client-libs,,0,,,,,,,,,,,,,,,,,,,,"There are 3 incorrect double-checked locking cases in ClassInfo:
    private List<Method> methods;
    private Map<String,PropertyInfo> properties;
    private Map<String,EventSetInfo> eventSets;

For example:

    public List<Method> getMethods() {
        if (this.methods == null) {
            synchronized (this.mutex) {
                if (this.methods == null) {
                    this.methods = MethodInfo.get(this.type);
                }
            }
        }
        return this.methods;
    }

'methods' is not volatile and read multiple times. This makes it an incorrect DCL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylqb:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41b965df,,,,,,,,,"2022-09-21 01:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10372
Date: 2022-09-21 08:03:24 +0000;;;","2022-10-10 23:00;dukebot;Changeset: e775acf8
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-10-11 05:59:16 +0000
URL:       https://git.openjdk.org/jdk/commit/e775acf889cde6f5bb463d4ecfe6eb035d18bdda
;;;",,,,,,,,,,,,,,,,,,,,,
Duplicate simple loop back-edge will crash the vm,JDK-8293978,5083625,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wchao,wchao,wchao,2022-09-18 20:25,2022-09-26 09:44,2023-10-01 09:56,2022-09-20 23:26,19,20,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,tencent-interest,,,,,,,,,,,,,,,,"After https://bugs.openjdk.org/browse/JDK-8279888, the following simple Test crashes.

class Foo {
  static void c(Byte[] a, Byte d) {
    for (int e = 0; e < a.length; e++)
      a[e] = 0;
  }
}
class Test {
  int f(int g) {
    Byte h[] = new Byte[500];
    Foo.c(h, (byte)4);
    short i = 7;
    while (i != 1)
      i = (short)(i - 3);
    return 0;
  }
  void j(String[] k) {
    try {
      int l = 5;
      if (l < f(l))
        ;
    } catch (Exception m) {
    }
  }
  public static void main(String[] args) {
    try {
      Test n = new Test();
      for (int i=0;i <10000;i++)
        n.j(args);
    } catch (Exception ex) {
    }
  }
}


The crash log is:

Current CompileTask:
C2:    315   24   !   4       Test::j (16 bytes)

Stack: [0x00007fe32b3da000,0x00007fe32b4db000],  sp=0x00007fe32b4d4e00,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x429e55]  Node::in(unsigned int) const+0x13  (node.hpp:391)
V  [libjvm.so+0xf4bd74]  PhaseIdealLoop::verify_strip_mined_scheduling(Node*, Node*)+0xc2  (loopnode.cpp:5733)
V  [libjvm.so+0xf4ca24]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0xa50  (loopnode.cpp:5926)
V  [libjvm.so+0xf4bfd0]  PhaseIdealLoop::build_loop_late_post(Node*)+0x28  (loopnode.cpp:5760)
V  [libjvm.so+0xf4bc54]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0x248  (loopnode.cpp:5706)
V  [libjvm.so+0xf464e1]  PhaseIdealLoop::build_and_optimize()+0xa95  (loopnode.cpp:4387)
V  [libjvm.so+0x8a0df4]  PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&, PhaseIdealLoop const*)+0xca  (loopnode.hpp:1100)
V  [libjvm.so+0x8a0eac]  PhaseIdealLoop::verify(PhaseIterGVN&)+0x63  (loopnode.hpp:1158)
V  [libjvm.so+0x894777]  Compile::Optimize()+0xcb5  (compile.cpp:2379)
V  [libjvm.so+0x88d69a]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x13cc  (compile.cpp:823)
V  [libjvm.so+0x77e6e4]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x194  (c2compiler.cpp:113)
V  [libjvm.so+0x8ab589]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x9ed  (compileBroker.cpp:2240)
V  [libjvm.so+0x8aa175]  CompileBroker::compiler_thread_loop()+0x3e7  (compileBroker.cpp:1916)
V  [libjvm.so+0x8c9dd5]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x69  (compilerThread.cpp:58)
V  [libjvm.so+0xc4bfd4]  JavaThread::thread_main_inner()+0x164  (javaThread.cpp:700)
V  [libjvm.so+0xc4be64]  JavaThread::run()+0x204  (javaThread.cpp:683)
V  [libjvm.so+0x13a70c8]  Thread::call_run()+0x180  (thread.cpp:224)
V  [libjvm.so+0x10c0b33]  thread_native_entry(Thread*)+0x18f  (os_linux.cpp:710)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279888,,,,,,,,"2022-09-18 20:26;wchao;hs_err_pid3848271.log;https://bugs.openjdk.org/secure/attachment/100791/hs_err_pid3848271.log","2022-09-18 20:26;wchao;hs_err_pid3848486.log;https://bugs.openjdk.org/secure/attachment/100790/hs_err_pid3848486.log",,,,,,,,,,,,,,,,,,,,,,"0|i2ylo3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-18 20:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10329
Date: 2022-09-19 03:30:15 +0000;;;","2022-09-18 22:49;wchao;Crashed after 8279888 is merged;;;","2022-09-19 01:12;rcastanedalo;ILW = VM crash; corner case in debug and release builds; disable compilation of the affected method = HLM = P3;;;","2022-09-20 23:25;dukebot;Changeset: cb72f809
Author:    casparcwang <casparcwang@tencent.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2022-09-21 06:24:19 +0000
URL:       https://git.openjdk.org/jdk/commit/cb72f80925965c73e32c44ce3196866272306d7f
;;;",,,,,,,,,,,,,,,,,,,
"runtime/NMT/NMTInitializationTest.java#default_long-off failed with ""Suspiciously long bucket chains in lookup table.""",JDK-8293972,5083620,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gziemski,dcubed,dcubed,2022-09-17 09:05,2023-08-10 06:05,2023-10-01 09:56,2023-07-31 08:13,20,,,,,,22,hotspot,,0,intermittent,nmt,,,,,,,,,,,,,,,,,,"The following test failed in my nightly build-and-test run:

runtime/NMT/NMTInitializationTest.java#default_long-off

Here's  snippet from the log file:

----------System.out:(9/1917)----------
Test mode: mode_long, NMT mode: off
Command line: [/System/Volumes/Data/work/shared/mirrors/src_clones/jdk/jdk_baseline.git/build/macosx-x86_64-normal-server-fastdebug/images/jdk/bin/java -cp /System/Volumes/Data/work/shared/mirrors/src_clones/jdk/jdk_baseline.git/build/macosx-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_tier1/classes/3/runtime/NMT/NMTInitializationTest_default_long-off.d:/System/Volumes/Data/work/shared/mirrors/src_clones/jdk/jdk_baseline.git/open/test/hotspot/jtreg/runtime/NMT:/System/Volumes/Data/work/shared/mirrors/src_clones/jdk/jdk_baseline.git/build/macosx-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_tier1/classes/3/test/lib:/System/Volumes/Data/work/local/jib-dcubed/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/jtreg.jar:/System/Volumes/Data/work/local/jib-dcubed/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/junit-platform-console-standalone-1.8.2.jar:/System/Volumes/Data/work/local/jib-dcubed/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/testng-7.3.0.jar:/System/Volumes/Data/work/local/jib-dcubed/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/jcommander-1.78.jar:/System/Volumes/Data/work/local/jib-dcubed/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/guice-4.2.3.jar -Xlog:nmt -XX:NativeMemoryTracking=off -XX:+UnlockDiagnosticVMOptions -XX:+PrintNMTStatistics @commands_20000.txt -version ]
[2022-09-17T06:59:05.258834Z] Gathering output for process 73913
[2022-09-17T06:59:05.427636Z] Waiting for completion for process 73913
[2022-09-17T06:59:05.427845Z] Waiting for completion finished for process 73913
[2022-09-17T06:59:05.443535Z] Waiting for completion for process 73913
[2022-09-17T06:59:05.443596Z] Waiting for completion finished for process 73913
[0.019s][info][nmt] entries: 10321 (primary: 1964, empties: 5955), sum bytes: 3262549, longest chain length: 21
found: 10321 - 326254921.
----------System.err:(23/1275)----------
 stdout: [[0.019s][info][nmt] NMT initialized: off
[0.019s][info][nmt] Preinit state:
[0.019s][info][nmt] entries: 10321 (primary: 1964, empties: 5955), sum bytes: 3262549, longest chain length: 21
[0.020s][info][nmt] pre-init mallocs: 20338, pre-init reallocs: 10004, pre-init frees: 10017
[0.020s][info][nmt]
];
 stderr: [Java HotSpot(TM) 64-Bit Server VM warning: PrintNMTStatistics is disabled, because native memory tracking is not enabled
java version ""20-internal"" 2023-03-21
Java(TM) SE Runtime Environment (fastdebug build 20-internal-2022-09-17-0503584.dcubed...)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 20-internal-2022-09-17-0503584.dcubed..., mixed mode, sharing)
]
 exitValue = 0

java.lang.RuntimeException: Suspiciously long bucket chains in lookup table.
        at NMTInitializationTest.main(NMTInitializationTest.java:211)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-09-17 09:06;dcubed;8293972.zip;https://bugs.openjdk.org/secure/attachment/100789/8293972.zip","2023-06-23 14:50;gziemski;main_ver1.cpp;https://bugs.openjdk.org/secure/attachment/104406/main_ver1.cpp","2023-06-23 14:52;gziemski;out_linux.txt.zip;https://bugs.openjdk.org/secure/attachment/104407/out_linux.txt.zip","2023-06-23 14:52;gziemski;out_mac.txt.zip;https://bugs.openjdk.org/secure/attachment/104408/out_mac.txt.zip","2023-06-23 14:52;gziemski;out_windows.txt.zip;https://bugs.openjdk.org/secure/attachment/104409/out_windows.txt.zip",,,x86_64,,,,,,,,,os_x,,,,,,,"0|i2ylmz:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-17 09:06;dcubed;I've attached the log file from my sighting:

$ unzip -l 8293972.zip
Archive:  8293972.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    20647  09-17-2022 00:59   test_failures.2022-09-17-001646/NMTInitializationTest_default_long-off.jtr.fastdebug
---------                     -------
    20647                     1 file;;;","2022-09-17 09:09;dcubed;Here's the HEAD changeset for my jdk/jdk open repo:

$ git log -r HEAD^!
commit 01e7b8819918906082e315870e667b15910cee99 (HEAD -> master, origin/master, origin/HEAD)
Author: Quan Anh Mai <anhmdq99@gmail.com>
Date:   Fri Sep 16 20:07:59 2022 +0000

    8290917: x86: Memory-operand arithmetic instructions have too low costs
    
    Reviewed-by: kvn, sviswanathan, jbhateja;;;","2023-05-17 13:47;gziemski;According to out:

Test mode: mode_long, NMT mode: off

so the NMTInitializationTest.java ""nmtMode"" variable should be set to ""NMTMode.off"" and we should be skipping the portion of the test that checks the length of the bucket.;;;","2023-05-30 11:29;mseledtsov;ILW = MLM = P4;;;","2023-06-20 13:29;gziemski;The patch for code I used to spit out contents of NMTPreInitAllocationTable hash table:

diff --git a/src/hotspot/share/services/nmtPreInit.cpp b/src/hotspot/share/services/nmtPreInit.cpp
index 35aec38a6f4..4acaf06a91e 100644
--- a/src/hotspot/share/services/nmtPreInit.cpp
+++ b/src/hotspot/share/services/nmtPreInit.cpp
@@ -136,6 +136,23 @@ void NMTPreInitAllocationTable::print_state(outputStream* st) const {
             "", longest chain length: %d"",
             num_entries, num_primary_entries, table_size - num_primary_entries,
             sum_bytes, longest_chain);
+
+  FILE *fp = fopen(""/Users/oracle/Desktop/out.txt"", ""a"");
+  if (fp == NULL) {
+    fprintf(stderr, ""Error opening the file"");
+  } else {
+    fprintf(fp, ""hash table:\n"");
+    fprintf(fp, ""table_size: %d\n"", table_size);
+    for (int i = 0; i < table_size; i++) {
+      fprintf(fp, ""[%d] "", i);
+      for (NMTPreInitAllocation* a = _entries[i]; a != nullptr; a = a->next) {
+        fprintf(fp, ""%p "", a->payload);
+      }
+      fprintf(fp, ""\n"");
+    }
+    fprintf(fp, ""\n"");
+    fclose(fp);
+  }
 }
 
 #ifdef ASSERT
;;;","2023-06-21 15:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14607
Date: 2023-06-21 22:30:08 +0000;;;","2023-06-23 14:53;gziemski;Uploaded the src code to the sandbox + data sets, which I used for comparing hash functions.;;;","2023-07-31 08:13;dukebot;Changeset: 78f67993
Author:    Gerard Ziemski <gziemski@openjdk.org>
Date:      2023-07-31 15:12:22 +0000
URL:       https://git.openjdk.org/jdk/commit/78f67993f89792d2f0d8dcf04ba12ee93b336a13
;;;",,,,,,,,,,,,,,,
Loading new Media from resources can sometimes fail when loading from FXML,JDK-8293971,5083482,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,almatvee,webbuggrp,webbuggrp,2022-09-15 08:07,2023-07-31 10:03,2023-10-01 09:56,2022-09-28 13:36,8u341,jfx19,,,,,jfx20,javafx,,0,11-na,regression,regression_8282054,sn_127,sn_128,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Linux Fedora 36
5.19.8-200.fc36.x86_64
openjdk version ""18.0.2"" 2022-07-19
OpenJDK Runtime Environment (Red_Hat-18.0.2.0.9-1.rolling.fc36) (build 18.0.2+9)
OpenJDK 64-Bit Server VM (Red_Hat-18.0.2.0.9-1.rolling.fc36) (build 18.0.2+9, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
After this commit:
https://github.com/openjdk/jfx/commit/d1110f479567c314ecb6848700bcf4552509d7e9

Creating a new Media object using a MP3 file in the resources of a project, you can get exceptions:

Exception in thread ""JavaFX Application Thread"" MediaException: MEDIA_UNSUPPORTED : Unrecognized file signature!
	at javafx.media@20-ea/javafx.scene.media.Media.<init>(Media.java:411)

At first glance, the error is in this Locator file in the JavaFX source code:
https://github.com/openjdk/jfx/blob/master/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/locator/Locator.java

REGRESSION : Last worked in version 18.0.2.1

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create a new Media object and load an MP3 from the resources
2. Watch the Media object throw a MediaException: MEDIA_UNSUPPORTED : Unrecognized file signature!

I've also a GIT repository in which the exception occurs immediately when running the Gradle task 'application':
https://github.com/CodeDead/opal/tree/development (please make sure to use the development branch as this branch makes use of the latest JavaFX versions)

Oddly enough, it does not always happen, and loading the file directly from a file location instead of the resources seems to work, but when loading from the resources, you get the exception that the media file signature is not recognized.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
As it worked in JavaFX 18.0.2, creating a Media object using a URI to a project resources location should work.

ACTUAL -
Exception in thread ""JavaFX Application Thread"" MediaException: MEDIA_UNSUPPORTED : Unrecognized file signature!
	at javafx.media@20-ea/javafx.scene.media.Media.<init>(Media.java:411)
	at Opal/com.codedead.opal.domain.SoundPane$1.changed(SoundPane.java:73)
	at Opal/com.codedead.opal.domain.SoundPane$1.changed(SoundPane.java:69)
	at javafx.base@20-ea/com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(ExpressionHelper.java:181)
	at javafx.base@20-ea/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80)
	at javafx.base@20-ea/javafx.beans.property.StringPropertyBase.fireValueChangedEvent(StringPropertyBase.java:104)
	at javafx.base@20-ea/javafx.beans.property.StringPropertyBase.markInvalid(StringPropertyBase.java:111)
	at javafx.base@20-ea/javafx.beans.property.StringPropertyBase.set(StringPropertyBase.java:145)
	at javafx.base@20-ea/javafx.beans.property.StringPropertyBase.set(StringPropertyBase.java:50)
	at javafx.base@20-ea/javafx.beans.property.StringProperty.setValue(StringProperty.java:71)
	at Opal/com.codedead.opal.domain.SoundPane.setMediaPath(SoundPane.java:192)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javafx.reflect.Trampoline.invoke(MethodUtil.java:77)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at javafx.base@20-ea/com.sun.javafx.reflect.MethodUtil.invoke(MethodUtil.java:275)
	at javafx.fxml@20-ea/com.sun.javafx.fxml.MethodHelper.invoke(MethodHelper.java:84)
	at javafx.fxml@20-ea/com.sun.javafx.fxml.ModuleHelper.invoke(ModuleHelper.java:100)
	at javafx.fxml@20-ea/com.sun.javafx.fxml.BeanAdapter.put(BeanAdapter.java:259)
	at javafx.fxml@20-ea/com.sun.javafx.fxml.BeanAdapter.put(BeanAdapter.java:54)
	at javafx.fxml@20-ea/javafx.fxml.FXMLLoader$Element.applyProperty(FXMLLoader.java:523)
	at javafx.fxml@20-ea/javafx.fxml.FXMLLoader$Element.processValue(FXMLLoader.java:373)
	at javafx.fxml@20-ea/javafx.fxml.FXMLLoader$Element.processPropertyAttribute(FXMLLoader.java:335)
	at javafx.fxml@20-ea/javafx.fxml.FXMLLoader$Element.processInstancePropertyAttributes(FXMLLoader.java:245)
	at javafx.fxml@20-ea/javafx.fxml.FXMLLoader$ValueElement.processEndElement(FXMLLoader.java:778)
	at javafx.fxml@20-ea/javafx.fxml.FXMLLoader.processEndElement(FXMLLoader.java:2931)
	at javafx.fxml@20-ea/javafx.fxml.FXMLLoader.loadImpl(FXMLLoader.java:2646)
	at javafx.fxml@20-ea/javafx.fxml.FXMLLoader.loadImpl(FXMLLoader.java:2555)
	at javafx.fxml@20-ea/javafx.fxml.FXMLLoader.load(FXMLLoader.java:2523)
	at Opal/com.codedead.opal.OpalApplication.start(OpalApplication.java:92)
	at javafx.graphics@20-ea/com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$9(LauncherImpl.java:847)
	at javafx.graphics@20-ea/com.sun.javafx.application.PlatformImpl.lambda$runAndWait$12(PlatformImpl.java:484)
	at javafx.graphics@20-ea/com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:457)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at javafx.graphics@20-ea/com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:456)
	at javafx.graphics@20-ea/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96)
	at javafx.graphics@20-ea/com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method)
	at javafx.graphics@20-ea/com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316)
	at java.base/java.lang.Thread.run(Thread.java:833)

---------- BEGIN SOURCE ----------
final MediaPlayer mediaPlayer = new MediaPlayer(new Media(getClass().getResource(""/path/to/file.mp3"").toExternalForm()));

I've made a free MP3 file available to try with here (royalty and copyright free):
https://codedead.com/static.mp3
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Revert back to JavaFX 18.0.2

FREQUENCY : always


",,,,,,,,,,JDK-8294688,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282054,,,,,,,,,,,,,,,generic,,,,,,,8u341,,generic,,,,,,,"0|i2yksb:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2022-09-17 06:54;kcr;Here is additional information from the submitter, sent via email:

----------------------------------------------------------------------

I found that this line in the JFX source is responsible for the bug:
https://github.com/openjdk/jfx/blob/d1110f479567c314ecb6848700bcf4552509d7e9/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/locator/Locator.java#L622

Sample code:

package org.example;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.stage.Stage;

import java.net.URISyntaxException;

public class Main extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(final Stage primaryStage) throws URISyntaxException {
        final StackPane root = new StackPane();
        primaryStage.setScene(new Scene(root, 300, 250));
        primaryStage.show();

        final MediaPlayer player1 = new MediaPlayer(new Media(getClass().getResource(""/static.mp3"").toURI().toString()));
        player1.setAutoPlay(true);
    }
}

MP3:
https://codedead.com/static.mp3 (royalty free)

Occurrence:
100% of the time

Kind regards,
;;;","2022-09-20 23:03;almatvee;This is regression from JDK-8282054. Also, reproducible on macOS and should affect all platforms.;;;","2022-09-23 20:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/902
Date: 2022-09-24 03:07:00 +0000;;;","2022-09-28 13:36;dukebot;Changeset: 35675c8d
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-09-28 20:33:23 +0000
URL:       https://git.openjdk.org/jfx/commit/35675c8d27d54a26059b182614e18152794dbcec
;;;",,,,,,,,,,,,,,,,,,,
breakup the long signature in SystemDictionaryShared::is_supported_invokedynamic,JDK-8293969,5083617,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,matsaave,ccheung,ccheung,2022-09-16 18:05,2022-10-05 23:19,2023-10-01 09:56,2022-09-29 13:18,20,,,,,,20,hotspot,,0,cds,starter,,,,,,,,,,,,,,,,,,"The following line is 245 chars long.

https://github.com/openjdk/jdk/blob/01e7b8819918906082e315870e667b15910cee99/src/hotspot/share/classfile/systemDictionaryShared.cpp#L1062

The signature string should be broken up in to multiple lines.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylmb:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-28 06:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10452
Date: 2022-09-27 15:44:30 +0000;;;","2022-09-29 13:18;dukebot;Changeset: 88062eea
Author:    Matias Saavedra Silva <matias.s.saavedra.silva@oracle.com>
Committer: Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-09-29 20:16:30 +0000
URL:       https://git.openjdk.org/jdk/commit/88062eea67e6c9f30be5dfa53016b8643f12d4b8
;;;",,,,,,,,,,,,,,,,,,,,,
Code signing warnings after JDK-8293550,JDK-8293965,5083609,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,erikj,mikael,mikael,2022-09-16 14:21,2022-12-08 07:52,2023-10-01 09:56,2022-09-19 05:40,20,,,,,,20,infrastructure,,0,jdk17u-critical-request,jdk17u-critical-yes,,,,,,,,,,,,,,,,,,"During the build process several ""replacing existing signature"" warnings are printed. They appear to be harmless but are somewhat noisy.",,,,,,,,,,JDK-8298395,JDK-8298397,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293550,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,,"0|i2ylkj:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-16 14:22;erikj;This happens because the linker performs a default unavoidable ""adhoc"" sign operation on every binary, and our call to codesign overwrites it. We use the -f (force) flag, but this warning is still printed. I can't see a way to turn it off. Seems we have to grep it away.

It seems you can run ""codesign --remove-signature /path/to/file"" without getting warnings. Note that on aarch64, it's not possible to run a binary without a signature.;;;","2022-09-16 14:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10315
Date: 2022-09-16 21:39:39 +0000;;;","2022-09-19 05:40;dukebot;Changeset: f91762f5
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-09-19 12:36:14 +0000
URL:       https://git.openjdk.org/jdk/commit/f91762f56ea7fb27b6fa54d07d3b3b0650bab0bc
;;;","2022-12-02 09:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/946
Date: 2022-12-02 17:11:33 +0000;;;","2022-12-03 04:51;phh;Fix Request (17u).

Clean follow-on build fix to JDK-8293550 17u backport.
;;;","2022-12-07 02:26;clanger;This needs to be moved to jdk17u and to be a jdk17u-critical-request now. Sorry for not handling earlier.;;;","2022-12-07 08:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/360
Date: 2022-12-07 16:15:37 +0000;;;","2022-12-07 08:30;phh;Moved to jdk17u https://github.com/openjdk/jdk17u/pull/360 and issue tagged. ;;;",,,,,,,,,,,,,,,
Unused check_for_duplicates parameter in ClassLoaderExt::process_jar_manifest,JDK-8293964,5083608,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,matsaave,ccheung,ccheung,2022-09-16 14:00,2022-10-03 12:31,2023-10-01 09:56,2022-09-27 08:43,20,,,,,,20,hotspot,,0,cds,starter,,,,,,,,,,,,,,,,,,"The check_for_duplicates parameter in ClassLoaderExt::process_jar_manifest is not being used.

void ClassLoaderExt::process_jar_manifest(JavaThread* current, ClassPathEntry* entry,
                                          bool check_for_duplicates)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylkb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-26 10:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10425
Date: 2022-09-26 15:21:07 +0000;;;","2022-09-27 08:43;dukebot;Changeset: 112ca2b8
Author:    Matias Saavedra Silva <matias.s.saavedra.silva@oracle.com>
Committer: Calvin Cheung <ccheung@openjdk.org>
Date:      2022-09-27 15:39:31 +0000
URL:       https://git.openjdk.org/jdk/commit/112ca2b863e3caf647645eebd87423925a271e3e
;;;",,,,,,,,,,,,,,,,,,,,,
Unused ClassPathZipEntry::contents_do,JDK-8293961,5083600,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,matsaave,ccheung,ccheung,2022-09-16 10:02,2023-01-24 11:35,2023-10-01 09:56,2022-09-28 09:02,20,,,,,,20,hotspot,,0,cds,cleanup,starter,,,,,,,,,,,,,,,,,"The ClassPathZipEntry::contents_do was for the ""lookup cache"" feature in JDK8 and the feature was removed (since JDK9?). So the function is currently unused and could be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylij:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-26 10:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10413
Date: 2022-09-23 19:18:53 +0000;;;","2022-09-28 09:02;dukebot;Changeset: 4fb424ba
Author:    Matias Saavedra Silva <matias.s.saavedra.silva@oracle.com>
Committer: Calvin Cheung <ccheung@openjdk.org>
Date:      2022-09-28 15:59:49 +0000
URL:       https://git.openjdk.org/jdk/commit/4fb424ba5f3ece1a47b8774defdbe6645cc72759
;;;",,,,,,,,,,,,,,,,,,,,,
Document new system properties stdout.encoding and stderr.encoding in Internationalization Guide,JDK-8293957,5083596,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,schetan,rgallard,rgallard,2022-09-16 09:13,2022-11-13 19:40,2023-10-01 09:56,2022-11-13 19:40,19,,,,,,20,docs,,0,,,,,,,,,,,,,,,,,,,,"See JDK-8283620

System.out does not use the encoding/charset specified in the Javadoc",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283620,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylhn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,"2022-11-13 19:40;schetan;Resolving the bug after changes were reviewed by [~naoto]. The changes were confirmed over email.
Here is the link to the latest guide:
https://docs-uat.us.oracle.com/en/java/javase/20/intl/supported-encodings.html#GUID-A17E6FED-5880-4836-8E62-18007BD58E85
;;;",,,,,,,,,,,,,,,,,,,,,,
Document the option XX:+AutoCreateSharedArchive,JDK-8293955,5083594,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ssatish,rgallard,rgallard,2022-09-16 08:51,2023-02-13 09:40,2023-10-01 09:56,2023-02-13 09:40,19,,,,,,20,docs,,0,,,,,,,,,,,,,,,,,,,,"See JDK-8261455 Automatically generate the CDS archive if necessary

This affects https://docs.oracle.com/en/java/javase/19/vm/class-data-sharing.html#GUID-7EAA3411-8CF0-4D19-BD05-DF5E1780AA91
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261455,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylh7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,"2023-02-13 07:34;ssatish;Hi [~iklam],

I've updated the VM guide with this information, can you please review and let me know your comments:
https://docs-uat.us.oracle.com/en/java/javase/20/vm/class-data-sharing.html#GUID-3BA7A018-BDC4-4695-AF0C-25BE3E595A03
;;;","2023-02-13 09:38;iklam;[~ssatish] the updated text looks good.;;;","2023-02-13 09:40;ssatish;Thanks [~iklam];;;",,,,,,,,,,,,,,,,,,,,
Some tests for virtual threads take too long,JDK-8293940,5083579,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2022-09-16 05:00,2022-12-22 05:14,2023-10-01 09:56,2022-09-30 09:44,20,,,,,,20,core-libs,,0,loom,noreg-self,,,,,,,,,,,,,,,,,,"A number of the tests added to test virtual threads in JDK 19 have long execution times.

vthread/BlockingChannelOps and vthread/BlockingSocketOps take the longest time as they run a lot tests and need to run in several configurations. This is tracked by JDK-8294375.

This issue tracks improvements to:

jdk/jdk/incubator/concurrent/StructuredTaskScope/StructuredTaskScopeTest.java
jdk/jdk/internal/misc/ThreadFlock/ThreadFlockTest.java
jdk/java/util/concurrent/ThreadPerTaskExecutor/ThreadPerTaskExecutorTest.java
jdk/java/util/concurrent/ExecutorService/CloseTest.java
jdk/java/lang/Thread/virtual/ThreadAPI.java

and the stress/reliability tests in jdk/java/lang/Thread/virtual/stress.

StructuredTaskScopeTest, ThreadFlockTest and ThreadPerTaskExecutorTest run a lot of tests with thread factories for both platform and virtual threads. These can be split into two runs, and some of the delays used by some of their tests can be reduced without impacting the reliability of the tests.

CloseTest has sleeps that mostly not needed.

ThreadAPI has several sleeps to improve the chances that a virtual thread is parked/blocked. These sleeps can be replaced with code that polls the thread state. In addition, testing the duration of Thread.sleep can be reduced to two cases. These could run concurrently but it would make the test harder to debug in the event of a test failure.

The stress tests in jdk/java/lang/Thread/virtual/stress are proving very useful to catch issues in both hotspot and library code. Most have an iteration count and some can be dialled down for release builds. This issue does not propose to change the iteration count for debug builds at this time.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293885,JDK-8294146,,,JDK-8294375,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yldv:",9223372036854775807,b18,,,,,,,,,,,"2022-09-29 11:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10463
Date: 2022-09-28 08:07:25 +0000;;;","2022-09-30 09:44;dukebot;Changeset: b8f9a915
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-09-30 16:41:33 +0000
URL:       https://git.openjdk.org/jdk/commit/b8f9a915a2bfd0f7920ecfc5b3a08670df5f9f3e
;;;",,,,,,,,,,,,,,,,,,,,,
"[lworld] TestCallingConvention triggers ""code buffer not large enough"" assert",JDK-8293934,5083573,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2022-09-16 03:31,2022-09-18 22:15,2023-10-01 09:56,2022-09-18 22:15,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,,"Due to verification code added by JDK-8292694 (ironically), more space is required for the adapters.

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (workspace\open\src\hotspot\cpu\x86\assembler_x86.cpp:13354), pid=50908, tid=82720
#  assert(code_section->limit() - code_section->end() > src_len) failed: code buffer not large enough
#
# JRE version: Java(TM) SE Runtime Environment (20.0+1) (fastdebug build 20-valhalla+1-22)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-valhalla+1-22, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1663280540\testoutput\test-support\jtreg_open_test_hotspot_jtreg_tier1_compiler_3\scratch\0\hs_err_pid50908.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Djava.io.tmpdir=c:\sb\prod\1663280540\testoutput\test-support\jtreg_open_test_hotspot_jtreg_tier1_compiler_3\tmp -Djava.library.path=c:\ade\mesos\work_dir\jib-master\install\jdk-20-valhalla+1-22\windows-x64-debug.test\hotspot\jtreg\native --patch-module=java.base=C:\sb\prod\1663280540\testoutput\test-support\jtreg_open_test_hotspot_jtreg_tier1_compiler_3\patches\java.base -Djava.security.policy=file:/c:/sb/prod/1663280540/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_3/jtreg.policy com.sun.javatest.regtest.agent.AgentServer -id 41 -logfile C:\sb\prod\1663280540\testoutput\test-support\jtreg_open_test_hotspot_jtreg_tier1_compiler_3\jtData\agentServer.41.trace -allowSetSecurityManager -port 64070 -timeoutFactor 4.0

Host: win2016-x64-373297, Intel(R) Xeon(R) Platinum 8358 CPU @ 2.60GHz, 12 cores, 23G,  Windows Server 2016 , 64 bit Build 14393 (10.0.14393.3630)
Time: Thu Sep 15 23:33:41 2022 /GM elapsed time: 1.200510 seconds (0d 0h 0m 1s)

---------------  T H R E A D  ---------------

Current thread (0x000002048867e270):  JavaThread ""main"" [_thread_in_vm, id=82720, stack(0x00000021c4600000,0x00000021c4700000)]

Stack: [0x00000021c4600000,0x00000021c4700000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc988f1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xf0d687]  VMError::report+0x10e7  (vmError.cpp:838)
V  [jvm.dll+0xf0f21e]  VMError::report_and_die+0x65e  (vmError.cpp:1686)
V  [jvm.dll+0xf0f934]  VMError::report_and_die+0x64  (vmError.cpp:1467)
V  [jvm.dll+0x5ad0f7]  report_vm_error+0xb7  (debug.cpp:284)
V  [jvm.dll+0x2e75c9]  Assembler::pusha+0x89  (assembler_x86.cpp:13389)
V  [jvm.dll+0xb7cb79]  MacroAssembler::push_CPU_state+0x39  (macroAssembler_x86.cpp:3051)
V  [jvm.dll+0xd74719]  gen_c2i_adapter+0x1c9  (sharedRuntime_x86_64.cpp:806)
V  [jvm.dll+0xd7c0b7]  SharedRuntime::generate_i2c2i_adapters+0x437  (sharedRuntime_x86_64.cpp:1308)
V  [jvm.dll+0xd63529]  AdapterHandlerLibrary::create_adapter+0x139  (sharedRuntime.cpp:3119)
V  [jvm.dll+0xd66d25]  AdapterHandlerLibrary::get_adapter+0x515  (sharedRuntime.cpp:3090)
V  [jvm.dll+0xc05f14]  Method::link_method+0x234  (method.cpp:1284)
V  [jvm.dll+0x7fe13b]  InstanceKlass::link_class_impl+0xb5b  (instanceKlass.cpp:1017)
V  [jvm.dll+0x91cdf7]  get_class_declared_methods_helper+0x2c7  (jvm.cpp:1852)
V  [jvm.dll+0x9310c1]  JVM_GetClassDeclaredMethods+0x171  (jvm.cpp:1906)
C  0x0000020497bc24be",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylcj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-18 22:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/760
Date: 2022-09-19 04:59:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Synthetic final modifier is part of the AST for a try-with-resource resource,JDK-8293897,5083536,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,mjayan,mjayan,2022-09-15 23:43,2022-10-21 00:53,2023-10-01 09:56,2022-09-21 05:32,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,"For the below code:
try ( InputStream is = new FileInputStream(""foo"")) {
}
while visiting the TryTree node using TreeScanner, the node info is displayed as :
try (final InputStream is = new FileInputStream(""foo"")) {
}
Looks like jdk auto inserts the final modifier at the beginning.

Verified in jdk 11, 17 and 19. Test program is attached
(Execute the attachment by passing the test prgram also as argument)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293899,,,,,,,,,,,,,,"2022-09-15 23:42;mjayan;CheckForPreIncrement.java;https://bugs.openjdk.org/secure/attachment/100774/CheckForPreIncrement.java","2022-09-15 23:43;mjayan;TestFormat.java;https://bugs.openjdk.org/secure/attachment/100773/TestFormat.java",,,,,,,,,,,,,,,,,,,,,,"0|i2yl4b:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2022-09-16 09:36;alanb;I think this is about com.sun.source.util.TreeScanner and javac so I'll move to tools/javac for now.;;;","2022-09-16 10:11;darcy;Note that from JLS 14.20.3. try-with-resources

""A variable declared in a resource specification is implicitly declared final (§4.12.4) if it is not explicitly declared final. ""

https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.20.3;;;","2022-09-19 11:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10348
Date: 2022-09-19 18:28:32 +0000;;;","2022-09-21 05:32;dukebot;Changeset: 95ec2eac
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-09-21 12:29:40 +0000
URL:       https://git.openjdk.org/jdk/commit/95ec2eaca3845bc971d3e711e5f61052c2951fa8
;;;","2022-10-21 00:53;mjayan;Issue is fixed in jdk-20(b16);;;",,,,,,,,,,,,,,,,,,
gc/g1/mixedgc/TestOldGenCollectionUsage.java (still) assumes that GCs take 1ms minimum,JDK-8293891,5083528,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,dcubed,dcubed,2022-09-15 19:14,2022-10-25 03:36,2023-10-01 09:56,2022-09-19 00:34,20,,,,,,20,hotspot,,0,gc-pending-review,jdk17u-fix-request,jdk17u-fix-yes,testbug,tier6,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

gc/g1/mixedgc/TestOldGenCollectionUsage.java

Here's a snippet from the log file:

#section:main
----------messages:(7/1205)----------
command: main -Xbootclasspath/a:. -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -verbose:gc -XX:NewSize=2m -XX:MaxNewSize=2m -Xmx14m -Xms14m -XX:+AlwaysTenure -XX:InitiatingHeapOccupancyPercent=100 -XX:-G1UseAdaptiveIHOP -XX:G1MixedGCCountTarget=4 -XX:MaxGCPauseMillis=30000 -XX:G1HeapRegionSize=1m -XX:G1HeapWastePercent=0 -XX:G1MixedGCLiveThresholdPercent=100 gc.g1.mixedgc.TestOldGenCollectionUsage
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -verbose:gc -XX:NewSize=2m -XX:MaxNewSize=2m -Xmx14m -Xms14m -XX:+AlwaysTenure -XX:InitiatingHeapOccupancyPercent=100 -XX:-G1UseAdaptiveIHOP -XX:G1MixedGCCountTarget=4 -XX:MaxGCPauseMillis=30000 -XX:G1HeapRegionSize=1m -XX:G1HeapWastePercent=0 -XX:G1MixedGCLiveThresholdPercent=100 gc.g1.mixedgc.TestOldGenCollectionUsage 
started: Fri Sep 16 01:26:15 UTC 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.management --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
finished: Fri Sep 16 01:26:15 UTC 2022
elapsed time (seconds): 0.218
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base java.management   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(10/538)----------
[0.002s][info][gc] Using G1
Monitor G1 Old Gen pool with G1 Young Generation collector.
Found pool: G1 Old Gen
Found collector: G1 Young Generation
[0.187s][info][gc] GC(0) Pause Full (WhiteBox Initiated Full GC) 3M->1M(32M) 5.647ms
[0.193s][info][gc] GC(1) Pause Young (Normal) (G1 Evacuation Pause) 3M->3M(32M) 0.818ms
[0.194s][info][gc] GC(2) Pause Young (Normal) (WhiteBox Initiated Young GC) 3M->3M(32M) 0.192ms
G1 Old Gen: usage after GC = 1673496
G1 Young Generation: collection count = 2
G1 Young Generation: collection time  = 0
----------System.err:(12/741)----------
java.lang.RuntimeException: Collector has not run
	at gc.g1.mixedgc.TestOldGenCollectionUsage.run(TestOldGenCollectionUsage.java:122)
	at gc.g1.mixedgc.TestOldGenCollectionUsage.main(TestOldGenCollectionUsage.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Collector has not run",,,,,,,,,,JDK-8295575,JDK-8295876,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8227037,JDK-8268906,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yl2j:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-09-16 02:48;tschatzl;In the test there is a check

        long collectionTime = collector.getCollectionTime();
[...]
        if (collectionTime <= 0) {
            throw new RuntimeException(""Collector has not run"");
        }

with the following output:

Found collector: G1 Young Generation
[0.187s][info][gc] GC(0) Pause Full (WhiteBox Initiated Full GC) 3M->1M(32M) 5.647ms
[0.193s][info][gc] GC(1) Pause Young (Normal) (G1 Evacuation Pause) 3M->3M(32M) 0.818ms
[0.194s][info][gc] GC(2) Pause Young (Normal) (WhiteBox Initiated Young GC) 3M->3M(32M) 0.192ms
G1 Old Gen: usage after GC = 1673496
G1 Young Generation: collection count = 2
G1 Young Generation: collection time  = 0

Total collection times < 1ms will return 0 by getCollectionTime() due to rounding/truncating in an internal counter, hence the error; however since 0.818 + 0.192 > 1ms (1.01) this issue should be investigated further, as JDK-8227037 indicates that accounting should be fine.;;;","2022-09-16 03:40;tschatzl;The pause times reported by the log message are rounded (and taken at slightly different times than the ones for getCollectionTime()), so some error here is expected.

This issue can be easily reproduced locally by increasing (Max)NewSize for this test to e.g. 3M - then only a single gc (the wb initiated one) is done, which is easily < 1ms.

So this is a testbug. That check should not be done due to accuracy issues.;;;","2022-09-16 03:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10303
Date: 2022-09-16 10:44:38 +0000;;;","2022-09-19 00:34;dukebot;Changeset: d77c464c
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-09-19 07:33:14 +0000
URL:       https://git.openjdk.org/jdk/commit/d77c464c3804362b80fecca9df05fbef90bed14a
;;;","2022-10-20 05:57;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-10-20 06:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/816
Date: 2022-10-20 12:57:54 +0000;;;",,,,,,,,,,,,,,,,,
AArch64 build failure with GCC 12 due to maybe-uninitialized warning in libfdlibm k_rem_pio2.c,JDK-8293887,5083524,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,haosun,haosun,haosun,2022-09-15 17:37,2023-08-07 14:51,2023-10-01 09:56,2022-09-26 20:13,17,20,,,,,20,core-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"I saw -Werror=maybe-uninitialized compiler warnings when I tried to build OpenJDK with GCC 12 on Ubuntu 22.04 in AArch64 system.

This gcc warning seems to be a false alarm. As I checked the source code of ""k_rem_pio2.c"" file, array ""fq"" with elements from index 0 to ""jz"", has already been initialized as ""fw"" at line 290.

Note that: in my local test, x86-64 build with GCC12 on Ubuntu 22.04 passed.


Here is the configuration:
====================================================
A new configuration has been successfully created in
/tmp/jdk-test/build-release
using configure arguments '--with-boot-jdk=/tmp/test/openjdk/packages/boot-jdk/aarch64/jdk18 --with-debug-level=release --with-version-opt=git-d191e4751 --with-toolchain-type=gcc est=/tmp/test/openjdk/tools/googletest'.

Configuration summary:
* Name:           /tmp/jdk-test/build-release
* Debug level:    release
* HS debug level: product
* JVM variants:   server
* JVM features:   server: 'cds compiler1 compiler2 dtrace epsilongc g1gc jfr jni-check jvmci jvmti management parallelgc serialgc services shenandoahgc vm-structs zgc' 
* OpenJDK target: OS: linux, CPU architecture: aarch64, address length: 64
* Version string: 20-internal-git-d191e4751 (20-internal)
* Source date:    1663194132 (2022-09-14T22:22:12Z)

Tools summary:
* Boot JDK:       openjdk version ""18-internal"" 2022-03-22 OpenJDK Runtime Environment (build 18-internal+0-git-0f2113cee) OpenJDK 64-Bit Server VM (build 18-internal+0-git-0f2113cee, mixed ring) (at /tmp/test/openjdk/packages/boot-jdk/aarch64/jdk18)
* Toolchain:      gcc (GNU Compiler Collection)
* C Compiler:     Version 12.0.1 (at /usr/bin/gcc-12)
* C++ Compiler:   Version 12.0.1 (at /usr/bin/g++-12)

Build performance summary:
* Build jobs:     224
* Memory limit:   257299 MB

Here is the error log
=== Output from failing command(s) repeated here ===
* For target support_native_java.base_libfdlibm_k_rem_pio2.o:
/tmp/jdk-test/jdk_src/src/java.base/share/native/libfdlibm/k_rem_pio2.c: In function '__j__kernel_rem_pio2':
/tmp/jdk-test/jdk_src/src/java.base/share/native/libfdlibm/k_rem_pio2.c:305:24: error: 'fq' may be used uninitialized [-Werror=maybe-uninitialized]
  305 |                 fw = fq[0]-fw;
      |                      ~~^~~
/tmp/jdk-test/jdk_src/src/java.base/share/native/libfdlibm/k_rem_pio2.c:183:27: note: 'fq' declared here
  183 |         double z,fw,f[20],fq[20],q[20];
      |                           ^~
/tmp/jdk-test/jdk_src/src/java.base/share/native/libfdlibm/k_rem_pio2.c:305:24: error: 'fq' may be used uninitialized [-Werror=maybe-uninitialized]
  305 |                 fw = fq[0]-fw;
      |                      ~~^~~
/tmp/jdk-test/jdk_src/src/java.base/share/native/libfdlibm/k_rem_pio2.c:183:27: note: 'fq' declared here
  183 |         double z,fw,f[20],fq[20],q[20];
      |                           ^~
cc1: all warnings being treated as errors

* All command lines available in /tmp/jdk-test/build-release/make-support/failure-logs.
=== End of repeated output ===
",,,,,,,,,,JDK-8305605,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux_ubuntu,,,,,,,"0|i2yl1n:",9223372036854775807,b17,,,,,,,,,,,"2022-09-22 00:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10386
Date: 2022-09-22 07:02:16 +0000;;;","2022-09-26 20:13;dukebot;Changeset: 02ea3381
Author:    Hao Sun <haosun@openjdk.org>
Committer: Ningsheng Jian <njian@openjdk.org>
Date:      2022-09-27 03:09:18 +0000
URL:       https://git.openjdk.org/jdk/commit/02ea338177df781912dc782e32200eaf4731a0da
;;;","2023-03-31 12:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1231
Date: 2023-03-30 23:56:53 +0000;;;","2023-04-03 13:11;dlutker;Fix Request [17u]
Clean backport to to resolve GCC 12 compiler warnings. Tested with a backport of https://bugs.openjdk.org/browse/JDK-8294281 with GCC 12.2.0 on linux aarch64. ;;;",,,,,,,,,,,,,,,,,,,
Make runtime/Thread/ThreadCountLimit.java more robust,JDK-8293872,5083489,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-09-15 09:56,2022-10-11 11:48,2023-10-01 09:56,2022-09-26 05:45,17,19,20,,,,20,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,,,"I am seeing this failure frequently on linux-x86:

```
$ CONF=linux-x86-server-fastdebug make test TEST=runtime/Thread/ThreadCountLimit.java
...
stdout:
[1.852s][warning][os,thread] Failed to start thread ""Unknown thread"" - pthread_create failed (EAGAIN) for attributes: stacksize: 320k, guardsize: 0k, detached.
[1.852s][warning][os,thread] Failed to start the native thread for java.lang.Thread ""Thread-8246""
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 8388608 bytes for Failed to reserve memory for metaspace
# An error report file with more information is saved as:
# /home/shade/trunks/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_Thread_ThreadCountLimit_java/scratch/0/hs_err_pid2107279.log
[2.019s][warning][os       ] Loading hsdis library failed
```

It usually crashes when it tries to do heavy stuff in `OutOfMemoryError` block, which ends up either allocating the metadata for string concat method handles (the most frequent case), or allocating memory for resulting Strings. Sometimes even the threads themselves end up receiving a secondary OOM after main loop catches it.

I think we can strengthen this test significantly, by avoiding unnecessary things in dangerous loops.

Additionally, since the test can foobar the VM and/or experience heap memory runaway, it needs to run with othervm and fixed heap size.

After JDK-8255450, this test still runs in tier2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yktv:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-15 10:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10290
Date: 2022-09-15 17:06:40 +0000;;;","2022-09-26 05:45;dukebot;Changeset: 36b61c5d
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-09-26 12:44:04 +0000
URL:       https://git.openjdk.org/jdk/commit/36b61c5d7e7732924f494fa24c0e286e41279fc3
;;;",,,,,,,,,,,,,,,,,,,,,
"[lworld] remove support for @__primitive__ and @__value__ for declaring primitive, value classes",JDK-8293868,5083485,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-09-15 08:42,2022-10-07 13:58,2023-10-01 09:56,2022-09-15 11:42,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,noreg-cleanup,,,,,,,,,,,,,,,,,this support seems like an experimental left-over,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293551,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yksz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-09-15 11:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/757
Date: 2022-09-15 18:26:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Kitchensink24HStress.java fails with SIGSEGV in JfrCheckpointManager::lease,JDK-8293864,5083476,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,dcubed,dcubed,2022-09-15 07:32,2023-01-26 10:24,2023-10-01 09:56,2022-10-10 05:43,19,20,,,,,20,hotspot,,0,tier8,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

applications/kitchensink/Kitchensink24HStress.java

Here's a snippet from the log file:

The tail of stress stdout is:
For random generator using seed: -4554880919762113761
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=-4554880919762113761"" to command line.
Stress process main method is started.
[9750.598s][warning][gc] GC locker is held; pre-dump GC was skipped
[13671.035s][warning][gc] GC locker is held; pre-dump GC was skipped
[14124.153s][warning][gc] GC locker is held; pre-dump GC was skipped
[24159.340s][warning][gc] GC locker is held; pre-dump GC was skipped
[24591.979s][warning][gc] GC locker is held; pre-dump GC was skipped
[30703.766s][warning][gc] GC locker is held; pre-dump GC was skipped
[33326.421s][warning][gc] GC locker is held; pre-dump GC was skipped
[35903.100s][warning][gc] GC locker is held; pre-dump GC was skipped
[40289.618s][warning][gc] GC locker is held; pre-dump GC was skipped
[54716.844s][warning][gc] GC locker is held; pre-dump GC was skipped
[58636.492s][warning][gc] GC locker is held; pre-dump GC was skipped
[71193.498s][warning][gc] GC locker is held; pre-dump GC was skipped
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f2d934064e0, pid=1852074, tid=2755448
#
# JRE version: Java(TM) SE Runtime Environment (20.0+15) (build 20-ea+15-995)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (20-ea+15-995, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8c64e0]  JfrCheckpointManager::lease(Thread*, bool, unsigned long)+0x70
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S61378/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5a65d1a0-d544-4113-9107-e10dbe41799f/runs/16080598-87bb-4f8d-831b-bf4ed05a21fe/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java/scratch/0/core.1852074)
#
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S61378/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5a65d1a0-d544-4113-9107-e10dbe41799f/runs/16080598-87bb-4f8d-831b-bf4ed05a21fe/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java/scratch/0/hs_err_pid1852074.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S61378/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5a65d1a0-d544-4113-9107-e10dbe41799f/runs/16080598-87bb-4f8d-831b-bf4ed05a21fe/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java/scratch/0/hs_err_pid1852074.log
[thread 2685319 also had an error][thread 2685318 also had an error]


------ Timeout during error reporting after 120 s. ------
----------System.err:(777/68210)----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f2b74a91270):  JavaThread ""MemAccessWorkerThread"" [_thread_new, id=2755448, stack(0x00007f2cb0f82000,0x00007f2cb1083000)]

Stack: [0x00007f2cb0f82000,0x00007f2cb1083000],  sp=0x00007f2cb1081c90,  free space=1023k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8c64e0]  JfrCheckpointManager::lease(Thread*, bool, unsigned long)+0x70  (jfrIterator.hpp:44)
V  [libjvm.so+0x8cdb2c]  JfrCheckpointWriter::JfrCheckpointWriter(Thread*, bool, JfrCheckpointType, bool)+0x2c  (jfrCheckpointWriter.cpp:49)
V  [libjvm.so+0x92f6ea]  JfrTypeManager::write_checkpoint(Thread*, unsigned long, oopDesc*)+0x8a  (jfrTypeManager.cpp:122)
V  [libjvm.so+0x92342c]  JfrThreadLocal::on_start(Thread*)+0x9c  (jfrThreadLocal.cpp:119)
V  [libjvm.so+0xe4756c]  Thread::call_run()+0x6c  (thread.cpp:211)
V  [libjvm.so+0xc7fe18]  thread_native_entry(Thread*)+0xd8  (os_linux.cpp:710)


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000008dd8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287699,JDK-8289692,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,,"0|i2ykqz:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-09-28 05:15;mgronlun;With JDK-8289692, a need arose to introduce a mutex mechanism for the buffers on the global list to prevent the JFR Recorder Thread from resetting buffers currently in use.

The introduced mutex mechanism was adequate as far as preventing the race condition. However, its protective characteristic was overemphasized, leading to the mistake of introducing a release, or removal, operation onto a current epoch list, as part of periodic flushing. The problem is that although the callback operations are safe, the underlying list type used with the global mspace does not allow for concurrent excision of nodes. The crash occurs because a thread attempts to dereference the next pointer to traverse a node that is excised and deleted after the thread loaded it.

I have reviewed how to handle better the introduction of virtual threads and their checkpoint data. I have concluded that the best way is to preserve the old system (pre-Loom) as much as possible, keeping the global and thread-local mspaces as before. Instead, an additional mspace dedicated solely to virtual threads is introduced. This categorization preserves the matching of operations against the underlying list infrastructure. It also provides flexibility in handling virtual threads distinct from regular, or ""carrier"", threads. The separate mspace of virtual threads is more dynamic as it does not need to preallocate buffers, a memory win for systems not using virtual threads. Also, the sizes of the different buffer types can be better controlled. With this restructuring, there are no longer any list concurrency issues; hence the mutex mechanism introduced with JDK-8289692 becomes obsolete. Applying a release operation for the current epoch list, of the global mspace, as part of flushing is a broken invariant and is therefore removed.
;;;","2022-09-28 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10467
Date: 2022-09-28 12:33:20 +0000;;;","2022-10-10 05:43;dukebot;Changeset: 35d17a00
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-10-10 12:39:10 +0000
URL:       https://git.openjdk.org/jdk/commit/35d17a00ab4028071a8fc7cd781b3306e6811970
;;;",,,,,,,,,,,,,,,,,,,,
"javax/swing/JFileChooser/8046391/bug8046391.java failed with 'Cannot invoke ""java.awt.Image.getWidth(java.awt.image.ImageObserver)"" because ""retVal"" is null'",JDK-8293862,5083473,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,dcubed,dcubed,2022-09-15 07:14,2023-04-06 08:34,2023-10-01 09:56,2023-01-19 05:01,20,,,,,,21,client-libs,,0,11-na,17-bp,cssn23_01_01,intermittent,problemlist,regression,regression_8182043,regression_8282526,sn_129,sn_130,sn_131,sn_132,sn_133,sn_134,sustaining,test_sprint,test_sprint_nov_2022,tier3,,"The following test failed in the JDK20 CI:

javax/swing/JFileChooser/8046391/bug8046391.java

Here's a snippet from the log file:

----------System.out:(1/26)----------
Creating JFileChooser...
----------System.err:(65/5775)----------
java.lang.reflect.InvocationTargetException
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
	at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
	at bug8046391.main(bug8046391.java:52)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.awt.Image.getWidth(java.awt.image.ImageObserver)"" because ""retVal"" is null
	at java.desktop/sun.awt.shell.Win32ShellFolder2$MultiResolutionIconImage.getResolutionVariant(Win32ShellFolder2.java:1440)
	at java.desktop/sun.awt.shell.Win32ShellFolder2$MultiResolutionIconImage.getBaseImage(Win32ShellFolder2.java:1419)
	at java.desktop/java.awt.image.AbstractMultiResolutionImage.getProperty(AbstractMultiResolutionImage.java:140)
	at java.desktop/javax.swing.ImageIcon.<init>(ImageIcon.java:255)
	at java.desktop/javax.swing.ImageIcon.<init>(ImageIcon.java:241)
	at java.desktop/javax.swing.filechooser.FileSystemView.getSystemIcon(FileSystemView.java:252)
	at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$WindowsFileView.getIcon(WindowsFileChooserUI.java:1352)
	at java.desktop/javax.swing.JFileChooser.getIcon(JFileChooser.java:1613)
	at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$DirectoryComboBoxRenderer.getListCellRendererComponent(WindowsFileChooserUI.java:1047)
	at java.desktop/javax.swing.plaf.basic.BasicListUI.updateLayoutState(BasicListUI.java:1444)
	at java.desktop/javax.swing.plaf.basic.BasicListUI.maybeUpdateLayoutState(BasicListUI.java:1394)
	at java.desktop/javax.swing.plaf.basic.BasicListUI$Handler.valueChanged(BasicListUI.java:2815)
	at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:229)
	at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:204)
	at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:256)
	at java.desktop/javax.swing.DefaultListSelectionModel.changeSelection(DefaultListSelectionModel.java:453)
	at java.desktop/javax.swing.DefaultListSelectionModel.changeSelection(DefaultListSelectionModel.java:463)
	at java.desktop/javax.swing.DefaultListSelectionModel.setSelectionInterval(DefaultListSelectionModel.java:507)
	at java.desktop/javax.swing.JList.setSelectedIndex(JList.java:2232)
	at java.desktop/javax.swing.plaf.basic.BasicComboPopup.setListSelection(BasicComboPopup.java:1273)
	at java.desktop/javax.swing.plaf.basic.BasicComboPopup$Handler.itemStateChanged(BasicComboPopup.java:1097)
	at java.desktop/javax.swing.JComboBox.fireItemStateChanged(JComboBox.java:1257)
	at java.desktop/javax.swing.JComboBox.selectedItemChanged(JComboBox.java:1318)
	at java.desktop/javax.swing.JComboBox.contentsChanged(JComboBox.java:1365)
	at java.desktop/javax.swing.AbstractListModel.fireContentsChanged(AbstractListModel.java:127)
	at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$DirectoryComboBoxModel.setSelectedItem(WindowsFileChooserUI.java:1190)
	at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$DirectoryComboBoxModel.addItem(WindowsFileChooserUI.java:1161)
	at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI.doDirectoryChanged(WindowsFileChooserUI.java:777)
	at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$11.propertyChange(WindowsFileChooserUI.java:868)
	at java.desktop/java.beans.PropertyChangeSupport.fire(PropertyChangeSupport.java:343)
	at java.desktop/java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:335)
	at java.desktop/java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:268)
	at java.desktop/java.awt.Component.firePropertyChange(Component.java:8716)
	at java.desktop/javax.swing.JFileChooser.setCurrentDirectory(JFileChooser.java:610)
	at java.desktop/javax.swing.JFileChooser.<init>(JFileChooser.java:364)
	at java.desktop/javax.swing.JFileChooser.<init>(JFileChooser.java:310)
	at bug8046391.lambda$main$0(bug8046391.java:59)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException
----------rerun:(41/5073)*----------",,,,,,,,,,JDK-8302557,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299893,,JDK-8227257,,,,JDK-8182043,JDK-8282526,,,,,,,,,,,,,,x86_64,,,,,,,17,,windows,,,,,,,"0|i2ykqb:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-11-11 00:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11104
Date: 2022-11-11 08:18:19 +0000;;;","2022-11-21 12:12;aivanov;This error also occurs when running test/jdk/javax/swing/JFileChooser/4847375/bug4847375.java

----------System.err:(66/5810)----------
java.lang.reflect.InvocationTargetException
        at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
        at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
        at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
        at bug4847375.main(bug4847375.java:53)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
        at java.base/java.lang.Thread.run(Thread.java:1591)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.awt.Image.getWidth(java.awt.image.ImageObserver)"" because ""retVal"" is null
        at java.desktop/sun.awt.shell.Win32ShellFolder2$MultiResolutionIconImage.getResolutionVariant(Win32ShellFolder2.java:1440)
        at java.desktop/sun.awt.shell.Win32ShellFolder2$MultiResolutionIconImage.getBaseImage(Win32ShellFolder2.java:1419)
        at java.desktop/java.awt.image.AbstractMultiResolutionImage.getProperty(AbstractMultiResolutionImage.java:140)
        at java.desktop/javax.swing.ImageIcon.<init>(ImageIcon.java:255)
        at java.desktop/javax.swing.ImageIcon.<init>(ImageIcon.java:241)
        at java.desktop/javax.swing.filechooser.FileSystemView.getSystemIcon(FileSystemView.java:252)
        at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$WindowsFileView.getIcon(WindowsFileChooserUI.java:1352)
        at java.desktop/javax.swing.JFileChooser.getIcon(JFileChooser.java:1613)
        at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$DirectoryComboBoxRenderer.getListCellRendererComponent(WindowsFileChooserUI.java:1047)
        at java.desktop/javax.swing.plaf.basic.BasicListUI.updateLayoutState(BasicListUI.java:1444)
        at java.desktop/javax.swing.plaf.basic.BasicListUI.maybeUpdateLayoutState(BasicListUI.java:1394)
        at java.desktop/javax.swing.plaf.basic.BasicListUI$Handler.valueChanged(BasicListUI.java:2815)
        at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:229)
        at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:204)
        at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:256)
        at java.desktop/javax.swing.DefaultListSelectionModel.changeSelection(DefaultListSelectionModel.java:453)
        at java.desktop/javax.swing.DefaultListSelectionModel.changeSelection(DefaultListSelectionModel.java:463)
        at java.desktop/javax.swing.DefaultListSelectionModel.setSelectionInterval(DefaultListSelectionModel.java:507)
        at java.desktop/javax.swing.JList.setSelectedIndex(JList.java:2232)
        at java.desktop/javax.swing.plaf.basic.BasicComboPopup.setListSelection(BasicComboPopup.java:1273)
        at java.desktop/javax.swing.plaf.basic.BasicComboPopup$Handler.itemStateChanged(BasicComboPopup.java:1097)
        at java.desktop/javax.swing.JComboBox.fireItemStateChanged(JComboBox.java:1257)
        at java.desktop/javax.swing.JComboBox.selectedItemChanged(JComboBox.java:1318)
        at java.desktop/javax.swing.JComboBox.contentsChanged(JComboBox.java:1365)
        at java.desktop/javax.swing.AbstractListModel.fireContentsChanged(AbstractListModel.java:127)
        at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$DirectoryComboBoxModel.setSelectedItem(WindowsFileChooserUI.java:1190)
        at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$DirectoryComboBoxModel.addItem(WindowsFileChooserUI.java:1161)
        at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI.doDirectoryChanged(WindowsFileChooserUI.java:777)
        at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$11.propertyChange(WindowsFileChooserUI.java:868)
        at java.desktop/java.beans.PropertyChangeSupport.fire(PropertyChangeSupport.java:343)
        at java.desktop/java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:335)
        at java.desktop/java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:268)
        at java.desktop/java.awt.Component.firePropertyChange(Component.java:8716)
        at java.desktop/javax.swing.JFileChooser.setCurrentDirectory(JFileChooser.java:610)
        at java.desktop/javax.swing.JFileChooser.<init>(JFileChooser.java:364)
        at java.desktop/javax.swing.JFileChooser.<init>(JFileChooser.java:310)
        at bug4847375.<init>(bug4847375.java:79)
        at bug4847375$1.run(bug4847375.java:55)
        at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
        at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
        at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
        at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
        at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
        at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
        at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
        at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
        at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
        at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
        at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
        at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException

---------------------

When this bug is fixed, the bugid should also be added to bug4847375.java.;;;","2022-12-08 08:53;dcubed;Moved here from JDK-8227257: 

dcubed Daniel Daugherty added a comment - 2022-10-19 09:18
Here's a log file snippet from the jdk-20+20-1456-tier3 sighting: 

javax/swing/JFileChooser/4847375/bug4847375.java 

----------System.err:(66/5810)---------- 
java.lang.reflect.InvocationTargetException 
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371) 
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346) 
at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480) 
at bug4847375.main(bug4847375.java:53) 
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104) 
at java.base/java.lang.reflect.Method.invoke(Method.java:578) 
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125) 
at java.base/java.lang.Thread.run(Thread.java:1591) 
Caused by: java.lang.NullPointerException: Cannot invoke ""java.awt.Image.getWidth(java.awt.image.ImageObserver)"" because ""retVal"" is null 
at java.desktop/sun.awt.shell.Win32ShellFolder2$MultiResolutionIconImage.getResolutionVariant(Win32ShellFolder2.java:1440) 
at java.desktop/sun.awt.shell.Win32ShellFolder2$MultiResolutionIconImage.getBaseImage(Win32ShellFolder2.java:1419) 
at java.desktop/java.awt.image.AbstractMultiResolutionImage.getProperty(AbstractMultiResolutionImage.java:140) 
at java.desktop/javax.swing.ImageIcon.<init>(ImageIcon.java:255) 
at java.desktop/javax.swing.ImageIcon.<init>(ImageIcon.java:241) 
at java.desktop/javax.swing.filechooser.FileSystemView.getSystemIcon(FileSystemView.java:252) 
at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$WindowsFileView.getIcon(WindowsFileChooserUI.java:1352) 
at java.desktop/javax.swing.JFileChooser.getIcon(JFileChooser.java:1613) 
at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$DirectoryComboBoxRenderer.getListCellRendererComponent(WindowsFileChooserUI.java:1047)
at java.desktop/javax.swing.plaf.basic.BasicListUI.updateLayoutState(BasicListUI.java:1444) 
at java.desktop/javax.swing.plaf.basic.BasicListUI.maybeUpdateLayoutState(BasicListUI.java:1394) 
at java.desktop/javax.swing.plaf.basic.BasicListUI$Handler.valueChanged(BasicListUI.java:2815) 
at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:229) 
at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:204) 
at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:256) 
at java.desktop/javax.swing.DefaultListSelectionModel.changeSelection(DefaultListSelectionModel.java:453) 
at java.desktop/javax.swing.DefaultListSelectionModel.changeSelection(DefaultListSelectionModel.java:463) 
at java.desktop/javax.swing.DefaultListSelectionModel.setSelectionInterval(DefaultListSelectionModel.java:507) 
at java.desktop/javax.swing.JList.setSelectedIndex(JList.java:2232) 
at java.desktop/javax.swing.plaf.basic.BasicComboPopup.setListSelection(BasicComboPopup.java:1273) 
at java.desktop/javax.swing.plaf.basic.BasicComboPopup$Handler.itemStateChanged(BasicComboPopup.java:1097) 
at java.desktop/javax.swing.JComboBox.fireItemStateChanged(JComboBox.java:1257) 
at java.desktop/javax.swing.JComboBox.selectedItemChanged(JComboBox.java:1318) 
at java.desktop/javax.swing.JComboBox.contentsChanged(JComboBox.java:1365) 
at java.desktop/javax.swing.AbstractListModel.fireContentsChanged(AbstractListModel.java:127) 
at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$DirectoryComboBoxModel.setSelectedItem(WindowsFileChooserUI.java:1190) 
at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$DirectoryComboBoxModel.addItem(WindowsFileChooserUI.java:1161) 
at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI.doDirectoryChanged(WindowsFileChooserUI.java:777) 
at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$11.propertyChange(WindowsFileChooserUI.java:868) 
at java.desktop/java.beans.PropertyChangeSupport.fire(PropertyChangeSupport.java:343) 
at java.desktop/java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:335) 
at java.desktop/java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:268) 
at java.desktop/java.awt.Component.firePropertyChange(Component.java:8716) 
at java.desktop/javax.swing.JFileChooser.setCurrentDirectory(JFileChooser.java:610) 
at java.desktop/javax.swing.JFileChooser.<init>(JFileChooser.java:364) 
at java.desktop/javax.swing.JFileChooser.<init>(JFileChooser.java:310) 
at bug4847375.<init>(bug4847375.java:79) 
at bug4847375$1.run(bug4847375.java:55) 
at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308) 
at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773) 
at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720) 
at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714) 
at java.base/java.security.AccessController.doPrivileged(AccessController.java:400) 
at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87) 
at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742) 
at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203) 
at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124) 
at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113) 
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109) 
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101) 
at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90) 

JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException 
JavaTest Message: shutting down test 

STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException 
----------rerun:(43/4796)*---------- 


The ""caused by"" portion is different for this failure (and most of the recent failures that 
are linked to this bug): 

Caused by: java.lang.NullPointerException: Cannot invoke ""java.awt.Image.getWidth(java.awt.image.ImageObserver)"" because ""retVal"" is null 

The original ""caused by"" is: 

Caused by: java.lang.AssertionError;;;","2022-12-08 08:55;dcubed;Moved here from JDK-8227257:

dcubed Daniel Daugherty added a comment - 2022-10-27 13:40
Here's a log file snippet for the jdk-20+21-1547-tier3 sighting: 

javax/swing/JFileChooser/4847375/bug4847375.java 

#section:main 
----------messages:(7/429)---------- 
command: main bug4847375 
reason: Assumed action based on file name: run main bug4847375 
started: Thu Oct 27 16:54:14 UTC 2022 
Mode: othervm 
Additional options from @modules: --add-modules java.desktop --add-exports java.desktop/sun.awt=ALL-UNNAMED --add-exports java.desktop/sun.awt.shell=ALL-UNNAMED --add-opens java.desktop/sun.awt.shell=ALL-UNNAMED 
finished: Thu Oct 27 16:54:16 UTC 2022 
elapsed time (seconds): 1.427 
----------configuration:(6/223)---------- 
Boot Layer 
  add modules: java.desktop 
  add exports: java.desktop/sun.awt ALL-UNNAMED 
               java.desktop/sun.awt.shell ALL-UNNAMED 
  add opens: java.desktop/sun.awt.shell ALL-UNNAMED 

----------System.out:(0/0)---------- 
----------System.err:(66/5810)---------- 
java.lang.reflect.InvocationTargetException 
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371) 
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346) 
at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480) 
at bug4847375.main(bug4847375.java:53) 
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104) 
at java.base/java.lang.reflect.Method.invoke(Method.java:578) 
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125) 
at java.base/java.lang.Thread.run(Thread.java:1591) 
Caused by: java.lang.NullPointerException: Cannot invoke ""java.awt.Image.getWidth(java.awt.image.ImageObserver)"" because ""retVal"" is null 
at java.desktop/sun.awt.shell.Win32ShellFolder2$MultiResolutionIconImage.getResolutionVariant(Win32ShellFolder2.java:1440) 
at java.desktop/sun.awt.shell.Win32ShellFolder2$MultiResolutionIconImage.getBaseImage(Win32ShellFolder2.java:1419) 
at java.desktop/java.awt.image.AbstractMultiResolutionImage.getProperty(AbstractMultiResolutionImage.java:140) 
at java.desktop/javax.swing.ImageIcon.<init>(ImageIcon.java:255) 
at java.desktop/javax.swing.ImageIcon.<init>(ImageIcon.java:241) 
at java.desktop/javax.swing.filechooser.FileSystemView.getSystemIcon(FileSystemView.java:252) 
at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$WindowsFileView.getIcon(WindowsFileChooserUI.java:1352) 
at java.desktop/javax.swing.JFileChooser.getIcon(JFileChooser.java:1613) 
at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$DirectoryComboBoxRenderer.getListCellRendererComponent(WindowsFileChooserUI.java:1047)
at java.desktop/javax.swing.plaf.basic.BasicListUI.updateLayoutState(BasicListUI.java:1444) 
at java.desktop/javax.swing.plaf.basic.BasicListUI.maybeUpdateLayoutState(BasicListUI.java:1394) 
at java.desktop/javax.swing.plaf.basic.BasicListUI$Handler.valueChanged(BasicListUI.java:2815) 
at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:229) 
at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:204) 
at java.desktop/javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:256) 
at java.desktop/javax.swing.DefaultListSelectionModel.changeSelection(DefaultListSelectionModel.java:453) 
at java.desktop/javax.swing.DefaultListSelectionModel.changeSelection(DefaultListSelectionModel.java:463) 
at java.desktop/javax.swing.DefaultListSelectionModel.setSelectionInterval(DefaultListSelectionModel.java:507) 
at java.desktop/javax.swing.JList.setSelectedIndex(JList.java:2232) 
at java.desktop/javax.swing.plaf.basic.BasicComboPopup.setListSelection(BasicComboPopup.java:1273) 
at java.desktop/javax.swing.plaf.basic.BasicComboPopup$Handler.itemStateChanged(BasicComboPopup.java:1097) 
at java.desktop/javax.swing.JComboBox.fireItemStateChanged(JComboBox.java:1257) 
at java.desktop/javax.swing.JComboBox.selectedItemChanged(JComboBox.java:1318) 
at java.desktop/javax.swing.JComboBox.contentsChanged(JComboBox.java:1365) 
at java.desktop/javax.swing.AbstractListModel.fireContentsChanged(AbstractListModel.java:127) 
at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$DirectoryComboBoxModel.setSelectedItem(WindowsFileChooserUI.java:1190) 
at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$DirectoryComboBoxModel.addItem(WindowsFileChooserUI.java:1161) 
at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI.doDirectoryChanged(WindowsFileChooserUI.java:777) 
at java.desktop/com.sun.java.swing.plaf.windows.WindowsFileChooserUI$11.propertyChange(WindowsFileChooserUI.java:868) 
at java.desktop/java.beans.PropertyChangeSupport.fire(PropertyChangeSupport.java:343) 
at java.desktop/java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:335) 
at java.desktop/java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:268) 
at java.desktop/java.awt.Component.firePropertyChange(Component.java:8716) 
at java.desktop/javax.swing.JFileChooser.setCurrentDirectory(JFileChooser.java:610) 
at java.desktop/javax.swing.JFileChooser.<init>(JFileChooser.java:364) 
at java.desktop/javax.swing.JFileChooser.<init>(JFileChooser.java:310) 
at bug4847375.<init>(bug4847375.java:79) 
at bug4847375$1.run(bug4847375.java:55) 
at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308) 
at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773) 
at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720) 
at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714) 
at java.base/java.security.AccessController.doPrivileged(AccessController.java:400) 
at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87) 
at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742) 
at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203) 
at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124) 
at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113) 
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109) 
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101) 
at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90) 

JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException 
JavaTest Message: shutting down test 

STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException 
----------rerun:(43/4796)*----------;;;","2023-01-03 15:51;vdyakov;PR is against mainline, hence targeted to 21;;;","2023-01-16 05:27;aivanov;Root cause:

The icon extraction code compares the returned handle to zero: if (hIcon <= 0). On 64-bit systems, a valid handle can be negative. For example:

getIcon : Desktop 16(16)
GetIconLocation(uFlags=0x22, flags=0x4, index=-110) SUCCESS - szBuf=C:\Windows\system32\imageres.dll
Extract - hres: 0, hIcon=0000000019B200F9, hIconSmall=FFFFFFFFF98C00EB, size=16(0x100020)
SUCCEEDED
!!! hIcon(0xfffffffff98c00eb) <= 0 : Desktop 16(16)

The icon was extracted successfully but its handle was interpreted as an error.

The same problem exists in the fallback code.

Then when fallback code is executed, another problem occurs:

GetIconLocation(uFlags=0x40, flags=0x1a3, index=-675088752) SUCCESS - szBuf=
Extract - hres: 80004005, hIcon=0000000000000000, hIconSmall=000001A3D7C2F83A, size=16(100020)
NOT SUCCEEDED
hIcon = 0x1a3d7c2f83a : Desktop 16(16)

The error code 0x80004005 is E_FAIL.

Since the icon handle is seemingly valid, it continues to extracting the icon bits:

native getIconBits - fn_GetIconInfo returned false
Error code: 0x57a - Invalid cursor handle.
makeIcon: iconBits = null

It's not a surprise. After all, the Extract method returned an error, which means neither icon handle is valid.

In the end, the MultiResolutionIcon contains null:
    16 -> null
    32 -> BufferedImage@59e735d
    24 -> BufferedImage@60b2faf0


This problem has existed since JDK-8182043, yet it went unnoticed because getResolutionVariant just returned a null. However, after JDK-8282526 was integrated, the result is used, which results in NullPointerException.


The fix:
Handle the errors.
Add assert statements to MultiResolutionIconImage for null-checks.;;;","2023-01-16 06:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12010
Date: 2023-01-16 14:19:52 +0000;;;","2023-01-19 05:01;dukebot;Changeset: 2e4a3c47
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-01-19 13:00:09 +0000
URL:       https://git.openjdk.org/jdk/commit/2e4a3c47e262f91a7f881d9d990eb81a929d1627
;;;",,,,,,,,,,,,,,,
PrintIdealPhase in compiler directives file is ignored when used with other compile commands,JDK-8293849,5083459,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,chagedorn,chagedorn,chagedorn,2022-09-15 02:01,2022-09-26 09:39,2023-10-01 09:56,2022-09-19 03:20,19,20,,,,,20,hotspot,,0,compilercontrol,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,"When using a file commands.json with PrintIdealPhase:
[
  {
    match : ""Test::*"",
    log : true,
    PrintIdealPhase : ""BEFORE_MATCHING""
  }
]

together with other compile commands specified in compilerdirectives_common_flags and/or compilerdirectives_c2_flags, then the PrintIdealPhase option is ignored.

Example:

class Test {
    public static void main(String[] args) {
        for (int i = 0; i < 10000; i++) {
            test();
        }
    }

    public static void test() {}
}

Without additional compile command - prints ideal graph of phase AFTER_PARSING:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test -XX:CompilerDirectivesFile=commands.json Test.java

With additional compile command - only prints inlining information but no ideal graph:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test -XX:CompilerDirectivesFile=commands.json -XX:CompileCommand=PrintInlining,Test::*,true Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281505,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ykn7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-15 02:03;chagedorn;ILW = Ignored directive from directives file when using together with compile command, only with directives file and compile command, no workaround = LLH = P5;;;","2022-09-15 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10283
Date: 2022-09-15 11:20:06 +0000;;;","2022-09-19 03:20;dukebot;Changeset: d41f69f9
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-09-19 10:16:21 +0000
URL:       https://git.openjdk.org/jdk/commit/d41f69f9c0297fe78884b5aa2d149745215ec9d2
;;;",,,,,,,,,,,,,,,,,,,,
Rendering performance degradation at bottom of TableView with many rows,JDK-8293836,5083188,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvos,webbuggrp,webbuggrp,2022-09-11 13:33,2023-09-06 03:01,2023-10-01 09:56,2023-06-02 06:17,jfx19,jfx20,,,,,jfx21,javafx,,0,additional-information-received,dcspn,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Checked on Windows, Linux

A DESCRIPTION OF THE PROBLEM :
When a table has many rows, there is a noticeable performance degradation when rendering bottom of the table.

Works fine when showing upper part of the table.
Problem occurs on version 19-ea+9 and up.

REGRESSION : Last worked in version 18.0.2.1

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
TableView with many rows:
 - scroll to the bottom
 - try to resize window, or select one row and then press (and hold) up/down arrow to select other rows
You should see lagging during window resize, selecting rows or table scrolling


---------- BEGIN SOURCE ----------
public class App extends Application {

    @Override
    public void start(Stage stage) throws Exception {
    	List<String> rows = IntStream.rangeClosed(1, 1000_000).boxed()
    			.map(i -> ""row-"" + i)
    			.collect(Collectors.toList());
    	
        TableView<String> tableView = new TableView<>();
        TableColumn<String, String> tc = new TableColumn<>(""column-1"");
        tc.setCellValueFactory(p -> new ReadOnlyStringWrapper(p.getValue()));
        tc.setPrefWidth(200);
		tableView.getColumns().add(tc);
		tableView.setItems(FXCollections.observableArrayList(rows));

        var scene = new Scene(new StackPane(tableView), 250, 200);
        stage.setScene(scene);
        stage.show();
        
        tableView.scrollTo(rows.size());
    }

    public static void main(String[] args) {
        launch();
    }

}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8315764,,,,,,,,,,,,,,,,,,,,,JDK-8309156,,,,,,JDK-8313639,,,,,,,,,,,,"2022-09-14 23:01;pnarayanaswa;App.java;https://bugs.openjdk.org/secure/attachment/100763/App.java","2022-09-15 12:29;angorya;Screen Shot 2022-09-15 at 12.20.14.png;https://bugs.openjdk.org/secure/attachment/100770/Screen+Shot+2022-09-15+at+12.20.14.png","2022-09-15 12:29;angorya;Screen Shot 2022-09-15 at 12.27.48.png;https://bugs.openjdk.org/secure/attachment/100771/Screen+Shot+2022-09-15+at+12.27.48.png",,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yiyz:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-09-14 23:01;pnarayanaswa;Checked with attached test case in Windows 10, issue is reproducible, when traversing rows using up/down arrow key, the selection is not swift, lag is observed from openjfx19ea10
Test Result
=========
openjfx11: Pass
openjfx17: Pass
openjfx18: Pass
openjfx19e8: Pass
openjfx19ea9: Fail  <-Regression
openjfx19ea10: Fail
oepnjfx19: Fail
openjfx20ea1: Fail ;;;","2022-09-15 12:31;mhanl;This was introduced by the fix for JDK-8277785.
Related commit: https://github.com/openjdk/jfx/commit/b8302f64f49e746a8645020cb778a4f3e4f4b893

The more you scroll, the worse the performance becomes. 
Setting a fixed cell size does make it a little bit better, but not much.
Didn't had a close look but maybe Johan knows what is happening here.;;;","2022-09-15 12:33;angorya;[~jvos] :
could you please take a look at this?  a quick check indicates the time is spent in VirtualFrlow:computeViewportOffset.

I wonder if for large models there needs to be a different approach to estimate, rather than get exact value, but I could be wrong.  Or perhaps there should be multiple (internal) policies to deal with large models, fixed row size models, and small models that have variable row widths...;;;","2022-09-15 12:51;jvos;I'll have a look.
The ""one model fits all"" approach that we're currently taking is indeed really difficult, and a number of policies would make things easier -- but at the price of additional configuration (e.g. what is a large model, and does the developer need to decide what policy etc).
I think this particular fix can be solved in a generic way. The hard part is often to come up with a unittest that fails before.;;;","2022-09-15 12:56;angorya;thank you!

clarification: I was thinking that the VirtualFlow would be selecting different approaches internally based on the size of the model, whether the row height is fixed, whether it detects that row height does vary.

I had a similar problem in https://github.com/andy-goryachev/FxTextEditor , but since i did not solve it there yet, I'll keep my mouth shut.;;;","2023-02-15 01:47;pnarayanaswa;Additional Information from submitter:
============================
I think this performance problem can be fixed for tables with ""fixedCellSize"" enabled. Some methods in VirtualFlow.java are calculating height for many cells in a loop:

computeViewportOffset
adjustPositionToIndex
computeCurrentIndex
recalculateAndImproveEstimatedSize

Same values can be calculated in a single pass when we know that cell size is fixed. It adds a bit of complexity to those methods, but then table work fast even with a lot of rows.;;;","2023-03-30 16:17;mhanl;I think the whole item size cache is not needed when a fixed cell size is set.
Also from my profiling computeCurrentIndex() and computeViewportOffset() are also quite slow. 
I wonder if those methods can be optimized as well.;;;","2023-04-19 05:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1098
Date: 2023-04-19 12:14:45 +0000;;;","2023-05-26 13:16;angorya;Do have a similar issue with TreeTableView?;;;","2023-06-02 06:17;dukebot;Changeset: 10f41b7d
Author:    Johan Vos <jvos@openjdk.org>
Date:      2023-06-02 13:14:47 +0000
URL:       https://git.openjdk.org/jfx/commit/10f41b7d1f2f53ebe2bfdb61de495bbb7290d32d
;;;","2023-09-06 02:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/158
Date: 2023-09-06 09:41:35 +0000;;;",,,,,,,,,,,,
Update CLDR data following tzdata 2022c update,JDK-8293834,5083442,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,andrew,andrew,2022-09-14 19:15,2022-12-06 08:50,2023-10-01 09:56,2022-09-27 17:53,11,13,15,17,19,,19.0.2,core-libs,,0,20-na,8-na,cldr,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,,,,,,,,,,"The tzdata 2022c update introduced Europe/Kyiv as a new zone.

This doesn't seem to cause an issue with the COMPAT data as Europe/Kyiv and Europe/Kiev are linked.  However, the CLDR data will need to be updated.

See https://github.com/openjdk/jdk/pull/10012#issuecomment-1247209990

This bug is only for released JDKs, as 20 will resolve this with an update to CLDR v42.",,,,,,,,,,JDK-8297225,JDK-8298188,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293835,JDK-8292579,JDK-8284840,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2ykjf:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2022-09-16 10:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/26
Date: 2022-09-16 17:16:33 +0000;;;","2022-09-16 16:30;naoto;Cherry-pick from this commit: https://github.com/unicode-org/cldr/commit/6758857c63a3cbaafd9783defd500863277d844a;;;","2022-09-19 07:33;andrew;Fix Request [19u]

Above cherry-pick needed in update repositories to keep the CLDR data in sync with the updated tzdata. PR reviewed by Naoto.
;;;","2022-09-23 20:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/355
Date: 2022-09-24 03:16:50 +0000;;;","2022-09-27 17:53;dukebot;Changeset: e1023124
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2022-09-28 00:51:07 +0000
URL:       https://git.openjdk.org/jdk19u/commit/e10231248fc100f9dfa08468ac897f60b843857f
;;;","2022-09-28 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/752
Date: 2022-09-28 15:49:43 +0000;;;","2022-11-08 08:54;andrew;Fix Request [17u]:

Same change needed as for 19u. Patch is slightly different in that we also bring in a change from the CLDR v41 update (JDK-8265315) to use ""Kyiv"" rather than ""Kiev"" as the zone description. This change is already in 19u. Patch was reviewed by Paul Hohensee
;;;","2022-12-05 19:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1567
Date: 2022-12-06 03:03:04 +0000;;;","2022-12-06 08:24;andrew;Fix Request [11u]:

Same change needed as for 17u & 19u. Patch is slightly different to 17u due to the list of bug IDs in the test. This change is already in 17u & 19u. Patch was reviewed by Severin Gehwolf.;;;",,,,,,,,,,,,,,
Error mixing types with -XX:+UseCMoveUnconditionally -XX:+UseVectorCmov,JDK-8293833,5083441,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fgao,fgao,fgao,2022-09-14 18:54,2022-11-01 05:21,2023-10-01 09:56,2022-10-17 19:03,19,20,,,,,20,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,"We can see failures with the following tests

compiler/c2/TestCondAddDeadBranch.java
compiler/loopopts/TestCastFFAtPhi.java

when running with -XX:+UseCMoveUnconditionally -XX:+UseVectorCmov:

make test TEST=""test/hotspot/jtreg/compiler/c2/TestCondAddDeadBranch.java"" JTREG=""VM_OPTIONS=-XX:+UseCMoveUnconditionally -XX:+UseVectorCmov""

Error mixing types: vectory[4]:{double_top} and double_top
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (workspace/open/src/hotspot/share/opto/type.cpp:1179), pid=3589333, tid=3589359
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-09-09-0957028.tobias.hartmann.jdk2)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-09-09-0957028.tobias.hartmann.jdk2, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a95869]  Type::typerr(Type const*) const+0x79

Current CompileTask:
C2:    130   10    b        TestCastFFAtPhi::init (35 bytes)

Stack: [0x00007ff917726000,0x00007ff917827000],  sp=0x00007ff917821540,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1a95869]  Type::typerr(Type const*) const+0x79  (type.cpp:1179)
V  [libjvm.so+0x1a97f2b]  TypeVect::xmeet(Type const*) const+0x1eb  (type.cpp:2451)
V  [libjvm.so+0x1a9d203]  Type::meet_helper(Type const*, bool) const+0x73  (type.cpp:879)
V  [libjvm.so+0x1a9d41a]  Type::filter_helper(Type const*, bool) const+0x1a  (type.hpp:188)
V  [libjvm.so+0x1793690]  PhaseIterGVN::transform_old(Node*)+0x230  (phaseX.cpp:1294)
V  [libjvm.so+0x178b30e]  PhaseIterGVN::optimize()+0x6e  (phaseX.cpp:1203)
V  [libjvm.so+0xafeefa]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x6da  (loopnode.hpp:1169)
V  [libjvm.so+0xafb253]  Compile::Optimize()+0xe53  (compile.cpp:2171)
V  [libjvm.so+0xafd50d]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15ad  (compile.cpp:823)
V  [libjvm.so+0x90e2e5]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x675  (c2compiler.cpp:113)
V  [libjvm.so+0xb0ba5c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb1c  (compileBroker.cpp:2243)
V  [libjvm.so+0xb0c828]  CompileBroker::compiler_thread_loop()+0x5a8  (compileBroker.cpp:1917)
V  [libjvm.so+0x106c1dc]  JavaThread::thread_main_inner()+0x22c  (javaThread.cpp:700)
V  [libjvm.so+0x1a6dd10]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1708f13]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:710)

I reproduced the bug only on AVX2 not on AVX3. So if local is on AVX3, please reproduce it with:
make test TEST=""test/hotspot/jtreg/compiler/c2/TestCondAddDeadBranch.java"" JTREG=""VM_OPTIONS=-XX:+UseCMoveUnconditionally -XX:+UseVectorCmov -XX:UseAVX=2""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289422,,,,,,,,,,,,,,,x86,,,,,,,,,generic,,,,,,,"0|i2ykj7:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-15 07:31;chagedorn;ILW = C2 assertion in IGVN, only 2 tests with -XX:+UseCMoveUnconditionally -XX:+UseVectorCmov, disable UseCMoveUnconditionally and/or UseVectorCmov = HLL = P4;;;","2022-09-15 07:39;chagedorn;Starts to fail after JDK-8292260 which was only a backout and seems to be unrelated. Also affects JDK 19+36.;;;","2022-10-09 23:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10627
Date: 2022-10-10 06:12:11 +0000;;;","2022-10-17 19:03;dukebot;Changeset: 490fcd0c
Author:    Fei Gao <fgao@openjdk.org>
Committer: Ningsheng Jian <njian@openjdk.org>
Date:      2022-10-18 02:00:53 +0000
URL:       https://git.openjdk.org/jdk/commit/490fcd0c2547cb4e564363f0cd121c777c3acc02
;;;",,,,,,,,,,,,,,,,,,,
Padding computed by CallGeneratorHelper can be incorrect,JDK-8293827,5083433,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2022-09-14 14:33,2023-06-12 07:49,2023-10-01 09:56,2023-02-23 07:18,repo-panama,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,"CallGeneratorHelper (in the tests) computes layouts of struct with the following code:

                long offset = 0L;
                List<MemoryLayout> layouts = new ArrayList<>();
                long align = 0;
                for (StructFieldType field : fields) {
                    MemoryLayout l = field.layout();
                    long padding = offset % l.bitAlignment();
                    if (padding != 0) {
                        layouts.add(MemoryLayout.paddingLayout(padding));
                        offset += padding;
                    }
                    layouts.add(l.withName(""field"" + offset));
                    align = Math.max(align, l.bitAlignment());
                    offset += l.bitSize();
                }
                long padding = offset % align;
                if (padding != 0) {
                    layouts.add(MemoryLayout.paddingLayout(padding));
                }
                return MemoryLayout.structLayout(layouts.toArray(new MemoryLayout[0]));

However, the padding computation `offset % l.bitAlignment()` is incorrect.

Suppose we have a struct as follows:

    struct {
        char x;
        void* y;
    }

The offset after processing the first field is 8, and the alignment of the second field is 64. So the computed padding is 8 % 64 = 8 which is incorrect, as it should be 56, i.e. (64 - (8 % 64)) % 64, i.e. (l.bitAlignment() - (offset % l.bitAlignment())) % l.bitAlignment().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301239,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ykhf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-02-21 09:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/804
Date: 2023-02-21 14:11:40 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
"gc/whitebox/TestConcMarkCycleWB.java failed ""RuntimeException: assertTrue: expected true, was false""",JDK-8293824,5083429,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kbarrett,dcubed,dcubed,2022-09-14 13:16,2023-01-20 19:38,2023-10-01 09:56,2023-01-03 19:30,20,,,,,,20,hotspot,,0,tier7,Xcomp,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

gc/whitebox/TestConcMarkCycleWB.java

Here's a snippet from the log file:

#section:main
----------messages:(7/669)----------
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseG1GC gc.whitebox.TestConcMarkCycleWB
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseG1GC gc.whitebox.TestConcMarkCycleWB 
started: Wed Sep 14 19:31:11 UTC 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.compiler,java.management,jdk.internal.jvmstat --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports jdk.internal.jvmstat/sun.jvmstat.monitor=ALL-UNNAMED
finished: Wed Sep 14 19:32:50 UTC 2022
elapsed time (seconds): 99.148
----------configuration:(5/230)----------
Boot Layer
  add modules: java.base java.compiler java.management jdk.internal.jvmstat 
  add exports: java.base/jdk.internal.misc              ALL-UNNAMED
               jdk.internal.jvmstat/sun.jvmstat.monitor ALL-UNNAMED

----------System.out:(0/0)----------
----------System.err:(14/858)----------
java.lang.RuntimeException: assertTrue: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:472)
	at gc.whitebox.TestConcMarkCycleWB.main(TestConcMarkCycleWB.java:49)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: assertTrue: expected true, was false",,,,,,,,,,JDK-8299612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299701,JDK-8290025,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,,"0|i2ykgj:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2022-09-14 13:19;dcubed;Spotted in the jdk-20+15-1005-tier7 CI job set:

gc/whitebox/TestConcMarkCycleWB.java

https://mach5.us.oracle.com/mdash/jobs/mach5-one-jdk-20+15-1005-tier7-20220914-1759-36486937/tasks/mach5-one-jdk-20+15-1005-tier7-20220914-1759-36486937-tier7-comp-open_test_hotspot_jtreg_hotspot_gc-windows-x64-debug-37/results?search=status%3Afailed%20AND%20-state%3Ainvalid

https://mach5.us.oracle.com:10060/api/v1/results/mach5-one-jdk-20+15-1005-tier7-20220914-1759-36486937-tier7-comp-open_test_hotspot_jtreg_hotspot_gc-windows-x64-debug-37-1663184457-255/log

windows-x64-debug: win2019-x64-414726.s4.javaplatfo1iad.oraclevcn.com

The test task's JVM args are:
-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -XX:-DoEscapeAnalysis;;;","2022-09-16 01:22;kbarrett;The failure indicates WhiteBox.g1StartConcMarkCycle returned false.  That function returns true unless there was already a concurrent mark cycle in progress.

The failure is with -Xcomp, so there's more background stuff happening than usual.  This is also soon after the removal of the sweeper (JDK-8290025).

This could be a test bug, with the test needing to ensure it's not already in a concurrent cycle.  (Though how does one do that without concern that the answer could change immediately after the asking, due to background activity.)

Alternatively, perhaps something has recently changed leading to more aggressive (perhaps excessively so) running of concurrent cycles?
;;;","2022-09-16 01:37;tschatzl;Probably related to JDK-8290025. GC took over the code cache sweeper, which means that particularly with -Xcomp there will be more possibly unexpected marking cycles.;;;","2022-11-08 19:28;kbarrett;Easily reproduced by adding a call to wb.g1StartConcMarkCycle() at the beginning of the test. So a test bug, as it isn't resiliant to the situation where a cycle is already in progress because of some ongoing background work. Adding noreg-self to take this out of the JDK 20 exit criteria.

I'm going to review uses of that function to figure out whether it really should return false when a cycle is already in progress, or should do something else like (wait and) start a new cycle.  Maybe it can also be reimplemented using the concurrent GC control API, eliminating a whitebox entry point.
;;;","2022-11-30 08:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11435
Date: 2022-11-30 16:40:19 +0000;;;","2022-12-21 18:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/71
Date: 2022-12-22 02:04:30 +0000;;;","2023-01-03 19:30;dukebot;Changeset: b743519b
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2023-01-04 03:28:31 +0000
URL:       https://git.openjdk.org/jdk20/commit/b743519ba911a254669fa8a96e6006c14e3f5ad1
;;;",,,,,,,,,,,,,,,,
JDK LTS backports for Doc Tasks for JEP C206/C208: Modernize Oracle JDK Linux RPMs and installers on Windows and macOS,JDK-8293821,5083425,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ssatish,rgallard,rgallard,2022-09-14 12:24,2023-06-14 20:59,2023-10-01 09:56,2023-04-24 23:16,,,,,,,17.0.6-oracle,docs,,0,CPU23_07-critical-approved,openjdk-na,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293823,JDK-8310088,JDK-8293822,JDK-8310103,JDK-8309851,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274176,JDK-8280905,JDK-8293674,JDK-8293675,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ykfn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,"2023-04-24 23:16;ssatish;Published with April CPU ;;;",,,,,,,,,,,,,,,,,,,,,,
"sun/util/logging/PlatformLoggerTest.java failed with ""RuntimeException: Retrieved backing PlatformLogger level null is not the expected CONFIG""",JDK-8293819,5083423,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dcubed,dcubed,2022-09-14 11:50,2023-09-26 01:24,2023-10-01 09:56,2022-09-16 02:14,20,,,,,,20,core-libs,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier8,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

sun/util/logging/PlatformLoggerTest.java

Here's a snippet from the log file:

Sep 14, 2022 5:41:52 PM PlatformLoggerTest testLogMethods
INFO: Test info(String)
java.lang.RuntimeException: Retrieved backing PlatformLogger level null is not the expected CONFIG
	at PlatformLoggerTest.checkJavaLoggerLevel(PlatformLoggerTest.java:237)
	at PlatformLoggerTest.checkPlatformLoggerLevels(PlatformLoggerTest.java:175)
	at PlatformLoggerTest.main(PlatformLoggerTest.java:84)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Retrieved backing PlatformLogger level null is not the expected CONFIG
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Retrieved backing PlatformLogger level null is not the expected CONFIG
----------rerun:(49/6290)*----------",,,,,,,,,,JDK-8299488,JDK-8302198,JDK-8316941,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x_10.15,,,,,,,"0|i2ykf7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3cc899dc,,,,,,,,,"2022-09-15 04:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10284
Date: 2022-09-15 11:29:40 +0000;;;","2022-09-16 02:14;dukebot;Changeset: 11e7d53b
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-09-16 09:12:28 +0000
URL:       https://git.openjdk.org/jdk/commit/11e7d53b23796cbd3d878048f7553885ae07f4d1
;;;","2023-02-09 08:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1154
Date: 2023-02-09 16:48:30 +0000;;;","2023-02-09 23:09;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,
"Dacapo.java failed with ""RuntimeException: Failed to run benchmark: pmd""",JDK-8293817,5083421,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dcubed,dcubed,2022-09-14 10:29,2023-01-04 02:41,2023-10-01 09:56,2022-11-21 18:55,20,,,,,,20,hotspot,,0,jdk11u-na,jdk17u-na,tier8,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

applications/dacapo/Dacapo.java

Here's a snippet from the log file:

[stress.process.err] Iteration start: MBean at Wed Sep 14 13:36:51 UTC 2022
[stress.process.err] Iteration done: MBean at Wed Sep 14 13:36:51 UTC 2022
[stress.process.err] Iteration done: Jni at Wed Sep 14 13:36:51 UTC 2022
[stress.process.err] Iteration start: Jni at Wed Sep 14 13:36:51 UTC 2022
[stress.process.err] Iteration start: Compiler at Wed Sep 14 13:36:51 UTC 2022
[stress.process.err] Unexpected Exception in thread Thread-17.
[stress.process.err] java.lang.RuntimeException: Failed to run benchmark: pmd
[stress.process.err] 	at applications.kitchensink.process.stress.modules.Runner$BenchmarkRunner.run(DacapoStressModule.java:171)
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1589)
[stress.process.err] Caused by: java.lang.reflect.InvocationTargetException
[stress.process.err] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
[stress.process.err] 	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.Runner$BenchmarkRunner.run(DacapoStressModule.java:166)
[stress.process.err] 	... 1 more
[stress.process.err] Caused by: java.lang.SecurityException: NoSystemExitSecurityManager: System.exit() is not allowed.
[stress.process.err] 	at applications.kitchensink.utils.NoSystemExitSecurityManager.checkExit(NoSystemExitSecurityManager.java:28)
[stress.process.err] 	at java.base/java.lang.Runtime.exit(Runtime.java:113)
[stress.process.err] 	at java.base/java.lang.System.exit(System.java:1908)
[stress.process.err] 	at org.dacapo.harness.TestHarness.main(TestHarness.java:184)
[stress.process.err] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
[stress.process.err] 	... 3 more
[stress.process.err] Iteration done: Compiler at Wed Sep 14 13:36:51 UTC 2022
[stress.process.err] Iteration start: ThreadDumper at Wed Sep 14 13:36:51 UTC 2022
[stress.process.err] Iteration done: ThreadDumper at Wed Sep 14 13:36:51 UTC 2022
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
	at java.base/java.util.Arrays$ArrayList.get(Arrays.java:4165)
	at applications.kitchensink.process.picker.modules.Toolkit$LinuxToolkit.setMetrics(MonitorPickerModule.java:223)
	at applications.kitchensink.process.picker.modules.Toolkit.getSystemMetrics(MonitorPickerModule.java:123)
	at applications.kitchensink.process.picker.modules.MonitorPickerModule.execute(MonitorPickerModule.java:64)
	at applications.kitchensink.process.picker.modules.PickerModule.run(PickerModule.java:140)
	at java.base/java.lang.Thread.run(Thread.java:1589)
[Wed Sep 14 13:37:21 UTC 2022] (1663162641683) Picker module is about to shutdown
Picker module expected time before shutdown for: Jcmd: 30s
Picker module expected time before shutdown for: Jfr: 3m 20s
Picker module expected time before shutdown for: Jstat: 5m
Picker module expected time before shutdown for: Monitor: 1m
Picker module expected time before shutdown for: NMT: 1m
Picker module expected time before shutdown for: Perfmon: 5m
Picker module finished at [Wed Sep 14 13:37:21 UTC 2022]: Monitor
Picker module finished at [Wed Sep 14 13:37:21 UTC 2022]: Perfmon
Picker module finished at [Wed Sep 14 13:37:21 UTC 2022]: Jstat
Picker module finished at [Wed Sep 14 13:37:21 UTC 2022]: Jfr
Picker module finished at [Wed Sep 14 13:37:21 UTC 2022]: Jcmd
Picker module finished at [Wed Sep 14 13:37:21 UTC 2022]: NMT
[Wed Sep 14 13:37:21 UTC 2022] (1663162641694) Picker module has been shutdown
[Wed Sep 14 13:37:21 UTC 2022] (1663162641694) Stress process is about to shutdown
Going to request to stop or kill stress process: 5348
WARNING: The process 5348 has already finished.
[Wed Sep 14 13:37:21 UTC 2022] (1663162641694) Stress process has been shutdown
[Wed Sep 14 13:37:21 UTC 2022] Execution finished.
[Wed Sep 14 13:37:21 UTC 2022] Analyzer failed with: java.lang.RuntimeException: Failed to run benchmark: pmd
	at applications.kitchensink.process.stress.modules.Runner$BenchmarkRunner.run(DacapoStressModule.java:171)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at applications.kitchensink.process.stress.modules.Runner$BenchmarkRunner.run(DacapoStressModule.java:166)
	... 1 more
Caused by: java.lang.SecurityException: NoSystemExitSecurityManager: System.exit() is not allowed.
	at applications.kitchensink.utils.NoSystemExitSecurityManager.checkExit(NoSystemExitSecurityManager.java:28)
	at java.base/java.lang.Runtime.exit(Runtime.java:113)
	at java.base/java.lang.System.exit(System.java:1908)
	at org.dacapo.harness.TestHarness.main(TestHarness.java:184)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 3 more

java.lang.RuntimeException: java.lang.RuntimeException: Failed to run benchmark: pmd
	at applications.kitchensink.process.stress.modules.Runner$BenchmarkRunner.run(DacapoStressModule.java:171)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at applications.kitchensink.process.stress.modules.Runner$BenchmarkRunner.run(DacapoStressModule.java:166)
	... 1 more
Caused by: java.lang.SecurityException: NoSystemExitSecurityManager: System.exit() is not allowed.
	at applications.kitchensink.utils.NoSystemExitSecurityManager.checkExit(NoSystemExitSecurityManager.java:28)
	at java.base/java.lang.Runtime.exit(Runtime.java:113)
	at java.base/java.lang.System.exit(System.java:1908)
	at org.dacapo.harness.TestHarness.main(TestHarness.java:184)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 3 more

	at applications.kitchensink.process.glue.Main.analyzeResults(Main.java:387)
	at applications.kitchensink.process.glue.Main.main(Main.java:224)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: java.lang.RuntimeException: Failed to run benchmark: pmd
	at applications.kitchensink.process.stress.modules.Runner$BenchmarkRunner.run(DacapoStressModule.java:171)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at applications.kitchensink.process.stress.modules.Runner$BenchmarkRunner.run(DacapoStressModule.java:166)
	... 1 more
Caused by: java.lang.SecurityException: NoSystemExitSecurityManager: System.exit() is not allowed.
	at applications.kitchensink.utils.NoSystemExitSecurityManager.checkExit(NoSystemExitSecurityManager.java:28)
	at java.base/java.lang.Runtime.exit(Runtime.java:113)
	at java.base/java.lang.System.exit(System.java:1908)
	at org.dacapo.harness.TestHarness.main(TestHarness.java:184)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	... 3 more

JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: java.lang.RuntimeException: Failed to run benchmark: pmd at applications.kitchensink.process.stress.modules.Runner$BenchmarkRunner.run(DacapoStressModule.java:171) at java.base/java.lang.Thread.run(Thread.java:1589) Caused by: java.lang.reflect.InvocationTargetException at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119) at java.base/java.lang.reflect.Method.invoke(Method.java:578) at applications.kitchensink.process.stress.modules.Runner$BenchmarkRunner.run(DacapoStressModule.java:166) ... 1 more Caused by: java.lang.SecurityException: NoSystemExitSecurityManager: System.exit() is not allowed. at applications.kitchensink.utils.NoSystemExitSecurityManager.checkExit(NoSystemExitSecurityManager.java:28) at java.base/java.lang.Runtime.exit(Runtime.java:113) at java.base/java.lang.System.exit(System.java:1908) at org.dacapo.harness.TestHarness.main(TestHarness.java:184) at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104) ... 3 more

It's not clear to me whether this is an issue with the test
framework or not so I'm starting this bug in hotspot/test.",,,,,,,,,,JDK-8298348,JDK-8298251,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,,"0|i2yker:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-01-04 02:41;goetz;[11u-na, 17u-na]
I assume this was an issue in closed Oracle tests.;;;",,,,,,,,,,,,,,,,,,,,,,
CI: ciBytecodeStream::get_klass() is not consistent,JDK-8293816,5083420,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,dcubed,dcubed,2022-09-14 10:15,2022-11-03 07:05,2023-10-01 09:56,2022-09-16 10:59,11,17,19,20,,,20,hotspot,,0,c1,ci,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,noreg-hard,oracle-triage-20,regression,tier4,tier8,,"The following test failed in the JDK20 CI:

applications/kitchensink/Kitchensink.java

Here's a snippet from the log file:

[2022-09-14T15:08:07.706581Z] Gathering output for process 78436
[2022-09-14T15:08:10.520624Z] Waiting for completion for process 78436
[2022-09-14T15:08:10.520742Z] Waiting for completion finished for process 78436
Output and diagnostic info for process 78436 was saved into 'pid-78436-output.log'
[stress.process.out] #
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:
[stress.process.out] #
[stress.process.out] #  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S76232/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/86b575da-2730-4fc6-be89-1f5e1477b4a3/runs/db473f8b-0dc3-43fc-8cde-349ceaa211af/workspace/open/src/hotspot/share/ci/ciInstanceKlass.hpp:152), pid=78305, tid=40963
[stress.process.out] #  assert(is_loaded()) failed: must be loaded
[stress.process.out] #
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (20.0+15) (fastdebug build 20-ea+15-995)
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+15-995, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
[stress.process.out] # Core dump will be written. Default location: core.78305
[stress.process.out] #
[stress.process.out] Unsupported internal testing APIs have been used.
[stress.process.out] 
[stress.process.out] # An error report file with more information is saved as:
[stress.process.out] # /System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S82503/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/92d8c17d-385a-464f-ab0c-919d141f0495/runs/38177cd3-a590-4880-ae83-12d2078d3d23/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/hs_err_pid78305.log
[stress.process.out] #
[stress.process.out] # Compiler replay data is saved as:
[stress.process.out] # /System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S82503/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/92d8c17d-385a-464f-ab0c-919d141f0495/runs/38177cd3-a590-4880-ae83-12d2078d3d23/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/replay_pid78305.log
[stress.process.out] #
[stress.process.out] # If you would like to submit a bug report, please visit:
[stress.process.out] #   https://bugreport.java.com/bugreport/crash.jsp
[stress.process.out] #
[2022-09-14T15:09:10.659984Z] Gathering output for process 78444
[2022-09-14T15:09:10.662536Z] Waiting for completion for process 78444
[2022-09-14T15:09:10.662603Z] Waiting for completion finished for process 78444
Output and diagnostic info for process 78444 was saved into 'pid-78444-output.log'


Stress process failed. See stress.process.err/stress.process.out files for details.

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007ff33c88dc10):  JavaThread ""C1 CompilerThread0"" daemon [_thread_in_native, id=40963, stack(0x000070000368b000,0x000070000378b000)]


Current CompileTask:
C1:1032976 69195    b  3       org.sunflow.system.SearchPath::<init> (21 bytes)

Stack: [0x000070000368b000,0x000070000378b000],  sp=0x0000700003788d40,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12bcbb9]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e9  (ciInstanceKlass.hpp:152)
V  [libjvm.dylib+0x12bd24b]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x6cf28d]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x439819]  GraphBuilder::call_register_finalizer()+0xd9
V  [libjvm.dylib+0x439b1d]  GraphBuilder::method_return(Instruction*, bool)+0x7d
V  [libjvm.dylib+0x44456f]  GraphBuilder::iterate_bytecodes_for_block(int)+0x1c7f
V  [libjvm.dylib+0x4453ef]  GraphBuilder::iterate_all_blocks(bool)+0x3f
V  [libjvm.dylib+0x449b27]  GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x12e7
V  [libjvm.dylib+0x43f7ca]  GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x23a
V  [libjvm.dylib+0x43e762]  GraphBuilder::invoke(Bytecodes::Code)+0xc72
V  [libjvm.dylib+0x442da0]  GraphBuilder::iterate_bytecodes_for_block(int)+0x4b0
V  [libjvm.dylib+0x4453ef]  GraphBuilder::iterate_all_blocks(bool)+0x3f
V  [libjvm.dylib+0x449b27]  GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x12e7
V  [libjvm.dylib+0x43f7ca]  GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x23a
V  [libjvm.dylib+0x43e762]  GraphBuilder::invoke(Bytecodes::Code)+0xc72
V  [libjvm.dylib+0x442da0]  GraphBuilder::iterate_bytecodes_for_block(int)+0x4b0
V  [libjvm.dylib+0x4453ef]  GraphBuilder::iterate_all_blocks(bool)+0x3f
V  [libjvm.dylib+0x449b27]  GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x12e7
V  [libjvm.dylib+0x43f7ca]  GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x23a
V  [libjvm.dylib+0x43e762]  GraphBuilder::invoke(Bytecodes::Code)+0xc72
V  [libjvm.dylib+0x442da0]  GraphBuilder::iterate_bytecodes_for_block(int)+0x4b0
V  [libjvm.dylib+0x4453ef]  GraphBuilder::iterate_all_blocks(bool)+0x3f
V  [libjvm.dylib+0x449b27]  GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x12e7
V  [libjvm.dylib+0x43f7ca]  GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x23a
V  [libjvm.dylib+0x43e762]  GraphBuilder::invoke(Bytecodes::Code)+0xc72
V  [libjvm.dylib+0x442da0]  GraphBuilder::iterate_bytecodes_for_block(int)+0x4b0
V  [libjvm.dylib+0x4453ef]  GraphBuilder::iterate_all_blocks(bool)+0x3f
V  [libjvm.dylib+0x449b27]  GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x12e7
V  [libjvm.dylib+0x43f7ca]  GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x23a
V  [libjvm.dylib+0x43e762]  GraphBuilder::invoke(Bytecodes::Code)+0xc72
V  [libjvm.dylib+0x442da0]  GraphBuilder::iterate_bytecodes_for_block(int)+0x4b0
V  [libjvm.dylib+0x445435]  GraphBuilder::iterate_all_blocks(bool)+0x85
V  [libjvm.dylib+0x446e3f]  GraphBuilder::GraphBuilder(Compilation*, IRScope*)+0x65f
V  [libjvm.dylib+0x451db3]  IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool)+0x213
V  [libjvm.dylib+0x4527ab]  IR::IR(Compilation*, ciMethod*, int)+0x5b
V  [libjvm.dylib+0x427de4]  Compilation::build_hir()+0x94
V  [libjvm.dylib+0x42926b]  Compilation::compile_java_method()+0x1cb
V  [libjvm.dylib+0x429708]  Compilation::compile_method()+0xa8
V  [libjvm.dylib+0x429a7b]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x28b
V  [libjvm.dylib+0x42b9f1]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xd1
V  [libjvm.dylib+0x653772]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x702
V  [libjvm.dylib+0x652e68]  CompileBroker::compiler_thread_loop()+0x288
V  [libjvm.dylib+0xa1c2ce]  JavaThread::thread_main_inner()+0x2be
V  [libjvm.dylib+0x120d0a7]  Thread::call_run()+0x177
V  [libjvm.dylib+0xf6f95f]  thread_native_entry(Thread*)+0x14f
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94
C  [libsystem_pthread.dylib+0x1b8b]  thread_start+0xf",,,,,,,,,,JDK-8294830,JDK-8295906,JDK-8294191,JDK-8296303,JDK-8296304,JDK-8294179,JDK-8295055,,,,,,,,,,,,,,,,,,,JDK-8295726,,JDK-8295726,,,,JDK-8293044,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,os_x_10.15,,,,,,"0|i2ykej:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-14 15:56;dlong;ILW = assert in debug build; intermittent; no workaround = MMH = P3;;;","2022-09-14 15:56;dlong;I'm guessing this is related to JDK-8293044.;;;","2022-09-15 13:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10294
Date: 2022-09-15 19:58:13 +0000;;;","2022-09-15 13:47;vlivanov;org.sunflow.system.SearchPath::<init>
  @ 14   java.util.LinkedList::<init>
    @ 1   java.util.AbstractSequentialList::<init>
      @ 1   java.util.AbstractList::<init>
        @ 1   java.util.AbstractCollection::<init>
          @ 1   java.lang.Object::<init>

  public org.sunflow.system.SearchPath(java.lang.String);
      stack=3, locals=2, args_size=2
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object.""<init>"":()V
         4: aload_0
         5: aload_1
         6: putfield      #2                  // Field type:Ljava/lang/String;
         9: aload_0
>>>     10: new           #3                  // class java/util/LinkedList
        13: dup
>>>     14: invokespecial #4                  // Method java/util/LinkedList.""<init>"":()V
        17: putfield      #5                  // Field searchPath:Ljava/util/LinkedList;
        20: return 

Constant pool:
    #3 = Class              #58           // java/util/LinkedList
    #4 = Methodref          #3.#56        // java/util/LinkedList.""<init>"":()V

;;;","2022-09-15 13:56;vlivanov;I wasn't able to reproduce the problem, but it seems like the failure happens as following:
  - bci:10: java/util/LinkedList is not yet loaded by the context class loader, but there's a class loader constraint registered for j/u/LinkedList, so it is treated as an not-yet-loaded klass (after JDK-8293044); allocated oop on stack has unloaded exact type; 

  - concurrent class loading happens for j/u/LinkedList

  - bci:14: j/u/LinkedList is loaded by now and inlining happens

  - as part of Object::<init>, GraphBuilder::call_register_finalizer() is called which expects that exact type of the receiver is loaded; and that's where assert is triggered
   ;;;","2022-09-16 10:59;dukebot;Changeset: 746f5f58
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-09-16 17:57:03 +0000
URL:       https://git.openjdk.org/jdk/commit/746f5f589db5c1036f15fa47f8a48b2a12c921ce
;;;","2022-09-16 16:51;dcubed;Here's the crashing stack from the jdk-20+16-1042-tier4 sighting:

applications/lucenebench/LuceneBench.java

---------------  T H R E A D  ---------------

Current thread (0x0000fffccc238d90):  JavaThread ""C1 CompilerThread0"" daemon [_thread_in_native, id=3066422, stack(0x0000fffc9c150000,0x0000fffc9c350000)]


Current CompileTask:
C1:  70421 17436    b  3       org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsGroup::<init> (16 bytes)

Stack: [0x0000fffc9c150000,0x0000fffc9c350000],  sp=0x0000fffc9c34c5f0,  free space=2033k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6af6e0]  GraphBuilder::call_register_finalizer()+0x29c  (ciInstanceKlass.hpp:152)
V  [libjvm.so+0x6b0438]  GraphBuilder::method_return(Instruction*, bool)+0xb78  (c1_GraphBuilder.cpp:1560)
V  [libjvm.so+0x6b9c40]  GraphBuilder::iterate_bytecodes_for_block(int)+0x1280  (c1_GraphBuilder.cpp:2954)
V  [libjvm.so+0x6bacbc]  GraphBuilder::iterate_all_blocks(bool)+0xa8  (c1_GraphBuilder.cpp:3031)
V  [libjvm.so+0x6b6fe8]  GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0xb88  (c1_GraphBuilder.cpp:4080)
V  [libjvm.so+0x6b7864]  GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x194  (c1_GraphBuilder.cpp:3556)
V  [libjvm.so+0x6b7e80]  GraphBuilder::invoke(Bytecodes::Code)+0x550  (c1_GraphBuilder.cpp:2138)
V  [libjvm.so+0x6b9224]  GraphBuilder::iterate_bytecodes_for_block(int)+0x864  (c1_GraphBuilder.cpp:2963)
V  [libjvm.so+0x6bacbc]  GraphBuilder::iterate_all_blocks(bool)+0xa8  (c1_GraphBuilder.cpp:3031)
V  [libjvm.so+0x6b6fe8]  GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0xb88  (c1_GraphBuilder.cpp:4080)
V  [libjvm.so+0x6b7864]  GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x194  (c1_GraphBuilder.cpp:3556)
V  [libjvm.so+0x6b7e80]  GraphBuilder::invoke(Bytecodes::Code)+0x550  (c1_GraphBuilder.cpp:2138)
V  [libjvm.so+0x6b9224]  GraphBuilder::iterate_bytecodes_for_block(int)+0x864  (c1_GraphBuilder.cpp:2963)
V  [libjvm.so+0x6bacbc]  GraphBuilder::iterate_all_blocks(bool)+0xa8  (c1_GraphBuilder.cpp:3031)
V  [libjvm.so+0x6b6fe8]  GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0xb88  (c1_GraphBuilder.cpp:4080)
V  [libjvm.so+0x6b7864]  GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x194  (c1_GraphBuilder.cpp:3556)
V  [libjvm.so+0x6b7e80]  GraphBuilder::invoke(Bytecodes::Code)+0x550  (c1_GraphBuilder.cpp:2138)
V  [libjvm.so+0x6b9224]  GraphBuilder::iterate_bytecodes_for_block(int)+0x864  (c1_GraphBuilder.cpp:2963)
V  [libjvm.so+0x6bacbc]  GraphBuilder::iterate_all_blocks(bool)+0xa8  (c1_GraphBuilder.cpp:3031)
V  [libjvm.so+0x6b6fe8]  GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0xb88  (c1_GraphBuilder.cpp:4080)
V  [libjvm.so+0x6b7864]  GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x194  (c1_GraphBuilder.cpp:3556)
V  [libjvm.so+0x6b7e80]  GraphBuilder::invoke(Bytecodes::Code)+0x550  (c1_GraphBuilder.cpp:2138)
V  [libjvm.so+0x6b9224]  GraphBuilder::iterate_bytecodes_for_block(int)+0x864  (c1_GraphBuilder.cpp:2963)
V  [libjvm.so+0x6bacbc]  GraphBuilder::iterate_all_blocks(bool)+0xa8  (c1_GraphBuilder.cpp:3031)
V  [libjvm.so+0x6b6fe8]  GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0xb88  (c1_GraphBuilder.cpp:4080)
V  [libjvm.so+0x6b7864]  GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)+0x194  (c1_GraphBuilder.cpp:3556)
V  [libjvm.so+0x6b7e80]  GraphBuilder::invoke(Bytecodes::Code)+0x550  (c1_GraphBuilder.cpp:2138)
V  [libjvm.so+0x6b9224]  GraphBuilder::iterate_bytecodes_for_block(int)+0x864  (c1_GraphBuilder.cpp:2963)
V  [libjvm.so+0x6baca8]  GraphBuilder::iterate_all_blocks(bool)+0x94  (c1_GraphBuilder.cpp:3046)
V  [libjvm.so+0x6bbfd8]  GraphBuilder::GraphBuilder(Compilation*, IRScope*)+0x538  (c1_GraphBuilder.cpp:3415)
V  [libjvm.so+0x6cbad0]  IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool)+0x3c0  (c1_IR.cpp:128)
V  [libjvm.so+0x6cbce4]  IR::IR(Compilation*, ciMethod*, int)+0xd0  (c1_IR.cpp:273)
V  [libjvm.so+0x692024]  Compilation::build_hir() [clone .part.0]+0x220  (c1_Compilation.cpp:153)
V  [libjvm.so+0x69651c]  Compilation::compile_java_method()+0x62c  (c1_Compilation.cpp:141)
V  [libjvm.so+0x696f60]  Compilation::compile_method()+0x1c0  (c1_Compilation.cpp:471)
V  [libjvm.so+0x6978c8]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x2c8  (c1_Compilation.cpp:598)
V  [libjvm.so+0x6990e8]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x148  (c1_Compiler.cpp:251)
V  [libjvm.so+0x99a9e8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xad8  (compileBroker.cpp:2243)
V  [libjvm.so+0x99b458]  CompileBroker::compiler_thread_loop()+0x598  (compileBroker.cpp:1917)
V  [libjvm.so+0xeaa7c8]  JavaThread::thread_main_inner()+0x244  (javaThread.cpp:700)
V  [libjvm.so+0x17b47d8]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x14c9984]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:710)
C  [libpthread.so.0+0x7908]  start_thread+0x188;;;","2022-10-04 08:06;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.18-oracle, 17.0.6-oracle.
Needed follow up of JDK-8293044
Clean backport.
SAP nightly testing passed.;;;","2022-10-04 08:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/771
Date: 2022-10-04 15:06:11 +0000;;;","2022-10-04 08:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1388
Date: 2022-10-04 15:10:11 +0000;;;","2022-10-20 23:06;thartmann;Fix Request (JDK 19u)
Fixes an assert in the CI. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 11u and 17u.;;;","2022-10-20 23:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/52
Date: 2022-10-21 06:06:17 +0000;;;","2022-11-03 06:14;yan;Fix request (13u, 15u)
backporting as a follow-up to JDK-8293044. Clean backport in both cases.;;;","2022-11-03 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/426
Date: 2022-11-03 13:50:25 +0000;;;","2022-11-03 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/300
Date: 2022-11-03 13:50:20 +0000;;;",,,,,,,,
P11PSSSignature.engineUpdate should not print debug messages during normal operation,JDK-8293815,5083419,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,valeriep,zzambers,zzambers,2022-09-14 09:58,2023-03-14 11:56,2023-10-01 09:56,2022-09-14 18:10,,,,,,,20,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-other,,,,,,,,,,,,,"During testing I have found messages such as this are printed to stdout:
sun.security.pkcs11.P11PSSSignature@6e1567f1: Calling C_SignUpdate

Problem:
Problem is in P11PSSSignature.engineUpdate method  [1], which unconditionally prints some debug information to stdout. Other prints in that class are conditional based on value of DEBUG field.

Solution:
I have made fix to make these conditional based on value of DEBUG field. As it only affects debug messages, there is no test added.

Testing:
Passed jdk_security locally with my fix.

[1] https://github.com/openjdk/jdk/blob/211fab8d361822bbd1a34a88626853bf4a029af5/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11PSSSignature.java#L578",,,,,,,,,,JDK-8304166,JDK-8297576,JDK-8303954,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ykeb:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-09-14 10:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10270
Date: 2022-09-14 17:03:41 +0000;;;","2022-09-14 18:10;dukebot;Changeset: 2057070e
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Valerie Peng <valeriep@openjdk.org>
Date:      2022-09-15 01:06:08 +0000
URL:       https://git.openjdk.org/jdk/commit/2057070eb069ccee20760e47bd5e09590850d2ce
;;;","2022-09-21 04:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/708
Date: 2022-09-21 11:16:19 +0000;;;","2022-09-21 04:49;zzambers;Fix request (17u):

Fixes P11PSSSignature not to print debug messages during normal operation.
Low risk, only affects debugging messages, clean backport, passed jdk_security tests.;;;","2023-02-28 05:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1782
Date: 2023-02-28 13:05:12 +0000;;;","2023-02-28 05:35;zzambers;Fix request (11u):

Fixes P11PSSSignature not to print debug messages during normal operation.
Low risk, only affects debugging messages, clean backport, passed jdk_security tests. ;;;","2023-03-14 10:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/283
Date: 2023-03-14 16:34:43 +0000;;;","2023-03-14 10:52;zzambers;Fix request (8u):

Fixes P11PSSSignature not to print debug messages during normal operation.
Low risk, only affects debugging messages, clean backport, no regressions in jdk_security tests. ;;;",,,,,,,,,,,,,,,
rename regression tests folder from lworld-values to primitive-classes,JDK-8293812,5083414,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-09-14 08:45,2022-09-14 09:02,2023-10-01 09:56,2022-09-14 09:02,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,noreg-trivial,,,,,,,,,,,,,,,,,just a folder rename to current terminology,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ykd7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-09-14 08:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/756
Date: 2022-09-14 15:49:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Provide a reason for PassFailJFrame.forceFail,JDK-8293811,5083412,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-09-14 08:21,2023-07-04 01:17,2023-10-01 09:56,2022-09-19 07:27,19,,,,,,20,client-libs,,0,cssn22_09_02,jdk17u-fix-request,jdk17u-fix-yes,noreg-cleanup,noreg-self,sustaining,testbug,,,,,,,,,,,,,"PassFailJFrame was designed to provide a reason when a test is failed.

A new forceFail method was added but it leaves the reason empty. There should be an option to provide a reason.",,,,,,,,,,JDK-8310184,JDK-8311276,JDK-8309873,JDK-8310094,JDK-8309872,,,,,,,,,,,,,,,,,,,,,,,JDK-8284898,JDK-8257810,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ykcr:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-09-14 09:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10269
Date: 2022-09-14 16:27:36 +0000;;;","2022-09-19 07:27;dukebot;Changeset: 64b96e5c
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-09-19 14:22:36 +0000
URL:       https://git.openjdk.org/jdk/commit/64b96e5cf57023a5d55b4392074e3922ac7c0534
;;;","2023-06-30 03:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1522
Date: 2023-06-30 10:50:41 +0000;;;","2023-07-02 09:35;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. PrintAllPagesTest.java is not in 17u. Rest applies cleanly (already reviewed).;;;",,,,,,,,,,,,,,,,,,,
Fix test bugs due to incompatibility with -XX:+AlwaysIncrementalInline,JDK-8293798,5083392,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2022-09-14 03:52,2022-11-29 00:43,2023-10-01 09:56,2022-09-21 00:25,20,,,,,,20,hotspot,,0,noreg-self,oracle-triage-20,,,,,,,,,,,,,,,,,,"A number of tests seem to fail in combination with compile flag ""-XX:+AlwaysIncrementalInline"".

compiler/uncommontrap/Decompile.java
   java.lang.RuntimeException: Wrong compilation status.: expected false to equal true
   Quick Analysis: it seems that we don't to bimorphic inlining of function calls (2 static inlinings, uncommon_trap for others). Instead, we create two LateInlineCallGenerator, one for a class (hit), and one for the other cases (miss). LateInlineCallGenerator has is_inline false, so we do not go into the bimorphic inlining case (would require both receivers to have is_inline true). Instead, we generate a static call for one class (hit), and a virtual call for the rest (miss). Therefore, when the third class comes along the function does not trap, and not deopt either.
    For now, we will just deactivate the flag in the test. But more discussion is required if we want this flag to change the inline behavior in this way.

compiler/intrinsics/klass/CastNullCheckDroppingsTest.java
    java.lang.AssertionError: compilation must  not  get deoptimized
    Seems usually we don't put the null_check with a trap, but with this flag we do have a null_check trap, which then triggers (with mark_non_entrant -> deopt). And the test expects that there is no deoptimization.
    Closer Analysis:
    We are in GraphKit::gen_checkcast.
    We have a cast that is wrapped in a MethodHandle. Normally, this would get directly inlined, and the output is deduced to be String*. With the flag, however, we do not inline, but create a JavaStaticCall, which represents invokeExact. This has 4 Object* inputs and 1 Object* output. So now the result of the cast is a Object*.
    Now we have a String* in the normal case, and Object* in the flag case. We now do a local cast to String*. For that we first check subtyping.
    switch (C->static_subtype_check(tk, objtp->as_klass_type())) {
    In the normal case, we have a perfect match - so we rely on profiling and do speculative String::NonNull*. But in the flag case, we see Object* is not subtype of String*, and continue. So we continue on, and find that profiling has determined never_see_null = true, so we set an uncommon_trap for the null_check.
    Somehow, the speculative profiling case does not lead to a trap - not sure why yet.
    Of course in the test we eventually do feed in Null - in the regular case there is no trap, in the flag case we trap and deopt, breaking the test assumption.
    At any rate, this really looks like a test bug - the flag can change the decisions that have an impact on the asserts of the test. I will disable the flag.

compiler/ciReplay/TestInliningProtectionDomain.java
    java.lang.RuntimeException: assertTrue: expected true, was false
    this is from an assertTrue.
    Asserts.assertTrue(inlineesReplay.get(4).compare(""compiler.ciReplay.InliningBar"", ""bar2"", inlineesReplay.get(4).isForcedByReplay()));
    Turns out isForcedByReplay() returns false because the ""reason"" is expected to be ""force inline by ciReplay"", but we get a reason ""force (incremental) inline by ciReplay"". seems expected. Test Bug. Replace assert with:
    Asserts.assertTrue(inlineesReplay.get(4).compare(""compiler.ciReplay.InliningBar"", ""bar2"", inlineesReplay.get(4).isForcedByReplay() || inlineesReplay.get(4).isForcedIncrementalInlineByReplay()));


First found in JDK-8291775
Now rediscovered during JDK-8256540",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256540,,,,,,JDK-8251503,,,,,,JDK-8291775,JDK-8294267,JDK-8294110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yk8b:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-14 16:00;dlong;ILW = test failure; with -XX:+AlwaysIncrementalInline; no workaround = MMH = P3;;;","2022-09-16 08:10;epeter;compiler/cha/DefaultRootMethod.java
compiler/cha/AbstractRootMethod.java
May also have test bugs with AlwaysIncrementalInline.
They both test the compilation of a megamorphic call site, and expect it to be decompiled once an additional class is introduced. From what I have seen, I would expect that late inlining does not allow for megamorphic (inlining?).;;;","2022-09-18 23:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10310
Date: 2022-09-16 13:50:02 +0000;;;","2022-09-21 00:25;dukebot;Changeset: 12e3510f
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-09-21 07:21:27 +0000
URL:       https://git.openjdk.org/jdk/commit/12e3510f63b46db1559d240a331d66f15fe91363
;;;",,,,,,,,,,,,,,,,,,,
[Accessibility] [Win] [Narrator] Exceptions When Deleting Text with Continuous Key Press in TextArea and TextField,JDK-8293795,5083387,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,mbollapragad,mbollapragad,2022-09-14 03:33,2022-11-29 06:10,2023-10-01 09:56,2022-10-04 04:09,8u40,jfx11,,,,,jfx20,javafx,,0,8bpr-critical-approved,a11y,accessibility,bugdb_34512374,errorlog-bpr,esc_acc,sn_127,sn_128,sqebug,,,,,,,,,,,"Product Tested  : JDK 8u341 b32
Platform Tested : Windows 10 Pro
Is it regression : No
Reproducible: Always
Test result on the last GAed release for this train: 
         Fails  With JDK 8u341b10 , JDK 8u331b09 , JDK 8u321b07 , JDK 8u40b27
           Same StringIndexOutOfBoundsException along with NPE in case of  TextArea
           Same StringIndexOutOfBoundsException along with IAE in case of  TextField

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1) Start attached test Main. . 
2) Start Narrator ( Win + Ctrl + Enter)
3) In Textarea  enter large text and start deleting by continuous Backspace key Press (i.e Pressing BackSpace Key and not releasing until some time)
   Testing with TextField Component also produces the same exception.

Exception Log : 

/cygdrive/c/work/repos/java_installations/64bit/jdk1.8.0_341b32/bin/java -showversion Main
java version ""1.8.0_341""
Java(TM) SE Runtime Environment (build 1.8.0_341-b32)
Java HotSpot(TM) 64-Bit Server VM (build 25.341-b32, mixed mode)

Exception in thread ""JavaFX Application Thread"" java.lang.StringIndexOutOfBoundsException: String index out of range: 19
        at java.lang.String.substring(String.java:1963)
        at com.sun.glass.ui.win.WinTextRangeProvider.GetText(WinTextRangeProvider.java:355)
        at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
        at com.sun.glass.ui.win.WinApplication.lambda$null$4(WinApplication.java:185)
        at java.lang.Thread.run(Thread.java:750)
Exception in thread ""JavaFX Application Thread"" java.lang.StringIndexOutOfBoundsException: String index out of range: 16
        at java.lang.String.substring(String.java:1963)
        at com.sun.glass.ui.win.WinTextRangeProvider.GetText(WinTextRangeProvider.java:355)
        at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
        at com.sun.glass.ui.win.WinApplication.lambda$null$4(WinApplication.java:185)
        at java.lang.Thread.run(Thread.java:750)",,,,,,,,,,JDK-8294757,JDK-8297473,JDK-8297488,JDK-8294892,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294627,,,,JDK-8284281,JDK-8293923,,,,,,,"2022-09-14 03:37;mbollapragad;Main.java;https://bugs.openjdk.org/secure/attachment/100757/Main.java",,,,,,,x86_64,,,,,,b27,8u40,,windows_10,,,,,,,"0|i2yk77:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a09e639,,,,,,,,,"2022-09-30 08:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/907
Date: 2022-09-30 15:15:06 +0000;;;","2022-10-04 04:09;dukebot;Changeset: cc00c8d5
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-10-04 11:06:54 +0000
URL:       https://git.openjdk.org/jfx/commit/cc00c8d5c7a73b9d9bc7c292ad51f8af9e63ff78
;;;","2022-10-18 06:37;mpalmerj;Cast title into title case and corrected spelling of ""continous"".;;;","2022-11-22 09:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/99
Date: 2022-11-22 17:44:31 +0000;;;","2022-11-23 00:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/122
Date: 2022-11-23 08:49:42 +0000;;;",,,,,,,,,,,,,,,,,,
Linux aarch64 build fails after 8292591,JDK-8293787,5083378,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mbaesken,mbaesken,mbaesken,2022-09-14 00:39,2023-01-23 00:45,2023-10-01 09:56,2022-09-14 03:32,20,,,,,,20,hotspot,,0,noreg-build,,,,,,,,,,,,,,,,,,,"After 8292591 we run into the following build error  on Linux aarch64:

* For target hotspot_variant-server_libjvm_objs_systemMemoryBarrier_linux.o:
/nb/linuxaarch64/jdk/src/hotspot/os/linux/systemMemoryBarrier_linux.cpp:41:4: error: #error define SYS_membarrier for the arch
   #error define SYS_membarrier for the arch
    ^~~~~
/nb/linuxaarch64/jdk/src/hotspot/os/linux/systemMemoryBarrier_linux.cpp: In function 'int membarrier(int, unsigned int, int)':
/nb/linuxaarch64/jdk/src/hotspot/os/linux/systemMemoryBarrier_linux.cpp:63:18: error: 'SYS_membarrier' was not declared in this scope
   return syscall(SYS_membarrier, cmd, flags, cpu_id); // cpu_id only on >= 5.10
                  ^~~~~~~~~~~~~~
/nb/linuxaarch64/jdk/src/hotspot/os/linux/systemMemoryBarrier_linux.cpp:63:18: note: suggested alternative: 'membarrier'
   return syscall(SYS_membarrier, cmd, flags, cpu_id); // cpu_id only on >= 5.10
                  ^~~~~~~~~~~~~~
                  membarrier

This could most likely be solved by adding a definition  for aarch64 to hotspot/os/linux/systemMemoryBarrier_linux.cpp .
On the mentioned linux aarch64 system  (kernel 5.15)  SYS_membarrier  is :  
aarch64-linux-gnu/bits/syscall.h:899:# define SYS_membarrier __NR_membarrier

asm-generic/unistd.h:755:#define __NR_membarrier 283

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292591,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,,"0|i2yk57:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-09-14 02:20;mdoerr;We should check our devkit. Do we really need to build with such old headers? I guess it is not finally decided which kernel versions are officially supported by JDK 20 (https://wiki.openjdk.org/display/Build/Supported+Build+Platforms ). Maybe it still makes sense to define SYS_membarrier for some platforms which is easy to do.;;;","2022-09-14 02:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10265
Date: 2022-09-14 09:17:47 +0000;;;","2022-09-14 03:32;dukebot;Changeset: 7f3250d7
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-09-14 10:29:12 +0000
URL:       https://git.openjdk.org/jdk/commit/7f3250d71c4866a64eb73f52140c669fe90f122f
;;;","2023-01-23 00:45;enikitin;As the build doesn't fail anymore, I consider this verified.;;;",,,,,,,,,,,,,,,,,,,
HttpClient will not send more than 64 kb of data from the 2nd request in http2,JDK-8293786,5083307,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,ccleary,webbuggrp,webbuggrp,2022-09-13 09:12,2023-07-21 07:35,2023-10-01 09:56,2023-05-08 07:52,11,17,18,19,20,,21,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Java 17 Windows 10

A DESCRIPTION OF THE PROBLEM :
HttpClient will not send more than 64kb of data in an POST/PUT request from the 2nd request onwards regardless of how many window updates frames we send from the server side.

It hangs indefinitely after sending 64kb of data without sending any data frames afterwards

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create an HttpClient which uses http2

1) Send an initial request of any type[GET/PUT/POST etc] all these requests work on the 1st try so that the server can send back a 101 upgrade response to fully transform the connection to http2

2) Upload a byte array or anything greater than 64 kb[65535 bytes] 

3) Observe output on server . Server never receives a Data frame with THE END_STREAM flag hence it never processes the full request and hence cannot send a response which causes the client to hang forever


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Client should send Data frames till all 100 kb of data is uploaded with the final frame having the END_STREAM flag set
ACTUAL -
Client only sends data frames up to the 64kb mark after which it pauses forever

HEADER TABLE SIZE=16384
ENABLE PUSH=1
MAX CONCURRENT STREAMS=100
INITIAL WINDOW SIZE=16777216
MAX FRAME SIZE=16384
======================
Data Frame,Stream=3,Size=1000,Total Bytes Received=1000
Data Frame,Stream=3,Size=1000,Total Bytes Received=2000
Data Frame,Stream=3,Size=1000,Total Bytes Received=3000
Data Frame,Stream=3,Size=1000,Total Bytes Received=4000
Data Frame,Stream=3,Size=1000,Total Bytes Received=5000
Data Frame,Stream=3,Size=1000,Total Bytes Received=6000
Data Frame,Stream=3,Size=1000,Total Bytes Received=7000
Data Frame,Stream=3,Size=1000,Total Bytes Received=8000
Data Frame,Stream=3,Size=1000,Total Bytes Received=9000
Data Frame,Stream=3,Size=1000,Total Bytes Received=10000
Data Frame,Stream=3,Size=1000,Total Bytes Received=11000
Data Frame,Stream=3,Size=1000,Total Bytes Received=12000
Data Frame,Stream=3,Size=1000,Total Bytes Received=13000
Data Frame,Stream=3,Size=1000,Total Bytes Received=14000
Data Frame,Stream=3,Size=1000,Total Bytes Received=15000
Data Frame,Stream=3,Size=1000,Total Bytes Received=16000
Data Frame,Stream=3,Size=384,Total Bytes Received=16384
Data Frame,Stream=3,Size=616,Total Bytes Received=17000
Data Frame,Stream=3,Size=1000,Total Bytes Received=18000
Data Frame,Stream=3,Size=1000,Total Bytes Received=19000
Data Frame,Stream=3,Size=1000,Total Bytes Received=20000
Data Frame,Stream=3,Size=1000,Total Bytes Received=21000
Data Frame,Stream=3,Size=1000,Total Bytes Received=22000
Data Frame,Stream=3,Size=1000,Total Bytes Received=23000
Data Frame,Stream=3,Size=1000,Total Bytes Received=24000
Data Frame,Stream=3,Size=1000,Total Bytes Received=25000
Data Frame,Stream=3,Size=1000,Total Bytes Received=26000
Data Frame,Stream=3,Size=1000,Total Bytes Received=27000
Data Frame,Stream=3,Size=1000,Total Bytes Received=28000
Data Frame,Stream=3,Size=1000,Total Bytes Received=29000
Data Frame,Stream=3,Size=1000,Total Bytes Received=30000
Data Frame,Stream=3,Size=1000,Total Bytes Received=31000
Data Frame,Stream=3,Size=1000,Total Bytes Received=32000
Data Frame,Stream=3,Size=768,Total Bytes Received=32768
Data Frame,Stream=3,Size=232,Total Bytes Received=33000
Data Frame,Stream=3,Size=1000,Total Bytes Received=34000
Data Frame,Stream=3,Size=1000,Total Bytes Received=35000
Data Frame,Stream=3,Size=1000,Total Bytes Received=36000
Data Frame,Stream=3,Size=1000,Total Bytes Received=37000
Data Frame,Stream=3,Size=1000,Total Bytes Received=38000
Data Frame,Stream=3,Size=1000,Total Bytes Received=39000
Data Frame,Stream=3,Size=1000,Total Bytes Received=40000
Data Frame,Stream=3,Size=1000,Total Bytes Received=41000
Data Frame,Stream=3,Size=1000,Total Bytes Received=42000
Data Frame,Stream=3,Size=1000,Total Bytes Received=43000
Data Frame,Stream=3,Size=1000,Total Bytes Received=44000
Data Frame,Stream=3,Size=1000,Total Bytes Received=45000
Data Frame,Stream=3,Size=1000,Total Bytes Received=46000
Data Frame,Stream=3,Size=1000,Total Bytes Received=47000
Data Frame,Stream=3,Size=1000,Total Bytes Received=48000
Data Frame,Stream=3,Size=1000,Total Bytes Received=49000
Data Frame,Stream=3,Size=152,Total Bytes Received=49152
Data Frame,Stream=3,Size=848,Total Bytes Received=50000
Data Frame,Stream=3,Size=1000,Total Bytes Received=51000
Data Frame,Stream=3,Size=1000,Total Bytes Received=52000
Data Frame,Stream=3,Size=1000,Total Bytes Received=53000
Data Frame,Stream=3,Size=1000,Total Bytes Received=54000
Data Frame,Stream=3,Size=1000,Total Bytes Received=55000
Data Frame,Stream=3,Size=1000,Total Bytes Received=56000
Data Frame,Stream=3,Size=1000,Total Bytes Received=57000
Data Frame,Stream=3,Size=1000,Total Bytes Received=58000
Data Frame,Stream=3,Size=1000,Total Bytes Received=59000
Data Frame,Stream=3,Size=1000,Total Bytes Received=60000
Data Frame,Stream=3,Size=1000,Total Bytes Received=61000
Data Frame,Stream=3,Size=1000,Total Bytes Received=62000
Data Frame,Stream=3,Size=1000,Total Bytes Received=63000
Data Frame,Stream=3,Size=1000,Total Bytes Received=64000
Data Frame,Stream=3,Size=1000,Total Bytes Received=65000
Data Frame,Stream=3,Size=535,Total Bytes Received=65535

// HANGS HERE DOES NOT SEND ANY MORE DATA FRAMES EVEN THOUGH ACTUAL PAYLOAD IS 100 KB //

---------- BEGIN SOURCE ----------
Source code is divided into 2 applications which needs to be run on separate JVM's

Server Source Code

final class PUT_Server 
{
 private static final int 
 WINDOW_SIZE=1000,    //initial window size sent as setting frame to server
 WINDOW_INC=1000;     //make it -1 to make server send window updates equal to data frame payload length
 
 private static byte[] encodeFrame(byte type,byte flags,int streamID,byte[] data)throws Exception
 {
  try(ByteArrayOutputStream output=new ByteArrayOutputStream())
  {
   output.write((byte)((data.length>>16)&0xFF));
   output.write((byte)((data.length>>8)&0xFF));
   output.write((byte)(data.length&0xFF));
   output.write(type);
   output.write(flags);
   output.write((byte)(((streamID>>24)&0xFF)&0b01111111));
   output.write((byte)((streamID>>16)&0xFF));
   output.write((byte)((streamID>>8)&0xFF));
   output.write((byte)(streamID&0xFF));
 
   output.write(data);
   
   return output.toByteArray();
  }
 } 

 private static void writeOK(OutputStream output,int streamID)throws Exception
 {
   //we respond with a Header Frame[status=200] &
   output.write
   (
     encodeFrame
     (
      (byte)0x1,                    //type headers 0x1
      (byte)0x4,                    //flags = END_HEADERS
      streamID,                     //stream
      new byte[]{(byte)0b10001000}  //indexed header for status 200  
     )
   );

   //we respond with a Data Frame with text OK
   output.write
   (
     encodeFrame
     (
      (byte)0x0,                    //type Data 0x0
      (byte)(0x1),                  //flags = END_STREAM 
      streamID,                     //stream 
      ""OK"".getBytes()               //Payload data
     )
   );
 }
 
 public static void main(String[] args)throws Exception
 {
  try(ServerSocket server=new ServerSocket(1000))
  {
   try(Socket client=server.accept())
   {
    try(InputStream input=client.getInputStream();
        OutputStream output=client.getOutputStream())
    {
     int length,bytesReceived=0,windowInc;
     byte[] data=new byte[100*1024];
     Frame frame=new Frame();
     byte[] connection_preface=""PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n"".getBytes(""UTF-8"");
     
     int stage=1;
     while((length=input.read(data))>0)
     {
      if(stage==1)
      {
       /*
         We dont care about the request client sends
         but respond with an 101 switching protocol
       */     
       output.write
       (
        (
         ""HTTP/1.1 101 Switching Protocols\r\n""+
         ""Connection:Upgrade\r\n""+
         ""Upgrade:h2c\r\n\r\n""
        ).getBytes(""UTF-8"")
       );
       
       //write our custom settings frame with specific initial window size
       output.write
       (
         encodeFrame
         (
          (byte)0x4,                                     //type settings 0x4
          (byte)0  ,                                     //no flags
          0,                                            //stream 0
          new byte[]                    
          {
           0,
           (byte)0x4,                                   //setting type initial window
           (byte)(((WINDOW_SIZE>>24)&0xFF)&0b01111111), //encoded window size
           (byte)((WINDOW_SIZE>>16)&0xFF),
           (byte)((WINDOW_SIZE>>8)&0xFF),
           (byte)(WINDOW_SIZE&0xFF)
          }                
         )
       );
       
       //write 200 ok response
       writeOK(output,1);
       
       //stage 2 is where we process the client preface and its setting frame
       stage=2;
      }
      else if(stage==2)
      {    
       //decode frames after connection preface
       frame.decode(new ByteArrayInputStream(data,connection_preface.length,length-connection_preface.length));    
     
       //settings frame without the ACK flag
       if(frame.type==0x4 && frame.flags==0)
       {
        for(int i=0;i<=frame.payload.length-6;i+=6)
        {
         short option=(short)((frame.payload[i] & 0xFF) << 8 | 
                              (frame.payload[i+1] & 0xFF));
         
         int value=((frame.payload[i+2] & 0xFF)  << 24) |
                   ((frame.payload[i+3] & 0xFF) << 16) |
                   ((frame.payload[i+4] & 0xFF) << 8) |
                   (frame.payload[i+5] & 0xFF); 
         
         //Initial Window Size
         switch(option)
         {
          case 0x1:System.out.println(""HEADER TABLE SIZE=""+value);
          break;
          case 0x2:System.out.println(""ENABLE PUSH=""+value);
          break;
          case 0x3:System.out.println(""MAX CONCURRENT STREAMS=""+value);
          break;
          case 0x4:System.out.println(""INITIAL WINDOW SIZE=""+value);
          break;
          case 0x5:System.out.println(""MAX FRAME SIZE=""+value);
          break;
          case 0x6:System.out.println(""MAX HEADER LIST SIZE=""+value);
         }
        }
       }
       
       System.out.println(""======================"");
       
       //decode normally remaining data in the next stage without skipping
       stage=3;     
       continue;
      }
      if(stage==3)
      {       
        frame.decode(new ByteArrayInputStream(data,0,length));    
        if(frame.type==0x0)      //Data frame
        {
         bytesReceived+=frame.payload.length;      
         System.out.println(""Data Frame,Stream=""+frame.streamID+"",Size=""+frame.payload.length+"",Total Bytes Received=""+bytesReceived);

         //window increment use frame payload length if WINDOW_INC  < 0
         windowInc=WINDOW_INC<=0?frame.payload.length:WINDOW_INC;

         //write window update frame
         output.write
         (
           encodeFrame
           (
            (byte)0x8,                                          //type Window Increment 0x8
            (byte)0,                                            //no flags
            frame.streamID,                                     //stream 
            new byte[]
            {
             (byte)(((windowInc>>24)&0xFF) & 0b01111111),       //encoded size[first byte reserved]
             (byte)((windowInc>>16)&0xFF),
             (byte)((windowInc>>8)&0xFF),
             (byte)(windowInc&0xFF)
            }
           )
         );
         
         //end of data received test successfull
         if(frame.flags==0x1)
         {
          System.out.println(""End Received Test Successfull"");
          
          //write 200 ok and end test
          writeOK(output,frame.streamID);
         }
        }
      }
     }
    }
   }
  }
 }
 
 private static class Frame
 {
  private int length,type,flags,streamID;
  private byte[] payload;
  
  private void decode(InputStream input)throws Exception
  {
   //9 bytes containing all header info about the frame
   byte[] frameInfo=new byte[9];
   input.read(frameInfo);
   
   length=((frameInfo[0]&0xFF)<<16) | 
          ((frameInfo[1]&0xFF)<<8) | 
          ((frameInfo[2]&0xFF));
  
   type=frameInfo[3];
   flags=frameInfo[4];

   streamID=(((frameInfo[5] & 0xFF) & 0b01111111)<<24) | 
            ((frameInfo[6] & 0xFF)<<16) | 
            ((frameInfo[7] & 0xFF)<<8) |
            (frameInfo[8] & 0xFF);
   
   //payload of frame
   payload=new byte[length];
   input.read(payload);
  }
 }
}

Client Source Code

final class PUT_Client
{
 private static void debug(HttpResponse response)throws Exception
 {
  System.out.println(""==========Status Code============="");
  System.out.println(""""+response.statusCode());
  System.out.println(""Thread=""+Thread.currentThread().getName());
  
  System.out.println(""===========Headers========="");
  response.headers().map().forEach((header,values)->System.out.println(header+""=>""+values));
  
  System.out.println(""===========Body============="");
  System.out.println(response.body().toString());
 }
 
 public static void main(String[] args)throws Exception
 {
  HttpRequest.Builder builder=HttpRequest.newBuilder();
  
  HttpClient client=HttpClient.newHttpClient();
  
  //1st GET request to allow connection to upgrade o http 2
  HttpResponse response=client.send
  (
    builder.uri(URI.create(""http://localhost:1000/Test.txt""))        
   .GET()
   .timeout(Duration.ofSeconds(5))                        
   .version(HttpClient.Version.HTTP_2)
   .build(),
   HttpResponse.BodyHandlers.ofString()
  );
  debug(response);
  
  System.out.println(""**********************************************"");
  
  //2nd request to put data of size 100kb[it never uploads the full 100kb only upto the 64kb mark]
  byte[] data=new byte[100*1024];
  response=client.send
  (
    builder.uri(URI.create(""http://localhost:1000/Test.txt""))        
   .PUT(HttpRequest.BodyPublishers.ofByteArray(data))
   .timeout(Duration.ofSeconds(20))                        
   .version(HttpClient.Version.HTTP_2)
   .build(),
    HttpResponse.BodyHandlers.ofString()
  );
  debug(response);
 }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Upload remaining data as separate requests

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-09-14 00:21;tongwan;PUT_Client.java;https://bugs.openjdk.org/secure/attachment/100752/PUT_Client.java","2022-09-14 00:21;tongwan;PUT_Server.java;https://bugs.openjdk.org/secure/attachment/100753/PUT_Server.java","2022-10-10 06:16;jpai;PutTest.java;https://bugs.openjdk.org/secure/attachment/101008/PutTest.java",,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yjpf:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-09-14 00:33;tongwan;The observations on Windows 10:
JDK 11: Failed, received data is less than 100KB
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+32: Failed.
JDK 20ea+4: Failed.;;;","2022-10-10 06:17;jpai;I've attached an unpolished version of a jtreg test case which reproduces this issue. File is named PutTest.java.;;;","2023-02-21 13:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12694
Date: 2023-02-21 17:31:29 +0000;;;","2023-05-08 07:52;dukebot;Changeset: ad90fb6d
Author:    Conor Cleary <ccleary@openjdk.org>
Date:      2023-05-08 14:49:43 +0000
URL:       https://git.openjdk.org/jdk/commit/ad90fb6da38da066dfc7a5439196887bbcda766f
;;;",,,,,,,,,,,,,,,,,,,
Shenandoah: some tests failed on lock rank check,JDK-8293782,5083374,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-09-13 23:54,2022-10-17 13:54,2023-10-01 09:56,2022-10-11 03:08,20,,,,,,20,hotspot,,0,gc-shenandoah,tencent-interest,,,,,,,,,,,,,,,,,,"This is on behalf of tobytbzhang@tencent.com


After JDK-8290025, some tests using ShenandoahGC failed on the lock rank check between AdapterHandlerLibrary_lock and ShenandoahRequestedGC_lock

Reproduce: test the following tests with -XX:+UseShenandoahGC
```
compiler/codecache/jmx/InitialAndMaxUsageTest.java
compiler/codecache/OverflowCodeCacheTest.java
compiler/profiling/spectrapredefineclass/Launcher.java
compiler/profiling/spectrapredefineclass_classloaders/Launcher.java
```

Symptom
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/data1/ws/jdk/src/hotspot/share/runtime/mutex.cpp:454), pid=2018566, tid=2022220
#  assert(false) failed: Attempting to acquire lock ShenandoahRequestedGC_lock/safepoint-1 out of order with lock AdapterHandlerLibrary_lock/safepoint-1 -- possible deadlock
#
# JRE version: OpenJDK Runtime Environment (20.0) (slowdebug build 20-internal-adhoc.root.jdk)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 20-internal-adhoc.root.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x106fd6a]  Mutex::check_rank(Thread*)+0x426
#

Current thread (0x00007faf18318c90):  JavaThread ""MainThread"" [_thread_in_vm, id=2022220, stack(0x00007faf00113000,0x00007faf00214000)]

Stack: [0x00007faf00113000,0x00007faf00214000],  sp=0x00007faf002117c0,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x106fd6a]  Mutex::check_rank(Thread*)+0x426  (mutex.cpp:454)
V  [libjvm.so+0x106ea2b]  Mutex::lock(Thread*)+0x83  (mutex.cpp:120)
V  [libjvm.so+0x106ea9f]  Mutex::lock()+0x23  (mutex.cpp:132)
V  [libjvm.so+0x351434]  MutexLocker::MutexLocker(Mutex*, Mutex::SafepointCheckFlag)+0x5a  (mutexLocker.hpp:205)
V  [libjvm.so+0x3514ad]  MonitorLocker::MonitorLocker(Monitor*, Mutex::SafepointCheckFlag)+0x29  (mutexLocker.hpp:244)
V  [libjvm.so+0x120dd66]  ShenandoahControlThread::handle_requested_gc(GCCause::Cause)+0x2e  (shenandoahControlThread.cpp:509)
V  [libjvm.so+0x120dd35]  ShenandoahControlThread::request_gc(GCCause::Cause)+0xeb  (shenandoahControlThread.cpp:495)
V  [libjvm.so+0x1221d31]  ShenandoahHeap::collect(GCCause::Cause)+0x2b  (shenandoahHeap.cpp:1152)
V  [libjvm.so+0x875f2c]  CodeCache::gc_on_allocation()+0x13c  (codeCache.cpp:796)
V  [libjvm.so+0x86a63c]  AdapterBlob::create(CodeBuffer*)+0x1e  (codeBlob.cpp:310)
V  [libjvm.so+0x11cb95b]  AdapterHandlerLibrary::create_adapter(AdapterBlob*&, int, BasicType*, bool)+0x217  (sharedRuntime.cpp:2904)
V  [libjvm.so+0x11cb6c7]  AdapterHandlerLibrary::get_adapter(methodHandle const&)+0x2cd  (sharedRuntime.cpp:2853)
V  [libjvm.so+0x10333e1]  Method::make_adapters(methodHandle const&, JavaThread*)+0x1d  (method.cpp:1252)
V  [libjvm.so+0x103336f]  Method::link_method(methodHandle const&, JavaThread*)+0x1d1  (method.cpp:1236)
V  [libjvm.so+0xc0d82f]  InstanceKlass::link_methods(JavaThread*)+0x8f  (instanceKlass.cpp:943)
V  [libjvm.so+0xc0d4c7]  InstanceKlass::link_class_impl(JavaThread*)+0x4e5  (instanceKlass.cpp:886)
V  [libjvm.so+0xc0ce1d]  InstanceKlass::link_class(JavaThread*)+0x7f  (instanceKlass.cpp:751)
V  [libjvm.so+0xc0dcc1]  InstanceKlass::initialize_impl(JavaThread*)+0x61  (instanceKlass.cpp:1020)
V  [libjvm.so+0xc0cd0e]  InstanceKlass::initialize(JavaThread*)+0x40  (instanceKlass.cpp:733)
V  [libjvm.so+0xc365fa]  InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)+0x13a  (interpreterRuntime.cpp:226)
j  compiler.codecache.OverflowCodeCacheTest.test()V+166
j  compiler.codecache.OverflowCodeCacheTest.main([Ljava/lang/String;)V+49
j  java.lang.invoke.LambdaForm$DMH+0x0000000801002800.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 java.base@20-internal
j  java.lang.invoke.LambdaForm$MH+0x0000000801003c00.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 java.base@20-internal
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 java.base@20-internal
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 java.base@20-internal
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 java.base@20-internal
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 java.base@20-internal
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+134
j  java.lang.Thread.run()V+13 java.base@20-internal
v  ~StubRoutines::call_stub 0x00007faf00e97d27
V  [libjvm.so+0xc46895]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x59d  (javaCalls.cpp:417)
V  [libjvm.so+0x10de464]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x32  (os_linux.cpp:4880)
V  [libjvm.so+0xc462f4]  JavaCalls::call(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x3a  (javaCalls.cpp:331)
V  [libjvm.so+0xc45370]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x19a  (javaCalls.cpp:187)
V  [libjvm.so+0xc4547d]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x95  (javaCalls.cpp:193)
V  [libjvm.so+0xd53f23]  thread_entry(JavaThread*, JavaThread*)+0x91  (jvm.cpp:2876)
V  [libjvm.so+0xc5fe60]  JavaThread::thread_main_inner()+0x164  (javaThread.cpp:700)
V  [libjvm.so+0xc5fcf0]  JavaThread::run()+0x204  (javaThread.cpp:683)
V  [libjvm.so+0x13bb874]  Thread::call_run()+0x180  (thread.cpp:224)
V  [libjvm.so+0x10d4c07]  thread_native_entry(Thread*)+0x18f  (os_linux.cpp:710)

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  compiler.codecache.OverflowCodeCacheTest.test()V+166
j  compiler.codecache.OverflowCodeCacheTest.main([Ljava/lang/String;)V+49
j  java.lang.invoke.LambdaForm$DMH+0x0000000801002800.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 java.base@20-internal
j  java.lang.invoke.LambdaForm$MH+0x0000000801003c00.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 java.base@20-internal
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 java.base@20-internal
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 java.base@20-internal
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 java.base@20-internal
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 java.base@20-internal
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+134
j  java.lang.Thread.run()V+13 java.base@20-internal
v  ~StubRoutines::call_stub 0x00007faf00e97d27
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290025,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yk4b:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-09-14 00:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10264
Date: 2022-09-14 07:01:52 +0000;;;","2022-10-11 03:08;dukebot;Changeset: 6053bf0f
Author:    Tongbao Zhang <tobytbzhang@tencent.com>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2022-10-11 10:04:30 +0000
URL:       https://git.openjdk.org/jdk/commit/6053bf0f6a754bf3943ba6169316513055a5a3b2
;;;",,,,,,,,,,,,,,,,,,,,,
redundant checking in AESCrypt.makeSessionKey() method,JDK-8293779,5083371,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xuelei,xuelei,xuelei,2022-09-13 22:52,2022-09-21 23:08,2023-10-01 09:56,2022-09-15 08:08,,,,,,,20,security-libs,,0,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,,,"The following checking for key in the makeSessionKey() method is redundant as it the same checking has been performance before calling the method.

        if (k == null) {
            throw new InvalidKeyException(""Empty key"");
        }
        if (!isKeySizeValid(k.length)) {
             throw new InvalidKeyException(""Invalid AES key length: "" +
                                           k.length + "" bytes"");
        }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yk3n:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2022-09-13 23:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10263
Date: 2022-09-14 05:58:10 +0000;;;","2022-09-15 08:08;dukebot;Changeset: ecb456ae
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-09-15 15:06:27 +0000
URL:       https://git.openjdk.org/jdk/commit/ecb456ae29ac155c7f5632fbe5cfc4c0c5b5c959
;;;",,,,,,,,,,,,,,,,,,,,,
runtime/handshake/SystemMembarHandshakeTransitionTest.java fails if MEMBARRIER_CMD_QUERY is unsupported,JDK-8293771,5083367,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-09-13 19:42,2022-09-19 11:11,2023-10-01 09:56,2022-09-14 00:58,20,,,,,,20,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,"STDERR:
 stdout: [[0.003s][error][os] MEMBARRIER_CMD_QUERY unsupported
Error occurred during initialization of VM
Failed to initialize the requested system memory barrier synchronization.
];
 stderr: [Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
 exitValue = 1

 stdout: [[0.003s][error][os] MEMBARRIER_CMD_QUERY unsupported
Error occurred during initialization of VM
Failed to initialize the requested system memory barrier synchronization.
];
 stderr: [Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
 exitValue = 1

java.lang.RuntimeException: '(JOINED|Failed to initialize request system memory barrier synchronization.)' missing from stdout/stderr
        at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
        at SystemMembarHandshakeTransitionTest.main(SystemMembarHandshakeTransitionTest.java:61)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:1589)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292591,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yk2r:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-13 20:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10259
Date: 2022-09-14 02:54:45 +0000;;;","2022-09-14 00:58;dukebot;Changeset: 8351b30e
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-09-14 07:54:32 +0000
URL:       https://git.openjdk.org/jdk/commit/8351b30e009d5183e87277aba654cff6a6b7ab0d
;;;",,,,,,,,,,,,,,,,,,,,,
AWT test TestSinhalaChar.java has old SCCS markings,JDK-8293767,5083361,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,psadhukhan,jjg,jjg,2022-09-13 15:45,2023-04-24 20:40,2023-10-01 09:56,2022-09-16 00:59,19,,,,,,20,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,sn_127,,,,,,,,,,,,,"The string after `@test` is obsolete and should be removed.  It indicates remnants of an SCCS history. 

/**
 * @test @(#)TestSinhalaChar.java
 * @key headful
 * @summary verify lack of crash on U+0DDD.
 * @bug 6795060
 */",,,,,,,,,,JDK-8306276,JDK-8299400,JDK-8305475,JDK-8299409,JDK-8301270,JDK-8306788,JDK-8306277,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yk1f:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-09-15 04:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10285
Date: 2022-09-15 11:44:10 +0000;;;","2022-09-16 00:59;dukebot;Changeset: 141d5f5d
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-09-16 07:58:00 +0000
URL:       https://git.openjdk.org/jdk/commit/141d5f5deec488531e410af875c781f4b70490da
;;;","2022-12-24 21:55;serb;Fix request (17u)

Clean backport. The fix for a test bug. The SCCS tag caused tests to fail if the new jtreg is in use.
Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/986;;;","2022-12-24 21:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/986
Date: 2022-12-25 05:03:42 +0000;;;","2022-12-27 03:07;serb;Fix request (11u)

Clean backport. The fix for a test bug. The SCCS tag caused tests to fail if the new jtreg is in use.
Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/1612;;;","2022-12-27 03:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1612
Date: 2022-12-27 10:22:38 +0000;;;","2023-01-25 11:45;serb;Fix request (8u)

Clean backport. The fix for a test bug. The SCCS tag caused tests to fail if the new jtreg is in use.
Review 8u-dev: https://github.com/openjdk/jdk8u-dev/pull/236;;;","2023-01-25 11:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/236
Date: 2023-01-25 19:42:09 +0000;;;",,,,,,,,,,,,,,,
[lworld] C1 does not properly handle unloaded inline type field loads,JDK-8293702,5083288,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,chagedorn,chagedorn,2022-09-13 07:08,2023-02-22 06:23,2023-10-01 09:56,2023-02-22 06:23,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,c1,lworld,,,,,,,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f2715e4e6d1, pid=42301, tid=42317
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-lworld4ea-2022-09-13-1051563.christian.hagedorn.valhalla)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-lworld4ea-2022-09-13-1051563.christian.hagedorn.valhalla, compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8256d1]  CodeEmitInfo::CodeEmitInfo(CodeEmitInfo*, ValueStack*)+0x21


To reproduce:
1) Checkout custom branch (https://github.com/chhagedorn/valhalla/tree/JDK-8293702) which applies the new IR framework changes from JDK-8280378 to Valhalla together with some Valhalla specific fixes.
2) Run compiler/valhalla/inlinetypes/TestUnloadedInlineTypeField.java with -javaoptions:""-Xcomp""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-09-13 07:14;chagedorn;hs_err_pid42301.log;https://bugs.openjdk.org/secure/attachment/100748/hs_err_pid42301.log","2022-09-13 07:14;chagedorn;replay_pid42301.log;https://bugs.openjdk.org/secure/attachment/100749/replay_pid42301.log",,,,,,,,,,,,,,,,,,,,,,"0|i2yjl7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-22 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/825
Date: 2023-02-22 13:31:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
jdeps InverseDepsAnalyzer runs into NoSuchElementException: No value present,JDK-8293701,5083287,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2022-09-13 06:59,2022-11-08 23:52,2023-10-01 09:56,2022-10-05 00:35,11,17,20,,,,20,tools,,0,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,,,,,,,,,,,"We noticed that with certain jar file input,  jdeps runs into the following exception, this happens with jdk11, 17 and 20.

C:\jdk-11.0.16.1\bin\jdeps.exe  --multi-release 11 --module-path . --inverse --package com.sap.nw.performance.supa.client  test.jar

Inverse transitive dependences matching packages [com.sap.nw.performance.supa.client]
Exception in thread ""main"" java.util.NoSuchElementException: No value present
        at java.base/java.util.Optional.get(Optional.java:148)
        at jdk.jdeps/com.sun.tools.jdeps.InverseDepsAnalyzer.lambda$inverseDependences$2(InverseDepsAnalyzer.java:150)
        at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
        at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
        at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
        at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
        at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
        at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)
        at jdk.jdeps/com.sun.tools.jdeps.InverseDepsAnalyzer.lambda$inverseDependences$3(InverseDepsAnalyzer.java:150)
        at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
        at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
        at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)
        at jdk.jdeps/com.sun.tools.jdeps.InverseDepsAnalyzer.inverseDependences(InverseDepsAnalyzer.java:145)
        at jdk.jdeps/com.sun.tools.jdeps.JdepsTask$InverseAnalyzeDeps.run(JdepsTask.java:860)
        at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:574)
        at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:533)
        at jdk.jdeps/com.sun.tools.jdeps.Main.main(Main.java:49)


C:\jdk-17.0.4.1\bin\jdeps  --multi-release 11 --module-path . --inverse --package com.sap.nw.performance.supa.client  test.jar

Inverse transitive dependences matching packages [com.sap.nw.performance.supa.client]
Exception in thread ""main"" java.util.NoSuchElementException: No value present
        at java.base/java.util.Optional.get(Optional.java:143)
        at jdk.jdeps/com.sun.tools.jdeps.InverseDepsAnalyzer.lambda$inverseDependences$2(InverseDepsAnalyzer.java:150)
        at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
        at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
        at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1845)
        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
        at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
        at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
        at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
        at jdk.jdeps/com.sun.tools.jdeps.InverseDepsAnalyzer.lambda$inverseDependences$3(InverseDepsAnalyzer.java:150)
        at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
        at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1845)
        at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
        at jdk.jdeps/com.sun.tools.jdeps.InverseDepsAnalyzer.inverseDependences(InverseDepsAnalyzer.java:145)
        at jdk.jdeps/com.sun.tools.jdeps.JdepsTask$InverseAnalyzeDeps.run(JdepsTask.java:860)
        at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:574)
        at jdk.jdeps/com.sun.tools.jdeps.JdepsTask.run(JdepsTask.java:533)
        at jdk.jdeps/com.sun.tools.jdeps.Main.main(Main.java:49) 


Looks like the iteration/streams - related coding in InverseDepsAnalyzer.java  might need some adjustments , to be able to deal with  ""empty""  optionals  (v.get() seems to fail) ?

https://github.com/openjdk/jdk/blob/master/src/jdk.jdeps/share/classes/com/sun/tools/jdeps/InverseDepsAnalyzer.java#L150",,,,,,,,,,JDK-8295880,JDK-8296597,JDK-8296220,JDK-8296221,JDK-8296308,JDK-8296495,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294840,,,,,,,,"2022-09-22 13:52;mchung;jdeps-test.zip;https://bugs.openjdk.org/secure/attachment/100846/jdeps-test.zip",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yjkz:",9223372036854775807,b18,,,,,,,,,,,"2022-09-13 07:35;mbaesken;See also  https://github.com/SAP/SapMachine/issues/1037 where a similar issue has been reported.;;;","2022-09-16 01:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10300
Date: 2022-09-16 08:26:00 +0000;;;","2022-09-20 11:02;mchung;Can you provide the reproducible test case?   A description of the modules and it dependences would also help to understand the root cause of this issue?;;;","2022-09-20 11:03;mchung;I close it as incomplete for now and waiting for additional information for diagnosing this issue.;;;","2022-09-21 11:03;mchung;From Matthia (https://github.com/openjdk/jdk/pull/10300#issuecomment-1253360664)

Here are as far as I can see the most important jars, with module descriptions.
I wondered about the com.sap.nw.performance.commons requires - I did not notice and export for this one, looked a bit strange to me (this should have been in performance-commons.jar at least the authors told me so ...

supa_jdeps/SUPA/lib> jdk/images/jdk/bin/jar --file=supa-client.jar --describe-module
com.sap.nw.performance.supa.client jar:file:///supa_jdeps/SUPA/lib/supa-client.jar!/module-info.class
exports com.sap.nw.performance.supa.automation
requires com.sap.nw.performance.commons transitive
requires com.sap.nw.performance.supa.api transitive
requires com.sap.nw.performance.supa.base transitive
requires java.base mandated
requires java.logging transitive
qualified exports com.sap.nw.performance.supa.automation.implementation to supa.tests
opens com.sap.nw.performance.supa.automation

supa_jdeps/SUPA/lib> jdk/images/jdk/bin/jar --file=supa-base.jar --describe-module
com.sap.nw.performance.supa.base jar:file:///test/SUPA/lib/supa-base.jar!/module-info.class
exports com.sap.nw.performance.supa.base
exports com.sap.nw.performance.supa.base.command
exports com.sap.nw.performance.supa.base.config
exports com.sap.nw.performance.supa.base.cpuinfo
exports com.sap.nw.performance.supa.base.http
exports com.sap.nw.performance.supa.base.io
exports com.sap.nw.performance.supa.base.processinfo
exports com.sap.nw.performance.supa.base.processinfo.os
exports com.sap.nw.performance.supa.base.system
exports com.sap.nw.performance.supa.base.time
exports com.sap.nw.performance.supa.base.utils
exports com.sap.nw.performance.supa.base.utils.file
requires JNativeHook transitive
requires com.github.spotbugs.annotations static
requires com.google.common transitive
requires com.google.gson transitive
requires com.sap.nw.performance.commons transitive
requires com.sap.nw.performance.supa.api transitive
requires ecs transitive
requires java.base mandated
requires java.desktop transitive
requires java.net.http transitive
requires org.apache.commons.collections4 transitive
requires org.apache.commons.text transitive
requires org.apache.httpcomponents.httpclient transitive
requires org.apache.httpcomponents.httpcore transitive
requires org.apache.httpcomponents.httpmime transitive
qualified exports com.sap.nw.performance.supa.base.cpuinfo.os to supa.tests

supa_jdeps/SUPA/lib> jdk/images/jdk/bin/jar --file=supa-api.jar --describe-module
com.sap.nw.performance.supa.api jar:file:///supa_jdeps/SUPA/lib/supa-api.jar!/module-info.class
exports com.sap.nw.performance.supa.api
exports com.sap.nw.performance.supa.api.config
exports com.sap.nw.performance.supa.api.manager.state
exports com.sap.nw.performance.supa.api.processinfo
exports com.sap.nw.performance.supa.api.processprofiler
requires com.sap.nw.performance.commons transitive
requires java.base mandated

supa_jdeps/SUPA/lib> jdk/images/jdk/bin/jar --file=performance-commons.jar --describe-module
com.sap.nw.performance.commons jar:file:///supa_jdeps/SUPA/lib/performance-commons.jar!/module-info.class
exports com.sap.nw.performance.commons.command
exports com.sap.nw.performance.commons.config
exports com.sap.nw.performance.commons.exceptions
exports com.sap.nw.performance.commons.outlier
exports com.sap.nw.performance.commons.remote
exports com.sap.nw.performance.commons.remote.command
exports com.sap.nw.performance.commons.results
exports com.sap.nw.performance.commons.utils
exports com.sap.nw.performance.commons.utils.html
exports com.sap.nw.performance.commons.utils.http
exports com.sap.nw.performance.commons.utils.jdsr
exports com.sap.nw.performance.commons.utils.net
exports com.sap.nw.performance.commons.utils.path
exports com.sap.nw.performance.commons.utils.zip
exports com.sap.nw.performance.limits
exports com.sap.nw.performance.measrules
exports com.sap.nw.performance.measrules.rule
requires client.combined
requires com.github.spotbugs.annotations static
requires com.google.gson
requires commons.cli transitive
requires commons.configuration transitive
requires commons.lang transitive
requires java.base mandated
requires java.desktop
requires java.management
requires java.scripting
requires java.sql transitive
requires junit static
requires mustache.compiler
requires opencsv
requires org.apache.commons.io transitive
requires org.apache.commons.lang3
requires org.apache.commons.text
requires org.apache.derby.client static
requires org.apache.derby.engine static
requires org.apache.derby.tools static
requires org.objectweb.asm
requires org.objectweb.asm.commons
requires org.objectweb.asm.tree
requires org.objectweb.asm.tree.analysis
requires org.objectweb.asm.util
requires org.openjdk.nashorn
opens com.sap.nw.performance.measrules;;;","2022-09-21 11:36;mchung;Can you try applying this patch and run jdeps -J-Djdeps.debug=true and find out which module it's not found?

diff --git a/src/jdk.jdeps/share/classes/com/sun/tools/jdeps/InverseDepsAnalyzer.java b/src/jdk.jdeps/share/classes/com/sun/tools/jdeps/InverseDepsAnalyzer.java
index 5720fe7f60a..17dfb06f94b 100644
--- a/src/jdk.jdeps/share/classes/com/sun/tools/jdeps/InverseDepsAnalyzer.java
+++ b/src/jdk.jdeps/share/classes/com/sun/tools/jdeps/InverseDepsAnalyzer.java
@@ -144,7 +144,9 @@ public class InverseDepsAnalyzer extends DepsAnalyzer {
             configuration.getModules().values()
                 .forEach(m -> {
                     builder.addNode(m);
+                    trace(""%s%n"", m);
                     m.descriptor().requires().stream()
+                        .peek(req -> trace(""%s requires %s config %s%n"", ""  "", m.name(), req, configuration.findModule(req.name())))
                         .map(Requires::name)
                         .map(configuration::findModule)  // must be present
                         .forEach(v -> builder.addEdge(v.get(), m));
;;;","2022-09-22 01:03;mbaesken;thanks for the patch, the last output is 
node com.sap.nw.performance.supa.base
  requires com.sap.nw.performance.supa.base config transitive org.apache.commons.collections4
  requires com.sap.nw.performance.supa.base config static com.github.spotbugs.annotations

and btw. it might be beneficial to have these traces in the standard jdeps.;;;","2022-09-22 14:02;mchung;Thanks for the output.

The cause is the optional dependency ""requires static M"".   Resolution does not search the observable modules for M to satisfy the dependency and so M is not present in the runtime Configuration even if it's observable.

Attached jdeps-test.zip is the reproducible test case.  

$ jdeps --module-path m2.jar:m3.jar --inverse  --package p2 m1.jar 
Inverse transitive dependences matching packages [p1]
Exception in thread ""main"" java.util.NoSuchElementException: No value present
:

It can't find m3 because it's not in the runtime configuration.    Adding `--add-modules m3` option that will add m3 to the root set of modules, it will workaround the issue.

$ jdeps --module-path m2.jar:m3.jar --inverse --add-modules m3 --package p2 m1.jar 

P.S. the additional trace is useful in this debugging situation and specific to inverse dependency analysis.   That will output quite lots of traces and not necessary useful for the typical jdeps usage.;;;","2022-09-22 14:09;mchung;diff --git a/src/jdk.jdeps/share/classes/com/sun/tools/jdeps/InverseDepsAnalyzer.java b/src/jdk.jdeps/share/classes/com/sun/tools/jdeps/InverseDepsAnalyzer.java
index 5720fe7f60a..18ef9af3422 100644
--- a/src/jdk.jdeps/share/classes/com/sun/tools/jdeps/InverseDepsAnalyzer.java
+++ b/src/jdk.jdeps/share/classes/com/sun/tools/jdeps/InverseDepsAnalyzer.java
@@ -145,6 +145,9 @@ public class InverseDepsAnalyzer extends DepsAnalyzer {
                 .forEach(m -> {
                     builder.addNode(m);
                     m.descriptor().requires().stream()
+                        // filter ""requires static"" if the module is not resolved in the configuration
+                        .filter(req -> !req.modifiers().contains(Requires.Modifier.STATIC)
+                                           || configuration.findModule(req.name()).isPresent())
                         .map(Requires::name)
                         .map(configuration::findModule)  // must be present
                         .forEach(v -> builder.addEdge(v.get(), m));;;;","2022-09-28 00:30;mbaesken;With the diff provided above, the  ""java.util.NoSuchElementException: No value present""  is gone.;;;","2022-10-05 00:35;dukebot;Changeset: 953ce8da
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-10-05 07:34:42 +0000
URL:       https://git.openjdk.org/jdk/commit/953ce8da2c7ddd60b09a18c7875616a2477e5ba5
;;;","2022-10-19 01:18;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well because the issue is present there too. The patch applies cleanly and is low risk.;;;","2022-10-19 01:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/806
Date: 2022-10-19 08:15:53 +0000;;;","2022-10-21 00:18;clanger;Fix request (19u)
Clean backport for a fix to jdeps. Tested in SAP nightlies and GHA.;;;","2022-10-21 00:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/54
Date: 2022-10-21 07:17:54 +0000;;;","2022-11-02 03:01;yan;Fix request (13u, 15u):
clean backports of the fix to jdeps. All relevant tests do pass.;;;","2022-11-02 03:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/424
Date: 2022-11-02 10:02:02 +0000;;;","2022-11-02 03:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/298
Date: 2022-11-02 10:01:55 +0000;;;",,,,,
"java/nio/channels/DatagramChannel/SelectWhenRefused.java fails with ""Unexpected wakeup""",JDK-8293696,5083282,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dclarke,dfuchs,dfuchs,2022-09-13 06:36,2023-02-01 07:41,2023-10-01 09:56,2022-11-11 04:00,20,,,,,,20,core-libs,,0,intermittent,key-intermittent,tier2,,,,,,,,,,,,,,,,,"java/nio/channels/DatagramChannel/SelectWhenRefused.java failed once  with ""Unexpected wakeup""
java.lang.RuntimeException: Unexpected wakeup
	at SelectWhenRefused.main(SelectWhenRefused.java:60)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8203049,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yjjv:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2022-10-25 05:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10851
Date: 2022-10-25 12:35:15 +0000;;;","2022-11-11 04:00;dukebot;Changeset: fdabd379
Author:    Darragh Clarke <Darragh.clarke@oracle.com>
Committer: Aleksei Efimov <aefimov@openjdk.org>
Date:      2022-11-11 11:56:41 +0000
URL:       https://git.openjdk.org/jdk/commit/fdabd3796098c0ef0f528847da2cd98256443877
;;;",,,,,,,,,,,,,,,,,,,,,
converting a defined BasicType value to a string should not crash the VM,JDK-8293691,5083275,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jsjolen,dnsimon,dnsimon,2022-09-13 05:36,2023-08-07 14:17,2023-10-01 09:56,2022-10-03 05:22,17,20,,,,,20,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,regression,starter,,,,,,,,,,,,,,,"The fix for JDK-8287491 was a little too aggressive in that it modified a test (TestInvalidDebugInfo ) to prevent type2name being called with BasicType::T_ILLEGAL. While T_ILLEGAL models an invalid value and it should not show up in certain contexts, simply converting it to a string should not crash the VM. That is, in the context of type2name, T_ILLEGAL is a valid value.

I would recommend adopting the fix suggested by [~kbarrett]: https://bugs.openjdk.org/browse/JDK-8287491?focusedCommentId=14498870&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14498870",,,,,,,,,,JDK-8301198,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287491,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yjib:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-27 02:10;jsjolen;I agree with your assessment re: Kim's fix.

[~kbarrett], you had some more comments. I agree with those too, but those will go into an RFE.;;;","2022-09-27 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10447
Date: 2022-09-27 11:21:40 +0000;;;","2022-10-03 05:22;dukebot;Changeset: f2a32d99
Author:    Johan Sjölen <jsjolen@openjdk.org>
Committer: Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-10-03 12:18:04 +0000
URL:       https://git.openjdk.org/jdk/commit/f2a32d996ae09620474771c46a649f6c4e1148ad
;;;","2023-01-20 09:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1094
Date: 2023-01-20 16:54:53 +0000;;;","2023-01-23 08:41;dlutker;Fix request [17u]

Clean backport to as a followup fix to https://bugs.openjdk.org/browse/JDK-8286562. This is low risk and is passing tier1/2 on local builds with GCC12.2.0.;;;","2023-01-23 11:57;phh;Addendum to 17u fix request.

3rd in a 3 backport bundle including JDK-8286562 and JDK-8287491.;;;",,,,,,,,,,,,,,,,,
ResponseAPDU getData() method javadoc,JDK-8293681,5083252,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,webbuggrp,webbuggrp,2022-09-12 15:10,2022-11-16 23:39,2023-10-01 09:56,2022-11-14 09:41,11,17,18,19,20,8,20,security-libs,,0,dcsaw,noreg-doc,reproducer-other,smartcardio,starter-bug,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
In the ResponseAPDU class, the getData() method's javadoc in it's current state is written as:
 * Returns a copy of the data bytes in the response body. If this APDU as
 * no body, this method returns a byte array with a length of zero.

I believe what this is trying to say is changing the 'as' in the first line to 'has' like this:
 * Returns a copy of the data bytes in the response body. If this APDU has
 * no body, this method returns a byte array with a length of zero.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
just look at the javadoc of that class, you'll see it

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
has instead of as
ACTUAL -
as instead of has

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yjd7:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@21bb4914,,,,,,,,,"2022-09-13 00:25;tongwan;The following documents contain the same error: 
https://docs.oracle.com/javase/8/docs/jre/api/security/smartcardio/spec/javax/smartcardio/ResponseAPDU.html#getData--
https://docs.oracle.com/en/java/javase/11/docs/api/java.smartcardio/javax/smartcardio/ResponseAPDU.html#getData()
https://docs.oracle.com/en/java/javase/17/docs/api/java.smartcardio/javax/smartcardio/ResponseAPDU.html#getData()
https://docs.oracle.com/en/java/javase/18/docs/api/java.smartcardio/javax/smartcardio/ResponseAPDU.html#getData()
https://download.java.net/java/early_access/jdk19/docs/api/java.smartcardio/javax/smartcardio/ResponseAPDU.html#getData()
https://download.java.net/java/early_access/jdk20/docs/api/java.smartcardio/javax/smartcardio/ResponseAPDU.html#getData();;;","2022-09-30 07:20;mullan;Yes, it is just a typo, ""as"" should be ""has"".;;;","2022-10-17 11:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10732
Date: 2022-10-17 17:45:13 +0000;;;","2022-11-14 09:41;dukebot;Changeset: e269dc03
Author:    Mark Powers <mpowers@openjdk.org>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2022-11-14 17:37:42 +0000
URL:       https://git.openjdk.org/jdk/commit/e269dc03ad05e5734e08ca44d05e2eff4bdbc5fc
;;;",,,,,,,,,,,,,,,,,,,
PPC64BE build failure after JDK-8293344,JDK-8293680,5083264,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-09-12 23:52,2022-09-19 11:10,2023-10-01 09:56,2022-09-13 22:40,20,,,,,,20,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,,,,,"The bug manifests on PPC64, since `section_by_name` is protected by `#if defined(PPC64) && !defined(ABI_ELFv2)`:

```
* For target hotspot_variant-server_libjvm_objs_elfFile.o:
/home/shade/trunks/jdk/src/hotspot/share/utilities/elfFile.cpp: In member function 'int ElfFile::section_by_name(const char*, Elf_Shdr&)':
/home/shade/trunks/jdk/src/hotspot/share/utilities/elfFile.cpp:261:16: error: aggregate 'ResourceMark rm' has incomplete type and cannot be defined
  261 |   ResourceMark rm;
      |                ^~
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293344,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yjfv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-12 23:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10247
Date: 2022-09-13 06:55:34 +0000;;;","2022-09-13 22:40;dukebot;Changeset: b3461c18
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-09-14 05:37:34 +0000
URL:       https://git.openjdk.org/jdk/commit/b3461c188a1d364a71e2ef7f6b2ccc29dd3ac66f
;;;",,,,,,,,,,,,,,,,,,,,,
Update freetype md file,JDK-8293672,5083255,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnguyen,dnguyen,dnguyen,2022-09-12 15:35,2023-09-29 08:47,2023-10-01 09:56,2022-10-06 09:10,11,17,19,20,,,20,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sn_126,sn_127,sn_128,,,,,,,,,Need to update freetype.md file,,,,,,,,,,JDK-8295870,JDK-8295385,JDK-8295371,JDK-8295869,JDK-8295249,JDK-8295390,,,,,,,,,,,,,,,,,,,,,,JDK-8292997,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yjdv:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-10-04 10:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10561
Date: 2022-10-04 17:32:23 +0000;;;","2022-10-06 09:10;dukebot;Changeset: fef345b1
Author:    Damon Nguyen <dnguyen@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-10-06 16:07:47 +0000
URL:       https://git.openjdk.org/jdk/commit/fef345b19f74f5d706b173b1af87bcda98dc6ff2
;;;","2022-10-13 07:41;goetz;Fix request [11u, 17u]

I backport this for parity with 11.0.18-oracle, also to 17.
No risk, only a license change.
Clean backport.
SAP nighlty testing passed.;;;","2022-10-13 09:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/788
Date: 2022-10-13 15:10:30 +0000;;;","2022-10-13 09:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1458
Date: 2022-10-13 15:09:01 +0000;;;","2022-10-13 23:00;goetz;Hi Damon, you are doing the -oracle backports, right? I did them for the open repos.
Did you have to do any adaptions as you need a review? My backports have been clean.;;;","2022-10-25 02:37;yan;Fix request (13u, 15u)
clean backport of a license change following the update.;;;","2022-10-25 02:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/420
Date: 2022-10-25 09:37:23 +0000;;;","2022-10-25 02:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/294
Date: 2022-10-25 09:37:27 +0000;;;",,,,,,,,,,,,,,
"sun/management/jmxremote/bootstrap/RmiBootstrapTest.java#id1 failed with ""SSLHandshakeException: Remote host terminated the handshake""",JDK-8293657,5083228,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jpai,dcubed,dcubed,2022-09-12 09:56,2023-07-05 01:12,2023-10-01 09:56,2022-09-22 21:57,20,,,,,,20,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,problemlist,tier3,tier6,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

sun/management/jmxremote/bootstrap/RmiBootstrapTest.java#id1

Here's a snippet from the log file:

#section:main
----------messages:(7/563)----------
command: main RmiBootstrapTest .*_ssltest.*.in
reason: User specified action: run main/othervm/timeout=300 RmiBootstrapTest .*_ssltest.*.in 
started: Mon Sep 12 15:39:10 UTC 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.management,jdk.management.agent --add-exports java.management/sun.management=ALL-UNNAMED --add-exports jdk.management.agent/jdk.internal.agent=ALL-UNNAMED --add-exports jdk.management.agent/sun.management.jmxremote=ALL-UNNAMED
finished: Mon Sep 12 15:39:13 UTC 2022
elapsed time (seconds): 3.002
----------configuration:(6/293)----------
Boot Layer
  add modules: java.management jdk.management.agent          
  add exports: java.management/sun.management                ALL-UNNAMED
               jdk.management.agent/jdk.internal.agent       ALL-UNNAMED
               jdk.management.agent/sun.management.jmxremote ALL-UNNAMED

----------System.out:(6/1197)----------
***
*** Testing configuration (port=45399): /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S54353/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d84a0f71-b8ca-49b5-9e20-76e6b6d800e0/runs/c8069094-63fc-4702-8bca-78f3c4950af6/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/3/sun/management/jmxremote/bootstrap/RmiBootstrapTest_id1.d/management_ssltest07_ok.properties
***
Connection failed for no credentials: java.rmi.ConnectIOException: error during JRMP connection establishment; nested exception is: 
	javax.net.ssl.SSLHandshakeException: Remote host terminated the handshake
Test Failed: Failed to connect to agent {url=service:jmx:rmi://<host>/jndi/rmi://localhost:45399/jmxrmi}: java.lang.RuntimeException: Test /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S54353/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d84a0f71-b8ca-49b5-9e20-76e6b6d800e0/runs/c8069094-63fc-4702-8bca-78f3c4950af6/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/3/sun/management/jmxremote/bootstrap/RmiBootstrapTest_id1.d/management_ssltest07_ok.properties failed with 1 error(s)
----------System.err:(0/0)----------
----------rerun:(42/7242)*----------

<snip>

result: Failed. Unexpected exit from test [exit code: 1]
",,,,,,,,,,JDK-8311479,JDK-8295877,JDK-8311158,JDK-8295299,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293335,JDK-8152523,JDK-8030616,,,,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,,,"0|i2yj7v:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2022-09-12 09:57;dcubed;This failure occurred in jdk-20+15-987-tier3 which includes the fix for:

JDK-8293335 sun/management/jmxremote/bootstrap/RmiBootstrapTest.java#id1failed with ""Agent communication error: java.io.EOFException"";;;","2022-09-12 13:22;dcubed;The test has failed in three Tier3 job sets in rows so I'm bumping the
priority from P4 -> P3.

[~bhuang] and [~kevinw] - So far there are two failure modes here
and neither matches what was just fixed in JDK-8293335. I'll keep
an eye on this test, but if the noise level stays the same/similar to
JDK-8293335, we should ProblemList again...

Update: The failure sighting about free ports has been moved to JDK-8030616.;;;","2022-09-13 09:18;kevinw;There are 4 failures in RmiBootstrapTest.java linked here so far.
Only one is about a free port (again, so far).  The other two, and the bug title, are:

Connection failed for no credentials: java.rmi.ConnectIOException: error during JRMP connection establishment; nested exception is: 
	javax.net.ssl.SSLHandshakeException: Remote host terminated the handshake
Test Failed: Failed to connect to agent {url=service:jmx:rmi://HOSTNAME/jndi/rmi://localhost:45399/jmxrmi}: java.lang.RuntimeException: Test

...similar to JDK-8152523, but it is a different SSLHandshakeException.

The long history of port problems can continue in JDK-8030616 

;;;","2022-09-13 23:26;jpai;Thank you Kevin. I've now moved my ports issue related comments to https://bugs.openjdk.org/browse/JDK-8030616;;;","2022-09-15 12:15;dcubed;The changeset with:

8293343: sun/management/jmxremote/bootstrap/RmiSslNoKeyStoreTest.java failed with ""Agent communication error: java.io.EOFException""
8293335: sun/management/jmxremote/bootstrap/RmiBootstrapTest.java#id1failed with ""Agent communication error: java.io.EOFException""

has reached jdk-20+15-995-tier8 so it looks like this test failure is limited to Tier3.
However, it only seems to happen on Ubuntu machines and this test may not
have been executed on a Ubuntu machines in Tier[4-8].;;;","2022-09-18 05:27;jpai;I had a more detailed look at this test failure which runs into:

Connection failed for no credentials: java.rmi.ConnectIOException: error during JRMP connection establishment; nested exception is: 
	javax.net.ssl.SSLHandshakeException: Remote host terminated the handshake

The test is launced in othervm and then runs tests for various configuration files which are named ""management_ssltestxx_ok.properties"" and ""management_ssltestxx_ko.properties. The xx in that name is a digit. These files are picked up using the java.io.File.listFiles(filter) API against a pre-defined directory.

Looking at the failures so far, it always happens when the ""management_ssltest07_ok.properties"" test is being run. More interestingly, the failure happens only when management_ssltest07_ok.properties is the first one against which the test is run. So locally I edited the test to run the test only against this specific management_ssltest07_ok.properties, to see if it is reproducible locally. Indeed it is. In fact, every single run fails with that exact exception. That properties file has this:

com.sun.management.jmxremote.ssl.enabled.cipher.suites=TLS_DHE_DSS_WITH_AES_128_GCM_SHA256
com.sun.management.jmxremote.ssl.enabled.protocols=SSLv2Hello,SSLv3,TLSv1
com.sun.management.jmxremote.ssl.need.client.auth=true
com.sun.management.jmxremote.authenticate=false
javax.rmi.ssl.client.enabledCipherSuites=TLS_DHE_DSS_WITH_AES_128_GCM_SHA256


Looking at the code in the sun.security.ssl layer and enabling ""javax.net.debug=all"" for one of the local test runs shows that TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 is compatible only with TLSv1.2 https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/sun/security/ssl/CipherSuite.java#L137. However, this specific configuration doesn't enable TLSv1.2. So the SSL handshake with the server fails (as noted in that exception message). The fix to this is to use a cipher suite that is usable with the enabled protocols (SSLv2Hello,SSLv3,TLSv1) in this configuration. A couple of such cipher suites that are usable for this are ""TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA"". These were the ones that were chosen for another configuration file used in this test here https://mail.openjdk.org/pipermail/security-dev/2018-June/017489.html. Using these cipher suites gets that test passing.

So now coming to the part about why this configuration passes at all when it isn't failing intermittently. That turns out to be a genuine bug in the sun.management.jmxremote.HostAwareSslSocketFactory, which I'll explain in a PR that I'm going to open (hard to explain here without the necessary references to code changes).;;;","2022-09-18 06:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10323
Date: 2022-09-18 12:57:28 +0000;;;","2022-09-22 21:57;dukebot;Changeset: f6d78cda
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-09-23 04:54:39 +0000
URL:       https://git.openjdk.org/jdk/commit/f6d78cda853ce6ec6fdda845f1799253461fc618
;;;","2022-10-20 06:40;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Small risk, simple change. The related issues are failures of the same test, but the issues are different, so they are not needed. 
The change includes a cleanup of import forgotten in JDK-8280010 which I had to remove as that change is not in 17.
Test passes before and after. SAP nighlty testing passed.;;;","2022-10-20 06:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/817
Date: 2022-10-20 13:34:55 +0000;;;","2023-07-03 01:57;lucy;Fix request [11u] 

I backport this for parity with 11.0.21-oracle. 
Small risk, simple change. The change applies clean with these exceptions:
 - Copyright year mismatch
 - Test was problem-listed in 17, but not in 11.
 - missing ""import java.io.BufferedInputStream;""

Test passes before and after the fix is applied.
SAP nightly tests pending.;;;","2023-07-03 04:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2018
Date: 2023-07-03 11:53:10 +0000;;;",,,,,,,,,,,
AccessFlag::locations(ClassFileFormatVersion cffv) and locations() results are inconsistent ,JDK-8293627,5083198,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,darcy,kganapureddy,kganapureddy,2022-09-12 01:45,2023-01-23 00:44,2023-10-01 09:56,2022-09-13 09:53,20,,,,,,20,core-libs,,0,conformance,tck-red-20,,,,,,,,,,,,,,,,,,"As per the spec:
locations() - ""Returns kinds of constructs the flag can be applied to in the latest class file format version.""

locations(ClassFileFormatVersion cffv) - ""Returns kinds of constructs the flag can be applied to in the given class file format version.

Expected that, when locations(ClassFileFormatVersion cffv) invoked with ClassFileFormatVersion.latest() parameter the results should match with the results of locations().

Actual Behavior :
The results mismatch for the AccessFlag STRICT.

Please find the attached code to demonstrate this.

Also observed an API note for https://download.java.net/java/early_access/jdk20/docs/api/java.base/java/lang/reflect/AccessFlag.html#STRICT 
that ""The ACC_STRICT access flag is defined for class file major versions 46 through 60, inclusive (JVMS 4.6), corresponding to Java SE 1.2 through 16.""

Technically the locations() as well shall not return any values for AccessFlag STRICT.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293626,,,,,,,,,,,,,,,,,"2022-09-12 01:55;kganapureddy;TestLocationsSupported.java;https://bugs.openjdk.org/secure/attachment/100726/TestLocationsSupported.java",,,,,,,,,,,,,,,,,,,,,,,"0|i2yj17:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,Verified,,"2022-09-12 11:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10243
Date: 2022-09-12 18:14:26 +0000;;;","2022-09-13 09:53;dukebot;Changeset: 1dc5039f
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-09-13 16:51:01 +0000
URL:       https://git.openjdk.org/jdk/commit/1dc5039fed9494f4d9b6c7002d28da9bc466fb10
;;;","2022-09-14 04:54;kganapureddy;[~darcy]
Currently it's an API Note
""The ACC_STRICT access flag is defined for class file major versions 46 through 60, inclusive (JVMS 4.6), corresponding to Java SE 1.2 through 16.""

 this statement is more of normative? If yes then API note can be removed?

Thanks.
;;;","2022-09-15 13:13;darcy;[~kganapureddy], I don't think it is incorrect to have the next in question as an apiNote rather than normative text.

The primary document for such historical information about the evolution of the class file format should by the JVMS.;;;","2022-09-15 21:51;kganapureddy;[~darcy] Thank you.;;;",,,,,,,,,,,,,,,,,,
AccessFlag::locations(ClassFileFormatVersion cffv) does not throw NPEx when parameter is null,JDK-8293626,5083197,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,darcy,kganapureddy,kganapureddy,2022-09-12 01:34,2023-01-23 00:41,2023-10-01 09:56,2022-09-13 09:53,20,,,,,,20,core-libs,,0,conformance,tck-red-20,,,,,,,,,,,,,,,,,,"As per the spec:
https://download.java.net/java/early_access/jdk20/docs/api/java.base/java/lang/reflect/AccessFlag.html#locations(java.lang.reflect.ClassFileFormatVersion)
""Throws:
NullPointerException - if the parameter is null

Observed that NPE is not thrown when parameter is null.

Attached the snippet to demonstrate this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293627,,,,,,JDK-8281660,,,,,,,,,,,,"2022-09-12 01:34;kganapureddy;TestLocationNPEx.java;https://bugs.openjdk.org/secure/attachment/100725/TestLocationNPEx.java",,,,,,,,,,,,,,,,,,,,,,,"0|i2yj0z:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,Verified,,"2022-09-12 11:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10243
Date: 2022-09-12 18:14:26 +0000;;;","2022-09-13 09:53;dukebot;Changeset: 1dc5039f
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-09-13 16:51:01 +0000
URL:       https://git.openjdk.org/jdk/commit/1dc5039fed9494f4d9b6c7002d28da9bc466fb10
;;;",,,,,,,,,,,,,,,,,,,,,
x86: Wrong code generation in class Assembler,JDK-8293618,5083189,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,qamai,qamai,qamai,2022-09-11 19:19,2023-01-23 14:09,2023-10-01 09:56,2022-09-23 10:14,20,,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,"There are some mistakes in code emission of x86 Assembler:
- testl(Address, int32_t) misses prefix(dst)
- addw(Register, Register) misses 0x66 prefix
- emit_operand(Register, Address) is often used incorrectly, maybe we should make the third argument explicit instead
- Assembler should not perform optimisations that change the actual instructions emitted, move these to MacroAssembler instead ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,,,"0|i2yiz7:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Not verified,,"2022-09-11 23:43;chagedorn;Hi [~qamai], have you observed any crashes/wrong executions due to these mistakes?;;;","2022-09-12 08:14;qamai;AFAICT, there seems to be no failure due to these mistakes. testl is only used in testq, which in turn is used only in testP_memNode::emit. This rule does not match due to a really high assigned cost. addw seems to be unused. The mistakes in the usage of emit_operand(Register, Address) and the likes seem to not surface because they are not used in rip relative mode.;;;","2022-09-12 08:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10240
Date: 2022-09-12 15:30:01 +0000;;;","2022-09-12 16:32;dlong;ILW = instructions encoded incorrectly; never seen; no workaround = HLH = P2;;;","2022-09-13 01:52;chagedorn;Thanks Quan for your explanation!;;;","2022-09-23 10:14;dukebot;Changeset: e2f82514
Author:    Quan Anh Mai <anhmdq99@gmail.com>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-09-23 17:12:48 +0000
URL:       https://git.openjdk.org/jdk/commit/e2f82514906d483b6e46ff06d8673b77c9f89f08
;;;","2023-01-23 14:09;epavlova;No failures observed due to these issues. No tests to verify.;;;",,,,,,,,,,,,,,,,
need to properly handle and hide tmp VTMS transitions,JDK-8293613,5083172,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,sspitsyn,sspitsyn,2022-09-09 18:42,2023-09-11 02:35,2023-10-01 09:56,2022-09-27 21:46,19,20,,,,,20,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,"Temporary VTMS transitions are used on the hot code paths in 3 VirtualThread class methods: unpark(), scheduleUnpark() and cancel(). In these cases we can't use the same approach as for normal VTMS transitions because it will add a bid overhead and impact scalability in a bad way.

An alternate approach is to use a lightweight way of hiding of temporary transitions from the JVM TI agents. However, there are a couple of areas with potential problems:
  - suspending virtual/career threads which are in tmp transitions
  - class load, class prepare and CFLH events in tmp transition code path
  - VM operations and Handshakes on behalf of virtual threads in tmp transitions
  - virtual threads in tmp VTMS transitions can disable normal VTMS transitions

Some thread identity problems are well covered in the JNI related bug: JDK-8292674",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292674,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,,"0|i2yivf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-09-18 02:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10321
Date: 2022-09-18 09:13:11 +0000;;;","2022-09-27 21:46;dukebot;Changeset: 79ccc791
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-09-28 04:44:43 +0000
URL:       https://git.openjdk.org/jdk/commit/79ccc791f275be7cfea95ff0ce8cf7361c7f08ad
;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] Update vmTestbase/nsk/jdi/Accessible/modifiers001 to allow ACC_IDENTITY,JDK-8293609,5083163,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2022-09-09 09:50,2022-09-09 11:58,2023-10-01 09:56,2022-09-09 11:58,,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"With identity classes Class.getModifiers() can return 0x20 as ACC_IDENTITY.
Previously it was never returned (was ACC_SUPER).

test/hotspot/jtreg/vmTestbase/nsk/jdi/Accessible/modifier/modifiers001.java should not be clearing 0x20.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yitf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-09-09 10:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/751
Date: 2022-09-09 16:55:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
tstrings::any() is missing an overload,JDK-8293595,5083145,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-09-09 06:42,2022-09-26 09:40,2023-10-01 09:56,2022-09-20 06:08,20,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,"tstrings::any() has an overload for std::wstring (if required) but is missing the corresponding operator overload for std::string, leaving only the templated one as a fallback, which will expand into a std::wostringstream << std::string operation. This isn't particularly safe on Windows, considering that JDK-8292008 and JDK-8247283 have been recently merged, and can sporadically cause build failures. This change simply adds the missing overload with the appropriate format handling that jpackage expects from std::string.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yipf:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-09-09 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10231
Date: 2022-09-09 13:38:14 +0000;;;","2022-09-20 06:08;dukebot;Changeset: bb422f5c
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-09-20 13:04:35 +0000
URL:       https://git.openjdk.org/jdk/commit/bb422f5c14745bf29bc2cb741f819a17c8400543
;;;",,,,,,,,,,,,,,,,,,,,,
Fix mistakes in FX API docs,JDK-8293587,5083135,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,nlisker,fastegal,fastegal,2022-09-09 03:49,2023-03-02 15:56,2023-10-01 09:56,2023-02-24 06:06,jfx19,,,,,,jfx20,javafx,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"Issue for collecting API doc fixes for OpenJFX20

- ListView placeholder property: ""because the table model"" 
- InvokeLaterDispatcher: L42: despite of -> despite
- InvokeLaterDispatcher: L86: runnbale -> runnable
- WinApplication: L130: returng -> returning
- Scene: L3193: UNEXPECTD -> UNEXPECTED",,,,,,,,,,JDK-8303201,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300908,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yin7:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-09-09 05:44;kcr;[~nlisker] OK if I assign this one to you?;;;","2022-09-09 07:26;nlisker;I took it.;;;","2023-01-24 06:37;kcr;[~swpalmer] reported the following in JDK-8300908 :

Minor Typo in Javadoc for Region.centerShapeProperty

The Javadocs currently have:
""true means the shape centered within the Region's width and height, false means the shape is positioned at its source position""

missing ""is"" between shape & centered:
""...the shape is centered...""

It's the same in the Javadoc for setCenterShape, isCenterShape, and centerShapeProperty.
https://openjfx.io/javadoc/19/javafx.graphics/javafx/scene/layout/Region.html#centerShapeProperty();;;","2023-01-24 06:39;kcr;Also from [~swpalmer]

I'm finding other minor typos in the JavaFX Javadocs.
TextFlow mentions:
""This happens because the content of a single Text node can divided and placed in the different locations on the TextFlow""

It should read ""...can be divided..."" ;;;","2023-02-06 15:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1025
Date: 2023-02-06 23:00:17 +0000;;;","2023-02-24 06:06;dukebot;Changeset: 7bf2372b
Author:    Nir Lisker <nlisker@openjdk.org>
Date:      2023-02-24 14:05:10 +0000
URL:       https://git.openjdk.org/jfx/commit/7bf2372baf8ea719b8b611cd1476596d8c141c50
;;;",,,,,,,,,,,,,,,,,
CodeCache::old_nmethods_do incorrectly filters is_unloading nmethods,JDK-8293584,5083132,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,eosterlund,eosterlund,2022-09-09 02:43,2022-12-20 00:04,2023-10-01 09:56,2022-11-21 05:48,20,,,,,,20,hotspot,,0,noreg-hard,,,,,,,,,,,,,,,,,,,"Class redefinition needs to scan for all nmethods, including is_unloading ones. If it doesn't, the Method can get nuked and then a concurrent GC will trip on it and crash. The normal iterator used by class redefinition uses the right iterator, but there is an optmized table being used in CodeCache::old_nmethods_do, and it inconsistently does filter is_unloading nmethods, which is a bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295097,,,,,,JDK-8295097,,JDK-8295097,JDK-8291830,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yimj:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-09 08:43;dcubed;Moving from hotspot/runtime -> hotspot/jvmti since this
involves JVM/TI RedefineClasses.;;;","2022-10-13 18:43;sspitsyn;The function CodeCache::old_nmethods_do which incorrectly filters is_unloading is:
void CodeCache::old_nmethods_do(MetadataClosure* f) {
  // Walk old method table and mark those on stack.
  int length = 0;
  if (old_compiled_method_table != NULL) {
    length = old_compiled_method_table->length();
    for (int i = 0; i < length; i++) {
      CompiledMethod* cm = old_compiled_method_table->at(i);
      // Only walk !is_unloading nmethods, the other ones will get removed by the GC.
      if (!cm->is_unloading()) {         <== INCORRECT FILTERING !!!
        old_compiled_method_table->at(i)->metadata_do(f);
      }
    }
  }
  . . .
}

The CodeCache::old_nmethods_do() is only used in the constructor:
MetadataOnStackMark::MetadataOnStackMark(bool walk_all_metadata, bool redefinition_walk) {
  . . .
  if (walk_all_metadata) {
    MetadataOnStackClosure md_on_stack;
    Threads::metadata_do(&md_on_stack);
    if (redefinition_walk) {
      // We have to walk the whole code cache during redefinition.
      CodeCache::metadata_do(&md_on_stack);
    } else {
      CodeCache::old_nmethods_do(&md_on_stack);   <== THE ONLY CALL TO FUNCTION !!!
    }
  . . .
}

As we can see, it is not a redefinition_walk case.
So, I have a doubt this issue is in the JVMTI area.
I can remove this check:
      if (!cm->is_unloading()) {
But I have no idea what testing has to be done then.

So, I'm moving this issue to hotspot/runtime for initial evaluation.
Feel free to move this bug back to JVMTI if necessary.;;;","2022-10-20 01:25;sspitsyn;Coleen, I feel that I mistakenly moved this issue to hotspot/runtime.
Please, give me more time to look at this issue.
It seems to be related to the bug on my plate: JDK-8291830;;;","2022-10-20 07:02;coleenp;It's my bug and I believe a one line fix: we should walk all the methods, not just the ones that are not unloading, but if you have a reproducer, that would be great.;;;","2022-10-21 03:29;sspitsyn;I do not have a reproducer.
But I tried to reproduce the issue from JDK-8291830 with the ""if (!cm->is_unloading())"" check removed.
I've got two new assert modes that I've not seen before.
Please, look at the last two hs_err dumps in my latest comment to this bug. They look interesting.
It seems, this test provides a test coverage for this bug:
      vmTestbase/nsk/jvmti/RedefineClasses/StressRedefine 
What I see is that the removal of the ""if (!cm->is_unloading())"" is not enough.
(Of course, these two bugs still can be different and independent beasts.)
It looks like we sometimes deallocate the same IK more than once.
I'm thinking how to construct a trap to understand contexts of the same IK deallocations.;;;","2022-11-07 06:26;coleenp;I don't see any class unloading in JDK-8291830.  I'll run something like tier6 on this fix and mark it as noreg-hard.;;;","2022-11-15 04:13;eosterlund;How is it going?;;;","2022-11-18 08:52;coleenp;[~eosterlund]  I was stuck on writing a test, and forgot about it, but just sent it out for review without one.;;;","2022-11-18 08:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11243
Date: 2022-11-18 16:51:45 +0000;;;","2022-11-21 05:48;dukebot;Changeset: 08008139
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-11-21 13:46:09 +0000
URL:       https://git.openjdk.org/jdk/commit/08008139cc05a8271e7163eca47d2bc59db2049b
;;;",,,,,,,,,,,,,
tools/jpackage/share/jdk/jpackage/tests/UnicodeArgsTest.java fails on Japanese Windows platform,JDK-8293579,5083127,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tkiriyama,tkiriyama,tkiriyama,2022-09-09 01:20,2023-09-24 23:39,2023-10-01 09:56,2022-10-04 10:31,19,20,,,,,20,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"tools/jpackage/share/jdk/jpackage/tests/UnicodeArgsTest.java failed on Japanese Windows platform.
This test passed in the English locale.

The environment in which I ran tests is as follows:
OS: Windows Server 2019
Locale: ja

Here's a snippet from the log file:
----------System.err:(106/8211)*----------
java.lang.AssertionError: (3) Expected [?]. Actual [e]: Check contents of [C:\\work\\jtreg\\scratch\\test8246042.9782d070\\appOutput.txt] file
	at jdk.jpackage.test.TKit.error(TKit.java:264)
	at jdk.jpackage.test.TKit.lambda$assertStringListEquals$19(TKit.java:736)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at jdk.jpackage.test.TKit.assertStringListEquals(TKit.java:730)
	at jdk.jpackage.test.HelloApp.verifyOutputFile(HelloApp.java:229)
	at jdk.jpackage.test.HelloApp.verifyOutputFile(HelloApp.java:208)
	at jdk.jpackage.test.HelloApp$AppOutputVerifier.executeAndVerifyOutput(HelloApp.java:412)
	at jdk.jpackage.test.HelloApp$AppOutputVerifier.executeAndVerifyOutput(HelloApp.java:424)
	at jdk.jpackage.test.HelloApp.executeLauncherAndVerifyOutput(HelloApp.java:323)
	at jdk.jpackage.tests.UnicodeArgsTest.test8246042(UnicodeArgsTest.java:67)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
	at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
	at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:139)
	at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:124)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:121)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.TKit.runTests(TKit.java:120)
	at jdk.jpackage.test.Main.runTests(Main.java:79)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
java.lang.AssertionError: (3) Expected [?]. Actual [e]: Check contents of [C:\\work\\jtreg\\scratch\\test8246042.b31bae11\\appOutput.txt] file
	at jdk.jpackage.test.TKit.error(TKit.java:264)
	at jdk.jpackage.test.TKit.lambda$assertStringListEquals$19(TKit.java:736)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at jdk.jpackage.test.TKit.assertStringListEquals(TKit.java:730)
	at jdk.jpackage.test.HelloApp.verifyOutputFile(HelloApp.java:229)
	at jdk.jpackage.test.HelloApp.verifyOutputFile(HelloApp.java:208)
	at jdk.jpackage.test.HelloApp$AppOutputVerifier.executeAndVerifyOutput(HelloApp.java:412)
	at jdk.jpackage.test.HelloApp$AppOutputVerifier.executeAndVerifyOutput(HelloApp.java:424)
	at jdk.jpackage.test.HelloApp.executeLauncherAndVerifyOutput(HelloApp.java:323)
	at jdk.jpackage.tests.UnicodeArgsTest.test8246042(UnicodeArgsTest.java:65)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
	at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
	at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:139)
	at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:124)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:121)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.TKit.runTests(TKit.java:120)
	at jdk.jpackage.test.Main.runTests(Main.java:79)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
java.lang.RuntimeException: 2 FAILED TESTS
	at jdk.jpackage.test.Main.reportSummary(Main.java:130)
	at jdk.jpackage.test.Main.runTests(Main.java:90)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 2 FAILED TESTS
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 2 FAILED TESTS
",,,,,,,,,,JDK-8316809,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yilf:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-09-09 01:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10226
Date: 2022-09-09 08:30:55 +0000;;;","2022-10-04 10:31;dukebot;Changeset: 121d4a51
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-10-04 17:29:15 +0000
URL:       https://git.openjdk.org/jdk/commit/121d4a5119f98adf30fa759563eec843a6e37d61
;;;","2023-09-15 01:42;myano;Fix Request(17u)
The patch applies cleanly to 17u.
There is no risk, because this is a test-only fix.

Testing:
I tested tier1 and targeted test on Japanese Windows manually.;;;","2023-09-15 01:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1745
Date: 2023-09-15 08:37:46 +0000;;;",,,,,,,,,,,,,,,,,,,
Duplicate ldc generated by javac,JDK-8293578,5083124,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,pnarayanaswa,pnarayanaswa,2022-09-09 00:34,2023-02-10 11:06,2023-10-01 09:56,2022-09-16 04:39,18.0.2.1,19,,,,,20,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Given the test code provided, we would expect that 
- the call on line 20 ("""".equals(newString)) evaluates to ""false""
- the call on line 21 (""A string"".equals(newString)) evaluates to ""true""

Running the code, however, shows that
- the call on line 20 evaluates to ""true""
- the call on line 21 evaluates to ""false"".

It is noteworthy that the calls on line 34 and 35 evaluate to the expected values. The only difference between this two methods is that in broken(), the variable input is final, where in ok(), it is not.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile and run the test code.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The call on line 20 ("""".equals(newString)) should evaluates to ""false"".
The call on line 21 (""A string"".equals(newString)) should evaluates to ""true"".
ACTUAL -
The call on line 20 ("""".equals(newString)) evaluates to ""true"".
The call on line 21 (""A string"".equals(newString)) evaluates to ""false"".

---------- BEGIN SOURCE ----------
import java.lang.reflect.InvocationTargetException;

class Scratch {
    public static void main(String... args)
            throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        broken();
        ok();
    }

    private static void broken()
            throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        final var input = ""A string"";
        final var theClass = input.getClass();
        final var constructor = theClass.getConstructor();
        final var newString = constructor.newInstance();

        System.out.printf(
                (""in broken(), \""\"".equals(newString)         = %b\n"" +
                 ""in broken(), \""A string\"".equals(newString) = %b\n""),
                """".equals(newString),          // line 20
                ""A string"".equals(newString)); // line 21
    }

    private static void ok()
            throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        var input = ""A string"";
        final var theClass = input.getClass();
        final var constructor = theClass.getConstructor();
        final var newString = constructor.newInstance();

        System.out.printf(
                (""in ok(), \""\"".equals(newString)             = %b\n"" +
                 ""in ok(), \""A string\"".equals(newString)     = %b\n""),
                """".equals(newString),          // line 34
                ""A string"".equals(newString)); // line 35
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
not define variable ""input"" as ""final"". 

FREQUENCY : always",,,,,,,,,,JDK-8294268,JDK-8293992,JDK-8293990,JDK-8294732,JDK-8294733,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yikr:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2022-09-09 01:03;jlahoda;Simpler testcase
---
public class VarConstantTest {
    public static void main(String... args) throws Throwable {
        final var input = ""A string"";
        final var theClass = input.getClass();
        final var constructor = theClass.getConstructor();
        final var newString = constructor.newInstance();
        System.err.println(newString);
    }
}
---

This should print an empty string, but it actually prints ""A string"":
---
$ ~/tools/jdk/jdk-18/bin/java /tmp/VarConstantTest.java
A string
---

Probably the constant types get propagated too far.;;;","2022-09-09 04:13;mcimadamore;This seems caused by an issue in the attribution check for getClass(). When we compute the result type for a getClass call, we do not call `baseType`. As a result, the constant type stays there, and ends up nested in a wildcard type first, and the a captured type. To add insult to the injury, calling `baseType` on the captured type does NOT normalize the bound of the captured type, so the constant type stays there (even though the logic for inferring the `var` type does have a call to `baseType`, precisely for this reason).

The following patch seems to fix things:

```
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
@@ -2603,7 +2603,7 @@ public class Attr extends JCTree.Visitor {
                     argtypes.isEmpty()) {
                 // as a special case, x.getClass() has type Class<? extends |X|>
                 return new ClassType(restype.getEnclosingType(),
-                        List.of(new WildcardType(types.erasure(qualifierType),
+                        List.of(new WildcardType(types.erasure(qualifierType.baseType()),
                                 BoundKind.EXTENDS,
                                 syms.boundClass)),
                         restype.tsym,
```;;;","2022-09-09 05:19;mcimadamore;Could be a good idea hardening the above fix my making sure that, when type-checking `var`, `baseType` is called on the result of the type projection (Check.checkLocalVarType). E.g. instead of:

                    if (tree.isImplicitlyTyped()) {
                        //fixup local variable type
                        v.type = chk.checkLocalVarType(tree, tree.init.type.baseType(), tree.name);
                    }

do this:

                    if (tree.isImplicitlyTyped()) {
                        //fixup local variable type
                        v.type = chk.checkLocalVarType(tree, tree.init.type, tree.name).baseType()
                    }

or, alternatively, add a call to `baseType` directly on `checkLocalVarType`.;;;","2022-09-14 10:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10272
Date: 2022-09-14 17:15:30 +0000;;;","2022-09-16 04:39;dukebot;Changeset: 39cd1635
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-09-16 11:37:45 +0000
URL:       https://git.openjdk.org/jdk/commit/39cd1635bf07f42857e1a704734db66b2c2fa882
;;;","2022-09-16 04:56;jlahoda;Fix Request

javac generates incorrect code for a valid source. The cause is that constant propagation goes accidentally too far, and the fix is to stop the constant propagation at appropriate places, which should generally be safe. The tests are passing with the change.;;;","2022-09-16 05:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/25
Date: 2022-09-16 12:00:41 +0000;;;","2022-09-29 23:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/758
Date: 2022-09-30 06:12:32 +0000;;;","2022-09-29 23:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1381
Date: 2022-09-30 06:17:03 +0000;;;","2022-09-29 23:30;vrudomet;Fix request [17u]

Backport for parity with 17.0.6-oracle.
Clean backport.
Tests pass.

Additional testing:
* manually run ConstantTypes.java test to verify
* run jtreg tier1, tier2, jck runtime, jck compiler (linux x64 platform) to make sure the change does not break anything

Risk of the backport to break the VM: very low ;;;","2022-09-29 23:32;vrudomet;Fix request [11u]

Backport for parity with 11.0.18-oracle.
Clean backport.
Tests pass.

Additional testing:
* manually run ConstantTypes.java test to verify
* run jtreg tier1, tier2, jck runtime, jck compiler (linux x64 platform) to make sure the change does not break anything

Risk of the backport to break the VM: very low ;;;",,,,,,,,,,,,
AbstractSplittableWithBrineGenerator: salt has digits that duplicate the marker,JDK-8293567,5083084,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,webbuggrp,webbuggrp,2022-09-08 07:26,2023-02-14 02:44,2023-10-01 09:56,2022-09-26 08:50,18,19,20,,,,20,core-libs,,0,19ea,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The java.util.random package has a SplittableGenerator. Presently core code for these is implemented in:
./src/java.base/share/classes/jdk/internal/util/random/RandomSupport.java

This class has an inner class AbstractSplittableWithBrineGenerator. When creating a stream of generators for the splits method the spliterator is seeded with a salt. This salt is combined with the stream position to create a unique seed for each new generator in the stream.

The salt is composed of 4-bit digits. The least significant digit has all the bits set and is equal to 15. The seed is created by left shifting the salt a multiple of 4 and bit wise or'ing with the stream position: ((salt << shift) | index) where shift is a multiple of 4 to avoid overlapping bits.

All indices have the marker digit placed in front of the value. To ensure that large indices do not repeat a seed previously generated with a smaller index and a reduced shift on the salt, the extra characters in the salt should avoid the marker digit. This ensures that the bits above the marker digit cannot match a shifted salt, and duplication is avoided.

However the routine to generate the salt uses a signed multiply. The method is:

Spliterator<SplittableGenerator> makeSplitsSpliterator(long index, long fence, SplittableGenerator source)

This results in the possible generation of 15 in the extra salt digits. This can be solved using an unsigned multiply from JDK 18.



STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
This cannot be reproduced by using JDK classes. The stream of generators will appear to be random as the salt is only one component used to seed a new generator. Direct inspection of the salt is not possible through the API.

The digit generation routine can be extracted to a method that creates a single 4-bit digit from the high part of the multiplication of a random long and the multiplier 15. Paste the following into a JShell instance:

static void signedMultiply(int size, SplittableRandom rng, int m) {
  int[] c = new int[m + 1];
  while (size-- > 0) {
    long x = rng.nextLong();
    long y = Math.multiplyHigh(x, m) & m;
    c[(int) y]++; 
  } 
  System.out.println(java.util.Arrays.toString(c));
}

static void unsignedMultiply(int size, SplittableRandom rng, int m) {
  int[] c = new int[m + 1];
  while (size-- > 0) {
    long x = rng.nextLong();
    long y = Math.unsignedMultiplyHigh(x, m) & m;
    c[(int) y]++; 
  } 
  System.out.println(java.util.Arrays.toString(c));
}

int size = 100000;
SplittableRandom rng = new SplittableRandom(125634128718L);
int m = 15;
signedMultiply(size, rng, m);
unsignedMultiply(size, rng, m);


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The random digit for the salt should be in [0, 15).

Currently the digit is in [0, 15].

This can result in duplications as the upper bits in the salt can match a left-shifted salt.

ACTUAL -
jshell
|  Welcome to JShell -- Version 19
|  For an introduction type: /help intro

jshell> static void signedMultiply(int size, SplittableRandom rng, int m) {
   ...>   int[] c = new int[m + 1];
   ...>   while (size-- > 0) {
   ...>     long x = rng.nextLong();
   ...>     long y = Math.multiplyHigh(x, m) & m;
   ...>     c[(int) y]++; 
   ...>   } 
   ...>   System.out.println(java.util.Arrays.toString(c));
   ...> }
   ...> 
   ...> static void unsignedMultiply(int size, SplittableRandom rng, int m) {
   ...>   int[] c = new int[m + 1];
   ...>   while (size-- > 0) {
   ...>     long x = rng.nextLong();
   ...>     long y = Math.unsignedMultiplyHigh(x, m) & m;
   ...>     c[(int) y]++; 
   ...>   } 
   ...>   System.out.println(java.util.Arrays.toString(c));
   ...> }
   ...> 
   ...> int size = 100000;
   ...> SplittableRandom rng = new SplittableRandom(125634128718L);
   ...> int m = 15;
   ...> signedMultiply(size, rng, m);
   ...> unsignedMultiply(size, rng, m);
|  created method signedMultiply(int,SplittableRandom,int)
|  created method unsignedMultiply(int,SplittableRandom,int)
size ==> 100000
rng ==> java.util.SplittableRandom@b1bc7ed
m ==> 15
[6697, 6797, 6651, 6591, 6702, 6558, 6671, 3334, 3320, 6726, 6613, 6637, 6584, 6599, 6870, 6650]
[6679, 6750, 6696, 6604, 6712, 6664, 6621, 6681, 6692, 6588, 6531, 6786, 6693, 6682, 6621, 0]


---------- BEGIN SOURCE ----------
See JShell code
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None.

Note: The bug is unlikely to result in salt duplications. A stream of generators is likely to be created using a small size as there are few use cases for millions of random generators.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-09-08 19:28;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/100713/Main.java",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yibv:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-09-08 19:32;tongwan;The observations on Windows 10:
JDK 18: Failed, duplication observed.
JDK 19ea+25: Failed.
JDK 20ea+4: Failed.;;;","2022-09-19 05:22;rgiulietti;The reporter's analysis seems correct, and the workaround of using an unsigned multiplication is correct as well.;;;","2022-09-19 08:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10345
Date: 2022-09-19 15:32:34 +0000;;;","2022-09-26 08:50;dukebot;Changeset: 968af74d
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2022-09-26 15:47:18 +0000
URL:       https://git.openjdk.org/jdk/commit/968af74de4307a05e45f0bee32fa9120e39faf09
;;;",,,,,,,,,,,,,,,,,,,
"serviceability/tmtools/jstat/GcTest01.java fails with ""Error in the percent calculation""",JDK-8293564,5083112,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,dcubed,dcubed,2022-09-08 17:03,2022-09-21 23:08,2023-10-01 09:56,2022-09-17 02:58,20,,,,,,20,core-svc,,0,tier7,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

serviceability/tmtools/jstat/GcTest01.java

Here's a snippet from the log file:

#section:main
----------messages:(7/388)----------
command: main -XX:+UsePerfData -Xmx128M GcTest01
reason: User specified action: run main/othervm -XX:+UsePerfData -Xmx128M GcTest01 
started: Thu Sep 08 22:45:45 UTC 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
finished: Thu Sep 08 22:46:37 UTC 2022
elapsed time (seconds): 52.256
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base                   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(7/846)----------
[2022-09-08T22:46:24.074102237Z] started process 2823120 [/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+14-949/linux-x64-debug.jdk/jdk-20/fastdebug/bin/jstat, -gc, 2822687] with out/err redirected to './out.3576055136421552022.txt' and './err.3576055136421552022.txt'
[2022-09-08T22:46:29.845592598Z] process 2823120 finished with exit code = 0
Process output: Exit code: 0
stdout:    S0C         S1C         S0U         S1U          EC           EU           OC           OU          MC         MU       CCSC      CCSU     YGC     YGCT     FGC    FGCT     CGC    CGCT       GCT   
        0.0         0.0         0.0         0.0      25600.0       4096.0     105472.0          0.0        0.0        0.0       0.0       0.0      0     0.000     0     0.000     0     0.000     0.000
stderr:
Committed size of the pool 'Eden Space' is 25600
----------System.err:(12/912)----------
java.lang.RuntimeException: Error in the percent calculation (eden size: 25600, heap size: 17408, calculated eden percent: 1.4705882)
	at utils.GcProvoker.provokeGc(GcProvoker.java:66)
	at GcTest01.main(GcTest01.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Error in the percent calculation (eden size: 25600, heap size: 17408, calculated eden percent: 1.4705882)
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Error in the percent calculation (eden size: 25600, heap size: 17408, calculated eden percent: 1.4705882)
----------rerun:(48/8663)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293218,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,,"0|i2yii3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2022-09-09 08:03;dcubed;The same failure mode in a different test:

JDK-8293218 serviceability/tmtools/jstat/GcNewTest.java fails with ""Error in the percent calculation""

[~kevinw] - This bug might be related to JDK-8293218.;;;","2022-09-09 08:39;kevinw;Thanks -- yes, they use the same utils/GcProvoker.java class so hit the same error.
This should be covered by https://github.com/openjdk/jdk/pull/10218 so we will close as dup soon I expect.;;;","2022-09-11 06:33;dcubed;Moved here from JDK-8293218:

Daniel Daugherty added a comment - 2022-09-01 18:50
Here's a log file snippet from the jdk-20+13-823-tier8 sighting: 

serviceability/tmtools/jstat/GcCauseTest01.java 

#section:main 
----------messages:(5/321)---------- 
command: main -XX:+UsePerfData -Xmx128M GcCauseTest01 
reason: User specified action: run main/othervm -XX:+UsePerfData -Xmx128M GcCauseTest01 
Mode: othervm [/othervm specified] 
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED 
elapsed time (seconds): 67.175 
----------configuration:(4/111)---------- 
Boot Layer 
  add modules: java.base 
  add exports: java.base/jdk.internal.misc ALL-UNNAMED 

----------System.out:(7/845)---------- 
[2022-09-01T22:27:09.684275Z] started process 32802 [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+13-823/macosx-x64-debug.jdk/jdk-20/fastdebug/bin/jstat, -gc, 32788] with out/err redirected to './out.4941802529435970850.txt' and './err.4941802529435970850.txt' 
[2022-09-01T22:27:18.175712Z] process 32802 finished with exit code = 0 
Process output: Exit code: 0 
stdout: S0C S1C S0U S1U EC EU OC OU MC MU CCSC CCSU YGC YGCT FGC FGCT CGC CGCT GCT 
        0.0 0.0 0.0 0.0 25600.0 4096.0 105472.0 0.0 0.0 0.0 0.0 0.0 0 0.000 0 0.000 0 0.000 0.000 
stderr: 
Committed size of the pool 'Eden Space' is 25600 
----------System.err:(12/922)---------- 
java.lang.RuntimeException: Error in the percent calculation (eden size: 25600, heap size: 17408, calculated eden percent: 1.4705882) 
at utils.GcProvoker.provokeGc(GcProvoker.java:66) 
at GcCauseTest01.main(GcCauseTest01.java:54) 
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578) 
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127) 
at java.base/java.lang.Thread.run(Thread.java:1589) 

JavaTest Message: Test threw exception: java.lang.RuntimeException: Error in the percent calculation (eden size: 25600, heap size: 17408, calculated eden percent: 1.4705882);;;","2022-09-11 06:47;dcubed;> Thanks -- yes, they use the same utils/GcProvoker.java class so hit the same error.
> This should be covered by https://github.com/openjdk/jdk/pull/10218 so we will close as dup soon I expect.

[~kevinw] - Another option is to do an ""/issue JDK-8293564"" in that PR and just include
both bug IDs in the integration.;;;","2022-09-12 01:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10218
Date: 2022-09-08 09:56:05 +0000;;;","2022-09-17 02:58;dukebot;Changeset: cfd44bb2
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-09-17 09:55:51 +0000
URL:       https://git.openjdk.org/jdk/commit/cfd44bb2cd4f2fdbfc15a7a76757a92c0a557439
;;;","2022-09-17 07:32;dcubed;This fix is integrated in jdk-20+16-1054.;;;",,,,,,,,,,,,,,,,
[macos-aarch64] SA core file tests failing with sun.jvm.hotspot.oops.UnknownOopException ,JDK-8293563,5083111,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2022-09-08 16:05,2023-09-13 10:33,2023-10-01 09:56,2022-09-28 13:37,17,18,20,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"This is a replacement CR for JDK-8269982, which had to be made confidential, and also which has changed behavior, so I thought it best to start from scratch.

JDK-8269982 originally described a sun.jvm.hotspot.debugger.UnmappedAddressException when running the following 4 core files tests:

serviceability/sa/ClhsdbPstack.java#id1
serviceability/sa/ClhsdbFindPC.java#id3
serviceability/sa/ClhsdbFindPC.java#id1
serviceability/sa/ClhsdbCDSCore.java 

These tests are now called:

serviceability/sa/ClhsdbPstack.java#core
serviceability/sa/ClhsdbFindPC.java#xcomp-core
serviceability/sa/ClhsdbFindPC.java#no-xcomp-core
serviceability/sa/ClhsdbCDSCore.java

Also, the UnmappedAddressException has been replaced by UnknownOopException, but the stack trace is basically the same:

sun.jvm.hotspot.oops.UnknownOopException
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ObjectHeap.newOop(ObjectHeap.java:193)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.VMOopHandle.resolve(VMOopHandle.java:61)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.getThreadObj(JavaThread.java:353)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.getCurrentParkBlocker(JavaThread.java:405)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:82)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:39)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.PStack.run(PStack.java:79)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$30.doit(CommandProcessor.java:1124)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2090)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2060)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:1931)
at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:281)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)

However, due to JDK-8293006, which was pushed about a week ago, the above exception is caught and not considered fatal since it can happen when you are in the middle of a GC. So instead in the log you will see the following warning:

WARNING: could not get Thread object: sun.jvm.hotspot.oops.UnknownOopException: 0x00000007dff299d0

Because of this warning, we cannot get the name of each thread being dumped, so the tests can fail in different ways. ClhsdbPStack fails with:

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'Common-Cleaner' missing from stdout/stderr

Lastly, even getting as far as the above failure takes some work, because getting core files on macOS Monterey has it's challenges, especially on aarch64. First make sure developer security mode is enabled:

$ sudo DevToolsSecurity -enable

Next make sure /cores is writable:

$  sudo chmod 1777 /cores

Next, until JDK-8293550 is fixed, you need to manually add the com.apple.security.get-task-allow entitlement after the build complete (and do this every time hotspot is rebuild):

$ /usr/libexec/PlistBuddy -c ""Add :com.apple.security.get-task-allow bool true"" tmp.entitlements

$ codesign -s - -f --entitlements tmp.entitlements build/macosx-aarch64-debug/images/jdk/bin/java",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293550,,,,,JDK-8269982,,,,JDK-8268722,,,,JDK-8314550,JDK-8293550,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yihv:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-08 17:43;cjplummer;The root cause is that the handle stored at JavaThread::_threadObj appears to not be valid. Here is the jstack output for a thread:

WARNING: could not get Thread object: sun.jvm.hotspot.oops.UnknownOopException: 0x000000029fe71600
Could not get the java Thread object. Thread info will be limited.
 tid=0x000000012183b410 nid=40195 waiting for monitor entry [0x00000001719fe000]
   JavaThread state: _thread_blocked
 - jdk.test.lib.apps.LingeredApp.steadyState(java.lang.Object) @bci=8, line=536 (Interpreted frame)
WARNING: could not get Thread object: sun.jvm.hotspot.oops.UnknownOopException: 0x000000029fe71600
	- locked <0x000000029fe715f0> (a <unknown class>)
 - jdk.test.lib.apps.LingeredApp$1.run() @bci=4, line=542 (Interpreted frame)

The tid is the JavaThread*, so we can use the inspect command on it:

jhsdb> inspect 0x000000012183b410
Type is JavaThread (size of 1584)
oop ThreadShadow::_pending_exception: null
char* ThreadShadow::_exception_file: char @ null
int ThreadShadow::_exception_line: 0
ThreadLocalAllocBuffer Thread::_tlab: ThreadLocalAllocBuffer @ 0x000000012183b510
jlong Thread::_allocated_bytes: 0
ResourceArea* Thread::_resource_area: ResourceArea @ 0x00006000027e7300
OopHandle JavaThread::_threadObj: OopHandle @ 0x000000012183b6f0
OopHandle JavaThread::_vthread: OopHandle @ 0x000000012183b6f8
OopHandle JavaThread::_jvmti_vthread: OopHandle @ 0x000000012183b700
OopHandle JavaThread::_extentLocalCache: OopHandle @ 0x000000012183b708
JavaFrameAnchor JavaThread::_anchor: JavaFrameAnchor @ 0x000000012183b718
oop JavaThread::_vm_result: null
Metadata* JavaThread::_vm_result_2: Metadata @ null
ObjectMonitor* JavaThread::_current_pending_monitor: ObjectMonitor @ 0x0000600003b90010
bool JavaThread::_current_pending_monitor_is_from_java: 1
ObjectMonitor* JavaThread::_current_waiting_monitor: ObjectMonitor @ null
uint32_t JavaThread::_suspend_flags: 0
oop JavaThread::_exception_oop: null
address JavaThread::_exception_pc: address @ 0x000000012183b898
int JavaThread::_is_method_handle_return: 0
address JavaThread::_saved_exception_pc: address @ 0x000000012183b7e8
JavaThreadState JavaThread::_thread_state: 10
OSThread* JavaThread::_osthread: OSThread @ 0x0000600002f9fa40
address JavaThread::_stack_base: address @ 0x000000012183b6a0
size_t JavaThread::_stack_size: 2109440
vframeArray* JavaThread::_vframe_array_head: vframeArray @ null
vframeArray* JavaThread::_vframe_array_last: vframeArray @ null
JNIHandleBlock* JavaThread::_active_handles: JNIHandleBlock @ 0x0000000111623df0
JavaThread::TerminatedTypes JavaThread::_terminated: 57002

Now lets look at the _threadObj field (btw, this debugging session with UseCompressedOops turned off, but the issue also happens with it on). 0x000000012183b6f0 is actually the address of the _threadObj field, not its contents, so displaying the address stored should reveal the address of the oop* of the Thread object

hsdb> mem -v 0x000000012183b6f0
Address 0x000000012183b6f0: In unknown location
0x000000012183b6f0: 0x0000000121609e80

Ok, so 0x0000000121609e80 is the oop*. Now lets get the oop, which is the pointer to the Thread object:

hsdb> mem -v 0x0000000121609e80
Address 0x0000000121609e80: In unknown location
0x0000000121609e80: 0x000000029fe71600 In unknown section of Java heap

0x000000029fe71600 is the oop, and it does point into the java heap, which is good (even for valid heap pointers SA usually doesn't know where in the java heap). Now if this really is a pointer to a Thread object, we should be able to use ""inspect"" on it to dump its contents:

hsdb> inspect 0x0000000121609e80

Nope, no output, and dumping the memory clearly shows that it doesn't resemble a Thread object. Most of it is 0's. So it appears something is wrong with JavaThread::_threadObj. JDK-8293006, showed similar issues with JavaThread::_threadObj. But it was rare, on all platforms, and was due to the test attaching to an an active process (jshell starting up) multiple times. Once in a while the attach was untimely and the heap was in an inconsistent state. That not the case here. Every core dump I've looked at on macosx-aarch64 has this issue. We can never resolve JavaThread::_threadObj into a valid java.lang.Thread instance.

What is also very odd is that this does not happen when the same tests attach to a live process rather than produce a core dump. Makes me wonder if there isn't some sort of permissions or mapping issue reading from the java heap.
;;;","2022-09-08 18:52;cjplummer;This appears to be an issue with G1. Every sign pointed to not being able to read in the java heap. Although there wasn't anything like a page fault, the data always seemed corrupted. Howver, when I started to use ParallelGC, all the core file tests started to pass. I wonder if the G1 pages have been marked to not be dump to the core file on macosx-aarch64.;;;","2022-09-12 13:59;cjplummer;lldb also shows that the G1 heap is not readable. You get the following error message:

(lldb)  x/4xg 0x000000029fe40498
error: core file does not contain 0x000000029fe40498

Note that if you play around with the -Xmx size and set it very small (like -Xmx128m), then sometimes the heap is readable in the core file.;;;","2022-09-14 12:31;cjplummer;This appears to be a macosx-aarch64 bug. I was able to reproduce the issue with the following standalone program:

$ cat test.c
#include <stdio.h>
#include <sys/mman.h>
int main() {
  size_t K =  1024;
  size_t M =  K*K;
  size_t size = 1024*M ;
  char* addr = (char*)mmap(0,size, PROT_NONE, 0x1042, -1, 0);
  int result = mprotect(addr, size, PROT_READ|PROT_WRITE);
  printf(""mmap = %p, last addr = %p, mprotect = %d \n"", addr, addr + size, result);
  return *(volatile int*)0;
}

$ gcc test.c

$ cat tmp.entitlements 
<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
<plist version=""1.0"">
<dict>
	<key>com.apple.security.get-task-allow</key>
	<true/>
</dict>
</plist>

$codesign -s - -f --entitlements tmp.entitlements a.out
a.out: replacing existing signature

$ ./a.out
mmap = 0x280000000, last addr = 0x2c0000000, mprotect = 0 
Segmentation fault: 11 (core dumped)

$ lldb --core /cores/core.24697 a.out
(lldb) target create ""a.out"" --core ""/cores/core.24697""
Core file '/cores/core.24697' (arm64) was loaded.
(lldb) x 0x280000000
error: core file does not contain 0x280000000

The issue doesn't always reproduce. It seems if mmap returns a region with a nice round address (0x280000000), then the problem reproduces. If it returns something like 0x100698000, then it won't.

Also, if you change the test to write to the first byte of memory, then that address will appear in the core file, along with the first 0x8000000 bytes. Addresses after this range will not be.

Using the -XX:+AlwaysPreTouch option works around the problem, although it is not clear why this makes a difference since the memory we are not seeing dumped to the core file is heap memory that must have been touched at some point.;;;","2022-09-14 12:33;cjplummer;I will fix this this issue by using the -XX:+AlwaysPreTouch option, but I first need to wait for JDK-8293550, which causes failures due to the core file not being produced (I've been working around that issue locally by manually adding the com.apple.security.get-task-allow entitlement to the java binary).;;;","2022-09-27 14:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10458
Date: 2022-09-27 21:38:43 +0000;;;","2022-09-28 13:37;dukebot;Changeset: 76f18651
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-09-28 20:35:33 +0000
URL:       https://git.openjdk.org/jdk/commit/76f1865124025ee6f788a50e1377b82fd577548f
;;;",,,,,,,,,,,,,,,,
KeepAliveCache Blocks Threads while Closing Connections,JDK-8293562,5082924,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,djelinski,webbuggrp,webbuggrp,2022-09-06 03:18,2023-06-27 04:40,2023-10-01 09:56,2022-10-02 23:37,11,,,,,,20,core-libs,,0,11bpr-critical-approved,additional-information-received,bugdb_34717138,critical,dcsaw,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,reproducer-no,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Linux : ""Red Hat Enterprise Linux Server""  ""7.9 (Maipo)""
Java : jdk-11.0.14


A DESCRIPTION OF THE PROBLEM :
Hello

we faced issues with blocked threads on KeepAliveCache.get 

We have a front app which calls a backend app on the same server, sometimes we observe that the front app didn't work, blocked on the calls to the backend. The backend didn't seem receiving the requests… 

The local http call from the front App is done with Spring RestTemplate we observe simultaneous blocked threads on different parallelized servers at the same time…
Without exceptions... We used Dynatrace and we can see the stack. I can send to you some screenshots. The app is stuck, impossible to use and after some minutes (15min) it comes back to live. 


KeepAliveCache.get
Built-In JRE | sun.net.www.http

HttpClient.New
Built-In JRE | sun.net.www.http

HttpClient.New
Built-In JRE | sun.net.www.http

HttpURLConnection.getNewHttpClient
Built-In JRE | sun.net.www.protocol.http

HttpURLConnection.plainConnect0
Built-In JRE | sun.net.www.protocol.http

HttpURLConnection.plainConnect
Built-In JRE | sun.net.www.protocol.http

HttpURLConnection.connect
Built-In JRE | sun.net.www.protocol.http

SimpleBufferingClientHttpRequest.executeInternal
Built-In Spring | org.springframework.http.client

AbstractBufferingClientHttpRequest.executeInternal
Built-In Spring | org.springframework.http.client

AbstractClientHttpRequest.execute
Built-In Spring | org.springframework.http.client

InterceptingClientHttpRequest$InterceptingRequestExecution.execute
Built-In Spring | org.springframework.http.client

TracingClientHttpRequestInterceptor.intercept
Built-In Spring | org.springframework.cloud.sleuth.instrument.web.mvc

LazyTraceClientHttpRequestInterceptor.intercept
Built-In Spring | org.springframework.cloud.sleuth.instrument.web.client

InterceptingClientHttpRequest$InterceptingRequestExecution.execute
Built-In Spring | org.springframework.http.client

InterceptingClientHttpRequest.executeInternal
Built-In Spring | org.springframework.http.client

AbstractBufferingClientHttpRequest.executeInternal
Built-In Spring | org.springframework.http.client

AbstractClientHttpRequest.execute
Built-In Spring | org.springframework.http.client

RestTemplate.doExecute
Built-In Spring | org.springframework.web.client

RestTemplate.execute
Built-In Spring | org.springframework.web.client

RestTemplate.exchange
Built-In Spring | org.springframework.web.client

HealthCheckController.isGridUpAndRunning
Java | com.bnpparibas.dsibddf.cas.web

here some java parameters : 
/apps/JRE11/lastJDK/bin/java -server -Xms3g -Xmx3g -XX:+AlwaysPreTouch -XX:+UseG1GC -XX:+ScavengeBeforeFullGC -XX:+DisableExplicitGC -XX:MaxGCPauseMillis=100 -XX:G1ReservePercent=10  -Dlogging.config=/……/log4j2.xml -jar /…./mywar.war


	
KeepAliveCache.get
Built-In JRE | sun.net.www.http

HttpClient.New
Built-In JRE | sun.net.www.http

HttpClient.New
Built-In JRE | sun.net.www.http

HttpURLConnection.getNewHttpClient
Built-In JRE | sun.net.www.protocol.http

HttpURLConnection.plainConnect0
Built-In JRE | sun.net.www.protocol.http

HttpURLConnection.plainConnect
Built-In JRE | sun.net.www.protocol.http

HttpURLConnection.connect
Built-In JRE | sun.net.www.protocol.http

SimpleBufferingClientHttpRequest.executeInternal
Built-In Spring | org.springframework.http.client

AbstractBufferingClientHttpRequest.executeInternal
Built-In Spring | org.springframework.http.client

AbstractClientHttpRequest.execute
Built-In Spring | org.springframework.http.client

InterceptingClientHttpRequest$InterceptingRequestExecution.execute
Built-In Spring | org.springframework.http.client

TracingClientHttpRequestInterceptor.intercept
Built-In Spring | org.springframework.cloud.sleuth.instrument.web.mvc

LazyTraceClientHttpRequestInterceptor.intercept
Built-In Spring | org.springframework.cloud.sleuth.instrument.web.client

InterceptingClientHttpRequest$InterceptingRequestExecution.execute
Built-In Spring | org.springframework.http.client

InterceptingClientHttpRequest.executeInternal
Built-In Spring | org.springframework.http.client

AbstractBufferingClientHttpRequest.executeInternal
Built-In Spring | org.springframework.http.client

AbstractClientHttpRequest.execute
Built-In Spring | org.springframework.http.client

RestTemplate.doExecute
Built-In Spring | org.springframework.web.client

RestTemplate.execute
Built-In Spring | org.springframework.web.client

RestTemplate.exchange
Built-In Spring | org.springframework.web.client

HealthCheckController.isGridUpAndRunning
Java | com.bnpparibas.dsibddf.cas.web

here some java parameters : 
/apps/JRE11/lastJDK/bin/java -server -Xms3g -Xmx3g -XX:+AlwaysPreTouch -XX:+UseG1GC -XX:+ScavengeBeforeFullGC -XX:+DisableExplicitGC -XX:MaxGCPauseMillis=100 -XX:G1ReservePercent=10  -Dlogging.config=/……/log4j2.xml -jar /…./mywar.war


FREQUENCY : occasionally


",,,,,,,,,,JDK-8310945,JDK-8299602,JDK-8297063,JDK-8296117,JDK-8296793,JDK-8299372,,,,,,,,,,,,,JDK-8296943,,,,,JDK-8296438,,JDK-8308253,JDK-8295250,JDK-8296438,,,,JDK-8293921,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yhcj:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-09-08 00:24;tongwan;Additional information from the submitter:
For now the issue is only in production, we didn’t reproduce the problem in another environment;;;","2022-09-15 01:23;tongwan;Additional information from the submitter:
 We spied our app with a Jstack and netstat, we discover this locked : 

All threads which tried to open a new http connection are locked on 0x0000000745524720
The thread owner is Keep-Alive-Timer :
""Keep-Alive-Timer"" #1572 daemon prio=8 os_prio=0 cpu=316240.88ms elapsed=212214.92s allocated=17130M defined_classes=0 tid=0x00007f2984007000 nid=0x1d4 runnable  [0x00007f2afbbfa000]
   java.lang.Thread.State: RUNNABLE
    at java.net.SocketInputStream.socketRead0(java.base@11.0.14/Native Method)
    at java.net.SocketInputStream.socketRead(java.base@11.0.14/SocketInputStream.java:115)
    at java.net.SocketInputStream.read(java.base@11.0.14/SocketInputStream.java:168)
    at java.net.SocketInputStream.read(java.base@11.0.14/SocketInputStream.java:140)
    at java.net.SocketInputStream.read(java.base@11.0.14/SocketInputStream.java:200)
    at sun.security.ssl.SSLSocketInputRecord.deplete(java.base@11.0.14/SSLSocketInputRecord.java:498)
    at sun.security.ssl.SSLSocketImpl$AppInputStream.readLockedDeplete(java.base@11.0.14/SSLSocketImpl.java:1123)
    at sun.security.ssl.SSLSocketImpl$AppInputStream.deplete(java.base@11.0.14/SSLSocketImpl.java:1097)
    at sun.security.ssl.SSLSocketImpl.bruteForceCloseInput(java.base@11.0.14/SSLSocketImpl.java:722)
    at sun.security.ssl.SSLSocketImpl.duplexCloseOutput(java.base@11.0.14/SSLSocketImpl.java:574)
    at sun.security.ssl.SSLSocketImpl.close(java.base@11.0.14/SSLSocketImpl.java:498)
    at sun.net.www.http.HttpClient.closeServer(java.base@11.0.14/HttpClient.java:1058)
    at sun.net.www.http.KeepAliveCache.run(java.base@11.0.14/KeepAliveCache.java:183)
    - locked <0x000000078d1172d8> (a sun.net.www.http.ClientVector)
    - locked <0x0000000745524720> (a sun.net.www.http.KeepAliveCache)
    at java.lang.Thread.run(java.base@11.0.14/Thread.java:834)
    at jdk.internal.misc.InnocuousThread.run(java.base@11.0.14/InnocuousThread.java:134)
  Locked ownable synchronizers:
    - <0x000000078d11a0a8> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)        

•	The Keep-alive-timer seems to be locked eternally without timeout, could you tell us if it’s a good idea to set the default value of the read TO  -Dsun.net.client.defaultReadTimeout=10000 (which will be override on the app, but not used ?) ?
•	Once the TO reached, could you tell us if a retry will be done ? 
•	Does it exist a patch for that on the JRE ? 
;;;","2022-09-15 06:37;djelinski;The KeepAliveCache thread closes stale sockets while holding a lock; this means that while it's closing connections, no other connections can be established/retrieved from cache/added to cache.

SSLSocket may be slow to close; we send a TLS close_notify message, and then we start reading from the socket. If the socket is configured with infinite timeout, we finish depleting the socket as soon as no bytes are available for reading. If the socket is configured with finite timeout [1], we also require that at least one byte is read or the timeout expires [2].

As the user noticed, the default socket read timeout can be configured with sun.net.client.defaultReadTimeout. If that property is not set, it defaults to 0 (infinite timeout). The timeout can also be set on URLConnection level.

Looking at the provided stack trace we can see that the user is setting some timeout on the URLConnections. Setting sun.net.client.defaultReadTimeout will not help if a non-default timeout is set by the application.
Once the timeout is reached, the connection is closed and the cleaner proceeds to close other connections. Processing will only resume when all connections are either closed or non-stale.

This should be fixed in the JDK:
- connections should be closed without holding the cache lock
- read timeout should be reset to a lower value before the connection is returned to the cache / closed

In the meantime, the following actions might help:
- reduce the read timeout
- disable TLS 1.3
- modify the server to send close_notify when it receives client's close_notify (this is the default behavior in TLS 1.2, but not guaranteed in TLS 1.3)

[1] https://github.com/openjdk/jdk11u-dev/blob/57003eea5eaf66771af6c2f6b08ea4d46cbf8a0f/src/java.base/share/classes/sun/security/ssl/SSLSocketImpl.java#L1217
[2] https://github.com/openjdk/jdk11u-dev/blob/57003eea5eaf66771af6c2f6b08ea4d46cbf8a0f/src/java.base/share/classes/sun/security/ssl/SSLSocketInputRecord.java#L496;;;","2022-09-23 02:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10401
Date: 2022-09-23 06:55:11 +0000;;;","2022-10-02 23:37;dukebot;Changeset: 03f25a9c
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-10-03 06:32:31 +0000
URL:       https://git.openjdk.org/jdk/commit/03f25a9c6924430ec4063b801b2b6ca55b9067c9
;;;","2022-10-08 19:39;tongwan;Additional information from the submitter:
We set the TO  -Dsun.net.client.defaultReadTimeout=10000 on the half part of our 6 apps by expecting that keepAliveTimer could close correctly the connections. For 10 days we have less problems than before, or problems last less time than before. But today the issue repeats itself, the app where we set the TO is blocked during 13 minutes (by using the system syn_retries2 set to 15: https://pracucci.com/linux-tcp-rto-min-max-and-tcp-retries2.html).

""Keep-Alive-Timer"" #1526 daemon prio=8 os_prio=0 cpu=1592144.37ms elapsed=852521.64s allocated=77216M defined_classes=0 tid=0x00007fb7cc0a3800 nid=0x16ac runnable  [0x00007fb9a4965000]
   java.lang.Thread.State: RUNNABLE
        at java.net.SocketInputStream.socketRead0(java.base@11.0.14/Native Method)
        at java.net.SocketInputStream.socketRead(java.base@11.0.14/SocketInputStream.java:115)
        at java.net.SocketInputStream.read(java.base@11.0.14/SocketInputStream.java:168)
        at java.net.SocketInputStream.read(java.base@11.0.14/SocketInputStream.java:140)
        at java.net.SocketInputStream.read(java.base@11.0.14/SocketInputStream.java:200)
        at sun.security.ssl.SSLSocketInputRecord.deplete(java.base@11.0.14/SSLSocketInputRecord.java:498)
        at sun.security.ssl.SSLSocketImpl$AppInputStream.readLockedDeplete(java.base@11.0.14/SSLSocketImpl.java:1123)
        at sun.security.ssl.SSLSocketImpl$AppInputStream.deplete(java.base@11.0.14/SSLSocketImpl.java:1097)
        at sun.security.ssl.SSLSocketImpl.bruteForceCloseInput(java.base@11.0.14/SSLSocketImpl.java:722)
        at sun.security.ssl.SSLSocketImpl.duplexCloseOutput(java.base@11.0.14/SSLSocketImpl.java:574)
        at sun.security.ssl.SSLSocketImpl.close(java.base@11.0.14/SSLSocketImpl.java:498)
        at sun.net.www.http.HttpClient.closeServer(java.base@11.0.14/HttpClient.java:1058)
        at sun.net.www.http.KeepAliveCache.run(java.base@11.0.14/KeepAliveCache.java:183)
        - locked <0x0000000741674a90> (a sun.net.www.http.ClientVector)
        - locked <0x0000000764ff96d0> (a sun.net.www.http.KeepAliveCache)
        at java.lang.Thread.run(java.base@11.0.14/Thread.java:834)
        at jdk.internal.misc.InnocuousThread.run(java.base@11.0.14/InnocuousThread.java:134)

   Locked ownable synchronizers:
        - <0x0000000776da0418> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
;;;","2022-10-08 19:40;tongwan;Requested the submitter try JDK 20 at https://jdk.java.net/20/ and let us know the results.;;;","2022-12-22 13:32;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Medium risk, simple change but an important component. But well reproducible so we should fix the issue.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2022-12-22 13:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/980
Date: 2022-12-22 21:33:26 +0000;;;","2023-02-08 07:22;sgehwolf;Please note that Henry Galvez is working on a backport to OpenJDK 11u. See: https://mail.openjdk.org/pipermail/jdk-updates-dev/2023-February/020439.html;;;","2023-04-12 01:36;sgehwolf;11u review here (waiting on OCA verification): https://github.com/openjdk/jdk11u-dev/pull/1825;;;","2023-04-24 15:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1825
Date: 2023-04-07 13:00:28 +0000;;;","2023-05-22 05:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1890
Date: 2023-05-22 04:54:31 +0000;;;","2023-06-22 01:28;sgehwolf;Fix request [11u]

This is a backport request on behalf of a user who doesn't have JBS access. The JDK 17u patch doesn't apply cleanly due to locking changes in that area of the code due to loom prep. Reviewed by Severin Gehwolf. Medium risk. We should try to get this into 11u-dev early to get more ea testing. Test passes and fails without the fix. Please perhaps pass this through SAP nightly.;;;",,,,,,,,,
"[lworld] Remove obsolete interfaces __primitive__ and __value__, and NonTearable",JDK-8293551,5083097,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2022-09-08 12:29,2022-10-11 08:05,2023-10-01 09:56,2022-10-11 08:05,,,,,,,repo-valhalla,core-libs,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"The temporary interfaces java.lang.__primitive__ and __value__ and NonTearable can be removed. 
They appear to be unused and can be removed from java.lang and hotspot tests.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293868,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yier:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-10-07 13:56;rriggs;The annotations and interfaces should be removed from java.lang.;;;","2022-10-08 12:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/782
Date: 2022-10-07 21:05:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,
[Metrics] Incorrectly detected resource limits with additional cgroup fs mounts,JDK-8293540,5083077,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-09-08 05:15,2023-06-29 06:28,2023-10-01 09:56,2022-09-30 01:48,11.0.16,17.0.4,20,,,,20,core-svc,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,"Similar to JDK-8293472, but for the Java serviceability code. 

The Java code triggers an assertion if turned on:
$ sudo podman run --rm -ti --memory=300M --memory-swap=300M -v /sys/fs/cgroup:/cgroup-in:ro -v $(pwd)/build/linux-x86_64-server-fastdebug/images/jdk/:/opt/jdk:z fedora:36 /opt/jdk/bin/java -esa -ea -XshowSettings:system -version

Exception in thread ""main"" java.lang.AssertionError
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.amendCgroupInfos(CgroupSubsystemFactory.java:324)
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.determineType(CgroupSubsystemFactory.java:186)
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.create(CgroupSubsystemFactory.java:85)
	at java.base/jdk.internal.platform.CgroupMetrics.getInstance(CgroupMetrics.java:183)
	at java.base/jdk.internal.platform.SystemMetrics.instance(SystemMetrics.java:29)
	at java.base/jdk.internal.platform.Metrics.systemMetrics(Metrics.java:58)
	at java.base/jdk.internal.platform.Container.metrics(Container.java:43)
	at java.base/sun.launcher.LauncherHelper.printSystemMetrics(LauncherHelper.java:317)
	at java.base/sun.launcher.LauncherHelper.showSettings(LauncherHelper.java:172)

",,,,,,,,,,JDK-8295352,JDK-8300978,JDK-8306183,JDK-8297260,JDK-8305220,JDK-8305224,JDK-8305396,,,,,,,,,,,,,,,,,,,,,JDK-8293472,,,,JDK-8294740,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,,"0|i2yiab:",9223372036854775807,b18,,,,,,,,,,,"2022-09-09 10:36;sgehwolf;The only reason why this happens to not run afoul of detecting the memory limit (with system assertions turned off) is the order of the mountinfo entries. In my case the manual mount comes first so the last entry wins:

[root@2073b7e789ac /]# cat /proc/self/mountinfo | grep cgroup2
1200 1198 0:26 /../../.. /cgroup-in ro,nosuid,nodev,noexec,relatime - cgroup2 cgroup2 rw,seclabel,nsdelegate,memory_recursiveprot
1212 1199 0:26 / /sys/fs/cgroup ro,nosuid,nodev,noexec,relatime - cgroup2 cgroup2 rw,seclabel,nsdelegate,memory_recursiveprot;;;","2022-09-13 05:12;sgehwolf;I can reproduce wrong metrics values on cgroups v2 and additonal cgroup fs mounts with the following tests:

test/hotspot/jtreg/containers/docker/TestMemoryAwareness.java
test/jdk/jdk/internal/platform/docker/TestDockerCpuMetrics.java
test/jdk/jdk/internal/platform/docker/TestDockerMemoryMetrics.java;;;","2022-09-14 05:21;sgehwolf;Review: https://github.com/openjdk/jdk/pull/10248;;;","2022-09-14 05:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10248
Date: 2022-09-13 13:06:10 +0000;;;","2022-09-30 01:48;dukebot;Changeset: 6d83482a
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-09-30 08:44:10 +0000
URL:       https://git.openjdk.org/jdk/commit/6d83482a6b5f1898514fd450d8143dbfef57e362
;;;","2022-10-12 05:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/784
Date: 2022-10-12 12:35:28 +0000;;;","2022-10-12 09:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/785
Date: 2022-10-12 16:36:29 +0000;;;","2022-10-13 02:08;sgehwolf;Fix Request (OpenJDK 17u):

Please approve getting this backported to 17u. Similar fix to JDK-8293472 but for the Metrics code. On some systems this leads to incorrectly detected container limits (e.g. via OperatingSystemMXBean on cg2). Patch applies cleanly. Container tests pass for me on cg1 and cg2. Risk should be low because it ignores cgroup mounts not in hierarchy /sys/fs/cgroup. I'll follow-up with a test-fix backport of JDK-8294740, once this is in (assuming it gets approved).;;;","2022-10-14 01:49;sgehwolf;[~goetz] Did you mean jdk17u-fix-yes (over jdk11u-fix-yes)?;;;","2022-11-17 06:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1526
Date: 2022-11-17 14:19:13 +0000;;;","2022-11-17 07:26;sgehwolf;Fix Request (OpenJDK 11u):

Please approve getting this backported to 11u. Similar fix to JDK-8293472 but for the Metrics code. It depends on that bug getting integrated as well. On some systems this leads to incorrectly detected container limits (e.g. via OperatingSystemMXBean on cg2). Patch applies cleanly. Container tests pass for me on cg1 and cg2. Risk should be low because it ignores cgroup mounts not in hierarchy /sys/fs/cgroup. I'll follow-up with a test-fix backport of JDK-8294740, once this is in (assuming it gets approved).;;;","2023-01-03 04:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/221
Date: 2023-01-03 12:32:05 +0000;;;","2023-01-23 13:35;jdowland;Fix Request (8u)

Please consider for 8u as part of cgroups v2 support. The tests needed adjustments for 8u including
the lack of support for the cgroups pid controller. Thanks!;;;",,,,,,,,,,
[lworld] serviceability/jvmti/RedefineClasses/RedefineObject.java fails with added ACC_IDENTITY to object for old version,JDK-8293536,5083070,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,dsimms,dsimms,2022-09-08 03:29,2022-09-08 05:06,2023-10-01 09:56,2022-09-08 05:06,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"The test redefines j.l.Object with an older classfile version, and during the redefinition the CFP adds ACC_IDENTITY, even though Object is a special case that should not specify ACC_IDENTITY (since it would force all classes)

The added flag caused VM_RedefineClasses::compare_and_normalize_class_versions() to fail with differing class modifiers, and just as well...otherwise quite a mess would ensue...

So if you redefine other classes and modify the version, you won't be so lucky...debatable if that is another bug, maybe considered user error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yi8r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-08 03:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/749
Date: 2022-09-08 10:33:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
jdk/javadoc/doclet/testJavaFX/TestJavaFxMode.java fail with jfx,JDK-8293535,5083067,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lzhai,lzhai,lzhai,2022-09-08 02:27,2022-11-28 02:41,2023-10-01 09:56,2022-09-16 07:55,17,,,,,,20,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,testbug,,,,,,,,,,,,,,,,,"Sun Yaqi reported the issue:

configure --with-import-modules=modular-sdk

make run-test CONF=fastdebug TEST=""jdk/javadoc/doclet/testJavaFX/TestJavaFxMode.java"" failed:

`
Starting subtest 1.7: checkOutput TEXT allowOverlaps:false expectFound:true expectOrdered:true
FAILED: test/out/pkg/A.html: following text not found:
<a href=""#propProperty"">prop</a>
`",,,,,,,,,,JDK-8297696,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yi83:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-09-08 02:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10217
Date: 2022-09-08 09:46:20 +0000;;;","2022-09-16 07:55;dukebot;Changeset: dfb9c066
Author:    Leslie Zhai <lzhai@openjdk.org>
Committer: Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-09-16 14:53:30 +0000
URL:       https://git.openjdk.org/jdk/commit/dfb9c0663370fc8335caf06ca6f0cb4dac95ce2d
;;;","2022-11-22 18:43;lzhai;Fix request [17u]

The patch applies clean. This backport is only a test change, no risk and fixes the test failure.;;;","2022-11-22 18:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/921
Date: 2022-11-23 02:42:14 +0000;;;","2022-11-22 18:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/922
Date: 2022-11-23 02:52:00 +0000;;;",,,,,,,,,,,,,,,,,,
"C2: some vectorapi tests fail assert ""Not monotonic"" with flag -XX:TypeProfileLevel=222",JDK-8293531,5083055,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbhateja,epeter,epeter,2022-09-07 23:27,2023-01-02 05:50,2023-10-01 09:56,2022-10-14 09:37,17,18,19,20,,,20,hotspot,,0,c2,intermittent,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-20,vectorapi,,,,,,,,,,,,,"On Platforms: windows-x64, macosx-aarch64, macosx-x64, linux-aarch64

Tests:
compiler/vectorapi/TestMaskedMacroLogicVector.java
compiler/vectorapi/VectorLogicalOpIdentityTest.java
compiler/vectorapi/VectorReplicateLongSpecialImmTest.java
compiler/vectorapi/AllBitsSetVectorMatchRuleTest.java

Using extra flag: -XX:TypeProfileLevel=222

This bug is probably intermittent.

Example assert failure:
Platform: macosx-x64
Test: compiler/vectorapi/TestMaskedMacroLogicVector.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (.../open/src/hotspot/share/opto/phaseX.cpp:1741), pid=28525, tid=42755
#  assert(t->meet(t0) == t) failed: Not monotonic
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-09-07-1816024.emanuel.peter.fork3-jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-09-07-1816024.emanuel.peter.fork3-jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Core dump will be written. Default location: core.28525
#


---------------  T H R E A D  ---------------

Current thread (0x00007fa0e5826c10):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=42755, stack(0x000070000b087000,0x000070000b187000)]


Current CompileTask:
C2:   2896  490    b        jdk.internal.vm.vector.VectorSupport$VectorPayload::getPayload (8 bytes)

Stack: [0x000070000b087000,0x000070000b187000],  sp=0x000070000b183100,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12b90a9]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e9  (phaseX.cpp:1741)
V  [libjvm.dylib+0x12b972b]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x6cda5d]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0xfe0ff4]  PhaseCCP::analyze()+0x304
V  [libjvm.dylib+0x6368cb]  Compile::Optimize()+0xe6b
V  [libjvm.dylib+0x634316]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1786
V  [libjvm.dylib+0x51f3f7]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x167
V  [libjvm.dylib+0x651b22]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x702
V  [libjvm.dylib+0x651218]  CompileBroker::compiler_thread_loop()+0x288
V  [libjvm.dylib+0xa1927e]  JavaThread::thread_main_inner()+0x2be
V  [libjvm.dylib+0x120a8e7]  Thread::call_run()+0x177
V  [libjvm.dylib+0xf853af]  thread_native_entry(Thread*)+0x14f
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94
C  [libsystem_pthread.dylib+0x1b8b]  thread_start+0xf",,,,,,,,,,JDK-8298825,JDK-8299468,,,,,,,,,,,,,,,,,,JDK-8256540,,,,,,JDK-8295028,,JDK-8295028,,,,JDK-8288194,JDK-8287851,,,,,,,"2022-09-07 23:49;epeter;TestMaskedMacroLogicVector_hs_err_pid28525.log;https://bugs.openjdk.org/secure/attachment/100708/TestMaskedMacroLogicVector_hs_err_pid28525.log","2022-09-07 23:49;epeter;TestMaskedMacroLogicVector_replay_pid28525.log;https://bugs.openjdk.org/secure/attachment/100709/TestMaskedMacroLogicVector_replay_pid28525.log","2022-10-04 23:47;epeter;hs_err_VectorLogicalOpIdentityTest.log;https://bugs.openjdk.org/secure/attachment/100946/hs_err_VectorLogicalOpIdentityTest.log","2022-10-04 23:47;epeter;replay_VectorLogicalOpIdentityTest.log;https://bugs.openjdk.org/secure/attachment/100947/replay_VectorLogicalOpIdentityTest.log",,,,,,,,,,,,,,,,,,,,"0|i2yi5f:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-08 00:52;rcastanedalo;ILW = assertion failure in incubator test code; seen only using full type profile (TypeProfileLevel=222); run default type profile level = MML = P4;;;","2022-09-08 01:20;rcastanedalo;The following tests fail intermittently in JDK 17-20 test runs. The Failures occur on all platforms (windows-x64,linux-x64,linux-aarch64,macosx-x64):
JDK 17:
  TestLongVectorNeg.java
JDK 18:
  TestLongVectorNeg.java
  VectorMemoryAlias.java
JDK 19:
  TestMaskedMacroLogicVector.java
  VectorMemoryAlias.java
  VectorReplicateLongSpecialImmTest.java
JDK 20:
  AllBitsSetVectorMatchRuleTest.java
  TestMaskedMacroLogicVector.java
  TestReverseByteTransforms.java
  VectorLogicalOpIdentityTest.java
  VectorReplicateLongSpecialImmTest.java;;;","2022-09-08 01:24;rcastanedalo;[~jbhateja] since you worked recently in this area (JDK-8287851), would you be willing to have a look at this one?;;;","2022-09-12 11:02;epeter;Ah, turns out JDK-8288194 was not a duplicate of the other bug after all, but it is probably this bug here that has persisted.;;;","2022-09-12 22:43;jbhateja;[~rcastanedalo], just noticed it after email from Emanuel, is it possible get a system notification over our openjdk emails (jbhateja@openjdk.org) when ever there is a mention on some  bug-report.

In general iterative DF walks converge if successive iteration are monotonically decreasing (GVN style optimizations) to TOP lattice or monotonically increasing (CCP optimization) towards BOTTOM lattice and such crashes are seen due to incorrect constant value range computations which results into a non-monotonic behavior.

I can see its now assigned, please feel free to re-assign to me.;;;","2022-09-13 05:03;rcastanedalo;[~jbhateja], I have asked around I don't think it it possible to change the notification email: mention notifications are always enabled and sent to the email address listed in your profile. Perhaps your email provider is filtering out these emails?;;;","2022-09-13 12:53;vlivanov;[~jbhateja] I haven't started working on it yet. Feel free to pick it up.;;;","2022-10-04 23:47;epeter;I was able to locally reproduce it on my linux-x86 machine.

~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork-jdk/build/linux-x64-slowdebug/jdk/ -javaoptions:""-XX:TypeProfileLevel=222"" /home/emanuel/Documents/fork-jdk/open/test/hotspot/jtreg/compiler/vectorapi/VectorLogicalOpIdentityTest.java

#  Internal Error (/home/emanuel/Documents/fork-jdk/open/src/hotspot/share/opto/phaseX.cpp:1751), pid=1077868, tid=1077882
#  assert(t->meet(t0) == t) failed: Not monotonic
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-10-04-0940200.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-10-04-0940200.emanuel..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1140676]  ccp_type_widens(Type const*, Type const*)+0x39

I attached the replay file, I can run it like this, and it reproduces:
./java -Xbatch -XX:+ReplayCompiles -XX:ReplayDataFile=replay_VectorLogicalOpIdentityTest.log -XX:+ReplayIgnoreInitErrors -XX:TypeProfileLevel=222;;;","2022-10-11 05:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10648
Date: 2022-10-11 12:19:05 +0000;;;","2022-10-14 09:37;dukebot;Changeset: 0043d58c
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2022-10-14 16:34:48 +0000
URL:       https://git.openjdk.org/jdk/commit/0043d58c5d52c3b299a4b6dfcec34a7db5041aea
;;;","2022-10-15 06:30;dcubed;Here's a log file snippet for the jdk-20+20-1384-tier8 sighting:

sun/util/calendar/CalendarSystemDeadLockTest.java

----------System.out:(30/2449)----------
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:1751
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94981/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2eda829a-f85f-45b4-b01c-4a699a3b5266/runs/1e00aff6-1da9-4f23-815e-a776be954226/workspace/open/src/hotspot/share/opto/phaseX.cpp:1751), pid=1647, tid=2001
#  assert(t->meet(t0) == t) failed: Not monotonic
#
# JRE version: Java(TM) SE Runtime Environment (20.0+20) (fastdebug build 20-ea+20-1384)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+20-1384, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1779b0c]  PhaseCCP::analyze()+0x21c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f2d5dde7-5d92-4c1c-8d73-649753629249/runs/fecff099-8cfe-4b34-b997-e552360b9713/testoutput/test-support/jtreg_open_test_jdk_jdk_util/scratch/4/core.1647)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f2d5dde7-5d92-4c1c-8d73-649753629249/runs/fecff099-8cfe-4b34-b997-e552360b9713/testoutput/test-support/jtreg_open_test_jdk_jdk_util/scratch/4/hs_err_pid1647.log
pool-1-thread-6 calling  sun.util.calendar.CalendarSystem#getGregorianCalendar()
pool-1-thread-1 loading sun.util.calendar.Gregorian
pool-1-thread-2 loading sun.util.calendar.CalendarSystem
pool-1-thread-3 loading java.util.GregorianCalendar
pool-1-thread-4 loading java.util.Date
pool-1-thread-5 loading java.util.JapaneseImperialCalendar
#
# Compiler replay data is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f2d5dde7-5d92-4c1c-8d73-649753629249/runs/fecff099-8cfe-4b34-b997-e552360b9713/testoutput/test-support/jtreg_open_test_jdk_jdk_util/scratch/4/replay_pid1647.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007fab6f5d7aa0):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=2001, stack(0x00007fab90186000,0x00007fab90287000)]


Current CompileTask:
C2:  16847 3398    b        java.lang.invoke.StringConcatFactory::generateMHInlineCopy (511 bytes)

Stack: [0x00007fab90186000,0x00007fab90287000],  sp=0x00007fab90282110,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1779b0c]  PhaseCCP::analyze()+0x21c  (phaseX.cpp:1751)
V  [libjvm.so+0xaee5c1]  Compile::Optimize()+0x701  (compile.cpp:2393)
V  [libjvm.so+0xaf101d]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15ed  (compile.cpp:831)
V  [libjvm.so+0x909077]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x687  (c2compiler.cpp:113)
V  [libjvm.so+0xafdcdc]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa9c  (compileBroker.cpp:2240)
V  [libjvm.so+0xafeb08]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x1061da6]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:699)
V  [libjvm.so+0x1a54f90]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x16f1443]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:710);;;","2022-10-15 06:30;dcubed;This fix is integrated in jdk-20+20-1404.;;;","2022-12-30 09:46;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, changes assertions in C2.
Clean backport.  SAP nightly testing passed.;;;","2022-12-30 10:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1009
Date: 2022-12-30 18:22:42 +0000;;;",,,,,,,,,
test/langtools/tools/javac/preview/PreviewTest is failing after the merge with 'master',JDK-8293523,5083046,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-09-07 18:52,2022-09-07 19:29,2023-10-01 09:56,2022-09-07 19:29,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,noreg-other,,,,,,,,,,,,,,,,,there seems to be missing code in the compiler that is causing this test to fail,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yi3f:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-09-07 19:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/748
Date: 2022-09-08 02:19:12 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
deprecation warnings should be emitted for uses of annotation methods inside other annotations,JDK-8293519,5083042,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,cushon,cushon,2022-09-07 15:50,2023-02-06 10:41,2023-10-01 09:56,2023-01-31 10:21,19,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,,,,"My colleague Chris Povirk noticed that in the following example, javac emits deprecation warnings for method invocations that refer to the deprecated method A.b, but not for uses of that method in other annotations.

Ideally it would report a diagnostic for both usages of the deprecated element.

```
@interface A {
  @Deprecated
  /**
   * @deprecated foo
   */
  boolean b() default false;
}
```

```
@A(b = true)
// ^
// expected a deprecation warning on use of b above
class B {
  void x(A a) {
    a.b();
  }
}
```
$ javac -fullversion
javac full version ""19-ea+34-2229""
$ javac -deprecation *.java
B.java:6: warning: [deprecation] b() in A has been deprecated
    a.b();
     ^
1 warning",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yi2j:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-01-28 20:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12280
Date: 2023-01-29 04:19:49 +0000;;;","2023-01-31 10:21;dukebot;Changeset: 6beadbbe
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2023-01-31 18:20:11 +0000
URL:       https://git.openjdk.org/jdk/commit/6beadbbe9f0721fbdfc48e6f2c14aa6dab982be0
;;;",,,,,,,,,,,,,,,,,,,,,
gc/metaspace/TestMetaspacePerfCounters.java#Epsilon-64 failed assertGreaterThanOrEqual: expected MMM >= NNN,JDK-8293503,5083024,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,dcubed,dcubed,2022-09-07 11:37,2022-11-10 09:02,2023-10-01 09:56,2022-09-19 00:38,20,,,,,,20,hotspot,,0,gc-pending-review,intermittent,problemlist,testbug,tier1,tier3,tier4,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

gc/metaspace/TestMetaspacePerfCounters.java#Epsilon-64

Here's a snippet from the log file:

#section:main
----------messages:(7/816)----------
command: main -XX:+UnlockExperimentalVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseEpsilonGC gc.metaspace.TestMetaspacePerfCounters
reason: User specified action: run main/othervm -XX:+UnlockExperimentalVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseEpsilonGC gc.metaspace.TestMetaspacePerfCounters 
started: Wed Sep 07 18:22:29 GMT 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.compiler,java.management,jdk.internal.jvmstat --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.management/sun.management=ALL-UNNAMED --add-exports jdk.internal.jvmstat/sun.jvmstat.monitor=ALL-UNNAMED
finished: Wed Sep 07 18:22:29 GMT 2022
elapsed time (seconds): 0.367
----------configuration:(6/293)----------
Boot Layer
  add modules: java.base java.compiler java.management jdk.internal.jvmstat 
  add exports: java.base/jdk.internal.misc              ALL-UNNAMED
               java.management/sun.management           ALL-UNNAMED
               jdk.internal.jvmstat/sun.jvmstat.monitor ALL-UNNAMED

----------System.out:(2/185)----------
[0.008s][warning][gc,init] Consider setting -Xms equal to -Xmx to avoid resizing hiccups
[0.008s][warning][gc,init] Consider enabling -XX:+AlwaysPreTouch to avoid memory commit hiccups
----------System.err:(19/1259)----------
java version ""20-ea"" 2023-03-21
Java(TM) SE Runtime Environment (fastdebug build 20-ea+14-944)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 20-ea+14-944, mixed mode)
java.lang.RuntimeException: assertGreaterThanOrEqual: expected 8454144 >= 8917632
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertGreaterThanOrEqual(Asserts.java:288)
	at jdk.test.lib.Asserts.assertGreaterThanOrEqual(Asserts.java:271)
	at jdk.test.lib.Asserts.assertGTE(Asserts.java:246)
	at gc.metaspace.TestMetaspacePerfCounters.checkPerfCounters(TestMetaspacePerfCounters.java:231)
	at gc.metaspace.TestMetaspacePerfCounters.main(TestMetaspacePerfCounters.java:195)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: assertGreaterThanOrEqual: expected 8454144 >= 8917632",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-10 09:02;dcubed;jdk-20+14_linux-x64.8293503.zip;https://bugs.openjdk.org/secure/attachment/101542/jdk-20%2B14_linux-x64.8293503.zip",,,,,,,aarch64,x86_64,,,,,,,,linux,os_x,windows,,,,,"0|i2yhyj:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-09-12 07:13;tschatzl;The problem seems to be the test and Epsilon-specific behavior:

The test gathers statistics to check one by one:

        // The perf counter values are updated during GC and to be able to
        // do the assertions below we need to ensure that the values are from
        // the same GC cycle.
        do {
            gcCountBefore = currentGCCount();

            minCapacity = getMinCapacity(ns);
            maxCapacity = getMaxCapacity(ns);
            capacity = getCapacity(ns);
            used = getUsed(ns);
    
[...]

For Epsilon GC the assumption stated in the comment in the code does not hold - it also updates the statistics every X TLAB refills. Otherwise Epsilon would mostly always never update these (it does not do any GC by itself, only out-of-metaspace GC actually performs one).

The problem then is that if there is such an update between getCapacity() and getUsed(), used can be larger than capacity gathered before.

There is no way to get multiple performance counter values atomically.

So one fix could be rechecking in a loop until values are consistent between two measurements (with a proper barrier inbetween).;;;","2022-09-13 04:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10239
Date: 2022-09-12 14:41:50 +0000;;;","2022-09-19 00:38;dukebot;Changeset: 04d7b7d5
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-09-19 07:34:14 +0000
URL:       https://git.openjdk.org/jdk/commit/04d7b7d5747d887e12797df8ca3f7608d73d41ff
;;;","2022-11-10 09:02;dcubed;Here's the logs for my jdk-20+14 stress testing on linux-x64 (just for the record):

$ unzip -l jdk-20+14_linux-x64.8293503.zip
Archive:  jdk-20+14_linux-x64.8293503.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    21495  2022-09-09 03:29   jdk-20+14_1/failures.linux-x86_64/TestMetaspacePerfCounters_Epsilon-64.jtr.fastdebug
    21399  2022-09-09 05:13   jdk-20+14_1/failures.linux-x86_64/TestMetaspacePerfCounters_Epsilon-64.jtr.release
    21524  2022-09-08 22:40   jdk-20+14_1/failures.linux-x86_64/TestMetaspacePerfCounters_Epsilon-64.jtr.slowdebug
    21494  2022-09-10 02:53   jdk-20+14_2/failures.linux-x86_64/TestMetaspacePerfCounters_Epsilon-64.jtr.fastdebug
    21372  2022-09-10 04:36   jdk-20+14_2/failures.linux-x86_64/TestMetaspacePerfCounters_Epsilon-64.jtr.release
    21501  2022-09-09 21:59   jdk-20+14_2/failures.linux-x86_64/TestMetaspacePerfCounters_Epsilon-64.jtr.slowdebug
    21521  2022-09-11 02:27   jdk-20+14_3/failures.linux-x86_64/TestMetaspacePerfCounters_Epsilon-64.jtr.fastdebug
    21374  2022-09-11 04:11   jdk-20+14_3/failures.linux-x86_64/TestMetaspacePerfCounters_Epsilon-64.jtr.release
    21262  2022-09-10 21:30   jdk-20+14_3/failures.linux-x86_64/TestMetaspacePerfCounters_Epsilon-64.jtr.slowdebug
---------                     -------
   192942                     9 files;;;",,,,,,,,,,,,,,,,,,,
(fc) FileChannel::transfer methods fail to copy /proc files on Linux,JDK-8293502,5083022,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-09-07 10:52,2022-09-28 04:19,2023-10-01 09:56,2022-09-19 09:00,20,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,"FileChannel.transferTo(position, count, target) fails to transfer any bytes when the source FileChannel is a file in /proc, and FileChannel.transferFrom(src, position, count) fails to transfer any bytes when src is a file in /proc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264744,JDK-8293456,,,JDK-8294519,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,,"0|i2yhy3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-09-14 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10267
Date: 2022-09-14 16:00:17 +0000;;;","2022-09-19 09:00;dukebot;Changeset: 6e23b432
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-09-19 15:57:06 +0000
URL:       https://git.openjdk.org/jdk/commit/6e23b43220a25532029a1d6b986a2249dd4e0e03
;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] runtime/NMT/MallocLimitTest.java#invalid-settings crashes after merge,JDK-8293500,5083020,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,dsimms,dsimms,2022-09-07 09:43,2022-09-07 10:20,2023-10-01 09:56,2022-09-07 10:20,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"runtime/NMT/MallocLimitTest.java#invalid-settings 

""Value Types"" missing ""human_readable"", macro has changed init of nmtCommon",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhxn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-07 10:00;dsimms;Left overs from interpreter buffering, no longer used...

allocation.hpp: mtValueTypes,        // memory for buffered value types

;;;","2022-09-07 10:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/746
Date: 2022-09-07 17:03:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,
Build failure due to MaxVectorSize was not declared when C2 is disabled after JDK-8293254,JDK-8293497,5083015,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jiefu,jiefu,jiefu,2022-09-07 08:53,2023-01-20 09:44,2023-10-01 09:56,2022-09-07 19:32,20,,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,tencent-interest,,,,,,,,,,,,,,,"The following build failure was observed when C2 was disabled by --with-jvm-features=-compiler2.
```
* For target hotspot_variant-server_libjvm_objs_stubGenerator_x86_64_arraycopy.o:
/home/jvm/jiefu/docker/jdk-907/src/hotspot/cpu/x86/stubGenerator_x86_64_arraycopy.cpp: In member function 'u_char* StubGenerator::generate_disjoint_copy_avx3_masked(u_char**, const char*, int, bool, bool, bool)':
/home/jvm/jiefu/docker/jdk-907/src/hotspot/cpu/x86/stubGenerator_x86_64_arraycopy.cpp:403:27: error: 'MaxVectorSize' was not declared in this scope
   bool use64byteVector = (MaxVectorSize > 32) && (avx3threshold == 0);
                           ^~~~~~~~~~~~~
/home/jvm/jiefu/docker/jdk-907/src/hotspot/cpu/x86/stubGenerator_x86_64_arraycopy.cpp: In member function 'u_char* StubGenerator::generate_conjoint_copy_avx3_masked(u_char**, const char*, int, address, bool, bool, bool)':
/home/jvm/jiefu/docker/jdk-907/src/hotspot/cpu/x86/stubGenerator_x86_64_arraycopy.cpp:624:27: error: 'MaxVectorSize' was not declared in this scope
   bool use64byteVector = (MaxVectorSize > 32) && (avx3threshold == 0);
                           ^~~~~~~~~~~~~
/home/jvm/jiefu/docker/jdk-907/src/hotspot/cpu/x86/stubGenerator_x86_64_arraycopy.cpp: In member function 'void StubGenerator::arraycopy_avx3_special_cases_conjoint(XMMRegister, KRegister, Register, Register, Register, Register, Register, int, Register, bool, Label&, Label&)':
/home/jvm/jiefu/docker/jdk-907/src/hotspot/cpu/x86/stubGenerator_x86_64_arraycopy.cpp:860:16: error: 'MaxVectorSize' was not declared in this scope
   bool avx3 = (MaxVectorSize > 32) && (VM_Version::avx3_threshold() == 0);
                ^~~~~~~~~~~~~
In file included from /home/jvm/jiefu/docker/jdk-907/src/hotspot/share/utilities/globalDefinitions.hpp:29,
                 from /home/jvm/jiefu/docker/jdk-907/src/hotspot/share/memory/allocation.hpp:29,
                 from /home/jvm/jiefu/docker/jdk-907/src/hotspot/share/memory/arena.hpp:28,
   ... (rest of output omitted)
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293254,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhwj:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-09-07 09:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10202
Date: 2022-09-07 15:59:20 +0000;;;","2022-09-07 15:32;dlong;ILW = build failure; --with-jvm-features=-compiler2; no workaround = HLH = P2;;;","2022-09-07 19:32;dukebot;Changeset: 66772273
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-09-08 02:29:01 +0000
URL:       https://git.openjdk.org/jdk/commit/6677227301acf06eb8be264e4eb3e092d0d7442f
;;;","2023-01-20 09:44;enikitin;As build doesn't fail anymore, I consider this verified.;;;",,,,,,,,,,,,,,,,,,,
Accept CAs with BasicConstraints without pathLenConstraint,JDK-8293489,5083006,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-09-07 07:04,2022-10-27 00:02,2023-10-01 09:56,2022-09-07 18:37,,,,,,,20,security-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,Add a test to check an old bug fix JDK-4341220.,,,,,,,,,,JDK-8295978,JDK-8295875,JDK-8295977,JDK-8295450,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293455,JDK-4341220,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhuj:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-09-07 09:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10203
Date: 2022-09-07 16:49:50 +0000;;;","2022-09-07 18:37;dukebot;Changeset: 986b8341
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-09-08 01:35:22 +0000
URL:       https://git.openjdk.org/jdk/commit/986b834148f425aa21611814d162a8578b26b502
;;;","2022-09-08 06:02;weijun;The test uses a new keytool option -signer. When backported to an old release without this option, use the style in https://github.com/openjdk/jdk/blob/09e6ee96bd448838491e5e8634a898e248f1c44e/test/jdk/sun/security/tools/keytool/ReadJar.java#L54. Remember to add the -ext option to the -gencert command.;;;","2022-10-20 05:54;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-10-20 06:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/815
Date: 2022-10-20 12:56:36 +0000;;;",,,,,,,,,,,,,,,,,,
[lworld] SIGSEGV with -XX:+VerifyAdapterSharing,JDK-8293487,5083003,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2022-09-07 06:56,2022-09-07 07:21,2023-10-01 09:56,2022-09-07 07:21,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fed2c8eda63, pid=407269, tid=407270
#
# JRE version:  (20.0) (fastdebug build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-lworld4ea-2022-09-01-0715344.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x195ca63]  AdapterHandlerEntry::~AdapterHandlerEntry()+0x33
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhtv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-07 07:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/745
Date: 2022-09-07 14:03:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
IGV: Update Bytecode and ControlFlow Component immediately when opening a new graph,JDK-8293480,5082994,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2022-09-07 01:50,2022-10-28 06:23,2023-10-01 09:56,2022-09-21 01:12,20,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,The BytecodeViewTopComponent and ControlFlowTopComponent represent information depending on what graph is open in EditorTopComponent. Currently BytecodeViewTopComponent and ControlFlowTopComponent do not update its content immediately when a new graph is opened in EditorTopComponent. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,JDK-8294567,JDK-8292234,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhrv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-09-07 03:56;rcastanedalo;ILW = minor usability issue in debug tool; occurs on regular IGV use case; no know workaround other than closing the Bytecode and Control Flow windows = LHH = P4;;;","2022-09-07 03:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10196
Date: 2022-09-07 09:36:02 +0000;;;","2022-09-21 01:12;dukebot;Changeset: 4e7cb156
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-09-21 08:08:13 +0000
URL:       https://git.openjdk.org/jdk/commit/4e7cb156c843ead88c0b9b01673b9d1db66f08d5
;;;",,,,,,,,,,,,,,,,,,,,
Incorrect container resource limit detection if manual cgroup fs mounts present,JDK-8293472,5082985,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wchao,wchao,wchao,2022-09-07 01:25,2023-03-21 02:26,2023-10-01 09:56,2022-09-15 01:51,11.0.16,17.0.4,20,,,,20,hotspot,,0,bugdb_35098272,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,tencent-interest,,,,,,,,,,,"On some systems where there are multiple cgroup fs mount entries in /proc/self/mountinfo the detected resource limits might be wrong as the path to the cgroup interface files might be wrong.

The symptom on cg1 with a debug vm is similar to JDK-8253435. It will assert:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/data/openjdk/jdk/src/hotspot/os/linux/cgroupSubsystem_linux.cpp:335), pid=578, tid=583
#  assert(cg_infos[3]._mount_path == __null) failed: stomping of _mount_path
#
# JRE version:  (20.0) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc.root.jdk, mixed mode, sharing, tiered, unknown gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e"" (or dumping to /data1/test/java/2022-09-06-21-58-28/core.578)
#
#

---------------  S U M M A R Y ------------

Command Line: Test

Host: VM-235-31-centos, AMD EPYC 7K62 48-Core Processor, 16 cores, 31G, Ubuntu 20.04.4 LTS
Time: Wed Sep  7 15:06:04 2022 CST elapsed time: 0.002658 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread is native thread

Stack: [0x00007ffff569b000,0x00007ffff579c000],  sp=0x00007ffff5794290,  free space=996k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x19cded2]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x1a2  (cgroupSubsystem_linux.cpp:335)
V  [libjvm.so+0x19ced8f]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x2f  (vmError.cpp:1466)
V  [libjvm.so+0xac790b]  report_vm_error(char const*, int, char const*, char const*, ...)+0x11b  (debug.cpp:284)
V  [libjvm.so+0x8d465b]  CgroupSubsystemFactory::determine_type(CgroupInfo*, char const*, char const*, char const*, unsigned char*)+0xabb  (cgroupSubsystem_linux.cpp:335)
V  [libjvm.so+0x8d5236]  CgroupSubsystemFactory::create()+0xe6  (cgroupSubsystem_linux.cpp:53)
V  [libjvm.so+0x14f7011]  OSContainer::init()+0x71  (osContainer_linux.cpp:57)
V  [libjvm.so+0x64eacc]  Arguments::parse_vm_init_args(JavaVMInitArgs const*, JavaVMInitArgs const*, JavaVMInitArgs const*, JavaVMInitArgs const*)+0x16c  (os.hpp:243)
V  [libjvm.so+0x64ef5d]  Arguments::parse(JavaVMInitArgs const*)+0x47d  (arguments.cpp:4014)
V  [libjvm.so+0x1913b5a]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x9a  (threads.cpp:453)
V  [libjvm.so+0x1016539]  JNI_CreateJavaVM+0x99  (jni.cpp:3628)
C  [libjli.so+0x40fa]  JavaMain+0x8a  (java.c:1457)
C  [libjli.so+0x7859]  ThreadJavaMain+0x9  (java_md.c:650)

On cg2 it might continue but uses an incorrect container limit value. See the comment below.

On a cg1 system an additional symptom is a warning on 'java -version':

[0.000s][warning][os,container] Duplicate cpuset controllers detected. Picking /sys/fs/cgroup/cpuset, skipping /cgroup-in/cpuset.",,,,,,,,,,JDK-8297357,JDK-8297272,JDK-8304122,JDK-8299834,JDK-8304600,JDK-8297254,JDK-8295347,,,,,,,,,,,,,,,,,JDK-8270087,,,,,,,,JDK-8293540,,,,,,,,"2022-09-07 01:25;wchao;hs_err_pid578.log;https://bugs.openjdk.org/secure/attachment/100698/hs_err_pid578.log","2022-09-07 01:25;wchao;hs_err_pid661.log;https://bugs.openjdk.org/secure/attachment/100697/hs_err_pid661.log",,,,,,generic,,,,,,,,,linux,,,,,,,"0|i2yhpv:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-07 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10193
Date: 2022-09-07 08:35:47 +0000;;;","2022-09-07 05:24;sgehwolf;The similar issue is present on cgroups v2, but the symptom is different:

$ sudo podman run --rm -ti --memory=300M --memory-swap=300M -v /sys/fs/cgroup:/cgroup-in:ro -v $(pwd)/jdk20-jdk:/opt/jdk:z fedora:36
[root@302ab86dcff8 /]# /opt/jdk/bin/java -Xlog:os+container=trace -version
[0.000s][trace][os,container] OSContainer::init: Initializing Container Support
[0.001s][debug][os,container] Detected optional pids controller entry in /proc/cgroups
[0.001s][debug][os,container] Detected cgroups v2 unified hierarchy
[0.001s][trace][os,container] Path to /cpu.max is /cgroup-in/cpu.max
[0.001s][debug][os,container] Open of file /cgroup-in/cpu.max failed, No such file or directory
[0.001s][trace][os,container] CPU Quota is: -2
[0.001s][trace][os,container] Path to /cpu.max is /cgroup-in/cpu.max
[0.001s][debug][os,container] Open of file /cgroup-in/cpu.max failed, No such file or directory
[0.001s][trace][os,container] CPU Period is: -2
[0.001s][trace][os,container] OSContainer::active_processor_count: 4
[0.001s][trace][os,container] CgroupSubsystem::active_processor_count (cached): 4
[0.001s][trace][os,container] total physical memory: 5031587840
[0.001s][trace][os,container] Path to /memory.max is /cgroup-in/memory.max
[0.001s][debug][os,container] Open of file /cgroup-in/memory.max failed, No such file or directory
[0.001s][trace][os,container] Memory Limit is: -2
[0.001s][debug][os,container] container memory limit failed: -2, using host value 5031587840
[0.003s][trace][os,container] CgroupSubsystem::active_processor_count (cached): 4
[0.049s][trace][os,container] Path to /cpu.max is /cgroup-in/cpu.max
[0.049s][debug][os,container] Open of file /cgroup-in/cpu.max failed, No such file or directory
[0.049s][trace][os,container] CPU Quota is: -2
[0.049s][trace][os,container] Path to /cpu.max is /cgroup-in/cpu.max
[0.049s][debug][os,container] Open of file /cgroup-in/cpu.max failed, No such file or directory
[0.049s][trace][os,container] CPU Period is: -2
[0.049s][trace][os,container] OSContainer::active_processor_count: 4
openjdk version ""20-internal"" 2023-03-21
OpenJDK Runtime Environment (fastdebug build 20-internal-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (fastdebug build 20-internal-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
[0.067s][trace][os,container] total physical memory: 5031587840
[0.067s][trace][os,container] Path to /memory.max is /cgroup-in/memory.max
[0.067s][debug][os,container] Open of file /cgroup-in/memory.max failed, No such file or directory
[0.067s][trace][os,container] Memory Limit is: -2
[0.067s][debug][os,container] container memory limit failed: -2, using host value 5031587840
# cat /sys/fs/cgroup/memory.max 
314572800

It fails to detect the correct memory limit since it's using the /cgroup-in path (should use /sys/fs/cgroup). On cg1 it asserts, on cg2 it continues and assumes a wrong limit.

The reason that there is no warning is the fact that as soon as any `cgroup2` entry is being found in /proc/self/mountinfo, setting the controller mount paths stops (though it might have picked the wrong one). This can be reproduced on cg2 and an additional cgroup fs mount with test test/hotspot/jtreg/containers/docker/TestMemoryAwareness.java;;;","2022-09-15 01:51;dukebot;Changeset: 8f3bbe95
Author:    casparcwang <casparcwang@tencent.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-09-15 08:47:05 +0000
URL:       https://git.openjdk.org/jdk/commit/8f3bbe950fb5a3d9f6cae122209df01df0f342f0
;;;","2022-10-12 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/783
Date: 2022-10-12 12:32:58 +0000;;;","2022-10-13 02:01;sgehwolf;Fix Request (OpenJDK 17u):

Please approve getting this backported to 17u. On some systems this leads to incorrectly detected container limits (and also fixes issues with tooling that don't expect the warning log output). Patch applies cleanly. Container tests pass for me on cg1 and cg2. Risk should be low because it ignores cgroup mounts not in hierarchy /sys/fs/cgroup.;;;","2022-11-17 06:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1525
Date: 2022-11-17 14:02:06 +0000;;;","2022-11-17 06:20;sgehwolf;Fix Request (OpenJDK 11u):

Please approve getting this backported to 11u. On some systems this leads to incorrectly detected container limits (and also fixes issues with tooling that don't expect the warning log output). Patch applies cleanly. Container tests pass for me on cg1 and cg2. Risk should be low because it ignores cgroup mounts not in hierarchy /sys/fs/cgroup. Linux only.;;;","2022-12-20 04:17;jdowland;Fix Request (8u)

Please consider this for 8u cgroups v2 support. It's not clean: log_debug→tty->print_cr and Files.writeString → Files.write() needed, as well as adjustments for the lack of 8266490 (PID controller support) in 8u. Thanks!;;;","2022-12-20 04:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/216
Date: 2022-12-20 12:14:12 +0000;;;","2022-12-20 05:24;jdowland;Withdrawn jdk8u-fix-request label pending PR review.;;;",,,,,,,,,,,,,
libjsig should ignore non-modifying sigaction calls,JDK-8293466,5082979,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-09-06 22:45,2023-02-27 19:57,2023-10-01 09:56,2022-09-18 22:39,11,17,20,8,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,signals,,,,,,,,,,,,,,,,,"Found during code review of JDK-8292695.

We have two bugs in libjsig when we install hotspot signal handlers. Relevant code in libjsig:

```
int sigaction(int sig, const struct sigaction *act, struct sigaction *oact) {
<snip>

  sigused = sigismember(&jvmsigs, sig);
  if (jvm_signal_installed && sigused) {
    /* jvm has installed its signal handler for this signal. */
    /* Save the handler. Don't really install it. */
    if (oact != NULL) {
      *oact = sact[sig];
    }
    if (act != NULL) {
      sact[sig] = *act;
    }

    signal_unlock();
    return 0;
  } else if (jvm_signal_installing) {
    /* jvm is installing its signal handlers. Install the new
     * handlers and save the old ones. */
    res = call_os_sigaction(sig, act, &oldAct);
    sact[sig] = oldAct;
    if (oact != NULL) {
      *oact = oldAct;
    }

    /* Record the signals used by jvm. */
    sigaddset(&jvmsigs, sig);

    signal_unlock();
    return res;
  }
<snip>
}
```

Bug 1: we change state even if the sigaction call failed
Bug 2: we change state even if the sigaction call was a non-modifying one (act == NULL)

The latter is usually no problem since hotspot always calls `sigaction()` in pairs when installing a signal: first with NULL to get the old handler, then with the real handler. But this is not always true. If `AllowUserSignalHandlers` is set, and we find a custom handler is present, we will not override it:

```
void set_signal_handler(int sig, bool do_check = true) {
  // Check for overwrite.
  struct sigaction oldAct;
  sigaction(sig, (struct sigaction*)NULL, &oldAct); <<<<< first sigaction call, libjsig now remembers signal as set

  // Query the current signal handler. Needs to be a separate operation
  // from installing a new handler since we need to honor AllowUserSignalHandlers.
  void* oldhand = get_signal_handler(&oldAct);
  if (!HANDLER_IS_IGN_OR_DFL(oldhand) &&
      !HANDLER_IS(oldhand, javaSignalHandler)) {
    if (AllowUserSignalHandlers) {
      // Do not overwrite; user takes responsibility to forward to us.
      return;
``` 

That means:
- we still have the original custom handler in place
- but we already called sigaction, albeit with NULL, but libjsig now assumes that hotspot installed a handler itself.

The result is that any further attempts to change the signal handler, whether by hotspot or by user code, will be prevented by libjsig. Any further non-modifying sigaction calls will return the original - still installed - custom handler.

Admittedly, the error is very exotic. Users would have to set AllowUserSignalHandlers and preload libjsig, and *then* attempt to modify signal handlers after JVM initialization. But it is confusing, and a potential source for other errors. In hotspot, nobody counts on a non-modifying sigaction query changing program state somewhere.

This seems to be an old bug, I see it in at least JDK 8. Did not look further into the past than that.",,,,,,,,,,JDK-8303142,JDK-8301241,JDK-8303299,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292695,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhoj:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-06 23:52;manc;Agree with most of the analysis. However, not sure about below:

> And any futher non-modifying sigaction calls will return NULL instead of the original - still installed - custom handler.

The first sigaction call from set_signal_handler() will lead to:
    res = call_os_sigaction(sig, act, &oldAct);
    sact[sig] = oldAct;

This will save the custom handler in sact[sig] right? Then why further non-modifying sigaction would return NULL?;;;","2022-09-06 23:58;stuefe;[~manc] you are right of course, thanks for catching this. I'll correct the bug description.;;;","2022-09-07 00:14;manc;Thanks. This bug is indeed exotic. I couldn't find any use case of -XX:+AllowUserSignalHandlers in our code repository, and I haven't seen a real use case for it yet.

Is it really supported to use both libjsig and +AllowUserSignalHandlers at the same time? I'd expect the application to implement its own signal chaining mechanism if it needs +AllowUserSignalHandlers, instead of using libjsig.;;;","2022-09-07 01:30;stuefe;Its probably not supported. But users do the strangest things, especially with lots of half-right information floating around in blogs and StackOverflow.

But I am more worried about future bugs, since in hotspot, nobody thinks twice about querying signal handler information. E.g. in `PosixSignals::is_sig_ignored(int)`. How easy to slip in such a call into the libjsig hotspot install window. Better to fix it, especially since its easy to fix.;;;","2022-09-09 23:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10236
Date: 2022-09-10 06:15:05 +0000;;;","2022-09-18 22:39;dukebot;Changeset: b1ed40a8
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-09-19 05:38:09 +0000
URL:       https://git.openjdk.org/jdk/commit/b1ed40a87ab357d1b51ac5102bba181f21ffa9b6
;;;","2023-01-10 06:12;stuefe;Fix Request:

I'd like to backport this fix. The probability of this error happening is low, but it is an error nonetheless and may cause signal chaining to misbehave. Risk is low.;;;","2023-01-10 06:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1049
Date: 2023-01-10 14:11:03 +0000;;;",,,,,,,,,,,,,,,
[macos] app image signature invalid when creating DMG or PKG from post processed signed image,JDK-8293462,5082976,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,almatvee,almatvee,2022-09-06 18:29,2023-09-28 14:33,2023-10-01 09:56,2022-09-26 15:51,19,,,,,,20,tools,,0,sn_127,sn_128,,,,,,,,,,,,,,,,,,"App image signature invalid when creating DMG or PKG from post processed signed image.

Steps to reproduce this issue:
1) Generate unsigned app-image
jpackage --type app-image -i input -n Test --main-class components.DynamicTreeDemo --main-jar DynamicTreeDemo.jar
2) Sign generated app image
jpackage --type app-image --app-image Test.app --mac-sign
3) Generate DMG from signed app image
jpackage --type dmg --app-image Test.app
4) Mount DMG and check signature. Expected: Signature valid. Actual: Signature invalid.
codesign -vvv /Volumes/Test/Test.app 
/Volumes/Test/Test.app: a sealed resource is missing or invalid
file added: /Volumes/Test/Test.app/Contents/app/.package",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313904,,,,JDK-8317283,JDK-8289030,JDK-8286850,JDK-8250950,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhnv:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-09-07 11:38;almatvee;Suggested workaround for this issue is to generate signed application image at step 1, then post process it and sign again at step 2. Another option is to generate unsigned application image and change value of <signed> from false to true in ""APPNAME.app/Contents/app/.jpackage.xml"" and then do post process and sign it again.

Problem is that JDK-8286850 never set correct value in .jpackage.xml to mark image as signed. JDK-8289030 reads this value to check if we can add per-user and system wide configuration to jpackaged app. If image is unsigned we will add "".package"" and if image is signed we will not add this file, since signed app image cannot be modified.;;;","2022-09-16 16:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10316
Date: 2022-09-16 22:55:52 +0000;;;","2022-09-26 15:51;dukebot;Changeset: 1e222bcc
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-09-26 22:48:25 +0000
URL:       https://git.openjdk.org/jdk/commit/1e222bccd3807c1be0d1d824e0ff9745751d8375
;;;",,,,,,,,,,,,,,,,,,,,
Add a test for JDK-8290832,JDK-8293461,5082975,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-09-06 17:59,2022-11-03 04:31,2023-10-01 09:56,2022-09-28 13:14,8,,,,,,openjdk8u362,core-libs,,0,11-na,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,,,,,,,,"The fix for JDK-8290832 was a simple revert of the JDK-8194154, see
https://github.com/openjdk/jdk8u/pull/14
We should add a regression test to prevent this issue.",,,,,,,,,,JDK-8294537,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290832,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yhnn:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2022-09-06 22:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/118
Date: 2022-09-07 02:15:42 +0000;;;","2022-09-12 19:47;serb;Fix request (8u)

- Justification: This is a new test to cover the fix for https://bugs.openjdk.org/browse/JDK-8290832
- PR: https://github.com/openjdk/jdk8u-dev/pull/118;;;","2022-09-28 13:14;phh;Fixed by JDK-8294537 as a backport to 8u362.;;;","2022-11-03 04:31;dukebot;Changeset: d2853822
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-09-28 20:01:02 +0000
URL:       https://git.openjdk.org/jdk8u/commit/d285382278fcb76ceddfb61cf8bb047ff269de44
;;;",,,,,,,,,,,,,,,,,,,
"runtime/os/TestTracePageSizes.java sub-tests fail with ""AssertionError: No memory range found for address: NNNN""",JDK-8293456,5082969,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,bpb,dcubed,dcubed,2022-09-06 14:48,2023-01-20 09:43,2023-10-01 09:56,2022-09-07 11:56,20,,,,,,20,core-libs,,0,noreg-other,problemlist,tier1,tier3,tier4,tier5,,,,,,,,,,,,,,"The following tests failed in the JDK20 CI:

   2 runtime/os/TestTracePageSizes.java#G1
   3 runtime/os/TestTracePageSizes.java#Parallel
   3 runtime/os/TestTracePageSizes.java#Serial
   4 runtime/os/TestTracePageSizes.java#compiler-options
   4 runtime/os/TestTracePageSizes.java#explicit-large-page-size
   5 runtime/os/TestTracePageSizes.java#no-options

Here's a snippet from the runtime/os/TestTracePageSizes.java#Serial
log file for linux-x64-debug:

#section:main
----------messages:(4/308)----------
command: main -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseSerialGC TestTracePageSizes
reason: User specified action: run main/othervm -XX:+AlwaysPreTouch -Xmx128m -Xlog:pagesize:ps-%p.log -XX:+UseSerialGC TestTracePageSizes 
Mode: othervm [/othervm specified]
elapsed time (seconds): 0.523
----------configuration:(0/0)----------
----------System.out:(0/0)----------
----------System.err:(11/720)----------
java.lang.AssertionError: No memory range found for address: 0x00007fa878523000
	at TestTracePageSizes.main(TestTracePageSizes.java:278)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.AssertionError: No memory range found for address: 0x00007fa878523000
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.AssertionError: No memory range found for address: 0x00007fa878523000
----------rerun:(38/6889)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267460,JDK-8293502,JDK-8264744,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,,"0|i2yhmb:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2022-09-06 14:53;dcubed;Here's another unresolved issue with the same test:

JDK-8267460 runtime/os/TestTracePageSizes.java#with-Serial fails on linux-aarch64 since JDK-8267155;;;","2022-09-07 03:45;tschatzl;The copied smaps file (/proc/self/smaps) is always empty here, Files.copy() does not seem to work afaict.;;;","2022-09-07 04:03;tschatzl;The problem seems to be JDK-8264744 after which the problem first occurred. Moving to core-libs/java.nio;;;","2022-09-07 04:07;tschatzl;Bumping priority as these failures are very annoying in our CI;;;","2022-09-07 04:57;tschatzl;`cp /proc/self/smaps <somewhere>` contains the smaps as expected.;;;","2022-09-07 05:13;alanb;Files.copy will use now copy_file_range if available. It appears this syscall depends on the inode file size and so doesn't work as expected on special file systems like /proc where files appear to be a size 0. It looks like we'll need to update the implementation to complete the copy in user-space as that will read to EOF and does not depend on the file size.;;;","2022-09-07 10:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10204
Date: 2022-09-07 17:41:36 +0000;;;","2022-09-07 11:55;dukebot;Changeset: 76df73b3
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-09-07 18:53:25 +0000
URL:       https://git.openjdk.org/jdk/commit/76df73b390d0db7779935dd254f6378b6884a79d
;;;","2022-09-07 15:44;bpb;noreg-other as the change is effectively covered by this test, test/hotspot/jtreg/runtime/os/TestTracePageSizes.java.;;;","2022-09-08 07:36;dcubed;The fix for this bug is integrated in jdk-20+14-947.;;;","2022-09-08 07:40;bpb;[~dcubed] Thank you, I was about to ask.;;;",,,,,,,,,,,,
"tools/jpackage/share/AddLShortcutTest.java ""Failed: Check the number of mismatched pixels [1024] of [1024] is < [0.100000] threshold""",JDK-8293453,5082966,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,dcubed,dcubed,2022-09-06 14:11,2022-12-12 13:50,2023-10-01 09:56,2022-12-05 16:14,20,,,,,,20,tools,,0,intermittent,sbr,sn_132,sn_133,tier2,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

tools/jpackage/share/AddLShortcutTest.java

Here's a snippet from the log file:

[13:16:32.846] TRACE: Images mismatch at [31, 29] pixel
[13:16:32.846] TRACE: Images mismatch at [31, 30] pixel
[13:16:32.846] TRACE: Images mismatch at [31, 31] pixel
[13:16:32.846] ERROR: Failed: Check the number of mismatched pixels [1024] of [1024] is < [0.100000] threshold
[13:16:32.846] [  FAILED  ] AddLShortcutTest.test; checks=29
[13:16:32.846] [==========] 1 tests ran
[13:16:32.846] [  PASSED  ] 0 tests
[13:16:32.846] [  FAILED  ] 1 test, listed below
[13:16:32.846] [  FAILED  ] AddLShortcutTest.test; workDir=[.\\test]
[13:16:32.846] 1 FAILED TEST
The process cannot access the file because it is being used by another process.
----------System.err:(64/4492)----------
java.lang.AssertionError: Failed: Check the number of mismatched pixels [1024] of [1024] is < [0.100000] threshold
	at jdk.jpackage.test.TKit.error(TKit.java:277)
	at jdk.jpackage.test.TKit.assertTrue(TKit.java:657)
	at jdk.jpackage.test.TKit.assertTrue(TKit.java:644)
	at jdk.jpackage.test.LauncherIconVerifier$WinIconVerifier.lambda$verifyLauncherIcon$0(LauncherIconVerifier.java:148)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.TKit.withTempDirectory(TKit.java:345)
	at jdk.jpackage.test.LauncherIconVerifier$WinIconVerifier.verifyLauncherIcon(LauncherIconVerifier.java:89)
	at jdk.jpackage.test.LauncherIconVerifier.applyTo(LauncherIconVerifier.java:70)
	at jdk.jpackage.test.AdditionalLauncher.verifyIcon(AdditionalLauncher.java:286)
	at jdk.jpackage.test.AdditionalLauncher.verify(AdditionalLauncher.java:322)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.PackageTest$Handler.lambda$verifyPackageInstalled$5(PackageTest.java:658)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest$Handler.verifyPackageInstalled(PackageTest.java:658)
	at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:592)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:504)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:411)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at jdk.jpackage.test.PackageTest.lambda$runActions$24(PackageTest.java:381)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.lambda$runActions$25(PackageTest.java:380)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:379)
	at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:58)
	at AddLShortcutTest.test(AddLShortcutTest.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
	at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
	at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
	at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.TKit.runTests(TKit.java:122)
	at jdk.jpackage.test.Main.runTests(Main.java:79)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
java.lang.RuntimeException: 1 FAILED TEST
	at jdk.jpackage.test.Main.reportSummary(Main.java:130)
	at jdk.jpackage.test.Main.runTests(Main.java:90)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 1 FAILED TEST",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298304,JDK-8296487,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,,"0|i2yhln:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-12-05 14:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11521
Date: 2022-12-05 22:14:50 +0000;;;","2022-12-05 16:14;dukebot;Changeset: 884b9ade
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-12-06 00:13:22 +0000
URL:       https://git.openjdk.org/jdk/commit/884b9ade41c9803076f55f44cd5efd3530e92ab2
;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] ClassAccessFlagsRawTest fail,JDK-8293448,5082961,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2022-09-06 12:27,2022-09-07 11:21,2023-10-01 09:56,2022-09-07 11:21,,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"Lworld requires concrete classes to have either ACC_IDENTITY(0x20) or ACC_VALUE (0x40) to be set in the modifiers.
The ClassAccessFlagsRawTest was written prior to Valhalla and expects the ACC_SUPER (0x20) to be set.

The jdoc file for SUPERnotset does not set either bit and so a ClassFormatError is thrown.

The class file version number for SUPERnotset is 64.
There is no way to distinguish between main-line behavior and Lworld behavior.

java.lang.ClassFormatError: Illegal class modifiers in class SUPERnotset: 0x1
	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1013)
	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:149)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:862)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:760)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:412)
	at java.base/java.lang.Class.forName(Class.java:403)
	at ClassAccessFlagsRawTest.testIt(ClassAccessFlagsRawTest.java:41)
	at ClassAccessFlagsRawTest.main(ClassAccessFlagsRawTest.java:55)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:579)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291360,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhkj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-06 14:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/744
Date: 2022-09-06 21:08:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
"clhsdb ""thread"" command gives incorrect error message for bad threadID",JDK-8293445,5082958,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2022-09-06 11:17,2022-09-12 16:41,2023-10-01 09:56,2022-09-06 15:28,20,,,,,,20,hotspot,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,"As pointed out in JDK-8283010, when a bad threadID is passed to the clhsdb ""thread"" command, the error message is incorrect:

hsdb> thread 18
Couldn't find thread thread

It should say ""thread 18"", not ""thread thread"". The code looks like:

                        out.println(""Couldn't find thread "" + name);

""name"" is the name of the command. It should instead use ""id"". ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283010,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhjv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-09-06 12:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10186
Date: 2022-09-06 19:28:15 +0000;;;","2022-09-06 15:28;dukebot;Changeset: 710a1434
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-09-06 22:26:29 +0000
URL:       https://git.openjdk.org/jdk/commit/710a14347344f3cc136f3b7f41aad231fbe43625
;;;",,,,,,,,,,,,,,,,,,,,,
Creating ScrollPane with same content component causes memory leak,JDK-8293444,5082832,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,angorya,webbuggrp,webbuggrp,2022-09-04 05:09,2022-11-29 06:10,2023-10-01 09:56,2022-10-04 11:17,jfx11,jfx17,jfx18,jfx19,jfx20,,jfx20,javafx,,0,dcspn,reproducer-yes,sn_128,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Microsoft Windows [Version 10.0.18363.1198]
openjdk version ""11.0.5"" 2019-10-15
OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.5+10)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.5+10, mixed mode)

A DESCRIPTION OF THE PROBLEM :
Creating ScrollPane with same content component causes memory leak until the component is removed from the scene.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Open provided ScrollPaneLeakTest.
2. Keep pressing the ""test' button.
3. Invoke GC and observe the ScrollPane count in memory analyzing tools - jvisualvm or Eclipse MAT. 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
After 3. the ScrollPane count should be 1.
ACTUAL -
Aftery 3. every time the button is pressed, the ScrollPane is created, it is present in heap dump.

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class ScrollPaneLeakTest
{

    public static void main( String[] args )
    {
        Application.launch( FxApp.class, args );
    }

    public static class FxApp extends Application
    {

        @Override
        public void start( final Stage primaryStage ) throws Exception
        {
            System.err.println( System.getProperty( ""javafx.version"" ) );
            final var testLabel = new Label( ""Test label"" );

            final var rootPane = new BorderPane();
            final var testButton = new Button( ""test"" );
            testButton.setOnAction( e -> {
                rootPane.setCenter( new ScrollPane( testLabel ) );
            } );
            rootPane.setTop( testButton );
            rootPane.setCenter( new ScrollPane( testLabel ) );
            primaryStage.setScene( new Scene( rootPane, 800, 600 ) );
            primaryStage.show();
        }

    }

}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
no workaround

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293606,,,,,,,,"2022-09-08 10:56;angorya;Screen Shot 2022-09-06 at 16.08.05.png;https://bugs.openjdk.org/secure/attachment/100711/Screen+Shot+2022-09-06+at+16.08.05.png","2022-09-06 10:26;pnarayanaswa;ScrollPaneLeakTest.java;https://bugs.openjdk.org/secure/attachment/100689/ScrollPaneLeakTest.java",,,,,,x86_64,,,,,,,,,windows_10,,,,,,,"0|i2ygs3:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-09-06 10:26;pnarayanaswa;Checked with attached testcase in Windows 10, Java VisualVM, <attached screenshot>
Test result
========
openjfx11: Fail
openjfx17: Fail
openjfx18: Fail
openjfx19ea11: Fail
openjfx20ea2: Fail;;;","2022-09-06 10:30;pnarayanaswa;Attachment <Capture.PNG> could not be scanned. The system has removed attachment. Please check the file before attempting to upload it again;;;","2022-09-06 16:09;angorya;ScrollPaneSkin$2 change listener;;;","2022-09-15 14:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/900
Date: 2022-09-15 17:12:14 +0000;;;","2022-10-04 11:16;dukebot;Changeset: 337c7818
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-10-04 18:14:23 +0000
URL:       https://git.openjdk.org/jfx/commit/337c78183be84a3420691f615096b54a68ac4300
;;;",,,,,,,,,,,,,,,,,,
[11u] minor update in attribute style,JDK-8293429,5082936,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yan,yan,yan,2022-09-06 05:14,2023-04-18 09:50,2023-10-01 09:56,2022-10-18 13:19,11.0.14,,,,,,11.0.17,security-libs,,0,,,,,,,,,,,,,,,,,,,,Clean up attribute style verification in the manifest.,,,,,,,,,,JDK-8295614,JDK-8300816,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8217375,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhf7:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-10-18 13:19;dukebot;Changeset: 80110d64
Author:    Yuri Nesterenko <yan@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-09-06 15:18:48 +0000
URL:       https://git.openjdk.org/jdk11u/commit/80110d64dcad8bd6d4bb9e008401c7a8a87fe9d8
;;;",,,,,,,,,,,,,,,,,,,,,,
DWARF emitted by Clang cannot be parsed,JDK-8293422,5082929,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,ayang,ayang,2022-09-06 04:24,2023-03-09 00:44,2023-10-01 09:56,2022-11-21 05:00,20,,,,,,20,hotspot,,0,clang,hs_err,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,"Using a clean debug build with clang (14.0.6) toolchain, `make CONF=debug test TEST=""gtest:os_linux.decoder_get_source_info_valid_vm""` fails with

```
assert(false) failed: No address descriptor found containing offset_in_library.
...
# Problematic frame:
# V  [libjvm.so+0xdc496f]  DwarfFile::DebugAranges::find_compilation_unit_offset(unsigned int, unsigned int*)+0x16f
```

gcc (11.2.0) toolchain works fine.


This can also be observed in VM crashes:
$ java -XX:CICrashAt=1 --version",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242181,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhdn:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-15 05:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10287
Date: 2022-09-15 11:59:08 +0000;;;","2022-11-21 05:00;dukebot;Changeset: 8b8d8481
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-11-21 12:58:45 +0000
URL:       https://git.openjdk.org/jdk/commit/8b8d8481bc05eec70a1df832668322e5c17694d8
;;;",,,,,,,,,,,,,,,,,,,,,
Remove GenerateRangeChecks flag,JDK-8293410,5082068,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfenacci,webbuggrp,webbuggrp,2022-08-23 01:55,2023-01-23 15:39,2023-10-01 09:56,2023-01-15 23:36,11,17,18,19,20,,21,hotspot,,0,c2,dcsswa,oracle-triage-20,reproducer-yes,starter,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
JVM crashes on dacapo benchmark with option ""-XX:-GenerateRangeChecks"". The crash occurs on JDK11 and JDK17.

Reproduce:
$ java -XX:-GenerateRangeChecks -Xcomp dacapo-9.12-MR1-bach.jar h2

Using scaled threading model. 16 processors detected, 16 threads used to drive the workload, in a possible range of [1,4000]
===== DaCapo 9.12-MR1 h2 starting =====
....
Completed 4000 transactions
        Stock level .............   155 (# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/parse2.cpp:207
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/root/jdk_source/jdk11u/src/hotspot/share/opto/parse2.cpp:207), pid=7317, tid=7358
#  assert(ptr != top()) failed: top should go hand-in-hand with stopped
#
# JRE version: OpenJDK Runtime Environment (11.0.15) (fastdebug build 11.0.15-internal+0-adhoc.root.jdk11u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 11.0.15-internal+0-adhoc.root.jdk11u, compiled mode, tiered, compressed oops, g1 gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/root/JOpFuzzer/core.7317)
#

---------------  T H R E A D  ---------------

Current thread (0x00007f31a83e3800):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=7358, stack(0x00007f31707dd000,0x00007f31708de000)]


Current CompileTask:
C2:  57927 9255    b  4       jdk.internal.math.FDBigInteger::<clinit> (403 bytes)

Stack: [0x00007f31707dd000,0x00007f31708de000],  sp=0x00007f31708da550,  free space=1013k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x18dec8a]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x1ca
V  [libjvm.so+0x18dfd7f]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x2f
V  [libjvm.so+0xb4cbb0]  report_vm_error(char const*, int, char const*, char const*, ...)+0x100
V  [libjvm.so+0x1582c2c]  Parse::array_addressing(BasicType, int, Type const*&)+0x27c
V  [libjvm.so+0x1583378]  Parse::array_load(BasicType)+0x38
V  [libjvm.so+0x158b0b5]  Parse::do_one_bytecode()+0x1665
V  [libjvm.so+0x157a9a2]  Parse::do_one_block()+0x432
V  [libjvm.so+0x157b41f]  Parse::do_all_blocks()+0xdf
V  [libjvm.so+0x157d297]  Parse::Parse(JVMState*, ciMethod*, float)+0xcd7
V  [libjvm.so+0x87529a]  ParseGenerator::generate(JVMState*)+0x8a
V  [libjvm.so+0xa709db]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0xdab
V  [libjvm.so+0x87374b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0xfb
V  [libjvm.so+0xa7e300]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x390
V  [libjvm.so+0xa7f2c8]  CompileBroker::compiler_thread_loop()+0x418
V  [libjvm.so+0x181032b]  JavaThread::thread_main_inner()+0x20b
V  [libjvm.so+0x180c165]  Thread::call_run()+0x75
V  [libjvm.so+0x151cdd6]  thread_native_entry(Thread*)+0x106



FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-09-06 02:11;sswsharm;replay_pid3380.log;https://bugs.openjdk.org/secure/attachment/100671/replay_pid3380.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2ycbv:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-06 02:10;sswsharm;Issue is reproduced on Fastdebug Oracle JDK builds.

Crash is observed while testing dacapo benchmark with option ""-XX:-GenerateRangeChecks""

OS: Windows 10
JDK 11.0.16.1: Fail
JDK 17.0.4.1: Fail
JDK 18.0.2.1: Fail
JDK 19 : Fail
JDK 20ea13: Fail

Moving it to dev team for further analysis.;;;","2022-09-06 02:12;sswsharm;Attachment <hs_err_pid3380.log> could not be scanned. The system has removed attachment. Please check the file before attempting to upload it again;;;","2022-09-06 05:42;chagedorn;This issue can be reproduced with this simple test:

$ java -Xcomp -XX:CompileOnly=Test -XX:-GenerateRangeChecks Test.java

class Test {
    static int[] iArr = new int[40];

    public static void main(String[] strArr) {
        iArr[-1] = 34;
    }
};;;","2022-09-06 05:43;rcastanedalo;ILW = assertion failure in debug JDK; using non-default value of debug-only flag; use default flag value or disable compilation of affected method = MLM = P4;;;","2022-09-06 05:44;chagedorn;Assigning to Tobias to ""reserve"" for a new compiler hire that is starting soon.;;;","2023-01-12 23:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11964
Date: 2023-01-12 11:32:54 +0000;;;","2023-01-15 23:36;dukebot;Changeset: 83f2c9a2
Author:    Damon Fenacci <damon.fenacci@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-01-16 07:34:11 +0000
URL:       https://git.openjdk.org/jdk/commit/83f2c9a2b290f11fbfb118a22c9667f26ac7c516
;;;",,,,,,,,,,,,,,,,
JfrResolution::on_jvmci_resolution crashes when caller is null,JDK-8293403,5082907,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dnsimon,dnsimon,dnsimon,2022-09-06 01:15,2023-01-20 09:34,2023-10-01 09:56,2022-09-06 08:19,20,,,,,,20,hotspot,,0,jdk19-graalvm,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,"When the `caller` argument to JfrResolution::on_jvmci_resolution is null, the method should raise an IllegalAccessError instead of crashing with a SIGSEGV.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290075,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yh8r:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-09-06 01:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10180
Date: 2022-09-06 08:18:31 +0000;;;","2022-09-06 08:19;dukebot;Changeset: 7c96608d
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-09-06 15:18:02 +0000
URL:       https://git.openjdk.org/jdk/commit/7c96608d9a2f3ea552b2daf1fe0772a0faac46c6
;;;","2022-09-06 21:09;dlong;ILW = SEGV; unknown; no workaround = HLH = P2;;;",,,,,,,,,,,,,,,,,,,,
add_definitions USE_SYSTEM_MALLOC when USE_SYSTEM_MALLOC is ON,JDK-8293375,5082875,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lzhai,lzhai,lzhai,2022-09-05 18:11,2023-02-11 06:49,2023-10-01 09:56,2022-09-08 05:02,8,jfx19,,,,,jfx20,javafx,,0,3rdparty,noreg-build,,,,,,,,,,,,,,,,,,"jfx web failed to build when `USE_SYSTEM_MALLOC` is `ON`:

```
jfx/modules/javafx.web/build/linux/Release/WTF/Headers/wtf/Platform.h:58,
jfx/modules/javafx.web/build/linux/Release/WTF/Headers/wtf/Assertions.h:28,
jfx/modules/javafx.web/src/main/native/Source/WebCore/platform/java/WebKitLogging.h:31,
jfx/modules/javafx.web/src/main/native/Source/WebCore/platform/java/WebKitLogging.cpp:28,
jfx/modules/javafx.web/build/linux/Release/WebCore/DerivedSources/unified-sources/UnifiedSource-3c72abbe-47.cpp:1:
jfx/modules/javafx.web/build/linux/Release/WTF/Headers/wtf/PlatformUse.h:351:10: fatal error: bmalloc/BPlatform.h: No such file or directory
  #include <bmalloc/BPlatform.h>
           ^~~~~~~~~~~~~~~~~~~~~
 compilation terminated.
```

After commit `6f28d912024495278c4c35ab054bc2aab480b3e4`:

```
diff --git a/modules/javafx.web/src/main/native/Source/WTF/wtf/PlatformUse.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/PlatformUse.h
index 70c047813f..d30291697a 100644
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/PlatformUse.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/PlatformUse.h

...

 #if PLATFORM(IOS_FAMILY)
 #define USE_SANDBOX_EXTENSIONS_FOR_CACHE_AND_TEMP_DIRECTORY_ACCESS 1
 #endif
+
+#if !defined(USE_LIBPAS_JIT_HEAP) && !USE(SYSTEM_MALLOC)
+#include <bmalloc/BPlatform.h>
+#if BENABLE(LIBPAS)
+#if PLATFORM(MAC) && CPU(ARM64)
+#define USE_LIBPAS_JIT_HEAP 1
+#endif
+#endif
+#endif
+
```",,,,,,,,,,JDK-8302270,JDK-8300680,JDK-8301747,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yh1n:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-09-05 18:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/892
Date: 2022-09-06 01:19:07 +0000;;;","2022-09-08 05:02;dukebot;Changeset: 28f8fa9c
Author:    Leslie Zhai <lzhai@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-09-08 11:58:05 +0000
URL:       https://git.openjdk.org/jfx/commit/28f8fa9c20363ced9a94787ecfd45735b3e6b82e
;;;","2023-01-31 05:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/103
Date: 2023-01-09 13:29:27 +0000;;;","2023-02-11 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/129
Date: 2023-02-11 14:10:59 +0000;;;",,,,,,,,,,,,,,,,,,,
IGV: Refactor Action in EditorTopComponent and fix minor bugs,JDK-8293364,5082859,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2022-09-05 06:21,2022-10-28 06:23,2023-10-01 09:56,2022-09-21 02:40,20,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,"Refactor the Actions in EditorTopComponent (com.sun.hotspot.igv.view.actions). Move Action specific code from EditorTopComponent to the corresponding Action. 

Fix some Bugs in the EditorTopComponent Actions:
- ShowEmptyBlocksAction is selected by default but only enabled in CFG view: don't select it when disabled (greyed out)
- Only enable ExtractAction, HideAction and ShowAllAction when they can have an effect
- ReduceDiffAction gets is not enabled and we get stuck when difference graph selection is >1 and it includes the last graph of the group",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ygy3:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-09-05 07:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10170
Date: 2022-09-05 13:38:41 +0000;;;","2022-09-06 05:11;rcastanedalo;ILW = minor usability problems in debug tool; happens every time the tool is used; no workaround known = LHH = P4;;;","2022-09-21 02:40;dukebot;Changeset: e9401e67
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-09-21 09:37:26 +0000
URL:       https://git.openjdk.org/jdk/commit/e9401e67b3f60206e6a98c1c44367b482506a4de
;;;",,,,,,,,,,,,,,,,,,,,
GHA: dump config.log in case of configure failure,JDK-8293361,5082856,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-09-05 05:37,2023-08-30 01:50,2023-10-01 09:56,2022-09-06 01:54,11,17,20,,,,20,infrastructure,,0,build-infra,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,If configure fails in GHA it is very hard to debug. Dumping the contents of config.log helps.,,,,,,,,,,JDK-8314203,JDK-8315342,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ygxf:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-05 05:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10165
Date: 2022-09-05 12:37:47 +0000;;;","2022-09-06 01:54;dukebot;Changeset: 8e22f2bb
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-09-06 08:51:02 +0000
URL:       https://git.openjdk.org/jdk/commit/8e22f2bb403d71c103629f29996e78a54eafe0ad
;;;","2023-08-07 00:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1640
Date: 2023-08-04 14:04:14 +0000;;;","2023-08-07 07:26;shade;Fix Request (17u)

Brings the JDK 17 GHA up to date. Due to the accumulated debt, should come in as atomic commit consisting of JDK-8293107, JDK-8293098, JDK-8293361, JDK-8295213, JDK-8313428, JDK-8313707. See 17u PR. GHA testing is clean.;;;","2023-08-21 06:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2090
Date: 2023-08-21 10:56:18 +0000;;;","2023-08-30 01:12;shade;Fix Request (11u)

Improves the long-term viability of GHA workflows. Applies semi-cleanly with some changeset surgery around existing backports. See 11u PR, acked by Christoph Langer.;;;",,,,,,,,,,,,,,,,,
"[lworld] TestTrivialMethods fails with ""constantGetter is not C2 compiled""",JDK-8293357,5082852,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2022-09-05 04:40,2022-09-05 06:07,2023-10-01 09:56,2022-09-05 06:07,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lworld,noreg-self,,,,,,,,,,,,,,,,,,"java.lang.RuntimeException: constantGetter is not C2 compiled: expected 0 to equal 4
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEQ(Asserts.java:178)
	at compiler.valhalla.inlinetypes.TestTrivialMethods.main(TestTrivialMethods.java:154)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:579)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ygwj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-05 05:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/743
Date: 2022-09-05 12:52:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
JDK-8293167 included bad copyright header,JDK-8293355,5082849,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ihse,ihse,ihse,2022-09-05 03:11,2023-01-20 09:32,2023-10-01 09:56,2022-09-05 03:21,20,,,,,,20,hotspot,,0,noreg-build,noreg-trivial,,,,,,,,,,,,,,,,,,This breaks CI testing in Oracle.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293167,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ygvv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,Verified,,"2022-09-05 03:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10162
Date: 2022-09-05 10:12:35 +0000;;;","2022-09-05 03:21;dukebot;Changeset: 8df671c9
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-09-05 10:17:58 +0000
URL:       https://git.openjdk.org/jdk/commit/8df671c908d10b586540cc916a91e083c6098648
;;;",,,,,,,,,,,,,,,,,,,,,
fastdebug build broken after JDK-8281866,JDK-8293354,5082848,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bae,bae,bae,2022-09-05 03:08,2022-09-20 05:09,2023-10-01 09:56,2022-09-05 04:25,15.0.8,,,,,,15.0.9,hotspot,,0,jdk15u-fix-request,jdk15u-fix-yes,,,,,,,,,,,,,,,,,,"The 15u backport of JDK-8281866 uses vmIntrinsicID::_invokeBasic which is not available in 15u, and causes following error for the fastdebug configuration:

```
/ws/openjdk/jdk15u-dev/src/hotspot/share/interpreter/linkResolver.cpp:1729:21: error: use of undeclared identifier 'vmIntrinsicID'; did you mean 'vmIntrinsics'?
      assert(iid == vmIntrinsicID::_invokeBasic, ""%s"", vmIntrinsics::name_at(iid));
                    ^~~~~~~~~~~~~
                    vmIntrinsics
/ws/openjdk/jdk15u-dev/src/hotspot/share/utilities/debug.hpp:65:33: note: expanded from macro 'assert'
#define assert(p, ...) vmassert(p, __VA_ARGS__)
                                ^
/ws/openjdk/jdk15u-dev/src/hotspot/share/utilities/debug.hpp:56:9: note: expanded from macro 'vmassert'
  if (!(p)) {                                                                  \
        ^
/ws/openjdk/jdk15u-dev/src/hotspot/share/classfile/vmSymbols.hpp:1594:7: note: 'vmIntrinsics' declared here
class vmIntrinsics: AllStatic {
      ^
1 error generated.
```

Suggested fix:
```
diff --git a/src/hotspot/share/interpreter/linkResolver.cpp b/src/hotspot/share/interpreter/linkResolver.cpp
index c5114b7e833..842ee1dad3d 100644
--- a/src/hotspot/share/interpreter/linkResolver.cpp
+++ b/src/hotspot/share/interpreter/linkResolver.cpp
@@ -1726,7 +1726,7 @@ void LinkResolver::resolve_handle_call(CallInfo& result,
     if (MethodHandles::is_signature_polymorphic_intrinsic(iid)) {
       // Check if method can be accessed by the referring class.
       // MH.linkTo* invocations are not rewritten to invokehandle.
-      assert(iid == vmIntrinsicID::_invokeBasic, ""%s"", vmIntrinsics::name_at(iid));
+      assert(iid == vmIntrinsics::_invokeBasic, ""%s"", vmIntrinsics::name_at(iid));
 
       Klass* current_klass = link_info.current_klass();
       assert(current_klass != NULL , ""current_klass should not be null"");
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281866,,,,,,,,,,,,,,,generic,,,,,,,15.0.8,,generic,,,,,,,"0|i2ygvn:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-05 04:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/269
Date: 2022-09-05 11:10:57 +0000;;;","2022-09-05 04:25;dukebot;Changeset: 1daf5c59
Author:    Andrew Brygin <bae@openjdk.org>
Date:      2022-09-05 11:20:54 +0000
URL:       https://git.openjdk.org/jdk15u-dev/commit/1daf5c5906aa72abac341101a19381c13ecf76c9
;;;","2022-09-20 05:09;dukebot;Changeset: 1daf5c59
Author:    Andrew Brygin <bae@openjdk.org>
Date:      2022-09-05 11:20:54 +0000
URL:       https://git.openjdk.org/jdk15u/commit/1daf5c5906aa72abac341101a19381c13ecf76c9
;;;",,,,,,,,,,,,,,,,,,,,
[BACKOUT] G1: Remove redundant is-marking-active checks in C1 barrier,JDK-8293353,5082847,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ayang,ayang,ayang,2022-09-05 01:55,2023-01-20 09:30,2023-10-01 09:56,2022-09-06 01:46,20,,,,,,20,hotspot,,0,gc-g1,,,,,,,,,,,,,,,,,,,To fix JDK-8292221 for now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292221,,,,,,,,JDK-8293544,JDK-8289138,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ygvf:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2022-09-05 02:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10159
Date: 2022-09-05 08:58:33 +0000;;;","2022-09-06 01:46;dukebot;Changeset: 1bed23a1
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2022-09-06 08:43:34 +0000
URL:       https://git.openjdk.org/jdk/commit/1bed23a1af8f992003bff053ff982f4938b7221f
;;;",,,,,,,,,,,,,,,,,,,,,
A false cyclic inheritance error reported,JDK-8293348,5082840,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-09-05 00:20,2022-10-17 23:16,2023-10-01 09:56,2022-09-08 07:12,,,,,,,20,tools,,0,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,,,,,,,,,,,,,,,,,"In a specific case where permits clause is present, and some classes are load from source and some from classfiles, a false cyclic inheritance error may be reported:
---
$ bash bug.sh 
preparing test:
actual test (should pass, bug fails):
src/T.java:1: error: cyclic inheritance involving T2
sealed interface T permits X, T2 {}
                              ^
1 error
---

Please see the attached script to reproduce the bug.
",,,,,,,,,,JDK-8294269,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-09-05 00:20;jlahoda;bug.sh;https://bugs.openjdk.org/secure/attachment/100651/bug.sh",,,,,,,,,,,,,,,,,,,,,,,"0|i2ygtv:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-09-05 09:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10171
Date: 2022-09-05 16:10:54 +0000;;;","2022-09-08 07:12;dukebot;Changeset: c0ee30a2
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-09-08 14:10:06 +0000
URL:       https://git.openjdk.org/jdk/commit/c0ee30a25abda2f93806bbfaf940ba8638b864bf
;;;","2022-09-08 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/20
Date: 2022-09-08 14:11:33 +0000;;;","2022-09-08 07:40;jlahoda;Fix Request

This falsely reported compile-time error causes issues for some user of javac (like NetBeans), and makes it painful to develop some branches that use sealed classes heavily. The intent of the fix is to defer handling of permitted subclasses a bit in the compiler pipeline, to avoid cycles in at a tricky time, but it is still in the same general compiler phase, so shouldn't affect anything else. The tests are passing with the change.
;;;",,,,,,,,,,,,,,,,,,,
"sun/management/jmxremote/bootstrap/RmiSslNoKeyStoreTest.java failed with ""Agent communication error: java.io.EOFException""",JDK-8293343,5082834,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bhuang,dcubed,dcubed,2022-09-04 06:54,2022-09-14 21:38,2023-10-01 09:56,2022-09-12 06:09,20,,,,,,20,core-svc,,0,problemlist,tier5,tier6,tier8,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

sun/management/jmxremote/bootstrap/RmiSslNoKeyStoreTest.java

Here's a snippet from the log file:

#section:main
----------messages:(6/368)----------
command: main RmiSslNoKeyStoreTest .*_ssltest.*.in
reason: User specified action: run main/timeout=300 RmiSslNoKeyStoreTest .*_ssltest.*.in 
Mode: agentvm
Agent id: 54
Additional exports to unnamed modules from @modules: java.management/sun.management jdk.management.agent/jdk.internal.agent jdk.management.agent/sun.management.jmxremote
elapsed time (seconds): 0.368
----------configuration:(19/2272)----------

<snip>

result: Error. Agent communication error: java.io.EOFException; check console log for any additional details

There's no indication of an error except for the above 
"" Agent communication error: java.io.EOFException"". 
No hs_err_pid file, no indication of a problem with the test 
execution, no core file. 

This same failure happened on a linux-aarch64-open and
a linux-aarch64-debug test machine in jdk-20+14-900-tier6.

We recently had the same failure mode with a different test:

JDK-8293335 sun/management/jmxremote/bootstrap/RmiBootstrapTest.java#id1failed with ""Agent communication error: java.io.EOFException""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293335,,,,JDK-8292067,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,os_x_10.15,,,,,,"0|i2ygsj:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2022-09-07 08:58;kevinw;The directory test/jdk/sun/management/jmxremote/bootstrap/ was updated just before these failures (Looking at it further...):

8292067: Convert test/sun/management/jmxremote/bootstrap shell tests to java version
Date:   Fri Sep 2 18:10:56 2022 +0000

;;;","2022-09-08 01:33;kevinw;Test failure reproduces frequently for me.
With the othervm jtreg tag it stopped failing (batches of 20 test runs on each platform).

diff --git a/test/jdk/sun/management/jmxremote/bootstrap/RmiSslNoKeyStoreTest.java b/test/jdk/sun/management/jmxremote/bootstrap/RmiSslNoKeyStoreTest.java
index 41b303399cc..78ccaa86c5f 100644
--- a/test/jdk/sun/management/jmxremote/bootstrap/RmiSslNoKeyStoreTest.java
+++ b/test/jdk/sun/management/jmxremote/bootstrap/RmiSslNoKeyStoreTest.java
@@ -48,7 +48,7 @@ import javax.management.remote.JMXConnectorServer;
  *
  * @library /test/lib
  *
- * @run main/timeout=300 RmiSslNoKeyStoreTest .*_ssltest.*.in
+ * @run main/othervm/timeout=300 RmiSslNoKeyStoreTest .*_ssltest.*.in
  * */

 /**;;;","2022-09-09 09:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10224
Date: 2022-09-08 23:20:19 +0000;;;","2022-09-12 06:09;dukebot;Changeset: 91c9091d
Author:    Bill Huang <bill.w.huang@oracle.com>
Committer: Kevin Walls <kevinw@openjdk.org>
Date:      2022-09-12 13:07:34 +0000
URL:       https://git.openjdk.org/jdk/commit/91c9091d7e64ba0bdb257521bd15ff183c6839fa
;;;",,,,,,,,,,,,,,,,,,,
vm/jvmti/StopThread/stop001/stop00103 crashes with SIGSEGV in Continuation::is_continuation_mounted,JDK-8293339,5082824,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,dcubed,dcubed,2022-09-03 06:39,2022-09-19 11:08,2023-10-01 09:56,2022-09-12 15:00,20,,,,,,20,hotspot,,0,intermittent,loom,tier3,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

vm/jvmti/StopThread/stop001/stop00103/stop00103.html

Here's a snippet from the log file:

#section:script_messages
----------messages:(1/24)----------
Executing test class...

#section:testExecute
----------messages:(1/975)----------
command: com.sun.jck.lib.ExecJCKTestOtherJVMCmd LD_LIBRARY_PATH=/opt/mach5/mesos/work_dir/jib-master/install/jck/20/b01/extra/bundles/JCK-extra-20.zip/JCK-extra-20/binaries/linux-amd64/lib /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+14-899/linux-x64.jdk/jdk-20/bin/java --enable-preview -Djava.awt.headless=true -XX:MaxRAMPercentage=4.16667 --show-version -Xms32m -Xmx1024m -Djdk.attach.allowAttachSelf=true -Djava.security.properties=/opt/mach5/mesos/work_dir/jib-master/install/jck/20/b01/extra/bundles/JCK-extra-20.zip/JCK-extra-20/extra.security.properties -agentlib:jckjvmti=stop00103 -classpath :/opt/mach5/mesos/work_dir/jib-master/install/jck/20/b01/bundles/JCK-runtime-20.jar/JCK-runtime-20/classes: -Djava.security.policy=/opt/mach5/mesos/work_dir/jib-master/install/jck/20/b01/bundles/JCK-runtime-20.jar/JCK-runtime-20/lib/jck.policy javasoft.sqe.tests.vm.jvmti.stop001.stop00103.stop00103 -platform.jvmtiSupported true -platform.nativeLibsLinkage dynamic
----------out1:(0/0)----------
----------out2:(21/1487)----------
java 20-ea 2023-03-21
Java(TM) SE Runtime Environment (build 20-ea+14-899)
Java HotSpot(TM) 64-Bit Server VM (build 20-ea+14-899, mixed mode, sharing)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007ff95767d9c8, pid=2630760, tid=2630763
#
# JRE version: Java(TM) SE Runtime Environment (20.0+14) (build 20-ea+14-899)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (20-ea+14-899, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x6339c8]  Continuation::is_continuation_mounted(JavaThread*, oopDesc*)+0x38
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S55557/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3c73cf45-46cc-42ef-907b-98cdd02b112b/runs/982df45b-744d-442b-a270-68b3949358df/testoutput/test-support/jck_runtime_vm_jvmti/core.2630760)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S55557/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3c73cf45-46cc-42ef-907b-98cdd02b112b/runs/982df45b-744d-442b-a270-68b3949358df/testoutput/test-support/jck_runtime_vm_jvmti/hs_err_pid2630760.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
result: Failed. unexpected exit code: exit code 134

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007ff9500280d0):  JavaThread ""main"" [_thread_in_vm, id=2630763, stack(0x00007ff958eb7000,0x00007ff958fb8000)] _threads_hazard_ptr=0x00007ff8fc080a00

Stack: [0x00007ff958eb7000,0x00007ff958fb8000],  sp=0x00007ff958fb66c0,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6339c8]  Continuation::is_continuation_mounted(JavaThread*, oopDesc*)+0x38
V  [libjvm.so+0xa92a2f]  JvmtiEnvBase::get_threadOop_and_JavaThread(ThreadsList*, _jobject*, JavaThread**, oopDesc**)+0x20f
V  [libjvm.so+0xa8365c]  JvmtiEnv::StopThread(_jobject*, _jobject*)+0x5c
V  [libjvm.so+0xa3560e]  jvmti_StopThread+0x15e
C  [libjckjvmti.so+0x96e00]  Java_javasoft_sqe_tests_vm_jvmti_stop001_stop00103_stop00103_StopThread+0x7a
j  javasoft.sqe.tests.vm.jvmti.stop001.stop00103.stop00103.StopThread(Ljava/lang/Thread;Ljavasoft/sqe/tests/vm/jvmti/stop001/stop00103/Exc;)I+0
j  javasoft.sqe.tests.vm.jvmti.stop001.stop00103.stop00103.run([Ljava/lang/String;Ljava/io/PrintStream;)I+46
j  javasoft.sqe.tests.vm.jvmti.stop001.stop00103.stop00103.main([Ljava/lang/String;)V+8
v  ~StubRoutines::call_stub 0x00007ff94052bcc6
V  [libjvm.so+0x8a3345]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x315
V  [libjvm.so+0x94b2ea]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x3ea
V  [libjvm.so+0x94dfe2]  jni_CallStaticVoidMethod+0x152
C  [libjli.so+0x467b]  JavaMain+0xd1b
C  [libjli.so+0x7c39]  ThreadJavaMain+0x9

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  javasoft.sqe.tests.vm.jvmti.stop001.stop00103.stop00103.StopThread(Ljava/lang/Thread;Ljavasoft/sqe/tests/vm/jvmti/stop001/stop00103/Exc;)I+0
j  javasoft.sqe.tests.vm.jvmti.stop001.stop00103.stop00103.run([Ljava/lang/String;Ljava/io/PrintStream;)I+46
j  javasoft.sqe.tests.vm.jvmti.stop001.stop00103.stop00103.main([Ljava/lang/String;)V+8
v  ~StubRoutines::call_stub 0x00007ff94052bcc6

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000009",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,,"0|i2ygqb:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-09-03 06:42;dcubed;Attachment <hs_err_pid2630760.log> could not be scanned. The system has removed attachment. Please check the file before attempting to upload it again;;;","2022-09-03 06:42;dcubed;The failure handler isn't finding the hs_err_pid file for the crash so I've
downloaded the artifacts and attached hs_err_pid2630760.log to this bug.;;;","2022-09-03 07:15;dcubed;Attachment <hs_err_pid2630760.log> could not be scanned. The system has removed attachment. Please check the file before attempting to upload it again;;;","2022-09-09 16:03;sspitsyn;I was not able to reproduce this issue with mach5 on 3 platforms.
However, I think, I understand the problem.
A VTMS transition Disabler is needed in JVMTI StopThread implementation.;;;","2022-09-09 17:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10235
Date: 2022-09-10 00:05:22 +0000;;;","2022-09-12 15:00;dukebot;Changeset: d3f7e3b4
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-09-12 21:56:05 +0000
URL:       https://git.openjdk.org/jdk/commit/d3f7e3b41779427a0765bdd40a3627cb0490cbce
;;;",,,,,,,,,,,,,,,,,
"sun/management/jmxremote/bootstrap/RmiBootstrapTest.java#id1failed with ""Agent communication error: java.io.EOFException""",JDK-8293335,5082820,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bhuang,dcubed,dcubed,2022-09-02 19:57,2022-11-10 08:56,2023-10-01 09:56,2022-09-12 06:09,20,,,,,,20,core-svc,,0,problemlist,tier3,tier6,tier7,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

sun/management/jmxremote/bootstrap/RmiBootstrapTest.java#id1

Here's a snippet from the log file:

#section:main
----------messages:(6/360)----------
command: main RmiBootstrapTest .*_ssltest.*.in
reason: User specified action: run main/timeout=300 RmiBootstrapTest .*_ssltest.*.in 
Mode: agentvm
Agent id: 16
Additional exports to unnamed modules from @modules: java.management/sun.management jdk.management.agent/jdk.internal.agent jdk.management.agent/sun.management.jmxremote
elapsed time (seconds): 3.235
----------configuration:(19/2293)----------

<snip>

result: Error. Agent communication error: java.io.EOFException; check console log for any additional details

There's no indication of an error except for the above
"" Agent communication error: java.io.EOFException"".
No hs_err_pid file, no indication of a problem with the test
execution, no core file.

This same failure happened on two different linux-x64-debug
test machines in jdk-20+14-898-tier3. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293657,,,,JDK-8293343,JDK-8292067,,,,,,,"2022-11-10 08:55;dcubed;jdk-20+14_linux-x64.8293335.zip;https://bugs.openjdk.org/secure/attachment/101541/jdk-20%2B14_linux-x64.8293335.zip",,,,,,,x86_64,,,,,,,,,linux,,,,,,,"0|i2ygpf:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2022-09-03 06:48;dcubed;Bumping from P4 -> P3 since this failure has happened in three
Tier3 build-IDs in a row. All of the failures have happened on
Ubuntu 20.04 or Ubuntu 22.04 test machines so far.;;;","2022-09-08 02:31;kevinw;Like JDK-8293343 this appears to be an issue since:
8292067: Convert test/sun/management/jmxremote/bootstrap shell tests to java version

This one does not reproduce so easily for me, so can't immediately confirm if adding ""othervm"" works.  But they are the kind of tests that need their own VM, e.g. use of System properties.  
;;;","2022-09-09 09:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10224
Date: 2022-09-08 23:20:19 +0000;;;","2022-09-12 06:09;dukebot;Changeset: 91c9091d
Author:    Bill Huang <bill.w.huang@oracle.com>
Committer: Kevin Walls <kevinw@openjdk.org>
Date:      2022-09-12 13:07:34 +0000
URL:       https://git.openjdk.org/jdk/commit/91c9091d7e64ba0bdb257521bd15ff183c6839fa
;;;","2022-11-10 08:56;dcubed;Here's the logs for my jdk-20+14 stress testing on linux-x64 (just for the record):

$ unzip -l jdk-20+14_linux-x64.8293335.zip
Archive:  jdk-20+14_linux-x64.8293335.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    17847  2022-09-08 21:41   jdk-20+14_1/failures.linux-x86_64/RmiBootstrapTest_id1.jtr.slowdebug
    17825  2022-09-09 21:00   jdk-20+14_2/failures.linux-x86_64/RmiBootstrapTest_id1.jtr.slowdebug
    17820  2022-09-11 02:11   jdk-20+14_3/failures.linux-x86_64/RmiBootstrapTest_id1.jtr.fastdebug
---------                     -------
    53492                     3 files;;;",,,,,,,,,,,,,,,,,,
Broken links in JDI specification,JDK-8293333,5082818,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,sspitsyn,sspitsyn,2022-09-02 17:10,2022-09-12 16:41,2023-10-01 09:56,2022-09-07 02:06,20,,,,,,20,core-svc,,0,doc-only,noreg-doc,,,,,,,,,,,,,,,,,,"The following anchors are broken in the JDI specification:

specs/jvmti/jvmti.html#GetClassLoaderClasses
    [used in 1 file]
    api/jdk.jdi/com/sun/jdi/ClassLoaderReference.html
specs/jvmti/jvmti.html#GetLoadedClasses
    [used in 1 file]
    api/jdk.jdi/com/sun/jdi/VirtualMachine.html

This issue was originally filed by Raymond Gillardo in bug: JDK-8291586
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291586,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ygoz:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-09-06 22:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10191
Date: 2022-09-07 05:51:53 +0000;;;","2022-09-07 02:06;dukebot;Changeset: 4f9065d3
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-09-07 09:04:09 +0000
URL:       https://git.openjdk.org/jdk/commit/4f9065d3d5e914f8e89daf1ff27bba3578b19e20
;;;",,,,,,,,,,,,,,,,,,,,,
Refactor FileDispatcherImpl into operating system-specific components,JDK-8293331,5082816,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-09-02 16:48,2023-08-03 03:06,2023-10-01 09:56,2022-09-22 09:02,20,,,,,,20,core-libs,,0,noreg-other,,,,,,,,,,,,,,,,,,,Break up FileDispatcherImpl in a manner analogous to the refactoring performed in JDK-8293121.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293121,JDK-8313368,,,JDK-8294399,,,,,,,,,,,,,,,,,,,,,,,,aix,linux,os_x,windows,,,,"0|i2ygoj:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-09-02 18:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10154
Date: 2022-09-03 00:59:07 +0000;;;","2022-09-22 09:02;dukebot;Changeset: 48cc1560
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-09-22 15:59:05 +0000
URL:       https://git.openjdk.org/jdk/commit/48cc15602b62e81bb179ca9570a1e7d8bbf4d6df
;;;",,,,,,,,,,,,,,,,,,,,,
jdk/sun/security/tools/jarsigner/compatibility/SignTwice.java slow on Windows,JDK-8293326,5082807,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2022-09-02 12:50,2023-02-02 12:20,2023-10-01 09:56,2022-09-06 22:29,11,17,20,,,,20,security-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,"SignTwice test takes a few minutes to complete on Windows; on other OSes it usually finishes under a minute.

The test repeatedly runs jarsigner with different parameters; it also adds -J-Djava.security.egd=file:/dev/./urandom to the command line. That parameter adds a few seconds to the tool startup time. Removing that parameter or changing its value to file:/dev/urandom (without the dot in the middle) allows the test to complete under a minute, similar to other platforms.",,,,,,,,,,JDK-8301713,JDK-8299464,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,,"0|i2ygmj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-09-05 02:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10160
Date: 2022-09-05 09:29:49 +0000;;;","2022-09-06 22:29;dukebot;Changeset: 205f992e
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-09-07 05:25:53 +0000
URL:       https://git.openjdk.org/jdk/commit/205f992e9ecf9f83bb052ee2e2a32e3f532c5ac9
;;;","2023-01-31 08:02;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test SignTwice passes.  SAP nightly testing passes.;;;","2023-01-31 08:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1139
Date: 2023-01-31 16:07:47 +0000;;;",,,,,,,,,,,,,,,,,,,
[lworld] C2 OSR compilation fails with assert(_gvn.type(l)->higher_equal(type)) failed: must constrain OSR typestate,JDK-8293314,5082791,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-09-02 06:09,2022-09-02 08:15,2023-10-01 09:56,2022-09-02 08:15,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,c2,lworld,,,,,,,,,,,,,,,,,,"Originally happened with serviceability/jvmti/Valhalla/HeapDump/HeapDump.java.

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla2/open/src/hotspot/share/opto/parse1.cpp:196), pid=997039, tid=997053
#  assert(_gvn.type(l)->higher_equal(type)) failed: must constrain OSR typestate
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-lworld4ea-2022-09-01-0715344.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-lworld4ea-2022-09-01-0715344.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x184b1ec]  Parse::check_interpreter_type(Node*, Type const*, SafePointNode*&)+0x64c

Current CompileTask:
C2:   2561 1201 %  b  4       compiler.valhalla.inlinetypes.TestArrays::test149 @ 4 (31 bytes)

Stack: [0x00007fd37c8d8000,0x00007fd37c9d9000],  sp=0x00007fd37c9d5750,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x184b1ec]  Parse::check_interpreter_type(Node*, Type const*, SafePointNode*&)+0x64c
V  [libjvm.so+0x18518db]  Parse::load_interpreter_state(Node*)+0xdbb
V  [libjvm.so+0x185daa8]  Parse::Parse(JVMState*, ciMethod*, float)+0x5e8
V  [libjvm.so+0x954c25]  ParseGenerator::generate(JVMState*)+0x115
V  [libjvm.so+0xb6a87a]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x143a
V  [libjvm.so+0x95041d]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6dd
V  [libjvm.so+0xb79bd8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbb8
V  [libjvm.so+0xb7abc8]  CompileBroker::compiler_thread_loop()+0x6f8
V  [libjvm.so+0x10f9b08]  JavaThread::thread_main_inner()+0x238
V  [libjvm.so+0x1b7c9c0]  Thread::call_run()+0x100
V  [libjvm.so+0x180d254]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ygiz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-02 07:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/740
Date: 2022-09-02 14:23:12 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
bootcycle build failure after JDK-8173605,JDK-8293288,5082727,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-09-01 18:11,2022-09-08 07:33,2023-10-01 09:56,2022-09-02 10:49,20,,,,,,20,infrastructure,,0,tencent-interest,tier4,,,,,,,,,,,,,,,,,,"[bootcycle] Compiling 186 files for BUILD_TOOLS_JDK
[bootcycle] Compiling 31 files for BUILD_JRTFS
[bootcycle] Compiling 2 files for COMPILE_DEPEND
warning: [options] source value 8 is obsolete and will be removed in a future release
warning: [options] target value 8 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
error: warnings found and -Werror specified
1 error
3 warnings
make[5]: *** [JrtfsJar.gmk:50: /home/jdk/build/linux-x86_64-server-fastdebug/bootcycle-build/support/jrtfs_classes/_the.BUILD_JRTFS_batch] Error 1
make[4]: *** [make/Main.gmk:401: jrtfs-jar] Error 2
make[4]: *** Waiting for unfinished jobs....

ERROR: Build failed for target 'product-images' in configuration 'linux-x86_64-server-fastdebug' (exit code 2)
make[4]: warning: -j1 forced in submake: resetting jobserver mode.
Stopping sjavac server

=== Output from failing command(s) repeated here ===
* For target support_jrtfs_classes__the.BUILD_JRTFS_batch:
warning: [options] source value 8 is obsolete and will be removed in a future release
warning: [options] target value 8 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
error: warnings found and -Werror specified
1 error
3 warnings

* All command lines available in /home/jdk/build/linux-x86_64-server-fastdebug/bootcycle-build/make-support/failure-logs.
=== End of repeated output ===",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293318,,JDK-8173605,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yg4r:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-01 18:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10135
Date: 2022-09-02 01:26:01 +0000;;;","2022-09-02 10:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10148
Date: 2022-09-02 17:22:52 +0000;;;","2022-09-02 10:49;dukebot;Changeset: b6477fdb
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-09-02 17:44:59 +0000
URL:       https://git.openjdk.org/jdk/commit/b6477fdb306cd258a2312a5c745f23bc8242757a
;;;","2022-09-02 14:30;dcubed;This fix is integrated in jdk-20+14-894.;;;",,,,,,,,,,,,,,,,,,,
"LoadLibraryUnloadTest.java fails with ""Too few cleared WeakReferences""",JDK-8293282,5082720,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,rriggs,dcubed,dcubed,2022-09-01 15:40,2023-01-31 03:44,2023-10-01 09:56,2022-09-12 06:29,20,,,,,,20,core-libs,,0,tier1,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/lang/ClassLoader/loadLibraryUnload/LoadLibraryUnloadTest.java

Here's a snippet from the log file:

#section:main
----------messages:(4/204)----------
command: main -Xcheck:jni LoadLibraryUnloadTest
reason: User specified action: run main/othervm/native -Xcheck:jni LoadLibraryUnloadTest 
Mode: othervm [/othervm specified]
elapsed time (seconds): 30.295
----------configuration:(0/0)----------
----------System.out:(15/1225)----------
COMMAND: /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+14-879/linux-aarch64.jdk/jdk-20/bin/java -Dtest.classes=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S78769/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2b60eee2-a982-4008-9874-cdd81dbc3722/runs/535e1638-b004-48b1-93a2-e009fbde5a99/testoutput/test-support/jtreg_open_test_jdk_tier1_part1/classes/1/java/lang/ClassLoader/loadLibraryUnload/LoadLibraryUnloadTest.d -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+14-879/linux-aarch64.test/jdk/jtreg/native LoadLibraryUnload
[2022-09-01T22:00:13.160548616Z] Gathering output for process 3226617
Native library loaded.
Native library loaded from Class1.
Native library loaded from Class1.
GlobalRef created
GlobalRef deleted
Native library unloaded.
0 dequeued: null
Exception in thread ""main"" java.lang.RuntimeException: Too few cleared WeakReferences
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at LoadLibraryUnload.main(LoadLibraryUnload.java:170)
Native library loaded in 1 threads
[2022-09-01T22:00:43.343376553Z] Waiting for completion for process 3226617
[2022-09-01T22:00:43.343503273Z] Waiting for completion finished for process 3226617
----------System.err:(13/857)----------
java.lang.RuntimeException: LoadLibraryUnload exit value not zero: expected 0 to equal 1
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at LoadLibraryUnloadTest.main(LoadLibraryUnloadTest.java:106)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: LoadLibraryUnload exit value not zero: expected 0 to equal 1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290848,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,,"0|i2yg37:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ae6d091,,,,,,,Verified,,"2022-09-01 15:44;dcubed;Another test with the same failure mode was fixed via:

JDK-8290848 LoadLibraryUnload.java still fails with ""Too few cleared WeakReferences""

by [~rriggs] in jdk-20+8.;;;","2022-09-02 10:20;mchung;Looks like JDK-8290848 didn't resolve ""too few cleared WeakReferences"" completely.;;;","2022-09-05 07:08;jpai;The test we have here does:

// Wait for the canary for each of the libraries to be GC'd
        // before exiting the test.
        for (int i = 0; i < LOADER_COUNT; i++) {
            System.gc();
            var res = refQueue.remove(Utils.adjustTimeout(30 * 1000L));
            System.out.println(i + "" dequeued: "" + res);
            if (res == null) {
                Asserts.fail(""Too few cleared WeakReferences"");
            }
        }

Would it make sense to just replace:

var res = refQueue.remove(Utils.adjustTimeout(30 * 1000L));

with:

var res = refQueue.remove();

because it appears like no matter what timeout we specify there isn't a guarantee that it would be enough. If I remember correctly, at some point Roger had used/suggested using refQueue.remove(); without the timeout but was changed to prevent the case where the jtreg test case might timeout if this call blocks forever. But I now think that's a better option.

As for this specific instance of failure, it looks like the host on which this test was running was ""busy"" - the captured data post-failure contains this output from top:

----------------------------------------
[2022-09-01 22:00:43] [/bin/top, -b, -n, 1] timeout=20000
----------------------------------------
top - 22:00:43 up 3 days, 19:57,  0 users,  load average: 3.97, 4.83, 5.44
Tasks: 351 total,   1 running, 350 sleeping,   0 stopped,   0 zombie
%Cpu(s): 53.0 us,  5.2 sy,  0.0 ni, 41.0 id,  0.0 wa,  0.0 hi,  0.7 si,  0.0 st
MiB Mem :  31675.1 total,   4035.9 free,   4761.2 used,  22877.9 buff/cache
MiB Swap:   4095.9 total,   3937.8 free,    158.1 used.  22068.6 avail Mem 

    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
3231532 mach5-o+  20   0 4276992 148544  30144 S 200.0   0.5   0:07.41 java
3231731 mach5-o+  20   0 4177728 463616  26176 S 137.5   1.4   0:10.61 java
3224629 mach5-o+  20   0 6660928 158912  26112 S  62.5   0.5   0:11.21 java
3232023 mach5-o+  20   0 3412864  41856  23488 S  43.8   0.1   0:00.07 java
....

So there are some java processes (some are jtreg agent vms and one is a separate test case that's running at the same time as this test). So it's likely the gc wasn't triggered during that period.


;;;","2022-09-08 11:38;rriggs;It seems the single System.gc() invocation wasn't sufficient to process the references.
The problem is intermittent, most of the time it is sufficient.
If the explicit timeout/failure is removed, the test will still fail intermittently.
Enabling the loop to call System.gc() a few times and failing only if the ref isn't queued by the last should give gc a few more chances to queue the ref.;;;","2022-09-08 12:35;martin;Reasonably robust tests for finalization can be found in tests invoking e.g. forceFullGc
(yeah, that belongs in a library);;;","2022-09-08 13:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10223
Date: 2022-09-08 20:26:41 +0000;;;","2022-09-12 06:29;dukebot;Changeset: 0c61bf10
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-09-12 13:26:15 +0000
URL:       https://git.openjdk.org/jdk/commit/0c61bf109f162621490df423c33f1bbc2c1524a0
;;;",,,,,,,,,,,,,,,,
[lw4] Code fixing access flags in old class files is incorrect and incomplete,JDK-8293253,5082691,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2022-09-01 13:00,2023-01-22 22:41,2023-10-01 09:56,2022-09-02 05:25,repo-valhalla,,,,,,,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"The VM is supposed to silently fix old class files lacking the ACC_SUPER/ACC_IDENTITY flag.

The current implementation has to issues:
  - regular classes are not fixed properly because the missing flag is added to a temporary variable and not propagated to the real access flags
  - inner classes are not fixed (their access flags are handled differently)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yfwr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-01 13:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/739
Date: 2022-09-01 20:11:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Shenandoah: ThreadMXBean synchronizer tests crash with aggressive heuristics,JDK-8293252,5082690,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asmehra,heidinga,heidinga,2022-09-01 12:47,2023-06-19 13:07,2023-10-01 09:56,2022-09-23 11:56,17,20,,,,,20,hotspot,,0,amazon-interest,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"Tests that failed are:

java/lang/management/ThreadMXBean/LockedSynchronizers.java
java/lang/management/ThreadMXBean/MyOwnSynchronizer.java
Frequency of failure is around 1/10.

Reason for the failure is the following assertion:

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/shenandoahBarrierSet.inline.hpp:246
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/gc/shenandoah/shenandoahBarrierSet.inline.hpp:246), pid=1427500, tid=1427517
#  Error: Shenandoah assert_not_in_cset failed; Object should not be in collection set

Referenced from:
  interior location: 0x00007fc020003280
  outside of Java heap
  0x00007fc020003280 points into unknown readable memory: 0x0000000000000000 | 00 00 00 00 00 00 00 00

Object:
  0x00000000d01b6840 - klass 0x0000000800215ed8 java.util.concurrent.locks.ReentrantLock$NonfairSync
    not allocated after mark start
    not after update watermark
        marked strong
    not marked weak
        in collection set
  mark: mark(is_neutral no_hash age=0)
  region: |    6|CS |BTE     d0180000,     d01bff00,     d01c0000|TAMS     d01bff00|UWM     d01bff00|U   255K|T   255K|G     0B|S     0B|L 49040B|CP   0

Forwardee:
  (the object itself)",,,,,,,,,,JDK-8310339,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yfwj:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-09-14 09:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10268
Date: 2022-09-14 16:04:03 +0000;;;","2022-09-21 13:04;asmehra;Updated the subject to remove reference to ""iu"" mode as the failure is seen in standard (satb) mode as well.;;;","2022-09-23 11:56;dukebot;Changeset: 3675f4c2
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2022-09-23 18:52:49 +0000
URL:       https://git.openjdk.org/jdk/commit/3675f4c2afd10b5042948fc79e62caee5f3874ce
;;;","2023-06-15 12:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1449
Date: 2023-06-15 18:16:52 +0000;;;","2023-06-15 15:29;wkemper;jdk17u fix request

Clean backport

Testing:
* hotspot_gc_shenandoah
* dacapo
* specjbb2015
* extremem
* hyperalloc;;;",,,,,,,,,,,,,,,,,,
 Fix race condition in pkcs11 SessionManager,JDK-8293232,5082669,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,valeriep,zzambers,zzambers,2022-09-01 10:26,2023-03-21 04:35,2023-10-01 09:56,2022-09-07 13:53,,,,,,,20,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-hard,,,,,,,,,,,,,"There is a race condition in JDK's SessionManager, which can lead to random exceptions.

Exception:
javax.net.ssl.SSLException: Internal error: close session with active objects
	at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:133)
	at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:371)
	at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:314)
	at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:309)
	at java.base/sun.security.ssl.SSLSocketImpl.handleException(SSLSocketImpl.java:1707)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1080)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:971)
	at SSLSocketServer.serverLoop(SSLSocketServer.java:133)
	at SSLSocketServer$1.run(SSLSocketServer.java:75)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.security.ProviderException: Internal error: close session with active objects
	at jdk.crypto.cryptoki/sun.security.pkcs11.Session.close(Session.java:127)
	at jdk.crypto.cryptoki/sun.security.pkcs11.Session.close(Session.java:114)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SessionManager.closeSession(SessionManager.java:237)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SessionManager$Pool.release(SessionManager.java:270)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SessionManager.demoteObjSession(SessionManager.java:210)
	at jdk.crypto.cryptoki/sun.security.pkcs11.Session.removeObject(Session.java:101)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SessionKeyRef.updateNativeKey(P11Key.java:1396)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SessionKeyRef.removeNativeKey(P11Key.java:1377)
	at jdk.crypto.cryptoki/sun.security.pkcs11.NativeKeyHolder.releaseKeyID(P11Key.java:1329)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11Key.releaseKeyID(P11Key.java:156)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11AEADCipher.reset(P11AEADCipher.java:529)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11AEADCipher.ensureInitialized(P11AEADCipher.java:436)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11AEADCipher.implDoFinal(P11AEADCipher.java:732)
	at jdk.crypto.cryptoki/sun.security.pkcs11.P11AEADCipher.engineDoFinal(P11AEADCipher.java:624)
	at java.base/javax.crypto.Cipher.doFinal(Cipher.java:2500)
	at java.base/sun.security.ssl.SSLCipher$T12GcmReadCipherGenerator$GcmReadCipher.decrypt(SSLCipher.java:1659)
	at java.base/sun.security.ssl.SSLSocketInputRecord.decodeInputRecord(SSLSocketInputRecord.java:260)
	at java.base/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:181)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)
	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1508)
	at java.base/sun.security.ssl.SSLSocketImpl.readApplicationRecord(SSLSocketImpl.java:1479)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1064)
	... 4 more

Reproducibility:
I started getting this exception quite reliably on JDK17 on my machine with one particular test setup using ssl-tests testsuite. Unfortunately setup itself needed some RH specific patches and also ability to reproduce depends on other factors such number keys in keystore, machine where testing was performed... I tried a bit to create some reproducer, but I couldn't find a way to easily reproduce this issue :(

Problem:
SunPKCS11 provider does session pooling. This is done in SessionManager [1] (one per SunPKCS11 provider). Released sessions are kept by SessionManager for a while, for reuse (in limited number). This however is a bit complicated as some sessions can own objects (e.g. keys). So there are actually 2 pools. One for sessions with objects (""objSessions"") and one for sessions without objects (""opSessions""). This is because sessions without objects, which are not being used, can be safely closed (SessionManager only keeps around limited amount of these), while sessions with objects cannot be safely closed (until all objects are removed from them). Session manager has methods for getting Session for given purpose (object creation or just doing other operations), prioritizing appropriate pool. Each session has counter (called ""createdObjects"") to track how many objects it owns. When session is being returned to pool this counter is checked and session is placed to appropriate pool. Also when counter for some Session in ""objSessions"" pool reaches zero it is moved (""demoted"") to ""opSessions"" pool.

And here comes complicated part. As far as I understand it, Session.addObject() [2] (which increases ""createdObjects"" counter) is always being called by thread ""holding"" session which owns the created object. (That is: thread gets a session, uses it to create an object and calls Session.addObject() on that session to increase the counter, before returning the session to pool. See e.g.: [3]) However this is not true for Session.removeObject() [4]. (That is: thread gets session, which is not necessary the same one owning object being removed, performs object removal, but then calls Session.removeObject() on session which owned that object. See e.g.: [5]) That is Session.removeObject() can be called on Session which is in ""objSessions"" pool or which is being used be other thread. (object removal can happen as result of releasing key, either explicitly or as result of GC etc..). 

And finally, there is a problem in code handling object removal from a session. Session.removeObject() [4] first checks if ""createdObjects"" counter reached zero. If so, it calls SessionManager.demoteObjSession(this) [6], which attempts to remove Session from objSessions pool, if session is successfully removed from there, meaning no other thread ""holds"" this session, session is put to opSessions pool, if not (meaning other thread ""holds"" it), method just returns, since that other thread puts this session to appropriate pool, when it is done with it by calling SessionManager.releaseSession(session).

There is race condition here. Consider following scenario:
// Thread T1 runs:
Session.removeObject() // [4]
createdObjects.decrementAndGet() // returns zero

// Thread T2 steps in (operating on the same session instance):
Session.addObject() // increases ""createdObjects"" counter [2]
SessionManager.releaseSession(session) // releases session to objSessions pool

// Thread T1 continues:
SessionManager.demoteObjSession(this) // [6]
objSessions.remove(session) // returns true
opSessions.release(session)  // puts session (with objects!) to opSessions pool
// if opSessions is already full, close of session with objects is attempted throwing Exception..

Fix:
SessionManager.demoteObjSession [6] method was changed, so that check for objects is done once again if session was successfully removed from ""objSessions"" pool (now that it is out of pool and other threads should not be adding objects to it). Based on this check session is either released to ""opSessions"" pool or returned to ""objSessions"" pool. This can be achieved by calling releaseSession(session) instead of opSessions.release(session).

Testing:
jdk_security tests passed for me locally with this change.
I have also tested this change on top of custom JDK17 build which allows scenario, where I can reproduce this issue. Problem got fixed.

[1] https://github.com/openjdk/jdk/blob/9444a081cc9873caa7b5c6a78df0d1aecda6e4f1/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/SessionManager.java
[2] https://github.com/openjdk/jdk/blob/9444a081cc9873caa7b5c6a78df0d1aecda6e4f1/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/Session.java#L93
[3] https://github.com/openjdk/jdk/blob/9444a081cc9873caa7b5c6a78df0d1aecda6e4f1/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Key.java#L1339
[4] https://github.com/openjdk/jdk/blob/9444a081cc9873caa7b5c6a78df0d1aecda6e4f1/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/Session.java#L98
[5] https://github.com/openjdk/jdk/blob/9444a081cc9873caa7b5c6a78df0d1aecda6e4f1/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Key.java#L1360
[6] https://github.com/openjdk/jdk/blob/9444a081cc9873caa7b5c6a78df0d1aecda6e4f1/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/SessionManager.java#L195",,,,,,,,,,JDK-8294736,JDK-8304652,JDK-8304058,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yfrv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-09-01 10:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10125
Date: 2022-09-01 17:28:40 +0000;;;","2022-09-07 13:53;dukebot;Changeset: 1e031e6a
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Valerie Peng <valeriep@openjdk.org>
Date:      2022-09-07 20:50:41 +0000
URL:       https://git.openjdk.org/jdk/commit/1e031e6a5886fba3009d8e5fa62416fe15a901b6
;;;","2022-09-21 04:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/705
Date: 2022-09-21 10:57:18 +0000;;;","2022-09-21 04:34;zzambers;Fix request (17u):

Race condition in pkcs11 SessionManager.
Clean backport, passed jdk_security tests. (should be low risk);;;","2023-03-09 05:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1797
Date: 2023-03-09 12:51:30 +0000;;;","2023-03-09 05:12;zzambers;Fix request (11u):

Race condition in pkcs11 SessionManager.
Clean backport, passed jdk_security tests. (should be low risk) ;;;","2023-03-15 08:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/288
Date: 2023-03-15 15:21:15 +0000;;;","2023-03-15 11:18;zzambers;Fix request (8u):

Race condition in pkcs11 SessionManager.
Clean backport (except for copyright date), jdk_security tests OK (no regressions; should be low risk);;;",,,,,,,,,,,,,,,
Microsoft toolchain selection picks 32-bit tools over 64-bit,JDK-8293219,5082655,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-09-01 07:47,2022-09-08 07:33,2023-10-01 09:56,2022-09-02 02:39,20,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,"The logic in toolchain_windows.m4 happens to prefer the 32-bit version of the tools. This is incorrect, since we only support building on 64-bit Windows.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yfor:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-09-01 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10121
Date: 2022-09-01 15:58:35 +0000;;;","2022-09-02 02:39;dukebot;Changeset: 46523b81
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-09-02 09:35:02 +0000
URL:       https://git.openjdk.org/jdk/commit/46523b817c8e62cd8979e6185635d3462c73048b
;;;",,,,,,,,,,,,,,,,,,,,,
"serviceability/tmtools/jstat/GcNewTest.java fails with ""Error in the percent calculation""",JDK-8293218,5082654,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,dcubed,dcubed,2022-09-01 07:28,2022-09-21 23:08,2023-10-01 09:56,2022-09-17 02:58,20,,,,,,20,core-svc,,0,problemlist,tier7,tier8,Xcomp,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

serviceability/tmtools/jstat/GcNewTest.java

Here's a snippet from the log file:

#section:main
----------messages:(5/313)----------
command: main -XX:+UsePerfData -Xmx128M GcNewTest
reason: User specified action: run main/othervm -XX:+UsePerfData -Xmx128M GcNewTest 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 56.948
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base                   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(7/669)----------
[2022-09-01T12:11:07.950252253Z] started process 2371387 [/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+13-823/linux-x64-debug.jdk/jdk-20/fastdebug/bin/jstat, -gcnew, 2371242] with out/err redirected to './out.12311963719972759977.txt' and './err.12311963719972759977.txt'
[2022-09-01T12:11:15.049856384Z] process 2371387 finished with exit code = 0
Process output: Exit code: 0
stdout:    S0C         S1C         S0U         S1U     TT MTT     DSS          EC           EU       YGC     YGCT   
        0.0         0.0         0.0         0.0 15  15         0.0      25600.0       4096.0      0     0.000
stderr:
Committed size of the pool 'Eden Space' is 25600
----------System.err:(12/914)----------
java.lang.RuntimeException: Error in the percent calculation (eden size: 25600, heap size: 17408, calculated eden percent: 1.4705882)
	at utils.GcProvoker.provokeGc(GcProvoker.java:66)
	at GcNewTest.main(GcNewTest.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Error in the percent calculation (eden size: 25600, heap size: 17408, calculated eden percent: 1.4705882)
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Error in the percent calculation (eden size: 25600, heap size: 17408, calculated eden percent: 1.4705882)
----------rerun:(48/8778)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293564,,,,JDK-8240882,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,os_x,,,,,,"0|i2yfoj:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2022-09-01 07:30;dcubed;serviceability/tmtools/jstat/GcNewTest.java also has a different
unresolved failure mode that is tracked by:

JDK-8240882 jstat/GcTest02.java failed due to ""RuntimeException: S1U > S1C (utilization > capacity)""
;;;","2022-09-01 13:00;cjplummer;There are also 2 sightings in ad-hoc jobs that date back as far as July 30th. They were also with tier7 and the above args. The test code is pretty simple:

            long edenSize = Pools.getEdenCommittedSize();
            long heapSize = Pools.getHeapCommittedSize();
            float targetPercent = ((float) edenSize) / (heapSize);
            if ((targetPercent < 0) || (targetPercent > 1.0)) {
                throw new RuntimeException(""Error in the percent calculation"" + "" (eden size: "" + edenSize + "", heap size: "" + heapSize + "", calculated eden percent: "" + targetPercent + "")"");
            }

And the output:

stdout:    S0C         S1C         S0U         S1U     TT MTT     DSS          EC           EU       YGC     YGCT   
        0.0         0.0         0.0         0.0 15  15         0.0      25600.0       4096.0      0     0.000
stderr:
Committed size of the pool 'Eden Space' is 25600
----------System.err:(12/914)----------
java.lang.RuntimeException: Error in the percent calculation (eden size: 25600, heap size: 17408, calculated eden percent: 1.4705882)

So the getEdenCommittedSize() result is bigger than the getHeapCommittedSize(). I wonder if it is just a timing issue, and the heap is changing between the two calls. One solution would be to just allow some retries when this failure happens. It seems to be so rare that probably no more than a couple should be necessary.;;;","2022-09-01 13:20;cjplummer;These failures and also the JDK-8240882 failures seem to have started after the sweeper was removed by JDK-8290025. The only exceptions are the July 30th failures, but those were in Erik's repo, so probably he was working on removing the sweeper at the time.

I would have thought removing the sweeper would have helped fix a bug like this, not cause it, because spurious GC done for codecache sweeping are what can cause a failure like this one. [~eosterlund] Are there still some spurious GCs going on here to help clear out the code cache?;;;","2022-09-01 14:12;eosterlund;The sweeper didn’t cause spurious GCs, unless loom is enabled, because the sweeper would manage to unload nmethods without a GC. After removing the sweeper, nmethod unloading is completely owned by the GC, and random GCs can heuristicslly trigger to deal with code cache pressure increasing. So it is expected that there will now be more random GCs compared to before.;;;","2022-09-01 14:17;cjplummer;Thanks [~eosterlund] I guess we'll need to make these tests more robust when faced with a spurious GC.;;;","2022-09-02 15:17;cjplummer;It looks like the issue is not a GC occurring between the getEdenCommittedSize() and getHeapCommittedSize(), but instead the heap being in an inconsistent state when the calls were made. I added a loop to retry up to 2 times when the error turns up, and it turned up on all 3 tries. I then added a 1 second sleep between tries, and the problem went away. Note in mach5 it seems to reproduce on every linux-x64 run with the specified options, but I could not reproduce it locally.

I'm a bit uncertain if my fix is appropriate, or if it is just masking a bug. getEdenCommittedSize() and getHeapCommittedSize() just end up calling MemoryPoolMXBean.getUsage().getCommitted(). The spec for MemoryPoolMXBean.getUsage() says:

""Returns an estimate of the memory usage of this memory pool...
...This method requests the Java virtual machine to make a best-effort estimate of the current memory usage of this memory pool.""

;;;","2022-09-08 04:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10218
Date: 2022-09-08 09:56:05 +0000;;;","2022-09-17 02:58;dukebot;Changeset: cfd44bb2
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-09-17 09:55:51 +0000
URL:       https://git.openjdk.org/jdk/commit/cfd44bb2cd4f2fdbfc15a7a76757a92c0a557439
;;;",,,,,,,,,,,,,,,
Library detection in runtime/ErrorHandling/TestDwarf.java fails on some systems,JDK-8293201,5082636,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-09-01 01:22,2023-03-10 06:58,2023-10-01 09:56,2022-09-01 07:18,20,,,,,,20,hotspot,,0,testbug,,,,,,,,,,,,,,,,,,,"This is observed in GHA after update to Ubuntu 22.04. 

```
[dwarf] ##### Find filename and line number for offset 0x00085ff1 in library /lib32/libc.so.6 #####
[dwarf] Failed to load DWARF file for library /lib32/libc.so.6 or find DWARF sections directly inside it.
#
# Compiler replay data is saved as:
# /home/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/scratch/replay_pid4906.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

hs_err_file: hs_err_pid4906.log
----------System.err:(16/999)----------
java.lang.RuntimeException: Must find library in ""C  [libc.so.6+0x85ff1]"": expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at TestDwarf.checkNoSourceLine(TestDwarf.java:181)
	at TestDwarf.runAndCheck(TestDwarf.java:153)
	at TestDwarf.test(TestDwarf.java:101)
	at TestDwarf.main(TestDwarf.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Must find library in ""C  [libc.so.6+0x85ff1]"": expected true, was false
JavaTest Message: shutting down test
```

The regexp that the test uses seems too broad.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293107,,,,,,,,JDK-8242181,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yfkj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-01 01:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10113
Date: 2022-09-01 08:32:17 +0000;;;","2022-09-01 07:18;dukebot;Changeset: 52045282
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-09-01 14:13:51 +0000
URL:       https://git.openjdk.org/jdk/commit/5204528296a53d7dc77e67b26be23a64692527fa
;;;","2023-03-10 05:27;mbaesken;We got a error in runtime/ErrorHandling/TestDwarf.java  after moving our Linux ppc64le tests to a newer machine (RHEL8.5).  Before the test worked , now we get this (looks a bit similar to JDK-8293201) :

[dwarf] ##### Find filename and line number for offset 0x000096a8 in library /lib64/glibc-hwcaps/power9/libpthread-2.28.so #####
[dwarf] Failed to load DWARF file for library /lib64/glibc-hwcaps/power9/libpthread-2.28.so or find DWARF sections directly inside it.

and in stderr 

java.lang.RuntimeException: Must find library in ""C  [libpthread-2.28.so+0x96a8]  start_thread+0xf8"": expected true, was false

Do we maybe need a regex adjustment too? Or is it more complicated ?;;;","2023-03-10 06:58;mbaesken;Looks like the '-'  in the lib name libpthread-2.28.so  is not allowed currently by the test.  This is wrong, a '-'  shows up rather often in lib names (just check your local /usr/lib64 on some distro and some examples show up).
I created  https://bugs.openjdk.org/browse/JDK-8303973  .
;;;",,,,,,,,,,,,,,,,,,,
[lworld] add missing tests for functional interfaces,JDK-8293183,5082611,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-08-31 12:01,2022-08-31 13:47,2023-10-01 09:56,2022-08-31 13:47,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"On section: 9.8 Functional Interfaces of [1] we have this assertion:

 * A functional interface is an interface that is not declared with one of the modifiers sealed, identity, or value...

but this should apply too to functional interfaces which are not explicitly declared with the `identity` modifier. So this code should not be accepted:

    identity interface I {
        void m();
    }

    @FunctionalInterface
    interface J extends I  {}

[1] http://cr.openjdk.java.net/~dlsmith/jep8277163/jep8277163-20220519/specs/value-objects-jls.html#jls-9.8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yfez:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-31 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/735
Date: 2022-08-31 19:33:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
JQuery UI license file not updated,JDK-8293180,5082606,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,hannesw,hannesw,2022-08-31 10:11,2023-08-18 11:57,2023-10-01 09:56,2022-09-05 08:50,19,,,,,,19.0.1,tools,,0,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,noreg-doc,,,,,,,,,,,,,,,,"JQuery UI in jdk.javadoc was recently updated to version 1.13.1 in JDK-8284367 but the following license file was not updated:

src/jdk.javadoc/share/legal/jqueryUI.md",,,,,,,,,,JDK-8314603,JDK-8293373,JDK-8293726,JDK-8312543,,,,,,,,,,,,,,,,JDK-8284367,,,,,,JDK-8293369,,JDK-8302161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yfdv:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-09-05 07:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/17
Date: 2022-09-05 14:53:08 +0000;;;","2022-09-05 08:50;dukebot;Changeset: c77b1e01
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2022-09-05 15:46:37 +0000
URL:       https://git.openjdk.org/jdk19u/commit/c77b1e01b507120abc47d9a2a9031e603478c08e
;;;","2022-09-05 10:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10172
Date: 2022-09-05 17:04:49 +0000;;;","2022-09-05 12:07;hannesw;Fix Request

This is a trivial fix to update the version string in a legal documentation file [1] referring to the third-party jQuery-UI library used in the jdk.javadoc module. The library was updated in JDK-8284367 for JDK 19. 

[1]: src/jdk.javadoc/share/legal/jqueryUI.md 

The change has no effect on program behavior and is not covered by any test. The change from JDK 20 applies cleanly to 19u.

Note: this is a retroactive fix request as the change was already integrated in 19u by mistake.;;;","2022-09-05 22:25;pmohan;[~hannesw]the fix has gone into 19.0.1 already looks like but why the fix version has been manually updated to reflect 20 again? There is already a backport record for JDK20.;;;","2022-09-06 00:41;hannesw;[~pmohan] I didn't realize there would be a backport issue created for 20. I set fix version for this issue back to 19.0.1.;;;","2023-07-20 17:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1583
Date: 2023-07-14 05:35:57 +0000;;;","2023-08-03 22:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2064
Date: 2023-08-04 05:21:05 +0000;;;",,,,,,,,,,,,,,,
Remove obsolete properties from javadoc resource file,JDK-8293178,5082603,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-08-31 09:43,2022-09-08 07:31,2023-10-01 09:56,2022-08-31 15:13,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,"JDK-8267126 provided a significant refactoring and renaming from the old javadoc `Messager` class to `JavadocLog`.

As a result, some resources properties became unused: specifically, those of the form `javadoc.*.msg` and `javadoc.*.pos.msg` as exemplified in this code that was deleted in the fix for JDK-8267126.

  private void report(DiagnosticType type, String pos, String msg) {
        switch (type) {
            case ERROR:
            case WARNING:
                Object prefix = (pos == null) ? programName : pos;
                report(javadocDiags.create(type, null, null, ""msg"", prefix, msg));
                break;

            case NOTE:
                String key = (pos == null) ? ""msg"" : ""pos.msg"";
                report(javadocDiags.create(type, null, null, key, pos, msg));
                break;

            default:
                throw new IllegalArgumentException(type.toString());
        }
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yfd7:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-08-31 09:46;jjg;Notes:

1. these properties are grandfathered into the special rules in CheckResourceKeys, which is why they have not been detected as unused to this point.   CheckResourceKeys needs to be updated as well.

2. experiments show that all tests continue to pass if the resources are removed, helping to confirm there are no additional usages.

3. these properties were used as the general framework/form of javadoc diagnostics; they are no longer used because we use the underlying javac system instead;;;","2022-08-31 11:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10105
Date: 2022-08-31 18:11:09 +0000;;;","2022-08-31 15:13;dukebot;Changeset: 6f297346
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-08-31 22:11:20 +0000
URL:       https://git.openjdk.org/jdk/commit/6f297346dc34f58d10c64a7bbe4e0f5b52ed33e3
;;;",,,,,,,,,,,,,,,,,,,,
Verify version numbers in legal files,JDK-8293177,5082602,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,jjg,jjg,2022-08-31 09:36,2023-07-25 23:56,2023-10-01 09:56,2022-11-29 06:47,19,,,,,,20,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,"There is currently a discrepancy in the version of some 3rd party libraries in actual use in the product, and the version recorded in the supporting files in the generated doc/legal directory.

We should write a test to verify that the versions match.

Ideally, this can be done just using info in the product image, but if necessary, we could fall back on using information in the source tree. That being said, version info and basic legal info is preserved in even minified JavaScript files.",,,,,,,,,,JDK-8312549,JDK-8313150,JDK-8312731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yfcz:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-11-17 06:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11211
Date: 2022-11-17 14:15:52 +0000;;;","2022-11-29 06:47;dukebot;Changeset: 69ede5ba
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2022-11-29 14:46:35 +0000
URL:       https://git.openjdk.org/jdk/commit/69ede5baeda6645aa3e961a02cbd40db965fc6a1
;;;","2023-07-24 04:13;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-07-24 04:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1620
Date: 2023-07-24 11:15:50 +0000;;;",,,,,,,,,,,,,,,,,,,
SSLEngine handshaker does not send an alert after a bad parameters,JDK-8293176,5082601,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,ascarpino,ascarpino,2022-08-31 09:22,2023-09-27 18:21,2023-10-01 09:56,2023-09-27 00:37,20,,,,,,22,security-libs,,0,,,,,,,,,,,,,,,,,,,,"The situation is the ClientHello, the client may use an EC key with bad parameters, this will generate a failure by the server.  

When using SSLEngine, it will not send an alert back to the client.  It correctly throws an exception during the unwrap() process of the CH and the follow-on wrap() in the catch to abort the connection do not send any data or TLS alert, they return ""NEED_UNWRAP"" as the server restarts the handshaker.

A failed crypto situation should have generated a TLS alert to bring down the connection instead of restarting the handshaker

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-08-03 22:42;djelinski;SSLEngineDecodeBadPoint.java;https://bugs.openjdk.org/secure/attachment/104999/SSLEngineDecodeBadPoint.java",,,,,,,,,,,,,,,,,,,,,,,"0|i2yfcr:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-08-31 09:31;ascarpino;There is no reproducible test, below is pseudo code
try {
  // SSLEngine back and forth wrap/unwrap opts..   Then on an unwrap failure...
}  catch (SSLException e) {
    while (...) {
        sslEngine.wrap()
        }
    }
}
---
javax.net.ssl.SSLException: Point does not match field size
at java.base/sun.security.ssl.SSLEngineImpl.getTaskThrown(SSLEngineImpl.java:985)
at java.base/sun.security.ssl.SSLEngineImpl.checkTaskThrown(SSLEngineImpl.java:957)
at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:448)
at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:433)
at java.base/javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:637)
    ...
Caused by: java.io.IOException: Point does not match field size
at java.base/sun.security.util.ECUtil.decodePoint(ECUtil.java:48)
at java.base/sun.security.ssl.JsseJce.decodePoint(JsseJce.java:365)
at java.base/sun.security.ssl.ECDHKeyExchange$ECDHECredentials.valueOf(ECDHKeyExchange.java:102)
at java.base/sun.security.ssl.NamedGroup$ECDHEScheme.decodeCredentials(NamedGroup.java:569)
at java.base/sun.security.ssl.NamedGroup$NamedGroupSpec.decodeCredentials(NamedGroup.java:501)
at java.base/sun.security.ssl.NamedGroup.decodeCredentials(NamedGroup.java:415)
at java.base/sun.security.ssl.KeyShareExtension$CHKeyShareConsumer.consume(KeyShareExtension.java:354)
at java.base/sun.security.ssl.SSLExtension.consumeOnLoad(SSLExtension.java:592)
at java.base/sun.security.ssl.SSLExtensions.consumeOnLoad(SSLExtensions.java:189)
at java.base/sun.security.ssl.ClientHello$T13ClientHelloConsumer.consume(ClientHello.java:1153)
at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.onClientHello(ClientHello.java:841)
at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.consume(ClientHello.java:802)
at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:392)
at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:443)
at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSL
EngineImpl.java:1074)
at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSL
EngineImpl.java:1061)
at java.base/java.security.AccessController.doPrivileged(Native Method)
at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask.run(SSLEngineImpl.java:
1008);;;","2023-08-03 23:10;djelinski;Attached an executable test for this.
There are 2 issues here:
- the specific one: processing an invalid key_share should abort the handshake with an alert; decode_error would probably be appropriate
- the general one: any exception thrown from a delegated task should abort the handshake.

Re the general one: SSLSocketImpl#startHandshake handles this case extensively; all IOExceptions except SocketExceptions and resumable InterruptedIOExceptions are translated to handshake_failure alert, and all RuntimeExceptions are translated to internal_error. SocketExceptions are rethrown unchanged. Perhaps we should have similar handling in SSLEngine.;;;","2023-08-04 01:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15148
Date: 2023-08-04 08:17:39 +0000;;;","2023-09-27 00:37;dukebot;Changeset: fee9d336
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-09-27 07:33:52 +0000
URL:       https://git.openjdk.org/jdk/commit/fee9d3362c76a046bb5160b90536545e7e9a5ce9
;;;",,,,,,,,,,,,,,,,,,,
[lworld] Folding of default value loads is broken,JDK-8293172,5082596,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2022-08-31 07:45,2022-09-01 05:29,2023-10-01 09:56,2022-09-01 05:29,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,c2,lworld,,,,,,,,,,,,,,,,,,"tkls->isa_inlinetype() in below test can never be true:

@@ -2059,11 +2055,11 @@ const Type* LoadNode::Value(PhaseGVN* phase) const {
       Node* base = AddPNode::Ideal_base_and_offset(adr, phase, offset);
       if (base != NULL && base->is_Load() && offset == in_bytes(InlineKlass::default_value_offset_offset())) {
         const TypeKlassPtr* tkls = phase->type(base->in(MemNode::Address))->isa_klassptr();
-        if (tkls != NULL && tkls->is_loaded() && tkls->klass_is_exact() && tkls->isa_inlinetype() &&
+        if (tkls != NULL && tkls->is_loaded() && tkls->klass_is_exact() && tkls->exact_klass()->is_inlinetype() &&
             tkls->offset() == in_bytes(InstanceKlass::adr_inlineklass_fixed_block_offset())) {
           assert(base->Opcode() == Op_LoadP, ""must load an oop from klass"");
           assert(Opcode() == Op_LoadI, ""must load an int from fixed block"");
-          return TypeInt::make(tkls->klass()->as_inline_klass()->default_value_offset());
+          return TypeInt::make(tkls->exact_klass()->as_inline_klass()->default_value_offset());
         }
       }
     }

We should add a corresponding IR verification test:

--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestIntrinsics.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestIntrinsics.java
@@ -468,6 +468,7 @@ public class TestIntrinsics {
     }
 
     @Test
+    @IR(failOn = IRNode.LOAD_I) // Load of the default value should be folded
     public Object test26() {
         Class<?>[] ca = new Class<?>[1];
         for (int i = 0; i < 1; ++i) {
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yfbn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-09-01 02:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/737
Date: 2022-09-01 09:48:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Minor typographical errors in JavaDoc javafx.scene.control.ScrollPane.java,JDK-8293171,5082595,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,webbuggrp,webbuggrp,2022-08-31 07:04,2022-11-29 06:09,2023-10-01 09:56,2022-09-06 08:09,jfx17,,,,,,jfx20,javafx,,0,noreg-doc,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Generic

A DESCRIPTION OF THE PROBLEM :
In two instances, the JavaDoc links for vertical properties link to the horizontal property

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Browse to https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/ScrollPane.html#setVmax-double-
Read the Property Description: ""The maximum allowable vvalue...""
Click on ""vvalue""


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Looking at vvalue documentation, i.e. https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/ScrollPane.html#vvalueProperty--
ACTUAL -
Looking at hvalue documentation, i.e. https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/ScrollPane.html#hvalueProperty--

CUSTOMER SUBMITTED WORKAROUND :
I have generated a pull request which can be viewed at: https://github.com/douglasheldoracle/jfx/pull/1/commits/10e7098158ee75fa36c9c19760072236f0ba6ef5

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yfbf:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-09-01 15:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/887
Date: 2022-08-31 14:19:03 +0000;;;","2022-09-02 11:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/890
Date: 2022-09-02 18:39:42 +0000;;;","2022-09-06 08:09;dukebot;Changeset: 160be032
Author:    Douglas Held <doug.held@oracle.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-09-06 15:04:47 +0000
URL:       https://git.openjdk.org/jfx/commit/160be032a5f06968934204bc5223751bd82dba5b
;;;",,,,,,,,,,,,,,,,,,,,
[TESTBUG] Tests fail to compile : package jdk.test.lib does not exist,JDK-8293168,5082591,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kks,jcherian,jcherian,2022-08-31 04:28,2022-10-04 15:05,2023-10-01 09:56,2022-09-01 07:20,11.0.18-oracle,,,,,,11.0.18-oracle,security-libs,,0,jdk11u-na,,,,,,,,,,,,,,,,,,,"Here is the log from the CI pipeline

'C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-11.0.18+1-61\\src.full\\open\\test\\jdk\\sun\\security\\krb5\\auto\\tools\\KinitConfPlusProps.java'
----------direct:(319/32416)*----------
C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-11.0.18+1-61\\src.full\\open\\test\\jdk\\sun\\security\\krb5\\auto\\KDC.java:24: error: package jdk.test.lib does not exist
import jdk.test.lib.Platform;

....

C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-11.0.18+1-61\\src.full\\open\\test\\jdk\\sun\\security\\krb5\\auto\\KDC.java:1820: error: cannot find symbol
                    Platform.sharedLibraryPathVariableName(), nativePath + ""/lib"");
                    ^
  symbol:   variable Platform
  location: class Heimdal
C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-11.0.18+1-61\\src.full\\open\\test\\jdk\\sun\\security\\krb5\\auto\\KDC.java:1912: error: cannot find symbol
                    Platform.sharedLibraryPathVariableName(), nativePath + ""/lib"");
                    ^
  symbol:   variable Platform
  location: class MIT
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-11.0.18+1-61\\src.full\\open\\test\\jdk\\sun\\security\\krb5\\auto\\KDC.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
3 errors
100 warnings
result: Failed. Compilation failed: Compilation failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8216265,,,,,,,,,,,,,,,x86_64,,,,,,,,,,,,,,,,"0|i2yfaj:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-09-16 03:43;goetz;[11u-na]
I assume there was an error in the downport of 8216265 to 11.0.18-oracle which is fixed by this.
So not applicable to OpenJDK.;;;",,,,,,,,,,,,,,,,,,,,,,
Memory leak in JfrThreadSampler if stackdepth is larger than default (64),JDK-8293167,5082590,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,jbachorik,jbachorik,2022-08-31 04:13,2022-09-08 07:33,2023-10-01 09:56,2022-09-05 02:14,18,19,20,,,,20,hotspot,,0,datadog-interest,,,,,,,,,,,,,,,,,,,"Datadog is using JFR as the backbone of its continuous Java profiler.

Recently we have received the following bug report:
```
We use the latest Datadog Java Tracer (fetched from https://dtdg.co/latest-java-tracer) included in our Java/SpringBoot application using the following JVM parameters

-javaagent:/opt/dd-java-agent.jar 
-Ddd.profiling.enabled=true 
-XX:FlightRecorderOptions=stackdepth=256 
-Ddd.logs.injection=true 
-Ddd.trace.sample.rate=1
java -version
openjdk version ""18.0.2"" 2022-07-19
OpenJDK Runtime Environment (build 18.0.2+9-61)
OpenJDK 64-Bit Server VM (build 18.0.2+9-61, mixed mode, sharing)
The application is running within a Docker container in AWS Elastic Beanstalk.

We observed, that docker.mem.rss is continuously increasing over time, whereas jvm.heap_memory and jvm.non_heap_memory stay constant (after ~1d of 'warm-up' period). After ~10-15 days, the container RSS reaches a configured memory limit and the container is killed and restarted.

Further investigation (using java native memory tracking) revealed, that it is the off-heap memory area called 'Tracing' that gets bigger and bigger over time. We observed up to ~130MB of allocated memory in that area after ~10 days.

With -Ddd.profiling.enabled=false the problem does not occur ('Tracing' memory stays constant at 32KB).

In the Datadog Agents (v7.38.2, Docker) logs we see no obvious problems (except lots of CPU threshold exceeded warnings).

What can we do to prevent this 'Tracing' memory leak with activated profiling?
```
(https://github.com/DataDog/dd-trace-java/issues/3778)

From the described symptoms it looks like something is leaking in the mtTracing arena. A brief scan of the sources shows that JFR is using this arena in several places - and since the issue goes away when JFR is not enabled (recording is not active, to be precise) it is quite a safe guess that this would be happening somewhere in JFR.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293355,,,,JDK-8274298,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yfab:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-09-01 13:30;mgronlun;Leaky allocation site:

[0x00007ff81a7dbde8] JfrCHeapObj::new_array<unsigned char>+0x18  (jfrAllocation.hpp:67)
[0x00007ff81a84eb29] JfrMemorySpace<JfrEpochStorageHost<JfrBuffer,JfrMspaceRemoveRetrieval,0>,JfrMspaceRemoveRetrieval,JfrConcurrentQueue<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,1>::allocate+0x49  (jfrMemorySpace.inline.hpp:223)
[0x00007ff81a84e09d] mspace_allocate<JfrMemorySpace<JfrEpochStorageHost<JfrBuffer,JfrMspaceRemoveRetrieval,0>,JfrMspaceRemoveRetrieval,JfrConcurrentQueue<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,1> >+0x1d  (jfrMemorySpace.inline.hpp:323)
[0x00007ff81a84e0d2] mspace_allocate_acquired<JfrMemorySpace<JfrEpochStorageHost<JfrBuffer,JfrMspaceRemoveRetrieval,0>,JfrMspaceRemoveRetrieval,JfrConcurrentQueue<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,1> >+0x22  (jfrMemorySpace.inline.hpp:327)
[0x00007ff81a84e127] mspace_allocate_to_live_list<JfrMemorySpace<JfrEpochStorageHost<JfrBuffer,JfrMspaceRemoveRetrieval,0>,JfrMspaceRemoveRetrieval,JfrConcurrentQueue<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,1> >+0x27  (jfrMemorySpace.inline.hpp:379)
[0x00007ff81a84e07b] mspace_acquire_to_live_list<JfrMemorySpace<JfrEpochStorageHost<JfrBuffer,JfrMspaceRemoveRetrieval,0>,JfrMspaceRemoveRetrieval,JfrConcurrentQueue<JfrBuffer,JfrCHeapObj>,JfrLinkedList<JfrBuffer,JfrCHeapObj>,1> >+0x6b  (jfrMemorySpace.inline.hpp:425)
[0x00007ff81a84ea4e] JfrEpochStorageHost<JfrBuffer,JfrMspaceRemoveRetrieval,0>::acquire+0x2e  (jfrEpochStorage.inline.hpp:53)
[0x00007ff81a84f4cc] JfrEpochQueue<JfrEpochQueueKlassPolicy>::renew+0x8c  (jfrEpochQueue.inline.hpp:56)
[0x00007ff81a84d21b] JfrTraceIdKlassQueue::renew_enqueue_buffer+0x2b  (jfrTraceIdKlassQueue.cpp:256)
[0x00007ff81a84fbc5] JfrTraceIdLoadBarrier::renew_enqueue_buffer+0x25  (jfrTraceIdLoadBarrier.cpp:78)
[0x00007ff81a8494de] JfrThreadSampler::renew_if_full+0x6e  (jfrThreadSampler.cpp:539)
[0x00007ff81a8499f1] JfrThreadSampler::task_stacktrace+0x2c1  (jfrThreadSampler.cpp:586)
[0x00007ff81a84a06b] JfrThreadSampler::run+0x21b  (jfrThreadSampler.cpp:518)
[0x00007ff81ae237bc] Thread::call_run+0x15c  (thread.cpp:363)
[0x00007ff81ac65177] thread_native_entry+0xe7  (os_windows.cpp:544)
[0x00007ff8be611bb2]
[0x00007ff8bf447034]
[0x00007ff8c0d82651]
                             (malloc=401KB type=Tracing +376KB #99 +93)

Problem description:
JDK-8274298 introduced a specialized mechanism to pre-emptively renew the enqueue buffer used by the JfrThreadSampler thread. It cannot use the same lazy renewal scheme as other threads because it cannot take the malloc lock once it has suspended another thread (that thread could hold it). Because it cannot grow dynamically, it needs to ensure a large enough buffer is pre-allocated.

The specialized mechanism uses the same underlying memory space as the lazy renewal scheme, but because of the pre-allocation, the buffer size requested becomes a function of the current stackdepth.

The problem does not exist in the default case (default stackdepth=64); there is no memory leak. However, the memory leak manifests if the stackdepth is larger than the default. Here is why:

JfrThreadSampler has two fields:
  _min_size(JfrOptionSet::stackdepth() * sizeof(intptr_t)),
  _renew_size(_min_size * 2),
  ...
 
In the default case, the stackdepth is 64, so _min_size is 64 * 8 = 512 bytes.
_renew_size is 512 bytes * 2 = 1024 bytes. The underlying memory space used for the enqueue buffers has a _min_element_size of 1024.

On buffer renewal, the following code attempts to fetch a free buffer from a free list or to allocate a new one using malloc:

template <typename Mspace>
inline typename Mspace::NodePtr mspace_acquire_to_live_list(size_t size, Mspace* mspace, Thread* thread, bool previous_epoch = false) {
  if (size <= mspace->min_element_size()) {
    typename Mspace::NodePtr node = mspace_acquire_free_to_live_list(size, mspace, thread, previous_epoch);
    if (node != NULL) {
      return node;
    }
  }
  return mspace_allocate_to_live_list(size, mspace, thread);
}

The branch for accessing the free list is conditional on the requested size. By default, the requested size is 1024, the same as the mspace->min_element_size() and buffer renewal is against the free list, and all is well.

If the stackdepth parameter is set larger than the default, for example, 256, we get the following situation:
...
  _min_size(JfrOptionSet::stackdepth() * sizeof(intptr_t)),
  _renew_size(_min_size * 2),
  ...

The stackdepth is 256, so _min_size is 256 * 8 = 2048 bytes.
_renew_size is 2048 bytes * 2 = 4096 bytes. The underlying memory space for the enqueue buffers still has a _min_element_size of 1024.

Hence, the size evaluation for taking a new buffer from the free list evaluates to false without fail, with renewals invariantly taking the malloc() path even though there are buffers on the free list that can accommodate the requested size. Since, after processing, full buffers are moved onto the free list, there is a steady growth of buffers continuously building on the free list.

Fix:
A specialized mspace, tailored for and used only by the JfrThreadSampler, will be added to accommodate a buffer size that is a function of the stackdepth while retaining free list use as designed. The mspace->min_element_size() will match those larger buffer size requests by the JfrThreadSampler.
;;;","2022-09-01 14:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10129
Date: 2022-09-01 20:40:08 +0000;;;","2022-09-05 02:14;dukebot;Changeset: 48b3ab02
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-09-05 09:13:07 +0000
URL:       https://git.openjdk.org/jdk/commit/48b3ab02f9339f97e49f775c9d5d3a598a158abf
;;;",,,,,,,,,,,,,,,,,,,,
jdk/jfr/jvm/TestDumpOnCrash.java fails on Linux ppc64le and Linux aarch64,JDK-8293166,5082589,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rschmelter,mbaesken,mbaesken,2022-08-31 03:03,2023-08-18 11:01,2023-10-01 09:56,2022-11-14 23:37,20,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"Since ~ 25th August we see the test TestDumpOnCrash.java failing on Linux ppc64le and  Linux aarch64.
It reports the following :

Attempt 0. Verification failed:
File length 0. Should at least be some bytes: expected 0 to not equal 0
Retrying...

Attempt 1. Verification failed:
File length 0. Should at least be some bytes: expected 0 to not equal 0
Retrying...

Attempt 2. Verification failed:
File length 0. Should at least be some bytes: expected 0 to not equal 0
Retrying...

java.lang.Exception: 3 attempts with failure!
	at jdk.jfr.jvm.TestDumpOnCrash.test(TestDumpOnCrash.java:118)
	at jdk.jfr.jvm.TestDumpOnCrash.main(TestDumpOnCrash.java:79)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

So 3 times an ""evacuation"" file of 0 bytes is reported .

The test ""generates"" crashes when trying to test the jfr ""evacuation"".
But in these crashes I notice  timeouts like these :

[thread 76208 also had an error]

------ Timeout during error reporting after 120 s. ------
# [ timer expired, abort... ]


Is it maybe related to 8242181: [Linux] Show source information when printing native stack  ?
That might change the crashing behavior in Linux ?  
Should the timeouts be increased somehow for this test ?

The test machines showing the issue are based on SuSE SLES15 and  RedHat 8 so the kernel should be not that old.
",,,,,,,,,,JDK-8314596,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306065,,,,JDK-8297142,,,,,,,,,,,,,,,aarch64,ppc,,,,,,,,linux,,,,,,,"0|i2yfa3:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-09-19 01:12;mbaesken;Looks more and more like a timing issue, but no final results yet from analysis.;;;","2022-10-10 06:19;rschmelter;The test fails on ppc64le and aarch64 because of the following events:
- The test triggers a crash.
- In the error handler we replace the current signal handlers by new ones, which don't handle 'expected' signals from compiled code.
- The ""JFR Periodic Task"" thread wakes up in parallel and writes the periodic events. The code calls the jdk.jfr.internal.event.EventWriter.putUncheckedLong() method.
- The putUncheckedLong() was called often enough to go from tier1 to tier2. The code for ppc and aarch64 forces this by patching a trap instruction into the verified entry point of the lower tier method.
- The ""JFR Periodic Event"" then triggers the trap and goes to the secondary signal handler, which prints a message and goes to an endless sleep. This leaves the thread in the ""in_Java"" state.
- A periodic safepoint is requested from the VM thread. This happens every second by default, if no explicit safepoint is triggered in between.
- Jfr::on_vm_shutdown(true) is called in the crash handler of the original thread. It should trigger the emergency dump of the JFR data. This code calls JfrMetadataEvent::write() eventuallly.
- In JfrMetadataEvent::write() the code uses ThreadInVMfromNative to make a transition from native to in_vm. This checks if a safepoint is pending and if yes, waits until that safepoint is finished.
- The VM thread waits until all threads are either blocked or in native, so the safepoint can be executed. But since the ""JFR Periodic Task"" thread has crashed and was ""in_Java"", this never happens.
- The watcher thread triggers the 120 seconds timeout for the crash handling and terminates the VM, without the emergency dump being written.

Disabling tiered compilation for the test avoids the traps in the code and lets the test work (at least on ppc, where I tested it). While certainly not bulletproof it seems to be good enough from a practical standpoint, given that the test has run reliably before.

The reason this happens just lately seems to be a timing issue. The fix for https://bugs.openjdk.org/browse/JDK-8242181 made printing the stack trace slower on Linux, so the emergency dump was triggered later, when the periodic task has already crashed and the periodic safepoint was active. Just adding a short sleep to the Decoder::get_source_info() method in would trigger the problem, even without the change from JDK-8242181.
;;;","2022-11-02 01:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10943
Date: 2022-11-02 08:35:42 +0000;;;","2022-11-14 23:37;dukebot;Changeset: 5551cb66
Author:    Ralf Schmelter <rschmelter@openjdk.org>
Date:      2022-11-15 07:34:49 +0000
URL:       https://git.openjdk.org/jdk/commit/5551cb66ba58cadce7291a95c5af662ade2cb7b8
;;;","2023-07-04 09:35;rschmelter;Fix request 17u

The risk of the fix is very low, since it only fixes a test problem on certain platforms, where a signal could be send from compiled code during error reporting. The change was tested during the SAP jdk17u nightly tests running tier1, tier2 and tier3 tests.
;;;","2023-07-18 01:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1594
Date: 2023-07-18 08:06:42 +0000;;;",,,,,,,,,,,,,,,,,
Drop support for VS2017,JDK-8293162,5082584,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-08-31 02:23,2022-09-08 07:31,2023-10-01 09:56,2022-08-31 15:10,20,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,The time has come to retire support for Visual Studio 2017.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yf8z:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-08-31 08:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10100
Date: 2022-08-31 15:11:10 +0000;;;","2022-08-31 15:10;dukebot;Changeset: dd541530
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-08-31 22:07:30 +0000
URL:       https://git.openjdk.org/jdk/commit/dd5415309a9235c4e7ced84890457fe7c11c4e96
;;;",,,,,,,,,,,,,,,,,,,,,
Dcmd VM.classloaders fails to print the full hierarchy,JDK-8293156,5082578,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,dholmes,dholmes,2022-08-31 00:13,2023-09-28 07:04,2023-10-01 09:56,2022-09-21 10:09,11,17,20,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"There is a bug in the VM.classloaders Dcmd whereby it assumes all loaders in the parent chain must have an associated CLD, which is not true if the loader has never defined a class itself. This causes the hierarchy printing to cease at the last ancestor that does have a CLD. There is this code:

https://github.com/openjdk/jdk/blob/master/src/hotspot/share/classfile/classLoaderHierarchyDCmd.cpp#L162

void print_with_childs(outputStream* st, BranchTracker& branchtracker,
      bool print_classes, bool verbose) const {

    ResourceMark rm;

    if (_cld == NULL) {
      // Not sure how this could happen: we added a preliminary node for a parent but then never encountered
      // its CLD?
      return;
    }

But the cld will be null if this loader never defined a class itself.

Here is a test program:

TestClass.java

public class TestClass {
    public static void run() {
        System.out.println(""Running in loader "" + TestClass.class.getClassLoader());
        try {
            Thread.sleep(60000);
        }
        catch (InterruptedException ex) {}
    }
}

compile it into a classes/subdirectory. Then here is the main program:

Main.java

import java.lang.reflect.*;
import java.io.*;

public class Main {

    static class DelegatingLoader extends ClassLoader {
        final String name;
        DelegatingLoader(ClassLoader parent, String name) {
            super(parent);
            this.name = name;
        }
        public String toString() {
            return ""Loader "" + name + "" with parent: "" + getParent();
        }
    }

    static class LocalLoader extends DelegatingLoader {
        LocalLoader(ClassLoader parent, String name) {
            super(parent, name);
        }

       protected Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
         if (name.startsWith(""Test"")) {
           synchronized (getClassLoadingLock(name)) {
             Class<?> c = findLoadedClass(name);
             if (c==null) c = findClass(name);
             if (resolve) resolveClass(c);
             return c;
           }
         } else {
             return super.loadClass(name,resolve);
         }
       }

       protected Class<?> findClass(String name) throws ClassNotFoundException {
        String path = name.replace('.','/').concat("".class"");
        String filename =  ""classes"" + File.separator + path;
        try {
            FileInputStream in = new FileInputStream(filename);
            byte[] bytes = new byte[in.available()];
            in.read(bytes);
            in.close();
            return defineClass(name,bytes,0,bytes.length);
        } catch (IOException e) {
            throw new ClassNotFoundException(name,e);
        }
      }
    }

    public static void main(String[] args) throws Throwable {
        ClassLoader ccl = Main.class.getClassLoader();
        DelegatingLoader l1 = new DelegatingLoader(ccl, ""L1"");
        DelegatingLoader l2 = new DelegatingLoader(l1, ""L2"");

        LocalLoader l3 = new LocalLoader(args.length == 0 ? l2 : ccl, ""L3"");

        Class<?> c = Class.forName(""TestClass"", true, l3);
        Method m = c.getDeclaredMethod(""run"", new Class[] { });
        m.invoke(null, new Object[] {});
    }
}

If we run the test with an argument and then run VM.classloaders we see the expected:

> Running in loader Loader L3 with parent: jdk.internal.loader.ClassLoaders$AppClassLoader@30946e09

jcmd20 17253 VM.classloaders verbose=true fold=false
17253:
+-- <bootstrap>
      |     
      |            Loader Oop: 0x0000000000000000
      |           Loader Data: 0x00007f4f20135100
      |          Loader Klass: 0x0000000000000000
      |     
      +-- ""platform"", jdk.internal.loader.ClassLoaders$PlatformClassLoader
            |     
            |            Loader Oop: 0x00000007ff758890
            |           Loader Data: 0x00007f4f2014e9e0
            |          Loader Klass: 0x0000000800096698
            |     
            +-- ""app"", jdk.internal.loader.ClassLoaders$AppClassLoader
                  |     
                  |            Loader Oop: 0x00000007ff758fb0
                  |           Loader Data: 0x00007f4f20292020
                  |          Loader Klass: 0x0000000800095d68
                  |     
                  +-- Main$LocalLoader
                              
                                     Loader Oop: 0x00000004540208c0
                                    Loader Data: 0x00007f4f202c0610
                                   Loader Klass: 0x0000000801000cf8


but if we run with no args so that the purely delegating loader is inserted into the hierarchy we see:

> Running in loader Loader L3 with parent: Loader L2 with parent: Loader L1 with parent: jdk.internal.loader.ClassLoaders$AppClassLoader@30946e09
> jcmd20 16903 VM.classloaders verbose=true fold=false
16903:
+-- <bootstrap>
      |     
      |            Loader Oop: 0x0000000000000000
      |           Loader Data: 0x00007f1018135100
      |          Loader Klass: 0x0000000000000000
      |     
      +-- ""platform"", jdk.internal.loader.ClassLoaders$PlatformClassLoader
            |     
            |            Loader Oop: 0x00000007ff758890
            |           Loader Data: 0x00007f101814e9e0
            |          Loader Klass: 0x0000000800096698
            |     
            +-- ""app"", jdk.internal.loader.ClassLoaders$AppClassLoader
                  |     
                  |            Loader Oop: 0x00000007ff758fb0
                  |           Loader Data: 0x00007f101828a130
                  |          Loader Klass: 0x0000000800095d68
                  |     

and the report terminates with the ""app"" loader.",,,,,,,,,,JDK-8294334,JDK-8317249,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287616,,,,,,,,,,,,,,,,,,,,,,,,,,11,,,,,,,,,"0|i2yf7n:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-08-31 00:20;dholmes;This seems a day one bug with this feature as it reproduces in JDK 11 through to today.

Assigning to [~stuefe] for evaluation.;;;","2022-09-16 08:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10312
Date: 2022-09-16 14:55:42 +0000;;;","2022-09-21 00:50;dholmes;I fixed the copy'n'paste error in the description - the content of TestClass.java was missing;;;","2022-09-21 10:09;dukebot;Changeset: c6be2cd3
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-09-21 17:07:41 +0000
URL:       https://git.openjdk.org/jdk/commit/c6be2cd347fc07dcc0da56acf40fc7a005119f09
;;;","2023-09-27 07:13;goetz;Fix request [17u]

A nice-to have fix in 17.
Low risk, touches servicability coding.
Trivial resolve due to context.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-09-27 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1804
Date: 2023-09-27 14:11:42 +0000;;;",,,,,,,,,,,,,,,,,
TemporalQueries java doc error,JDK-8293154,5082477,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2022-08-29 23:06,2022-09-08 07:32,2023-10-01 09:56,2022-09-01 08:50,11,17,18,19,20,8,20,core-libs,,0,dcsaw,noreg-doc,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
class: TemporalQueries
method: localDate localTime
problem: the java doc of these two methods is not correct, it is not ""ZoneOffset.from(TemporalAccessor) "", plz check this out


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yel7:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,,,"2022-08-30 20:52;tongwan;The following javadoc contains the same context:
https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalQueries.html#localDate--
https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/temporal/TemporalQueries.html#localTime()
https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/temporal/TemporalQueries.html#localTime()
https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/time/temporal/TemporalQueries.html#localDate()
https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/time/temporal/TemporalQueries.html#localDate()
https://download.java.net/java/early_access/jdk20/docs/api/java.base/java/time/temporal/TemporalQueries.html#localDate();;;","2022-08-31 10:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10103
Date: 2022-08-31 17:08:28 +0000;;;","2022-09-01 08:50;dukebot;Changeset: 6a1b0b56
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-09-01 15:46:45 +0000
URL:       https://git.openjdk.org/jdk/commit/6a1b0b5649dd4f2a970df0839bf77bdb899fbd6f
;;;",,,,,,,,,,,,,,,,,,,,
Strict DateTimeFormatter fails to report an invalid week 53,JDK-8293146,5082442,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2022-08-29 09:45,2023-02-01 07:41,2023-10-01 09:56,2022-09-07 11:37,11,17,18,19,20,8,20,core-libs,,0,20ea,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
macOS Sierra 10.12.6
openjdk 20-ea 2023-03-21
OpenJDK Runtime Environment (build 20-ea+12-790)
OpenJDK 64-Bit Server VM (build 20-ea+12-790, mixed mode, sharing)
SHELL=/bin/bash
HOSTTYPE=x86_64
OSTYPE=darwin16
MACHTYPE=x86_64-apple-darwin16

The same undesired and unexpected behaviour has also been observed on Java 8, Java 11 and Java 17.

A DESCRIPTION OF THE PROBLEM :
We are using a DateTimeFormatter for parsing week-based-year and week number. Using resolver style ResolverStyle.STRICT. Trying to parse week number 53 in a week-based year having only 52 weeks.
Expected and desired behaviour: Since the week number is invalid, Java should throw a DateTimeParseException.
Observed behaviour: Java parses as though the string had said week 52.

The undesired behaviour is observed both with ISO and non-ISO week schemes, in fact with all available locales in Java 17.
This bug report comes out of the following Stack Overflow question: https://stackoverflow.com/questions/73498610/java-week-to-date-conversion-for-us-calendar-non-iso8601

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile and run the included Java program.
Also online here: https://rextester.com/NIDEB77126


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
DateTimeParseException from the line LocalDate date = LocalDate.parse(weekDateString, localizedWeekDateFormatter);
ACTUAL -
Locale:         it_CH
Week fields:    WeekFields[MONDAY,4]
String:         2022.53.1
Parsed:         2022-12-26
Formatted back: 2022.52.1

Locale:         en_SL
Week fields:    WeekFields[MONDAY,1]
String:         2022.53.1
Parsed:         2022-12-19
Formatted back: 2022.52.1

Locale:         teo_KE
Week fields:    WeekFields[SUNDAY,1]
String:         2021.53.1
Parsed:         2021-12-19
Formatted back: 2021.52.1

As expected: java.time.format.DateTimeParseException: Text '2021-W53-1' could not be parsed: Invalid value for WeekOfWeekBasedYear (valid values 1 - 52): 53

---------- BEGIN SOURCE ----------
import java.util.Locale;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.format.ResolverStyle;
import java.time.temporal.WeekFields;

class Rextester
{  
    public static void main(String args[])
    {
		// ISO weeks locale
		Locale iso = Locale.forLanguageTag(""it-CH"");
		testAndPrint(iso, ""2022.53.1"");

		// Non-ISO weeks locale
		Locale nonIso = Locale.forLanguageTag(""en-SL"");
		testAndPrint(nonIso, ""2022.53.1"");

		// Another non-ISO weeks locale
		Locale anotherNonIso = Locale.forLanguageTag(""teo-KE"");
		testAndPrint(anotherNonIso, ""2021.53.1"");
		
		try {
			// The following line gives the expected exception
			// java.time.format.DateTimeParseException: Text '2021-W53-1' could not be parsed: Invalid value for WeekOfWeekBasedYear (valid values 1 - 52): 53
			LocalDate.parse(""2021-W53-1"", DateTimeFormatter.ISO_WEEK_DATE);
		} catch (DateTimeParseException dtpe) {
			System.out.println(""As expected: "" + dtpe);
		}
    }

	private static void testAndPrint(Locale localeInQuestion, String weekDateString) {
		DateTimeFormatter localizedWeekDateFormatter 
				= DateTimeFormatter.ofPattern(""YYYY.ww.e"", localeInQuestion)
						.withResolverStyle(ResolverStyle.STRICT);
		// We are expecting a DateTimeParseException from the following line but not getting any.
		LocalDate date = LocalDate.parse(weekDateString, localizedWeekDateFormatter);
		
		System.out.format(""Locale:         %s%n"", localeInQuestion);
		System.out.format(""Week fields:    %s%n"", WeekFields.of(localeInQuestion));
		System.out.format(""String:         %s%n"", weekDateString);
		System.out.format(""Parsed:         %s%n"", date);
		System.out.format(""Formatted back: %s%n"", date.format(localizedWeekDateFormatter));
		System.out.println();
	}

}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
One may format the obtained date back into a string and compare with the string originally parsed. If they differ, the string did not represent the date parsed. Then throw the desired exception (or take other desired action).

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-08-30 20:29;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/100619/Main.java",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yedf:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,Verified,,"2022-08-30 20:32;tongwan;The observations on Windows 10:
JDK 8: Failed, DateTimeParseException observed.
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+32: Failed.
JDK 20ea+4: Failed.;;;","2022-08-31 15:09;naoto;While `DateTimeFormatter.ISO_WEEK_DATE` calls `resolve()` method in `IsoFields.WEEK_OF_WEEK_BASED_YEAR` where it correctly validates 52/53 max value, `DateTimeFormatter.ofPattern(...)` uses `WeekFields.weekOfWeekBasedYear()` where it simply compares the parsed week with max value (=53) which is inconsistent with `IsoFields`.;;;","2022-08-31 17:06;naoto;Using `WeekFields` instead of `IsoFields` may be OK, because Iso restricts firstDayOfWeek and minimalDaysInFirstWeek to Mon/4. So DTF.ofPattern() may result in different fdow/mdfw.
However, still WeekFields' maximum week handling seems incorrect, as in:
```
jshell> var f = DateTimeFormatter.ofPattern(""YYYY-'W'ww-e"", Locale.UK).withResolverStyle(ResolverStyle.STRICT)
f ==> Localized(WeekBasedYear,4,19,EXCEEDS_PAD)'-''W'Lo ... )'-'Localized(DayOfWeek,1)

jshell> LocalDate.parse(""2021-W52-1"", f)
$193 ==> 2021-12-27

jshell> LocalDate.parse(""2021-W53-1"", f)
$194 ==> 2021-12-27
```
whereas
```
jshell> LocalDate.parse(""2021-W52-1"", DateTimeFormatter.ISO_WEEK_DATE)
$195 ==> 2021-12-27

jshell> LocalDate.parse(""2021-W53-1"", DateTimeFormatter.ISO_WEEK_DATE)
|  Exception java.time.format.DateTimeParseException: Text '2021-W53-1' could not be parsed: Invalid value for WeekOfWeekBasedYear (valid values 1 - 52): 53
|        at DateTimeFormatter.createError (DateTimeFormatter.java:2023)
|        at DateTimeFormatter.parse (DateTimeFormatter.java:1958)
|        at LocalDate.parse (LocalDate.java:430)
|        at (#196:1)
|  Caused by: java.time.DateTimeException: Invalid value for WeekOfWeekBasedYear (valid values 1 - 52): 53
|        at ValueRange.checkValidValue (ValueRange.java:319)
|        at IsoFields$Field$3.resolve (IsoFields.java:504)
|        at IsoFields$Field$3.resolve (IsoFields.java:429)
|        at Parsed.resolveFields (Parsed.java:283)
|        at Parsed.resolve (Parsed.java:259)
|        at DateTimeParseContext.toResolved (DateTimeParseContext.java:331)
|        at DateTimeFormatter.parseResolved0 (DateTimeFormatter.java:2058)
|        at DateTimeFormatter.parse (DateTimeFormatter.java:1954)
|        ...
```;;;","2022-09-06 10:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10184
Date: 2022-09-06 17:30:27 +0000;;;","2022-09-07 11:37;dukebot;Changeset: 32c7b628
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-09-07 18:33:37 +0000
URL:       https://git.openjdk.org/jdk/commit/32c7b6283daf6f3876ff62693d5a0cb7c4af4232
;;;",,,,,,,,,,,,,,,,,,
Valhalla: Verifier error in method call with abstract value class arg,JDK-8293134,5082551,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hseigel,rriggs,rriggs,2022-08-30 14:18,2022-09-12 09:05,2023-10-01 09:56,2022-09-12 09:05,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"A verifier error occurs when this program is compiled and run.
A value class that extends an abstract value class results in a VerifierError when passed as an argument.

If the superclass is not abstract, the program succeeds.

Error Text:
Exception in thread ""main"" java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    AbstractValueClass.main([Ljava/lang/String;)V @6: invokevirtual
  Reason:
    Type 'AbstractValueClass$A' (current frame, stack[1]) is not assignable to 'AbstractValueClass$T'
  Current Frame:
    bci: @6
    flags: { }
    locals: { '[Ljava/lang/String;', 'AbstractValueClass$A' }
    stack: { 'AbstractValueClass$A', 'AbstractValueClass$A' }
  Bytecode:
    0000000: b800 074c 2b2b b600 0cb1


The source is:

public class AbstractValueClass {

    public static void main(String[] args) {
        A a = new A();
        a.doit(a);
    }
    public static abstract value class T {
        public abstract void doit(T t);
    }

    public static final value class A extends T {
        public void doit(T t) {
            System.out.println(t);
        }
    }
    public static final value class B extends T {
        public void doit(T t) {
            System.out.println(t);
        }
    }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-08-30 14:28;rriggs;AbstractValueClass.java;https://bugs.openjdk.org/secure/attachment/100618/AbstractValueClass.java",,,,,,,,,,,,,,,,,,,,,,,"0|i2yf1n:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-07 08:52;hseigel;The verifier thinks that all value types, including abstract ones, are final.  That appears to no longer be true.;;;","2022-09-08 10:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/750
Date: 2022-09-08 17:13:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] remove experimental code related to methods inherited from Object,JDK-8293129,5082543,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-08-30 12:49,2022-08-30 14:31,2023-10-01 09:56,2022-08-30 14:31,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,noreg-cleanup,,,,,,,,,,,,,,,,,"javac rejects legal value classes that invoke or extend methods defined in j.l.Object, this seems like experimental code as this behavior is not mentioned in the spec",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yezv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-30 14:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/732
Date: 2022-08-30 21:12:38 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Valhalla: gcbasher update for new bytecodes,JDK-8293127,5082541,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2022-08-30 12:21,2022-09-01 14:24,2023-10-01 09:56,2022-09-01 14:24,,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"The Decompiler in the gcbasher needs to know the lengths of the new Valhalla bytecodes. Otherwise, it fails trying to decompile value classes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yezf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-08-30 12:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/731
Date: 2022-08-30 19:33:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[lworld] follow-up for JDK-8293120,JDK-8293126,5082540,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-08-30 12:02,2022-09-01 13:32,2023-10-01 09:56,2022-09-01 13:32,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,,,,,,,,,,,,,,,,,,add tests to the fix for JDK-8293120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yez7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-09-01 13:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/738
Date: 2022-09-01 19:32:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[lworld] javac is rejecting correct class declaration that has a combination of value and sealed modifiers,JDK-8293120,5082534,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-08-30 10:19,2022-08-30 11:54,2023-10-01 09:56,2022-08-30 11:54,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yexv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-30 11:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/730
Date: 2022-08-30 18:40:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
RISC-V: Need to save and restore callee-saved FloatRegisters in StubGenerator::generate_call_stub,JDK-8293100,5082511,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xlinzheng,vkempik,vkempik,2022-08-30 05:36,2023-07-09 19:16,2023-10-01 09:56,2022-09-02 00:06,20,,,,,,20,hotspot,,0,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,oraclejdk-na,,,,,,,,,,,,,,,,"I have found the test vmTestbase/nsk/stress/jni/jnistress002.java  fails on risc-v platform. (checked on hifive unmatched and thead rvb-ice). the log has lots of these messages:

JNI object
public java.lang.String nsk.stress.jni.objectsJNI.instName = ""Thread-2""
public int nsk.stress.jni.objectsJNI.i = 1072273735
public long nsk.stress.jni.objectsJNI.l = 8325085374318028103
public char[] nsk.stress.jni.objectsJNI.c = ""Thread-2""
public float nsk.stress.jni.objectsJNI.f = 0.49921197
public double nsk.stress.jni.objectsJNI.d = NaN
Java object
public java.lang.String nsk.stress.jni.objectsJNI.instName = ""Thread-2""
public int nsk.stress.jni.objectsJNI.i = 1072273735
public long nsk.stress.jni.objectsJNI.l = 8325085374318028103
public char[] nsk.stress.jni.objectsJNI.c = ""Thread-2""
public float nsk.stress.jni.objectsJNI.f = 0.955677
public double nsk.stress.jni.objectsJNI.d = 0.49921197125621386
The fields No. 4 are different
Objects are different
",,,,,,,,,,JDK-8294243,JDK-8311715,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,,,"0|i2yesr:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-31 01:44;xlinzheng;It seems no one claims this issue yet and this issue is fixed at my local branch, so please let me file a fix for it.;;;","2022-08-31 21:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10095
Date: 2022-08-31 08:47:50 +0000;;;","2022-09-02 00:06;dukebot;Changeset: bc5ffc8e
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-09-02 07:01:02 +0000
URL:       https://git.openjdk.org/jdk/commit/bc5ffc8e472ba7bbafbf68d19d1f06dd1cba10e1
;;;","2022-09-06 05:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/19
Date: 2022-09-06 12:27:56 +0000;;;","2022-09-07 06:09;vkempik;Fix Request(19u) : I would like to backport this rather critical risc-v jni fix into jdk19u. The risk is low as it affects only one platform - risc-v
Testing: hotspot:tier4 on thead c910 board ( as the issue initially was found in vmTestbase's test);;;","2023-02-28 18:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/4
Date: 2023-03-01 02:25:52 +0000;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,
JFR: Typo in TestRemoteDump.java,JDK-8293099,5082510,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,egahlin,egahlin,2022-08-30 05:35,2022-10-05 23:20,2023-10-01 09:56,2022-10-03 00:07,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"TestRemoteDump.java has the following code:

var service = Executors.newFixedThreadPool(3);
var f1 = service.submit(f);
var f2 = service.submit(f);
var f3 = service.submit(f);
if (!f1.get() && !f1.get() && !f3.get()) {

The last line should be: if (!f1.get() && !f2.get() && !f3.get()) {



https://github.com/openjdk/jdk/blob/master/test/jdk/jdk/jfr/jmx/streaming/TestRemoteDump.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yesj:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-08-30 16:55;dholmes;Shouldn't it also be using || instead of && - to see if any action failed rather than all actions failed?;;;","2022-09-30 05:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10509
Date: 2022-09-30 12:16:04 +0000;;;","2022-10-03 00:07;dukebot;Changeset: bc668b99
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-10-03 07:04:30 +0000
URL:       https://git.openjdk.org/jdk/commit/bc668b994d0e5ac9d20d51ab3214e916fee20a6b
;;;",,,,,,,,,,,,,,,,,,,,
NPE in P11KeyStore.getID,JDK-8293093,5082504,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,coffeys,coffeys,2022-08-30 04:10,2022-11-14 11:40,2023-10-01 09:56,2022-10-26 08:55,,,,,,,20,security-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,"e.g. run the "" sun/security/pkcs11/Secmod/AddTrustedCert.java"" test with -Djava.security.debug=all property.

scl:
java.lang.NullPointerException: Cannot read the array length because ""bytes"" is null
        at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.getID(P11KeyStore.java:2158)
        at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.getTokenObject(P11KeyStore.java:2208)
        at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.destroyCert(P11KeyStore.java:1959)
        at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.deleteEntry(P11KeyStore.java:561)
        at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.engineSetEntry(P11KeyStore.java:1053)
        at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.engineSetCertificateEntry(P11KeyStore.java:528)
        at java.base/java.security.KeyStore.setCertificateEntry(KeyStore.java:1253)
        at AddTrustedCert.main(AddTrustedCert.java:106)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:1589)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yer7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-09-08 14:45;mpowers;AddTrustedCert.jtr contains:

Warning: unsupported OS: MacOSX-aarch64-64, please initialize NSS librarys location firstly, skipping test
...

test result: Passed. Execution successful

Here's the command that I used:

% jtreg -nr -Djava.security.debug=all -ea -esa -a -agentvm -conc:4 -jdk build/macosx-aarch64/images/jdk open/test/jdk/sun/security/pkcs11/Secmod/AddTrustedCert.java

It looks like I may need to install NSS on my laptop and invoke with the -nativepath command line option. Haven't tried that before.;;;","2022-09-08 17:50;mpowers;Installed NSS on my laptop and used -Dtest.nss.lib.paths=/opt/homebrew/lib;;;","2022-09-09 17:37;mpowers;I ran the test over and over, but can't reproduce the failure on my MacBook. The stack trace you supplied indicates your failure was caused by a certificate keystore object without a CKA_ID attribute.;;;","2022-09-21 12:39;mpowers;[~coffeys] How often did you see this failure? Were you running jtreg from the command line?;;;","2022-09-22 15:04;valeriep;[~mpowers] There could be PKCS11 impls out there which may miss the CKA_ID attribute. Since it's debugging code, probably we can just check for null CKA_ID beforehand to accommodate these impls.
[~coffeys] Is this observed when using NSS or some other PKCS11 lib?;;;","2022-09-23 02:59;coffeys;I see this on Ubuntu with nss version 3.35:

===
nssLibDir: /usr/lib/x86_64-linux-gnu/
NSS modules: [NSS Internal PKCS #11 Module (CRYPTO, /usr/lib/x86_64-linux-gnu/nss/libsoftokn3.so, slot 0), NSS Internal PKCS #11 Module (KEYSTORE, /usr/lib/x86_64-linux-gnu/nss/libsoftokn3.so, slot 1), Builtin Roots Module (TRUSTANCHOR, /usr/lib/x86_64-linux-gnu/nss/libnssckbi.so, slot 0)]
Information for provider SunPKCS11-NSSKeyStore
Library info:
  cryptokiVersion: 2.20
  manufacturerID: Mozilla Foundation
  flags: 0
  libraryDescription: NSS Internal Crypto Services
  libraryVersion: 3.35

===;;;","2022-09-30 09:22;mpowers;I tested with nss version 3.35 on my MacBook: still no NPE. Maybe there's a clue in the .jtr file.;;;","2022-10-03 07:28;mpowers;The  snippet from your .jtr file shows three NSS modules being used. The .jtr on my MacBook doesn't show the Builtin Roots Module. Why?
;;;","2022-10-20 08:42;mpowers;I'm finally able to reproduce this NPE.;;;","2022-10-21 13:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10823
Date: 2022-10-21 19:54:57 +0000;;;","2022-10-26 08:55;dukebot;Changeset: 8e5d680a
Author:    Mark Powers <mpowers@openjdk.org>
Committer: Anthony Scarpino <ascarpino@openjdk.org>
Date:      2022-10-26 15:53:52 +0000
URL:       https://git.openjdk.org/jdk/commit/8e5d680a98ad28eb3607d227783bdea94039dde6
;;;",,,,,,,,,,,,
Zero build failure on AArch64 and RISCV64 after JDK-8293007,JDK-8293065,5082476,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fjiang,fjiang,fjiang,2022-08-29 23:03,2022-09-20 23:24,2023-10-01 09:56,2022-08-30 17:57,20,,,,,,20,hotspot,,0,build_failure,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-20,tier5,,,,,,,,,,,,,,"JDK-8293007 breaks the zero VM build, the root cause is that macro AARCH64  and AARCH64_PORT_ONLY are not equivalent in BarrierNSetNMethod::arm_all_nmethods.

Error log:
=== Output from failing command(s) repeated here ===
* For target hotspot_variant-zero_libjvm_objs_barrierSetNMethod.o:
/home/jiangfeilong/workspace/jdk/src/hotspot/share/gc/shared/barrierSetNMethod.cpp: In member function 'void BarrierSetNMethod::arm_all_nmethods()':
/home/jiangfeilong/workspace/jdk/src/hotspot/share/gc/shared/barrierSetNMethod.cpp:136:24: error: incomplete type 'BarrierSetAssembler' used in nested name specifier
   BarrierSetAssembler::clear_patching_epoch();
                        ^~~~~~~~~~~~~~~~~~~~",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293007,,,,,,,,,,,,,,,,,,,aarch64,riscv,,,,,,20,,linux,,,,,,,"0|i2yekz:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-29 23:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10075
Date: 2022-08-30 06:17:19 +0000;;;","2022-08-30 02:16;chagedorn;ILW = Zero build failure, only zero build and on riscv and aarch64, no workaround = MMH = P3;;;","2022-08-30 17:57;dukebot;Changeset: 2d7792c7
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-08-31 00:56:27 +0000
URL:       https://git.openjdk.org/jdk/commit/2d7792c78308503ad291fae51378c213d3e23683
;;;",,,,,,,,,,,,,,,,,,,,
C1: Missing access check on non-accessible class,JDK-8293044,5082452,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,vlivanov,vlivanov,vlivanov,2022-08-29 14:23,2023-01-20 05:34,2023-10-01 09:56,2022-09-09 13:50,11,17,18,19,20,8,20,hotspot,,0,c1,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,oracle-triage-20,,,,,,,No exception is thrown when allocating an object array of package-private class from C1-generated code.,,,,,,,,,,JDK-8294828,JDK-8296297,JDK-8294447,JDK-8295054,JDK-8294178,JDK-8296298,JDK-8294127,,,,,,,,,,,,,,,,,,,JDK-8290363,,JDK-8295726,JDK-8293816,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yefn:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-08-30 07:38;thartmann;ILW = Missing access checks in C1 compiled code, edge cases, disable C1 compilation of affected code = HMM = P2;;;","2022-09-08 11:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10222
Date: 2022-09-08 17:12:36 +0000;;;","2022-09-09 13:50;dukebot;Changeset: 005b49bb
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-09-09 20:47:31 +0000
URL:       https://git.openjdk.org/jdk/commit/005b49bb78a468d4e372e6f5fa48bb0db4fd73c2
;;;","2022-09-22 06:23;thartmann;Fix Request (JDK 19u)
Fixes missing access checks in C1 compiled code. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 11u and 17u. ;;;","2022-09-22 06:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/30
Date: 2022-09-22 13:23:50 +0000;;;","2022-10-03 09:47;goetz;Fix request [11u, 17u]

I backport this for parity with 11.0.18-oracle 17.0.6-oracle.
Typical C1 risk, relatively big change, but a needed fix because wrong Java behaviour.
Clean backport to 17, c1_Runtiome.cpp needed resolving in 11.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2022-10-03 10:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1384
Date: 2022-10-03 16:56:49 +0000;;;","2022-10-03 10:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/768
Date: 2022-10-03 17:13:44 +0000;;;","2022-11-03 03:48;yan;Fix request (13u, 15u):
backporting for parity with LTS releases.
In both cases, c1_Runtime1.cpp needs some adaptation just like in 11u.
There will be a follow-up of 8293816; with that in mind, tier1 and specific testing run fine.
;;;","2022-11-03 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/425
Date: 2022-11-03 10:49:33 +0000;;;","2022-11-03 05:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/299
Date: 2022-11-03 10:49:43 +0000;;;",,,,,,,,,,,,
--disable-@files option doesn't work and cause an error,JDK-8293041,5082449,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,bkorando,bkorando,2022-08-29 13:26,2022-11-28 14:57,2023-10-01 09:56,2022-11-18 06:57,11,17,18,,,,20,tools,,0,starter,,,,,,,,,,,,,,,,,,,"The documentation for the java launcher describes the option of --disable-@files as a way to disable additional processing of argfiles. However adding the option either as part of the java command or in an argfile causes the java launcher to respond with the following: 

Unrecognized option: --disable-@files
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.

Additionally, there is an inconsistency in the documentation. Online documentation (https://docs.oracle.com/en/java/javase/18/docs/specs/man/java.html#standard-options-for-java) uses --disable-@files, while `java -help` uses -disable-@files. Regardless both ways fail, and it seems that the java -help is most likely the incorrect one based on code review. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yeez:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2022-11-16 04:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11183
Date: 2022-11-16 12:34:29 +0000;;;","2022-11-18 06:57;dukebot;Changeset: 13158cb5
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2022-11-18 14:55:30 +0000
URL:       https://git.openjdk.org/jdk/commit/13158cb52db723be4932d815bdb0a17245259c84
;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] consolidate Value Objects tests,JDK-8293038,5082446,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-08-29 11:52,2022-08-30 22:44,2023-10-01 09:56,2022-08-30 22:44,repo-valhalla,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,consolidate tests a la RecordCompilationTests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yeeb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-30 22:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/733
Date: 2022-08-31 04:32:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
ConstantPool::print_on can crash if _cache is NULL,JDK-8293012,5082415,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,dholmes,dholmes,2022-08-28 18:24,2023-08-29 22:26,2023-10-01 09:56,2022-08-29 18:01,17,20,,,,,20,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,noreg-other,,,,,,,,,,,,,,,,"ConstantPool::print_on does:

 st->print_cr("" - resolved_references: "" INTPTR_FORMAT, p2i(resolved_references()));

but resolved_references() does:

return (objArrayOop)_cache->resolved_references();

which will crash is _cache is NULL.

print_on should be using resolved_references_or_null().

It would also be useful for print_on to report the CP length before starting to iterate the contents.",,,,,,,,,,JDK-8315145,JDK-8310465,JDK-8315303,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ye7f:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-28 18:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10059
Date: 2022-08-29 01:51:20 +0000;;;","2022-08-29 18:01;dukebot;Changeset: 9424d6d4
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-08-30 00:58:26 +0000
URL:       https://git.openjdk.org/jdk/commit/9424d6d487db4ad0f6f671a8c33b8f169794fe25
;;;","2023-06-18 23:56;shade;Fix Request (17u)

Improves reliability on error/debugging reporting path. Applies cleanly.;;;","2023-06-18 23:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1467
Date: 2023-06-19 06:51:26 +0000;;;",,,,,,,,,,,,,,,,,,,
JDI ObjectReference/referringObjects/referringObjects001 fails: assert(env->is_enabled(JVMTI_EVENT_OBJECT_FREE)) failed: checking,JDK-8293010,5082410,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,dcubed,dcubed,2022-08-28 07:05,2023-02-27 20:01,2023-10-01 09:56,2022-09-01 19:01,20,,,,,,20,hotspot,,0,Intermittent,jdk17u-critical-request,jdk17u-critical-yes,,,,,,,,,,,,,,,,,"The following test failed in my jdk-20+12 stress testing:

vmTestbase/nsk/jdi/ObjectReference/referringObjects/referringObjects001/referringObjects001.java

Here's a snippet from the log file:

debugee.stderr> Debuggee nsk.share.jdi.HeapwalkingDebuggee : sending the command: ready
debugee.stderr> Debuggee: received the command: deleteInstances:java.lang.String:2
debugee.stderr> Debuggee nsk.share.jdi.HeapwalkingDebuggee : sending the command: ready
debugee.stderr> Debuggee: received the command: deleteReferrers:java.lang.String:5
debugee.stderr> Debuggee nsk.share.jdi.HeapwalkingDebuggee : sending the command: ready
debugee.stderr> Debuggee: received the command: createInstances:java.lang.String:4:10:JNI_LOCAL
debugee.stderr> Debuggee nsk.share.jdi.HeapwalkingDebuggee : sending the command: ready
debugee.stdout> # To suppress the following error report, specify this argument
debugee.stdout> # after -XX: or in .hotspotrc:  SuppressErrorAt=/jvmtiExport.cpp:1700
debugee.stdout> #
debugee.stdout> # A fatal error has been detected by the Java Runtime Environment:
debugee.stdout> #
debugee.stdout> #  Internal Error (/System/Volumes/Data/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/open/src/hotspot/share/prims/jvmtiExport.cpp:1700), pid=83056, tid=40455
debugee.stdout> #  assert(env->is_enabled(JVMTI_EVENT_OBJECT_FREE)) failed: checking
debugee.stdout> #
debugee.stdout> # JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-08-25-1408339.dcubed...)
debugee.stdout> # Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-08-25-1408339.dcubed..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
debugee.stdout> # Core dump will be written. Default location: /cores/core.83056
debugee.stdout> #
debugee.stdout> # An error report file with more information is saved as:
debugee.stdout> # /System/Volumes/Data/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/build/macosx-aarch64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/scratch/10/hs_err_pid83056.log
debugee.stdout> #
debugee.stdout> # If you would like to submit a bug report, please visit:
debugee.stdout> #   https://bugreport.java.com/bugreport/crash.jsp
debugee.stdout> #
# ERROR: Unexpected exception: com.sun.jdi.VMDisconnectedException
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Unexpected exception: com.sun.jdi.VMDisconnectedException
        at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
        at nsk.share.Log.complain(Log.java:403)
        at nsk.share.jdi.TestDebuggerType2.runIt(TestDebuggerType2.java:221)
        at nsk.jdi.ObjectReference.referringObjects.referringObjects001.referringObjects001.run(referringObjects001.java:89)
        at nsk.jdi.ObjectReference.referringObjects.referringObjects001.referringObjects001.main(referringObjects001.java:85)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:1589)
com.sun.jdi.VMDisconnectedException
        at jdk.jdi/com.sun.tools.jdi.TargetVM.waitForReply(TargetVM.java:304)
        at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.waitForTargetReply(VirtualMachineImpl.java:1176)
        at jdk.jdi/com.sun.tools.jdi.PacketStream.waitForReply(PacketStream.java:89)
        at jdk.jdi/com.sun.tools.jdi.JDWP$ReferenceType$Instances.waitForReply(JDWP.java:3006)
        at jdk.jdi/com.sun.tools.jdi.JDWP$ReferenceType$Instances.process(JDWP.java:2982)
        at jdk.jdi/com.sun.tools.jdi.ReferenceTypeImpl.instances(ReferenceTypeImpl.java:955)
        at nsk.share.jdi.HeapwalkingDebugger.getObjectReferences(HeapwalkingDebugger.java:224)
        at nsk.share.jdi.HeapwalkingDebugger.countNewInstances(HeapwalkingDebugger.java:189)
        at nsk.share.jdi.HeapwalkingDebugger.checkDebugeeAnswer_instanceCounts(HeapwalkingDebugger.java:180)
        at nsk.jdi.ObjectReference.referringObjects.referringObjects001.referringObjects001.testReferrerType(referringObjects001.java:160)
        at nsk.jdi.ObjectReference.referringObjects.referringObjects001.referringObjects001.testClass(referringObjects001.java:104)
        at nsk.jdi.ObjectReference.referringObjects.referringObjects001.referringObjects001.doTest(referringObjects001.java:254)
        at nsk.share.jdi.TestDebuggerType2.runIt(TestDebuggerType2.java:214)
        at nsk.jdi.ObjectReference.referringObjects.referringObjects001.referringObjects001.run(referringObjects001.java:89)
        at nsk.jdi.ObjectReference.referringObjects.referringObjects001.referringObjects001.main(referringObjects001.java:85)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:1589)
# ERROR: TEST FAILED: debuggee's process finished with status: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: TEST FAILED: debuggee's process finished with status: 134
        at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
        at nsk.share.Log.complain(Log.java:403)
        at nsk.share.jdi.TestDebuggerType2.quitDebuggee(TestDebuggerType2.java:202)
        at nsk.share.jdi.TestDebuggerType2.runIt(TestDebuggerType2.java:225)
        at nsk.jdi.ObjectReference.referringObjects.referringObjects001.referringObjects001.run(referringObjects001.java:89)
        at nsk.jdi.ObjectReference.referringObjects.referringObjects001.referringObjects001.main(referringObjects001.java:85)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:1589)
TEST FAILED


#>
#>  SUMMARY: Following errors occured
#>      during test execution:
#>
# ERROR: Unexpected exception: com.sun.jdi.VMDisconnectedException
# ERROR: TEST FAILED: debuggee's process finished with status: 134

Here's the crashing thread's stack trace from the hs_err_pid file:

---------------  T H R E A D  ---------------

Current thread (0x0000000158018410):  JavaThread ""JDWP Transport Listener: dt_socket"" daemon [_thread_in_vm, id=40455, stack(0x0000000171328000,0x000000017152b000)]
        
Stack: [0x0000000171328000,0x000000017152b000],  sp=0x000000017152a2a0,  free space=2056k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x101a624]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x868  (jvmtiExport.cpp:1700)
V  [libjvm.dylib+0x101ac54]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x68
V  [libjvm.dylib+0x560528]  report_vm_error(char const*, int, char const*, char const*, ...)+0x88
V  [libjvm.dylib+0xb1ed98]  JvmtiExport::post_object_free(JvmtiEnv*, GrowableArray<long>*)+0xb4
V  [libjvm.dylib+0xb48e5c]  JvmtiTagMap::post_dead_objects(GrowableArray<long>*)+0x80   
V  [libjvm.dylib+0xb4a8f4]  JvmtiTagMap::follow_references(int, Klass*, _jobject*, jvmtiHeapCallbacks const*, void const*)+0x198
V  [libjvm.dylib+0xb01d08]  JvmtiEnv::FollowReferences(int, _jclass*, _jobject*, jvmtiHeapCallbacks const*, void const*)+0x134
V  [libjvm.dylib+0xab38f0]  jvmti_FollowReferences(_jvmtiEnv*, int, _jclass*, _jobject*, jvmtiHeapCallbacks const*, void const*)+0x188
C  [libjdwp.dylib+0x42ce0]  classInstances+0x168
C  [libjdwp.dylib+0x9eb8]  instances+0x9c
C  [libjdwp.dylib+0x1a5a8]  debugLoop_run+0x210
C  [libjdwp.dylib+0x387b8]  connectionInitiated+0xf8
C  [libjdwp.dylib+0x38318]  attachThread+0x7c
V  [libjvm.dylib+0xb2b010]  JvmtiAgentThread::call_start_function()+0x74
V  [libjvm.dylib+0xb2af44]  JvmtiAgentThread::start_function_wrapper(JavaThread*, JavaThread*)+0x60
V  [libjvm.dylib+0x8beb1c]  JavaThread::thread_main_inner()+0x118
V  [libjvm.dylib+0x8be9f8]  JavaThread::run()+0x124
V  [libjvm.dylib+0xf76a64]  Thread::call_run()+0x154
V  [libjvm.dylib+0xd4b524]  thread_native_entry(Thread*)+0x138
C  [libsystem_pthread.dylib+0x7878]  _pthread_start+0x140",,,,,,,,,,JDK-8299390,JDK-8299355,JDK-8303206,JDK-8303305,,,,,,,,,,,,,,,,,,,,,,JDK-8302731,,JDK-8256811,,,,JDK-8291456,,,,,,,,"2022-08-28 07:09;dcubed;jdk-20+12_macosx-aarch64.8293010.zip;https://bugs.openjdk.org/secure/attachment/100602/jdk-20%2B12_macosx-aarch64.8293010.zip",,,,,,,aarch64,,,,,,,,,os_x,,,,,,,"0|i2ye6b:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-08-28 07:07;dcubed;There's another unresolved bug that mentions the same assertion failure:

    JDK-8291456 com/sun/jdi/ClassUnloadEventTest.java failed with ""Wrong number of class unload events: expected 10 got 4""

with a different test.;;;","2022-08-28 07:10;dcubed;I've attached the logs from my sighting in my jdk-20+12 macosx-aarch64 stress testing:

$ unzip -l jdk-20+12_macosx-aarch64.8293010.zip
Archive:  jdk-20+12_macosx-aarch64.8293010.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    41462  08-27-2022 09:32   jdk-20+12_3/failures.macosx-aarch64/referringObjects001.jtr.slowdebug
    80423  08-27-2022 09:32   jdk-20+12_3/failures.macosx-aarch64/hs_err_pid83056.log
---------                     -------
   121885                     2 files;;;","2022-08-31 15:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10109
Date: 2022-08-31 21:47:05 +0000;;;","2022-09-01 19:01;dukebot;Changeset: 99c3ab01
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-09-02 01:59:32 +0000
URL:       https://git.openjdk.org/jdk/commit/99c3ab01773fcab885aa041345aab1a1ad4d852f
;;;","2022-12-24 02:13;goetz;After backporting JDK-8291456 and JDK-8256811 to 17.0.6 we see vmTestbase/nsk/jdi/ReferenceType/instances/instances001/instances001.java
throwing this assertion. This happened before in our CI for jdk10 on 29.7.22.  It only happens sporadic one one linuxx86_64 machine.;;;","2022-12-24 02:28;goetz;Critical Fix Request [17u]

Please see the comment above.
I think we should bring this fix to 17.0.6. The fix is simple
and addresses an obvious regression in this update, so 
it should qualify for a push to jdk17u.
SAP nightly testing passed.;;;","2022-12-24 02:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/364
Date: 2022-12-24 10:26:26 +0000;;;",,,,,,,,,,,,,,,,
riscv: failed to build after JDK-8290025,JDK-8293007,5082405,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,yadongwang,yadongwang,yadongwang,2022-08-27 07:47,2022-09-06 17:29,2023-10-01 09:56,2022-08-29 18:20,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"The riscv port tier1 failed after JDK-8290025，after which GC took over the work of code cache sweeping.
Then, concurrent GC like ZGC or Shenandoah failed at the unimplemented BarreirSetNMethod::arm(), and meanwhile, it exposed a long-stand bug in G1BarrierSetAssembler::g1_write_barrier_pre().
 
Considering we are at the same time to rewrite the nmethod entry barrier when porting loom and generational ZGC in riscv port, we solve them together in this issue to make things smooth.

Like JDK-8290700, we brought the similar optimization to the nmethod entry barrier, and introduced a out-of-line stub to the entry barriers of C2 methods, and also a concurrent-data-and instruction-patching barrier. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293065,,,,,,,,,,,,,,,riscv,,,,,,,20,,linux,,,,,,,"0|i2ye57:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-27 08:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10056
Date: 2022-08-27 14:54:18 +0000;;;","2022-08-29 18:20;dukebot;Changeset: e016363b
Author:    Yadong Wang <yadongwang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-08-30 01:17:41 +0000
URL:       https://git.openjdk.org/jdk/commit/e016363b54f1624e9ff4470803c6000d8fe91a7f
;;;",,,,,,,,,,,,,,,,,,,,,
"sun/tools/jhsdb/JStackStressTest.java fails with ""UnalignedAddressException: 8baadbabe""",JDK-8293006,5082404,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2022-08-27 06:37,2022-09-08 07:33,2023-10-01 09:56,2022-09-02 09:12,20,,,,,,20,hotspot,,0,intermittent,tier5,tier6,tier7,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

sun/tools/jhsdb/JStackStressTest.java

Here's a snippet from the log file:

jhsdb jstack stderr:

###### End of all output for iteration 2 which took 19249ms
[2022-08-27T04:26:43.404291900Z] Waiting for completion for process 46936
[2022-08-27T04:26:43.404291900Z] Waiting for completion finished for process 46936
###### Starting jstack iteration 3 against 67088
[2022-08-27T04:26:43.414815900Z] Gathering output for process 59168
[2022-08-27T04:26:52.877476Z] Waiting for completion for process 59168
[2022-08-27T04:26:52.878041300Z] Waiting for completion finished for process 59168
Output and diagnostic info for process 59168 was saved into 'pid-59168-output.log'
jhsdb jstack stdout:
Attaching to process ID 67088, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 20-ea+13-791
Deadlock Detection:

No deadlocks found.

""<null>"" #
jhsdb jstack stderr:
sun.jvm.hotspot.debugger.UnalignedAddressException: 8baadbabe
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal$1.checkAlignment(WindbgDebuggerLocal.java:106)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.DebuggerBase.readCInteger(DebuggerBase.java:357)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.DebuggerBase.readAddressValue(DebuggerBase.java:462)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal.readAddress(WindbgDebuggerLocal.java:312)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.windbg.WindbgAddress.getAddressAt(WindbgAddress.java:71)
	at jdk.hotspot.agent/sun.jvm.hotspot.types.basic.BasicTypeDataBase.findDynamicTypeForAddress(BasicTypeDataBase.java:238)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VirtualBaseConstructor.instantiateWrapperFor(VirtualBaseConstructor.java:104)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.Metadata.instantiateWrapperFor(Metadata.java:77)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.Oop.getKlassForOopHandle(Oop.java:210)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.ObjectHeap.newOop(ObjectHeap.java:181)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.VMOopHandle.resolve(VMOopHandle.java:61)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.getThreadObj(JavaThread.java:355)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.getCurrentParkBlocker(JavaThread.java:407)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:80)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:39)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:62)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:45)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.run(JStack.java:67)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.runWithArgs(JStack.java:90)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJSTACK(SALauncher.java:302)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276402,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,windows,,,,,,"0|i2ye4z:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-08-27 15:36;cjplummer;The stack trace of the failure is identical to JDK-8276402 (once you get passed the SA tool part of the stack). JDK-8276402 was suspected to be due to some combination of loom and -Xcomp, but none of those apply here, so that could be red herring. JDK-8276402 had a flurry of reproducing cases in late October last year, and then went away.;;;","2022-08-28 14:42;cjplummer;I just ran into this twice on macosx-x64, so it seems this issue is suddenly turning up quite a bit. This is the important part of the stack trace when the exception happens:

at jdk.hotspot.agent/sun.jvm.hotspot.oops.Metadata.instantiateWrapperFor(Metadata.java:77)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.Oop.getKlassForOopHandle(Oop.java:210)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ObjectHeap.newOop(ObjectHeap.java:181)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.VMOopHandle.resolve(VMOopHandle.java:61)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.getThreadObj(JavaThread.java:355)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.getCurrentParkBlocker(JavaThread.java:407)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:80)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.DeadlockDetector.print(DeadlockDetector.java:39)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:62) 

The deadlock detector is running. It first creates a table of all threads:

        threadTable = new HashMap<>();
        Threads threads = VM.getVM().getThreads();
        for (int i = 0; i < threads.getNumberOfThreads(); i++) {
            JavaThread cur = threads.getJavaThreadAt(i);
            // initialize dfn for each thread to -1
            threadTable.put(cur, -1);
        }

It then iterates over all the threads:

        for (Entry<JavaThread, Integer> e : threadTable.entrySet()) {

And does the following for each JavaThread:

                waitingToLockBlocker = thread.getCurrentParkBlocker();

Which does the following:

    Oop threadObj = getThreadObj();

I believe by the time we reach this point something is wrong with JavaThread object. Possibly it is no longer valid, so getThreadObj() is going to look at a bad _threadObj field. However, it seems it should be valid since it is suppose to be safe to walk Threads::_list at any point in time (without safepointing) and get a valid set of JavaThreads.

What I think it more likely is that _threadObj still points into the heap, but to a freed object, resulting in the 8baadbabe reference (note the failed address is not always 8baadbabe). A possibility here is that we are in the middle of a GC that is moving the j.l.Thread instance. _threadObj might still point to the old location, which may have already been zapped. I'm not certain the order GC does things, and when the update to _threadObj is expected relative to movement of the j.l.Thread instance and zapping of the old location.

[~dcubed] Any thoughts?;;;","2022-08-28 15:20;cjplummer;One more thought. This test launches jshell and uses jstack on it 4 times as jshell starts up. Likely jshell is triggering a GC at some point during its startup, so this makes it seem likely that this is related to an untimely GC.;;;","2022-08-28 22:05;cjplummer;Here's another interesting data point. On Aug 25th  [~eosterlund] pushed JDK-8290025, which got rid of the compiler sweeper, and therefore got rid of some ""extra"" GCs we might otherwise see during execution (Erik, please let me know if I'm off base hear). Erik had two ad-hoc jobs on the 24th that reproduced this problem, and seem to be the first we've seen of it since the October sightings in the loom repo. We also started to see this failure in other ad-hoc and CI jobs after this commit. My theory is that before this commit, sweeper triggered GCs were occurring somewhat early in the jshell startup, and got the j.l.Thread objects to a more stable place in the heap (oldgen) so we'd be less likely to see them be right in the middle of being moved later on when SA attaches.;;;","2022-08-29 01:24;eosterlund;When the SA attaches to a live process, is the process somehow frozen such that the threads can't make further progress? Or can they somehow run?;;;","2022-08-29 09:10;dcubed;JDK-8290025 was integrated in jdk-20+13-794 and the first sighting of this
failure mode is in jdk-20+13-791-tier7 so these failures may not be related
to  JDK-8290025 at all.;;;","2022-08-29 10:30;cjplummer;> When the SA attaches to a live process, is the process somehow frozen such that the threads can't make further progress? Or can they somehow run? 

[~eosterlund] The process is frozen. No progress is made after attaching. And it can be frozen at any point. There is no safe pointing. No different than a regular debugger attach in that regard.;;;","2022-08-29 10:32;cjplummer;> JDK-8290025 was integrated in jdk-20+13-794 and the first sighting of this
failure mode is in jdk-20+13-791-tier7 so these failures may not be related
to JDK-8290025 at all. 

[~dcubed] Thanks. That's good to know, although I still think it's most likely related to a GC being in progress.;;;","2022-08-29 17:09;cjplummer;It turns out that the UnalignedAddressException, and the various exceptions that follow, are not in the end the actual cause of the test failure, but they are symptomatic. These exceptions are all handled by SA, and it tries to chug along anyway (the printing of all the stack traces is however very disruptive to the reader). Note the following is where these exceptions are all being handled:

  public Oop getThreadObj() {
    Oop obj = null;
    try {
      Address addr = getAddress().addOffsetTo(threadObjFieldOffset);
      VMOopHandle vmOopHandle = VMObjectFactory.newObject(VMOopHandle.class, addr);
      obj = vmOopHandle.resolve();
    } catch (Exception e) {
      e.printStackTrace();
    }
    return obj;
  }

So the end result of a bad Thread Handle is a null Thread Oop. This causes the following exception, which is not handled, causing the SA tool to exit with an exception: 

java.lang.NullPointerException: Cannot invoke ""sun.jvm.hotspot.oops.Oop.getHandle()"" because ""obj"" is null
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.LongField.getValue(LongField.java:44)
	at jdk.hotspot.agent/sun.jvm.hotspot.oops.OopUtilities.threadOopGetTID(OopUtilities.java:215)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.printThreadInfoOn(JavaThread.java:510)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:77)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:45)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.run(JStack.java:67)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)
	at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.runWithArgs(JStack.java:90)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJSTACK(SALauncher.java:302)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)

I added a check for a null Thread Oop in printThreadInfoOn(), and limit the output it produces to only that which it can do with the Thread object. That sort of worked, but there are other java objects it was still trying to access that can also be problematic. For example, if the Thread Oop is a valid, then printThreadInfoOn() will also fetch the thread name (a String object), and also the Thread's FieldHolder inner class for the priority, daemon status, and current state. I found there were times were Thread object was valid, but these fields were not, resulting in more unexpected exceptions. They all need to be defended against to avoid premature exit of the SA tool.

Note that this particular test is very prone to these issues since the debuggee is actively starting up when jstack is used on it (multiple times). Most of our SA tests purposefully get the debuggee into a stable state to avoid these types of issues.;;;","2022-08-30 17:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10088
Date: 2022-08-30 23:29:18 +0000;;;","2022-09-02 09:12;dukebot;Changeset: 2baeebbc
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-09-02 16:11:01 +0000
URL:       https://git.openjdk.org/jdk/commit/2baeebbc021b2cca8bd8ca866b83ab592d78b4ce
;;;","2022-09-04 07:05;dcubed;The fix for this bug is integrated in jdk-20+14-892.;;;",,,,,,,,,,,
(fs) FileChannel.transferXXX use of copy_file_range needs fallback handling for ENOSYS,JDK-8293004,5082401,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fweimer,fweimer,fweimer,2022-08-27 03:02,2022-09-06 17:30,2023-10-01 09:56,2022-08-30 08:25,20,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,"glibc 2.27 was initially released with userspace emulation for copy_file_range, but the kernel has evolved in a different direction, so the emulation had to be removed in glibc 2.30. The removal was backported into 2.27, 2.28, 2.29 and most distribution glibc versions.

Found through code inspection, no failure is known. For the issue to be visible, glibc 2.27 or later (with the backport) would have to be used on an older kernel with no or partial copy_file_range support.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,,"0|i2ye4b:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-08-27 03:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10055
Date: 2022-08-27 10:12:08 +0000;;;","2022-08-30 08:25;dukebot;Changeset: 343333ab
Author:    Florian Weimer <fweimer@openjdk.org>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2022-08-30 15:23:35 +0000
URL:       https://git.openjdk.org/jdk/commit/343333abcf2a3af1d6dbf48e406cb3efc73b9bf6
;;;",,,,,,,,,,,,,,,,,,,,,
javac produces code that crashes with LambdaConversionException ,JDK-8292975,5082323,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sundar,sundar,2022-08-26 03:18,2022-10-12 23:08,2023-10-01 09:56,2022-10-06 21:23,18,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,"This bug was reported in compiler-dev list

https://mail.openjdk.org/pipermail/compiler-dev/2022-August/020312.html

File Bug.java

import java.util.function.BiFunction;

public class Bug {
  sealed interface Term {
    record Lit() implements Term {}
    record Lam(String x, Term a) implements Term {}
  }

  public static <X, T> void call(BiFunction<X, T, T> op, X x, T t) {
    op.apply(x, t);
  }

  public static void main(String[] args) {
    // this code works
    call(Term.Lam::new, ""x"", (Term) new Term.Lit());

    // this does not
    call(Term.Lam::new, ""x"", new Term.Lit());
    // java.lang.invoke.LambdaConversionException: Type mismatch for lambda argument 1: 
    // class java.lang.Record is not convertible to interface Term
  }
}

$ java Bug      
Exception in thread ""main"" java.lang.BootstrapMethodError: bootstrap method initialization exception
	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:188)
	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:279)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:269)
	at Bug.main(Bug.java:18)
Caused by: java.lang.invoke.LambdaConversionException: Type mismatch for lambda argument 1: class java.lang.Record is not convertible to interface Bug$Term
	at java.base/java.lang.invoke.AbstractValidatingLambdaMetafactory.validateMetafactoryArgs(AbstractValidatingLambdaMetafactory.java:298)
	at java.base/java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:340)
	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:134)
	... 4 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2ydwj:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-02 22:50;sadayapalam;Remi Forax observes in https://mail.openjdk.org/pipermail/compiler-dev/2022-August/020313.html:

Thanks, this is clearly a bug. 

The second call infer T as the intersection type Record & Term, which is erased to Record. 
Term.Lam::new is translated to an invokedynamic 
Method arguments: 
#49 (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; 
#50 REF_newInvokeSpecial Bug$Term$Lam.""<init>"":(Ljava/lang/String;LBug$Term;)V 
#56 (Ljava/lang/String;Ljava/lang/Record;)Ljava/lang/Record; 

This is a case where the compiler should desugar the method reference to a lambda with an upcast from Record to Term 
call ((String x, Record t) -> new Lam(x, (Term) t), ""x"" , new Term.Lit()); 

but tries to directly reference the constructor thus fails at runtime because the upcast is missing. ;;;","2022-10-03 00:15;sadayapalam;Defect introduced by the fix for JDK-8213703: 

Code chunk of the form:

                List<Type> tl = tree.getDescriptorType(types).getParameterTypes();
                for (; tl.nonEmpty(); tl = tl.tail) {
                    Type pt = tl.head;
                    switch (pt.getKind()) {
                        case INTERSECTION:
                        case UNION:
                            return true;
                        case TYPEVAR:
                            TypeVar tv = (TypeVar) pt;
                            if (tv.bound.getKind() == TypeKind.INTERSECTION) {
                                return true;
                            }
                    }
                }
                return false;

got replaced with:

                List<Type> tl = tree.getDescriptorType(types).getParameterTypes();
                for (; tl.nonEmpty(); tl = tl.tail) {
                    Type pt = tl.head;
                    return isIntersectionOrUnionType(pt);
                }
                return false;

As can be seen the for loop is defective and does not consider intersection/unionness of second and subsequent parameters at all.;;;","2022-10-03 23:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10548
Date: 2022-10-04 06:09:10 +0000;;;","2022-10-06 21:23;dukebot;Changeset: cf84c8ea
Author:    Srikanth Adayapalam <sadayapalam@openjdk.org>
Date:      2022-10-07 04:20:40 +0000
URL:       https://git.openjdk.org/jdk/commit/cf84c8eaf265255b49293650b3919f22e26d48a3
;;;",,,,,,,,,,,,,,,,,,,
Bad Thread Utilization in ForkJoinPool,JDK-8292969,5082317,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dl,chaeubl,chaeubl,2022-08-26 02:17,2023-05-19 08:38,2023-10-01 09:56,2022-09-27 03:52,19,,,,,,20,core-libs,,0,amazon-interest,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,loom,,,,,,,,,,,,,,,"The thread utilization in ForkJoinPool seems to drop significantly from time to time. I saw this issue while testing the performance of continuations. The actual issue is probably related to the ForkJoinPool and unrelated to the continuation support itself.

The attached application schedules 8000 virtual threads. Each thread yields rapidly, which stresses the continuation and the ForkJoinPool implementation. This workload is executed for multiple iterations.

The example output below shows that there are some iterations that are slower. This happens pretty randomly, there are also runs where all iterations are fast.

For the iteration that is especially slow, profiling shows that only 4 of the 30+ ForkJoinPool worker threads were actually used in this iteration, even though there should be sufficient work in the queue. The CPU usage of the whole machine drops significantly during that particular iteration.

Additionally, I also tested this application with GraalVM Native Image on both JDK 17 and 19 (GraalVM Native Image supports virtual threads on JDK 17 as well). The JDK 17 ForkJoinPool does not show this problematic behavior, while the JDK 19 implementation shows the same problematic behavior as on HotSpot. The overall performance is also higher on JDK 17 (the ForkJoinPool is the major bottleneck on JDK 19).

How to reproduce:
$JAVA_HOME/bin/javac --enable-preview --release 19 ContinuationPerformance.java
$JAVA_HOME/bin/java --enable-preview ContinuationPerformance

Example output, executed with JDK 19 (HotSpot, C2):
Finished after 8489 ms
Finished after 3918 ms
Finished after 3926 ms
Finished after 4040 ms
Finished after 4145 ms
Finished after 31332 ms
Finished after 4010 ms
Finished after 4244 ms
Finished after 4111 ms
Finished after 4198 ms
Finished after 7713 ms
Finished after 5378 ms
Finished after 4447 ms
Finished after 4365 ms
Finished after 5803 ms
Finished after 4549 ms
Finished after 4312 ms
Finished after 4373 ms
Finished after 4470 ms
Finished after 4402 ms","OpenJDK Runtime Environment (build 19+36-2238)
Ubuntu 20.04
Intel Core i9-10980XE (18 cores, 36 threads)",,,,,,,,,JDK-8294762,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-08-26 02:51;chaeubl;ContinuationPerformance.java;https://bugs.openjdk.org/secure/attachment/100557/ContinuationPerformance.java",,,,,,,,,,,,,,,,,,,,,,,"0|i2ydv7:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,Verified,,"2022-08-27 02:28;alanb;I tried the test on a 12-core system and didn't observe too much variability. However when I switched to a 32-core system then I see that the number of active threads is frequently much lower than the parallelism even though there are thousands of tasks in an unowned submission queue.

Each iteration in the test translates to an initial burst of 8000 poolSubmits on the main thread + 16 million lazySubmits on worker threads. The poolSubmits executed by the main thread are added to the same unowned submission queue (doesn't seem to be any contention that cause it to find another queue). It appears that this setup leads to idle workers not being signalled.;;;","2022-08-31 05:59;dl;The proximate cause seems to be an interaction with queue resizing, during which workers do not yet see that there is more work. Currently only one will be signalled when resizing completes. I will look into improving this.
;;;","2022-09-05 15:50;dl;I adjusted a signalling criterion to better propagate after resizes (basically, by allowing up to two per run). It now handles this case well without much impact on others, but I haven't tried with Graal. The FJP update is at https://github.com/DougLea/jdk/tree/JDK-8292969 . If someone could validate on Graal, I'll issue pull request.;;;","2022-09-07 05:40;dl;Well, considering how innocuous this change is beyond addressing signals on resize issue, I'll issued PR anyway.;;;","2022-09-07 15:15;cwimmer;Unfortunately [~chaeubl] is out of office for a while, so we cannot do any testing on his machine. But I'll try to get some other GraalVM testing done of the patch.;;;","2022-09-26 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10198
Date: 2022-09-07 12:44:11 +0000;;;","2022-09-27 03:52;dukebot;Changeset: bc12e955
Author:    Doug Lea <dl@openjdk.org>
Date:      2022-09-27 10:50:18 +0000
URL:       https://git.openjdk.org/jdk/commit/bc12e9553d30fbf849b5a681137a231ff083d901
;;;","2022-09-30 11:00;alanb;Fix Request (jdk19u)

This issue can lead to disappointing and unpredictable performance. The change is low risk but hard to test.
;;;","2022-10-04 05:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/43
Date: 2022-10-04 12:24:17 +0000;;;","2023-05-19 08:38;shade;Does this issue affect JDK 17 too? The code shape in `scan` is a bit different, and the reproducer is with many threads only in JDK 16, but the gist of the issue seems to be generally applicable to FJP in JDK 17?;;;",,,,,,,,,,,,,
[lworld] Remove ValueCapableClass,JDK-8292953,5082301,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,dsimms,dsimms,2022-08-25 22:47,2022-08-26 00:25,2023-10-01 09:56,2022-08-26 00:25,repo-valhalla,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,Remove the remnants of MVT's ValueCapableClass ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ydrn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-26 00:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/729
Date: 2022-08-26 06:35:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
JEditorPane ignores font-size styles in external linked css-file,JDK-8292948,5082085,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,webbuggrp,webbuggrp,2022-08-23 06:24,2023-01-17 07:57,2023-10-01 09:56,2022-09-15 01:19,17,18,19,20,,,20,client-libs,,0,17-bp,dcspn,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10, Java 17.0.4.1

A DESCRIPTION OF THE PROBLEM :
All fonts are displayed using the same font size despite having different absolute font-size definition in css file.

REGRESSION : Last worked in version 11

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Load a html file with an external css file (containing font-size specifications) in JEditorPane.
The font size specifications in the css are ignored. 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Different font sizes should be rendered differently in the GUI.
ACTUAL -
All font sizes are equal. The same Test with JDK 11 is working fine.

---------- BEGIN SOURCE ----------
CSSTest.java
++++++++++++++++
package test;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;

import javax.swing.AbstractAction;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.text.Document;

@SuppressWarnings (""serial"")
public class CSSTest
   extends JFrame
{

   private final JEditorPane editor;

   public CSSTest (String url)
   {
      super(""External CSS Test"");

      Container contentPane = super.getContentPane();
      editor = new JEditorPane();
      editor.setEditable(false);
      editor.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, true);
      editor.putClientProperty(JEditorPane.W3C_LENGTH_UNITS, false);
      contentPane.add(new JScrollPane(editor), BorderLayout.CENTER);

      editor.getActionMap().put(""Reload-Page"", new AbstractAction(""Reload-Page"")
      {
         @Override
         public void actionPerformed (final ActionEvent evt)
         {
            loadPage(url);
         }
      });
      editor.getActionMap().put(""Debug-Page"", new AbstractAction(""Debug-Page"")
      {
         @Override
         public void actionPerformed (final ActionEvent evt)
         {
            debugPage();
         }
      });

      KeyStroke ctrlR = KeyStroke.getKeyStroke(KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);
      editor.getInputMap().put(ctrlR, ""Reload-Page"");

      KeyStroke ctrlShiftD = KeyStroke.getKeyStroke(KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
      editor.getInputMap().put(ctrlShiftD, ""Debug-Page"");

      loadPage(url);
   }

   void loadPage (String url)
   {
      try
      {
         editor.setContentType(""text/html"");
         editor.getDocument().putProperty(Document.StreamDescriptionProperty, null); // Reload
         editor.setPage(url);
      }
      catch (IOException e)
      {
         editor.setContentType(""text/plain"");
         editor.setText(e.toString());
         editor.setForeground(Color.red);
      }
   }

   void debugPage ()
   {
      System.out.println(editor.getDocument().getDefaultRootElement());
      System.out.println(editor.getUI().getRootView(editor));
   }

   public static void main (final String[] args)
      throws Exception
   {
      SwingUtilities.invokeLater( () ->
      {
         CSSTest frame = new CSSTest(args[0]);
         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         frame.setSize(500, 800);
         frame.setLocation(0, 0);
         frame.setVisible(true);
      });
   }
}
++++++++++++++++
external-css-test.html
++++++++++++++++
<html>
   <head>
      <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
      <link rel=""stylesheet"" type=""text/css"" href=""external-css.css"">   
   </head>
   <body>
      <p class=""help_title"">Help Title</p>
      <hr>
      <p class=""help_subtitle"">Help Subtitle</p>
      <p class=""help_text"">Help text text</p>
      <p class=""help_id"">Help Id<br>
      <hr>
      <p class=""copyright_text"">Coyright</p>
      <br></p>
   </body>
</html> 
++++++++++++++++
external-css.css
++++++++++++++++
p {margin:0; padding:0;}

.help_title
{
  font-family: Arial;
  font-size: 24pt;
  font-weight: bold;
  margin-top:16;
  margin-left:10;
  margin-bottom:16;
}

.help_subtitle
{
  font-family: Tahoma; 
  font-size: 14pt;
  font-weight: bold;
  margin-top:5;
  margin-left:20;
  margin-bottom:5;
}

.help_text
{
  font-family: Tahoma;
  font-size: 12pt;
  margin-bottom:15;
  margin-left:20;
}


.help_id
{
  font-family: Tahoma; 
  font-size: 9pt;
  margin-left:20;
}

.copyright_text
{
  font-family: Tahoma; 
  font-size: 9pt;
  margin-left:10;
}
++++++++++++++++


---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8300206,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300183,,,,,,,,,,,,,,"2022-08-25 12:48;pnarayanaswa;CSSTest.java;https://bugs.openjdk.org/secure/attachment/100547/CSSTest.java","2022-08-25 12:48;pnarayanaswa;external-css-test.html;https://bugs.openjdk.org/secure/attachment/100549/external-css-test.html","2022-08-25 12:48;pnarayanaswa;external-css.css;https://bugs.openjdk.org/secure/attachment/100548/external-css.css","2022-08-25 12:48;pnarayanaswa;jdk11.PNG;https://bugs.openjdk.org/secure/attachment/100550/jdk11.PNG","2022-08-25 12:48;pnarayanaswa;jdk17.PNG;https://bugs.openjdk.org/secure/attachment/100546/jdk17.PNG",,,generic,,,,,,b06,17,,generic,,,,,,,"0|i2ycfn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-08-25 12:48;pnarayanaswa;Checked with attached testcase, issue is reproducible <attached screenshot>
Test Result
=========
8u341: Pass
11.0.16.1: Pass
17 b5: Pass
17 b6: Fail <-regression
17.0.4.1: Fail
18.0.2.1: Fail
19ea :Fail
20ea: Fail 
;;;","2022-08-27 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10054
Date: 2022-08-27 08:54:41 +0000;;;","2022-09-15 01:19;dukebot;Changeset: 1caba0f1
Author:    Stanimir Stamenkov <stanio@yahoo.com>
Committer: Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-09-15 08:16:28 +0000
URL:       https://git.openjdk.org/jdk/commit/1caba0f13c42121c9e1c6648715ec7c31349b537
;;;",,,,,,,,,,,,,,,,,,,,
"GC lock/jni/jnilock001 test failed ""assert(gch->gc_cause() == GCCause::_scavenge_alot || !gch->incremental_collection_failed()) failed: Twice in a row""",JDK-8292946,5082291,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,ayang,dcubed,dcubed,2022-08-25 12:06,2023-01-20 00:34,2023-10-01 09:56,2022-09-05 06:37,20,,,,,,20,hotspot,,0,gc-serial,problemlist,tier5,tier6,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

vmTestbase/gc/lock/jni/jnilock001/TestDescription.java

Here's a snippet from the log file:

#section:main
----------messages:(4/454)----------
command: main -Xbootclasspath/a:. -Xlog:gc=debug:gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers jni -t 1
reason: User specified action: run main/othervm/native -Xbootclasspath/a:. -Xlog:gc=debug:gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers jni -t 1 
Mode: othervm [/othervm specified]
elapsed time (seconds): 65.634
----------configuration:(0/0)----------
----------System.out:(35/2309)----------
Stress time: 120 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 1003487232
Sleep time: 500
Iterations: 0
Number of threads: 1
Run GC thread: false
Run mem diag thread: false
Run forever: false
Starting Thread[#19,gc.lock.LockerTest$Worker@1b49a530,5,MainThreadGroup]
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/defNewGeneration.cpp:870
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S71798/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/069b35e7-3997-4f1d-ac34-bb6183f4f9f3/runs/d9bc802f-606a-4d6b-8b3c-69684b064d27/workspace/open/src/hotspot/share/gc/serial/defNewGeneration.cpp:870), pid=2094368, tid=2094375
#  assert(gch->gc_cause() == GCCause::_scavenge_alot || !gch->incremental_collection_failed()) failed: Twice in a row
#
# JRE version: Java(TM) SE Runtime Environment (20.0+13) (fastdebug build 20-ea+13-791)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+13-791, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xbc9064]  DefNewGeneration::gc_epilogue(bool)+0x354
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S71916/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4de9c880-c5ab-4d25-86b5-695f0037ced5/runs/2c6be331-cadb-4277-8ed2-792d881c0901/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_gc_locker/scratch/1/core.2094368)
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S71916/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4de9c880-c5ab-4d25-86b5-695f0037ced5/runs/2c6be331-cadb-4277-8ed2-792d881c0901/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_vm_gc_locker/scratch/1/hs_err_pid2094368.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(40/7816)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007fa93c1511d0):  VMThread ""VM Thread"" [stack: 0x00007fa942149000,0x00007fa942249000] [id=2094375]

Stack: [0x00007fa942149000,0x00007fa942249000],  sp=0x00007fa9422475c0,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xbc9064]  DefNewGeneration::gc_epilogue(bool)+0x354  (defNewGeneration.cpp:870)
V  [libjvm.so+0xedde63]  GenCollectedHeap::gc_epilogue(bool)+0x33  (genCollectedHeap.cpp:1171)
V  [libjvm.so+0xee201c]  GenCollectedHeap::do_collection(bool, bool, unsigned long, bool, GenCollectedHeap::GenerationType)+0x8ec  (genCollectedHeap.cpp:577)
V  [libjvm.so+0xee2e84]  GenCollectedHeap::do_full_collection(bool, GenCollectedHeap::GenerationType)+0x24  (genCollectedHeap.cpp:871)
V  [libjvm.so+0xec9991]  VM_GenCollectFull::doit()+0x51  (gcVMOperations.cpp:192)
V  [libjvm.so+0x1b784e2]  VM_Operation::evaluate()+0x182  (vmOperations.cpp:71)
V  [libjvm.so+0x1b9d2ba]  VMThread::evaluate_operation(VM_Operation*)+0x18a  (vmThread.cpp:282)
V  [libjvm.so+0x1b9eb5f]  VMThread::inner_execute(VM_Operation*)+0x40f  (vmThread.cpp:429)
V  [libjvm.so+0x1b9ed35]  VMThread::loop()+0xc5  (vmThread.cpp:496)
V  [libjvm.so+0x1b9ee50]  VMThread::run()+0xb0  (vmThread.cpp:175)
V  [libjvm.so+0x1a82a10]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x17488e3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:707)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289764,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ydpf:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2022-08-25 12:15;dcubed;The jdk-20+13-791-tier5 build-ID lists 20 changesets, but only one sticks out:

JDK-8289764 gc/lock tests failed with ""OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects""

because it made minor changes to the failing test. I'm not saying
that JDK-8289764 caused theses new test failures. However, it
does give the investigator a place to start poking around.;;;","2022-08-25 12:21;dcubed;The PR has this comment from 2022.08.07:

https://github.com/openjdk/jdk/pull/9658#issuecomment-1207420760

> Tested for all GC types - G1GC, SerialGC, ParallelGC, ZGC.

However, there were commits to the PR after 2022.08.07 so it's not clear
what tests were run on the final version.;;;","2022-08-26 02:17;tschatzl;Some initial debugging:

GC cause is _wb_young_gc

This may be just two _wb_young_gc's in sequence (the code which both fail due to heap exhaustion; with the given parameters 

GenCollectedHeap::do_collection (this=this@entry=0x7fa93c046a40, full=full@entry=true, clear_all_soft_refs=clear_all_soft_refs@entry=false, 
    size=size@entry=0, is_tlab=is_tlab@entry=false, max_generation=max_generation@entry=GenCollectedHeap::YoungGen

because

bool GenCollectedHeap::should_do_full_collection(size_t size, bool full, bool is_tlab,
                                                 GenCollectedHeap::GenerationType max_gen) const {
  return max_gen == OldGen && _old_gen->should_collect(full, size, is_tlab);
}

returns false with max_gen == YoungGen.

The iteration in the test code to cause the gcs:

         public static void engageGC(long testMemory) {
            final int YOUNG_GC_ITERATIONS = 100;
            final long memChunk = testMemory / YOUNG_GC_ITERATIONS;
            int iteration = 0;
            Object referenceArray[] = new Object[YOUNG_GC_ITERATIONS];

            while (iteration < YOUNG_GC_ITERATIONS) {
                referenceArray[iteration++] = byteArrayProducer.create(memChunk);
                WhiteBox.getWhiteBox().youngGC();
            }
            WhiteBox.getWhiteBox().fullGC();
        }

may be simple enough for the compiler to remove the allocation although there is that WB method in it.

The assert looks as follows:

      assert(gch->gc_cause() == GCCause::_scavenge_alot ||
             !gch->incremental_collection_failed(),
             ""Twice in a row"");

in the debugger gch->incremental_collection_failed() is true.

Given that there is the explicit exception for GCCause::_scavenge_alot already here, this issue is known and should/could be extended to _wb_younggc.

;;;","2022-08-26 02:42;tschatzl;Also the test method should be fixed so that the allocations can not be compiled away;;;","2022-08-26 16:06;dcubed;The first jdk-20+13-791-tier6 sighting is in a test task with these JVM args:

-XX:+UseSerialGC -Xshare:off -showversion;;;","2022-08-29 02:50;ayang;I added `_wb_younggc` to the assert as suggested by Thomas, but the failure persisted.

After taking a deep look, I think the relevant code is:

```
GenCollectedHeap::do_full_collection(...) {
  // after inlining do_collection
  {
    ...
    if (!do_full_collection) {            <- (1)
      ...
      gc_epilogue(...) // contains the failed assertion
    }
    ...
  }
  
  if (gc_cause() == GCCause::_gc_locker && incremental_collection_failed()) {   <- (2)
    // run Full GC
  }
}
```

(1) and (2) checks if a Full GC is needed after finishing a Young GC, and they can give different results. When the crash occurs, (1) == true, i.e. `do_full_collection` == false, and (2) == true. IOW, (1) decides a Full GC is not needed but (2) disagrees.

`GenCollectedHeap::do_full_collection` is fairly convoluted --- not obvious how to modify its logic while keeping all its callers happy. OTOH, the value of the crashing assertion is low, as it essentially checks a failed Young GC (not initiated by `_scavenge_alot` or `_wb_young_gc`) should trigger a Full GC, which is exactly what (2) captures. Therefore, the best fix, IMO, is to just remove this problematic (incorrect) assertion.

(PS: If my analysis is correct, this crash doesn't affect release builds, just to be explicit.);;;","2022-08-31 02:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10096
Date: 2022-08-31 09:12:22 +0000;;;","2022-09-05 06:37;dukebot;Changeset: 9833c025
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2022-09-05 13:35:36 +0000
URL:       https://git.openjdk.org/jdk/commit/9833c025fd7daf6bb1be81d93148a4204a9f184c
;;;",,,,,,,,,,,,,,,
[lworld] add a test to check that an anonymous class is always an identity class,JDK-8292942,5082286,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-08-25 10:52,2022-09-03 10:57,2023-10-01 09:56,2022-09-03 10:57,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"add a test to check this spec assertion:

 * An anonymous class is always an identity class (8.1.1.5)

[1] http://cr.openjdk.java.net/~dlsmith/jep8277163/jep8277163-20220519/specs/value-objects-jls.html#jls-15.9.5",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ydob:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-09-03 10:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/741
Date: 2022-09-03 17:17:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[Linux] No more drag events when new Stage is created in drag handler,JDK-8292922,5082264,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsayao,angorya,angorya,2022-08-25 08:04,2023-01-12 12:55,2023-10-01 09:56,2022-12-23 09:43,8,jfx11,,,,,jfx20,javafx,,0,,,,,,,,,,,,,,,,,,,,"The issue exists in all versions since java8, and only on Linux (Windows and Mac OS X are fine).  
It is a blocker for any docking framework based on dragging an undecorated stage as opposed to drag-and-drop, see

https://github.com/andy-goryachev/FxDock/issues/6
https://github.com/kasemir/FxDocking/issues/1

To reproduce:
- launch and try dragging the red label around

Expected results:
- an undecorated translucent stage is created and is dragged around

Actual results:
- the stage gets stuck and cannot be dragged",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260528,,,,,,,,,,,,,,,,,,,,,"2022-08-25 11:17;angorya;DragFailure.java;https://bugs.openjdk.org/secure/attachment/100545/DragFailure.java","2022-08-29 12:43;kcr;DragFailure2.java;https://bugs.openjdk.org/secure/attachment/100608/DragFailure2.java","2022-08-25 15:31;kcr;DragUndecoratedStage.java;https://bugs.openjdk.org/secure/attachment/100551/DragUndecoratedStage.java","2022-08-25 10:24;angorya;dragging-stage-JDK-8292922.mov;https://bugs.openjdk.org/secure/attachment/100544/dragging-stage-JDK-8292922.mov",,,,,,,,,,,,,,,,,,,,"0|i2ydjf:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2022-08-25 08:17;angorya;screenshot:

https://user-images.githubusercontent.com/1932421/37210447-b9abb28c-2376-11e8-9ead-034fdac8cf39.png
;;;","2022-08-25 08:17;kcr;This is almost certainly a window-toolkit (glass) bug rather than a controls bug.;;;","2022-08-25 11:18;angorya;a test case is attached.;;;","2022-08-25 12:56;kcr;Thanks, I'll give that a try.

As an experiment (and before I looked at the attached test program), I took a simple JavaFX program with an undecorated stage, and added a quick prototype custom event handler to move it around. It works fine for me on Linux. I'll clean it up and attach it.

Likely something that the attached test program is doing is hitting a case that my simple program doesn't, so comparing them might make sense.;;;","2022-08-25 15:53;kcr;I attached a program with a single undecorated Stage that can be dragged around. This works on all platforms.

I can reproduce the bug with the DragFailure program on Linux. My guess is that the failing case is hitting some sort of focus bug or mouse event delivery bug related to have two stages, one of which is created from the drag handler.;;;","2022-08-25 15:57;angorya;tried to delay creating the second stage to MOUSE_DRAGGED, still fails.  
(I recall I've tried all sorts of things before trying to make it work).;;;","2022-08-25 16:49;kcr;I spent some time testing this, and the problem is that drag events stop being delivered after a while if a second stage is created from the drag handler. If instead the window is created ahead of time (and moved out of the way), it works perfectly. This points to a focus problem. I suspect what is happening is that when the second window is created and grabs focus, it interrupts the in-progress drag.
;;;","2022-08-26 06:20;kcr;It's definitely a window focus bug. If I disable focus for the native peer of the second Stage at window creation time, everything works correctly. So a fix might be to prevent focus selection (maybe by disabling focus initially and re-enabling it later or by suppressing the initial focus grab) if a window is created while a drag operation is in progress. We will need to fix it in such a way that we don't lose the ability of a secondary window to later gain focus.

We could consider fixing this for JavaFX 20.
;;;","2022-08-26 09:21;angorya;Thank you, [~kcr], for looking into this.  This has been a long standing issue (4+ years) with no workaround that prevented linux support in one product I worked on.
I wonder what it would take to have it fixed in jfx20?;;;","2022-08-26 10:15;angorya;Not a Linux expect, but I do recall an X11 option to focus window on mouse over - could it be relevant in this case? 

edit: the name of the feature is ""focus follows mouse"" or ""sloppy focus""

```
gsettings set org.gnome.desktop.wm.preferences focus-mode 'mouse'|'sloppy'|'click'
```;;;","2022-08-26 10:32;kcr;We can't rely on global desktop settings (not sure it would help anyway). The fix should be pretty easy in our code I think. It's mostly a matter of testing and making sure the fix is robust. We've had a few focus-related bugs over the past couple years on Linux, so we want to make sure we don't regress anywhere.;;;","2022-08-29 12:47;kcr;I have a preliminary fix that is being tested now.

Also, I attached a slightly modified version of the failing test program, DragFailure2.java. The only real difference is that it creates a Scene and adds that to the Stage (else it doesn't render correctly on Windows or Linux: a Scene-less Stage is not expected and isn't well supported). In order to still render it as transparent, I set the stage style to TRANSPARENT and filled the scene with a 50% opaque fill color.
;;;","2022-08-29 15:05;angorya;Thank you [~kcr] for taking a look!  The current changes allow the FxDock https://github.com/andy-goryachev/FxDock to drag the transient window around as expected.  The only problem encountered so far is that when the user drops the transient on a desktop and a new FxDockWindow (==Stage) is created, it is placed underneath the source stage.  It is not the case on Windows and Mac, where the new window is created on top of all other windows.

Adding requestFocus() and toFront() right after the framework creates the new window does not help.

One thing that might be relevant: right before the new window gets shown, the opacity is set to 0, when show(), then opacity is set to the initial value.  As the comment in DockTools:731 tells, it was done to combat some flicker.  Removing that hack did not produce flicker on Linux, but also had no effect on the issue - the new widow is still behind the source one.;;;","2022-12-17 07:20;kcr;NOTE: this is now blocked by JDK-8260528. After that is integrated we will discuss the best approach to implement the fix for this bug. There are (at least) two possible approaches:

1. The approach I prototyped in Draft PR: https://github.com/openjdk/jfx/pull/905
2. Calling gdk_device_grab when a drag event is started (and gdk_device_ungrab when the drag ends);;;","2022-12-18 12:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/977
Date: 2022-12-18 20:28:17 +0000;;;","2022-12-19 05:11;kcr;I have closed Draft PR #905

PR #977 implements approach 2, and is the more direct approach. It will need testing to ensure no regressions. We can discuss it in the PR.;;;","2022-12-23 09:43;dukebot;Changeset: a35c3bf7
Author:    Thiago Milczarek Sayao <tsayao@openjdk.org>
Date:      2022-12-23 17:40:37 +0000
URL:       https://git.openjdk.org/jfx/commit/a35c3bf78b86c57d6e80d592e99f16ab349b0d8c
;;;",,,,,,
Build failure due to UseJVMCICompiler was not declared when C2 is disabled after JDK-8292691,JDK-8292919,5082261,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2022-08-25 07:40,2022-09-20 23:20,2023-10-01 09:56,2022-08-25 15:49,20,,,,,,20,hotspot,,0,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-20,tencent-interest,,,,,,,,,,,,,,,"The following build failure was observed when C2 was disabled by --with-jvm-features=-compiler2.


/home/jvm/jdk/src/hotspot/share/compiler/oopMap.inline.hpp: In member function 'void OopMapDo<OopFnT, DerivedOopFnT, ValueFilterT>::iterate_oops_do(const frame*, const RegisterMapT*, const ImmutableOopMap*)':
/home/jvm/jdk/src/hotspot/share/compiler/oopMap.inline.hpp:68:11: error: 'UseJVMCICompiler' was not declared in this scope
       if (UseJVMCICompiler) {
           ^~~~~~~~~~~~~~~~
/home/jvm/jdk/src/hotspot/share/compiler/oopMap.inline.hpp:68:11: note: suggested alternative: 'UseCompiler'
       if (UseJVMCICompiler) {
           ^~~~~~~~~~~~~~~~
           UseCompiler
In file included from /home/jvm/jdk/src/hotspot/share/code/codeBlob.inline.hpp:30,
                 from /home/jvm/jdk/src/hotspot/share/runtime/frame.inline.hpp:30,
                 from /home/jvm/jdk/src/hotspot/share/oops/instanceStackChunkKlass.inline.hpp:32,
                 from /home/jvm/jdk/src/hotspot/share/oops/stackChunkOop.inline.hpp:33,
                 from /home/jvm/jdk/src/hotspot/share/gc/shared/continuationGCSupport.inline.hpp:32,
                 from /home/jvm/jdk/src/hotspot/share/gc/shenandoah/shenandoahHeap.inline.hpp:33,
                 from /home/jvm/jdk/src/hotspot/share/gc/shenandoah/shenandoahCollectionSet.inline.hpp:31,
                 from /home/jvm/jdk/src/hotspot/share/gc/shenandoah/shenandoahBarrierSet.inline.hpp:32,
                 from /home/jvm/jdk/src/hotspot/share/gc/shared/barrierSetConfig.inline.hpp:40,
                 from /home/jvm/jdk/src/hotspot/share/oops/access.inline.hpp:31,
                 from /home/jvm/jdk/src/hotspot/share/classfile/javaClasses.inline.hpp:30,
                 from /home/jvm/jdk/src/hotspot/share/gc/shared/accessBarrierSupport.cpp:26:
/home/jvm/jdk/src/hotspot/share/compiler/oopMap.inline.hpp: In member function 'void OopMapDo<OopFnT, DerivedOopFnT, ValueFilterT>::iterate_oops_do(const frame*, const RegisterMapT*, const ImmutableOopMap*)':
/home/jvm/jdk/src/hotspot/share/compiler/oopMap.inline.hpp:68:11: error: 'UseJVMCICompiler' was not declared in this scope
       if (UseJVMCICompiler) {
           ^~~~~~~~~~~~~~~~
/home/jvm/jdk/src/hotspot/share/compiler/oopMap.inline.hpp:68:11: note: suggested alternative: 'UseCompiler'
       if (UseJVMCICompiler) {
           ^~~~~~~~~~~~~~~~
           UseCompiler",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292691,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ydir:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-25 09:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10027
Date: 2022-08-25 14:45:31 +0000;;;","2022-08-25 15:49;dukebot;Changeset: 909e1edb
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-08-25 22:44:45 +0000
URL:       https://git.openjdk.org/jdk/commit/909e1edb188ead748bd452067ca06d6e91aee4c6
;;;","2022-08-25 23:34;dlong;ILW = build failure; -with-jvm-features=-compiler2; no workaround = MMH = P3;;;",,,,,,,,,,,,,,,,,,,,
CustomTzIDCheckDST.java testcase failed on AIX platform,JDK-8292899,5082233,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,itakiguchi,itakiguchi,itakiguchi,2022-08-25 00:22,2023-02-15 03:32,2023-10-01 09:56,2022-09-04 00:26,,,,,,,20,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,,,,,,,,,,,,,"After test/jdk/java/util/TimeZone/CustomTzIDCheckDST.java testcase was integrated, it failed on the AIX platform.

By my investigation, ""TZ=MEZ-1MESZ,M3.5.0,M10.5.0"" timezone was changed to ""Europe/Berlin"" timezone on AIX platform.
It seems this situation is happened because older AIX did not support ""MEZ-1MESZ,M3.5.0,M10.5.0"" timezone by TZ environment variable.
https://www.ibm.com/support/pages/managing-time-zone-variable-posix
AIX special code was implemented into src/java.base/unix/native/libjava/TimeZone_md.c.
Current AIX supports ""TZ=EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"" style.
I think implementation change is required.

strftime() with ""%z"" does not return ISO 8601 format by default.
XPG_SUS_ENV=ON environment variable setting is required.
https://www.ibm.com/docs/en/aix/7.2?topic=s-strftime-strftime-l-subroutine
But XPG_SUS_ENV=ON is not supported by Hotspot.
(See src/hotspot/os/aix/os_aix.cpp)
Special code is required on this part.

Error output
==========================
STDERR:
 stdout: [];
 stderr: [Exception in thread ""main"" java.lang.RuntimeException: Got unexpected timezone information: Thu Aug 25 09:29:10 CEST 2022
        at CustomTzIDCheckDST.runTZTest(CustomTzIDCheckDST.java:71)
        at CustomTzIDCheckDST.main(CustomTzIDCheckDST.java:50)
]
==========================",,,,,,,,,,JDK-8296015,JDK-8296230,JDK-8296595,JDK-8296160,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,aix,,,,,,,"0|i2ydcj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Not verified,,"2022-08-26 00:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10036
Date: 2022-08-26 07:26:46 +0000;;;","2022-09-04 00:26;dukebot;Changeset: 3464019d
Author:    Ichiroh Takiguchi <itakiguchi@openjdk.org>
Date:      2022-09-04 07:22:09 +0000
URL:       https://git.openjdk.org/jdk/commit/3464019d7e8fe57adc910339c00ba79884c77852
;;;","2022-10-26 17:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/49
Date: 2022-10-19 17:12:37 +0000;;;","2022-10-26 17:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/841
Date: 2022-10-26 08:17:11 +0000;;;","2022-10-26 17:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1477
Date: 2022-10-26 08:36:53 +0000;;;","2022-10-27 05:55;itakiguchi;Fix request (11u, 17u, 19u):
This fix is to avoid jtreg failures on AIX platform.
Applies cleanly and Builds pass. ;;;",,,,,,,,,,,,,,,,,
Javadoc index descriptions are not deterministic,JDK-8292892,5082221,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jgneff,jgneff,jgneff,2022-08-24 15:31,2022-09-26 09:45,2023-10-01 09:56,2022-09-21 01:48,15,16,17,18,19,20,20,tools,,0,reproducible-build,,,,,,,,,,,,,,,,,,,"The descriptions of index entries in the JDK API Specification are not deterministic. Their differences reveal an underlying bug unrelated to the goal of reproducible builds.

There are 55,782 index entries in the JDK 20 API Specification, but 56 of them get different descriptions depending on whether I run the build on my local workstation, on a remote Launchpad build machine, or in a QEMU/KVM virtual machine. Of those 56 index entries, 40 are static variables of classes in the package 'java.util.jar'.

For example, each build defines a single entry for LOCCRC in the L-Index file and in the member search index, but the descriptions for the entry differ as shown below.

Local Workstation

  LOCCRC - Static variable in class java.util.jar.JarEntry
  Search: java.util.zip.JarEntry.LOCCRC -> File not found

Remote Launchpad

  LOCCRC - Static variable in class java.util.jar.JarOutputStream
  Search: java.util.zip.JarOutputStream.LOCCRC -> File not found

Virtual Machine

  LOCCRC - Static variable in class java.util.jar.JarInputStream
  Search: java.util.zip.JarInputStream.LOCCRC -> File not found

When I list the source files of the package in directory order (unsorted) on my local workstation, JarEntry is the first class found that inherits the LOCCRC variable:

  $ ls -1U ~/opt/jdk-20/src/java.base/java/util/jar/
  JarEntry.java
  package-info.java
  JarOutputStream.java
  Attributes.java
  JarInputStream.java
  JarException.java
  JarFile.java
  JarVerifier.java
  JavaUtilJarAccessImpl.java
  Manifest.java

On the virtual machine, JarInputStream is the first such class found:

  $ ls -1U ~/opt/jdk-20/src/java.base/java/util/jar/
  JarVerifier.java
  JarInputStream.java
  JavaUtilJarAccessImpl.java
  Manifest.java
  JarOutputStream.java
  Attributes.java
  JarFile.java
  JarException.java
  package-info.java
  JarEntry.java

At first, this issue appeared to be the usual file-ordering problem of reproducible builds. Yet the LOCCRC variable is inherited by four of the classes in the 'java.util.jar' package: JarEntry, JarFile, JarInputStream, and JarOutputStream. The variable is also inherited by four classes in the 'java.util.zip' package: ZipEntry, ZipFile, ZipInputStream, ZipOutputStream.

The underlying issue is that the LOCCRC index entry, and others like it, should be listed once for each inheriting class. For LOCCRC, that would require eight entries. The problem seems to occur when documenting members inherited from classes with package access. Such members are to be documented as though they were declared in the inheriting class. See JDK-4780441 for details.

SYSTEM / OS / JAVA RUNTIME INFORMATION

System information for my local workstation running Ubuntu 20.04.4 LTS is listed below:

  $ uname -a
  Linux tower 5.15.0-46-generic #49~20.04.1-Ubuntu SMP
    Thu Aug 4 19:15:44 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

  $ ldd --version
  ldd (Ubuntu GLIBC 2.31-0ubuntu9.9) 2.31

  $ getconf GNU_LIBPTHREAD_VERSION
  NPTL 2.31

  $ $HOME/opt/jdk-20/bin/java --version
  openjdk 20-ea 2023-03-21
  OpenJDK Runtime Environment (build 20-ea+11-661)
  OpenJDK 64-Bit Server VM (build 20-ea+11-661, mixed mode, sharing)

STEPS TO REPRODUCE

I was able to reproduce the problem by building on three different systems with the following processors:

  * Local Workstation: 4-core Intel Xeon CPU E3-1225 v5
  * Remote Launchpad: 4-core AMD EPYC-Rome Processor
  * Virtual Machine: Single-core Intel Core Processor (Skylake, IBRS)

I can't be certain that the processor played a role in the ordering of files in their directories, but it may have affected the timing of the process that created them.

EXPECTED RESULTS

The builds of the JDK are identical.

ACTUAL RESULT

The builds are different, but they differ only in their Javadoc API index files and the corresponding 'member-search-index.js' file. There are 56 entries in the index that differ:

  $ git diff --numstat --shortstat local remote
  11      11      {local => remote}/index-12.txt
  1       1       {local => remote}/index-13.txt
  5       5       {local => remote}/index-18.txt
  1       1       {local => remote}/index-19.txt
  2       2       {local => remote}/index-20.txt
  1       1       {local => remote}/index-21.txt
  22      22      {local => remote}/index-3.txt
  12      12      {local => remote}/index-5.txt
  1       1       {local => remote}/index-8.txt
   9 files changed, 56 insertions(+), 56 deletions(-)

The differences occur for index entries that are identified on my local workstation as:

  * Methods in class java.awt.BufferCapabilities.FlipContents
  * Methods in class java.time.chrono.HijrahDate
  * Methods in class jdk.incubator.vector.ByteVector
  * Static variables in class java.util.jar.JarEntry

They are:

  java.awt.BufferCapabilities.FlipContents.hashCode()
  java.awt.BufferCapabilities.FlipContents.toString()
  java.time.chrono.HijrahDate.toString()
  java.time.chrono.HijrahDate.until(Temporal, TemporalUnit)
  java.util.jar.JarEntry.CENATT
  java.util.jar.JarEntry.CENATX
  java.util.jar.JarEntry.CENCOM
  java.util.jar.JarEntry.CENCRC
  java.util.jar.JarEntry.CENDSK
  java.util.jar.JarEntry.CENEXT
  java.util.jar.JarEntry.CENFLG
  java.util.jar.JarEntry.CENHDR
  java.util.jar.JarEntry.CENHOW
  java.util.jar.JarEntry.CENLEN
  java.util.jar.JarEntry.CENNAM
  java.util.jar.JarEntry.CENOFF
  java.util.jar.JarEntry.CENSIG
  java.util.jar.JarEntry.CENSIZ
  java.util.jar.JarEntry.CENTIM
  java.util.jar.JarEntry.CENVEM
  java.util.jar.JarEntry.CENVER
  java.util.jar.JarEntry.ENDCOM
  java.util.jar.JarEntry.ENDHDR
  java.util.jar.JarEntry.ENDOFF
  java.util.jar.JarEntry.ENDSIG
  java.util.jar.JarEntry.ENDSIZ
  java.util.jar.JarEntry.ENDSUB
  java.util.jar.JarEntry.ENDTOT
  java.util.jar.JarEntry.EXTCRC
  java.util.jar.JarEntry.EXTHDR
  java.util.jar.JarEntry.EXTLEN
  java.util.jar.JarEntry.EXTSIG
  java.util.jar.JarEntry.EXTSIZ
  java.util.jar.JarEntry.LOCCRC
  java.util.jar.JarEntry.LOCEXT
  java.util.jar.JarEntry.LOCFLG
  java.util.jar.JarEntry.LOCHDR
  java.util.jar.JarEntry.LOCHOW
  java.util.jar.JarEntry.LOCLEN
  java.util.jar.JarEntry.LOCNAM
  java.util.jar.JarEntry.LOCSIG
  java.util.jar.JarEntry.LOCSIZ
  java.util.jar.JarEntry.LOCTIM
  java.util.jar.JarEntry.LOCVER
  jdk.incubator.vector.ByteVector.castShape(VectorSpecies<F>, int)
  jdk.incubator.vector.ByteVector.check(Class<F>)
  jdk.incubator.vector.ByteVector.check(VectorSpecies<F>)
  jdk.incubator.vector.ByteVector.convertShape(
      VectorOperators.Conversion<Byte, F>, VectorSpecies<F>, int)
  jdk.incubator.vector.ByteVector.convert(
      VectorOperators.Conversion<Byte, F>, int)
  jdk.incubator.vector.ByteVector.maskAll(boolean)
  jdk.incubator.vector.ByteVector.reinterpretAsDoubles()
  jdk.incubator.vector.ByteVector.reinterpretAsFloats()
  jdk.incubator.vector.ByteVector.reinterpretAsInts()
  jdk.incubator.vector.ByteVector.reinterpretAsLongs()
  jdk.incubator.vector.ByteVector.reinterpretAsShorts()
  jdk.incubator.vector.ByteVector.species()

I attached the following two files that show all of the differences:

  * index-local-vs-remote.diff - Compares 'api/index-files/*.html'
  * search-local-vs-remote.diff - Compares 'api/member-search-index.js'

I made the comparisons easier by converting the HTML files to plain text with 'w3m' and by expanding the JavaScript file using the 'js-beautify' tool, as in the examples below:

  $ w3m -dump -cols 10000 -T text/html index-12.html > index-12.txt
  $ js-beautify --end-with-newline -o search-local.js \
      member-search-index.js

SOURCE CODE FOR AN EXECUTABLE TEST CASE

I used the following shell script to narrow the scope of packages while testing:

  #!/bin/bash
  # Runs Javadoc for testing

  # The JDK home directory and its extracted source files
  jdk_dir=""$HOME/opt/jdk-20""
  jdk_src=""$jdk_dir/src""

  ""$jdk_dir/bin/java"" --patch-module jdk.javadoc=target/classes \
      jdk.javadoc.internal.tool.Main \
      --source-path ""$jdk_src/java.base"" \
      -d tmp/doc -notimestamp -Xdoclint:none \
      java.util.jar ""$@""

WORKAROUND

I don't have a workaround, but I do have a fix. My pull request will follow shortly.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-4780441,,,,,,,,"2022-08-24 15:41;jgneff;index-local-vs-remote.diff;https://bugs.openjdk.org/secure/attachment/100535/index-local-vs-remote.diff","2022-08-24 15:41;jgneff;search-local-vs-remote.diff;https://bugs.openjdk.org/secure/attachment/100536/search-local-vs-remote.diff",,,,,,,,,,,,,15,,,,,,,,,"0|i2yd9v:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-08-29 14:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10070
Date: 2022-08-29 21:03:34 +0000;;;","2022-09-21 01:48;dukebot;Changeset: 844a95b9
Author:    John Neffenger <jgneff@openjdk.org>
Committer: Pavel Rappo <prappo@openjdk.org>
Date:      2022-09-21 08:45:38 +0000
URL:       https://git.openjdk.org/jdk/commit/844a95b907aaf6ef67d7e4b1ed0998945a6152d2
;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] javac fails to detect class files with invalid access flags,JDK-8292883,5082208,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,fparain,fparain,2022-08-24 12:21,2022-11-17 03:13,2023-10-01 09:56,2022-09-19 14:44,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"The issue happens when javac compiles a Java source file referencing a class provided as a class file (not a source file) and this source file has an invalid access flags combination. In this scenario, javac fails to detect the invalid flags, generates a class file with an incorrect bytecode sequence and considers the compilation to be successful.

Such invalid access flags can easily be detected at compilation time and should trigger an error in the compilation.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297199,,,,,,,,,,,,"2022-08-24 12:29;fparain;InstantiateValue.java;https://bugs.openjdk.org/secure/attachment/100534/InstantiateValue.java","2022-08-24 12:29;fparain;ValueWithInvalidFlags.jcod;https://bugs.openjdk.org/secure/attachment/100533/ValueWithInvalidFlags.jcod",,,,,,,,,,,,,,,,,,,,,,"0|i2yd6z:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-24 12:30;fparain;The issue can be reproduced with the two files attached to the CR. The jcod file declares a primitive value class with an invalid access flags combination: ACC_PRIMITIVE | ACC_IDENTITY | ACC_FINAL | ACC_PUBLIC. Because ACC_PRIMITIVE is set, ACC_VALUE should be set too, but instead ACC_IDENTITY is set. 

The compilation of InstantiateValue by javac doesn't emit any error message, and the ValueWithInvalidFlags is handled as an identity class as shown by the construction sequence:

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=2, args_size=1
         0: new           #7                  // class ValueWithInvalidFlags
         3: dup
         4: invokespecial #9                  // Method ValueWithInvalidFlags.""<init>"":()V
         7: astore_1
         8: return
;;;","2022-09-12 12:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/754
Date: 2022-09-12 19:21:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,
[lw4] PERMITS_VALUE should be removed from all source files,JDK-8292882,5082207,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2022-08-24 12:14,2022-08-25 07:23,2023-10-01 09:56,2022-08-25 07:23,repo-valhalla,,,,,,,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"There's still a number of places where the now obsolete PERMITS_VALUE flag shows up in the source files:

$ grep -rn PERMITS_VALUE open
open/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetClassModifiers/getclmdf006.java:57:        check(getclmdf006c.class, Modifier.ABSTRACT | Modifier.PERMITS_VALUE);
open/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetClassModifiers/getclmdf006.java:73:                             Modifier.PERMITS_VALUE);
open/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetClassModifiers/getclmdf006.java:78:                             Modifier.ABSTRACT | Modifier.PERMITS_VALUE);
open/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetClassModifiers/getclmdf006.java:83:                             Modifier.ABSTRACT | Modifier.PERMITS_VALUE);
open/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetClassModifiers/getclmdf006.java:88:                             Modifier.ABSTRACT | Modifier.PERMITS_VALUE);
open/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetClassModifiers/getclmdf006/getclmdf006.cpp:42:#define ACC_PERMITS_VALUE    0x0040
open/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetClassModifiers/getclmdf006/getclmdf006.cpp:86:    if (mod & ACC_PERMITS_VALUE) printf("" PERMITS_VALUE"");
open/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/ACCICCETests.jcod:26:// because ACC_PERMITS_VALUE was removed from its class access flags.
open/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/ACC_ICCETest.java:28: * @summary test that ACC_PERMITS_VALUE must be set for the super class of
open/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/ACC_ICCETest.java:49:        // Test has to be re-think now that ACC_PERMITS_VALUE has been removed
open/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/ACC_ICCETest.java:51:        // Test illegal class that has both ACC_VALUE and ACC_PERMITS_VALUE set.
open/test/hotspot/jtreg/runtime/valhalla/inlinetypes/classfileparser/ACC_CFETest.java:28: * @summary test class access rules for classes that have ACC_PERMITS_VALUE set.
open/test/lib/org/openjdk/asmtools/jasm/Parser.java:353:            case PERMITS_VALUE:
open/test/lib/org/openjdk/asmtools/jasm/Parser.java:530:            case PERMITS_VALUE:
open/test/lib/org/openjdk/asmtools/jasm/Parser.java:723:                case PERMITS_VALUE:
open/test/lib/org/openjdk/asmtools/jasm/Parser.java:724:                    nextmod = ACC_PERMITS_VALUE;
open/test/lib/org/openjdk/asmtools/jasm/JasmTokens.java:407:        PERMITS_VALUE      (201, ""PERMITS_VALUE"", ""permits_value"", EnumSet.of(TokenType.MODIFIER, TokenType.MODULE_NAME ), KeywordType.KEYWORD),
open/test/lib/org/openjdk/asmtools/jasm/Modifiers.java:46:                                             ACC_VALUE | ACC_PERMITS_VALUE | ACC_PRIMITIVE;
open/test/lib/org/openjdk/asmtools/jasm/Modifiers.java:67:                                             ACC_VALUE | ACC_PERMITS_VALUE | ACC_PRIMITIVE;
open/test/lib/org/openjdk/asmtools/jasm/Modifiers.java:228:        return (mod & ACC_PERMITS_VALUE) != 0;
open/test/lib/org/openjdk/asmtools/jasm/Modifiers.java:432:            sb.append(Token.PERMITS_VALUE.parseKey() + "" "");
open/test/lib/org/openjdk/asmtools/jasm/RuntimeConstants.java:50:    int ACC_PERMITS_VALUE = 0x0100; // class, inner
open/test/lib/org/openjdk/asmtools/jasm/RuntimeConstants.java:74:                        put(ACC_PERMITS_VALUE,""permits_value"");
open/src/hotspot/share/classfile/classFileParser.cpp:4561:    // The JVMS says that super classes for value types must have the ACC_PERMITS_VALUE
open/src/hotspot/share/classfile/classFileParser.cpp:4563:    // class, it cannot have its ACC_PERMITS_VALUE flag set.  But, java.lang.Object must
open/src/java.base/share/native/include/classfile_constants.h.template:73:#define JVM_ACC_PERMITS_VALUE_BIT 6
open/src/java.base/share/classes/java/lang/Class.java:207:    private static final int PERMITS_VALUE   = 0x00000100;

The remaining PERMITS_VALUE usages are also creating some test failures in the Valhalla CI:

vmTestbase/nsk/jvmti/GetClassModifiers/getclmdf006/TestDescription.java:  		CompilationError: Compilation failed

PERMITS_VALUE should be completely removed from the repository.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yd6r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-25 07:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/726
Date: 2022-08-25 12:07:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/ClassUnloadEventTest.java failed due to classes not unloading,JDK-8292879,5082204,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-08-24 11:29,2023-02-13 23:44,2023-10-01 09:56,2022-10-07 12:15,20,,,,,,20,hotspot,,0,classloading,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,"The test is failing with:

 > java.lang.RuntimeException: Wrong number of class unload events: expected 10 got 0 

Note this is different than JDK-8291456, which fails with:

 > java.lang.RuntimeException: Wrong number of class unload events: expected 10 got 4

com/sun/jdi/ClassUnloadEventTest.java is a newer tests that is testing the generating of JDI ClassUnloadEvents. There were some rare cases of it failing to properly generate the events. JDK-8291456 was filed, and it was determined that the failure was due to the debuggee exiting before jvmti could flush out all the queued up events. This was worked around in the test with a short delay before the debuggee exits. However, the test is still failing, although it is much rarer now. I did try extending the delay before the debuggee exits to 60 seconds, and it still fails, so clearly it's not the same issue as JDK-8291456.

Some unique attributes of this failure when compared to JDK-8291456 include:

1. Always on windows-x64-debug. Not on any other platforms (unlike JDK-8291456).
2. Only with -Xcomp plus some other compiler related options that may or may not also have an impact.
3. The test complains that it got 0 of 10 expected events, whereas for JDK-8291456 is was always 4 of 10
4. Added delay in the debuggee does not fix the problem.

I made some changes to the test to print the output of the debuggee and also turned on -Xlog:class+unload=info, and indeed the test classes are not being unloaded, so this does not appear to be a JVMTI or debug agent issue.

The test uses ClassUnloadCommon.triggerUnloading(), just like many other tests do. I assume this is reliable, but maybe it is not for some reason with this particular test case.

The other possible cause I thought of that is in rare cases the debuggee is compiled in a way that results in a reference to the ClassLoader or a Class being retained.",,,,,,,,,,JDK-8302023,JDK-8302419,JDK-8296038,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256811,JDK-8291456,,,,,,,,,,,,,,,,,,,,,,,,,20,,windows,,,,,,,"0|i2yd63:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-24 11:32;cjplummer;I've added a subtask enable -Xlog:class+unload=info for the debuggee and have the debugger print the debuggee output. I've done this work in my local repo and will get a PR out for it soon.;;;","2022-08-24 12:19;coleenp;Can you add -Xlog:gc and see if GC even runs in this test?;;;","2022-08-24 13:02;cjplummer;Ok. For a passing run it does:

stdout: [0.721s][info][gc          ] GC(0) Pause Full (WhiteBox Initiated Full GC) 25M->16M(160M) 234.640ms

I'll try to reproduce the failure with this logging included. BTW, ClassUnloadCommon.triggerUnloading() does call System.gc():

    private static void allocateMemory(int kilobytes) {
        ArrayList<byte[]> l = new ArrayList<>();
        dummy = l;
        for (int i = kilobytes; i > 0; i -= 1) {
            l.add(new byte[1024]);
        }
        l = null;
        dummy = null;
    }

    public static void triggerUnloading() {
        allocateMemory(16 * 1024); // force young collection
        System.gc();
    }
;;;","2022-08-24 14:03;cjplummer;Clarifying my above comment. The output is actually the following. I'm not even sure what triggers the WhiteBox GC logging at the end (I'll look into it), but there is an earlier GC log also that happens before the debuggee even enters its main method.

stdout: [0.038s][info][gc] Using G1
stdout: Running debuggee
stdout: [0.505s][info][class,unload] unloading class SampleClass__9 0x0000000801003c30
stdout: [0.505s][info][class,unload] unloading class SampleClass__8 0x0000000801003a28
stdout: [0.505s][info][class,unload] unloading class SampleClass__7 0x0000000801003820
stdout: [0.505s][info][class,unload] unloading class SampleClass__6 0x0000000801003618
stdout: [0.505s][info][class,unload] unloading class SampleClass__5 0x0000000801003410
stdout: [0.505s][info][class,unload] unloading class SampleClass__Alt__4 0x0000000801003208
stdout: [0.505s][info][class,unload] unloading class SampleClass__Alt__3 0x0000000801003000
stdout: [0.505s][info][class,unload] unloading class SampleClass__Alt__2 0x0000000801002c10
stdout: [0.505s][info][class,unload] unloading class SampleClass__Alt__1 0x0000000801002a08
stdout: [0.505s][info][class,unload] unloading class SampleClass__Alt__0 0x0000000801002800
stdout: [0.505s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801001c00 0x0000000801001c00
stdout: [0.505s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801001800 0x0000000801001800
stdout: [0.505s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801001000 0x0000000801001000
stdout: [0.721s][info][gc          ] GC(0) Pause Full (WhiteBox Initiated Full GC) 25M->16M(160M) 234.640ms
stdout: Exiting debuggee
;;;","2022-08-24 14:04;coleenp;I changed the code for triggerUnloading to do WhiteBox.fullGC.  Is this G1?  Ok, yes, you're calling the WhiteBox initiated full GC.;;;","2022-08-24 14:17;cjplummer;Ah, I was looking at JDK19 source. JDK20 calls wb.fullGC(). It also no longer forces the youngGen collection.

    public static void triggerUnloading() {
        WhiteBox wb = WhiteBox.getWhiteBox();
        wb.fullGC();  // will do class unloading
    }
;;;","2022-08-24 15:03;cjplummer;Here's the debuggee log from a failed run. Looks like the GC is happening.

Running debugger
EventSet: event set, policy:2, count:1 = {VMStartEvent in thread main}
EventSet: event set, policy:0, count:1 = {VMDeathEvent}
stdout: [0.021s][info][gc] Using G1
stdout: Running debuggee
stdout: [2.435s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801001c00 0x0000000801001c00
stdout: [2.435s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801001800 0x0000000801001800
stdout: [2.435s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801001000 0x0000000801001000
stdout: [2.620s][info][gc          ] GC(0) Pause Full (WhiteBox Initiated Full GC) 3M->0M(16M) 193.745ms
stdout: Exiting debuggee;;;","2022-08-24 15:13;coleenp;It's not unloading the Samples classes though.  Something's keeping them alive.;;;","2022-08-24 15:32;cjplummer;Correct. When it passes it looks like this:

stdout: [0.038s][info][gc] Using G1
stdout: Running debuggee
stdout: [0.505s][info][class,unload] unloading class SampleClass__9 0x0000000801003c30
stdout: [0.505s][info][class,unload] unloading class SampleClass__8 0x0000000801003a28
stdout: [0.505s][info][class,unload] unloading class SampleClass__7 0x0000000801003820
stdout: [0.505s][info][class,unload] unloading class SampleClass__6 0x0000000801003618
stdout: [0.505s][info][class,unload] unloading class SampleClass__5 0x0000000801003410
stdout: [0.505s][info][class,unload] unloading class SampleClass__Alt__4 0x0000000801003208
stdout: [0.505s][info][class,unload] unloading class SampleClass__Alt__3 0x0000000801003000
stdout: [0.505s][info][class,unload] unloading class SampleClass__Alt__2 0x0000000801002c10
stdout: [0.505s][info][class,unload] unloading class SampleClass__Alt__1 0x0000000801002a08
stdout: [0.505s][info][class,unload] unloading class SampleClass__Alt__0 0x0000000801002800
stdout: [0.505s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801001c00 0x0000000801001c00
stdout: [0.505s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801001800 0x0000000801001800
stdout: [0.505s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801001000 0x0000000801001000
stdout: [0.721s][info][gc          ] GC(0) Pause Full (WhiteBox Initiated Full GC) 25M->16M(160M) 234.640ms
stdout: Exiting debuggee
;;;","2022-09-07 05:46;coleenp;This was reported before JDK-8290025 was integrated, so it's not JDK-8290025.  Testing with this change now.

I can reproduce this with post sweeper removal code with mach5 options above.;;;","2022-09-22 11:40;coleenp;I put a ShouldNotReachHere and logging if this class loader is referenced during GC (it shouldn't be alive when GC is called). I don't think SA search raw heap works on windows.

Stack: [0x000000934a000000,0x000000934a100000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc3ad31]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe8db87]  VMError::report+0x10e7  (vmError.cpp:838)
V  [jvm.dll+0xe8f71e]  VMError::report_and_die+0x65e  (vmError.cpp:1686)
V  [jvm.dll+0xe8fe94]  VMError::report_and_die+0x64  (vmError.cpp:1467)
V  [jvm.dll+0x583027]  report_vm_error+0xb7  (debug.cpp:284)
V  [jvm.dll+0x582ee5]  report_should_not_reach_here+0x35  (debug.cpp:334)
V  [jvm.dll+0x6b50c6]  G1FullGCMarker::mark_and_push<enum narrowOop>+0x106  (g1FullGCMarker.inline.hpp:90)
V  [jvm.dll+0x6b81cc]  InstanceMirrorKlass::oop_oop_iterate<enum narrowOop,G1MarkAndPushClosure>+0x14c  (instanceMirrorKlass.inline.hpp:51)
V  [jvm.dll+0x6b60b8]  OopOopIterateDispatch<G1MarkAndPushClosure>::Table::oop_oop_iterate<InstanceMirrorKlass,enum narrowOop>+0x48  (iterator.inline.hpp:111)
V  [jvm.dll+0x6c83c6]  G1FullGCMarker::follow_object+0x216  (g1FullGCMarker.inline.hpp:152)
V  [jvm.dll+0x6c8d60]  G1FullGCMarker::publish_and_drain_oop_tasks+0x450  (g1FullGCMarker.inline.hpp:178)
V  [jvm.dll+0x6c7c69]  G1FullGCMarker::follow_marking_stacks+0x39  (g1FullGCMarker.inline.hpp:198)
V  [jvm.dll+0x6c77ad]  G1FullGCMarker::complete_marking+0x3d  (g1FullGCMarker.cpp:59)
V  [jvm.dll+0x6c6949]  G1FullGCMarkTask::work+0xc9  (g1FullGCMarkTask.cpp:62)
V  [jvm.dll+0xed0ac7]  WorkerThread::run+0x97  (workerThread.cpp:164)
V  [jvm.dll+0xe079a7]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc39678]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791];;;","2022-09-22 13:01;cjplummer;I'm not sure of your point about SA. Are you saying you got a core dump to use with SA, but SA heap searching didn't turn up any references?;;;","2022-09-22 13:28;coleenp;It's on Windows.  I thought I could do jhsdb clhsdb --core hs*mdmp but it doesn't like that.;;;","2022-09-22 14:14;cjplummer;You also need to specify --exe.;;;","2022-09-22 14:17;cjplummer;Another option is to use HeapDumper.dump() just before the ShouldNotReachHere(), and then use a 3rd party tool to look at the hprof file.;;;","2022-09-22 14:56;coleenp;Thanks Chris - I had --exe also, and I added HeapDumper.dump() and a pass to look at thread metadata to see if the class is in a CompileTask or somewhere.  From debugging the mdmp file in windbg, the class that should be unloaded isn't referenced from a compile task, which is unfortunate because that was a good theory.;;;","2022-09-22 15:07;cjplummer;What type of failure is SA giving you? I'm guessing it's having trouble finding referenced libs. I know on linux and macOS we use SA_ALTROOT to fix that, but that's not the case on Windows. Try enabling LIBSAPROC_DEBUG and see what output is produced.;;;","2022-09-28 11:46;coleenp;I put a ShouldNotReachHere() in SerialGC MarkSweep and got a similar crash (with more information in the windows debugger);

V  [jvm.dll+0x582ee5]  report_should_not_reach_here+0x35  (debug.cpp:334)
V  [jvm.dll+0xb65b5a]  MarkSweep::mark_and_push<enum narrowOop>+0x16a  (markSweep.inline.hpp:81)
V  [jvm.dll+0xb67628]  InstanceMirrorKlass::oop_oop_iterate<enum narrowOop,MarkAndPushClosure>+0x138  (instanceMirrorKlass.inline.hpp:51)
V  [jvm.dll+0xb66778]  OopOopIterateDispatch<MarkAndPushClosure>::Table::oop_oop_iterate<InstanceMirrorKlass,enum narrowOop>+0x48  (iterator.inline.hpp:111)
V  [jvm.dll+0xb69166]  MarkSweep::follow_object+0x186  (markSweep.cpp:98)
V  [jvm.dll+0xb64e82]  MarkSweep::follow_root<oop>+0x1d2  (markSweep.cpp:145)
V  [jvm.dll+0x7327f3]  GenCollectedHeap::process_roots+0x1d3  (genCollectedHeap.cpp:770)
V  [jvm.dll+0x7311fb]  GenCollectedHeap::full_process_roots+0x6b  (genCollectedHeap.cpp:803)

Windbg shows inlined functions.  The GC is processing OopStorage -> processing a Mirror for klass ClassUnloadEventTest$TestClassLoader which makes sense since this class loader klass is loaded by the AppClassLoader - the odd thing is that the mirror of the class also points to an instance of the class, which shouldn't exist and should cause the class to be unloaded.;;;","2022-09-29 14:09;coleenp;The debuggee creates a JNI Handle for the Class Objects for the classes that it's supposed to be unloading, but the thread that's supposed to destroy the JNI Handle might be starved out on this machine, so the classes are always strongly referenced, so never gets unloaded.  This is a stack trace of the thread that's supposed to destroy the global jni handle, but this is not how it looks in in windbg.

Stack: [0x00007f534df8d000,0x00007f534e08e000],  sp=0x00007f534e08c9c0,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd5f63a]  JNIHandles::destroy_global(_jobject*)+0x124  (jniHandles.cpp:164)
V  [libjvm.so+0xd1fd90]  jni_DeleteGlobalRef+0xba  (jni.cpp:691)
C  [libjdwp.so+0x39f17]  tossGlobalRef+0x206  (util.c:88)
C  [libjdwp.so+0x26779]  tossEventInfoRefs+0x67  (eventHelper.c:906)
C  [libjdwp.so+0x2541e]  handleEventCommandSingle+0x291  (eventHelper.c:460)
C  [libjdwp.so+0x2588c]  handleReportEventCompositeCommand+0x203  (eventHelper.c:553)
C  [libjdwp.so+0x25b78]  handleCommand+0x60  (eventHelper.c:624)
C  [libjdwp.so+0x25e83]  commandLoop+0xe4  (eventHelper.c:723)
V  [libjvm.so+0xecd8b4]  JvmtiAgentThread::call_start_function()+0x68  (jvmtiImpl.cpp:89)
V  [libjvm.so+0xecd849]  JvmtiAgentThread::start_function_wrapper(JavaThread*, JavaThread*)+0x73  (jvmtiImpl.cpp:83)
V  [libjvm.so+0xc7cacf]  JavaThread::thread_main_inner()+0x16f  (javaThread.cpp:700)
V  [libjvm.so+0xc7c95c]  JavaThread::run()+0x182  (javaThread.cpp:683)
V  [libjvm.so+0x134bd71]  Thread::call_run()+0x195  (thread.cpp:224)
V  [libjvm.so+0x112d3cb]  thread_native_entry(Thread*)+0x19b  (os_linux.cpp:710)

;;;","2022-09-30 15:12;cjplummer;[~coleenp] Thanks for uncovering the Class reference. After putting some more thought into what the test was doing, it's started to makes sense why sometimes classes are not unloading.

One detail Coleen left out above, but mentioned to me in private chat, is she found where the reference to the Class was being allocated. Here's the stack trace:

V  [libjvm.so+0xd5f1ad]  JNIHandles::make_global(Handle, AllocFailStrategy::AllocFailEnum)+0x1f9  (jniHandles.cpp:98)
V  [libjvm.so+0xd1fc95]  jni_NewGlobalRef+0xf5  (jni.cpp:681)
C  [libjdwp.so+0x39c71]  saveGlobalRef+0x27e  (util.c:65)
C  [libjdwp.so+0x26457]  saveEventInfoRefs+0x115  (eventHelper.c:846)
C  [libjdwp.so+0x26d02]  eventHelper_recordEvent+0x10f  (eventHelper.c:1074)
C  [libjdwp.so+0x2dbe5]  handleClassPrepare+0x84  (standardHandlers.c:75)
C  [libjdwp.so+0x1ebe5]  filterAndHandleEvent+0x15d  (eventHandler.c:566)
C  [libjdwp.so+0x1eee4]  event_callback+0x261  (eventHandler.c:666)
C  [libjdwp.so+0x2097e]  cbClassPrepare+0x142  (eventHandler.c:920)
V  [libjvm.so+0xebef9a]  JvmtiExport::post_class_prepare(JavaThread*, Klass*)+0x304  (jvmtiExport.cpp:1396)
V  [libjvm.so+0xc28adf]  InstanceKlass::link_class_impl(JavaThread*)+0x69d  (instanceKlass.cpp:915)

This shows that the reference is a jclass that is created for a ClassPrepareEvent, presumably that is being generated for the last class that the test loads. The debug agent sends the event to the debugger using a different thread than the main debuggee thread. However, it blocks the main debuggee thread until the event is sent. Once sent, it unblocks the debuggee thread and then proceeds to do some cleanup. Part of the cleanup is freeing up a jclass reference to the class by calling DeleteGlobalRef on it. However, before this is done the debuggee main thread resumes and starts a full GC. This causes the debug agent thread to block when it finally gets around to calling DeleteGlobalRef, since this cannot be done while doing a full GC. Coleen showed the thread blocking with the following stack trace:

V [libjvm.so+0xd5f63a] JNIHandles::destroy_global(_jobject*)+0x124 (jniHandles.cpp:164)
V [libjvm.so+0xd1fd90] jni_DeleteGlobalRef+0xba (jni.cpp:691)
C [libjdwp.so+0x39f17] tossGlobalRef+0x206 (util.c:88)
C [libjdwp.so+0x26779] tossEventInfoRefs+0x67 (eventHelper.c:906)
C [libjdwp.so+0x2541e] handleEventCommandSingle+0x291 (eventHelper.c:460)
C [libjdwp.so+0x2588c] handleReportEventCompositeCommand+0x203 (eventHelper.c:553)
C [libjdwp.so+0x25b78] handleCommand+0x60 (eventHelper.c:624)
C [libjdwp.so+0x25e83] commandLoop+0xe4 (eventHelper.c:723)
V [libjvm.so+0xecd8b4] JvmtiAgentThread::call_start_function()+0x68 (jvmtiImpl.cpp:89)
V [libjvm.so+0xecd849] JvmtiAgentThread::start_function_wrapper(JavaThread*, JavaThread*)+0x73 (jvmtiImpl.cpp:83)
V [libjvm.so+0xc7cacf] JavaThread::thread_main_inner()+0x16f (javaThread.cpp:700)
V [libjvm.so+0xc7c95c] JavaThread::run()+0x182 (javaThread.cpp:683)
V [libjvm.so+0x134bd71] Thread::call_run()+0x195 (thread.cpp:224)
V [libjvm.so+0x112d3cb] thread_native_entry(Thread*)+0x19b (os_linux.cpp:710) 

Once the full GC completes, the DeleteGlobalRef can complete, but by then it's too late. The test is done with the GC and expects all classes to be unloaded, but they are not because this one jclass kept them all alive.

Previously I had tried doing two consecutive full GCs, and this did not help. Although technically the debug agent is unblocked between the two GC calls, and could have completed the DeleteGlobalRef, this requires it to get a time slice in the very small window after the end of the first GC and before the start of the second GC, and I guess that just wasn't happening. What does seem to work is a small sleep before the first (and only) GC. This gives the debug agent plenty of time to finish up with the last ClassPrepareEvent before the debuggee triggers the full GC.;;;","2022-09-30 18:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10519
Date: 2022-10-01 01:12:52 +0000;;;","2022-10-07 12:15;dukebot;Changeset: 6a266c4d
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-10-07 19:11:19 +0000
URL:       https://git.openjdk.org/jdk/commit/6a266c4de15d04d50928b68f9b2dbb69911cff13
;;;","2022-10-25 03:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/831
Date: 2022-10-25 09:54:27 +0000;;;"
"java/util/concurrent/atomic/Serial.java uses {Double,Long}Accumulator incorrectly",JDK-8292877,5082198,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-08-24 11:01,2023-02-28 03:56,2023-10-01 09:56,2022-08-25 09:52,11,17,19,20,8,,20,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,"JDK-8026344 added tests that subtly contradict the contract for `{Double,Long}Accumulator`-s, which breaks the tests on some platforms even in the single-threaded case. 

They use accumulators with binary plus as update function and using non-zero values as identity, which breaks once accumulators create many cells, reset their values to identity, and then apply the function over them, producing unexpected values. 

See the investigation on RISC-V here:
  https://mail.openjdk.org/pipermail/riscv-port-dev/2022-August/000594.html",,,,,,,,,,JDK-8299368,JDK-8299298,JDK-8303339,JDK-8299297,,,,,,,,,,,,,,,,,,,,,,,,JDK-8026344,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yd4r:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2022-08-24 11:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10002
Date: 2022-08-24 18:15:17 +0000;;;","2022-08-24 12:18;dl;Thanks for finding and fixing this!;;;","2022-08-25 09:52;dukebot;Changeset: 251bff6b
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-08-25 16:47:58 +0000
URL:       https://git.openjdk.org/jdk/commit/251bff6beeafcd98824dab60e9831c0175fe0689
;;;","2022-12-23 12:34;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-12-23 12:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/985
Date: 2022-12-23 20:35:08 +0000;;;","2023-02-27 01:38;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2023-02-27 01:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1778
Date: 2023-02-27 09:37:59 +0000;;;",,,,,,,,,,,,,,,,
Do not include the deprecated userinfo component of the URI in HTTP/2 headers,JDK-8292876,5082197,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dclarke,dfuchs,dfuchs,2022-08-24 10:46,2023-01-31 03:44,2023-10-01 09:56,2022-10-13 18:40,,,,,,,20,core-libs,,0,httpclient,,,,,,,,,,,,,,,,,,,"The HttpClient should strip the userinfo component of the URI when generating the :authority pseudo header.

RFC 7540 states:

The authority MUST NOT include the deprecated ""userinfo"" subcomponent for ""http""  or ""https"" schemed URIs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yd4j:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-10-06 04:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10592
Date: 2022-10-06 11:35:32 +0000;;;","2022-10-13 18:40;dukebot;Changeset: b30d9220
Author:    Darragh Clarke <Darragh.clarke@oracle.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2022-10-14 01:37:29 +0000
URL:       https://git.openjdk.org/jdk/commit/b30d922009bab114fb8ac200df42b594a72a2942
;;;",,,,,,,,,,,,,,,,,,,,,
Java_sun_awt_shell_Win32ShellFolder2_getLinkLocation check MultiByteToWideChar return value for failures,JDK-8292866,5082185,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-08-24 05:46,2023-02-21 00:19,2023-10-01 09:56,2022-09-11 23:44,17,18,19,20,,,20,client-libs,,0,cssn23_02_02,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"https://docs.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-multibytetowidechar
states about MultiByteToWideChar :  ""The function returns 0 if it does not succeed""  and lists a few failure cases.
However we miss checking the failure cases in Java_sun_awt_shell_Win32ShellFolder2_getLinkLocation , seems we assume the function always works nicely (in most of the JDK coding the return value is checked ).",,,,,,,,,,JDK-8302739,JDK-8296539,JDK-8302682,JDK-8302949,JDK-8294835,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,,"0|i2yd1v:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-08-25 01:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10015
Date: 2022-08-25 08:02:00 +0000;;;","2022-09-11 23:44;dukebot;Changeset: 699c4296
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-09-12 06:41:48 +0000
URL:       https://git.openjdk.org/jdk/commit/699c42962eeaa6aa950ad86c2dd1f77316a1da3e
;;;","2022-09-28 07:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/751
Date: 2022-09-28 14:15:19 +0000;;;","2022-10-04 08:00;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well, because handling the (seldom) error situations by checking the return value should be done there too. Patch is low risk and applies cleanly.;;;","2022-11-04 08:08;mbaesken;jdk11u backport request
I would like to have the patch in jdk11u-dev as well, because handling the (seldom) error situations by checking the return value should be done there too. Patch is low risk and applies cleanly.;;;","2022-11-07 00:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1501
Date: 2022-11-04 15:06:53 +0000;;;",,,,,,,,,,,,,,,,,
assert(_print_inlining_stream->size() > 0) failed: missing inlining msg,JDK-8292863,5082032,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,bstafford,webbuggrp,webbuggrp,2022-08-22 10:29,2023-02-08 03:45,2023-10-01 09:56,2023-01-05 21:20,11,,,,,,11.0.19,hotspot,,0,c2,dcsswa,jdk11u-fix-request,jdk11u-fix-yes,reproducer-yes,sustaining,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: Ubuntu18.04
$ java -version
openjdk version ""11.0.17-internal"" 2022-10-18
OpenJDK Runtime Environment (fastdebug build 11.0.17-internal+0-adhoc.root.jdk11u)
OpenJDK 64-Bit Server VM (fastdebug build 11.0.17-internal+0-adhoc.root.jdk11u, mixed mode)

A DESCRIPTION OF THE PROBLEM :
JVM crashes with option "" -XX:+PrintInlining -XX:+AlwaysIncrementalInline "" on JDK11.

Reproduce:

$ java -XX:+PrintInlining -XX:+AlwaysIncrementalInline TestMethodHandleInvokesIntrinsic

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/root/jdk_source/jdk11u/src/hotspot/share/opto/compile.cpp:4494), pid=31355, tid=31396
#  assert(_print_inlining_stream->size() > 0) failed: missing inlining msg
#
# JRE version: OpenJDK Runtime Environment (11.0.17) (fastdebug build 11.0.17-internal+0-adhoc.root.jdk11u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 11.0.17-internal+0-adhoc.root.jdk11u, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/root/core.31355)


---------- BEGIN SOURCE ----------


---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8299737,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-08-24 03:48;sswsharm;TestMethodHandleInvokesIntrinsic.java;https://bugs.openjdk.org/secure/attachment/100526/TestMethodHandleInvokesIntrinsic.java","2022-08-24 03:47;sswsharm;hotspot_pid1368807.log;https://bugs.openjdk.org/secure/attachment/100523/hotspot_pid1368807.log","2022-08-24 03:47;sswsharm;hs_err_pid1368807.log;https://bugs.openjdk.org/secure/attachment/100524/hs_err_pid1368807.log","2022-08-24 03:47;sswsharm;replay_pid1368807.log;https://bugs.openjdk.org/secure/attachment/100525/replay_pid1368807.log",,,,generic,,,,,,,,,generic,,,,,,,"0|i2yc3v:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-24 04:13;sswsharm;Issue is reproduced.
crash is observed on fastdebug builds when JVM option -XX:+PrintInlining -XX:+AlwaysIncrementalInline is used.

OS: Oracle Linux 8.3  
JDK 11.0.16: Fail
JDK 11.0.16.1: Fail

ILW= HLL = P4

Moving it to dev team for further analysis.;;;","2022-09-23 00:39;dskantz;Is this JDK-8277055?;;;","2022-11-02 04:40;thartmann;It can't be JDK-8277055 because JDK-8257211 is not in JDK 11u.;;;","2022-11-02 06:45;thartmann;I checked and this reproduces until JDK-8257211 in JDK 16 which significantly changed related code and fixed this either intentionally or by accident. I'm not sure if it's worth to extract a fix and backport to JDK 11u because `PrintInlining` is a diagnostic flag and this only reproduces in edge cases with debug flag AlwaysIncrementalInline.;;;","2022-11-02 06:58;thartmann;[~vlivanov], what do you think?;;;","2022-11-02 10:48;vlivanov;I did fix some PrintInlining-related issues in JDK-8257211.

I question I=H assessment: it's an assert failure which signals about missing message which should be rather benign in product binaries (missing information in PrintInlining output).

It does look like a very low priority bug to me.;;;","2022-11-02 11:45;thartmann;Thanks Vladimir, let's lower priority then.;;;","2022-12-14 14:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1595
Date: 2022-12-14 22:35:01 +0000;;;","2023-01-03 15:13;bstafford;Request to fix this issue in jdk11u.

Although this is regarded as a low-priority bug, it causes a JVM crash under certain conditions (PrintInlining with AlwaysIncrementalInline in fastdebug). 

This change is low risk, as the modified code path is invoked only in a diagnostic build. 

The fix does not introduce any failures in any hotspot tests.;;;","2023-01-05 21:20;dukebot;Changeset: 06f769a2
Author:    Dhamoder Nalla <dhanalla@microsoft.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-01-06 05:18:10 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/06f769a2f890225f748b6f89b4683fba0c010673
;;;","2023-02-08 03:45;dukebot;Changeset: 06f769a2
Author:    Dhamoder Nalla <dhanalla@microsoft.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-01-06 05:18:10 +0000
URL:       https://git.openjdk.org/jdk11u/commit/06f769a2f890225f748b6f89b4683fba0c010673
;;;",,,,,,,,,,,,
[11u] TestMemoryWithCgroupV1  fails after JDK-8292768,JDK-8292852,5082171,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pxie,pxie,pxie,2022-08-24 00:50,2023-06-13 09:35,2023-10-01 09:56,2022-08-24 02:19,11.0.17,,,,,,11.0.17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,"[11u] TestMemoryWithCgroupV1  fails after JDK-8292768, Backport of JDK-8284950.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284950,JDK-8292768,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ycyr:",9223372036854775807,b04,,,,,,,,,,,"2022-08-24 01:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1337
Date: 2022-08-24 08:06:47 +0000;;;","2022-08-24 02:19;dukebot;Changeset: 75e4cb38
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-08-24 09:15:27 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/75e4cb38910948634b816e4f4db36b8525d232c8
;;;","2022-08-24 13:00;dukebot;Changeset: 75e4cb38
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-08-24 09:15:27 +0000
URL:       https://git.openjdk.org/jdk11u/commit/75e4cb38910948634b816e4f4db36b8525d232c8
;;;",,,,,,,,,,,,,,,,,,,,
MemorySegment arithmetics performed with int accuracy where long is required ,JDK-8292851,5082170,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,pminborg,pminborg,pminborg,2022-08-23 23:58,2022-09-08 03:26,2023-10-01 09:56,2022-08-24 06:57,repo-panama,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,"The methods MemorySegment::copy are computing the destOffset parameter with int arithmetics when calling ScopedMemoryAccess.getScopedMemoryAccess().copy*Memory. But, for large values of elementCount and arrays of types other than byte[] (e.g. long[]), this may silently overflow causing an undefined value (including negative values) to be used for subsequent Unsafe calls which, in turn, may cause a JVM crash or even worse, may quietly mutate arbitrary process memory.",,14400,14400,,0%,14400,14400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ycyj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-08-24 02:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/712
Date: 2022-08-24 09:14:04 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Unused field 'expiredTimersKey' in javax.swing.TimerQueue,JDK-8292850,5082169,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2022-08-23 23:38,2022-09-06 17:30,2023-10-01 09:56,2022-08-30 03:24,18,19,20,,,,20,client-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,"The field ""javax.swing.TimerQueue.expiredTimersKey"" is not referred to by any code. Seems it can be safely removed.

    private static final Object expiredTimersKey =
        new StringBuffer(""TimerQueue.expiredTimersKey"");",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ycyb:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-08-24 11:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10001
Date: 2022-08-24 18:05:40 +0000;;;","2022-08-30 03:24;dukebot;Changeset: b3450e93
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-08-30 10:22:12 +0000
URL:       https://git.openjdk.org/jdk/commit/b3450e930e52f03ffc3891de7672625ac45b13d0
;;;",,,,,,,,,,,,,,,,,,,,,
AWT_Mixing and TrayIcon tests fail on el8 with hard-coded isOel7,JDK-8292848,5082167,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tkiriyama,tkiriyama,tkiriyama,2022-08-23 23:25,2022-10-05 23:18,2023-10-01 09:56,2022-09-28 00:02,17,18,19,20,,,20,client-libs,,0,,,,,,,,,,,,,,,,,,,,"The following classes have the isOel7 method that determines whether the system property of 
""os.version"" is ""el7"".

test/jdk/java/awt/Mixing/AWT_Mixing/SimpleOverlappingTestBase.java
test/jdk/java/awt/TrayIcon/SystemTrayIconHelper.java

These classes are used in AWT_Mixing and TrayIcon tests, but they return false and cause 
the test to fail on el8 or later.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,,"0|i2ycxv:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-08-24 00:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9995
Date: 2022-08-24 07:06:15 +0000;;;","2022-09-28 00:02;dukebot;Changeset: c13e0ef3
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: Jayathirth D V <jdv@openjdk.org>
Date:      2022-09-28 07:00:38 +0000
URL:       https://git.openjdk.org/jdk/commit/c13e0ef3f8046a979638d6885a732553fc2b126e
;;;",,,,,,,,,,,,,,,,,,,,,
[lworld] add binary compatibility tests,JDK-8292817,5082127,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-08-23 14:26,2022-08-25 10:24,2023-10-01 09:56,2022-08-25 10:24,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"add tests for ""Chapter 13: Binary Compatibility"" changes

[1] http://cr.openjdk.java.net/~dlsmith/jep8277163/jep8277163-20220519/specs/value-objects-jls.html#jls-13",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ycoz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-25 10:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/728
Date: 2022-08-25 17:04:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
GPL Classpath exception missing from assemblyprefix.h,JDK-8292816,5082126,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2022-08-23 14:24,2022-09-25 23:31,2023-10-01 09:56,2022-08-24 06:45,,,,,,,20,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"Add missing to classpath exception to assemblyprefix.h.

Requested by Archana Nogriya, similar to [1].

---

[1] https://mail.openjdk.org/pipermail/jdk-updates-dev/2022-April/013988.html",,,,,,,,,,JDK-8294341,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286029,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ycor:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-08-23 14:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9990
Date: 2022-08-23 21:31:24 +0000;;;","2022-08-24 04:39;dholmes;Why should this file have or require the classpath exception? It isn't a header file included into source code.;;;","2022-08-24 06:45;dukebot;Changeset: 71ab5c95
Author:    Tyler Steele <tsteele@openjdk.org>
Date:      2022-08-24 13:43:55 +0000
URL:       https://git.openjdk.org/jdk/commit/71ab5c95af28497fb31aba8ba9597da71bc4d3d5
;;;","2022-09-07 09:12;tsteele;Hi David,

I believe this is really only for completeness. It can be difficult to be sure that it's safe to consume this code if the exceptions are not all in place.

Tyler;;;","2022-09-07 09:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/656
Date: 2022-09-07 16:10:29 +0000;;;","2022-09-07 13:19;tsteele;[jdk17u]

Request to backport this (trivial) change to 17 to ensure that all files with a GPL copyright header contain the GPL exception. Risk to the codebase is minimal as this change does not affect any runnable code. Pre-submit tests are passing.;;;",,,,,,,,,,,,,,,,,
jvm test RunWithfieldTests.java fails with VerifyError exception,JDK-8292812,5082122,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,hseigel,hseigel,2022-08-23 13:53,2022-08-24 05:17,2023-10-01 09:56,2022-08-24 05:17,repo-valhalla,,,,,,,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,,"Test runtime/valhalla/inlinetypes/withfieldTests/RunWithfieldTests.java fails with the following VerifyError exception:

java.lang.VerifyError: Inconsistent stackmap frames at branch target 275
Exception Details:
  Location:
    RunWithfieldTests.main([Ljava/lang/String;)V @275: new
  Reason:
    Type 'putfieldPrimitive' (current frame, locals[7]) is not assignable to 'QputfieldPrimitive;' (stack map, locals[7])
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ycnv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-23 14:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/725
Date: 2022-08-23 21:34:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
"misc tests failed ""assert(false) failed: graph should be schedulable""",JDK-8292780,5082087,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,dcubed,dcubed,2022-08-23 07:03,2023-01-02 05:12,2023-10-01 09:56,2022-10-04 01:37,16,17,19,20,,,20,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,oracle-triage-11,oracle-triage-20,tier8,,,,,,,,,,,"The following test failed in the JDK20 CI:

applications/dacapo/Dacapo.java

Here's a snippet from the log file:

Stress process main method is started.
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8371/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2f2a28d8-0d03-4502-8fef-7e0bc88031a9/runs/e15c09be-8f73-40e4-8ea7-c7cc0e65ace0/workspace/open/src/hotspot/share/opto/gcm.cpp:1423), pid=31698, tid=31735
#  assert(false) failed: graph should be schedulable
#
# JRE version: Java(TM) SE Runtime Environment (20.0+11) (fastdebug build 20-ea+11-624)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+11-624, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xec048a]  PhaseCFG::schedule_late(VectorSet&, Node_Stack&)+0xc4a
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S34704/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/14bc29d9-4e75-4eb8-b18d-9f07f8aa6167/runs/c9bb1327-9d72-40b3-9c11-47de7506eccd/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_dacapo_Dacapo_java/scratch/0/core.31698)
#
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S34704/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/14bc29d9-4e75-4eb8-b18d-9f07f8aa6167/runs/c9bb1327-9d72-40b3-9c11-47de7506eccd/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_dacapo_Dacapo_java/scratch/0/hs_err_pid31698.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S34704/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/14bc29d9-4e75-4eb8-b18d-9f07f8aa6167/runs/c9bb1327-9d72-40b3-9c11-47de7506eccd/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_dacapo_Dacapo_java/scratch/0/hs_err_pid31698.log
#
# Compiler replay data is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S34704/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/14bc29d9-4e75-4eb8-b18d-9f07f8aa6167/runs/c9bb1327-9d72-40b3-9c11-47de7506eccd/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_dacapo_Dacapo_java/scratch/0/replay_pid31698.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(146/18498)----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f1e601fbbd0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=31735, stack(0x00007f1e22b27000,0x00007f1e22c28000)]


Current CompileTask:
C2: 524483 62814       4       org.h2.index.BaseIndex::getCreateSQL (13 bytes)

Stack: [0x00007f1e22b27000,0x00007f1e22c28000],  sp=0x00007f1e22c229a0,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xec048a]  PhaseCFG::schedule_late(VectorSet&, Node_Stack&)+0xc4a
V  [libjvm.so+0xec0d66]  PhaseCFG::global_code_motion()+0x366
V  [libjvm.so+0xec4b71]  PhaseCFG::do_global_code_motion()+0x51
V  [libjvm.so+0xaeac65]  Compile::Code_Gen()+0x285
V  [libjvm.so+0xaf03c6]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1686
V  [libjvm.so+0x901685]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x675
V  [libjvm.so+0xaff097]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb77
V  [libjvm.so+0xafffa0]  CompileBroker::compiler_thread_loop()+0x650
V  [libjvm.so+0x106427c]  JavaThread::thread_main_inner()+0x22c
V  [libjvm.so+0x1a6e4e0]  Thread::call_run()+0x100
V  [libjvm.so+0x17384f3]  thread_native_entry(Thread*)+0x103",,,,,,,,,,JDK-8299466,JDK-8296358,JDK-8297508,,,,,,,,,,,,,,,,,,,,,,,JDK-8296233,,JDK-8294750,,,,JDK-8252848,,,,,,,,"2022-09-08 16:54;dlong;replay-h2.log;https://bugs.openjdk.org/secure/attachment/100712/replay-h2.log","2022-09-09 16:04;dlong;replay2.log;https://bugs.openjdk.org/secure/attachment/100721/replay2.log",,,,,,x86_64,,,,,,,,,linux,,,,,,,"0|i2ycg3:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-23 20:33;dlong;When I try to reproduce it, I get this:

#  assert(early->dominates(LCA)) failed: early is high enough

We have a couple of those failures in our jdk-20-loom CI.;;;","2022-08-23 20:45;dlong;ILW = assert in C2, unknown impact on product build; seen only with Dacapo so far; disable compilation of affected method = MMM = P3;;;","2022-08-23 21:09;dlong;I got it to crash with the replay file.  It crashes with -XX:+UseParallelGC or -XX:+UseZGC but not -XX:+UseG1GC.
;;;","2022-08-24 18:47;dlong;Both problems, ""early is high enough"" and ""graph should be schedulable"" seem to start with this changeset:

Author: Xiaohong Gong <xgong@openjdk.org>
Date:   Thu Jul 7 08:14:21 2022 +0000

    8286941: Add mask IR for partial vector operations for ARM SVE
    
    Reviewed-by: kvn, jbhateja, njian, ngasson

;;;","2022-09-07 09:25;dcubed;Here's the crashing thread's stack from the jdk-20+14-869-tier8 sighting:

applications/renaissance/RenaissanceStressTest24H.java

---------------  T H R E A D  ---------------

Current thread (0x00007f4fa0233ca0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=2093671, stack(0x00007f4f70dfa000,0x00007f4f70efb000)]


Current CompileTask:
C2:1605189 83043       4       jdk.jfr.internal.consumer.ChunkHeader::refresh (538 bytes)

Stack: [0x00007f4f70dfa000,0x00007f4f70efb000],  sp=0x00007f4f70ef5980,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xed3ffa]  PhaseCFG::schedule_late(VectorSet&, Node_Stack&)+0xc4a  (gcm.cpp:1423)
V  [libjvm.so+0xed48d6]  PhaseCFG::global_code_motion()+0x366  (gcm.cpp:1520)
V  [libjvm.so+0xed86e1]  PhaseCFG::do_global_code_motion()+0x51  (gcm.cpp:1642)
V  [libjvm.so+0xaf7965]  Compile::Code_Gen()+0x285  (compile.cpp:2934)
V  [libjvm.so+0xafd086]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1686  (compile.cpp:856)
V  [libjvm.so+0x90db95]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x675  (c2compiler.cpp:113)
V  [libjvm.so+0xb0b47c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb1c  (compileBroker.cpp:2243)
V  [libjvm.so+0xb0c248]  CompileBroker::compiler_thread_loop()+0x5a8  (compileBroker.cpp:1917)
V  [libjvm.so+0x1071f5c]  JavaThread::thread_main_inner()+0x22c  (javaThread.cpp:700)
V  [libjvm.so+0x1a750c0]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x17449e3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:710);;;","2022-09-08 16:34;dlong;-XX:DisableIntrinsic=_arraycopy seems to be a workaround for the Dacapo crash.;;;","2022-09-08 16:55;dlong;I have attached replay-h2.log which allows reproducing the crashes without the closed Oracle test.  It only requires downloading h2-1.4.196.jar from https://repo1.maven.org/maven2/com/h2database/h2/1.4.196/h2-1.4.196.jar.;;;","2022-09-08 16:59;dlong;[~xgong], you may want to take a look at this, since the problem seems to start after JDK-8286941.  However, the crashes look like similar to others fixed by [~roland] and [~chagedorn].  I'm going to assign to Roland for now.;;;","2022-09-09 08:47;roland;Hi [~dlong] I can't reproduce this with the replay file. Not sure what I'm doing wrong.
I built:

commit 00befddd7ce97d324250807824469daaa9434eef (HEAD -> master, origin/master, origin/HEAD)
Author: Bhavana Kilambi <bkilambi@openjdk.org>
Date:   Fri Sep 9 14:24:23 2022 +0000

    8292675: Add identity transformation for removing redundant AndV/OrV nodes
    
    Reviewed-by: thartmann, ngasson
then:
java  -XX:+UseParallelGC -XX:+ReplayCompiles -XX:ReplayDataFile=replay-h2.log -XX:+ReplayIgnoreInitErrors -cp h2-1.4.196.jar
;;;","2022-09-09 15:52;dlong;[~roland], when I bisected the problem to 8292675 I was running the closed Dacapo test with -XX:+StressGCM -XX:+StressLCM, not using the replay file.  For some reason the replay file does not reproduce the crash at that commit.

I can reproduce the crash with a recent jdk-20 commit, such as 45ff10cc68296c7c73d0eafe6fcc9946ab98267e.  For some reason -XX:UseAVX=3 seems to be required.  When I use -XX:UseAVX=2 the problem goes away.
;;;","2022-09-09 16:04;dlong;With replay-h2.log at commit 45ff10cc68296c7c73d0eafe6fcc9946ab98267e, I am seeing:

  assert(early->dominates(LCA)) failed: early is high enough

in PhaseCFG::insert_anti_dependences().  The original replay file gives:

  assert(false) failed: graph should be schedulable

in PhaseCFG::schedule_late().  I have attached that replay file as replay2.log.;;;","2022-09-13 01:05;roland;[~dlong] thanks. I can reproduce it now. Here is a test case and a tentative fix:
https://github.com/rwestrel/jdk/tree/JDK-8292780

The failure only happens with avx 512 AFAICT. I don't have an avx 512 system handy (I used an emulator for the investigation). Could you verify the fix and have it run through some testing?;;;","2022-09-14 14:31;dlong;[~roland], I verified your fix is good.  With it I no longer see the crashes with replay, Dacapo, or your new test.  I'll run some more testing just to make sure it doesn't cause regressions.  Thanks for fixing this.;;;","2022-09-23 03:20;dlong;Testing results are good too.;;;","2022-09-23 08:39;roland;[~dlong] thanks!;;;","2022-09-23 08:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10410
Date: 2022-09-23 15:48:21 +0000;;;","2022-10-04 01:37;dukebot;Changeset: 16047e83
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-10-04 08:34:29 +0000
URL:       https://git.openjdk.org/jdk/commit/16047e8308a845436f7003e09e604a88bb370632
;;;","2022-11-22 08:04;thartmann;Fix Request (JDK 19u)
Fixes an assert during C2 compilation due to an unschedulable graph. The fix is low risk (bail out from split if) and applies cleanly. Already tested and backported to Oracle JDK 17u.;;;","2022-11-22 08:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/85
Date: 2022-11-22 16:05:02 +0000;;;","2022-12-29 05:12;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Typical risk of a C2 change. But the change is smallish and obvious.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-12-29 05:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1000
Date: 2022-12-29 13:14:24 +0000;;;",,
EncodingSupport_md.c convertUtf8ToPlatformString wrong placing of free,JDK-8292778,5082084,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2022-08-23 06:12,2023-06-29 04:32,2023-10-01 09:56,2022-08-24 00:06,20,,,,,,20,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,There seems to be a case where EncodingSupport_md.c convertUtf8ToPlatformString might leak memory because of a wrong placing of free..,,,,,,,,,,JDK-8297954,JDK-8300772,JDK-8295943,JDK-8311089,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,,"0|i2ycff:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@dc685aa,,,,,,,,,"2022-08-23 07:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9981
Date: 2022-08-23 13:59:53 +0000;;;","2022-08-24 00:06;dukebot;Changeset: ad2e0c4d
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-08-24 07:05:28 +0000
URL:       https://git.openjdk.org/jdk/commit/ad2e0c4df045261c04b00bfa1faf5c21392edc58
;;;","2022-10-19 03:48;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well because the issue is present there too. The patch needs manual adjustment (copyright headers) and is low risk.;;;","2022-10-19 03:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/809
Date: 2022-10-19 10:46:05 +0000;;;","2022-11-25 03:21;mbaesken;jdk11 backport request
I would like to have the patch in jdk11 as well because the issue is present there too. The patch applies cleanly (when using the existing 17u-dev backport) and is low risk.

PR: https://github.com/openjdk/jdk11u-dev/pull/1553;;;","2022-11-25 03:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1553
Date: 2022-11-25 11:19:54 +0000;;;",,,,,,,,,,,,,,,,,
[JVMCI] OutOfMemoryError thrown when attaching the libgraal isolate causes HotSpot to crash.,JDK-8292769,5082072,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tzezula,tzezula,tzezula,2022-08-23 04:14,2023-04-12 13:17,2023-10-01 09:56,2022-08-29 08:50,20,,,,,,20,hotspot,,0,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,"If the libgraal isolate does not have enough heap memory available and its memory is exhausted, this can cause the entire virtual machine to crash. 
...
#  Internal Error (jvmciRuntime.cpp:1121), pid=689738, tid=689776
#  fatal error: Fatal error in JVMCI shared library JavaVM[1] owned by JVMCI runtime 0
...
Current thread (0x00007fc5e8022800):  JavaThread ""JVMCI-native CompilerThread1"" daemon [_thread_in_native, id=689776, stack(0x00007fc6102e6000,0x00007fc6104e7000)]
Current CompileTask:
JVMCI-native:   9962 4257       4       java.util.RegularEnumSet::add (40 bytes)Stack: [0x00007fc6102e6000,0x00007fc6104e7000],  sp=0x00007fc6104e52b0,  free space=2044k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xe28374]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x194
V  [libjvm.so+0x6722d4]  report_fatal(VMErrorType, char const*, int, char const*, ...)+0x104
V  [libjvm.so+0x9c1230]  _fatal()+0x70
C  [libjvmcicompiler.so+0x6a4443]  FunctionPointerLogHandler_fatalError_45f632dec0d6a0795524f3a791e61bc3381552ca+0x53
C  [libjvmcicompiler.so+0x677b1d]  CEntryPointSnippets_reportException_d215e35dd9567af49a7eb4aba62909cbef6f7862+0x3d
C  [libjvmcicompiler.so+0x62e812]  IsolateEnterStub_JNIInvocationInterface_AttachCurrentThread_29883937914c419714881fd5ebb1b75dbb58d331_ac0376f5f1c4519caaa32ad8c4c7a6d7c1515b3c+0x122
V  [libjvm.so+0x9c47de]  JVMCIRuntime::AttachCurrentThread(JavaThread*, void**, void*)+0xde
V  [libjvm.so+0x969810]  JVMCIEnv::init_env_mode_runtime(JavaThread*, JNIEnv_*)+0x240
V  [libjvm.so+0x621e0d]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x108d
V  [libjvm.so+0x622378]  CompileBroker::compiler_thread_loop()+0x3f8
V  [libjvm.so+0xdc2e4f]  JavaThread::thread_main_inner()+0x10f
V  [libjvm.so+0xdbfb50]  Thread::call_run()+0x140
V  [libjvm.so+0xc2aa76]  thread_native_entry(Thread*)+0xf6
...

A possible solution is to abort a compilation when the `AttachCurrentThread` fails with `JNI_ENOMEM`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305932,,,,,,,,,,,,"2022-08-23 04:21;tzezula;hs_err_pid679001.log;https://bugs.openjdk.org/secure/attachment/100520/hs_err_pid679001.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2yccr:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Not verified,,"2022-08-23 05:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9978
Date: 2022-08-23 12:03:02 +0000;;;","2022-08-23 20:59;dlong;ILW = crash; with libgraal sees OOM; no workaround = HLH = P2;;;","2022-08-29 08:50;dukebot;Changeset: 30def49c
Author:    Tomas Zezula <tzezula@openjdk.org>
Committer: Doug Simon <dnsimon@openjdk.org>
Date:      2022-08-29 15:46:50 +0000
URL:       https://git.openjdk.org/jdk/commit/30def49c7286e2a6c2585bc85084b003eec4543a
;;;","2023-01-20 00:33;enikitin;No way to verify, so I close it as is.;;;",,,,,,,,,,,,,,,,,,,
JDK-8292716 breaks configure without jtreg,JDK-8292763,5082065,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,ihse,ihse,ihse,2022-08-23 01:13,2023-07-12 02:18,2023-10-01 09:56,2022-08-23 01:35,20,,,,,,20,infrastructure,,0,build-infra,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"The fix for JDK-8292716 was supposed to verify version number requirements for jtreg. Unfortunately, it breaks configure if no jtreg is supplied.",,,,,,,,,,JDK-8311930,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292716,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ycb7:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-08-23 01:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9975
Date: 2022-08-23 08:15:46 +0000;;;","2022-08-23 01:35;dukebot;Changeset: d92e00a5
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-08-23 08:32:02 +0000
URL:       https://git.openjdk.org/jdk/commit/d92e00a5191e8b50a5a17e3cd0105dbfb5a00281
;;;","2023-07-11 06:26;goetz;Fix request [17u]

Required follow-up to 8392716.
GHA and SAP nightly testing passed.;;;","2023-07-11 07:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1568
Date: 2023-07-11 11:48:57 +0000;;;",,,,,,,,,,,,,,,,,,,
java.lang.AssertionError at at jdk.compiler/com.sun.tools.javac.code.Scope$ScopeImpl.leave(Scope.java:386) ,JDK-8292756,5081953,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,webbuggrp,webbuggrp,2022-08-19 09:28,2023-01-09 08:22,2023-10-01 09:56,2022-09-22 07:34,19,20,,,,,20,tools,,0,dcsad,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
java.lang.AssertionError


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile the code below

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Should compile I think. It's hard to tell if there's an error or not though.
ACTUAL -
java.lang.AssertionError
	at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
	at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
	at jdk.compiler/com.sun.tools.javac.code.Scope$ScopeImpl.leave(Scope.java:386)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1465)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1082)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:687)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:761)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1253)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:912)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:687)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:761)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5601)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5492)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5316)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5255)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1317)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
	at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)

--release
19
--enable-preview
/Users/jordanzimmerman/Downloads/test/Test.java


---------- BEGIN SOURCE ----------
package test;

import java.lang.reflect.*;
import java.util.List;

public class Test { 
    public void test(List<Object> values, Class<?> collectionClass, Type componentType) {
        Class<?> primitiveClass = (componentType instanceof Class<?> clazz) && clazz.isPrimitive() ? clazz : null;
        Object tab = Array.newInstance(collectionClass, values.size());
        for (int i = 0; i < values.size(); ++i) {
            Object value = values.get(i);
            switch (value) {
                case null -> Array.set(tab, i, value);
                case Byte b when primitiveClass.equals(Byte.class) || primitiveClass.equals(byte.class) -> Array.setByte(tab, i, b);
                case Short s when primitiveClass.equals(Short.class) || primitiveClass.equals(short.class) -> Array.setShort(tab, i, s);
                case Character c when primitiveClass.equals(Character.class) || primitiveClass.equals(char.class) -> Array.setChar(tab, i, c);
                case Integer v when primitiveClass.equals(Integer.class) || primitiveClass.equals(int.class) -> Array.setInt(tab, i, v);
                case Long l when primitiveClass.equals(Long.class) || primitiveClass.equals(long.class) -> Array.setLong(tab, i, l);
                case Float f when primitiveClass.equals(Float.class) || primitiveClass.equals(float.class) -> Array.setFloat(tab, i, f);
                case Double d when primitiveClass.equals(Double.class) || primitiveClass.equals(double.class) -> Array.setDouble(tab, i, d);
                default -> throw new RuntimeException();    // TODO
            }
        }
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8294443,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294337,JDK-8296790,,,,,,,,,,,,,"2022-08-22 21:57;adev;Test.java;https://bugs.openjdk.org/secure/attachment/100515/Test.java",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2ybmb:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-22 22:21;adev;The issue is reproducible. 
Compiler crashes with AssertionError on given reproducer.

javac --release 19 --enable-preview Test.java ;;;","2022-09-19 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10347
Date: 2022-09-19 18:13:27 +0000;;;","2022-09-22 07:34;dukebot;Changeset: 0be2b2c2
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-09-22 14:33:07 +0000
URL:       https://git.openjdk.org/jdk/commit/0be2b2c2f1b670bbcd3a8e17bc9b43a534909da5
;;;","2022-09-25 04:12;jlahoda;Fix Request

javac crashes in some cases, making experiments with patterns in switch more difficult. The fix passes tests, and should be safe.;;;","2022-09-25 04:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/39
Date: 2022-09-25 11:07:48 +0000;;;","2022-09-25 21:14;adev;Request to backport to JDK 19:

Several benefits of backporting to JDK 19:

+ Build tools like Gradle wouldn't support JDK 20 until GA, so having a serious bug in JDK 19 = having a JDK 19 without record patterns at all.
+ Users won't be able to extensively test the feature without being able to use the feature. Preview features are supposed to be tested.
+ Bug-fix updates are supposed to deliver bug-fixes, and this is a bug-fix. ;;;",,,,,,,,,,,,,,,,,
Non-default method in interface leads to a stack overflow in JShell,JDK-8292755,5081977,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,webbuggrp,webbuggrp,2022-08-20 02:55,2023-04-28 08:30,2023-10-01 09:56,2022-09-14 01:55,19,20,,,,,20,tools,,0,dcsad,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Run jshell with the enclosed sample files. You will get StackOverflowError

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
jshell --enable-preview JsonToken.java SerializeTest.java


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
jshell should run and load the Java files
ACTUAL -
Exception in thread ""main"" java.lang.InternalError: Exception during analyze - java.lang.StackOverflowError
	at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:415)
	at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.<init>(TaskFactory.java:406)
	at jdk.jshell/jdk.jshell.TaskFactory.lambda$analyze$1(TaskFactory.java:178)
	at jdk.jshell/jdk.jshell.TaskFactory.lambda$runTask$4(TaskFactory.java:213)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskPool.getTask(JavacTaskPool.java:193)
	at jdk.jshell/jdk.jshell.TaskFactory.runTask(TaskFactory.java:206)
	at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:175)
	at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:161)
	at jdk.jshell/jdk.jshell.Eval.compileAndLoad(Eval.java:1060)
	at jdk.jshell/jdk.jshell.Eval.declare(Eval.java:893)
	at jdk.jshell/jdk.jshell.Eval.eval(Eval.java:140)
	at jdk.jshell/jdk.jshell.JShell.eval(JShell.java:493)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSource(JShellTool.java:3624)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSourceCatchingReset(JShellTool.java:1348)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processInput(JShellTool.java:1246)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.run(JShellTool.java:1217)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.runFile(JShellTool.java:3105)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.start(JShellTool.java:962)
	at jdk.jshell/jdk.internal.jshell.tool.JShellToolBuilder.start(JShellToolBuilder.java:261)
	at jdk.jshell/jdk.internal.jshell.tool.JShellToolProvider.main(JShellToolProvider.java:120)
Caused by: java.lang.IllegalStateException: java.lang.StackOverflowError
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:383)
	at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:412)
	... 19 more
Caused by: java.lang.StackOverflowError
	at jdk.compiler/com.sun.tools.javac.code.Type.equalsIgnoreMetadata(Type.java:513)
	at jdk.compiler/com.sun.tools.javac.code.Types.isSubtype(Types.java:1083)
	at jdk.compiler/com.sun.tools.javac.code.Types.isSubtype(Types.java:1077)
	at jdk.compiler/com.sun.tools.javac.code.Types.isSuperType(Types.java:1304)
	at jdk.compiler/com.sun.tools.javac.code.Types.isSubtype(Types.java:1086)


---------- BEGIN SOURCE ----------
JsonToken.java

public sealed interface JsonToken
{
    record BeginArrayToken()
            implements JsonToken {}

    record EndArrayToken()
            implements JsonToken {}

    record BeginObjectToken()
            implements JsonToken {}

    record EndObjectToken()
            implements JsonToken {}

    record ObjectNameToken(String name)
            implements JsonToken {}

    record ValueSeparatorToken()
            implements JsonToken {}

    record StringToken(String value)
            implements JsonToken {}

    record NumberToken(Number value)
            implements JsonToken {}

    record BooleanToken(boolean value)
            implements JsonToken {}

    record NullToken()
            implements JsonToken {}
}

======================

SerializeTest.java

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.RecordComponent;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Stream;

public interface JsonSerializer
{
    static JsonSerializer instance()
    {
        return new JsonSerializer() {};
    }

    default Stream<JsonToken> serialize(Object o)
    {
        return switch (o) {
            case null -> Stream.of(new JsonToken.NullToken());
            case String str -> Stream.of(new JsonToken.StringToken(str));
            case Number n -> Stream.of(new JsonToken.NumberToken(n));
            case Boolean b -> Stream.of(new JsonToken.BooleanToken(b));
            case Enum<?> e -> Stream.of(new JsonToken.StringToken(e.name()));
            case Optional<?> optional -> serialize(optional.orElse(null));
            case Collection<?> collection -> serializeCollection(collection);
            case Object ignore when o.getClass().isRecord() -> serializeRecord(o);
            default -> throw new IllegalArgumentException();    // we don't support this type
        };
    }

    Stream<JsonToken> serializeCollection(Collection<?> collection)
    {
        Stream.Builder<Stream<JsonToken>> builder = Stream.builder();
        builder.accept(Stream.of(JsonToken.BeginArrayToken.INSTANCE));
        boolean first = true;
        for (Object value : collection) {
            if (first) {
                first = false;
            }
            else {
                builder.add(Stream.of(JsonToken.ValueSeparatorToken.INSTANCE));
            }
            builder.accept(serialize(value));
        }
        builder.accept(Stream.of(JsonToken.EndArrayToken.INSTANCE));
        return builder.build().flatMap(Function.identity());
    }

    Stream<JsonToken> serializeRecord(Object record)
    {
        RecordComponent[] recordComponents = record.getRecordComponents();
        Stream.Builder<Stream<JsonToken>> builder = Stream.builder();
        builder.accept(Stream.of(JsonToken.BeginObjectToken.INSTANCE));
        boolean first = true;
        for (RecordComponent recordComponent : recordComponents) {
            if (first) {
                first = false;
            }
            else {
                builder.accept(Stream.of(JsonToken.ValueSeparatorToken.INSTANCE));
            }
            builder.accept(Stream.of(new JsonToken.ObjectNameToken(recordComponent.getName())));
            try {
                Object o = recordComponent.getAccessor().invoke(record);
                builder.accept(serialize(o));
            }
            catch (IllegalAccessException | InvocationTargetException e) {
                throw new RuntimeException(e);
            }
        }
        builder.accept(Stream.of(JsonToken.EndObjectToken.INSTANCE));
        return builder.build().flatMap(Function.identity());
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8305394,JDK-8306235,JDK-8306293,,,,,,,,,,,,,,,,,,,,,,,JDK-8302862,,JDK-8305714,,,,,,,,,,,,"2022-08-22 21:35;adev;JsonToken.java;https://bugs.openjdk.org/secure/attachment/100513/JsonToken.java","2022-08-22 21:35;adev;SerializeTest.java;https://bugs.openjdk.org/secure/attachment/100514/SerializeTest.java",,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2ybrn:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-08-22 21:35;adev;The issue is reproducible. 
Stackoverflow occurs while loading the files in jshell.

jshell --enable-preview JsonToken.java SerializeTest.java ;;;","2022-09-08 09:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10221
Date: 2022-09-08 16:46:49 +0000;;;","2022-09-14 01:55;dukebot;Changeset: 2a387918
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-09-14 08:51:03 +0000
URL:       https://git.openjdk.org/jdk/commit/2a3879180e63aa0a7a19479f061fe78d7885da7b
;;;","2023-04-16 07:54;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Fix in tools, acceptable risk, reproducable fix.
Clean backport.
Tests pass and fail without the fix. SAP nightly testing passed.;;;","2023-04-16 07:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1245
Date: 2023-04-16 14:50:58 +0000;;;",,,,,,,,,,,,,,,,,,
[lworld] javac is accepting erroneous synchronized statements,JDK-8292753,5082055,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-08-22 20:49,2022-08-29 10:31,2023-10-01 09:56,2022-08-29 10:31,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"javac should issue an error for this code:

value class C<T extends C> {
    void m(T t) {
        synchronized(t) {}
    }
}

as type variable T is bounded by a value class. Also this code should be rejected:

value class C<T extends C> {
    void foo(Object o) {
        synchronized ((C & I)o) {}  // one of the superclasses of the intersection type is a value class
    }
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yc8z:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-23 11:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/724
Date: 2022-08-23 18:25:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Missing include resourceHash.hpp,JDK-8292743,5082040,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,coleenp,coleenp,coleenp,2022-08-22 12:49,2023-01-20 00:31,2023-10-01 09:56,2022-08-22 13:34,20,,,,,,20,hotspot,,0,noreg-build,,,,,,,,,,,,,,,,,,,"The missing include makes the build fail.  It must have built with precompiled headers or something before, but it breaks the build now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292596,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yc5n:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-08-22 12:51;dcubed;Bumping from P2 -> P1 which is what we normally use
for build breakage.;;;","2022-08-22 13:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9969
Date: 2022-08-22 20:00:23 +0000;;;","2022-08-22 13:34;dukebot;Changeset: 27af0144
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-08-22 20:31:31 +0000
URL:       https://git.openjdk.org/jdk/commit/27af0144ea57e86d9b81c2b328fad66e4a046f61
;;;","2023-01-20 00:31;enikitin;The products builds normally, therefore I consider this verified.;;;",,,,,,,,,,,,,,,,,,,
Invalid legacy entries may be returned by Provider.getServices() call,JDK-8292739,5082036,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,valeriep,valeriep,valeriep,2022-08-22 11:32,2022-09-06 17:23,2023-10-01 09:56,2022-08-24 11:24,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,,,"Just like Provider.getService(String, String) impl which checks for validness of legacy entry before returning it, Provider.getServices() impl should also check for validness and only include valid legacy entries in the returned set. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276660,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yc4r:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-08-22 11:37;valeriep;Check and remove invalid legacy entries inside Provider.getServices() impl.;;;","2022-08-23 17:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9992
Date: 2022-08-24 00:07:21 +0000;;;","2022-08-24 11:24;dukebot;Changeset: 14623c60
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2022-08-24 18:23:19 +0000
URL:       https://git.openjdk.org/jdk/commit/14623c6087105a4228ff190e9e27372729b2bc4b
;;;",,,,,,,,,,,,,,,,,,,,
JInternalFrame backgroundShadowBorder & foregroundShadowBorder line is longer in Mac Look and Feel,JDK-8292738,5082031,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-08-22 10:15,2022-09-14 21:38,2023-10-01 09:56,2022-09-12 08:54,,,,,,,20,client-libs,,0,,,,,,,,,,,,,,,,,,,,"JInternalFrame BackgroundShadowBorder line is longer in Mac Look and Feel.  
Step to reproduce
--------------------------
1) Run SwingSet2 in Mac Look And Feel
2) Select Internal Frames Demo.
3) Observe that JInternal Frame top BackgroundShadowBorder line. If you see the line passing the curve of the rectangle then the bug is reproduced.

I have attached the screen shot of the same. Just to make the line visible I modified AquaInternalFrameUI.java class to show the BackgroundShadowBorder line to be red.  I have attached the screen shot of the same.
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-08-22 14:14;landrews;Fixed.png;https://bugs.openjdk.org/secure/attachment/100512/Fixed.png","2022-08-22 10:14;landrews;Screen Shot 2022-08-22 at 11.20.25 AM.png;https://bugs.openjdk.org/secure/attachment/100509/Screen+Shot+2022-08-22+at+11.20.25+AM.png","2022-08-22 10:14;landrews;Screen Shot 2022-08-22 at 12.09.02 PM.png;https://bugs.openjdk.org/secure/attachment/100508/Screen+Shot+2022-08-22+at+12.09.02+PM.png",,,,,x86,,,,,,,,,os_x,,,,,,,"0|i2yc3n:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-08-22 14:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9971
Date: 2022-08-22 21:20:54 +0000;;;","2022-09-12 08:54;dukebot;Changeset: cea409cc
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-09-12 15:50:25 +0000
URL:       https://git.openjdk.org/jdk/commit/cea409cc2822ccdc9cbf6df04d46742e3c73b0fe
;;;",,,,,,,,,,,,,,,,,,,,,
Clean up checking of testing requirements in configure,JDK-8292717,5082009,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-08-22 04:34,2023-08-30 01:56,2023-10-01 09:56,2022-08-22 06:09,17,20,,,,,20,infrastructure,,0,build-infra,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"When looking at JDK-8292716, I noticed the code for checking testing requirements where all over the place, most notably ill-placed in toolchain.m4.

We need to fix this.",,,,,,,,,,JDK-8315346,,,,,,,,,,,,,,,,,,,JDK-8292716,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ybyr:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-08-22 05:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9964
Date: 2022-08-22 11:37:40 +0000;;;","2022-08-22 06:09;dukebot;Changeset: 16593cf5
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-08-22 13:07:23 +0000
URL:       https://git.openjdk.org/jdk/commit/16593cf51c3d994ba4a6d28ab97e519dfd53f37b
;;;","2023-08-24 23:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1693
Date: 2023-08-24 14:38:38 +0000;;;","2023-08-29 22:46;shade;Fix Request (17u)

Cleans up build system in preparation for dependency updates. Applies cleanly if we re-apply some previous backports. See 17u PR, acked by Christoph Langer.;;;",,,,,,,,,,,,,,,,,,,
Configure should check that jtreg is of the required version,JDK-8292716,5082008,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-08-22 04:32,2023-07-12 02:18,2023-10-01 09:56,2022-08-23 00:48,20,,,,,,20,infrastructure,,0,build-infra,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,While reviewing the PR for JDK-8289798 (switching to jtreg 7) I realized that it would be better if configure checked if the provided jtreg is of the minimum required version.,,,,,,,,,,JDK-8311929,,,,,,,,,,,,,,,,,,JDK-8292717,,,,,,,,,JDK-8292763,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ybyj:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-08-22 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9965
Date: 2022-08-22 12:54:43 +0000;;;","2022-08-23 00:48;dukebot;Changeset: 486f90c1
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-08-23 07:45:03 +0000
URL:       https://git.openjdk.org/jdk/commit/486f90c134f3b8562221839f8a3aefa74ae0d070
;;;","2023-07-11 04:50;goetz;Fix request [17u]

I would like to backport this to 17 to make configure more stable.
No risk, build change adressing testing.
Code had to be added to another file, but is unchanged. I am including 8292763.
GHA and SAP nightly testing passed.
;;;","2023-07-11 04:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1568
Date: 2023-07-11 11:48:57 +0000;;;",,,,,,,,,,,,,,,,,,,
Cleanup Problemlist,JDK-8292715,5082006,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2022-08-22 04:18,2022-09-06 17:23,2023-10-01 09:56,2022-08-25 00:39,20,,,,,,20,client-libs,,0,sn_125,,,,,,,,,,,,,,,,,,,"java/awt/KeyboardFocusmanager/TypeAhead/SubMenuShowTest/SubMenuShowTest.java 8273520 macosx-all

JDK-8273520 closed as dup of JDK-8273506. JDK-8273506  is Fixed in JDK 19

java/awt/Frame/FrameLocation/FrameLocation.java 8238436 linux-all

JDK-8238436 Fixed in JDK 18

javax/swing/JTree/4633594/JTreeFocusTest.java 8173125 macosx-all

should be changed to 

javax/swing/JTree/4633594/JTreeFocusTest.java 7105441 macosx-all

since JDK-8173125 is closed a dup of JDK-7105441",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yby3:",9223372036854775807,b13,,,,,,,,,,,"2022-08-22 05:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9963
Date: 2022-08-22 11:23:08 +0000;;;","2022-08-25 00:39;dukebot;Changeset: 5a20bc44
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-08-25 07:34:38 +0000
URL:       https://git.openjdk.org/jdk/commit/5a20bc44b1fb4edb6ab714191cdc6c3f33ac9836
;;;",,,,,,,,,,,,,,,,,,,,,
sun/security/tools/jarsigner/compatibility/Compatibility.java use wrong key size for EC,JDK-8292704,5081995,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdonovan,ssahoo,ssahoo,2022-08-22 00:57,2023-07-12 13:26,2023-10-01 09:56,2023-06-22 11:44,19,20,21,,,,22,security-libs,,0,amazon-interest,hgupdate-sync,noreg-self,testbug,,,,,,,,,,,,,,,,"Test: sun/security/tools/jarsigner/compatibility/Compatibility.java

The Test is using wrong key size for EC Line:462
return new int[] { 384, 571, 0 }; // 0 is no keysize specified
It should be 521 instead of 571.

Also there are few Test output pattern mismatch exist which marks the Passed testcase to Failed.
Ex: The Test failed with message 
java.lang.RuntimeException: The line '    Signature algorithm: SHA384withRSA, 3072-bit key' does not match pattern '^  (  Signature algorithm: DEFAULTwithRSA, 3072-bit key)|(  Digest algorithm: SHA-512)$'

Here it looks like the Test expected pattern message has been modified in jarsigner output which cause the mismatch and it need correction in Test file.",,,,,,,,,,JDK-8311057,JDK-8311357,,,,,,,,,,,,,,,,,,,,,,JDK-8290517,JDK-8299189,JDK-8310894,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ybvn:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-06-21 11:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14602
Date: 2023-06-21 18:46:41 +0000;;;","2023-06-22 11:44;dukebot;Changeset: 130a9f13
Author:    Matthew Donovan <mdonovan@openjdk.org>
Date:      2023-06-22 18:43:27 +0000
URL:       https://git.openjdk.org/jdk/commit/130a9f138759c2f8504a83a6f3a93b1f219f0a42
;;;","2023-06-27 13:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/74
Date: 2023-06-27 20:44:01 +0000;;;",,,,,,,,,,,,,,,,,,,,
ZGC: Hangs when almost out of metaspace memory,JDK-8292697,5081979,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,stefank,dcubed,dcubed,2022-08-20 06:46,2023-01-31 00:27,2023-10-01 09:56,2022-08-26 06:49,20,,,,,,20,hotspot,,0,intermittent,tier3,zgc,,,,,,,,,,,,,,,,,"The following test timed out in the JDK20 CI:

vmTestbase/metaspace/shrink_grow/ShrinkGrowMultiJVM/ShrinkGrowMultiJVM.java

Here's a snippet from the log file:

#section:driver
----------messages:(8/320)----------
command: driver metaspace.shrink_grow.ShrinkGrowMultiJVM.ShrinkGrowMultiJVM
reason: User specified action: run driver metaspace.shrink_grow.ShrinkGrowMultiJVM.ShrinkGrowMultiJVM 
Mode: agentvm
Agent id: 7
Timeout refired 480 times
Timeout information:
--- Timeout information end.
elapsed time (seconds): 985.07
----------configuration:(18/1972)*----------

<snip>

----------System.out:(15/1074)*----------
%arg #0: c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+12-692\\windows-x64-debug.jdk\\jdk-20\\fastdebug\\bin\\java
%arg #1: -Xlog:gc:gc_$i.log
%arg #2: -XX:MetaspaceSize=10m
%arg #3: -XX:MaxMetaspaceSize=20m
%arg #4: -cp
%arg #5: C:\\sb\\prod\\1661000537\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_vm_metaspace\\classes\\5\\vmTestbase\\metaspace\\shrink_grow\\ShrinkGrowMultiJVM\\ShrinkGrowMultiJVM.d;C:\\sb\\prod\\1661000537\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_vm_metaspace\\classes\\5\\vmTestbase;C:\\sb\\prod\\1661000537\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_vm_metaspace\\classes\\5\\test\\lib
%arg #6: -XX:MaxRAMPercentage=4.16667
%arg #7: -Djava.io.tmpdir=c:\\sb\\prod\\1661000537\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_vm_metaspace\\tmp
%arg #8: -XX:+CreateCoredumpOnCrash
%arg #9: -XX:+UseZGC
%arg #10: metaspace.shrink_grow.ShrinkGrowTest.ShrinkGrowTest
%arg #11: jvm#$i
=== process #0 started
=== process #1 started
=== proces
result: Error. Agent error: java.lang.Exception: Agent 7 timed out with a timeout of 480 seconds; check console log for any additional details",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301453,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,,"0|i2ybs3:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2022-08-20 06:53;dcubed;I was going to start this bug in hotspot/runtime for initial triage
since its a metaspace test, but then I noticed that ZGC was
used in this config. So starting this in hotspot/gc just in case
there's something ZGC going on that I don't know about...;;;","2022-08-22 05:49;stefank;This looks to be a race in the MetaspaceCriticalAllocation code.

HotSpot performs ""critical metaspace allocations"" when it's running out of metaspace. The failed allocations are registered in a queue, which the GC prioritizes when cleaning up the metaspace. There's a race in the code that handles these requests.

These requests are added to the queue, and the GC will ""satisfy"" each request in turn when it runs the metaspace purge phase. The queue handling has an optimization that says that only the first request in the queue needs to trigger the GC, all subsequent requests in the queue will wait for that GC. When the GC gets to the purge phase it will mark in all requests that they ""have a results"". Note: that this doesn't mean that the request was satisfied, it could be that the result was NULL (and it is time to throw an OOME). See: has_result().

The bug is in the code that determines if a request is responsible for triggering a new GC. The current code just checks if the current request is first in the queue. This doesn't work if the code is called just after the GC has run purge, but before the old requests have been removed. The new request sees that there are already elements in the queue, so it doesn't trigger the GC. And at the same time, the old requests are done and they won't trigger the GC either. So, now the new request is waiting for a GC that will not be triggered by anyone.

Note: The reason why there's a delay between the GC processing a request, and the removal from the queue, is that the Java thread that added the request is also responsible for removing the request form the queue.

Two solutions to investigate:
1) Filter out has_result() requests when checking if the current request should trigger a new GC
2) Don't leave requests lingering in the queue after they have been satisfied
;;;","2022-08-22 06:03;stefank;The code is a bit more subtle than what's described above. If the GC fails to satisfy a request, it is assigned null and has_result() returns true, but the Java thread will then trigger a new GC before proceeding.;;;","2022-08-22 06:59;stefank;Stack traces for stuck threads (on macOS, with Generational ZGC):
```
    frame #2: 0x000000010332b67c libjvm.dylib`os::PlatformMonitor::wait(this=0x00006000034f4a30, millis=<unavailable>) at os_posix.cpp:1926:18 [opt]
    frame #3: 0x00000001032b6024 libjvm.dylib`Monitor::wait_without_safepoint_check(this=0x00006000034f4a20, timeout=0) at mutex.cpp:226:27 [opt]
    frame #4: 0x0000000103260248 libjvm.dylib`MetaspaceCriticalAllocation::wait_for_purge(request=0x000000016fb5cda0) at metaspaceCriticalAllocation.cpp:135:29 [opt]
    frame #5: 0x0000000103260478 libjvm.dylib`MetaspaceCriticalAllocation::allocate(ClassLoaderData*, unsigned long, Metaspace::MetadataType) [inlined] MetaspaceCriticalAllocation::try_allocate_critical(request=0x000000016fb5cda0) at metaspaceCriticalAllocation.cpp:124:3 [opt]
    frame #6: 0x0000000103260428 libjvm.dylib`MetaspaceCriticalAllocation::allocate(loader_data=<unavailable>, word_size=<unavailable>, type=<unavailable>) at metaspaceCriticalAllocation.cpp:174:7 [opt]
    frame #7: 0x000000010325c3c8 libjvm.dylib`Metaspace::allocate(loader_data=0x0000600002a61ed0, word_size=8, type=TypeArrayU1Type, __the_thread__=0x000000012f808210) at metaspace.cpp:918:34 [opt]
    frame #8: 0x0000000102a034f4 libjvm.dylib`Array<unsigned char>* MetadataFactory::new_array<unsigned char>(ClassLoaderData*, int, unsigned char, JavaThread*) [inlined] Array<unsigned char>::operator new(size=8, loader_data=<unavailable>, length=50, __the_thread__=0x000000012f808210) at array.inline.hpp:36:18 [opt]
    frame #9: 0x0000000102a034dc libjvm.dylib`Array<unsigned char>* MetadataFactory::new_array<unsigned char>(ClassLoaderData*, int, unsigned char, JavaThread*) [inlined] Array<unsigned char>* MetadataFactory::new_array<unsigned char>(loader_data=<unavailable>, length=50, __the_thread__=0x000000012f808210) at metadataFactory.hpp:40:12 [opt]
    frame #10: 0x0000000102a034dc libjvm.dylib`Array<unsigned char>* MetadataFactory::new_array<unsigned char>(loader_data=<unavailable>, length=50, value='\0', __the_thread__=0x000000012f808210) at metadataFactory.hpp:45:23 [opt]
    frame #11: 0x0000000102a04450 libjvm.dylib`ConstantPool::allocate(loader_data=0x0000600002a61ed0, length=50, __the_thread__=0x000000012f808210) at constantPool.cpp:66:21 [opt]
    frame #12: 0x00000001029724e8 libjvm.dylib`ClassFileParser::parse_stream(this=0x000000016fb5d140, stream=0x000000016fb5d508, __the_thread__=0x000000012f808210) at classFileParser.cpp:5761:9 [opt]
    frame #13: 0x0000000102972290 libjvm.dylib`ClassFileParser::ClassFileParser(this=0x000000016fb5d140, stream=0x000000016fb5d508, name=<unavailable>, loader_data=<unavailable>, cl_info=<unavailable>, pub_level=<unavailable>, __the_thread__=0x000000012f808210) at classFileParser.cpp:5637:3 [opt]
    frame #14: 0x00000001030d4400 libjvm.dylib`KlassFactory::create_from_stream(stream=0x000000016fb5d508, name=0x0000600000a452d0, loader_data=0x0000600002a61ed0, cl_info=0x000000016fb5d468, __the_thread__=0x000000012f808210) at klassFactory.cpp:194:19 [opt]
    frame #15: 0x0000000103550d08 libjvm.dylib`SystemDictionary::resolve_hidden_class_from_stream(st=0x000000016fb5d508, class_name=0x0000600000a452d0, class_loader=<unavailable>, cl_info=0x000000016fb5d468, __the_thread__=0x000000012f808210) at systemDictionary.cpp:834:22 [opt]
    frame #16: 0x0000000102edc020 libjvm.dylib`jvm_lookup_define_class(lookup=<unavailable>, name=<unavailable>, buf=0x000000013f6cfe90, len=947, pd=0x0000000000000000, init='\x01', flags=10, classData=0x000000016fb5d8c0, __the_thread__=0x000000012f808210) at jvm.cpp:1004:10 [opt]
    frame #17: 0x0000000102edba50 libjvm.dylib`::JVM_LookupDefineClass(env=<unavailable>, lookup=0x000000016fb5d900, name=""java/lang/invoke/LambdaForm$MH"", buf=0x000000013f6cfe90, len=947, pd=0x0000000000000000, initialize='\x01', flags=10, classData=0x000000016fb5d8c0) at jvm.cpp:1060:10 [opt]
    frame #18: 0x000000010074f984 libjava.dylib`Java_java_lang_ClassLoader_defineClass0(env=0x000000012f808610, cls=<unavailable>, loader=<unavailable>, lookup=0x000000016fb5d900, name=0x000000016fb5d8f8, data=<unavailable>, offset=<unavailable>, length=947, pd=0x0000000000000000, initialize=<unavailable>, flags=10, classData=0x000000016fb5d8c0) at ClassLoader.c:277:14 [opt]
```

and at the same time C1 is also blocking on a metaspace allocation:
```
  thread #27, name = 'Java: C1 CompilerThread0'
    frame #0: 0x00000001bcce0290 libsystem_kernel.dylib`__psynch_cvwait + 8
    frame #1: 0x00000001bcd1a83c libsystem_pthread.dylib`_pthread_cond_wait + 1236
    frame #2: 0x000000010332b67c libjvm.dylib`os::PlatformMonitor::wait(this=0x00006000034f4a30, millis=<unavailable>) at os_posix.cpp:1926:18 [opt]
    frame #3: 0x00000001032b6024 libjvm.dylib`Monitor::wait_without_safepoint_check(this=0x00006000034f4a20, timeout=0) at mutex.cpp:226:27 [opt]
    frame #4: 0x0000000103260248 libjvm.dylib`MetaspaceCriticalAllocation::wait_for_purge(request=0x0000000172b89780) at metaspaceCriticalAllocation.cpp:135:29 [opt]
    frame #5: 0x0000000103260478 libjvm.dylib`MetaspaceCriticalAllocation::allocate(ClassLoaderData*, unsigned long, Metaspace::MetadataType) [inlined] MetaspaceCriticalAllocation::try_allocate_critical(request=0x0000000172b89780) at metaspaceCriticalAllocation.cpp:124:3 [opt]
    frame #6: 0x0000000103260428 libjvm.dylib`MetaspaceCriticalAllocation::allocate(loader_data=<unavailable>, word_size=<unavailable>, type=<unavailable>) at metaspaceCriticalAllocation.cpp:174:7 [opt]
    frame #7: 0x000000010325c3c8 libjvm.dylib`Metaspace::allocate(loader_data=0x0000600002af40d0, word_size=171, type=MethodDataType, __the_thread__=0x000000013a00b210) at metaspace.cpp:918:34 [opt]
    frame #8: 0x000000010327e3a8 libjvm.dylib`MethodData::allocate(loader_data=<unavailable>, method=0x0000000172b89930, __the_thread__=<unavailable>) at methodData.cpp:662:10 [opt]
    frame #9: 0x000000010326f28c libjvm.dylib`Method::build_interpreter_method_data(method=0x0000000172b89930, __the_thread__=0x000000013a00b210) at method.cpp:591:31 [opt]
    frame #10: 0x0000000102927794 libjvm.dylib`ciMethod::ensure_method_data(this=0x00000001203d0c70, h_m=0x0000000172b89930) at ciMethod.cpp:988:5 [opt]
    frame #11: 0x0000000102927a00 libjvm.dylib`ciMethod::ensure_method_data(this=0x00000001203d0c70) at ciMethod.cpp:1006:5 [opt]
    frame #12: 0x0000000102809c20 libjvm.dylib`GraphBuilder::try_inline_full(this=0x0000000172b89e58, callee=0x00000001203d0c70, holder_known=true, ignore_return=false, bc=_invokespecial, receiver=<unavailable>) at c1_GraphBuilder.cpp:3878:34 [opt]
    frame #13: 0x0000000102801200 libjvm.dylib`GraphBuilder::try_inline(this=0x0000000172b89e58, callee=0x00000001203d0c70, holder_known=true, ignore_return=false, bc=_invokespecial, receiver=0x0000000140cf2c10) at c1_GraphBuilder.cpp:3551:7 [opt]
    frame #14: 0x0000000102800234 libjvm.dylib`GraphBuilder::invoke(this=0x0000000172b89e58, code=_invokespecial) at c1_GraphBuilder.cpp:2128:22 [opt]
    frame #15: 0x0000000102804748 libjvm.dylib`GraphBuilder::iterate_bytecodes_for_block(this=0x0000000172b89e58, bci=<unavailable>) at c1_GraphBuilder.cpp:2958:41 [opt]
    frame #16: 0x00000001028042b4 libjvm.dylib`GraphBuilder::connect_to_end(this=<unavailable>, beg=<unavailable>) at c1_GraphBuilder.cpp:2715:3 [opt] [artificial]
    frame #17: 0x0000000102806864 libjvm.dylib`GraphBuilder::iterate_all_blocks(this=0x0000000172b89e58, start_in_current_block_for_inlining=<unavailable>) at c1_GraphBuilder.cpp:3041:11 [opt]
    frame #18: 0x0000000102808048 libjvm.dylib`GraphBuilder::GraphBuilder(this=0x0000000172b89e58, compilation=<unavailable>, scope=0x00000001404a39c0) at c1_GraphBuilder.cpp:3410:5 [opt]
    frame #19: 0x0000000102812830 libjvm.dylib`IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) [inlined] IRScope::build_graph(this=0x00000001404a39c0, compilation=0x0000000172b8a240, osr_bci=<unavailable>) at c1_IR.cpp:128:16 [opt]
    frame #20: 0x0000000102812820 libjvm.dylib`IRScope::IRScope(this=0x00000001404a39c0, compilation=0x0000000172b8a240, caller=0x0000000000000000, caller_bci=<unavailable>, method=0x00000001307511e8, osr_bci=-1, create_graph=true) at c1_IR.cpp:159:54 [opt]
    frame #21: 0x000000010281324c libjvm.dylib`IR::IR(Compilation*, ciMethod*, int) [inlined] IRScope::IRScope(this=<unavailable>, compilation=<unavailable>, caller=<unavailable>, caller_bci=<unavailable>, method=<unavailable>, osr_bci=<unavailable>, create_graph=<unavailable>) at c1_IR.cpp:139:1 [opt]
    frame #22: 0x0000000102813234 libjvm.dylib`IR::IR(Compilation*, ciMethod*, int) [inlined] IR::IR(this=0x00000001404a3998, compilation=0x0000000172b8a240, method=0x00000001307511e8, osr_bci=-1) at c1_IR.cpp:273:22 [opt]
    frame #23: 0x0000000102813218 libjvm.dylib`IR::IR(this=0x00000001404a3998, compilation=0x0000000172b8a240, method=0x00000001307511e8, osr_bci=-1) at c1_IR.cpp:270:17 [opt]
    frame #24: 0x00000001027eb010 libjvm.dylib`Compilation::build_hir(this=0x0000000172b8a240) at c1_Compilation.cpp:153:16 [opt]
    frame #25: 0x00000001027ec3d8 libjvm.dylib`Compilation::compile_java_method(this=0x0000000172b8a240) at c1_Compilation.cpp:391:5 [opt]
    frame #26: 0x00000001027ec870 libjvm.dylib`Compilation::compile_method(this=0x0000000172b8a240) at c1_Compilation.cpp:471:20 [opt]
    frame #27: 0x00000001027ecb6c libjvm.dylib`Compilation::Compilation(this=0x0000000172b8a240, compiler=<unavailable>, env=<unavailable>, method=0x00000001307511e8, osr_bci=<unavailable>, buffer_blob=<unavailable>, install_code=<unavailable>, directive=<unavailable>) at c1_Compilation.cpp:598:3 [opt]
    frame #28: 0x00000001027ee914 libjvm.dylib`Compiler::compile_method(this=0x00006000031ec010, env=0x0000000172b8a738, method=0x00000001307511e8, entry_bci=-1, install_code=true, directive=0x0000000149004740) at c1_Compiler.cpp:252:17 [opt]
    frame #29: 0x00000001029e2c58 libjvm.dylib`CompileBroker::invoke_compiler_on_method(task=0x00006000028e8170) at compileBroker.cpp:2311:13 [opt]
    frame #30: 0x00000001029e239c libjvm.dylib`CompileBroker::compiler_thread_loop() at compileBroker.cpp:1981:11 [opt]
    frame #31: 0x0000000102dbe870 libjvm.dylib`JavaThread::thread_main_inner(this=0x000000013a00b210) at javaThread.cpp:693:5 [opt]
``` ;;;","2022-08-22 12:59;stefank;I've found another problem with this code.

In the above description about GCs being triggered and requests being processed and marked as has_results, it was assumed that a triggered GC would actually process all requests. That's not always the case. If the GC sees that no classes were unloaded, it skips calling Metaspace::purge, and therefore skips calling MetaspaceCriticalAllocation::satisfy, and therefore won't process the requests in the queue.

After such a GC has completed, the thread of the first request in the queue will get back from its GC invocation, dequeue its request, and trigger an OOME. However, if another thread enqueues a new request, before the first thread has dequeued its request, the second thread will see that there already exists an unprocessed request in the queue, and therefore won't trigger a new GC. The second thread will now hang until something else in the system triggers a new GC.
;;;","2022-08-24 06:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9985
Date: 2022-08-23 15:56:54 +0000;;;","2022-08-26 06:49;dukebot;Changeset: 3844685b
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2022-08-26 13:44:28 +0000
URL:       https://git.openjdk.org/jdk/commit/3844685be03b121e75095b45a76c0b99f2a41912
;;;",,,,,,,,,,,,,,,,
SIGQUIT and jcmd attaching mechanism does not work with signal chaining library,JDK-8292695,5081976,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,manc,manc,manc,2022-08-19 21:23,2022-11-09 01:30,2023-10-01 09:56,2022-09-09 12:15,17.0.3,19,20,,,,20,hotspot,,0,8bpr-critical-approved,google-interest,jcmd,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,regression,signals,,,,,,,,,,"After JDK-8279124, sending SIGQUIT to get thread dumps and using jcmd to attach a running Java process stopped working if signal chaining library (libjsig.so) is enabled. See https://docs.oracle.com/en/java/javase/17/troubleshoot/handle-signals-and-exceptions.html#GUID-CB49A2A7-2A9F-4C18-948F-6D4A96FF688D for more about signal chaining.

According to test/hotspot/jtreg/runtime/signal/README, SIGQUIT does not support chaining. After JDK-8279124, the JVM calls sigaction() twice to set two different handlers for SIGQUIT. The first time it sets the handler within the window bounded by libjsig's JVM_begin_signal_setting() and JVM_end_signal_setting(), but the window is intended for signals that support chaining. When the second time it calls os::signal() => sigaction(), the overridden sigaction() in jsig.c runs the following branch:
  if (jvm_signal_installed && sigused) {
    /* jvm has installed its signal handler for this signal. */
    /* Save the handler. Don't really install it. */
    if (oact != NULL) {
      *oact = sact[sig];
    }
    if (act != NULL) {
      sact[sig] = *act;
    }
    signal_unlock();
    return 0;
  }

As a result, the second time does not really install the UserHandler for SIGQUIT.

Context: Our Java applications almost always enable signal chaining. We have a customized launcher with logic to override sigaction() similarly to what libjsig.so does.

Reproducible steps:
$ LD_PRELOAD=<jdk_path>lib/server/libjsig.so <jdk_path>/bin/java -jar <application_jar>
$ kill -SIGQUIT <application_pid>
Expected: Thread dump is printed on stdout.
Actual: Nothing is printed.

Also ""$ jcmd <application_pid>"" gives an error:
2006627:
java.io.IOException: No such process
	at jdk.attach/sun.tools.attach.VirtualMachineImpl.sendQuitTo(Native Method)
	at jdk.attach/sun.tools.attach.VirtualMachineImpl.<init>(VirtualMachineImpl.java:83)
	at jdk.attach/sun.tools.attach.AttachProviderImpl.attachVirtualMachine(AttachProviderImpl.java:58)
	at jdk.attach/com.sun.tools.attach.VirtualMachine.attach(VirtualMachine.java:207)
	at jdk.jcmd/sun.tools.jcmd.JCmd.executeCommandForPid(JCmd.java:113)
	at jdk.jcmd/sun.tools.jcmd.JCmd.main(JCmd.java:97)",,,,,,,,,,JDK-8295712,JDK-8296309,JDK-8296650,JDK-8295374,JDK-8295451,JDK-8296596,JDK-8296267,,,,,,,,,,,,,,,,,,,,,JDK-8293466,JDK-8279124,,,JDK-8295966,JDK-8296202,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ybrf:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-22 01:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9955
Date: 2022-08-20 22:43:03 +0000;;;","2022-09-09 12:15;dukebot;Changeset: 45ff10cc
Author:    Man Cao <manc@openjdk.org>
Date:      2022-09-09 19:12:08 +0000
URL:       https://git.openjdk.org/jdk/commit/45ff10cc68296c7c73d0eafe6fcc9946ab98267e
;;;","2022-10-25 04:57;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Low to medium risk, small change in os layer. Related issues: one is already in 17, the other is only loosely connected to this.
I had to do some obvious resolves.
Test passes. SAP nighlty testing passed.;;;","2022-10-25 04:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/834
Date: 2022-10-25 11:51:38 +0000;;;","2022-10-28 23:35;manc;Fix request [19u]

This backport fixes a bug in JDK 19 for applications that use signal chaining (libjsig.so). The change applies cleanly.;;;","2022-10-28 23:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/59
Date: 2022-10-29 06:28:08 +0000;;;",,,,,,,,,,,,,,,,,
runtime/cds/appcds/TestWithProfiler.java SIGSEGV in TableStatistics ctr,JDK-8292686,5081961,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,coleenp,dcubed,dcubed,2022-08-19 12:23,2022-12-14 09:41,2023-10-01 09:56,2022-08-19 13:50,20,,,,,,20,hotspot,,0,regression,tier2,tier3,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

runtime/cds/appcds/TestWithProfiler.java

Here's a snippet from the log file:

#section:driver
----------messages:(5/151)----------
command: driver TestWithProfiler
reason: User specified action: run driver TestWithProfiler 
Mode: agentvm
Agent id: 12
elapsed time (seconds): 20.021
----------configuration:(17/2448)----------

<snip>

----------System.out:(25/9167)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+12-684/linux-x64-debug.jdk/jdk-20/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/2/runtime/cds/appcds/TestWithProfiler.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+12-684/src.full/open/test/hotspot/jtreg/runtime/cds/appcds:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/2/test/lib:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/2/test/hotspot/jtreg/runtime/cds/appcds:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/tmp -cp /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/myThread.jar -Xshare:dump -Xlog:cds -XX:SharedArchiveFile=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/appcds-18h43m19s000.jsa -XX:ExtraSharedClassListFile=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/runtime.cds.appcds.TestWithProfiler.java-test.classlist ]
[2022-08-19T18:43:19.026317018Z] Gathering output for process 15603
[ELAPSED: 1463 ms]
[logging stdout to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/runtime.cds.appcds.TestWithProfiler.java-0000-dump.stdout]
[logging stderr to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/runtime.cds.appcds.TestWithProfiler.java-0000-dump.stderr]
[STDERR]

[2022-08-19T18:43:20.483528284Z] Waiting for completion for process 15603
[2022-08-19T18:43:20.483751566Z] Waiting for completion finished for process 15603
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+12-684/linux-x64-debug.jdk/jdk-20/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/2/runtime/cds/appcds/TestWithProfiler.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+12-684/src.full/open/test/hotspot/jtreg/runtime/cds/appcds:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/2/test/lib:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/2/test/hotspot/jtreg/runtime/cds/appcds:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/tmp -Xshare:on -showversion -XX:SharedArchiveFile=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/appcds-18h43m19s000.jsa -Dtest.timeout.factor=4.0 -cp /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/myThread.jar -XX:+UnlockDiagnosticVMOptions -XX:VerifyArchivedFields=1 -XX:+UnlockDiagnosticVMOptions -Xint -XX:StartFlightRecording:duration=15s,filename=myrecording.jfr,settings=profile,dumponexit=true TestWithProfilerHelper ]
[2022-08-19T18:43:20.485394773Z] Gathering output for process 15772
[ELAPSED: 18467 ms]
[logging stdout to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/runtime.cds.appcds.TestWithProfiler.java-0001-exec.stdout]
[logging stderr to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/runtime.cds.appcds.TestWithProfiler.java-0001-exec.stderr]
[STDERR]
java version ""20-ea"" 2023-03-21
Java(TM) SE Runtime Environment (fastdebug build 20-ea+12-684)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 20-ea+12-684, interpreted mode, sharing)

[2022-08-19T18:43:38.952004647Z] Waiting for completion for process 15772
[2022-08-19T18:43:38.952188293Z] Waiting for completion finished for process 15772
[2022-08-19T18:43:38.952225083Z] Waiting for completion for process 15772
[2022-08-19T18:43:38.952244310Z] Waiting for completion finished for process 15772
[2022-08-19T18:43:38.967877267Z] Waiting for completion for process 15772
[2022-08-19T18:43:38.967908095Z] Waiting for completion finished for process 15772
----------System.err:(44/3331)----------
 stdout: [[1.768s][info][jfr,startup] Started recording 1. The result will be written to:
[1.768s][info][jfr,startup] 
[1.768s][info][jfr,startup] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/myrecording.jfr
Run for -DTestWithProfiler.timeout=15 (seconds)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f09f4973dd5, pid=15772, tid=15917
#
# JRE version: Java(TM) SE Runtime Environment (20.0+12) (fastdebug build 20-ea+12-684)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+12-684, interpreted mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a1edd5]  TableStatistics::TableStatistics(TableRateStatistics&, NumberSeq, unsigned long, unsigned long, unsigned long)+0x1a5
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/core.15772)
#
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/hs_err_pid15772.jfr
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65079/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/66be32a7-fff2-451b-b739-00d2dc876fb0/runs/7bb16b6d-2490-4817-aab0-ec301f7dcba6/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/1/hs_err_pid15772.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
];
 stderr: [java version ""20-ea"" 2023-03-21
Java(TM) SE Runtime Environment (fastdebug build 20-ea+12-684)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 20-ea+12-684, interpreted mode, sharing)
]
 exitValue = 134

java.lang.RuntimeException: Hotspot crashed
	at jdk.test.lib.cds.CDSTestUtils.checkCommonExecExceptions(CDSTestUtils.java:320)
	at jdk.test.lib.cds.CDSTestUtils.checkExec(CDSTestUtils.java:473)
	at jdk.test.lib.cds.CDSTestUtils.checkExec(CDSTestUtils.java:460)
	at TestWithProfiler.main(TestWithProfiler.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Hotspot crashed


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f09ec465800):  JavaThread ""JFR Periodic Tasks"" daemon [_thread_in_vm, id=15917, stack(0x00007f09d0fe3000,0x00007f09d10e4000)]

Stack: [0x00007f09d0fe3000,0x00007f09d10e4000],  sp=0x00007f09d10e21a0,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1a1edd5]  TableStatistics::TableStatistics(TableRateStatistics&, NumberSeq, unsigned long, unsigned long, unsigned long)+0x1a5
V  [libjvm.so+0x19eae8d]  SymbolTable::get_table_statistics()+0x61d
V  [libjvm.so+0x10e5e8a]  JfrPeriodicEventSet::requestSymbolTableStatistics()+0x2a
V  [libjvm.so+0x10b4f65]  jfr_emit_event+0x585
j  jdk.jfr.internal.JVM.emitEvent(JJJ)Z+0 jdk.jfr@20-ea
j  jdk.jfr.internal.RequestEngine$RequestHook.execute()V+43 jdk.jfr@20-ea
j  jdk.jfr.internal.RequestEngine.run_requests(Ljava/util/Collection;)J+133 jdk.jfr@20-ea
j  jdk.jfr.internal.RequestEngine.doPeriodic()J+3 jdk.jfr@20-ea
j  jdk.jfr.internal.PlatformRecorder.periodicTask()V+47 jdk.jfr@20-ea
j  jdk.jfr.internal.PlatformRecorder.lambda$startDiskMonitor$1()V+1 jdk.jfr@20-ea
j  jdk.jfr.internal.PlatformRecorder$$Lambda$70+0x00000008010416f8.run()V+4 jdk.jfr@20-ea
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x00007f09e0fded27
V  [libjvm.so+0x1028390]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x500
V  [libjvm.so+0x1028ba0]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x430
V  [libjvm.so+0x1029011]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71
V  [libjvm.so+0x11b722b]  thread_entry(JavaThread*, JavaThread*)+0x12b
V  [libjvm.so+0x105ed8c]  JavaThread::thread_main_inner()+0x22c
V  [libjvm.so+0x1a67fe0]  Thread::call_run()+0x100
V  [libjvm.so+0x1732fe3]  thread_native_entry(Thread*)+0x103

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  jdk.jfr.internal.JVM.emitEvent(JJJ)Z+0 jdk.jfr@20-ea
j  jdk.jfr.internal.RequestEngine$RequestHook.execute()V+43 jdk.jfr@20-ea
j  jdk.jfr.internal.RequestEngine.run_requests(Ljava/util/Collection;)J+133 jdk.jfr@20-ea
j  jdk.jfr.internal.RequestEngine.doPeriodic()J+3 jdk.jfr@20-ea
j  jdk.jfr.internal.PlatformRecorder.periodicTask()V+47 jdk.jfr@20-ea
j  jdk.jfr.internal.PlatformRecorder.lambda$startDiskMonitor$1()V+1 jdk.jfr@20-ea
j  jdk.jfr.internal.PlatformRecorder$$Lambda$70+0x00000008010416f8.run()V+4 jdk.jfr@20-ea
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x00007f09e0fded27

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000020
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292446,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2ybo3:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-08-19 12:28;dcubed;This test failure was first spotted in jdk-20+12-684-tier2 in five configs.

The jdk-20+12-684-tier2 build-ID includes the fix for the following:

JDK-8292446 Make TableRateStatistics optional in CHT

and that fix might be the cause of these failures.;;;","2022-08-19 12:31;dcubed;[~coleenp] - I'm sending this your way since you sponsored the changeset.;;;","2022-08-19 13:08;coleenp;I made [~jsjolen] change the default for allocating TableRateStatistics from true to false because only StringTable and SymbolTable use this field, but there were two constructors that were missing the non-default value true.;;;","2022-08-19 13:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9952
Date: 2022-08-19 20:22:41 +0000;;;","2022-08-19 13:50;dukebot;Changeset: 07c9ba74
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-08-19 20:47:24 +0000
URL:       https://git.openjdk.org/jdk/commit/07c9ba74fa3baebffcc15d3ee6ef941edf6be1a3
;;;","2022-08-19 13:55;dcubed;Tier3 has failures in these tests so far:

applications/kitchensink/Kitchensink.java
applications/runthese/RunThese30M.java
jdk/jfr/api/flightrecorder/TestGetEventTypes.java
jdk/jfr/event/runtime/TestTableStatisticsEvent.java
runtime/cds/appcds/TestWithProfiler.java;;;",,,,,,,,,,,,,,,,,
Openjfx: all projects to use JUnit5 (Eclipse),JDK-8292678,5081951,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,fastegal,fastegal,2022-08-19 08:31,2022-11-29 06:08,2023-10-01 09:56,2022-08-30 12:16,,,,,,,jfx20,javafx,,0,build,Eclipse,noreg-build,test,,,,,,,,,,,,,,,,"just noticed that the controls .classpath is missing an entry for JUnit5 - which are needed f.i. for PR 711 which added new tests using it.

The missing entry seems to be something like (this is added when configuring the build path via ui):

	<classpathentry kind=""con"" path=""org.eclipse.jdt.junit.JUNIT_CONTAINER/5"">
		<attributes>
			<attribute name=""test"" value=""true""/>
		</attributes>
	</classpathentry>

Probably needs to be done for all projects (didn't check, though ..)

edit:
let's update all the projects to use JUnit5",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293185,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yblv:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-08-20 10:44;kcr;Andy: are you able to run JUnit5-based tests in UI controls?;;;","2022-08-22 04:15;fastegal;re-checked Eclipse .classpath against master:

- controls has JUnit5
- graphics has JUnit4
- base has both JUnit4/JUnit5

(didn't check the other projects)

so no problem with controls and base (after updating  my local workspace ;), but probably with graphics;;;","2022-08-22 05:37;kcr;I don't think there are any tests in graphics that use JUnit5, but since they could be added at any time, it might be a good idea to get ahead of that and update graphics to include it.;;;","2022-08-22 07:35;angorya;all projects compile ok in eclipse after JDK-8290473.
yes, some projects have JUnit4, some JUnit5, and some (e.g. base) a mixture of 4 and 5, but they all compile.

specifically, controls have 
```
	<classpathentry kind=""con"" path=""org.eclipse.jdt.junit.JUNIT_CONTAINER/5"">
		<attributes>
			<attribute name=""test"" value=""true""/>
		</attributes>
	</classpathentry>
```
in .classpath.

[~fastegal] did you perform the git pull in eclipse or via command line?  if the latter, please Refresh the projects, followed by a Project -> Clean and (automatic) Rebuild.
;;;","2022-08-22 08:22;fastegal;thanks for checking, everyone and sry for the mess: I had pulled in the forked PR 711 which didn't have the latest .classpath (Maran doesn't use Eclipse, afaik, so didn't notice). Then filed this before comparing against master - so yes, everything compiles just fine.

We can either close this (because it's not-an-issue as reported) or take it as a incentive to add JUnit5 to all Eclipse projects, as Kevin suggested. My personal preference would by the latter, because we will hit it the moment anybody adds JUnit5 tests. But at the end of the day, I'm fine with any.;;;","2022-08-22 08:32;angorya;You are right - we can use this ticket to update .classpath to use junit5 for all the projects.

btw, #711 seem to depend on #876 because of CellBehaviorBase, so it probably makes sense not to view them in isolation. ;;;","2022-08-23 11:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/883
Date: 2022-08-23 18:38:48 +0000;;;","2022-08-30 12:16;dukebot;Changeset: eb8f2fe3
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-08-30 19:15:16 +0000
URL:       https://git.openjdk.org/jfx/commit/eb8f2fe3c97398b202ad8241e6df647dc817636e
;;;",,,,,,,,,,,,,,,
Remove two kerberos tests from problem list,JDK-8292676,5081949,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-08-19 08:11,2022-08-24 23:18,2023-10-01 09:56,2022-08-19 13:02,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,,,"Remove

javax/security/auth/kerberos/KerberosHashEqualsTest.java 
javax/security/auth/kerberos/KerberosTixDateTest.java 

from problem list. They were added in JDK-8228337 along with some other manual tests but they have been modified to be able to run automatically.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yblf:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a7b7e03,,,,,,,,,"2022-08-19 08:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9943
Date: 2022-08-19 15:13:34 +0000;;;","2022-08-19 13:02;dukebot;Changeset: 235151ea
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-08-19 19:59:39 +0000
URL:       https://git.openjdk.org/jdk/commit/235151ead89f9102e3a57ba8f88807f180887866
;;;",,,,,,,,,,,,,,,,,,,,,
IGV: Search not useable when in Overflow Toolbar,JDK-8292669,5081943,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2022-08-19 06:57,2022-09-20 23:20,2023-10-01 09:56,2022-08-26 06:38,20,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,"The toolbar of the EditorTopComponent uses an overflow toolbar when it does not fit in the width of the TopComponent. The first item to land in the overflow toolbar is the QuickSearch. Unfortunately, QuickSearch stops working in the overflow toolbar. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ybk3:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-08-19 09:35;chagedorn;ILW = Search is not available when reducing the window size of IGV, always, no workaround = LHH = P4;;;","2022-08-24 06:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9940
Date: 2022-08-19 14:00:32 +0000;;;","2022-08-26 06:38;dukebot;Changeset: 2b803493
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-08-26 13:37:14 +0000
URL:       https://git.openjdk.org/jdk/commit/2b803493ba4f631bfff928c8bd95aeaa3368cb36
;;;",,,,,,,,,,,,,,,,,,,,
C2: blocks made unreachable by NeverBranch-to-Goto conversion are removed incorrectly,JDK-8292660,5081936,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,chagedorn,chagedorn,2022-08-19 04:14,2023-09-12 02:19,2023-10-01 09:56,2022-09-05 00:18,17,20,,,,,20,hotspot,,0,c2,javafuzzer,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,,,,,,,,,,,,"HOW TO REPRODUCE:

The attached reduced Java Fuzzer test from JDK-8292507 (different bug than reported in JDK-8292507) starts to fail after JDK-8292285:

To reproduce:
$ java -Xcomp -XX:CompileOnly=Test Test.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (src/hotspot/share/opto/block.cpp:1742), pid=36133, tid=36146
#  assert(_cfg.number_of_blocks() >= (uint) (size - 1)) failed: number of blocks can not shrink
#
# JRE version: Java(TM) SE Runtime Environment (20.0+11) (fastdebug build 20-ea+11-661)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+11-661, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x770b84]  PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&)+0x7d4
.......
Command Line: -Xcomp -XX:CompileOnly=Test --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main Test.java
.......
Current CompileTask:
C2:   1763   85    b  4       Test::test (47 bytes)

FAILURE ANALYSIS:

The failure unveils three major flaws in the current removal of unreachable blocks after NeverBranch-to-goto conversion (introduced in JDK-8292285):

1. The unreachable block removal and pre-order index update loop [1] skips the block next to the removed one, and iterates beyond the end of the block count ('_number_of_blocks').

2. The outer block traversal loop [2] iterates beyond the end of the block count whenever one or more unreachable blocks are removed.

3. Transitively unreachable blocks (such as B10 in transitive.pdf) are not removed. These blocks arise in methods with two or more infinite loops (see multiple-infinite-loops.pdf).

[1] https://github.com/openjdk/jdk/blob/7b5f9edb59ef763acca80724ca37f3624d720d06/src/hotspot/share/opto/block.cpp#L613-L621
[2] https://github.com/openjdk/jdk/blob/7b5f9edb59ef763acca80724ca37f3624d720d06/src/hotspot/share/opto/block.cpp#L698-L729",,,,,,,,,,JDK-8296382,JDK-8299369,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292730,JDK-8292859,JDK-8292285,,,,JDK-8292730,,,,,,,,"2022-08-19 04:12;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/100477/Test.java","2022-08-19 04:12;chagedorn;hs_err_pid36133.log;https://bugs.openjdk.org/secure/attachment/100478/hs_err_pid36133.log","2022-08-22 02:41;rcastanedalo;multiple-infinite-loops.pdf;https://bugs.openjdk.org/secure/attachment/100496/multiple-infinite-loops.pdf","2022-08-22 02:41;rcastanedalo;transitive.pdf;https://bugs.openjdk.org/secure/attachment/100497/transitive.pdf",,,,,,,,,,,,,,,,,,,,"0|i2ybij:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-19 04:15;chagedorn;ILW = C2 assertion in PhaseCFG, single Java Fuzzer test, possibly disable compilation of affected method = HLM = P3 ;;;","2022-08-19 04:15;chagedorn;[~rcastanedalo] can you have a look?;;;","2022-08-23 03:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9976
Date: 2022-08-23 08:26:57 +0000;;;","2022-08-29 01:06;mbaesken;looks like the fix for 8292660: C2: blocks made unreachable by NeverBranch-to-Goto conversion are removed incorrectly
solves 8292730 , with https://github.com/openjdk/jdk/pull/9976 added I do not notice the  8292730 - issue any more in our nightly tests.;;;","2022-08-29 01:36;rcastanedalo;Thanks for the report, [~mbaesken], I am currently working on https://github.com/openjdk/jdk/pull/9976 and hopefully there will be a new revision addressing the reviewers' feedback later this week.;;;","2022-09-05 00:18;dukebot;Changeset: 730ced9a
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-09-05 07:16:51 +0000
URL:       https://git.openjdk.org/jdk/commit/730ced9a109953ca1c3b7bfd6a3eeac5b85892c5
;;;","2022-12-22 13:16;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Typical risk of a C2 change. We should take it to avoid the bug fixed (as described by predecessor) and to keep C2 up to date.
Clean backport.  Depends on JDK-8292285
Test passes. SAP nightly testing passed.;;;","2022-12-22 13:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/979
Date: 2022-12-22 21:14:52 +0000;;;",,,,,,,,,,,,,,,
Calling GetLocalXXX from virtual thread with thread parameter set to NULL returns carrier locals,JDK-8292657,5081933,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,sspitsyn,alanb,alanb,2022-08-19 03:08,2022-12-20 17:30,2023-10-01 09:56,2022-08-30 11:30,19,,,,,,20,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,"Peter Hofer from the Graal team reported this.

If GetLocalXXX is called from a virtual thread with the thread parameter set to NULL (meaning current thread) then it should read the value of the locals in the virtual thread frames. Instead, it reads the carrier thread locals and/or crashes.

It seems to be an oversight that GetLocalXXX does not check if the thread parameter is NULL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ybhv:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,Verified,,"2022-08-19 17:53;mwthomps;ILW= HMM=P2;;;","2022-08-26 13:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10051
Date: 2022-08-26 20:13:28 +0000;;;","2022-08-30 11:30;dukebot;Changeset: f5ebbf32
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-08-30 18:28:05 +0000
URL:       https://git.openjdk.org/jdk/commit/f5ebbf3225fc10367ef4e2b4ec62e9077565e6aa
;;;","2022-12-20 11:05;sspitsyn;The tests to verify this is open/test/hotspot/jtreg/serviceability/jvmti/vthread/GetSetLocalTest and all other JVMTI and JDI/JDWP tests which directly and indirectly involve JVMTI GetLocalXXX/SetLocalXXX functions. The fix was verified before integration.;;;",,,,,,,,,,,,,,,,,,,
G1 remembered set memory footprint regression after JDK-8286115,JDK-8292654,5081930,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,tschatzl,tschatzl,2022-08-19 02:17,2022-09-19 23:31,2023-10-01 09:56,2022-08-23 06:59,19,20,,,,,20,hotspot,,0,gc-g1,gc-pending-review,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,,,,,,,,,,,,,,,"JDK-8286115 changed ergonomic sizing of the ""Array of Card Set"" remembered set container to what the CSR/release note said.

This causes significantly increased memory usage in some benchmarks; it would have been better to change the specification according to the implementation.

In one extreme example, BigRAMTester, this causes a 30% peak-to-peak remembered set memory usage regression, see attached graph.

This graph shows jdk18 remembered set memory usage in green and jdk19 remembered set memory usage in yellow.

Total memory G1 GC usage rose from 1.2GB to 1.3GB (~+8.5%).

This issue can be mitigated by setting `G1RemSetArrayOfCardsEntries` to the previous value (twice the current value for a given region size).
",,,,,,,,,,JDK-8293727,JDK-8293421,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286115,,,,,,,,,,,,"2022-08-19 02:22;tschatzl;20220819-bigramtester-memory-usage.png;https://bugs.openjdk.org/secure/attachment/100476/20220819-bigramtester-memory-usage.png",,,,,,,,,,,,,,,,,,,,,,,"0|i2ybh7:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Not verified,,"2022-08-19 03:07;tschatzl;There does not seem to be any particular documentation of these values except for the release note of G1RSetSparseRegionEntries, the (spiritual) predecessor option in JDK-8225343.;;;","2022-08-22 06:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9966
Date: 2022-08-22 13:00:41 +0000;;;","2022-08-23 06:59;dukebot;Changeset: 8a45abd5
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-08-23 13:54:10 +0000
URL:       https://git.openjdk.org/jdk/commit/8a45abd5f3bb224e564c8e6087bac618147f484e
;;;","2022-09-06 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/18
Date: 2022-09-06 07:23:58 +0000;;;","2022-09-06 00:47;tschatzl;Fix Request

jdk19u fix request

severity: fixes a ~10% remembered set size regression introduced in JDK 19 in G1
change: undoes the change from JDK 19
risk: none, well understood and thoroughly tested, single liner involving constant change, applies cleanly

;;;","2022-09-19 23:31;aharadigopal;No regression tests were found for this issue. Hence closing this bug as Not verified.;;;",,,,,,,,,,,,,,,,,
x86: Improve scratch register handling in VM stubs ,JDK-8292638,5081905,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vlivanov,vlivanov,vlivanov,2022-08-18 14:28,2022-09-20 23:20,2023-10-01 09:56,2022-08-23 12:34,20,,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,Constants which reside outside code cache are not guaranteed to be reachable in RIP-relative addressing mode from stub code. Provide a scratch register to ensure constants are reachable irrespective of process memory layout. Make scratch register usage explicit to avoid conflicts with stub code.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,,,"0|i2ybbn:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-18 15:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9932
Date: 2022-08-18 21:47:59 +0000;;;","2022-08-19 01:05;chagedorn;ILW = Possibly unreachable constants due to missing scratch register, no crash/failure observed, no workaround = MLH = P4;;;","2022-08-23 12:34;dukebot;Changeset: f3be6731
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-08-23 19:32:51 +0000
URL:       https://git.openjdk.org/jdk/commit/f3be6731d3fa4fb1b7fc42c5bcbe6a64a50eaf42
;;;",,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/dynamicArchive/CDSStreamTestDriver.java fails to compile,JDK-8292633,5081899,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,cstein,dcubed,dcubed,2022-08-18 12:23,2022-12-14 09:42,2023-10-01 09:56,2022-08-18 16:35,20,,,,,,20,hotspot,,0,regression,tier2,tier3,tier4,tier5,tier6,tier7,,,,,,,,,,,,,"The following test fails to compile in the JDK20 CI:

runtime/cds/appcds/dynamicArchive/CDSStreamTestDriver.java

----------direct:(8/616)----------
/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+12-671/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/CDSStreamTestDriver.java:59: error: cannot find symbol
        String testngJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();
                           ^
  symbol:   variable Path
  location: class CDSStreamTestDriver
Note: /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+12-671/src.full/open/test/lib/jdk/test/lib/process/ProcessTools.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 error
result: Failed. Compilation failed: Compilation failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292315,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2ybab:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-08-18 12:30;dcubed;[~cstein] - Please take a look at this failure. It appears to be caused by:

JDK-8292315 Tests should not rely on specific JAR file names (hotspot);;;","2022-08-18 12:53;dcubed;This is the likely fix:

$ git diff
diff --git a/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/CDSStreamTestDriver.java b/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/CDSStreamTestDriver.java
index b7e022a5ba8..88af964d836 100644
--- a/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/CDSStreamTestDriver.java
+++ b/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/CDSStreamTestDriver.java
@@ -37,6 +37,7 @@
 
 import org.testng.annotations.Test;
 import java.io.File;
+import java.nio.file.Path;
 import jtreg.SkippedException;
 import jdk.test.whitebox.gc.GC;

Testing on my MBP13 now.

Update: Test fails to compile without the above change. Test compiles and passes with it.;;;","2022-08-18 15:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9928
Date: 2022-08-18 20:24:14 +0000;;;","2022-08-18 16:35;dukebot;Changeset: 82dbe29f
Author:    Christian Stein <cstein@openjdk.org>
Committer: Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-08-18 23:29:39 +0000
URL:       https://git.openjdk.org/jdk/commit/82dbe29fc8327f6992703f54181c3e42beb99ccf
;;;","2022-08-19 08:23;dcubed;The fix for this bug is integrated in jdk-20+12-672.;;;",,,,,,,,,,,,,,,,,,
"compiler/sharedstubs/SharedTrampolineTest.java fails with ""Error: VM option 'PrintRelocations' is develop and is available only in debug version of VM.""",JDK-8292632,5081898,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2022-08-18 12:14,2022-08-24 23:17,2023-10-01 09:56,2022-08-18 15:21,20,,,,,,20,hotspot,,0,noreg-self,oracle-triage-20,tier6,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

compiler/sharedstubs/SharedTrampolineTest.java

Here's a snippet from the log file:

 stdout: [];
 stderr: [Error: VM option 'PrintRelocations' is develop and is available only in debug version of VM.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at compiler.sharedstubs.SharedTrampolineTest.runTest(SharedTrampolineTest.java:66)
	at compiler.sharedstubs.SharedTrampolineTest.main(SharedTrampolineTest.java:78)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280152,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,,,"0|i2yba3:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-18 12:17;dcubed;Looks like compiler/sharedstubs/SharedTrampolineTest.java
is a new test that was added by:

JDK-8280152 AArch64: Reuse runtime call trampolines;;;","2022-08-18 15:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9930
Date: 2022-08-18 20:56:24 +0000;;;","2022-08-18 15:21;dukebot;Changeset: a1df2da6
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-08-18 22:17:49 +0000
URL:       https://git.openjdk.org/jdk/commit/a1df2da6684ff9d934ddb2f4f4932b57af678dc2
;;;","2022-08-19 00:59;chagedorn;ILW = Test failure in product VM, only single test with product VM, no workaround = MLH = P4;;;","2022-08-19 08:26;dcubed;The fix for this bug is integrated in jdk-20+12-672.;;;",,,,,,,,,,,,,,,,,,
[lworld] javac is accepting annotation interface declarations with modifiers: identity and value,JDK-8292630,5081896,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-08-18 11:25,2022-08-23 08:49,2023-10-01 09:56,2022-08-23 08:49,repo-valhalla,,,,,,repo-valhalla,tools,,0,lw4,lworld,,,,,,,,,,,,,,,,,,"This is not allowed by the current spec [1]:

    It is a compile-time error if an annotation interface declaration has the modifier sealed, or non-sealed, identity, or value (9.1.1.4).

So code code like:
value @interface I {}  and
identity @interface I {}

should be rejected by the compiler

[1] http://cr.openjdk.java.net/~dlsmith/jep8277163/jep8277163-20220519/specs/value-objects-jls.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yb9n:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-22 11:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/723
Date: 2022-08-22 17:54:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
"jshell crash on ""var a = a""",JDK-8292625,5081785,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,webbuggrp,webbuggrp,2022-08-17 00:46,2023-01-04 00:38,2023-10-01 09:56,2022-11-29 05:59,16,17,18,19,20,,20,tools,,0,dcsad,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
$ uname -a
Linux CPX-W32NYHUK7AU 5.10.102.1-microsoft-standard-WSL2 #1 SMP Wed Mar 2 00:30:59 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

./java -version
openjdk version ""20-ea"" 2023-03-21
OpenJDK Runtime Environment (build 20-ea+10-585)
OpenJDK 64-Bit Server VM (build 20-ea+10-585, mixed mode, sharing)

> ver
Microsoft Windows [Version 10.0.22000.856]

> java -version
openjdk version ""18.0.2"" 2022-07-19
OpenJDK Runtime Environment Temurin-18.0.2+9 (build 18.0.2+9)
OpenJDK 64-Bit Server VM Temurin-18.0.2+9 (build 18.0.2+9, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
jShell in versions 18 and 20 crashes when these two statements are entered:

var a = new Object()
var a = a

It works correctly with

Object a = new Object()
Object a = a

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1.) start jshell
2.) enter ""var a = new Object()""
3.) enter ""var a = a""

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
variable a is assigned to itself, no crash of jshell
ACTUAL -
crash, see stacktrace

CUSTOMER SUBMITTED WORKAROUND :
use ""Object a = a"" instead

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299256,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,16,,generic,,,,,,,"0|i2yakz:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-08-18 09:21;adev;The issue is reproducible from JDK 16 onwards. From JDK 11 to JDK 15 correct error message is shown:
jshell> var a = a
|  Error:
|  cannot infer type for local variable a
|    (cannot use 'var' on self-referencing variable)
|  var a = a;
|      ^

JDK 11: pass (correct error message)
JDK 14: pass (correct error message)
JDK 15: pass (correct error message)
JDK 16 onwards: fail (jshell crashes)
Exception in thread ""main"" java.lang.InternalError: Exception during analyze - java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.code.Type.baseType()"" because ""tree.init.type"" is null
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:392)
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.<init>(TaskFactory.java:383)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$analyze$1(TaskFactory.java:178)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$runTask$4(TaskFactory.java:213)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskPool.getTask(JavacTaskPool.java:192)
        at jdk.jshell/jdk.jshell.TaskFactory.runTask(TaskFactory.java:206)
        at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:175)
        at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:161)
        at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:150)
        at jdk.jshell/jdk.jshell.Eval.trialCompile(Eval.java:750)
        at jdk.jshell/jdk.jshell.Eval.processVariables(Eval.java:330)
        at jdk.jshell/jdk.jshell.Eval.lambda$sourceToSnippets$1(Eval.java:220)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$parse$6(TaskFactory.java:253)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$runTask$4(TaskFactory.java:213)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskPool.getTask(JavacTaskPool.java:192)
        at jdk.jshell/jdk.jshell.TaskFactory.runTask(TaskFactory.java:206)
        at jdk.jshell/jdk.jshell.TaskFactory.parse(TaskFactory.java:140)
        at jdk.jshell/jdk.jshell.TaskFactory.parse(TaskFactory.java:238)
        at jdk.jshell/jdk.jshell.Eval.sourceToSnippets(Eval.java:196)
        at jdk.jshell/jdk.jshell.Eval.eval(Eval.java:132)
        at jdk.jshell/jdk.jshell.JShell.eval(JShell.java:493)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSource(JShellTool.java:3609)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSourceCatchingReset(JShellTool.java:1330)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processInput(JShellTool.java:1228)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.run(JShellTool.java:1201)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.start(JShellTool.java:991)
        at jdk.jshell/jdk.internal.jshell.tool.JShellToolBuilder.start(JShellToolBuilder.java:254)
        at jdk.jshell/jdk.internal.jshell.tool.JShellToolProvider.main(JShellToolProvider.java:120)
Caused by: java.lang.IllegalStateException: java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.code.Type.baseType()"" because ""tree.init.type"" is null
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:383)
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:389)
        ... 27 more
Caused by: java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.code.Type.baseType()"" because ""tree.init.type"" is null
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitVarDef(Attr.java:1311)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:983)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:671)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:745)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:764)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1442)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1047)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:671)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:745)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1232)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:893)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:671)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:745)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5329)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5220)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5056)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5001)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1344)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1317)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:404)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$analyze$1(JavacTaskImpl.java:379)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:379)
        ... 28 more;;;","2022-11-21 06:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11263
Date: 2022-11-21 13:54:13 +0000;;;","2022-11-29 05:59;dukebot;Changeset: 33587ffd
Author:    Bo Zhang <zhangbodut@gmail.com>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-11-29 13:57:56 +0000
URL:       https://git.openjdk.org/jdk/commit/33587ffd35c568c1ef034f064e6f3f06fe9943c3
;;;",,,,,,,,,,,,,,,,,,,,
Cherry-pick WebKit 614.1 stabilization fixes,JDK-8292609,5081878,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,kcr,kcr,2022-08-18 08:16,2022-11-29 06:08,2023-10-01 09:56,2022-08-29 07:15,8u351,jfx20,,,,,jfx20,javafx,,0,CPU22_10-critical-approved,CPU22_10-critical-SQE-OK,sn_124,sn_125,sn_126,,,,,,,,,,,,,,,https://webkitgtk.org/2022/08/07/webkitgtk2.36.6-released.html,,,,,,,,,,JDK-8293226,JDK-8293096,JDK-8293370,JDK-8293111,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285881,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yb5n:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-08-26 05:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/885
Date: 2022-08-26 11:51:04 +0000;;;","2022-08-29 07:15;dukebot;Changeset: da580ba4
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-08-29 14:12:42 +0000
URL:       https://git.openjdk.org/jfx/commit/da580ba4a7e743e2a49f5a2c7f3b40fa01a4438a
;;;","2022-09-01 07:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/81
Date: 2022-09-01 14:39:49 +0000;;;","2022-09-05 10:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/113
Date: 2022-09-05 17:24:13 +0000;;;",,,,,,,,,,,,,,,,,,,
[AIX] Broken build after 8291945,JDK-8292608,5081877,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsteele,tsteele,tsteele,2022-08-18 08:09,2023-02-07 09:10,2023-10-01 09:56,2022-08-18 11:06,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"After JDK-8291945 the following build error was encountered:

22:23:08  src/hotspot/os/aix/os_aix.cpp:2305:19: error: cannot initialize a parameter of type 'size_t' (aka 'unsigned long') with an lvalue of type 'int ()'
22:23:08    _page_sizes.add(os::vm_page_size);
22:23:08                    ^~~~~~~~~~~~~~~~
22:23:08  src/hotspot/share/runtime/os.hpp:176:21: note: passing argument to parameter 'pagesize' here
22:23:08      void add(size_t pagesize);
22:23:08                      ^
22:23:08  1 error generated.
22:23:08  Error while processing src/hotspot/os/aix/os_aix.cpp.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292363,,JDK-8291945,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,,"0|i2yb5f:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-18 08:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9922
Date: 2022-08-18 15:18:01 +0000;;;","2022-08-18 11:05;dukebot;Changeset: 833bf069
Author:    Tyler Steele <tsteele@openjdk.org>
Date:      2022-08-18 18:02:46 +0000
URL:       https://git.openjdk.org/jdk/commit/833bf06905bb616782bdba6947b1edfaf479310f
;;;",,,,,,,,,,,,,,,,,,,,,
ZGC: C2 late barrier analysis uses invalid dominator information,JDK-8292602,5081867,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2022-08-18 05:33,2023-01-02 04:53,2023-10-01 09:56,2022-09-23 00:28,14,17,20,,,,20,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-20,zgc,,,,,,,,,,,,,,"Late barrier analysis for ZGC in C2 uses dominator information to elide load barriers. This information is computed at the beginning of the scheduler phase (PhaseCFG::build_dominator_tree()) and is invalidated whenever the block ordering phase (PhaseCFG::fixup_flow()) inserts a new block (PhaseCFG::insert_goto_at()). Invalid dominator information might lead to miscompilation of load barriers, even though no such event has been observed in practice.

The following example illustrates the issue. First, PhaseCFG::build_dominator_tree() computes the dominator tree (immediate dominators and depth) as part of scheduling (after-scheduling.pdf). After register allocation, PhaseCFG::fixup_flow() inserts a ""goto"" block between B3 and B5 (renamed to B4 and B7 in before-barrier-analysis.pdf). At this point, the dominator information is invalid (B5 lacks an immediate dominator, B7's immediate dominator should be B5, and B7's depth should be 5), and should be repaired or recomputed for a correct late barrier analysis.

Thanks to Nils Eliasson for discovering the issue and providing a tentative solution.",,,,,,,,,,JDK-8299463,JDK-8296388,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8230565,,,,,,,,,,,,"2022-08-18 05:31;rcastanedalo;after-scheduling.pdf;https://bugs.openjdk.org/secure/attachment/100467/after-scheduling.pdf","2022-08-18 05:31;rcastanedalo;before-barrier-analysis.pdf;https://bugs.openjdk.org/secure/attachment/100466/before-barrier-analysis.pdf",,,,,,,,,,,,,,,,,,,,,,"0|i2yb37:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-19 09:33;chagedorn;ILW = Wrong dominator information could lead to miscompilations, with ZGC and not observed in practice yet, use other GC or possibly disable compilation of affected method = HLM = P3 ;;;","2022-09-20 00:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10353
Date: 2022-09-20 07:04:34 +0000;;;","2022-09-23 00:28;dukebot;Changeset: eec992c6
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-09-23 07:25:07 +0000
URL:       https://git.openjdk.org/jdk/commit/eec992c6b0ac77d08478d852a80c9470418d925d
;;;","2022-11-04 01:48;rcastanedalo;Note for backporting: the verification code added by this fix relies on JDK-8292285 and its subsequent fix JDK-8292660.;;;","2022-12-29 04:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/997
Date: 2022-12-29 12:20:32 +0000;;;","2022-12-29 04:28;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Typical risk of a C2 change.  Has verification code but no test. In 20 for a while now. 
Clean backport. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,
Crash due to missed CPU specific part of 8233019,JDK-8292599,5081865,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,snazarki,snazarki,snazarki,2022-08-18 04:44,2022-08-22 13:20,2023-10-01 09:56,2022-08-18 14:19,port-stage-aarch32-8,,,,,,port-stage-aarch32-8,hotspot,,0,,,,,,,,,,,,,,,,,,,,"Multiple crashes were reported after merge with jdk8u352-b01

#  Internal Error (c1_LIRAssembler_aarch32.cpp:1896), pid=6951, tid=0xa23af460
#  fatal error: unexpected type: *metadata*",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch32,,,,,,,,,,,,,,,,"0|i2yb2r:",9223372036854775807,,,,,,,,,,,,"2022-08-18 14:19;snazarki;Fixed at https://github.com/openjdk/aarch32-port-jdk8u/releases/tag/jdk8u352-b01-aarch32-20220817;;;",,,,,,,,,,,,,,,,,,,,,,
Use CSS custom properties for all fonts and colors ,JDK-8292594,5081860,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2022-08-18 04:16,2022-12-05 14:02,2023-10-01 09:56,2022-11-29 03:52,20,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,"The original implementation of JDK-8289334 left some color definitions as ""hardcoded"" CSS rules. A discussion of this can be found in the pull request:

 https://github.com/openjdk/jdk/pull/9839

We agreed that all fonts and colors should be defined via CSS custom properties.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289334,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yb1n:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-11-11 07:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11109
Date: 2022-11-11 15:17:23 +0000;;;","2022-11-29 03:52;dukebot;Changeset: 361b50e7
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2022-11-29 11:50:39 +0000
URL:       https://git.openjdk.org/jdk/commit/361b50e724f8c1177f89eaa93e38b69d244dadee
;;;",,,,,,,,,,,,,,,,,,,,,
JFR test TestNative is not reliable due to low rate of sampling.,JDK-8292592,5081858,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,rehn,rehn,rehn,2022-08-18 03:42,2022-08-24 23:18,2023-10-01 09:56,2022-08-19 09:09,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"When testing 8292591, which changes the timing of transitions and the sampler verification, it exposed an issue with TestNative.

The stable version of the test was changed to used a more by chance approach in ""8237574: Make TestNative work without -nativepath"".
And later a test for 8288846 was baked into this existing test and the sampling was increased to a very large interval.

When running with 8292591 it take a very long time before we get luck.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292591,,,,,,,,,,,,JDK-8237574,JDK-8288846,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yb17:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-08-18 04:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9915
Date: 2022-08-18 10:51:57 +0000;;;","2022-08-19 09:09;dukebot;Changeset: 45dec480
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2022-08-19 16:05:08 +0000
URL:       https://git.openjdk.org/jdk/commit/45dec480ef6f1d5509f4afbbf414c69584ac252e
;;;",,,,,,,,,,,,,,,,,,,,,
[macos] Multiscreen/MultiScreenLocationTest/MultiScreenLocationTest.java: Robot.mouseMove test failed on Screen #0,JDK-8292588,5081853,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,vprovodin,vprovodin,2022-08-18 01:55,2023-02-13 11:09,2023-10-01 09:56,2023-02-07 12:30,17,18,19,20,,,21,client-libs,,0,macos,sn_127,sn_128,sn_129,sn_132,sn_133,sn_134,sn_135,sn_137,,,,,,,,,,,"The test java/awt/Multiscreen/MultiScreenLocationTest/MultiScreenLocationTest.java fails on *macOS* system with dual monitor with the following diagnostic:
```
#section:main
----------messages:(5/208)----------
command: main MultiScreenLocationTest
reason: User specified action: run main MultiScreenLocationTest 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 0.317
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(11/699)----------
java.lang.RuntimeException: Robot.mouseMove test failed on Screen #0!
	at MultiScreenLocationTest.main(MultiScreenLocationTest.java:80)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Robot.mouseMove test failed on Screen #0!
JavaTest Message: shutting down test
```

The issue was observed with 20-ea+10-585, 19+35-2237, 18.0.2+9-61, 17.0.2+8-86 on macOS-12, macOS-11 both x86_64 and aarch64

*Reproducibility*:  ~100%
*Steps to reproduce*:
```
$ ../../jtreg/bin/jtreg -testjdk:../../jdk/openjdk/jdk-20.jdk/Contents/Home/ test/jdk/java/awt/Multiscreen/MultiScreenLocationTest/MultiScreenLocationTest.java
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-08-18 01:53;vprovodin;MultiScreenLocationTest.jtr;https://bugs.openjdk.org/secure/attachment/100456/MultiScreenLocationTest.jtr",,,,,,,generic,,,,,,,,,os_x,,,,,,,"0|i2yb03:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-09-16 13:54;achung;Sometimes the test will pass the mouseMove test then fail on the getPixelColor test. If the external monitor is made the primary display, it will usually pass the mouseMove test and fail on the getPixelColor test. If the built in display is made the primary display, it will usually fail on the mouseMove test.

It passes and fails randomly, looks like a test bug;;;","2022-09-16 17:33;achung;The pixel color failure is caused by robot.getPixelColor not working with the display color settings and isn't a product bug. 
mouseMove failure caused by the test updating the mouse location before robot has a change to finish moving the mouse;;;","2022-09-20 11:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10363
Date: 2022-09-20 18:24:26 +0000;;;","2023-02-07 12:30;dukebot;Changeset: 2a579ab8
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-02-07 20:28:52 +0000
URL:       https://git.openjdk.org/jdk/commit/2a579ab8392d30a35f044954178c788d16d4b800
;;;",,,,,,,,,,,,,,,,,,,
assert(cb != __null) failed: must be with -XX:-Inline,JDK-8292584,5081582,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,webbuggrp,webbuggrp,2022-08-15 02:06,2023-01-26 09:09,2023-10-01 09:56,2022-09-01 13:26,20,,,,,,20,hotspot,,0,dcsswa,oracle-triage-11,oracle-triage-17,oracle-triage-20,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: Ubuntu18.04
$ java -version
openjdk version ""20-internal"" 2023-03-21
OpenJDK Runtime Environment (fastdebug build 20-internal-adhoc.root.jdk)
OpenJDK 64-Bit Server VM (fastdebug build 20-internal-adhoc.root.jdk, mixed mode, sharing)


A DESCRIPTION OF THE PROBLEM :
This configuration fails:

CONF=linux-x86_64-server-fastdebug make test TEST=compiler/codecache/stress/UnexpectedDeoptimizationTest.java  TEST_VM_OPTS=""-XX:-Inline""

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/codeCache.inline.hpp:49
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jiahx/jdk/src/hotspot/share/code/codeCache.inline.hpp:49), pid=11323, tid=11379
#  assert(cb != __null) failed: must be
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.jiahx.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc.jiahx.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa64f53]  ContinuationEntry::assert_entry_frame_laid_out(JavaThread*)+0x1233
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#

Besides, the following tests also failed with option ""-XX:-Inline""
compiler/cha/AbstractRootMethod.java 
compiler/cha/DefaultRootMethod.java 
compiler/ciReplay/TestIncrementalInlining.java 
compiler/ciReplay/TestInliningProtectionDomain.java 
compiler/codecache/stress/UnexpectedDeoptimizationAllTest.java 
compiler/intrinsics/TestCheckIndex.java 
compiler/intrinsics/klass/CastNullCheckDroppingsTest.java 
compiler/jvmci/compilerToVM/DoNotInlineOrCompileTest.java 
compiler/jvmci/compilerToVM/HasNeverInlineDirectiveTest.java 
compiler/jvmci/compilerToVM/MaterializeVirtualObjectTest.java 
compiler/stable/TestStableBoolean.java 
compiler/stable/TestStableByte.java 
compiler/stable/TestStableChar.java 
compiler/stable/TestStableDouble.java 
compiler/stable/TestStableFloat.java 
compiler/stable/TestStableInt.java 
compiler/stable/TestStableLong.java 
compiler/stable/TestStableObject.java 
compiler/stable/TestStableShort.java 
compiler/stable/TestStableUByte.java 
compiler/stable/TestStableUShort.java 
compiler/uncommontrap/Decompile.java 
compiler/unsafe/UnsafeGetConstantField.java 


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291785,,,,,,,,JDK-8293654,JDK-8292694,,,,,,,"2022-08-18 00:32;sswsharm;hs_err_pid24527.log;https://bugs.openjdk.org/secure/attachment/100451/hs_err_pid24527.log",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2y9bv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-18 00:30;sswsharm;Issue is reproduced.

UnexpectedDeoptimizationTest.java is failed
 when ""-XX:-Inline"" is used.

OS : Ubuntu 18.04
JDK 20 fastdebug internal build :Fail

Moving it to dev team for further analysis;;;","2022-08-18 03:24;chagedorn;ILW = Assertion failure in code cache, single test and only with -XX:-Inline, use -XX:+Inline = HLL = P4;;;","2022-08-18 03:26;chagedorn;The other mentioned test failures are most likely test bugs.;;;","2022-08-19 01:48;dlong;We seem to be getting a bad sender_pc in frame::sender_for_compiled_frame() for a
jdk.internal.vm.Continuation::yield0() frame compiled by C1.;;;","2022-08-19 15:00;dlong;If inlining is enabled, yield0 will call the runtime stub for doYield directly.  If inlining is disable, it will go through SharedRuntime::resolve_static_call_C(), which returns the c2i adapter, resulting in a call to the interpreter entry point for doYield, which jumps to the cont_doYield() runtime stub.

I think the problem is the c2i adapter adjusting the stack and the last frame looking like a compiled frame, not an interpreter frame.;;;","2022-08-19 19:12;dlong;generate_Continuation_doYield_entry() is creating a walkable ""last"" frame, not a leaf, so it really should be setting up an interpreter frame and inlining the generate_cont_doYield() code, or performing ""i2c"" logic to reset the stack to the sender SP before jumping to the compiled stub.

Alternative solutions:
 - force C1 to always inline this intrinsic.
 - print a warning and refuse to enable Continuations if the doYield intrinsic is disabled
 - make doYield a special native intrinsic like enterSpecial, bypassing inlining checks;;;","2022-08-19 20:34;dlong;This probably only happens on x86_64 because of JDK-8292694.;;;","2022-08-22 23:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9974
Date: 2022-08-23 06:53:36 +0000;;;","2022-09-01 13:26;dukebot;Changeset: fa68371b
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-09-01 20:19:37 +0000
URL:       https://git.openjdk.org/jdk/commit/fa68371bb816d797da02e51187955044f835d402
;;;",,,,,,,,,,,,,,
Comment for ciArrayKlass::make is wrong,JDK-8292583,5081848,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,dfenacci,thartmann,thartmann,2022-08-18 00:26,2023-03-28 01:12,2023-10-01 09:56,2023-02-26 23:35,11,17,20,,,,21,hotspot,,0,cleanup,noreg-doc,oracle-triage-20,starter,,,,,,,,,,,,,,,,"The comment for ciArrayKlass::make is wrong (copy/paste error):
https://github.com/openjdk/jdk/blob/0d96546ab93600f17877e5db2770e4125916bcda/src/hotspot/share/ci/ciArrayKlass.cpp#L98",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yayz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-18 00:27;thartmann;ILW = LLL = P5;;;","2023-02-24 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12740
Date: 2023-02-24 09:28:25 +0000;;;","2023-02-26 23:35;dukebot;Changeset: db217c9a
Author:    Damon Fenacci <damon.fenacci@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-02-27 07:33:13 +0000
URL:       https://git.openjdk.org/jdk/commit/db217c9ad68d3627fb6c9ec99634c7dd03a249d8
;;;",,,,,,,,,,,,,,,,,,,,
Add reference to the java.nio.file package in java.nio package documentation,JDK-8292566,5081830,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-08-17 13:14,2022-08-24 23:20,2023-10-01 09:56,2022-08-22 08:55,20,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,There are minor references to the channels and charset subpackages but none for the file subpackage.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292567,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yauz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-08-17 13:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9910
Date: 2022-08-17 20:29:47 +0000;;;","2022-08-22 08:55;dukebot;Changeset: f95ee796
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-08-22 15:53:12 +0000
URL:       https://git.openjdk.org/jdk/commit/f95ee7960328410551a6948053d1ff0ec3d8c53d
;;;",,,,,,,,,,,,,,,,,,,,,
GitHub actions: intermittent build failure on macOS while downloading ant,JDK-8292549,5081807,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2022-08-17 06:09,2022-11-29 06:08,2023-10-01 09:56,2022-08-19 05:05,jfx20,,,,,,jfx20,javafx,,0,intermittent,noreg-self,testbug,,,,,,,,,,,,,,,,,"The JavaFX GitHub actions run on macOS 11 fail intermittently while trying to download ant. Here is a recent example:

https://github.com/kevinrushforth/jfx/runs/7550890974?check_suite_focus=true

The failures tend to look like this:

...

--2022-07-28 00:17:48--  (try:19)  https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.5-bin.tar.gz
Connecting to archive.apache.org (archive.apache.org)|138.201.131.134|:443... failed: Operation timed out.
Retrying.

--2022-07-28 00:19:13--  (try:20)  https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.5-bin.tar.gz
Connecting to archive.apache.org (archive.apache.org)|138.201.131.134|:443... failed: Operation timed out.
Giving up.",,,,,,,,,,JDK-8296166,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290527,,,,JDK-8293490,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,,"0|i2yapv:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-08-18 15:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/879
Date: 2022-08-18 22:22:36 +0000;;;","2022-08-19 05:05;dukebot;Changeset: cedc17cc
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-08-19 12:00:27 +0000
URL:       https://git.openjdk.org/jfx/commit/cedc17cc26bb0ad3e2d0693bd174f118ad5f0b82
;;;","2022-11-01 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/88
Date: 2022-11-01 12:59:01 +0000;;;",,,,,,,,,,,,,,,,,,,,
[Metrics] Reported memory limit may exceed physical machine memory,JDK-8292541,5081798,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdowland,sgehwolf,sgehwolf,2022-08-17 02:45,2023-03-14 20:49,2023-10-01 09:56,2022-08-26 09:24,11.0.16,17.0.4,19,20,,,20,core-svc,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,"This is the equivalent core-libs bug for Hotspot's JDK-8292083. When the container memory exceeds the physical host's memory, the Java metrics reporting is wrong. Example (on a host with 32GB physical memory):

# podman run --memory 36G --memory-swap 36G --rm -ti -v $(pwd)/build/linux-x86_64-server-release/images/jdk/:/opt/jdk:z fedora:36
[root@71845cef857a /]# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv1
    Effective CPU Count: 8
    CPU Period: 100000us
    CPU Quota: -1
    CPU Shares: -1
    List of Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Effective Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Memory Nodes, 1 total: 
    0 
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: 36.00G
    Memory Soft Limit: Unlimited
    Memory & Swap Limit: 36.00G
    Maximum Processes Limit: 2048

openjdk version ""20-internal"" 2023-03-21
OpenJDK Runtime Environment (build 20-internal-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 20-internal-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)

Expected 'Memory Limit: 32.00G' instead of the reported 'Memory Limit: 36.00G'",,,,,,,,,,JDK-8293447,JDK-8304217,JDK-8296177,JDK-8293446,JDK-8298404,JDK-8304045,JDK-8300661,,,,,,,,,,,,,,,,,,,,,JDK-8300119,JDK-8292083,,,JDK-8299858,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,,"0|i2yanv:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-08-17 02:47;sgehwolf;Work-around is to use -XX:-UseContainerSupport, but that's not great as the default is turned on and it makes little sense to run with containers support but with memory/cpu limits greater than the host system the container runs on.;;;","2022-08-17 03:09;sgehwolf;Same issue, but with the OS MX bean:

[root@67d40c833987 /]# /opt/jdk/bin/jshell
|  Welcome to JShell -- Version 20-internal
|  For an introduction type: /help intro

jshell> com.sun.management.OperatingSystemMXBean os = (com.sun.management.OperatingSystemMXBean) java.lang.management.ManagementFactory.getOperatingSystemMXBean();
os ==> com.sun.management.internal.OperatingSystemImpl@69663380

jshell> os.getTotalMemorySize()
$2 ==> 38654705664

Should be 33258033152, actual 38654705664.;;;","2022-08-25 02:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10017
Date: 2022-08-25 09:50:44 +0000;;;","2022-08-26 09:24;dukebot;Changeset: 9a0d1e7c
Author:    Jonathan Dowland <jdowland@openjdk.org>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-08-26 16:22:14 +0000
URL:       https://git.openjdk.org/jdk/commit/9a0d1e7ce86368cdcade713a9e220604f7d77ecf
;;;","2022-09-05 03:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/652
Date: 2022-09-05 10:39:00 +0000;;;","2022-09-05 04:46;jdowland;Fix Request (17u)

I would like to backport this to 17u as we have seen it in the wild and want to get the fix out to 17u customers.
Patch applies clean, the added tests fail in 17u master prior to patch and pass afterwards.

Thanks!;;;","2022-09-05 04:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1355
Date: 2022-09-05 11:44:52 +0000;;;","2022-09-05 04:52;jdowland;Fix Request (11u) 

Same justification as 17u, above. Thanks!;;;","2023-01-03 03:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/220
Date: 2023-01-03 11:46:29 +0000;;;","2023-01-19 05:58;jdowland;Fix Request (8u)

Please consider as part of cgroups v2 support for jdk8u. Note that the backport rolls up a fix
for 8300119 as well. Thank you;;;",,,,,,,,,,,,,
CDS ArchivedEnumTest.java fails: object points to a static field that may be reinitialized,JDK-8292499,5081747,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,iklam,dcubed,dcubed,2022-08-16 13:13,2022-12-14 09:43,2023-10-01 09:56,2022-08-18 20:07,20,,,,,,20,hotspot,,0,problemlist,regression,tier2,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

runtime/cds/appcds/cacheObject/ArchivedEnumTest.java

Here's a snippet from the log file:

#section:driver
----------messages:(5/150)----------
command: driver ArchivedEnumTest
reason: User specified action: run driver ArchivedEnumTest 
Mode: agentvm
Agent id: 13
elapsed time (seconds): 1.443
----------configuration:(18/2597)----------

<snip>

----------System.out:(11/4642)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+11-642/linux-aarch64-debug.jdk/jdk-20/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23099d70-9761-4af7-aafd-747dc79940b2/runs/907e655f-1254-41ba-ade5-c755c1ee1560/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/3/runtime/cds/appcds/cacheObject/ArchivedEnumTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+11-642/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/cacheObject:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23099d70-9761-4af7-aafd-747dc79940b2/runs/907e655f-1254-41ba-ade5-c755c1ee1560/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/3/test/lib:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23099d70-9761-4af7-aafd-747dc79940b2/runs/907e655f-1254-41ba-ade5-c755c1ee1560/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/3/test/hotspot/jtreg/runtime/cds/appcds:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar -XX:MaxRAMPercentage=6.25 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23099d70-9761-4af7-aafd-747dc79940b2/runs/907e655f-1254-41ba-ade5-c755c1ee1560/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/tmp -cp /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23099d70-9761-4af7-aafd-747dc79940b2/runs/907e655f-1254-41ba-ade5-c755c1ee1560/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/2/ArchivedEnumApp.jar -Xshare:dump -Xlog:cds -XX:SharedArchiveFile=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23099d70-9761-4af7-aafd-747dc79940b2/runs/907e655f-1254-41ba-ade5-c755c1ee1560/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/2/appcds-20h03m46s952.jsa -XX:ExtraSharedClassListFile=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23099d70-9761-4af7-aafd-747dc79940b2/runs/907e655f-1254-41ba-ade5-c755c1ee1560/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/2/runtime.cds.appcds.cacheObject.ArchivedEnumTest.java-test.classlist ]
[2022-08-16T20:03:46.997203145Z] Gathering output for process 1431910
[ELAPSED: 1262 ms]
[logging stdout to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23099d70-9761-4af7-aafd-747dc79940b2/runs/907e655f-1254-41ba-ade5-c755c1ee1560/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/2/runtime.cds.appcds.cacheObject.ArchivedEnumTest.java-0000-dump.stdout]
[logging stderr to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23099d70-9761-4af7-aafd-747dc79940b2/runs/907e655f-1254-41ba-ade5-c755c1ee1560/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/2/runtime.cds.appcds.cacheObject.ArchivedEnumTest.java-0000-dump.stderr]
[STDERR]

[2022-08-16T20:03:48.259513650Z] Waiting for completion for process 1431910
[2022-08-16T20:03:48.259828049Z] Waiting for completion finished for process 1431910
[2022-08-16T20:03:48.259940129Z] Waiting for completion for process 1431910
[2022-08-16T20:03:48.259983369Z] Waiting for completion finished for process 1431910
----------System.err:(86/6220)----------
 stdout: [[0.013s][info][cds] Core region alignment: 65536
[0.078s][info][cds] JVM_StartThread() ignored: java.lang.ref.Reference$ReferenceHandler
[0.078s][info][cds] JVM_StartThread() ignored: java.lang.ref.Finalizer$FinalizerThread
[0.124s][info][cds] JVM_StartThread() ignored: jdk.internal.misc.InnocuousThread
[0.157s][info][cds] Loading classes to share ...
[0.407s][info][cds] Loading classes to share: done.
[0.407s][info][cds] Shared spaces: preloaded 1322 classes
[0.408s][info][cds] Rewriting and linking classes ...
[0.408s][info][cds] Regenerate MethodHandle Holder classes...
[0.631s][info][cds] Regenerate MethodHandle Holder classes...done
[0.653s][info][cds] Rewriting and linking classes: done
[0.655s][info][cds] Run GC ...
[0.730s][info][cds] Run GC done
[0.732s][info][cds] Gathering all archivable objects ... 
[0.732s][info][cds] Gathering classes and symbols ... 
[0.856s][info][cds] Sorting symbols and fixing identity hash ... 
[0.860s][info][cds] Sorting classes ... 
[1.018s][info][cds] _estimated_hashtable_bytes = 386240 + 40624 = 426864
[1.018s][info][cds] _estimated_metaspaceobj_bytes = 222733376
[1.018s][info][cds] total estimate bytes = 223291312
[1.018s][info][cds] Reserved output buffer space at 0x0000fffe16b00000 [223346688 bytes]
[1.018s][info][cds] Allocating RW objects ... 
[1.032s][info][cds] done (28119 objects)
[1.032s][info][cds] Allocating RO objects ... 
[1.074s][info][cds] done (81057 objects)
[1.074s][info][cds] Relocating embedded pointers in core regions ... 
[1.132s][info][cds] Heap range = [0x0000000084000000 - 0x0000000100000000]
[1.132s][info][cds] Dumping objects to closed archive heap region ...
[1.144s][info][cds] Dumping objects to open archive heap region ...
[1.174s][info][cds] archived obj roots[2275] = 1140 words, klass = 0x100059da0, obj = 0xffe76340
[1.177s][warning][cds,heap] Archive heap points to a static field that may be reinitialized at runtime:
[1.177s][warning][cds,heap] Field: java/lang/reflect/AccessFlag$Location::EMPTY_SET
[1.177s][warning][cds,heap] Value: java.util.ImmutableCollections$SetN 
[1.177s][warning][cds,heap] {0x0000000084115ad0} - klass: 'java/util/ImmutableCollections$SetN'
[1.177s][warning][cds,heap]  - ---- fields (total size 3 words):
[1.177s][warning][cds,heap]  - final synchronized 'size' 'I' @12  0
[1.177s][warning][cds,heap]  - final synchronized 'elements' '[Ljava/lang/Object;' @16  a 'java/lang/Object'[0] {0x0000000084115ae8} (84115ae8)
[1.177s][warning][cds,heap] --- trace begin ---
[1.177s][warning][cds,heap] [ 0] {0x0000000084193f68} jdk.internal.module.ArchivedModuleGraph::finder (offset = 16)
[1.177s][warning][cds,heap] [ 1] {0x0000000084171ca0} jdk.internal.module.SystemModuleFinders$SystemModuleFinder::mrefs (offset = 12)
[1.177s][warning][cds,heap] [ 2] {0x0000000084171cb8} java.util.ImmutableCollections$SetN::elements (offset = 16)
[1.177s][warning][cds,heap] [ 3] {0x0000000084171cd0} [Ljava.lang.Object; @[1]
[1.177s][warning][cds,heap] [ 4] {0x000000008416ecd8} jdk.internal.module.ModuleReferenceImpl::descriptor (offset = 12)
[1.177s][warning][cds,heap] [ 5] {0x000000008415f948} java.lang.module.ModuleDescriptor::modifiers (offset = 32)::opens (offset = 44)
[1.177s][warning][cds,heap] [ 6] {0x0000000084115ad0} java.util.ImmutableCollections$SetN
[1.177s][warning][cds,heap] --- trace end ---
[1.177s][warning][cds,heap] 
[1.177s][warning][cds,heap] Scanned 23853 objects. Found 1 case(s) where an object points to a static field that may be reinitialized at runtime.
[1.180s][info   ][cds     ] Relocating external roots ... 
[1.182s][info   ][cds     ] done
[1.182s][info   ][cds     ] Dumping symbol table ...
[1.208s][info   ][cds     ] Relocating vmClasses::_klasses[] ... 
[1.208s][info   ][cds     ] Make classes shareable
[1.223s][info   ][cds     ] Number of classes 1486
[1.223s][info   ][cds     ]     instance classes   =  1367
[1.223s][info   ][cds     ]       boot             =  1366
[1.223s][info   ][cds     ]       app              =     1
[1.223s][info   ][cds     ]       platform         =     0
[1.223s][info   ][cds     ]       unregistered     =     0
[1.223s][info   ][cds     ]       (hidden)         =    91
[1.223s][info   ][cds     ]       (unlinked)       =     0
[1.223s][info   ][cds     ]     obj array classes  =   110
[1.223s][info   ][cds     ]     type array classes =     9
[1.223s][info   ][cds     ]                symbols = 41398
[1.230s][info   ][cds     ] Dumping shared data to file: 
[1.230s][info   ][cds     ]    /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S65203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23099d70-9761-4af7-aafd-747dc79940b2/runs/907e655f-1254-41ba-ade5-c755c1ee1560/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/2/appcds-20h03m46s952.jsa
[1.235s][info   ][cds     ] Shared file region (rw )  0:  5245816 bytes, addr 0x0000000800000000 file offset 0x00010000 crc 0x2765ad12
[1.243s][info   ][cds     ] Shared file region (ro )  1:  8333776 bytes, addr 0x0000000800510000 file offset 0x00520000 crc 0x4db2effd
[1.244s][info   ][cds     ] Shared file region (bm )  2:   247976 bytes, addr 0x0000000000000000 file offset 0x00d20000 crc 0x1d7cc043
[1.245s][info   ][cds     ] Shared file region (ca0)  3:   589824 bytes, addr 0x00000000fff00000 file offset 0x00d60000 crc 0x32a1c991
[1.245s][info   ][cds     ] Shared file region (oa0)  5:   524288 bytes, addr 0x00000000ffe00000 file offset 0x00df0000 crc 0xcc384f11
];
 stderr: []
 exitValue = 0

java.lang.RuntimeException: 'object points to a static field that may be reinitialized at runtime' found in stdout
	at jdk.test.lib.process.OutputAnalyzer.shouldNotContain(OutputAnalyzer.java:267)
	at ArchivedEnumTest.main(ArchivedEnumTest.java:49)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'object points to a static field that may be reinitialized at runtime' found in stdout",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292635,,,,JDK-8289106,JDK-8275731,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yacj:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-08-16 13:19;dcubed;These test failures occurred in jdk-20+11-642-tier2 and that build-ID contains
only once changset:

JDK-8289106 Add model of class file versions to core reflection

At first glance, it is not obvious (to me anyway) how [~darcy]'s fix could be related
to this new test failure mode...;;;","2022-08-16 13:24;darcy;Added a new enum class to java.base...;;;","2022-08-16 13:55;iklam;ArchivedEnumTest.java was created to catch similar problems as found in JDK-8275731. We probably need a similar fix. See https://github.com/openjdk/jdk/pull/6653
;;;","2022-08-16 14:56;dcubed;Since this appears to be a regression, I'm bumping
the priority from P3 -> P2.;;;","2022-08-16 17:39;iklam;The check in cdsHeapVerifier.cpp is too strict and should be relaxed. AccessFlag$Location::EMPTY_SET is the same object as ImmutableCollections::EMPTY_SET, which is archived in the CDS heap. So at run time, we can guarantee that 

    AccessFlag$Location::EMPTY_SET ==  ImmutableCollections::EMPTY_SET

(... even if object equality may not be required by the AccessFlag class).

The following patch fixes the test. I am trying to see if a more general fix can be done.

diff --git a/src/hotspot/share/cds/cdsHeapVerifier.cpp b/src/hotspot/share/cds/cdsHeapVerifier.cpp
index 1eff9116901..849ce6f14d4 100644
--- a/src/hotspot/share/cds/cdsHeapVerifier.cpp
+++ b/src/hotspot/share/cds/cdsHeapVerifier.cpp
@@ -101,6 +101,10 @@ CDSHeapVerifier::CDSHeapVerifier() : _archived_objs(0), _problems(0)
                                                          ""ALL_UNNAMED_MODULE_SET"", // A
                                                          ""EVERYONE_MODULE"",        // A
                                                          ""EVERYONE_SET"");          // A
+
+  // This is the same as java/util/ImmutableCollections::EMPTY_SET, which is archived
+  ADD_EXCL(""java/lang/reflect/AccessFlag$Location"",      ""EMPTY_SET"");             // E
+
   ADD_EXCL(""java/lang/System"",                           ""bootLayer"");             // A
   ADD_EXCL(""java/lang/VersionProps"",                     ""VENDOR_URL_BUG"",         // C
                                                          ""VENDOR_URL_VM_BUG"",      // C
;;;","2022-08-18 15:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9926
Date: 2022-08-18 19:56:30 +0000;;;","2022-08-18 20:07;dukebot;Changeset: 964aac28
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-08-19 03:04:08 +0000
URL:       https://git.openjdk.org/jdk/commit/964aac28fe4a33f9e86cc07895a7ff4cdbaec3e6
;;;",,,,,,,,,,,,,,,,
"java/lang/invoke/lambda/LogGeneratedClassesTest.java failed with ""AssertionError: only show error once expected [1] but found [0]""",JDK-8292498,5081746,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,darcy,dcubed,dcubed,2022-08-16 12:28,2023-01-20 00:25,2023-10-01 09:56,2022-08-18 09:14,20,,,,,,20,core-libs,,0,problemlist,regression,tier1,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/lang/invoke/lambda/LogGeneratedClassesTest.java

Here's a snippet from the log file:

#section:testng
----------messages:(5/169)----------
command: testng LogGeneratedClassesTest
reason: User specified action: run testng LogGeneratedClassesTest 
Mode: agentvm
Agent id: 12
elapsed time (seconds): 2.126
----------configuration:(16/1596)*----------
Boot Layer
  class path: C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\javatest.jar 
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\jtreg.jar 
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\junit.jar 
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\hamcrest.jar 
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\testng.jar 
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\jcommander.jar 
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\guice.jar 
  patch:      java.base C:\\sb\\prod\\1660677053\\testoutput\\test-support\\jtreg_open_test_jdk_tier1_part1\\patches\\java.base

Test Layer
  class path: C:\\sb\\prod\\1660677053\\testoutput\\test-support\\jtreg_open_test_jdk_tier1_part1\\classes\\1\\java\\lang\\invoke\\lambda\\LogGeneratedClassesTest.d
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+11-642\\src.full\\open\\test\\jdk\\java\\lang\\invoke\\lambda
              C:\\sb\\prod\\1660677053\\testoutput\\test-support\\jtreg_open_test_jdk_tier1_part1\\classes\\1\\java\\nio\\file
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+11-642\\src.full\\open\\test\\jdk\\java\\nio\\file

----------rerun:(34/5377)*----------

<snip>

----------System.out:(120/7518)*----------
config LogGeneratedClassesTest.setup(): success
test LogGeneratedClassesTest.testDumpDirIsFile(): failure
java.lang.AssertionError: only show error once expected [1] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:797)
	at LogGeneratedClassesTest.testDumpDirIsFile(LogGeneratedClassesTest.java:165)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)
test LogGeneratedClassesTest.testDumpDirNotExist(): failure
java.lang.AssertionError: only show error once expected [1] but found [0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:797)
	at LogGeneratedClassesTest.testDumpDirNotExist(LogGeneratedClassesTest.java:149)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)
WARNING: POSIX is not supported. Skipping testDumpDirNotWritable test.
test LogGeneratedClassesTest.testDumpDirNotWritable(): success
test LogGeneratedClassesTest.testLogging(): success
accepted: dumpLong
accepted: dumpLong\\com
accepted: dumpLong\\com\\example
accepted: dumpLong\\com\\example\\nonsense
accepted: dumpLong\\com\\example\\nonsense\\nonsense
filetered out: dumpLong\\java
filetered out: dumpLong\\java\\lang
filetered out: dumpLong\\java\\lang\\Class$$Lambda$41.class
filetered out: dumpLong\\java\\lang\\SecurityManager$$Lambda$21.class
filetered out: dumpLong\\java\\lang\\SecurityManager$$Lambda$22.class
filetered out: dumpLong\\java\\lang\\SecurityManager$$Lambda$23.class
filetered out: dumpLong\\java\\lang\\SecurityManager$$Lambda$24.class
filetered out: dumpLong\\java\\lang\\SecurityManager$$Lambda$25.class
filetered out: dumpLong\\java\\lang\\SecurityManager$$Lambda$26.class
filetered out: dumpLong\\java\\lang\\SecurityManager$$Lambda$27.class
filetered out: dumpLong\\java\\lang\\SecurityManager$$Lambda$28.class
filetered out: dumpLong\\java\\lang\\SecurityManager$$Lambda$29.class
filetered out: dumpLong\\java\\lang\\SecurityManager$$Lambda$30.class
filetered out: dumpLong\\java\\lang\\SecurityManager$$Lambda$31.class
filetered out: dumpLong\\java\\lang\\System$$Lambda$32.class
filetered out: dumpLong\\java\\util
filetered out: dumpLong\\java\\util\\ServiceLoader$$Lambda$40.class
filetered out: dumpLong\\jdk
filetered out: dumpLong\\jdk\\internal
filetered out: dumpLong\\jdk\\internal\\loader
filetered out: dumpLong\\jdk\\internal\\loader\\BuiltinClassLoader$$Lambda$39.class
filetered out: dumpLong\\jdk\\internal\\loader\\BuiltinClassLoader$$Lambda$49.class
filetered out: dumpLong\\jdk\\internal\\logger
filetered out: dumpLong\\jdk\\internal\\logger\\SimpleConsoleLogger$CallerFinder$$Lambda$42.class
filetered out: dumpLong\\sun
filetered out: dumpLong\\sun\\net
filetered out: dumpLong\\sun\\net\\www
filetered out: dumpLong\\sun\\net\\www\\protocol
filetered out: dumpLong\\sun\\net\\www\\protocol\\jrt
filetered out: dumpLong\\sun\\net\\www\\protocol\\jrt\\JavaRuntimeURLConnection$$Lambda$38.class
test LogGeneratedClassesTest.testLoggingException(): success
test LogGeneratedClassesTest.testNotLogging(): success
config LogGeneratedClassesTest.cleanup(): success

===============================================
java/lang/invoke/lambda/LogGeneratedClassesTest.java
Total tests run: 6, Passes: 4, Failures: 2, Skips: 0
===============================================

----------System.err:(24/1402)----------
TestLambda.java:7: warning: [removal] SecurityManager in java.lang has been deprecated and marked for removal
        System.setSecurityManager(new SecurityManager());
                                      ^
TestLambda.java:7: warning: [removal] setSecurityManager(SecurityManager) in System has been deprecated and marked for removal
        System.setSecurityManager(new SecurityManager());
              ^
2 warnings
LongPackageName.java:7: warning: [removal] SecurityManager in java.lang has been deprecated and marked for removal
        System.setSecurityManager(new SecurityManager());
                                      ^
LongPackageName.java:7: warning: [removal] setSecurityManager(SecurityManager) in System has been deprecated and marked for removal
        System.setSecurityManager(new SecurityManager());
              ^
2 warnings
java.lang.Exception: failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: failures: 2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289106,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,,"0|i2yacb:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,Verified,,"2022-08-17 06:20;jpai;I had a deeper look at this. The failure reported in mach5 are only on Windows systems. However, after figuring out what is going, I can now reproduce this on non-Windows setups too (and even locally). 

This specific test case LogGeneratedClassesTest internally launches Java process (one each in a test method) and passes it values to the system property ""jdk.internal.lambda.dumpProxyClasses"". This system property takes a path as a value. The java.lang.invoke.ProxyClassesDumper then reads this value and expects it to be a directory (which exists). Those checks are done in this ProxyClassesDumper class and if those requirements aren't satisfied then it logs a WARNING message to the process' output. The test then verifies/asserts that these specific WARNING messages are present.

In the failing cases above, this logging message is absent. The code in ProxyClassesDumper which does that logging is as follows:
...
} catch (IllegalArgumentException iae) {
            PlatformLogger.getLogger(ProxyClassesDumper.class.getName())
                          .warning(iae.getMessage() + "" - dumping disabled"");

So it uses the PlatformLogger.getLogger(...) to do the logging. I added a bit of manual debug messages to the relevant parts of the code and what's happening is that the call to PlatformLogger.getLogger(...) is triggering a NullPointerException. Very specifically, this is what that exception stacktrace looks like (I had to modify the JDK code to generate this, because by default the stacktrace isn't logged):

Error occurred during initialization of boot layer
java.lang.ExceptionInInitializerError
	at java.base/java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:331)
	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:134)
	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:315)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:279)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:269)
	at java.base/java.lang.reflect.AccessFlag.<clinit>(AccessFlag.java:100)
	at java.base/java.lang.module.ModuleDescriptor$Modifier.<clinit>(ModuleDescriptor.java:109)
	at java.base/java.lang.module.ModuleDescriptor.<init>(ModuleDescriptor.java:1326)
	at java.base/java.lang.module.ModuleDescriptor$1.newModuleDescriptor(ModuleDescriptor.java:2738)
	at java.base/jdk.internal.module.Builder.build(Builder.java:270)
	at java.base/jdk.internal.module.SystemModules$default.moduleDescriptors(Unknown Source)
	at java.base/jdk.internal.module.SystemModuleFinders.of(SystemModuleFinders.java:146)
	at java.base/jdk.internal.module.ModuleBootstrap.boot2(ModuleBootstrap.java:240)
	at java.base/jdk.internal.module.ModuleBootstrap.boot(ModuleBootstrap.java:174)
	at java.base/java.lang.System.initPhase2(System.java:2214)
Caused by: java.lang.NullPointerException
	at java.base/java.util.Objects.requireNonNull(Objects.java:233)
	at java.base/jdk.internal.logger.LazyLoggers$LazyLoggerAccessor.<init>(LazyLoggers.java:126)
	at java.base/jdk.internal.logger.LazyLoggers$LazyLoggerAccessor.makeAccessor(LazyLoggers.java:293)
	at java.base/jdk.internal.logger.LazyLoggers$JdkLazyLogger.<init>(LazyLoggers.java:372)
	at java.base/jdk.internal.logger.LazyLoggers.getLazyLogger(LazyLoggers.java:443)
	at java.base/sun.util.logging.PlatformLogger.getLogger(PlatformLogger.java:297)
	at java.base/java.lang.invoke.ProxyClassesDumper.getInstance(ProxyClassesDumper.java:79)
	at java.base/java.lang.invoke.InnerClassLambdaMetafactory.<clinit>(InnerClassLambdaMetafactory.java:102)
	... 15 more

The member that is null (which triggers this NPE) is the following member in java.lang.Class:

    // set by VM
    private transient Module module;

Looking at the stacktrace it appears that during the boot sequence, the java.lang.reflect.AccessFlag in its static init code is using lambdas which seems to be triggering the above code in ProxyClassesDumper. The usage of lambdas in AccessFlag is only very recent change through https://bugs.openjdk.org/browse/JDK-8289106. Perhaps it should instead use anonymous classes?

The reason why this fails only on Windows on mach5, I think, is because booting from a CDS archive is perhaps disabled on Windows (I don't know, I'm just guessing here) and hence it enters the ModuleBootstrap.boot2() method on Windows (from ModuleBootstrap.boot())? On other setups, my experiments show that it uses CDS archive to bootstrap the bootlayer and hence doesn't end up in that code (during the boot sequence).

To reproduce this consistently on all setups, the following change to the test should help (I pass -Xshare:off to the Java launch command in the test to disable CDS archive usage):

diff --git a/test/jdk/java/lang/invoke/lambda/LogGeneratedClassesTest.java b/test/jdk/java/lang/invoke/lambda/LogGeneratedClassesTest.java
index d75e9b4d2a5..f9779be6f3c 100644
--- a/test/jdk/java/lang/invoke/lambda/LogGeneratedClassesTest.java
+++ b/test/jdk/java/lang/invoke/lambda/LogGeneratedClassesTest.java
@@ -145,8 +145,12 @@ public class LogGeneratedClassesTest extends LUtils {
                                ""-cp"", ""."",
                                ""-Djava.security.manager=allow"",
                                ""-Djdk.internal.lambda.dumpProxyClasses=notExist"",
+                               ""-Xshare:off"",
                                ""com.example.TestLambda"");
-        assertEquals(tr.testOutput.stream()
+        final List<String> processOutput = tr.testOutput;
+        System.err.println(""Process output from testDumpDirNotExist: "");
+        processOutput.forEach(System.err::println);
+        assertEquals(processOutput.stream()
                                   .filter(s -> s.startsWith(""WARNING""))
                                   .filter(s -> s.contains(""does not exist""))
                                   .count(),
@@ -161,8 +165,12 @@ public class LogGeneratedClassesTest extends LUtils {
                                ""-cp"", ""."",
                                ""-Djava.security.manager=allow"",
                                ""-Djdk.internal.lambda.dumpProxyClasses=file"",
+                               ""-Xshare:off"",
                                ""com.example.TestLambda"");
-        assertEquals(tr.testOutput.stream()
+        final List<String> processOutput = tr.testOutput;
+        System.err.println(""Process output from testDumpDirIsFile: "");
+        processOutput.forEach(System.err::println);
+        assertEquals(processOutput.stream()
                                   .filter(s -> s.startsWith(""WARNING""))
                                   .filter(s -> s.contains(""not a directory""))
                                   .count(),


;;;","2022-08-17 15:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9911
Date: 2022-08-17 22:33:03 +0000;;;","2022-08-18 09:14;dukebot;Changeset: f567fa0f
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-08-18 16:09:26 +0000
URL:       https://git.openjdk.org/jdk/commit/f567fa0fd53c519cdda1da8a7aaa0df895abc6e9
;;;",,,,,,,,,,,,,,,,,,,,
Ensure SystemDictionary::set_platform_loader and set_system_loader are called only once,JDK-8292494,5081742,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,ccheung,ccheung,2022-08-16 11:42,2022-09-06 17:24,2023-10-01 09:56,2022-08-25 09:12,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"The SystemDictionary::set_system_loader and SystemDictionary::set_platform_loader functions are for setting the _java_system_loader and the _java_platform_loader fields, respectively, during VM startup. The functions should only be called once.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291840,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yabf:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-16 11:45;ccheung;Possible fix:

void SystemDictionary::set_system_loader(ClassLoaderData *cld) {
  assert(_java_system_loader.is_empty(), ""already set!"");
  _java_system_loader = cld->class_loader_handle();
}

Similarly for the SystemDictionary::set_platform_loader.;;;","2022-08-23 11:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9988
Date: 2022-08-23 18:24:30 +0000;;;","2022-08-25 09:12;dukebot;Changeset: 88af2040
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-08-25 16:10:37 +0000
URL:       https://git.openjdk.org/jdk/commit/88af204027ec51d6e13516fa61e1c217a9445c62
;;;",,,,,,,,,,,,,,,,,,,,
JFR: Incorrect comment in ActiveRecordingEvent,JDK-8292488,5081732,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,egahlin,egahlin,egahlin,2022-08-16 09:58,2022-08-24 23:17,2023-10-01 09:56,2022-08-18 09:47,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"There is one additional ""String"" in the order field comment that shouldn't be there.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ya97:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-08-16 21:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9897
Date: 2022-08-17 04:45:48 +0000;;;","2022-08-18 09:44;egahlin;Contributor: suematsu.shiny@fujitsu.com
Change of an incorrect comment.;;;","2022-08-18 09:47;dukebot;Changeset: 20a3cb7c
Author:    chigiriki <suematsu.shinya@jp.fujitsu.com>
Committer: Erik Gahlin <egahlin@openjdk.org>
Date:      2022-08-18 16:46:16 +0000
URL:       https://git.openjdk.org/jdk/commit/20a3cb7ce348dabb71292d19a979a8c12cfe3c6d
;;;",,,,,,,,,,,,,,,,,,,,
Back out the fix forJDK-8281962 from jdk19u,JDK-8292487,5081731,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,lancea,lancea,lancea,2022-08-16 09:53,2022-09-05 00:35,2023-10-01 09:56,2022-08-19 08:52,19,,,,,,19.0.1,core-libs,,0,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,noreg-undo,,,,,,,,,,,,,,,,"The fix for JDK-8281962 introduced a regression which is being addressed via JDK-8292327.

We would like to give JDK-8292327 more time to bake in the main openjdk branch(for JDK 20) and in the meantime revert JDK-8281962 in jdk19u",,,,,,,,,,JDK-8292784,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292327,JDK-8281962,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ya8z:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,Not verified,,"2022-08-16 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/11
Date: 2022-08-16 18:09:13 +0000;;;","2022-08-17 03:45;lancea;Fix Request

The fix for JDK-8281962 introduced a regression has been  addressed via JDK-8292327 and now integrated into the main openjdk branch.

We would like to give JDK-8292327 more time to bake in the meantime revert JDK-8281962 in jdk19u (specifically 19.0.1);;;","2022-08-19 08:52;dukebot;Changeset: 030ff3ad
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-08-19 15:49:56 +0000
URL:       https://git.openjdk.org/jdk19u/commit/030ff3ad576776c008b7c962e3b1fd2c37735026
;;;",,,,,,,,,,,,,,,,,,,,
Improve specification of InflaterInputStream.fill(),JDK-8292427,5081667,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,simonis,simonis,2022-08-16 02:06,2022-11-14 19:16,2023-10-01 09:56,2022-11-03 10:07,,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,"Currently the API specification of `InflaterInputStream.fill()` reads as follows:

```
protected void fill()
             throws IOException
Fills input buffer with more data to decompress.

Throws:
    IOException - if an I/O error has occurred 
```

It doesn't mention that `fill()` throws an `java.io.EOFException` if the underlying input stream contains no more data.

In addition the specification should mention that `fill()` sets the protected `len` field of `InflaterInputStream`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296223,,,,,,,JDK-8292327,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y9ur:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2022-11-02 05:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10945
Date: 2022-11-02 12:37:26 +0000;;;","2022-11-03 10:06;dukebot;Changeset: 72f74df4
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-11-03 17:02:33 +0000
URL:       https://git.openjdk.org/jdk/commit/72f74df49afc4ce31bf0d696b603610a991da094
;;;",,,,,,,,,,,,,,,,,,,,,
Improve Weak CAS VarHandle/Unsafe tests resilience under spurious failures,JDK-8292407,5081647,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-08-16 01:05,2023-09-01 06:25,2023-10-01 09:56,2022-09-01 02:26,11,17,19,20,,,20,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,"We have a few reports that existing Weak* VarHandle tests are still flaky, for example on large AArch64 machines or small RISC-V machines.

The flakiness is intrinsic to the nature of Weak* operations under tests, that can spuriously fail. The last attempt to fix these was JDK-8155739. We need to strengthen these a bit more.",,,,,,,,,,JDK-8313264,JDK-8313509,JDK-8304035,JDK-8315540,,,,,,,,,,,,,,,,,,,,JDK-8292360,,,,JDK-8155739,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y9qb:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2022-08-16 01:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9889
Date: 2022-08-16 08:23:11 +0000;;;","2022-09-01 02:26;dukebot;Changeset: 6e6202c1
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-09-01 09:22:56 +0000
URL:       https://git.openjdk.org/jdk/commit/6e6202c14d0f6dd26369f21883ff317057aa469f
;;;","2023-03-10 03:13;vkempik;Fix Request (17u): Clean backport, helps ""weak"" and slow platforms to have stable results. Doing in advance of risc-v port where this helps to get stable test results. Test-only change. Risk is low. Testing - GHA tests passed (updated tests are part of tier1),;;;","2023-03-10 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1200
Date: 2023-03-10 11:06:00 +0000;;;","2023-08-25 20:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2099
Date: 2023-08-26 02:52:38 +0000;;;","2023-09-01 05:14;fyang;Fix Request (11u)
Backport this test-only change in order to help ""weak"" and slow platforms to have stable results.
Doing in advance of upcoming RISC-V port in https://github.com/openjdk/riscv-port-jdk11u where this helps to get stable test results.
Backport PR has been reviewed & approved by Aleksey Shipilev. This is a test-only change. Risk is low. ;;;",,,,,,,,,,,,,,,,,
[testbug] VectorGatherScatterTest.java fails on SVE with -XX:MaxVectorSize=8 after JDK-8288397,JDK-8292395,5081629,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,haosun,haosun,haosun,2022-08-15 16:29,2022-08-23 13:15,2023-10-01 09:56,2022-08-17 03:31,19,20,,,,,20,hotspot,,0,noreg-self,oracle-triage-20,,,,,,,,,,,,,,,,,,"This test case was firstly introduced in JDK-8288397.
It fails on SVE with ""-XX:MaxVectorSize=8"" specified.

-------------------------------------------------------------------------------------
How to reproduce: 
make test TEST=""test/hotspot/jtreg/compiler/vectorapi/VectorGatherScatterTest.java"" JTREG=""VM_OPTIONS=-XX:MaxVectorSize=8 -Djdk.incubator.vector.test.loop-iterations=300""

--------------------------------------------------------------------------------------
Error log:
Error Output
------------
OpenJDK 64-Bit Server VM warning: SVE does not support vector length less than 16 bytes. Disabling SVE.
WARNING: Using incubator modules: jdk.incubator.vector
Exception in thread ""main"" java.lang.ExceptionInInitializerError
        at java.base/java.lang.Class.forName0(Native Method)
        at java.base/java.lang.Class.forName(Class.java:391)
        at java.base/java.lang.Class.forName(Class.java:382)
        at compiler.lib.ir_framework.test.TestVM.getClassObject(TestVM.java:172)
        at compiler.lib.ir_framework.test.TestVM.main(TestVM.java:160)
Caused by: java.lang.IllegalArgumentException: Bad vector bit-size: 32
        at jdk.incubator.vector/jdk.incubator.vector.VectorShape.forBitSize(VectorShape.java:141)
        at compiler.vectorapi.VectorGatherScatterTest.<clinit>(VectorGatherScatterTest.java:56)
        ... 5 more
  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################
compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
        at compiler.lib.ir_framework.driver.TestVMProcess.throwTestVMException(TestVMProcess.java:238)
        at compiler.lib.ir_framework.driver.TestVMProcess.checkTestVMExitCode(TestVMProcess.java:219)
        at compiler.lib.ir_framework.driver.TestVMProcess.<init>(TestVMProcess.java:74)
        at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:729)
        at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:701)
        at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:332)
        at compiler.lib.ir_framework.TestFramework.runWithFlags(TestFramework.java:240)
        at compiler.vectorapi.VectorGatherScatterTest.main(VectorGatherScatterTest.java:145)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:1589)JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.TestVMException: There were one or multiple errors. Please check stderr for more information.
JavaTest Message: shutting down test
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,,,"0|i2y9mb:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-15 16:57;dlong;I'm assuming this affects both 19 and 20.;;;","2022-08-15 16:59;dlong;ILW = one test fails; with -XX:MaxVectorSize=8; no workaround = MMH = P3;;;","2022-08-16 00:42;haosun;Yes, [~dlong]. I checked that this failure occurred on jdk19 as well.

Since jdk19 is in release candidate phase, I target this patch for jdk20.
See https://github.com/openjdk/jdk/pull/9888.

Thanks.;;;","2022-08-16 00:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9888
Date: 2022-08-16 07:40:12 +0000;;;","2022-08-17 03:31;dukebot;Changeset: f75da223
Author:    Hao Sun <haosun@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-08-17 10:30:18 +0000
URL:       https://git.openjdk.org/jdk/commit/f75da2235ab7e33927729fa060ec4d86fdb0240f
;;;",,,,,,,,,,,,,,,,,,
"jvmti/thread/SuspendThread/suspendthrd03 failed with ""FAIL: Status is 2""",JDK-8292386,5081619,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dcubed,dcubed,2022-08-15 13:42,2022-10-19 23:13,2023-10-01 09:56,2022-10-12 08:02,20,,,,,,20,hotspot,,0,Thread-SMR,tier,,,,,,,,,,,,,,,,,,"The following test failed in my jdk-20+10 stress testing:

serviceability/jvmti/thread/SuspendThread/suspendthrd03/suspendthrd03.java

Here's a snippet from the log file:

[2.837s][debug][thread,smr] tid=39427: ThreadsSMRSupport::smr_delete: thread=0x00000001280c5010 is deleted.
Finishing tested thread
Wait for thread to start
[2.837s][debug][thread,smr] tid=39683: ThreadsSMRSupport::smr_delete: thread=0x00000001280c4810 is deleted.
Sync: thread finished
Synchronization point checkStatus(2) called.
Data 0x150906d00 0x150907000
FAIL: Status is 2
Find thread: TestedThread

<snip>

[2.861s][info ][thread,smr] Threads class SMR info:
[2.861s][info ][thread,smr] _java_thread_list=0x000000012fe2c980, length=11, elements={
[2.861s][info ][thread,smr] 0x0000000138008210, 0x0000000151017a10, 0x0000000148017810, 0x0000000138028210,
[2.861s][info ][thread,smr] 0x000000012b00ba10, 0x000000012880b210, 0x000000013880c210, 0x0000000150015c10,
[2.861s][info ][thread,smr] 0x0000000138848e10, 0x000000015001da10, 0x0000000150021210
[2.861s][info ][thread,smr] }
[2.861s][info ][thread,smr] _java_thread_list_alloc_cnt=22, _java_thread_list_free_cnt=20, _java_thread_list_max=14, _nested_thread_list_max=0
[2.861s][info ][thread,smr] _tlh_cnt=16681, _tlh_times=15, avg_tlh_time=0.00, _tlh_time_max=12
[2.861s][info ][thread,smr] _deleted_thread_cnt=5, _deleted_thread_times=14, avg_deleted_thread_time=2.80, _deleted_thread_time_max=14
[2.861s][info ][thread,smr] _delete_lock_wait_cnt=0, _delete_lock_wait_max=2
[2.861s][info ][thread,smr] _to_delete_list_cnt=0, _to_delete_list_max=2
----------System.err:(11/635)----------
java.lang.RuntimeException: check failed with result 2
        at suspendthrd03.main(suspendthrd03.java:191)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: check failed with result 2
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: check failed with result 2
----------rerun:(36/6074)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295169,,,,,,,,,,,,"2022-08-15 13:43;dcubed;jdk-20+10_macosx-aarch64.8292386.zip;https://bugs.openjdk.org/secure/attachment/100424/jdk-20%2B10_macosx-aarch64.8292386.zip",,,,,,,aarch64,,,,,,,,,os_x,,,,,,,"0|i2y9k3:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-08-15 13:43;dcubed;I've attached the log from my sighting in my jdk-20+10 macosx-aarch64 stress testing:

$ unzip -l jdk-20+10_macosx-aarch64.8292386.zip
Archive:  jdk-20+10_macosx-aarch64.8292386.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
   106216  08-11-2022 22:09   jdk-20+10_1/failures.macosx-aarch64/suspendthrd03.jtr.slowdebug
---------                     -------
   106216                     1 file;;;","2022-10-11 09:22;lmesnik;This test duplicates runtime/handshake/HandshakeSuspendExitTest.java and might be deleted.;;;","2022-10-11 09:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10662
Date: 2022-10-11 16:46:37 +0000;;;","2022-10-11 11:21;dcubed;I don't think that this test:

 serviceability/jvmti/thread/SuspendThread/suspendthrd03/suspendthrd03.java 

duplicates:

runtime/handshake/HandshakeSuspendExitTest.java

It appears to be a ported test based on this test:

test/hotspot/jtreg/vmTestbase/nsk/jvmti/SuspendThread/suspendthrd003.java
test/hotspot/jtreg/vmTestbase/nsk/jvmti/SuspendThread/suspendthrd003/suspendthrd003.cpp
test/hotspot/jtreg/vmTestbase/nsk/jvmti/SuspendThread/suspendthrd003/TestDescription.java

I'm pretty sure that I added vmTestbase/nsk/jvmti/SuspendThread/suspendthrd003 as
part of my work on Thread-SMR. It looks like this test:

 serviceability/jvmti/thread/SuspendThread/suspendthrd03/suspendthrd03.java

was added as part of the Loom project for some reason.;;;","2022-10-12 08:01;dukebot;Changeset: 0475c341
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-10-12 14:59:19 +0000
URL:       https://git.openjdk.org/jdk/commit/0475c341207c0b0d121a4e70f4149065eb6d3d46
;;;",,,,,,,,,,,,,,,,,,
assert(ctrl == kit.control()) failed: Control flow was added although the intrinsic bailed out,JDK-8292385,5081618,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,dcubed,dcubed,2022-08-15 13:30,2022-10-25 11:29,2023-10-01 09:56,2022-09-02 12:26,11,17,19,20,,,20,hotspot,,0,c2,intermittent,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,oracle-triage-20,,,,,,,,,,,,"The following test failed in my jdk-20+10 stress testing run:

jdk/javadoc/doclet/testConstantValuesPage/TestConstantValuesPage.java

Here's a snippet from the log file:

#section:main
----------messages:(6/250)----------
command: main TestConstantValuesPage
reason: User specified action: run main TestConstantValuesPage
Mode: agentvm
Agent id: 17
Additional exports to unnamed modules from @modules: jdk.javadoc/jdk.javadoc.internal.tool
elapsed time (seconds): 36.539
----------configuration:(19/2222)----------

<snip>

----------stdout:(21/1429)----------
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/library_call.cpp:136
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/open/src/hotspot/share/opto/library_call.cpp:136), pid=37690, tid=23555
#  assert(ctrl == kit.control()) failed: Control flow was added although the intrinsic bailed out
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-08-11-1509175.dcubed...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-08-11-1509175.dcubed..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Core dump will be written. Default location: /cores/core.37690
#
# An error report file with more information is saved as:
# /System/Volumes/Data/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/build/macosx-aarch64-normal-server-slowdebug/test-support/jtreg_open_test_langtools_tier1/scratch/1/hs_err_pid37690.log
#
# Compiler replay data is saved as:
# /System/Volumes/Data/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/build/macosx-aarch64-normal-server-slowdebug/test-support/jtreg_open_test_langtools_tier1/scratch/1/replay_pid37690.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
result: Error. Agent communication error: java.io.EOFException; check console log for any additional details


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000000131825c10):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=23555, stack(0x0000000171178000,0x000000017137b000)]


Current CompileTask:
C2:1083529 13421       4       com.sun.tools.javac.code.ClassFinder::fillIn (160 bytes)
        
Stack: [0x0000000171178000,0x000000017137b000],  sp=0x000000017135ad20,  free space=1931k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x10b719c]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x868
V  [libjvm.dylib+0x10b77cc]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x68
V  [libjvm.dylib+0x5ea188]  report_vm_error(char const*, int, char const*, char const*, ...)+0x88 
V  [libjvm.dylib+0xc0fc6c]  LibraryIntrinsic::generate(JVMState*)+0x314
V  [libjvm.dylib+0x6d909c]  Parse::do_call()+0x8f0
V  [libjvm.dylib+0xe2c254]  Parse::do_one_bytecode()+0x3bd8
V  [libjvm.dylib+0xe1c868]  Parse::do_one_block()+0x4f8
V  [libjvm.dylib+0xe1b544]  Parse::do_all_blocks()+0x3a4
V  [libjvm.dylib+0xe18904]  Parse::Parse(JVMState*, ciMethod*, float)+0xd04
V  [libjvm.dylib+0xe1be48]  Parse::Parse(JVMState*, ciMethod*, float)+0x38
V  [libjvm.dylib+0x449320]  ParseGenerator::generate(JVMState*)+0xe0
V  [libjvm.dylib+0x6d909c]  Parse::do_call()+0x8f0
V  [libjvm.dylib+0xe2c254]  Parse::do_one_bytecode()+0x3bd8
V  [libjvm.dylib+0xe1c868]  Parse::do_one_block()+0x4f8
V  [libjvm.dylib+0xe1b544]  Parse::do_all_blocks()+0x3a4
V  [libjvm.dylib+0xe18904]  Parse::Parse(JVMState*, ciMethod*, float)+0xd04
V  [libjvm.dylib+0xe1be48]  Parse::Parse(JVMState*, ciMethod*, float)+0x38
V  [libjvm.dylib+0x449320]  ParseGenerator::generate(JVMState*)+0xe0
V  [libjvm.dylib+0x44d040]  PredictedCallGenerator::generate(JVMState*)+0x38c
V  [libjvm.dylib+0x44d040]  PredictedCallGenerator::generate(JVMState*)+0x38c
V  [libjvm.dylib+0x6d909c]  Parse::do_call()+0x8f0
V  [libjvm.dylib+0xe2c254]  Parse::do_one_bytecode()+0x3bd8
V  [libjvm.dylib+0xe1c868]  Parse::do_one_block()+0x4f8
V  [libjvm.dylib+0xe1b544]  Parse::do_all_blocks()+0x3a4
V  [libjvm.dylib+0xe18904]  Parse::Parse(JVMState*, ciMethod*, float)+0xd04
V  [libjvm.dylib+0xe1be48]  Parse::Parse(JVMState*, ciMethod*, float)+0x38
V  [libjvm.dylib+0x449320]  ParseGenerator::generate(JVMState*)+0xe0
V  [libjvm.dylib+0x6d909c]  Parse::do_call()+0x8f0
V  [libjvm.dylib+0xe2c254]  Parse::do_one_bytecode()+0x3bd8
V  [libjvm.dylib+0xe1c868]  Parse::do_one_block()+0x4f8
V  [libjvm.dylib+0xe1b544]  Parse::do_all_blocks()+0x3a4
V  [libjvm.dylib+0xe18904]  Parse::Parse(JVMState*, ciMethod*, float)+0xd04
V  [libjvm.dylib+0xe1be48]  Parse::Parse(JVMState*, ciMethod*, float)+0x38
V  [libjvm.dylib+0x449320]  ParseGenerator::generate(JVMState*)+0xe0
V  [libjvm.dylib+0x44d040]  PredictedCallGenerator::generate(JVMState*)+0x38c
V  [libjvm.dylib+0x6d909c]  Parse::do_call()+0x8f0
V  [libjvm.dylib+0xe2c254]  Parse::do_one_bytecode()+0x3bd8
V  [libjvm.dylib+0xe1c868]  Parse::do_one_block()+0x4f8
V  [libjvm.dylib+0xe1b544]  Parse::do_all_blocks()+0x3a4
V  [libjvm.dylib+0xe18904]  Parse::Parse(JVMState*, ciMethod*, float)+0xd04
V  [libjvm.dylib+0xe1be48]  Parse::Parse(JVMState*, ciMethod*, float)+0x38
V  [libjvm.dylib+0x449320]  ParseGenerator::generate(JVMState*)+0xe0
V  [libjvm.dylib+0x44d040]  PredictedCallGenerator::generate(JVMState*)+0x38c
V  [libjvm.dylib+0x44d040]  PredictedCallGenerator::generate(JVMState*)+0x38c
V  [libjvm.dylib+0x6d909c]  Parse::do_call()+0x8f0
V  [libjvm.dylib+0xe2c254]  Parse::do_one_bytecode()+0x3bd8
V  [libjvm.dylib+0xe1c868]  Parse::do_one_block()+0x4f8
V  [libjvm.dylib+0xe1b544]  Parse::do_all_blocks()+0x3a4
V  [libjvm.dylib+0xe18904]  Parse::Parse(JVMState*, ciMethod*, float)+0xd04
V  [libjvm.dylib+0xe1be48]  Parse::Parse(JVMState*, ciMethod*, float)+0x38
V  [libjvm.dylib+0x449320]  ParseGenerator::generate(JVMState*)+0xe0
V  [libjvm.dylib+0x44d040]  PredictedCallGenerator::generate(JVMState*)+0x38c
V  [libjvm.dylib+0x6d909c]  Parse::do_call()+0x8f0
V  [libjvm.dylib+0xe2c254]  Parse::do_one_bytecode()+0x3bd8
V  [libjvm.dylib+0xe1c868]  Parse::do_one_block()+0x4f8
V  [libjvm.dylib+0xe1b544]  Parse::do_all_blocks()+0x3a4
V  [libjvm.dylib+0xe18904]  Parse::Parse(JVMState*, ciMethod*, float)+0xd04
V  [libjvm.dylib+0xe1be48]  Parse::Parse(JVMState*, ciMethod*, float)+0x38
V  [libjvm.dylib+0x449320]  ParseGenerator::generate(JVMState*)+0xe0
V  [libjvm.dylib+0x44d040]  PredictedCallGenerator::generate(JVMState*)+0x38c
V  [libjvm.dylib+0x6d909c]  Parse::do_call()+0x8f0
V  [libjvm.dylib+0xe2c254]  Parse::do_one_bytecode()+0x3bd8
V  [libjvm.dylib+0xe1c868]  Parse::do_one_block()+0x4f8
V  [libjvm.dylib+0xe1b544]  Parse::do_all_blocks()+0x3a4
V  [libjvm.dylib+0xe18904]  Parse::Parse(JVMState*, ciMethod*, float)+0xd04
V  [libjvm.dylib+0xe1be48]  Parse::Parse(JVMState*, ciMethod*, float)+0x38
V  [libjvm.dylib+0x449320]  ParseGenerator::generate(JVMState*)+0xe0
V  [libjvm.dylib+0x6d909c]  Parse::do_call()+0x8f0
V  [libjvm.dylib+0xe2c254]  Parse::do_one_bytecode()+0x3bd8
V  [libjvm.dylib+0xe1c868]  Parse::do_one_block()+0x4f8
V  [libjvm.dylib+0xe1b544]  Parse::do_all_blocks()+0x3a4
V  [libjvm.dylib+0xe18904]  Parse::Parse(JVMState*, ciMethod*, float)+0xd04
V  [libjvm.dylib+0xe1be48]  Parse::Parse(JVMState*, ciMethod*, float)+0x38
V  [libjvm.dylib+0x449320]  ParseGenerator::generate(JVMState*)+0xe0
V  [libjvm.dylib+0x44d040]  PredictedCallGenerator::generate(JVMState*)+0x38c
V  [libjvm.dylib+0x6d909c]  Parse::do_call()+0x8f0
V  [libjvm.dylib+0xe2c254]  Parse::do_one_bytecode()+0x3bd8
V  [libjvm.dylib+0xe1c868]  Parse::do_one_block()+0x4f8
V  [libjvm.dylib+0xe1b544]  Parse::do_all_blocks()+0x3a4
V  [libjvm.dylib+0xe18904]  Parse::Parse(JVMState*, ciMethod*, float)+0xd04
V  [libjvm.dylib+0xe1be48]  Parse::Parse(JVMState*, ciMethod*, float)+0x38
V  [libjvm.dylib+0x449320]  ParseGenerator::generate(JVMState*)+0xe0
V  [libjvm.dylib+0x44d040]  PredictedCallGenerator::generate(JVMState*)+0x38c
V  [libjvm.dylib+0x44d040]  PredictedCallGenerator::generate(JVMState*)+0x38c
V  [libjvm.dylib+0x6d909c]  Parse::do_call()+0x8f0
V  [libjvm.dylib+0xe2c254]  Parse::do_one_bytecode()+0x3bd8
V  [libjvm.dylib+0xe1c868]  Parse::do_one_block()+0x4f8
V  [libjvm.dylib+0xe1b544]  Parse::do_all_blocks()+0x3a4
V  [libjvm.dylib+0xe18904]  Parse::Parse(JVMState*, ciMethod*, float)+0xd04
V  [libjvm.dylib+0xe1be48]  Parse::Parse(JVMState*, ciMethod*, float)+0x38
V  [libjvm.dylib+0x449320]  ParseGenerator::generate(JVMState*)+0xe0
V  [libjvm.dylib+0x44d040]  PredictedCallGenerator::generate(JVMState*)+0x38c
V  [libjvm.dylib+0x6d909c]  Parse::do_call()+0x8f0
V  [libjvm.dylib+0xe2c254]  Parse::do_one_bytecode()+0x3bd8
V  [libjvm.dylib+0xe1c868]  Parse::do_one_block()+0x4f8
V  [libjvm.dylib+0xe1b544]  Parse::do_all_blocks()+0x3a4
V  [libjvm.dylib+0xe18904]  Parse::Parse(JVMState*, ciMethod*, float)+0xd04
V  [libjvm.dylib+0xe1be48]  Parse::Parse(JVMState*, ciMethod*, float)+0x38
V  [libjvm.dylib+0x449320]  ParseGenerator::generate(JVMState*)+0xe0
V  [libjvm.dylib+0x44d040]  PredictedCallGenerator::generate(JVMState*)+0x38c
...<more frames>...",,,,,,,,,,JDK-8295907,JDK-8294172,JDK-8294827,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-08-15 13:35;dcubed;jdk-20+10_macosx-aarch64.8292385.zip;https://bugs.openjdk.org/secure/attachment/100423/jdk-20%2B10_macosx-aarch64.8292385.zip",,,,,,,aarch64,x86_64,,,,,,,,linux,os_x,,,,,,"0|i2y9jv:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-15 13:36;dcubed;I've attached the logs from my sighting in my jdk-20+10 macosx-aarch64 stress testing:

$ unzip -l jdk-20+10_macosx-aarch64.8292385.zip
Archive:  jdk-20+10_macosx-aarch64.8292385.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    22531  08-13-2022 15:15   jdk-20+10_3/failures.macosx-aarch64/TestConstantValuesPage.jtr.slowdebug
   179928  08-13-2022 15:15   jdk-20+10_3/failures.macosx-aarch64/hs_err_pid37690.log
   798898  08-13-2022 15:15   jdk-20+10_3/failures.macosx-aarch64/replay_pid37690.log
---------                     -------
  1001357                     3 files;;;","2022-08-15 16:22;dlong;I haven't been able to reproduce this yet.  The replay file is not working for me.;;;","2022-08-15 16:23;dlong;ILW = assert in C2, unknown impact on product build; happened once in developer build; disable compilation of affected method = MLM = P4;;;","2022-08-15 20:18;dlong;After some trimming of the replay file I was able to reproduce the crash.  The intrinsic it is failing on is _getCharStringU.;;;","2022-08-15 20:25;dlong;In LibraryCallKit::inline_string_char_access(), the control is modified here:

1621	  value = must_be_not_null(value, true);

and then we bail out here:

1623	  Node* adr = array_element_address(value, index, T_CHAR);
1624	  if (adr->is_top()) {
1625	    return false;
1626	  }
;;;","2022-09-01 18:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10136
Date: 2022-09-02 01:27:57 +0000;;;","2022-09-02 00:43;dlong;Attachment <replay_reduced.log> could not be scanned. The system has removed attachment. Please check the file before attempting to upload it again;;;","2022-09-02 12:26;dukebot;Changeset: 5757e212
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-09-02 19:25:08 +0000
URL:       https://git.openjdk.org/jdk/commit/5757e2129ef23f6aa11a9a29d77ae86971b401c0
;;;","2022-10-03 09:30;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Typical C2 risk, small as trivial change.
Clean backport.
 SAP nightly testing passed.;;;","2022-10-03 09:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/767
Date: 2022-10-03 16:34:19 +0000;;;","2022-10-20 23:11;thartmann;Fix Request (JDK 19u)
Fixes an assert in C2. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u.;;;","2022-10-20 23:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/53
Date: 2022-10-21 06:11:23 +0000;;;",,,,,,,,,,,
"java/net/httpclient/SpecialHeadersTest.java fails with ""ERROR: Shutting down connection: HTTP/2 client stopped""",JDK-8292381,5081613,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dcubed,dcubed,2022-08-15 11:40,2023-09-25 05:16,2023-10-01 09:56,2022-08-22 07:16,20,,,,,,20,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier2,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/net/httpclient/SpecialHeadersTest.java

Here's some log file snippets:

Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Exchange lambda$wrapForLog$11
INFO: RESPONSE: (GET https://localhost:54947/https2?name=REFERER) 200 HTTP_2 Local port:  56779
TestServer(2): connection accepted
TestServer(2): stopping is: false
TestServer(2): accepting connections
TestServer(2): creating connection
TestServer: New connection from SSLSocket[hostname=127.0.0.1, port=56784, Session(1660586378507|SSL_NULL_WITH_NULL_NULL)]
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Server connection to /127.0.0.1:56561 stopping. 1 streams
Server connection to /127.0.0.1:56442 stopping. 1 streams
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Server connection to /127.0.0.1:56590 stopping. 1 streams
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Server connection to /127.0.0.1:56613 stopping. 1 streams
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Server connection to /127.0.0.1:56767 stopping. 3 streams
Server connection to /127.0.0.1:56408 stopping. 1 streams
TestServer: Connection writer stopping
TestServer: Connection writer stopping
Server connection to /127.0.0.1:56448 stopping. 1 streams
TestServer: Connection writer stopping
TestServer: Connection writer stopping
Server connection to /127.0.0.1:56538 stopping. 1 streams
TestServer: Connection writer stopping
Server connection to /127.0.0.1:56596 stopping. 1 streams
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
TestServer: Connection writer stopping
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
TestServer: Connection writer stopping
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Aug 15, 2022 5:59:38 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: Shutting down connection: HTTP/2 client stopped
Aug 15, 2022 5:59:41 PM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: java.io.IOException: selector manager closed
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.selectorClosedException(HttpClientImpl.java:1015)
	at java.net.http/jdk.internal.net.http.HttpClientImpl.selectorClosedException(HttpClientImpl.java:804)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalWriteSubscriber.tryFlushCurrent(SocketTube.java:345)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalWriteSubscriber.onNext(SocketTube.java:317)
	at java.net.http/jdk.internal.net.http.SocketTube.onNext(SocketTube.java:135)
	at java.net.http/jdk.internal.net.http.SocketTube.onNext(SocketTube.java:58)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper$DownstreamPusher.run1(SubscriberWrapper.java:316)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper$DownstreamPusher.run(SubscriberWrapper.java:259)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.outgoing(SubscriberWrapper.java:232)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.outgoing(SubscriberWrapper.java:198)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Writer.sendResultBytes(SSLFlowDelegate.java:935)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Writer.processData(SSLFlowDelegate.java:818)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Writer$WriterDownstreamPusher.run(SSLFlowDelegate.java:694)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Writer.incoming(SSLFlowDelegate.java:718)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.incomingCaller(SubscriberWrapper.java:438)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.onNext(SubscriberWrapper.java:379)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.onNext(SubscriberWrapper.java:57)
	at java.net.http/jdk.internal.net.http.common.SSLTube.onNext(SSLTube.java:662)
	at java.net.http/jdk.internal.net.http.common.SSLTube.onNext(SSLTube.java:68)
	at java.net.http/jdk.internal.net.http.HttpConnection$PlainHttpPublisher$HttpWriteSubscription.flush(HttpConnection.java:519)
	at java.net.http/jdk.internal.net.http.HttpConnection$PlainHttpPublisher.flushTask(HttpConnection.java:473)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.HttpConnection$PlainHttpPublisher.signal(HttpConnection.java:480)
	at java.net.http/jdk.internal.net.http.HttpConnection$PlainHttpPublisher.signalEnqueued(HttpConnection.java:542)
	at java.net.http/jdk.internal.net.http.Http2Connection.sendFrame(Http2Connection.java:1317)
	at java.net.http/jdk.internal.net.http.Http2Connection.close(Http2Connection.java:634)
	at java.net.http/jdk.internal.net.http.Http2ClientImpl.close(Http2ClientImpl.java:215)
	at java.base/java.util.concurrent.ConcurrentHashMap$ValuesView.forEach(ConcurrentHashMap.java:4783)
	at java.net.http/jdk.internal.net.http.Http2ClientImpl.stop(Http2ClientImpl.java:207)
	at java.net.http/jdk.internal.net.http.HttpClientImpl.stop(HttpClientImpl.java:527)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.shutdown(HttpClientImpl.java:1119)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:1317)

Starting this bug off as a P3 since this is a Tier2 failure.",,,,,,,,,,JDK-8316889,JDK-8313318,JDK-8313515,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,,"0|i2y9ir:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-08-17 03:56;dfuchs;execStatus=Failed. Execution failed\: `main' threw exception\: java.lang.OutOfMemoryError\: Java heap space

OutOfMemoryError is mightily strange.;;;","2022-08-17 10:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9908
Date: 2022-08-17 17:06:12 +0000;;;","2022-08-22 07:16;dukebot;Changeset: 256b5238
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-08-22 14:14:41 +0000
URL:       https://git.openjdk.org/jdk/commit/256b52387b7267c234f03aac19422e59a77d956f
;;;","2023-09-22 13:23;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nightly testing passed.;;;","2023-09-22 13:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1779
Date: 2023-09-22 20:25:22 +0000;;;",,,,,,,,,,,,,,,,,,
A few Swing methods use inheritDoc on exceptions which are not inherited,JDK-8292376,5081608,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,prr,prr,2022-08-15 11:07,2022-09-28 23:16,2023-10-01 09:56,2022-09-22 00:41,11,20,7,,,,20,client-libs,,0,noreg-doc,sn_125,sn_126,sn_127,,,,,,,,,,,,,,,,"These methods 
javax.swing.JSpinner.DefaultEditor.getBaselineResizeBehavior()
javax.swing.border.TitledBorder.getBaseline(java.awt.Component,int,int)
javax.swing.border.TitledBorder.getBaselineResizeBehavior(java.awt.Component)

specify 
* @throws NullPointerException {@inheritDoc}'

however no ancestor class definition of these methods declares it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293470,,,,,,,JDK-8002153,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y9hn:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-08-17 04:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9902
Date: 2022-08-17 11:49:28 +0000;;;","2022-09-19 23:53;abhiscxk;Observation:
The bug reported about 3 methods which specify '@throws NullPointerException {@inheritDoc}'.

1. javax.swing.JSpinner.DefaultEditor.getBaselineResizeBehavior()
   This class DefaultEditor extends JPanel and the method getBaselineResizeBehavior is inherited from it's ancestor class.
   But none of the ancestor class method declared exception tag in description.
   So, it can be removed from the description in getBaselineResizeBehavior method of DefaultEditor.

2. javax.swing.border.TitledBorder.getBaseline(java.awt.Component,int,int)
   TitledBorder class inherits AbstractBorder and getBaseline method in AbstractBorder didn't throw NPE.
   However getBaseline method in TitledBorder class can throw NPE if component is null. 
   So, the documentation for NPE tag has been changed.

3. javax.swing.border.TitledBorder.getBaselineResizeBehavior(java.awt.Component)
   As mentioned above, TitledBorder class inherits AbstarctBorder.
   getBaselineResizeBehavior method in AbstractBorder class can throw NPE if component is null but the exception tag was missing in description.
   The exception tag has been added in AbstractBorder method description and then inheritDoc in TitledBorder.getBaselineResizeBehavior method inherits correctly.;;;","2022-09-22 00:41;dukebot;Changeset: 5652030f
Author:    Abhishek Kumar <abhishek.cx.kumar@oracle.com>
Committer: Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-09-22 07:38:14 +0000
URL:       https://git.openjdk.org/jdk/commit/5652030f1684240105fec2fc04aac8fbbe356024
;;;",,,,,,,,,,,,,,,,,,,,
"[ppc64] internal error g1BarrierSet.inline.hpp assert(oopDesc::is_oop(pre_val, true)) failed: Error",JDK-8292368,5081598,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mbaesken,mbaesken,2022-08-15 07:31,2022-08-24 23:20,2023-10-01 09:56,2022-08-23 02:03,20,,,,,,20,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,,,,,"We got an assertion in our fastdebug nightly build, probably related to https://bugs.openjdk.org/browse/JDK-8292077 ,  on Linux ppc64le .

Command Line in the build where the assertion happens is : -Xms64M -Xmx1600M --add-exports=java.base/jdk.internal.module=ALL-UNNAMED build.tools.jigsaw.AddPackagesAttribute /nb/linuxppc64le/jdk-dev-build-fastdebug/jdk

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc: SuppressErrorAt=/g1BarrierSet.inline.hpp:39
#
# A fatal error has been detected by the Java Runtime Environment:
#
# Internal Error (/nb/linuxppc64le/jdk-dev/src/hotspot/share/gc/g1/g1BarrierSet.inline.hpp:39), pid=27195, tid=27200
# assert(oopDesc::is_oop(pre_val, true)) failed: Error
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.openjdk.jdk-dev)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc.openjdk.jdk-dev, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-ppc64le)
# Problematic frame:
# V [libjvm.so+0xc5532c] G1BarrierSet::enqueue_preloaded(oop)+0x28c
 
backtrace and registers of the assertion are :

Stack: [0x0000100002890000,0x0000100002a90000], sp=0x0000100002a8ca50, free space=2034k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [libjvm.so+0xc5532c] G1BarrierSet::enqueue_preloaded(oop)+0x28c
V [libjvm.so+0xc4127c] G1CollectedHeap::keep_alive(oop)+0x4c
V [libjvm.so+0x5266ac] BarrierSetNMethod::nmethod_entry_barrier(nmethod*)::OopKeepAliveClosure::do_oop(oop*)+0xac
V [libjvm.so+0x1547b84] nmethod::oops_do(OopClosure*, bool)+0x84
V [libjvm.so+0x526d58] BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)+0xf8
v ~StubRoutines::nmethod_entry_barrier 0x000010000f4a6598
J 99 c1 java.lang.CharacterData.of(I)Ljava/lang/CharacterData; java.base (136 bytes) @ 0x000010000802ae34 [0x000010000802ae00+0x0000000000000034]
j java.lang.Character.isJavaIdentifierPart(I)Z+1 java.base
j jdk.internal.module.Checks.isJavaIdentifier(Ljava/lang/String;)Z+56 java.base
j jdk.internal.module.Checks.requireTypeName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;+56 java.base
j jdk.internal.module.Checks.requireQualifiedClassName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;+2 java.base
j jdk.internal.module.Checks.requireServiceTypeName(Ljava/lang/String;)Ljava/lang/String;+3 java.base
j java.lang.module.ModuleDescriptor$Builder.uses(Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;+22 java.base
j jdk.internal.module.ModuleInfo.readModuleAttribute(Ljava/io/DataInput;Ljdk/internal/module/ModuleInfo$ConstantPool;I)Ljava/lang/module/ModuleDescriptor$Builder;+1018 java.base
j jdk.internal.module.ModuleInfo.doRead(Ljava/io/DataInput;)Ljdk/internal/module/ModuleInfo$Attributes;+542 java.base
j jdk.internal.module.ModuleInfo.read(Ljava/io/InputStream;Ljava/util/function/Supplier;)Ljdk/internal/module/ModuleInfo$Attributes;+16 java.base
j jdk.internal.module.ModulePath.readExplodedModule(Ljava/nio/file/Path;)Ljava/lang/module/ModuleReference;+35 java.base
j jdk.internal.module.ModulePath.readModule(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/lang/module/ModuleReference;+11 java.base
j jdk.internal.module.ModulePath.scanDirectory(Ljava/nio/file/Path;)Ljava/util/Map;+69 java.base
j jdk.internal.module.ModulePath.scan(Ljava/nio/file/Path;)Ljava/util/Map;+60 java.base
j jdk.internal.module.ModulePath.scanNextEntry()V+23 java.base
j jdk.internal.module.ModulePath.find(Ljava/lang/String;)Ljava/util/Optional;+36 java.base
j jdk.internal.module.SystemModuleFinders$1.lambda$find$0(Ljava/lang/module/ModuleFinder;Ljava/lang/String;)Ljava/util/Optional;+2 java.base
j jdk.internal.module.SystemModuleFinders$1$$Lambda$1+0x0000000100038f38.run()Ljava/lang/Object;+8 java.base
j java.security.AccessController.executePrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;Ljava/lang/Class;)Ljava/lang/Object;+29 java.base
j java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;+5 java.base
j jdk.internal.module.SystemModuleFinders$1.find(Ljava/lang/String;)Ljava/util/Optional;+12 java.base
j jdk.internal.module.ModuleBootstrap.boot2()Ljava/lang/ModuleLayer;+292 java.base
j jdk.internal.module.ModuleBootstrap.boot()Ljava/lang/ModuleLayer;+64 java.base
j java.lang.System.initPhase2(ZZ)I+0 java.base
v ~StubRoutines::call_stub 0x000010000f41084c
V [libjvm.so+0xf47654] JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x694
V [libjvm.so+0x1606bbc] os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x3c
V [libjvm.so+0xf48c04] JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x134
V [libjvm.so+0x1b03d80] Threads::create_vm(JavaVMInitArgs*, bool*)+0x730
V [libjvm.so+0x10f6e2c] JNI_CreateJavaVM+0xfc
C [libjli.so+0x78a4] JavaMain+0xc4
C [libjli.so+0xcce8] ThreadJavaMain+0x18
C [libpthread.so.0+0x8a64] start_thread+0xf4

Registers:
pc =0x0000100000f8532c lr =0x0000100000f850fc ctr=0x0000100000f71b60
r0 =0x0000100000f850fc r1 =0x0000100002a8ca50 r2 =0x00001000026c7b00
r3 =0x00001000020f9f28 r4 =0x0000000000000027 r5 =0x00001000020f9ef8
r6 =0x000010000211f918 r7 =0x0000000000000008 r8 =0x000010000276da40
r9 =0x0000100000070000 r10=0x0000000000000058 r11=0x0000100002a6ce20
r12=0x0000100000f71b60 r13=0x0000100002a968f0 r14=0x000010003414bbd1
r15=0x0000100002a8ce78 r16=0x00001000040279b0 r17=0x000000000000006e
r18=0x0000100002a8cf10 r19=0x00001000342151d8 r20=0x0000000000000000
r21=0x0000100002a8ce10 r22=0x0000000000000025 r23=0x000000000000007c
r24=0x000010000f433f38 r25=0x00001000027594a0 r26=0x0000100002a8cb28
r27=0x0000100002a8cb88 r28=0x0000100002a8cac8 r29=0x00001000027407d7
r30=0x0000000000000000 r31=0x0000100002a8ca50
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292077,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,,"0|i2y9ff:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-22 10:04;mdoerr;C1 patching stubs contain null Oops on PPC64. Null check is missing.;;;","2022-08-22 10:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9968
Date: 2022-08-22 17:23:47 +0000;;;","2022-08-23 02:03;dukebot;Changeset: cf006774
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-08-23 08:58:53 +0000
URL:       https://git.openjdk.org/jdk/commit/cf0067741249cc3260b1d220769dac408b614f22
;;;",,,,,,,,,,,,,,,,,,,,
java/lang/Thread/jni/AttachCurrentThread/AttachTest.java#id1 failed on some platforms,JDK-8292362,5081592,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aoqi,aoqi,aoqi,2022-08-15 04:37,2023-07-22 07:27,2023-10-01 09:56,2022-08-17 01:35,19,,,,,,20,core-libs,,0,noreg-self,oraclejdk-na,ursqe-triaged,,,,,,,,,,,,,,,,,"For example, java/lang/Thread/jni/AttachCurrentThread/AttachTest.java#id1 failed on LoongArch64 (probably other platforms unsupported in src/java.base/share/classes/jdk/internal/foreign/CABI.java might have the same issue):
 
Exception in thread ""main"" java.lang.UnsupportedOperationException: Unsupported os, arch, or address size: Linux, loongarch64, 64
	at java.base/jdk.internal.foreign.CABI.current(CABI.java:69)
	at java.base/jdk.internal.foreign.abi.SharedUtils.getSystemLinker(SharedUtils.java:237)
	at java.base/java.lang.foreign.Linker.nativeLinker(Linker.java:198)
	at ImplicitAttach.main(ImplicitAttach.java:48)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293970,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y9e3:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-08-15 05:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9877
Date: 2022-08-15 12:23:41 +0000;;;","2022-08-17 01:35;dukebot;Changeset: e61f6fc3
Author:    Ao Qi <aoqi@openjdk.org>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2022-08-17 08:32:19 +0000
URL:       https://git.openjdk.org/jdk/commit/e61f6fc3940720f6ebc3ef360e25b880729cfa5a
;;;",,,,,,,,,,,,,,,,,,,,,
Build failure on PPC64 BE after JDK-8290840,JDK-8292361,5081591,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-08-15 04:23,2022-08-23 13:14,2023-10-01 09:56,2022-08-16 04:02,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"The only platform where this reproduces seems to be ppc64be. 
ppc64le builds fine.

* For target hotspot_variant-server_libjvm_objs_abstractInterpreter.o:
In file included from /home/buildbot/worker/build-jdkX-debian11/build/src/hotspot/share/runtime/os.inline.hpp:31,
                 from /home/buildbot/worker/build-jdkX-debian11/build/src/hotspot/cpu/ppc/macroAssembler_ppc.inline.hpp:37,
                 from /home/buildbot/worker/build-jdkX-debian11/build/src/hotspot/share/asm/macroAssembler.inline.hpp:30,
                 from /home/buildbot/worker/build-jdkX-debian11/build/src/hotspot/share/interpreter/abstractInterpreter.cpp:27:
/home/buildbot/worker/build-jdkX-debian11/build/src/hotspot/os_cpu/linux_ppc/os_linux_ppc.inline.hpp: In static member function 'static void* os::resolve_function_descriptor(void*)':
/home/buildbot/worker/build-jdkX-debian11/build/src/hotspot/os_cpu/linux_ppc/os_linux_ppc.inline.hpp:35:50: error: cannot call member function 'void* os::Linux::resolve_function_descriptor(void*)' without object
   35 |   return os::Linux::resolve_function_descriptor(p);
      |                                                  ^",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290840,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y9dv:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-15 04:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9876
Date: 2022-08-15 11:49:44 +0000;;;","2022-08-16 04:02;dukebot;Changeset: ec53fba0
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-08-16 10:57:41 +0000
URL:       https://git.openjdk.org/jdk/commit/ec53fba03933446024028555b87c6023895a5dc6
;;;",,,,,,,,,,,,,,,,,,,,,
TableRow vs. TreeTableRow: inconsistent visuals in cell selection mode,JDK-8292353,5081583,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,fastegal,fastegal,2022-08-15 02:34,2023-03-13 16:31,2023-10-01 09:56,2022-10-07 09:12,jfx18.0.1,,,,,,jfx20,javafx,,0,Selection,sn_125,sn_126,sn_127,sn_128,TableRow,TreeTableRow,,,,,,,,,,,,,"With the combination of multiple, cell selection and all cells selected the row is un-/selected for Table-/TreeTableRow (seen in the example below). 

Steps to reproduce:
   - make sure there is a visible part of the row at the right
   - click into a cell of the first column
   - extend the selection to the right, such that both columns are selected
   - expected: same appearance in Table and TreeTable
   - actual: different appearance - for table the row part is not selected,
        for TreeTable the row part is selected

The technical reason is the different implementation of updateSelection in the corresponding row:

// tableRow:
selected = !sm.isCellSelectionEnabled() && sm.isSelected(int);

// treeTableRow:
selected = sm.isSelected(int);
 
The behavior in TableRow seems to be what's expected (there's a code comment to that effect) and TreeTableRow probably should be implemented the same way .. wondering why the different behavior doesn't show up in any test .. 

Note: this turned up in review of JDK-8235491 but is unrelated: same behavior before/after that fix. 

Example:

public class SelectionVisuals extends Application {

    private Parent createContent() {

        ObservableList<Locale> data = FXCollections.observableArrayList(
                Arrays.stream(Locale.getAvailableLocales(), 10, 20).collect(Collectors.toList()));

        TableView<Locale> table = new TableView<>(data);
        table.getColumns().addAll(createTableColumn(""displayLanguage""), createTableColumn(""displayCountry""));
        table.getSelectionModel().setCellSelectionEnabled(true);
        table.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

        TreeTableView<Locale> treeTable = new TreeTableView<>(createTreeData(data));
        treeTable.setShowRoot(false);
        treeTable.getColumns().addAll(createTreeTableColumn(""displayLanguage""), createTreeTableColumn(""displayCountry""));
        treeTable.getSelectionModel().setCellSelectionEnabled(true);
        treeTable.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

        HBox compare = new HBox(10, table, treeTable);
        BorderPane content = new BorderPane(compare);
        return content;
    }

    private <T> TableColumn<T, String> createTableColumn(String property) {
        TableColumn<T, String> column = new TableColumn<>(property);
        column.setCellValueFactory(new PropertyValueFactory<>(property));
        return column;
    }

    private TreeItem<Locale> createTreeData(ObservableList<Locale> data) {
        TreeItem<Locale> root = new TreeItem<>(Locale.ENGLISH);
        ObservableList<TreeItem<Locale>> children = root.getChildren();
        data.stream().map(TreeItem::new).forEach(children::add);
        return root;
    }

    private <T> TreeTableColumn<T, String> createTreeTableColumn(String property) {
        TreeTableColumn<T, String> column = new TreeTableColumn<>(property);
        column.setCellValueFactory(new TreeItemPropertyValueFactory<>(property));
        return column;
    }


    @Override
    public void start(Stage stage) throws Exception {
        stage.setScene(new Scene(createContent()));
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

}
",,,,,,,,,,JDK-8304080,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304098,,,,JDK-8235491,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y9c3:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-08-15 11:30;angorya;Just to clarify, the issue is broken selection in TreeTableView.  Specifically, steps to reproduce:

- enable cell selection
- using Command+mouse click, select all cells in a row
- using Command+mouse click, try to unselect a selected cell
--> notice that the cell remains selected.  Keep unselecting other cells, the second click (in the case of 3 columns table, did not test beyond that) produces what appears the right result. 

edit: the result seems to be different if the table is not focused (i.e. the app is on a different monitor, unfocused, on Mac);;;","2022-08-16 03:01;fastegal;oopss .. forgot to add the steps to reproduce, done now .. and thanks for adding yours :)

didn't notice the unselect issue, good catch!;;;","2022-08-16 08:02;angorya;So we might have four separate, albeit related issues in TreeTableView when cell selection is enabled:

1. when selecting all cells in a row in unconstrained resize mode, the selection visual extends to the right (in LTR mode) beyond the actual cells
2. trying to deselect a cell when all cells in a row are selected breaks the visual.  interestingly, the pseudo class ""selected"" and ""focused"" as well as 'selected' and 'focused' properties are being toggled correctly!
3. behavior of #2 differs when the tree table view is not focused: it actually works correctly when not focused
4. command+mouse click does not bring the focus to the table, at least on Mac.  I don't think this is right.;;;","2022-08-16 15:04;angorya;Turns out the issues 1,2,3 are due to the table *row* cell marked as selected.  I don't think it should have selected property set when cell selection is enabled.

#4 I believe might be a bug in TreeTableView as well as in TableView.  Perhaps deserves a separate ticket.;;;","2022-08-17 13:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/875
Date: 2022-08-17 19:40:21 +0000;;;","2022-10-07 09:12;dukebot;Changeset: 9768b5e4
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-10-07 16:11:20 +0000
URL:       https://git.openjdk.org/jfx/commit/9768b5e42391e2d48aefffa3a3f6b1de6c30ef9d
;;;","2023-03-13 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/122
Date: 2023-03-13 18:32:32 +0000;;;",,,,,,,,,,,,,,,,
32-bit Windows build failures after JDK-8290059,JDK-8292352,5081581,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-08-15 01:44,2022-08-23 13:16,2023-10-01 09:56,2022-08-17 06:29,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"Look like this:

=== Output from failing command(s) repeated here ===
* For target support_test_jdk_jtreg_native_support_libAsyncInvokers_libAsyncInvokers.obj:
libAsyncInvokers.cpp
c:\buildbot\worker\build-jdkx-windows\build\test\lib\native\testlib_threads.h(73): error C2664: 'HANDLE CreateThread(LPSECURITY_ATTRIBUTES,SIZE_T,LPTHREAD_START_ROUTINE,LPVOID,DWORD,LPDWORD)': cannot convert argument 3 from 'DWORD (__cdecl *)(LPVOID)' to 'LPTHREAD_START_ROUTINE'
c:\buildbot\worker\build-jdkx-windows\build\test\lib\native\testlib_threads.h(73): note: None of the functions with this name in scope match the target type
c:\progra~2\wi3cf2~1\10\include\100183~1.0\um\processthreadsapi.h(170): note: see declaration of 'CreateThread'
   ... (rest of output omitted)
* For target support_test_jdk_jtreg_native_support_libLinkerInvokerModule_libLinkerInvokerModule.obj:
libLinkerInvokerModule.cpp
c:\buildbot\worker\build-jdkx-windows\build\test\lib\native\testlib_threads.h(73): error C2664: 'HANDLE CreateThread(LPSECURITY_ATTRIBUTES,SIZE_T,LPTHREAD_START_ROUTINE,LPVOID,DWORD,LPDWORD)': cannot convert argument 3 from 'DWORD (__cdecl *)(LPVOID)' to 'LPTHREAD_START_ROUTINE'
c:\buildbot\worker\build-jdkx-windows\build\test\lib\native\testlib_threads.h(73): note: None of the functions with this name in scope match the target type
c:\progra~2\wi3cf2~1\10\include\100183~1.0\um\processthreadsapi.h(170): note: see declaration of 'CreateThread'
   ... (rest of output omitted)
* For target support_test_jdk_jtreg_native_support_libLinkerInvokerUnnamed_libLinkerInvokerUnnamed.obj:
libLinkerInvokerUnnamed.cpp
c:\buildbot\worker\build-jdkx-windows\build\test\lib\native\testlib_threads.h(73): error C2664: 'HANDLE CreateThread(LPSECURITY_ATTRIBUTES,SIZE_T,LPTHREAD_START_ROUTINE,LPVOID,DWORD,LPDWORD)': cannot convert argument 3 from 'DWORD (__cdecl *)(LPVOID)' to 'LPTHREAD_START_ROUTINE'
c:\buildbot\worker\build-jdkx-windows\build\test\lib\native\testlib_threads.h(73): note: None of the functions with this name in scope match the target type
c:\progra~2\wi3cf2~1\10\include\100183~1.0\um\processthreadsapi.h(170): note: see declaration of 'CreateThread'
   ... (rest of output omitted)

The file was added by JDK-8290059, and the code that fails the compilation is under #ifdef _WIN32, and it only (?) gets compiled for tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290059,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y9bn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-08-15 02:27;shade;Looks like we really need the ""WINAPI"" macro in the definition, so that we match the stdcall. See the example declaration in the docs:
 https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms686736(v=vs.85);;;","2022-08-15 04:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9875
Date: 2022-08-15 11:16:06 +0000;;;","2022-08-17 06:29;dukebot;Changeset: e81210f5
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-08-17 13:25:02 +0000
URL:       https://git.openjdk.org/jdk/commit/e81210f5fe03ea3dc9c9fb0dba2be79e1dcc03bc
;;;",,,,,,,,,,,,,,,,,,,,
JFR: Warn users if -XX:StartFlightRecording:disk=false is specified with maxage or maxsize,JDK-8292336,5081563,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-08-14 14:53,2022-10-05 23:20,2023-10-01 09:56,2022-10-02 23:17,11,17,20,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"If disk=false is set, the parameters maxage and maxsize can't be used and are ignored.

It would be helpful to print a warning and in a future release prevent the recording to be started at all. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y97n:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-09-30 05:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10508
Date: 2022-09-30 12:10:31 +0000;;;","2022-10-02 23:17;dukebot;Changeset: a69ee853
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-10-03 06:13:39 +0000
URL:       https://git.openjdk.org/jdk/commit/a69ee85308ae2fd5d9fd5aed69b16ca70119976a
;;;",,,,,,,,,,,,,,,,,,,,,
Update JCov version to 3.0.13,JDK-8292330,5081555,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,shurailine,alanb,alanb,2022-08-14 08:24,2022-10-12 23:08,2023-10-01 09:56,2022-10-05 17:23,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,"JCov 3.0.13 supports class version 64, needed for JDK 20",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279636,,,,,CODETOOLS-7903213,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y95v:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-05 14:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10581
Date: 2022-10-05 21:23:49 +0000;;;","2022-10-05 17:23;dukebot;Changeset: e986a97a
Author:    Alexandre Iline <shurailine@openjdk.org>
Date:      2022-10-06 00:21:00 +0000
URL:       https://git.openjdk.org/jdk/commit/e986a97a9652eab9a64505673e884eb3eb123166
;;;",,,,,,,,,,,,,,,,,,,,,
AccessibleActionsTest.java test instruction for show popup on JLabel did not specify shift key,JDK-8292328,5081550,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-08-13 15:25,2023-05-05 03:41,2023-10-01 09:56,2022-09-22 13:19,,,,,,,20,client-libs,,0,accessibility,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,"test instruction does not specify shift key https://github.com/openjdk/jdk/blob/master/test/jdk/java/awt/a11y/AccessibleActionsTest.java#L60
But where as shift is specified for JTextArea popup https://github.com/openjdk/jdk/blob/master/test/jdk/java/awt/a11y/AccessibleActionsTest.java#L101",,,,,,,,,,JDK-8297038,JDK-8297040,JDK-8297037,JDK-8302199,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291737,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y94r:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-08-13 15:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9868
Date: 2022-08-13 22:44:52 +0000;;;","2022-09-22 13:19;dukebot;Changeset: df53fa75
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-09-22 20:15:28 +0000
URL:       https://git.openjdk.org/jdk/commit/df53fa752a81a88b9495978cccb3d7b9f5ed553c
;;;","2023-02-09 08:50;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
I can not run this test, but the fix is trivial enough and only a testbug
so that I think I can push this anyways.;;;","2023-02-09 09:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1155
Date: 2023-02-09 16:53:35 +0000;;;",,,,,,,,,,,,,,,,,,,
java.io.EOFException in InflaterInputStream after JDK-8281962,JDK-8292327,5081549,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,simonis,cushon,cushon,2022-08-13 14:53,2023-01-26 14:23,2023-10-01 09:56,2022-08-17 02:39,19,,,,,,20,core-libs,,0,regression,release-note=yes,,,,,,,,,,,,,,,,,,"The following program crashes with a java.io.EOFException after the fix for JDK-8281962 (Avoid unnecessary native calls in InflaterInputStream). Is this an expected result of that change, or a potential regression?

The repro creates an InflaterInputStream for the included byte array. Reading the entire stream using readAllBytes works, and I think the input is well-formed.

Reading the first 128 bytes, and then doing a second read, causes a crash.

$ java B
Exception in thread ""main"" java.io.EOFException: Unexpected end of ZLIB input stream
        at java.base/java.util.zip.InflaterInputStream.fill(InflaterInputStream.java:245)
        at java.base/java.util.zip.InflaterInputStream.read(InflaterInputStream.java:159)
        at B.main(B.java:29)

===
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;

import static java.nio.charset.StandardCharsets.UTF_8;

public class B {
  public static void main(String[] args) throws IOException {
    byte[] bytes = {
      85, -115, 49, 14, -125, 48, 12, 0, -9, -68, 2, 49, -63, 98, -87, 93, 89, 90, -47, -103, 14,
      -99, 58, -102, 96, 5, -89, 36, -74, -120, -123, -44, -33, -61, 8, -21, -23, 78, -9, 120, -113,
      -111, -68, -15, 70, -3, -128, -119, -102, -6, -11, 29, 62, 79, -27, -70, 117, -118, -2, -121,
      -127, 42, 47, 9, -126, 72, 88, 8, 80, -75, -64, -12, -49, -104, -40, 8, -74, 27, -108, 25, 87,
      -102, 14, -50, -99, 115, -100, 84, 86, 59, -5, -15, 46, 99, -12, -128, 57, -117, -95, -79,
      -28, 2, -41, -33, 81, -19,
    };

    // using readAllBytes succeeds, the underlying gzip data seems to be well-formed
    byte[] inflated =
        new InflaterInputStream(new ByteArrayInputStream(bytes), new Inflater(/*nowrap=*/ true))
        .readAllBytes();

    // a 128 byte read followed by a 512 byte read fails after JDK-8281962
    InflaterInputStream is =
        new InflaterInputStream(new ByteArrayInputStream(bytes), new Inflater(/*nowrap=*/ true));
    byte[] buf = new byte[512];
    is.read(buf, 0, 128);
    is.read(buf, 0, 512); // Unexpected end of ZLIB input stream
  }
}
===",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281962,,,,JDK-8292487,JDK-8292427,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,,"0|i2y94j:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,Not verified,,"2022-08-14 02:46;alanb;This does look like a regression. We will need to decide quickly if this is a P1 blocker for JDK 19 or whether it can wait for 19.0.1.  

On the surface, the changes in JDK-8281962 look okay (several of us looked at it closely) but looking at it now we can see that it is not correct when there is attempt to fill/set the input buffer, the input stream is at EOF, and there are still inflated bytes to be written. I don't have a sense yet on how common this might be. I haven't seen any other reports of this issue but it may be that some projects are only starting to test with JDK 19 builds now. The issue can be fixed by reverting JDK-8281962 or changing InflaterInputStream.read to handle the undocumented EOFException thrown by fill.

This issue is a reminder that the JDK needs a lot more tests in this area.;;;","2022-08-15 03:14;simonis;I'll take a look at this today.;;;","2022-08-15 07:28;simonis;The problem is that in `Inflater::needsInput()` we only check if all the input has been consumed by the native inflater and don't take into account that the native inflater might still have some buffered output which hasn't fit into the output buffer during the last call. From the documentation of `inflate()` in `zlib.h`:

""If `inflate()` returns `Z_OK` and with zero `avail_out`, it must be called again after making room in the output buffer because there might be more output pending.""

I'll prepare a PR and propose a fix shortly.;;;","2022-08-15 07:48;alanb;needsInput is specified to check the input buffer. Changing it to also check for buffer output (if that is what you are saying) would be a spec change. It may be that we have to split into this a change for the main line and another for 19.0.1.;;;","2022-08-15 10:47;simonis;No, I don't want to change `Inflater::needsInput()`. The idea is to also check for pending output in `InflaterInputStream::read()` in addition to `needsInput()`.

Please see my PR at  https://github.com/openjdk/jdk/pull/9881 and let me know what you think?
;;;","2022-08-15 11:16;alanb;Good, your previous message hinted that you were going to proposing changing needsInput but we can't do that. I think we will need a follow-on issue to re-examine the fill method as the exception at EOF is not specified.;;;","2022-08-15 11:17;lancea;I think we should look to back out JDK-8281962 for 19.0.1 as Alan suggests.  Once your new PR is approved push that to the main branch along with some additional tests.;;;","2022-08-15 11:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9881
Date: 2022-08-15 17:43:27 +0000;;;","2022-08-15 12:27;simonis;From what I understand we can't back this out from JDK 19 already because it is a P2 bug but JDK 19 is already in RC (see https://openjdk.org/jeps/3). I don't see a big benefit in backing this out from 19.0.1. There's still enough time for 19.0.1 so we could just as well fix it there.

My bigger concern is if we should increase the priority to P1 to be able to back it out from 19 (i.e. Alan's very first comment)? I think the reason why this was detected so late is only partially related to the fact that we don't have enough tests in this area. The main reason is probably that this depends a lot on the compressed data and the buffer sizes of the involved InflaterInputStream/Inflater.

This issue is triggered under the following conditions:

1. A call to InflaterInputStream::read() consumes the whole compressed input when calling fill() (i.e. the whole input or the last chunk of the input fully fits into InflaterInputStream's private buffer (512 bytes by default) which is passed the the underlying Inflater via Inflater::setInput()).

2. Some subsequent call to Inflater::inflate() (triggered by InflaterInputStream::read()) consumes all the provided input data from step 1, but does not manage to write all the resulting inflated data into the output buffer (because it is too small). Notice that this actually happens in zlib's native  inflate() function which is called via JNI from Inflater::inflate().

3. The very next call to InflaterInputStream::read() after step 2. will determine that the underlying Inflater requires more input because Inflater::needsInput() returns true, because there's actually indeed no more data in the Inflater's input buffer (this was fully consumed in step 2). InflaterInputStream::read() will therefor call fill() again, but fill() will throw an EOF exception because there is no more compressed input available (it was fully consumed in step 1).

What's the probability for this scenario? The probability will increase with a large repetition at the end of the compressed input stream (because a few deflated bytes can generate up to 32k of output) AND a small output buffer. I'm actually surprised that this issue hasn't been detected before if we take into account that it was committed almost 6 month ago. I think the problem is not just test code coverage but test data coverage. I assume it will be triggered more often in the wild than during our testing because users probably more or less use mostly the same code which we've tested but with a much higher variance of input data (i.e. compressed zip files).

My recommendation would be therefore to either increase the priority to P1 and back it out / fix it for JDK 19 or, in case we don't want to do that, fix it in tip and downport it to JDK 19.0.1. I've posted a quite trivial fix at https://git.openjdk.org/jdk/pull/9881 (but I also thought that JDK-8281962 was a trivial change :)
;;;","2022-08-17 02:39;dukebot;Changeset: 802ef380
Author:    Volker Simonis <simonis@openjdk.org>
Date:      2022-08-17 09:34:41 +0000
URL:       https://git.openjdk.org/jdk/commit/802ef38060080254e55621e4c64fa31a6c0b7b18
;;;",,,,,,,,,,,,,
Memory corruption in remove_dumptime_info,JDK-8292318,5081539,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,dcubed,dcubed,2022-08-13 06:43,2022-08-28 20:45,2023-10-01 09:56,2022-08-21 20:47,20,,,,,,20,hotspot,,0,cds,intermittent,tier6,zgc,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

runtime/cds/appcds/dynamicArchive/methodHandles/MethodHandlesAsCollectorTest.java

Here's a snippet from the log file:

[32.809s][debug][class,load]  klass: 0x00000008021a6000 super: 0x0000000800000f70 loader: [loader data: 0x00007ff9e1afb3e0 of 'bootstrap' has a class holder] bytes: 736 checksum: f9f9b825
[32.810s][info ][class,load] java.lang.invoke.LambdaForm$DMH/0x00000008021a6400 source: __JVM_LookupDefineClass__
[32.810s][debug][class,load]  klass: 0x00000008021a6400 super: 0x0000000800000f70 loader: [loader data: 0x00007ff9e1afcd10 of 'bootstrap' has a class holder] bytes: 1128 checksum: b7222a90
NMT Block at 0x353337332e38202a, corruption at: 0x353337332e38202a: 
0x353337332e381fa8:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e381fb8:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e381fc8:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e381fd8:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e381fe8:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e381ff8:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e382008:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e382018:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e382028:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e382038:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e382048:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e382058:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e382068:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e382078:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e382088:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??
0x353337332e382098:   ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/mallocHeader.inline.hpp:61
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S57199/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/51aa5a64-4dee-4f9f-971e-cdc2ac4018d5/runs/d4f1bba4-7d59-414e-9272-d67ed7abb7fe/workspace/open/src/hotspot/share/services/mallocHeader.inline.hpp:61), pid=94544, tid=12807
#  fatal error: NMT corruption: Block at 0x353337332e38202a: block address is unaligned
#
# JRE version: Java(TM) SE Runtime Environment (20.0+11) (fastdebug build 20-ea+11-616)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+11-616, mixed mode, sharing, tiered, compressed class ptrs, z gc, bsd-amd64)
# Core dump will be written. Default location: core.94544
#
# An error report file with more information is saved as:
# /System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S39197/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/01c6a795-ba4b-443a-a8df-c2464a82d0d8/runs/a71b7396-8e85-4350-babb-60e071468c70/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/5/hs_err_pid94544.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
];
 stderr: []
 exitValue = 134

JavaTest Message: JUnit Failure: test(MethodHandlesAsCollectorTest): Expected to get exit value of [0], exit value is: [134]
java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [134]


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007ffa64c065f0):  ConcurrentGCThread ""ZDriver"" [stack: 0x000070000c950000,0x000070000ca50000] [id=12807]

Stack: [0x000070000c950000,0x000070000ca50000],  sp=0x000070000ca4f470,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12d4579]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e9
V  [libjvm.dylib+0x6d92b1]  report_fatal(VMErrorType, char const*, int, char const*, ...)+0x1a1
V  [libjvm.dylib+0xe99a36]  MallocHeader::assert_block_integrity() const+0xd6
V  [libjvm.dylib+0xe99b4a]  MallocTracker::record_free(void*)+0xaa
V  [libjvm.dylib+0xfb8a03]  os::free(void*)+0xe3
V  [libjvm.dylib+0x11dd0e5]  SystemDictionaryShared::remove_dumptime_info(InstanceKlass*)+0x105
V  [libjvm.dylib+0x11dd23c]  SystemDictionaryShared::handle_class_unloading(InstanceKlass*)+0x2c
V  [libjvm.dylib+0x9c81db]  InstanceKlass::unload_class(InstanceKlass*)+0xbb
V  [libjvm.dylib+0x5fb488]  ClassLoaderData::unload()+0x1e8
V  [libjvm.dylib+0x6002fb]  ClassLoaderDataGraph::do_unloading()+0x8b
V  [libjvm.dylib+0x11d39c1]  SystemDictionary::do_unloading(GCTimer*)+0x61
V  [libjvm.dylib+0x13925cf]  ZUnload::unlink()+0x8f
V  [libjvm.dylib+0x134b998]  ZHeap::process_non_strong_references()+0x38
V  [libjvm.dylib+0x1347a08]  ZDriver::concurrent_process_non_strong_references()+0x68
V  [libjvm.dylib+0x1347fa7]  ZDriver::gc(ZDriverRequest const&)+0x97
V  [libjvm.dylib+0x13480eb]  ZDriver::run_service()+0x8b
V  [libjvm.dylib+0x67a99b]  ConcurrentGCThread::run()+0x1b
V  [libjvm.dylib+0x1225dd7]  Thread::call_run()+0x177
V  [libjvm.dylib+0xfbdcbf]  thread_native_entry(Thread*)+0x14f
C  [libsystem_pthread.dylib+0x68fc]  _pthread_start+0xe0
C  [libsystem_pthread.dylib+0x2443]  thread_start+0xf

A crash in ZGC code leans toward starting this in hotspot/gc,
but this is an AppCDS test crashing in NMT code and both of
those lean toward starting this in hotspot/runtime.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292534,,,,,,JDK-8290833,JDK-8292534,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,,"0|i2y92b:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-13 22:55;iklam;Maybe related to new code introduced in JDK-8290833;;;","2022-08-15 08:23;stuefe;Clearly not a valid pointer but probably part of a string.

0x353337332e38202a -> ""5373.8 *"";;;","2022-08-15 21:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9887
Date: 2022-08-16 03:48:49 +0000;;;","2022-08-16 08:55;coleenp;Redefinition didn't cause this crash:  from the hs_err file:

Classes redefined (0 events):
No events
;;;","2022-08-21 20:47;dukebot;Changeset: 27b0f772
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-08-22 03:43:27 +0000
URL:       https://git.openjdk.org/jdk/commit/27b0f7726b70127c0ed714cfc1041d3da71a9dc3
;;;",,,,,,,,,,,,,,,,,,
Missing null check for Iterator.forEachRemaining implementations,JDK-8292317,5081508,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jpai,webbuggrp,webbuggrp,2022-08-12 07:04,2023-02-01 07:41,2023-10-01 09:56,2022-11-18 16:56,11,17,18,19,20,,20,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Collections.unmodifiableMap(map).entrySet().iterator().forEachRemaining(action) and Collections.checkedMap(map, keyType, valueType).entrySet().iterator().forEachRemaining(action) are both missing a null check for the action. They wrap the possibly action in a new action, then delegate to the backing iterator. The delegate's null check passes, and the iteration consumes an element before a NullPointerException is thrown by the wrapping action when it tries to invoke the given action.

Both methods should include a null check. In case of the unmodifiable map, the null check can probably be integrated into the entryConsumer method, instead of adding it before calling entryConsumer (which is now done in 3 of the 4 cases).

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Call Collections.unmodifiableMap(Map.of()).entrySet().iterator().forEachRemaining(null) and Collections.checkedMap(Map.of(), String.class, String.class).entrySet().iterator().forEachRemaining(null).

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
A NullPointerException is thrown.
ACTUAL -
Nothing is thrown.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8205184,,,,,,,,"2022-08-13 05:49;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/100415/Main.java",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2y8vf:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,Verified,,"2022-08-13 05:52;tongwan;The observations on Windows 10:
JDK 11: Failed, no exception thrown.
JDK 17: Failed.
JDK 18: Failed.
JDK 19: Failed.
JDK 20ea+4: Failed.;;;","2022-08-13 09:36;martin;Java Historian says,

One small attempt at a generic collection testing framework with NPE checking is 
Collection8Test.java:testNullPointerExceptions
but of course it doesn't test every collection implementation;;;","2022-11-14 18:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11154
Date: 2022-11-15 02:10:01 +0000;;;","2022-11-14 18:19;jpai;Important to note here is that unlike what the ""Actual"" section of this bug report states:

> ACTUAL -
> Nothing is thrown.

a NullPointerException does indeed get thrown. In fact, the description of this bug report is more accurate where it says ""The delegate's null check passes, and the iteration consumes an element before a NullPointerException is thrown by the wrapping action when it tries to invoke the given action.""

So the real issue here isn't about NullPointerException not being thrown (it is thrown actually), but the fact that the iterator advances to the next element (if any) before it throws the NullPointerException.

I have opened a PR with a trivial fix for this https://github.com/openjdk/jdk/pull/11154 and new test methods to reproduce the issue and verify the fix.;;;","2022-11-16 19:34;smarks;In the specific example given by the submitter, an empty map is wrapped in an unmodifiableMap or checkedMap. In these cases, entrySet().iterator().forEachRemaining(null) indeed does nothing instead of throwing NPE.

The PR adds checks in the right places though. I'll comment on the test in the PR.

It would be nice to unify the tests somehow, but the Collection8Test.java test is in the j.u.c TCK so I'm not sure we want to mix general collection stuff with that.;;;","2022-11-16 21:48;jpai;[~smarks], you are right. I had overlooked the example in the steps to reproduce section and instead just focused on the description of this issue.;;;","2022-11-18 16:56;dukebot;Changeset: 906f1ca4
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-11-19 00:55:14 +0000
URL:       https://git.openjdk.org/jdk/commit/906f1ca4d7c8d156d60d591d14db4b21a0180ef2
;;;",,,,,,,,,,,,,,,,
Cleanup legacy address handling,JDK-8292314,5081533,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-08-12 23:04,2022-09-06 17:24,2023-10-01 09:56,2022-08-25 12:49,,,,,,,20,client-libs,,0,cleanup,,,,,,,,,,,,,,,,,,,Cleanup legacy address check in libsplashscreen obsoleted by http://hg.openjdk.java.net/jdk7u/jdk7u/jdk/rev/75755e92430c,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y90z:",9223372036854775807,b13,,,,,,,,,,,"2022-08-12 23:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9866
Date: 2022-08-13 06:09:33 +0000;;;","2022-08-25 12:49;dukebot;Changeset: 95a33fe1
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-08-25 19:44:43 +0000
URL:       https://git.openjdk.org/jdk/commit/95a33fe1502b6f0db2c60fa92b389fda74d94407
;;;",,,,,,,,,,,,,,,,,,,,,
2 runtime/cds/appcds tests fail after JDK-8284313,JDK-8292313,5081529,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,dcubed,dcubed,2022-08-12 19:41,2022-08-23 13:14,2023-10-01 09:56,2022-08-16 09:31,20,,,,,,20,hotspot,,0,cds,noreg-self,problemlist,tier4,,,,,,,,,,,,,,,,"The following two tests failed in the JDK20 CI:

runtime/cds/appcds/WrongClasspath.java
runtime/cds/appcds/dynamicArchive/WrongTopClasspath.java

Here's a log file snippet from the WrongClasspath.java test:

----------System.err:(33/3347)----------
 stdout: [[0.026s][info][cds] trying to map /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48914/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fb45215-e524-463d-a4ae-7544184428ed/runs/0b0fc7f4-3df2-46dc-a866-e3ba115b8612/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/3/appcds-22h57m52s186.jsa
[0.026s][info][cds] Opened archive /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48914/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fb45215-e524-463d-a4ae-7544184428ed/runs/0b0fc7f4-3df2-46dc-a866-e3ba115b8612/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/3/appcds-22h57m52s186.jsa.
[0.026s][info][cds] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
[0.026s][info][cds] Core region alignment: 65536
[0.026s][info][cds] Reserved archive_space_rs [0x0000000800000000 - 0x0000000801000000] (16777216) bytes
[0.026s][info][cds] Reserved class_space_rs   [0x0000000801000000 - 0x0000000841000000] (1073741824) bytes
[0.026s][info][cds] Mapped static  region #0 at base 0x0000000800000000 top 0x0000000800500000 (ReadWrite)
[0.026s][info][cds] Mapped static  region #1 at base 0x0000000800500000 top 0x0000000800cf0000 (ReadOnly)
[0.026s][info][cds] UseSharedSpaces: A jar file is not the one used while building the shared archive file: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48914/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fb45215-e524-463d-a4ae-7544184428ed/runs/0b0fc7f4-3df2-46dc-a866-e3ba115b8612/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/3/jar2.jar
[0.026s][warning][cds] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48914/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fb45215-e524-463d-a4ae-7544184428ed/runs/0b0fc7f4-3df2-46dc-a866-e3ba115b8612/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/3/jar2.jar timestamp has changed.
[0.026s][info   ][cds] Unmapping region #0 at base 0x0000000800000000 (ReadWrite)
[0.026s][info   ][cds] Unmapping region #1 at base 0x0000000800500000 (ReadOnly)
[0.026s][info   ][cds] ArchiveRelocationMode == 1: always map archive(s) at an alternative address
[0.026s][info   ][cds] UseSharedSpaces: Unable to map shared spaces
Hello World
];
 stderr: [java version ""20-ea"" 2023-03-21
Java(TM) SE Runtime Environment (fastdebug build 20-ea+11-617)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 20-ea+11-617, mixed mode)
]
 exitValue = 0

java.lang.RuntimeException: '.warning..cds. A jar file is not the one used while building the shared archive file:.*jar2.jar' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
	at WrongClasspath.main(WrongClasspath.java:78)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: '.warning..cds. A jar file is not the one used while building the shared archive file:.*jar2.jar' missing from stdout/stderr


Here's a log file snippet from the WrongTopClasspath.java test:

----------System.err:(74/7736)----------
 stdout: [[0.000s][info][cds] optimized module handling: disabled because bootclasspath was appended
[0.026s][info][cds] trying to map /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48914/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fb45215-e524-463d-a4ae-7544184428ed/runs/0b0fc7f4-3df2-46dc-a866-e3ba115b8612/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/0/base-22h52m27s348.jsa
[0.026s][info][cds] Opened archive /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48914/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fb45215-e524-463d-a4ae-7544184428ed/runs/0b0fc7f4-3df2-46dc-a866-e3ba115b8612/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/0/base-22h52m27s348.jsa.
[0.026s][info][cds] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
[0.026s][info][cds] Core region alignment: 65536
[0.026s][info][cds] trying to map /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48914/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fb45215-e524-463d-a4ae-7544184428ed/runs/0b0fc7f4-3df2-46dc-a866-e3ba115b8612/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/0/top-22h52m27s324.jsa
[0.026s][info][cds] Opened archive /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48914/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fb45215-e524-463d-a4ae-7544184428ed/runs/0b0fc7f4-3df2-46dc-a866-e3ba115b8612/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/0/top-22h52m27s324.jsa.
[0.026s][info][cds] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
[0.026s][info][cds] optimized module handling: disabled because archive was created without optimized module handling
[0.026s][info][cds] full module graph: disabled because archive was created without full module graph
[0.027s][info][cds] Reserved archive_space_rs [0x0000000800000000 - 0x0000000801000000] (16777216) bytes
[0.027s][info][cds] Reserved class_space_rs   [0x0000000801000000 - 0x0000000841000000] (1073741824) bytes
[0.027s][info][cds] Mapped static  region #0 at base 0x0000000800000000 top 0x0000000800500000 (ReadWrite)
[0.027s][info][cds] Mapped static  region #1 at base 0x0000000800500000 top 0x0000000800cf0000 (ReadOnly)
[0.027s][info][cds] Mapped dynamic region #0 at base 0x0000000800cf0000 top 0x0000000800d10000 (ReadWrite)
[0.027s][info][cds] Mapped dynamic region #1 at base 0x0000000800d10000 top 0x0000000800d30000 (ReadOnly)
[0.027s][info][cds] UseSharedSpaces: shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)
[0.027s][info][cds] Unmapping region #0 at base 0x0000000800cf0000 (ReadWrite)
[0.027s][info][cds] Unmapping region #1 at base 0x0000000800d10000 (ReadOnly)
[0.027s][info][cds] ArchiveRelocationMode == 1: always map archive(s) at an alternative address
[0.027s][info][cds] Unmapping region #0 at base 0x0000000800000000 (ReadWrite)
[0.027s][info][cds] Unmapping region #1 at base 0x0000000800500000 (ReadOnly)
[0.027s][info][cds] Try to map archive(s) at an alternative address
[0.027s][info][cds] Reserved archive_space_rs [0x0000000100000000 - 0x0000000101000000] (16777216) bytes
[0.027s][info][cds] Reserved class_space_rs   [0x0000000101000000 - 0x0000000141000000] (1073741824) bytes
[0.027s][info][cds] Mapped static  region #0 at base 0x0000000100000000 top 0x0000000100500000 (ReadWrite)
[0.027s][info][cds] Mapped static  region #1 at base 0x0000000100500000 top 0x0000000100cf0000 (ReadOnly)
[0.027s][info][cds] Mapped static  region #2 at base 0x0000fffce8020000 top 0x0000fffce8060000 (Bitmap)
[0.032s][info][cds] Mapped dynamic region #0 at base 0x0000000100cf0000 top 0x0000000100d10000 (ReadWrite)
[0.032s][info][cds] Mapped dynamic region #1 at base 0x0000000100d10000 top 0x0000000100d30000 (ReadOnly)
[0.032s][info][cds] Mapped dynamic region #2 at base 0x0000fffce8010000 top 0x0000fffce8020000 (Bitmap)
[0.032s][info][cds] UseSharedSpaces: shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)
[0.032s][info][cds] Unmapping region #0 at base 0x0000000100cf0000 (ReadWrite)
[0.032s][info][cds] Unmapping region #1 at base 0x0000000100d10000 (ReadOnly)
[0.032s][info][cds] Unmapping region #2 at base 0x0000fffce8010000 (Bitmap)
[0.032s][warning][cds,dynamic] Unable to use shared archive. The top archive failed to load: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48914/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8fb45215-e524-463d-a4ae-7544184428ed/runs/0b0fc7f4-3df2-46dc-a866-e3ba115b8612/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_cds_relocation/scratch/0/top-22h52m27s324.jsa
[0.032s][info   ][cds        ] CDS archive was created with max heap size = 1984M, and the following configuration:
[0.032s][info   ][cds        ]     narrow_klass_base = 0x0000000100000000, narrow_klass_shift = 0
[0.032s][info   ][cds        ]     narrow_oop_mode = 0, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 0
[0.032s][info   ][cds        ]     heap range = [0x0000000084000000 - 0x0000000100000000]
[0.032s][info   ][cds        ] The current max heap size = 1984M, HeapRegion::GrainBytes = 1048576
[0.032s][info   ][cds        ]     narrow_klass_base = 0x0000000100000000, narrow_klass_shift = 0
[0.032s][info   ][cds        ]     narrow_oop_mode = 0, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 0
[0.033s][info   ][cds        ]     heap range = [0x0000000084000000 - 0x0000000100000000]
[0.033s][info   ][cds        ] CDS heap data relocation delta = 0 bytes
[0.033s][info   ][cds        ] Trying to map heap data: region[3] at 0x00000000fff00000, size =   589824 bytes
[0.033s][info   ][cds        ] Trying to map heap data: region[5] at 0x00000000ffe00000, size =   524288 bytes
[0.033s][info   ][cds        ] optimized module handling: disabled
[0.033s][info   ][cds        ] full module graph: disabled
[0.033s][info   ][cds        ] Unmapping region #2 at base 0x0000fffce8020000 (Bitmap)
GenericTestApp started. WhiteBox = jdk.test.whitebox.WhiteBox@5acf9800
cdsMemoryMappingFailed() = false
passed: assertShared:java.lang.Object
passed: assertNotShared:GenericTestApp
];
 stderr: []
 exitValue = 0

java.lang.RuntimeException: '[warning][cds] shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at jdk.test.lib.cds.CDSTestUtils.checkMatches(CDSTestUtils.java:494)
	at jdk.test.lib.cds.CDSTestUtils$Result.assertNormalExit(CDSTestUtils.java:197)
	at WrongTopClasspath.test(WrongTopClasspath.java:85)
	at DynamicArchiveTestBase.runTest(DynamicArchiveTestBase.java:86)
	at WrongTopClasspath.main(WrongTopClasspath.java:44)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: '[warning][cds] shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)' missing from stdout/stderr

These two tests failed in jdk-20+11-617-tier4 and there's only
one new changeset in that build-ID:

JDK-8284313 Improve warning messages when CDS archive fails to load",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284313,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,,"0|i2y903:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-12 19:43;dcubed;[~ccheung] - Please take a look at these new Tier4 failures.
I think they are caused by:

JDK-8284313 Improve warning messages when CDS archive fails to load;;;","2022-08-13 06:33;dcubed;This bug is generating 8 failures per Tier4, 4 for each test, which is rather
noisy so I've bumped the priority to P3.;;;","2022-08-13 07:28;dcubed;Neither of the two tests execute in Tier1. Both tests run once each in Tier2 on
all five platforms and all of those runs passed. Both tests run in Tier3 7 times
each spread across 3 platforms and all of those runs passed.

runtime/cds/appcds/WrongClasspath.java runs 16 times in Tier4 and there
were 4 failures, 1 on each of 4 platforms.

runtime/cds/appcds/dynamicArchive/WrongTopClasspath.java runs 12 times
in Tier4 and there were 4 failures, 1 on each of 4 platforms.

All 8 of the failing runs seem to have these options:

-XX:+UnlockDiagnosticVMOptions -XX:ArchiveRelocationMode=1 -Xlog:cds -XX:NativeMemoryTracking=detail;;;","2022-08-14 17:53;dholmes;The logic is wrong when the test is run with CDS info logging enabled. In that case the message is split between the info log and the warning log. When info logging is enabled the extra information about the cause of the difference needs to go to the info log. When info logging is disabled then everything needs to be a warning. The test also needs to be adapted accordingly.;;;","2022-08-14 22:25;ccheung;The tests failed due to the presence of the -Xlog:cds flag.

In the WrongTopClasspath.java test, it expects the following warning:
[warning][cds] shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)

with -Xlog:cds enabled, the log statement becomes:
[info][cds] UseSharedSpaces: shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)

Since both tests are running in both Tiers 2 and 3 and the tests are not testing any of the VM flags settings in Tier4, I think we can simply add the following @requires to the tests:
    vm.flagless;;;","2022-08-15 00:03;dholmes;The current logging logic is still incorrect. The combined output should always go to the same log: either info or warning. It should never be split across the two as presently happens. This will be fixed as a side-effect of  JDK-8292269 as then everything will go to the warning.;;;","2022-08-15 00:04;dholmes;Changing the test would just be a workaround here.;;;","2022-08-15 15:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9884
Date: 2022-08-15 22:42:17 +0000;;;","2022-08-16 09:31;dukebot;Changeset: c3d3662e
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-08-16 16:26:59 +0000
URL:       https://git.openjdk.org/jdk/commit/c3d3662e52de434adb267485982fbf8541bdc0c8
;;;",,,,,,,,,,,,,,
Fix  java/awt/PrintJob/ConstrainedPrintingTest/ConstrainedPrintingTest.java  test,JDK-8292309,5081525,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-08-12 15:49,2022-10-10 15:33,2023-10-01 09:56,2022-10-04 11:04,,,,,,,20,client-libs,,0,,,,,,,,,,,,,,,,,,,,"Test was failing due to Parse Exception
test result: Error. Parse Exception: Arguments to `manual' option not supported: yesno
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y8z7:",9223372036854775807,b18,,,,,,,,,,,"2022-08-12 16:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9865
Date: 2022-08-12 23:10:01 +0000;;;","2022-10-04 11:04;dukebot;Changeset: b22a38de
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Jayathirth D V <jdv@openjdk.org>
Date:      2022-10-04 18:02:43 +0000
URL:       https://git.openjdk.org/jdk/commit/b22a38dedb06199f2cba3b6f8962ddf2f9f4f16d
;;;",,,,,,,,,,,,,,,,,,,,,
[REDO] JDK-8289208 Test DrawRotatedStringUsingRotatedFont.java occasionally crashes on MacOS,JDK-8292304,5081520,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mkartashev,dcubed,dcubed,2022-08-12 13:07,2022-09-06 17:24,2023-10-01 09:56,2022-08-25 12:48,17,18,19,20,,,20,client-libs,,0,macos,tier3,,,,,,,,,,,,,,,,,,"The following test is failing in the JDK20 CI:

sun/java2d/Disposer/TestDisposerRace.java

Here's a snippet from the log file:

#section:main
----------messages:(5/289)----------
command: main -mx128m TestDisposerRace
reason: User specified action: run main/othervm -mx128m TestDisposerRace 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.desktop --add-exports java.desktop/sun.java2d=ALL-UNNAMED
elapsed time (seconds): 4.884
----------configuration:(4/103)----------
Boot Layer
  add modules: java.desktop            
  add exports: java.desktop/sun.java2d ALL-UNNAMED

----------System.out:(0/0)----------
----------System.err:(12/744)----------
java.lang.RuntimeException: Disposed more records than were added
	at TestDisposerRace.checkRecordsCountIsSane(TestDisposerRace.java:74)
	at TestDisposerRace.main(TestDisposerRace.java:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Disposed more records than were added
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Disposed more records than were added
----------rerun:(37/5066)*----------

<snip>

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Disposed more records than were added


This test failure first happened in jdk-20+11-616-tier3 and the only
new changeset is:

JDK-8289208 Test DrawRotatedStringUsingRotatedFont.java occasionally crashes on MacOS

Since this appears to be a regression, I'm starting this bug off as a P2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289208,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y8y3:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-08-12 14:48;dcubed;Now that:

JDK-8289208 Test DrawRotatedStringUsingRotatedFont.java occasionally crashes on MacOS

has been backed out. I'm converting this bug in a [REDO] for
that fix. Changing the priority from P2 -> P3 to match the original
bug.
;;;","2022-08-16 01:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9890
Date: 2022-08-16 08:26:08 +0000;;;","2022-08-25 12:48;dukebot;Changeset: 5d799d80
Author:    Maxim Kartashev <mkartashev@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-08-25 19:43:44 +0000
URL:       https://git.openjdk.org/jdk/commit/5d799d80e638b85fa3881904e7330ffb5100764a
;;;",,,,,,,,,,,,,,,,,,,,
Windows GetLastError value overwritten by ThreadLocalStorage::thread,JDK-8292302,5081518,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kevinw,jvernee,jvernee,2022-08-12 11:36,2023-08-30 10:56,2023-10-01 09:56,2022-09-13 00:38,17,20,,,,,20,core-svc,,0,amazon-interest,,,,,,,,,,,,,,,,,,,"It seems that when running a program in a debugger (e.g. jdb), the value of GetLastError can be overwritten, and the behavior of the program essentially changes.

Take for instance this example program:

```
import java.lang.invoke.MethodHandle;

import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;

public class Main {
    public static void main(String[] args) throws Throwable {
        Linker linker = Linker.nativeLinker();
        System.loadLibrary(""Kernel32"");
        SymbolLookup lookup = SymbolLookup.loaderLookup();
        MethodHandle getLastError = linker.downcallHandle(
            lookup.lookup(""GetLastError"").orElseThrow(),
            FunctionDescriptor.of(JAVA_INT));
        MethodHandle setLastError = linker.downcallHandle(
            lookup.lookup(""SetLastError"").orElseThrow(),
            FunctionDescriptor.ofVoid(JAVA_INT));

        setLastError.invoke(42);
        System.out.println(getLastError.invoke());
    }
}
```
(Note that the same issue occurs with JNI, but the reproducer is more complex since it requires a native library to be compiled as well).

Compile with: `javac --release 20 --enable-preview -d classes Main.java`.

Then, when running normally with: `java --enable-preview -cp classes Main` the program prints '42'.

However, when the same program is run in `jdb` with `jdb -R--enable-preview -classpath classes Main`, the program prints '0'.

The GetLastError value is thread local, so it seems that some debugging routine is overwriting the value by calling Windows API methods on the debuggee thread, and afterwards doesn't restore the previous error value.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293829,JDK-8305913,,,JDK-8296913,JDK-8293813,JDK-8289091,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,,"0|i2y8xn:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-08-12 15:53;dholmes;I think this is expecting a bit much of the debugger. It doesn't know about native state like this and can't know that your apparent Java code is actually manipulating native state.;;;","2022-08-13 06:58;jvernee;I made this issue to see how others think about this.

It seems that at least in theory the debugger could save and restore the value of thread-local variables like (WSA)GetLastError/errno around API calls when running code on the debuggee thread. I don't know if there are any technical issue with that?

From talking to people in the community, it seems like a common problem that frameworks that interact with native code have to work around. So, it seems like there is significant value in fixing this. (rather than adding yet another workaround)

;;;","2022-08-15 16:16;dholmes;See the discussion in panama-dev:

https://mail.openjdk.org/pipermail/panama-dev/2022-August/017339.html

I think the debugger is but one thing that would have to be fixed for this to reliably work in general. Even then I don't know if it is actually technically feasible to save/restore last-error around the debugger ""entry"" points. The Java debugger isn't really designed/intended/expected to interact with native code this way.;;;","2022-08-15 16:37;cjplummer;Seems to me what is most likely resetting GetLastError is the debug agent's use of JVMTI raw monitors, which would make this a JVMTI bug. However that's just a guess at this point.

Assuming no actual debugging is being done (breakpoints, single stepping, etc), and this problem still happens just by virtue of running in the debugger, then it's not clear to me what interaction the debug agent or JVMTI would be having with the app. Seems it should just run without any involvement by either.;;;","2022-08-15 17:34;dholmes;[~cjplummer] when running under the debugger are any JVM TI events enabled?;;;","2022-08-15 17:49;cjplummer;Yes, I had already looked into that. There are some, but I don't think it likely they would be be triggered during execution of the code in question:

VM_INIT
VM_DEATH
THREAD_START
THREAD_END
CLASS_PREPARE
GC_FINISH
;;;","2022-08-17 10:23;kevinw;Seems to be a recent change: failure first appears in jdk-20+5-232

jdk-20+5-231 WORKS	...prints 42
jdk-20+5-232 FAILS  ...prints 0

In that build the change:
JDK-8289091: move oop safety check from SharedRuntime::get_java_tid() to JavaThread::threadObj()
...has a new call to Thread::current_or_null_safe(), which calls ThreadLocalStorage::thread().
That calls TlsGetValue(), and checks the value of GetLastError().

TlsGetValue specifically calls SetLastError when it _succeeds_ which is unusual:
https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-tlsgetvalue

Built a latest jdk that still shows the error (prints 0), 
then built the same with 8289091 changed removed, and no error (prints 42).
(which is not saying it should be removed!)

A call to e.g. Thread::get_thread_name_string() could be the cause of the behaviour change under jdb.

;;;","2022-08-17 10:47;cjplummer;The debug agent and JDI also use TlsGetValue in the transport code. Amusingly, one call is indirectly from and API called setLastError, although has to do with the Windows SetLastError.

Have you tried bracketing the TlsGetValue call with Get/SetLastError to restore it?;;;","2022-08-18 07:13;kevinw;It's more general than that, can reproduce it without jdb, e.g. if the thread is suspended.

Any use of ThreadLocalStorage::thread, such as the call by Thread::current_or_null_safe, is enough to clear the Windows last errror value (and this happens frequently).

8289091 adds places we call Thread::current_or_null_safe, and does turn the behaviour on and off.

Editing the testcase to do:
...
        setLastError.invoke(42);
        System.out.println(getLastError.invoke());
	try {  System.in.read(); } catch (Exception e) { }
        System.out.println(getLastError.invoke());
		
...and running outside of jdb, will print 42 the first time, and 0 the second time
(with jdb means it prints 0 both times).

Similarly, calling:
	System.out.println(Thread.currentThread().getName());	
...will reset the last error value to zero, and so will entering a synchronized block.
;;;","2022-08-18 17:25;dholmes;Great find [~kevinw]! We may have to review what we did in JDK-8289091. Even ignoring this issue the use of current_or_null_safe() is slow, and that may have a performance impact that we have not observed/attributed yet. I was the one that wanted the change in JDK-8289091 but I think it may be better to back it out again. [~dcubed] - thoughts?;;;","2022-08-19 13:29;dcubed;Wow this is quite the mess... First, I'm slightly confused about something:

[~dholmes] you wrote:

> but I think it may be better to back it out again.

I don't remember backing out JDK-8289091 before. Please clarify.

Second, perhaps we should be looking at ThreadLocalStorage::thread() which,
as a getter, should not be overwriting the Windows last error value.;;;","2022-08-19 13:46;kevinw;ThreadLocalStorage::thread() could save, and restore, the last error value, to cope with TlsGetValue() being unusual in that it specifically is documented to set the last error to zero.  Most calls only set if there is an error.

That does work fine, but maybe has an overhead:
bash-4.2$ git diff
diff --git a/src/hotspot/os/windows/threadLocalStorage_windows.cpp b/src/hotspot/os/windows/threadLocalStorage_windows.cpp
index 7d809518aab..dd556abb9a6 100644
--- a/src/hotspot/os/windows/threadLocalStorage_windows.cpp
+++ b/src/hotspot/os/windows/threadLocalStorage_windows.cpp
@@ -51,9 +51,11 @@ Thread* ThreadLocalStorage::thread() {
   // the initialization process, which is using Thread::current without
   // checking TLS is initialized - see java.cpp vm_exit
   assert(_initialized, ""TLS not initialized yet!"");
+  DWORD lastErr = GetLastError();
   Thread* current = (Thread*) TlsGetValue(_thread_key);
   assert(current != 0 || GetLastError() == ERROR_SUCCESS,
          ""TlsGetValue failed with error code: %lu"", GetLastError());
+  SetLastError(lastErr);
   return current;
 }
 


;;;","2022-08-19 13:56;dholmes;[~dcubed] When I said ""back it out again"" I didn't mean to imply it was previously backed out, I simply meant  having put in this change perhaps we should take it out ""again"".

> it specifically is documented to set the last error to zero. Most calls only set if there is an error.

I would expect every successful call to a win32 API to set it to zero otherwise any pre-existing non-zero would be wrongly reported when the API call actually succeeded!

;;;","2022-08-19 14:05;kevinw;I think you usually only call GetLastError if the api call returns e.g. -1 to signify an error occurred.;;;","2022-08-19 14:06;dcubed;[~dholmes] - Got it. Thanks for the clarification.

[~kevinw] - I like that fix. However, it is begging for a comment.
Perhaps some like:

  // Save the last error value since TlsGetValue() always sets the last error value
  // unlike most Windows APIs which set last error value only when there is an error:
  DWORD lastErr = GetLastError();;;;","2022-08-22 12:04;cjplummer;I think this fix is probably a good idea, but it does seem somewhat like a band aid. Certainly there are many other windows APIs being called that could potentially set the last error if one occurred. The underlying issue of the jvm and libraries potentially causing the last error to be modified is still there and could be observed with code similar to the example given in this CR. It just a matter of triggering a failure on a windows API call.;;;","2022-08-22 16:52;dholmes;I don't think we should add even more overhead to ThreadLocalStorage::thread. I would rather we avoid the usage of ThreadLocalStorage::thread that is triggering the problem i.e that we revert the change made in JDK-8289091.

From https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror

""The Return Value section of the documentation for each function that sets the last-error code notes the conditions under which the function sets the last-error code. Most functions that set the thread's last-error code set it when they fail. However, some functions also set the last-error code when they succeed. If the function is not documented to set the last-error code, the value returned by this function is simply the most recent last-error code to have been set; some functions set the last-error code to 0 on success and others do not.""

I remain convinced that the more general problem here is very much panama specific because it separates the API call and the check of GetLastError, in a way that you would not do in native code.;;;","2022-08-26 08:55;kevinw;Update...

We know a thread itself can break its own last error value in various ways, like suspending or calling Thread.currentThread(), and mostly we can argue that's not a problem as you should be calling GetLastError ""immediately"".

Presence of jdb disturbs the test even when GetLastError is called as immediately as possible, so Java code using Panama to access the Windows last error value is ""un-debuggable"".

Have found the specific place that happens under jdb: access to the JavaThread's thread->threadObj() by JvmtiVirtualThreadEventMark:

1:033> k
 # Child-SP          RetAddr               Call Site
00 000000b3`8f2fe0b0 00007ffc`f6ba1417     jvm!ThreadLocalStorage::thread+0xf [s\open\src\hotspot\os\windows\threadlocalstorage_windows.cpp @ 56] 
01 (Inline Function) --------`--------     jvm!Thread::current_or_null_safe+0xe [s\open\src\hotspot\share\runtime\thread.hpp @ 663] 
02 000000b3`8f2fe0e0 00007ffc`f6d14ed0     jvm!JavaThread::threadObj+0x17 [s\open\src\hotspot\share\runtime\javathread.cpp @ 163] 
03 (Inline Function) --------`--------     jvm!JvmtiVirtualThreadEventMark::{ctor}+0x51 [s\open\src\hotspot\share\prims\jvmtiexport.cpp @ 205] 
04 (Inline Function) --------`--------     jvm!JvmtiClassEventMark::{ctor}+0x51 [s\open\src\hotspot\share\prims\jvmtiexport.cpp @ 217] 
05 000000b3`8f2fe110 00007ffc`f6b76de7     jvm!JvmtiExport::post_class_prepare+0x2b0 [s\open\src\hotspot\share\prims\jvmtiexport.cpp @ 1392] 
06 000000b3`8f2fe250 00007ffc`f6f5edec     jvm!InstanceKlass::link_class_impl+0x4f7 [s\open\src\hotspot\share\oops\instanceklass.cpp @ 919] 
07 000000b3`8f2fe350 00007ffc`f6f5ec4a     jvm!SystemDictionary::resolve_hidden_class_from_stream+0x18c [s\open\src\hotspot\share\classfile\systemdictionary.cpp @ 922] 
08 000000b3`8f2fe3e0 00007ffc`f6c12bb8     jvm!SystemDictionary::resolve_from_stream+0x1a [s\open\src\hotspot\share\classfile\systemdictionary.cpp @ 1014] 
09 000000b3`8f2fe420 00007ffc`f6c24643     jvm!jvm_lookup_define_class+0x508 [s\open\src\hotspot\share\prims\jvm.cpp @ 1004] 
0a 000000b3`8f2fe690 00007ffd`5b731657     jvm!JVM_LookupDefineClass+0x103 [s\open\src\hotspot\share\prims\jvm.cpp @ 1060] 
0b 000000b3`8f2fe6f0 000001b8`fba52b9c     java!Java_java_lang_ClassLoader_defineClass0+0x13b [s\open\src\java.base\share\native\libjava\classloader.c @ 277] 
0c 000000b3`8f2fe820 00000008`004261c8     0x000001b8`fba52b9c
0d 000000b3`8f2fe828 00000008`0043e470     0x00000008`004261c8
0e 000000b3`8f2fe830 00000006`22806878     0x00000008`0043e470
...etc...


JvmtiVirtualThreadEventMark calls: _jthread = to_jobject(thread->threadObj());
(JvmtiThreadEventMark does this also)
 
PreserveLastError is a utility in os_windows.cpp.
I can use a copy of this in JvmtiVirtualThreadEventMark before the call to threadObj(), and it avoids the problem.
But there are a number of places JVMTI calls threadObj() which might need the same preservation code, so that could get messy and hard to know it's correct.

So that's another possible solution: the brute-force band-aid, or specific preservation of last error in maybe various places in JVMTI, or to rework or revert JDK-8289091.

The 8289091 change makes threadObj call Thread::current_or_null_safe ""only"" to be able to assert or guarantee on it.  Putting that check back in to SharedRuntime::get_java_tid() still passes the GetLastError test in jdb, so that seems a good option.


Then the bad news.  You would expect a thread calling System.gc to break its own last error value.
But, a separate thread calling System.gc can also break a thread that sets and checks last error!
A GC between your set and get, will clear your last error.  This is rare, it takes tens of thousands of attempts for last error to get reset.

However, that is NOT caused by 8289091, I can reproduce it before that change.

Does the brute-force/band aid save/restore fix that? No!
Not sure what exactly in the GC is clearing it, but it doesn't seem to be from threadObj() or similar.

It may be that switching back the Thread::current() and guarantee into SharedRuntime::get_java_tid() is the immediate fix here, as that makes most usage work as well as it used to.  More follow up needed about the last error reset caused by GC.


;;;","2022-08-26 10:10;cjplummer;Given your stack trace above, I assume that means this issue is only turning up for the test case the first time the code is executed, since it is triggered by constant pool resolution. If you put it in a loop, subsequent iterations of the loop would not see the problem.;;;","2022-08-26 10:38;kevinw;Yes, that's right - looping the test I see 0,42,42,42,42,42...etc...
;;;","2022-09-02 08:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10147
Date: 2022-09-02 14:47:35 +0000;;;","2022-09-13 00:38;dukebot;Changeset: dfc16e04
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-09-13 07:34:55 +0000
URL:       https://git.openjdk.org/jdk/commit/dfc16e047f1f8adaa8510574d00bf9f958902c43
;;;",
[REDO v2] C2 crash when allocating array of size too large,JDK-8292301,5081517,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,sgehwolf,sgehwolf,2022-08-12 11:31,2023-09-18 03:41,2023-10-01 09:56,2022-09-28 00:19,11,17,18,19,20,,20,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,,,,,,,,,,,,,,,,"The original fix caused problems and was backed out (backout bug JDK-8279204). The redo, JDK-8279219, got backed out as well (backout bug JDK-8292260). We'll need another redo (v2).

This bug should redo the fix which should also fix the found problems with JDK-8278413:
- JDK-8279021
- JDK-8279062
- JDK-8279125

As well as JDK-8291665, JDK-8291919 and JDK-8288184.",,,,,,,,,,JDK-8298841,JDK-8304682,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316414,,,,JDK-8291665,JDK-8291919,JDK-8279204,JDK-8278413,JDK-8292260,JDK-8288184,JDK-8284369,JDK-8279219,"2022-08-18 04:29;roland;TestNewArrayOutsideLoopValidLengthTestInLoop.java;https://bugs.openjdk.org/secure/attachment/100458/TestNewArrayOutsideLoopValidLengthTestInLoop.java","2022-08-15 12:20;xliu;replay.log;https://bugs.openjdk.org/secure/attachment/100420/replay.log",,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2y8xf:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-12 12:21;kvn;JDK-8292260 also backs out fix JDK-8284369 in the removed test compiler/allocation/TestFailedAllocationBadGraph.java
In redo(v2) we need that fix in restored test.
;;;","2022-08-12 18:21;dlong;ILW = same as JDK-8278413 = P3;;;","2022-08-15 12:29;xliu;One lead is the replay file from https://bugs.openjdk.org/browse/JDK-8291665?focusedCommentId=14515910&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14515910

I can only use the replay file with jdk11.0.16 to trigger this issue. the crash happens in LoopOpts split_if . it has difficulty to handle the phi node which attempts to merge 'ValidLengthTest' results.
Disabling either SplitIfBlocks or LoopUnswitching will avoid the crash.

One thing I don't quite understand is why 865 AllocateArray which comes from bci@590, or https://github.com/corretto/corretto-11/blob/develop/src/java.base/share/classes/sun/security/ssl/SSLEngineInputRecord.java#L313, is not part of loop body. ;;;","2022-08-16 15:38;xliu;hi, @Roland, 
Do you get a chance to take a look at the replay file? 

if we use -XX:+TraceLoopOpts -XX:+Verbose, we can dump the initial loop body before doing anything. LoopNode was original Region 1076.

Loop: N0/N0  has_call has_sfpt body={ }
  Loop: N2469/N1477  limit_check profile_predicated predicated has_call has_sfpt body={ 1516 1791 1513 1788 1490 1774 685 1110 1514 1954 2117 2240 1789 1494 1776 1100 1502 1782 1961 2121 2243 665 1096 1487 1773 1101 1503 1783 1963 2123 1493 1775 659 1090 1491 655 1087 1955 2118 1079 1482 1969 2126 1497 1778 12
87 1481 656 1088 666 1097 1327 1654 1881 1325 1653 1880 684 2241 1109 1966 2124 1507 1786 1967 2125 2244 1777 1958 1484 1772 1956 2119 2242 1781 1962 2122 1957 2120 662 654 1086 1488 1091 1492 2009 1607 1847 1288 1608 1505 1784 2238 2318 2185 1879 2050 2186 1623 1620 1077 859 1083 1298 650 1300 1625 452 668 19
59 861 453 672 673 862 863 1107 1302 678 462 683 872 463 687 2245 873 1332 1883 906 1658 1657 1333 1330 467 908 877 468 909 878 469 910 879 470 911 880 952 893 926 930 934 938 942 944 946 948 950 645 860 1082 1299 649 1223 1485 664 653 651 1081 1495 1483 1080 1085 1084 1489 1089 1093 1092 1499 679 1628 1630 67
5 1099 864 1106 1303 677 1227 1510 1105 2049 1878 1652 1323 1584 466 907 1337 876 831 1336 1239 921 465 2051 1331 1659 875 830 1882 1238 464 905 874 829 1655 1328 1329 1237 1626 670 1095 1094 1960 1501 1780 1858 1779 1498 1500 1582 835 1953 1768 1477 2469 1769 1480 1078 2011 647 2114 1949 1766 1475 1075 1621 1
619 1624 1622 1479 1243 834 1340 1242 833 1339 1241 832 1338 1240 828 1968 1790 1656 1515 1112 1326 1236 827 1512 1108 1324 1235 1226 1511 1583 817 1504 1102 1965 1785 1506 1103 1627 1629 1225 816 1496 1098 1301 1224 1222 1486 1581 }

I don't understand why 865 and 855 are not part of this loop.  those 2 allocation arrays belong to the while loop.
https://github.com/corretto/corretto-11/blob/develop/src/java.base/share/classes/sun/security/ssl/SSLEngineInputRecord.java#L283
https://github.com/corretto/corretto-11/blob/develop/src/java.base/share/classes/sun/security/ssl/SSLEngineInputRecord.java#L313;;;","2022-08-17 00:40;xliu;I see. Actually neither 865 nor 855 belongs to the loop. it's because 'break' statements are in the blocks and they won't go back the loop header in DFS.

;;;","2022-08-17 03:02;sgehwolf;Noting that JDK-8288184 has a reproducer that fails on all versions (if that's the same issue).;;;","2022-08-17 08:55;roland;[~xliu] Yes. I'm working on a stripped down test case. I'll attach it to the bug once I have one.;;;","2022-08-18 04:38;roland;Attached test case can be used to reproduce the issue. The issue doesn't occur with the current development version, not because the bug is not there but some unrelated change must cause the graph to be slightly different and split if doesn't trigger. Tentative fix is:

diff --git a/src/hotspot/share/opto/loopopts.cpp b/src/hotspot/share/opto/loopopts.cpp
index 45662010b70..4266eb5a269 100644
--- a/src/hotspot/share/opto/loopopts.cpp
+++ b/src/hotspot/share/opto/loopopts.cpp
@@ -1742,7 +1742,8 @@ void PhaseIdealLoop::clone_loop_handle_data_uses(Node* old, Node_List &old_new,
       // in the loop to break the loop, then test is again outside of the
       // loop to determine which way the loop exited.
       // Loop predicate If node connects to Bool node through Opaque1 node.
-      if (use->is_If() || use->is_CMove() || C->is_predicate_opaq(use) || use->Opcode() == Op_Opaque4) {
+      if (use->is_If() || use->is_CMove() || C->is_predicate_opaq(use) || use->Opcode() == Op_Opaque4 ||
+          (use->Opcode() == Op_AllocateArray && use->in(AllocateNode::ValidLengthTest) == old)) {
         // Since this code is highly unlikely, we lazily build the worklist
         // of such Nodes to go split.
         if (!split_if_set) {
@@ -2240,9 +2241,10 @@ void PhaseIdealLoop::clone_loop( IdealLoopTree *loop, Node_List &old_new, int dd
   if (split_if_set) {
     while (split_if_set->size()) {
       Node *iff = split_if_set->pop();
-      if (iff->in(1)->is_Phi()) {
-        Node *b = clone_iff(iff->in(1)->as_Phi(), loop);
-        _igvn.replace_input_of(iff, 1, b);
+      uint input = iff->Opcode() == Op_AllocateArray ? AllocateNode::ValidLengthTest : 1;
+      if (iff->in(input)->is_Phi()) {
+        Node *b = clone_iff(iff->in(input)->as_Phi(), loop);
+        _igvn.replace_input_of(iff, input, b);
       }
     }
   };;;","2022-08-18 18:45;xliu;Is JDK-8288184 same as this issue? currently, it's closed as a dup.

I tried your reproducible but I can't trigger it. here is my trace.
  
   5104  462    b  4       TestNewArrayOutsideLoopValidLengthTestInLoop::test1 (70 bytes)
Loop: N0/N0  has_sfpt
  Loop: N358/N341  limit_check profile_predicated predicated sfpts={ 332 }
Loop: N0/N0  has_sfpt
  Loop: N358/N341  limit_check profile_predicated predicated sfpts={ 332 }
Predicate IC   Loop: N358/N341  limit_check profile_predicated predicated sfpts={ 332 }
Predicate IC   Loop: N358/N341  limit_check profile_predicated predicated sfpts={ 332 }
Loop: N0/N0  has_sfpt
  Loop: N358/N341  limit_check profile_predicated predicated sfpts={ 332 }
Unswitch   1   Loop: N358/N341  limit_check profile_predicated predicated sfpts={ 332 }
Loop: N0/N0  has_sfpt
  Loop: N419/N418  limit_check profile_predicated predicated sfpts={ 416 }
  Loop: N358/N341  limit_check profile_predicated predicated sfpts={ 332 }
Loop: N0/N0  has_sfpt
  Loop: N419/N418  limit_check profile_predicated predicated sfpts={ 416 }
  Loop: N358/N341  limit_check profile_predicated predicated sfpts={ 332 }
PredicatesOff
Loop: N0/N0  has_sfpt
  Loop: N419/N418  sfpts={ 416 }
  Loop: N358/N341  sfpts={ 332 }

I do see 215 CmpU and 408 CmpU have the same code shape like JDK-8291665 , but it looks like we still need a Split-If after Unswitch-1.
Do you have some flags to trigger it? ;;;","2022-08-19 00:55;roland;[~xliu] It reproduces with no extra flag. I use a jdk-11.0.16-ga build.
JDK-8288184 is not the same as JDK-8291665
The fix I pasted above is for JDK-8291665
I added a fix for JDK-8288184 in the comments of that one.
I plan to include both fixes together with the redo.;;;","2022-08-26 02:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10038
Date: 2022-08-26 08:35:14 +0000;;;","2022-09-28 00:19;dukebot;Changeset: 1ea0d6b4
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-09-28 07:16:59 +0000
URL:       https://git.openjdk.org/jdk/commit/1ea0d6b424c263590fd145913280a180d7ce5fe1
;;;","2023-03-16 01:21;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
I delayed this to 17.0.8 to gather a bit more testing of this second
redo before bringing it in 17.
This fixes a real problem in C2, and Oracle fixed it, so we should 
take this too. The risk is above medium I would say. The fact that 
fixing the bug failed twice shows this.
I had to resolve three places, all straight forward adaptions.
Tests pass. SAP nightly testing passed.
;;;","2023-03-16 01:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1204
Date: 2023-03-16 08:16:50 +0000;;;",,,,,,,,,
Unused field 'keyListener' in BasicRadioButtonUI,JDK-8292280,5081493,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2022-08-12 01:51,2022-10-12 23:08,2023-10-01 09:56,2022-10-06 23:20,16,20,,,,,20,client-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,Field keyListener was added under JDK-8033699. But then all its usages were removed in JDK-8249548,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249548,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y8s3:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-08-12 01:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9832
Date: 2022-08-11 06:53:16 +0000;;;","2022-10-06 23:20;dukebot;Changeset: 2d25c0a3
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-10-07 06:19:01 +0000
URL:       https://git.openjdk.org/jdk/commit/2d25c0a31c608ecddaa084d795a060598b3e0589
;;;",,,,,,,,,,,,,,,,,,,,,
javac does not emit SYNTHETIC and MANDATED flags for parameters by default,JDK-8292275,5081204,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,webbuggrp,webbuggrp,2022-08-08 11:26,2023-09-25 00:13,2023-10-01 09:56,2023-04-30 00:37,18,,,,,,21,tools,,1,dcsad,release-note=yes,reproducer-yes,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Chapter 13.1 in the JLS mentions:
11. A construct emitted by a Java compiler must be marked as synthetic if it does not correspond to a construct declared explicitly or implicitly in source code, unless the emitted construct is a class initialization method 
and
12. A construct emitted by a Java compiler must be marked as mandated if it corresponds to a formal parameter declared implicitly in source code

For parameters, this information is stored in the MethodParameters attribute. However, this attribute is only emitted when compiling with the -parameters flag or if the method is a canonical record constructor.

This behavior can be observed by either looking at the produced class files using javap, or by using the Parameter#isImplicit()/isSynthetic() methods.

Additional context: https://mail.openjdk.org/pipermail/compiler-dev/2022-May/019783.html and https://mail.openjdk.org/pipermail/compiler-dev/2022-June/019924.html

I'm able to provide a fix for this.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile the code below with javac without -parameters flag.
Run the code with java A.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
----------
Executable: A$Inner
Parameter at position 0
parameter.getType() = class A
parameter.isImplicit() = true
----------
----------
Executable: A$1
Parameter at position 0
parameter.getType() = class A
parameter.isImplicit() = true
----------
----------
Executable: valueOf
Parameter at position 0
parameter.getType() = class java.lang.String
parameter.isImplicit() = true
----------
----------
Executable: A$R
Parameter at position 0
parameter.getType() = int
parameter.isImplicit() = true
Parameter at position 1
parameter.getType() = float
parameter.isImplicit() = true
----------
----------
Executable: A$E
Parameter at position 0
parameter.getType() = class java.lang.String
parameter.isSynthetic() = true
Parameter at position 1
parameter.getType() = int
parameter.isSynthetic() = true
----------
ACTUAL -
----------
Executable: A$Inner
Parameter at position 0
parameter.getType() = class A
parameter.isImplicit() = false
----------
----------
Executable: A$1
Parameter at position 0
parameter.getType() = class A
parameter.isImplicit() = false
----------
----------
Executable: valueOf
Parameter at position 0
parameter.getType() = class java.lang.String
parameter.isImplicit() = false
----------
----------
Executable: A$R
Parameter at position 0
parameter.getType() = int
parameter.isImplicit() = false
Parameter at position 1
parameter.getType() = float
parameter.isImplicit() = false
----------
----------
Executable: A$E
Parameter at position 0
parameter.getType() = class java.lang.String
parameter.isSynthetic() = false
Parameter at position 1
parameter.getType() = int
parameter.isSynthetic() = false
----------

---------- BEGIN SOURCE ----------
import java.lang.reflect.Executable;
import java.lang.reflect.Parameter;

public class A {
  public static void main(String[] args) throws Exception {
    // implicit
    print(Inner.class.getDeclaredConstructors()[0], true);
    print(A.class.getDeclaredField(""anon"").get(new A()).getClass().getDeclaredConstructors()[0], true);
    print(E.class.getDeclaredMethod(""valueOf"", String.class), true);
    print(R.class.getDeclaredConstructors()[0], true);
    // synthetic
    print(E.class.getDeclaredConstructors()[0], false);
  }
  static void print(Executable executable, boolean implicit) {
    System.out.println(""----------"");
    System.out.println(""Executable: "" + executable.getName());
    Parameter[] parameters = executable.getParameters();
    for (int i = 0; i < parameters.length; i++) {
      Parameter parameter = parameters[i];
      System.out.println(""Parameter at position "" + i);
      System.out.println(""parameter.getType() = "" + parameter.getType());
      if (implicit) {
        System.out.println(""parameter.isImplicit() = "" + parameter.isImplicit());
      } else {
        System.out.println(""parameter.isSynthetic() = "" + parameter.isSynthetic());
      }
    }
    System.out.println(""----------"");
  }
  class Inner {
    Inner() {}
  }
  Inner anon = new Inner() {};
  enum E {}
  record R(int a, float b) {
    public R {}
  }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Use the -parameters flag for compilation (does not work for the record ctor).

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304837,,JDK-8292467,,,JDK-8284333,,,,JDK-8308050,JDK-5087240,JDK-8250919,JDK-8162501,JDK-8213329,,,,,,,,"2022-08-11 22:33;adev;A.java;https://bugs.openjdk.org/secure/attachment/100387/A.java",,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2y70b:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-11 23:24;adev;Oddity is observed in Parameter#isImplicit() method. As per its documentation, it returns true if the parameter is implicitly
declared in source code.

The attached reproducer however outputs parameter.isImplicit() = false 

Additional context provided by the submitter:
https://mail.openjdk.org/pipermail/compiler-dev/2022-May/019783.html
https://mail.openjdk.org/pipermail/compiler-dev/2022-June/019924.html;;;","2022-08-12 13:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9862
Date: 2022-08-12 19:54:59 +0000;;;","2023-04-30 00:37;dukebot;Changeset: b3dbf28b
Author:    Hannes Greule <SirYwell@users.noreply.github.com>
Committer: Julian Waters <jwaters@openjdk.org>
Date:      2023-04-30 07:34:09 +0000
URL:       https://git.openjdk.org/jdk/commit/b3dbf28bc0614bee2f7137af95389134155c9511
;;;",,,,,,,,,,,,,,,,,,,,
[BACKOUT] JDK-8279219: [REDO] C2 crash when allocating array of size too large,JDK-8292260,5081468,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,kvn,sgehwolf,sgehwolf,2022-08-11 12:02,2022-08-24 11:44,2023-10-01 09:56,2022-08-12 13:28,11.0.16,17,18,19,20,,19,hotspot,,0,11bpr-critical-approved,17bpr-critical-approved,c2,CPU22_10-critical-approved,CPU22_10-critical-SQE-OK,jdk11u-critical-request,jdk11u-critical-yes,jdk17u-critical-request,jdk17u-critical-yes,jdk19-fix-request,jdk19-fix-yes,oracle-triage-20,regression,,,,,,,"JDK-8279219 caused regressions in the OpenJDK 11.0.16 and OpenJDK 17.0.4 releases and we are backing it out. See JDK-8291665.

Mailing list discussion:
https://mail.openjdk.org/pipermail/jdk-updates-dev/2022-August/016469.html",,,,,,,,,,JDK-8292394,JDK-8292546,JDK-8292325,JDK-8292370,JDK-8292792,JDK-8292323,JDK-8292518,JDK-8292392,JDK-8292393,JDK-8292503,JDK-8292442,JDK-8292504,JDK-8292326,JDK-8292470,JDK-8292332,JDK-8292367,JDK-8292794,JDK-8292545,,,,,,,,JDK-8288184,JDK-8291665,JDK-8292881,JDK-8292301,,,JDK-8292358,JDK-8284369,JDK-8292359,JDK-8279219,JDK-8291919,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2y8mj:",9223372036854775807,b36,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-11 12:16;sgehwolf;Patch will be the anti-delta of JDK-8279219.;;;","2022-08-11 16:35;dlong;ILW = same as JDK-8291665 = P3;;;","2022-08-11 17:52;kvn;All affected releases should be listed in ""Affected versions"".
The back out should be done in latest sources (JDK 20) and then backported to all releases where JDK-8279219 was pushed. Sources in all releases should be consistent.
;;;","2022-08-11 17:56;kvn;Are JDK 19 and 20 affected too?
;;;","2022-08-11 18:16;kvn;JDK-8288184 is also caused by JDK-8291919. It reproduced with all releases.;;;","2022-08-11 18:18;kvn;I am taking over this backout to speedup process for JDK 19.;;;","2022-08-12 00:02;sgehwolf;OK.;;;","2022-08-12 01:56;sgehwolf;I'm creating the OpenJDK 11.0.16 and OpenJDK 17.0.4 specific revert PRs meanwhile and change to the proper backport sha once it's pushed. This should speed up the process for people to test.;;;","2022-08-12 01:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/49
Date: 2022-08-12 08:54:03 +0000;;;","2022-08-12 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/350
Date: 2022-08-12 09:20:53 +0000;;;","2022-08-12 02:53;sgehwolf;Fix Request (critical for OpenJDK 11.0.16.1 and OpenJDK 17.0.4.1):

Regressions have been observed with the 11.0.16 release. See JDK-8291665. While there is a work-around to disable c2 compilation for specific methods, there might be more code-shapes out in the wild which trigger JDK-8291665. Therefore we'd like to back out the patch of JDK-8279219 of the 11.0.16 and 17.0.4 releases and do a patch release of the result. Risk is obviously that the fix of JDK-8279219 would no longer be there and potential other issues caused by the absence of JDK-8279219 (that we don't know yet). Yet it gets us back to where 11.0.15 and 17.0.3 were. It seems the safest option forward. Testing still in progress.;;;","2022-08-12 06:08;kvn;Thank you, Severin

;;;","2022-08-12 06:10;kvn;For the record, this backout will restore the issue listed in the original bug report JDK-8278413 and followed  JDK-8279219. We will need new fix (REDO) later.;;;","2022-08-12 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/163
Date: 2022-08-12 13:25:11 +0000;;;","2022-08-12 11:13;kvn;Fix request for JDK 19.

Regressions have been observed with the 11u, 17u, 18, 19, 20. See JDK-8291665 and JDK-8288184. There might be more code-shapes out in the wild which trigger similar issues. Therefore we'd like to back out the patch of JDK-8279219.

Backout is not clean because of additional changes in graphKit.cpp and test TestFailedAllocationBadGraph.java.

I verified changes with test case from JDK-8288184.

Backout passed tier1-5 mach5 testing.;;;","2022-08-12 11:32;sgehwolf;I've created JDK-8292301 for the redo v2 work.;;;","2022-08-12 12:19;kvn;This backout also backs out fix JDK-8284369 in the removed test compiler/allocation/TestFailedAllocationBadGraph.java
;;;","2022-08-12 13:09;mr;JDK 19 fix request approved.;;;","2022-08-12 13:28;dukebot;Changeset: 967a28c3
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-08-12 20:24:53 +0000
URL:       https://git.openjdk.org/jdk19/commit/967a28c3d85fdde6d5eb48aa0edd8f7597772469
;;;",,,,
CarrierThread.blocking not reset when spare not activated,JDK-8292240,5081443,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,alanb,alanb,alanb,2022-08-11 04:43,2023-01-31 03:44,2023-10-01 09:56,2022-09-09 23:16,19,20,,,,,20,core-libs,,0,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,loom,,,,,,,,,,,,,,,,"If a blocking operation such as Object.wait pins a virtual thread to its carrier thread, and if that operation doesn't activate a spare, then subsequent blocking operations that pin a virtual thread to this carrier thread do not attempt to activate a spare.  In other words, if Blocker.begin returns 0 with the carrier thread's blocking flag set then Blocker.end will not reset the blocking flag.


",,,,,,,,,,JDK-8293688,JDK-8293730,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y8gz:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-09-09 05:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9841
Date: 2022-08-11 16:11:02 +0000;;;","2022-09-09 23:16;dukebot;Changeset: 68da02c7
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-09-10 06:15:48 +0000
URL:       https://git.openjdk.org/jdk/commit/68da02c7b536799ccca49e889c22f3e9a2691fb7
;;;","2022-09-12 14:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/22
Date: 2022-09-12 21:50:56 +0000;;;",,,,,,,,,,,,,,,,,,,,
AIX build failure by JDK-8290840,JDK-8292232,5081431,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,itakiguchi,itakiguchi,itakiguchi,2022-08-10 23:26,2022-08-17 17:58,2023-10-01 09:56,2022-08-11 07:05,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"AIX build was failed after JDK-8290840
================================
In file included from src/hotspot/share/interpreter/abstractInterpreter.cpp:27:
In file included from src/hotspot/share/asm/macroAssembler.inline.hpp:30:
In file included from src/hotspot/cpu/ppc/macroAssembler_ppc.inline.hpp:37:
In file included from src/hotspot/share/runtime/os.inline.hpp:31:
src/hotspot/os_cpu/aix_ppc/os_aix_ppc.inline.hpp:34:51: error: cannot initialize a parameter of type 'void *' with an lvalue of type 'const void *'
  return os::Aix::platform_print_native_stack(st, context, buf, buf_size);
                                                  ^~~~~~~
src/hotspot/os/aix/os_aix.hpp:180:67: note: passing argument to parameter 'context' here
  static bool platform_print_native_stack(outputStream* st, void* context, char *buf, int buf_size);
                                                                  ^
1 error generated.
================================

""void *"" should be ""const void *"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290840,,,,,,,,,,,,,,,ppc,,,,,,b10,20,,aix,,,,,,,"0|i2y8eb:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-11 05:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9836
Date: 2022-08-11 11:19:19 +0000;;;","2022-08-11 07:05;dukebot;Changeset: fc1d94ef
Author:    Ichiroh Takiguchi <itakiguchi@openjdk.org>
Date:      2022-08-11 14:01:18 +0000
URL:       https://git.openjdk.org/jdk/commit/fc1d94ef1a4b088044465a5df5d8f40ab2c11253
;;;",,,,,,,,,,,,,,,,,,,,,
Remove modules/packages_unloading_do,JDK-8292216,5081401,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2022-08-10 15:00,2022-08-17 17:58,2023-10-01 09:56,2022-08-11 05:20,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,Their caller was removed with JDK-8225797 and they seem unsafe because the modules case doesn't take the Module_lock.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y87n:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-10 22:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9827
Date: 2022-08-10 22:02:42 +0000;;;","2022-08-11 05:20;dukebot;Changeset: a9bc1499
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-08-11 12:17:02 +0000
URL:       https://git.openjdk.org/jdk/commit/a9bc1499928eedfed7f9a1e7b8c101c32103a1fd
;;;",,,,,,,,,,,,,,,,,,,,,
Memory leak in getAllConfigs of awt_GraphicsEnv.c:386,JDK-8292214,5081399,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,achung,shadowbug,shadowbug,2022-08-10 14:48,2023-05-19 08:05,2023-10-01 09:56,2022-10-04 08:24,17,19,20,,,,20,client-libs,,0,amazon-interest,bugdb_34485209,memory-leak,parfait,sn_124,sn_127,sn_128,,,,,,,,,,,,,Memory leak in getAllConfigs of awt_GraphicsEnv.c:386,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,,"0|i2y877:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-08-10 16:08;prr;The reported issue is that  in awt_GraphicsEnv.c if we return here :
        screenDataPtr->defaultConfig = makeDefaultConfig(env, screen);
        if (screenDataPtr->defaultConfig == NULL) {
            return;
        }

that the memory allocated a few lines further up
    graphicsConfigs = (AwtGraphicsConfigDataPtr *)
        calloc(nConfig, sizeof(AwtGraphicsConfigDataPtr));

will be leaked

It seems to me that this return block should be a ""goto cleanup"" like all the rest

However I notice that there seems to be a long standing bigger potential leak in this function.

We have all these calls like
        graphicsConfigs[ind] = ZALLOC (_AwtGraphicsConfigData);

so graphicsConfig may have pointers to memory I don't see being freed anywhere in the case of failure.

The code at
cleanup:
    if (success != JNI_TRUE) {
        free(graphicsConfigs);
    }
needs to first iterate over graphicsConfigs freeing non-null ptrs

In the case of success these are later freed by dispose() .. so it does look to me like it is just missing here
but I could be overlooking something.
This should be looked over carefully by the engineer on this bug


Hmm .. does it need to free defaultConfig stored at index 0?  I'm not sure about that one ..
also something to look at carefully.
;;;","2022-09-21 13:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10378
Date: 2022-09-21 20:15:48 +0000;;;","2022-10-04 08:24;dukebot;Changeset: 1166a8ab
Author:    Alisen Chung <achung@openjdk.org>
Committer: Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2022-10-04 15:22:18 +0000
URL:       https://git.openjdk.org/jdk/commit/1166a8abd2e5fba16b5cd29431de2628a52a8e08
;;;",,,,,,,,,,,,,,,,,,,,
TestCgroupMetrics.java fails as getMemoryUsage() is lower than expected,JDK-8292206,5081387,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,dcubed,dcubed,2022-08-10 11:39,2023-05-10 07:45,2023-10-01 09:56,2022-12-22 12:52,17.0.7-oracle,19,20,,,,21,hotspot,,0,containers,CPU23_04-defer-approved,CPU23_04-defer-SQE-OK,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier5,,,,,,,,,,"The following test failed in the JDK19 CI:

jdk/internal/platform/cgroup/TestCgroupMetrics.java

Here's a snippet from the log file:

#section:main
----------messages:(6/232)----------
command: main TestCgroupMetrics
reason: User specified action: run main TestCgroupMetrics 
Mode: agentvm
Agent id: 4
Additional exports to unnamed modules from @modules: java.base/jdk.internal.platform
elapsed time (seconds): 1.709
----------configuration:(17/2159)----------

<snip>

----------System.err:(14/960)----------
java.lang.RuntimeException: Test failed for - memory:getMemoryUsage, expected [23031517184], got [22767202304]
	at jdk.test.lib.containers.cgroup.CgroupMetricsTester.fail(CgroupMetricsTester.java:71)
	at jdk.test.lib.containers.cgroup.MetricsTesterCgroupV1.fail(MetricsTesterCgroupV1.java:188)
	at jdk.test.lib.containers.cgroup.MetricsTesterCgroupV1.testMemoryUsage(MetricsTesterCgroupV1.java:555)
	at jdk.test.lib.containers.cgroup.MetricsTester.testAll(MetricsTester.java:62)
	at TestCgroupMetrics.main(TestCgroupMetrics.java:47)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Test failed for - memory:getMemoryUsage, expected [23031517184], got [22767202304]

A similar failure in this test was previously resolved:

JDK-8229284 [TESTBUG] jdk/internal/platform/cgroup/TestCgroupMetrics.java fails for - memory:getMemoryUsage",,,,,,,,,,JDK-8304046,JDK-8307825,JDK-8304190,JDK-8303426,JDK-8303641,JDK-8307827,,,,,,,,,,,,,,,,,,JDK-8298029,,JDK-8298030,,JDK-8229284,,,,JDK-8283755,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,,"0|i2y84j:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-29 19:54;dcubed;Here's log file snippet from the jdk-20+22-1572-tier5 sighting:

jdk/internal/platform/cgroup/TestCgroupMetrics.java

#section:main
----------messages:(8/309)----------
command: main TestCgroupMetrics
reason: User specified action: run main TestCgroupMetrics 
started: Sat Oct 29 18:51:23 UTC 2022
Mode: agentvm
Agent id: 6
Additional exports to unnamed modules from @modules: java.base/jdk.internal.platform
finished: Sat Oct 29 18:51:25 UTC 2022
elapsed time (seconds): 1.683
----------configuration:(15/1955)----------

<snip>

----------System.err:(14/960)----------
java.lang.RuntimeException: Test failed for - memory:getMemoryUsage, expected [23282388992], got [22777573376]
	at jdk.test.lib.containers.cgroup.CgroupMetricsTester.fail(CgroupMetricsTester.java:71)
	at jdk.test.lib.containers.cgroup.MetricsTesterCgroupV1.fail(MetricsTesterCgroupV1.java:188)
	at jdk.test.lib.containers.cgroup.MetricsTesterCgroupV1.testMemoryUsage(MetricsTesterCgroupV1.java:555)
	at jdk.test.lib.containers.cgroup.MetricsTester.testAll(MetricsTester.java:62)
	at TestCgroupMetrics.main(TestCgroupMetrics.java:47)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Test failed for - memory:getMemoryUsage, expected [23282388992], got [22777573376];;;","2022-12-02 07:42;ibereziuk;Indeed, part of TestCgroupMetrics.java test which fails intermittently. The test needs to be improved. There is a ticket https://bugs.openjdk.org/browse/JDK-8298030 .
Better to disable the problematic part of the test until the test is improved.;;;","2022-12-18 21:59;iklam;We already have sanity test for the getMemoryUsage() API:

https://github.com/openjdk/jdk/blob/ba942c24e8894f4422870fb53253f5946dc4f0d1/test/lib/jdk/test/lib/containers/cgroup/MetricsTesterCgroupV1.java#L237-L241

        oldVal = metrics.getMemoryUsage();
        newVal = getLongValueFromFile(Controller.MEMORY, ""memory.usage_in_bytes"");
        if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {
            fail(Controller.MEMORY, ""memory.usage_in_bytes"", oldVal, newVal);
        }

I don't think it's possible to write a test to cause metrics.getMemoryUsage() to reliably return a value that's larger (or smaller) than one previously observed. Java heap allocations may cause collections which might release memory back to the OS (the exact behavior depends on the collector and the OS).

Even [~ibereziuk] the suggestion above may not work, as the container may overcommit and use more RAM that on the system.

So I think the MetricsTesterCgroupV1::testMemoryUsage() and MetricsTesterCgroupV2::testMemoryUsage() should be removed.;;;","2022-12-19 15:10;iklam;This particular scenario is fundamentally wrong.

https://github.com/openjdk/jdk/blob/ba942c24e8894f4422870fb53253f5946dc4f0d1/test/lib/jdk/test/lib/containers/cgroup/MetricsTesterCgroupV1.java#L530-L557

The jdk.internal.platform.Metrics.getMemoryUsage() API returns the the ""memory.current"" metric

https://git.kernel.org/pub/scm/linux/kernel/git/tj/cgroup.git/tree/Documentation/admin-guide/cgroup-v2.rst

    memory.current: The total amount of memory currently being used by the cgroup and its descendants.

This test scenario is executed in a regular Java program, outside of any containers (in fact it's executed inside a jtreg agent thread)

java.lang.RuntimeException: Test failed for - memory:getMemoryUsage, expected [23031517184], got [22767202304]
at jdk.test.lib.containers.cgroup.CgroupMetricsTester.fail(CgroupMetricsTester.java:71)
at jdk.test.lib.containers.cgroup.MetricsTesterCgroupV1.fail(MetricsTesterCgroupV1.java:188)
at jdk.test.lib.containers.cgroup.MetricsTesterCgroupV1.testMemoryUsage(MetricsTesterCgroupV1.java:555)
at jdk.test.lib.containers.cgroup.MetricsTester.testAll(MetricsTester.java:62)
at TestCgroupMetrics.main(TestCgroupMetrics.java:47)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
at java.base/java.lang.Thread.run(Thread.java:1589)

So ""memory.current"" returns the total usage of all programs executed by the current Linux user, including all other jtreg test cases that may be currently allocating and freeing memory. That's why we see such a high number:  22767202304 is over 22GB!

Under this circumstance, it's simple impossible to make Metrics.getMemoryUsage() to return any predictable value.;;;","2022-12-19 16:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11734
Date: 2022-12-20 00:03:25 +0000;;;","2022-12-20 02:47;sgehwolf; jdk.test.lib.containers.cgroup.MetricsTester is being used in two different scenarios: 1) TestCgroupMetrics (outside a container) 2) TestSystemMetrics (from within a container - with a 256mb mem limit). So the analysis isn't entirely correct.;;;","2022-12-22 12:52;dukebot;Changeset: 6ccee839
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-12-22 20:50:20 +0000
URL:       https://git.openjdk.org/jdk/commit/6ccee839580fd9dc4cd4941b44dbbe3105202561
;;;","2023-05-08 07:18;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.20-oracle,17.0.8-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nightly testing passed.;;;","2023-05-08 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1332
Date: 2023-05-08 14:14:32 +0000;;;","2023-05-08 07:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1868
Date: 2023-05-08 14:21:22 +0000;;;",,,,,,,,,,,,,
modules_do is called without Module_lock,JDK-8292202,5081383,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,coleenp,coleenp,2022-08-10 11:24,2022-09-28 23:16,2023-10-01 09:56,2022-09-21 20:40,20,,,,,,20,hotspot,,0,cds,,,,,,,,,,,,,,,,,,,"ClassLoaderExt::process_module_table() calls modules_do() which iterates over the ModuleEntryTable without holding Module_lock.
The ModuleEntryTable is not a lock free table as entries can be deleted by concurrent class unloading.

Adding a lock doesn't work because we transition to Native to open a zip file:
V  [jvm.dll+0x4f283a]  ThreadToNativeFromVM::ThreadToNativeFromVM+0x4a  (interfaceSupport.inline.hpp:182)
V  [jvm.dll+0x4f33df]  ClassLoader::create_class_path_entry+0x7f  (classLoader.cpp:742)
V  [jvm.dll+0x4f76eb]  ClassLoader::setup_module_search_path+0xcb  (classLoader.cpp:560)
V  [jvm.dll+0xbf13fe]  ModuleEntryTable::modules_do+0x5e  (moduleEntry.cpp:696)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y83n:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-09-08 14:06;ccheung;I'm thinking the call to ClassLoader::setup_module_search_path(_current, path) could be moved out of the do_module() in the Process class in ClassLoaderExt::process_module_table().

Inside do_module(), just cache all the module paths in a GrowableArray. Before returning from ClassLoaderExt::process_module_table(), for each path in the GrowableArray, call ClassLoader::setup_module_search_path(_current, path). This way, we can still hold a Module_lock before calling modules_do().;;;","2022-09-15 11:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10291
Date: 2022-09-15 18:01:33 +0000;;;","2022-09-21 20:39;dukebot;Changeset: 47f233ac
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-09-22 03:37:23 +0000
URL:       https://git.openjdk.org/jdk/commit/47f233acec2aec449f001ea3a578cead7f1fc0d9
;;;",,,,,,,,,,,,,,,,,,,,
"serviceability/sa/ClhsdbThreadContext.java fails with ""'Thread ""Common-Cleaner""' missing from stdout/stderr""",JDK-8292201,5081382,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-08-10 11:22,2022-10-27 15:57,2023-10-01 09:56,2022-09-03 09:08,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,"Although the summary is rather specific, the root cause is much more general, and can cause a variety of test failures. We'll leave it specific to ClhsdbThreadContext.java for now. The test failed with:

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'Thread ""Common-Cleaner""' missing from stdout/stderr

And indeed the Common-Cleaner thread dump is missing from the output. However, the root cause is an unexpected exception threadcontext dumping:

Thread ""C1 CompilerThread0"" id=18 Address=0x00000253136a0650
r15: 0x000000750e4ff2e8: In java stack for thread ""C1 CompilerThread0"" sun.jvm.hotspot.runtime.CompilerThread@0x00000253136a0650
r14: 0x0000025377384470
r13: null
r12: 0x000000750e4ff378: In java stack for thread ""C1 CompilerThread0"" sun.jvm.hotspot.runtime.CompilerThread@0x00000253136a0650
r11: 0x000000750e4fdeb8: In java stack for thread ""C1 CompilerThread0"" sun.jvm.hotspot.runtime.CompilerThread@0x00000253136a0650
r10: 0x000000750e4fe7c0: In java stack for thread ""C1 CompilerThread0"" sun.jvm.hotspot.runtime.CompilerThread@0x00000253136a0650
r9: null
r8: 0x000000750e4fdffcError: java.lang.ArrayIndexOutOfBoundsException: Index 4099 out of bounds for length 4096
java.lang.ArrayIndexOutOfBoundsException: Index 4099 out of bounds for length 4096
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.Page.getLong(Page.java:182)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.PageCache.getLong(PageCache.java:100)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.DebuggerBase.readCInteger(DebuggerBase.java:364)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.DebuggerBase.readAddressValue(DebuggerBase.java:462)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal.readAddress(WindbgDebuggerLocal.java:312)
	at jdk.hotspot.agent/sun.jvm.hotspot.debugger.windbg.WindbgAddress.getAddressAt(WindbgAddress.java:71)
	at jdk.hotspot.agent/sun.jvm.hotspot.utilities.PointerFinder.find(PointerFinder.java:58)
	at jdk.hotspot.agent/sun.jvm.hotspot.runtime.JavaThread.printThreadContextOn(JavaThread.java:493)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$46.doit(CommandProcessor.java:1699)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2212)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2182)
	at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:2053)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
	at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:281)
	at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)

It looks like it's trying to fetch a 64-bit value (an address) that starts in the last 4-byte word of the page, so the read overflows the page. 64-bit values are expected always be 64-bit aligned.

This exception is triggered by doing a PointerFinder.find() on $r8, which is 0x000000750e4fdffc, so this end result is not surprising given that threadcontext calls PointerFinder.find() on whatever (possibly random) value is in each register.

PointerFinder.find() already expects a bad address to possibly fail with an exception, and it catches AddressException and WrongTypeException to deal with it (as do many other parts of SA code). I don't think adding ArrayIndexOutOfBoundsException to the list of possible exceptions is appropriate. 

It appears that a UnalignedAddressException (a subclass of AddressException) should have been thrown earlier on. There is in fact an alignment check made in DebuggerBase.readCInteger(), but the check is faulty:

           public void checkAlignment(long address, long alignment) {
             // Need to override default checkAlignment because we need to
             // relax alignment constraints on Windows/x86
             if ( (address % alignment != 0)
                &&(alignment != 8 || address % 4 != 0)) {
                throw new UnalignedAddressException(
                        ""Trying to read at address: ""
                      + addressValueToString(address)
                      + "" with alignment: "" + alignment,
                        address);
             }
           }

It purposefully allows 4 byte alignment of 8 byte values in order to support 32-bit x86. However, I don't see how this softening of this check can be expected to work. If indeed 64-bit values on x86 are allowed to be just 4 byte aligned, then x86 can run into this same problem of trying to read a 64-bit value starting in the last 4 bytes of a page and continuing in the first 4 bytes of the next page. That will fail with the same exception we are seeing here, even if the address and 64-bit value are valid.

So our options here are to either get rid of the support for 4 byte aligned 64-bit values (and hope it doesn't break x86), or modify the above check to only allow 4-byte alignment if getAddressSize() == 4.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250801,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y83f:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-08-26 15:37;cjplummer;The failure in this CR is the result of using PointerFinder (""findpc"") on invalid address that starts on the last 32-bit word of a page. ""page"" in this case is referring to a page in SA's PageCache, which are always 4k in size. Note findpc is frequently done using an invalid address. In this test case it is being called on each x64 register, would could contain anything. findpc relies on getting some sort of AddressException when this happens, and will then say the address points to something that is unknown. However, in the case of the address pointing to the last 32-bot word of a page, it results in an ArrayIndexOutOfBoundsException when the page cache tries to read past the end of the page. This is happening in Page.getLong(), which you can see in the stack trace.

The main culprit here is some weakening of the alignment checks being done. The alignment check should have resulted in an UnalignedAddressException long before we ever got to Page.getLong(). However, we have the following override, which is allowing the unaligned address to pass the alignment check.

           public void checkAlignment(long address, long alignment) {
             // Need to override default checkAlignment because we need to
             // relax alignment constraints on Bsd/x86
             if ( (address % alignment != 0)
                &&(alignment != 8 || address % 4 != 0)) {
                throw new UnalignedAddressException(
                        ""Trying to read at address: ""
                      + addressValueToString(address)
                      + "" with alignment: "" + alignment,
                        address);
             }
           }
        };

This allows a pointer to a 64-bit value to only be 32-bit aligned. But there's more to it than that. I modified ClhsdbFindPC.java to fetch a tid (a thread address), and did a findpc on the address OR'd with 0xffc. `findpc` uses PointerFinder. This forced a read of a 64-bit value that starts in the last 32-bits of a page. It passed on linux-x64 but failed on windowx-x64 in the same manner described in the description of this CR. The difference between the two implementations is that windows relies on the default implementation of DebuggerBase.readCInteger() whereas linux has an override. DebuggerBase.readCInteger() does the following:

  public long readCInteger(long address, long numBytes, boolean isUnsigned) {
    utils.checkAlignment(address, numBytes);
    if (useFastAccessors) {
      if (isUnsigned) {
        switch((int) numBytes) {
        case 1: return cache.getByte(address) & 0xFF;
        case 2: return cache.getShort(address, bigEndian) & 0xFFFF;
        case 4: return cache.getInt(address, bigEndian) & 0xFFFFFFFFL;
        case 8: return cache.getLong(address, bigEndian);
...

There is an alignment check here, but it is the ""relaxed"" override shown above, which allows 64-bit addresses on 32-bit boundaries. The override in LinuxDebuggerLocal is:

    /** Need to override this to relax alignment checks on x86. */
    public long readCInteger(long address, long numBytes, boolean isUnsigned)
        throws UnmappedAddressException, UnalignedAddressException {
        // Only slightly relaxed semantics -- this is a hack, but is
        // necessary on x86 where it seems the compiler is
        // putting some global 64-bit data on 32-bit boundaries
        if (numBytes == 8) {
            utils.checkAlignment(address, 4);
        } else {
            utils.checkAlignment(address, numBytes);
        }
        byte[] data = readBytes(address, numBytes);
        return utils.dataToCInteger(data, isUnsigned);

Although there is a relaxed alignment check here also, the code that reads from the address does not assume all the bytes are on the same page, so it won't run into the PageCache issue with reading a 64-bit value that starts in the last 32-bit word of a page.

I think the introduction of these relaxed alignment checks has a muddled history, probably made more muddled by ports cloning code that maybe wasn't necessary. Probably also initial fixes (the relaxed alignment check) seemed to work at first, but later the PageCache issue was discovered, leading to readBytes() workaround in the LinuxDebuggerLocal.readCInteger() override, but was not also done on other ports (so we got this CR for windows).

For 64-bit support it's clear this easing of the 64-bit alignment is not needed, and getting rid of it would result in the proper UnalignedAddressException being thrown. The question is whether it is still needed for 32-bit x86, and if so is it needed on all ports.

I can't test linux-x86, so I can't tell if it still allows 64-bit values on 32-bit aligned addresses, so for now I'll assume it does. So the approach being taken is whenever an address of a 64-bit type points to the last 32-bit word of a page, use readBytes() to get the 64-bit value one byte at a time. It still uses the page cache in the end, but it doesn't try to get all 8 bytes from the same page. Note for 64-bit systems, the conditoin will never arise because of the removal of the relaxed alignment check. Instead there will be an UnalignedAddressException at an early point when the alignment check is made.

One windfall of this change is now we always read 64-bit values from the page cache in a way that is much more efficient than reading a byte at a time. This has resulted in about a 25% performance improvement in a test I have that does a heap dump.;;;","2022-09-01 09:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10090
Date: 2022-08-30 23:57:55 +0000;;;","2022-09-03 09:08;dukebot;Changeset: 767262e6
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-09-03 16:06:25 +0000
URL:       https://git.openjdk.org/jdk/commit/767262e67cec8e7a5e5eba2c6ebea7f60186d2cb
;;;",,,,,,,,,,,,,,,,,,,,
G1 nmethod entry barrier disarm value wraps around too early,JDK-8292194,5081365,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,eosterlund,eosterlund,2022-08-10 07:07,2023-01-20 14:23,2023-10-01 09:56,2022-08-24 06:14,20,,,,,,20,hotspot,,0,gc-g1,noreg-hard,,,,,,,,,,,,,,,,,,"The disarm value for G1 nmethod entry barriers assumes that a concurrent GC can be aborted at most once. However, it can happen many times. In order to avoid ABA issues in the nmethod entry barriers, the limit for wrapping around and reusing numbers needs to be higher.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y7zn:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-08-10 08:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9822
Date: 2022-08-10 14:53:06 +0000;;;","2022-08-24 06:14;dukebot;Changeset: a45a4b94
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2022-08-24 13:11:23 +0000
URL:       https://git.openjdk.org/jdk/commit/a45a4b9465d7d01715425000c4fd47c0aa3e76ca
;;;",,,,,,,,,,,,,,,,,,,,,
TYPE_USE annotations on generic type arguments of record components discarded,JDK-8292159,5081311,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,webbuggrp,webbuggrp,2022-08-09 14:26,2023-01-04 01:41,2023-10-01 09:56,2022-10-26 21:59,17,20,,,,,20,tools,,0,dcsad,javac-record,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Distributor ID:	Debian
Description:	Debian GNU/Linux 11 (bullseye)
Release:	11
Codename:	bullseye
----
Linux db 5.10.0-16-amd64 #1 SMP Debian 5.10.127-2 (2022-07-23) x86_64 GNU/Linux


A DESCRIPTION OF THE PROBLEM :
TYPE_USE annotations placed on generic type arguments of record components (e.g. List<@Annot String>) are for some reason discarded unless the record component type itself is annotated (e.g. @Annot List<@Annot String>).

I compiled the example program in the ""Steps to Reproduce'' section with javac 17, 18, and 20ea and executed all three versions. They all printed the same result: an empty annotations array for the String type use. However, annotating the List type, too, and running the programs again now showed the result I expected: String being annotated with @Annot.

I also decompiled the class files via IntelliJ's decompiler: Interestingly, when the List was not annotated, the decompiled definition looked like:

public static record R(List<String> strings) {
    public R(List<@Test.Annot String> strings) { this.strings = strings; }
    public List<@Test.Annot String> strings() { return this.strings; }
}

while the annotated version contained the annotation at both places in the component definition:

public static record R(@Test.Annot List<@Test.Annot String> strings) {
    public R(@Test.Annot List<@Test.Annot String> strings) {this.strings = strings;}
    public @Test.Annot List<@Test.Annot String> strings() {return this.strings;}
}


I'm not sure whether this is actually a bug or simply not covered by the spec and, therefore, more of a feature request.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Write the following code and execute its main method:

package tmp;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.AnnotatedParameterizedType;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Field;
import java.lang.reflect.RecordComponent;
import java.util.Arrays;
import java.util.List;

public final class Test {
    @Target({ElementType.TYPE_USE})
    @Retention(RetentionPolicy.RUNTIME)
    public @interface Annot {}

    public static final class C {
        List<@Annot String> strings;
    }

    public record R(List<@Annot String> strings) {}

    public static void main(String[] args) {
        {
            Field field = C.class.getDeclaredFields()[0];
            AnnotatedParameterizedType type = (AnnotatedParameterizedType) field.getAnnotatedType();
            AnnotatedType argument = type.getAnnotatedActualTypeArguments()[0];
            System.out.println(Arrays.toString(argument.getAnnotations()));
        }
        {
            RecordComponent component = R.class.getRecordComponents()[0];
            AnnotatedParameterizedType type = (AnnotatedParameterizedType) component.getAnnotatedType();
            AnnotatedType argument = type.getAnnotatedActualTypeArguments()[0];
            System.out.println(Arrays.toString(argument.getAnnotations()));
        }
    }
}


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
[@tmp.Test$Annot()]
[@tmp.Test$Annot()]

ACTUAL -
[@tmp.Test$Annot()]
[]


CUSTOMER SUBMITTED WORKAROUND :
Instead of trying to access the annotation via the record component, you can access it via the field by using the same code used for class fields:

Field field = R.class.getDeclaredFields()[0];
...etc.

FREQUENCY : always


",,,,,,,,,,JDK-8296020,JDK-8296021,JDK-8299584,JDK-8296599,,,,,,,,,,,,,,,,,JDK-8295705,,,,,,,,,,,,,,,,,,,"2022-10-14 03:02;sadayapalam;0001-8292159-TYPE_USE-annotations-on-generic-type-argumen.patch;https://bugs.openjdk.org/secure/attachment/101080/0001-8292159-TYPE_USE-annotations-on-generic-type-argumen.patch","2022-08-09 21:31;adev;Test.java;https://bugs.openjdk.org/secure/attachment/100365/Test.java",,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2y7nn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-09 21:32;adev;The issue is reproducible. TYPE_USE annotations on generic type arguments of record components are getting discarded. The output for the given reproducer is:

[@tmp.Test$Annot()]
[]
;;;","2022-08-15 13:59;darcy;The relevant specs include JLS 8.10. Record Classes.

In particular,

8.10.3. Record Members

[...]

A component field is annotated with the annotations, if any, that appear on the corresponding record component and whose annotation interfaces are applicable in the field declaration context, or in type contexts, or both (§9.7.4). ;;;","2022-10-14 03:08;sadayapalam;A patch that fixes the problem has been attached for early discussions, Still under works.

I think the method com.sun.tools.javac.comp.Check#validateAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation, com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Symbol) where the propagation of annotations is handled 
from component fields to record components is reached ONLY if there is at least one annotation in the JAVA5 annotations
location.

A better location to handle this propagation is com.sun.tools.javac.code.TypeAnnotations.TypeAnnotationPositions#visitVarDef

Question for discussion:

Do we want to move everything other than validation of annotations from  com.sun.tools.javac.comp.Check#validateAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation, com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Symbol)

to 

com.sun.tools.javac.code.TypeAnnotations.TypeAnnotationPositions#visitVarDef 

?


;;;","2022-10-14 11:03;vromero;I sent some feedback on this offline;;;","2022-10-18 00:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10741
Date: 2022-10-18 07:54:02 +0000;;;","2022-10-20 01:46;sadayapalam;Violated portion of the spec is:

JVMS:

```
4.7.20 The RuntimeVisibleTypeAnnotations Attribute
The RuntimeVisibleTypeAnnotations attribute is an variable-length attribute
in the attributes table of a ClassFile , field_info , method_info , or
record_component_info structure, or Code attribute (§4.1, §4.5, §4.6, §4.7.30,
§4.7.3). The RuntimeVisibleTypeAnnotations attribute stores run-time visible
annotations on types used in the declaration of the corresponding class, field,
method, or record component, or in an expression in the corresponding method
body.
```

and

```
4.7.21 The RuntimeInvisibleTypeAnnotations Attribute
The RuntimeInvisibleTypeAnnotations attribute is an variable-length attribute
in the attributes table of a ClassFile , field_info , method_info , or
record_component_info structure, or Code attribute (§4.1, §4.5, §4.6, §4.7.30,
§4.7.3). The RuntimeInvisibleTypeAnnotations attribute stores run-time
invisible annotations on types used in the corresponding declaration of a class, field,
method, or record component, or in an expression in the corresponding method
body
```;;;","2022-10-26 21:59;dukebot;Changeset: 4d9a1cd2
Author:    Srikanth Adayapalam <sadayapalam@openjdk.org>
Date:      2022-10-27 04:56:22 +0000
URL:       https://git.openjdk.org/jdk/commit/4d9a1cd26fa0cda902aafcccd6e02bd7bc60bbb3
;;;","2022-11-07 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/62
Date: 2022-11-07 09:48:55 +0000;;;","2023-01-03 02:40;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Low risk, a fix of javac with a test that well checks the issue.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-01-03 03:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1022
Date: 2023-01-03 11:02:07 +0000;;;",,,,,,,,,,,,,
"Incorrect error: ""block element not allowed within inline element <a>""",JDK-8292157,5081257,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,webbuggrp,webbuggrp,2022-08-09 09:12,2023-06-12 20:50,2023-10-01 09:56,2023-06-06 12:36,20,,,,,,21,tools,,0,20ea,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
For example when a p tag is nested within an a tag, Javadoc incorrectly gives this error.
The content model of the a tag is ""transparent"" (with some specific restrictions, see [1]).
I don't know whether Javadoc fully implements all the content models [2] and their rules, but it should err on the side of caution and not give errors on valid HTML5 content.

[1] https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-a-element
[2] https://html.spec.whatwg.org/multipage/dom.html#content-models

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create `Foo.java` as below and run `javadoc Foo.java`.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No errors
ACTUAL -
Foo.java:5: error: block element not allowed within inline element <a>: p
    <p>A whole paragraph
    ^

---------- BEGIN SOURCE ----------
/**
Sentence.

<a href=""https://foo.bar"">
    <p>A whole paragraph
    that is clickable.</p>
</a>
 */
public class Foo {}

---------- END SOURCE ----------

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2y7c3:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-08-09 21:04;adev;In HTML 4.x (and earlier) and XHTML 1.x <a> elements may not contain <p> elements. In HTML 5, <a> elements may contain <p> elements, but browsers are not very good at it.
;;;","2023-02-01 11:45;jjg;Cool; didn't know about ""transparent"" content.;;;","2023-02-01 11:46;jjg;> but it should err on the side of caution and not give errors on valid HTML5 content.

Yes.;;;","2023-03-15 09:58;hannesw;I don't think the conclusions are as clear-cut as the bug report suggests. HTML5 replaces block and inline elements with flow and phrasing content respectively, so we should probably update our messages. But I think it still at least discourages the use of `a` spanning or containing multiple paragraphs. 

It's true that the content model of the `a` element is transparent, which means it is derived from its parent element (or the parent's parent if the parent has transparent content model as well).

https://html.spec.whatwg.org/multipage/dom.html#transparent-content-models

But the definition of the `a` element also states that it is intended to be used as phrasing content, which is text at the intra-paragraph level (thus excluding flow-content elements `p` and `div`).

https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-a-element
https://html.spec.whatwg.org/multipage/dom.html#phrasing-content

The fact that most doc comments end up inside `div` elements does not necessarily mean they are to not to be considered paragraphs/phrasing content. The HTML5 spec makes it clear that the `p` element is not the only way to define a paragraph, and content may be considered a paragraph even if it is contained by an element with flow content model such as `div` or `section`. I do think main descriptions in JavaDoc comments should functionally be considered paragraphs/phrasing content.

https://html.spec.whatwg.org/multipage/dom.html#paragraphs

All this considered I think we should definitely update the language of our messages to HTML5 terminology, and maybe downgrade this and similar cases from error to warning.;;;","2023-05-11 06:14;hannesw;Here is another relevant section of the HTML spec: https://html.spec.whatwg.org/#restrictions-on-content-models-and-on-attribute-values (subsection ""Cases where the default styles are likely to lead to confusion"").

This suggests that whether above case is valid depends on the CSS applied to the elements involved. The default dispay style for anchor elements is `inline`, but it could of course be `block` or any other valid value for the `display` property. Since we cannot know the CSS for an HTML element in a doc comment we are processing, I think this strengthens the case for turning this check from an error to a warning.;;;","2023-05-12 07:52;hannesw;I decided to only make the change from error to warning for links. In contrast to most other inline elements, links are commonly used both with inline and block style as their purpose is not layout-related.

http://html5doctor.com/block-level-links-in-html-5/;;;","2023-05-15 07:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13990
Date: 2023-05-15 14:43:15 +0000;;;","2023-06-06 12:36;dukebot;Changeset: 0a4f9ad6
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2023-06-06 19:33:35 +0000
URL:       https://git.openjdk.org/jdk/commit/0a4f9ad637df2f602e47940d039bb12e316fb62a
;;;",,,,,,,,,,,,,,,
C2: assert(is_OuterStripMinedLoop()) failed: invalid node class: IfTrue,JDK-8292088,5081249,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,dcubed,dcubed,2022-08-09 07:38,2022-12-06 07:24,2023-10-01 09:56,2022-09-19 03:16,19,20,,,,,20,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-20,tier8,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

applications/javafuzzer/BigTest.java

Here's a snippet from the log file:

Summary of the JavaFuzzer run:
------------------------------
Host:     <host>
Tests:    12 x 300
Args:     -conf config.yml

Started  at: Tue Aug  9 04:03:31 GMT 2022


r10- 300: 194 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 106 Reference Java failures
r7- 300: 191 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 109 Reference Java failures
r2- 300: 182 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 118 Reference Java failures
r6- 300: 178 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 122 Reference Java failures
r1- 300: 184 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 116 Reference Java failures
r12- 300: 181 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 119 Reference Java failures
r4- 300: 181 passed, 2 crashes, 0 fails, 0 hangs, 0 incorrect tests, 118 Reference Java failures
r9- 300: 181 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 119 Reference Java failures
r8- 300: 185 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 115 Reference Java failures
r5- 300: 186 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 114 Reference Java failures
r11- 300: 178 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 122 Reference Java failures
r3- 300: 171 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 129 Reference Java failures

Finished at: Tue Aug  9 12:05:43 GMT 2022


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1659780030\\workspace\\open\\src\\hotspot\\share\\opto/node.hpp:925), pid=50512, tid=50840
#  assert(is_OuterStripMinedLoop()) failed: invalid node class: IfTrue
#
# JRE version: Java(TM) SE Runtime Environment (20.0+10) (fastdebug build 20-ea+10-545)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+10-545, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1660017689\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_BigTest_java\\tmp\\fuzzer.tmp.axklN8HRXL\\hs_err_pid50512.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Command line flags: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00000143e6ff8260):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=50840, stack(0x0000003f9bf00000,0x0000003f9c000000)]


Current CompileTask:
C2:    576   11    b        Test::vMeth1 (274 bytes)

Stack: [0x0000003f9bf00000,0x0000003f9c000000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc5e0e1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xebb2fe]  VMError::report+0x10de  (vmError.cpp:839)
V  [jvm.dll+0xebcd2e]  VMError::report_and_die+0x65e  (vmError.cpp:1687)
V  [jvm.dll+0xebd4a4]  VMError::report_and_die+0x64  (vmError.cpp:1468)
V  [jvm.dll+0x59c427]  report_vm_error+0xb7  (debug.cpp:284)
V  [jvm.dll+0xab43f0]  Node::as_OuterStripMinedLoop+0x50  (node.hpp:925)
V  [jvm.dll+0xad0ada]  LoopNode::verify_strip_mined+0xda  (loopnode.cpp:2160)
V  [jvm.dll+0x536686]  Compile::final_graph_reshaping_main_switch+0x15c6  (compile.cpp:3721)
V  [jvm.dll+0x534f94]  Compile::final_graph_reshaping_impl+0x484  (compile.cpp:3138)
V  [jvm.dll+0x5373a0]  Compile::final_graph_reshaping_walk+0x2b0  (compile.cpp:3880)
V  [jvm.dll+0x533ff4]  Compile::final_graph_reshaping+0x2b4  (compile.cpp:3982)
V  [jvm.dll+0x5307f6]  Compile::Optimize+0x1786  (compile.cpp:2466)
V  [jvm.dll+0x52cf5d]  Compile::Compile+0x14ad  (compile.cpp:824)
V  [jvm.dll+0x452b45]  C2Compiler::compile_method+0x145  (c2compiler.cpp:115)
V  [jvm.dll+0x547050]  CompileBroker::invoke_compiler_on_method+0x980  (compileBroker.cpp:2314)
V  [jvm.dll+0x5445fc]  CompileBroker::compiler_thread_loop+0x25c  (compileBroker.cpp:1982)
V  [jvm.dll+0x81383f]  JavaThread::thread_main_inner+0x29f  (javaThread.cpp:700)
V  [jvm.dll+0xe34b57]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc5ca08]  thread_native_entry+0xb8  (os_windows.cpp:546)
C  [ucrtbase.dll+0x2268a]
C  [KERNEL32.DLL+0x17974]
C  [ntdll.dll+0x5a0b1]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294540,,,,JDK-8281429,JDK-8293993,,,,,,,"2022-08-09 23:21;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/100367/FuzzerUtils.java","2022-08-09 23:21;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/100366/Test.java",,,,,,,,,,,,,,,,,,,,,,"0|i2y7ab:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-08-09 23:02;chagedorn;Starts to fail after JDK-8281429 which only improved the type of a phi. This suggests that it must have revealed an existing issue. Therefore, it does not necessarily must be a regression in JDK 19.;;;","2022-08-09 23:05;chagedorn;ILW = C2 assertion in final graph reshaping, only single fuzzer test, disable compilation of affected method = HLM = P3;;;","2022-09-16 05:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10306
Date: 2022-09-16 12:00:43 +0000;;;","2022-09-19 03:16;dukebot;Changeset: 471e2f12
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-09-19 10:15:18 +0000
URL:       https://git.openjdk.org/jdk/commit/471e2f12b44cafc583a8ae118e36df5f00dfd624
;;;",,,,,,,,,,,,,,,,,,,
Detected container memory limit may exceed physical machine memory,JDK-8292083,5081243,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdowland,sgehwolf,sgehwolf,2022-08-09 05:36,2023-03-14 20:37,2023-10-01 09:56,2022-08-26 05:59,11.0.16,17.0.4,20,openjdk8u345,,,20,hotspot,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,"The current Hotspot code in osContainer_linux.cpp uses this code snippet in OSContainer::init() to set the physical memory of the VM based on the detected container limits:

  // We need to update the amount of physical memory now that
  // cgroup subsystem files have been processed.
  if ((mem_limit = cgroup_subsystem->memory_limit_in_bytes()) > 0) {
    os::Linux::set_physical_memory(mem_limit);
    log_info(os, container)(""Memory Limit is: "" JLONG_FORMAT, mem_limit);
  }

If the detection mechanism so happens to find a value in cgroup limit files that is larger than physical memory of the host system the container runs on this will happily proceed, resulting in a broken JVM at risk to getting OOM killed etc.

This seems to be present since the initial JDK-8146115 code done in JDK 10:
https://hg.openjdk.java.net/jdk/jdk/rev/7f22774a5f42#l4.43

We have seen cgroup v1 systems (see trace attachment) that didn't have any cgroups limits in effect, and had this value in /sys/fs/cgroup/memory/memory.limit_in_bytes: 92233720365056. That value exceeded the physical host's memory of 8 GB total. Nevertheless, the cgroups v1 files don't have a unique value to say ""max"" or unlimited like in cgroups v2. Therefore a contrived ""unlimited"" value is being used to check if the value is a limit or ""unlimited"". _unlimited_memory is set for cgroups v1 to '(LONG_MAX / os::vm_page_size()) * os::vm_page_size(), taking on value 9223372036854771712 on some systems. Thus, the limit ends up being 92233720365056 as that's less than 9223372036854771712[1]. Any larger value in memory.limit_in_bytes cgroup interface files that are smaller than (LONG_MAX / os::vm_page_size()) * os::vm_page_size(), but exceeding physical memory would run afoul of this bug.

We should bound the container memory above by the physical host's memory at the very least.

[1] https://github.com/openjdk/jdk/blob/3677b55b45746c3c955a8fcf1fbbf15694baa873/src/hotspot/os/linux/cgroupV1Subsystem_linux.cpp#L94",,,,,,,,,,JDK-8294864,JDK-8293199,JDK-8293200,JDK-8304198,JDK-8299036,JDK-8294543,JDK-8303877,,,,,,,,,,,,,,,,,,,,,JDK-8146115,,,,JDK-8292984,JDK-8292541,,,,,,,"2022-08-09 05:42;sgehwolf;0001-Bound-container-memory-above-by-host-memory.patch;https://bugs.openjdk.org/secure/attachment/100359/0001-Bound-container-memory-above-by-host-memory.patch","2022-08-11 03:34;jdowland;cgtest.sh;https://bugs.openjdk.org/secure/attachment/100383/cgtest.sh","2022-08-09 05:37;sgehwolf;oom_kill_trace.log;https://bugs.openjdk.org/secure/attachment/100358/oom_kill_trace.log",,,,,generic,,,,,,,10,,linux,,,,,,,"0|i2y78z:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-09 05:42;sgehwolf;Attached a proposed patch.;;;","2022-08-09 05:56;sgehwolf;Workarounds on such systems is to use -XX:-UseContainerSupport, use -XX:MaxRAM=<physical_memory_amount> or actually apply a container limit that is smaller than physical memory.;;;","2022-08-09 06:05;sgehwolf;It looks like the Java Metrics impl classes have a similar problem for cgroups v1. There, the cut-off value seems to be 9223372036837998592 (also larger than observed 92233720365056).

    public long getMemoryLimit() {
        long retval = getLongValue(memory, ""memory.limit_in_bytes"");
        if (retval > CgroupV1SubsystemController.UNLIMITED_MIN) {
            if (memory.isHierarchical()) {
                // memory.limit_in_bytes returned unlimited, attempt
                // hierarchical memory limit
                String match = ""hierarchical_memory_limit"";
                retval = CgroupV1SubsystemController.getLongValueMatchingLine(memory,
                                                            ""memory.stat"",
                                                            match);
            }
        }
        return CgroupV1SubsystemController.longValOrUnlimited(retval);
    }
;;;","2022-08-11 03:33;jdowland;I wrote the attached shell script harness for testing purposes (cgtest.sh). The idea is to create a new cgroup with a memory limit set to 2*physical RAM, then ask Java to set InitialRAMPercentage to 25% of available memory. We can check the resulting InitialHeapSize. After the proposed patch its still being set incorrectly. I'm going to look at Java Metrics impl classes now.

Script needs a cgroup v1 host, superuser privileges (to create cgroups), JAVA_HOME set (use sudo -E to pass it through) and awk available.;;;","2022-08-11 08:50;jdowland;src/hotspot/os/linux/os_linux.cpp os::physical_memory() needs a similar fix, too - I've got it working
(https://github.com/jmtd/jdk/tree/8292083-cgroups-badmaxmem), I need to: clean this up; double
check what flags are affected by the change and make sure they're sensible; and ideally, rework
cgtest.sh into a jtreg-style and include it in the patchset.;;;","2022-08-11 09:12;sgehwolf;Nice work!;;;","2022-08-15 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9880
Date: 2022-08-15 14:51:51 +0000;;;","2022-08-26 05:59;dukebot;Changeset: f694f8a7
Author:    Jonathan Dowland <jdowland@openjdk.org>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-08-26 12:25:16 +0000
URL:       https://git.openjdk.org/jdk/commit/f694f8a7671002559e7d23fdb65d5e9c768f9c03
;;;","2022-08-26 06:53;jdowland;Fix Request (17u)
I wish to backport this to get the bug fix out to JDK17 users as we have seen it in live deployments.

The backport is not clean:

 *   unrelated changes in src/hotspot/os/linux/os_linux.hpp
 *   in src /hotspot/os/linux/cgroupV1Subsystem_linux.cpp, the original patch modified
     CgroupV1Subsystem::kernel_memory_limit_in_bytes, which does not yet exist in jdk17u.
     It is introduced in 8287011. I don't know whether that will get backported to 17u in future.
;;;","2022-08-26 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/646
Date: 2022-08-26 13:50:10 +0000;;;","2022-08-26 07:22;sgehwolf;Please only add the approval tag once the 17u review has been approved.;;;","2022-08-27 01:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1346
Date: 2022-08-27 07:08:28 +0000;;;","2022-08-31 12:40;jdowland;> Please only add the approval tag once the 17u review has been approved. 

Oops, sorry!;;;","2022-08-31 12:41;jdowland;Fix Request (11u)
Same rationale as for 11u. Likewise not clean, same reasons (slightly different unrelated context in  src/hotspot/os/linux/os_linux.hpp );;;","2022-11-16 03:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/180
Date: 2022-11-16 11:44:39 +0000;;;","2022-12-19 03:13;jdowland;Fix request (8u)

Please consider for 8u cgroups v2 support. It's not clean: context issues, replace the use of some log_debug and log_trace, and an adjustment to Asserts class location for hotspot tests. Thanks!;;;",,,,,,,
Thread-safety issues in AbstractLinker implementations,JDK-8292078,5081237,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,pminborg,pminborg,pminborg,2022-08-09 02:21,2022-08-09 08:13,2023-10-01 09:56,2022-08-09 08:13,repo-panama,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,"The instance variable in implementations of jdk.internal.foreign.abi.AbstractLinker is not handled in a thread-safe way. 

Also, it would be desirable to ensure that the instance is a singleton. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y77n:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-08-09 05:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/702
Date: 2022-08-09 12:47:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
G1 nmethod entry barriers don't keep oops alive,JDK-8292077,5081235,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,eosterlund,eosterlund,2022-08-09 00:40,2023-01-20 14:45,2023-10-01 09:56,2022-08-11 04:49,11,17,18,19,20,8,20,hotspot,,0,gc-g1,noreg-hard,,,,,,,,,,,,,,,,,,"The intention is that when G1 uses nmethod entry barriers, it keeps nmethod oops alive. It's easy enough to do it and makes the compiled code more robust. The current code fails to do that, even though it intended to. That should be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288970,,,,,,,,JDK-8292368,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y777:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-08-10 02:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9817
Date: 2022-08-10 09:01:59 +0000;;;","2022-08-11 04:49;dukebot;Changeset: 1c0f0f42
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2022-08-11 11:45:11 +0000
URL:       https://git.openjdk.org/jdk/commit/1c0f0f4211cf564c46753d2cb187c1ef485751cd
;;;","2022-08-12 00:38;mbaesken;We got an assertion in our fastdebug nightly build after this change on Linux ppc64le . Might be related to the change.
Command Line in the build where the assertion happens is : -Xms64M -Xmx1600M --add-exports=java.base/jdk.internal.module=ALL-UNNAMED build.tools.jigsaw.AddPackagesAttribute /nb/linuxppc64le/jdk-dev-build-fastdebug/jdk

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/g1BarrierSet.inline.hpp:39
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/nb/linuxppc64le/jdk-dev/src/hotspot/share/gc/g1/g1BarrierSet.inline.hpp:39), pid=27195, tid=27200
#  assert(oopDesc::is_oop(pre_val, true)) failed: Error
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.openjdk.jdk-dev)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc.openjdk.jdk-dev, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-ppc64le)
# Problematic frame:
# V  [libjvm.so+0xc5532c] G1BarrierSet::enqueue_preloaded(oop)+0x28c;;;","2022-08-12 00:40;mbaesken;backtrace and registers of the assertion are :

Stack: [0x0000100002890000,0x0000100002a90000],  sp=0x0000100002a8ca50,  free space=2034k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc5532c]  G1BarrierSet::enqueue_preloaded(oop)+0x28c
V  [libjvm.so+0xc4127c]  G1CollectedHeap::keep_alive(oop)+0x4c
V  [libjvm.so+0x5266ac]  BarrierSetNMethod::nmethod_entry_barrier(nmethod*)::OopKeepAliveClosure::do_oop(oop*)+0xac
V  [libjvm.so+0x1547b84]  nmethod::oops_do(OopClosure*, bool)+0x84
V  [libjvm.so+0x526d58]  BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)+0xf8
v  ~StubRoutines::nmethod_entry_barrier 0x000010000f4a6598
J 99 c1 java.lang.CharacterData.of(I)Ljava/lang/CharacterData; java.base (136 bytes) @ 0x000010000802ae34 [0x000010000802ae00+0x0000000000000034]
j  java.lang.Character.isJavaIdentifierPart(I)Z+1 java.base
j  jdk.internal.module.Checks.isJavaIdentifier(Ljava/lang/String;)Z+56 java.base
j  jdk.internal.module.Checks.requireTypeName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;+56 java.base
j  jdk.internal.module.Checks.requireQualifiedClassName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;+2 java.base
j  jdk.internal.module.Checks.requireServiceTypeName(Ljava/lang/String;)Ljava/lang/String;+3 java.base
j  java.lang.module.ModuleDescriptor$Builder.uses(Ljava/lang/String;)Ljava/lang/module/ModuleDescriptor$Builder;+22 java.base
j  jdk.internal.module.ModuleInfo.readModuleAttribute(Ljava/io/DataInput;Ljdk/internal/module/ModuleInfo$ConstantPool;I)Ljava/lang/module/ModuleDescriptor$Builder;+1018 java.base
j  jdk.internal.module.ModuleInfo.doRead(Ljava/io/DataInput;)Ljdk/internal/module/ModuleInfo$Attributes;+542 java.base
j  jdk.internal.module.ModuleInfo.read(Ljava/io/InputStream;Ljava/util/function/Supplier;)Ljdk/internal/module/ModuleInfo$Attributes;+16 java.base
j  jdk.internal.module.ModulePath.readExplodedModule(Ljava/nio/file/Path;)Ljava/lang/module/ModuleReference;+35 java.base
j  jdk.internal.module.ModulePath.readModule(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/lang/module/ModuleReference;+11 java.base
j  jdk.internal.module.ModulePath.scanDirectory(Ljava/nio/file/Path;)Ljava/util/Map;+69 java.base
j  jdk.internal.module.ModulePath.scan(Ljava/nio/file/Path;)Ljava/util/Map;+60 java.base
j  jdk.internal.module.ModulePath.scanNextEntry()V+23 java.base
j  jdk.internal.module.ModulePath.find(Ljava/lang/String;)Ljava/util/Optional;+36 java.base
j  jdk.internal.module.SystemModuleFinders$1.lambda$find$0(Ljava/lang/module/ModuleFinder;Ljava/lang/String;)Ljava/util/Optional;+2 java.base
j  jdk.internal.module.SystemModuleFinders$1$$Lambda$1+0x0000000100038f38.run()Ljava/lang/Object;+8 java.base
j  java.security.AccessController.executePrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;Ljava/lang/Class;)Ljava/lang/Object;+29 java.base
j  java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;+5 java.base
j  jdk.internal.module.SystemModuleFinders$1.find(Ljava/lang/String;)Ljava/util/Optional;+12 java.base
j  jdk.internal.module.ModuleBootstrap.boot2()Ljava/lang/ModuleLayer;+292 java.base
j  jdk.internal.module.ModuleBootstrap.boot()Ljava/lang/ModuleLayer;+64 java.base
j  java.lang.System.initPhase2(ZZ)I+0 java.base
v  ~StubRoutines::call_stub 0x000010000f41084c
V  [libjvm.so+0xf47654]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x694
V  [libjvm.so+0x1606bbc]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x3c
V  [libjvm.so+0xf48c04]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x134
V  [libjvm.so+0x1b03d80]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x730
V  [libjvm.so+0x10f6e2c]  JNI_CreateJavaVM+0xfc
C  [libjli.so+0x78a4]  JavaMain+0xc4
C  [libjli.so+0xcce8]  ThreadJavaMain+0x18
C  [libpthread.so.0+0x8a64]  start_thread+0xf4

Registers:
pc =0x0000100000f8532c  lr =0x0000100000f850fc  ctr=0x0000100000f71b60  
r0 =0x0000100000f850fc  r1 =0x0000100002a8ca50  r2 =0x00001000026c7b00  
r3 =0x00001000020f9f28  r4 =0x0000000000000027  r5 =0x00001000020f9ef8  
r6 =0x000010000211f918  r7 =0x0000000000000008  r8 =0x000010000276da40  
r9 =0x0000100000070000  r10=0x0000000000000058  r11=0x0000100002a6ce20  
r12=0x0000100000f71b60  r13=0x0000100002a968f0  r14=0x000010003414bbd1  
r15=0x0000100002a8ce78  r16=0x00001000040279b0  r17=0x000000000000006e  
r18=0x0000100002a8cf10  r19=0x00001000342151d8  r20=0x0000000000000000  
r21=0x0000100002a8ce10  r22=0x0000000000000025  r23=0x000000000000007c  
r24=0x000010000f433f38  r25=0x00001000027594a0  r26=0x0000100002a8cb28  
r27=0x0000100002a8cb88  r28=0x0000100002a8cac8  r29=0x00001000027407d7  
r30=0x0000000000000000  r31=0x0000100002a8ca50  

;;;",,,,,,,,,,,,,,,,,,,
misc javax/swing tests failing ,JDK-8292062,5081212,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,psadhukhan,dcubed,dcubed,2022-08-08 12:56,2023-01-25 19:52,2023-10-01 09:56,2022-08-09 20:46,20,,,,,,20,client-libs,,0,regression,sn_124,tier4,,,,,,,,,,,,,,,,,"The following javax/swing tests are failing in the JDK20 CI:

javax/swing/JList/4618767/JListSelectedElementTest.java
javax/swing/JTree/4618767/JTreeSelectedElementTest.java
javax/swing/event/RightAltKeyTest.java

Here's a snippet from a JListSelectedElementTest.java log file:

#section:main
----------messages:(5/211)----------
command: main JListSelectedElementTest
reason: User specified action: run main JListSelectedElementTest 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 11.215
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(1/61)----------
Test passed for laf: javax.swing.plaf.metal.MetalLookAndFeel
----------System.err:(12/950)----------
java.lang.RuntimeException: Waited too long, but can't select menu using mnemonics for javax.swing.plaf.nimbus.NimbusLookAndFeel
	at JListSelectedElementTest.runTest(JListSelectedElementTest.java:129)
	at JListSelectedElementTest.main(JListSelectedElementTest.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Waited too long, but can't select menu using mnemonics for javax.swing.plaf.nimbus.NimbusLookAndFeel
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Waited too long, but can't select menu using mnemonics for javax.swing.plaf.nimbus.NimbusLookAndFeel
----------rerun:(41/5614)*----------


Here's a snippet from a JTreeSelectedElementTest.java log file:

#section:main
----------messages:(5/211)----------
command: main JTreeSelectedElementTest
reason: User specified action: run main JTreeSelectedElementTest 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 11.574
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(1/61)----------
Test passed for laf: javax.swing.plaf.metal.MetalLookAndFeel
----------System.err:(11/879)----------
java.lang.RuntimeException: Waited too long, but can't select menu using mnemonics for javax.swing.plaf.nimbus.NimbusLookAndFeel
	at JTreeSelectedElementTest.main(JTreeSelectedElementTest.java:119)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Waited too long, but can't select menu using mnemonics for javax.swing.plaf.nimbus.NimbusLookAndFeel
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Waited too long, but can't select menu using mnemonics for javax.swing.plaf.nimbus.NimbusLookAndFeel
----------rerun:(41/5614)*----------


Here's a snippet from a RightAltKeyTest.java test log file:

#section:main
----------messages:(5/197)----------
command: main RightAltKeyTest
reason: User specified action: run main RightAltKeyTest 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 3.402
----------configuration:(3/43)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(13/969)----------
java.lang.RuntimeException: Actions are not performed for JMenu with javax.swing.plaf.nimbus.NimbusLookAndFeel look and feel.
	at RightAltKeyTest.errLog(RightAltKeyTest.java:261)
	at RightAltKeyTest.test(RightAltKeyTest.java:203)
	at RightAltKeyTest.main(RightAltKeyTest.java:267)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Actions are not performed for JMenu with javax.swing.plaf.nimbus.NimbusLookAndFeel look and feel.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Actions are not performed for JMenu with javax.swing.plaf.nimbus.NimbusLookAndFeel look and feel.
----------rerun:(46/4732)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y723:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,Verified,,"2022-08-08 13:50;dcubed;The following two client related fixes are in jdk-20+10-553-tier4:

JDK-8064787 [macosx] In Nimbus LaF, Ctrl+Alt mnemonic doesn't work

JDK-8259687 JTabbedPane.setComponentAt doesn't hide previously visible tab component

I think JDK-8064787 is probably the root cause for 2 of the 3 test failures,
but that's just a guess on my part.;;;","2022-08-08 14:17;prr;[~psadhukhan] It seems you can't have run these tests ?
Assuming the 3 tests that fail are all correct tests, then I think we should back out 8064787 immediately. It would be wrong to problem list them if they are correct and we can't have them failing until a re-fix.;;;","2022-08-09 04:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9808
Date: 2022-08-09 11:49:22 +0000;;;","2022-08-09 20:46;dukebot;Changeset: 83dc2e3e
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-08-10 03:42:12 +0000
URL:       https://git.openjdk.org/jdk/commit/83dc2e3e45a946dd1302efb84baf3afaa9309ba4
;;;","2022-08-10 06:25;dcubed;The fix for this bug is in jdk-20+10-577 and jdk-20+10-577-tier4 is back to GREEN.;;;",,,,,,,,,,,,,,,,,,
"Test runtime/posixSig/TestPosixSig.java fails with 'Test failed, bad output.'",JDK-8292054,5081202,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,lmesnik,lmesnik,2022-08-08 10:33,2022-08-24 23:16,2023-10-01 09:56,2022-08-17 12:57,20,,,,,,20,hotspot,,0,hs-sbr,noreg-self,signals,,,,,,,,,,,,,,,,,"Test runtime/posixSig/TestPosixSig.java fails with
[2022-08-06T08:47:22.861110619Z] Gathering output for process 2830437
output: Warning: SIGFPE handler modified!
Signal Handlers:
   SIGSEGV: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGBUS: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGFPE: sig_handler in libTestPsig.so, mask=00000000000000000000000000000000, flags=none
  *** Handler was modified!
  *** Expected: javaSignalHandler in libjvm.so, mask=11100100110111111111111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGPIPE: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGXFSZ: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGILL: sig_handler in libTestPsig.so, mask=00000000000000000000000000000000, flags=none
  *** Handler was modified!
  *** Expected: javaSignalHandler in libjvm.so, mask=11100100110111111111111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGUSR2: SR_handler in libjvm.so, mask=00100000000000000000000000000000, flags=SA_RESTART|SA_SIGINFO
    SIGHUP: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGINT: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGTERM: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGQUIT: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGTRAP: SIG_DFL, mask=00000000000000000000000000000000, flags=none
Consider using jsig library.
Warning: SIGILL handler modified!
Signal Handlers:
   SIGSEGV: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGBUS: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGFPE: sig_handler in libTestPsig.so, mask=00000000000000000000000000000000, flags=none
  *** Handler was modified!
  *** Expected: javaSignalHandler in libjvm.so, mask=11100100110111111111111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGPIPE: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGXFSZ: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGILL: sig_handler in libTestPsig.so, mask=00000000000000000000000000000000, flags=none
  *** Handler was modified!
  *** Expected: javaSignalHandler in libjvm.so, mask=11100100110111111111111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGUSR2: SR_handler in libjvm.so, mask=00100000000000000000000000000000, flags=SA_RESTART|SA_SIGINFO
    SIGHUP: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGINT: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGTERM: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGQUIT: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGTRAP: SIG_DFL, mask=00000000000000000000000000000000, flags=none
Consider using jsig library.

----------System.err:(10/524)----------
java.lang.RuntimeException: Test failed, bad output.
	at TestPosixSig.main(TestPosixSig.java:65)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1589)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285792,JDK-8292559,,,JDK-8279878,JDK-8291569,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y6zv:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-08-08 17:48;dholmes;This may be an Ubuntu/Gtk issue.  Gtk modifies SIGFPE handler and so causes the warnings from the VM. Those warnings then cause the test to break. See JDK-8279878. Not clear where Gtk comes into your test runs though ???

Workaround is to disable warnings when running the test. This will also go away when we fix JDK-8291569.;;;","2022-08-08 20:12;dholmes;Hmm I see this failing on OL8.6 as well in a personal mach5 job.;;;","2022-08-15 12:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9882
Date: 2022-08-15 18:29:55 +0000;;;","2022-08-17 12:57;dukebot;Changeset: 0d96546a
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2022-08-17 19:56:14 +0000
URL:       https://git.openjdk.org/jdk/commit/0d96546ab93600f17877e5db2770e4125916bcda
;;;",,,,,,,,,,,,,,,,,,,
"jdk/internal/misc/TerminatingThreadLocal/TestTerminatingThreadLocal.java failed ""AssertionError: Expected terminated values: [666] but got: []""",JDK-8292051,5081197,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,alanb,dcubed,dcubed,2022-08-08 09:07,2023-01-26 14:27,2023-10-01 09:56,2022-08-17 00:33,20,,,,,,20,core-libs,,0,intermittent,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,loom,noreg-self,problemlist,tier1,tier4,tier6,,,,,,,,,,"The following test failed in the JDK20 CI:

jdk/internal/misc/TerminatingThreadLocal/TestTerminatingThreadLocal.java

Here's a snippet from the log file:

#section:main
----------messages:(5/467)----------
command: main -Djdk.virtualThreadScheduler.parallelism=1 -Djdk.virtualThreadScheduler.maxPoolSize=2 TestTerminatingThreadLocal
reason: User specified action: run main/othervm -Djdk.virtualThreadScheduler.parallelism=1 -Djdk.virtualThreadScheduler.maxPoolSize=2 TestTerminatingThreadLocal 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 31.157
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base                   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(0/0)----------
----------System.err:(12/794)----------
java.lang.AssertionError: Expected terminated values: [666] but got: []
	at TestTerminatingThreadLocal.ttlTestVirtual(TestTerminatingThreadLocal.java:170)
	at TestTerminatingThreadLocal.main(TestTerminatingThreadLocal.java:48)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.AssertionError: Expected terminated values: [666] but got: []
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.AssertionError: Expected terminated values: [666] but got: []
----------rerun:(41/5987)*----------

Since this is a Tier1 failure, I'm starting this bug off as a P2.",,,,,,,,,,JDK-8293732,JDK-8293699,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291897,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,windows,,,,,,"0|i2y6yr:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-08-08 09:10;dcubed;The following bug fix recently changed the failing test:

JDK-8291897 TerminatingThreadLocal(s) not registered from virtual thread(s);;;","2022-08-08 09:12;dcubed;[~plevart] - Please take a look at this recent failure of
jdk/internal/misc/TerminatingThreadLocal/TestTerminatingThreadLocal.java

It might be related to your work on:

JDK-8291897 TerminatingThreadLocal(s) not registered from virtual thread(s);;;","2022-08-08 10:38;alanb;31s might not be enough to wait for when there are other tests running concurrently.  We could replace it with a loop that waits until terminatedValues has been updated, as in something like this:

```
        try {
            while (terminatedValues.isEmpty()) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        } finally {
            lock.unspin= true;
        }
```;;;","2022-08-08 11:40;dcubed;[~alanb] - I think folks have forgotten the lesson of not using a simple sleep() to
make tests pass since I've been seeing a number of recent reviews for ""fixes"" to
tests that are related to sleep() calls.

Doing a sleep() in a loop is somewhat acceptable if there isn't an appropriate
condition that can be wait()'ed for. I'm okay with your proposed loop above where
the sleep() is for 1 second since that will keep the thread from swamping in the
loop.;;;","2022-08-08 12:02;darcy;It is strongly preferable to have a short sleep in a loop (if necessary) as opposed to a longer sleep to avoid lengthening the minimum time it takes to run a test.

Any kind of sleeping should also take into account the jtreg timeout factor so the test will have a longer total sleep is the user has already indicated that might be needed.;;;","2022-08-10 02:38;alanb;[~plevart] Would you have any objection if I took this issue? The test has been a problematic in our CI so Dan has had to exclude it. Most of the failures seems to be because the 31s isn't enough on busy machines or debug builds. There may be other cases where the additional worker parks indefinitely (the pool eventually returns to 1 threads once the first task completes). I think the simplest thing for this test is to change it to use a custom scheduler like this: https://github.com/openjdk/jdk/pull/9819 . This gives the test control of the carrier thread without needing to wait for the keep alive time.;;;","2022-08-10 06:28;dcubed;The failing test is ProblemListed in jdk-20+10-572.;;;","2022-08-11 01:13;plevart;[~alanb] Yes, that's much better. I also thought of creating a custom scheduler at first, but didn't pursue it further... Since that builder constructor was designed for testing, it should be used for testing...;;;","2022-08-11 01:42;plevart;...as to why I used just simple sleep(31s)... I never would have used a simple sleep to wait for an event that should take a variable amount of time to occur. I would have used a short sleep in a loop. I know that tests should be designed to take as little time as possible. But now I know that waiting for a thread that does sleep(30s) by doing sleep(31s) in another thread is not reliable even if executed in a separate VM (othervm). I didn't know that tests are executing on machines that are so overloaded that scheduling of threads can skew so much. Now I know...;;;","2022-08-11 09:06;alanb;Thanks, I'll take this and expand the test to cover the full set of ops.;;;","2022-08-12 06:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9819
Date: 2022-08-10 09:18:01 +0000;;;","2022-08-17 00:33;dukebot;Changeset: 0bfb1216
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-08-17 07:28:41 +0000
URL:       https://git.openjdk.org/jdk/commit/0bfb12162f6035559a114176115b91aff6df3b64
;;;","2022-09-13 05:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/24
Date: 2022-09-13 12:30:52 +0000;;;",,,,,,,,,,
HttpClient doesn't handle 102 or 103 properly,JDK-8292044,5081190,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jpai,dfuchs,dfuchs,2022-08-08 06:13,2023-01-31 03:45,2023-10-01 09:56,2022-09-22 02:20,11,17,19,,,,20,core-libs,,0,httpclient,,,,,,,,,,,,,,,,,,,"When the HttpClient receives a response with 102 or 103 it simply returns that response to the caller and considers the exchange done. This leaves the caller in a bind as it can't receive the final 200 response.

A minimal fix (backportable) would be to ignore the 102 or 103 response and wait for the final 200 response.

For the mainline we should probably add a new no-op method with an empty default body to the BodyHandler interface to give the caller a chance to intercept the 1xx response.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293574,,,,JDK-8294196,,,,JDK-8170305,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y6x7:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-09-05 06:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10169
Date: 2022-09-05 13:36:04 +0000;;;","2022-09-22 02:20;dukebot;Changeset: 800e68d6
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-09-22 09:18:22 +0000
URL:       https://git.openjdk.org/jdk/commit/800e68d6906734242119e4ea033422f037a79857
;;;","2022-09-22 02:28;jpai;> For the mainline we should probably add a new no-op method with an empty default body to the BodyHandler interface to give the caller a chance to intercept the 1xx response.

I've created https://bugs.openjdk.org/browse/JDK-8294196 to track this.;;;",,,,,,,,,,,,,,,,,,,,
Move jdk.X509Certificate event logic to JCA layer,JDK-8292033,5081183,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,coffeys,coffeys,coffeys,2022-08-08 03:25,2023-08-15 03:33,2023-10-01 09:56,2022-11-09 13:50,,,,,,,20,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jfr-crypto,,,,,,,,,,,,,,,The current jdk.X509Certificate event operates only for the JDK supplied sun.security.provider.X509Factory provider. We should move the logic to the JCA layer so that the event can be fired no matter who the provider is.,,,,,,,,,,JDK-8310854,JDK-8304212,JDK-8300959,JDK-8300271,JDK-8300990,JDK-8300991,,,,,,,,,,,,,,,,,,,,JDK-8292176,,JDK-8292176,JDK-8314263,JDK-8148188,JDK-8304226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y6vn:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2022-10-14 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10422
Date: 2022-09-26 13:45:45 +0000;;;","2022-11-09 13:50;dukebot;Changeset: 102b2b32
Author:    Sean Coffey <coffeys@openjdk.org>
Date:      2022-11-09 21:46:56 +0000
URL:       https://git.openjdk.org/jdk/commit/102b2b32feec4727145be4814eb1a69ef462ff16
;;;","2023-01-20 02:27;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Non trivial change to security files, and not clean, so it comes with some risk. It seems not really a bug either. But better go along to reduce effort of further backports.
I had  to resolve this.
Tests pass.  SAP nightly testing passed.;;;","2023-01-20 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1092
Date: 2023-01-20 09:11:36 +0000;;;","2023-06-02 07:07;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle from 17.
Changes to a security file, not risk free...
I had to resolve and adapt syntax.
Tests pass. SAP nighlty testing passed.;;;","2023-06-16 05:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1950
Date: 2023-06-16 11:58:25 +0000;;;",,,,,,,,,,,,,,,,,
Public methods of inner classes are reported as private,CODETOOLS-7903345,5084712,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,shurailine,shurailine,shurailine,2022-10-04 13:56,2022-10-06 12:01,2023-10-01 09:56,2022-10-06 11:58,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"For a code like this:
public class TestCode {
    public TestCode() {
        new Object() {
            public void publicMethod() {}
        };
    }
    void method() {
        new Object() {
            public void publicMethod() {}
        };
    }
    class Inner {
        public void publicMethod() {}
    }
}
all three ""publicMethod"" methods are reported as private",,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ysdn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@33767a5b,,,,,,,,,"2022-10-04 13:58;shurailine;This is done in CombinerDataProcessor:
int newAccess = isPublic ? m.getAccess() : makePrivate(m.getAccess());
etc;;;","2022-10-05 17:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jcov/pull/30
Date: 2022-10-06 00:23:22 +0000;;;","2022-10-06 11:58;roboduke;Changeset: e05dff3b
Author:    Alexandre Iline <shurailine@openjdk.org>
Date:      2022-10-06 18:56:57 +0000
URL:       https://git.openjdk.org/jcov/commit/e05dff3b84b9ebcd43e6f7682351861ab0aa4ef3
;;;",,,,,,,,,,,,,,,,,,,,
refactor OutputFactory to introduce various Declaration Visitor classes,CODETOOLS-7903344,5084605,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-10-03 07:10,2022-10-04 06:13,2023-10-01 09:56,2022-10-04 06:13,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"Currently OutputFactory does many things. Removing duplicate declarations, filtering declarations for include options, lifts certain declarations to top-level, manages C names to be safe for Java. It'd be better to refactor OutputFactory to introduce various Declaraion Visitor classes each handling one aspect and leaving OutputFactory to just initialise various builders to handle actual code generation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yrpv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-10-03 07:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/81
Date: 2022-10-03 14:29:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Wrong methods reported as synthetic,CODETOOLS-7903342,5084541,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,shurailine,shurailine,shurailine,2022-09-30 13:55,2022-10-04 13:15,2023-10-01 09:56,2022-10-04 13:14,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"A non-synthetic method of a synthetic class is marked as synthetic by these lines in com.sun.tdk.jcov.processing.CombinerDataProcessor:
                        if ((c.getAccess() & Opcodes.ACC_SYNTHETIC) != 0 && (m.getAccess() & Opcodes.ACC_SYNTHETIC) == 0){
                            newAccess = m.getAccess() | Opcodes.ACC_SYNTHETIC;
                        }
Per JVMS $4.7.8 not all methods of a synthetic class are synthetic.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yrbn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@33767a5b,,,,,,,,,"2022-09-30 15:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jcov/pull/29
Date: 2022-09-30 22:03:29 +0000;;;","2022-10-04 13:14;roboduke;Changeset: dbd12415
Author:    Alexandre Iline <shurailine@openjdk.org>
Date:      2022-10-04 20:12:58 +0000
URL:       https://git.openjdk.org/jcov/commit/dbd124154b4f6d7fa68f9744986701cee240e763
;;;",,,,,,,,,,,,,,,,,,,,,
unsigned typedefs are not extracted,CODETOOLS-7903339,5084527,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-09-30 06:46,2022-10-03 04:08,2023-10-01 09:56,2022-10-03 04:08,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"File t.h

typedef unsigned long foo_t;

jextract skips unsigned long.

On mac, because of this issue size_t typedef is not jextracted.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yr8j:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-09-30 08:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/80
Date: 2022-09-30 15:37:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
java.lang.NullPointerException: at com.sun.javatest.TestSuite$GeneralPurposeLogger.<init>(TestSuite.java:1494),CODETOOLS-7903336,5084446,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,dbessono,dbessono,dbessono,2022-09-29 14:33,2022-10-04 05:44,2023-10-01 09:56,2022-10-04 05:44,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"Noticed when running a test suite:

java.lang.NullPointerException
	at java.base/java.util.Objects.requireNonNull(Objects.java:233)
	at java.logging/java.util.logging.Logger.addHandler(Logger.java:2064)
	at com.sun.javatest.TestSuite$GeneralPurposeLogger.<init>(TestSuite.java:1494)
	at com.sun.javatest.TestSuite$GeneralPurposeLogger.<init>(TestSuite.java:1481)
	at com.sun.javatest.TestSuite.createLog(TestSuite.java:1303)
	at com.sun.javatest.services.Service.createLog(Service.java:325)
	at com.sun.javatest.services.ServiceManager.setParameters(ServiceManager.java:133)
	at com.sun.javatest.services.ServiceManager.setHarness(ServiceManager.java:126)
	at com.sun.javatest.TestSuite.starting(TestSuite.java:546)
	at com.sun.jck.lib.JCKTestSuite.starting(JCKTestSuite.java:268)
	at com.sun.javatest.Harness.runTests(Harness.java:751)
	at com.sun.javatest.Harness.batch(Harness.java:447)
	at com.sun.javatest.batch.RunTestsCommand.run(RunTestsCommand.java:116)
	at com.sun.javatest.tool.CommandContext.runCommands(CommandContext.java:198)
	at com.sun.javatest.tool.Main.run(Main.java:427)
	at com.sun.javatest.tool.Main.main0(Main.java:139)
	at com.sun.javatest.tool.Main.main(Main.java:117)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yqqj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3565cd1f,,,,,,,,,"2022-09-29 17:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtharness/pull/40
Date: 2022-09-30 00:01:15 +0000;;;","2022-10-04 05:44;roboduke;Changeset: 4d6a49b1
Author:    Dmitry Bessonov <dbessono@openjdk.org>
Date:      2022-10-04 12:42:24 +0000
URL:       https://git.openjdk.org/jtharness/commit/4d6a49b1c4959da1b9bc7d960f13a87464a00516
;;;",,,,,,,,,,,,,,,,,,,,,
jextract test TestSplit.java fails,CODETOOLS-7903335,5084227,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-09-27 05:47,2022-09-27 07:13,2023-10-01 09:56,2022-09-27 07:13,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"test TestSplit.testSplit(): failure
java.lang.AssertionError: Sucess expected, failed: 4 expected [0] but found [4]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:907)
	at testlib.JextractToolRunner$JextractResult.checkSuccess(JextractToolRunner.java:113)
	at TestSplit.testSplit(TestSplit.java:41)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)

===============================================
jtreg/TestSplit.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================

----------System.err:(41/1855)----------
In memory compilation failed: split_h_2.java:8: error: cannot inherit from final split_h_1
final class split_h_2 extends split_h_1 {
                              ^
split_h_3.java:8: error: cannot inherit from final split_h_2
final class split_h_3 extends split_h_2 {
                              ^
split_h_4.java:8: error: cannot inherit from final split_h_3
final class split_h_4 extends split_h_3 {
                              ^
split_h.java:8: error: cannot inherit from final split_h_4
public final class split_h extends split_h_4 {
                                   ^
split_h_2.java:11: error: split_h_1() has private access in split_h_1
    private split_h_2() {}
                        ^
split_h_3.java:11: error: split_h_2() has private access in split_h_2
    private split_h_3() {}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ypdv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-09-27 06:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/79
Date: 2022-09-27 13:16:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
jtreg fails with StringIndexOutOfBoundsException: Index -1 out of bounds for length 0,CODETOOLS-7903331,5084113,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,dholmes,dholmes,2022-09-26 03:36,2022-10-11 17:01,2023-10-01 09:56,2022-10-11 17:01,jtreg7.0,,,,,,jtreg7.1,tools,,0,,,,,,,,,,,,,,,,,,,,"Test results: passed: 27
[2022-09-26T09:04:28,984Z] Error: Unexpected exception occurred! java.lang.StringIndexOutOfBoundsException: Index -1 out of bounds for length 0
[2022-09-26T09:04:28,984Z] java.lang.StringIndexOutOfBoundsException: Index -1 out of bounds for length 0
[2022-09-26T09:04:28,985Z] 	at java.base/jdk.internal.util.Preconditions$1.apply(Preconditions.java:55)
[2022-09-26T09:04:28,985Z] 	at java.base/jdk.internal.util.Preconditions$1.apply(Preconditions.java:52)
[2022-09-26T09:04:28,985Z] 	at java.base/jdk.internal.util.Preconditions$4.apply(Preconditions.java:213)
[2022-09-26T09:04:28,985Z] 	at java.base/jdk.internal.util.Preconditions$4.apply(Preconditions.java:210)
[2022-09-26T09:04:28,985Z] 	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:98)
[2022-09-26T09:04:28,985Z] 	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)
[2022-09-26T09:04:28,985Z] 	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)
[2022-09-26T09:04:28,985Z] 	at java.base/java.lang.String.checkIndex(String.java:4557)
[2022-09-26T09:04:28,985Z] 	at java.base/java.lang.StringLatin1.charAt(StringLatin1.java:46)
[2022-09-26T09:04:28,985Z] 	at java.base/java.lang.String.charAt(String.java:1515)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.InitialUrlFilter.isInitialUrlMatch(InitialUrlFilter.java:133)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.InitialUrlFilter.accepts(InitialUrlFilter.java:159)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.ParameterFilter.accepts(ParameterFilter.java:149)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.ParameterFilter.accepts(ParameterFilter.java:96)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.TRT_Iterator.wouldAccept(TRT_Iterator.java:914)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.TRT_Iterator.findNext(TRT_Iterator.java:752)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.TRT_Iterator.init(TRT_Iterator.java:697)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.TRT_Iterator.<init>(TRT_Iterator.java:157)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.TestResultTable.getIterator(TestResultTable.java:1206)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.TestResultTable.getIterator(TestResultTable.java:1116)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.report.ReportSettings.setupSortedResults(ReportSettings.java:523)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.report.Report.writeReports(Report.java:177)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.regtest.report.RegressionReporter.report(RegressionReporter.java:106)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.regtest.tool.Tool.batchHarness(Tool.java:1992)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.regtest.tool.Tool.run(Tool.java:1338)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.regtest.tool.Tool.run(Tool.java:1082)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.regtest.tool.Tool.main(Tool.java:155)
[2022-09-26T09:04:28,985Z] 	at com.sun.javatest.regtest.Main.main(Main.java:46)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903225,,,,,,JDK-8294142,JDK-8294403,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yooj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-09-26 07:38;cstein;SIOOBE happens since merge of JDK-8294142 - with jtreg 7+1 and jtharness 6+14 being used without issues before that.;;;","2022-09-26 09:36;shade;How do you reproduce this?;;;","2022-09-26 09:38;djelinski;happens when running jtreg on test/lib-test; this directory contains TEST.ROOT file.

It does not happen when running jtreg on test/lib-test:tier1. However, tier1 definition appears to be incorrect by jtreg standards; with test/lib-test:tier1, no tests are run.
If we change tier1 definition (in lib-test/TEST.groups) to:
tier1 = /
then test/lib-test:tier1 becomes equivalent to test/lib-test - the same tests are run, and the same error is thrown.;;;","2022-09-26 14:43;dholmes;If no fix for this is imminent then please backout JDK-8294142 until this can be resolved.;;;","2022-09-26 17:25;dholmes;I am preparing a backout of  JDK-8294142;;;","2022-09-26 17:26;jjg;This is a combination of 3 issues.

1. The underlying SIOOB comes from JT Harness, CODETOOLS-7903224, which has already been fixed in recent versions of JT Harness

2. jtreg 7 is using an older release of JT Harness, which does not yet have the fix for CODETOOLS-7903224.  There is a separate issue filed to update jtreg to use a newer version of JT Harness.  CODETOOLS-7903332.  This is temporarily blocked because we actually need to move to JT Harness 6-b24, which needs to be promoted. JDK-8294395

3. A change in JDK tickled the preceding two issues. JDK-8294142 .

The workaround for now is to revert JDK-8294142.;;;","2022-09-26 17:32;jjg;Note that promoting a new version of jtreg (7.1?) will not in itself fix the problem. We will need to do some amount of promotion testing and then update the `requiredVersion` values in the `TEST.ROOT` files.;;;","2022-09-27 00:33;djelinski;Repro:
make test TEST=test/lib-test JTREG=OPTIONS=-report:executed

This triggers SIOOBE on jtreg 7b1; this is CODETOOLS-7903225, which is already fixed in jtreg git, but not released yet.
The JTHarness ticket CODETOOLS-7903224 only replaces SIOOBE with IAE, so it's not much help here.

Trying to workaround the issue, I tested:
make test TEST=test/lib-test/:tier1 JTREG=OPTIONS=-report:executed

This does not trigger SIOOBE on 7b1, but does not run any tests either. In jtreg git this executes the tests, but throws SIOOBE.
Again trying to work around this issue, I checked the definition of tier1 in lib-test/TEST.groups; the definition is as follows:
tier1 = .
Changing the definition to tier1 = / makes jtreg 7b1 execute the tests, but both 7b1 and git throw SIOOBE when generating the report.

Lastly, changing tier1 definition to jdk/test makes the tests pass, but RedefineClassTest.java is skipped - it's located in the same directory as TEST.ROOT.;;;","2022-10-11 12:57;jjg;As predicted (elsewhere), rebuilding with JT Harness 6+24 does not fix the jtreg issue, but it does give a more immediate helpful message.

Here's the minimal test case, with a group set to "".""

*** file play/bad-group/tests/TEST.ROOT
groups=TEST.groups
*** file play/bad-group/tests/Test.java
/*
 * @test
 */

public class Test {
  public static void main(String... args) {
    System.out.println(""HelloWorld"");
  }
}
*** file play/bad-group/tests/TEST.groups
all=.
*** file play/bad-group/run.sh
#!/bin/#!/bin/sh

open/build/images/jtreg/bin/jtreg \
  -w play/bad-group/work \
  -r play/bad-group/report \
  -report:files \
  -jdk:/Users/jjg/Work/jdk/jdk-19.jdk/Contents/Home \
  -v1 \
  play/bad-group/tests:all


$ sh play/bad-group/run.sh                                                                                                                   
Passed: Test.java
Test results: passed: 1
Error: Unexpected exception occurred! java.lang.IllegalArgumentException: Known initial URL to compare should not be empty
java.lang.IllegalArgumentException: Known initial URL to compare should not be empty
	at com.sun.javatest.InitialUrlFilter.isInitialUrlMatch(InitialUrlFilter.java:125)
	at com.sun.javatest.InitialUrlFilter.accepts(InitialUrlFilter.java:164)
	at com.sun.javatest.ParameterFilter.accepts(ParameterFilter.java:149)
	at com.sun.javatest.ParameterFilter.accepts(ParameterFilter.java:96)
	at com.sun.javatest.TRT_Iterator.wouldAccept(TRT_Iterator.java:914)
	at com.sun.javatest.TRT_Iterator.findNext(TRT_Iterator.java:752)
	at com.sun.javatest.TRT_Iterator.init(TRT_Iterator.java:697)
	at com.sun.javatest.TRT_Iterator.<init>(TRT_Iterator.java:157)
	at com.sun.javatest.TestResultTable.getIterator(TestResultTable.java:1206)
	at com.sun.javatest.TestResultTable.getIterator(TestResultTable.java:1116)
	at com.sun.javatest.report.ReportSettings.setupSortedResults(ReportSettings.java:523)
	at com.sun.javatest.report.Report.writeReports(Report.java:177)
	at com.sun.javatest.regtest.report.RegressionReporter.report(RegressionReporter.java:106)
	at com.sun.javatest.regtest.tool.Tool.batchHarness(Tool.java:1971)
	at com.sun.javatest.regtest.tool.Tool.run(Tool.java:1316)
	at com.sun.javatest.regtest.tool.Tool.run(Tool.java:1077)
	at com.sun.javatest.regtest.tool.Tool.main(Tool.java:147)
	at com.sun.javatest.regtest.Main.main(Main.java:46);;;","2022-10-11 12:58;jjg;Note that the most deeply nested jtreg method is

at com.sun.javatest.regtest.report.RegressionReporter.report(RegressionReporter.java:106) 

so the fix needs to be by then,;;;","2022-10-11 14:56;jjg;The fix belongs in `TestManager.getTests`.  There is already the precedent to return `null` if an entry implies all tests in a test suite should be run; we just need to extend that usage when expanding groups;;;","2022-10-11 15:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/131
Date: 2022-10-11 22:22:20 +0000;;;",,,,,,,,,,,
"Improve per-class reporting of JUnit tests, in .jtr file",CODETOOLS-7903324,5083821,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,cstein,jjg,jjg,2022-09-21 09:53,2022-11-08 12:04,2023-10-01 09:56,2022-11-08 12:04,jtreg7.0,,,,,,jtreg7.1,tools,,0,,,,,,,,,,,,,,,,,,,,"If I execute a TestNG test, the .jtr file contains a block of text like the following:

===============================================
java/util/stream/test/org/openjdk/tests/java/util/stream/IterateTest.java
Total tests run: 16, Passes: 16, Failures: 0, Skips: 0
===============================================

or this:

test org.openjdk.tests.java.util.stream.ConcatTest.testDoubleConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testDoubleConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testDoubleConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testDoubleConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testDoubleConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testDoubleConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testDoubleConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testDoubleConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testDoubleConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testDoubleConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testDoubleConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testDoubleConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testIntConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testIntConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testIntConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testIntConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testIntConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testIntConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testIntConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testIntConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testIntConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testIntConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testIntConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testIntConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testLongConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testLongConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testLongConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testLongConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testLongConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testLongConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testLongConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testLongConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testLongConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testLongConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testLongConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testLongConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testRefConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testRefConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testRefConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testRefConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testRefConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testRefConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testRefConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testRefConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testRefConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testRefConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testRefConcat(): success
test org.openjdk.tests.java.util.stream.ConcatTest.testRefConcat(): success

===============================================
java/util/stream/test/org/openjdk/tests/java/util/stream/ConcatTest.java
Total tests run: 48, Passes: 48, Failures: 0, Skips: 0
===============================================

It would be good for JUnit to provide an equivalent level of detail.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ymvn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-09-21 09:59;jjg;JUnitRunner does provide the final summary of numbers, similar to that for TestNG tests. For example,

[ JUnit Containers: found 3, started 3, succeeded 3, failed 0, aborted 0, skipped 0]
[ JUnit Tests: found 14, started 14, succeeded 14, failed 0, aborted 0, skipped 0]

TestNGRunner provides a `RegressionListener` to report the individual test cases as well.

If we were to use JUnit for running lots of test cases (e.g. combo test) it is not clear how much output we should generate.;;;","2022-09-21 11:41;jjg;Related:
Should we report when tests are about to begin, so that the text precedes any output from the test itself,
or when the test is complete, so we can report the status, or some combination of the two?

Is there anything a test can do to influence the amount of automatic reporting for that test?;;;","2022-10-18 11:29;jjg;The TestNG messages seem less than ideal, since they do not indicate why methods are being called multiple times.;;;","2022-10-18 11:36;alanb;I suspect that output is from a test using TestNG @Factory. With a simpler test using TestNG data providers then it prints the name of the parameters when it executes tests that use the data provider so it's a bit easier to see what is going on.;;;","2022-10-18 11:42;jjg;Thanks Alan.  I guess the bottom line that we should endeavor to make the output useful, especially in the case of test failures.;;;","2022-10-27 11:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/127
Date: 2022-09-26 10:07:18 +0000;;;",,,,,,,,,,,,,,,,,
Review and improve performance of jtreg reporting.,CODETOOLS-7903323,5083817,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-09-21 08:44,2022-09-26 17:28,2023-10-01 09:56,2022-09-26 10:10,jtreg7.0,,,,,,jtreg7.1,tools,,0,,,,,,,,,,,,,,,,,,,,"Reporting can be slow, and can be a significant overhead when running a single test or a small group of tests during test development.

At least part of the problem is that some modes end up scanning the test suite looking for tests.

We should review the existing modes and try to reduce any unnecessary overhead.

It might be worth adding a new mode that just scans the tests specified on the command line.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294403,JDK-8294142,,,CODETOOLS-7903318,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ymur:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-09-22 08:53;jjg;Looking at Tool.java:
https://github.com/openjdk/jtreg/blob/77650ff600fa3110bd596fba89ef85d07497a70d/src/share/classes/com/sun/javatest/regtest/tool/Tool.java#L1918

there are 4 report modes as follows:
1. None ... no filter required
2. EXECUTED ... uses a ParameterFilter for all the current (command-line) parameters
3. ALL_EXECUTED ... uses just a StatusFilter, so all tests, with no initial URLs
4. ALL ... all tests

The problem with 3 (ALL_EXECUTED) is that because no initial URLs are specified, it scans the test suite to find all tests, so that it can figure which ones have been executed. ""It would be nice"" if the report could somehow use a TestResultTable iterator, to just scan the known tests. It is TBD whether it would work to scan the TRT to get test results, map them to test names (URLs) and use that list as initialURLs for the scan. The problem might be efficiency when providing an enumeration (list) of all executed tests.

An alternate non-conflicting solution might be to add a new mode (or modes) that take the command-line initial files into account.;;;","2022-09-22 09:04;jjg;Also, see this code in JT Harness ReportSettings class.
https://github.com/openjdk/jtharness/blob/9149bb776f4df5435a6f97d6bbf9b30af1086d5a/src/com/sun/javatest/report/ReportSettings.java#L421

The implication is that initial files are null unless one of two specific kinds of filter is used.

    public File[] getInitialFiles() {
        // Optimization: If the filter is a ParameterFilter and
        // rejects all tests not specified in the initial URLs
        // it's enough to iterate over initial URLs only
        if (filter instanceof ParameterFilter) {
            ...
            }
            return initFiles;
        } else if (filter instanceof LastRunFilter) {
            return ((LastRunFilter) filter).getTestURLs();
        }
        return null;
    };;;","2022-09-22 09:18;jjg;It's possible we could create a custom `ParameterFilter` containing a custom InitialURLFilter

but note that it's an O(N) check to see if a URL matches an initial URL
https://github.com/openjdk/jtharness/blob/9149bb776f4df5435a6f97d6bbf9b30af1086d5a/src/com/sun/javatest/InitialUrlFilter.java#L163

   for (String urlI : initUrls) {
            if (isInitialUrlMatch(testUrl, urlI)) {
                return true;
            }
        }   // for;;;","2022-09-22 18:05;jjg;It seems too much overhead for too little gain to optimize `-report:all-executed`.

A new mode `-report:files` is added, which reports on the test files and test groups given on the command line, ignoring any filters like the status filter, keyword filter and exclude list.  This is both simple to provide and seems to provide a common-sense summary and counterpart to `-report:executed`.

;;;","2022-09-23 02:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/125
Date: 2022-09-23 01:12:03 +0000;;;",,,,,,,,,,,,,,,,,,
Fix code to compile extra property definitions,CODETOOLS-7903317,5083601,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-09-16 10:11,2022-09-21 16:34,2023-10-01 09:56,2022-09-21 16:34,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"The code to determine the class name from a Java source file is old/broken, causing an incorrect name to be inferred, further causing the extra prop definition files to be compiled on every invocation, and not just when needed.  This is unnecessary overhead when running just one or a few tests.

(Note, the compilation should use the test JDK, and occurs before agents have started, so the compilation is always done by exec-ing Java.)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ylir:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-09-16 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/122
Date: 2022-09-16 19:00:31 +0000;;;","2022-09-16 12:33;jjg;Thanks to [~djelinski] for the detective work on this one.
;;;",,,,,,,,,,,,,,,,,,,,,
Number format exception while loading the data,CODETOOLS-7903306,5083428,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P2,Fixed,shurailine,shurailine,shurailine,2022-09-14 12:45,2022-09-14 15:01,2023-10-01 09:56,2022-09-14 15:00,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,Happens because DataModifiers.toString() is saved instead of the modifiers integer value.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ykgb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@33767a5b,,,,,,,,,"2022-09-14 14:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jcov/pull/23
Date: 2022-09-14 21:20:47 +0000;;;","2022-09-14 15:00;roboduke;Changeset: 300b4db9
Author:    Alexandre Iline <shurailine@openjdk.org>
Date:      2022-09-14 21:59:34 +0000
URL:       https://git.openjdk.org/jcov/commit/300b4db96a8c5a52143238c5d9b88afb47081f4c
;;;",,,,,,,,,,,,,,,,,,,,,
Remove dead/broken code i18ncheck,CODETOOLS-7903305,5083416,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-09-14 09:30,2022-09-14 19:51,2023-10-01 09:56,2022-09-14 19:51,jtreg7.0,,,,,,jtreg7.1,tools,,0,,,,,,,,,,,,,,,,,,,,"The class com.sun.jct.utils.i18ncheck.Main is dead, and broken since the removal of the need for ant.jar.

It should be removed.

Note: the check for i18n strings is performed by a script in `test/i18n` and is not affected by this change.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ykdn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-09-14 09:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/121
Date: 2022-09-14 16:35:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Fix typo in channel name,CODETOOLS-7903297,5083166,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-09-09 11:21,2022-09-09 11:33,2023-10-01 09:56,2022-09-09 11:33,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"There's a typo in the name of the channel in the top-level README
(note ""jtrev"") 

* the internal Slack channel [#jdk-jtrev-dev][jdk-jtreg-dev]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yiu3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use `sw_vers` to get OS version on Mac,CODETOOLS-7903294,5083095,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P2,Fixed,jjg,jjg,jjg,2022-09-08 11:11,2022-09-08 12:22,2023-10-01 09:56,2022-09-08 12:22,jtreg7.0,,,,,,jtreg7.1,tools,,0,,,,,,,,,,,,,,,,,,,,"jtreg should use `sw_vers -productVersion` instead of `defaults read loginwindow SystemVersionStampAsString ` to get the official OS version.

See the comments in JDK-8293504 for the motivation.
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293504,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yieb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-09-08 11:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/114
Date: 2022-09-08 18:52:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
sync jextract for SymbolLookup.find change,CODETOOLS-7903293,5083078,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-09-08 05:40,2022-09-08 06:07,2023-10-01 09:56,2022-09-08 06:07,,,,,,,,tools,,0,panama,,,,,,,,,,,,,,,,,,,"With JDK-8293495, SymbolLookup.lookup has been renamed to SymbolLookup.find. jextract needs to be synced for this change.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,,"0|i2yiaj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-09-08 05:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/71
Date: 2022-09-08 12:46:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
jcstress: Allocation profiling is not available on older JDKs,CODETOOLS-7903292,5083069,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2022-09-08 03:13,2022-09-08 07:16,2023-10-01 09:56,2022-09-08 07:16,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903216 introduced a regression where allocation profiling was ruled to be unavailable on older JDKs.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yi8j:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2022-09-08 03:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jcstress/pull/122
Date: 2022-09-08 10:14:08 +0000;;;","2022-09-08 07:16;shade;https://github.com/openjdk/jcstress/commit/d118775943666d46ca48a50f21b4e07b9ec1f7ed;;;",,,,,,,,,,,,,,,,,,,,,
Remove dead code from TestManager,CODETOOLS-7903288,5082971,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-09-06 16:39,2022-09-06 19:23,2023-10-01 09:56,2022-09-06 19:23,jtreg7.1,,,,,,jtreg7.1,tools,,0,,,,,,,,,,,,,,,,,,,,"Now that we have removed all trace of support for files specified by the Ant task, the `ignoreEmptyFiles` argument to some TestManager methods is always false ... and so can be eliminated.

@@ -1129,11 +1125,10 @@
                 Tool.this.error(msg);
             }
         });
         testManager.addTestFiles(testFileArgs, false);
         testManager.addTestFileIds(testFileIdArgs, false);
-        testManager.addTestFiles(antFileArgs, true);  <<<<<================
         testManager.addGroups(testGroupArgs);
 
         if (testManager.isEmpty())
             throw new TestManager.NoTests();",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903287,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhmr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-09-06 17:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/112
Date: 2022-09-07 00:11:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Remove left-over obsolete support for Ant task,CODETOOLS-7903287,5082957,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-09-06 11:11,2022-09-06 16:45,2023-10-01 09:56,2022-09-06 13:05,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"CODETOOLS-7903105 removed almost all of the support for the old jtreg Ant task, but references to ""ant file args"" remain and should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903288,,,,CODETOOLS-7903105,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yhjn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-09-06 12:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/111
Date: 2022-09-06 18:57:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
jextract should infer platform specific include path for Mac OS,CODETOOLS-7903284,5082868,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-09-05 09:30,2022-09-28 03:43,2023-10-01 09:56,2022-09-06 02:57,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"jextract should infer platform specific include path for Mac OS. 

Many samples are using

 -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include 

to specify platform includes path. It'd be nice if jextract infers the above path automatically.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903310,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,,"0|i2yh03:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-09-05 09:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/69
Date: 2022-09-05 16:37:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
jextract test failures after Layout updates change,CODETOOLS-7903269,5082429,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-08-29 03:13,2022-08-29 10:33,2023-10-01 09:56,2022-08-29 10:33,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"jextract test failures after Layout updates change. Layout interfaces and isUnion/isStruct changes results in jextract test failures

Test results: passed: 49; failed: 48

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yeaj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-08-29 03:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/64
Date: 2022-08-29 10:20:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
JOL: GraphStatsWalker counts array elements incorrectly,CODETOOLS-7903262,5082231,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2022-08-24 23:59,2022-08-28 22:50,2023-10-01 09:56,2022-08-28 22:50,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"Submitted for: 
 https://github.com/openjdk/jol/pull/33#pullrequestreview-1084881034",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ydc3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ea3ea3c,,,,,,,,,"2022-08-27 11:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jol/pull/33
Date: 2022-08-25 04:32:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Fix support for JUnit tests in a system module,CODETOOLS-7903260,5082109,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-08-23 10:50,2022-08-23 18:24,2023-10-01 09:56,2022-08-23 18:24,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"It can be convenient to write TestNG/JUnit tests that can be patched into a system module. 

This does not currently work. It does not find any tests:

===============================================
a/b/c/jdk.jpackage/jdk/jpackage/internal/MyTest.java
Total tests run: 0, Passes: 0, Failures: 0, Skips: 0
===============================================



Although it does not show up in the .jtr file, if the standalone rerun command is executed, it shows the following:

JavaTest Message: JUnit Platform Failure(s): 1

java.lang.reflect.InaccessibleObjectException: Unable to make public void jdk.jpackage.internal.MyTest.test() accessible: module jdk.jpackage does not ""exports jdk.jpackage.internal"" to unnamed module @566f8caf
	at java.base/java.lang.reflect.AccessibleObject.throwInaccessibleObjectException(AccessibleObject.java:387)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:363)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:311)
	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:201)
	at java.base/java.lang.reflect.Method.setAccessible(Method.java:195)
	at org.junit.runners.model.FrameworkMethod.<init>(FrameworkMethod.java:35)
	at org.junit.runners.model.TestClass.scanAnnotatedMembers(TestClass.java:66)
	at org.junit.runners.model.TestClass.<init>(TestClass.java:57)
	at org.junit.runners.JUnit4.<init>(JUnit4.java:23)
	at org.junit.internal.builders.JUnit4Builder.runnerForClass(JUnit4Builder.java:10)
	at org.junit.vintage.engine.discovery.DefensiveAllDefaultPossibilitiesBuilder$DefensiveJUnit4Builder.runnerForClass(DefensiveAllDefaultPossibilitiesBuilder.java:129)
	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)
	at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:37)
	at org.junit.vintage.engine.discovery.DefensiveAllDefaultPossibilitiesBuilder.runnerForClass(DefensiveAllDefaultPossibilitiesBuilder.java:57)
	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)
	at org.junit.vintage.engine.discovery.ClassSelectorResolver.resolveTestClass(ClassSelectorResolver.java:66)
	at org.junit.vintage.engine.discovery.ClassSelectorResolver.resolve(ClassSelectorResolver.java:47)
	at org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolution.lambda$resolve$2(EngineDiscoveryRequestResolution.java:134)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1602)
	at java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:129)
	at java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:527)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:513)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:150)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:647)
	at org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolution.resolve(EngineDiscoveryRequestResolution.java:185)
	at org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolution.resolve(EngineDiscoveryRequestResolution.java:125)
	at org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolution.resolveCompletely(EngineDiscoveryRequestResolution.java:91)
	at org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolution.run(EngineDiscoveryRequestResolution.java:82)
	at org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolver.resolve(EngineDiscoveryRequestResolver.java:113)
	at org.junit.vintage.engine.discovery.VintageDiscoverer.discover(VintageDiscoverer.java:42)
	at org.junit.vintage.engine.VintageTestEngine.discover(VintageTestEngine.java:64)
	at org.junit.platform.launcher.core.EngineDiscoveryOrchestrator.discoverEngineRoot(EngineDiscoveryOrchestrator.java:152)
	at org.junit.platform.launcher.core.EngineDiscoveryOrchestrator.discoverSafely(EngineDiscoveryOrchestrator.java:134)
	at org.junit.platform.launcher.core.EngineDiscoveryOrchestrator.discover(EngineDiscoveryOrchestrator.java:108)
	at org.junit.platform.launcher.core.EngineDiscoveryOrchestrator.discover(EngineDiscoveryOrchestrator.java:80)
	at org.junit.platform.launcher.core.DefaultLauncher.discover(DefaultLauncher.java:110)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:126)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:85)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)

Test run finished after 15 ms
[         3 containers found      ]
[         0 containers skipped    ]
[         3 containers started    ]
[         0 containers aborted    ]
[         3 containers successful ]
[         0 containers failed     ]
[         1 tests found           ]
[         0 tests skipped         ]
[         1 tests started         ]
[         0 tests aborted         ]
[         0 tests successful      ]
[         1 tests failed          ]


java.lang.Exception: JUnit test failure
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:141)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:85)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.Exception: JUnit test failure
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: JUnit test failure",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-08-23 10:59;jjg;demo-test.zip;https://bugs.openjdk.org/secure/attachment/100521/demo-test.zip",,,,,,,,,,,,,,,,,,,,,,,"0|i2yckz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-08-23 10:56;jjg;The output from the rerun command suggests the need to export the package for the test class to the module for the driver class;;;","2022-08-23 14:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/105
Date: 2022-08-23 21:26:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,
jasm: file names without extensions causes a tool crash,CODETOOLS-7903259,5082102,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,lkuskov,lkuskov,lkuskov,2022-08-23 10:17,2023-03-17 11:13,2023-10-01 09:56,2023-03-17 11:13,asm_tools_7.0,asm_tools_8.0,,,,,asm_tools_8.0,tools,,0,,,,,,,,,,,,,,,,,,,,"$  /usr/lib/jvm/java-17-openjdk/bin/java -jar target/asmtools-8.0.b02-ea.jar  jdis target/classes/org/openjdk/asmtools/common/Tool.class  > ng
$   /usr/lib/jvm/java-17-openjdk/bin/java -jar target/asmtools-8.0.b02-ea.jar  jdis -g target/classes/org/openjdk/asmtools/common/Tool.class  > g
$ ll ng
-rw-rw-r--. 1 jvanek jvanek 6033 Aug 23 17:31 ng
$ ll g
-rw-rw-r--. 1 jvanek jvanek 16150 Aug 23 17:32 g
$   /usr/lib/jvm/java-17-openjdk/bin/java -jar target/asmtools-8.0.b02-ea.jar  jasm ng  #ok
$   /usr/lib/jvm/java-17-openjdk/bin/java -jar target/asmtools-8.0.b02-ea.jar  jasm g
jasm - ERROR: begin 0, end -1, length 1
1 error(s)
$  /usr/lib/jvm/java-17-openjdk/bin/java -jar target/asmtools-8.0.b02-ea.jar  jasm g -v
java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 1
        at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)
        at java.base/java.lang.String.substring(String.java:2707)
        at org.openjdk.asmtools.jasm.Parser.endClass(Parser.java:1977)
        at org.openjdk.asmtools.jasm.Parser.parseClass(Parser.java:1462)
        at org.openjdk.asmtools.jasm.Parser.parseFile(Parser.java:2169)
        at org.openjdk.asmtools.jasm.Main.compile(Main.java:93)
        at org.openjdk.asmtools.jasm.Main.main(Main.java:80)
        at org.openjdk.asmtools.Main.jasm(Main.java:94)
        at org.openjdk.asmtools.Main.main(Main.java:54)
jasm - ERROR: begin 0, end -1, length 1
1 error(s)

The method Parser.java::private void endClass() should be fixed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ycjf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@47358cbe,,,,,,,,,"2023-03-17 11:13;lkuskov;Junit test case: test/java/org/openjdk/asmtools/transform/case7903259Tests.java;;;",,,,,,,,,,,,,,,,,,,,,,
Fix typos and grammar issues in docs and comments,CODETOOLS-7903256,5081969,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-08-19 14:53,2022-08-19 17:45,2023-10-01 09:56,2022-08-19 17:45,jtreg7.0,,,,,,jtreg7.1,tools,,0,,,,,,,,,,,,,,,,,,,,"After I noticed a couple of of notable errors in doc comments and doc files, my IDE found a a bunch more.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ybpv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-08-19 15:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/104
Date: 2022-08-19 22:24:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Fix trailing whitespace in files,CODETOOLS-7903254,5081733,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-08-16 10:19,2022-08-16 13:43,2023-10-01 09:56,2022-08-16 13:43,jtreg7.1,,,,,,jtreg7.1,tools,,0,,,,,,,,,,,,,,,,,,,,"The following files have trailing whitespace that can/should be removed:

open/make/jtdiff.gmk
open/make/jtreg.gmk
open/make/Rules.gmk
open/test/compileArgFileTest/CompileArgFileTest.gmk
open/test/jdkModulesTest/JDKModulesTest.gmk
open/test/optionDecoder/OptionDecoderTest.gmk
open/test/empty/EmptyTest.gmk
open/test/bootclasspath/BootClassPathTest.gmk
open/test/timeoutHandler/TimeoutHandlerTimeoutTest.gmk
open/test/problemList/ProblemList.gmk
open/test/nativepath/TestNativePath.gmk
open/test/timeouts/test/Makefile
open/test/timeouts/test/jprt.config
open/test/timeouts/README
open/test/basic/Basic.gmk
open/test/interrupt/RunInterrupt.gmk
open/test/groups/GroupTest.gmk
open/test/statusFilter/StatusFilterTest.gmk
open/test/testRequiredVersion.gmk
open/test/openfiles/OpenFileTests.gmk
open/test/classDirs/ClassDirsTest.gmk
open/test/jdkVersion/JDKVersionTest.gmk
open/test/6783039/T6783039.gmk
open/test/cleanup/CleanupTest.gmk
open/test/maxOutputSize/MaxOutputSize.gmk
open/test/extra-props/valid.libs/TEST.ROOT
open/test/extra-props/bad-compile/TEST.ROOT
open/test/build-wildcards/buildWildcards.gmk
open/test/cleanupDirs/CleanupDirsTest.gmk
open/test/modules/ModulesTest.gmk
open/test/jdkOptsTest/JDKOptsTest.gmk
open/test/badgroups/BadGroups.gmk
open/test/debug/DebugTest.gmk
open/test/share/basic/TEST.ROOT
open/test/share/basic/applet/ArchiveUnsupported.html
open/test/share/basic/applet/MissApplet.html
open/test/share/basic/applet/MissReqParam.html
open/test/share/basic/applet/MissEndApplet.html
open/test/share/basic/applet/MissReqAttrib.html
open/test/share/basic/applet/BadTag.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ya9f:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-08-16 10:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/103
Date: 2022-08-16 17:29:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
sync jextract tests for sequence layout factory split,CODETOOLS-7903253,5081692,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-08-16 06:23,2022-08-16 08:31,2023-10-01 09:56,2022-08-16 08:31,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,sync jextract tests for sequence layout factory split,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292038,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ya0b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-08-16 06:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/61
Date: 2022-08-16 13:26:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
ProblemList test fails on M1 Mac,CODETOOLS-7903251,5081477,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-08-11 14:50,2022-08-12 07:36,2023-10-01 09:56,2022-08-12 07:36,jtreg7.0,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,The test in ProblemList.gmk fails on an M1 Mac.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y8oj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-08-11 18:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/102
Date: 2022-08-12 01:28:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
RerunTest fails if no display is set,CODETOOLS-7903250,5081475,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-08-11 13:46,2022-08-11 17:55,2023-10-01 09:56,2022-08-11 17:55,jtreg7.0,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,"RerunTest fails if DISPLAY is not set.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2y8o3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-08-11 13:47;jjg;Checking agentvm std/AppletTest.java
*** ../test/rerun/std/AppletTest.agentvm.out	2022-06-10 14:53:39.000000000 -0700
--- .../Work/jtreg/jtreg.dev/open/build/test/RerunTest.agentvm/out/std/AppletTest.out	2022-08-11 13:21:11.000000000 -0700
***************
*** 1,6 ****
  ### Section compile
  cd %BUILDTEST%/RerunTest.agentvm/work/scratch && \
- DISPLAY=%DISPLAY% \
  HOME=%HOME% \
  LANG=en_US.UTF-8 \
  MY_ENV_VAR=x \
--- 1,5 ----
***************
*** 31,37 ****
  
  ### Section applet
  cd %BUILDTEST%/RerunTest.agentvm/work/scratch && \
- DISPLAY=%DISPLAY% \
  HOME=%HOME% \
  LANG=en_US.UTF-8 \
  MY_ENV_VAR=x \
--- 30,35 ----
make: *** [.../Work/jtreg/jtreg.dev/open/build/test/RerunTest.agentvm.ok] Error 1
;;;","2022-08-11 13:48;jjg;Not all systems require DISPLAY to be set, but some do. Rather than exclude DISPLAY from the comparison, we could set a dummy value if it is not already set.;;;","2022-08-11 15:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/101
Date: 2022-08-11 21:43:14 +0000;;;",,,,,,,,,,,,,,,,,,,,
jasm: FieldData.ConstantValue holds undefined reference to CP while writing fields to a class  ,CODETOOLS-7903248,5081418,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,lkuskov,lkuskov,lkuskov,2022-08-10 21:22,2022-08-19 12:47,2023-10-01 09:56,2022-08-19 12:47,,,,,,,asm_tools_8.0,tools,,0,,,,,,,,,,,,,,,,,,,,"test.jasm
....
  const #15 = String      #16;            // "")]}\'\n""
  const #16 = Asciz       "")]}\'\n"";
...
 private static final Field #23:#24 = String "")]}\'\n""; // TEST:""Ljava/lang/String;""

will be written
:   0x1a 0x17 0x18 0x01 0x19 0x02 0xFF although expected 
     0x1a 0x17 0x18 0x01 0x19 0x02 0x0F",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b01,asm_tools_8.0,,,,,,,,,"0|i2y8bf:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@47358cbe,,,,,,,,,"2022-08-19 12:47;lkuskov;Commit: https://github.com/openjdk/asmtools/commit/64b6c474bd2c1faa02a0cbe43f64bfc5bf18efa9;;;",,,,,,,,,,,,,,,,,,,,,,
