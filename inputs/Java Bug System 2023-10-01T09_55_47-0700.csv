Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Sprint,Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
"Bot warns about ""No .jcheck/conf found"" when it should not",SKARA-1707,5088830,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,zsong,zsong,2022-12-02 13:45,2022-12-07 08:45,2023-10-01 09:56,2022-12-06 15:53,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"In SKARA-1393, I added some check to ensure the target branch of a pr contains valid jcheck configuration. This change went live on November 28, however, some users found that the warning of ""No .jcheck/conf found"" printed after they integrated their pr. Now, this issue only happens in GitLab. I need more investigations to confirm what causes this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zh7f:",9223372036854775807,,,,,,,,,,,,,"2022-12-05 11:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1434
Date: 2022-12-05 19:56:46 +0000;;;","2022-12-05 13:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1435
Date: 2022-12-05 21:58:43 +0000;;;","2022-12-06 15:53;roboduke;Changeset: 1d7e355c
Author:    Zhao Song <zsong@openjdk.org>
Date:      2022-12-06 23:53:18 +0000
URL:       https://git.openjdk.org/skara/commit/1d7e355c863768214389f64ecfb47193c78964ef
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Store github checks in PR unique way,SKARA-1706,5088828,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,erikj,erikj,2022-12-02 13:08,2023-02-14 09:55,2023-10-01 09:56,2023-02-14 09:55,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"Through investigating why bot restarts triggers so much work, I discovered that certain PRs will have new CheckRuns performed even though the old metadata (cache key) should still be valid. One such PR is: 

https://github.com/openjdk/amber/pull/70

This one is automatically generated by the merge bot, and there are several such PRs from equivalent branches, which means they all share the same source commit.

When the PR bot performs a CheckRun, it stores the results as a GitHub check-run. This data is stored on the commit and not on the PR. In that data is a checksum of the relevant inputs in the PR. If multiple PRs share the same source commit, then they will compete with the check-runs and store their different checksum in there. This in turn means that all, or most of those PRs will always think the check is outdated when a CheckRun is performed next. Normally, new CheckRuns are only performed when a PR has had some kind of update, but on bot restart, all open PRs will be re-evaluated.

For the immediate problem, I will see if there is some stale merge configs that can be disabled, and close out any duplicate PRs in this repo, but longer term, we may want to think about storing the check-run in a more PR specific way. Perhaps by adding the PR number to the name of the check?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zh6z:",9223372036854775807,,,,,,,,,,,,,"2023-02-09 13:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1470
Date: 2023-02-09 19:13:37 +0000;;;","2023-02-14 09:55;roboduke;Changeset: 6b2d04a8
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-02-14 17:55:31 +0000
URL:       https://git.openjdk.org/skara/commit/6b2d04a876eade36803b4a47c0b70206139f11d0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Associate GitHub user karthikpandelu with OpenJDK user kpk,SKARA-1705,5088761,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,kpk,kpk,2022-12-01 20:52,2022-12-02 05:50,2023-10-01 09:56,2022-12-02 05:50,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zgs3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add or update copyright header in some files,SKARA-1704,5088730,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2022-12-01 10:01,2022-12-14 16:49,2023-10-01 09:56,2022-12-14 16:49,,,,,,,,1.0,admin,,0,,,,,,,,,,,,,,,,,,,,,,"Currently, some files in Skara are missing copyright headers and the year of some copyright headers are incorrect.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zgl7:",9223372036854775807,,,,,,,,,,,,,"2022-12-01 15:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1431
Date: 2022-12-01 23:34:47 +0000;;;","2022-12-14 16:49;roboduke;Changeset: 1fd55208
Author:    Zhao Song <zsong@openjdk.org>
Date:      2022-12-15 00:48:44 +0000
URL:       https://git.openjdk.org/skara/commit/1fd5520828be551f18bc684d1f53fe8b1f464be8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make use of Etag optional for MailingListArchiveReaderBot,SKARA-1701,5088709,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-12-01 06:21,2022-12-05 10:51,2023-10-01 09:56,2022-12-05 10:51,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"To help investigate, and possibly solve SKARA-1644, I would like to make the use of Etag a configuration option for the MailingListArchiveReaderBot. Then we can simply turn it off and see if it helps. If we later think we can benefit from it, we can switch it on again.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1644,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zggj:",9223372036854775807,,,,,,,,,,,,,"2022-12-01 07:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1430
Date: 2022-12-01 15:15:46 +0000;;;","2022-12-05 10:51;roboduke;Changeset: 180efd2a
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-12-05 18:49:53 +0000
URL:       https://git.openjdk.org/skara/commit/180efd2ab831e06493aea03f568d99c467ede4aa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcking@openjdk.org email,SKARA-1700,5088661,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,tbell,jcking,jcking,2022-11-30 20:38,2022-12-01 08:40,2023-10-01 09:56,2022-12-01 07:53,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,"https://wiki.openjdk.org/display/SKARA#Skara-OpenJDKEmail seems to imply that an alias is supposed to be created for {username}@openjdk.org that forwards to the primary email for the SSO profile. Attempting to send an email to jcking@openjdk.org bounces, failing to be delivered. I believe I did the pre-requisite already in https://bugs.openjdk.org/browse/SKARA-1685. Not sure if that section is maybe out of date and no longer necessary, or maybe the aliases are not a thing anymore.

Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zg5v:",9223372036854775807,,,,,,,,,,,,,"2022-12-01 05:52;erikj;[~tbell] or [~iris] Could either of you check the email config?;;;","2022-12-01 07:05;tbell;Checking now...;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CommitCommentsWorkItem does excessive unnecessary work,SKARA-1699,5088639,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-11-30 16:03,2023-01-31 09:27,2023-10-01 09:56,2023-01-19 11:41,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"The CommitCommentsWorkItem gets scheduled once for each repository by PullRequestBot::getPeriodicItems. It's responsible for querying the repository for new comments on commits, and if any are found, spawn CommitCommandWorkItem for them. It's unfortunately not very straight forward to query forges for new commit comments. For GitHub we have a rather complicated GraphQL that does the trick, but for GitLab, we need to jump through some rather nasty hoops. 

The main issue is that the data we get from the ""events"" query from GitLab contains notes posted to commits, but without the commit hash. We only get the commit ""title"" to identify which commit was commented on. To solve this, we have a rather elaborate logic that first builds a complete map from title to set of hashes for every commit in the repo. This is done preemptively on a local clone of the repo. Using this map and some clever comparisons, we can figure out which commit each comment belongs to.

I don't have data on how long it takes to build this map for a big repository, like the JDK, but it's likely not trivially short. In addition to this, before using any local clone of a repository, we always run the git fsck check (see SKARA-1598), which can take around 20s for the JDK repo. For this particular work item, the local clone is only used for building this map. What's worse is that the map is built regardless of what kind of forge we are using, so even for GitHub repos, we still build the map and then throw it away, and so we also run the fsck check for no reason as well.

This problem needs to be addressed in several ways. The biggest issue is not building the map (or creating the local repo clone) unless we need it (i.e. using gitlab). But even in the gitlab case, I think we could be smarter. We could build most of the map once and then keep it around, only updating it with new commits. Only the initial build would need to use a local clone. After that we could just update from the remote. 

Ideally I would like to hide the whole concept of having to build such a map for this query behind the HostedRepository::recentCommitComments API call, so that only GitLabMergeRequest would need to know about and worry about it. That may be hard to accomplish however, as we would need a local repository at some point, and knowing where one could be created really is the responsibility of bot specific code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zg0z:",9223372036854775807,,,,,,,,,,,,,"2022-12-20 12:50;erikj;After having looked closer at this, the local repository is actually also used in the GitHub case, but just for verifying that commits belong to a certain branch in order to filter out comments on commits on other branches. Because of this we will still need to have some kind of local repository. However, we only ever read from this repository, so there is no real need to make a clone from the HostedRepositoryPool. We could just use the seed repo directly (which some other bots do, e.g. the pr branch notifier). 

I also noticed that the excludeCommitCommentsFrom filter isn't working due to a bug in the factory. It's parsed, but never set on the builder. Fixing this (and configuring it) will also help a lot in reducing load on this bot.;;;","2022-12-20 13:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1446
Date: 2022-12-20 21:14:41 +0000;;;","2023-01-19 11:41;roboduke;Changeset: c6f7ce8b
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-01-19 19:41:12 +0000
URL:       https://git.openjdk.org/skara/commit/c6f7ce8b42f7ade041014934c646c53644ab0d9f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Warning not to force push/rebase can be made clearer,SKARA-1698,5088568,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,ihse,ihse,2022-11-30 02:12,2022-12-09 14:27,2023-10-01 09:56,2022-12-09 14:27,,,,,,,,1.0,admin,,0,,,,,,,,,,,,,,,,,,,,,,"When force pushing/rebasing on an open PR, the bots will complain:
""Please do not rebase or force-push to an active PR as it invalidates existing review comments. All changes will be squashed into a single commit automatically when integrating. See OpenJDK Developers’ Guide for more information.""

This can be misunderstood. A better wording for the second sentence would be:
""Note for future reference, the bots always squash all changes into a single commit automatically as part of the integration.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zfl7:",9223372036854775807,,,,,,,,,,,,,"2022-12-09 08:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1441
Date: 2022-12-09 16:17:04 +0000;;;","2022-12-09 14:27;roboduke;Changeset: ca31af39
Author:    Zhao Song <zsong@openjdk.org>
Date:      2022-12-09 22:27:02 +0000
URL:       https://git.openjdk.org/skara/commit/ca31af3943aefe9be0202089b3df4605a0135d08
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CSRBot uses wrong fixVersion when resolving CSR issues for PR,SKARA-1696,5088518,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2022-11-29 10:08,2022-12-05 09:53,2023-10-01 09:56,2022-12-05 09:53,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"When CSRBot looks for a suitable issue in a set of Backports and main bug, it gets the fixVersion from the target branch of the PR. This is conceptually wrong, as the PR may be including a change to the fixVersion, and if that is the case, any associated bug should be resolved with fixVersion set to the value the PR changed it to.

We currently have this PR where exactly that is happening:
https://github.com/openjdk/jdk/pull/10924

The associated bugs have fixVersion correctly set to 21, as this is the initial change for bumping the JDK version from 20 to 21. This is causing CSRBot to not be able to find the linked CSR issues.

The same kind of logic is also present in PullRequestBot, and unfortunately the methods are copied. The reason for this is the lack of a common place to put application level shared logic for multiple bots. I'm going to introduce a new module with this change where such common logic can be housed, and put the updated version extraction logic there.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1547,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zfa3:",9223372036854775807,,,,,,,,,,,,,"2022-11-29 15:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1429
Date: 2022-11-29 23:49:32 +0000;;;","2022-12-05 09:53;roboduke;Changeset: e5add2dd
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-12-05 17:52:45 +0000
URL:       https://git.openjdk.org/skara/commit/e5add2ddab6488e87d54a2ea26d89ddeeacf21d3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user lukostyra,SKARA-1694,5088491,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,lkostyra,lkostyra,2022-11-29 05:18,2022-11-29 05:30,2023-10-01 09:56,2022-11-29 05:30,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zf43:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update the documentation on how to make a backport on top of the open PR,SKARA-1692,5088393,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,serb,serb,2022-11-27 21:01,2022-11-29 17:12,2023-10-01 09:56,2022-11-28 06:57,,,,,,,,,doc,,0,,,,,,,,,,,,,,,,,,,,,,"Sometimes it is necessary to backport two or more fixes that depend on each other. From the documentation, it is unclear how to do that if the /backport command is used in the commit message, so the branches for the PR are created in the openjdk-bots repo.

1. For example for the first fix the backport is requested in the commit message:
https://github.com/openjdk/jdk/commit/84e12244a4ff82b3307a5ffe6fbe9dded7b08d86 see ""/backport jdk17u-dev""
2. For the request above the next PR is created:
    https://github.com/openjdk/jdk17u-dev/pull/928
3. Now I would like to make a backport for the next fix, note that it depends on the previous: 
https://github.com/openjdk/jdk/commit/fb6c992f325981c42c7f75109a6c9db7ca8715d8
4. Is it possible to do? ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zeib:",9223372036854775807,,,,,,,,,,,,,"2022-11-27 23:05;serb;For some reason I tried to type ""/backport jdk17u-dev pr/928"" and it seems to work, it would be good to describe this format here: https://wiki.openjdk.org/display/SKARA/Commit+Commands;;;","2022-11-28 06:49;erikj;I wasn't aware that this was possible, but looking at the /backport command, it does accept a second parameter which is the name of the target branch for the PR. If the target repo is configured with ""PR branches"", then targeting a pr/X branch is how you create a dependent PR. I will add something to hint at this.;;;","2022-11-28 14:53;serb;But the branch for the PR on the github is ""pull/928"", and not a ""pr/928"". So the ""branch"" parameter is not actually a branch.;;;","2022-11-29 05:52;erikj;I don't understand what you mean. Skara creates the special branches named ""pr/X"" for each pull request X (if configured to do so for the repository). This is done specifically to make it possible to create dependent pull requests. The reason we need that is that pull requests are normally always created from someone's personal fork and not a branch in the same repository as the target of the PR. Skara handles automatically keeping a ""mirror"" of the PR source branch in the target repository. In GitHub URLs, the format to get to a pull request X from a repository is adding ""pull/X"" at the end of the URL path, but this has nothing to do with our ability to create dependent pull requests and we can't use that.;;;","2022-11-29 13:52;serb;From the user's point of view, it is unclear where and when the SKARA creates a branch named ""pr/X"".
The user only sees the pull request like this https://github.com/openjdk/jdk8u-dev/pull/194, and the next command line to ""Checkout this PR locally"" like this:
$ git fetch https://git.openjdk.org/jdk8u-dev pull/194/head:pull/194
$ git checkout pull/194

As you see non of that has something similar to ""pr/X"" branch:
 - The target branch is openjdk:master
 - The source branch is openjdk-bots:mrserb-backport-84e12244
 - The pull request is accessed via pull/XX not via pr/XX

So I am not sure that it is clear to use pr/XX based on the current documentation.;;;","2022-11-29 14:28;erikj;Added link to the dependent pull request documentation (https://wiki.openjdk.org/display/SKARA#Skara-Dependentpullrequests) to hopefully make this clearer.

The ""pull/X"" branches aren't real branches in the sense that you can't target other PRs to them. They are maintained automatically by GitHub.;;;","2022-11-29 17:12;serb;Thank you!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user stsypanov,SKARA-1689,5088069,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,stsypanov,stsypanov,2022-11-22 05:04,2022-11-22 05:08,2023-10-01 09:56,2022-11-22 05:08,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,Please associate my Github account https://github.com/stsypanov with my OpenJDK username,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcij:",9223372036854775807,,,,,,,,,,,,,"2022-11-22 05:08;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user gdams,SKARA-1688,5088053,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,gdams,gdams,2022-11-22 03:06,2022-11-22 03:58,2023-10-01 09:56,2022-11-22 03:58,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,"I am an OpenJDK Committer to the jdk-updates project: gdams (George Adams) , please add my GitHub user gdams to this account.

https://openjdk.org/census#gdams",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcez:",9223372036854775807,,,,,,,,,,,,,"2022-11-22 03:58;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Workaround bug in GitLab where merge request LIST API may serve stale data,SKARA-1687,5087993,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2022-11-21 11:49,2022-12-01 13:05,2023-10-01 09:56,2022-12-01 13:04,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"When the PR bot marks an MR as ""rfr"", this is sometimes not picked up by the MailingListBridgeBot and NotifyBot. This seems to be a GitLab/OraHub issue, where a certain query, for a certain user, sometimes gets stuck with stale data. Once stuck, it doesn't seem to ever automatically unstuck itself. The only remedy I've seen so far is touching the MR again in some way.

I have also observed that performing the same query as a different user will serve up to date data. Fetching the same MR data using a different API will also serve updated data. The original query with the original user will however keep serving the stale data even after this.

It's possible that the recent improvements to performance and query efficiency in the Skara bots, especially with GitLab, may have caused this issue to arise more often. We are likely reacting faster to new MRs and doing the initial touch ups and label adding quicker than before, possibly within the same minute. Given how GitLab refuses to provide coherent updates within the same minute already, that does seem like it's likely making things worse.

This behavior looks to be caused by https://gitlab.com/gitlab-org/gitlab/-/issues/372595, which has been fixed, but not yet deployed where we are using it. Until it is, we need to employ a workaround. The best I can come up with is to always refetch any MR that we get from the LIST API. I have verified that when getting the MR by ID, the label data is up to date. It does seem like the cache eventually expires (in <3h in my very limited experiment) so we could reasonably limit the refetching to PRs with updated_at within the last few hours.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zc1n:",9223372036854775807,,,,,,,,,,,,,"2022-11-28 13:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1427
Date: 2022-11-28 21:43:24 +0000;;;","2022-12-01 13:04;roboduke;Changeset: ba6e1ad2
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-12-01 21:04:24 +0000
URL:       https://git.openjdk.org/skara/commit/ba6e1ad2681041bcf92e34fbce1846e73f17946e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user jcking,SKARA-1685,5087843,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,jcking,jcking,2022-11-17 21:34,2022-11-18 05:49,2023-10-01 09:56,2022-11-18 05:49,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zb4b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The force push notifier needs an overhaul,SKARA-1683,5087833,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,erikj,erikj,2022-11-17 15:28,2022-11-23 14:00,2023-10-01 09:56,2022-11-23 14:00,,,,,,,,1.0,admin,,0,,,,,,,,,,,,,,,,,,,,,,"SKARA-1119 introduced the ability to warn users when force-pushing to an active PR. Some weird behavior was just observed in https://github.com/openjdk/jdk/pull/11202, where the bot complained about the force push 5 hours after it happened. The explanation for what happened is as follows:

The force push happened before the bridgekeeper welcome message, so the notifier initialized its initial state after that force push. It wasn't until another push happened that the notifier could react to a ""headChange"". It would then check if any force push has happened at all, see that it has, and post the notification.

Looking at this implementation, I'm baffled. This notification is implemented in the PullRequestBranchNotifier of all places. It really does not belong there. That notifier has a very clear and well defined scope, and notifying users is not in it. This also has the consequence of only notifying users about force push when the prbranch notifier is configured on a repo(!). To fix this properly, we need to move this functionality somewhere else. Either a separate listener, or another bot altogether. I'm not sure it should be in the notifier at all. It probably fits better in CheckWorkItem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zb23:",9223372036854775807,,,,,,,,,,,,,"2022-11-17 15:34;dholmes;I don't know any of the details here but it is presumably still a desirable feature to only warn about force-push on repos configured to issue such a warning?;;;","2022-11-17 16:17;erikj;Having a specific configuration option to enable the warning seems ok. The current implementation is basically tied to the ""dependent PR"" feature.;;;","2022-11-17 23:16;stuefe;Some context to the PR mentioned and my workflow.

I usually start PRs in Draft mode, until I am happy with how it looks, all GHAs are green, and optionally until our internal testing is green too. Only then I consider it ready for review, and I un-draft it. Depending on how complex the change is, PR can be in draft mode for hours or months.

As long as it is still in Draft mode, I don't merge but rebase. I feel that's fine since I don't inconvenience anyone - reviews have not started yet. After undrafting, I don't rebase. I think this is a valid workflow, right? Warnings are okay if we force push into a PR that is not in draft mode anymore.;;;","2022-11-18 05:50;erikj;Yes, I think your workflow is valid.;;;","2022-11-21 03:29;ihse;Rebasing a draft PR should not warn. If this is not the case, then it should be after the force push notifier is overhauled.;;;","2022-11-22 13:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1426
Date: 2022-11-22 21:57:58 +0000;;;","2022-11-23 14:00;roboduke;Changeset: d0bd0019
Author:    Zhao Song <zsong@openjdk.org>
Date:      2022-11-23 22:00:19 +0000
URL:       https://git.openjdk.org/skara/commit/d0bd0019e2c36f815952b0d80630fc53aae1d0ce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
PullRequestBot::getPeriodicItems takes too long,SKARA-1682,5087826,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-11-17 14:17,2022-11-23 11:02,2023-10-01 09:56,2022-11-23 11:02,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"Similar to the NotifyBot in SKARA-1680, the PullRequestBot is also suffering from spending a very long time in the very first round of getPeriodicItems after a bot restart. The last time we redeployed this bot, it took ~40 minutes. This was long enough to trigger several users to ask if Skara was having issues.

The cause is similar. There is an ""isReady"" call for each PR, which checks for comments. The comment checking here is even worse than for the NotifyBot because every PR is checked for comments, not just those that match the ""rfr"" or ""integrated"" labels.

My proposed solution is similar. We need to move this expensive evaluation to the relevant WorkItems where they can run concurrently instead of serially in getPeriodicItems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zb0j:",9223372036854775807,,,,,,,,,,,,,"2022-11-17 14:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1423
Date: 2022-11-17 22:57:25 +0000;;;","2022-11-23 11:02;roboduke;Changeset: 312a3122
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-11-23 19:01:16 +0000
URL:       https://git.openjdk.org/skara/commit/312a312278cb5c53ed596582ff921e54312bd6fe
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Verify my account at Skara,SKARA-1681,5087773,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,robilad,jnibedita,jnibedita,2022-11-17 00:11,2022-11-17 09:32,2023-10-01 09:56,2022-11-17 09:32,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,"I raised MR https://github.com/openjdk/jdk19u/pull/69, on this bot replied ensure you have signed the Oracle Contributor Agreement (OCA).
I am Oracle employee and also I am part of the Oracle organization on Github.
Email : jena.nibedita@oracle.com
Please verify my account at SKARA",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1668,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zaor:",9223372036854775807,,,,,,,,,,,,,"2022-11-17 09:32;robilad;Account checked and marked as verified.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NotifyBot::getPeriodicItems takes too long,SKARA-1680,5087740,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-11-16 14:21,2022-11-28 11:38,2023-10-01 09:56,2022-11-28 08:51,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"When starting up the notify bot today, the first round of getPeriodicItems was observed to make >2500 calls to github for repository branches. This call originates from NotifyBot::isOfInterest, which looks for pre-integration branches matching the PR. There is one call for every PR being considered, plus pagination. The JDK repository has so many open PRs at them moment that this call needs 8 pages. ~200 PRs x 8 pages is 1600 calls just for that repo.

This can be fixed pretty easily by just fetching branches once for each getPeriodicItems call. We may even consider doing it lazily to further reduce load when there are no open PRs in a repo. On the other hand, perhaps we shouldn't try to evaluate PRs in getPeriodicItems at all. It may look like a quick check, but fetching all PR comments for every PR, in addition to the already observed inefficiency with branches, is a lot of work. It also scales up linearly with the number of PRs returned, something that should be avoided in getPeriodicItems. It would be better to move this check to the WorkItem::run method, so that it's not holding up the serial execution in getPeriodicItems. It may still be worth fetching branches just once and supply that list to the PullRequestWorkItem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1188,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zahf:",9223372036854775807,,,,,,,,,,,,,"2022-11-17 14:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1422
Date: 2022-11-17 22:12:21 +0000;;;","2022-11-28 08:51;roboduke;Changeset: 6a9a6244
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-11-28 16:50:42 +0000
URL:       https://git.openjdk.org/skara/commit/6a9a6244cda4a0229422b10b6e152ae0703762bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make username and prefix optional config options for slack log handler,SKARA-1679,5087731,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-11-16 11:48,2022-11-16 13:15,2023-10-01 09:56,2022-11-16 13:15,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"In SKARA-1660 I added the new ""prefix"" config option for the slack log handler. This will be used instead of the username field. The problem is that neither field was made optional in the config parser, so now we have to configure both, regardless of if we want them or not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1660,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zaff:",9223372036854775807,,,,,,,,,,,,,"2022-11-16 12:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1421
Date: 2022-11-16 20:43:35 +0000;;;","2022-11-16 13:15;roboduke;Changeset: 7e0a1581
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-11-16 21:14:36 +0000
URL:       https://git.openjdk.org/skara/commit/7e0a15810a8679a4d8fe7e9f9959dfe3a7d949be
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missed calling lastBatchHandled in TestInfoBot,SKARA-1678,5087730,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-11-16 11:40,2022-11-16 13:14,2023-10-01 09:56,2022-11-16 13:14,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"After spending the extra time documenting the need for calling ""lastBatchHandled"" on the PullRequestPoller, I still managed to forget in the TestInfoBot.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1659,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zaf7:",9223372036854775807,,,,,,,,,,,,,"2022-11-16 12:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1420
Date: 2022-11-16 20:21:39 +0000;;;","2022-11-16 13:14;roboduke;Changeset: 2c880305
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-11-16 21:13:33 +0000
URL:       https://git.openjdk.org/skara/commit/2c880305d594cb71b2fbc509531fcb5e906547d8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Include lsrdata files in jdk.json file,SKARA-1677,5087639,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,ihse,naoto,naoto,2022-11-15 13:23,2022-11-21 05:55,2023-10-01 09:56,2022-11-21 05:55,,,,,,,,1.0,admin,,0,,,,,,,,,,,,,,,,,,,,,,"Files under `src/java.base/share/data/lsrdata/` should belong to `core-libs` and `i18n` groups in `jdk.json` config file so that correct PR review emails are sent. For example, the following PR has no labels.
https://github.com/openjdk/jdk/pull/10546",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z9uz:",9223372036854775807,,,,,,,,,,,,,"2022-11-21 03:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1424
Date: 2022-11-21 11:02:35 +0000;;;","2022-11-21 05:55;roboduke;Changeset: ae1363de
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-11-21 13:54:24 +0000
URL:       https://git.openjdk.org/skara/commit/ae1363de5b35363b76d46d1abe0b074a702fa923
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara bot is not closing the bug after merge request is integrated ,SKARA-1674,5087311,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,ihse,jdv,jdv,2022-11-10 09:03,2022-11-15 09:40,2023-10-01 09:56,2022-11-11 06:58,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"The JBS notifer bot sometimes gets stuck trying to assign a Backport record to the contributor of the fix. SKARA-1640 was filed to track this, but at the time, the problem was worked around, but the root cause remains.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1641,,,,,,SKARA-1641,,,,,,,,,,,SKARA-1640,SKARA-1479,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7u3:",9223372036854775807,,,,,,,,,,,,,"2022-11-10 09:08;kcr;Based on a quick check I did, I think this might have the same root cause as SKARA-1640.;;;","2022-11-11 06:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1419
Date: 2022-11-11 11:38:16 +0000;;;","2022-11-11 06:10;kcr;The proposed fix is to revert SKARA-1479. Magnus will file a redo bug to fix it without reintroducing this problem.;;;","2022-11-11 06:58;roboduke;Changeset: fbbec971
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-11-11 14:57:50 +0000
URL:       https://git.openjdk.org/skara/commit/fbbec971ef6fb878a67f8ea048f1def2f146497b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 CSR bot should be able to handle a withdrawn CSR properly,SKARA-1673,5087308,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,zsong,zsong,2022-11-10 08:44,2022-11-16 12:15,2023-10-01 09:56,2022-11-16 12:15,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"A user reported that skara bot keeps changing the description in his MR.

After investigation, we found a bug related with CSR bot.

The user linked a CSR issue with the main issue(JDK-8231610), and after that, he found CSR unneeded and withdrawn the CSR issue.

However, our logic about handling withdrawn CSR issue has some problem.

In PullRequestWorkItem#run, the bot would add updateMarker(<!-- csr: ‘update’ -->) to the PR body regardless of the state of CSR issue.  And if a PR body contains the updateMarker, it will be updated periodically until the body contains a CSR progress. However, since our CSR issue is withdrawn, the CSR label would not be added to the pr and CSR progress would not be added to the PR body. So it will be an endless loop.

In summary, the bug would happen in such a case, the user withdraw the csr issue before the csr issue bot first time run.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7tf:",9223372036854775807,,,,,,,,,,,,,"2022-11-10 11:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1418
Date: 2022-11-10 19:20:41 +0000;;;","2022-11-16 12:15;roboduke;Changeset: fc863a29
Author:    Zhao Song <zsong@openjdk.org>
Date:      2022-11-16 20:14:42 +0000
URL:       https://git.openjdk.org/skara/commit/fc863a29a7b21f04d9e133c0f7d75a47e24f2940
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make body handling consistent in all Issue implementations,SKARA-1670,5087189,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2022-11-09 09:14,2022-11-16 09:20,2023-10-01 09:56,2022-11-16 09:20,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"When fixing SKARA-1658, I found the TestIssue#body didn't mimic GitHubPullRequest#body and GitLabMergeRequest#body properly.

The body() method in TestIssue always returns the latest body from the 'remote' instead of the cache. So it behaves different from GitHubPullRequest and GitLabMergeRequest.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1658,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z72z:",9223372036854775807,,,,,,,,,,,,,"2022-11-09 11:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1417
Date: 2022-11-09 19:06:40 +0000;;;","2022-11-16 09:20;roboduke;Changeset: 371912f1
Author:    Zhao Song <zsong@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-11-16 17:19:43 +0000
URL:       https://git.openjdk.org/skara/commit/371912f135016d60b145051bb04769424431df55
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Verify my account at Skara,SKARA-1668,5086982,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,robilad,nnarayanan,nnarayanan,2022-11-08 01:07,2022-11-17 00:11,2023-10-01 09:56,2022-11-08 01:32,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,"I raised MR https://github.com/openjdk/jdk/pull/11035 on this bot replied you have signed the Oracle Contributor Agreement (OCA).
I am oracle employee and also i am part of the Oracle organization on Github.
User name: Naveenam-Oracle
Email : naveen.n.narayanan@oracle.com
Please verify my account at SKARA",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1681,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z5sz:",9223372036854775807,,,,,,,,,,,,,"2022-11-08 01:31;robilad;I've checked and marked account as verified in Skara.;;;","2022-11-08 01:32;robilad;Account marked as verified.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user haominw,SKARA-1667,5086952,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,wanghaomin,wanghaomin,2022-11-07 17:30,2022-11-08 04:51,2023-10-01 09:56,2022-11-08 04:51,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,"Please add GitHub user haominw, Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z5mb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user kumarabhi006,SKARA-1664,5086777,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,abhiscxk,abhiscxk,2022-11-03 21:37,2022-11-04 04:37,2023-10-01 09:56,2022-11-04 04:37,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,Associate the github account with openJDK username.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4jf:",9223372036854775807,,,,,,,,,,,,,"2022-11-04 04:37;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user maheshkb ,SKARA-1654,5086281,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,mbollapragad,mbollapragad,2022-10-27 21:17,2022-10-28 05:51,2023-10-01 09:56,2022-10-28 05:51,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,"I am an OpenJDK Author : mbollapragad (Maheshkumar Bollapragada) , please add my GitHub user  maheshkb  to this account.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z21v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user wkia,SKARA-1653,5086229,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,rmarchenko,rmarchenko,2022-10-27 01:07,2022-10-27 06:45,2023-10-01 09:56,2022-10-27 06:45,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,"Please, link Github user 'wkia' with openJDK Author 'rmarchenko'

https://github.com/wkia
https://openjdk.org/census#rmarchenko",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z1qb:",9223372036854775807,,,,,,,,,,,,,"2022-10-27 06:45;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user zifeihan,SKARA-1651,5086210,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,kcr,gcao,gcao,2022-10-26 18:28,2022-10-27 05:49,2023-10-01 09:56,2022-10-27 05:49,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,"Please associate my GitHub account with my OpenJDK identity.

https://github.com/zifeihan
https://openjdk.org/census#gcao",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z1m3:",9223372036854775807,,,,,,,,,,,,,"2022-10-27 05:49;kcr;Done.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user caizixian,SKARA-1649,5086150,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,zcai,zcai,2022-10-25 16:37,2022-10-25 18:42,2023-10-01 09:56,2022-10-25 18:42,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,Associate GitHub user caizixian with openjdk/jdk Author zcai.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z18r:",9223372036854775807,,,,,,,,,,,,,"2022-10-25 16:52;kcr;Done.;;;","2022-10-25 17:04;zcai;@Kevin Rushforth, thanks for setting it up.

I'm trying to add my OpenJDK email address to my GitHub account as suggested here https://wiki.openjdk.org/display/SKARA#Skara-OpenJDKEmail
However, the forwarding doesn't seem to be working. Should I wait for few more hours for the system to propagate?;;;","2022-10-25 18:42;kcr;Your openjdk.org email address is independent of Skara, so not related to this ticket. If you continue to have problems, please send an email to ops@openjdk.org;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user matias9927,SKARA-1648,5086119,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,matsaave,matsaave,2022-10-25 10:47,2022-10-25 11:14,2023-10-01 09:56,2022-10-25 11:14,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,Please add Matias Saavedra Silva's GitHub user matias9927. He is currently an Author on the OpenJDK census.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z11v:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user matneu,SKARA-1643,5085976,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,mneugschwand,mneugschwand,2022-10-21 03:43,2022-10-21 06:34,2023-10-01 09:56,2022-10-21 06:34,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z063:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RepositoryTests > testSubmodulesOnRepoWithSubmodule(VCS) fails in GitHub Actions,SKARA-1642,5085941,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,erikj,erikj,2022-10-20 13:58,2022-10-21 06:14,2023-10-01 09:56,2022-10-21 06:14,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,,,"The test in the title started failing today due to a change in behavior in Git which has been deployed on the action runners. I believe this is the underlying reason:

https://github.blog/2022-10-18-git-security-vulnerabilities-announced/#cve-2022-39253

I think we need to explicitly configure 'protocol.file.allow' in the tests that need this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yzyj:",9223372036854775807,,,,,,,,,,,,,"2022-10-20 14:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1400
Date: 2022-10-20 21:58:15 +0000;;;","2022-10-21 06:14;roboduke;Changeset: f72a03c3
Author:    Zhao Song <zsong@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-10-21 13:14:09 +0000
URL:       https://git.openjdk.org/skara/commit/f72a03c3545ecda7accca709be9f470a27c68173
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bot failed to update and resolve the JBS issue for commit integrated into jdk repo,SKARA-1640,5085765,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,dnguyen,dnguyen,2022-10-19 13:10,2022-11-10 12:31,2023-10-01 09:56,2022-10-20 10:25,,,,,,,,,bots,,0,,,,,,,,,,,,,,,,,,,,,,"My original fix (https://github.com/openjdk/jdk/pull/10735) was integrated but the JBS issue did not initially update to show that the issue was resolved.

I applied backports for the fix in 11u-cpu and 17u-cpu as well. After those were integrated, the original fix did not show these backports in the JBS page.

After some time, the JBS page updated and the bot made some comments. The changes, however, are incorrect. The backports only list the version 17 backport. The original issue's fix version is now set to 11. The correct fix version should be for 20. And, the backport for 11 is not shown.

Normal workflow:
1. openjdk/jdk push -> bot checks JDK-8295429 is open -> Issue ""resolved in 20""
2. 17 backport push -> JDK-8295429 is resolved in 20 -> creates backport and ""resolved in 17""
2. 11 backport push -> JDK-8295429 is resolved in 20 -> creates backport and ""resolved in 11""

Failed workflow:
1. openjdk/jdk push -> bot hangs?
2. 11 backport push -> JDK-8295429 is open -> ""resolved in 11""
3. 17 backport push -> JDK-8295429 is resolved in 11 -> creates backport and ""resolved in 17""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1674,JDK-8295429,SKARA-1641,JDK-8295178,,,,,,,,SKARA-1479,JDK-8293409,JDK-8290368,JDK-8295662,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yyvn:",9223372036854775807,,,,,,,,,,,,,"2022-10-20 05:52;kcr;Here are a few other bugs that weren't resolved as fixed:

JDK-8293409
JDK-8295662
JDK-8295417
JDK-8295709
JDK-8294916;;;","2022-10-20 09:57;erikj;This is an unfortunate interaction between SKARA-1479 and the pushing of the cpu commits to the mainline open repo. One of the authors of such a commit has since become an inactive user in JBS. The Skara bot sees that the owner of the new backport issue is the bot user and tries to change the assignment. JBS refuses to let you assign an inactive user. The WorkItem fails and is then retried indefinitely.

For the short term, I think the best fix here is to manually mark the offending commit (c622d56a0da5c27490bbe8ec572865b934499833) as handled. This will get the bot going again.

For the long term, maybe the fix in SKARA-1479 should just be reverted. The Backport API plugin in JBS isn't fixed yet, but once it has been we shouldn't need this workaround anymore, especially since it can cause problems like this.;;;","2022-10-20 10:25;erikj;I applied the short term fix suggested in previous comment.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user minborg,SKARA-1638,5085486,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,pminborg,pminborg,2022-10-17 23:14,2022-10-18 05:12,2023-10-01 09:56,2022-10-18 05:12,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yx5n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revert GitLab workaround when modifying labels,SKARA-1636,5085301,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-10-13 13:53,2022-10-17 13:54,2023-10-01 09:56,2022-10-17 13:54,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,,,The workaround for GitLab returning 500 when modifying labels is not longer needed (SKARA-1612).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yw0j:",9223372036854775807,,,,,,,,,,,,,"2022-10-13 13:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1398
Date: 2022-10-13 20:56:06 +0000;;;","2022-10-17 13:54;roboduke;Changeset: 1edeff52
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-10-17 20:53:16 +0000
URL:       https://git.openjdk.org/skara/commit/1edeff5248b6a1780953d8af21a604109f27fdd4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PullRequestPollerTests#queryPaddingComment fails,SKARA-1633,5085049,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-10-10 12:37,2022-10-13 07:08,2023-10-01 09:56,2022-10-13 07:08,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,,,The test PullRequestPollerTests#queryPaddingComment is failing. I seem to have messed up somewhere in SKARA-1606.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yugj:",9223372036854775807,,,,,,,,,,,,,"2022-10-11 13:07;erikj;I figured out the problem. The TestPullRequest.reviews() method was changed in SKARA-1584 and is sometimes not returning an unmodifiable copy of the reviews list. This causes the test to fail because updates to the underlying storage is affecting the snapshot.;;;","2022-10-11 13:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1394
Date: 2022-10-11 20:12:10 +0000;;;","2022-10-13 07:08;roboduke;Changeset: 016c78ff
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-10-13 14:07:11 +0000
URL:       https://git.openjdk.org/skara/commit/016c78ff64191817f57d780f5ab85240b7bd1e83
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Limit how far back maxUpdatedAt can be set in PullRequestPoller,SKARA-1629,5084945,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2022-10-07 15:41,2022-10-13 07:07,2023-10-01 09:56,2022-10-13 07:07,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"After having observed the PullRequestPoller in action for a bit, I've noticed some weird behavior. Say a very old open PR A exists, and there is a closed PR B that is newer. Then on the first round, PR A will be returned and maxUpdatedAt will be set to updatedAt of PR A. On the second round, this will cause PR B to be returned. 

While not a huge deal on its own, it can interact with other behavior to make things weird. I think a simple way to mitigate this is to limit how far back maxUpdatedAt can be set to. A conservative value would be based on the CLOSED_PR_AGE_LIMIT constant.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yttf:",9223372036854775807,,,,,,,,,,,,,"2022-10-11 14:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1395
Date: 2022-10-11 21:09:55 +0000;;;","2022-10-13 07:07;roboduke;Changeset: f38133df
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-10-13 14:06:57 +0000
URL:       https://git.openjdk.org/skara/commit/f38133dfbf725df614324486a847714e2cb56070
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restore 'createdAt' in GraphQL queries,SKARA-1628,5084943,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2022-10-07 14:59,2022-10-10 05:40,2023-10-01 09:56,2022-10-10 05:40,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,,"In SKARA-1584, I seem to have mistakenly let a search replace run haywire and broke two GraphQL queries by replacing ""createdAt"" with ""at"". This needs to be restored.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1584,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ytsz:",9223372036854775807,,,,,,,,,,,,,"2022-10-07 15:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1392
Date: 2022-10-07 22:01:33 +0000;;;","2022-10-10 05:40;roboduke;Changeset: a884dbe9
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-10-10 12:39:44 +0000
URL:       https://git.openjdk.org/skara/commit/a884dbe9bf2658f485828e7629ae70b79cd215ab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Maximum Young Gen Size is displaying the min in GC config Page,JMC-7977,5087614,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,jpbempel,jpbempel,jpbempel,2022-11-15 09:16,2022-12-05 22:06,2023-10-01 09:56,2022-11-18 00:19,,,,,,,,9.0.0,docs,,0,,,,,,,,,,,,,,,,,,,,,,"Copy paste issue for the max that retreive the min attribute instead of the max

 

!Screenshot 2022-11-15 at 18.10.39.png|width=415,height=232!

 

!Screenshot 2022-11-15 at 18.10.53.png|width=743,height=230!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-15 09:15;jpbempel;Screenshot 2022-11-15 at 18.10.39.png;https://bugs.openjdk.org/secure/attachment/101618/Screenshot+2022-11-15+at+18.10.39.png","2022-11-15 09:15;jpbempel;Screenshot 2022-11-15 at 18.10.53.png;https://bugs.openjdk.org/secure/attachment/101617/Screenshot+2022-11-15+at+18.10.53.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z9pf:",9223372036854775807,,,,,,,,,,,,,"2022-11-16 05:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/452
Date: 2022-11-16 13:27:07 +0000;;;","2022-11-18 00:19;roboduke;Changeset: 9ba238e1
Author:    Jean-Philippe Bempel <jpbempel@openjdk.org>
Date:      2022-11-18 08:17:59 +0000
URL:       https://git.openjdk.org/jmc/commit/9ba238e15cf61298a724442e3039e3f249e23798
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JfrRulesReport -format xml produce incorrect results,JMC-7952,5086498,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,vpurnam,shadowbug,shadowbug,2022-11-01 22:48,2023-02-01 03:28,2023-10-01 09:56,2023-01-26 13:08,,,,,,,,9.0.0,Mission Control Client,,0,,,,,,,,,,,,,,,,,,,,,,"While generating *JFR Rules Report* in xml produces incorrect result for _{*}Method Profiling{*}, *Allocated Classes*_ and \{_}*Threads Allocating*{_}.

For example, for Method Profiling XML shows:
-------------------------------------------------------------
The methods that used the most CPU are:
  
org.openjdk.jmc.flightrecorder.rules.jdk.latency.MethodProfilingRule$MethodPro
filingWindowResult@53fb3dab
--------------------------------------------------------------
when it should be :
org.eclipse.jetty.server.HttpOutput.acquireBuffer() (43.4 % of samples)
10/21/2022, 12:25:52.000 PM -- 12:26:22 PM
---------------------------------------------------------------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z3e3:",9223372036854775807,,,,,,,,,,,,,"2023-01-23 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/463
Date: 2023-01-23 16:55:26 +0000;;;","2023-01-26 13:08;roboduke;Changeset: b57bb6ed
Author:    vpurnam <vpurnam@VPURNAM-7420.in.oracle.com>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2023-01-26 21:06:11 +0000
URL:       https://git.openjdk.org/jmc/commit/b57bb6ed659dd5e012f48c38fb9efea1cb35e5f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Factor out commonly used test helper classes from org.openjdk.jmc.common.test into dedicated test library module,JMC-7951,5086490,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2022-11-01 14:37,2023-02-26 21:54,2023-10-01 09:56,2023-02-23 22:54,,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,,,Test helper classes from org.openjdk.jmc.common.test should be factored out to a testlibrary module to clean up project setup.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z3cb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41b535f7,,,,,,,,,"2022-11-03 15:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/451
Date: 2022-11-03 21:59:46 +0000;;;","2023-02-23 22:54;roboduke;Changeset: 456da390
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-02-24 06:51:18 +0000
URL:       https://git.openjdk.org/jmc/commit/456da3900f3fe2fc35b6f50a1bc9217dc00b4069
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
core/common.test is not running any tests,JMC-7946,5086131,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,clanger,clanger,clanger,2022-10-25 11:28,2022-12-05 22:06,2023-10-01 09:56,2022-10-26 10:42,,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,,,"After the latest refactoring, the project core/common.test is not running tests any more.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z14j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41b535f7,,,,,,,,,"2022-10-25 11:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/448
Date: 2022-10-25 18:31:11 +0000;;;","2022-10-26 10:42;roboduke;Changeset: 3d80c40c
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-10-26 17:40:31 +0000
URL:       https://git.openjdk.org/jmc/commit/3d80c40c576a398b03a34f08c352cc03ecfa959b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid throwing NoSuchFieldException in ValueReaders$ReflectiveReader,JMC-7945,5086091,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,jbachorik,jbachorik,jbachorik,2022-10-25 02:01,2022-12-05 22:06,2023-10-01 09:56,2022-10-26 10:36,,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,,,Throwing huge amounts of this exception can be rather costly.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z0vn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@250111f,,,,,,,,,"2022-10-25 02:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/447
Date: 2022-10-25 09:01:22 +0000;;;","2022-10-26 10:36;roboduke;Changeset: a4ee5584
Author:    Richard Startin <richard.startin@datadoghq.com>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2022-10-26 17:34:22 +0000
URL:       https://git.openjdk.org/jmc/commit/a4ee55842d14d04d37f7245f752c78c13eb1d60b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fixes for Graphview and Flameview projects,JMC-7941,5085949,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,clanger,clanger,clanger,2022-10-20 22:44,2022-12-05 22:05,2023-10-01 09:56,2022-10-23 06:20,,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,,,,,"Graphview has an Eclipse IDE configuration warning.

Flameview should be bumped to JDK 11 and project settings can be cleaned up.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z003:",9223372036854775807,,,,,,,,,,,,,"2022-10-20 22:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/446
Date: 2022-10-21 05:48:13 +0000;;;","2022-10-23 06:20;roboduke;Changeset: 53991b11
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-10-23 13:19:35 +0000
URL:       https://git.openjdk.org/jmc/commit/53991b1167ed02e8b8d8eea55f8037799815c373
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup of JDK dependencies in JMC tycho build,JMC-7939,5085933,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,clanger,clanger,clanger,2022-10-20 12:50,2022-12-05 22:05,2023-10-01 09:56,2022-10-20 21:31,,,,,,,,9.0.0,Mission Control Client,,0,,,,,,,,,,,,,,,,,,,,,,"Now after we have effectively switched to JDK 11 for the JMC application modules, we should clean up some build settings.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yzwr:",9223372036854775807,,JMC 9 Sprint 1,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@782c9296,,,,,,,,,"2022-10-20 13:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/444
Date: 2022-10-20 19:51:43 +0000;;;","2022-10-20 21:31;roboduke;Changeset: 0e8e2004
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-10-21 04:30:53 +0000
URL:       https://git.openjdk.org/jmc/commit/0e8e2004c2c9452a03f762796fd70dc410ed9d59
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Excessive memory allocation in CipherInputStream AEAD decryption,JDK-8298249,5088421,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,djelinski,webbuggrp,webbuggrp,2022-11-28 03:49,2023-08-30 07:28,2023-10-01 09:56,2022-12-15 00:08,11,17,19,,,,,21,security-libs,,0,amazon-interest,dcsswa,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Tested on Linux, Mac, Java 11, 17, 19

A DESCRIPTION OF THE PROBLEM :
The title pretty much sums up the issue, the runtime of GCM decryption is O(n²) with respect to the size of the input.

issue was also described https://stackoverflow.com/questions/74575538/why-is-the-runtime-complexity-of-gcm-mode-encryption-on²-in-java

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Looking at the code, it is buffering all input before it would push it out, but that should be (at worst) O(lg(n)) as the buffer doubles in size each time to copy the input bytes.



EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
That the runtime of the decrypt would be linear with respect to the size of the input, that is, doubling the size of the input should take roughly double the time to decrypt.
ACTUAL -
On my machine, this gives:

```
*** Run 3 ***
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: SunJCE  Size=1M  Encrypted=13ms  Decrypted1=91ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: SunJCE  Size=2M  Encrypted=25ms  Decrypted1=236ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: SunJCE  Size=4M  Encrypted=56ms  Decrypted1=854ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: SunJCE  Size=8M  Encrypted=104ms  Decrypted1=3552ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: SunJCE  Size=16M  Encrypted=202ms  Decrypted1=13896ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: SunJCE  Size=32M  Encrypted=394ms  Decrypted1=53576ms result1=true
```

The O(n²) runtime of the decrypt is quite clear to see!


---------- BEGIN SOURCE ----------
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.function.BiFunction;
import java.util.function.Function;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
public class AES_Test {

  public static void main(String[] args) throws Exception {
    Random r = new Random();
    byte[] key = new byte[32];
    byte[] spec = new byte[12];
    byte[] iv = new byte[16];
    r.nextBytes(key);
    r.nextBytes(spec);
    r.nextBytes(iv);

    List<BiFunction<Integer, SecretKeySpec, Cipher>> cipherCreators = List.of(
      (mode, serverKey) -> {
        GCMParameterSpec eGcmParameterSpec = new GCMParameterSpec(16 * 8, spec);
        try
        {
          Cipher eCipher = Cipher.getInstance(""AES/GCM/NoPadding"");
          eCipher.init(mode, serverKey, eGcmParameterSpec);
          return eCipher;
        } catch (Exception e) {
          throw new RuntimeException(e);
        }
      },
      (mode, serverKey) -> {
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        Cipher eCipher;
        try {
          eCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
          eCipher.init(mode, serverKey, ivSpec);
        } catch (Exception e) {
          throw new RuntimeException(e);
        }
        return eCipher;
      },
      (mode, serverKey) -> {
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        Cipher eCipher;
        try {
          eCipher = Cipher.getInstance(""AES/CTR/NoPadding"");
          eCipher.init(mode, serverKey, ivSpec);
        } catch (Exception e) {
          throw new RuntimeException(e);
        }
        return eCipher;
      },
      (mode, serverKey) -> {
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        Cipher eCipher;
        try {
          eCipher = Cipher.getInstance(""AES/CTS/NoPadding"");
          eCipher.init(mode, serverKey, ivSpec);
        } catch (Exception e) {
          throw new RuntimeException(e);
        }
        return eCipher;
      }
    );

    SecretKeySpec serverKey = new SecretKeySpec(key, ""AES"");
    GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(16 * 8, spec);

    for (int j = 0; j < 3; j++) {
      System.out.println(""*** Run "" + (j + 1) + "" ***"");
      for (BiFunction<Integer, SecretKeySpec, Cipher> cipherCreator : cipherCreators) {
        for (int i = 1; i <= 32; i *= 2) {
          byte[] randomBytes = new byte[i * 1024 * 1024];
          r.nextBytes(randomBytes);
            long start = System.currentTimeMillis();
          // Encrypt
          ByteArrayOutputStream bout = new ByteArrayOutputStream(randomBytes.length);
          {
            Cipher encryptCipher = cipherCreator.apply(Cipher.ENCRYPT_MODE, serverKey);
            ByteArrayInputStream fin = new ByteArrayInputStream(randomBytes);
            OutputStream cout = new CipherOutputStream(bout, encryptCipher);

            fin.transferTo(cout);
            cout.close();
          }
          byte[] encBytes = bout.toByteArray();
          long encrypted = System.currentTimeMillis();
          // Decrypt
          {
            InputStream fin = new ByteArrayInputStream(encBytes);
            Cipher decryptCipher = cipherCreator.apply(Cipher.DECRYPT_MODE, serverKey);
            InputStream cin = new CipherInputStream(fin, decryptCipher);
            bout = new ByteArrayOutputStream(randomBytes.length);

            cin.transferTo(bout);
          }
          long decrypted = System.currentTimeMillis();

          System.out.println(cipherCreator.apply(Cipher.ENCRYPT_MODE, serverKey).toString() + ""  Size="" + i + ""M  Encrypted="" + (encrypted - start) + ""ms  Decrypted1="" + (decrypted - encrypted) + ""ms result1="" + Arrays.equals(randomBytes, bout.toByteArray()));
        }
      }
    }
  }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
It is something specific to the JDK implementation, since Bouncycastle does not exhibit this behaviour:
```
*** Run 3 ***
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: BC  Size=1M  Encrypted=15ms  Decrypted1=16ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: BC  Size=2M  Encrypted=28ms  Decrypted1=30ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: BC  Size=4M  Encrypted=51ms  Decrypted1=59ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: BC  Size=8M  Encrypted=111ms  Decrypted1=124ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: BC  Size=16M  Encrypted=196ms  Decrypted1=222ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: BC  Size=32M  Encrypted=362ms  Decrypted1=443ms result1=true
```

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298865,,,,,,,,,"2022-12-06 23:34;sswsharm;AES_Test.java;https://bugs.openjdk.org/secure/attachment/101932/AES_Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zeoj:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,Verified,,"2022-12-06 23:42;sswsharm;Issue is reproduced.
The runtime complexity of GCM mode decryption looks to be O(n²)  with respect to the size of input.

OS: Mac OS Monterey (12.5)
JDK 11.0.17 :Fail
JDK 17.0.5: Fail
JDK 19.0.1: Fail

Output:
***Run 3***
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: SunJCE Size=1M Encrypted=15ms Decrypted1=52ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: SunJCE Size=2M Encrypted=31ms Decrypted1=166ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: SunJCE Size=4M Encrypted=59ms Decrypted1=605ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: SunJCE Size=8M Encrypted=121ms Decrypted1=2156ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: SunJCE Size=16M Encrypted=235ms Decrypted1=8453ms result1=true
Cipher.AES/GCM/NoPadding, mode: encryption, algorithm from: SunJCE Size=32M Encrypted=489ms Decrypted1=33225ms result1=true

ILW = issue in GA build, reproducible with single test , no workaround available =  MLM = P4

Moving it to dev team for further analysis;;;","2022-12-08 03:27;djelinski;Thanks for reporting!
There's a problem in the interaction between CipherInputStream and AEAD decryption.
CipherInputStream reads data from the input in 512 byte chunks, allocating a new internal array if the expected output size is too large for the existing one, see CipherInputStream.getMoreData: https://github.com/openjdk/jdk/blob/f804f2ce8ef7a859aae021b20cbdcd9e34f9fb94/src/java.base/share/classes/javax/crypto/CipherInputStream.java#L156

AEAD decryption only outputs data from doFinal(); it buffers data received in update(), increasing the expected output size. As a result, CipherInputStream allocates a new output array every time it reads a new 512 byte chunk.

When larger arrays are allocated, GC runs more frequently, which explains the observed behavior.

I'll see if we can modify the CipherInputStream to better work with AEAD ciphers.


BC returns decrypted data before verifying the AEAD tag, which is why this issue did not reproduce with BC provider. It reduces the memory pressure, but requires careful handling to make sure that no data is used before the tag is verified (i.e. CryptoInputStream.read returns -1);;;","2022-12-08 22:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11597
Date: 2022-12-08 16:33:06 +0000;;;","2022-12-15 00:08;dukebot;Changeset: b9074fa1
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-12-15 06:54:33 +0000
URL:       https://git.openjdk.org/jdk/commit/b9074fa1ed489993d60ce873fd8105a95d30782a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a regression test for JDK-8297684,JDK-8298108,5088906,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-12-05 06:12,2023-07-13 00:29,2023-10-01 09:56,2022-12-07 02:49,,,,,,,,20,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,ursqe-triaged,,,,,,,,,,,,,,"JDK-8297684 describes a problem caused by the patch of  JDK-8269039 that got fixed in JDK 19 with JDK-8280890. Since JDK-8269039 got backported to older releases a regression test illustrating the problem independent of JDK-8280890 would be good.

It illustrates that having -Djava.locale.providers=SPI with a custom CalendarDataProvider and any signed JAR in the classpath is enough to trigger the problem as described in JDK-8297684. The scope of JDK-8280890 is a lot narrower and isn't the full story.",,,,,,,,,,,JDK-8299869,JDK-8308889,JDK-8312009,JDK-8299797,JDK-8299293,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269039,JDK-8297684,JDK-8280890,,,,,,,,,JDK-8298271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zhob:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-12-05 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11515
Date: 2022-12-05 15:21:51 +0000;;;","2022-12-06 03:22;sgehwolf;On an unpatched system the test fails and produces this stacktrace, matching JDK-8297684, which was seen in the wild:

[2022-12-06T11:08:38.837533559Z] Waiting for completion for process 17343
[2022-12-06T11:08:38.837659447Z] Waiting for completion finished for process 17343
[2022-12-06T11:08:38.837832816Z] Waiting for completion for process 17343
[2022-12-06T11:08:38.837926576Z] Waiting for completion finished for process 17343
----------System.err:(92/7498)----------
 stdout: [Debug: Running test
];
 stderr: [Exception in thread ""main"" java.lang.ExceptionInInitializerError
	at java.base/sun.security.util.DisabledAlgorithmConstraints.jarConstraints(DisabledAlgorithmConstraints.java:112)
	at java.base/sun.security.pkcs.SignerInfo.<clinit>(SignerInfo.java:61)
	at java.base/sun.security.pkcs.PKCS7.parseSignedData(PKCS7.java:380)
	at java.base/sun.security.pkcs.PKCS7.parse(PKCS7.java:174)
	at java.base/sun.security.pkcs.PKCS7.parse(PKCS7.java:142)
	at java.base/sun.security.pkcs.PKCS7.<init>(PKCS7.java:124)
	at java.base/sun.security.util.SignatureFileVerifier.<init>(SignatureFileVerifier.java:118)
	at java.base/java.util.jar.JarVerifier.processEntry(JarVerifier.java:308)
	at java.base/java.util.jar.JarVerifier.update(JarVerifier.java:239)
	at java.base/java.util.jar.JarFile.initializeVerifier(JarFile.java:762)
	at java.base/java.util.jar.JarFile.getInputStream(JarFile.java:845)
	at java.base/sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.java:187)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.parse(ServiceLoader.java:1172)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.nextProviderClass(ServiceLoader.java:1213)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(ServiceLoader.java:1228)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(ServiceLoader.java:1273)
	at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1309)
	at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1393)
	at java.base/sun.util.locale.provider.SPILocaleProviderAdapter$1.run(SPILocaleProviderAdapter.java:83)
	at java.base/sun.util.locale.provider.SPILocaleProviderAdapter$1.run(SPILocaleProviderAdapter.java:76)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at java.base/sun.util.locale.provider.SPILocaleProviderAdapter.findInstalledProvider(SPILocaleProviderAdapter.java:76)
	at java.base/sun.util.locale.provider.AuxLocaleProviderAdapter.getLocaleServiceProvider(AuxLocaleProviderAdapter.java:73)
	at java.base/sun.util.locale.provider.LocaleServiceProviderPool.findProviders(LocaleServiceProviderPool.java:304)
	at java.base/sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObjectImpl(LocaleServiceProviderPool.java:274)
	at java.base/sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObject(LocaleServiceProviderPool.java:256)
	at java.base/sun.util.locale.provider.CalendarDataUtility.retrieveFirstDayOfWeek(CalendarDataUtility.java:76)
	at java.base/java.util.Calendar.setWeekCountData(Calendar.java:3397)
	at java.base/java.util.Calendar.<init>(Calendar.java:1607)
	at java.base/java.util.GregorianCalendar.<init>(GregorianCalendar.java:738)
	at java.base/java.util.Calendar$Builder.build(Calendar.java:1492)
	at java.base/sun.util.locale.provider.CalendarProviderImpl.getInstance(CalendarProviderImpl.java:87)
	at java.base/java.util.Calendar.createCalendar(Calendar.java:1692)
	at java.base/java.util.Calendar.getInstance(Calendar.java:1656)
	at TestSPISigned.doRunTest(TestSPISigned.java:110)
	at TestSPISigned.main(TestSPISigned.java:75)
Caused by: java.lang.NullPointerException: Cannot invoke ""sun.security.util.DisabledAlgorithmConstraints.permits(String, java.security.AlgorithmParameters, sun.security.util.ConstraintsParameters, boolean)"" because ""sun.security.pkcs.SignerInfo.JAR_DISABLED_CHECK"" is null
	at java.base/sun.security.pkcs.SignerInfo.verifyAlgorithms(SignerInfo.java:761)
	at java.base/sun.security.util.SignatureFileVerifier.processImpl(SignatureFileVerifier.java:324)
	at java.base/sun.security.util.SignatureFileVerifier.process(SignatureFileVerifier.java:282)
	at java.base/java.util.jar.JarVerifier.processEntry(JarVerifier.java:327)
	at java.base/java.util.jar.JarVerifier.update(JarVerifier.java:239)
	at java.base/java.util.jar.JarFile.initializeVerifier(JarFile.java:762)
	at java.base/java.util.jar.JarFile.getInputStream(JarFile.java:845)
	at java.base/sun.net.www.protocol.jar.JarURLConnection.getInputStream(JarURLConnection.java:187)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.parse(ServiceLoader.java:1172)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.nextProviderClass(ServiceLoader.java:1213)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNextService(ServiceLoader.java:1228)
	at java.base/java.util.ServiceLoader$LazyClassPathLookupIterator.hasNext(ServiceLoader.java:1273)
	at java.base/java.util.ServiceLoader$2.hasNext(ServiceLoader.java:1309)
	at java.base/java.util.ServiceLoader$3.hasNext(ServiceLoader.java:1393)
	at java.base/sun.util.locale.provider.SPILocaleProviderAdapter$1.run(SPILocaleProviderAdapter.java:83)
	at java.base/sun.util.locale.provider.SPILocaleProviderAdapter$1.run(SPILocaleProviderAdapter.java:76)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at java.base/sun.util.locale.provider.SPILocaleProviderAdapter.findInstalledProvider(SPILocaleProviderAdapter.java:76)
	at java.base/sun.util.locale.provider.AuxLocaleProviderAdapter.getLocaleServiceProvider(AuxLocaleProviderAdapter.java:73)
	at java.base/sun.util.locale.provider.LocaleServiceProviderPool.findProviders(LocaleServiceProviderPool.java:304)
	at java.base/sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObjectImpl(LocaleServiceProviderPool.java:274)
	at java.base/sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObject(LocaleServiceProviderPool.java:256)
	at java.base/sun.util.locale.provider.CalendarDataUtility.retrieveFirstDayOfWeek(CalendarDataUtility.java:76)
	at java.base/java.util.Calendar.setWeekCountData(Calendar.java:3397)
	at java.base/java.util.Calendar.<init>(Calendar.java:1607)
	at java.base/java.util.GregorianCalendar.<init>(GregorianCalendar.java:738)
	at java.base/java.util.Calendar$Builder.build(Calendar.java:1492)
	at java.base/sun.security.util.DisabledAlgorithmConstraints$DenyAfterConstraint.<init>(DisabledAlgorithmConstraints.java:716)
	at java.base/sun.security.util.DisabledAlgorithmConstraints$Constraints.<init>(DisabledAlgorithmConstraints.java:428)
	at java.base/sun.security.util.DisabledAlgorithmConstraints.<init>(DisabledAlgorithmConstraints.java:148)
	at java.base/sun.security.util.DisabledAlgorithmConstraints.<init>(DisabledAlgorithmConstraints.java:122)
	at java.base/sun.security.util.DisabledAlgorithmConstraints$JarHolder.<clinit>(DisabledAlgorithmConstraints.java:98)
	... 36 more
]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
	at TestSPISigned.main(TestSPISigned.java:103)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0]

JavaTest Message: shutting down test;;;","2022-12-07 02:49;dukebot;Changeset: 4da84116
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-12-07 10:46:53 +0000
URL:       https://git.openjdk.org/jdk/commit/4da8411674b7515310000bd8243860bc73f9a03d
;;;","2022-12-22 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/977
Date: 2022-12-22 17:03:31 +0000;;;","2022-12-22 09:28;sgehwolf;Fix Request (17u):

Please approve backporting this additional test which verifies that the issue seen in JDK-8297684 is indeed fixed. It should be fixed in 17u with the backport of JDK-8280890 which has been integrated today (Dec 23, 2022). Clean patch. Test only patch, little risk. Requesting for the follow-up, JDK-8298271, as well.;;;","2022-12-23 09:03;sgehwolf;Fix Request (11u):

Please approve backporting this additional test which verifies that the issue seen in JDK-8297684 is indeed fixed. It should be fixed in 11u with the backport of JDK-8280890 which has been integrated today (Dec 23, 2022). Clean patch. Test only patch, little risk. Requesting for the follow-up, JDK-8298271, as well.;;;","2022-12-23 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1608
Date: 2022-12-23 16:57:07 +0000;;;","2023-02-27 11:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/269
Date: 2023-02-27 19:13:58 +0000;;;","2023-03-03 06:09;sgehwolf;Fix Request (OpenJDK 8u):

Please approve backporting this additional test which verifies that the issue seen in JDK-8297684 is indeed fixed. It's fixed in 8u with the backport of JDK-8280890 which has been integrated in December 2022. The patch isn't clean as compared to the JDK 11 version as the property for extending the locale providers is different (java.ext.dirs=... over java.locale.providers=SPI) and the test libraries are not as feature rich in 8u. The patch has been reviewed by Paul Hohensee. The follow-up, JDK-8298271, isn't needed as the JDK 8u patch already uses File.pathSeparator everywhere. Little risk, as it's a test-only change.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Refine implSpec for SegmentAllocator,JDK-8298095,5088892,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,pminborg,mcimadamore,mcimadamore,2022-12-05 02:11,2023-08-21 12:40,2023-10-01 09:56,2023-08-10 00:59,21,22,,,,,,22,core-libs,,0,jdk21-fix-request,jdk21-fix-yes,noreg-doc,,,,,,,,,,,,,,,,,,,"For the implSpec tags in SegmentAllocator, besides stating ""the default implementation for this method calls this.allocate(layout)"", I'd expect some mention of use of the value argument in the default implementation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313228,,,,,,JDK-8313228,,,,,,,,,,,JDK-8295045,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zhl7:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-07-24 05:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14997
Date: 2023-07-24 12:32:59 +0000;;;","2023-08-10 00:59;dukebot;Changeset: 35b60f92
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-08-10 07:57:19 +0000
URL:       https://git.openjdk.org/jdk/commit/35b60f925a4e7e2e3f1ec7c5c1eee60206e7508a
;;;","2023-08-10 10:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/172
Date: 2023-08-10 16:54:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
improve cleanup and error handling of awt_parseColorModel in awt_parseImage.c,JDK-8298093,5088889,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-12-05 01:13,2023-04-18 00:44,2023-10-01 09:56,2022-12-15 00:13,11,17,19,20,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,The cleanup and error handling in function awt_parseColorModel in awt_parseImage.c could be improved.,,,,,,,,,,,JDK-8300443,JDK-8305473,JDK-8306233,JDK-8305698,JDK-8299431,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zhkj:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-12-05 01:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11508
Date: 2022-12-05 09:51:42 +0000;;;","2022-12-15 00:13;dukebot;Changeset: 98fa48c3
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-12-15 08:11:09 +0000
URL:       https://git.openjdk.org/jdk/commit/98fa48c330941efe6588a907b383802a11ed0e6b
;;;","2022-12-30 01:27;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well, because the issue is present there too. The patch is low risk and applies cleanly,;;;","2022-12-30 01:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1002
Date: 2022-12-30 09:22:28 +0000;;;","2023-01-16 00:08;mbaesken;jdk11 backport request
I would like to have the patch in jdk11 as well, because the issue is present there too. The patch is low risk and applies cleanly,;;;","2023-01-16 00:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1655
Date: 2023-01-16 08:06:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
XML Schema Validation reports an required attribute twice via ErrorHandler,JDK-8298087,5088823,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,joehw,webbuggrp,webbuggrp,2022-12-02 09:56,2023-07-21 07:35,2023-10-01 09:56,2023-05-01 20:13,17.0.5,19,20,,,,,21,xml,,0,dcsaw,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Java 17.0.5, Java 11.0.17

A DESCRIPTION OF THE PROBLEM :
XML Schema Validation reports an required attribute twice via `ErrorHandler`. The bug is in `com/sun/org/apache/xerces/internal/impl/xs/XMLSchemaValidator.java:3220` (Java 17.05). With prior a version the validation error is reported only once.

REGRESSION : Last worked in version 17

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
run provided source code

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
error is reported once
ACTUAL -
error is reported twice

---------- BEGIN SOURCE ----------
import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.function.Function;

import static java.util.Collections.unmodifiableList;
import static java.util.Locale.ENGLISH;
import static javax.xml.validation.SchemaFactory.newInstance;

public class Main {

    private final static String xsd = """"""
            <?xml version=""1.0"" encoding=""UTF-8"" ?>
            <schema xmlns=""http://www.w3.org/2001/XMLSchema"" targetNamespace=""https://agebhar1.github.io/schema/Example""
                    elementFormDefault=""qualified"">
                        
                <element name=""root"">
                    <complexType>
                        <sequence>
                            <element name=""a"">
                                <complexType>
                                    <simpleContent>
                                        <extension base=""string"">
                                            <attribute name=""enabled"" type=""boolean"" use=""required""/>
                                        </extension>
                                    </simpleContent>
                                </complexType>
                            </element>
                        </sequence>
                    </complexType>
                </element>
                        
            </schema>
            """""";

    private final static String xml = """"""
            <e:root xmlns:e=""https://agebhar1.github.io/schema/Example"">
                <e:a>string</e:a>
            </e:root>
            """""";

    private static final Function<String, Source> toSource = (String it) -> new StreamSource(new StringReader(it));

    public static void main(String[] args) {
        Locale.setDefault(ENGLISH);
        var ex = validateXMLWithSchema(xsd.transform(toSource), xml.transform(toSource));
        assert ex.size() == 1;
    }

    public static List<SAXParseException> validateXMLWithSchema(final Source xsd, final Source xml) {
        final List<SAXParseException> exceptions = new ArrayList<>();
        try {
            final var factory = newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            final var schema = factory.newSchema(xsd);
            final var validator = schema.newValidator();
            validator.setErrorHandler(new ErrorHandler() {
                @Override
                public void warning(final SAXParseException exception) {
                    System.err.printf(""Warning: %s%n"", exception);
                    exceptions.add(exception);
                }

                @Override
                public void error(final SAXParseException exception) {
                    System.err.printf(""Error: %s%n"", exception);
                    exceptions.add(exception);
                }

                @Override
                public void fatalError(final SAXParseException exception) {
                    System.err.printf(""Fatal: %s%n"", exception);
                    exceptions.add(exception);
                }
            });

            validator.validate(xml);

        } catch (final SAXException | IOException e) {
            System.err.printf(""Exception: %s%n"", e.getMessage());
        }
        return unmodifiableList(exceptions);
    }

}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298708,JDK-8306807,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-12-05 00:12;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/101893/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b01,17.0.5,,generic,,,,,,"0|i2zh5v:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78dd820a,,,,,,,Verified,,"2022-12-05 00:10;tongwan;The observations on Windows 10:
JDK 11: The reproducer can not run.
JDK 17.0.4.1.1: Passed.
JDK 17.0.5ea+1: Failed, error is reported twice.
JDK 19: Failed.
JDK 20ea+23: Failed.;;;","2023-04-28 10:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13722
Date: 2023-04-28 17:08:10 +0000;;;","2023-05-01 20:13;dukebot;Changeset: 2179a8f2
Author:    Joe Wang <joehw@openjdk.org>
Date:      2023-05-02 03:12:06 +0000
URL:       https://git.openjdk.org/jdk/commit/2179a8f2d622f832aa21eb7f48e8ab055bc55731
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in Method::build_profiling_method_data,JDK-8298084,5088880,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,coleenp,jcking,jcking,2022-12-04 22:41,2022-12-20 11:36,2023-10-01 09:56,2022-12-13 05:04,20,,,,,,,20,hotspot,,0,noreg-hard,oracle-triage-20,regression,,,,,,,,,,,,,,,,,,,"LSan has hinted at a memory leak in MethodData related to _extra_data_lock. It looks like MethodData::deallocate_contents is being called before ~MethodData from Method::release_C_heap_structures(), leading to the memory used by _extra_data_lock not being released.

I confirmed this by switching _extra_data_lock to be a pointer and adding a guarantee to MethodData::deallocate_contents that asserts it should be NULL. It crashes at the guarantee. I'll see if I can get the call trace.",,,,,,,,,,,JDK-8298666,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297389,JDK-8298346,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zhij:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-05 22:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11526
Date: 2022-12-06 06:13:23 +0000;;;","2022-12-05 22:26;jcking;I found it by inspecting the core dump. Method::build_profiling_method_data allocates MethodData and in some cases will immediately deallocate it if it fails an atomic swap. When doing so, it fails to release malloc-based heap memory used by MethodData. Sent https://github.com/openjdk/jdk/pull/11526.;;;","2022-12-06 07:19;thartmann;Moving to hotspot/compiler because this is a regression from JDK-8297389.

EDIT: Moving back to hotspot/runtime who are experts in this code.;;;","2022-12-06 07:20;thartmann;ILW = Memory leak, in rare cases when MethodData is allocated by multiple threads, no workaround = HLH = P2;;;","2022-12-09 08:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/13
Date: 2022-12-09 16:16:00 +0000;;;","2022-12-13 05:04;dukebot;Changeset: 04b8d0cf
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-12-13 13:02:23 +0000
URL:       https://git.openjdk.org/jdk20/commit/04b8d0cf5c964e16c583b66d9ab43a8c9a85fd72
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"The ""CheckBox/RadioButton[Enabled/Disabled].textForeground"" stoped working",JDK-8298083,5088879,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,serb,serb,serb,2022-12-04 22:40,2023-01-27 13:50,2023-10-01 09:56,2022-12-15 22:35,20,,,,,,,20,client-libs,,0,20-bp,jdk20,jdk20-fix-request,regression,regression_8075916,,,,,,,,,,,,,,,,,"For some reason the next properties stopped working in JDK 20
        UIManager.getDefaults().put(""CheckBox[Disabled].textForeground"", checkboxColor);
        UIManager.getDefaults().put(""RadioButton[Enabled].textForeground"", radioButtonColor);

Uncovered here: https://github.com/openjdk/jdk/pull/10755#issuecomment-1284626373
",,,,,,,,,,,JDK-8298428,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298149,JDK-8295006,JDK-8298153,JDK-8075916,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zhib:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,Verified,,"2022-12-06 01:23;serb;I will follow my suggestion here:
https://github.com/openjdk/jdk/pull/10755#issuecomment-1311130906
and request to revert the JDK-8075916 and used a similar approach JDK-8295006.

Two issues were filed to redo that changes:
https://bugs.openjdk.org/browse/JDK-8298149
https://bugs.openjdk.org/browse/JDK-8298153;;;","2022-12-07 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11531
Date: 2022-12-06 09:18:21 +0000;;;","2022-12-08 15:41;serb;Hmm, missed the fork of jdk20. I will work on a backport.;;;","2022-12-13 12:00;serb;Fix request (20u)

Clean backport.
This is the fix for a regression introduced jdk20
Review https://github.com/openjdk/jdk/pull/11531;;;","2022-12-13 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/17
Date: 2022-12-12 09:37:25 +0000;;;","2022-12-15 22:35;dukebot;Changeset: 03a694af
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-12-16 06:33:08 +0000
URL:       https://git.openjdk.org/jdk20/commit/03a694afda81f575f8a24e655d53b2b029e3d968
;;;","2023-01-27 13:50;prr;I see the label ""jdk20-fix-request"" but this was fixed well before RDP2, so it seems un-needed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
DiagnoseSyncOnValueBasedClasses doesn't report useful information for virtual threads,JDK-8298081,5088876,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2022-12-04 21:20,2022-12-21 17:19,2023-10-01 09:56,2022-12-15 17:09,19,20,,,,,,21,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,,The mechanism used by DiagnoseSyncOnValueBasedClasses to show where the sync occurs only reports platform/carrier thread stack details. That is no use if the code is being executed by a virtual thread. We can use the code being introduced by JDK-8292674 for JNI error/warning reporting to show the virtual thread stack instead.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292674,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,"0|i2zhhn:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-12 22:13;dholmes;Before fix the logging shows:

 [[0.173s][info][valuebasedclasses] Synchronizing on object 0x00000007ff880e68 of klass java.lang.Character
[0.173s][info][valuebasedclasses] 	at jdk.internal.vm.Continuation.run(java.base@21-internal/Continuation.java:257)
[0.173s][info][valuebasedclasses] 	at java.lang.VirtualThread.runContinuation(java.base@21-internal/VirtualThread.java:216)
[0.173s][info][valuebasedclasses] 	at java.lang.VirtualThread$$Lambda$8/0x0000000801046f70.run(java.base@21-internal/Unknown Source)
[0.173s][info][valuebasedclasses] 	at java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(java.base@21-internal/ForkJoinTask.java:1423)
[0.173s][info][valuebasedclasses] 	at java.util.concurrent.ForkJoinTask.doExec(java.base@21-internal/ForkJoinTask.java:387)
[0.173s][info][valuebasedclasses] 	at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(java.base@21-internal/ForkJoinPool.java:1312)
[0.173s][info][valuebasedclasses] 	at java.util.concurrent.ForkJoinPool.scan(java.base@21-internal/ForkJoinPool.java:1843)
[0.173s][info][valuebasedclasses] 	at java.util.concurrent.ForkJoinPool.runWorker(java.base@21-internal/ForkJoinPool.java:1808)
[0.173s][info][valuebasedclasses] 	at java.util.concurrent.ForkJoinWorkerThread.run(java.base@21-internal/ForkJoinWorkerThread.java:188)

after the fix:

[[0.177s][info][valuebasedclasses] Synchronizing on object 0x00000007ff880e68 of klass java.lang.Character
[0.177s][info][valuebasedclasses] 	at SyncOnValueBasedClassTest$VTTest.lambda$main$0(SyncOnValueBasedClassTest.java:195)
[0.177s][info][valuebasedclasses] 	- locked <0x00000007ff880e68> (a java.lang.Character)
[0.177s][info][valuebasedclasses] 	at SyncOnValueBasedClassTest$VTTest$$Lambda$1/0x0000000801000c10.run(Unknown Source)
[0.177s][info][valuebasedclasses] 	at java.lang.VirtualThread.runWith(java.base@21-internal/VirtualThread.java:335)
[0.177s][info][valuebasedclasses] 	at java.lang.VirtualThread.run(java.base@21-internal/VirtualThread.java:305)
[0.177s][info][valuebasedclasses] 	at java.lang.VirtualThread$VThreadContinuation.lambda$new$0(java.base@21-internal/VirtualThread.java:177)
[0.177s][info][valuebasedclasses] 	at java.lang.VirtualThread$VThreadContinuation$$Lambda$7/0x0000000801046d48.run(java.base@21-internal/Unknown Source)
[0.177s][info][valuebasedclasses] 	at jdk.internal.vm.Continuation.enter0(java.base@21-internal/Continuation.java:327)
[0.177s][info][valuebasedclasses] 	at jdk.internal.vm.Continuation.enter(java.base@21-internal/Continuation.java:320);;;","2022-12-12 22:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11641
Date: 2022-12-13 06:24:34 +0000;;;","2022-12-15 17:09;dukebot;Changeset: a3364612
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-12-16 01:08:30 +0000
URL:       https://git.openjdk.org/jdk/commit/a3364612f7d49f3633661b9ba4e9b721534cafad
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update problemlisted test to correct platform,JDK-8298080,5088874,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2022-12-04 20:55,2022-12-12 13:51,2023-10-01 09:56,2022-12-06 19:31,,,,,,,,20,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,"javax/swing/text/ParagraphView/6423287/bug6423287.java
fails only on macos for default L&F so no need to problemlist for other platforms.

It seems to fail on Nimbus but it's not default L&F for any platforms so it will not fail CI jobs..",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zhh7:",9223372036854775807,b27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gc/metaspace/CompressedClassSpaceSizeInJmapHeap.java causes test task timeout on macosx,JDK-8298073,5088866,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,lmesnik,lmesnik,2022-12-04 09:40,2023-02-08 08:10,2023-10-01 09:56,2022-12-09 10:44,20,,,,,,,21,hotspot,,0,atr,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,"gc/metaspace/CompressedClassSpaceSizeInJmapHeap.java is causing the test task to timeout. It usually does so after 4 hours, which is the default for mach5, but it also had 2d and 3d timeouts in some other specially run test tasks that were given longer task timeouts. This seems to happen with almost every aarch64 test run. It seems to be much less common on x64.

Please don't confuse this CR with JDK-8241293, which has the test timing out after 8 minutes, but usually the log will say PASSED.",,,,,,,,,,,JDK-8301059,JDK-8302080,JDK-8301913,JDK-8302079,JDK-8299754,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zhff:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-12-06 12:47;cjplummer;I've been able to easily reproduce this. On my local host it is quickly putting the machine in duress. It creates some very hard to kill jhsdb, java, and sudo processes, and Activity Monitor hangs. It's very hard to cleanup afterwards. I've had some success, but may have to reboot.

Note I did not wait the 2 days or more for the test to fail. I think the reason it takes so long to fail is because the runaway test is burning so many CPU cycles that the test infra can't get enough cycles to force the test to exit after what should be an 8 minute timeout. That's also why we don't have any process artifacts to look at.

I think we should problem list this test on macosx-aarch64 so it does not waste a lot of host CPU cycles.;;;","2022-12-06 13:00;cjplummer;All this test is doing is running ""jhsdb jmap --heap"" on itself. Very odd that it is having issues, but we don't see issues with other SA tests.;;;","2022-12-06 13:16;cjplummer;JDK-8241293 reported this test timeout on macosx-x64 and also problem listed it there. However, we seem to have two different types of timeouts. With one the test still passes, and completes shortly after the timeout, so it seems in these cases the issue is simply that the timeout is too short. However, JDK-8241293 also reports some task timeouts after 4 hours. That sounds more like the issue we are seeing here.;;;","2022-12-06 18:39;cjplummer;The mach5 jobs I started earlier today eventually got task timeouts after 4 hours. This is similar to what we see in some of the reported JDK-8241293  failures. I think the reason this CR was originally reported with a 2d task timeout is because it was a special test task that was given a lot more time than usual. So I think we have two issues here:

1. This CR as originally presented, which is the test task going off the deep end and eventually resulting in a test task timeout. Let's continue to have this CR cover this failure mode. I'll update the synopsis.
2. JDK-8241293 as originally reported, which has the test printing that it passed, but before it passes a timeout triggers (after 8 minutes) and the test completes shortly after that. The end result is the test failing (even though it prints out that is passed) due to the timeout. We will continue to use JDK-8241293 for this failure mode. I'll also update its synopsis.;;;","2022-12-07 00:03;jcherian;Thanks Chris, I will then relink the failure in 11 to https://bugs.openjdk.org/browse/JDK-8241293;;;","2022-12-07 13:53;cjplummer;This is very odd. Here are the processes involved, including the parent PID for each:

52208 52213  test process
52212 52208  sudo jhsdb map --heap --pid 52208
52213 52212  jhsdb map --heap --pid 52208

So we have the main test process 52208, spawning the sudo process 52212, which spawns the jhsdb process 52213, which attaches back to main test process 52208. That is all as expected. However, it seems by doing this attach the jhsdb process has become the parent of the test process, even though I'm pretty sure the actual parent process is the AgentServer process 52207. I'm not sure if this is the problem or is what normally happens when do a debugger attach to a process. In any case, this circularity makes it hard to get these processes cleaned up if one of them gets wedged.

I tried to attach with jhsdb to the 52213 jhsdb process, but it hung:

sudo  /Users/cplummer/dev/ws/jdk/build/macosx-aarch64-debug/images/jdk/bin/jhsdb clhsdb --pid 52213
Password:
Attaching to process 52213, please wait...

I did a ctrl-Z and looked at the 52213 process:

52213 53556  jhsdb jmap --heap --pid 52208
53555 23149  sudo jhsdb clhsdb --pid 52213
53556 53555  jhsdb clhsdb --pid 52213

By attempting to attach to the 52213 process, it's parent pid changed to the attaching process 53556.

My guess is the root issue here is that the test is spawning a process that attempts to attach back to the test process. I don't believe any of our other SA tests do this. They normally spawn LingeredApp and attach to it. Probably this issue can be fixed by doing the same.;;;","2022-12-07 19:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11576
Date: 2022-12-08 03:06:31 +0000;;;","2022-12-09 10:44;dukebot;Changeset: 99a6c478
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-12-09 18:42:35 +0000
URL:       https://git.openjdk.org/jdk/commit/99a6c47855ad82e81a80726cf3aa4522c547716d
;;;","2023-01-24 06:40;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
No risk, only a test change. Another issue is fixed with this, too. It will be marked as backported if I push this, too.
I had to resolve and adapt
Test passes. SAP nightly testing passed.;;;","2023-01-24 06:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1684
Date: 2023-01-24 14:39:30 +0000;;;","2023-01-25 00:29;clanger;Any reason why this is not fixed in 17u?;;;","2023-02-06 03:47;goetz;Fix request 17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change. Another issue is fixed with this, too. It will be marked as backported if I push this, too.
I had to resolve and adapt
Test passes. SAP nightly testing passes.;;;","2023-02-06 03:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1146
Date: 2023-02-06 11:46:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Persistent test failures after 8296012,JDK-8298067,5088859,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-12-04 06:47,2022-12-08 15:31,2023-10-01 09:56,2022-12-04 09:33,,,,,,,,20,tools,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,"After JDK-8296012 a langtools test consistently fails on x86 Linux. This is due to said test needing JVMTI and --enable-preview, but for both to be compatible VMContinuations needs to be manually enabled, since it is off by default on certain platforms. HotSpot otherwise rejects the JVMTI request if it detects that VMContinuations is not enabled while --enable-preview is",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux,,,,,,"0|i2zhdv:",9223372036854775807,b27,,,,,,,,,,,,"2022-12-04 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11500
Date: 2022-12-04 14:47:50 +0000;;;","2022-12-04 09:33;dukebot;Changeset: a71d91b9
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2022-12-04 17:32:20 +0000
URL:       https://git.openjdk.org/jdk/commit/a71d91b96f7936dd1b84e4c1e167e2e5fa4ad4b1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/util/concurrent/locks/Lock/OOMEInAQS.java timed out,JDK-8298066,5088858,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,vklang,dcubed,dcubed,2022-12-04 06:24,2023-08-04 12:48,2023-10-01 09:56,2023-05-24 05:43,20,21,,,,,,21,core-libs,,0,genzgc,intermittent,problemlist,tier5,tier8,zgc,,,,,,,,,,,,,,,,"The following test timed out in the JDK20 CI:

java/util/concurrent/locks/Lock/OOMEInAQS.java

Here's a snippet from the log file:

#section:main
----------messages:(8/375)----------
command: main -XX:-UseGCOverheadLimit -Xmx24M -XX:-UseTLAB OOMEInAQS
reason: User specified action: run main/othervm -XX:-UseGCOverheadLimit -Xmx24M -XX:-UseTLAB OOMEInAQS 
started: Sun Dec 04 06:28:55 UTC 2022
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Sun Dec 04 06:40:47 UTC 2022
elapsed time (seconds): 712.879
----------configuration:(0/0)----------
----------System.out:(1/27)----------
Timeout refired 480 times
----------System.err:(0/0)----------
----------rerun:(45/5406)*----------

<snip>

result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-20+27-2092\windows-x64-debug.jdk\jdk-20\fastdebug\bin\java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 712858ms).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,os_x,windows,,,,"0|i2zhdn:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,Verified,,"2023-01-04 16:54;dholmes;Seems test is only failing with ZGC.;;;","2023-01-05 13:54;dholmes;Consistent failures in our tier 8 testing with ZGC so bumping to P3. If the test memory config is not compatible with ZGC it can be added to the ZGC ProblemList.;;;","2023-01-06 03:40;alanb;I checked on a Windows Server 2019 system and it spins on allocations stalls + OOME in either the main or Thread-0. We may need help from the GC team to decide what to do with this test. Temporarily excluding it via ProblemList-zgc.txt seems right.;;;","2023-01-26 14:30;dcubed;Here's a log file snippet for the jdk-20+33-2334-tier8 sighting with ParallelGC:

java/util/concurrent/locks/Lock/OOMEInAQS.java

There are 20 sightings of this test failing in the JDK20 and JDK21 CIs. This is the FIRST
sighting in a non-ZGC config and this sighting is NOT a timeout...


#section:main
----------messages:(6/320)----------
command: main -XX:-UseGCOverheadLimit -Xmx24M -XX:-UseTLAB OOMEInAQS
reason: User specified action: run main/othervm -XX:-UseGCOverheadLimit -Xmx24M -XX:-UseTLAB OOMEInAQS 
started: Thu Jan 26 22:12:27 UTC 2023
Mode: othervm [/othervm specified]
finished: Thu Jan 26 22:12:30 UTC 2023
elapsed time (seconds): 2.98
----------configuration:(0/0)----------
----------System.out:(0/0)----------
----------System.err:(10/577)----------
java.lang.IllegalMonitorStateException
	at java.base/java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:175)
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1059)
	at java.base/java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:494)
	at OOMEInAQS.run(OOMEInAQS.java:108)

JavaTest Message: Test threw exception: java.lang.IllegalMonitorStateException
JavaTest Message: shutting down test;;;","2023-04-03 07:44;dcubed;The ProblemListing for java/util/concurrent/locks/Lock/OOMEInAQS.java
is for windows-x64:

$ grep 8298066 test/jdk/ProblemList-zgc.txt 
java/util/concurrent/locks/Lock/OOMEInAQS.java 8298066 windows-x64

Hopefully these linux-aarch64 failures will stay rare.;;;","2023-05-22 06:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14082
Date: 2023-05-22 13:12:02 +0000;;;","2023-05-24 05:43;dukebot;Changeset: 544978cb
Author:    Viktor Klang <viktor.klang@oracle.com>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2023-05-24 12:41:27 +0000
URL:       https://git.openjdk.org/jdk/commit/544978cb76d4a4f7cd3f4e5dc0dac3f6e4a52be1
;;;","2023-05-31 07:40;dcubed;The fix for this bug is integrated in jdk-21+24-2094.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Increase hs-gc-tier8 Xcomp tasks timeout ,JDK-8298062,5088850,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-12-03 20:09,2022-12-12 13:50,2023-10-01 09:56,2022-12-06 09:49,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,The Xcomp tasks require more time to complete. Need to increase task timeout.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zhbv:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/sysdict/vm/stress/btree/btree012/btree012.java failed with ""fatal error: refcount has gone to zero""",JDK-8298061,5088848,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,dcubed,dcubed,2022-12-03 13:16,2023-02-01 15:19,2023-10-01 09:56,2022-12-20 05:23,20,,,,,,,20,hotspot,,0,classloading,tier8,zgc,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

vmTestbase/nsk/sysdict/vm/stress/btree/btree012/btree012.java

Here's a snippet from the log file:

#section:main
----------messages:(6/433)----------
command: main -XX:-UseGCOverheadLimit nsk.sysdict.share.BTreeTest -jarpath btree.jar:fats.jar -stressHeap -useFatClass
reason: User specified action: run main/othervm -XX:-UseGCOverheadLimit nsk.sysdict.share.BTreeTest -jarpath btree.jar${path.separator}fats.jar -stressHeap -useFatClass 
started: Sat Dec 03 18:44:10 UTC 2022
Mode: othervm [/othervm specified]
finished: Sat Dec 03 18:46:04 UTC 2022
elapsed time (seconds): 114.341
----------configuration:(0/0)----------
----------System.out:(58/4211)----------
The level = 3 the height = 4
Stress time: 120 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 1038090240
Sleep time: 500
Iterations: 0
Number of threads: 24
Run GC thread: false
Run mem diag thread: false
Run forever: false
Starting Thread[#33,nsk.sysdict.share.SysDictTest$Worker@3d8a47aa,5,MainThreadGroup]
Starting Thread[#34,nsk.sysdict.share.SysDictTest$Worker@732f21b3,5,MainThreadGroup]
Starting Thread[#35,nsk.sysdict.share.SysDictTest$Worker@1cf78f6b,5,MainThreadGroup]
Starting Thread[#36,nsk.sysdict.share.SysDictTest$Worker@4d6ebbbf,5,MainThreadGroup]
Starting Thread[#37,nsk.sysdict.share.SysDictTest$Worker@58bf3f80,5,MainThreadGroup]
Starting Thread[#38,nsk.sysdict.share.SysDictTest$Worker@5297bf9d,5,MainThreadGroup]
Starting Thread[#39,nsk.sysdict.share.SysDictTest$Worker@72bbfe73,5,MainThreadGroup]
Starting Thread[#40,nsk.sysdict.share.SysDictTest$Worker@4a3000d8,5,MainThreadGroup]
Starting Thread[#41,nsk.sysdict.share.SysDictTest$Worker@6b527521,5,MainThreadGroup]
Starting Thread[#42,nsk.sysdict.share.SysDictTest$Worker@4564481,5,MainThreadGroup]
Starting Thread[#43,nsk.sysdict.share.SysDictTest$Worker@29b36a1e,5,MainThreadGroup]
Starting Thread[#44,nsk.sysdict.share.SysDictTest$Worker@634f8930,5,MainThreadGroup]
Starting Thread[#45,nsk.sysdict.share.SysDictTest$Worker@1b4c0305,5,MainThreadGroup]
Starting Thread[#46,nsk.sysdict.share.SysDictTest$Worker@2d882ea1,5,MainThreadGroup]
Starting Thread[#47,nsk.sysdict.share.SysDictTest$Worker@1f595294,5,MainThreadGroup]
Starting Thread[#48,nsk.sysdict.share.SysDictTest$Worker@405e46,5,MainThreadGroup]
Starting Thread[#49,nsk.sysdict.share.SysDictTest$Worker@7bef2160,5,MainThreadGroup]
Starting Thread[#50,nsk.sysdict.share.SysDictTest$Worker@177ee59a,5,MainThreadGroup]
Starting Thread[#51,nsk.sysdict.share.SysDictTest$Worker@4266c813,5,MainThreadGroup]
Starting Thread[#52,nsk.sysdict.share.SysDictTest$Worker@40d61c77,5,MainThreadGroup]
Starting Thread[#53,nsk.sysdict.share.SysDictTest$Worker@42b0d12c,5,MainThreadGroup]
Starting Thread[#54,nsk.sysdict.share.SysDictTest$Worker@2282aed5,5,MainThreadGroup]
Starting Thread[#55,nsk.sysdict.share.SysDictTest$Worker@56d0ccc6,5,MainThreadGroup]
Starting Thread[#56,nsk.sysdict.share.SysDictTest$Worker@261547cf,5,MainThreadGroup]
Symbol: 'nsk/sysdict/share/Fats000000' count 0# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/symbol.cpp:326
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94928/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/55b8cb24-0946-4324-a4e7-626cc31ebb8e/runs/77eecc65-a01f-4c02-a363-1a29410dee1a/workspace/open/src/hotspot/share/oops/symbol.cpp:326), pid=2528645, tid=2528708
#  fatal error: refcount has gone to zero
#
# JRE version: Java(TM) SE Runtime Environment (20.0+27) (fastdebug build 20-ea+27-2081)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+27-2081, mixed mode, sharing, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a01d8f]  Symbol::increment_refcount()+0xbf
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17409/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/240e632e-a9c7-490a-9b84-edfdee184013/runs/14dc4a14-b6f5-41d3-84b8-78993960f89d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_sysdict/scratch/4/core.2528645)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17409/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/240e632e-a9c7-490a-9b84-edfdee184013/runs/14dc4a14-b6f5-41d3-84b8-78993960f89d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_sysdict/scratch/4/hs_err_pid2528645.log
[82.262s][warning][os] Loading hsdis library failed
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(37/7996)*----------",,,,,,,,,,,JDK-8299152,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292286,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2zhbf:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-03 13:20;dcubed;For some reason JBS would not let me include this info in the description note.

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f10d016efe0):  JavaThread ""nsk.sysdict.share.SysDictTest$Worker@7bef2160"" [_thread_in_vm, id=2528708, stack(0x00007f112dcec000,0x00007f112dded000)]

Stack: [0x00007f112dcec000,0x00007f112dded000],  sp=0x00007f112dde9a90,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1a01d8f]  Symbol::increment_refcount()+0xbf  (symbol.cpp:326)
V  [libjvm.so+0x17a19c0]  PlaceholderTable::find_and_add(Symbol*, ClassLoaderData*, PlaceholderTable::classloadAction, Symbol*, JavaThread*)+0x100  (symbol.hpp:177)
V  [libjvm.so+0x1a25772]  SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, JavaThread*)+0x352  (systemDictionary.cpp:452)
V  [libjvm.so+0x1a2468d]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x36d  (systemDictionary.cpp:542)
V  [libjvm.so+0x1a257a0]  SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, JavaThread*)+0x380  (systemDictionary.cpp:466)
V  [libjvm.so+0xa452ac]  ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, JavaThread*)+0x20c  (classFileParser.cpp:6002)
V  [libjvm.so+0x13d9c38]  KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const&, JavaThread*)+0x1a8  (klassFactory.cpp:201)
V  [libjvm.so+0x1a23fd8]  SystemDictionary::resolve_class_from_stream(ClassFileStream*, Symbol*, Handle, ClassLoadInfo const&, JavaThread*)+0xe8  (systemDictionary.cpp:955)
V  [libjvm.so+0x11e29b8]  jvm_define_class_common(char const*, _jobject*, signed char const*, int, _jobject*, char const*, JavaThread*)+0x208  (jvm.cpp:901)
V  [libjvm.so+0x11e2d54]  JVM_DefineClassWithSource+0x94  (jvm.cpp:1065)
C  [libjava.so+0xf2a2]  Java_java_lang_ClassLoader_defineClass1+0x182  (ClassLoader.c:139)
j  java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;+0 java.base@20-ea
J 431 c2 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; java.base@20-ea (7 bytes) @ 0x00007f1345126664 [0x00007f13451240e0+0x0000000000002584]
v  ~StubRoutines::call_stub 0x00007f1344efed1a
V  [libjvm.so+0x1047350]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x500  (javaCalls.cpp:417)
V  [libjvm.so+0x1047b62]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x432  (javaCalls.cpp:331)
V  [libjvm.so+0x10481f8]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Handle, JavaThread*)+0x88  (javaCalls.cpp:200)
V  [libjvm.so+0x1a2634b]  SystemDictionary::load_instance_class_impl(Symbol*, Handle, JavaThread*)+0x14b  (systemDictionary.cpp:1377)
V  [libjvm.so+0x1a2419c]  SystemDictionary::load_instance_class(Symbol*, Handle, JavaThread*)+0x1c  (systemDictionary.cpp:1408)
V  [libjvm.so+0x1a24b62]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x842  (systemDictionary.cpp:763)
V  [libjvm.so+0x1a257a0]  SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, JavaThread*)+0x380  (systemDictionary.cpp:466)
V  [libjvm.so+0x1a2468d]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x36d  (systemDictionary.cpp:542)
V  [libjvm.so+0x1a253dc]  SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, JavaThread*)+0x1c  (systemDictionary.cpp:313)
V  [libjvm.so+0x11dd54f]  find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, JavaThread*)+0x2f  (jvm.cpp:3492)
V  [libjvm.so+0x11e25bf]  JVM_FindClassFromCaller+0x20f  (jvm.cpp:825)
C  [libjava.so+0xeeb7]  Java_java_lang_Class_forName0+0xd7  (Class.c:145)
j  java.lang.Class.forName0(Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class;+0 java.base@20-ea
J 467 c2 nsk.sysdict.share.SysDictTest$Worker.run()V (152 bytes) @ 0x00007f13450580ec [0x00007f1345057e80+0x000000000000026c]
j  nsk.share.runner.ThreadsRunner$ManagedThread.run()V+72
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x00007f1344efed1a
V  [libjvm.so+0x1047350]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x500  (javaCalls.cpp:417)
V  [libjvm.so+0x1047b62]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x432  (javaCalls.cpp:331)
V  [libjvm.so+0x1048151]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:193)
V  [libjvm.so+0x11ca50b]  thread_entry(JavaThread*, JavaThread*)+0x12b  (jvm.cpp:2876)
V  [libjvm.so+0x107cf36]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:697)
V  [libjvm.so+0x1a81610]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x17138d3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;+0 java.base@20-ea
J 431 c2 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; java.base@20-ea (7 bytes) @ 0x00007f1345126664 [0x00007f13451240e0+0x0000000000002584]
v  ~StubRoutines::call_stub 0x00007f1344efed1a
j  java.lang.Class.forName0(Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class;+0 java.base@20-ea
J 467 c2 nsk.sysdict.share.SysDictTest$Worker.run()V (152 bytes) @ 0x00007f13450580ec [0x00007f1345057e80+0x000000000000026c]
j  nsk.share.runner.ThreadsRunner$ManagedThread.run()V+72
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x00007f1344efed1a

Since this is a SystemDictionary stress test and we're crashing
during class loading, I'm starting this bug off in hotspot/runtime.
However, this test run is also using ZGC and we've been seeing
a lot of new failures with ZGC in Tier8 recently (new test configs).;;;","2022-12-06 08:50;dcubed;[~coleenp] - I found the AMD EPYC bug I mentioned in staff:

    JDK-8258825 strange crashes with applications/jcstress on AMD EPYC;;;","2022-12-06 11:08;mseledtsov;ILW = HLM = P3;;;","2022-12-16 09:53;coleenp;I was over-effective at fixing the PlaceholderEntry::_supername leak in JDK-8292286.

For handle_parallel_super_load() we take the supername out of the placeholder entry and don't increment the refcount.  The set_supername call has this:

      void               set_supername(Symbol* supername) {
        Symbol::maybe_decrement_refcount(_supername);
        _supername = supername;
        Symbol::maybe_increment_refcount(_supername);
      }

Like an assignment operator but the supername passed in may have refcount =1 coming from the table, triggering the assert when we increment it back to one.;;;","2022-12-19 07:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11726
Date: 2022-12-19 15:48:13 +0000;;;","2022-12-19 11:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/58
Date: 2022-12-19 19:01:23 +0000;;;","2022-12-19 12:12;dcubed;Here's a log file snippet from the jdk-21+3-91-tier8 sighting:

vmTestbase/nsk/sysdict/vm/stress/btree/btree012/btree012.java

#section:main
----------messages:(6/432)----------
command: main -XX:-UseGCOverheadLimit nsk.sysdict.share.BTreeTest -jarpath btree.jar:fats.jar -stressHeap -useFatClass
reason: User specified action: run main/othervm -XX:-UseGCOverheadLimit nsk.sysdict.share.BTreeTest -jarpath btree.jar${path.separator}fats.jar -stressHeap -useFatClass 
started: Sun Dec 18 16:21:35 UTC 2022
Mode: othervm [/othervm specified]
finished: Sun Dec 18 16:23:14 UTC 2022
elapsed time (seconds): 98.645
----------configuration:(0/0)----------
----------System.out:(58/4220)----------
The level = 3 the height = 4
Stress time: 120 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 1038090240
Sleep time: 500
Iterations: 0
Number of threads: 24
Run GC thread: false
Run mem diag thread: false
Run forever: false
Starting Thread[#33,nsk.sysdict.share.SysDictTest$Worker@3d8a47aa,5,MainThreadGroup]
Starting Thread[#34,nsk.sysdict.share.SysDictTest$Worker@732f21b3,5,MainThreadGroup]
Starting Thread[#35,nsk.sysdict.share.SysDictTest$Worker@1cf78f6b,5,MainThreadGroup]
Starting Thread[#36,nsk.sysdict.share.SysDictTest$Worker@4d6ebbbf,5,MainThreadGroup]
Starting Thread[#37,nsk.sysdict.share.SysDictTest$Worker@58bf3f80,5,MainThreadGroup]
Starting Thread[#38,nsk.sysdict.share.SysDictTest$Worker@5297bf9d,5,MainThreadGroup]
Starting Thread[#39,nsk.sysdict.share.SysDictTest$Worker@72bbfe73,5,MainThreadGroup]
Starting Thread[#40,nsk.sysdict.share.SysDictTest$Worker@4a3000d8,5,MainThreadGroup]
Starting Thread[#41,nsk.sysdict.share.SysDictTest$Worker@6b527521,5,MainThreadGroup]
Starting Thread[#42,nsk.sysdict.share.SysDictTest$Worker@4564481,5,MainThreadGroup]
Starting Thread[#43,nsk.sysdict.share.SysDictTest$Worker@29b36a1e,5,MainThreadGroup]
Starting Thread[#44,nsk.sysdict.share.SysDictTest$Worker@634f8930,5,MainThreadGroup]
Starting Thread[#45,nsk.sysdict.share.SysDictTest$Worker@1b4c0305,5,MainThreadGroup]
Starting Thread[#46,nsk.sysdict.share.SysDictTest$Worker@2d882ea1,5,MainThreadGroup]
Starting Thread[#47,nsk.sysdict.share.SysDictTest$Worker@1f595294,5,MainThreadGroup]
Starting Thread[#48,nsk.sysdict.share.SysDictTest$Worker@405e46,5,MainThreadGroup]
Starting Thread[#49,nsk.sysdict.share.SysDictTest$Worker@7bef2160,5,MainThreadGroup]
Starting Thread[#50,nsk.sysdict.share.SysDictTest$Worker@177ee59a,5,MainThreadGroup]
Starting Thread[#51,nsk.sysdict.share.SysDictTest$Worker@4266c813,5,MainThreadGroup]
Starting Thread[#52,nsk.sysdict.share.SysDictTest$Worker@40d61c77,5,MainThreadGroup]
Starting Thread[#53,nsk.sysdict.share.SysDictTest$Worker@42b0d12c,5,MainThreadGroup]
Starting Thread[#54,nsk.sysdict.share.SysDictTest$Worker@2282aed5,5,MainThreadGroup]
Starting Thread[#55,nsk.sysdict.share.SysDictTest$Worker@56d0ccc6,5,MainThreadGroup]
Starting Thread[#56,nsk.sysdict.share.SysDictTest$Worker@261547cf,5,MainThreadGroup]
Symbol: 'nsk/sysdict/share/Fats000001' count 0# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/symbol.cpp:326
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94934/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/61d93118-d4fc-4a9d-90b3-396c38a73574/runs/cdbb7178-a1f9-4c46-94d7-ef09a32f2cfa/workspace/open/src/hotspot/share/oops/symbol.cpp:326), pid=1049331, tid=1049377
#  fatal error: refcount has gone to zero
#
# JRE version: Java(TM) SE Runtime Environment (21.0+3) (fastdebug build 21-ea+3-LTS-91)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+3-LTS-91, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x19f496f]  Symbol::increment_refcount()+0xbf
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17520/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ff53ebf2-efc1-4bd4-9b39-778fce0699df/runs/878155be-1c50-4bac-bb64-47fa56817c01/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_sysdict/scratch/5/core.1049331)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17520/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ff53ebf2-efc1-4bd4-9b39-778fce0699df/runs/878155be-1c50-4bac-bb64-47fa56817c01/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_sysdict/scratch/5/hs_err_pid1049331.log
[68.502s][warning][os] Loading hsdis library failed
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(36/7891)*----------;;;","2022-12-19 12:12;dcubed;Here's the crashing thread's stack from the jdk-21+3-91-tier8 sighting: 

---------------  T H R E A D  ---------------

Current thread (0x00007fa3e017a410):  JavaThread ""nsk.sysdict.share.SysDictTest$Worker@4d6ebbbf"" [_thread_in_vm, id=1049377, stack(0x00007fa644128000,0x00007fa644229000)]

Stack: [0x00007fa644128000,0x00007fa644229000],  sp=0x00007fa644225be0,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x19f496f]  Symbol::increment_refcount()+0xbf  (symbol.cpp:326)
V  [libjvm.so+0x179f2f0]  PlaceholderTable::find_and_add(Symbol*, ClassLoaderData*, PlaceholderTable::classloadAction, Symbol*, JavaThread*)+0x100  (symbol.hpp:177)
V  [libjvm.so+0x1a18252]  SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, JavaThread*)+0x332  (systemDictionary.cpp:457)
V  [libjvm.so+0x1a1718d]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x36d  (systemDictionary.cpp:547)
V  [libjvm.so+0x1a18280]  SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, JavaThread*)+0x360  (systemDictionary.cpp:471)
V  [libjvm.so+0xa4a7dc]  ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, JavaThread*)+0x20c  (classFileParser.cpp:6000)
V  [libjvm.so+0x13dc4d8]  KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const&, JavaThread*)+0x1a8  (klassFactory.cpp:201)
V  [libjvm.so+0x1a16ac8]  SystemDictionary::resolve_class_from_stream(ClassFileStream*, Symbol*, Handle, ClassLoadInfo const&, JavaThread*)+0xe8  (systemDictionary.cpp:960)
V  [libjvm.so+0x11e45f8]  jvm_define_class_common(char const*, _jobject*, signed char const*, int, _jobject*, char const*, JavaThread*)+0x208  (jvm.cpp:901)
V  [libjvm.so+0x11e4994]  JVM_DefineClassWithSource+0x94  (jvm.cpp:1065)
C  [libjava.so+0xf402]  Java_java_lang_ClassLoader_defineClass1+0x182  (ClassLoader.c:139)
J 791  java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; java.base@21-ea (0 bytes) @ 0x00007fa65bf2169e [0x00007fa65bf21540+0x000000000000015e]
J 1313 c2 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@21-ea (16 bytes) @ 0x00007fa65bfd7f98 [0x00007fa65bfd7960+0x0000000000000638]
J 1188 c2 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; java.base@21-ea (7 bytes) @ 0x00007fa65bf93910 [0x00007fa65bf916e0+0x0000000000002230]
v  ~StubRoutines::call_stub 0x00007fa65b938d1a
V  [libjvm.so+0x1049400]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x500  (javaCalls.cpp:417)
V  [libjvm.so+0x1049c12]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x432  (javaCalls.cpp:331)
V  [libjvm.so+0x104a2a8]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Handle, JavaThread*)+0x88  (javaCalls.cpp:200)
V  [libjvm.so+0x1a18c4b]  SystemDictionary::load_instance_class_impl(Symbol*, Handle, JavaThread*)+0x14b  (systemDictionary.cpp:1381)
V  [libjvm.so+0x1a16c8c]  SystemDictionary::load_instance_class(Symbol*, Handle, JavaThread*)+0x1c  (systemDictionary.cpp:1412)
V  [libjvm.so+0x1a17662]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x842  (systemDictionary.cpp:768)
V  [libjvm.so+0x1a17edc]  SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, JavaThread*)+0x1c  (systemDictionary.cpp:318)
V  [libjvm.so+0x11de90f]  find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, JavaThread*)+0x2f  (jvm.cpp:3533)
V  [libjvm.so+0x11e41ff]  JVM_FindClassFromCaller+0x20f  (jvm.cpp:825)
C  [libjava.so+0xf017]  Java_java_lang_Class_forName0+0xd7  (Class.c:145)
J 698  java.lang.Class.forName0(Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class; java.base@21-ea (0 bytes) @ 0x00007fa65bf13eeb [0x00007fa65bf13dc0+0x000000000000012b]
J 1175 c2 java.lang.Class.forName(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class; java.base@21-ea (24 bytes) @ 0x00007fa65bf87744 [0x00007fa65bf87720+0x0000000000000024]
J 946 c1 nsk.sysdict.share.SysDictTest$Worker.run()V (152 bytes) @ 0x00007fa65449c49c [0x00007fa65449bb60+0x000000000000093c]
J 1002% c1 nsk.share.runner.ThreadsRunner$ManagedThread.run()V (180 bytes) @ 0x00007fa6544bdb7c [0x00007fa6544bd540+0x000000000000063c]
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@21-ea
j  java.lang.Thread.run()V+19 java.base@21-ea
v  ~StubRoutines::call_stub 0x00007fa65b938d1a
V  [libjvm.so+0x1049400]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x500  (javaCalls.cpp:417)
V  [libjvm.so+0x1049c12]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x432  (javaCalls.cpp:331)
V  [libjvm.so+0x104a201]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:193)
V  [libjvm.so+0x11cbc3b]  thread_entry(JavaThread*, JavaThread*)+0x12b  (jvm.cpp:2924)
V  [libjvm.so+0x107eaa6]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:709)
V  [libjvm.so+0x1a733d0]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1713533]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 791  java.lang.ClassLoader.defineClass1(Ljava/lang/ClassLoader;Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class; java.base@21-ea (0 bytes) @ 0x00007fa65bf21623 [0x00007fa65bf21540+0x00000000000000e3]
J 1313 c2 java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class; java.base@21-ea (16 bytes) @ 0x00007fa65bfd7f98 [0x00007fa65bfd7960+0x0000000000000638]
J 1188 c2 java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class; java.base@21-ea (7 bytes) @ 0x00007fa65bf93910 [0x00007fa65bf916e0+0x0000000000002230]
v  ~StubRoutines::call_stub 0x00007fa65b938d1a
J 698  java.lang.Class.forName0(Ljava/lang/String;ZLjava/lang/ClassLoader;Ljava/lang/Class;)Ljava/lang/Class; java.base@21-ea (0 bytes) @ 0x00007fa65bf13e70 [0x00007fa65bf13dc0+0x00000000000000b0]
J 1175 c2 java.lang.Class.forName(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class; java.base@21-ea (24 bytes) @ 0x00007fa65bf87744 [0x00007fa65bf87720+0x0000000000000024]
J 946 c1 nsk.sysdict.share.SysDictTest$Worker.run()V (152 bytes) @ 0x00007fa65449c49c [0x00007fa65449bb60+0x000000000000093c]
J 1002% c1 nsk.share.runner.ThreadsRunner$ManagedThread.run()V (180 bytes) @ 0x00007fa6544bdb7c [0x00007fa6544bd540+0x000000000000063c]
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@21-ea
j  java.lang.Thread.run()V+19 java.base@21-ea
v  ~StubRoutines::call_stub 0x00007fa65b938d1a;;;","2022-12-20 05:23;dukebot;Changeset: 03d99272
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-12-20 13:21:50 +0000
URL:       https://git.openjdk.org/jdk20/commit/03d992728e27bd3dcd00d1af8a7b7179281e626f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Linked stack watermarks don't support nesting,JDK-8298059,5088845,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,eosterlund,dcubed,dcubed,2022-12-03 09:51,2023-01-31 10:02,2023-10-01 09:56,2022-12-15 01:27,20,,,,,,,21,hotspot,,0,hgupdate-sync,problemlist,tier8,zgc,,,,,,,,,,,,,,,,,,"The following tests fail in the JDK20 CI:

vmTestbase/nsk/jdi/ExceptionRequest/addInstanceFilter/instancefilter001/TestDescription.java
vmTestbase/nsk/jdi/ExceptionRequest/addInstanceFilter/instancefilter004/TestDescription.java

Here's a snippet from the instancefilter001 log file:

#section:main
----------messages:(6/1066)----------
command: main nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001 -verbose -arch=linux-x64 -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""-XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-x64/jdk-19_linux-x64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17299/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5bdab714-fb1e-4abf-adee-73e6b99ed892/runs/54b049eb-ac3a-4a0d-b682-d731820ab9ca/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/tmp -XX:+UseZGC""
reason: User specified action: run main/othervm nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001 -verbose -arch=${os.family}-${os.simpleArch} -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""${test.vm.opts} ${test.java.opts}"" 
started: Sat Dec 03 06:23:31 UTC 2022
Mode: othervm [/othervm specified]
finished: Sat Dec 03 06:23:48 UTC 2022
elapsed time (seconds): 16.379
----------configuration:(0/0)----------
----------System.out:(161/12703)*----------
binder> VirtualMachineManager: version 20.0
binder> Finding connector: default
binder> LaunchingConnector:
binder>     name: com.sun.jdi.CommandLineLaunch
binder>     description: Launches target using Sun Java VM command line and attaches to it
binder>     transport: com.sun.tools.jdi.SunCommandLineLauncher$2@11df7b34
binder> Connector arguments:
binder>     main=nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001a \u0000-verbose\u0000 \u0000-arch=linux-x64\u0000 \u0000-waittime=5\u0000 \u0000-debugee.vmkind=java\u0000 \u0000-transport.address=dynamic\u0000 \u0000-debugee.vmkeys=""-XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-x64/jdk-19_linux-x64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17299/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5bdab714-fb1e-4abf-adee-73e6b99ed892/runs/54b049eb-ac3a-4a0d-b682-d731820ab9ca/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/tmp -XX:+UseZGC""\u0000 \u0000-pipe.port=34371\u0000
binder>     includevirtualthreads=y
binder>     quote=\u0000
binder>     home=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+27-2055/linux-x64-debug.jdk/jdk-20/fastdebug
binder>     vmexec=java
binder>     suspend=true
binder>     options=-XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-x64/jdk-19_linux-x64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17299/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5bdab714-fb1e-4abf-adee-73e6b99ed892/runs/54b049eb-ac3a-4a0d-b682-d731820ab9ca/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/tmp -XX:+UseZGC
binder> Launching debugee
binder> Waiting for VM initialized
Initial VMStartEvent received: VMStartEvent in thread main
EventHandler> Adding listener nsk.share.jdi.EventHandler$1@620b4c99
EventHandler> Adding listener nsk.share.jdi.EventHandler$2@3c30ea1d
EventHandler> Adding listener nsk.share.jdi.EventHandler$3@625d200a
EventHandler> Adding listener nsk.share.jdi.EventHandler$4@5d4cf655
EventHandler> Adding listener nsk.share.jdi.EventHandler$5@5a9ea209
EventHandler> waitForRequestedEvent: enabling remove of listener nsk.share.jdi.EventHandler$6@8543d1
EventHandler> Adding listener nsk.share.jdi.EventHandler$6@8543d1
EventHandler> waitForRequestedEvent: vm.resume called
EventHandler> Received event set with policy = SUSPEND_EVENT_THREAD
EventHandler> Event: ClassPrepareEventImpl req class prepare request  (enabled)
EventHandler> waitForRequestedEvent: Received event(ClassPrepareEvent in thread main) for request(class prepare request  (enabled))
EventHandler> Removing listener nsk.share.jdi.EventHandler$6@8543d1
debugger> Received ClassPrepareEvent for debuggee class: nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001a
binder> Breakpoint set:
	breakpoint request nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001a:75 (disabled)
EventHandler> Adding listener nsk.share.jdi.TestDebuggerType1$1@6ba6795a
debugger> TESTING BEGINS
debugger> RESUME DEBUGGEE VM
debugger> shouldRunAfterBreakpoint: entered
debugger> shouldRunAfterBreakpoint: waiting for breakpoint event during 1 sec.
debugee.stderr> **> debuggee: debuggee started!
debugee.stderr> **> debuggee: methodForCommunication();
EventHandler> Received event set with policy = SUSPEND_ALL
EventHandler> Event: BreakpointEventImpl req breakpoint request nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001a:75 (enabled)
debugger> Received communication breakpoint event.
debugger> shouldRunAfterBreakpoint: received breakpoint event.
debugger> shouldRunAfterBreakpoint: exited with true.
debugger> :::::: case: # 0
debugger> ......setting up ExceptionRequest:
debugger>        thread: instance of java.lang.Thread(name='thread1', id=291); class: class nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001aTestClass (loaded by instance of jdk.internal.loader.ClassLoaders$AppClassLoader(id=293)); property: ExceptionRequest1
debugger>       ExceptionRequest has been set up
debugger> ......setting up ExceptionRequest:
debugger>        thread: instance of java.lang.Thread(name='thread2', id=297); class: class nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001aTestClass (loaded by instance of jdk.internal.loader.ClassLoaders$AppClassLoader(id=293)); property: ExceptionRequest2
debugger>       ExceptionRequest has been set up
debugger> ......waiting for ExceptionEvent in expected thread
EventHandler> waitForRequestedEvent: enabling remove of listener nsk.share.jdi.EventHandler$6@5884b135
EventHandler> Adding listener nsk.share.jdi.EventHandler$6@5884b135
EventHandler> waitForRequestedEvent: vm.resume called
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread1
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread2
debugee.stderr> **> debuggee:  objTC[tNumber].method();  :: threadName == thread1  tNumber == 0
debugee.stderr> **> debuggee:  objTC[tNumber].method();  :: threadName == thread2  tNumber == 1
debugee.stderr> **> debuggee: instancefilter001aTestClass.method() : thread1
debugee.stderr> **> debuggee: instancefilter001aTestClass.method() : thread2
debugee.stdout> # To suppress the following error report, specify this argument
debugee.stdout> # after -XX: or in .hotspotrc:  SuppressErrorAt=/stackWatermark.cpp:254
debugee.stdout> #
debugee.stdout> # A fatal error has been detected by the Java Runtime Environment:
debugee.stdout> #
debugee.stdout> #  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S137526/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/41cd15c8-7bc9-4b55-84c5-41044574a751/runs/f2fad46b-6b5f-48a7-8b77-e63b6eb32fa8/workspace/open/src/hotspot/share/runtime/stackWatermark.cpp:254), pid=2186378, tid=2186633
debugee.stdout> #  assert(watermark == __null || _linked_watermark == __null) failed: nesting not supported
debugee.stdout> #
debugee.stdout> # JRE version: Java(TM) SE Runtime Environment (20.0+27) (fastdebug build 20-ea+27-2055)
debugee.stdout> # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+27-2055, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
debugee.stdout> # Problematic frame:
debugee.stdout> # V  [libjvm.so+0x19155e0]  StackWatermark::link_watermark(StackWatermark*)+0x40
debugee.stdout> #
debugee.stdout> # Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17299/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5bdab714-fb1e-4abf-adee-73e6b99ed892/runs/54b049eb-ac3a-4a0d-b682-d731820ab9ca/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/scratch/5/core.2186378)
debugee.stdout> #
debugee.stdout> # An error report file with more information is saved as:
debugee.stdout> # /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17299/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5bdab714-fb1e-4abf-adee-73e6b99ed892/runs/54b049eb-ac3a-4a0d-b682-d731820ab9ca/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/scratch/5/hs_err_pid2186378.log
debugee.stdout> #
debugee.stdout> # If you would like to submit a bug report, please visit:
debugee.stdout> #   https://bugreport.java.com/bugreport/crash.jsp
debugee.stdout> #
EventHandler> Received event set with policy = SUSPEND_NONE
EventHandler> Event: VMDisconnectEventImpl req null
EventHandler> receieved VMDisconnect
EventHandler> Removing listener nsk.share.jdi.EventHandler$4@5d4cf655
EventHandler> finished
# ERROR: debugger> Unexpected exception : waitForRequestedEvent: no requested events have been received.
The following stacktrace is for failure analysis.
nsk.share.TestFailure: debugger> Unexpected exception : waitForRequestedEvent: no requested events have been received.
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.TestDebuggerType1.complain(TestDebuggerType1.java:78)
	at nsk.share.jdi.TestDebuggerType1.setFailedStatus(TestDebuggerType1.java:85)
	at nsk.share.jdi.TestDebuggerType1.runThis(TestDebuggerType1.java:147)
	at nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001.run(instancefilter001.java:78)
	at nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001.main(instancefilter001.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1599)
nsk.share.Failure: waitForRequestedEvent: no requested events have been received.
	at nsk.share.jdi.EventHandler.waitForRequestedEvent(EventHandler.java:431)
	at nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001.testRun(instancefilter001.java:145)
	at nsk.share.jdi.TestDebuggerType1.runThis(TestDebuggerType1.java:119)
	at nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001.run(instancefilter001.java:78)
	at nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001.main(instancefilter001.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1599)
debugger> Forcing debuggee to exit...
# ERROR: binder> Debugee VM has not exited correctly: trying to kill it
The following stacktrace is for failure analysis.
nsk.share.TestFailure: binder> Debugee VM has not exited correctly: trying to kill it
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jpda.DebugeeProcess.complain(DebugeeProcess.java:455)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:435)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:464)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
------------ Try to print debuggee threads before killing process ------------
The following stacktrace is for failure analysis.
nsk.share.TestFailure: 
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.Debugee.printThreadsInfo(Debugee.java:629)
	at nsk.share.jdi.Debugee.killDebugee(Debugee.java:640)
	at nsk.share.jdi.LocalLaunchedDebugee.killDebugee(Binder.java:1052)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:436)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:464)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
com.sun.jdi.VMDisconnectedException: connection is closed
	at jdk.jdi/com.sun.tools.jdi.TargetVM.send(TargetVM.java:293)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.sendToTarget(VirtualMachineImpl.java:1172)
	at jdk.jdi/com.sun.tools.jdi.PacketStream.send(PacketStream.java:79)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$AllThreads.enqueueCommand(JDWP.java:319)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$AllThreads.process(JDWP.java:310)
	at jdk.jdi/com.sun.tools.jdi.VMState.allThreads(VMState.java:207)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.allThreads(VirtualMachineImpl.java:458)
	at nsk.share.jdi.Debugee.printThreadsInfo(Debugee.java:598)
	at nsk.share.jdi.Debugee.killDebugee(Debugee.java:640)
	at nsk.share.jdi.LocalLaunchedDebugee.killDebugee(Binder.java:1052)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:436)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:464)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
binder> Killing debuggee by forcing target VM to exit
binder> Ignore VMDisconnectedException while forcing debuggee VM to exit:
	com.sun.jdi.VMDisconnectedException: connection is closed
Killing debugee VM process


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: debugger> Unexpected exception : waitForRequestedEvent: no requested events have been received.
# ERROR: binder> Debugee VM has not exited correctly: trying to kill it
----------System.err:(19/1333)----------
com.sun.jdi.VMDisconnectedException: connection is closed
	at jdk.jdi/com.sun.tools.jdi.TargetVM.send(TargetVM.java:293)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.sendToTarget(VirtualMachineImpl.java:1172)
	at jdk.jdi/com.sun.tools.jdi.PacketStream.send(PacketStream.java:79)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$Exit.enqueueCommand(JDWP.java:655)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$Exit.process(JDWP.java:641)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.exit(VirtualMachineImpl.java:644)
	at nsk.share.jdi.TestDebuggerType1.runThis(TestDebuggerType1.java:150)
	at nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001.run(instancefilter001.java:78)
	at nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001.main(instancefilter001.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1599)

JavaTest Message: Test threw exception: com.sun.jdi.VMDisconnectedException: connection is closed
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: com.sun.jdi.VMDisconnectedException: connection is closed
----------rerun:(35/8632)*----------


The failure mode for instancefilter004 appears to be very similar.",,,,,,,,,,,JDK-8300394,JDK-8300270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298279,JDK-8301399,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,,"0|i2zhar:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-12-03 15:28;cjplummer;We are seeing the following assert:

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S137526/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/41cd15c8-7bc9-4b55-84c5-41044574a751/runs/f2fad46b-6b5f-48a7-8b77-e63b6eb32fa8/workspace/open/src/hotspot/share/runtime/stackWatermark.cpp:254), pid=3370025, tid=3370599
#  assert(watermark == __null || _linked_watermark == __null) failed: nesting not supported

Here's the stacktrace:

Stack: [0x00007f0e13bfb000,0x00007f0e13cfc000],  sp=0x00007f0e13cf51f0,  free space=1000k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x19155e0]  StackWatermark::link_watermark(StackWatermark*)+0x40  (stackWatermark.cpp:254)
V  [libjvm.so+0xd02640]  EscapeBarrier::deoptimize_objects(int, int)+0xc0  (escapeBarrier.cpp:80)
V  [libjvm.so+0x13911aa]  VM_GetOrSetLocal::doit_prologue()+0x1a  (jvmtiImpl.cpp:598)
V  [libjvm.so+0x1ba1c68]  VMThread::execute(VM_Operation*)+0x68  (vmThread.cpp:542)
V  [libjvm.so+0x134c848]  JvmtiEnv::GetLocalInstance(_jobject*, int, _jobject**)+0x2f8  (jvmtiEnv.cpp:2309)
V  [libjvm.so+0x12d9336]  jvmti_GetLocalInstance+0x116  (jvmtiEnter.cpp:2161)
C  [libjdwp.so+0x14c15]  eventFilterRestricted_passesFilter+0x555  (eventFilter.c:351)
C  [libjdwp.so+0x16909]  event_callback+0x149  (eventHandler.c:562)
C  [libjdwp.so+0x19b55]  cbException+0xf5  (eventHandler.c:827)
V  [libjvm.so+0x1389e68]  JvmtiExport::post_exception_throw(JavaThread*, Method*, unsigned char*, oop)+0xd58  (jvmtiExport.cpp:2043)
V  [libjvm.so+0x103345c]  InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)+0xa5c  (interpreterRuntime.cpp:557)
j  nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001aTestClass.nullMethod()V+9
j  nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001aTestClass.method()V+31
J 4334 c1 nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001a$instancefilter001aThread.run()V (113 bytes) @ 0x00007f10857c75ec [0x00007f10857c52a0+0x000000000000234c]
J 4330 c1 java.lang.Thread.run()V java.base@20-ea (19 bytes) @ 0x00007f10857c46c4 [0x00007f10857c4560+0x0000000000000164]
v  ~StubRoutines::call_stub 0x00007f108c436d1a
V  [libjvm.so+0x1046e70]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x500  (javaCalls.cpp:417)
V  [libjvm.so+0x1047682]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x432  (javaCalls.cpp:331)
V  [libjvm.so+0x1047c71]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:193)
V  [libjvm.so+0x11ca9db]  thread_entry(JavaThread*, JavaThread*)+0x12b  (jvm.cpp:2876)
V  [libjvm.so+0x107ca56]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:697)
V  [libjvm.so+0x1a81760]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x17139e3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001aTestClass.nullMethod()V+9
j  nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001aTestClass.method()V+31
J 4334 c1 nsk.jdi.ExceptionRequest.addInstanceFilter.instancefilter001a$instancefilter001aThread.run()V (113 bytes) @ 0x00007f10857c75ec [0x00007f10857c52a0+0x000000000000234c]
J 4330 c1 java.lang.Thread.run()V java.base@20-ea (19 bytes) @ 0x00007f10857c46c4 [0x00007f10857c4560+0x0000000000000164]
v  ~StubRoutines::call_stub 0x00007f108c436d1a;;;","2022-12-03 15:28;cjplummer;There are 12 tests tasks in tier8 that ran the nsk jdi tests and failed. All were run with -XX:+UseZGC (some also with -Xcomp) and all failed both of these tests. There are about 24 nsk jdi test tasks that passed. The few I checked were using -XX:+UseParallelGC. So it seems this is related to ZGC. Probably the ZGC team should have the first look at this.;;;","2022-12-03 15:33;cjplummer;The following seems like the likely culprit, given the presence of JvmtiExport::post_exception_throw in the above stack trace:

      JDK-8294924 JvmtiExport::post_exception_throw() doesn't deal well with concurrent stack processing
      changeset: be4245e814cc29701cc425d8e66854e36eb3aef0
      user: eosterlund
      date: 2022-11-30T14:15:18.000+00:00
      Reviewed-by: pchilanomate, sspitsyn, dholmes

Also for consideration since it touches ZGC:

      JDK-8296875 Generational ZGC: Refactor loom code
      changeset: be99e84c98786ff9c2c9ca1a979dc17ba810ae09
      user: eosterlund
      date: 2022-11-30T14:08:57.000+00:00
      Reviewed-by: stefank, rrich, pchilanomate;;;","2022-12-04 09:10;eosterlund;Ah, it’s nesting. I will have a look tomorrow.;;;","2022-12-06 01:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11530
Date: 2022-12-06 09:08:10 +0000;;;","2022-12-06 10:25;mwthomps;ILW=MMH=P3;;;","2022-12-15 01:27;dukebot;Changeset: b17c5242
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2022-12-15 09:26:13 +0000
URL:       https://git.openjdk.org/jdk/commit/b17c52422c91ad1e7ff35844676f6269a1b87f79
;;;","2022-12-15 01:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/38
Date: 2022-12-15 09:49:24 +0000;;;","2023-01-18 15:31;dukebot;Changeset: ae0e0276
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2023-01-17 15:05:51 +0000
URL:       https://git.openjdk.org/jdk/commit/ae0e02766ad01ec6a9a5d4f900c50bd413b09638
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Remove PollingWatchService.POLLING_INIT_DELAY,JDK-8298057,5088842,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2022-12-03 09:01,2022-12-14 01:33,2023-10-01 09:56,2022-12-05 23:33,,,,,,,,20,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,"POLLING_INIT_DELAY was added by JDK-8285956 as part of reduce the default polling interval. It should be removed and poller task restored so that it is schedule with:

scheduleAtFixedRate(thunk, period, period, TimeUnit.SECONDS);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297275,,,,,,,,,,,JDK-8285956,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zha3:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-12-05 09:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11499
Date: 2022-12-04 11:08:21 +0000;;;","2022-12-05 23:33;dukebot;Changeset: 923c7466
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-12-06 07:30:52 +0000
URL:       https://git.openjdk.org/jdk/commit/923c746650204e36053251c19cf91b7e41e938b0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: fastdebug build fails after JDK-8247645,JDK-8298055,5088839,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,fyang,fyang,fyang,2022-12-02 21:25,2023-01-18 18:08,2023-10-01 09:56,2022-12-04 19:42,20,,,,,,,20,hotspot,,0,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,,"1. linux-aarch64 gcc version
$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/aarch64-linux-gnu/9/lto-wrapper
Target: aarch64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 9.4.0-1ubuntu1~20.04.1' --with-bugurl=file:///usr/share/doc/gcc-9/README.Bugs --enable-languages=c,ada,c++,go,d,fortran,objc,obj-c++,gm2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-9 --program-prefix=aarch64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-libquadmath --disable-libquadmath-support --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --enable-fix-cortex-a53-843419 --disable-werror --enable-checking=release --build=aarch64-linux-gnu --host=aarch64-linux-gnu --target=aarch64-linux-gnu
Thread model: posix
gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1)

2. OpenJDK configure options:
$ sh configure --with-debug-level=fastdebug --with-jvm-variants=server --with-target-bits=64 --enable-unlimited-crypto --with-native-debug-symbols=internal --disable-precompiled-headers --with-boot-jdk=/home/realfyang/tools/boot-jdk --with-jtreg=/home/realfyang/tools/jtreg/build/images/jtreg --with-gtest=/home/realfyang/tools/googletest

3. OpenJDK build warnings/errors:

In file included from /home/realfyang/openjdk-jdk/src/hotspot/share/asm/assembler.hpp:475,
                 from /home/realfyang/openjdk-jdk/src/hotspot/share/asm/macroAssembler.hpp:28,
                 from /home/realfyang/openjdk-jdk/src/hotspot/cpu/aarch64/stubGenerator_aarch64.cpp:27:
/home/realfyang/openjdk-jdk/src/hotspot/cpu/aarch64/assembler_aarch64.hpp: In member function 'u_char* StubGenerator::generate_chacha20Block_blockpar()':
/home/realfyang/openjdk-jdk/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:2420:9: error: 'Rm' is used uninitialized in this function [-Werror=uninitialized]
 2420 |     int Rm;
      |         ^~
cc1plus: all warnings being treated as errors
make[3]: *** [lib/CompileJvm.gmk:147: /home/realfyang/openjdk-jdk/build/linux-aarch64-server-fastdebug/hotspot/variant-server/libjvm/objs/stubGenerator_aarch64.o] Error 1
make[3]: *** Waiting for unfinished jobs....
make[2]: *** [make/Main.gmk:252: hotspot-server-libs] Error 2

ERROR: Build failed for target 'images' in configuration 'linux-aarch64-server-fastdebug' (exit code 2)

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_stubGenerator_aarch64.o:
In file included from /home/realfyang/openjdk-jdk/src/hotspot/share/asm/assembler.hpp:475,
                 from /home/realfyang/openjdk-jdk/src/hotspot/share/asm/macroAssembler.hpp:28,
                 from /home/realfyang/openjdk-jdk/src/hotspot/cpu/aarch64/stubGenerator_aarch64.cpp:27:
/home/realfyang/openjdk-jdk/src/hotspot/cpu/aarch64/assembler_aarch64.hpp: In member function 'u_char* StubGenerator::generate_chacha20Block_blockpar()':
/home/realfyang/openjdk-jdk/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:2420:9: error: 'Rm' is used uninitialized in this function [-Werror=uninitialized]
 2420 |     int Rm;
      |         ^~
cc1plus: all warnings being treated as errors

* All command lines available in /home/realfyang/openjdk-jdk/build/linux-aarch64-server-fastdebug/make-support/failure-logs.
=== End of repeated output ===

No indication of failed target found.
HELP: Try searching the build log for '] Error'.
HELP: Run 'make doctor' to diagnose build problems.

make[1]: *** [/home/realfyang/openjdk-jdk/make/Init.gmk:320: main] Error 2
make: *** [/home/realfyang/openjdk-jdk/make/Init.gmk:186: images] Error 2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8247645,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i2zh9f:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-02 21:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11496
Date: 2022-12-03 05:35:51 +0000;;;","2022-12-04 19:41;dukebot;Changeset: b49fd920
Author:    Fei Yang <fyang@openjdk.org>
Date:      2022-12-05 03:40:07 +0000
URL:       https://git.openjdk.org/jdk/commit/b49fd920b6690a8b828c85e45c10e5c4c54d2022
;;;","2022-12-05 05:23;rcastanedalo;ILW = build breakage; on aarch64; do not treat warnings as errors = HHM = P1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add links to graph output for javadoc,JDK-8298050,5088826,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pminborg,darcy,darcy,2022-12-02 12:03,2022-12-21 17:10,2023-10-01 09:56,2022-12-15 07:48,20,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"The graphs of sealed classes (JDK-8295653) could be enhanced so that the names of the sealed classes were links to the corresponding type.

This can be accomplished by adding

 href=""<<URL to type's javadoc>>""

in the dot graph definition. See https://www.graphviz.org/doc/info/shapes.html#html
",,,,,,,,,,,JDK-8298958,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295653,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zh6j:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-12-02 12:22;jjg;Presumably you will need to compute a relative URL from one class to another.;;;","2022-12-08 01:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11580
Date: 2022-12-08 09:19:54 +0000;;;","2022-12-13 06:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/23
Date: 2022-12-13 14:27:37 +0000;;;","2022-12-15 07:48;dukebot;Changeset: 2c424992
Author:    Per Minborg <pminborg@openjdk.org>
Committer: Joe Darcy <darcy@openjdk.org>
Date:      2022-12-15 15:46:05 +0000
URL:       https://git.openjdk.org/jdk20/commit/2c42499266377a32aa0ff96a0241d76d7517cf2e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove all non-significant trailing whitespace from properties files,JDK-8298047,5088817,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-12-02 09:01,2023-01-23 15:40,2023-10-01 09:56,2023-01-16 10:56,20,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,"JDK-8295729 was created in an attempt to remove all trailing whitespace from properties files, and enable a jcheck verification that they did not come back, similar to other source code. It turned out that this was not so simple, however, since trailing whitespace in values is actually significant in properties files.

To address this, I have opened four bugs on different component teams to either remove the trailing significant whitespace (if it is there erroneously), or convert it to the unicode sequence `\u0020`: JDK-8298042, JDK-8298044, JDK-8298045 and JDK-8298046.

That leaves all the other trailing spaces, in blank lines and in the end of comments. These serve no purpose and should just be removed, and is what this issue concerns.

When this and the four ""significant whitespace"" bugs are all finally integrated, we can finally turn on the verification in jcheck for properties files as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zh4j:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-12-02 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11491
Date: 2022-12-02 17:06:23 +0000;;;","2023-01-16 10:56;dukebot;Changeset: 4073b685
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2023-01-16 18:53:54 +0000
URL:       https://git.openjdk.org/jdk/commit/4073b68565f9d5283be96ee6b75bab686f076bea
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/api/consumer/recordingstream/TestStop.java failed with ""Expected outer stream to have 3 events""",JDK-8298043,5088813,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,dcubed,dcubed,2022-12-02 08:05,2023-03-22 09:12,2023-10-01 09:56,2022-12-05 12:43,20,,,,,,,20,hotspot,,0,intermittent,problemlist,tier3,tier5,tier6,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

jdk/jfr/api/consumer/recordingstream/TestStop.java

Here's a snippet from the log file:

#section:main
----------messages:(7/369)----------
command: main jdk.jfr.api.consumer.recordingstream.TestStop
reason: User specified action: run main/othervm jdk.jfr.api.consumer.recordingstream.TestStop 
started: Fri Dec 02 14:19:47 UTC 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,java.management
finished: Fri Dec 02 14:19:47 UTC 2022
elapsed time (seconds): 0.618
----------configuration:(3/51)----------
Boot Layer
  add modules: jdk.jfr java.management

----------System.out:(62/2409)----------
RecordingStream outer:
[jdk.jfr.api.consumer.recordingstream.TestStop$MarkEvent {
  startTime = 14:19:47.853 (2022-12-02)
  duration = 0.209 ms
  id = ""a""
  eventThread = ""MainThread"" (javaThreadId = 21)
  stackTrace = [
    jdk.jfr.api.consumer.recordingstream.TestStop.testNestedStop() line: 118
    jdk.jfr.api.consumer.recordingstream.TestStop.main(String[]) line: 57
    jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[]) line: 104
    java.lang.reflect.Method.invoke(Object, Object[]) line: 578
    com.sun.javatest.regtest.agent.MainWrapper$MainThread.run() line: 125
  ]
}

, jdk.jfr.api.consumer.recordingstream.TestStop$MarkEvent {
  startTime = 14:19:47.876 (2022-12-02)
  duration = 0.0435 ms
  id = ""b""
  eventThread = ""MainThread"" (javaThreadId = 21)
  stackTrace = [
    jdk.jfr.api.consumer.recordingstream.TestStop.testNestedStop() line: 127
    jdk.jfr.api.consumer.recordingstream.TestStop.main(String[]) line: 57
    jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[]) line: 104
    java.lang.reflect.Method.invoke(Object, Object[]) line: 578
    com.sun.javatest.regtest.agent.MainWrapper$MainThread.run() line: 125
  ]
}

, jdk.jfr.api.consumer.recordingstream.TestStop$MarkEvent {
  startTime = 14:19:47.890 (2022-12-02)
  duration = 0.0450 ms
  id = ""c""
  eventThread = ""MainThread"" (javaThreadId = 21)
  stackTrace = [
    jdk.jfr.api.consumer.recordingstream.TestStop.testNestedStop() line: 133
    jdk.jfr.api.consumer.recordingstream.TestStop.main(String[]) line: 57
    jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[]) line: 104
    java.lang.reflect.Method.invoke(Object, Object[]) line: 578
    com.sun.javatest.regtest.agent.MainWrapper$MainThread.run() line: 125
  ]
}

]
RecordingStream inner:
[jdk.jfr.api.consumer.recordingstream.TestStop$MarkEvent {
  startTime = 14:19:47.876 (2022-12-02)
  duration = 0.0435 ms
  id = ""b""
  eventThread = ""MainThread"" (javaThreadId = 21)
  stackTrace = [
    jdk.jfr.api.consumer.recordingstream.TestStop.testNestedStop() line: 127
    jdk.jfr.api.consumer.recordingstream.TestStop.main(String[]) line: 57
    jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Object, Object[]) line: 104
    java.lang.reflect.Method.invoke(Object, Object[]) line: 578
    com.sun.javatest.regtest.agent.MainWrapper$MainThread.run() line: 125
  ]
}

]
Outer count: 3
Inner count: 1
----------System.err:(12/775)----------
java.lang.AssertionError: Expected outer stream to have 3 events
	at jdk.jfr.api.consumer.recordingstream.TestStop.testNestedStop(TestStop.java:153)
	at jdk.jfr.api.consumer.recordingstream.TestStop.main(TestStop.java:57)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1599)

JavaTest Message: Test threw exception: java.lang.AssertionError: Expected outer stream to have 3 events
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.AssertionError: Expected outer stream to have 3 events
----------rerun:(38/8002)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304732,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2zh3n:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-02 14:55;egahlin;The test is broken. Should be:

if (outerCount.get() != 3) {
   throw new AssertionError(""Expected outer stream to have 3 events"");
}

I don't understand how this happened, but seems like a product bug and a test bug at the same time. Similar problem exists in TestStop for RemoteRecordingStream.;;;","2022-12-02 16:35;egahlin;I understand why it happens. It's a race that results in the value becoming 1 or 2 most of the time.

Together with a test bug, this was able to pass testing.

Doesn't look too hard to fix, a couple of hours, but if it becomes a nuisance we can problem list it.;;;","2022-12-02 19:43;dcubed;[~egahlin] and I updated the bug at the same time and my
update erased the ""Cause Known"" setting so I'm putting it back.;;;","2022-12-02 20:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11495
Date: 2022-12-03 04:02:59 +0000;;;","2022-12-05 09:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11517
Date: 2022-12-05 17:29:30 +0000;;;","2022-12-05 12:43;dukebot;Changeset: 9827b75c
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-12-05 20:40:35 +0000
URL:       https://git.openjdk.org/jdk/commit/9827b75c451100d2d5f3e068a8758468fd9189e0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[s390] Configure script detects num_cores +1,JDK-8298038,5088807,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2022-12-02 06:53,2023-02-01 22:47,2023-10-01 09:56,2023-01-26 21:42,,,,,,,,21,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"Created on behalf of Amit Kumar.

On s390 the standard configure script detects the wrong number of cores (on an 8 core system it detects 9). Accordingly, it creates one more build job than it intends.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,linux,,,,,,"0|i2zh2b:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-26 14:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11659
Date: 2022-12-14 04:29:06 +0000;;;","2023-01-26 21:42;dukebot;Changeset: 0eb1f66f
Author:    Amit Kumar <amitlocham09@icloud.com>
Committer: Tyler Steele <tsteele@openjdk.org>
Date:      2023-01-27 05:41:05 +0000
URL:       https://git.openjdk.org/jdk/commit/0eb1f66fd8356759c39054fee026a7940aae2673
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide better descriptions for JIT compiler JFR events,JDK-8298035,5088803,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-12-02 05:08,2023-01-03 01:10,2023-10-01 09:56,2022-12-07 04:00,17,19,20,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,"Most Compiler related JFR events lack descriptions, see
https://sap.github.io/SapMachine/jfrevents/20.html#jvm-compiler

We should add some helpful description texts for these JFR events.",,,,,,,,,,,JDK-8299514,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zh1f:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-05 01:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11506
Date: 2022-12-05 09:11:15 +0000;;;","2022-12-07 04:00;dukebot;Changeset: 58170f65
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-12-07 11:57:42 +0000
URL:       https://git.openjdk.org/jdk/commit/58170f657c2ccc7afd1e9056d7630a3b564207ef
;;;","2023-01-02 03:40;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well, because the better descriptions would be beneficial there too. Risk is low.  Change does not apply cleanly because of some diffs in the strides of the patch.;;;","2023-01-02 03:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1020
Date: 2023-01-02 11:34:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Character.codePoint{At|Before}(char[], int, int) doesn't do JavaDoc-specified check",JDK-8298033,5088801,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stsypanov,stsypanov,stsypanov,2022-12-02 04:37,2022-12-12 14:00,2023-10-01 09:56,2022-12-08 02:23,,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"I found out that this code
public class Main {
    public static void main(String[] args) {
        String s = ""Hello world!"";
        char[] chars = s.toCharArray();
        int point = Character.codePointAt(chars, -1, 1);
    }
}
throws ArrayIndexOutOfBoundsException instead of JavaDoc-specified IndexOutOfBoundsException and the method doesn't check whether index parameter is negative.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298375,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zh0z:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-12-02 04:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11480
Date: 2022-12-02 12:44:18 +0000;;;","2022-12-08 02:23;dukebot;Changeset: b9346e14
Author:    Sergey Tsypanov <stsypanov@openjdk.org>
Committer: Julian Waters <jwaters@openjdk.org>
Date:      2022-12-08 10:21:56 +0000
URL:       https://git.openjdk.org/jdk/commit/b9346e149e6cfcaf18bfafbd262f6fed209dc644
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove SCCS id's from awt jtreg tests,JDK-8298027,5088795,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jdv,jdv,jdv,2022-12-02 04:11,2023-08-07 14:35,2023-10-01 09:56,2022-12-05 19:42,11,17,19,20,8,,,20,client-libs,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,sn_133,,,,,,,,,,,,,"We have 2 tests in awt which still has SCCS id's:

open/test/jdk/java/awt/font/TextLayout/TestTibetan.java:/* @test @(#)TestTibetan.java
open/test/jdk/java/awt/font/TextLayout/TestOldHangul.java:/* @test @(#)TestOldHangul.java 

They are ignored in our CI, need to check whether we need to remove SCCS id's from them",,,,,,,,,,,JDK-8299410,JDK-8299401,JDK-8305474,JDK-8307657,JDK-8306737,JDK-8306736,JDK-8302265,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298014,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zgzn:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-12-05 02:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11509
Date: 2022-12-05 10:47:36 +0000;;;","2022-12-05 19:45;dukebot;Changeset: ba2d28e9
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2022-12-06 03:43:28 +0000
URL:       https://git.openjdk.org/jdk/commit/ba2d28e911f4f523334f98fd0186680acafb6f0a
;;;","2022-12-24 21:55;serb;Fix request (17u)

Clean backport. The fix for a test bug. The SCCS tag caused tests to fail if the new jtreg is in use.
Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/987;;;","2022-12-24 21:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/987
Date: 2022-12-25 05:09:03 +0000;;;","2022-12-27 03:07;serb;Fix request (11u)

Clean backport. The fix for a test bug. The SCCS tag caused tests to fail if the new jtreg is in use.
Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/1613;;;","2022-12-27 03:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1613
Date: 2022-12-27 10:23:09 +0000;;;","2023-02-05 23:14;serb;Fix request (8u)

Clean backport. The fix for a test bug. The SCCS tag caused tests to fail if the new jtreg is in use.
Review 8u-dev: https://github.com/openjdk/jdk8u-dev/pull/264;;;","2023-02-05 23:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/264
Date: 2023-02-06 01:23:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
NMT: fatal block printout does not show the correct corruption address,JDK-8298003,5088768,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-12-01 23:00,2022-12-08 15:30,2023-10-01 09:56,2022-12-02 22:55,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"If NMT encounters a corrupted block, it is supposed to print a report about block and corruption. This includes hex dumps from both header and corruption point, as well as corruption address. In case the footer was destroyed (buffer overflow), this should be done as two separate hex dumps.

This was introduced with JDK-8275320, and worked, but regressed in the course of a code revamp with JDK-8292071.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275320,JDK-8292071,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zgtn:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-01 23:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11472
Date: 2022-12-02 07:11:56 +0000;;;","2022-12-02 22:55;dukebot;Changeset: c67166f1
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-12-03 06:53:56 +0000
URL:       https://git.openjdk.org/jdk/commit/c67166f1205c1123497a8895c2952c4d9933645e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[8u] generated images are broken due to renaming of MSVC runtime DLL's,JDK-8297996,5088757,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,apavlyutkin,apavlyutkin,apavlyutkin,2022-12-01 19:17,2023-01-30 20:31,2023-10-01 09:56,2022-12-23 05:17,8,,,,,,,openjdk8u372,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,,,,,"After adding support of MSVS2019 configure script renames 

vcruntime140.dll -> vcrunt~1.dll
vcruntime140_1.dll -> vcrunt~2.dll

so generated images cannot be run on the systems without installed VC redistributable package.

Another issue is that only JRE image contains new vcruntime140_1.dll but JDK image does not",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,"0|i2zgr7:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-12-05 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/203
Date: 2022-12-05 08:25:37 +0000;;;","2022-12-20 22:21;apavlyutkin;Fix Request (8u)

The patch fixes renaming of VC Runtime DLL's so generated images are populated with vcruntime140.dll and vcruntime140_1.dll. Without the path fixup routine renamed them to vcrunt~1.dll and vcrunt~2.dll accordingly, so generated images were unable to run on hosts without pre-installed VC Redistributable.

Verification:

- VS2019/64-bits: both j2sdk-image and j2re-image are populated with vcruntime140.dll and vcruntime140_1.dll
- VS2019/32-bits: both j2sdk-image and j2re-image are populated with vcruntime140.dll only
- VS2017/(both 32- & 64-bits): both j2sdk-image and j2re-image are populated with vcruntime140.dll
- VS2015/(both 32- & 64-bits): both j2sdk-image and j2re-image are populated with vcruntime140.dll
- VS2013/(both 32- & 64-bits): both j2sdk-image and j2re-image are populated with msvcr120.dll
- VS2012/(both 32- & 64-bits): both j2sdk-image and j2re-image are populated with msvcr110.dll
- VS2010/(both 32- & 64-bits): both j2sdk-image and j2re-image are populated with msvcr100.dll

All the images were checked on clean Windows-10 host with java -version;;;","2022-12-23 05:17;dukebot;Changeset: 47090d6f
Author:    Alexey Pavlyutkin <apavlyutkin@azul.com>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2022-12-23 13:15:25 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/47090d6f9572adec1f31260702ff0039a7a70ee4
;;;","2023-01-30 20:31;dukebot;Changeset: 47090d6f
Author:    Alexey Pavlyutkin <apavlyutkin@azul.com>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2022-12-23 13:15:25 +0000
URL:       https://git.openjdk.org/jdk8u/commit/47090d6f9572adec1f31260702ff0039a7a70ee4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tests fail after JDK-8297215 due to lack of @enablePreview,JDK-8297992,5088753,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-12-01 17:52,2023-02-14 13:44,2023-10-01 09:56,2023-02-02 08:18,20,,,,,,,20,core-libs,,0,tencent-interest,tier5,,,,,,,,,,,,,,,,,,,,"* jtreg:test/jdk/java/lang/Thread/virtual/stress/GetStackTraceALot.java
* jtreg:test/jdk/java/lang/Thread/virtual/HoldsLock.java
* jtreg:test/jdk/jdk/internal/vm/Continuation/Basic.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298000,,,,,,JDK-8297215,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zgqb:",9223372036854775807,b27,,,,,,,,,,Verified,,"2022-12-01 18:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11469
Date: 2022-12-02 02:01:57 +0000;;;","2022-12-01 22:05;dukebot;Changeset: 11ba7591
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-12-02 06:04:10 +0000
URL:       https://git.openjdk.org/jdk/commit/11ba7591dfd3f7ca58e2e1ac6d1b3e81391f5bfb
;;;","2022-12-02 08:32;dcubed;The fix for this bug is integrated in jdk-20+27-2066.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in JavacTypes.getOverriddenMethods from doclint,JDK-8297988,5088749,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,ihse,ihse,2022-12-01 15:48,2022-12-15 00:10,2023-10-01 09:56,2022-12-09 03:13,20,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"I managed to crash javac with the following stack trace:

An exception has occurred in the compiler (20-internal). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
com.sun.tools.javac.util.ClientCodeException: java.lang.NullPointerException: Cannot invoke ""javax.lang.model.element.Element.getKind()"" because ""elem"" is null
        at jdk.compiler.interim/com.sun.tools.javac.api.ClientCodeWrapper$WrappedTaskListener.started(ClientCodeWrapper.java:869)
        at jdk.compiler.interim/com.sun.tools.javac.api.MultiTaskListener.started(MultiTaskListener.java:119)
        at jdk.compiler.interim/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1310)
        at jdk.compiler.interim/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:947)
        at jdk.compiler.interim/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler.interim/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler.interim/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler.interim/com.sun.tools.javac.Main.main(Main.java:50)
Caused by: java.lang.NullPointerException: Cannot invoke ""javax.lang.model.element.Element.getKind()"" because ""elem"" is null
        at jdk.compiler.interim/com.sun.tools.javac.model.JavacTypes.getOverriddenMethods(JavacTypes.java:327)
        at jdk.javadoc.interim/jdk.javadoc.internal.doclint.Env.setCurrent(Env.java:220)
        at jdk.javadoc.interim/jdk.javadoc.internal.doclint.Checker.scan(Checker.java:161)
        at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$2.visitDecl(DocLint.java:293)
        at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitPackage(DocLint.java:409)
        at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitPackage(DocLint.java:398)
        at jdk.compiler.interim/com.sun.tools.javac.tree.JCTree$JCPackageDecl.accept(JCTree.java:656)
        at jdk.compiler.interim/com.sun.source.util.TreePathScanner.scan(TreePathScanner.java:92)
        at jdk.compiler.interim/com.sun.source.util.TreeScanner.visitCompilationUnit(TreeScanner.java:150)
        at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitCompilationUnit(DocLint.java:442)
        at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$DeclScanner.visitCompilationUnit(DocLint.java:398)
        at jdk.compiler.interim/com.sun.tools.javac.tree.JCTree$JCCompilationUnit.accept(JCTree.java:619)
        at jdk.compiler.interim/com.sun.source.util.TreePathScanner.scan(TreePathScanner.java:92)
        at jdk.javadoc.interim/jdk.javadoc.internal.doclint.DocLint$3.started(DocLint.java:304)
        at jdk.compiler.interim/com.sun.tools.javac.api.ClientCodeWrapper$WrappedTaskListener.started(ClientCodeWrapper.java:865)
        ... 7 more

The easiest way to reproduce the crash is to run:
make clean java.base-java JDK_FILTER=jdk/internal/event

That will generate a long command line. I have tried to shorten it down and remove irrelevant stuff while still provoking the crash. The important options (if I remove them I can't reproduce) seem to be:

-Xprefer:source -Xdoclint:all '-Xdoclint/package:java.*,nonexisting.*' 

and it is crucial that we have compiled some java files to bytecode already. But once you have run the command above, the crash can be reproduced by this (more or less minimal) command line:

java -Xms64M -Xmx1600M -Duser.language=en -Duser.country=US -XX:+UnlockDiagnosticVMOptions -XX:-VerifySharedSpaces -XX:SharedArchiveFile=build/macosx-aarch64/configure-support/classes.jsa -Xshare:auto --limit-modules java.base,jdk.zipfs,java.compiler.interim,jdk.compiler.interim,jdk.javadoc.interim --add-modules java.compiler.interim,jdk.compiler.interim,jdk.javadoc.interim --module-path build/macosx-aarch64/buildtools/interim_langtools_modules --patch-module java.base=build/macosx-aarch64/buildtools/gensrc/java.base.interim --add-exports java.base/sun.reflect.annotation=jdk.compiler.interim --add-exports java.base/jdk.internal.jmod=jdk.compiler.interim --add-exports java.base/jdk.internal.misc=jdk.compiler.interim --add-exports java.base/sun.invoke.util=jdk.compiler.interim --add-exports java.base/jdk.internal.javac=java.compiler.interim --add-exports java.base/jdk.internal.javac=jdk.compiler.interim -m jdk.compiler.interim/com.sun.tools.javac.Main   -Xprefer:source -Xdoclint:all '-Xdoclint/package:java.*,nonexisting.*' --module-source-path ""src/*/share/classes"" -d . src/java.base/share/classes/jdk/internal/event/DeserializationEvent.java
",,,,,,,,,,,JDK-8298507,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zgpf:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-12-06 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11535
Date: 2022-12-06 12:18:54 +0000;;;","2022-12-08 10:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/2
Date: 2022-12-08 18:12:20 +0000;;;","2022-12-09 03:13;dukebot;Changeset: 133ad8e1
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-12-09 11:11:46 +0000
URL:       https://git.openjdk.org/jdk20/commit/133ad8e1734f002f013dd3c73d496e323e9e881e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Turn on warnings as errors for javadoc,JDK-8297984,5088745,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-12-01 13:39,2022-12-08 15:29,2023-10-01 09:56,2022-12-02 06:03,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"For some reason, we never turned on `-Werror` for javadoc. It is high time to do so.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zgoj:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-12-01 15:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11468
Date: 2022-12-01 22:20:00 +0000;;;","2022-12-02 06:02;dukebot;Changeset: df072556
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-12-02 14:00:44 +0000
URL:       https://git.openjdk.org/jdk/commit/df072556a5a155adfe89a2504c2cf680fe4ffac7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: Ensure consistent MemoryUsage from MemoryMXBean.getHeapMemoryUsage(),JDK-8297979,5088740,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sjohanss,lmesnik,lmesnik,2022-12-01 12:25,2022-12-21 17:11,2023-10-01 09:56,2022-12-16 00:07,20,,,,,,,20,hotspot,,0,problemlist,zgc,,,,,,,,,,,,,,,,,,,,"A lot of lowmem tests fails with 

----------System.out:(63/4598)----------
Stress time: 300 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 1038090240
Sleep time: 500
Iterations: 0
Number of threads: 24
Run GC thread: false
Run mem diag thread: false
Run forever: false
MemoryMonitor   > Test mode:	access to MBean through MBeanServer
MemoryMonitor   > MBeanServer:	DEFAULT
MemoryMonitor   > Memory:	mixed	(This setting is used in lowmem* tests only)
MemoryMonitor   > Monitoring:	polling	(This setting is used in lowmem* tests only)
MemoryMonitor   > Threshold:	collection	(This setting is used in lowmem* tests only)
MemoryMonitor   > Timeout:	30	(This setting is used in lowmem* tests only)
MemoryMonitor   > Changing threshold, pool: java.lang:name=ZHeap,type=MemoryPool, nullnull, new threshold: 204472320
MemoryMonitor   > Collection threshold is set, pool: java.lang:name=ZHeap,type=MemoryPool, usage: init = 8388608(8192K) used = 18874368(18432K) committed = 390070272(380928K) max = 1038090240(1013760K), threshold: 204472320
Starting Thread[#60,Thread[#36,Thread-2,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#61,Thread[#37,Thread-3,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#62,Thread[#38,Thread-4,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#63,Thread[#39,Thread-5,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#64,Thread[#40,Thread-6,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#65,Thread[#41,Thread-7,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#66,Thread[#42,Thread-8,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#67,Thread[#43,Thread-9,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#68,Thread[#44,Thread-10,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#69,Thread[#45,Thread-11,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#70,Thread[#46,Thread-12,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#71,Thread[#47,Thread-13,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#72,Thread[#48,Thread-14,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#73,Thread[#49,Thread-15,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#74,Thread[#50,Thread-16,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#75,Thread[#51,Thread-17,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#76,Thread[#52,Thread-18,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#77,Thread[#53,Thread-19,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#78,Thread[#54,Thread-20,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#79,Thread[#55,Thread-21,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#80,Thread[#56,Thread-22,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#81,Thread[#57,Thread-23,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#82,Thread[#58,Thread-24,5,MainThreadGroup],5,MainThreadGroup]
Starting Thread[#83,Thread[#59,Thread-25,5,MainThreadGroup],5,MainThreadGroup]
Exception in 
Thread[#44,Thread-10,5,MainThreadGroup]
MemoryMonitor   > Crossing is noticed, pool: java.lang:name=ZHeap,type=MemoryPool, usage: init = 8388608(8192K) used = 58720256(57344K) committed = 727711744(710656K) max = 1038090240(1013760K), count: 1
java.lang.IllegalArgumentException: used = 517996544 should be <= committed = 513802240
	at java.management/java.lang.management.MemoryUsage.<init>(MemoryUsage.java:162)
	at java.management/sun.management.MemoryImpl.getMemoryUsage0(Native Method)
	at java.management/sun.management.MemoryImpl.getHeapMemoryUsage(MemoryImpl.java:72)
	at nsk.monitoring.stress.lowmem.lowmem001$HeapStresser.run(lowmem001.java:162)
	at nsk.share.runner.ThreadsRunner$ManagedThread.run(ThreadsRunner.java:128)
	at java.base/java.lang.Thread.run(Thread.java:1591)
MemoryMonitor   > Changing threshold, pool: java.lang:name=ZHeap,type=MemoryPool, nullnull, new threshold: 620756992
MemoryMonitor   > Collection threshold is set, pool: java.lang:name=ZHeap,type=MemoryPool, usage: init = 8388608(8192K) used = 727711744(710656K) committed = 727711744(710656K) max = 1038090240(1013760K), threshold: 620756992
Failures summary:
java.lang.IllegalArgumentException: used = 517996544 should be <= committed = 513802240
	at java.management/java.lang.management.MemoryUsage.<init>(MemoryUsage.java:162)
	at java.management/sun.management.MemoryImpl.getMemoryUsage0(Native Method)
	at java.management/sun.management.MemoryImpl.getHeapMemoryUsage(MemoryImpl.java:72)
	at nsk.monitoring.stress.lowmem.lowmem001$HeapStresser.run(lowmem001.java:162)
	at nsk.share.runner.ThreadsRunner$ManagedThread.run(ThreadsRunner.java:128)
	at java.base/java.lang.Thread.run(Thread.java:1591)
----------System.err:(14/771)----------
nsk.share.TestFailure: Test exit code: 97
	at nsk.share.test.Tests$TestRunner.execute(Tests.java:90)
	at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
	at nsk.share.gc.GC.runTest(GC.java:114)
	at nsk.monitoring.stress.lowmem.lowmem001.main(lowmem001.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: nsk.share.TestFailure: Test exit code: 97
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: nsk.share.TestFailure: Test exit code: 97
",,,,,,,,,,,JDK-8298963,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zgnf:",9223372036854775807,b29,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-12-01 12:27;lmesnik;Tests
vmTestbase/nsk/monitoring/stress/lowmem/*

were never executed with ZGC before, so it is not regression. Need to check if ZGC might not synced commited/used memory so verification fails.;;;","2022-12-15 02:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/39
Date: 2022-12-15 10:09:22 +0000;;;","2022-12-16 00:07;dukebot;Changeset: c47e64e4
Author:    Stefan Johansson <sjohanss@openjdk.org>
Date:      2022-12-16 08:06:09 +0000
URL:       https://git.openjdk.org/jdk20/commit/c47e64e4f3be80f434dd4dea9b6e8d282b2c2b32
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/nsk/stress/except/except012.java fails with unexpected Exception,JDK-8297977,5088738,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,lmesnik,lmesnik,2022-12-01 12:21,2023-03-29 23:15,2023-10-01 09:56,2023-03-24 06:26,20,,,,,,,21,hotspot,,0,noreg-self,problemlist,,,,,,,,,,,,,,,,,,,,"Test
vmTestbase/nsk/stress/except/except012.java
fails with 
# suffering the bug 4239841 or 4245060.
Skipped: ClassFormatError: thrown OutOfMemoryError
Failure: ThreadDeath: unexpected exception thrown
Test failed.

It uses Thread.stop() and should be updated",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299494,JDK-8303085,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zgmz:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-22 11:33;mseledtsov;Ran 400 times on Linux-x64, Linux-aarch64, Windows and MacOS, all PASS. Closing as CNR.
The corresponding problem list entry will be removed shortly, see: ""JDK-8303085: Runtime problem list cleanup"";;;","2023-03-23 10:13;coleenp;This test and most of the tests in this directory are similar to JDK-8299494.;;;","2023-03-23 13:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13169
Date: 2023-03-23 20:49:08 +0000;;;","2023-03-24 06:26;dukebot;Changeset: 4ec720db
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-03-24 13:23:40 +0000
URL:       https://git.openjdk.org/jdk/commit/4ec720db9f1fedb5da96e70d1a8c5da5e773a5a7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastException in com.sun.tools.javac.comp.AttrRecover.doRecovery,JDK-8297974,5088735,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,cushon,cushon,2022-12-01 10:53,2023-02-10 11:07,2023-10-01 09:56,2022-12-05 01:35,20,,,,,,,20,tools,,0,javac-crash,,,,,,,,,,,,,,,,,,,,,"Compiling the following program causes a crash in javac.

The input is invalid, but it shouldn't crash.

The crash bisects to a range between 16-ea+15-631 and 16-ea+16-712. Earlier versions report an error.

```
import java.util.function.Function;

abstract class T {

  interface I {}
  interface F {}

  abstract F g(I i);
  abstract F w(F f);
  abstract F t(F i, Function<?, ?> f, String e);

  F f(F f) {
    return t(g(w(f)), v -> f);
  }
}
```

$ javac -fullversion T.java
javac full version ""20-ea+25-1926""
An exception has occurred in the compiler (20-ea). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.ClassCastException: class com.sun.tools.javac.tree.JCTree$JCIdent cannot be cast to class com.sun.tools.javac.tree.JCTree$JCBlock (com.sun.tools.javac.tree.JCTree$JCIdent and com.sun.tools.javac.tree.JCTree$JCBlock are in module jdk.compiler of loader 'app')
	at jdk.compiler/com.sun.tools.javac.comp.AttrRecover.doRecovery(AttrRecover.java:161)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:738)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:755)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1439)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1082)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:662)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:736)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1229)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:912)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:662)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:736)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5573)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5466)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5290)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5229)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1318)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:947)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
	at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)

$ javac -fullversion T.java
javac full version ""16-ea+15-631""
T.java:13: error: incompatible types: F cannot be converted to I
    return t(g(w(f)), v -> f);
                ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zgmb:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2022-12-02 03:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11479
Date: 2022-12-02 11:46:32 +0000;;;","2022-12-05 01:35;dukebot;Changeset: 777fb52e
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-12-05 09:33:42 +0000
URL:       https://git.openjdk.org/jdk/commit/777fb52ef5b0d95b756ce4fa71a7ddf2d7d2a8f1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Poly1305 Endianness on ByteBuffer not enforced,JDK-8297972,5088733,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vpaprotski,vpaprotski,vpaprotski,2022-12-01 10:07,2023-01-25 23:08,2023-10-01 09:56,2023-01-20 11:54,,,,,,,,21,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,"Per rfc7539 Section 2.5, ""Read the block as a little-endian number.""

sun.security.util.math.intpoly.IntegerPolynomial1305 enforces this on input when input is provided as `[]byte` but not when input is in `ByteBuffer`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zglv:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2022-12-01 10:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11463
Date: 2022-12-01 18:28:21 +0000;;;","2023-01-20 11:54;dukebot;Changeset: 9d44dd0c
Author:    Volodymyr Paprotski <volodymyr.paprotski@intel.com>
Committer: Jamil Nimeh <jnimeh@openjdk.org>
Date:      2023-01-20 19:51:28 +0000
URL:       https://git.openjdk.org/jdk/commit/9d44dd0cca620ef8e16e0c4306e6e54d8de6d1e8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash in PrintOptoAssembly,JDK-8297968,5088724,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aph,aph,aph,2022-12-01 08:43,2022-12-08 15:28,2023-10-01 09:56,2022-12-01 12:35,,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"If PrintOptoAssembly is used in an optimized build, we have a crash in `PhaseChaitin::dump_frame()` due to reading from uninitialized memory in the _parm_regs array. The fix is trivial.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zgjv:",9223372036854775807,b27,,,,,,,,,,,,"2022-12-01 08:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11460
Date: 2022-12-01 16:46:16 +0000;;;","2022-12-01 12:35;dukebot;Changeset: c69aa42d
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-12-01 20:34:18 +0000
URL:       https://git.openjdk.org/jdk/commit/c69aa42d02dba4612998d6ecdc57286774da9d33
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Jetty.java fails ""assert(_no_handle_mark_nesting == 0) failed: allocating handle inside NoHandleMark""",JDK-8297964,5088720,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mgronlun,dcubed,dcubed,2022-12-01 08:21,2022-12-12 13:56,2023-10-01 09:56,2022-12-07 03:27,20,,,,,,,20,hotspot,,0,tier5,,,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

applications/jetty/Jetty.java

Here's a snippet from the log file:

The tail of stress stdout is:
For random generator using seed: -8374422372389354117
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=-8374422372389354117"" to command line.
Stress process main method is started.
Create server on port 8081
Using virtual threads
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94933/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/93618ff8-995e-4e15-93f6-793d5f8f293a/runs/8855ceda-7494-4d7e-b52f-d08dbd64510f/workspace/open/src/hotspot/share/runtime/handles.cpp:46), pid=485357, tid=485675
#  assert(_no_handle_mark_nesting == 0) failed: allocating handle inside NoHandleMark
#
# JRE version: Java(TM) SE Runtime Environment (20.0+26) (fastdebug build 20-ea+26-2014)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+26-2014, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xf2a6f4]  HandleArea::allocate_null_handle()+0x144
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S145364/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2216d4ef-00bd-4d30-a249-1fada2ab7606/runs/031253b3-b191-4177-8c57-de8fd271313c/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_jetty_Jetty_java/scratch/0/core.485357)
#
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S145364/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2216d4ef-00bd-4d30-a249-1fada2ab7606/runs/031253b3-b191-4177-8c57-de8fd271313c/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_jetty_Jetty_java/scratch/0/hs_err_pid485357.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S145364/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2216d4ef-00bd-4d30-a249-1fada2ab7606/runs/031253b3-b191-4177-8c57-de8fd271313c/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_jetty_Jetty_java/scratch/0/hs_err_pid485357.log
[42.140s][warning][os] Loading hsdis library failed

[error occurred during error reporting (), id 0xe0000000, Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94933/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/93618ff8-995e-4e15-93f6-793d5f8f293a/runs/8855ceda-7494-4d7e-b52f-d08dbd64510f/workspace/open/src/hotspot/share/runtime/handles.cpp:46)]

#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(164/20788)----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f44f8004480):  JavaThread ""ForkJoinPool-1-worker-12"" daemon [_thread_in_Java, id=485675, stack(0x00007f44e7cfd000,0x00007f44e7dfe000)]

Stack: [0x00007f44e7cfd000,0x00007f44e7dfe000],  sp=0x00007f44e7df5550,  free space=993k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xf2a6f4]  HandleArea::allocate_null_handle()+0x144  (handles.cpp:46)
V  [libjvm.so+0xd3d97f]  RegisterMap::RegisterMap(JavaThread*, RegisterMap::UpdateMap, RegisterMap::ProcessFrames, RegisterMap::WalkContinuation)+0xbf  (frame.cpp:74)
V  [libjvm.so+0x111c76a]  JfrVframeStream::JfrVframeStream(JavaThread*, frame const&, bool, bool)+0x4a  (jfrStackTrace.cpp:157)
V  [libjvm.so+0x111e1f7]  JfrStackTrace::record(JavaThread*, frame const&, int)+0x97  (jfrStackTrace.cpp:278)
V  [libjvm.so+0x111eb5f]  JfrStackTrace::record(JavaThread*, int)+0x7f  (jfrStackTrace.cpp:326)
V  [libjvm.so+0x1121e4f]  JfrStackTraceRepository::record(Thread*, int)+0x11f  (jfrStackTraceRepository.cpp:171)
V  [libjvm.so+0x1a16ede]  post_monitor_inflate_event(EventJavaMonitorInflate*, oop, ObjectSynchronizer::InflateCause)+0x48e  (jfrEvent.hpp:194)
V  [libjvm.so+0x1a1757b]  ObjectSynchronizer::inflate(Thread*, oop, ObjectSynchronizer::InflateCause)+0x64b  (synchronizer.cpp:1379)
V  [libjvm.so+0x1a194bf]  ObjectSynchronizer::inflate_helper(oop)+0x5f  (synchronizer.cpp:1210)
V  [libjvm.so+0x18a27a4]  SharedRuntime::OSR_migration_begin(JavaThread*)+0x384  (sharedRuntime.cpp:3344)
j  java.util.concurrent.ConcurrentHashMap.transfer([Ljava/util/concurrent/ConcurrentHashMap$Node;[Ljava/util/concurrent/ConcurrentHashMap$Node;)V+372 java.base@20-ea
J 3911 c2 java.util.concurrent.ConcurrentHashMap.putVal(Ljava/lang/Object;Ljava/lang/Object;Z)Ljava/lang/Object; java.base@20-ea (432 bytes) @ 0x00007f45e4bd14ac [0x00007f45e4bd0a20+0x0000000000000a8c]
J 3499 c2 java.util.concurrent.ConcurrentHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@20-ea (8 bytes) @ 0x00007f45e4b97268 [0x00007f45e4b97220+0x0000000000000048]
J 4612 c2 org.glassfish.hk2.utilities.cache.Cache.compute(Ljava/lang/Object;)Ljava/lang/Object; (159 bytes) @ 0x00007f45e4c02d88 [0x00007f45e4c029c0+0x00000000000003c8]
J 4474 c1 org.jvnet.hk2.internal.SingletonContext.findOrCreate(Lorg/glassfish/hk2/api/ActiveDescriptor;Lorg/glassfish/hk2/api/ServiceHandle;)Ljava/lang/Object; (40 bytes) @ 0x00007f45dd62204c [0x00007f45dd621de0+0x000000000000026c]
J 4103 c1 org.jvnet.hk2.internal.Utilities.createService(Lorg/glassfish/hk2/api/ActiveDescriptor;Lorg/glassfish/hk2/api/Injectee;Lorg/jvnet/hk2/internal/ServiceLocatorImpl;Lorg/glassfish/hk2/api/ServiceHandle;Ljava/lang/Class;)Ljava/lang/Object; (450 bytes) @ 0x00007f45dd5cbd64 [0x00007f45dd5cafa0+0x0000000000000dc4]
J 4446 c1 org.jvnet.hk2.internal.ServiceHandleImpl.getService(Lorg/glassfish/hk2/api/ServiceHandle;)Ljava/lang/Object; (102 bytes) @ 0x00007f45dd62e5ac [0x00007f45dd62e3c0+0x00000000000001ec]
J 4476 c1 org.jvnet.hk2.internal.ServiceHandleImpl.getService()Ljava/lang/Object; (6 bytes) @ 0x00007f45dd63218c [0x00007f45dd632120+0x000000000000006c]
j  org.glassfish.jersey.internal.inject.ProviderToService.apply(Lorg/glassfish/hk2/api/ServiceHandle;)Ljava/lang/Object;+5
j  org.glassfish.jersey.internal.inject.ProviderToService.apply(Ljava/lang/Object;)Ljava/lang/Object;+5
j  jersey.repackaged.com.google.common.collect.Iterators$8.transform(Ljava/lang/Object;)Ljava/lang/Object;+5
J 4555 c1 jersey.repackaged.com.google.common.collect.TransformedIterator.next()Ljava/lang/Object; (14 bytes) @ 0x00007f45dd71481c [0x00007f45dd714760+0x00000000000000bc]
J 3017 c1 java.util.AbstractCollection.addAll(Ljava/util/Collection;)Z java.base@20-ea (42 bytes) @ 0x00007f45dd3dc9fc [0x00007f45dd3dc820+0x00000000000001dc]
j  java.util.LinkedHashSet.<init>(Ljava/util/Collection;)V+23 java.base@20-ea
j  jersey.repackaged.com.google.common.collect.Sets.newLinkedHashSet(Ljava/lang/Iterable;)Ljava/util/LinkedHashSet;+15
j  org.glassfish.jersey.internal.inject.Providers.getClasses(Ljava/util/Collection;)Ljava/util/Set;+24
j  org.glassfish.jersey.internal.inject.Providers.getProviders(Lorg/glassfish/hk2/api/ServiceLocator;Ljava/lang/Class;)Ljava/util/Set;+11
j  org.glassfish.jersey.message.internal.MessageBodyFactory.<init>(Lorg/glassfish/hk2/api/ServiceLocator;Ljavax/ws/rs/core/Configuration;)V+174
J 3781 c1 java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@20-ea (24 bytes) @ 0x00007f45dd554784 [0x00007f45dd5542e0+0x00000000000004a4]
j  java.lang.invoke.LambdaForm$MH+0x0000000801280800.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+59 java.base@20-ea
J 2447 c1 jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance([Ljava/lang/Object;)Ljava/lang/Object; java.base@20-ea (148 bytes) @ 0x00007f45dd2a5c24 [0x00007f45dd2a50a0+0x0000000000000b84]
J 2550 c1 java.lang.reflect.Constructor.newInstanceWithCaller([Ljava/lang/Object;ZLjava/lang/Class;)Ljava/lang/Object; java.base@20-ea (51 bytes) @ 0x00007f45dd2edf6c [0x00007f45dd2edd20+0x000000000000024c]
J 4740 c1 org.glassfish.hk2.utilities.reflection.ReflectionHelper.makeMe(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;Z)Ljava/lang/Object; (102 bytes) @ 0x00007f45dd71f004 [0x00007f45dd71ee60+0x00000000000001a4]
J 4707 c1 org.jvnet.hk2.internal.ClazzCreator.createMe(Ljava/util/Map;)Ljava/lang/Object; (217 bytes) @ 0x00007f45dd68178c [0x00007f45dd681220+0x000000000000056c]
J 4731 c1 org.jvnet.hk2.internal.ClazzCreator.create(Lorg/glassfish/hk2/api/ServiceHandle;Lorg/jvnet/hk2/internal/SystemDescriptor;)Ljava/lang/Object; (226 bytes) @ 0x00007f45dd72c35c [0x00007f45dd72c1e0+0x000000000000017c]
J 4384 c1 org.jvnet.hk2.internal.SystemDescriptor.create(Lorg/glassfish/hk2/api/ServiceHandle;)Ljava/lang/Object; (91 bytes) @ 0x00007f45dd6204e4 [0x00007f45dd620180+0x0000000000000364]
j  org.jvnet.hk2.internal.SingletonContext$1.compute(Lorg/jvnet/hk2/internal/SingletonContext$ActiveDescriptorAndRoot;)Ljava/lang/Object;+23
j  org.jvnet.hk2.internal.SingletonContext$1.compute(Ljava/lang/Object;)Ljava/lang/Object;+5
j  org.glassfish.hk2.utilities.cache.Cache$OriginThreadAwareFuture$1.call()Ljava/lang/Object;+14
j  java.util.concurrent.FutureTask.run()V+39 java.base@20-ea
j  org.glassfish.hk2.utilities.cache.Cache$OriginThreadAwareFuture.run()V+4
J 4612 c2 org.glassfish.hk2.utilities.cache.Cache.compute(Ljava/lang/Object;)Ljava/lang/Object; (159 bytes) @ 0x00007f45e4c03138 [0x00007f45e4c029c0+0x0000000000000778]
J 4474 c1 org.jvnet.hk2.internal.SingletonContext.findOrCreate(Lorg/glassfish/hk2/api/ActiveDescriptor;Lorg/glassfish/hk2/api/ServiceHandle;)Ljava/lang/Object; (40 bytes) @ 0x00007f45dd62204c [0x00007f45dd621de0+0x000000000000026c]
J 4103 c1 org.jvnet.hk2.internal.Utilities.createService(Lorg/glassfish/hk2/api/ActiveDescriptor;Lorg/glassfish/hk2/api/Injectee;Lorg/jvnet/hk2/internal/ServiceLocatorImpl;Lorg/glassfish/hk2/api/ServiceHandle;Ljava/lang/Class;)Ljava/lang/Object; (450 bytes) @ 0x00007f45dd5cbd64 [0x00007f45dd5cafa0+0x0000000000000dc4]
J 4343 c1 org.jvnet.hk2.internal.ServiceLocatorImpl.getService(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Ljava/lang/Object; (36 bytes) @ 0x00007f45dd614094 [0x00007f45dd613f60+0x0000000000000134]
J 4366 c1 org.jvnet.hk2.internal.IterableProviderImpl.get()Ljava/lang/Object; (87 bytes) @ 0x00007f45dd61ec8c [0x00007f45dd61ea00+0x000000000000028c]
j  org.glassfish.jersey.client.RequestProcessingInitializationStage.apply(Lorg/glassfish/jersey/client/ClientRequest;)Lorg/glassfish/jersey/client/ClientRequest;+23
j  org.glassfish.jersey.client.RequestProcessingInitializationStage.apply(Ljava/lang/Object;)Ljava/lang/Object;+5
j  org.glassfish.jersey.process.internal.Stages$LinkedStage.apply(Ljava/lang/Object;)Lorg/glassfish/jersey/process/internal/Stage$Continuation;+5
j  org.glassfish.jersey.process.internal.Stages.process(Ljava/lang/Object;Lorg/glassfish/jersey/process/internal/Stage;)Ljava/lang/Object;+20
j  org.glassfish.jersey.client.ClientRuntime.invoke(Lorg/glassfish/jersey/client/ClientRequest;)Lorg/glassfish/jersey/client/ClientResponse;+10
j  org.glassfish.jersey.client.JerseyInvocation$2.call()Ljava/lang/Object;+15
j  org.glassfish.jersey.internal.Errors.process(Ljava/util/concurrent/Callable;Z)Ljava/lang/Object;+36
j  org.glassfish.jersey.internal.Errors.process(Lorg/glassfish/jersey/internal/util/Producer;Z)Ljava/lang/Object;+2
j  org.glassfish.jersey.internal.Errors.process(Lorg/glassfish/jersey/internal/util/Producer;)Ljava/lang/Object;+2
j  org.glassfish.jersey.process.internal.RequestScope.runInScope(Lorg/glassfish/jersey/internal/util/Producer;)Ljava/lang/Object;+25
j  org.glassfish.jersey.client.JerseyInvocation.invoke(Ljava/lang/Class;)Ljava/lang/Object;+40
j  org.glassfish.jersey.client.JerseyInvocation$Builder.method(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;+33
j  org.glassfish.jersey.client.JerseyInvocation$Builder.get(Ljava/lang/Class;)Ljava/lang/Object;+4
j  applications.jetty.demo.AggregatorServices.query(Ljava/lang/String;)Ljava/lang/String;+39
j  applications.jetty.demo.AggregatorServices.lambda$allOf$3(Ljava/lang/String;)Ljava/lang/String;+2
j  applications.jetty.demo.AggregatorServices$$Lambda$360+0x0000000801244cf0.call()Ljava/lang/Object;+8
j  java.util.concurrent.ThreadPerTaskExecutor$ThreadBoundFuture.run()V+22 java.base@20-ea
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+66 java.base@20-ea
j  java.lang.VirtualThread$VThreadContinuation.lambda$new$0(Ljava/lang/VirtualThread;Ljava/lang/Runnable;)V+2 java.base@20-ea
j  java.lang.VirtualThread$VThreadContinuation$$Lambda$280+0x000000080116d540.run()V+8 java.base@20-ea
j  jdk.internal.vm.Continuation.enter0()V+4 java.base@20-ea
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 java.base@20-ea
J 3152  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@20-ea (0 bytes) @ 0x00007f45e4b4cfa4 [0x00007f45e4b4ce40+0x0000000000000164]
j  jdk.internal.vm.Continuation.run()V+122 java.base@20-ea
j  java.lang.VirtualThread.runContinuation()V+81 java.base@20-ea
j  java.lang.VirtualThread$$Lambda$281+0x000000080116d768.run()V+4 java.base@20-ea
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@20-ea
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@20-ea
J 3792 c1 java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V java.base@20-ea (83 bytes) @ 0x00007f45dd55a60c [0x00007f45dd55a520+0x00000000000000ec]
J 3759 c1 java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I java.base@20-ea (263 bytes) @ 0x00007f45dd541c8c [0x00007f45dd5414e0+0x00000000000007ac]
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@20-ea
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@20-ea
v  ~StubRoutines::call_stub 0x00007f45e443ed21
V  [libjvm.so+0x1047a30]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x500  (javaCalls.cpp:417)
V  [libjvm.so+0x1048242]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x432  (javaCalls.cpp:331)
V  [libjvm.so+0x1048831]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:193)
V  [libjvm.so+0x11cb6cb]  thread_entry(JavaThread*, JavaThread*)+0x12b  (jvm.cpp:2876)
V  [libjvm.so+0x107d5f6]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:697)
V  [libjvm.so+0x1a854e0]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x17154c3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.util.concurrent.ConcurrentHashMap.transfer([Ljava/util/concurrent/ConcurrentHashMap$Node;[Ljava/util/concurrent/ConcurrentHashMap$Node;)V+372 java.base@20-ea
J 3911 c2 java.util.concurrent.ConcurrentHashMap.putVal(Ljava/lang/Object;Ljava/lang/Object;Z)Ljava/lang/Object; java.base@20-ea (432 bytes) @ 0x00007f45e4bd14ac [0x00007f45e4bd0a20+0x0000000000000a8c]
J 3499 c2 java.util.concurrent.ConcurrentHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@20-ea (8 bytes) @ 0x00007f45e4b97268 [0x00007f45e4b97220+0x0000000000000048]
J 4612 c2 org.glassfish.hk2.utilities.cache.Cache.compute(Ljava/lang/Object;)Ljava/lang/Object; (159 bytes) @ 0x00007f45e4c02d88 [0x00007f45e4c029c0+0x00000000000003c8]
J 4474 c1 org.jvnet.hk2.internal.SingletonContext.findOrCreate(Lorg/glassfish/hk2/api/ActiveDescriptor;Lorg/glassfish/hk2/api/ServiceHandle;)Ljava/lang/Object; (40 bytes) @ 0x00007f45dd62204c [0x00007f45dd621de0+0x000000000000026c]
J 4103 c1 org.jvnet.hk2.internal.Utilities.createService(Lorg/glassfish/hk2/api/ActiveDescriptor;Lorg/glassfish/hk2/api/Injectee;Lorg/jvnet/hk2/internal/ServiceLocatorImpl;Lorg/glassfish/hk2/api/ServiceHandle;Ljava/lang/Class;)Ljava/lang/Object; (450 bytes) @ 0x00007f45dd5cbd64 [0x00007f45dd5cafa0+0x0000000000000dc4]
J 4446 c1 org.jvnet.hk2.internal.ServiceHandleImpl.getService(Lorg/glassfish/hk2/api/ServiceHandle;)Ljava/lang/Object; (102 bytes) @ 0x00007f45dd62e5ac [0x00007f45dd62e3c0+0x00000000000001ec]
J 4476 c1 org.jvnet.hk2.internal.ServiceHandleImpl.getService()Ljava/lang/Object; (6 bytes) @ 0x00007f45dd63218c [0x00007f45dd632120+0x000000000000006c]
j  org.glassfish.jersey.internal.inject.ProviderToService.apply(Lorg/glassfish/hk2/api/ServiceHandle;)Ljava/lang/Object;+5
j  org.glassfish.jersey.internal.inject.ProviderToService.apply(Ljava/lang/Object;)Ljava/lang/Object;+5
j  jersey.repackaged.com.google.common.collect.Iterators$8.transform(Ljava/lang/Object;)Ljava/lang/Object;+5
J 4555 c1 jersey.repackaged.com.google.common.collect.TransformedIterator.next()Ljava/lang/Object; (14 bytes) @ 0x00007f45dd71481c [0x00007f45dd714760+0x00000000000000bc]
J 3017 c1 java.util.AbstractCollection.addAll(Ljava/util/Collection;)Z java.base@20-ea (42 bytes) @ 0x00007f45dd3dc9fc [0x00007f45dd3dc820+0x00000000000001dc]
j  java.util.LinkedHashSet.<init>(Ljava/util/Collection;)V+23 java.base@20-ea
j  jersey.repackaged.com.google.common.collect.Sets.newLinkedHashSet(Ljava/lang/Iterable;)Ljava/util/LinkedHashSet;+15
j  org.glassfish.jersey.internal.inject.Providers.getClasses(Ljava/util/Collection;)Ljava/util/Set;+24
j  org.glassfish.jersey.internal.inject.Providers.getProviders(Lorg/glassfish/hk2/api/ServiceLocator;Ljava/lang/Class;)Ljava/util/Set;+11
j  org.glassfish.jersey.message.internal.MessageBodyFactory.<init>(Lorg/glassfish/hk2/api/ServiceLocator;Ljavax/ws/rs/core/Configuration;)V+174
J 3781 c1 java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; java.base@20-ea (24 bytes) @ 0x00007f45dd554784 [0x00007f45dd5542e0+0x00000000000004a4]
j  java.lang.invoke.LambdaForm$MH+0x0000000801280800.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+59 java.base@20-ea
J 2447 c1 jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance([Ljava/lang/Object;)Ljava/lang/Object; java.base@20-ea (148 bytes) @ 0x00007f45dd2a5c24 [0x00007f45dd2a50a0+0x0000000000000b84]
J 2550 c1 java.lang.reflect.Constructor.newInstanceWithCaller([Ljava/lang/Object;ZLjava/lang/Class;)Ljava/lang/Object; java.base@20-ea (51 bytes) @ 0x00007f45dd2edf6c [0x00007f45dd2edd20+0x000000000000024c]
J 4740 c1 org.glassfish.hk2.utilities.reflection.ReflectionHelper.makeMe(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;Z)Ljava/lang/Object; (102 bytes) @ 0x00007f45dd71f004 [0x00007f45dd71ee60+0x00000000000001a4]
J 4707 c1 org.jvnet.hk2.internal.ClazzCreator.createMe(Ljava/util/Map;)Ljava/lang/Object; (217 bytes) @ 0x00007f45dd68178c [0x00007f45dd681220+0x000000000000056c]
J 4731 c1 org.jvnet.hk2.internal.ClazzCreator.create(Lorg/glassfish/hk2/api/ServiceHandle;Lorg/jvnet/hk2/internal/SystemDescriptor;)Ljava/lang/Object; (226 bytes) @ 0x00007f45dd72c35c [0x00007f45dd72c1e0+0x000000000000017c]
J 4384 c1 org.jvnet.hk2.internal.SystemDescriptor.create(Lorg/glassfish/hk2/api/ServiceHandle;)Ljava/lang/Object; (91 bytes) @ 0x00007f45dd6204e4 [0x00007f45dd620180+0x0000000000000364]
j  org.jvnet.hk2.internal.SingletonContext$1.compute(Lorg/jvnet/hk2/internal/SingletonContext$ActiveDescriptorAndRoot;)Ljava/lang/Object;+23
j  org.jvnet.hk2.internal.SingletonContext$1.compute(Ljava/lang/Object;)Ljava/lang/Object;+5
j  org.glassfish.hk2.utilities.cache.Cache$OriginThreadAwareFuture$1.call()Ljava/lang/Object;+14
j  java.util.concurrent.FutureTask.run()V+39 java.base@20-ea
j  org.glassfish.hk2.utilities.cache.Cache$OriginThreadAwareFuture.run()V+4
J 4612 c2 org.glassfish.hk2.utilities.cache.Cache.compute(Ljava/lang/Object;)Ljava/lang/Object; (159 bytes) @ 0x00007f45e4c03138 [0x00007f45e4c029c0+0x0000000000000778]
J 4474 c1 org.jvnet.hk2.internal.SingletonContext.findOrCreate(Lorg/glassfish/hk2/api/ActiveDescriptor;Lorg/glassfish/hk2/api/ServiceHandle;)Ljava/lang/Object; (40 bytes) @ 0x00007f45dd62204c [0x00007f45dd621de0+0x000000000000026c]
J 4103 c1 org.jvnet.hk2.internal.Utilities.createService(Lorg/glassfish/hk2/api/ActiveDescriptor;Lorg/glassfish/hk2/api/Injectee;Lorg/jvnet/hk2/internal/ServiceLocatorImpl;Lorg/glassfish/hk2/api/ServiceHandle;Ljava/lang/Class;)Ljava/lang/Object; (450 bytes) @ 0x00007f45dd5cbd64 [0x00007f45dd5cafa0+0x0000000000000dc4]
J 4343 c1 org.jvnet.hk2.internal.ServiceLocatorImpl.getService(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Ljava/lang/Object; (36 bytes) @ 0x00007f45dd614094 [0x00007f45dd613f60+0x0000000000000134]
J 4366 c1 org.jvnet.hk2.internal.IterableProviderImpl.get()Ljava/lang/Object; (87 bytes) @ 0x00007f45dd61ec8c [0x00007f45dd61ea00+0x000000000000028c]
j  org.glassfish.jersey.client.RequestProcessingInitializationStage.apply(Lorg/glassfish/jersey/client/ClientRequest;)Lorg/glassfish/jersey/client/ClientRequest;+23
j  org.glassfish.jersey.client.RequestProcessingInitializationStage.apply(Ljava/lang/Object;)Ljava/lang/Object;+5
j  org.glassfish.jersey.process.internal.Stages$LinkedStage.apply(Ljava/lang/Object;)Lorg/glassfish/jersey/process/internal/Stage$Continuation;+5
j  org.glassfish.jersey.process.internal.Stages.process(Ljava/lang/Object;Lorg/glassfish/jersey/process/internal/Stage;)Ljava/lang/Object;+20
j  org.glassfish.jersey.client.ClientRuntime.invoke(Lorg/glassfish/jersey/client/ClientRequest;)Lorg/glassfish/jersey/client/ClientResponse;+10
j  org.glassfish.jersey.client.JerseyInvocation$2.call()Ljava/lang/Object;+15
j  org.glassfish.jersey.internal.Errors.process(Ljava/util/concurrent/Callable;Z)Ljava/lang/Object;+36
j  org.glassfish.jersey.internal.Errors.process(Lorg/glassfish/jersey/internal/util/Producer;Z)Ljava/lang/Object;+2
j  org.glassfish.jersey.internal.Errors.process(Lorg/glassfish/jersey/internal/util/Producer;)Ljava/lang/Object;+2
j  org.glassfish.jersey.process.internal.RequestScope.runInScope(Lorg/glassfish/jersey/internal/util/Producer;)Ljava/lang/Object;+25
j  org.glassfish.jersey.client.JerseyInvocation.invoke(Ljava/lang/Class;)Ljava/lang/Object;+40
j  org.glassfish.jersey.client.JerseyInvocation$Builder.method(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;+33
j  org.glassfish.jersey.client.JerseyInvocation$Builder.get(Ljava/lang/Class;)Ljava/lang/Object;+4
j  applications.jetty.demo.AggregatorServices.query(Ljava/lang/String;)Ljava/lang/String;+39
j  applications.jetty.demo.AggregatorServices.lambda$allOf$3(Ljava/lang/String;)Ljava/lang/String;+2
j  applications.jetty.demo.AggregatorServices$$Lambda$360+0x0000000801244cf0.call()Ljava/lang/Object;+8
j  java.util.concurrent.ThreadPerTaskExecutor$ThreadBoundFuture.run()V+22 java.base@20-ea
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+66 java.base@20-ea
j  java.lang.VirtualThread$VThreadContinuation.lambda$new$0(Ljava/lang/VirtualThread;Ljava/lang/Runnable;)V+2 java.base@20-ea
j  java.lang.VirtualThread$VThreadContinuation$$Lambda$280+0x000000080116d540.run()V+8 java.base@20-ea
j  jdk.internal.vm.Continuation.enter0()V+4 java.base@20-ea
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 java.base@20-ea
J 3152  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@20-ea (0 bytes) @ 0x00007f45e4b4cfa4 [0x00007f45e4b4ce40+0x0000000000000164]
j  jdk.internal.vm.Continuation.run()V+122 java.base@20-ea
j  java.lang.VirtualThread.runContinuation()V+81 java.base@20-ea
j  java.lang.VirtualThread$$Lambda$281+0x000000080116d768.run()V+4 java.base@20-ea
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@20-ea
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@20-ea
J 3792 c1 java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V java.base@20-ea (83 bytes) @ 0x00007f45dd55a60c [0x00007f45dd55a520+0x00000000000000ec]
J 3759 c1 java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I java.base@20-ea (263 bytes) @ 0x00007f45dd541c8c [0x00007f45dd5414e0+0x00000000000007ac]
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@20-ea
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@20-ea
v  ~StubRoutines::call_stub 0x00007f45e443ed21

I'm starting this bug off in hotspot/jfr for initial triage since
that's the code that tried to allocate the handle.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2zgiz:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-06 03:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11534
Date: 2022-12-06 11:47:26 +0000;;;","2022-12-07 03:27;dukebot;Changeset: bfcc238e
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-12-07 11:25:37 +0000
URL:       https://git.openjdk.org/jdk/commit/bfcc238ed09cb432e4a003b89a803c3c10e8ac80
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Partially fix string expansion issues in UTIL_DEFUN_NAMED and related macros,JDK-8297963,5088719,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-12-01 08:15,2023-08-07 14:22,2023-10-01 09:56,2022-12-06 00:44,11,17,,,,,,20,infrastructure,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"The UTIL macros have several problematic flaws that may not seem apparent initially, the worst of which include parsing commas as actual argument separators to the underlying m4 macros, and completely, but very subtly wrecking shell constructs. This should be at least partially fixed so no one receives nasty surprises when trying to use them.",,,,,,,,,,,JDK-8301276,JDK-8302655,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285093,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zgir:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-12-01 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11458
Date: 2022-12-01 16:15:51 +0000;;;","2022-12-06 00:44;dukebot;Changeset: f8f46305
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2022-12-06 08:42:36 +0000
URL:       https://git.openjdk.org/jdk/commit/f8f46305ef0d1c12154075c7a7d4dc75f91529b5
;;;","2023-01-06 09:42;btaylor;Fix request (17u) - fixes a known issue with https://bugs.openjdk.org/browse/JDK-8285093;;;","2023-01-06 09:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1040
Date: 2023-01-06 17:41:09 +0000;;;","2023-01-26 11:44;phh;Addendum to 17u fix request.

Follow-on fix to JDK-8285093 17u backport. Clean build-only change, all pre-submit builds succeed, low risk. JDK-8285919 and JDK-8285755, the other two JDK-8285093, have already been backported to 17.0.7. This backport is the last of the three.;;;","2023-02-15 01:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1740
Date: 2023-02-15 09:40:12 +0000;;;","2023-02-16 01:16;clanger;Fix request (11u):
Same as for 17u, it is a followup to JDK-8285093. Applies clean, low risk. Testing: GHA and SAP nightlies, no issues found.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide better descriptions for some Operating System JFR events,JDK-8297959,5088714,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-12-01 07:33,2022-12-30 01:03,2023-10-01 09:56,2022-12-05 03:32,17,20,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,"Some Operating System  JFR events currently lack descriptions , this could be improved.
See for example  https://sap.github.io/SapMachine/jfrevents/20.html#osinformation",,,,,,,,,,,JDK-8299422,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zghn:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-02 02:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11478
Date: 2022-12-02 10:22:38 +0000;;;","2022-12-05 03:32;dukebot;Changeset: dea2161f
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-12-05 11:31:31 +0000
URL:       https://git.openjdk.org/jdk/commit/dea2161f069a88553bc514c7210dc1d31febd90a
;;;","2022-12-22 01:45;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well, because the better descriptions would be helpful there too. The backport is low risk and clean.;;;","2022-12-22 01:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/966
Date: 2022-12-22 09:40:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LDAP CertStore should use LdapName and not String for DNs,JDK-8297955,5088710,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mullan,mullan,mullan,2022-12-01 06:37,2023-07-21 07:35,2023-10-01 09:56,2023-03-03 05:07,,,,,,,,21,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"The LDAPCertStore implementation passes Distinguished Names in CRL and Certificate URLs as Strings to JNDI APIs such as LdapContext.getAttributes(String), which then treats them as CompositeNames. This causes issues with URLs that have DNs with forward slashes as a forward slash is treated as a separation character in composite names. Instead, the implementation should be passing the DN to JNDI as an LdapName.

An LDAP URL containing a forward slash in the Distinguished Name such as ""ldap://host/cn=foo/123"" is compliant with RFC 5280 and should be treated as an LdapName and not a composite name and should not be rejected.",,,,,,,,,,,JDK-8306288,JDK-8306287,JDK-8307337,JDK-8310851,JDK-8306789,,,,,,,,,,,,,,,,,,,,,JDK-8289884,,,,,,,,,,,,,,,,,JDK-8312126,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zggr:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2023-03-02 05:30;mullan;The test/jdk/security/infra/java/security/cert/CertPathValidator/certification/Actalis.java can be used to verify this fix. This test has a test certificate with an ldap CRL URL with a forward slash in the Distinguished Name.;;;","2023-03-02 08:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12730
Date: 2023-02-23 16:42:17 +0000;;;","2023-03-03 05:07;dukebot;Changeset: df9aad01
Author:    Sean Mullan <mullan@openjdk.org>
Date:      2023-03-03 13:06:11 +0000
URL:       https://git.openjdk.org/jdk/commit/df9aad018a769a27221cb29e4e66465e5d98ba94
;;;","2023-04-26 12:03;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Risk: Touches security code, but we should recogniziethe names properly.
Clean backport after JDK-8224768. That change alone makes the test fail.
Test passes. SAP nightly testing passed.;;;","2023-04-26 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1303
Date: 2023-04-26 18:59:22 +0000;;;","2023-06-21 07:04;goetz;Fix request [17u]

I backport this for parity with 11.0.20-oracle from 17.
Risk: Touches security code, but we should recogniziethe names properly.
I had to adapt the code to Java 11 syntax. Includes JDK-8224768.
Test passes.  SAP nighlty testing passed;;;","2023-06-21 07:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1975
Date: 2023-06-21 14:02:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix several C2 IR matching tests for RISC-V,JDK-8297953,5088705,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fjiang,fjiang,fjiang,2022-12-01 05:29,2022-12-08 15:29,2023-10-01 09:56,2022-12-02 04:51,19,20,,,,,,20,hotspot,,0,noreg-self,oracle-triage-20,,,,,,,,,,,,,,,,,,,,"Fix several IR matching tests that failed on RISC-V.

Rotate Node will be matched only when UseZbb is enabled:
- test/hotspot/jtreg/compiler/c2/irTests/RotateLeftNodeIntIdealizationTests.java
- test/hotspot/jtreg/compiler/c2/irTests/RotateLeftNodeLongIdealizationTests.java

RISC-V does not provide float branch instruction, so we do not match CMOVEI for two floating-point comparisons:
-  test/hotspot/jtreg/compiler/c2/irTests/TestFPComparison.java

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,,"0|i2zgfn:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-01 05:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11453
Date: 2022-12-01 13:50:23 +0000;;;","2022-12-01 07:30;chagedorn;ILW = Several IR test failures, only on riscv, no workaround = MLH = P4;;;","2022-12-02 04:51;dukebot;Changeset: 227364d5
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-12-02 12:48:42 +0000
URL:       https://git.openjdk.org/jdk/commit/227364d5927f94764fdb84f7d0b4c88c8dc25d89
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Create skeleton predicates for all If nodes in loop predication,JDK-8297951,5088703,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,chagedorn,chagedorn,2022-12-01 04:53,2023-05-30 08:18,2023-10-01 09:56,2022-12-05 23:20,11,17,18,19,20,,,20,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,,,,,,,,,,,,,,,,"We currently only create skeleton predicates for RangeCheck nodes and not for normal If nodes. But it is possible to also create range check predicates in loop predication for If nodes if they have the right pattern checked in IdealLoopTree::is_range_check_if(). This, however, is much more rare. 

Without skeleton predicates for these If nodes, we could run into the same problems already fixed for RangeCheck nodes (JDK-8193130 and related bugs). This is almost impossible to trigger in practice but the attached test case shows a case where we hit an assert due to a broken memory graph.

To reproduce:
$ java -Xbatch -XX:CompileOnly=Test -XX:-TieredCompilation -XX:-RangeCheckElimination -XX:+BailoutToInterpreterForThrows NoSkeleton.java


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8340/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ed07585a-43b8-4680-b23d-20b58c0a9937/runs/e4f38489-0635-4100-a63a-1f0cdb37a23a/workspace/open/src/hotspot/share/opto/loopopts.cpp:1601), pid=45173, tid=45186
#  assert(!n->is_Store() && !n->is_LoadStore()) failed: no node with a side effect
.......
Command Line: -XX:+BailoutToInterpreterForThrows -XX:CompileOnly=Test -XX:-TieredCompilation -Xbatch -XX:-RangeCheckElimination --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main NoSkeleton.java
.......
Current CompileTask:
C2:    950   82    b        Test::test (84 bytes)

Stack: [0x00007f526c555000,0x00007f526c655000],  sp=0x00007f526c64eec0,  free space=999k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14d03a5]  PhaseIdealLoop::try_sink_out_of_loop(Node*)+0x9f5  (loopopts.cpp:1601)
V  [libjvm.so+0x14d0538]  PhaseIdealLoop::split_if_with_blocks_post(Node*)+0x58
V  [libjvm.so+0x14d11a9]  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)+0x209
V  [libjvm.so+0x14c27cf]  PhaseIdealLoop::build_and_optimize()+0x11bf
V  [libjvm.so+0xafe601]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x261
V  [libjvm.so+0xafa05f]  Compile::Optimize()+0xe2f
V  [libjvm.so+0xafc66e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x18ce
V  [libjvm.so+0x90d7b7]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7
V  [libjvm.so+0xb09b3c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c
V  [libjvm.so+0xb0a948]  CompileBroker::compiler_thread_loop()+0x608
V  [libjvm.so+0x107d656]  JavaThread::thread_main_inner()+0x206
V  [libjvm.so+0x1a852c0]  Thread::call_run()+0x100
V  [libjvm.so+0x1715463]  thread_native_entry(Thread*)+0x103",,,,,,,,,,,JDK-8300047,JDK-8298831,JDK-8301057,JDK-8298835,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307683,,,,,,,,,,,JDK-8193130,JDK-8308884,JDK-8309119,,,,,,,"2022-12-01 04:56;chagedorn;NoSkeleton.java;https://bugs.openjdk.org/secure/attachment/101877/NoSkeleton.java","2022-12-01 04:56;chagedorn;hs_err_pid45173.log;https://bugs.openjdk.org/secure/attachment/101876/hs_err_pid45173.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zgf7:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-01 04:54;chagedorn;ILW = C2 assertion due to broken memory graph, rare edge case, disable compilation of affected method or use -XX:-UseLoopPredicate = HLM = P3;;;","2022-12-01 06:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11454
Date: 2022-12-01 14:17:47 +0000;;;","2022-12-05 23:20;dukebot;Changeset: 0bd04a65
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-12-06 07:18:44 +0000
URL:       https://git.openjdk.org/jdk/commit/0bd04a658963c1126faa776cb8a96c23beb5e3e6
;;;","2023-01-10 08:13;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Typical risk of changing C2, 
Clean backport.
Test passes.  SAP nightly testing passed;;;","2023-01-10 22:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1052
Date: 2023-01-11 06:51:30 +0000;;;","2023-01-24 07:31;goetz;
Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Typical risk of changing C2, a small change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-01-24 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1686
Date: 2023-01-24 15:33:18 +0000;;;","2023-05-25 03:31;sgehwolf;This change seems to be causing JDK-8307683;;;","2023-05-25 06:32;chagedorn;I think it just reveals an existing issue and makes it more common. Before JDK-8297951, we could just have a silent wrong execution (extracted a test case for that as well).;;;","2023-05-25 06:49;sgehwolf;[~chagedorn] Right, I agree that it's likely making the underlying issue more common. On the other hand reverting this change (make it less likely again) seems an option before a proper fix is available for both.;;;","2023-05-25 09:58;chagedorn;[~sgehwolf] Reverting this change is a totally reasonable temporary solution. However, the fix was fortunately straight forward for JDK-8307683 and I've just sent a PR out for it - but of course that still requires some time until it is integrated and backported.
;;;",,,,,,,,,,,,,,,,,,,,,,,,
Update jdk.internal.javac.PreviewFeature.Feature to reflect JEP 432 and JEP 433,JDK-8297928,5088680,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-12-01 00:52,2022-12-08 15:28,2023-10-01 09:56,2022-12-01 03:48,20,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,The references to JEP 405 and JEP 427 in jdk.internal.javac.PreviewFeature.Feature need to be updated to JEP 432 and JEP 433 after JDK-8294942/JDK-8294945.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zga3:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-12-01 01:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11447
Date: 2022-12-01 09:08:11 +0000;;;","2022-12-01 03:47;dukebot;Changeset: fc9d419b
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-12-01 11:46:13 +0000
URL:       https://git.openjdk.org/jdk/commit/fc9d419b4ff46e484fa8798304dae29d3946dcfb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.awt.ScrollPane broken after multiple scroll up/down,JDK-8297923,5088673,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,shadowbug,shadowbug,2022-11-30 23:28,2023-09-05 05:47,2023-10-01 09:56,2023-06-07 14:21,11,17,20,8,,,,21,client-libs,,0,bugdb_34852266,cssn22_12_01,cssn22_12_02,cssn23_01_01,cssn23_01_02,cssn23_02_01,cssn23_02_02,cssn23_03_01,cssn23_03_02,cssn23_04_01,cssn23_04_02,cssn23_05_01,cssn23_05_02,cssn23_06_01,cssn23_06_02,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,licbug,sustaining,"The java.awt.ScrollPane GUI component gets broken after multiple scrolling up and down repeatedly.
This issue can only be observed when scrolling up/down is done slowly and multiple times (over 30 times).
It is observed in JDK 20, 17.0.5, 11.0.18 and 8u361.",,,,,,,,,,,JDK-8310466,JDK-8312223,JDK-8312587,JDK-8310671,JDK-8310468,JDK-8311424,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311689,JDK-8315690,JDK-8315691,JDK-8311632,JDK-8310056,JDK-8310054,JDK-8315693,,,"2023-03-29 08:57;aivanov;ScrollPaneTest.java;https://bugs.openjdk.org/secure/attachment/103166/ScrollPaneTest.java","2023-06-06 06:59;aivanov;ScrollPaneTest.png;https://bugs.openjdk.org/secure/attachment/104197/ScrollPaneTest.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zg8j:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-06-06 07:11;aivanov;Steps to reproduce:

Run the attached ScrollPaneTest.java:

java -Dsun.java2d.d3d=false ScrollPaneTest.java

Note: if you use JDK 8, you have to compile the class explicitly.

The test case is semi-automatic. The Robot grabs the vertical scroll bar thumb and drags it down and up 20 times. Then the frame is minimised and restored. After this, the vertical scroll bar is moved.

You should see an image similar to the attached ScrollPaneTest.png. That is one half of the canvas inside the ScrollPane is light-green as expected and the other half is purple, the light-green color is painted on the left side of the frame.;;;","2023-06-06 09:03;aivanov;Root Cause:

As the vertical scroll bar thumb is moved up and down, the horizontal scroll bar flickers even though its position remains unchanged. As soon as the horizontal scroll bar stops flickering, the rendering becomes unreliable, and the problem is reproduced.

Later, one of my colleagues noticed the number of GDI objects grows while the scroll bar is moved. (Task Manager can display the number of GDI objects: click Details tab, right-click the header and click ""Select columns""; select ""GDI objects"" and click OK to apply the changes.) When the test case runs, the number of GDI objects reaches 9,999, and it never decreases.

I used Microsoft Performance HUD [1] to pinpoint the leaked. It showed the following stack trace leaks GDI objects:

Java_sun_awt_windows_WScrollPanePeer_setScrollPosition (awt.dll)
AwtToolkit::SyncCall (awt.dll)
AwtScrollPane::_SetScrollPos (awt.dll)
SetScrollInfo (user32.dll)
ThemeSetScrollInfoProc (uxtheme.dll)
CCSetScrollInfo (comctl32.dll)
DrawThumb2 (comctl32.dll)
CCSoftFadeInitialize (comctl32.dll)
…

Likely, setting the position of a scroll bar triggers animation in the scroll bar control. When the animation is initiated from a thread which didn't create the window, the animation never finishes and thus GDI objects are leaked.

When AWT processes WM_VSCROLL and WM_HSCROLL messages from the scroll bar, it gets the new position of the scroll bar and posts a corresponding Java ScrollEvent to the Java event queue (EDT), see WScrollPanePeer.postScrollEvent. When the Java side processes the event, it calls WScrollPanePeer.setScrollPosition to update the position of the scroll bars in Windows. As the result, ::SetScrollInfo is called on EDT rather than the toolkit thread where the ScrollPane peer window is created.

[1] https://www.microsoft.com/en-us/download/100813;;;","2023-06-06 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14338
Date: 2023-06-06 16:07:53 +0000;;;","2023-06-06 14:07;prr;So it seems like the thread mis-usage has been there since, well, so long ago that it could be from JDK 1.2 (or even 1.1, but I haven't gone to check), and it became a problem only the day that XP came on the scene and uxtheme.dll was used internally by GDI rendering of Windows controls.
I can see that tracking this down was not easy because the leak isn't of anything directly allocated by JDK.

I am told switching to Windows classic works around it because this will (I think) disable use of uxtheme and avoid using whatever leaks GDI objects so quickly.

[NB this is all about AWT.
Swing uses uxtheme.dll directly for the Swing L&F but it has nothing to do with this case].;;;","2023-06-07 14:21;dukebot;Changeset: ea419073
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-06-07 21:18:50 +0000
URL:       https://git.openjdk.org/jdk/commit/ea41907396a70933c4f6e6b0f247f7ba589a3a23
;;;","2023-06-20 12:24;aivanov;This fix introduced two regressions: JDK-8310054 and JDK-8311689.
(The JDK-8310054 backport depends on JDK-8306137 where the test was added.);;;","2023-07-10 08:39;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
Acceptable risk, probably limited to ScrollPane. But all new change.
Clean backport. Requires follow-up.
SAP nightly testing passed. Test passes on Win.
In the end I included the two follow ups in this backport. One of 
the follow-ups required Copyright resolve. Marked clean.;;;","2023-07-10 08:42;aivanov;[~goetz] You may want to wait until JDK-8311689 is resolved. It's another regression found recently.;;;","2023-07-10 08:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1563
Date: 2023-07-10 15:38:37 +0000;;;","2023-07-10 09:38;goetz;[~aivanov], thanks for pointing out!;;;","2023-07-13 05:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1578
Date: 2023-07-13 12:28:57 +0000;;;","2023-07-18 04:37;goetz;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
Acceptable risk, probably limited to ScrollPane. But all new change.
Clean backport from 17 including follow-ups.
SAP nighlty testing passed.  Tests pass on win for combined change.;;;","2023-07-18 04:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2047
Date: 2023-07-18 11:38:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Remove platform dependency in corelibs-atr and langtools-atr task definition files,JDK-8297918,5088667,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rgangadhar,rgangadhar,rgangadhar,2022-11-30 21:44,2023-02-09 07:24,2023-10-01 09:56,2022-12-07 22:13,17,,,,,,,17.0.7-oracle,infrastructure,,0,jdk17u-na,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zg77:",9223372036854775807,b01,,,,,,,,,,,,"2023-02-09 07:24;goetz;[17u-na]
addressed funcionality not part of OpenJDK.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in JfrUpcalls::on_retransform,JDK-8297911,5088657,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jcking,jcking,jcking,2022-11-30 19:55,2022-12-08 15:29,2023-10-01 09:56,2022-12-02 03:33,19,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"LSan identified another memory leak. JfrUpcalls::on_retransform uses os::malloc to allocate bytes for ClassFileStream. However ClassFileStream does not take ownership of the bytes. Based on JfrUpcalls::new_bytes_eager_instrumentation it should have used NEW_RESOURCE_ARRAY_IN_THREAD_RETURN_NULL. However for some reason JfrUpcalls::on_retransform creates another ResourceMark, even though the caller already created one. I believe the correct approach should be to remove the ResourceMark in JfrUpcalls::on_retransform and use NEW_RESOURCE_ARRAY_IN_THREAD_RETURN_NULL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282420,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zg4z:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-11-30 20:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11445
Date: 2022-12-01 03:57:56 +0000;;;","2022-12-01 08:29;mgronlun;Introduced with JDK-8282420, integrated to JDK 19, that stopped using the JVMTI class_file_load_hook callback for retransformations.;;;","2022-12-02 03:32;dukebot;Changeset: 1376f330
Author:    Justin King <jcking@openjdk.org>
Committer: Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-12-02 11:31:19 +0000
URL:       https://git.openjdk.org/jdk/commit/1376f330119c832d24a986cc915cb2f82768a02c
;;;","2022-12-06 23:52;jcking;Do I need to backport this to 19? Busy this week so I likely won't get a chance until next week if I do.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
misc sun/security/pkcs11 tests timed out,JDK-8297885,5088627,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,valeriep,dcubed,dcubed,2022-11-30 12:54,2023-07-26 06:24,2023-10-01 09:56,2023-05-30 10:53,20,,,,,,,21,security-libs,,0,intermittent,noreg-self,tier2,ursqe-triaged,,,,,,,,,,,,,,,,,,"The following test timed out in the JDK20 CI:

sun/security/pkcs11/Signature/LargeDSAKey.java

Here's a snippet from the log file:

#section:main
----------messages:(9/360)----------
command: main LargeDSAKey
reason: User specified action: run main/othervm/timeout=30 LargeDSAKey 
started: Wed Nov 30 19:44:54 GMT 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.crypto.cryptoki
Timeout information:
--- Timeout information end.
finished: Wed Nov 30 19:47:10 GMT 2022
elapsed time (seconds): 135.277
----------configuration:(3/47)----------
Boot Layer
  add modules: jdk.crypto.cryptoki

----------System.out:(6/347)----------
Beginning test run LargeDSAKey...
Timeout refired 120 times
nssLibDir: /System/Volumes/Data/mesos/work_dir/jib-master/install/jpg/tests/jdk/nsslib/nsslib-macosx_x64/3.46/nsslib-macosx_x64-3.46.zip/nsslib/
Running test with provider SunPKCS11-NSS (security manager disabled) ...
Completed test with provider SunPKCS11-NSS (1832 ms).
TEST PASS - OK
----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(37/8465)*----------

<snip>

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+26-2022/macosx-x64.jdk/jdk-20.jdk/Contents/Home/bin/java' timed out (timeout set to 120000ms, elapsed time including timeout handling was 135269ms).


The test is invoked with ""run main/othervm/timeout=30"" and
with a default timeoutFactor of 4, that gives us a total timeout
value of 120 seconds/2 minutes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2zfyb:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-12-01 07:58;dcubed;Here's log file snippets for the sightings in jdk-20+26-2035-tier2:

sun/security/pkcs11/KeyStore/ClientAuth.java

#section:testng
----------messages:(8/283)----------
command: testng ClientAuth
reason: User specified action: run testng/othervm ClientAuth 
started: Thu Dec 01 08:33:43 GMT 2022
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Thu Dec 01 08:44:19 GMT 2022
elapsed time (seconds): 635.799
----------configuration:(0/0)----------
----------System.out:(29/1500)----------
config ClientAuth.setUp(): success
Running with args: [TLSv1]
Beginning test run ClientAuth...
nssLibDir: /System/Volumes/Data/mesos/work_dir/jib-master/install/jpg/tests/jdk/nsslib/nsslib-macosx_x64/3.46/nsslib-macosx_x64-3.46.zip/nsslib/
Running test with provider SunPKCS11-nss (security manager disabled) ...
serverPort = 55510
Completed test with provider SunPKCS11-nss (128 ms).
test ClientAuth.testClientAuthTLSv1(): success
Running with args: [TLSv1.1]
Beginning test run ClientAuth...
nssLibDir: /System/Volumes/Data/mesos/work_dir/jib-master/install/jpg/tests/jdk/nsslib/nsslib-macosx_x64/3.46/nsslib-macosx_x64-3.46.zip/nsslib/
Running test with provider SunPKCS11-nss (security manager disabled) ...
serverPort = 55524
Completed test with provider SunPKCS11-nss (30 ms).
test ClientAuth.testClientAuthTLSv11(): success
Running with args: [TLSv1.2, TLS_DHE_RSA_WITH_AES_128_CBC_SHA]
Beginning test run ClientAuth...
Timeout refired 480 times
nssLibDir: /System/Volumes/Data/mesos/work_dir/jib-master/install/jpg/tests/jdk/nsslib/nsslib-macosx_x64/3.46/nsslib-macosx_x64-3.46.zip/nsslib/
Running test with provider SunPKCS11-nss (security manager disabled) ...
serverPort = 55595
Completed test with provider SunPKCS11-nss (90 ms).
test ClientAuth.testClientAuthTLSv12AndCipherSuite(): success

===============================================
sun/security/pkcs11/KeyStore/ClientAuth.java
Total tests run: 3, Passes: 3, Failures: 0, Skips: 0
===============================================

----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(35/8764)*----------

<snip>

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+26-2035/macosx-x64.jdk/jdk-20.jdk/Contents/Home/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 635792ms).

Please note that sun/security/pkcs11/KeyStore/ClientAuth.java passed
while the timeout handler was running.


sun/security/pkcs11/KeyStore/SecretKeysBasic.java

#section:testng
----------messages:(8/292)----------
command: testng SecretKeysBasic
reason: User specified action: run testng/othervm SecretKeysBasic 
started: Thu Dec 01 08:33:44 GMT 2022
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Thu Dec 01 08:44:19 GMT 2022
elapsed time (seconds): 635.31
----------configuration:(0/0)----------
----------System.out:(27/1201)----------
config SecretKeysBasic.setUp(): success
Beginning test run SecretKeysBasic...
nssLibDir: /System/Volumes/Data/mesos/work_dir/jib-master/install/jpg/tests/jdk/nsslib/nsslib-macosx_x64/3.46/nsslib-macosx_x64-3.46.zip/nsslib/
Running test with provider SunPKCS11-nss (security manager disabled) ...
softkey> javax.crypto.spec.SecretKeySpec@17e33
	ALGO=AES
	[RAW] VALUE=7ccdc128a32f586b16ab4485f9c06661
skey1> SunPKCS11-nss DESede secret key, 168 bits session object, not sensitive, extractable)
	ALGO=DESede
	[RAW] VALUE=f8079ecd134ae0168c5270ad34b929861f3b64f137166125
skey2> SunPKCS11-nss DESede secret key, 168 bits session object, not sensitive, extractable)
	ALGO=DESede
	[RAW] VALUE=8a8351cd4f8c7a85dca8f4924c0d430bb99458b9da3b6402
libsoftokn3 version = 3.46.  ECC Basic.
Timeout refired 480 times
libnss3 version = 3.46.  ECC Basic.
Number of entries: 0
Reloading keystore...
Reloading keystore...
Completed test with provider SunPKCS11-nss (507766 ms).
test SecretKeysBasic.testBasic(): success

===============================================
sun/security/pkcs11/KeyStore/SecretKeysBasic.java
Total tests run: 1, Passes: 1, Failures: 0, Skips: 0
===============================================

----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(35/8809)*----------

<snip>

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+26-2035/macosx-x64.jdk/jdk-20.jdk/Contents/Home/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 635303ms).

Please note that sun/security/pkcs11/KeyStore/SecretKeysBasic.java passed
while the timeout handler is running.;;;","2023-01-05 16:50;valeriep;Hmm, can't think of any change which trigger this. Will run the test against different JDK releases and see if there is noticeable time differences.;;;","2023-05-24 10:59;valeriep;Tried a few runs and didn't observe timeouts out all 3 fore-mentioned tests:
 sun/security/pkcs11/Signature/LargeDSAKey.java - execution times varies more; the timeout time seems lower than the peer tests; so increasing it and see if the problem still occur.
 sun/security/pkcs11/KeyStore/ClientAuth.java - execution times seems fairly stable; can't reproduce the timeout.
 sun/security/pkcs11/KeyStore/SecretKeysBasic.java -  same as ClientAuth.java

Thus, will increase the timeout for LargeDSAKey.java but not touching the rest for now. ;;;","2023-05-26 18:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14190
Date: 2023-05-27 01:49:22 +0000;;;","2023-05-30 10:53;dukebot;Changeset: 7891de33
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2023-05-30 17:50:53 +0000
URL:       https://git.openjdk.org/jdk/commit/7891de331a42719234652e0fb3da6827c083707c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Risk for uninitialized memory in case of CHECK macro early return as part of field access,JDK-8297877,5088619,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,shadowbug,shadowbug,2022-11-30 11:28,2023-06-15 02:40,2023-10-01 09:56,2023-01-13 04:14,17,20,,,,,,21,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,,,,,The install_chunk_monitor() function in jfrChunkRotation.cpp and the JfrDCmd::print_help() function should check the JavaValue result before performing further operation like result.get_jobject().,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,"0|i2zfwj:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-01-10 22:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11934
Date: 2023-01-11 05:56:15 +0000;;;","2023-01-12 07:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11950
Date: 2023-01-11 15:48:31 +0000;;;","2023-01-13 04:14;dukebot;Changeset: ac63f5f8
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-01-13 12:11:09 +0000
URL:       https://git.openjdk.org/jdk/commit/ac63f5f8dd02b6af59c065add63ab4002fbc3e24
;;;","2023-06-15 02:40;shade;Looks to me this also affects at least JDK 17, adding more versions.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jar should not compress the manifest directory entry,JDK-8297875,5088617,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cushon,cushon,cushon,2022-11-30 10:43,2022-12-08 15:29,2023-10-01 09:56,2022-12-01 14:09,,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"The jar tool uses compression for the directory entry for META-INF/, resulting in a an entry with a compressed size of two bytes. It does not compress other directories.

This seems to be discouraged by the jar spec, APPNOTE 4.3.8 says ""Zero-byte files, directories, and other file types that contain no content MUST NOT include file data.""

This was discovered because this (not yet released) change to go's zipreader implementation causes it to reject the archives created by jar: https://github.com/golang/go/issues/54801. The go change may be reverted to preserve the current lenient behaviour and allow it to continue reading jar files with this issue, but I think it's still worth fixing the jar tool.

See the following example, where the directory entry for a/ from the input is uncompressed, but the entry for META-INF/ is compressed.

```
$ mkdir a/
$ echo hello > a/test.txt
$ jar cf j.jar a/
$ unzip -lv j.jar
Archive:  j.jar
 Length   Method    Size  Cmpr    Date    Time   CRC-32   Name
--------  ------  ------- ---- ---------- ----- --------  ----
       0  Defl:N        2   0% 2022-11-30 10:37 00000000  META-INF/
      60  Defl:N       59   2% 2022-11-30 10:37 af937e93  META-INF/MANIFEST.MF
       0  Stored        0   0% 2022-11-30 10:37 00000000  a/
       6  Defl:N        8 -33% 2022-11-30 10:37 363a3020  a/test.txt
--------          -------  ---                            -------
      66               69  -5%                            4 files
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zfw3:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@189ffaae,,,,,,,,,"2022-11-30 10:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11441
Date: 2022-11-30 18:48:30 +0000;;;","2022-12-01 14:09;dukebot;Changeset: e846b043
Author:    Liam Miller-Cushon <cushon@openjdk.org>
Date:      2022-12-01 22:07:57 +0000
URL:       https://git.openjdk.org/jdk/commit/e846b0438ca12f457ee763fed3a435d3a863c383
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
get_dump_directory() in jfrEmergencyDump.cpp should pass correct length to jio_snprintf,JDK-8297874,5088616,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,shadowbug,shadowbug,2022-11-30 10:38,2023-01-17 12:04,2023-10-01 09:56,2023-01-10 09:11,20,,,,,,,21,hotspot,,0,jfr,,,,,,,,,,,,,,,,,,,,,"static size_t get_dump_directory() {
  const char* dump_path = JfrEmergencyDump::get_dump_path();
  if (*dump_path == '\0') {
    if (os::get_current_directory(_path_buffer, sizeof(_path_buffer)) == NULL) {
      return 0;
    }
  } else {
    strcpy(_path_buffer, dump_path);
  }
  const size_t path_len = strlen(_path_buffer);
  const int result = jio_snprintf(_path_buffer + path_len,
                                  sizeof(_path_buffer),
                                  ""%s"",
                                  os::file_separator());
  return (result == -1) ? 0 : strlen(_path_buffer);
}

Since the start address of the char buffer passing to jio_snprintf is offset by path_len, the length of the buffer (second arg to jio_snprintf) should be adjusted according.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,"0|i2zfvv:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-01-09 19:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11916
Date: 2023-01-10 03:20:12 +0000;;;","2023-01-10 09:11;dukebot;Changeset: 5a51ef22
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-01-10 17:09:52 +0000
URL:       https://git.openjdk.org/jdk/commit/5a51ef22adb81cf268f7ce395a1af0d40d0d01a7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Non-local G1MonotonicArenaFreePool::_freelist_pool has non-trivial ctor/dtor,JDK-8297872,5088614,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iwalulya,kbarrett,kbarrett,2022-11-30 10:31,2022-12-08 15:32,2023-10-01 09:56,2022-12-04 23:18,20,,,,,,,20,hotspot,,0,gc-g1,gc-g1-remset,,,,,,,,,,,,,,,,,,,,"G1MonotonicArenaFreePool is a class with non-trivial ctor and dtor.  G1MonotonicArenaFreePool::_freelist_pool is a variable with static duration of this type. Such a variable is contrary to the HotSpot Style Guide, because it introduces static initialization order issues and destruction on exit issues.

The Style Guide says:

* Avoid non-local variables with non-constexpr initialization.  In particular, avoid variables with types requiring non-trivial initialization or destruction.  Initialization order problems can be difficult to deal with and lead to surprises, as can destruction ordering.  HotSpot doesn't generally try to cleanup on exit, and running destructors at exit can also lead to problems.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296840,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zfvf:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-30 10:39;kbarrett;This is probably the cause of the final failure in JDK-8296840, where it crashed in the destructor for G1SegmentedArrayFreePool (the old name for G1MonotonicArenaFreePool).  But there is probably an earlier failure and we're just in exit processing when we get there and die immediately.
;;;","2022-12-02 06:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11485
Date: 2022-12-02 14:46:45 +0000;;;","2022-12-04 23:18;dukebot;Changeset: 61b70931
Author:    Ivan Walulya <iwalulya@openjdk.org>
Date:      2022-12-05 07:16:56 +0000
URL:       https://git.openjdk.org/jdk/commit/61b7093123b780f87509cffe286cf6949afbb45d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
windows-x86 test build broken,JDK-8297853,5088595,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-11-30 07:57,2022-12-08 15:27,2023-10-01 09:56,2022-11-30 11:00,20,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,test/micro/org/openjdk/bench/java/lang/foreign/libQSortJNI.c is missing the correct macro definition to compile on 32-bit Windows.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zfr7:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-11-30 08:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11434
Date: 2022-11-30 15:58:17 +0000;;;","2022-11-30 11:00;dukebot;Changeset: 6bac3323
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-11-30 18:59:47 +0000
URL:       https://git.openjdk.org/jdk/commit/6bac332371d4c0a8cdf31b6603f8cbb6d2490f65
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jshell/Test8294583.java fails on some platforms,JDK-8297821,5088558,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-11-30 00:36,2022-12-08 15:27,2023-10-01 09:56,2022-12-01 00:14,20,,,,,,,20,tools,,0,testbug,,,,,,,,,,,,,,,,,,,,,"JDK-8294583 added a new test that does `--enable-preview` to access new language constructs. Unfortunately, this test also enables Loom, which on some platforms like x86_32 uses the 1:1 fallback emulation, which does not support JVMTI. JShell apparently uses JDI -> JDWP -> JVMTI to work, and thus the test fails.

```
$ CONF=linux-x86-server-fastdebug make run-test TEST=jdk/jshell/Test8294583.java
...
FailOverExecutionControlProvider: FAILED: 2:jdi --
  Exception: java.lang.IllegalArgumentException: ERROR: JDWP unable to access JVMTI Version 1 (0x30010000), is your J2SE a 1.5 or newer version? JNIEnv's GetEnv() returned -3

                  jdk.jshell/jdk.jshell.execution.JdiInitiator.listenTarget(JdiInitiator.java:201)
                  jdk.jshell/jdk.jshell.execution.JdiInitiator.<init>(JdiInitiator.java:111)
                  jdk.jshell/jdk.jshell.execution.JdiDefaultExecutionControl.create(JdiDefaultExecutionControl.java:103)
                  jdk.jshell/jdk.jshell.execution.JdiExecutionControlProvider.generate(JdiExecutionControlProvider.java:152)
                  jdk.jshell/jdk.jshell.spi.ExecutionControl.generate(ExecutionControl.java:179)

	at jdk.jshell/jdk.jshell.execution.FailOverExecutionControlProvider.generate(FailOverExecutionControlProvider.java:139)
	at jdk.jshell/jdk.jshell.spi.ExecutionControl.generate(ExecutionControl.java:179)
	at jdk.jshell/jdk.jshell.spi.ExecutionControl.generate(ExecutionControl.java:296)
	at jdk.jshell/jdk.jshell.JShell.<init>(JShell.java:136)
	... 35 more
Caused by: java.lang.IllegalArgumentException: ERROR: JDWP unable to access JVMTI Version 1 (0x30010000), is your J2SE a 1.5 or newer version? JNIEnv's GetEnv() returned -3

	at jdk.jshell/jdk.jshell.execution.JdiInitiator.listenTarget(JdiInitiator.java:201)
	at jdk.jshell/jdk.jshell.execution.JdiInitiator.<init>(JdiInitiator.java:111)
	at jdk.jshell/jdk.jshell.execution.JdiDefaultExecutionControl.create(JdiDefaultExecutionControl.java:103)
	at jdk.jshell/jdk.jshell.execution.JdiExecutionControlProvider.generate(JdiExecutionControlProvider.java:152)
	at jdk.jshell/jdk.jshell.spi.ExecutionControl.generate(ExecutionControl.java:179)
	at jdk.jshell/jdk.jshell.spi.ExecutionControl.generate(ExecutionControl.java:296)
	at jdk.jshell/jdk.jshell.execution.FailOverExecutionControlProvider.generate(FailOverExecutionControlProvider.java:105)
	... 38 more
```

This is clearly visible in current GHAs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297790,,,,,,,JDK-8294583,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zfiz:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-11-30 00:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11428
Date: 2022-11-30 08:39:01 +0000;;;","2022-11-30 01:00;alanb;JDK-8297790 is also tracking this issue.;;;","2022-12-01 00:14;dukebot;Changeset: 34fcd83c
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-12-01 08:11:54 +0000
URL:       https://git.openjdk.org/jdk/commit/34fcd83c5ea54f94b60ebda0a111d0fe8ea9cbec
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
printnm crashes with invalid address due to null pointer dereference,JDK-8297801,5088536,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfenacci,shadowbug,shadowbug,2022-11-29 14:48,2023-01-03 11:31,2023-10-01 09:56,2022-12-19 07:47,11,17,18,19,20,8,,21,hotspot,,0,bugdb_34846160,oracle-triage-20,parfait,starter,,,,,,,,,,,,,,,,,,Null pointer dereference in printnm of debug.cpp:452,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zfe3:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-16 01:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11697
Date: 2022-12-15 16:10:07 +0000;;;","2022-12-19 07:47;dukebot;Changeset: de0ce792
Author:    Damon Fenacci <damon.fenacci@oracle.com>
Committer: Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-12-19 15:44:38 +0000
URL:       https://git.openjdk.org/jdk/commit/de0ce792c1865f80b6bcfce6741681cb74d75cef
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Timeout with DTLSOverDatagram test template,JDK-8297798,5088533,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdonovan,rhalade,rhalade,2022-11-29 12:57,2023-09-27 01:10,2023-10-01 09:56,2022-12-15 11:51,,,,,,,,21,security-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,,"Several javax/net/ssl/DTLS tests have intermittent timeout issues. Several bugs are filed and all those tests use this template. This bug is filed to look at possible improvements to test/jdk/javax/net/ssl/DTLS/DTLSOverDatagram.java class.

javax/net/ssl/DTLS/CipherSuite.java (JDK-8202059)
javax/net/ssl/DTLS/InvalidCookie.java (JDK-8249562)
javax/net/ssl/DTLS/RespondToRetransmit.java (JDK-8280185)
javax/net/ssl/DTLS/PacketLossRetransmission.java (JDK-8280186, JDK-8269887)
javax/net/ssl/DTLS/ClientAuth.java (JDK-8268899)

We also had several other timeout issues reported and fixed: JDK-8264152, JDK-8258914, JDK-8129389
",,,,,,,,,,,JDK-8313166,JDK-8317024,JDK-8313485,,,,,,,,,,,,,,,,,,,,,,,JDK-8202059,JDK-8280185,JDK-8268899,JDK-8269887,JDK-8249562,JDK-8280186,,,,,,,,,,,,JDK-8258914,JDK-8264152,JDK-8129389,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zfdf:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-12-07 05:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11558
Date: 2022-12-07 13:04:28 +0000;;;","2022-12-15 11:51;dukebot;Changeset: 4b313b51
Author:    Matthew Donovan <matthew.p.donovan@oracle.com>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2022-12-15 19:48:35 +0000
URL:       https://git.openjdk.org/jdk/commit/4b313b51b1787113961c289a41708e31fa19cacc
;;;","2023-09-25 01:35;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Trivial resolve.
Tests pass. SAP nightly testing passed.;;;","2023-09-25 01:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1784
Date: 2023-09-25 08:33:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assert JNICritical_lock/safepoint-1 and AdapterHandlerLibrary_lock/safepoint-1,JDK-8297767,5088499,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,dcubed,dcubed,2022-11-29 06:45,2022-12-12 13:49,2023-10-01 09:56,2022-12-05 05:20,20,,,,,,,20,hotspot,,0,intermittent,sync,tier4,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

applications/kitchensink/Kitchensink.java

Here's a snippet from the log file:

Iteration start: MemAccess at Tue Nov 29 09:53:22 UTC 2022
Iteration done: SpecJvm2008Batch at Tue Nov 29 09:53:44 UTC 2022
Iteration start: SpecJvm2008Batch at Tue Nov 29 09:53:44 UTC 2022
 Locks owned:
Mutex: [0x0000fffe240512c0] AdapterHandlerLibrary_lock - owner: 0x0000fffe242cb380 safepoint-1
Mutex: [0x0000fffe2404a340] InvokeMethodTable_lock - owner: 0x0000fffe242cb380 safepoint
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/mutex.cpp:449


The tail of stress stdout is:
For random generator using seed: -8372404238945427141
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=-8372404238945427141"" to command line.
Stress process main method is started.
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151580/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fa29848a-1ecd-4f79-8bf7-b2f30ca80a2c/runs/1ec664d7-660a-4aba-8b42-5156b504b871/workspace/open/src/hotspot/share/runtime/mutex.cpp:449), pid=453744, tid=453756
#  assert(false) failed: Attempting to acquire lock JNICritical_lock/safepoint-1 out of order with lock AdapterHandlerLibrary_lock/safepoint-1 -- possible deadlock
#
# JRE version: Java(TM) SE Runtime Environment (20.0+26) (fastdebug build 20-ea+26-1978)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+26-1978, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x1455578]  Mutex::check_rank(Thread*)+0x278
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151536/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/da6ac2ef-f41b-49ab-b759-778ae0797224/runs/a09e21de-37ff-430a-8229-5c49bdd6f526/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/core.453744)
#
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151536/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/da6ac2ef-f41b-49ab-b759-778ae0797224/runs/a09e21de-37ff-430a-8229-5c49bdd6f526/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/hs_err_pid453744.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151536/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/da6ac2ef-f41b-49ab-b759-778ae0797224/runs/a09e21de-37ff-430a-8229-5c49bdd6f526/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/hs_err_pid453744.log
[338.367s][warning][os] Loading hsdis library failed
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(165/20896)----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000fffe242cb380):  JavaThread ""Attach Listener"" daemon [_thread_in_vm, id=453756, stack(0x0000fffdf5c00000,0x0000fffdf5e00000)]

Stack: [0x0000fffdf5c00000,0x0000fffdf5e00000],  sp=0x0000fffdf5dfbd10,  free space=2031k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1455578]  Mutex::check_rank(Thread*)+0x278  (mutex.cpp:449)
V  [libjvm.so+0x1456048]  Mutex::lock(Thread*)+0x38  (mutex.cpp:120)
V  [libjvm.so+0xd32f9c]  GCLocker::stall_until_clear()+0x9c  (mutexLocker.hpp:206)
V  [libjvm.so+0xc1c6a8]  G1CollectedHeap::try_collect_concurrently(GCCause::Cause, unsigned int, unsigned int)+0x518  (g1CollectedHeap.cpp:2175)
V  [libjvm.so+0xc1d508]  G1CollectedHeap::collect(GCCause::Cause)+0x78  (g1CollectedHeap.cpp:1989)
V  [libjvm.so+0x946c84]  AdapterBlob::create(CodeBuffer*)+0x24  (codeBlob.cpp:310)
V  [libjvm.so+0x1676620]  AdapterHandlerLibrary::create_adapter(AdapterBlob*&, int, BasicType*, bool)+0x2d0  (sharedRuntime.cpp:3006)
V  [libjvm.so+0x16774b8]  AdapterHandlerLibrary::get_adapter(methodHandle const&)+0x548  (sharedRuntime.cpp:2955)
V  [libjvm.so+0x13e717c]  Method::make_adapters(methodHandle const&, JavaThread*)+0x1c  (method.cpp:1252)
V  [libjvm.so+0x13e73c8]  Method::link_method(methodHandle const&, JavaThread*)+0x138  (method.cpp:1236)
V  [libjvm.so+0x13ee88c]  Method::make_method_handle_intrinsic(vmIntrinsicID, Symbol*, JavaThread*)+0x788  (method.cpp:1486)
V  [libjvm.so+0x179d1ac]  SystemDictionary::find_method_handle_intrinsic(vmIntrinsicID, Symbol*, JavaThread*)+0x1b8  (systemDictionary.cpp:2067)
V  [libjvm.so+0x12686d8]  LinkResolver::lookup_polymorphic_method(LinkInfo const&, Handle*, JavaThread*)+0x7f8  (linkResolver.cpp:446)
V  [libjvm.so+0x126bb78]  LinkResolver::resolve_method(LinkInfo const&, Bytecodes::Code, JavaThread*)+0x454  (linkResolver.cpp:756)
V  [libjvm.so+0x126e050]  LinkResolver::linktime_resolve_static_method(LinkInfo const&, JavaThread*)+0x3c  (linkResolver.cpp:1106)
V  [libjvm.so+0x126e360]  LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, JavaThread*)+0x30  (linkResolver.cpp:1072)
V  [libjvm.so+0x140f218]  MethodHandles::resolve_MemberName(Handle, Klass*, int, bool, JavaThread*)+0xb98  (methodHandles.cpp:777)
V  [libjvm.so+0x1411260]  MHN_resolve_Mem+0xe0  (methodHandles.cpp:1242)
J 213  java.lang.invoke.MethodHandleNatives.resolve(Ljava/lang/invoke/MemberName;Ljava/lang/Class;IZ)Ljava/lang/invoke/MemberName; java.base@20-ea (0 bytes) @ 0x0000fffe1905e3c0 [0x0000fffe1905e2c0+0x0000000000000100]
J 27604 c2 java.lang.invoke.MemberName$Factory.resolveOrFail(BLjava/lang/invoke/MemberName;Ljava/lang/Class;ILjava/lang/Class;)Ljava/lang/invoke/MemberName; java.base@20-ea (79 bytes) @ 0x0000fffe19f4dd88 [0x0000fffe19f4dd00+0x0000000000000088]
J 31300 c2 java.lang.invoke.DirectMethodHandle.makePreparedLambdaForm(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm; java.base@20-ea (798 bytes) @ 0x0000fffe1aa8a364 [0x0000fffe1aa89f00+0x0000000000000464]
J 362 c2 java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/LambdaForm; java.base@20-ea (244 bytes) @ 0x0000fffe190e0ff8 [0x0000fffe190e0e40+0x00000000000001b8]
J 1464 c2 java.lang.invoke.DirectMethodHandle.makeAllocator(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/DirectMethodHandle; java.base@20-ea (137 bytes) @ 0x0000fffe194125dc [0x0000fffe19412500+0x00000000000000dc]
J 2965 c2 java.lang.invoke.MethodHandles$Lookup.getDirectConstructorCommon(Ljava/lang/Class;Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/MethodHandle; java.base@20-ea (69 bytes) @ 0x0000fffe1974679c [0x0000fffe197466c0+0x00000000000000dc]
J 2403 c2 java.lang.invoke.MethodHandles$Lookup.unreflectConstructor(Ljava/lang/reflect/Constructor;)Ljava/lang/invoke/MethodHandle; java.base@20-ea (55 bytes) @ 0x0000fffe196210f8 [0x0000fffe19620f80+0x0000000000000178]
J 2402 c2 java.lang.invoke.MethodHandleImpl$1.unreflectConstructor(Ljava/lang/reflect/Constructor;)Ljava/lang/invoke/MethodHandle; java.base@20-ea (8 bytes) @ 0x0000fffe1962ac38 [0x0000fffe1962abc0+0x0000000000000078]
J 4398 c2 jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessorImpl; java.base@20-ea (84 bytes) @ 0x0000fffe19b1d260 [0x0000fffe19b1d1c0+0x00000000000000a0]
J 2413 c2 jdk.internal.reflect.ReflectionFactory.newConstructorAccessor(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessor; java.base@20-ea (144 bytes) @ 0x0000fffe19649bcc [0x0000fffe19649b00+0x00000000000000cc]
J 2375 c2 java.lang.reflect.Constructor.acquireConstructorAccessor()Ljdk/internal/reflect/ConstructorAccessor; java.base@20-ea (75 bytes) @ 0x0000fffe1961c28c [0x0000fffe1961c180+0x000000000000010c]
J 2373 c2 java.lang.reflect.Constructor.newInstanceWithCaller([Ljava/lang/Object;ZLjava/lang/Class;)Ljava/lang/Object; java.base@20-ea (51 bytes) @ 0x0000fffe19619a20 [0x0000fffe19619940+0x00000000000000e0]
J 3487 c2 java.lang.reflect.Constructor.newInstance([Ljava/lang/Object;)Ljava/lang/Object; java.base@20-ea (34 bytes) @ 0x0000fffe198679c4 [0x0000fffe19867940+0x0000000000000084]
j  sun.nio.ch.Util.newMappedByteBufferR(IJLjava/io/FileDescriptor;Ljava/lang/Runnable;Z)Ljava/nio/MappedByteBuffer;+52 java.base@20-ea
j  sun.nio.ch.FileChannelImpl.map(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;+140 java.base@20-ea
j  sun.nio.ch.FileChannelImpl.transferFromFileChannel(Lsun/nio/ch/FileChannelImpl;JJ)J+140 java.base@20-ea
J 31061 c2 sun.nio.ch.FileChannelImpl.transferFrom(Ljava/nio/channels/ReadableByteChannel;JJ)J java.base@20-ea (169 bytes) @ 0x0000fffe1992c7a0 [0x0000fffe1992c640+0x0000000000000160]
J 31051 c2 jdk.jfr.internal.ChunksChannel.transferTo(Ljava/nio/channels/FileChannel;)J jdk.jfr@20-ea (134 bytes) @ 0x0000fffe198be0b8 [0x0000fffe198be000+0x00000000000000b8]
j  jdk.jfr.internal.PlatformRecording.lambda$dumpStopped$0(Ljdk/jfr/internal/WriteableUserPath;)Ljava/lang/Object;+38 jdk.jfr@20-ea
J 31027 c2 jdk.jfr.internal.PlatformRecording$$Lambda$474+0x0000000801465560.call()Ljava/lang/Object; jdk.jfr@20-ea (12 bytes) @ 0x0000fffe19bfd038 [0x0000fffe19bfcfc0+0x0000000000000078]
J 31024 c2 jdk.jfr.internal.WriteableUserPath$1.run()Ljava/lang/Void; jdk.jfr@20-ea (12 bytes) @ 0x0000fffe1a5a9e3c [0x0000fffe1a5a9dc0+0x000000000000007c]
j  jdk.jfr.internal.WriteableUserPath$1.run()Ljava/lang/Object;+1 jdk.jfr@20-ea
J 1631 c2 java.security.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object; java.base@20-ea (26 bytes) @ 0x0000fffe1946cbdc [0x0000fffe1946cb40+0x000000000000009c]
j  jdk.jfr.internal.WriteableUserPath.doPrivilegedIO(Ljava/util/concurrent/Callable;)V+18 jdk.jfr@20-ea
j  jdk.jfr.internal.PlatformRecording.dumpStopped(Ljdk/jfr/internal/WriteableUserPath;)V+15 jdk.jfr@20-ea
j  jdk.jfr.internal.PlatformRecording.stop(Ljava/lang/String;)Z+166 jdk.jfr@20-ea
J 30615 c2 jdk.jfr.Recording.stop()Z jdk.jfr@20-ea (10 bytes) @ 0x0000fffe194d6b40 [0x0000fffe194d6ac0+0x0000000000000080]
j  jdk.jfr.internal.dcmd.DCmdStop.execute(Ljdk/jfr/internal/dcmd/ArgumentParser;)V+136 jdk.jfr@20-ea
J 30518 c2 jdk.jfr.internal.dcmd.AbstractDCmd.execute(Ljava/lang/String;Ljava/lang/String;C)[Ljava/lang/String; jdk.jfr@20-ea (203 bytes) @ 0x0000fffe197b8344 [0x0000fffe197b7800+0x0000000000000b44]
v  ~StubRoutines::call_stub 0x0000fffe18ee017c
V  [libjvm.so+0xe9e8dc]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x5ac  (javaCalls.cpp:417)
V  [libjvm.so+0xe9ef00]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x3b0  (javaCalls.cpp:331)
V  [libjvm.so+0xf18128]  JfrJavaCall::call_virtual(JfrJavaArguments*, JavaThread*)+0x328  (jfrJavaCall.cpp:379)
V  [libjvm.so+0xefa560]  JfrDCmd::invoke(JfrJavaArguments&, JavaThread*) const+0x1ac  (jfrDcmds.cpp:205)
V  [libjvm.so+0xefcd00]  JfrDCmd::execute(DCmdSource, JavaThread*)+0x140  (jfrDcmds.cpp:237)
V  [libjvm.so+0xb11e6c]  DCmd::parse_and_execute(DCmdSource, outputStream*, char const*, char, JavaThread*)+0x1bc  (diagnosticFramework.cpp:409)
V  [libjvm.so+0x60a614]  jcmd(AttachOperation*, outputStream*)+0x64  (attachListener.cpp:203)
V  [libjvm.so+0x60c504]  attach_listener_thread_entry(JavaThread*, JavaThread*)+0x4a0  (attachListener.cpp:427)
V  [libjvm.so+0xed4170]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:697)
V  [libjvm.so+0x17e3f48]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x14f4bc4]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:739)
C  [libpthread.so.0+0x7908]  start_thread+0x188

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 213  java.lang.invoke.MethodHandleNatives.resolve(Ljava/lang/invoke/MemberName;Ljava/lang/Class;IZ)Ljava/lang/invoke/MemberName; java.base@20-ea (0 bytes) @ 0x0000fffe1905e3c0 [0x0000fffe1905e2c0+0x0000000000000100]
J 27605 c2 java.lang.invoke.MemberName$Factory.resolve(BLjava/lang/invoke/MemberName;Ljava/lang/Class;IZ)Ljava/lang/invoke/MemberName; java.base@20-ea (159 bytes) @ 0x0000fffe190ec0cc [0x0000fffe190ec000+0x00000000000000cc]
J 27604 c2 java.lang.invoke.MemberName$Factory.resolveOrFail(BLjava/lang/invoke/MemberName;Ljava/lang/Class;ILjava/lang/Class;)Ljava/lang/invoke/MemberName; java.base@20-ea (79 bytes) @ 0x0000fffe19f4dd88 [0x0000fffe19f4dd00+0x0000000000000088]
J 31300 c2 java.lang.invoke.DirectMethodHandle.makePreparedLambdaForm(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm; java.base@20-ea (798 bytes) @ 0x0000fffe1aa8a364 [0x0000fffe1aa89f00+0x0000000000000464]
J 362 c2 java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/LambdaForm; java.base@20-ea (244 bytes) @ 0x0000fffe190e0ff8 [0x0000fffe190e0e40+0x00000000000001b8]
J 1464 c2 java.lang.invoke.DirectMethodHandle.makeAllocator(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/DirectMethodHandle; java.base@20-ea (137 bytes) @ 0x0000fffe194125dc [0x0000fffe19412500+0x00000000000000dc]
J 2965 c2 java.lang.invoke.MethodHandles$Lookup.getDirectConstructorCommon(Ljava/lang/Class;Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/MethodHandle; java.base@20-ea (69 bytes) @ 0x0000fffe1974679c [0x0000fffe197466c0+0x00000000000000dc]
J 2403 c2 java.lang.invoke.MethodHandles$Lookup.unreflectConstructor(Ljava/lang/reflect/Constructor;)Ljava/lang/invoke/MethodHandle; java.base@20-ea (55 bytes) @ 0x0000fffe196210f8 [0x0000fffe19620f80+0x0000000000000178]
J 2402 c2 java.lang.invoke.MethodHandleImpl$1.unreflectConstructor(Ljava/lang/reflect/Constructor;)Ljava/lang/invoke/MethodHandle; java.base@20-ea (8 bytes) @ 0x0000fffe1962ac38 [0x0000fffe1962abc0+0x0000000000000078]
J 4398 c2 jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessorImpl; java.base@20-ea (84 bytes) @ 0x0000fffe19b1d260 [0x0000fffe19b1d1c0+0x00000000000000a0]
J 2413 c2 jdk.internal.reflect.ReflectionFactory.newConstructorAccessor(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessor; java.base@20-ea (144 bytes) @ 0x0000fffe19649bcc [0x0000fffe19649b00+0x00000000000000cc]
J 2375 c2 java.lang.reflect.Constructor.acquireConstructorAccessor()Ljdk/internal/reflect/ConstructorAccessor; java.base@20-ea (75 bytes) @ 0x0000fffe1961c28c [0x0000fffe1961c180+0x000000000000010c]
J 2373 c2 java.lang.reflect.Constructor.newInstanceWithCaller([Ljava/lang/Object;ZLjava/lang/Class;)Ljava/lang/Object; java.base@20-ea (51 bytes) @ 0x0000fffe19619a20 [0x0000fffe19619940+0x00000000000000e0]
J 3487 c2 java.lang.reflect.Constructor.newInstance([Ljava/lang/Object;)Ljava/lang/Object; java.base@20-ea (34 bytes) @ 0x0000fffe198679c4 [0x0000fffe19867940+0x0000000000000084]
j  sun.nio.ch.Util.newMappedByteBufferR(IJLjava/io/FileDescriptor;Ljava/lang/Runnable;Z)Ljava/nio/MappedByteBuffer;+52 java.base@20-ea
j  sun.nio.ch.FileChannelImpl.map(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;+140 java.base@20-ea
j  sun.nio.ch.FileChannelImpl.transferFromFileChannel(Lsun/nio/ch/FileChannelImpl;JJ)J+140 java.base@20-ea
J 31061 c2 sun.nio.ch.FileChannelImpl.transferFrom(Ljava/nio/channels/ReadableByteChannel;JJ)J java.base@20-ea (169 bytes) @ 0x0000fffe1992c7a0 [0x0000fffe1992c640+0x0000000000000160]
J 31051 c2 jdk.jfr.internal.ChunksChannel.transferTo(Ljava/nio/channels/FileChannel;)J jdk.jfr@20-ea (134 bytes) @ 0x0000fffe198be0b8 [0x0000fffe198be000+0x00000000000000b8]
j  jdk.jfr.internal.PlatformRecording.lambda$dumpStopped$0(Ljdk/jfr/internal/WriteableUserPath;)Ljava/lang/Object;+38 jdk.jfr@20-ea
J 31027 c2 jdk.jfr.internal.PlatformRecording$$Lambda$474+0x0000000801465560.call()Ljava/lang/Object; jdk.jfr@20-ea (12 bytes) @ 0x0000fffe19bfd038 [0x0000fffe19bfcfc0+0x0000000000000078]
J 31024 c2 jdk.jfr.internal.WriteableUserPath$1.run()Ljava/lang/Void; jdk.jfr@20-ea (12 bytes) @ 0x0000fffe1a5a9e3c [0x0000fffe1a5a9dc0+0x000000000000007c]
j  jdk.jfr.internal.WriteableUserPath$1.run()Ljava/lang/Object;+1 jdk.jfr@20-ea
J 1631 c2 java.security.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object; java.base@20-ea (26 bytes) @ 0x0000fffe1946cbdc [0x0000fffe1946cb40+0x000000000000009c]
j  jdk.jfr.internal.WriteableUserPath.doPrivilegedIO(Ljava/util/concurrent/Callable;)V+18 jdk.jfr@20-ea
j  jdk.jfr.internal.PlatformRecording.dumpStopped(Ljdk/jfr/internal/WriteableUserPath;)V+15 jdk.jfr@20-ea
j  jdk.jfr.internal.PlatformRecording.stop(Ljava/lang/String;)Z+166 jdk.jfr@20-ea
J 30615 c2 jdk.jfr.Recording.stop()Z jdk.jfr@20-ea (10 bytes) @ 0x0000fffe194d6b40 [0x0000fffe194d6ac0+0x0000000000000080]
j  jdk.jfr.internal.dcmd.DCmdStop.execute(Ljdk/jfr/internal/dcmd/ArgumentParser;)V+136 jdk.jfr@20-ea
J 30518 c2 jdk.jfr.internal.dcmd.AbstractDCmd.execute(Ljava/lang/String;Ljava/lang/String;C)[Ljava/lang/String; jdk.jfr@20-ea (203 bytes) @ 0x0000fffe197b8344 [0x0000fffe197b7800+0x0000000000000b44]
v  ~StubRoutines::call_stub 0x0000fffe18ee017c

The direct code that's acquiring the lock out of order belongs to GC,
but that collect() call is happening in response to an AdapterBlob::create()
and we get there from method linking and link resolution. I think there's
more Runtime code involved here than GC code so I'm starting this bug
off in hotspot/runtime for initial triage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i2zf5v:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-29 09:27;dcubed;[~coleenp] - Does this failure mode ring any bells?;;;","2022-11-29 11:12;mseledtsov;ILW = HLM = P3
Workaround: give JVM more code cache;;;","2022-11-29 16:10;dholmes;Seems a pretty clear cut problem - there is potential nested locking here.;;;","2022-12-02 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11484
Date: 2022-12-02 14:18:58 +0000;;;","2022-12-05 05:20;dukebot;Changeset: e7e03548
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-12-05 13:18:44 +0000
URL:       https://git.openjdk.org/jdk/commit/e7e03548feabb3f200b4f6f5d04c392343adb131
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix missing stub code expansion before align() in shared trampolines,JDK-8297763,5088494,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-11-29 05:36,2022-12-13 23:41,2023-10-01 09:56,2022-12-05 04:45,20,,,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,,,"A quick fix for JDK-8297036 to prevent blocking its proceeding: after applying JDK-8297036, we can reproduce a crash when building fastdebug program natively on RISC-V. But the real cause seems to be this issue.

A stub expansion is missing before doing `align()` (JDK-8280152).

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280152,,,,,,,,,"2022-11-29 06:13;xlinzheng;hs_err_pid32433.log;https://bugs.openjdk.org/secure/attachment/101843/hs_err_pid32433.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,20,,linux,,,,,,"0|i2zf4r:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-29 06:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11414
Date: 2022-11-29 13:43:20 +0000;;;","2022-11-29 06:15;xlinzheng;Deleted hs_err_pid1282.log for it has `-XX:+UseNewCode` there, which was my debugging stuff so may look not good. The newly-added hs_err_pid32433.log is a fresh one.;;;","2022-11-29 08:59;chagedorn;ILW = Crash when applying JDK-8297036, not observed with current mainline?, no workaround = MLH = P4;;;","2022-12-04 23:17;xlinzheng;It seems not to have been linked automatically - needs a manual linkage.;;;","2022-12-05 04:45;dukebot;Changeset: f9e0f1d5
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-12-05 12:43:57 +0000
URL:       https://git.openjdk.org/jdk/commit/f9e0f1d5b3663db5de0532e9d9ce41312bf35ed3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VarHandles.getStaticFieldFromBaseAndOffset should get the receiver type from VarHandle,JDK-8297757,5088487,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,alanb,alanb,2022-11-29 04:05,2023-02-10 12:07,2023-10-01 09:56,2023-01-20 09:26,20,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,A spin off from JDK-8294278. The implementation of VarHandle::describeConstable for static fields uses VarHandles.getStaticFieldFromBaseAndOffset to map a base/offset/fieldType to a static Field. This assumes that the location of a static field returned by Unsafe.staticFieldBase is a Class object. It may need to be re-examined for this code to be usable with other VM implementations.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294278,JDK-8302260,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zf37:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2023-01-19 10:56;mchung;As noted in the comment of VarHandles.getStaticFieldFromBaseAndOffset, it's fragile to assume the base is the receiver type.   This can be fixed by having VarHandle implementation for static fields to include the class in addition to the base and offset (i.e. FieldStaticReadOnly and FieldStaticReadWrite classes).
  ;;;","2023-01-19 11:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12100
Date: 2023-01-19 19:14:38 +0000;;;","2023-01-20 09:26;dukebot;Changeset: facd4151
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-01-20 17:25:18 +0000
URL:       https://git.openjdk.org/jdk/commit/facd41511b972e940ecab3bc57f5f23efca43343
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"runtime/ClassUnload/UnloadTest.java failed with ""Test failed: should still be live""",JDK-8297740,5088460,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,dcubed,dcubed,2022-11-28 13:52,2023-02-08 03:38,2023-10-01 09:56,2022-11-30 05:03,20,,,,,,,20,hotspot,,0,tier4,tier6,tier7,tier8,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

runtime/ClassUnload/UnloadTest.java

Here's a snippet from the log file:

#section:main
----------messages:(7/540)----------
command: main -Xbootclasspath/a:. -Xmn8m -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xlog:class+unload=debug UnloadTest
reason: User specified action: run main/othervm -Xbootclasspath/a:. -Xmn8m -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xlog:class+unload=debug UnloadTest 
started: Mon Nov 28 19:58:35 UTC 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
finished: Mon Nov 28 19:59:02 UTC 2022
elapsed time (seconds): 26.706
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base                   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(11/1164)----------
Refcount of symbol ClassUnloadCommonClassLoader is 3
[26.028s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801008800 0x0000000801008800
[26.028s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801007c00 0x0000000801007c00
[26.028s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801007800 0x0000000801007800
[26.028s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801007400 0x0000000801007400
[26.028s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801006800 0x0000000801006800
[26.028s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801005800 0x0000000801005800
[26.028s][info][class,unload] unloading class test.Empty 0x0000000801005000
[26.028s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801003000 0x0000000801003000
[26.028s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801002800 0x0000000801002800
[26.028s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x0000000801000800 0x0000000801000800
----------System.err:(13/876)----------
jdk.test.lib.classloader.ClassUnloadCommon$TestFailure: Test failed: should still be live
	at jdk.test.lib.classloader.ClassUnloadCommon.failIf(ClassUnloadCommon.java:51)
	at UnloadTest.test_unload_instance_klass(UnloadTest.java:75)
	at UnloadTest.main(UnloadTest.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: jdk.test.lib.classloader.ClassUnloadCommon$TestFailure: Test failed: should still be live
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: jdk.test.lib.classloader.ClassUnloadCommon$TestFailure: Test failed: should still be live
----------rerun:(50/8569)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297936,,,,,,,,,,,JDK-8297499,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,windows,,,,,"0|i2zex7:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-28 16:11;dholmes;Test started failing in a CI run containing the fix for JDK-8297499. That fix changed the test. The test now fails in -Xcomp mode and I think I can see why:

-        cl = null; c = null; o = null;
+        cl = null;
+        ClassUnloadCommon.triggerUnloading();
+
+        ClassUnloadCommon.failIf(!wb.isClassAlive(className), ""should still be live"");
+
+        o = null;

In Xcomp mode o will be nulled sooner and so the class will be unloaded when not expected.

Assigning to [~ayang];;;","2022-11-29 01:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11409
Date: 2022-11-29 09:28:28 +0000;;;","2022-11-30 05:03;dukebot;Changeset: a97e7d98
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2022-11-30 13:01:34 +0000
URL:       https://git.openjdk.org/jdk/commit/a97e7d9887e448c88f59cf70bfb8ab72435ece9c
;;;","2022-11-30 06:58;dcubed;The fix for this bug is integrated in jdk-20+26-2016.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test/jdk/java/foreign/TestMatrix.java is broken,JDK-8297736,5088456,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvernee,jvernee,jvernee,2022-11-28 13:01,2023-01-24 16:00,2023-10-01 09:56,2022-11-30 12:01,20,,,,,,,20,core-libs,,0,testbug,,,,,,,,,,,,,,,,,,,,,"test/jdk/java/foreign/TestMatrix.java tries to run some non-existent test classes, and uses obsolete system properties.

It's also missing a test that runs TestVarArgs in un-sampled mode.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287679,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zewb:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-11-29 05:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11398
Date: 2022-11-28 21:03:33 +0000;;;","2022-11-30 12:01;dukebot;Changeset: 1a2ff587
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2022-11-30 19:59:43 +0000
URL:       https://git.openjdk.org/jdk/commit/1a2ff58761d755c2330dec46e3eb53bc6d9a9839
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Arraycopy intrinsic throws incorrect exception,JDK-8297730,5086076,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,webbuggrp,webbuggrp,2022-10-24 15:22,2023-06-05 09:34,2023-10-01 09:56,2023-01-24 23:24,11,17,18,19,20,21,9,21,hotspot,,0,c2,intrinsic,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-20,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
# Java version
java 19.0.1 2022-10-18
Java(TM) SE Runtime Environment (build 19.0.1+10-21)
Java HotSpot(TM) 64-Bit Server VM (build 19.0.1+10-21, mixed mode, sharing)

# Operating system details
$ cat /etc/*release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=18.04
DISTRIB_CODENAME=bionic
DISTRIB_DESCRIPTION=""Ubuntu 18.04.5 LTS""
NAME=""Ubuntu""
VERSION=""18.04.5 LTS (Bionic Beaver)""
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=""Ubuntu 18.04.5 LTS""
VERSION_ID=""18.04""
HOME_URL=""https://www.ubuntu.com/""
SUPPORT_URL=""https://help.ubuntu.com/""
BUG_REPORT_URL=""https://bugs.launchpad.net/ubuntu/""
PRIVACY_POLICY_URL=""https://www.ubuntu.com/legal/terms-and-policies/privacy-policy""
VERSION_CODENAME=bionic
UBUNTU_CODENAME=bionic

$ uname -a
Linux seoul 5.4.0-99-generic #112~18.04.1-Ubuntu SMP Thu Feb 3 14:09:57 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux


A DESCRIPTION OF THE PROBLEM :
Different outputs of the attached program are observed between different compilation tiers. This bug affects java 11.0.17 2022-10-18, java 17 2021-09-14 LTS, Oracle JDK 18.0.2.1, Oracle JDK 19.0.1, and openjdk 20-ea 2023-03-21. It was not reproduced in java version ""1.8.0_351"".

REGRESSION : Last worked in version 8u351

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
The following steps shows how to reproduce the bug on Java 19.0.1 in a
Ubuntu Linux environment.

# Compile
$ javac C.java

# Default or compilation up to level 4
$ java C
# Output (incorrect)
99997

# Compilation up to level 1
$ java -XX:TieredStopAtLevel=1 C
# Output (correct)
100000

# Interpreter or compilation up to level 0
$ java -Xint C
# Output (correct)
100000

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
100000
ACTUAL -
99997

---------- BEGIN SOURCE ----------
public class C {
    static byte[] m(byte[] arg1) {
        byte[] b = new byte[-1];
        System.arraycopy(arg1, 0, b, 0, arg1.length);
        return b;
    }

    public static void main(String[] args) {
        int count = 0;
        for (int i = 0; i < 100_000; ++i) {
            try {
                System.out.println(m(null));
            } catch (Throwable e) {
                if (e instanceof java.lang.NegativeArraySizeException) {
                    count++;
                }
            }
        }
        System.out.println(count); // Should be 100_000
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Interpreter or compilation for Level 0, 1, 2, 3 are fine.
$ java -XX:TieredStopAtLevel=3 C

FREQUENCY : always


",,,,,,,,,,,JDK-8307025,JDK-8306513,JDK-8305546,JDK-8309487,JDK-8301955,JDK-8302407,JDK-8301948,,,,,,,,,,,,,,,,,,,JDK-8301660,,,,,,,,,,,,,,,,,JDK-8073866,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z0sb:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-25 21:38;fmatte;Hi Daniel, can you look into this issue;;;","2022-11-28 08:35;thartmann;This is reproducible with latest JDK 20 and should be moved from JI to JDK (hotspot/compiler).;;;","2022-11-28 23:40;chagedorn;ILW = Throwing NullPointerException instead of NegativeArraySizeException with _arraycopy intrinsic, single testcase, disable intrinsic with -XX:DisableIntrinsic=_arraycopy = HLM = P3;;;","2022-11-28 23:47;chagedorn;This already reproduces with JDK 9 (tested with JDK 9+181). Since this is an old regression and the fork is coming up next Thursday, I'm moving this to JDK 21. If a fix is still found in time, this can be re-targeted to JDK 20.;;;","2022-12-19 05:26;dskantz;Thanks Christian for narrowing it down. Seems to have been introduced between b50 and b65 in 9 (unfortunately, don't have much to go by in terms of intermediate builds). There are a few _arraycopy related changes committed in this range.;;;","2023-01-20 09:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12120
Date: 2023-01-20 17:10:58 +0000;;;","2023-01-24 23:23;dukebot;Changeset: 5a478ef7
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-01-25 07:22:12 +0000
URL:       https://git.openjdk.org/jdk/commit/5a478ef7759e64da6d17426673700ff0d9c66b33
;;;","2023-03-29 04:05;thartmann;Fix Request (JDK 20u)
Resolves an issue with incorrect execution of C2 compiled code. The fix is medium risk, was already backported to Oracle JDK 17u / 11u and tested in the JDK 21 and 17u / 11u CIs. The backport applies cleanly.;;;","2023-03-29 04:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/31
Date: 2023-03-29 11:04:32 +0000;;;","2023-04-19 02:41;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Typical C2 risk, a bigger change. Clean repro case.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.
;;;","2023-04-19 02:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1270
Date: 2023-04-19 09:41:46 +0000;;;","2023-06-02 08:10;goetz;
Fix request [11u]

I backport this for parity with 11.0.20-oracle.
Typical C2 risk, a bigger change that also needed rework. But the test reproduces the issue.
I had to adapt the code and mix old and new.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-06-02 08:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1926
Date: 2023-06-02 15:09:12 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Loop strip mining prevents some empty loops from being eliminated,JDK-8297724,5088433,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2022-11-28 06:10,2023-08-28 03:55,2023-10-01 09:56,2022-12-21 06:49,11,17,20,21,,,,21,hotspot,,0,c2,c2-loopopts,oracle-triage-20,performance,,,,,,,,,,,,,,,,,,"Sometimes, the LSM safepoint is the only node keeping nodes in the inner counted loop alive. Without the LSM safepoint, some nodes from the inner counted loop alive would be eliminated and the inner loop would become empty and could be eliminated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315088,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zer7:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-28 16:41;dlong;ILW = missed optimization; sometimes; no workaround = MMH = P3;;;","2022-12-15 10:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11699
Date: 2022-12-15 16:43:07 +0000;;;","2022-12-21 06:49;dukebot;Changeset: 88bfe4d3
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-12-21 14:46:57 +0000
URL:       https://git.openjdk.org/jdk/commit/88bfe4d3bff5504bb6061d1484325dd6a55f06a2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove jdk/internal/misc/TerminatingThreadLocal/TestTerminatingThreadLocal.java from ProblemList,JDK-8297717,5088425,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2022-11-28 04:04,2022-12-05 14:01,2023-10-01 09:56,2022-11-28 05:28,20,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"Seems to be a merge error in JDK-8291760, it seems to have mistakenly added jdk/internal/misc/TerminatingThreadLocal/TestTerminatingThreadLocal.java  to the ProblemList.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zepf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-11-28 04:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11389
Date: 2022-11-28 12:38:20 +0000;;;","2022-11-28 05:28;dukebot;Changeset: ba0a2521
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-11-28 13:27:18 +0000
URL:       https://git.openjdk.org/jdk/commit/ba0a2521ba6d7db041580be7cda633311836b455
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix incorrect result of Short.reverseBytes() call in loops,JDK-8297689,5088391,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pli,pli,pli,2022-11-27 20:23,2022-12-13 23:42,2023-10-01 09:56,2022-12-06 01:18,19,20,,,,,,20,hotspot,,0,c2,c2-superword,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-20,vectorapi,,,,,,,,,,,,,,,"Recently, we find calling `Short.reverseBytes()` in loops may generate
incorrect result if the code is compiled by C2. Below is a simple case
to reproduce.


class Foo {
  static final int SIZE = 50;
  static int a[] = new int[SIZE];

  static void test() {
    for (int i = 0; i < SIZE; i++) {
      a[i] = Short.reverseBytes((short) a[i]);
    }
  }

  public static void main(String[] args) throws Exception {
    Class.forName(""java.lang.Short"");
    a[25] = 16;
    test();
    System.out.println(a[25]);
  }
}

// $ java -Xint Foo
// 4096
// $ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Foo.test Foo
// 268435456",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284960,,,,,,,,,"2022-11-29 23:50;pli;config.yml;https://bugs.openjdk.org/secure/attachment/101851/config.yml",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,19,,generic,,,,,,"0|i2zehv:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-28 02:17;chagedorn;ILW = Incorrect result with Short.reverseBytes(), single test case/low?, disable affected intrinsic: -XX:DisableIntrinsic=_reverseBytes_s = HLM = P3;;;","2022-11-28 17:24;pli;Yes, this is found by a fuzzer test.;;;","2022-11-29 08:49;thartmann;Just curious, what kind of test generator did you use to find this?;;;","2022-11-29 23:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11427
Date: 2022-11-30 07:20:11 +0000;;;","2022-11-29 23:29;pli;JavaFuzzer, IIRC, this tool is what you have introduced to me before. I just created a PR to fix. Could you help take a look?;;;","2022-11-29 23:34;thartmann;Thanks for the information. Yes, we are running JavaFuzzer as well but haven't found that issue yet. I'll take a look at the PR.;;;","2022-11-29 23:39;pli;I have updated the configuration yaml file and re-generated some test cases with more loops. I believe it's a useful tool to find loop optimization issues.;;;","2022-11-29 23:42;thartmann;Interesting, could you share the exact changes that you did?;;;","2022-11-29 23:51;pli;Sure, I have attached that. But I just modified that tentatively and randomly. I don't really understand all the configuration items of that.;;;","2022-11-30 00:17;thartmann;Thank you!;;;","2022-12-06 01:18;dukebot;Changeset: a6139985
Author:    Pengfei Li <pli@openjdk.org>
Date:      2022-12-06 09:16:47 +0000
URL:       https://git.openjdk.org/jdk/commit/a61399854a9db8e3c0cb3f391fa557cb37e02571
;;;",,,,,,,,,,,,,,,,,,,,,,,,
"new URI(S,S,S,S) throws exception with incorrect index position reported in the error message",JDK-8297687,5088388,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,karianna,karianna,2022-11-27 16:17,2022-12-12 13:51,2023-10-01 09:56,2022-12-06 04:47,11.0.16.1,17.0.5,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"Originally reported: https://github.com/adoptium/adoptium-support/issues/611

### Please provide a brief summary of the bug

We rely on URI class implements reasonably well RFC-2396. Recently faced a confusing case.

### Please provide steps to reproduce where possible

```
PS C:\app\jdk-17.0.5+8> bin/jshell
|  Welcome to JShell -- Version 17.0.5
|  For an introduction type: /help intro

jshell> new URI(""ftps"", ""p.e.local|SIT@p.e.local"", ""/path"", null)
|  Exception java.net.URISyntaxException: Illegal character in authority at index 7: ftps://p.e.local|SIT@p.e.local/path
|        at URI$Parser.fail (URI.java:2974)
|        at URI$Parser.parseAuthority (URI.java:3308)
|        at URI$Parser.parseHierarchical (URI.java:3219)
|        at URI$Parser.parse (URI.java:3175)
|        at URI.<init> (URI.java:708)
|        at URI.<init> (URI.java:809)
|        at (#1:1)
```

### Expected Results

The message should make sense, the index of the invalid character should be relative to the presented URI string.

```
jshell> ""ftps://p.e.local|SIT@p.e.local/path"".indexOf(""|"")
$4 ==> 16
```

### Actual Results

Above index ``7`` in ``ftps://p.e.local|SIT@p.e.local/path``  results in ``p``.

```
jshell> ""ftps://p.e.local|SIT@p.e.local/path"".charAt(7)
$3 ==> 'p'
```

### What Java Version are you using?

openjdk version ""17.0.5""

### What is your operating system and platform?

Win 10 on AMD x64

### How did you install Java?

_No response_

### Did it work before?

_No response_

### Did you test with other Java versions?

```shell
Java 11.0.16.1
```

### Relevant log output

_No response_


### Extra info

I'm sure about the incorrect index because ``p`` is a valid char. 

Indeed this evident smell raises subsequent questions.

For ``|``, it comes from observations that it is the pipe disrupting the URI. 


I'm not sure if ``|`` should or should not be rejected, spec-wise:

java.net.URI JavaDoc is silent on ``|``, the other category there matches non-US-ASCII chars, but ``|`` is US-ASCII char.  

RFC https://www.ietf.org/rfc/rfc2396.txt mentions ``|`` in the unwise category.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8214219,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,windows_10,,,,,,"0|i2zeh7:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-11-28 05:04;dfuchs;The wording could be improved. The message refers to the position of the bad character within the authority component, which is indeed confusing since it also prints the full URI. Hmmm.. Though 7 doesn't seem to match even in that case.;;;","2022-12-03 23:09;karianna;This looks fairly related.;;;","2022-12-05 02:59;dfuchs;7 seems to be the index at which the authority component starts.  I agree this is quite confusing.;;;","2022-12-05 10:33;dfuchs;While testing a fix it occurred to me that if you had used the constructor that takes an authority component instead the pipe character would have been encoded. The reason you get a syntax exception here is because you're calling a constructor that takes a hostname, and hostnames are expected to be either literal IP addresses or DNS names.;;;","2022-12-05 12:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11518
Date: 2022-12-05 19:10:36 +0000;;;","2022-12-06 04:47;dukebot;Changeset: b0e54328
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-12-06 12:46:01 +0000
URL:       https://git.openjdk.org/jdk/commit/b0e54328c530faf8aae2f48a37ff378215142689
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in NullPointerException description specified by Locale.lookup,JDK-8297685,5088386,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,alanb,alanb,2022-11-27 07:58,2022-12-05 14:03,2023-10-01 09:56,2022-11-29 10:34,20,,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"Reported via a pul request for openjdk/jdk:

Javadoc says NPE ""if priorityList or tags is null"" when it should be ""if priorityList or locals is null"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zegr:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-11-28 10:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11394
Date: 2022-11-28 17:53:43 +0000;;;","2022-11-29 10:34;dukebot;Changeset: ae5b1f76
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-11-29 18:32:44 +0000
URL:       https://git.openjdk.org/jdk/commit/ae5b1f765678a9928696acb7228b197e293171be
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unnecessary color conversion during 4BYTE_ABGR_PRE to INT_ARGB_PRE blit,JDK-8297681,5088383,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-11-26 22:25,2023-08-01 09:27,2023-10-01 09:56,2022-11-29 23:31,11,17,20,,,,,20,client-libs,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,The blit from TYPE_4BYTE_ABGR_PRE to TYPE_INT_ARGB_PRE image is implemented via conversion from/to to ARGB format.,,,,,,,,,,,JDK-8311957,JDK-8312690,JDK-8311138,JDK-8311958,JDK-8312515,JDK-8311107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-27 01:27;serb;4byte_argb_pre;https://bugs.openjdk.org/secure/attachment/101814/4byte_argb_pre",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zeg3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-11-27 00:56;serb;An additional benefit is ~x2 performance improvements of this blit, so it will have the same performance as the opposite INT_ARGB_PRE to 4BYTE_ABGR_PRE blit.

Options common across all tests:
  testname=graphics.imaging.benchmarks.tests.drawimage
  graphics.opts.xormode=false
  graphics.opts.renderhint=Default
  graphics.opts.extraalpha=false
  graphics.imaging.benchmarks.opts.interpolation=Nearest neighbor
  graphics.opts.clip=false
  graphics.imaging.benchmarks.opts.touchsrc=false
  graphics.opts.transform=ident
  graphics.opts.anim=2

global.dest=BufImg(4ByteAbgrPre),graphics.imaging.src=4ByteAbgrPre translucent,graphics.opts.alpharule=Src,graphics.opts.sizes=1:
fix: 4973.297634 (var=1.85%) (100.0%)
***********************************************************|
***********************************************************|
***********************************************************|
base: 4833.565643 (var=1.95%) (97.19%)
********************************************************** |
********************************************************** |
*********************************************************  |
global.dest=BufImg(4ByteAbgrPre),graphics.imaging.src=4ByteAbgrPre translucent,graphics.opts.alpharule=Src,graphics.opts.sizes=100:
fix: 6954225.78904 (var=1.02%) (100.0%)
************************************************************|
************************************************************|
*********************************************************** |
base: 6817865.53955 (var=0.84%) (98.04%)
*********************************************************** |
*********************************************************** |
*********************************************************** |
global.dest=BufImg(4ByteAbgrPre),graphics.imaging.src=4ByteAbgrPre translucent,graphics.opts.alpharule=Src,graphics.opts.sizes=4000:
fix: 3308794.00348 (var=0.04%) (100.0%)
************************************************************|
************************************************************|
************************************************************|
base: 3287583.44459 (var=0.68%) (99.36%)
************************************************************|
************************************************************|
*********************************************************** |
global.dest=BufImg(4ByteAbgrPre),graphics.imaging.src=4ByteAbgrPre translucent,graphics.opts.alpharule=SrcOver,graphics.opts.sizes=1:
fix: 2690.082401 (var=1.65%) (100.0%)
**********************************************************|
**********************************************************|
**********************************************************|
base: 2757.674130 (var=3.61%) (102.51%)
**********************************************************|
**********************************************************|*
**********************************************************|*
global.dest=BufImg(4ByteAbgrPre),graphics.imaging.src=4ByteAbgrPre translucent,graphics.opts.alpharule=SrcOver,graphics.opts.sizes=100:
fix: 230049.99342 (var=2.94%) (100.0%)
********************************************************** |
***********************************************************|
***********************************************************|
base: 231649.85399 (var=1.36%) (100.7%)
***********************************************************|
***********************************************************|
***********************************************************|
global.dest=BufImg(4ByteAbgrPre),graphics.imaging.src=4ByteAbgrPre translucent,graphics.opts.alpharule=SrcOver,graphics.opts.sizes=4000:
fix: 480324.54361 (var=1.22%) (100.0%)
***********************************************************|
***********************************************************|
***********************************************************|
base: 486335.15531 (var=1.37%) (101.25%)
***********************************************************|
***********************************************************|
***********************************************************|
global.dest=BufImg(4ByteAbgrPre),graphics.imaging.src=IntArgbPre translucent,graphics.opts.alpharule=Src,graphics.opts.sizes=1:
fix: 4632.417415 (var=0.76%) (100.0%)
***********************************************************|
***********************************************************|
***********************************************************|
base: 4651.872923 (var=17.2%) (100.42%)
***********************************************************|
***********************************************************|
***********************************************************|
global.dest=BufImg(4ByteAbgrPre),graphics.imaging.src=IntArgbPre translucent,graphics.opts.alpharule=Src,graphics.opts.sizes=100:
fix: 290401.12314 (var=1.7%) (100.0%)
***********************************************************|
***********************************************************|
***********************************************************|
base: 287552.21497 (var=17.85%) (99.02%)
***********************************************************|
********************************************************** |
***********************************************************|
global.dest=BufImg(4ByteAbgrPre),graphics.imaging.src=IntArgbPre translucent,graphics.opts.alpharule=Src,graphics.opts.sizes=4000:
fix: 519716.61542 (var=0.2%) (100.0%)
************************************************************|
************************************************************|
************************************************************|
base: 519230.76923 (var=0.92%) (99.91%)
************************************************************|
************************************************************|
************************************************************|
global.dest=BufImg(4ByteAbgrPre),graphics.imaging.src=IntArgbPre translucent,graphics.opts.alpharule=SrcOver,graphics.opts.sizes=1:
fix: 4674.548168 (var=0.4%) (100.0%)
***********************************************************|
***********************************************************|
***********************************************************|
base: 4758.501009 (var=1.34%) (101.8%)
***********************************************************|
***********************************************************|
***********************************************************|
global.dest=BufImg(4ByteAbgrPre),graphics.imaging.src=IntArgbPre translucent,graphics.opts.alpharule=SrcOver,graphics.opts.sizes=100:
fix: 370195.89427 (var=0.85%) (100.0%)
************************************************************|
************************************************************|
************************************************************|
base: 368237.00568 (var=1.43%) (99.47%)
*********************************************************** |
************************************************************|
*********************************************************** |
global.dest=BufImg(4ByteAbgrPre),graphics.imaging.src=IntArgbPre translucent,graphics.opts.alpharule=SrcOver,graphics.opts.sizes=4000:
fix: 747032.44526 (var=2.21%) (100.0%)
********************************************************** |
***********************************************************|
********************************************************** |
base: 761904.76190 (var=1.84%) (101.99%)
***********************************************************|
***********************************************************|
***********************************************************|
global.dest=BufImg(IntArgbPre),graphics.imaging.src=4ByteAbgrPre translucent,graphics.opts.alpharule=Src,graphics.opts.sizes=1:
fix: 4779.164248 (var=1.29%) (100.0%)
***********************************************************|
***********************************************************|
***********************************************************|
base: 2846.324058 (var=2.73%) (59.56%)
************************************                       |
***********************************                        |
***********************************                        |
global.dest=BufImg(IntArgbPre),graphics.imaging.src=4ByteAbgrPre translucent,graphics.opts.alpharule=Src,graphics.opts.sizes=100:
fix: 286439.77665 (var=3.42%) (100.0%)
***********************************************************|
***********************************************************|
********************************************************** |
base: 167280.80808 (var=1.8%) (58.4%)
**********************************                         |
**********************************                         |
**********************************                         |
global.dest=BufImg(IntArgbPre),graphics.imaging.src=4ByteAbgrPre translucent,graphics.opts.alpharule=Src,graphics.opts.sizes=4000:
fix: 523473.86620 (var=0.44%) (100.0%)
************************************************************|
************************************************************|
************************************************************|
base: 318915.25423 (var=0.69%) (60.92%)
************************************                        |
************************************                        |
*************************************                       |
global.dest=BufImg(IntArgbPre),graphics.imaging.src=4ByteAbgrPre translucent,graphics.opts.alpharule=SrcOver,graphics.opts.sizes=1:
fix: 4694.377511 (var=1.02%) (100.0%)
************************************************************|
*********************************************************** |
************************************************************|
base: 2845.740982 (var=1.92%) (60.62%)
************************************                        |
************************************                        |
************************************                        |
global.dest=BufImg(IntArgbPre),graphics.imaging.src=4ByteAbgrPre translucent,graphics.opts.alpharule=SrcOver,graphics.opts.sizes=100:
fix: 325989.80002 (var=1.58%) (100.0%)
*********************************************************** |
************************************************************|
************************************************************|
base: 200830.44521 (var=1.58%) (61.61%)
*************************************                       |
*************************************                       |
*************************************                       |
global.dest=BufImg(IntArgbPre),graphics.imaging.src=4ByteAbgrPre translucent,graphics.opts.alpharule=SrcOver,graphics.opts.sizes=4000:
fix: 669322.70916 (var=2.51%) (100.0%)
***********************************************************|
***********************************************************|
***********************************************************|
base: 414183.63219 (var=1.92%) (61.88%)
************************************                       |
*************************************                      |
************************************                       |
global.dest=BufImg(IntArgbPre),graphics.imaging.src=IntArgbPre translucent,graphics.opts.alpharule=Src,graphics.opts.sizes=1:
fix: 5269.461177 (var=3.96%) (100.0%)
***********************************************************|
***********************************************************|
***********************************************************|
base: 5160.437167 (var=3.78%) (97.93%)
********************************************************** |
********************************************************** |
********************************************************** |
global.dest=BufImg(IntArgbPre),graphics.imaging.src=IntArgbPre translucent,graphics.opts.alpharule=Src,graphics.opts.sizes=100:
fix: 6935187.25099 (var=1.78%) (100.0%)
***********************************************************|
***********************************************************|
***********************************************************|
base: 6965785.00331 (var=1.77%) (100.44%)
***********************************************************|
***********************************************************|
***********************************************************|
global.dest=BufImg(IntArgbPre),graphics.imaging.src=IntArgbPre translucent,graphics.opts.alpharule=Src,graphics.opts.sizes=4000:
fix: 3306367.64116 (var=0.28%) (100.0%)
************************************************************|
************************************************************|
************************************************************|
base: 3299477.42194 (var=0.2%) (99.79%)
************************************************************|
************************************************************|
************************************************************|
global.dest=BufImg(IntArgbPre),graphics.imaging.src=IntArgbPre translucent,graphics.opts.alpharule=SrcOver,graphics.opts.sizes=1:
fix: 4749.510552 (var=1.42%) (100.0%)
**********************************************************|
**********************************************************|
**********************************************************|
base: 4815.946172 (var=1.9%) (101.4%)
**********************************************************|
**********************************************************|
**********************************************************|
global.dest=BufImg(IntArgbPre),graphics.imaging.src=IntArgbPre translucent,graphics.opts.alpharule=SrcOver,graphics.opts.sizes=100:
fix: 304242.38445 (var=0.24%) (100.0%)
***********************************************************|
***********************************************************|
***********************************************************|
base: 305949.81111 (var=1.6%) (100.56%)
***********************************************************|
***********************************************************|
***********************************************************|
global.dest=BufImg(IntArgbPre),graphics.imaging.src=IntArgbPre translucent,graphics.opts.alpharule=SrcOver,graphics.opts.sizes=4000:
fix: 627239.66051 (var=0.12%) (100.0%)
************************************************************|
************************************************************|
************************************************************|
base: 626143.08768 (var=0.36%) (99.83%)
************************************************************|
************************************************************|
************************************************************|

Summary:
  fix: 
    Number of tests:  24
    Overall average:  1079811.0981650536
    Best spread:      0.04% variance
    Worst spread:     3.96% variance
    (Basis for results comparison)

  base: 
    Number of tests:  24
    Overall average:  1045483.0946309794
    Best spread:      0.2% variance
    Worst spread:     17.85% variance
    Comparison to basis:
      Best result:      102.51% of basis
      Worst result:     58.4% of basis
      Number of wins:   1
      Number of ties:   16
      Number of losses: 7;;;","2022-11-27 02:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11376
Date: 2022-11-27 06:26:48 +0000;;;","2022-11-29 23:31;dukebot;Changeset: 8ffed34e
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-11-30 07:29:32 +0000
URL:       https://git.openjdk.org/jdk/commit/8ffed34e1da0ad2b9b6503f13831843dadfed319
;;;","2023-05-24 12:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1392
Date: 2023-05-24 06:40:47 +0000;;;","2023-06-29 00:34;serb;Fix request (17u)

Clean backport. The fix for color conversion optimization and accuracy. Verified by the new test, all other ""java_desktop"" tests are green.

Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1392;;;","2023-07-17 14:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2045
Date: 2023-07-17 20:06:49 +0000;;;","2023-07-19 13:01;serb;Fix request (11u)

Clean backport. The fix for color conversion optimization and accuracy. Verified by the new test, all other ""java_desktop"" tests are green.

Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/2045;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaDoc example for PseudoClass has minor typo,JDK-8297680,5088378,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kpk,swpalmer,swpalmer,2022-11-26 09:31,2022-12-09 16:11,2023-10-01 09:56,2022-11-29 04:53,jfx19,,,,,,,jfx20,javafx,,0,javadoc-javafx,noreg-doc,,,,,,,,,,,,,,,,,,,,"The example code in the javadoc for PseudoClass has a period/dot separating parameters rather than a comma in the call to pseudoClassStateChanged:

       @Override protected void invalidated() {
           pseudoClassStateChanged(MAGIC_PSEUDO_CLASS. get());
       }

instead of:

       @Override protected void invalidated() {
           pseudoClassStateChanged(MAGIC_PSEUDO_CLASS, get());
       }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zeez:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-11-29 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/964
Date: 2022-11-29 10:06:57 +0000;;;","2022-11-29 04:53;dukebot;Changeset: d040c1f0
Author:    Karthik P K <karthik.p.k@oracle.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-11-29 12:52:03 +0000
URL:       https://git.openjdk.org/jfx/commit/d040c1f0153411479ca35c58045f70040657f7ac
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InvocationTargetException field named target is not declared final,JDK-8297679,5088376,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,forax,forax,2022-11-26 03:58,2022-12-15 00:01,2023-10-01 09:56,2022-12-08 16:30,20,,,,,,,21,core-libs,,0,noreg-hard,starter,,,,,,,,,,,,,,,,,,,,"There is a publication issue because the field of InvocationTargetException is not declared final

public class InvocationTargetException extends ReflectiveOperationException {
    /**
     * Use serialVersionUID from JDK 1.1.X for interoperability
     */
    @java.io.Serial
    private static final long serialVersionUID = 4085088731926701167L;

    /**
     * This field holds the target if the
     * InvocationTargetException(Throwable target) constructor was
     * used to instantiate the object
     *
     * @serial
     *
     */
    private Throwable target;    // <--- oops

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zeej:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2022-12-08 10:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11599
Date: 2022-12-08 18:10:12 +0000;;;","2022-12-08 16:30;dukebot;Changeset: 7f9c6ce3
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-12-09 00:29:08 +0000
URL:       https://git.openjdk.org/jdk/commit/7f9c6ce3318aedfd85f12f4002dc442b0b468c27
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DataBuffer.TYPE_SHORT/TYPE_FLOAT/TYPE_DOUBLE are not placeholders,JDK-8297676,5088369,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-11-25 18:34,2022-12-05 14:03,2023-10-01 09:56,2022-11-29 20:18,17,20,,,,,,20,client-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"The specification for the DataBuffer.TYPE_SHORT/TYPE_FLOAT/TYPE_DOUBLE mentioned that all of them are ""Placeholder for future use"" which is not true, see:
https://docs.oracle.com/en/java/javase/19/docs/api/java.desktop/java/awt/image/DataBuffer.html#TYPE_DOUBLE
https://docs.oracle.com/en/java/javase/19/docs/api/java.desktop/java/awt/image/DataBuffer.html#TYPE_FLOAT
https://docs.oracle.com/en/java/javase/19/docs/api/java.desktop/java/awt/image/DataBuffer.html#TYPE_SHORT

They are used and it is possible to create the ComponentColorModel for each of these transferType. Also, there is a specific data buffer for each: DataBufferFloat, DataBufferDouble, and DataBufferShort.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297677,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zecz:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-11-25 20:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11374
Date: 2022-11-26 02:58:15 +0000;;;","2022-11-29 20:18;dukebot;Changeset: 37f613ba
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-11-30 04:16:13 +0000
URL:       https://git.openjdk.org/jdk/commit/37f613bad3b01b40d518de34630e1e6d63737a4c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
name demangling intermittently fails,JDK-8297657,5088346,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fbredberg,dnsimon,dnsimon,2022-11-25 09:12,2023-05-17 16:51,2023-10-01 09:56,2023-05-11 07:04,20,,,,,,,21,hotspot,,0,hs_err,intermittent,os,starter,,,,,,,,,,,,,,,,,,"When JDK-7186778 refactored MachODecoder, the AbstractDecoder::_decoder_status field was left uninitialized for MachODecoder instances.

On macosx-aarch64, this causes name demangling to occasionally fail (e.g. in hs-err stack traces). I assume the same thing happens on macosx-amd64 as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-7141259,,,,,,,,,"2022-11-25 09:40;dnsimon;JDK-8297657.patch;https://bugs.openjdk.org/secure/attachment/101809/JDK-8297657.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ze7v:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-25 09:41;dnsimon;I think the attached JDK-8297657.patch would fix this.;;;","2023-05-09 05:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13883
Date: 2023-05-09 08:27:25 +0000;;;","2023-05-11 07:04;dukebot;Changeset: 2bf7ac58
Author:    Fredrik Bredberg <fredrik.bredberg@oracle.com>
Committer: Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-05-11 14:02:54 +0000
URL:       https://git.openjdk.org/jdk/commit/2bf7ac58b7971f6813066dac7e88a855d597d731
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Drop the test/jdk/java/net/httpclient/reactivestreams-tck-tests/TckDriver.java test,JDK-8297645,5088333,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2022-11-25 07:33,2022-12-08 15:14,2023-10-01 09:56,2022-12-02 02:30,20,,,,,,,20,core-libs,,0,httpclient,noreg-self,,,,,,,,,,,,,,,,,,,,"The java/net/httpclient/reactivestreams-tck-tests/TckDriver.java was useful when developing the HTTP client APIs. However, it is now a burden to run this test, which is now the longest running HttpClient test. This change proposes to drop the test from the non regression test suite.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ze4z:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-11-29 10:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11420
Date: 2022-11-29 17:50:07 +0000;;;","2022-12-02 02:47;dukebot;Changeset: 6d0fbb2c
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-12-02 10:44:29 +0000
URL:       https://git.openjdk.org/jdk/commit/6d0fbb2c49d904ac353b4a2ebc694e3d1609bd76
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: Compilation error when shenandoah is disabled,JDK-8297644,5088332,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-11-25 07:09,2023-07-09 19:11,2023-10-01 09:56,2022-11-30 04:58,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"If configuring with `--disable-jvm-feature-shenandoahgc`, the risc-v port fails to build.",,,,,,,,,,,JDK-8311700,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,,,,,,"0|i2ze4r:",9223372036854775807,b26,,,,,,,,,,,,"2022-11-25 07:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11370
Date: 2022-11-25 15:12:01 +0000;;;","2022-11-30 04:58;dukebot;Changeset: 4d730f56
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-11-30 12:56:25 +0000
URL:       https://git.openjdk.org/jdk/commit/4d730f561fc493a956386b053de492933933ff54
;;;","2023-03-22 00:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/22
Date: 2023-03-22 07:43:11 +0000;;;","2023-06-19 20:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PhaseIdealLoop::only_has_infinite_loops must detect all loops that never lead to termination,JDK-8297642,5088330,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,epeter,epeter,2022-11-25 06:33,2023-05-24 00:39,2023-10-01 09:56,2022-12-08 07:32,17,20,,,,,,20,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,"This is a reduction from a fuzzer test I am using for JDK-8280126, but it used to work on my un-synced repo. Probably it is related to the issues in JDK-8294217.

When I last debugged the test, it seemed to create an infinite irreducible loop, that did not have a NeverBranch node inserted. That was also against my assumption at the time. But I was able to work around that. Now it seems to be triggered in maiinline already.

Reproduce it:
java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm TestIrreducibleInfiniteNoNeverBranch.jasm
java -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:CompileCommand=compileonly,TestIrreducibleInfiniteNoNeverBranch::test* -XX:-TieredCompilation -XX:-RenumberLiveNodes -Xbatch -Xcomp -XX:PerMethodTrapLimit=0 -XX:+TraceLoopOpts TestIrreducibleInfiniteNoNeverBranch

I vaguely remember that -XX:PerMethodTrapLimit=0 was required to create this graph.

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/loopnode.cpp:4300
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/loopnode.cpp:4300), pid=1154129, tid=1154142
#  assert(_ltree_root->_child == __null || C->has_loops() || only_has_infinite_loops() || C->has_exception_backedge()) failed: parsing found no loops but there are some
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-11-25-1142101.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-11-25-1142101.emanuel..., compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xf685e3]  PhaseIdealLoop::build_and_optimize()+0x353
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/emanuel/Documents/debug-tools/bytecode-fuzzer/core.1154129)
#
# An error report file with more information is saved as:
# /home/emanuel/Documents/debug-tools/bytecode-fuzzer/hs_err_pid1154129.log
#
# Compiler replay data is saved as:
# /home/emanuel/Documents/debug-tools/bytecode-fuzzer/replay_pid1154129.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#",,,,,,,,,,,JDK-8298861,JDK-8300219,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296318,JDK-8280126,JDK-8299214,,,,,,,,,JDK-8294217,,,,,,,,,"2022-11-25 06:50;epeter;TestIrreducibleInfiniteNoNeverBranch.jasm;https://bugs.openjdk.org/secure/attachment/101808/TestIrreducibleInfiniteNoNeverBranch.jasm","2022-11-25 06:32;epeter;hs_err_pid1154129.log;https://bugs.openjdk.org/secure/attachment/101806/hs_err_pid1154129.log","2022-11-25 06:32;epeter;replay_pid1154129.log;https://bugs.openjdk.org/secure/attachment/101805/replay_pid1154129.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ze4b:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-25 06:40;chagedorn;ILW = Debug assert in C2, single irreducible test case and debug VM only, no workaround = MLH = P4;;;","2022-11-25 06:51;epeter;A second from those fuzzer tests also produces this same assert.
test_020 and test_021;;;","2022-12-02 01:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11473
Date: 2022-12-02 08:11:06 +0000;;;","2022-12-02 02:55;epeter;Note, the bug is NOT limited to irreducible loops.;;;","2022-12-08 07:32;dukebot;Changeset: d562d3fc
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-12-08 15:29:26 +0000
URL:       https://git.openjdk.org/jdk/commit/d562d3fcbe22a0443037c5b447e1a41401275814
;;;","2023-01-11 06:43;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, fixes an assertion. Related issues are either backported or just discuss this issue.
Clean backport.
Test passes and fails without the fix.  SAP nighlty testing passed.;;;","2023-01-11 07:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1058
Date: 2023-01-11 14:49:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Increase buffer size for buf (insert_features_names) in Abstract_VM_Version::insert_features_names,JDK-8297640,5088327,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,epeter,epeter,2022-11-25 05:36,2022-11-30 23:44,2023-10-01 09:56,2022-11-27 05:42,20,,,,,,,20,hotspot,,0,noreg-build,,,,,,,,,,,,,,,,,,,,,"Running ./java --version on my machine crashes a debug build.

(I already encounter issues during build, actually, but it seems the ""java"" executable is already build at that time, and just crashes when it gets invoked)

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/abstract_vm_version.cpp:311
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/emanuel/Documents/fork7-jdk/open/src/hotspot/share/runtime/abstract_vm_version.cpp:311), pid=1142703, tid=1142704
#  assert(res > 0) failed: not enough temporary space allocated
#
# JRE version:  (20.0) (slowdebug build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-11-25-1222340.emanuel..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x344cdc]  Abstract_VM_Version::insert_features_names(char*, unsigned long, char const**)+0x82
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/emanuel/Documents/fork7-jdk/build/linux-x64-slowdebug/jdk/bin/core.1142703)
#
# An error report file with more information is saved as:
# /home/emanuel/Documents/fork7-jdk/build/linux-x64-slowdebug/jdk/bin/hs_err_pid1142703.log
#
#

The problem seems to be that we have limited the buffer size char buf[512]; .
src/hotspot/cpu/x86/vm_version_x86.cpp line 992
If I raise it to 1024, everything works.
The string produced is (514 characters):
(8 cores per cpu, 2 threads per core) family 6 model 141 stepping 1 microcode 0x40, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, tscinvbit, avx, avx2, aes, erms, clmul, bmi1, bmi2, adx, avx512f, avx512dq, avx512cd, avx512bw, avx512vl, sha, fma, vzeroupper, avx512_vpopcntdq, avx512_vpclmulqdq, avx512_vaes, avx512_vnni, clflush, clflushopt, clwb, avx512_vbmi2, avx512_vbmi, rdtscp, rdpid, fsrm, gfni, avx512_bitalg, f16c, pku, ospke, cet_ibt, cet_ss, avx512_ifma
I compared it to an un-synced repo, and get (501 characters):
(8 cores per cpu, 2 threads per core) family 6 model 141 stepping 1 microcode 0x40, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, tscinvbit, avx, avx2, aes, erms, clmul, bmi1, bmi2, adx, avx512f, avx512dq, avx512cd, avx512bw, avx512vl, sha, fma, vzeroupper, avx512_vpopcntdq, avx512_vpclmulqdq, avx512_vaes, avx512_vnni, clflush, clflushopt, clwb, avx512_vbmi2, avx512_vbmi, rdtscp, rdpid, fsrm, gfni, avx512_bitalg, f16c, pku, ospke, cet_ibt, cet_ss
I assume the 512 byte limit is arbitrary and could be raised?
Looks like ""avx512_ifma"" was recently added
JDK-8288047
https://github.com/openjdk/jdk/commit/f12710e938b36594623e9c82961d8aa0c0ef29c2


Proposed patch
diff --git a/src/hotspot/cpu/x86/vm_version_x86.cpp b/src/hotspot/cpu/x86/vm_version_x86.cpp
index e981498f7d6..5a45c29307e 100644
--- a/src/hotspot/cpu/x86/vm_version_x86.cpp
+++ b/src/hotspot/cpu/x86/vm_version_x86.cpp
@@ -989,7 +989,7 @@ void VM_Version::get_processor_features() {
     _has_intel_jcc_erratum = IntelJccErratumMitigation;
   }
 
-  char buf[512];
+  char buf[1024];
   int res = jio_snprintf(
               buf, sizeof(buf),
               ""(%u cores per cpu, %u threads per core) family %d model %d stepping %d microcode 0x%x"",",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288047,,,,,,,,,,,,,,,,,,,,"2022-11-25 05:37;epeter;hs_err_pid1142703.log;https://bugs.openjdk.org/secure/attachment/101804/hs_err_pid1142703.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ze3n:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-25 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11366
Date: 2022-11-25 13:46:15 +0000;;;","2022-11-27 05:41;dukebot;Changeset: 2f83b5c4
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-11-27 13:41:26 +0000
URL:       https://git.openjdk.org/jdk/commit/2f83b5c487f112c175d081ca5882f5032518937a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in case of many started-dead threads,JDK-8297638,5088325,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,eushakov,eushakov,2022-11-25 05:23,2023-03-23 00:33,2023-10-01 09:56,2023-03-17 17:26,,,,,,,,21,core-svc,,0,capbug,,,,,,,,,,,,,,,,,,,,,"The full description is in the bug https://youtrack.jetbrains.com/issue/IDEA-305777/Memory-leak-from-com.jetbrains.jdi.VirtualMachineImpl-when-debugging-programs.
In short: if the program is creating a lot of short living threads and just being run under the debugger with enabled threadStart and threadDeath events enabled, jdi will consume more and more memory until OOM.
The problem is split into two places:
1. VirtualMachineImpl.processBatchedDisposes is invoked only inside waitForTargetReply, so if no commands are sent to the debugger it will never be called and batchedDisposeRequests may grow too big
2. unreachable listeners are removed from VMState.listeners only when something is happening with the debugger (VMState.processVMAction is called), which is not happening in our case, so listeners list grows and grows

We've fixed this in IntelliJ jdi fork this way: https://github.com/JetBrains/intellij-deps-jdi/commit/ca1b639d9fd648dd075f258517fdd1635d0eec2d
https://github.com/JetBrains/intellij-deps-jdi/commit/0b6b28d83e4ceaf3a550ebbf1eaeaf23b650f1c7

probably worth fixing in openjdk as well",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304436,JDK-8304432,JDK-8304449,,,,,,,"2022-11-27 23:06;ddamodaran;ThreadsHang.zip;https://bugs.openjdk.org/secure/attachment/101816/ThreadsHang.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ze37:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-11-26 10:49;ddamodaran;[~dholmes] This issue seems to be related to JDK-8296463. The scenario is a bit different (a debugger must be attached) but ultimately the same users will be impacted by both issues.;;;","2022-11-26 19:23;dholmes;[~ddamodaran] yes JDK-8296463 would be a factor here - as per the update to the JetBrains bug report. I don't know if mainline OpenJDK has the same JDI issue.;;;","2022-11-27 21:41;cjplummer;[~eushakov] Can you attach a test case. I noticed the jetbrains issue references an ""attached project"", but I don't have access to it (it says ""There is 1 attachment that is not visible to you"").;;;","2022-11-27 23:06;ddamodaran;[~cjplummer] The same testcase (attached zip) which was used for JDK-8296463 should work here. Additional thing is to attach a debugger at the startup. 
[~eushakov] Please confirm this. 
;;;","2022-11-27 23:55;cjplummer;Ok. I'm just going to launch it with the command line. Any special command line arguments? I assume at the very least I need to enable the debug agent.;;;","2022-11-28 06:30;eushakov;yes, just attach the debugger and enable ThreadStartEvent and ThreadDeathEvent, then just leave the program working for some time;;;","2022-12-04 04:27;alanb;It looks like this dates back to JDK 8, maybe longer. In the bug report, the IDE/debugger is running on a JDK 17 build (the target VM is JDK 19 but that doesn't matter for this issue).  One approach to try is replacing listeners with a WeakHashMap (with a value of type Boolean, unused) so that additions will automatically expunge stale refs. That should help removeListener implementations too, as they are currently O(n).;;;","2022-12-21 11:11;cjplummer;It tried to reproduce this in jdb, but couldn't until I did some hacking on jdb. VirtualMachineImpl.processBatchedDisposes() is constantly being called. ThreadStartEvent triggers the following:

	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.processBatchedDisposes(VirtualMachineImpl.java:1328)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.waitForTargetReply(VirtualMachineImpl.java:1180)
	at jdk.jdi/com.sun.tools.jdi.PacketStream.waitForReply(PacketStream.java:89)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$Resume.waitForReply(JDWP.java:614)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.resume(VirtualMachineImpl.java:503)
	at jdk.jdi/com.sun.tools.jdi.EventSetImpl.resume(EventSetImpl.java:838)
	at jdk.jdi/com.sun.tools.example.debug.tty.EventHandler.run(EventHandler.java:82)
	at java.base/java.lang.Thread.run(Thread.java:1623)

This is partly due to using the SUSPEND_ALL policy on the event request. I changed this to SUSPEND_NONE, and did so for ThreadDeathRequest also. I also had to change jdb to not call VirtualMachine.resume() when the EventSet indicates SUSPEND_NONE. That got rid of the above triggering of processBatchedDisposes(), and also sped things up by about 100x. I then ran into the following call to processBatchedDisposes()

	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.processBatchedDisposes(VirtualMachineImpl.java:1328)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.waitForTargetReply(VirtualMachineImpl.java:1180)
	at jdk.jdi/com.sun.tools.jdi.PacketStream.waitForReply(PacketStream.java:89)
	at jdk.jdi/com.sun.tools.jdi.JDWP$ThreadReference$IsVirtual.waitForReply(JDWP.java:6050)
	at jdk.jdi/com.sun.tools.jdi.JDWP$ThreadReference$IsVirtual.process(JDWP.java:6031)
	at jdk.jdi/com.sun.tools.jdi.ThreadReferenceImpl.isVirtual(ThreadReferenceImpl.java:615)
	at jdk.jdi/com.sun.tools.example.debug.tty.ThreadInfo.addThread(ThreadInfo.java:88)
	at jdk.jdi/com.sun.tools.example.debug.tty.EventHandler.threadStartEvent(EventHandler.java:315)
	at jdk.jdi/com.sun.tools.example.debug.tty.EventHandler.handleEvent(EventHandler.java:149)
	at jdk.jdi/com.sun.tools.example.debug.tty.EventHandler.run(EventHandler.java:78)
	at java.base/java.lang.Thread.run(Thread.java:1623)

This is due to virtual thread support that was added to jdb. We now frequently have to send a ThreadReference.IsVirtual command. Since the test does not use virtual threads, I simply commented all of this code out. After doing that I was able to reproduce the memory leak and eventual OOME. It only took a few minutes (525k threads) when I ran with -Xmx64m.

After applying the patches I started seeing calls to processBatchedDisposes() due to the changes in processQueue():

	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.processBatchedDisposes(VirtualMachineImpl.java:1328)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.processQueue(VirtualMachineImpl.java:1386)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.objectMirror(VirtualMachineImpl.java:1393)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.threadMirror(VirtualMachineImpl.java:1498)
	at jdk.jdi/com.sun.tools.jdi.PacketStream.readThreadReference(PacketStream.java:457)
	at jdk.jdi/com.sun.tools.jdi.JDWP$Event$Composite$Events$ThreadStart.<init>(JDWP.java:8522)
	at jdk.jdi/com.sun.tools.jdi.JDWP$Event$Composite$Events.<init>(JDWP.java:7870)
	at jdk.jdi/com.sun.tools.jdi.JDWP$Event$Composite.<init>(JDWP.java:8905)
	at jdk.jdi/com.sun.tools.jdi.EventSetImpl.build(EventSetImpl.java:646)
	at jdk.jdi/com.sun.tools.jdi.EventQueueImpl.removeUnfiltered(EventQueueImpl.java:212)
	at jdk.jdi/com.sun.tools.jdi.EventQueueImpl.removeInternal(EventQueueImpl.java:125)
	at jdk.jdi/com.sun.tools.jdi.InternalEventHandler.run(InternalEventHandler.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1623)

So hopefully this is what the patches were trying to accomplish. The test got through 34,502,000 threads without any sign of leaking. No OOME, and top showed the memory usage as constant once the test warmed up.

Still to do is writing a standalone test (not one that requires running with jdb or IDEA), and then I still need to better understand the changes and consider Alan's suggestion.;;;","2023-01-11 20:12;cjplummer;Here's a simpler test case that doesn't require com.google.common.* or org.slf4j.Logger classes. Run with:

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.LongAdder;

public class PTTest
{
    private final ThreadFactory blockingTasksThreadFactory = new ThreadFactory() {
            @Override
            public Thread newThread(Runnable runnable) {
                Thread thread = Executors.defaultThreadFactory().newThread(runnable);
                return thread;
            }
        };

    private final ExecutorService blockingTasksExecutor = Executors.
        newThreadPerTaskExecutor(blockingTasksThreadFactory);

    public static void main(String[] args) throws InterruptedException
    {
        PTTest testcase = new PTTest();
        testcase.run();
    }

    public void run() throws InterruptedException
    {
        Semaphore semaphore = new Semaphore(500);
        LongAdder adder = new LongAdder();
        while (true) {
                semaphore.acquire();
                blockingTasksExecutor.submit(() -> {
                        adder.increment();
                        long sum = adder.sum();
                        if ((sum % 1000) == 0)
                            System.out.println(""Progress: "" + sum);
                        try {
                            Thread.sleep(50);
                        }
                        catch (InterruptedException e) {
                            throw new RuntimeException(e);
                        } finally {
                            semaphore.release();
                        }
                    });
        }
    }
}
;;;","2023-01-18 12:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12081
Date: 2023-01-18 20:06:33 +0000;;;","2023-03-17 13:17;cjplummer;Since the initial recommended fix is working and well tested, I will be pushing it. I filed JDK-8304432 for Alan's suggestion to use a WeakHashmap.;;;","2023-03-17 17:26;dukebot;Changeset: f8482c20
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-03-18 00:23:58 +0000
URL:       https://git.openjdk.org/jdk/commit/f8482c20f4f55d4fc5b304a33c87775b5acfe2b8
;;;",,,,,,,,,,,,,,,,,,,,,,,
JFR: Incorrect duration after chunk rotation,JDK-8297608,5088291,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,egahlin,egahlin,egahlin,2022-11-24 21:44,2023-01-19 10:29,2023-10-01 09:56,2022-12-02 09:23,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"When the JVM rotates to a new chunk, a notified flag is set. This is so an ongoing Java event can redo the event with a stack trace ID that is present in the new chunk. This means the logic in the commit method is executed twice.

Currently there is a check if the startTime has been set. 

In the first iteration, it's zero, indicating an event without a duration. 

In the second iteration, it's no longer zero, and the code incorrectly assumes this was because the user called begin(), so it complete the event with a duration. This leads to events with a small duration, typically a few microseconds.

This is a regression introduced in JDK 19. See JDK-8282420 JFR: Remove event handlers. Previously the repetition happened in a separate method, meaning the startTime was a new stack variable instead of a field value, so it never occurred.

Impact: Medium, no dataloss but could potentially break program that expects the duration to be zero. 
Likelihood: High, likely to happen in a longer recording if JFR is being used
Workaround: High, no known workaround

MHH => P2
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zdvn:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,Verified,,"2022-11-25 05:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11364
Date: 2022-11-25 13:10:04 +0000;;;","2022-12-02 09:23;dukebot;Changeset: 1b924659
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-12-02 17:21:48 +0000
URL:       https://git.openjdk.org/jdk/commit/1b924659c87045796f62e66d69ff388b79c4467f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] Broken build after JDK-8295475,JDK-8297606,5088289,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,tsteele,tsteele,tsteele,2022-11-24 15:09,2022-12-12 13:49,2023-10-01 09:56,2022-12-05 06:55,,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"After JDK-8295475, compiling with xlclang++ complains about many objects which inherit the ResourceObj class.

Sample error output:

In file included from ad_ppc.cpp:33:
/home/hotspot/openjdk/jdk-tyler/src/hotspot/share/code/compiledIC.hpp:280:22: error: attempt to use a deleted function
  CompiledIC* c_ic = new CompiledIC(nm, nativeCall_before(return_addr));
                     ^
/home/hotspot/openjdk/jdk-tyler/src/hotspot/share/memory/allocation.hpp:443:9: note: 'operator delete' has been explicitly marked deleted here
  void  operator delete(void* p) = delete;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295475,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,"0|i2zdv7:",9223372036854775807,b27,,,,,,,,,,,,"2022-11-30 13:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11443
Date: 2022-11-30 21:19:35 +0000;;;","2022-12-01 01:30;kbarrett;As an experiment, can you try making the CompiledIC constructor noexcept?  (And perhaps other classes, to ensure parallel build is hitting some.  Or maybe disable parallelism in the build and do the first one that fails.)

;;;","2022-12-05 06:55;dukebot;Changeset: 32884592
Author:    Tyler Steele <tsteele@openjdk.org>
Date:      2022-12-05 14:53:52 +0000
URL:       https://git.openjdk.org/jdk/commit/328845926d3c1984f65450bfe01ebbc2c0315a69
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
improve DelayQueue removal method javadoc,JDK-8297605,5088288,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,martin,swpalmer,swpalmer,2022-11-24 13:26,2023-08-09 10:36,2023-10-01 09:56,2023-03-31 11:13,19.0.2,,,,,,,21,core-libs,,0,javadoc,,,,,,,,,,,,,,,,,,,,,"The documentation for java.util.concurrent.DelayQueue states:

""The head of the queue is that Delayed element whose delay expired furthest in the past. If no delay has expired there is no head and poll will return null.""

However the documentation for the peek() method states:

""Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. Unlike poll, if no expired elements are available in the queue, this method returns the element that will expire next, if one exists.""

With a return value documented as: ""the head of this queue, or null if this queue is empty""

I believe the wording that states ""If no delay has expired there is no head..."" is confusing and inconsistent with the documentation for peek().
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304686,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zduz:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,Verified,,"2022-11-24 23:55;martin;I agree the javadoc for DelayQueue can be improved.

DelayQueue is weird and doesn't really implement the Queue contract.
Different methods have different meanings for ""head"".

Previous documentation efforts have helped, especially:

""Even though unexpired elements cannot be removed using take or poll, they are otherwise treated as normal elements. For example, the size method returns the count of both expired and unexpired elements."";;;","2022-11-27 16:03;dholmes;> With a return value documented as: ""the head of this queue, or null if this queue is empty"" 

I think this is the part that is lacking as the possible return value is one of:
- the head of the queue if there is one (by definition of head being an expired element)
- null if the queue is empty
- the first unexpired element if the queue is non-empty and has no ""head"";;;","2023-01-02 06:14;vklang;[~swpalmer]

Would something to the following effect be less confusing?

/**
     * Retrieves, but does not remove, the head of this queue, or
     * returns {@code null} if this queue is empty.  Unlike
     * {@code poll}, this method may return an element which
     * has not yet expired.
     *
     * @return the head of this queue, or {@code null} if this
     *         queue is empty
     */;;;","2023-01-02 06:38;swpalmer;Yes, that’s better.  
It’s the idea of a non-empty queue having “no head” that seems wrong to me.  I don’t like the definition of “head” being “an expired element”.  To me it makes more sense to specify how the methods act on the head if it has not expired.  I.e. describe how the behaviour differs from a normal queue without messing around with the definitions of the structure. In this case, when take or poll are called, the head of the queue stays put until it expires.;;;","2023-01-02 18:42;dholmes;> It’s the idea of a non-empty queue having “no head” that seems wrong to me.

DelayQueue isn't a typical container-style data structure. We want the ""head"" to only be expired elements otherwise the caller has to check for expiration themselves. The ability to peek into the internals of the implementation is more for debugging/monitoring.;;;","2023-01-04 07:17;vklang;>DelayQueue isn't a typical container-style data structure. We want the ""head"" to only be expired elements otherwise the caller has to check for expiration themselves.

Indeed, the difference is that DelayQueue isn't a typical FIFO-style queue: rather the element with the lowest ""timestamp"" considered to be the head of the queue, and in some cases it isn't considered the head of the queue (i.e. if the timestamp is in the future).

Perhaps one confusing aspect is that the documentation speaks of the ""delay"" rather than at which point an element is to be made available? (i.e. relativistic vs absolute).;;;","2023-02-21 07:50;vklang;[~swpalmer] I'm inclined to close this unless there's a clearer alternative proposed, as David mentioned above, DelayQueue is a bit different since there's a temporal aspect to the availability of elements.;;;","2023-02-21 21:58;swpalmer;Well I think something should be done. You can’t say you don’t have a head of the queue in one context yet have a method that also says it will return but not remove the head. How can you do that if there is no head?

The way I think of this is that there is always a “head” for a non-empty queue. DelayQueue modifies the behaviour, not the structure, such that poll will return an expired head or null if the head has not expired or the queue is empty. Peek() always returns but does not remove the head, and take() blocks until there is an expired head.

The only part that I would change are these sentences in the DelayQueue description: 

“The head of the queue is that Delayed element whose delay expired furthest in the past. If no delay has expired there is no head and poll will return null.” 

That conflicts with the documentation for peek() which clearly has a different idea of when the queue has a head, stating: “Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.”  I agree with how the peek() method documentation views the head of the queue.
The documentation of poll() and take() are okay as they are, since they never refer to the queue having no head.

I would change those two sentences in the DelayQueue description to:
“The head of the queue is the Delayed element that is expired furthest in the past or is closest to expiring next if no elements have expired. If the queue is empty or the head has not yet expired, poll will return null.” 

I see similarities to a PriorityQueue where the “natural order” is based on the expiration time, but elements are blocked from being removed via poll() or take() until that time has expired. Maybe that isn’t a good way to think of it?;;;","2023-02-22 02:12;vklang;[~swpalmer]

Thanks for your comment, Scott. Reflecting on what you say, what do you think of separating it out to two distinct things: ""expired head"" and ""head""?

So for instance, poll would be:

""     * Retrieves and removes the expired head of this queue, or returns {@code null} if the queue is empty or the current head has not yet expired.""

And take would be:

""     * Retrieves and removes the expired head of this queue, waiting if necessary for the head of the queue to expire.""

Then peek can be:

""     * Retrieves, but does not remove, the head of this queue regardless of its expiration status, or returns {@code null} if this queue is empty.""

Then the following sentence could be removed from the general DelayQueue class documentation:

""If no delay has expired there is no head and {@code poll}
 * will return {@code null}."";;;","2023-02-22 08:25;swpalmer;[~ vklang]

+1 I think that clears things up nicely.;;;","2023-02-22 15:02;dholmes;[~vklang] I like that too! Thanks.;;;","2023-02-23 01:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12727
Date: 2023-02-23 09:05:49 +0000;;;","2023-02-23 07:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12729
Date: 2023-02-23 15:36:48 +0000;;;","2023-03-02 12:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12838
Date: 2023-03-02 20:00:56 +0000;;;","2023-03-31 11:13;dukebot;Changeset: a565be4d
Author:    Martin Buchholz <martin@openjdk.org>
Date:      2023-03-31 18:11:53 +0000
URL:       https://git.openjdk.org/jdk/commit/a565be4dc5fa6bbaa92553763caf6f2cc5c2c2a1
;;;",,,,,,,,,,,,,,,,,,,,
Compiler crash with type annotation and generic record during pattern matching,JDK-8297602,5088285,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abimpoudis,abimpoudis,abimpoudis,2022-11-24 10:50,2022-12-12 13:51,2023-10-01 09:56,2022-12-06 05:02,19,20,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"Reproduction:

    void meth(Foo<Integer> p) {
        switch(p) {
            case Foo<@Annot(field = """") Integer>(): {} // crash
        };

        if (p instanceof Foo<@Annot(field = """") Integer>()) { // crash

        }
    }

    @Target({ElementType.TYPE_USE})
    @interface Annot {
        String field();
    }

    record Foo<T>() { }

StackTrace:

An exception has occurred in the compiler (20-internal). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError: Unresolved frame: Foo<@Annot(field = """") Integer>() of kind: DECONSTRUCTION_PATTERN
    Looking for tree: Foo<@Annot(field = """") Integer>
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.resolveFrame(TypeAnnotations.java:1092)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.resolveFrame(TypeAnnotations.java:862)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.resolveFrame(TypeAnnotations.java:1029)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.findPosition(TypeAnnotations.java:1440)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.visitAnnotatedType(TypeAnnotations.java:1331)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCAnnotatedType.accept(JCTree.java:3050)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.scan(TypeAnnotations.java:296)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:57)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitTypeApply(TreeScanner.java:368)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCTypeApply.accept(JCTree.java:2796)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.scan(TypeAnnotations.java:296)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitRecordPattern(TreeScanner.java:332)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCRecordPattern.accept(JCTree.java:2459)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.scan(TypeAnnotations.java:296)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitPatternCaseLabel(TreeScanner.java:321)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCPatternCaseLabel.accept(JCTree.java:2371)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.scan(TypeAnnotations.java:296)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:57)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitCase(TreeScanner.java:180)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCCase.accept(JCTree.java:1328)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.scan(TypeAnnotations.java:296)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:57)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitSwitch(TreeScanner.java:176)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitch.accept(JCTree.java:1287)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.scan(TypeAnnotations.java:296)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:57)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.visitBlock(TypeAnnotations.java:1324)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1082)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.scan(TypeAnnotations.java:296)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.visitMethodDef(TypeAnnotations.java:1214)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:912)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.scan(TypeAnnotations.java:296)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:57)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.visitClassDef(TypeAnnotations.java:1144)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:810)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.scan(TypeAnnotations.java:296)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations.organizeTypeAnnotationsBodies(TypeAnnotations.java:156)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5603)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5466)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5290)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5229)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1318)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:947)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)

Credits to [~mcimadamore] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298150,JDK-8298154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zdub:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-25 10:28;abimpoudis;`TypeAnnotationPosition::resolveFrame` raises the assertion because there is not `DECONSTRUCTION_PATTERN` case to be handled.

After a short discussion with [~jlahoda] we realize that this may require a JVMS adjustment (maybe!).

The `RuntimeVisibleTypeAnnotations` attribute includes all annotations on a type in its `annotations` table. Each annotation (type_annotation structure) needs to specify the type context that that the annotation appears. While there is a `target_type` for the `instanceof` context (correspondence between the Table 4.7.20-B. and the JLS 4.11) there is not one for a switch.;;;","2022-12-06 01:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11532
Date: 2022-12-06 09:28:56 +0000;;;","2022-12-06 05:02;dukebot;Changeset: 1e468320
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-12-06 13:00:10 +0000
URL:       https://git.openjdk.org/jdk/commit/1e468320dc6e495343dbdf392cbcbda79672c7ad
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] HotSpotResolvedJavaFieldTest does not run,JDK-8297590,5088273,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-11-24 08:14,2022-12-08 03:40,2023-10-01 09:56,2022-11-25 08:31,20,,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jvmci,noreg-self,oracle-triage-20,,,,,,,,,,,,,,,,,"JDK-8296967 introduced a new test, HotSpotResolvedJavaFieldTest, which never seems to run. When tried to only run that test it spits this out:

Error: Not a test or directory containing tests: compiler/jvmci/jdk.vm.ci.hotspot.test/src/jdk/vm/ci/hotspot/test/HotSpotResolvedJavaFieldTest.java

It's missing @test tags et al for it to run. Once that's fixed it runs/passes fine.",,,,,,,,,,,JDK-8298378,JDK-8297720,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296967,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2zdrn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-24 08:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11358
Date: 2022-11-24 16:33:00 +0000;;;","2022-11-25 00:18;chagedorn;ILW = Test is not run due to missing @test annotation, single test, no impact = LLL = P5;;;","2022-11-25 06:22;sgehwolf;Note: JDK-8296956 changed the createField() method signature from long to int.;;;","2022-11-25 08:31;dukebot;Changeset: 08e6a820
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-11-25 16:29:53 +0000
URL:       https://git.openjdk.org/jdk/commit/08e6a820bcb70e74a0faa28198493292e2993901
;;;","2022-11-25 09:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/936
Date: 2022-11-25 17:47:58 +0000;;;","2022-11-28 01:28;sgehwolf;Fix Request (OpenJDK 17u):

Clean, test only change which would be nice to have in 17u as it verifies some functionality recently added: JDK-8296967. jvmci tests now include the test when run and it passes. Risk is low as it's a test-only change.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: very slow compilation due to type system verification code,JDK-8297582,5088264,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2022-11-24 06:31,2023-02-08 23:35,2023-10-01 09:56,2023-02-02 00:31,11,17,19,20,8,,,21,hotspot,,0,c2,oracle-triage-20,,,,,,,,,,,,,,,,,,,,"Compilation appears stuck when running attached test case (but I think is only very slow):
java -XX:-TieredCompilation -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:+PrintCompilation TestArrayManyDimensions",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297514,,,,,,,,,"2022-11-24 06:30;roland;TestArrayManyDimensions.java;https://bugs.openjdk.org/secure/attachment/101794/TestArrayManyDimensions.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zdpn:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-24 06:32;roland;Similar to what's observed with JDK-8297514;;;","2022-11-24 06:46;thartmann;ILW = C2's type system verification code is extremely slow (very old issue), only affects edge case with debug builds, disable compilation of affected method = MLM = P4;;;","2022-12-14 05:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11673
Date: 2022-12-14 13:26:43 +0000;;;","2023-02-02 00:31;dukebot;Changeset: af474ce3
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-02-02 08:29:19 +0000
URL:       https://git.openjdk.org/jdk/commit/af474ce35997315774e408f2e8a1beecf8349c75
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/threading/TestDeepVirtualStackTrace.java fails with -XX:-UseTLAB,JDK-8297570,5088250,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-11-24 03:24,2022-12-05 14:01,2023-10-01 09:56,2022-11-28 06:51,19,20,,,,,,20,hotspot,,0,testbug,,,,,,,,,,,,,,,,,,,,,"This is the only test in `jdk_loom` that fails without `-XX:-UseTLAB`. The test specifically looks for `ObjectAllocationOutsideTLAB` event, and there are lots of those events with `-XX:-UseTLAB`. We can fix the test to look for the event we actually want.

This depends on JDK-8297491 that fixed Loom code to actually disable TLABs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297491,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zdmj:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-11-24 03:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11352
Date: 2022-11-24 11:32:29 +0000;;;","2022-11-28 06:51;dukebot;Changeset: 405b1886
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-11-28 14:49:28 +0000
URL:       https://git.openjdk.org/jdk/commit/405b1886b3924a7b5d258b7e8190802d489c6ab5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
URLPermission constructor throws IllegalArgumentException: Invalid characters in hostname after JDK-8294378,JDK-8297569,5088249,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jpai,jpai,jpai,2022-11-24 03:10,2023-01-16 11:12,2023-10-01 09:56,2022-11-24 17:25,11.0.19-oracle,17.0.7-oracle,20,8u371,8u371-perf,,,20,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,regression,tck-red-11.0.19-oracle,tck-red-8u371,tck-red-8u371-perf,,,,,,,,,,,,,,"The code in java.net.URLPermission was recently changed to fix the issue noted in https://bugs.openjdk.org/browse/JDK-8294378. After that change, the following code now throws an exception:

new URLPermission(""https://foo_bar:12345/"")

fails with:

|  Exception java.lang.IllegalArgumentException: Invalid characters in hostname
|        at HostPortrange.toLowerCase (HostPortrange.java:192)
|        at HostPortrange.<init> (HostPortrange.java:154)
|        at URLPermission$Authority.<init> (URLPermission.java:529)
|        at URLPermission.parseURI (URLPermission.java:497)
|        at URLPermission.init (URLPermission.java:206)
|        at URLPermission.<init> (URLPermission.java:186)
|        at URLPermission.<init> (URLPermission.java:243)
|        at (#1:1)",,,,,,,,,,,JDK-8298157,JDK-8299820,JDK-8298156,JDK-8300223,JDK-8298155,,,,,,,,,,,,,,,,,,,,JDK-8297383,,,,,,,JDK-8294378,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zdmb:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-11-24 04:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11353
Date: 2022-11-24 12:19:13 +0000;;;","2022-11-24 17:25;dukebot;Changeset: 2f47f83a
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-11-25 01:23:53 +0000
URL:       https://git.openjdk.org/jdk/commit/2f47f83addd7f69db2c7070552a7ec67bd07d62e
;;;","2023-01-04 02:56;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Required fix for already backported JDK-8294378.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-01-04 03:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1032
Date: 2023-01-04 10:59:56 +0000;;;","2023-01-12 09:22;goetz;
Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Required fix after backporting JDK-8294378.
Clean backport.
Test passes and fails without the both fixes.  SAP nightly testing passed.;;;","2023-01-12 09:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1651
Date: 2023-01-12 17:20:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Parse::check_interpreter_type fails with assert ""must constrain OSR typestate""",JDK-8297556,5088236,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,thartmann,thartmann,2022-11-23 23:46,2023-01-23 21:50,2023-10-01 09:56,2022-11-25 00:08,20,,,,,,,20,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,tier7,tier8,,,,,,,,,,,,,,,"This reproduces reliably with an internal test:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (workspace/open/src/hotspot/share/opto/parse1.cpp:180), pid=791450, tid=791463
#  assert(_gvn.type(l)->higher_equal(type)) failed: must constrain OSR typestate
#
# JRE version: Java(TM) SE Runtime Environment (20.0+25) (fastdebug build 20-ea+25-1866)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+25-1866, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x175019c]  Parse::check_interpreter_type(Node*, Type const*, SafePointNode*&)+0x56c
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp

Current CompileTask:
C2:    127   26 % !b  4       XXXX @ 38 (94 bytes)

Stack: [0x00007f1a9b537000,0x00007f1a9b638000],  sp=0x00007f1a9b634900,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x175019c]  Parse::check_interpreter_type(Node*, Type const*, SafePointNode*&)+0x56c  (parse1.cpp:180)
V  [libjvm.so+0x1755fc4]  Parse::load_interpreter_state(Node*)+0xfa4
V  [libjvm.so+0x1760e72]  Parse::Parse(JVMState*, ciMethod*, float)+0x5a2
V  [libjvm.so+0x90e730]  ParseGenerator::generate(JVMState*)+0x110
V  [libjvm.so+0xafaf4d]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x168d
V  [libjvm.so+0x90c2e7]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7
V  [libjvm.so+0xb0865c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c
V  [libjvm.so+0xb09468]  CompileBroker::compiler_thread_loop()+0x608
V  [libjvm.so+0x107ba06]  JavaThread::thread_main_inner()+0x206
V  [libjvm.so+0x1a7a9a0]  Thread::call_run()+0x100
V  [libjvm.so+0x1711c53]  thread_native_entry(Thread*)+0x103

(rr) p l->dump(1)
  64  ConP  === 0  [[ 65 63 84 83 ]]  #NULL
  99  CheckCastPP  === 97 89  [[ 83 ]]  #narrowoop: narrowoop: narrowoop: narrowoop: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *[int:>=0] (java/lang/Cloneable,java/io/Serializable) *[int:>=0] (java/lang/Cloneable,java/io/Serializable) *[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact * !jvms: XXXX @ bci:38 (line 59)
  82  Region  === 82 97 87  [[ 82 83 18 ]]  !jvms: XXXX @ bci:38 (line 59)
  83  Phi  === 82 99 64  [[ ]]  #narrowoop: narrowoop: narrowoop: narrowoop: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *[int:>=0] (java/lang/Cloneable,java/io/Serializable) *[int:>=0] (java/lang/Cloneable,java/io/Serializable) *[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact * !jvms: XXXX @ bci:38 (line 59)

(rr) p type->dump_on(tty)
narrowoop: narrowoop: narrowoop: narrowoop: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *$4 = void

(rr) p _gvn.type(l)->dump_on(tty)
narrowoop: narrowoop: narrowoop: narrowoop: int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *[int:>=0] (java/lang/Cloneable,java/io/Serializable) *[int:>=0] (java/lang/Cloneable,java/io/Serializable) *[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact *$6 = void",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297518,JDK-8297514,,,,,,,,,,,,,,,,JDK-6312651,,,,,,,,,"2022-11-24 00:11;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/101784/Test.java","2022-11-24 00:14;thartmann;hs_err_pid793847.log;https://bugs.openjdk.org/secure/attachment/101786/hs_err_pid793847.log","2022-11-24 00:14;thartmann;replay_pid793847.log;https://bugs.openjdk.org/secure/attachment/101787/replay_pid793847.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b25,20,,,,,,,,"0|i2zdjf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-11-23 23:48;thartmann;This is a regression from JDK-6312651.;;;","2022-11-23 23:52;thartmann;ILW = Assert during C2 OSR compilation, reproducible with simple test, no known workaround but disable compilation of affected method = HMM = P2;;;","2022-11-24 00:12;thartmann;I attached a simple reproducer:
java -Xbatch -XX:-TieredCompilation -XX:CompileCommand=compileonly,Test::test Test.java;;;","2022-11-24 00:12;thartmann;Roland, please have a look.;;;","2022-11-24 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11356
Date: 2022-11-24 15:20:27 +0000;;;","2022-11-25 00:08;dukebot;Changeset: cfe5a371
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-11-25 08:06:14 +0000
URL:       https://git.openjdk.org/jdk/commit/cfe5a3716e980734c3d195f7eec8c383337dca2d
;;;","2022-11-28 14:17;dcubed;The fix for this bug was integrated in jdk-20+26-1947.;;;","2023-01-23 21:50;epavlova;The fix and new test were actually reverted as part of JDK-8297934. So nothing to check in jdk20 ATR.
I did run new test manually with latest jdk20 promoted built, no crashes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove Scene.KeyHandler,JDK-8297554,5088234,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mstrauss,mstrauss,mstrauss,2022-11-23 22:43,2022-12-23 08:22,2023-10-01 09:56,2022-12-20 21:49,jfx19,,,,,,,jfx20,javafx,,0,,,,,,,,,,,,,,,,,,,,,,"The `Scene.KeyHandler` class doesn't seem to have a clear purpose, mixing focus handling with event propagation. Since JDK-8268225, `KeyHandler.setFocusVisible` is also called from mouse and touch event handlers, which makes the purpose of the class even less pronounced.

Moving the focus-related functionality next to the other focus functions in the `Scene` class is a safe and straightforward change, and it makes it easier to work with the code in the future.

With the focus-related functions gone, `KeyHandler` only contains a single, small method that is called from `Scene.processKeyEvent`. For simplicity, this code can be rolled into `Scene.processKeyEvent` and the now-empty `KeyHandler` class can be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268225,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zdiz:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-11-23 22:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/962
Date: 2022-11-24 06:49:02 +0000;;;","2022-12-20 21:49;dukebot;Changeset: ac3f60cc
Author:    Michael Strauß <mstrauss@openjdk.org>
Date:      2022-12-21 05:47:07 +0000
URL:       https://git.openjdk.org/jfx/commit/ac3f60ccc1f02a146fecfb4bc388536bd70773ba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update double-conversion to 3.2.0,JDK-8297548,5088229,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,rpallath,rpallath,2022-11-23 21:25,2023-01-26 07:53,2023-10-01 09:56,2023-01-20 06:58,11,,,,,,,11.0.19-oracle,core-libs,,0,15-na,,,,,,,,,,,,,,,,,,,,,Version 3.2.0 of project double-conversion was released on Jan 4th 2022. We should update our port to Java which is from version 3.1.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zdhv:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@51b0542d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Java Updater crashing after updating from 8u321 (or older) to -> 8u351,JDK-8297532,5088188,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,almatvee,jeff,jeff,2022-11-23 13:08,2023-01-05 20:23,2023-10-01 09:56,2022-12-01 15:27,8u331,,,,,,,8u371,install,,0,CPU23_01-critical-approved,CPU23_01-critical-SQE-OK,hgupdate-sync,macos,regression,regression_8275732,release-note=yes,sn_132,,,,,,,,,,,,,,"After upgrading my iMac to Ventura 13.0, the Java updater ran - however, it crashed with the following error. This has now happened 3 times, seems to be the same error each time.

It seems to be a problem with the Sparkle library:
> Termination Reason:    Namespace DYLD, Code 1 Library missing
> Library not loaded: @loader_path/../../../../Frameworks/Sparkle.framework/Versions/A/Sparkle

I've attached the 1st and 3rd crash report as text files.

Bringing up the Java control panel in System Prefs, I appear to have the latest 8 installed (8u351), which happened before I upgraded to Ventura. The Java Updater check ran pretty soon after I did the MacOS upgrade.
",,,,,,,,,,,JDK-8298186,JDK-8298185,JDK-8298287,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298132,JDK-8275732,JDK-8297993,JDK-8298130,JDK-8298209,JDK-8297995,JDK-8297994,JDK-8298210,JDK-8298239,"2022-11-23 13:05;jeff;Screenshot  2022-11-23 at 3.05.21 PM.png;https://bugs.openjdk.org/secure/attachment/101776/Screenshot++2022-11-23+at+3.05.21+PM.png","2022-11-23 13:01;jeff;crash1.txt;https://bugs.openjdk.org/secure/attachment/101779/crash1.txt","2022-11-23 13:01;jeff;crash3.txt;https://bugs.openjdk.org/secure/attachment/101778/crash3.txt","2022-11-23 13:03;jeff;updater-crash.png;https://bugs.openjdk.org/secure/attachment/101777/updater-crash.png",,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,os_x,,,,,,"0|i2zd8r:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4182b7e9,,,,,,,,,"2022-11-28 08:45;jeff;[~almatvee] yes, it crashes the same way on the command line:

[16:24] bender ~> /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin/Contents/Resources/Java\ Updater.app/Contents/MacOS/Java\ Updater 

dyld[95906]: Library not loaded: @loader_path/../../../../Frameworks/Sparkle.framework/Versions/A/Sparkle
  Referenced from: <8CC290A4-C935-3C80-8611-B721602B9EA3> /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Resources/Java Updater.app/Contents/MacOS/Java Updater
  Reason: tried: '/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Resources/Java Updater.app/Contents/MacOS/../../../../Frameworks/Sparkle.framework/Versions/A/Sparkle' (no such file), '/System/Volumes/Preboot/Cryptexes/OS@loader_path/../../../../Frameworks/Sparkle.framework/Versions/A/Sparkle' (no such file), '/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Resources/Java Updater.app/Contents/MacOS/../../../../Frameworks/Sparkle.framework/Versions/A/Sparkle' (no such file), '/System/Library/Frameworks/Sparkle.framework/Versions/A/Sparkle' (no such file, not in dyld cache)

--------------------------------------------------

> Also, can you run otool on Sparkle and see if it can find all dependency? 

[10:44] bender ~> otool -L /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin/Contents/Frameworks/Sparkle.framework/Versions/A/Sparkle
error: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/otool-classic: can't open file: /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Frameworks/Sparkle.framework/Versions/A/Sparkle (No such file or directory);;;","2022-11-28 16:50;jeff;More data:

Jeannette tried this, and ends up in the same situation as me:
Installed 8u261 and and then ran the updater to get it to 8u351.  There is nothing in the Frameworks directory.  8u261 was the first release with sparkle 1.23.0 
;;;","2022-12-01 12:51;efrenkel;[~almatvee] there was a bug in 8u331 AU, JDK-8282212
So any testing that you do with 8u331 you need use b07 and above.
So the test scenario you listed above:
1) Remove all JRE installations.
2) Install 8u321-b07
3) Install 8u331-b01

Not sure if that is why the test failed. Its worth to redo with the GA build;;;","2022-12-01 14:17;rcrihfie;Alexander, looking.  On the third one:

8u321 -> 8u351 -> Result in broken Java Updater due to missing Sparkle -> 8u371 - ok

yes, this is true for ALL cases.  So if you go from
8u321 -> 8u331 = broken -> reinstall 8u331 = all OK again.  Same with 8u341, 8u351, 8u361.

ALSO it has to be a download/cold install, no ""update"" of any kind, to fix.
no manual update via JCP, no auto update, and no javaws (which just uses update code)

I will look at your 8u371 now.  

YES, I can install a pre-8u331 and then 8u371 and new Sparkle is there.;;;","2022-12-02 06:03;rcrihfie;https://wiki.se.oracle.com/display/JPG/MACOSTS

note test 

MAC005-027: Sparkle Update exists after install

    Proving the OLD Sparkle doesn't kill the new one (JDK-8297924)

    Check preconditions
        VERIFY No Oracle JRE/JDK is on the system
    Install JDK 1.8.0_321 which has OLD Sparkle
        VERIFY that the fields of the installed Info.plist are correct.
        VERIFY the Sparkle is there under Frameworks
    Invoke the Install for the JDK under test
    Navigate through the new install
        VERIFY New Java files are fully installed
        VERIFY that all binaries and plugin files are signed
        VERIFY Ping and no unexpected log errors
        VERIFY SwingSet Demo can be run
        VERIFY Default on system is one just installed
        VERIFY Sparkle exists under Frameworks
    AU to a Dummy bundle - Manual AU using JCP is fine
        VERIFY there were no errors on the update
    If all verifications true, test is a PASS;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.IllegalArgumentException: Negative length on strings concatenation,JDK-8297530,5088186,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,redestad,enikitin,enikitin,2022-11-23 12:54,2023-02-01 07:41,2023-10-01 09:56,2022-11-24 09:43,11,17,19,20,9,,,20,core-libs,,0,8-na,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,,,,,,,,,,,,,,"Please excuse for messy generated test (attached).

The issue happens during concatenation of relatively large strings (about a 1MB size). I would expect any other error, like OutOfMemoryError, but not a 'Negative length' given that the expression being evaluated only contains strings and '+' operators.

The exception:
java.lang.IllegalArgumentException: Negative length
        at java.base/jdk.internal.misc.Unsafe.allocateUninitializedArray(Unsafe.java:1378)
        at java.base/java.lang.StringConcatHelper.newArray(StringConcatHelper.java:438)
        at Test_38.method_int_int_287(Test_38.java:2215)
        at Test_38.method_float_float_435(Test_38.java:2312)
        at Test_38.mainTest(Test_38.java:2449)
        at Test_38.main(Test_38.java:2464)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
        at java.base/java.lang.Thread.run(Thread.java:1591)",,,,,,,,,,,JDK-8298531,JDK-8298465,JDK-8297983,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8213035,,,,,,,,,"2022-11-23 12:53;enikitin;Test_38.java;https://bugs.openjdk.org/secure/attachment/101775/Test_38.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zd8b:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-11-23 13:47;dholmes;Moving to core-libs. Sounds like an arithmetic overflow somewhere in the calculations.;;;","2022-11-24 02:52;redestad;We check for overflows in several places but seem to miss a check between shifting index based on coder right before allocating the array. This triggers an error when the sum lengths of the String components to be concatenated are below Integer.MAX_VALUE above Integer.MAX_VALUE/2 and at least one component is UTF16 encoded.

Patching this is straightforward:
diff --git a/src/java.base/share/classes/java/lang/StringConcatHelper.java b/src/java.base/share/classes/java/lang/StringConcatHelper.java
index c174d9200c0..cad34b98937 100644
--- a/src/java.base/share/classes/java/lang/StringConcatHelper.java
+++ b/src/java.base/share/classes/java/lang/StringConcatHelper.java
@@ -434,8 +434,11 @@ final class StringConcatHelper {
     @ForceInline
     static byte[] newArray(long indexCoder) {
         byte coder = (byte)(indexCoder >> 32);
-        int index = (int)indexCoder;
-        return (byte[]) UNSAFE.allocateUninitializedArray(byte.class, index << coder);
+        int index = ((int)indexCoder) << coder;
+        if (index < 0) {
+            throw new OutOfMemoryError(""Overflow: String length out of range"");
+        }
+        return (byte[]) UNSAFE.allocateUninitializedArray(byte.class, index);
     }

     /**

With that we throw an OOME on the test case:
java Test_38
Exception in thread ""main"" java.lang.OutOfMemoryError: Overflow: String length out of range
	at java.base/java.lang.StringConcatHelper.newArray(StringConcatHelper.java:439)
	at Test_38.method_int_int_287(Test_38.java:2215)
	at Test_38.method_float_float_435(Test_38.java:2312)
	at Test_38.mainTest(Test_38.java:2449)
	at Test_38.main(Test_38.java:2464);;;","2022-11-24 05:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11354
Date: 2022-11-24 13:23:13 +0000;;;","2022-11-24 09:42;dukebot;Changeset: 87d1097d
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2022-11-24 17:40:30 +0000
URL:       https://git.openjdk.org/jdk/commit/87d1097d9be1ef804bfd4640a4254126242b1d8c
;;;","2022-11-28 21:26;vrudomet;Fix request [17u, 19u]

Clean backport, minor change
JTreg Tier1, Tier2, JCK Compiler, JCK Runtime passed on linux
New test passed during run.;;;","2022-11-29 00:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/940
Date: 2022-11-29 08:18:32 +0000;;;","2022-11-29 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/100
Date: 2022-11-29 08:20:55 +0000;;;","2022-12-09 04:54;yan;Fix request (13u, 15u):

backporting because the issue exists here as well.
Clean backports, expected test behavior, tier1 OK.;;;","2022-12-09 05:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/314
Date: 2022-12-09 12:55:25 +0000;;;","2022-12-09 05:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/441
Date: 2022-12-09 12:59:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
java/io/File/TempDirDoesNotExist.java test failing on windows-x64,JDK-8297528,5088184,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wxiao,dcubed,dcubed,2022-11-23 12:22,2022-12-10 08:20,2023-10-01 09:56,2022-11-28 13:38,20,,,,,,,20,core-libs,,0,noreg-self,tier2,tier7,ursqe-triaged,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/io/File/TempDirDoesNotExist.java

Here's a snippet from the log file:

#section:main
----------messages:(7/247)----------
command: main TempDirDoesNotExist
reason: Assumed action based on file name: run main TempDirDoesNotExist 
started: Wed Nov 23 19:25:42 UTC 2022
Mode: agentvm
Agent id: 8
finished: Wed Nov 23 19:25:42 UTC 2022
elapsed time (seconds): 0.026
----------configuration:(14/1320)*----------

<snip>

----------System.err:(16/1071)*----------
java.nio.file.InvalidPathException: Illegal char <:> at index 46: C:\\Users\\mach5-one\\non-existing-\\2022-11-23T19:25:42.876284500Z
	at java.base/sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:182)
	at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:153)
	at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77)
	at java.base/sun.nio.fs.WindowsPath.parse(WindowsPath.java:92)
	at java.base/sun.nio.fs.WindowsFileSystem.getPath(WindowsFileSystem.java:232)
	at java.base/java.nio.file.Path.of(Path.java:148)
	at TempDirDoesNotExist.main(TempDirDoesNotExist.java:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.nio.file.InvalidPathException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.nio.file.InvalidPathException: Illegal char <:> at index 46: C:\Users\mach5-one\non-existing-\2022-11-23T19:25:42.876284500Z",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290313,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2zd7v:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2022-11-24 01:33;coffeys;https://github.com/openjdk/jdk/pull/11174#discussion_r1031286680;;;","2022-11-28 09:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11393
Date: 2022-11-28 16:52:09 +0000;;;","2022-11-28 13:38;dukebot;Changeset: cdf9ed07
Author:    Weibing Xiao <weibing.xiao@oracle.com>
Committer: Roger Riggs <rriggs@openjdk.org>
Date:      2022-11-28 21:34:36 +0000
URL:       https://git.openjdk.org/jdk/commit/cdf9ed07de102ae388278163e3bf702d861fc30a
;;;","2022-11-28 14:26;dcubed;The fix for this bug is integrated in jdk-20+26-1973.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jshell/ToolBasicTest.java fails after JDK-8295984,JDK-8297525,5088178,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,dcubed,dcubed,2022-11-23 10:30,2023-02-10 11:18,2023-10-01 09:56,2022-11-23 12:23,20,,,,,,,20,tools,,0,regression,tier2,,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

jdk/jshell/ToolBasicTest.java

Here's a snippet from the log file:

#section:testng
----------messages:(8/435)----------
command: testng ToolBasicTest
reason: User specified action: run testng/timeout=600 ToolBasicTest 
started: Wed Nov 23 17:37:27 UTC 2022
Mode: agentvm
Agent id: 7
Additional exports to unnamed modules from @modules: jdk.compiler/com.sun.tools.javac.api jdk.compiler/com.sun.tools.javac.main jdk.jdeps/com.sun.tools.javap jdk.jshell/jdk.internal.jshell.tool
finished: Wed Nov 23 17:37:53 UTC 2022
elapsed time (seconds): 26.463
----------configuration:(18/1605)*----------

<snip>

----------System.out:(127/6496)----------
config ReplToolTesting.setUp(): success
test ToolBasicTest.elideStartUpFromList(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.elideStartUpFromSave(): success

<snip>

config ReplToolTesting.setUp(): success
test ToolBasicTest.testOpen(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testOpenFileOverHttp(): failure
java.lang.AssertionError: Expected ""File 'http://127.0.0.1:52141/script' for 'jshell' is not found.
"" command error output, got: ""File 'http://127.0.0.1:52141/script' for 'jshell' is not found.
"" expected [File 'http://127.0.0.1:52141/script' for 'jshell' is not found.
] but found [File 'http://127.0.0.1:52141/script' for 'jshell' is not found.
]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:629)
	at ReplToolTesting.testRawCheck(ReplToolTesting.java:338)
	at ReplToolTesting.testRaw(ReplToolTesting.java:308)
	at ReplToolTesting.test(ReplToolTesting.java:259)
	at ReplToolTesting.test(ReplToolTesting.java:234)
	at ToolBasicTest.testOpenFileOverHttp(ToolBasicTest.java:547)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)
config ReplToolTesting.setUp(): success
test ToolBasicTest.testOpenLocalFileUrl(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testOpenResource(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testRedeclareVariableNoInit(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testRemoteExit(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testRerun(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testRerunIdRange(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testReset(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testSave(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testStartRetain(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testStartSave(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testStartupFileOption(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testStop(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testSystemExitStartUp(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testVarsWithNotActive(): success
config ReplToolTesting.setUp(): success
test ToolBasicTest.testWarningUnchecked(): success

===============================================
jdk/jshell/ToolBasicTest.java
Total tests run: 39, Passes: 38, Failures: 1, Skips: 0
===============================================

----------System.err:(10/538)----------
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:95)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: failures: 1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295984,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2zd6j:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,Verified,,"2022-11-23 10:36;dcubed;[~jlahoda] - Ping! Looks like your fix for:
JDK-8295984 Remove unexpected JShell feature
is having issues on windows-x64. The test has failed in two Tier2 job sets in a row on windows-x64...;;;","2022-11-23 11:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11330
Date: 2022-11-23 19:05:09 +0000;;;","2022-11-23 12:23;dukebot;Changeset: 91cd8a03
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-11-23 20:21:31 +0000
URL:       https://git.openjdk.org/jdk/commit/91cd8a03666d5c09c951b439d7d94b79933d97f6
;;;","2022-11-23 12:44;dcubed;The fix for this bug is integrated in jdk-20+25-1923.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Various GetPrimitiveArrayCritical miss result - NULL check,JDK-8297523,5088176,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-11-23 09:39,2023-06-16 04:22,2023-10-01 09:56,2022-11-30 04:50,11,17,19,20,,,,20,client-libs,,0,cssn23_02_02,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"There are still a few places where GetPrimitiveArrayCritical  calls miss the result check. This should be adjusted.
Examples in:
src/java.desktop/macosx/native/libawt_lwawt/awt/CClipboard.m
src/java.desktop/macosx/native/libawt_lwawt/font/CCharToGlyphMapper.m
src/java.desktop/macosx/native/libosxui/JRSUIController.m
src/java.desktop/unix/native/libawt_xawt/awt/swing_GTKEngine.c
src/java.desktop/windows/native/libawt/windows/ThemeReader.cpp
src/java.desktop/windows/native/libawt/windows/awt_DataTransferer.cpp
src/java.desktop/windows/native/libawt/windows/awt_Toolkit.cpp",,,,,,,,,,,JDK-8303193,JDK-8299939,JDK-8310203,JDK-8303104,JDK-8303297,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zd63:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-11-25 03:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11361
Date: 2022-11-25 09:15:08 +0000;;;","2022-11-30 04:50;dukebot;Changeset: 27b339d1
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-11-30 12:49:23 +0000
URL:       https://git.openjdk.org/jdk/commit/27b339d1893e60fc894ace9ae3c0e052ae858627
;;;","2023-01-05 02:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1038
Date: 2023-01-05 10:00:19 +0000;;;","2023-01-05 02:17;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well, because the issues are present there too. The patch is low risk and applies cleanly.;;;","2023-06-02 07:22;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
Low risk, adds null checks in a row of places.
I had to resolve.
SAP nighlty testing passed;;;","2023-06-02 07:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1925
Date: 2023-06-02 14:20:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update header after JDK-8297230,JDK-8297507,5088159,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,ksakata,jdv,jdv,2022-11-23 06:08,2023-01-25 21:50,2023-10-01 09:56,2022-11-23 07:10,20,,,,,,,20,client-libs,,0,,,,,,,,,,,,,,,,,,,,,,Source validation is failing because of wrong copyright header in open/src/java.desktop/share/classes/sun/java2d/marlin/DPQSSorterContext.java,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297230,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zd2b:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,Verified,,"2022-11-23 06:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11324
Date: 2022-11-23 14:26:34 +0000;;;","2022-11-23 07:10;dukebot;Changeset: e6e57fe8
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2022-11-23 15:07:34 +0000
URL:       https://git.openjdk.org/jdk/commit/e6e57fe86da44d43a21d2d6e2753f7a7bb5352ff
;;;","2022-11-23 12:20;lbourges;Sorry for the bad header, thank you for ghe quick fix;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parallel: Missing iteration over klass when marking objArrays/objArrayOops during Full GC,JDK-8297499,5088149,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,ayang,ayang,2022-11-23 04:53,2023-07-12 13:20,2023-10-01 09:56,2022-11-28 03:58,17,20,,,,,,20,hotspot,,0,amazon-interest,gc-parallel,,,,,,,,,,,,,,,,,,,,"`ParCompactionManager::follow_contents` misses `do_klass(klass)` when the obj is an `objArray`.

The corresponding code for Serial/G1/Z is in:
```
MarkSweep::follow_array
G1FullGCMarker::follow_array
ZMark::follow_array_object
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297740,,,,,,,,,,,JDK-8211446,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zd03:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-23 05:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11321
Date: 2022-11-23 12:55:55 +0000;;;","2022-11-28 03:58;dukebot;Changeset: 6a856bc3
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2022-11-28 11:57:18 +0000
URL:       https://git.openjdk.org/jdk/commit/6a856bc3f67d539f858904667ee86cbed54f94f7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loom: Stack chunks allocation code uses TLABs even when TLABs are disabled,JDK-8297491,5088143,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-11-23 03:54,2022-11-30 23:43,2023-10-01 09:56,2022-11-24 01:01,19,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"Look at this code in `Freeze<ConfigT>::allocate_chunk`:

```
  StackChunkAllocator allocator(klass, size_in_words, stack_size, current);
  oop fast_oop = allocator.try_allocate_in_existing_tlab();
```

...it calls:

```
oop MemAllocator::try_allocate_in_existing_tlab() {
  oop obj = NULL;
  {
    HeapWord* mem = allocate_inside_tlab_fast();
    ...
  }
  return obj;
}

HeapWord* MemAllocator::allocate_inside_tlab_fast() const {
  return _thread->tlab().allocate(_word_size);
}
```

...without checking for `UseTLAB`. If you reach to `_thread->tlab()` when TLABs are disabled, then you would get into the uncomfortable territory of dealing with uninitialized TLABs, because it initialization is predicated on `UseTLAB` itself:

```
void Thread::initialize_tlab() {
  if (UseTLAB) {
    tlab().initialize();
  }
}
```

This also disallows quickly testing the allocation slowpaths in Loom code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297570,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcyr:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-23 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11317
Date: 2022-11-23 11:57:24 +0000;;;","2022-11-24 01:01;dukebot;Changeset: f4cf7589
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-11-24 09:00:06 +0000
URL:       https://git.openjdk.org/jdk/commit/f4cf7589c0fa727ad091469c00e4dedbf9e0699e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create a regression test for JDK-4424517,JDK-8297481,5088130,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-11-23 00:17,2023-03-08 00:20,2023-10-01 09:56,2022-11-29 13:56,11,17,19,20,8,,,20,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,,,,"Test is to verify the mapping of various KeyEvents with their KeyLocations
Test triggers events or the various Keys and ensure the KeyLocation mapping to these are accurate. 
",,,,,,,,,,,JDK-8297962,JDK-8303632,JDK-8303722,JDK-8297961,JDK-8303631,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcvv:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-11-23 01:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11313
Date: 2022-11-23 08:57:23 +0000;;;","2022-11-29 13:56;dukebot;Changeset: e2d71c0a
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-11-29 21:54:33 +0000
URL:       https://git.openjdk.org/jdk/commit/e2d71c0a0d654841e3e591beeaa04b44c6e6b37f
;;;","2022-11-29 16:03;vrudomet;Fix request [11u, 17u, 19u]

Clean backport
New test, low risk.
Test passes during manual run, checked on macos and linux;;;","2022-11-29 19:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/101
Date: 2022-11-30 03:34:34 +0000;;;","2022-11-29 19:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/941
Date: 2022-11-30 03:34:28 +0000;;;","2022-11-29 19:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1559
Date: 2022-11-30 03:34:31 +0000;;;","2022-12-05 14:16;vrudomet;@pmohan Could you please provide a reason for removing 'jdk19u-fix-request' label?;;;","2022-12-06 10:01;phh;It may be that there is no target repo anymore. 19.0.2 is in rampdown (code freeze) and it's unlikely that anyone will step up as the 19u Maintainer. Without a Maintainer, there is no 19.0.3.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
GetPrimitiveArrayCritical in imageioJPEG misses result - NULL check,JDK-8297480,5088129,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-11-23 00:11,2023-02-27 19:55,2023-10-01 09:56,2022-11-24 00:06,11,17,19,20,,,,20,client-libs,,0,cssn23_02_02,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"Seems there is a remaining GetPrimitiveArrayCritical in imageioJPEG that misses a result - NULL check, this should be added.",,,,,,,,,,,JDK-8302997,JDK-8300442,JDK-8299421,JDK-8303044,JDK-8303292,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zcvn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@377c353d,,,,,,,,,"2022-11-23 00:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11312
Date: 2022-11-23 08:18:32 +0000;;;","2022-11-24 00:06;dukebot;Changeset: 2f8a5c2e
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-11-24 08:03:53 +0000
URL:       https://git.openjdk.org/jdk/commit/2f8a5c2eca0dc3dad08b7b2c33394ac214907008
;;;","2022-12-22 01:17;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well, because the issue is present there too. Backport is clean and low risk.;;;","2022-12-22 01:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/965
Date: 2022-12-22 09:15:21 +0000;;;","2023-01-13 05:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1652
Date: 2023-01-13 13:44:06 +0000;;;","2023-01-13 05:57;mbaesken;jdk11 backport request
I would like to have the patch in jdk11 as well, because the issue is present there too. Backport is clean and low risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use the official ToolProvider API to call javac,JDK-8297455,5088104,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-11-22 12:46,2022-12-08 15:29,2023-10-01 09:56,2022-12-01 16:11,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"In JDK-8297041, the javacserver was moved out of the JDK itself, and lifted out as a separate buildtool. Due to this, internal classes in jdk.compiler were no longer available. Therefore, the closest way to calling javac as before were to use `com.sun.tools.javac.Main.compile()`. This method is however deprecated for removal, and relying on that was only needed as a temporary measure during the transition.

After the major refactoring of the javacserver tool in JDK-8297444, it will be easy to replace the Main.compile API with the official ToolProvider API instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcq3:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-22 12:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11299
Date: 2022-11-22 20:50:04 +0000;;;","2022-12-01 16:11;dukebot;Changeset: b035056d
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-12-02 00:08:34 +0000
URL:       https://git.openjdk.org/jdk/commit/b035056d28a1c6c738fed6dd7f3b4d9dac75c6c7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"javax/swing/JComponent/7154030/bug7154030.java failed with ""Exception: Failed to show opaque button""",JDK-8297454,5088103,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,dcubed,dcubed,2022-11-22 12:36,2023-03-08 23:33,2023-10-01 09:56,2023-03-06 02:22,19,20,21,,,,,21,client-libs,,0,intermittent,macos,sn_136,sn_137,sn_138,tier4,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

javax/swing/JComponent/7154030/bug7154030.java

Here's a snippet from the log file:

#section:main
----------messages:(7/259)----------
command: main bug7154030
reason: User specified action: run main bug7154030 
started: Tue Nov 22 20:29:27 GMT 2022
Mode: othervm
Additional options from @modules: --add-modules java.desktop
finished: Tue Nov 22 20:29:31 GMT 2022
elapsed time (seconds): 4.007
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(11/614)----------
java.lang.Exception: Failed to show opaque button
	at bug7154030.main(bug7154030.java:137)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.Exception: Failed to show opaque button
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Failed to show opaque button
----------rerun:(41/7179)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-24 22:39;psadhukhan;imageInit.png;https://bugs.openjdk.org/secure/attachment/102397/imageInit.png","2023-01-24 22:39;psadhukhan;imageShow.png;https://bugs.openjdk.org/secure/attachment/102398/imageShow.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2zcpv:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-11-22 19:17;psadhukhan;JDK-8266247 fixed for macos probably not working;;;","2022-11-25 16:32;kizune;This totally unrelated to the JDK-8266247, this time the test legitimately fails because in the screenshot there is clear that button content has not been painted. Not sure what the reason is - hard to tell from the logs alone but we need to address this bug as a new and unrelated issue.;;;","2023-01-21 06:53;dcubed;Here's a log file snippet from the jdk-21+7-408-tier4 sighting:

javax/swing/JComponent/7154030/bug7154030.java

#section:main
----------messages:(7/259)----------
command: main bug7154030
reason: User specified action: run main bug7154030 
started: Sat Jan 21 12:32:13 GMT 2023
Mode: othervm
Additional options from @modules: --add-modules java.desktop
finished: Sat Jan 21 12:32:16 GMT 2023
elapsed time (seconds): 3.683
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(11/614)----------
java.lang.Exception: Failed to show opaque button
	at bug7154030.main(bug7154030.java:137)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Exception: Failed to show opaque button
JavaTest Message: shutting down test;;;","2023-01-24 22:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12179
Date: 2023-01-25 06:41:19 +0000;;;","2023-03-06 02:22;dukebot;Changeset: 5753ab5c
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-03-06 10:20:23 +0000
URL:       https://git.openjdk.org/jdk/commit/5753ab5c472c77df720d73491c1ab289eec63374
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProcessHandleImpl should assert privilege when modifying reaper thread,JDK-8297451,5088100,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,rjernst,chegar,chegar,2022-11-22 12:19,2023-01-31 03:44,2023-10-01 09:56,2022-11-26 12:07,19,19.0.1,,,,,,20,core-libs,,0,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,,,,,,,,,,,,,,,,,,,"Changes in JDK 19 result in modifying the process reaper thread
properties, namely `setDaemon` and `setName` without asserting
privileges, which can (depending on your security manager
implementation) result in checking the callers permissions, and its
callers permissions, etc, all the way to the thread's inherited access
control context - which is effectively empty for these threads, since
the repeater threads are innocuous. These operations should be invoked
within doPriv blocks.

Specifically, this is only an issue when running with a security manager
implementation that is more restrictive than that of the default
security manager implementation of checkAccess(Thread).

This issue has been filed to track an issue raised on core-libs-dev:
  https://mail.openjdk.org/pipermail/core-libs-dev/2022-November/thread.html#97035
",,,,,,,,,,,JDK-8297721,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279488,,,,,,,,,,,JDK-8284165,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcp7:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-11-22 21:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11309
Date: 2022-11-23 05:01:40 +0000;;;","2022-11-26 12:07;dukebot;Changeset: 50f9043c
Author:    Ryan Ernst <ryan@iernst.net>
Committer: Chris Hegarty <chegar@openjdk.org>
Date:      2022-11-26 20:04:59 +0000
URL:       https://git.openjdk.org/jdk/commit/50f9043c6965360c426b187e47c49c42481a2549
;;;","2022-11-27 01:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/96
Date: 2022-11-27 09:09:19 +0000;;;","2022-11-27 23:50;chegar;JDK 19 backport request 
I would like to have this fix in jdk19u-dev because the issue is present (and first started) in JDK 19, and fixing there will allow easier adoption of 19.0.2 by Elasticsearch. The patch applies cleanly and is very low risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ScaledTextFieldBorderTest.java fails when run with -show parameter,JDK-8297450,5088099,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rmahajan,rmahajan,rmahajan,2022-11-22 10:51,2023-05-08 03:26,2023-10-01 09:56,2022-12-06 10:45,11.0.19,17.0.7,20,,,,,20,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,regression,regression_8282958,sustaining,,,,,,,,,,,,,,"\test\jdk\javax\swing\border\LineBorder\ScaledTextFieldBorderTest.java fails when run -show parameter.
The test is failing because there was no gap between the Textfields.
Workaround - Run the test without -show parameter",,,,,,,,,,,JDK-8302429,JDK-8307611,JDK-8307594,JDK-8302096,JDK-8302101,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282958,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b22,20,,,,,,,,"0|i2zcoz:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-12-03 14:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11498
Date: 2022-12-03 22:11:47 +0000;;;","2022-12-06 10:45;dukebot;Changeset: ea83cb96
Author:    Rajat Mahajan <rajat.m.mahajan@oracle.com>
Committer: Harshitha Onkar <honkar@openjdk.org>
Date:      2022-12-06 18:43:02 +0000
URL:       https://git.openjdk.org/jdk/commit/ea83cb960d07ffa9384aad6a1e2a0233e3ebbdd1
;;;","2023-05-05 06:49;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.20-oracle,17.0.8-oracle.
No risk, only a test change.
Clean backport.
SAP nightly testing passed.;;;","2023-05-05 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1327
Date: 2023-05-05 13:47:05 +0000;;;","2023-05-05 07:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1859
Date: 2023-05-05 13:50:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update JInternalFrame Metal Border code,JDK-8297449,5088098,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2022-11-22 10:47,2022-12-08 15:28,2023-10-01 09:56,2022-12-01 10:59,20,,,,,,,20,client-libs,,0,noreg-cleanup,sn_132,,,,,,,,,,,,,,,,,,,,"Following  are the updates to be made to  JInternalFrame Metal Border code.

- Add instanceOf check to Graphics object
- Replace roundHalfDown with Region.clipRound()",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8015739,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zcor:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-11-22 16:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11305
Date: 2022-11-23 00:46:57 +0000;;;","2022-12-01 10:59;dukebot;Changeset: 09629570
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2022-12-01 18:57:50 +0000
URL:       https://git.openjdk.org/jdk/commit/09629570f5d064dc2a5cd670de8d648156ac3991
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refactor the javacserver build tool,JDK-8297444,5088091,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-11-22 09:37,2022-12-08 15:29,2023-10-01 09:56,2022-12-01 15:43,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"Now that the javacserver no longer has any ambitions outside being a buildtool customized for the JDK build process, a lot of abstractions and generalizations can be removed.

This will allow the actual behavior to be more clearly visible, and will help debugging the issues we are still seeing (most likely race conditions), and to convert the tool to use the ToolProvider API in the future.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcnf:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-22 12:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11298
Date: 2022-11-22 19:54:51 +0000;;;","2022-12-01 15:43;dukebot;Changeset: 257aa15f
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-12-01 23:41:58 +0000
URL:       https://git.openjdk.org/jdk/commit/257aa15f15bb835310132e6fb23e0362cafeb16a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javadoc cannot link to old docs (with old style anchors),JDK-8297437,5088083,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rmarchenko,jjg,jjg,2022-11-22 07:41,2023-09-22 12:24,2023-10-01 09:56,2023-01-26 03:13,11,17,,,,,,21,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"From Roman Marchenko



Let’s say, there is a library is being developed for further use with another Java8 project. The library development is performed using Java17 because of some legacy reasons. And these are the reasons of the developers have no option to choose another version of Java. The library is compiled with ‘-source 8’ or ‘--release 8’ options passed to both javac and javadoc (linking with Oracle’s Java8 docs with ‘-link’ option). As the result, the generated docs are not compatible with Oracle’s Java8 docs because of different forms of anchors and element IDs.

 

Even if there is a solution to additionally process external links to docs.oracle.com fixing anchors, the generated docs are still not compatible with any other documentation generated with Java8, local or external.

 

Of course, there are possible workarounds for the scenario above, however this example scenario shows that javac has backward compatibility to lower versions, but javadoc has not. ",,,,,,,,,,,JDK-8302593,JDK-8312728,JDK-8316770,JDK-8311519,JDK-8310254,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcln:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-11-22 08:12;jjg;The compelling part of the argument is arguably the difficulty of linking to JDK 8 docs.

On the one hand, it is tempting to say that anyone wanting to link to other API should use compatible versions of javadoc, but on the other, one of the parties involved in this case is the standard JDK docs, which we are unlikely to ever regenerate with HTML 5 and new-style anchors.

So, the technical challenge becomes how to infer (or be told) the style of anchors involved. Maybe a quick survey of older versions of JDK would be appropriate.;;;","2022-11-22 11:40;jjg;Here's the results of a brief investigation into older docs.  A script looks for the declaration of `java.lang.Object` `equals` method, to see the form of the anchor. It also checks for the existence of either the `package-list` or `element-list` file.

JDK 8
<a name=""equals-java.lang.Object-"">
    package-list
JDK 9
<a id=""equals-java.lang.Object-"">
    package-list
JDK 10
<a id=""equals(java.lang.Object)"">
    element-list
JDK 11
<a id=""equals(java.lang.Object)"">
    element-list
JDK 12
<a id=""equals(java.lang.Object)"">
    element-list

There's a correlation, suggesting that we can use the presence of `package-list` or `element-list` as an indication of whether to use the old or new form of anchor, when referencing other docs.

--

Separately, I note that these days there is the `HtmlIds` class which encapsulates the generation of HTML ids within the doclet, so we could have a method there that takes a boolean parameter to indicate whether the id for a method should be old-form or new-form.;;;","2023-01-18 01:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12066
Date: 2023-01-18 09:45:44 +0000;;;","2023-01-18 01:59;rmarchenko;I've created the PR with 'hardcoded' type of anchors for 'platform' links, because of my concerns I described in the mail list discussion:

The 'platform link' depends on JDK version number or release/source option value. The list of platform elements is contained in 'hard-coded' JDK txt files, so processing platform elements doesn't require internet connection, regardless of it was replaced with 'link-platform-properties' option or not. In case it needs to be checked for element-list presence, it may require internet connection. ;;;","2023-01-26 03:13;dukebot;Changeset: 15a14884
Author:    Roman Marchenko <rmarchenko@openjdk.org>
Committer: Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2023-01-26 11:11:21 +0000
URL:       https://git.openjdk.org/jdk/commit/15a14884013a975707008f648b8e4864e16006ed
;;;","2023-02-05 22:41;rmarchenko;I'd like to backport this to [17u, 11u];;;","2023-02-05 23:59;rmarchenko;Fix request (17u):
 almost clean backport, no tier1 regressions;;;","2023-02-06 00:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1145
Date: 2023-02-06 07:54:55 +0000;;;","2023-03-07 01:55;rmarchenko;Fix request (11u):
I'd like to backport this to 11u for parity, because there are still scenarios for 11u when docs being generated are linked to external old-style anchors docs. ;;;","2023-03-07 06:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1794
Date: 2023-03-07 14:22:36 +0000;;;","2023-09-22 10:28;jjg;FYI, and for the record, ""old form name"" is a bit of a misnomer, since it was at best an ""interim form name"".

The original ""old form name"" was closer to the current form, but although it was accepted by browsers, it was not valid per the spec, so it showed up when we started checked docs for conformance.   That led to the encoding scheme described here as ""old form"", which was used until we switched to HTML, when most restrictions on ids were relaxed.

;;;",,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] HotSpotJVMCIRuntime.encodeThrowable should not throw an exception,JDK-8297431,5088076,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2022-11-22 06:21,2023-01-09 08:36,2023-10-01 09:56,2022-11-25 09:40,17,20,,,,,,20,hotspot,,0,jdk17-graalvm,jdk17u-fix-request,jdk17u-fix-yes,jvmci,oracle-triage-11,oracle-triage-20,,,,,,,,,,,,,,,,"JVMCI has a mechanism for translating exceptions from libjvmci to HotSpot and vice versa. This is important for proper error handling when a thread calls between these 2 runtime heaps.

This translation mechanism itself needs to be robust in the context of resource limits, especially heap limits, as it may be translating an OutOfMemoryError from HotSpot back into libjvmci. The existing code in HotSpotJVMCIRuntime.encodeThrowable[1] and TranslatedException.encodeThrowable[2] should handle translation failures by falling back to non-allocating code. However, we still see a rare OOME that breaks the translation mechanism (e.g., https://github.com/oracle/graal/issues/5470#issuecomment-1321749688). One possibility for this is an OOME rematerializing oops during a deoptimization causing an unexpected execution path. The exception translation code should be made more robust against such paths.

[1] https://github.com/graalvm/labs-openjdk-17/blob/f6b18b596fa5acb1ab7efa10e284d106669040a6/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCIRuntime.java#L237
[2] https://github.com/graalvm/labs-openjdk-17/blob/f6b18b596fa5acb1ab7efa10e284d106669040a6/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/TranslatedException.java#L153
",,,,,,,,,,,JDK-8299823,JDK-8298830,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zck3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-22 06:36;rcastanedalo;ILW = wrong exception translation between HotSpot and jvmci; low-frequency intermittent, using limited metaspace and heap sizes; use default configuration = HLM = P3;;;","2022-11-22 06:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11286
Date: 2022-11-22 14:30:01 +0000;;;","2022-11-25 09:40;dukebot;Changeset: 952e1005
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-11-25 17:39:21 +0000
URL:       https://git.openjdk.org/jdk/commit/952e10055135613e8ea2b818a4f35842936f5633
;;;","2023-01-04 03:04;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Low risk, changes jvmci, not affecting normal usage.
Clean backport.
SAP nightly testing passed.;;;","2023-01-04 03:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1033
Date: 2023-01-04 11:13:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/AsyncExecutorShutdown.java fails in AssertionError due to misplaced assert,JDK-8297424,5088068,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dfuchs,dfuchs,2022-11-22 04:56,2022-12-05 14:02,2023-10-01 09:56,2022-11-29 04:38,20,,,,,,,20,core-libs,,0,httpclient,intermittent,noreg-hard,tier2,,,,,,,,,,,,,,,,,,"Caused by: java.lang.AssertionError
	at java.net.http/jdk.internal.net.http.ResponseSubscribers$HttpResponseInputStream.onSubscribe(ResponseSubscribers.java:558)
	at java.net.http/jdk.internal.net.http.common.HttpBodySubscriberWrapper.onSubscribe(HttpBodySubscriberWrapper.java:193)
	at java.net.http/jdk.internal.net.http.Stream.schedule(Stream.java:180)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.Stream.receiveData(Stream.java:423)
	at java.net.http/jdk.internal.net.http.Stream.readBodyAsync(Stream.java:328)
	at java.net.http/jdk.internal.net.http.Exchange.readBodyAsync(Exchange.java:211)
	at java.net.http/jdk.internal.net.http.MultiExchange.lambda$responseAsync0$4(MultiExchange.java:354)
	at java.base/java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:1150)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2179)
	at java.net.http/jdk.internal.net.http.ResponseSubscribers.lambda$getBodyAsync$2(ResponseSubscribers.java:1155)
	at java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:863)
	at java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2179)
	at java.net.http/jdk.internal.net.http.ResponseSubscribers$NullSubscriber.onComplete(ResponseSubscribers.java:694)
	at java.net.http/jdk.internal.net.http.common.HttpBodySubscriberWrapper.complete(HttpBodySubscriberWrapper.java:157)
	at java.net.http/jdk.internal.net.http.Http1Exchange$Http1ResponseBodySubscriber.complete(Http1Exchange.java:221)
	at java.net.http/jdk.internal.net.http.common.HttpBodySubscriberWrapper.onComplete(HttpBodySubscriberWrapper.java:220)
	at java.net.http/jdk.internal.net.http.ResponseContent$FixedLengthBodyParser.onSubscribe(ResponseContent.java:566)
	at java.net.http/jdk.internal.net.http.Http1Response$BodyReader.onSubscribe(Http1Response.java:674)
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.handlePendingDelegate(Http1AsyncReceiver.java:395)
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.flush(Http1AsyncReceiver.java:214)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$TryEndDeferredCompleter.complete(SequentialScheduler.java:347)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:151)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	... 3 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcib:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-11-23 11:09;dfuchs;After a thorough analysis of the code and the log failure I am convinced that the issue is due to a misplaced assert.

If cancellation happens during subscription, the ResponseInputStream might get closed and the LAST_LIST buffered might be offered after closed == false has been observed, but before the assertion is checked.

Moving the assert from within the synchronized block should fix it.;;;","2022-11-23 11:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11332
Date: 2022-11-23 19:38:50 +0000;;;","2022-11-29 04:38;dukebot;Changeset: 5d2772a4
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-11-29 12:36:20 +0000
URL:       https://git.openjdk.org/jdk/commit/5d2772a43ef6409bf556cefb4eb4242594451674
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Poly1305IntrinsicFuzzTest fails with tag mismatch exception,JDK-8297417,5088059,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,sviswanathan,rcastanedalo,rcastanedalo,2022-11-22 04:02,2023-01-24 13:16,2023-10-01 09:56,2022-11-24 23:09,20,,,,,,,20,hotspot,,0,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-20,tier1,,,,,,,,,,,,,,,,,"Poly1305IntrinsicFuzzTest fails in tier1 with the following error message (see details in the attached log excerpt):

ACTION: main -- Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: [Seed 4393970121356212344] Tag mismatch: [-82, -2, 28, -62, 82, 29, 82, 24, 6, -79, -14, -79, 119, 35, -12, -71] != [90, 28, -118, -73, -7, 118, 64, -22, -86, -85, -30, 60, 107, 87, 56, 103]

So far, the failure has only been observed in windows-x64, but the failure is intermittent so other platforms may also be affected:

OS: Windows_Server_2016_Standard
CPU: Intel_R__Xeon_R__Platinum_8358_CPU___2.60GHz (12 cores)
CPU features: fpu_vme_de_pse_tsc_msr_pae_mce_cx8_apic_sep_mtrr_pge_mca_cmov_pat_pse36_clflush_mmx_fxsr_sse_sse2_ss_ht_pni_vmx_ssse3_fma_cx16_pdcm_sse4_1_sse4_2_x2apic_movbe_popcnt_aes_xsave_osxsave_avx_f16c_rdrand_hypervisor_lahf_lm_arat_xsaveopt_fsgsbase_tsc_adjust_bmi1_avx2_smep_bmi2_erms_invpcid_avx512f_rdseed_adx_smap_clflushopt_avx512cd",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288047,,,,,,,,,,,,,,,,,,,,"2022-11-22 04:00;rcastanedalo;test.log;https://bugs.openjdk.org/secure/attachment/101730/test.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,"0|i2zcgb:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-11-22 04:18;rcastanedalo;ILW = miscompilation caused by new intrinsic; intermittent but observed early after the introduction; disable intrinsic = HMM = P2;;;","2022-11-22 04:32;rcastanedalo;[~sviswanathan], could you (or Volodymyr) please have a look at this? Thanks! ;;;","2022-11-22 06:27;rcastanedalo;The test is fairly intermittent, I have only managed to reproduce it once out of 20 runs in our internal test system.;;;","2022-11-22 09:23;sviswanathan;Volodymyr is looking at the problem.;;;","2022-11-22 19:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11308
Date: 2022-11-23 02:59:30 +0000;;;","2022-11-24 23:09;dukebot;Changeset: 74d3bacc
Author:    Volodymyr Paprotski <volodymyr.paprotski@intel.com>
Committer: Kim Barrett <kbarrett@openjdk.org>
Date:      2022-11-25 07:07:39 +0000
URL:       https://git.openjdk.org/jdk/commit/74d3baccb332c07f4ce58a53d7e9d36d3d4b8318
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove easy warnings in javafx.controls,JDK-8297414,5088056,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2022-11-22 03:12,2023-03-16 12:56,2023-10-01 09:56,2022-11-30 03:21,jfx20,,,,,,,jfx20,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,"- Remove unsupported/unnecessary SuppressWarning annotations
- Remove reduntant type specifications (use diamond operator)
- Remove unused or duplicate imports
- Remove unnecessary casts (type is already correct type or can be autoboxed)
- Remove unnecessary semi-colons (at end of class definitions, or just repeated ones)
- Remove redundant super interfaces (interface that is already inherited)
- Remove unused type parameters
- Remove declared checked exceptions that are never thrown
- Add missing @Override annotations
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297300,,,,,,,,,,,,JDK-8287690,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcfn:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-22 06:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/959
Date: 2022-11-22 12:08:44 +0000;;;","2022-11-30 03:21;dukebot;Changeset: 2fa9f4b9
Author:    John Hendrikx <jhendrikx@openjdk.org>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-11-30 11:19:28 +0000
URL:       https://git.openjdk.org/jfx/commit/2fa9f4b9e53a43de0676631ab5d93334d2a3b2dd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove easy warnings in javafx.graphics,JDK-8297413,5088055,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2022-11-22 03:11,2023-03-16 12:56,2023-10-01 09:56,2022-12-06 06:26,jfx20,,,,,,,jfx20,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,"- Remove unsupported/unnecessary SuppressWarning annotations
- Remove reduntant type specifications (use diamond operator)
- Remove unused or duplicate imports
- Remove unnecessary casts (type is already correct type or can be autoboxed)
- Remove unnecessary semi-colons (at end of class definitions, or just repeated ones)
- Remove redundant super interfaces (interface that is already inherited)
- Remove unused type parameters
- Remove declared checked exceptions that are never thrown
- Add missing @Override annotations
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297300,,,,,,,,,,,,JDK-8287690,,,,,,,,,,,JDK-8298060,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcff:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-11-22 12:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/960
Date: 2022-11-22 18:39:43 +0000;;;","2022-12-06 06:26;dukebot;Changeset: f333662a
Author:    John Hendrikx <jhendrikx@openjdk.org>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-12-06 14:24:18 +0000
URL:       https://git.openjdk.org/jfx/commit/f333662abe61a19a4d8a7b10ee4c409a22f2d63e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Remove easy warnings in javafx.fxml, javafx.media, javafx.swing, javafx.swt and javafx.web",JDK-8297412,5088054,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2022-11-22 03:10,2023-03-10 15:30,2023-10-01 09:56,2022-11-30 02:33,jfx20,,,,,,,jfx20,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,"- Remove unsupported/unnecessary SuppressWarning annotations
- Remove reduntant type specifications (use diamond operator)
- Remove unused or duplicate imports
- Remove unnecessary casts (type is already correct type or can be autoboxed)
- Remove unnecessary semi-colons (at end of class definitions, or just repeated ones)
- Remove redundant super interfaces (interface that is already inherited)
- Remove unused type parameters
- Remove declared checked exceptions that are never thrown
- Add missing @Override annotations
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297300,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcf7:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-11-22 03:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/958
Date: 2022-11-22 11:13:40 +0000;;;","2022-11-30 02:33;dukebot;Changeset: 7cb408bd
Author:    John Hendrikx <jhendrikx@openjdk.org>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-11-30 10:30:26 +0000
URL:       https://git.openjdk.org/jfx/commit/7cb408bdbf2603738e35166b16da4c181d3dedef
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
resexhausted003 fails with assert(!thread->owns_locks()) failed: must release all locks when leaving VM,JDK-8297389,5088033,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,rrich,rrich,2022-11-22 00:35,2022-12-13 23:53,2023-10-01 09:56,2022-12-01 00:51,11,17,20,,,,,20,hotspot,,0,intermittent,intermittent-low-frequency,oracle-triage-20,tier5,tier6,,,,,,,,,,,,,,,,,"In Method::build_profiling_method_data() we lock MethodData_lock and then try to allocate from metaspace.

This triggers the assertion `assert(!thread->owns_locks()) failed: must release all locks when leaving VM` at the following location:

Current thread (0x00007fff9035b7f0):  JavaThread ""MainThread"" [_thread_in_vm, id=12008, stack(0x00007fff65130000,0x00007fff65330000)]

Stack: [0x00007fff65130000,0x00007fff65330000],  sp=0x00007fff6532c0c0,  free space=2032k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1274648]  JvmtiJavaThreadEventTransition::JvmtiJavaThreadEventTransition(JavaThread*)+0xa8  (interfaceSupport.inline.hpp:187)
V  [libjvm.so+0x126d9bc]  JvmtiExport::post_resource_exhausted(int, char const*)+0x13c  (jvmtiExport.cpp:1760)
V  [libjvm.so+0x14ab72c]  Metaspace::report_metadata_oome(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Metaspace::MetadataType, JavaThread*)+0x76c  (metaspace.cpp:972)
V  [libjvm.so+0x14abd08]  Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, JavaThread*)+0x1f8  (metaspace.cpp:922)
V  [libjvm.so+0x491a10]  MetaspaceObj::operator new(unsigned long, ClassLoaderData*, unsigned long, MetaspaceObj::Type, JavaThread*)+0x30  (allocation.cpp:83)
V  [libjvm.so+0x14f3b34]  MethodData::allocate(ClassLoaderData*, methodHandle const&, JavaThread*)+0x54  (methodData.cpp:664)
V  [libjvm.so+0x14d1a18]  Method::build_profiling_method_data(methodHandle const&, JavaThread*)+0x168  (method.cpp:598)
V  [libjvm.so+0x9682f0]  CompilationPolicy::create_mdo(methodHandle const&, JavaThread*)+0x2a0  (compilationPolicy.cpp:967)
V  [libjvm.so+0x96a674]  CompilationPolicy::event(methodHandle const&, methodHandle const&, int, int, CompLevel, CompiledMethod*, JavaThread*)+0x9e4  (compilationPolicy.cpp:1145)
V  [libjvm.so+0xf4fb38]  InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*)+0x1a8  (interpreterRuntime.cpp:1038)
V  [libjvm.so+0xf4fc84]  InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)+0x34  (interpreterRuntime.cpp:987)


VM Mutex/Monitor currently owned by a thread:  ([mutex/lock_event])
[0x00007fff900409e0] MethodData_lock - owner thread: 0x00007fff9035b7f0
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298084,JDK-6606767,,,,,,,,,,JDK-8165096,,,,,,,,,"2022-11-22 05:16;rrich;hs_err_pid11950.log;https://bugs.openjdk.org/secure/attachment/101737/hs_err_pid11950.log","2022-11-22 05:16;rrich;hs_err_pid133332.log;https://bugs.openjdk.org/secure/attachment/101735/hs_err_pid133332.log","2022-11-22 05:16;rrich;hs_err_pid83672.log;https://bugs.openjdk.org/secure/attachment/101736/hs_err_pid83672.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zcaj:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-22 02:56;rcastanedalo;Hi [~rrich], would it be possible to provide more details to reproduce this (full log file, platform information, any additional VM configuration...)? Thanks!;;;","2022-11-22 03:01;rcastanedalo;ILW = assertion failure in debug build; using non-default configuration (small metaspace max size), existing test case fails with low frequency; no workaround = MLH = P4;;;","2022-11-22 05:44;rrich;Hi Roberto,
the test resexhausted003 crashed 3 times today in our CI testing. 2x Windows x86_64 (we run the tests on jdk master with and without own patches), 1x Linux ppc64le.
Last time it failed was in July but with a different symptom.
Strange that these crashes occur now. I havn't had a look at the test itself but it is obvious that the thread holds MethodData_lock when attempting the transition with ThreadToNativeFromVM to post ResourceExhausted over JVMTI.
https://bugs.openjdk.org/browse/JDK-6606767 is similar but there it was overlooked that MethodData_lock is acquired in Method::build_profiling_method_data()
Thanks, Richard.;;;","2022-11-22 05:57;rcastanedalo;Thanks for the additional details and explanation, Richard!;;;","2022-11-22 12:31;dcubed;Here's the crashing thread's stack from the jdk-20+25-1888-tier5 sighting:

vmTestbase/nsk/jvmti/ResourceExhausted/resexhausted003/TestDescription.java

---------------  T H R E A D  ---------------

Current thread (0x0000fffddc288510):  JavaThread ""MainThread"" [_thread_in_vm, id=2116285, stack(0x0000fffdc42c0000,0x0000fffdc44c0000)]

Stack: [0x0000fffdc42c0000,0x0000fffdc44c0000],  sp=0x0000fffdc44bcde0,  free space=2035k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x11bb190]  JvmtiJavaThreadEventTransition::JvmtiJavaThreadEventTransition(JavaThread*)+0x120  (interfaceSupport.inline.hpp:187)
V  [libjvm.so+0x11b5e8c]  JvmtiExport::post_resource_exhausted(int, char const*)+0x188  (jvmtiExport.cpp:1760)
V  [libjvm.so+0x13cd3a4]  Metaspace::report_metadata_oome(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Metaspace::MetadataType, JavaThread*)+0x4d4  (metaspace.cpp:972)
V  [libjvm.so+0x13cd88c]  Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, JavaThread*)+0xe8  (metaspace.cpp:922)
V  [libjvm.so+0x14046ac]  MethodData::allocate(ClassLoaderData*, methodHandle const&, JavaThread*)+0x3c  (methodData.cpp:664)
V  [libjvm.so+0x13e84d4]  Method::build_profiling_method_data(methodHandle const&, JavaThread*)+0xa4  (method.cpp:598)
V  [libjvm.so+0x97bef8]  CompilationPolicy::create_mdo(methodHandle const&, JavaThread*)+0x228  (compilationPolicy.cpp:967)
V  [libjvm.so+0x97cd68]  CompilationPolicy::method_invocation_event(methodHandle const&, methodHandle const&, CompLevel, CompiledMethod*, JavaThread*)+0x274  (compilationPolicy.cpp:1145)
V  [libjvm.so+0x97def4]  CompilationPolicy::event(methodHandle const&, methodHandle const&, int, int, CompLevel, CompiledMethod*, JavaThread*)+0x350  (compilationPolicy.cpp:735)
V  [libjvm.so+0xe89ccc]  InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*)+0x188  (interpreterRuntime.cpp:1038)
V  [libjvm.so+0xe89e2c]  InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)+0x1c  (interpreterRuntime.cpp:987)
j  java.util.concurrent.ConcurrentHashMap.replaceNode(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+0 java.base@20-ea
j  java.util.concurrent.ConcurrentHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;+4 java.base@20-ea
J 221 c1 java.lang.invoke.MethodType$ConcurrentWeakInternSet.get(Ljava/lang/Object;)Ljava/lang/Object; java.base@20-ea (47 bytes) @ 0x0000fffdc4f3bb7c [0x0000fffdc4f3b980+0x00000000000001fc]
J 227 c1 java.lang.invoke.MethodType.makeImpl(Ljava/lang/Class;[Ljava/lang/Class;Z)Ljava/lang/invoke/MethodType; java.base@20-ea (109 bytes) @ 0x0000fffdc4f3eed0 [0x0000fffdc4f3ecc0+0x0000000000000210]
J 202 c1 java.lang.invoke.MethodType.methodType(Ljava/lang/Class;[Ljava/lang/Class;Z)Ljava/lang/invoke/MethodType; java.base@20-ea (69 bytes) @ 0x0000fffdc4f31060 [0x0000fffdc4f30d80+0x00000000000002e0]
J 243 c1 java.lang.invoke.MemberName.getMethodType()Ljava/lang/invoke/MethodType; java.base@20-ea (211 bytes) @ 0x0000fffdc4f44d4c [0x0000fffdc4f43f40+0x0000000000000e0c]
J 351 c1 java.lang.invoke.DirectMethodHandle.makeAllocator(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/DirectMethodHandle; java.base@20-ea (137 bytes) @ 0x0000fffdc4f894a0 [0x0000fffdc4f89380+0x0000000000000120]
J 343 c1 java.lang.invoke.MethodHandles$Lookup.getDirectConstructorCommon(Ljava/lang/Class;Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/MethodHandle; java.base@20-ea (69 bytes) @ 0x0000fffdc4f82c40 [0x0000fffdc4f82900+0x0000000000000340]
J 434 c1 java.lang.invoke.MethodHandles$Lookup.getDirectConstructorNoSecurityManager(Ljava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle; java.base@20-ea (10 bytes) @ 0x0000fffdc4fc3320 [0x0000fffdc4fc3240+0x00000000000000e0]
J 431 c1 java.lang.invoke.MethodHandles$Lookup.unreflectConstructor(Ljava/lang/reflect/Constructor;)Ljava/lang/invoke/MethodHandle; java.base@20-ea (55 bytes) @ 0x0000fffdc4fc1aa8 [0x0000fffdc4fc1800+0x00000000000002a8]
J 428 c1 jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessorImpl; java.base@20-ea (84 bytes) @ 0x0000fffdc4fbebf8 [0x0000fffdc4fbe8c0+0x0000000000000338]
J 421 c1 jdk.internal.reflect.ReflectionFactory.newConstructorAccessor(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessor; java.base@20-ea (144 bytes) @ 0x0000fffdc4fbba90 [0x0000fffdc4fbb680+0x0000000000000410]
J 420 c1 java.lang.reflect.Constructor.acquireConstructorAccessor()Ljdk/internal/reflect/ConstructorAccessor; java.base@20-ea (75 bytes) @ 0x0000fffdc4fba390 [0x0000fffdc4fba180+0x0000000000000210]
J 419 c1 java.lang.reflect.Constructor.newInstanceWithCaller([Ljava/lang/Object;ZLjava/lang/Class;)Ljava/lang/Object; java.base@20-ea (51 bytes) @ 0x0000fffdc4fb9b04 [0x0000fffdc4fb9980+0x0000000000000184]
J 452 c1 java.lang.Class.newInstance()Ljava/lang/Object; java.base@20-ea (134 bytes) @ 0x0000fffdc4fd3224 [0x0000fffdc4fd2000+0x0000000000001224]
J 465 c1 nsk.jvmti.ResourceExhausted.resexhausted003$MyClassLoader.loadClass(Ljava/lang/String;[B)Ljava/lang/Class; (37 bytes) @ 0x0000fffdc4fdd074 [0x0000fffdc4fdce00+0x0000000000000274]
j  nsk.jvmti.ResourceExhausted.resexhausted003.run([Ljava/lang/String;Ljava/io/PrintStream;)I+185
j  nsk.jvmti.ResourceExhausted.resexhausted003.main([Ljava/lang/String;)V+9
j  java.lang.invoke.LambdaForm$DMH+0x0000000801002000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 java.base@20-ea
j  java.lang.invoke.LambdaForm$MH+0x0000000801003400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 java.base@20-ea
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 java.base@20-ea
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 java.base@20-ea
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 java.base@20-ea
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 java.base@20-ea
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+134
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x0000fffdcc41017c
V  [libjvm.so+0xe9e5fc]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x5ac  (javaCalls.cpp:417)
V  [libjvm.so+0xe9ec20]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x3b0  (javaCalls.cpp:331)
V  [libjvm.so+0xe9f098]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x64  (javaCalls.cpp:193)
V  [libjvm.so+0x1019b58]  thread_entry(JavaThread*, JavaThread*)+0x118  (jvm.cpp:2876)
V  [libjvm.so+0xed3f50]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:700)
V  [libjvm.so+0x17e3ba8]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x14f36f4]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:739)
C  [libpthread.so.0+0x7908]  start_thread+0x188

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.util.concurrent.ConcurrentHashMap.replaceNode(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+0 java.base@20-ea
j  java.util.concurrent.ConcurrentHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;+4 java.base@20-ea
J 221 c1 java.lang.invoke.MethodType$ConcurrentWeakInternSet.get(Ljava/lang/Object;)Ljava/lang/Object; java.base@20-ea (47 bytes) @ 0x0000fffdc4f3bb7c [0x0000fffdc4f3b980+0x00000000000001fc]
J 227 c1 java.lang.invoke.MethodType.makeImpl(Ljava/lang/Class;[Ljava/lang/Class;Z)Ljava/lang/invoke/MethodType; java.base@20-ea (109 bytes) @ 0x0000fffdc4f3eed0 [0x0000fffdc4f3ecc0+0x0000000000000210]
J 202 c1 java.lang.invoke.MethodType.methodType(Ljava/lang/Class;[Ljava/lang/Class;Z)Ljava/lang/invoke/MethodType; java.base@20-ea (69 bytes) @ 0x0000fffdc4f31060 [0x0000fffdc4f30d80+0x00000000000002e0]
J 243 c1 java.lang.invoke.MemberName.getMethodType()Ljava/lang/invoke/MethodType; java.base@20-ea (211 bytes) @ 0x0000fffdc4f44d4c [0x0000fffdc4f43f40+0x0000000000000e0c]
J 351 c1 java.lang.invoke.DirectMethodHandle.makeAllocator(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/DirectMethodHandle; java.base@20-ea (137 bytes) @ 0x0000fffdc4f894a0 [0x0000fffdc4f89380+0x0000000000000120]
J 343 c1 java.lang.invoke.MethodHandles$Lookup.getDirectConstructorCommon(Ljava/lang/Class;Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/MethodHandle; java.base@20-ea (69 bytes) @ 0x0000fffdc4f82c40 [0x0000fffdc4f82900+0x0000000000000340]
J 434 c1 java.lang.invoke.MethodHandles$Lookup.getDirectConstructorNoSecurityManager(Ljava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle; java.base@20-ea (10 bytes) @ 0x0000fffdc4fc3320 [0x0000fffdc4fc3240+0x00000000000000e0]
J 431 c1 java.lang.invoke.MethodHandles$Lookup.unreflectConstructor(Ljava/lang/reflect/Constructor;)Ljava/lang/invoke/MethodHandle; java.base@20-ea (55 bytes) @ 0x0000fffdc4fc1aa8 [0x0000fffdc4fc1800+0x00000000000002a8]
J 428 c1 jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessorImpl; java.base@20-ea (84 bytes) @ 0x0000fffdc4fbebf8 [0x0000fffdc4fbe8c0+0x0000000000000338]
J 421 c1 jdk.internal.reflect.ReflectionFactory.newConstructorAccessor(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessor; java.base@20-ea (144 bytes) @ 0x0000fffdc4fbba90 [0x0000fffdc4fbb680+0x0000000000000410]
J 420 c1 java.lang.reflect.Constructor.acquireConstructorAccessor()Ljdk/internal/reflect/ConstructorAccessor; java.base@20-ea (75 bytes) @ 0x0000fffdc4fba390 [0x0000fffdc4fba180+0x0000000000000210]
J 419 c1 java.lang.reflect.Constructor.newInstanceWithCaller([Ljava/lang/Object;ZLjava/lang/Class;)Ljava/lang/Object; java.base@20-ea (51 bytes) @ 0x0000fffdc4fb9b04 [0x0000fffdc4fb9980+0x0000000000000184]
J 452 c1 java.lang.Class.newInstance()Ljava/lang/Object; java.base@20-ea (134 bytes) @ 0x0000fffdc4fd3224 [0x0000fffdc4fd2000+0x0000000000001224]
J 465 c1 nsk.jvmti.ResourceExhausted.resexhausted003$MyClassLoader.loadClass(Ljava/lang/String;[B)Ljava/lang/Class; (37 bytes) @ 0x0000fffdc4fdd074 [0x0000fffdc4fdce00+0x0000000000000274]
j  nsk.jvmti.ResourceExhausted.resexhausted003.run([Ljava/lang/String;Ljava/io/PrintStream;)I+185
j  nsk.jvmti.ResourceExhausted.resexhausted003.main([Ljava/lang/String;)V+9
j  java.lang.invoke.LambdaForm$DMH+0x0000000801002000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;)V+10 java.base@20-ea
j  java.lang.invoke.LambdaForm$MH+0x0000000801003400.invoke(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+33 java.base@20-ea
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 java.base@20-ea
j  jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+55 java.base@20-ea
j  jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+23 java.base@20-ea
j  java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;+102 java.base@20-ea
j  com.sun.javatest.regtest.agent.MainWrapper$MainThread.run()V+134
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x0000fffdcc41017c;;;","2022-11-22 13:37;dholmes;Posting a resource exhausted event from deep inside VM code seems inherently risky!;;;","2022-11-23 00:08;rrich;2 new occurrences in the daily test cycle. Looks as if something has changed that makes the failure more likely.;;;","2022-11-23 01:36;thartmann;This is extremely hard to reproduce (triggers in less than 1/1500 runs) but it seems that the fix for JDK-8293584 triggered this. [~coleenp] is that plausible?;;;","2022-11-23 02:02;thartmann;I can reproduce this reliably with the following change:

--- a/src/hotspot/share/oops/method.cpp
+++ b/src/hotspot/share/oops/method.cpp
@@ -605,6 +605,14 @@ void Method::build_profiling_method_data(const methodHandle& method, TRAPS) {
   MutexLocker ml(THREAD, MethodData_lock);
   if (method->method_data() == NULL) {
     ClassLoaderData* loader_data = method->method_holder()->class_loader_data();
+    for (long i = 0; i < 5; ++i) {
+      MethodData::allocate(loader_data, method, THREAD);
+      if (HAS_PENDING_EXCEPTION) {
+        CompileBroker::log_metaspace_failure();
+        ClassLoaderDataGraph::set_metaspace_oom(true);
+        return;   // return the exception (which is cleared)
+      }
+    }
;;;","2022-11-23 03:57;thartmann;I think we should just get rid of the lock:
https://github.com/openjdk/jdk/pull/11316;;;","2022-11-23 04:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11316
Date: 2022-11-23 11:56:45 +0000;;;","2022-12-01 00:51;dukebot;Changeset: 9f24a6f4
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-12-01 08:49:54 +0000
URL:       https://git.openjdk.org/jdk/commit/9f24a6f43c6a5e1fa92275e0a87af4f1f0603ba3
;;;",,,,,,,,,,,,,,,,,,,,,,,
Remove duplicated null typos in javadoc ,JDK-8297385,5088024,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,yyang,yyang,2022-11-21 19:31,2022-11-30 23:43,2023-10-01 09:56,2022-11-24 21:56,20,,,,,,,20,xml,,0,,,,,,,,,,,,,,,,,,,,,,"Create on behalf of https://github.com/dongxuwang
----
Remove redundant word ""null"" in java.xml.parsers javadoc",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zc8j:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@40911f81,,,,,,,,,"2022-11-21 22:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11169
Date: 2022-11-15 15:05:45 +0000;;;","2022-11-22 23:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11311
Date: 2022-11-23 06:58:09 +0000;;;","2022-11-24 21:56;dukebot;Changeset: 0ed8b337
Author:    Dongxu Wang <dongxu@apache.org>
Committer: Yi Yang <yyang@openjdk.org>
Date:      2022-11-25 05:55:19 +0000
URL:       https://git.openjdk.org/jdk/commit/0ed8b337eaa59881a62af5dcc0abb454761f2e71
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test fails to compile after JDK-8288047,JDK-8297382,5088021,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,dholmes,dholmes,2022-11-21 16:46,2022-11-28 15:05,2023-10-01 09:56,2022-11-22 01:27,20,,,,,,,20,hotspot,,0,noreg-self,oracle-triage-20,regression,tier2,,,,,,,,,,,,,,,,,,"test/jdk/sun/security/util/math/BigIntegerModuloP.java:160: error: BigIntegerModuloP.ImmutableElement is not abstract and does not override abstract method getLimbs() in IntegerModuloP
    private class ImmutableElement extends Element

Possibly the updated file was missing from the commit in JDK-8288047",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288047,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,"0|i2zc7v:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-22 00:21;thartmann;ILW = Test fails due to missing override (test bug), single test at tier 2, no workaround = MHH = P2;;;","2022-11-22 00:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11282
Date: 2022-11-22 08:28:44 +0000;;;","2022-11-22 01:27;dukebot;Changeset: 42c20374
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-11-22 09:25:44 +0000
URL:       https://git.openjdk.org/jdk/commit/42c2037429a8ee6f683bbbc99fb48c540519524c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add tier10 to HS atr,JDK-8297381,5088020,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-11-21 16:24,2022-11-28 14:21,2023-10-01 09:56,2022-11-22 17:03,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,Right now tier10 is not a part of ATR. It is needed to add it to hs-atr-ci.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zc7n:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EOS might not be delivered by progressbuffer in some cases,JDK-8297362,5087998,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,almatvee,almatvee,2022-11-21 13:48,2022-12-09 16:12,2023-10-01 09:56,2022-12-02 16:15,8u25,jfx20,,,,,,jfx20,javafx,,0,8-bp,intermittent,sn_132,,,,,,,,,,,,,,,,,,,"EOS might not be delivered by progressbuffer in some cases. This is regression from JDK-8043352. JDK-8043352 moved clearing pending events in progress buffer when upstream sends EOS. We need to do this for any other events except EOS. If we clear pending EOS, then it will not be delivered and we simple hang due to downstream will wait for data or EOS. We still need to clear any events such as new segment and not deliver it once we receive EOS.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296557,,,,,,JDK-8043352,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9,,,,,,,,"0|i2zc2r:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2022-11-22 17:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/961
Date: 2022-11-23 00:57:11 +0000;;;","2022-12-02 16:15;dukebot;Changeset: 9416874f
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-12-03 00:13:02 +0000
URL:       https://git.openjdk.org/jfx/commit/9416874f632d8d036a324e195fae58e6a831bfc5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regenerated checked-in html files with new pandoc,JDK-8297353,5087985,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-11-21 08:20,2022-11-28 15:03,2023-10-01 09:56,2022-11-21 10:35,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"Following JDK-8297165, we should regenerate all checked in html files using pandoc 1.19.2, to avoid spurious changes to the files with future changes to the markdown source files.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zbzv:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-21 08:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11274
Date: 2022-11-21 16:20:57 +0000;;;","2022-11-21 10:35;dukebot;Changeset: 15e2e285
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-11-21 18:32:40 +0000
URL:       https://git.openjdk.org/jdk/commit/15e2e2852b7024cf9a6d58fd7ccb2474c1730e09
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
configure should check pandoc version,JDK-8297352,5087982,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-11-21 08:16,2022-11-28 15:03,2023-10-01 09:56,2022-11-21 10:35,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"Following JDK-8297165, configure should check if pandoc is of the same version. Having the same version of pandoc guarantees consistent output of the generated files.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zbz7:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-21 08:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11273
Date: 2022-11-21 16:17:22 +0000;;;","2022-11-21 10:35;dukebot;Changeset: 817e039b
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-11-21 18:33:32 +0000
URL:       https://git.openjdk.org/jdk/commit/817e039bb5300e95ba60749f237f1243f72f4eeb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"TestStress*.java fail with ""got different traces for the same seed""",JDK-8297343,5087972,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,rcastanedalo,rcastanedalo,2022-11-21 06:21,2022-12-13 23:44,2023-10-01 09:56,2022-11-28 04:28,20,,,,,,,20,hotspot,,0,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-20,tier3,,,,,,,,,,,,,,,,,"compiler/debug/TestStressCM.java and compiler/debug/TestStressIGVNAndCCP.java fail with ""java.lang.RuntimeException: got different [CCP/code motion] traces for the same seed...""

The regression seems to be due to the introduction of non-determinism in the node dumps of otherwise identical compilations. 

E.g. one run dumps

282 ConI \=\=\= 0 [[ 229 ]] \#int\:6 java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField)\:exact *

while the next (identical) run dumps

282 ConI \=\=\= 0 [[ 229 ]] \#int\:6 java/lang/Class (java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField,java/io/Serializable,java/lang/constant/Constable)\:exact *

So far, the failure has only been observed in macosx builds (both x64 and aarch64).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6312651,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b25,20,,os_x,,,,,,"0|i2zbwz:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-21 06:24;rcastanedalo;The failure is likely introduced by JDK-6312651.;;;","2022-11-21 06:27;rcastanedalo;ILW = test failure, likely due to test / dumping bug; frequent on macOS; ignore test failures = MHM = P3;;;","2022-11-22 00:21;rcastanedalo;[~thartmann] I will have a look. The problem seems to be that JDK-6312651 dumps interface sets in an order that is determined by the raw pointers of the set elements. This is unstable across different runs and leads to different node dumps for otherwise identical compilations.

Stable node dumps are useful for debugging (e.g. when diffing compiler traces from two different runs), so the solution is probably dumping interface sets in some order (e.g. lexicographic order of each interface dump) that does not depend on raw pointer values.

[~roland] does that make sense to you?;;;","2022-11-22 00:38;roland;[~rcastanedalo] it does. Dumping in a stable order is reasonable for sure. Would you like me to take care of it?;;;","2022-11-22 00:50;rcastanedalo;[~roland] Sure, that would be great since you are obviously more knowledgeable about this code. Thanks Roland!;;;","2022-11-23 07:17;roland;[~rcastanedalo] Is this easily reproducible (I don't have a macos system to try it on)? If so could you give: https://github.com/rwestrel/jdk/tree/JDK-8297343 a try?;;;","2022-11-23 23:38;rcastanedalo;Thanks, I will try it out.;;;","2022-11-24 02:37;rcastanedalo;[~roland] I tested your patch on macOS and it fixes the issue (did not see any failure in 20 runs of each test, whereas before the patch each test fails about 75% of the times).;;;","2022-11-24 07:23;roland;[~rcastanedalo] thanks for taking the time to do that.;;;","2022-11-24 07:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11357
Date: 2022-11-24 15:27:41 +0000;;;","2022-11-28 04:28;dukebot;Changeset: eff4c039
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-11-28 12:27:14 +0000
URL:       https://git.openjdk.org/jdk/commit/eff4c039dab99aa946dbdde1be8901929ebbfc6f
;;;",,,,,,,,,,,,,,,,,,,,,,,,
make LOG=debug is too verbose,JDK-8297342,5087971,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-11-21 06:10,2022-11-28 15:03,2023-10-01 09:56,2022-11-21 07:14,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"The `debug` level of make logging is not really useful, since it spits out a full expansion of all named param macro arguments and their values. 

With the NamedParamsMacroTemplate being stable for years, this is seldom useful, and the massive amount of logs drown out everything else.

We should move this debugging to the `trace` level.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zbwr:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-21 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11264
Date: 2022-11-21 14:11:27 +0000;;;","2022-11-21 07:14;dukebot;Changeset: 0ac01485
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-11-21 15:13:08 +0000
URL:       https://git.openjdk.org/jdk/commit/0ac01485d3cf65b35a6ae7431dafccbca7e21eee
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: RemoteRecordingStream doesn't respect setMaxAge and setMaxSize,JDK-8297338,5087967,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-11-21 04:57,2022-11-28 15:09,2023-10-01 09:56,2022-11-23 09:50,17,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"When using a recording stream, events that have been processed/consumed should be removed from the disk repository, unless a user has invoked setMaxAge or setMaxSize to set a policy for how long to hold on to event data. 
 
This works for RecordingStream, but the implementation is missing from RemoteRecordingStream.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zbvv:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-11-21 10:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11275
Date: 2022-11-21 16:41:07 +0000;;;","2022-11-21 23:18;egahlin;I also fixed a problem where chunks may we written out of order in the dump file and disk chunks not being released properly in case of an IOException. To make the code easier to understand, the code uses more logical methods when interacting with the Deque, such as peekLast(), pollLast() and addFirst().;;;","2022-11-23 09:50;dukebot;Changeset: 2afb4c33
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-11-23 17:48:29 +0000
URL:       https://git.openjdk.org/jdk/commit/2afb4c3327b6830a009ee1ab8a1eb7803ef53007
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove easy warnings in javafx.base,JDK-8297332,5087962,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2022-11-21 03:51,2023-03-16 12:56,2023-10-01 09:56,2022-11-21 16:34,jfx20,,,,,,,jfx20,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,"
- Remove unsupported/unnecessary SuppressWarning annotations
- Remove reduntant type specifications (use diamond operator)
- Remove unused or duplicate imports
- Remove unnecessary casts (type is already correct type or can be autoboxed)
- Remove unnecessary semi-colons (at end of class definitions, or just repeated ones)
- Remove redundant super interfaces (interface that is already inherited)
- Remove unused type parameters
- Remove declared checked exceptions that are never thrown
- Add missing @Override annotations

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297300,,,,,,,,,,,,JDK-8287690,,,,,,,,,,,JDK-8290244,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zbur:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2022-11-21 04:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/957
Date: 2022-11-21 11:53:30 +0000;;;","2022-11-21 16:34;dukebot;Changeset: 9819d45b
Author:    John Hendrikx <jhendrikx@openjdk.org>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-11-22 00:31:52 +0000
URL:       https://git.openjdk.org/jfx/commit/9819d45bb1eb63253be5e951c6e10a779dc71a1e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[8u] hotspot needs to recognise VS2019,JDK-8297329,5087956,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,apavlyutkin,apavlyutkin,apavlyutkin,2022-11-21 00:35,2023-01-30 20:10,2023-10-01 09:56,2022-12-01 02:27,openjdk8u362,,,,,,,openjdk8u372,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,,,,,"The hotspot build scripts are to be updated to recognize cl.exe versions 1920...1929, map it to new compilers family VS2019, and apply the same rules as for VS2017. Recognition of link.exe versions 1420..1429 to be added as well",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,"0|i2zbtf:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-21 02:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/187
Date: 2022-11-21 10:13:25 +0000;;;","2022-11-21 18:53;apavlyutkin;Fix Request (8u)

The patch updates hotspot build scripts to recognize cl.exe of the versions 1920..1929 and link.exe of the versions 1420..1429 that belong to MSVS2019 family

Verification: MSVS2019 (32/64-bits, release/debug) builds now fail with

awt_DCHolder.cpp
C:\PROGRA~2\MICROS~2\2019\COMMUN~1\VC\Tools\MSVC\14.29.30133\include\cstdlib(46): error C2039: 'Do_Not_Use_calloc_Use_safe_Calloc_Instead': is not a member of '`global namespace''
C:\PROGRA~2\MICROS~2\2019\COMMUN~1\VC\Tools\MSVC\14.29.30133\include\cstdlib(46): error C2873: 'Do_Not_Use_calloc_Use_safe_Calloc_Instead': symbol cannot be used in a using-declaration
C:\PROGRA~2\MICROS~2\2019\COMMUN~1\VC\Tools\MSVC\14.29.30133\include\cstdlib(52): error C2039: 'Do_Not_Use_malloc_Use_safe_Malloc_Instead': is not a member of '`global namespace''
C:\PROGRA~2\MICROS~2\2019\COMMUN~1\VC\Tools\MSVC\14.29.30133\include\cstdlib(52): error C2873: 'Do_Not_Use_malloc_Use_safe_Malloc_Instead': symbol cannot be used in a using-declaration
C:\PROGRA~2\MICROS~2\2019\COMMUN~1\VC\Tools\MSVC\14.29.30133\include\cstdlib(58): error C2039: 'Do_Not_Use_realloc_Use_safe_Realloc_Instead': is not a member of '`global namespace''
slowdebug/jdk/objs/libawt/awt_DCHolder.obj] Error 2
make[2]: *** Waiting for unfinished jobs....

that will be fixed by backporting of JDK-8241087

Regression: MSVS2017 (32/64-bits, release/debug) build - Ok

;;;","2022-12-01 02:27;dukebot;Changeset: 7b548500
Author:    Alexey Pavlyutkin <apavlyutkin@azul.com>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2022-12-01 10:25:56 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/7b5485004616b596e38f1205be76b91aa426ef65
;;;","2023-01-30 20:10;dukebot;Changeset: 7b548500
Author:    Alexey Pavlyutkin <apavlyutkin@azul.com>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2022-12-01 10:25:56 +0000
URL:       https://git.openjdk.org/jdk8u/commit/7b5485004616b596e38f1205be76b91aa426ef65
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TestBug] LocalDateTimeStringConverterTest.testChronologyConsistency fails with JDK 20,JDK-8297316,5087943,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,arapte,arapte,arapte,2022-11-20 22:38,2023-04-27 05:59,2023-10-01 09:56,2023-04-25 12:15,jfx20,,,,,,,jfx21,javafx,,0,datetime,sn_142,test_sprint,testbug,,,,,,,,,,,,,,,,,,"The test fails with JDK20 on all platforms with below error:
---------------------------------------------------------------------------
LocalDateTimeStringConverterTest > [0] > test.javafx.util.converter.LocalDateTimeStringConverterTest.testChronologyConsistency[0] FAILED
    org.junit.ComparisonFailure: expected:<..., 60 Shōwa, 12:34:56[ ]PM> but was:<..., 60 Shōwa, 12:34:56[ ]PM>
        at org.junit.Assert.assertEquals(Assert.java:117)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at test.javafx.util.converter.LocalDateTimeStringConverterTest.testChronologyConsistency(LocalDateTimeStringConverterTest.java:160)

LocalDateTimeStringConverterTest > [1] > test.javafx.util.converter.LocalDateTimeStringConverterTest.testChronologyConsistency[1] FAILED
    org.junit.ComparisonFailure: expected:<..., 60 Shōwa, 12:34:56[ ]PM> but was:<..., 60 Shōwa, 12:34:56[ ]PM>
        at org.junit.Assert.assertEquals(Assert.java:117)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at test.javafx.util.converter.LocalDateTimeStringConverterTest.testChronologyConsistency(LocalDateTimeStringConverterTest.java:160)

LocalDateTimeStringConverterTest > [2] > test.javafx.util.converter.LocalDateTimeStringConverterTest.testChronologyConsistency[2] FAILED
    org.junit.ComparisonFailure: expected:<..., 60 Shōwa, 12:34:56[ ]PM> but was:<..., 60 Shōwa, 12:34:56[ ]PM>
        at org.junit.Assert.assertEquals(Assert.java:117)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at test.javafx.util.converter.LocalDateTimeStringConverterTest.testChronologyConsistency(LocalDateTimeStringConverterTest.java:160)
---------------------------------------------------------------------------

It will be a must fix before updating boot jdk to 20 OR 
before official release of OpenJFX20.(which would be expected to be compatible with JDK20)

At first look it seems like a test bug: There may be a API change in JDK20 to which jfx should adapt to.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295965,,,,,,,,,,,JDK-8284840,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zbqj:",9223372036854775807,b15,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2023-02-22 10:12;mhanl;@arapte please check also out my comments in https://bugs.openjdk.org/browse/JDK-8265727 which sounds very related.
;;;","2023-03-24 05:52;kcr;This was likely caused by an intentional change in JDK 20 to update to CLDR version 42 in JDK-8284840.

The release note says, in part:

Some of the notable changes in the upstream that may affect formatting are:
    ...
    NBSP prefixed to a, instead of a normal space

which is probably the cause of the failures.

We need a solution that will allow the test to pass on JDK 17-19 as well as JDK 20+, so a possible solution would be to replace the NBSP with a space before comparison; another might be to use a regex to look for either a space or a NBSP.;;;","2023-04-24 00:03;arapte;Along with the fix in JDK-8284840, they also had corrected some tests
Following is a change in test, which matches with our scenario.
https://github.com/openjdk/jdk/blob/4900517479f12b59cd8f1c31ad94ad7487c522f7/test/jdk/java/time/test/java/time/format/TestUnicodeExtension.java#L130

Changing our tests as above fixes the issue with 20 but fails with 19.
Will it be Ok to have fix like below, by checking the major part of jdk version.?

--- a/modules/javafx.base/src/test/java/test/javafx/util/converter/LocalDateTimeStringConverterTest.java
+++ b/modules/javafx.base/src/test/java/test/javafx/util/converter/LocalDateTimeStringConverterTest.java
@@ -52,7 +52,7 @@ import org.junit.runners.Parameterized;
 @RunWith(Parameterized.class)
 public class LocalDateTimeStringConverterTest {
 
-    private static final String JAPANESE_DATE_STRING = ""Saturday, January 12, 60 Shōwa, 12:34:56 PM"";
+    private static String JAPANESE_DATE_STRING;
     private static final LocalDateTime VALID_LDT_WITH_SECONDS    = LocalDateTime.of(1985, 1, 12, 12, 34, 56);
     private static final LocalDateTime VALID_LDT_WITHOUT_SECONDS = LocalDateTime.of(1985, 1, 12, 12, 34, 0);
 
@@ -104,6 +104,13 @@ public class LocalDateTimeStringConverterTest {
         this.locale = null;
         this.formatter = null;
         this.parser = null;
+
+        final var version = Runtime.Version.parse(System.getProperty(""java.version""));
+        if (version.major() < 20) {
+            JAPANESE_DATE_STRING = ""Saturday, January 12, 60 Shōwa, 12:34:56 PM"";
+        } else {
+            JAPANESE_DATE_STRING = ""Saturday, January 12, 60 Shōwa, 12:34:56\u202fPM"";
+        }
     };;;","2023-04-25 00:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1114
Date: 2023-04-25 07:02:47 +0000;;;","2023-04-25 12:15;dukebot;Changeset: 52d32c09
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2023-04-25 19:13:02 +0000
URL:       https://git.openjdk.org/jfx/commit/52d32c09b34368f83dc761776bef410c0d1e991f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in ShenandoahFullGC,JDK-8297309,5087936,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2022-11-20 20:27,2022-12-12 20:58,2023-10-01 09:56,2022-11-28 03:05,11,17,19,20,,,,20,hotspot,,0,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,lsan,redhat-interest,,,,,,,,,,,,,,LSan identified a memory leak. ShenandoahFullGC allocates _preserved_marks but fails to deallocate it.,,,,,,,,,,,JDK-8298007,JDK-8297775,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zboz:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-20 20:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11255
Date: 2022-11-21 04:25:13 +0000;;;","2022-11-28 03:05;dukebot;Changeset: b80f5af6
Author:    Justin King <jcking@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2022-11-28 11:03:47 +0000
URL:       https://git.openjdk.org/jdk/commit/b80f5af6981440aec14f4dedbc5ee46364d0254c
;;;","2022-11-28 04:35;shade;Fix Request (17u)

Fixes a trivial Shenandoah memory leak. Applies cleanly. Testing passes.;;;","2022-11-28 04:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/938
Date: 2022-11-28 12:23:48 +0000;;;","2022-11-28 05:06;shade;Fix Request (19u)

Same reason as for 17u.;;;","2022-11-28 05:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/98
Date: 2022-11-28 13:05:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify that javax.lang.model.util.Elements.overrides is irreflexive,JDK-8297305,5087930,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,prappo,prappo,2022-11-20 08:52,2022-12-19 12:39,2023-10-01 09:56,2022-12-13 12:48,20,,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"javax.lang.model.util.Elements#overrides should explicitly say that javax.lang.model.util.Elements#overrides(m, m, ...) returns false. That is, a method never overrides itself.

While it might be obvious to some, to others it is buried in JLS 8.4.8.1. It could be helpful to have that invariant spelled out because a programmer uses that API to build algorithms. At the very least, the programmer might want to know if they need to use an additional equality check:

    if ( elements.overrides(m1, m2, ...) && !m1.equals(m2) )
",,,,,,,,,,,JDK-8298800,,,,,,,,,,,,,,,,,,,,,JDK-8298698,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zbnn:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c6c40,,,,,,,,,"2022-12-13 12:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/27
Date: 2022-12-13 20:21:15 +0000;;;","2022-12-13 12:48;dukebot;Changeset: c6f22b41
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-12-13 20:48:13 +0000
URL:       https://git.openjdk.org/jdk20/commit/c6f22b416072a9be5436f45e2f595ceea228f3bd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gtest/AsyncLogGtest.java fails AsyncLogTest.stdoutOutput_vm,JDK-8297302,5087922,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xliu,dcubed,dcubed,2022-11-19 20:20,2023-05-29 15:30,2023-10-01 09:56,2023-04-20 10:03,20,21,,,,,,21,hotspot,,0,intermittent,logging,tier6,tier8,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

gtest/AsyncLogGtest.java

Here's a log file snippet:

#section:main
----------messages:(8/384)----------
command: main GTestWrapper --gtest_filter=AsyncLogTest* -Xlog:async
reason: User specified action: run main/native GTestWrapper --gtest_filter=AsyncLogTest* -Xlog:async 
started: Sun Nov 20 00:21:58 UTC 2022
Mode: agentvm
Agent id: 9
Additional exports to unnamed modules from @modules: java.base/jdk.internal.misc
finished: Sun Nov 20 00:21:59 UTC 2022
elapsed time (seconds): 0.901
----------configuration:(15/1896)----------

<snip>

----------System.out:(48/2406)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/linux-x64-open.test/hotspot/gtest/server/gtestLauncher -jdk /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/linux-x64-open.jdk/jdk-20 --gtest_output=xml:test_result.xml --gtest_catch_exceptions=0 --gtest_filter=AsyncLogTest* -Xlog:async]
[2022-11-20T00:21:58.948021094Z] Gathering output for process 2105500
[2022-11-20T00:21:59.027231203Z] Waiting for completion for process 2105500
[2022-11-20T00:21:59.028549366Z] Waiting for completion finished for process 2105500
Output and diagnostic info for process 2105500 was saved into 'pid-2105500-output.log'
Note: Google Test filter = AsyncLogTest*
[==========] Running 6 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 6 tests from AsyncLogTest
[ RUN      ] AsyncLogTest.asynclog_vm
[0.078s][warning][logging] 1Warning
[0.078s][error  ][logging] 1Error
[       OK ] AsyncLogTest.asynclog_vm (2 ms)
[ RUN      ] AsyncLogTest.logMessage_vm
[       OK ] AsyncLogTest.logMessage_vm (1 ms)
[ RUN      ] AsyncLogTest.logBuffer_vm
[       OK ] AsyncLogTest.logBuffer_vm (0 ms)
[ RUN      ] AsyncLogTest.droppingMessage_vm
[       OK ] AsyncLogTest.droppingMessage_vm (1 ms)
[ RUN      ] AsyncLogTest.stdoutOutput_vm
open/test/hotspot/gtest/logging/test_asynclog.cpp:268: Failure
Value of: file_contains_substring(TestLogFileName, ""LogStreamWithAsyncLogImpl"")
  Actual: false
Expected: true
open/test/hotspot/gtest/logging/test_asynclog.cpp:269: Failure
Value of: file_contains_substring(TestLogFileName, ""logStream msg1-msg2-msg3"")
  Actual: false
Expected: true
open/test/hotspot/gtest/logging/test_asynclog.cpp:270: Failure
Value of: file_contains_substring(TestLogFileName, ""logStream newline"")
  Actual: false
Expected: true
[  FAILED  ] AsyncLogTest.stdoutOutput_vm (1 ms)
[ RUN      ] AsyncLogTest.stderrOutput_vm
[       OK ] AsyncLogTest.stderrOutput_vm (1 ms)
[----------] 6 tests from AsyncLogTest (83 ms total)

[----------] Global test environment tear-down
[==========] 6 tests from 1 test case ran. (83 ms total)
[  PASSED  ] 5 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] AsyncLogTest.stdoutOutput_vm

 1 FAILED TEST
ERROR: RUN_ALL_TESTS() failed. Error 1

[2022-11-20T00:21:59.033912868Z] Waiting for completion for process 2105500
[2022-11-20T00:21:59.034670902Z] Waiting for completion finished for process 2105500
----------System.err:(10/646)----------
java.lang.AssertionError: gtest execution failed; exit code = 2. the failed tests: [AsyncLogTest::stdoutOutput_vm, AsyncLogTest::stdoutOutput_vm, AsyncLogTest::stdoutOutput_vm]
	at GTestWrapper.main(GTestWrapper.java:98)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.AssertionError",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309067,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,os_x,,,,,"0|i2zblv:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-14 11:54;jsjolen;It's also AsyncLogTest.stderrOutput_vm and always run with Xlog:async.;;;","2023-02-15 09:48;xliu;only JDK-8292989 is introduced in jdk20. 
;;;","2023-02-15 10:45;xliu;I will investigate this crash.  feel free to assign this to me. 
Afshin Zafari do you have any lead? 
 ;;;","2023-02-15 14:55;xliu;all failures are in AsyncLogTest.stdoutOutput_vm  and AsyncLogTest.stderrOutput_vm ?
How intermittent do you see these failures? ;;;","2023-02-15 16:40;dholmes;These failures are very rare. We have seen only 4 cases since November. One on linux-x64, one on macos-x64 and the two most recent on linux-aarch64.

I would have to guess this is a glitch with file flushing.;;;","2023-02-16 14:39;xliu;investigating. ;;;","2023-02-16 14:40;xliu;Thanks for the lead. I will check the theory you proposed. ;;;","2023-04-18 18:13;xliu;We get stdout content captured by gtest. testing::internal::GetCapturedStdout() and then write it back to a file. The same process applies to stderr. 
I need to look into gtest and see if it guarantee the full contents of stdout/err.




;;;","2023-04-18 23:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13524
Date: 2023-04-19 06:32:51 +0000;;;","2023-04-20 10:03;dukebot;Changeset: 9412c0a2
Author:    Xin Liu <xliu@openjdk.org>
Date:      2023-04-20 17:02:53 +0000
URL:       https://git.openjdk.org/jdk/commit/9412c0a2caf7d1c279f933e1f767eb3689a2a1ca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup unused methods in JavaUtilJarAccess,JDK-8297301,5087920,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-11-19 17:26,2022-11-28 15:04,2023-10-01 09:56,2022-11-21 19:23,,,,,,,,20,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,JavaUtilJarAccess contains several methods that are not used in OpenJDK. They can be removed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296734,,,,,,,,,,,JDK-8297304,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zblf:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2022-11-19 17:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11072
Date: 2022-11-10 01:02:00 +0000;;;","2022-11-21 19:23;dukebot;Changeset: f0e99c63
Author:    pandaapo <1052156701@qq.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2022-11-22 03:22:05 +0000
URL:       https://git.openjdk.org/jdk/commit/f0e99c634693fafc0c5d1103184e73c6669629db
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/awt/Mouse/EnterExitEvents/DragWindowTest.java fails with ""No MouseReleased event on label!""",JDK-8297296,5087912,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,dcubed,dcubed,2022-11-19 06:42,2023-06-14 00:32,2023-10-01 09:56,2022-12-14 14:11,17,19,20,8,,,,21,client-libs,,0,jdk11u-sap-interest,noreg-self,problemlist,regression,sn_132,sn_133,testbug,tier4,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/awt/Mouse/EnterExitEvents/DragWindowTest.java

Here's a log file snippet from the macosx-x64 sighting:

#section:main
----------messages:(7/267)----------
command: main DragWindowTest
reason: User specified action: run main DragWindowTest 
started: Sat Nov 19 06:25:17 GMT 2022
Mode: othervm
Additional options from @modules: --add-modules java.desktop
finished: Sat Nov 19 06:25:18 GMT 2022
elapsed time (seconds): 1.131
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(11/655)----------
java.lang.RuntimeException: No MouseReleased event on label!
	at DragWindowTest.main(DragWindowTest.java:107)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException: No MouseReleased event on label!
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: No MouseReleased event on label!
----------rerun:(41/6357)*----------

The log file on the macosx-aarch64 sighting looks the same/similar.",,,,,,,,,,,JDK-8303517,JDK-8302991,JDK-8302302,JDK-8303162,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304636,JDK-8023562,JDK-8298823,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2zbjn:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-11-19 06:53;dcubed;jdk-20+25-1851-tier4 is the first build-ID where the failures occurred and that build-ID
includes a fix for the same test:

JDK-8023562 [TEST_BUG] java/awt/Mouse/EnterExitEvents/DragWindowTest.java failed on ubuntu 13 and Mac 10.11

Since this looks like a regression, I've bumped the priority from P4 -> P2.;;;","2022-11-21 11:09;azvegint;The failing test was deproblemlisted recently.
https://github.com/openjdk/jdk/commit/11fc65fa58e39e70ff03966ba96e4ae72237b8fc;;;","2022-11-29 15:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11425
Date: 2022-11-29 23:10:56 +0000;;;","2022-12-14 14:11;dukebot;Changeset: 0ed6d0b4
Author:    Alisen Chung <achung@openjdk.org>
Date:      2022-12-14 22:10:01 +0000
URL:       https://git.openjdk.org/jdk/commit/0ed6d0b456e58e4122b97c3d12faabada0d8c530
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/c2/irTests/TestMulNodeIdealization.java failed compilation,JDK-8297294,5087910,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,dcubed,dcubed,2022-11-19 06:25,2022-12-08 15:29,2023-10-01 09:56,2022-12-02 13:07,20,,,,,,,20,tools,,0,intermittent,noreg-hard,tier2,,,,,,,,,,,,,,,,,,,"The following test failed to compile in the JDK20 CI:

compiler/c2/irTests/TestMulNodeIdealization.java

Here's a snippet from the log file:

#section:compile
----------messages:(7/342)----------
command: compile /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg/compiler/c2/irTests/TestMulNodeIdealization.java
reason: .class file out of date or does not exist
started: Sat Nov 19 12:53:32 UTC 2022
Mode: agentvm
Agent id: 3
finished: Sat Nov 19 12:53:33 UTC 2022
elapsed time (seconds): 1.683
----------configuration:(13/1977)----------
Boot Layer (javac runtime environment)
  class path: /opt/mach5/mesos/work_dir/jib-master/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/jtreg.jar 
  patch:      java.base /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/patches/java.base

javac compilation environment
  source path: /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg/compiler/c2/irTests
               /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/lib
               /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg
  class path:  /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg/compiler/c2/irTests
               /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/c2/irTests/TestMulNodeIdealization.d
               /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib
               /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2

----------rerun:(32/7825)*----------
cd /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/scratch/1 && \\
HOME=/tmp/sparky-temp-home-3018052469186330153/user_home \\
JIB_DATA_DIR=/opt/mach5/mesos/work_dir/jib-master \\
JIB_HOME=/opt/mach5/mesos/work_dir/jib-master/install/com/oracle/java/jib/jib/3.0-SNAPSHOT/jib-3.0-20221020.215446-499-distribution.zip/jib-3.0-SNAPSHOT-distribution \\
JTREG_KEYWORDS=""!headful"" \\
JTREG_VERBOSE=fail,error,time \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/linux-x64-debug.test \\
_JVM_DWARF_PATH=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/linux-x64-debug.jdk_symbols/jdk-20/fastdebug \\
    /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/linux-x64-debug.jdk/jdk-20/fastdebug/bin/javac \\
        -J-XX:MaxRAMPercentage=4.16667 \\
        -J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/tmp \\
        -J-Dtest.vm.opts='-XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/tmp' \\
        -J-Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=4.16667 -J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/tmp' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts=-XX:UseAVX=0 \\
        -J-Dtest.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/linux-x64-debug.jdk/jdk-20/fastdebug \\
        -J-Dcompile.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/linux-x64-debug.jdk/jdk-20/fastdebug \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/linux-x64-debug.test/hotspot/jtreg/native \\
        -J-Dtest.root=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg \\
        -J-Dtest.name=compiler/c2/irTests/TestMulNodeIdealization.java \\
        -J-Dtest.file=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg/compiler/c2/irTests/TestMulNodeIdealization.java \\
        -J-Dtest.src=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg/compiler/c2/irTests \\
        -J-Dtest.src.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg/compiler/c2/irTests:/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg \\
        -J-Dtest.classes=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/c2/irTests/TestMulNodeIdealization.d \\
        -J-Dtest.class.path=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/c2/irTests/TestMulNodeIdealization.d:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2 \\
        -J-Dtest.class.path.prefix=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/c2/irTests/TestMulNodeIdealization.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg/compiler/c2/irTests:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2 \\
        -d /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/c2/irTests/TestMulNodeIdealization.d \\
        -sourcepath /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg/compiler/c2/irTests:/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg \\
        -classpath /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg/compiler/c2/irTests:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2/compiler/c2/irTests/TestMulNodeIdealization.d:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2/test/lib:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94930/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e5b206f-e951-433b-abf1-b3520baacf54/runs/2d0f3a7b-7b12-4e3d-9b80-fd6f9b21df91/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_vector_1/classes/2 /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg/compiler/c2/irTests/TestMulNodeIdealization.java
----------direct:(17/1456)----------
/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/lib/jdk/test/lib/process/ProcessTools.java:817: warning: [removal] ThreadDeath in java.lang has been deprecated and marked for removal
            if (e instanceof ThreadDeath) {
                             ^
/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg/compiler/lib/ir_framework/driver/irmatching/parser/HotSpotPidFileParser.java:75: error: incompatible types: inference variable C has incompatible equality constraints TreeSet<E>,Object,R
                                                                  .collect(Collectors.toCollection(TreeSet::new));
                                                                          ^
  where C,T#1,E,R,A,T#2 are type-variables:
    C extends Collection<T#1> declared in method <T#1,C>toCollection(Supplier<C>)
    T#1 extends Object declared in method <T#1,C>toCollection(Supplier<C>)
    E extends Object declared in class TreeSet
    R extends Object declared in method <R,A>collect(Collector<? super T#2,A,R>)
    A extends Object declared in method <R,A>collect(Collector<? super T#2,A,R>)
    T#2 extends Object declared in interface Stream
Note: /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/lib/jdk/test/lib/process/ProcessTools.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 error
1 warning
result: Failed. Compilation failed: Compilation failed",,,,,,,,,,,JDK-8297985,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291336,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2zbj7:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-19 06:29;dcubed;This is the strangest compilation failure I've seen in the CI. This failure
only occurred on ONE platform in Tier2. The error occurred in a file
outside of the test proper itself:

/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+25-1855/src.full/open/test/hotspot/jtreg/compiler/lib/ir_framework/driver/irmatching/parser/HotSpotPidFileParser.java:75: error: incompatible types: inference variable C has incompatible equality constraints TreeSet<E>,Object,R 
                                                                  .collect(Collectors.toCollection(TreeSet::new)); 
                                                                          ^ 
  where C,T#1,E,R,A,T#2 are type-variables: 
    C extends Collection<T#1> declared in method <T#1,C>toCollection(Supplier<C>) 
    T#1 extends Object declared in method <T#1,C>toCollection(Supplier<C>) 
    E extends Object declared in class TreeSet 
    R extends Object declared in method <R,A>collect(Collector<? super T#2,A,R>) 
    A extends Object declared in method <R,A>collect(Collector<? super T#2,A,R>) 
    T#2 extends Object declared in interface Stream

and the compilation error occurred in a build-ID with no related changes (that I
can see anyway):

Changeset: 0845b39c
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-11-19 11:52:55 +0000
URL:       https://git.openjdk.org/jdk/commit/0845b39caf6f04dca9cb7a5852f05b4b5ffbc034

8296796: Provide clean, platform-agnostic interface to C-heap trimming

Reviewed-by: dholmes, rkennke

! src/hotspot/os/aix/os_aix.inline.hpp
! src/hotspot/os/bsd/os_bsd.inline.hpp
! src/hotspot/os/linux/os_linux.cpp
! src/hotspot/os/linux/os_linux.inline.hpp
! src/hotspot/os/linux/trimCHeapDCmd.cpp
! src/hotspot/os/windows/os_windows.inline.hpp
! src/hotspot/share/runtime/os.hpp
! src/hotspot/share/utilities/globalDefinitions.hpp
! test/hotspot/gtest/runtime/test_os.cpp
! test/hotspot/jtreg/serviceability/dcmd/vm/TrimLibcHeapTest.java;;;","2022-11-19 17:22;iveresov;This fix seems to do c-heap trimming on linux. Perhaps trims a tad too much?;;;","2022-11-20 14:53;dholmes;I see now the point about the compilation using the VM under test and so we may have trimmed ""too much"".  If it were buggy though one would expect more failures, but of course it is very hard to predict such failure modes.

I suspect this is a non-deterministic javac bug. Looking at JDK-8288590 it seems javac may be susceptible to issues if hashcodes collide. I suggest assigning this to javac team to comment on.;;;","2022-11-20 22:24;thartmann;I agree. Moving this to tools/javac.;;;","2022-11-30 07:05;vromero;this one is hard to reproduce, given its nature, I think that the best bet is to remove all uses of non deterministic java.util.Map implementations in our inference machine;;;","2022-11-30 09:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11437
Date: 2022-11-30 17:20:45 +0000;;;","2022-12-02 13:06;dcubed; dukebot Dukebot added a comment - 2022-12-01 17:00
Changeset: 82031d32
Author: Vicente Romero <vromero@openjdk.org>
Date: 2022-12-01 21:57:55 +0000
URL: https://git.openjdk.org/jdk/commit/82031d32a002d183d2a18bd1e50bd5826b65380c;;;","2022-12-02 13:10;dcubed;Fix was pushed while main bug was targeted to '21'.
Reset the main bug to fixed in '20' and copied the Robo Duke entry here.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/channels/FileChannel/FileExtensionAndMap.java is too slow,JDK-8297292,5087908,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bpb,alanb,alanb,2022-11-19 01:00,2023-02-15 23:18,2023-10-01 09:56,2023-02-10 11:45,20,,,,,,,21,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,"FileExtensionAndMap.java has been excluded for many releases because it required too much disk space and was too slow. The test was changed to run again via JDK-8249693 but it's still way too slow, taking 40+ minutes on some systems. We may have to temporarily exclude it until it can run in a reasonable time.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249693,JDK-8168628,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zbir:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-12-08 11:16;bpb;Verified execution times of 29 and 30 minutes on linux-aarch64 and linux-x64, respectively.;;;","2023-02-07 14:00;bpb;FileExtensionAndMap was added by the fix for JDK-8168628.;;;","2023-02-08 17:58;bpb;The test writes 9G to 18G of data to disk depending on whether the source and target are on the same  volume. Up to 20 files may be written but no more than 3 at once.;;;","2023-02-08 18:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12479
Date: 2023-02-09 02:08:03 +0000;;;","2023-02-10 11:45;dukebot;Changeset: 84e47996
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-02-10 19:44:00 +0000
URL:       https://git.openjdk.org/jdk/commit/84e47996e88cf640e5e9d5ab4be8a640c67afbf5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Example code in Scanner class,JDK-8297288,5087904,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2022-11-18 15:06,2022-12-19 12:39,2023-10-01 09:56,2022-12-12 10:01,,,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"There is one using `System.in` as:
```
     Scanner sc = new Scanner(System.in);
```
With JEP 400, the default charset and console charset may differ, thus this example may result in an unexpected one if the user tries to read a String from the scanner. This should be replaced with:
```
    Scanner sc = new Scanner(Console.reader())
```
so that the user would not have to take encoding into consideration.",,,,,,,,,,,JDK-8298663,,,,,,,,,,,,,,,,,JDK-8295803,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zbhv:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-12-09 12:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/14
Date: 2022-12-09 18:32:37 +0000;;;","2022-12-12 10:01;dukebot;Changeset: 0267aa52
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-12-12 17:59:25 +0000
URL:       https://git.openjdk.org/jdk20/commit/0267aa528b83be9914fee4bea8f548b8404b31f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/vthread tests crashing after JDK-8296324,JDK-8297286,5087901,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,dcubed,dcubed,2022-11-18 14:29,2023-07-17 01:42,2023-10-01 09:56,2023-04-03 17:48,20,,,,,,,21,hotspot,,0,loom,problemlist,regression,tier1,tier3,tier4,,,,,,,,,,,,,,,,"The following tests failed in the JDK20 CI:

runtime/vthread/RedefineClass.java
runtime/vthread/TestObjectAllocationSampleEvent.java

Both tests are failing with:

#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S131467/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3fb387e1-b4dd-406d-a5f8-7e59fb2c8293/runs/9968d5d0-bc0b-480e-9150-ea289de80a93/workspace/open/src/hotspot/share/prims/jvm.cpp:3982), pid=86896, tid=40195
#  assert(thread->is_in_VTMS_transition()) failed: sanity check

on five platforms. The failures started in jdk-20+25-1845 which contains just:

JDK-8296324 JVMTI GetStackTrace truncates vthread stack trace for agents loaded into running VM

so this looks like a regression.

Here's the crashing stack for RedefineClass.java on linux-x64:

---------------  T H R E A D  ---------------

Current thread (0x00007fbbf8050150):  JavaThread ""ForkJoinPool-1-worker-1"" daemon [_thread_in_vm, id=2472997, stack(0x00007fbc3af1c000,0x00007fbc3b01d000)]

Stack: [0x00007fbc3af1c000,0x00007fbc3b01d000],  sp=0x00007fbc3b01b4c0,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x11dfcb4]  JVM_VirtualThreadUnmountEnd+0x114  (jvm.cpp:3982)
j  java.lang.VirtualThread.notifyJvmtiUnmountEnd(Z)V+0 java.base@20-ea
j  java.lang.VirtualThread.afterTerminate(Z)V+42 java.base@20-ea
j  java.lang.VirtualThread.runContinuation()V+96 java.base@20-ea
j  java.lang.VirtualThread$$Lambda$8+0x000000080104a9a8.run()V+4 java.base@20-ea
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@20-ea
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@20-ea
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@20-ea
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 java.base@20-ea
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@20-ea
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@20-ea
v  ~StubRoutines::call_stub 0x00007fbc53b6ed21
V  [libjvm.so+0x1046060]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x500  (javaCalls.cpp:417)
V  [libjvm.so+0x1046872]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x432  (javaCalls.cpp:331)
V  [libjvm.so+0x1046e61]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:193)
V  [libjvm.so+0x11c93fb]  thread_entry(JavaThread*, JavaThread*)+0x12b  (jvm.cpp:2876)
V  [libjvm.so+0x107be36]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:700)
V  [libjvm.so+0x1a7a400]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1711993]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:710)

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.VirtualThread.notifyJvmtiUnmountEnd(Z)V+0 java.base@20-ea
j  java.lang.VirtualThread.afterTerminate(Z)V+42 java.base@20-ea
j  java.lang.VirtualThread.runContinuation()V+96 java.base@20-ea
j  java.lang.VirtualThread$$Lambda$8+0x000000080104a9a8.run()V+4 java.base@20-ea
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@20-ea
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@20-ea
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@20-ea
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 java.base@20-ea
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@20-ea
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@20-ea
v  ~StubRoutines::call_stub 0x00007fbc53b6ed21


Here's the crashing stack for TestObjectAllocationSampleEvent.java on linux-x64:

---------------  T H R E A D  ---------------

Current thread (0x00007f418404e290):  JavaThread ""ForkJoinPool-1-worker-1"" daemon [_thread_in_vm, id=2473028, stack(0x00007f41c55f5000,0x00007f41c56f6000)]

Stack: [0x00007f41c55f5000,0x00007f41c56f6000],  sp=0x00007f41c56f44c0,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x11dfcb4]  JVM_VirtualThreadUnmountEnd+0x114  (jvm.cpp:3982)
j  java.lang.VirtualThread.notifyJvmtiUnmountEnd(Z)V+0 java.base@20-ea
j  java.lang.VirtualThread.afterTerminate(Z)V+42 java.base@20-ea
j  java.lang.VirtualThread.runContinuation()V+96 java.base@20-ea
j  java.lang.VirtualThread$$Lambda$7+0x000000080104a578.run()V+4 java.base@20-ea
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@20-ea
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@20-ea
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@20-ea
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 java.base@20-ea
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@20-ea
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@20-ea
v  ~StubRoutines::call_stub 0x00007f41dc442d21
V  [libjvm.so+0x1046060]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x500  (javaCalls.cpp:417)
V  [libjvm.so+0x1046872]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x432  (javaCalls.cpp:331)
V  [libjvm.so+0x1046e61]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:193)
V  [libjvm.so+0x11c93fb]  thread_entry(JavaThread*, JavaThread*)+0x12b  (jvm.cpp:2876)
V  [libjvm.so+0x107be36]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:700)
V  [libjvm.so+0x1a7a400]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1711993]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:710)

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.VirtualThread.notifyJvmtiUnmountEnd(Z)V+0 java.base@20-ea
j  java.lang.VirtualThread.afterTerminate(Z)V+42 java.base@20-ea
j  java.lang.VirtualThread.runContinuation()V+96 java.base@20-ea
j  java.lang.VirtualThread$$Lambda$7+0x000000080104a578.run()V+4 java.base@20-ea
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@20-ea
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@20-ea
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@20-ea
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 java.base@20-ea
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@20-ea
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@20-ea
v  ~StubRoutines::call_stub 0x00007f41dc442d21",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298347,,,,,,,,,,,,,,,,,JDK-8305520,JDK-8296324,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zbh7:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-11-18 16:00;sspitsyn;Changing priority to P2 after the failing tests have been problem-listed.;;;","2022-11-18 17:16;sspitsyn;This potential problem existed before the fix of JDK-8296324 but the fix of JDK-8296324 enabled it.
This is a minimal fix which resolves the issue with two tests:
diff --git a/src/java.base/share/classes/java/lang/VirtualThread.java b/src/java.base/share/classes/java/lang/VirtualThread.java
index 704910c3c36..5ddd2243d8f 100644
--- a/src/java.base/share/classes/java/lang/VirtualThread.java
+++ b/src/java.base/share/classes/java/lang/VirtualThread.java
@@ -302,7 +302,7 @@ final class VirtualThread extends BaseVirtualThread {
 
             } finally {
                 // last unmount
-                if (notifyJvmti) notifyJvmtiUnmountBegin(true);
+                if (notifyJvmtiEvents) notifyJvmtiUnmountBegin(true);
                 unmount();
 
                 // final state;;;","2022-11-22 16:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11304
Date: 2022-11-23 00:24:28 +0000;;;","2023-01-09 15:33;sspitsyn;Deferral Request
For proper fix this bug needs some additional infrastructure.
There are both complexity of fix and risk of regressions involved.
One of the problems to solve is to avoid a potential performance impact.
The plan is to fix this in JDK 21 but there is not enough time to fix it in JDK 20.
The impacted two tests have been problem-listed.;;;","2023-01-10 10:27;mwthomps;ILW=HLM=P3;;;","2023-03-21 19:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13133
Date: 2023-03-22 02:12:12 +0000;;;","2023-04-03 17:48;dukebot;Changeset: a1a9ec6e
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-04-04 00:46:43 +0000
URL:       https://git.openjdk.org/jdk/commit/a1a9ec6e46b70d5436711f89f4bf603ebacc8060
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah pacing causes assertion failure during VM initialization,JDK-8297285,5087898,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asmehra,asmehra,asmehra,2022-11-18 13:54,2022-12-08 15:29,2023-10-01 09:56,2022-12-02 06:25,20,,,,,,,20,hotspot,,0,gc-shenandoah,,,,,,,,,,,,,,,,,,,,,"Shenandoah pacing hits the following assert with fastdebug build if the allocation credit is exhausted during VM initialization.
Command to recreate:

$ java -XX:+UseShenandoahGC -Xmx32m -XX:+UnlockExperimentalVMOptions -XX:ShenandoahPacingIdleSlack=1 -version

Assertion:

#  Internal Error (/home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/runtime/mutex.cpp:235), pid=925459, tid=925460
#  assert(self->is_active_Java_thread()) failed: invariant

Upon credit exhaustion, the pacing algorithm (in ShenandoahPacer::pace_for_alloc()) tries to delay the progress of allocating thread by doing a timed wait on a MonitorLocker (in ShenandoahPacer::wait()) which asserts as the main thread is not yet in the thread list. Main thread is added to the thread list much later during initialization.

Relevant stack trace at the time of assertion is:

#5  0x00007f25a184af6b in report_vm_error (file=file@entry=0x7f25a2a12e30 ""/home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/runtime/mutex.cpp"", line=line@entry=235, 
    error_msg=error_msg@entry=0x7f25a2a13658 ""assert(self->is_active_Java_thread()) failed"", detail_fmt=detail_fmt@entry=0x7f25a2a6af8b ""invariant"")
    at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/runtime/thread.hpp:651
#6  0x00007f25a21c3e39 in Monitor::wait (this=0x7f259c0e09f0, timeout=timeout@entry=10) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/runtime/mutex.cpp:235
#7  0x00007f25a24d01b5 in ShenandoahPacer::wait (this=this@entry=0x7f259c0e0740, time_ms=10) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/gc/shenandoah/shenandoahPacer.cpp:279
#8  0x00007f25a24d03b0 in ShenandoahPacer::pace_for_alloc (this=0x7f259c0e0740, words=<optimized out>) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/gc/shenandoah/shenandoahPacer.cpp:256
#9  0x00007f25a2474391 in ShenandoahHeap::allocate_memory (this=0x7f259c0b4230, req=...) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/gc/shenandoah/shenandoahAllocRequest.hpp:91
#10 0x00007f25a247465f in ShenandoahHeap::allocate_new_tlab (this=<optimized out>, min_size=256, requested_size=9834, actual_size=0x7f25a3f1c830)
    at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp:798
#11 0x00007f25a210dc5d in MemAllocator::allocate_inside_tlab_slow (this=this@entry=0x7f25a3f1c8a0, allocation=...) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/memory/universe.hpp:311
#12 0x00007f25a210ef9e in MemAllocator::allocate_inside_tlab (allocation=..., this=0x7f25a3f1c8a0) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/gc/shared/memAllocator.cpp:280
#13 MemAllocator::mem_allocate (allocation=..., this=0x7f25a3f1c8a0) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/gc/shared/memAllocator.cpp:356
#14 MemAllocator::allocate (this=this@entry=0x7f25a3f1c8a0) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/gc/shared/memAllocator.cpp:369
#15 0x00007f25a1c0f70e in CollectedHeap::array_allocate (do_zero=true, this=<optimized out>, __the_thread__=0x7f259c099890, length=3, size=<optimized out>, klass=<optimized out>)
    at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/gc/shared/collectedHeap.inline.hpp:41
#16 InstanceKlass::allocate_objArray (this=this@entry=0x800000f70, n=n@entry=1, length=length@entry=3, __the_thread__=__the_thread__@entry=0x7f259c099890)
    at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/oops/instanceKlass.cpp:1350
#17 0x00007f25a223e2e0 in oopFactory::new_objArray (klass=0x800000f70, length=3, __the_thread__=__the_thread__@entry=0x7f259c099890)
    at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/oops/instanceKlass.hpp:927
#18 0x00007f25a17e4e9e in ConstantPool::restore_unshareable_info (this=0x800692bb0, __the_thread__=__the_thread__@entry=0x7f259c099890)
    at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/classfile/vmClasses.hpp:56
#19 0x00007f25a27667ea in vmClasses::resolve_all (__the_thread__=__the_thread__@entry=0x7f259c099890) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/oops/instanceKlass.hpp:643
#20 0x00007f25a2643719 in SystemDictionary::initialize (__the_thread__=__the_thread__@entry=0x7f259c099890) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/classfile/systemDictionary.cpp:1712
#21 0x00007f25a26e0125 in Universe::genesis (__the_thread__=__the_thread__@entry=0x7f259c099890) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/memory/universe.cpp:346
#22 0x00007f25a26e0d65 in universe2_init () at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/memory/universe.cpp:967
#23 0x00007f25a1c0be9a in init_globals () at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/runtime/init.cpp:136
#24 0x00007f25a26b4a7f in Threads::create_vm (args=args@entry=0x7f25a3f1ce90, canTryAgain=canTryAgain@entry=0x7f25a3f1cdcf) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/runtime/threads.cpp:570
#25 0x00007f25a1da6839 in JNI_CreateJavaVM_inner (args=0x7f25a3f1ce90, penv=0x7f25a3f1ce88, vm=0x7f25a3f1ce80) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/prims/jni.cpp:3624
#26 JNI_CreateJavaVM (vm=0x7f25a3f1ce80, penv=0x7f25a3f1ce88, args=0x7f25a3f1ce90) at /home/asmehra/data/ashu-mehra/jdk/src/hotspot/share/prims/jni.cpp:3710
#27 0x00007f25a38e4eea in InitializeJVM (ifn=<synthetic pointer>, penv=0x7f25a3f1ce88, pvm=0x7f25a3f1ce80) at /home/asmehra/data/ashu-mehra/jdk/src/java.base/share/native/libjli/java.c:1457


Although this is less likely to happen with current code base, but I started hitting it when working on JDK-8293650 as it increases heap allocation during JVM initialization.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zbgj:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-24 14:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11360
Date: 2022-11-24 21:57:06 +0000;;;","2022-12-02 06:25;dukebot;Changeset: 415cfd2e
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2022-12-02 14:22:52 +0000
URL:       https://git.openjdk.org/jdk/commit/415cfd2e28e6b7613712ab63a1ab66522e9bf0f2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResolutionErrorTable's key is wrong,JDK-8297284,5087897,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2022-11-18 13:43,2022-12-05 14:05,2023-10-01 09:56,2022-11-30 05:16,20,,,,,,,20,hotspot,,0,metadata,,,,,,,,,,,,,,,,,,,,,"The ResourceHashtable key for the resolution error table is the value of the address of constant pool + index.  This assumes that the index is for the constant pool so that this would point to a unique value within a given constant pool.

Invokedynamic bootstrap method errors also save entries in the resolution error table, but use an offset from the cpCache index.  So cpool + cpCache_index + offset will not be guaranteed to point within the constant pool and might be ambiguous with another constant pool and index.  It's not likely, but it's possible.

The ResolutionErrorTable needs to have a key that compares the constant pool and index, and not the sum of the two.

The address arithmetic is wrong for any constant pool entries too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zbgb:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-21 05:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11244
Date: 2022-11-18 20:32:20 +0000;;;","2022-11-30 05:16;dukebot;Changeset: 301cf52f
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-11-30 13:14:52 +0000
URL:       https://git.openjdk.org/jdk/commit/301cf52fa2a913eb6bda1e31cbcb8e438a64c56e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove thread text from Subject.current,JDK-8297276,5087888,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,mullan,mullan,2022-11-18 11:08,2022-12-05 14:01,2023-10-01 09:56,2022-11-28 14:04,20,,,,,,,20,security-libs,,0,noreg-doc,release-note=yes,,,,,,,,,,,,,,,,,,,,"This text is not consistent with virtual threads and should be removed. The new APIs should not provide any guarantees that the subject will be preserved across child threads.

     * When a new thread is created, its current subject is the same as
     * the one of its parent thread, and will not change even if
     * its parent thread's current subject is changed to another value.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297351,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zbeb:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5c1d831a,,,,,,,,,"2022-11-22 08:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11292
Date: 2022-11-22 16:26:30 +0000;;;","2022-11-28 14:04;dukebot;Changeset: d450314b
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-11-28 22:02:54 +0000
URL:       https://git.openjdk.org/jdk/commit/d450314bd35ae431de6131cd01db4fa992ce10a4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Cast node is not processed again in CCP and keeps a wrong too narrow type which is later replaced by top,JDK-8297264,5087872,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,dcubed,dcubed,2022-11-18 06:19,2023-01-25 01:03,2023-10-01 09:56,2022-12-04 23:11,11,17,18,19,20,,,20,hotspot,,0,c2,intermittent,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,tier6,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

applications/javafuzzer/MediumTest.java

Here's a snippet from the log file:

Summary of the JavaFuzzer run:
------------------------------
Host:     ol8-x64-123246
Tests:    12 x 50
Args:     -conf config.yml

Started  at: Fri Nov 18 02:23:43 UTC 2022


r4- 50: 33 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 17 Reference Java failures
r3- 50: 38 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 12 Reference Java failures
r11- 50: 27 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 23 Reference Java failures
r8- 50: 36 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 14 Reference Java failures
r12- 50: 28 passed, 2 crashes, 0 fails, 0 hangs, 0 incorrect tests, 21 Reference Java failures
r1- 50: 34 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 16 Reference Java failures
r7- 50: 36 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 14 Reference Java failures
r2- 50: 33 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 17 Reference Java failures
r10- 50: 29 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 21 Reference Java failures
r6- 50: 29 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 21 Reference Java failures
r9- 50: 31 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 19 Reference Java failures
r5- 50: 28 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 22 Reference Java failures

Finished at: Fri Nov 18 03:51:22 UTC 2022


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S122514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ccc22c45-6ee4-44e3-a220-fcb16ee5313c/runs/d541d200-a135-4df8-9627-2aff32b06bf0/workspace/open/src/hotspot/share/opto/block.cpp:1357), pid=1409813, tid=1409840
#  assert(n->is_Root() || n->is_Region() || n->is_Phi() || n->is_MachMerge() || def_block->dominates(block)) failed: uses must be dominated by definitions
#
# JRE version: Java(TM) SE Runtime Environment (20.0+24) (fastdebug build 20-ea+24-1796)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+24-1796, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x76ba81]  PhaseCFG::verify() const+0x1d1
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /tmp/fuzzer.tmp.BfribQfP9J/core.1409813)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S122514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ccc22c45-6ee4-44e3-a220-fcb16ee5313c/runs/d541d200-a135-4df8-9627-2aff32b06bf0/workspace/open/src/hotspot/share/opto/block.cpp:1357), pid=1410177, tid=1410192
#  assert(n->is_Root() || n->is_Region() || n->is_Phi() || n->is_MachMerge() || def_block->dominates(block)) failed: uses must be dominated by definitions
#
# JRE version: Java(TM) SE Runtime Environment (20.0+24) (fastdebug build 20-ea+24-1796)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+24-1796, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x76ba81]  PhaseCFG::verify() const+0x1d1
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /tmp/fuzzer.tmp.BfribQfP9J/core.1410177)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

[2022-11-18T03:51:22.333950639Z] Waiting for completion for process 1404536
[2022-11-18T03:51:22.334143063Z] Waiting for completion finished for process 1404536
----------System.err:(13/728)----------
java.lang.RuntimeException: assertEquals: expected 1 to equal 2
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:189)
	at applications.javafuzzer.JavaFuzzerRunner.main(JavaFuzzerRunner.java:245)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: assertEquals: expected 1 to equal 2


Here's the crashing thread's stack from hs_err_pid1409813.log:

---------------  T H R E A D  ---------------

Current thread (0x00007f1d3433d2a0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=1409840, stack(0x00007f1d0b726000,0x00007f1d0b827000)]


Current CompileTask:
C2:    377   12    b  4       Test::vMeth1 (274 bytes)

Stack: [0x00007f1d0b726000,0x00007f1d0b827000],  sp=0x00007f1d0b821fa0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x76ba81]  PhaseCFG::verify() const+0x1d1  (block.cpp:1357)
V  [libjvm.so+0xaf4d84]  Compile::Code_Gen()+0x2d4  (compile.cpp:2949)
V  [libjvm.so+0xafad6d]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x19ad  (compile.cpp:864)
V  [libjvm.so+0x90b167]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7  (c2compiler.cpp:113)
V  [libjvm.so+0xb07d7c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xb08b88]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x107b776]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:699)
V  [libjvm.so+0x1a7afc0]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1712143]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:710)",,,,,,,,,,,JDK-8298839,JDK-8298846,JDK-8300961,JDK-8301056,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257197,JDK-8273496,JDK-8269752,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2zbar:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-18 06:25;dcubed;The same assert failure is mentioned in the following bug:

JDK-8291025 Jtreg compiler/loopopts/TestUnreachableInnerLoop.java fails with MaxVectorSize=8

but it is for a different test with different options so I didn't
add this sighting to that bug.;;;","2022-11-18 07:31;chagedorn;Might be related to  JDK-8288981 as well. I'll have a look.

ILW = C2 assertion due to broken graph, single fuzzer test, disable compilation of affected method = HLM = P3;;;","2022-11-21 06:52;chagedorn;Most likely unrelated to JDK-8288981, as it also triggers with -XX:-UseLoopPredicate and we are not applying RangeCheckElimination.;;;","2022-11-30 01:34;chagedorn;Starts to fail after JDK-8269752.;;;","2022-12-01 01:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11448
Date: 2022-12-01 09:37:57 +0000;;;","2022-12-04 23:11;dukebot;Changeset: a5739239
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-12-05 07:09:04 +0000
URL:       https://git.openjdk.org/jdk/commit/a57392390b0abe5db496775efcc369bafdf420f1
;;;","2023-01-17 09:21;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Typical C2 risk, medium change. As the issue is well reproducible we should take it definitely.
I had to resolve becase a reengeneering change is missing in 17. 
Test passes and fails without the fix. SAP nightly testing passed.

;;;","2023-01-17 09:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1078
Date: 2023-01-17 17:19:44 +0000;;;","2023-01-24 07:17;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Typical C2 risk, medium change. We should take it as as it is in 17 and a clean backport from there.
Test passes but passes without the fix, too.  SAP nightly testing passed.;;;","2023-01-24 07:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1685
Date: 2023-01-24 15:22:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
Typo in `java -help` referencing -disable-@files instead of --disable-@files,JDK-8297258,5087863,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,asotona,asotona,2022-11-18 03:51,2022-11-28 14:57,2023-10-01 09:56,2022-11-18 13:44,11,17,18,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"There is an inconsistency in the documentation. Online documentation (https://docs.oracle.com/en/java/javase/18/docs/specs/man/java.html#standard-options-for-java) uses --disable-@files, while `java -help` uses -disable-@files. Regardless both ways fail, and it seems that the java -help is most likely the incorrect one based on code review.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zb8r:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2022-11-18 04:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11236
Date: 2022-11-18 11:57:40 +0000;;;","2022-11-18 13:44;dukebot;Changeset: 3a15e848
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2022-11-18 21:41:32 +0000
URL:       https://git.openjdk.org/jdk/commit/3a15e8483c3155add892279f4870628fa04cb130
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad alignment check in MemorySegment.elements,JDK-8297255,5087860,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-11-18 03:09,2022-12-05 09:54,2023-10-01 09:56,2022-12-05 09:54,19,20,repo-panama,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"The change in this commit:

https://github.com/openjdk/jdk/commit/9d43d25da8bcfff425a795dcc230914a384a5c82#diff-a311ae3c57c4204970424f03af3d0744a80f9ce43c2e4f6fdad8dc83bbfe515d 

Introduced a regression in few routines such as MemorySegment.elements which want to ensure that the size of the segments has to be a multiple of the layout.

The check went from:

byteSize() % elementLayout.byteSize() != 0

To:

(byteSize() & (elementLayout.byteSize() - 1)) == 0;

The latter check only works for power of two (in fact we use it for alignment checks), so this change is incorrect.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zb83:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-11-22 06:47;mcimadamore;Fix added to upstream PR:
https://github.com/openjdk/jdk/pull/10872/commits/66dd888d5743925cb3b9e97036d0864ff4da6e76;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: TestRemoteDump should use RemoteRecordingStream,JDK-8297245,5087849,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,egahlin,egahlin,2022-11-17 23:17,2022-11-28 14:57,2023-10-01 09:56,2022-11-18 08:04,,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,The test uses RecordingStream instead of RemoteRecordingStream,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zb5n:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-11-18 00:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11233
Date: 2022-11-18 07:27:14 +0000;;;","2022-11-18 08:04;dukebot;Changeset: f34ca801
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-11-18 16:03:12 +0000
URL:       https://git.openjdk.org/jdk/commit/f34ca80167eb5e34951a24e029a0e84bdabfd883
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use-after-free during library unloading on Linux,JDK-8297242,5087842,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2022-11-17 21:21,2022-12-12 20:57,2023-10-01 09:56,2022-11-28 22:55,20,,,,,,,20,hotspot,,0,asan,os,,,,,,,,,,,,,,,,,,,,"os::dll_unload retrieves the library name from the dynamic loader, then calls dlclose, and then references the library name. dlclose frees the memory storing the library name, leading to use-after-free.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zb43:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-17 22:12;dholmes;What code are you looking at? From what I see the code only prints the value of the pointer it doesn't dereference it:

void os::dll_unload(void *lib) {
  const char* l_path = LINUX_ONLY(os::Linux::dll_path(lib))
                       NOT_LINUX(""<not available>"");
  if (l_path == NULL) l_path = ""<not available>"";
  int res = ::dlclose(lib);

  if (res == 0) {
    Events::log_dll_message(NULL, ""Unloaded shared library \""%s\"" ["" INTPTR_FORMAT ""]"",
                            l_path, p2i(lib));
    log_info(os)(""Unloaded shared library \""%s\"" ["" INTPTR_FORMAT ""]"", l_path, p2i(lib));
  } else {
    const char* error_report = ::dlerror();
    if (error_report == NULL) {
      error_report = ""dlerror returned no error description"";
    }

    Events::log_dll_message(NULL, ""Attempt to unload shared library \""%s\"" ["" INTPTR_FORMAT ""] failed, %s"",
                            l_path, p2i(lib), error_report);
    log_info(os)(""Attempt to unload shared library \""%s\"" ["" INTPTR_FORMAT ""] failed, %s"",
                  l_path, p2i(lib), error_report);
  }
};;;","2022-11-17 22:28;jcking;l_path is the pointer in question and its printed with ""%s"" so the string contents. dll_path returns a string that is owned by the dynamic linker.;;;","2022-11-17 23:09;dholmes;Thanks. Interesting that dlclose doesn't document that it frees anything, nor does dlinfo warn you about this. But a simple os::strdup will fix it.;;;","2022-11-18 00:01;jcking;No problem. https://github.com/openjdk/jdk/pull/11231 should fix it.;;;","2022-11-20 20:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11231
Date: 2022-11-18 05:29:37 +0000;;;","2022-11-28 22:55;dukebot;Changeset: 6f06f440
Author:    Justin King <jcking@openjdk.org>
Committer: Man Cao <manc@openjdk.org>
Date:      2022-11-29 06:53:56 +0000
URL:       https://git.openjdk.org/jdk/commit/6f06f440bcf8a5db379b80e8765af38a15449356
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update sun/java2d/DirectX/OnScreenRenderingResizeTest/OnScreenRenderingResizeTest.java,JDK-8297241,5087841,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,jdv,jdv,2022-11-17 21:14,2023-04-19 06:57,2023-10-01 09:56,2022-11-21 01:51,11,17,20,,,,,20,client-libs,,0,sn_131,sn_132,test_sprint,,,,,,,,,,,,,,,,,,,"Verify and update sun/java2d/DirectX/OnScreenRenderingResizeTest/OnScreenRenderingResizeTest.java as per https://github.com/openjdk/jdk/pull/11158#discussion_r1025574199
",,,,,,,,,,,JDK-8297597,JDK-8306005,JDK-8297574,JDK-8306257,JDK-8297595,JDK-8306003,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8022403,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zb3v:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-11-18 02:52;jdv;If i introduce overridden empty paint() and update(), method i see that only in Linux CI machine it reached a state where nothing was drawn. This happened 1/20 times.
Then went through https://www.oracle.com/java/technologies/painting.html which talks about system-triggered painting and app-triggered painting.

After adding logs i see that we hit overridden paint method whenever there is resize of frame. Since we are updating the frame using drawImage in a loop, we are not hitting the system triggered paint() on resize with after we call frame.setSize(). I added Thread.yield() after frame.setSize(), but it dooesn't work all the time and it is captured in its doc. So i added robot.waitForIdle after frame.setSize() to make sure that we finish system triggered resize event and then continue drawing image on the frame.;;;","2022-11-18 04:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11237
Date: 2022-11-18 12:27:46 +0000;;;","2022-11-21 01:51;dukebot;Changeset: 3c094982
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2022-11-21 09:50:57 +0000
URL:       https://git.openjdk.org/jdk/commit/3c0949824e06f2b3d44f1bde9d2292a7627b0197
;;;","2022-11-22 12:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/90
Date: 2022-11-22 20:41:05 +0000;;;","2022-11-22 13:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/919
Date: 2022-11-22 21:31:59 +0000;;;","2022-11-22 13:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1546
Date: 2022-11-22 21:31:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: assert(regs[i] != regs[j]) failed: Multiple uses of register: rax,JDK-8297235,5087831,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,aboldtch,lmesnik,lmesnik,2022-11-17 14:49,2023-02-03 06:26,2023-10-01 09:56,2022-12-13 09:54,20,,,,,,,21,hotspot,,0,hgupdate-sync,problemlist,tier8,zgc,,,,,,,,,,,,,,,,,,"Tests
java/util/stream/test/org/openjdk/tests/java/util/*
with
-XX:+UseZGC -Xcomp -XX:-TieredCompilation	
crashes with
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8482/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/9eeb1124-1328-4fe9-9f2c-1513b374afbe/runs/98142130-ad2e-4589-ba2c-9caef8b12938/workspace/open/src/hotspot/share/asm/register.hpp:247), pid=25606, tid=26426
#  assert(regs[i] != regs[j]) failed: Multiple uses of register: rax
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-11-17-0623452.leonid.mesnik.jdk-atr)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-11-17-0623452.leonid.mesnik.jdk-atr, compiled mode, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1c03ffa]  ZLoadBarrierStubC2::create(MachNode const*, Address, Register, Register, unsigned char)+0x16a
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/78e21350-18ae-4223-b5cc-d3b57f0c3e57/runs/0fc1852b-e57f-4f0f-a12b-d85d856a0810/testoutput/test-support/jtreg_open_test_jdk_jdk_util/java/util/stream/test/org/openjdk/tests/java/util/SplittableRandomTest/core.25606)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Dtest.vm.opts=-Xmx768m -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/78e21350-18ae-4223-b5cc-d3b57f0c3e57/runs/0fc1852b-e57f-4f0f-a12b-d85d856a0810/testoutput/test-support/jtreg_open_test_jdk_jdk_util/tmp -ea -esa -Dtest.tool.vm.opts=-J-Xmx768m -J-XX:MaxRAMPercentage=4.16667 -J-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/78e21350-18ae-4223-b5cc-d3b57f0c3e57/runs/0fc1852b-e57f-4f0f-a12b-d85d856a0810/testoutput/test-support/jtreg_open_test_jdk_jdk_util/tmp -J-ea -J-esa -Dtest.compiler.opts= -Dtest.java.opts=-XX:+CreateCoredumpOnCrash -XX:+UseZGC -Xcomp -XX:-TieredCompilation -Dtest.jdk=/opt/mach5/mesos/work_dir/jib-master/install/2022-11-17-0623452.leonid.mesnik.jdk-atr/linux-x64-debug.jdk/jdk-20/fastdebug -Dcompile.jdk=/opt/mach5/mesos/work_dir/jib-master/install/2022-11-17-0623452.leonid.mesnik.jdk-atr/linux-x64-debug.jdk/jdk-20/fastdebug -Dtest.timeout.factor=10.0 -Dtest.nativepath=/opt/mach5/mesos/work_dir/jib-master/install/2022-11-17-0623452.leonid.mesnik.jdk-atr/linux-x64-debug.test/jdk/jtreg/native -Dtest.root=/opt/mach5/mesos/work_dir/jib-master/install/2022-11-17-0623452.leonid.mesnik.jdk-atr/src.full/open/test/jdk -Dtest.name=java/util/stream/test/org/openjdk/tests/java/util/SplittableRandomTest.java -Dtest.file=/opt/mach5/mesos/work_dir/jib-master/install/2022-11-17-0623452.leonid.mesnik.jdk-atr/src.full/open/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/SplittableRandomTest.java -Dtest.src=/opt/mach5/mesos/work_dir/jib-master/install/2022-11-17-0623452.leonid.mesnik.jdk-atr/src.full/open/test/jdk/java/util/stream/test -Dtest.src.path=/opt/mach5/mesos/work_dir/jib-master/install/2022-11-17-0623452.leonid.mesnik.jdk-atr/src.full/open/test/jdk/java/util/stream/test -Dtest.classes=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/78e21350-18ae-4223-b5cc-d3b57f0c3e57/runs/0fc1852b-e57f-4f0f-a12b-d85d856a0810/testoutput/test-support/jtreg_open_test_jdk_jdk_util/classes/5/java/util/stream/test -Dtest.class.path=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/78e21350-18ae-4223-b5cc-d3b57f0c3e57/runs/0fc1852b-e57f-4f0f-a12b-d85d856a0810/testoutput/test-support/jtreg_open_test_jdk_jdk_util/classes/5/java/util/stream/test -Dtest.patch.path=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/78e21350-18ae-4223-b5cc-d3b57f0c3e57/runs/0fc1852b-e57f-4f0f-a12b-d85d856a0810/testoutput/test-support/jtreg_open_test_jdk_jdk_util/classes/5/lib/testlibrary/bootlib -Dtest.enable.preview=true -Xbootclasspath/a:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/jcommander-1.78.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/guice-4.2.3.jar --patch-module=java.base=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/78e21350-18ae-4223-b5cc-d3b57f0c3e57/runs/0fc1852b-e57f-4f0f-a12b-d85d856a0810/testoutput/test-support/jtreg_open_test_jdk_jdk_util/classes/5/lib/testlibrary/bootlib/java.base --add-reads=java.base=ALL-UNNAMED -Xmx768m -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/78e21350-18ae-4223-b5cc-d3b57f0c3e57/runs/0fc1852b-e57f-4f0f-a12b-d85d856a0810/testoutput/test-support/jtreg_open_test_jdk_jdk_util/tmp -ea -esa -XX:+CreateCoredumpOnCrash -XX:+UseZGC -Xcomp -XX:-TieredCompilation -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/2022-11-17-0623452.leonid.mesnik.jdk-atr/linux-x64-debug.test/jdk/jtreg/native --enable-preview com.sun.javatest.regtest.agent.MainWrapper /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/78e21350-18ae-4223-b5cc-d3b57f0c3e57/runs/0fc1852b-e57f-4f0f-a12b-d85d856a0810/testoutput/test-support/jtreg_open_test_jdk_jdk_util/java/util/stream/test/org/openjdk/tests/java/util/SplittableRandomTest.d/testng.0.jta java/util/stream/test/org/openjdk/tests/java/util/SplittableRandomTest.java false org.openjdk.tests.java.util.SplittableRandomTest

Host: ol7-x64-207068, AMD EPYC 7J13 64-Core Processor, 12 cores, 23G, Oracle Linux Server release 7.9
Time: Thu Nov 17 11:49:16 2022 UTC elapsed time: 35.000323 seconds (0d 0h 0m 35s)

---------------  T H R E A D  ---------------

Current thread (0x00007fbcd1213320):  JavaThread ""C2 CompilerThread2"" daemon [_thread_in_native, id=26426, stack(0x00007fbd154f5000,0x00007fbd155f6000)]


Current CompileTask:
C2:  35000 7736    b        java.util.concurrent.ForkJoinTask::awaitDone (510 bytes)

Stack: [0x00007fbd154f5000,0x00007fbd155f6000],  sp=0x00007fbd155f07e0,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1c03ffa]  ZLoadBarrierStubC2::create(MachNode const*, Address, Register, Register, unsigned char)+0x16a  (register.hpp:247)
V  [libjvm.so+0x30f1c8]  z_load_barrier_cmpxchg(MacroAssembler&, MachNode const*, Address, Register, Register, Label&)+0x48  (z_x86_64.ad:50)
V  [libjvm.so+0x4811dd]  zCompareAndSwapPNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x56d  (z_x86_64.ad:132)
V  [libjvm.so+0x1735a53]  PhaseOutput::scratch_emit_size(Node const*)+0x413  (output.cpp:3349)
V  [libjvm.so+0x172c148]  PhaseOutput::shorten_branches(unsigned int*)+0x2d8  (output.cpp:644)
V  [libjvm.so+0x173fe6a]  PhaseOutput::Output()+0xcca  (output.cpp:445)
V  [libjvm.so+0xaf677e]  Compile::Code_Gen()+0x48e  (compile.cpp:3001)
V  [libjvm.so+0xafc5ad]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x19ad  (compile.cpp:864)
V  [libjvm.so+0x90c9a7]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7  (c2compiler.cpp:113)
V  [libjvm.so+0xb095bc]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xb0a3c8]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x107cfb6]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:699)
V  [libjvm.so+0x1a7c540]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1713a03]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:710)

Registers:
RAX=0x00007fbf40ad7000, RBX=0x0000000000000000, RCX=0x0000000000000001, RDX=0x00007fbcd1214360
RSP=0x00007fbd155f07e0, RBP=0x00007fbd155f0860, RSI=0x00007fbd155f3bc0, RDI=0x0000000000000000
R8 =0x00007fbd155f0a90, R9 =0x0000000000000000, R10=0x0000000000000000, R11=0x0000000000000004
R12=0x00007fbcd227e158, R13=0x0000000000000000, R14=0x0000000000000020, R15=0x00007fbcd20a4bf8
RIP=0x00007fbf3f7b3ffa, EFLAGS=0x0000000000010246, CSGSFS=0x002b000000000033, ERR=0x0000000000000006
  TRAPNO=0x000000000000000e


Register to memory mapping:

RAX=0x00007fbf40ad7000 points into unknown readable memory: 0x0000000000000058 | 58 00 00 00 00 00 00 00
RBX=0x0 is NULL
RCX=0x0000000000000001 is an unknown value
RDX=0x00007fbcd1214360 points into unknown readable memory: 0x0000000000000004 | 04 00 00 00 00 00 00 00
RSP=0x00007fbd155f07e0 is pointing into the stack for thread: 0x00007fbcd1213320
RBP=0x00007fbd155f0860 is pointing into the stack for thread: 0x00007fbcd1213320
RSI=0x00007fbd155f3bc0 is pointing into the stack for thread: 0x00007fbcd1213320
RDI=0x0 is NULL
R8 =0x00007fbd155f0a90 is pointing into the stack for thread: 0x00007fbcd1213320
R9 =0x0 is NULL
R10=0x0 is NULL
R11=0x0000000000000004 is an unknown value
R12=0x00007fbcd227e158 points into unknown readable memory: 0x00007fbf3fd9b358 | 58 b3 d9 3f bf 7f 00 00
R13=0x0 is NULL
R14=0x0000000000000020 is an unknown value
R15=0x00007fbcd20a4bf8 points into unknown readable memory: 0x00007fbcd227e158 | 58 e1 27 d2 bc 7f 00 00


Top of Stack: (sp=0x00007fbd155f07e0)
0x00007fbd155f07e0:   ffffffff00000000 ffffffffffffffff
0x00007fbd155f07f0:   0000000100000058 ffffffff00000000
0x00007fbd155f0800:   00007fbf3fd01600 0000000000000000
0x00007fbd155f0810:   0000000000000000 0000000000000000
0x00007fbd155f0820:   0000000a00000000 0000000000000000
0x00007fbd155f0830:   0000000000000000 00007fbd155f08b0
0x00007fbd155f0840:   00007fbd155f09a0 00007fbd155f09a0
0x00007fbd155f0850:   0000000000000000 00007fbd155f0a90
0x00007fbd155f0860:   00007fbd155f0930 00007fbf3debf1c8
0x00007fbd155f0870:   ffffffff00000000 ffffffffffffffff
0x00007fbd155f0880:   0000000000000020 00007fbf3fd01600
0x00007fbd155f0890:   0000000000000000 0000000000000000
0x00007fbd155f08a0:   0000000000000000 0000000000000000
0x00007fbd155f08b0:   00007fbd155f0930 00007fbf3e2ceffa
0x00007fbd155f08c0:   00007fbd155f08e8 0000000000000000
0x00007fbd155f08d0:   00007fbf3fd01600 0000000000000000
0x00007fbd155f08e0:   0000000000000000 0000000000000000
0x00007fbd155f08f0:   0000000000000000 0000000000000000
0x00007fbd155f0900:   ffffffff00000000 0000000000000000
0x00007fbd155f0910:   00007fbd155f11b0 00007fbd155f09a0
0x00007fbd155f0920:   00007fbd155f0a90 00007fbcd227e158
0x00007fbd155f0930:   00007fbd155f0b60 00007fbf3e0311dd
0x00007fbd155f0940:   ffffffff00000000 ffffffffffffffff
0x00007fbd155f0950:   0000000000000020 00007fbf3fd01600
0x00007fbd155f0960:   0000000000000000 0000000000000000
0x00007fbd155f0970:   0000000000000000 0000000000000000
0x00007fbd155f0980:   00000004d20a4a70 000000200000000a
0x00007fbd155f0990:   0000000500000000 0000000400000003
0x00007fbd155f09a0:   00007fbf3fd07e18 00007fbd155f0cc8
0x00007fbd155f09b0:   00007fbd155f0d90 0101010100000000
0x00007fbd155f09c0:   0000000000000000 00007fbf3fd01600
0x00007fbd155f09d0:   ffffffff00000000 ffffffffffffffff 

Instructions: (pc=0x00007fbf3f7b3ffa)
0x00007fbf3f7b3efa:   25 62 00 66 66 48 e8 bb 7e 6d fe 4c 8b 38 4d 85
0x00007fbf3f7b3f0a:   ff 0f 84 57 03 00 00 49 8b 07 4c 89 ff ff 50 40
0x00007fbf3f7b3f1a:   84 c0 0f 84 d6 01 00 00 49 8b 07 4c 89 ff ff 50
0x00007fbf3f7b3f2a:   48 84 c0 0f 84 09 02 00 00 49 8b 87 60 06 00 00
0x00007fbf3f7b3f3a:   bf 88 01 00 00 48 8b b0 80 00 00 00 48 81 c6 40
0x00007fbf3f7b3f4a:   01 00 00 e8 ce 9f a5 fe 49 89 c7 48 85 c0 0f 84
0x00007fbf3f7b3f5a:   24 01 00 00 66 0f 6f 75 80 66 0f 6f 7d a0 4c 89
0x00007fbf3f7b3f6a:   20 66 0f 6f 55 b0 44 89 70 18 44 88 68 1c 0f 11
0x00007fbf3f7b3f7a:   70 08 0f 11 78 20 0f 11 50 30 48 8b 45 c8 41 c7
0x00007fbf3f7b3f8a:   47 58 ff ff ff ff 49 89 47 40 48 8b 45 c0 41 c7
0x00007fbf3f7b3f9a:   47 7c 00 00 00 00 49 89 47 48 0f b6 45 94 49 c7
0x00007fbf3f7b3faa:   87 80 00 00 00 00 00 00 00 41 88 47 50 41 c6 87
0x00007fbf3f7b3fba:   88 00 00 00 00 41 c7 87 f0 00 00 00 ff ff ff ff
0x00007fbf3f7b3fca:   41 c7 87 14 01 00 00 00 00 00 00 49 c7 87 18 01
0x00007fbf3f7b3fda:   00 00 00 00 00 00 41 c6 87 20 01 00 00 00 3b 5d
0x00007fbf3f7b3fea:   98 75 48 48 8d 05 24 81 62 00 48 63 fb 48 8b 00
0x00007fbf3f7b3ffa:   c6 00 58 48 8d 05 9d 5f 6d 00 48 01 c7 e8 94 02
0x00007fbf3f7b400a:   c3 ff 48 8d 0d ae f5 09 00 48 8d 15 66 34 11 00
0x00007fbf3f7b401a:   be f7 00 00 00 49 89 c0 48 8d 3d 7f 34 11 00 31
0x00007fbf3f7b402a:   c0 e8 90 c1 fa fe e8 0b 87 b0 ff 3b 5d 9c 75 48
0x00007fbf3f7b403a:   48 8d 05 d7 80 62 00 48 63 fb 48 8b 00 c6 00 58
0x00007fbf3f7b404a:   48 8d 05 50 5f 6d 00 48 01 c7 e8 47 02 c3 ff 48
0x00007fbf3f7b405a:   8d 0d 61 f5 09 00 48 8d 15 19 34 11 00 be f7 00
0x00007fbf3f7b406a:   00 00 49 89 c0 48 8d 3d 32 34 11 00 31 c0 e8 43
0x00007fbf3f7b407a:   c1 fa fe e8 be 86 b0 ff 66 48 8d 3d ee 23 62 00
0x00007fbf3f7b408a:   66 66 48 e8 2e 7d 6d fe 48 8b 18 48 85 db 0f 84
0x00007fbf3f7b409a:   02 02 00 00 48 8b 03 48 89 df ff 50 40 84 c0 0f
0x00007fbf3f7b40aa:   84 81 01 00 00 48 8b 03 48 89 df ff 50 48 84 c0
0x00007fbf3f7b40ba:   0f 84 30 01 00 00 48 8b 83 60 06 00 00 48 8b 80
0x00007fbf3f7b40ca:   80 00 00 00 48 8b 80 a0 0a 00 00 80 b8 84 02 00
0x00007fbf3f7b40da:   00 00 0f 84 96 00 00 00 48 83 c4 58 4c 89 f8 5b
0x00007fbf3f7b40ea:   41 5c 41 5d 41 5e 41 5f 5d c3 0f 1f 40 00 48 8d 


Stack slot to memory mapping:
stack at sp + 0 slots: 0xffffffff00000000 is an unknown value
stack at sp + 1 slots: 0xffffffffffffffff is an unknown value
stack at sp + 2 slots: 0x0000000100000058 is an unknown value
stack at sp + 3 slots: 0xffffffff00000000 is an unknown value
stack at sp + 4 slots: 0x00007fbf3fd01600: <offset 0x0000000002151600> in /opt/mach5/mesos/work_dir/jib-master/install/2022-11-17-0623452.leonid.mesnik.jdk-atr/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so at 0x00007fbf3dbb0000
stack at sp + 5 slots: 0x0 is NULL
stack at sp + 6 slots: 0x0 is NULL
stack at sp + 7 slots: 0x0 is NULL

",,,,,,,,,,,JDK-8298656,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298279,,,,,,,,,,,JDK-8301769,JDK-8298069,,,,,,,,"2022-12-13 00:23;rcastanedalo;Reproducer.java;https://bugs.openjdk.org/secure/attachment/102007/Reproducer.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zb1n:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-17 14:50;lmesnik;I suppose that we never tried to run these test/VM combinations. So might be not any regression.;;;","2022-11-29 02:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11410
Date: 2022-11-29 09:50:11 +0000;;;","2022-12-13 00:23;rcastanedalo;Find attached a minimal reproducer for the issue. Just run with:

java --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -Xbatch -XX:+UseZGC Reproducer.java;;;","2022-12-13 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/25
Date: 2022-12-13 15:51:45 +0000;;;","2022-12-13 09:53;dcubed;Dukebot added a comment - 2 hours ago
Changeset: 042b7062
Author: Axel Boldt-Christmas <aboldtch@openjdk.org>
Date: 2022-12-13 15:43:16 +0000
URL: https://git.openjdk.org/jdk/commit/042b7062f19b313f31b228bd96d2a74cc1165ab9;;;","2022-12-13 09:54;dcubed;Fix was pushed while main bug was targeted to '20'. Reset the main bug to fixed in '21' and copied the Robo Duke entry here.;;;","2022-12-14 13:51;dukebot;Changeset: 581f9f23
Author:    Axel Boldt-Christmas <aboldtch@openjdk.org>
Date:      2022-12-14 14:10:24 +0000
URL:       https://git.openjdk.org/jdk/commit/581f9f2306835680cd6d5dbbe37f610fb4de4677
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect generation name in the heap verification log message with Serial GC,JDK-8297217,5087808,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asmehra,asmehra,asmehra,2022-11-17 10:54,2022-11-28 14:59,2023-10-01 09:56,2022-11-20 15:57,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"The log message when verifying young gen prints the name of the old generation:

void GenCollectedHeap::verify(VerifyOption option /* ignored */) {
  log_debug(gc, verify)(""%s"", _old_gen->name());
  _old_gen->verify();

  log_debug(gc, verify)(""%s"", _old_gen->name());
  _young_gen->verify();

  log_debug(gc, verify)(""RemSet"");
  rem_set()->verify();
}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zawj:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-17 12:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11219
Date: 2022-11-17 20:38:44 +0000;;;","2022-11-20 15:57;dukebot;Changeset: 651e5479
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Kim Barrett <kbarrett@openjdk.org>
Date:      2022-11-20 23:55:47 +0000
URL:       https://git.openjdk.org/jdk/commit/651e54798a22ac896b2fd2220c81f5c0104a2f8f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Search results omit some methods,JDK-8297216,5087807,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,abuckley,abuckley,2022-11-17 10:32,2022-12-05 14:02,2023-10-01 09:56,2022-11-29 02:23,19,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"Please visit the JDK 19 javadoc (https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/nio/channels/FileChannel.html) and note the two `map` methods in the class (one permanent, one preview). Can you find these `map` methods via the search box?

`FileChannel` -- shows classes and ctors, not methods, OK, let's keep typing.
`FileChannel.` -- adds the list of members, showing methods called `lock`, `open`, etc -- but neither of the `map` methods is shown :-(
`FileChannel.map` -- shows only the `MapMode` class :-( Note that typing `FileChannel.lock` shows the `lock` methods.
`FileChannel.map(` -- finally shows the two `map` methods.

The preview `map` method is shown on the PREVIEW tab, but its existence alongside a permanent `map` method seems to be breaking search.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zawb:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-11-17 10:36;jjg;Raised to P3 (temporarily?) for at least an initial evaluation.

Losing results from Search is Not Good.;;;","2022-11-18 06:40;hannesw;The problem is caused by the interaction of two related but (until now) distinct mechanisms to improve quality of search results:

 - Matching query strings against simple element names before considering qualified names (for example a search for ""socket"" should include method ""ServerSocket.createSocket()"" because of the term's occurrence in the method name, not in the class name).
 - Ignoring matches that only cover the parameter types of an executable member (for example a search for ""int"" should not return all executable members with an int parameter).

Currently these mechanisms are implemented as separate steps. So a search for ""FileChannel.map"" is matched against the simple signature ""map(FileChannel.MapMode, long ...)"" first. While this fails on the signature's method name (because of the missing class name) it succeeds on the type of the first parameter. However this result is discarded by the second mechanism above, and we do not currently go back to matching against the fully qualified signature (which would produce the desired result).

I have a reasonably simple fix which consists in combining the two mechanisms above into a single step. I still need to create a test for it and also plan to do some manual testing. PR should be ready early next week.;;;","2022-11-22 06:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11287
Date: 2022-11-22 14:38:34 +0000;;;","2022-11-29 02:23;dukebot;Changeset: b27a61e6
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2022-11-29 10:20:58 +0000
URL:       https://git.openjdk.org/jdk/commit/b27a61e6240e19ae7802fc66894df90502508b9a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Robot capture tests should move mouse to corner of screen,JDK-8297213,5087802,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,kcr,kcr,2022-11-17 09:18,2022-11-29 06:16,2023-10-01 09:56,2022-11-18 09:24,jfx20,,,,,,,jfx20,javafx,,0,noreg-self,sn_131,test_sprint,testbug,,,,,,,,,,,,,,,,,,"This is a follow-on to JDK-8289605, which fixed a problem where intermittent failures can happen on some platforms for robot capture tests if a previous test left the mouse cursor in the region being captured. In order to reduce the scope of the fix, the change for that bug only updated two specific failing tests. The rest of the robot capture tests are still fragile in that a new test could be added in the future that leaves the mouse cursor in just the right location to affect those tests as well.

Further, the fix for JDK-8289605 moved the cursor to the bottom corner of the Stage being tested, which could still impact a test that samples the lower left pixel. A more robust fix would be to move the mouse to the lower left of the visible bounds of the Screen.

I propose to fix this globally in an `@Before` method in all tests that use robot to read pixels from the screen. At least the following tests should be looked at:

test/robot/javafx/embed/swing/RT30650GUI.java
test/robot/javafx/scene/PixelBufferDrawTest.java
test/robot/javafx/scene/RobotTest.java
test/robot/javafx/scene/canvas/ImageSmoothingDrawTest.java
test/robot/testharness/VisualTestBase.java

Note that the change done to `test/robot/javafx/scene/layout/RegionBackgroundImageUITest.java` as part of JDK-8289605 would be reverted as part of this new fix, since `RegionBackgroundImageUITest` extends `VisualTestBase`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289605,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zav7:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-11-17 09:58;angorya;One problem with moving the cursor to (any) screen corner is that it might trigger ""Active Screen Corners"" on Mac (Settings -> Mission Control -> Hot Corners).;;;","2022-11-17 10:05;kcr;Interesting observation. Btw, we already do that in MouseMoveTest, but if there is a concern here, maybe we could back off by a few pixels in X and Y?;;;","2022-11-17 10:15;angorya;You might be right - it looks like active corner is triggered when the cursor is a few pixels off the corner (but not exactly 0, it seems).

BTW, there might be a way to disable it programmatically, although the answer mentions that the method is not reliable:
https://apple.stackexchange.com/questions/362336/how-do-i-permanently-disable-hot-corners-on-mac;;;","2022-11-17 12:45;kcr;I'd rather not try to disable it from our tests. If it becomes a problem on our test machines, we can disable it on our headful test systems. Ideally we would avoid triggering hot corners for developers who run on a machine with default settings.;;;","2022-11-17 16:50;angorya;using getVisualBounds() and a small offset to avoid any docks, trays, or active corners.;;;","2022-11-17 16:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/955
Date: 2022-11-18 00:48:11 +0000;;;","2022-11-18 09:24;dukebot;Changeset: 086dac0b
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-11-18 17:22:51 +0000
URL:       https://git.openjdk.org/jfx/commit/086dac0b12233f31db33bb9fc43d821724710f70
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] refactor primitive classes tests,JDK-8297207,5087793,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-11-17 05:01,2022-11-28 14:37,2023-10-01 09:56,2022-11-28 14:37,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw5,lworld,noreg-cleanup,,,,,,,,,,,,,,,,,,,"primitive classes tests need a clean-up and refactoring similar to the one done for value classes tests:

 - remove redundant tests
 - combine all compilation related tests into one large test class that reduces the overhead of adding new tests, etc",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zat7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-18 13:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/811
Date: 2022-11-17 21:38:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/SpecialHeadersTest.java failed once in AssertionError due to selector thread remaining alive,JDK-8297200,5087786,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2022-11-17 03:13,2023-01-31 03:45,2023-10-01 09:56,2022-11-29 04:43,20,,,,,,,20,core-libs,,0,httpclient,intermittent,,,,,,,,,,,,,,,,,,,,"--- Starting 
Got IAE as expected
Waiting for HTTP operations to terminate...
PASSED: No outstanding operations or unreleased resources found in 108 clients
test SpecialHeadersTest.testHomeMadeIllegalHeader(""http://localhost:64765/http2"", ""host: all-lower-case"", false): success
config SpecialHeadersTest.beforeMethod(org.testng.TestRunner@12766580): success

--- Starting 
Got IAE as expected
WARNING: tracker for HttpClientImpl(110) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 0
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
Found 0 client still active, with 0 operations still pending out of 109 tracked clients.
test SpecialHeadersTest.testHomeMadeIllegalHeader(""http://localhost:64765/http2"", ""hoSt: mixed"", false): failure
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(110) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 0
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
Found 0 client still active, with 0 operations still pending out of 109 tracked clients.
	at ReferenceTracker.check(ReferenceTracker.java:268)
	at ReferenceTracker.check(ReferenceTracker.java:112)
	at SpecialHeadersTest.testHomeMadeIllegalHeader(SpecialHeadersTest.java:437)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zarn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-11-22 09:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11294
Date: 2022-11-22 17:24:40 +0000;;;","2022-11-29 04:43;dukebot;Changeset: d83a07b7
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-11-29 12:42:37 +0000
URL:       https://git.openjdk.org/jdk/commit/d83a07b72cfd4dc42c5d4815262fcba05c653bd5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] relocate test folder,JDK-8297199,5087785,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-11-17 03:12,2022-11-17 03:33,2023-10-01 09:56,2022-11-17 03:33,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw4,lworld,noreg-other,,,,,,,,,,,,,,,,,,,"a folder with some tests is out of place, should be moved to the right location",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292883,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zarf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-17 03:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/810
Date: 2022-11-17 11:22:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AWTAccessor and SwingAccessor should avoid double racy reads from non-volatile fields,JDK-8297195,5087780,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-11-17 02:17,2022-11-28 14:59,2023-10-01 09:56,2022-11-18 20:41,17,19,20,,,,,20,client-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,,,,,"The same bug was fixed in the SharedSecrets  by the JDK-8259021,

Some XxxAccess instances in  AWTAccessor and SwingAccessor are initialized lazily on 1st access with the following idiom:

    public static JavaUtilJarAccess javaUtilJarAccess() {
        if (javaUtilJarAccess == null) {
            // Ensure JarFile is initialized; we know that this class
            // provides the shared secret
            ensureClassInitialized(JarFile.class);
        }
        return javaUtilJarAccess;
    }

But this idiom is flawed in concurrent setting. It may happen that the two reads of javaUtilJarAccess non-volatile field get reordered and so the 1st read (in if condition) reads non-null while the 2nd read (in return) reads null. This can be fixed by introducing a local variable that avoids the 2nd read:

    public static JavaUtilJarAccess javaUtilJarAccess() {
        var access = javaUtilJarAccess;
        if (access == null) {
            // Ensure JarFile is initialized; we know that this class
            // provides the shared secret
            ensureClassInitialized(JarFile.class);
            access = javaUtilJarAccess;
        }
        return access;
    }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8259021,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zaqb:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-11-17 09:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11205
Date: 2022-11-17 10:19:31 +0000;;;","2022-11-18 20:41;dukebot;Changeset: c50a9047
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-11-19 04:40:02 +0000
URL:       https://git.openjdk.org/jdk/commit/c50a9047b4324b280b2b5d1fc70e18aac372a50c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Warning generating API docs for javax.management.MBeanServer: overridden methods do not document exception type ,JDK-8297192,5087777,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kevinw,alanb,alanb,2022-11-17 01:08,2022-11-30 23:43,2023-10-01 09:56,2022-11-24 04:31,20,,,,,,,20,core-svc,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"make docs is currently generating the following warnings

/ws/jdk/src/java.management/share/classes/javax/management/MBeanServer.java:396: warning: overridden methods do not document exception type javax.management.RuntimeOperationsException (module java.management package javax.management class RuntimeOperationsException)
      * @throws RuntimeOperationsException {@inheritDoc}
        ^
/ws/jdk/src/java.management/share/classes/javax/management/MBeanServer.java:402: warning: overridden methods do not document exception type javax.management.RuntimeOperationsException (module java.management package javax.management class RuntimeOperationsException)
      * @throws RuntimeOperationsException {@inheritDoc}
        ^",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zapn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-11-23 01:27;kevinw;Simplest is to remove these mentions of RuntimeOperationsException, no need to declare this unchecked as being thrown.

Other methods do inherit RuntimeOperationsException documentation though without error, and specifically document it.

Checking if the mistake may actually be in the parent: MBeanServerConnection.java defines various methods as throwing RuntimeOperationsException, but not the two which cause the warning.

Checking:
queryMBeans(null, null) behaves the same as queryMBeans(ObjectName.WILDCARD, null);
queryNames(null, null) behaves the same as queryNames(ObjectName.WILDCARD, null);

So no reason for RuntimeOperationsException, go ahead with simple deletion.
;;;","2022-11-23 04:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11318
Date: 2022-11-23 12:31:26 +0000;;;","2022-11-24 04:31;dukebot;Changeset: 070a84cb
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-11-24 12:28:46 +0000
URL:       https://git.openjdk.org/jdk/commit/070a84cbae2f79def1c1eb65456c76f708f2e6e5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1 triggers unnecessary full GCs when heap utilization is low,JDK-8297186,5087771,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,manc,manc,2022-11-17 00:05,2022-12-18 14:20,2023-10-01 09:56,2022-12-06 02:11,20,,,,,,,20,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,,,,,,"After JDK-8253413, GC could unnecessarily trigger full GCs even when heap utilization is low. I discovered this case with the test hotspot/jtreg/gc/class_unloading/TestG1ClassUnloadingHWM.java.

To reproduce, add ""-XX:G1HeapRegionSize=32m"" to the run() function of TestG1ClassUnloadingHWM.java for launching TestG1ClassUnloadingHWM.AllocateBeyondMetaspaceSize. Optionally, also set a fixed heap size such as -Xms512m -Xmx512m to make the problem more obvious. Then the testWithG1ClassUnloading() case would fail, with GC log looks like:

[0.006s][info][gc] Using G1
[0.065s][info][gc] GC(0) Pause Young (Concurrent Start) (Metadata GC Threshold) 34M->33M(512M) 4.710ms
[0.065s][info][gc] GC(1) Concurrent Mark Cycle
[0.069s][info][gc] GC(2) Pause Young (Normal) (G1 Evacuation Pause) 33M->32M(512M) 1.386ms
[0.079s][info][gc] GC(3) Pause Full (G1 Compaction Pause) 32M->32M(512M) 9.201ms
[0.079s][info][gc] GC(1) Concurrent Mark Cycle 13.463ms
[0.088s][info][gc] GC(4) Pause Young (Concurrent Start) (Metadata GC Threshold) 32M->32M(512M) 0.891ms
[0.088s][info][gc] GC(5) Concurrent Mark Cycle
[0.091s][info][gc] GC(6) Pause Young (Normal) (G1 Evacuation Pause) 32M->32M(512M) 0.621ms
[0.097s][info][gc] GC(7) Pause Full (G1 Compaction Pause) 32M->32M(512M) 5.227ms
[0.097s][info][gc] GC(5) Concurrent Mark Cycle 8.723ms
[0.108s][info][gc] GC(8) Pause Young (Normal) (G1 Evacuation Pause) 64M->32M(512M) 0.668ms
[0.113s][info][gc] GC(9) Pause Full (G1 Compaction Pause) 32M->32M(512M) 5.266ms
[0.120s][info][gc] GC(10) Pause Young (Normal) (G1 Evacuation Pause) 64M->32M(512M) 0.665ms
[0.124s][info][gc] GC(11) Pause Full (G1 Compaction Pause) 32M->32M(512M) 4.376ms",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8253413,JDK-8298215,,,,,,,,,,JDK-8298702,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zaob:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-17 00:16;manc;Context: our internal JDK uses a larger default G1HeapRegionSize, which is 32M when Xmx is ~32G. This issue seems a corner case when there's only 1-2 live heap regions, so it is probably not critical for real-world workload. But it is still worth fixing. I have narrowed down the cause to JDK-8253413, but haven't looked into exactly why yet. 

[~tschatzl] if you have any suggestion or idea on how to fix this, feel free to chime in or take over this RFE.;;;","2022-11-17 05:16;tschatzl;Draft PR: https://github.com/openjdk/jdk/pull/11209

The problem has been known and explicitly attempted to be worked around, but it did not work for *that* small heap with huge region sizes.

With this change G1 tries to ensure that after GC we are going to use at least one eden region in a better way (I believe). The change is missing a test still though, but it passes the given example.;;;","2022-11-17 09:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11209
Date: 2022-11-17 13:14:12 +0000;;;","2022-12-06 02:11;dukebot;Changeset: a9e6c62b
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-12-06 10:09:59 +0000
URL:       https://git.openjdk.org/jdk/commit/a9e6c62ba7df8d28cef9579c57a0386736bd9dbf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test runtime/ErrorHandling/TestSigInfoInHsErrFile.java is failing,JDK-8297184,5087768,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,stuefe,dholmes,dholmes,2022-11-16 23:53,2023-09-29 04:38,2023-10-01 09:56,2022-11-17 08:42,20,,,,,,,20,hotspot,,0,noreg-self,tier1,tier3,tier4,tier5,tier6,,,,,,,,,,,,,,,,"java.lang.RuntimeException: hs-err file incomplete (found 3 matching pattern, first missing pattern: # .*VMError::controlled_crash.*)
	at HsErrFileUtils.checkHsErrFileContent(HsErrFileUtils.java:93)
	at TestSigInfoInHsErrFile.testWithFPE(TestSigInfoInHsErrFile.java:95)
	at TestSigInfoInHsErrFile.main(TestSigInfoInHsErrFile.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)

#
# A fatal error has been detected by the Java Runtime Environment:
^^^ Match 0: matches # A fatal error has been detected.*^^^
#
#  SIGFPE (0x8) at pc=0x0000fffcf3e2f17c (sent by kill), pid=3120987, tid=3120991
^^^ Match 1: matches # *SIGFPE.*^^^
#
# JRE version: Java(TM) SE Runtime Environment (20.0+24) (fastdebug build 20-ea+24-1803)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+24-1803, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
^^^ Match 2: matches # *Problematic frame.*^^^
# C  [libpthread.so.0+0xf17c]  pthread_kill+0x44
#
# CreateCoredumpOnCrash turned off, no core file dumped
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:+UnlockDiagnosticVMOptions -Xmx100M -XX:-CreateCoredumpOnCrash -XX:ErrorHandlerTest=15 

Host: AArch64, 8 cores, 30G, Oracle Linux Server release 8.6
Time: Thu Nov 17 07:35:47 2022 UTC elapsed time: 0.089260 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x0000fffcec02b7e0):  JavaThread ""main"" [_thread_in_vm, id=3120991, stack(0x0000fffcf1870000,0x0000fffcf1a70000)]

Stack: [0x0000fffcf1870000,0x0000fffcf1a70000],  sp=0x0000fffcf1a6e790,  free space=2041k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libpthread.so.0+0xf17c]  pthread_kill+0x44
V  [libjvm.so+0x18c93f0]  VMError::controlled_crash(int)+0x210  (vmError.cpp:1923)
V  [libjvm.so+0xfdead8]  JNI_CreateJavaVM+0x4d8  (jni.cpp:3662)
C  [libjli.so+0x3c50]  JavaMain+0x7c  (java.c:1457)
C  [libjli.so+0x756c]  ThreadJavaMain+0xc  (java_md.c:650)
C  [libpthread.so.0+0x7908]  start_thread+0x188


The test expects to see VMError::controlled_crash on a line that starts with # in the hs_err file ""header"", but that line is pthread_kill. We only see controlled_crash in the stack dump and that doesn't start with #.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296906,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,"0|i2zann:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-11-16 23:59;stuefe;Oh, right, on some platforms we mimic a SIGFPE by sending a signal instead of a real FPE fault. In those cases the crash frame would be pthread_kill. ;;;","2022-11-17 01:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11202
Date: 2022-11-17 08:21:43 +0000;;;","2022-11-17 06:37;dcubed;Here's log file snippets from the two sub-test failures:

runtime/ErrorHandling/TestSigInfoInHsErrFile.java#id1

----------System.err:(12/761)----------
java.lang.RuntimeException: hs-err file incomplete (found 3 matching pattern, first missing pattern: # .*VMError::controlled_crash.*)
	at HsErrFileUtils.checkHsErrFileContent(HsErrFileUtils.java:93)
	at TestSigInfoInHsErrFile.testWithFPE(TestSigInfoInHsErrFile.java:95)
	at TestSigInfoInHsErrFile.main(TestSigInfoInHsErrFile.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: hs-err file incomplete (found 3 matching pattern, first missing pattern: # .*VMError::controlled_crash.*)


runtime/ErrorHandling/TestSigInfoInHsErrFile.java#id0

----------System.err:(12/822)*----------
java.lang.RuntimeException: hs-err file incomplete (found 4 matching pattern, first missing pattern: siginfo: si_signo: \\d+ \\(SIGSEGV\\), si_code: \\d+ \\(SEGV_MAPERR\\), si_addr: 0x0*400.*)
	at HsErrFileUtils.checkHsErrFileContent(HsErrFileUtils.java:93)
	at TestSigInfoInHsErrFile.testWithSEGV(TestSigInfoInHsErrFile.java:127)
	at TestSigInfoInHsErrFile.main(TestSigInfoInHsErrFile.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: hs-err file incomplete (found 4 matching pattern, first missing pattern: siginfo: si_signo: \d+ \(SIGSEGV\), si_code: \d+ \(SEGV_MAPERR\), si_addr: 0x0*400.*)

There seem to be two different failure modes in the sub-tests. Also, the failures
are intermittent.;;;","2022-11-17 06:41;stuefe;Thanks Dan. I think https://git.openjdk.org/jdk/pull/11202 should fix both failures.;;;","2022-11-17 06:52;dcubed;[~stuefe] - Thanks for letting me know. I was going to ping you after I got our CI
cleaned up...;;;","2022-11-17 08:42;dukebot;Changeset: a768fed7
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-11-17 16:40:32 +0000
URL:       https://git.openjdk.org/jdk/commit/a768fed77943351416ea5e2e7162797eab462313
;;;","2022-11-17 11:34;dcubed;The fix for this bug is integrated in jdk-20+25-1820.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix some issues of auto-vectorization of `Long.bitCount/numberOfTrailingZeros/numberOfLeadingZeros()`,JDK-8297172,5087751,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fgao,fgao,fgao,2022-11-16 20:14,2022-12-14 00:54,2023-10-01 09:56,2022-12-06 01:38,20,,,,,,,20,hotspot,,0,c2,c2-superword,oracle-triage-11,oracle-triage-17,oracle-triage-20,vectorapi,,,,,,,,,,,,,,,,"1. Java API for Long.bitCount/numberOfTrailingZeros/numberOfLeadingZeros returns int type but Vector API for them returns long type. Currently, to support auto-vectorization and vector API at the same time, backend provides two kinds of vector implementation for them: one has int vector type and another one has long vector type, as discussed in https://github.com/openjdk/panama-vector/pull/185#discussion_r836017952. 
We can refine the auto-vectorization of these APIs in superword to unify the vector implementation in the backend, removing extra code.

2. Also, Long.bitCount can't be vectorized when -XX:MaxVectorSize=16, causing the IR match failure of compiler/vectorization/TestPopCountVectorLong.java on 128-bit sve platform. The task also needs to fix it.

3. Now, `Long.NumberOfLeadingZeros/NumberOfTrailingZeros()` can be vectorized on sve platforms when `-XX:MaxVectorSize=32` or `-XX:MaxVectorSize=64` , the generated code is not correct, like:
```
LOOP:
  sxtw  x13, w12
  add   x14, x15, x13, uxtx #3
  add   x17, x14, #0x10
  ld1d  {z16.d}, p7/z, [x17]
  // Incorrectly use integer rbit/clz insn for long type vector
 *rbit  z16.s, p7/m, z16.s
 *clz   z16.s, p7/m, z16.s
  add   x13, x16, x13, uxtx #2
  str   q16, [x13, #16]
  ...
  add   w12, w12, #0x20
  cmp   w12, w3
  b.lt  LOOP
```
4. On x86 avx2 platform, there is an assertion failure when C2 tries to vectorize the loops like:
```
//  long[] ia;
//  int[] ic;
    for (int i = 0; i < LENGTH; ++i) {
      ic[i] = Long.numberOfLeadingZeros(ia[i]);
    }
```

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zajv:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-28 18:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11405
Date: 2022-11-29 02:22:35 +0000;;;","2022-11-28 23:57;chagedorn;ILW = Various issues and limitations in auto-vectorizations including wrong executions, only with Long.bitCount/numberOfTrailingZeros/numberOfLeadingZeros(), possibly use -XX:MaxVectorSize < 16 or -XX:-UseSuperWord = HLM = P3 ;;;","2022-12-06 01:38;dukebot;Changeset: 4458de95
Author:    Fei Gao <fgao@openjdk.org>
Committer: Pengfei Li <pli@openjdk.org>
Date:      2022-12-06 09:35:27 +0000
URL:       https://git.openjdk.org/jdk/commit/4458de95f845c036c1c8e28df7043e989beaee98
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"misc JCK tests fail with ""FATAL ERROR in native method: JDWP Can't disable vthread end events, jvmtiError=JVMTI_ERROR_WRONG_PHASE(112)""",JDK-8297170,5087749,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,cjplummer,dcubed,dcubed,2022-11-16 18:50,2022-12-14 13:18,2023-10-01 09:56,2022-11-30 10:09,20,,,,,,,20,core-svc,,0,loom,tier6,,,,,,,,,,,,,,,,,,,,"The following JCK test failed in the JDK20 CI:

vm/jdwp/Event/Composite/composite001/composite001.html

Here's a snippet from the log file:

#section:testExecute
----------messages:(1/1195)----------
command: com.sun.jck.lib.ExecJCKTestOtherJVMCmd LD_LIBRARY_PATH=/opt/mach5/mesos/work_dir/jib-master/install/jck/20/b07/extra/bundles/JCK-extra-20.zip/JCK-extra-20/binaries/linux-amd64/lib /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1755/linux-x64-debug.jdk/jdk-20/fastdebug/bin/java --enable-preview -Djava.awt.headless=true -XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA -XX:MaxRAMPercentage=4.16667 --show-version -Xms32m -Xmx1024m -Djdk.attach.allowAttachSelf=true -Djava.security.properties=/opt/mach5/mesos/work_dir/jib-master/install/jck/20/b07/extra/bundles/JCK-extra-20.zip/JCK-extra-20/extra.security.properties -agentlib:jdwp=server=y,transport=dt_socket,address=ol8-x64-129413.s5.javaplatfo1iad.oraclevcn.com:33421,suspend=n -classpath :/opt/mach5/mesos/work_dir/jib-master/install/jck/20/b07/bundles/JCK-runtime-20.jar/JCK-runtime-20/classes: -Djava.security.policy=/opt/mach5/mesos/work_dir/jib-master/install/jck/20/b07/bundles/JCK-runtime-20.jar/JCK-runtime-20/lib/jck.policy javasoft.sqe.jck.lib.jpda.jdwp.DebuggeeLoader -waittime=600 -msgSwitch=ol8-x64-129413:40803 -componentName=Event.Composite.composite001 -debuggeeName=Event.Composite.composite001a
----------out1:(1/376)----------
JDWP exit error JVMTI_ERROR_WRONG_PHASE(112): Can't disable vthread end events [/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S137544/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a21a55f1-28c1-4cef-b19c-55dd4e8a05aa/runs/b0208cba-0838-413a-a6b5-979dcf89d75b/workspace/open/src/jdk.jdwp.agent/share/native/libjdwp/eventHandler.c:1652]
----------out2:(6/349)----------
Listening for transport dt_socket at address: 33421
java 20-ea 2023-03-21
Java(TM) SE Runtime Environment (fastdebug build 20-ea+24-1755)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 20-ea+24-1755, mixed mode, sharing)
Debugee PASSED
FATAL ERROR in native method: JDWP Can't disable vthread end events, jvmtiError=JVMTI_ERROR_WRONG_PHASE(112)
result: Failed. unexpected exit code: exit code 134",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295376,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,b23,20,,linux,,,,,,"0|i2zajf:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,Verified,,"2022-11-20 06:49;dcubed;Crashing JCK tests so bumping the priority from P4 -> P2.;;;","2022-11-22 11:03;cjplummer;Note that the test has already passed (""Debugee PASSED"" is printed), but later we hit a FATAL ERROR in the debug agent. This appears to have been introduced by JDK-8295376, which moved around some code that enables and disables vthread start/end events. The noted failure:

 FATAL ERROR in native method: JDWP Can't disable vthread end events, jvmtiError=JVMTI_ERROR_WRONG_PHASE(112) 

Comes from eventHandler_reset(), which disables both VIRTUAL_THREAD_START and VIRTUAL_THREAD_END events, in that order. The issue has been reported twice when disabling VIRTUAL_THREAD_END, so VIRTUAL_THREAD_START has already been successfully disabled. The only explanation I can think of for this is that we have a race between the tearing down of the jdwp session and the shutting down of the JVM. Disabling VIRTUAL_THREAD_START gets done just in time, but disabling VIRTUAL_THREAD_END is a bit late and gets hit with a JVMTI_ERROR_WRONG_PHASE. Probably the solution is to just ignore JVMTI_ERROR_WRONG_PHASE, although possibly we can avoid even doing the disabling if VMDeath has already been detected.;;;","2022-11-22 12:48;cjplummer;Previously VIRTUAL_THREAD_START and VIRTUAL_THREAD_END were never disabled, so there was no chance of this issue happening. Now they are normally disabled when the debugger disconnects, and this can race with vmDeath. I'm surprised this issue has not been more common, and doesn't occur with other non-JCK tests. So far I have no seen it reproduce after 200 jck runs.

Note there is a check for vmDeath up the call chain a bit in debugLoop_run()

    if ( ! gdata->vmDead ) {
        debugInit_reset(getEnv());
    }

However, the vmDeathLock is not held during this time, so there is nothing preventing death from happening after this check. I'm not even sure of the purpose of this check given that death can happen right after it, and debugInit_reset() does quit a bit of work. eventHandler_reset() is basically the first thing it does, so that would mean pretty much all of debugInit_reset() can be done after vmDeath without any issues. Otherwise we would have seen other problems already. ;;;","2022-11-22 14:02;cjplummer;I got it to reproduce once in 900 jck runs. I think the reason for the rarity of this issue is that once VmDeath has been sent and processed, the VM quickly exits after that, so probably normally we don't even get into (or far into) the eventHandler_reset() code. So, for example, trying to aggravate this issue by putting a short sleep() at the start of eventHandler_reset() is probably just going to make it even less likely to happen. This might also explain why the seemingly weak check of !gdata->vmDead doesn't result in issues. Probably because if the vm is about to exit, vmData is pretty much always true, and when it is not, it quickly becomes true and shortly after that the VM forces the thread to exit before the thread gets into any trouble.;;;","2022-11-22 18:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11307
Date: 2022-11-23 02:22:46 +0000;;;","2022-11-30 10:09;dukebot;Changeset: 1323e98d
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-11-30 18:08:19 +0000
URL:       https://git.openjdk.org/jdk/commit/1323e98df14f16310ca1349db198ee17409cda49
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TestBug] Fix some ignored unit test from TableViewTest,JDK-8297166,5087742,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-11-16 14:51,2022-11-29 06:16,2023-10-01 09:56,2022-11-17 12:17,,,,,,,,jfx20,javafx,,0,sn_131,test_sprint,testbug,,,,,,,,,,,,,,,,,,,"Some ignored tests in TableViewTest can be re-enabled, others still refer to open issues.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8234486,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zahv:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-16 16:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/952
Date: 2022-11-16 23:34:02 +0000;;;","2022-11-17 12:17;dukebot;Changeset: e3e0dfdb
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-11-17 20:15:16 +0000
URL:       https://git.openjdk.org/jfx/commit/e3e0dfdb1b945844691c79e512dbae285027ff6c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update troff man pages and CheckManPageOptions.java,JDK-8297164,5087736,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-11-16 13:38,2022-11-28 15:04,2023-10-01 09:56,2022-11-21 14:05,,,,,,,,20,tools,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,"The troff version of the man pages need to be updated, following JDK-8297165 to upgrade pandoc to 2.19.2.

The javadoc test CheckManPageOptions.java likewise needs to be updated for pandoc 2.19.2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297165,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zagj:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-11-17 14:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11223
Date: 2022-11-17 22:23:53 +0000;;;","2022-11-21 14:05;dukebot;Changeset: 5a45c251
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-11-21 22:03:48 +0000
URL:       https://git.openjdk.org/jdk/commit/5a45c25151b1da8e329ea2be21a0e4d2652f8b4a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Suspicious collection method call in Types.isSameTypeVisitor,JDK-8297158,5087725,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,djelinski,djelinski,2022-11-16 11:03,2023-02-06 10:41,2023-10-01 09:56,2023-01-31 09:03,11,17,20,,,,,21,tools,,0,noreg-other,,,,,,,,,,,,,,,,,,,,,"See https://github.com/openjdk/jdk/blob/master/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java#L1410-L1413:

                        if (tMap.containsKey(ti)) {
                            throw new AssertionError(""Malformed intersection"");
                        }
                        tMap.put(ti.tsym, ti);

Map<Symbol,Type> may not contain keys of type 'Type'

Obvious fix (changing to containsKey(ti.tsym) ) causes the AssertionError to be thrown in the following tests:
tools/javac/lambda/intersection/IntersectionTargetTypeTest.java	
tools/javac/cast/intersection/IntersectionTypeCastTest.java

Snippet from the IntersectionTargetTypeTest log:

java.lang.AssertionError: Error thrown when compiling the following code:
..
interface C { void m(); }
..
class Test {
   void m() { }
   void test() {
      Object o = (C & C)()->{};
   } }

The code in question was introduced in JDK-8143852",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8143852,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zae3:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-01-28 18:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12279
Date: 2023-01-29 02:20:10 +0000;;;","2023-01-31 09:03;dukebot;Changeset: 5744c91b
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2023-01-31 17:01:14 +0000
URL:       https://git.openjdk.org/jdk/commit/5744c91bf5742379913a9926a5d70a2d49dbea04
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun/java2d/DirectX/OnScreenRenderingResizeTest/OnScreenRenderingResizeTest.java fails again,JDK-8297153,5087719,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,dnguyen,dnguyen,2022-11-16 10:02,2023-04-03 06:33,2023-10-01 09:56,2022-11-21 01:52,10,11,20,6u95,7u4,8,9,20,client-libs,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,sn_131,sn_132,test_sprint,,,,,,,,,,,"It looks like this issue still exists after the previous fix (in linked issues). Color returned is black.

----------System.out:(1/50)----------
Screen shot file: OnScreenRenderingResizeTest.png
----------System.err:(12/762)----------
java.lang.RuntimeException: Test failed at 0-0 rgb=0xff000000
	at OnScreenRenderingResizeTest.checkBI(OnScreenRenderingResizeTest.java:226)
	at OnScreenRenderingResizeTest.main(OnScreenRenderingResizeTest.java:174)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test failed at 0-0 rgb=0xff000000
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test failed at 0-0 rgb=0xff000000",,,,,,,,,,,JDK-8297598,JDK-8297575,JDK-8305464,JDK-8297596,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301177,JDK-8022403,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2zacr:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-11-18 16:55;dcubed;Here's a log file snippet from the jdk-20+25-1839-tier4 sighting:

sun/java2d/DirectX/OnScreenRenderingResizeTest/OnScreenRenderingResizeTest.java

#section:main
----------messages:(7/322)----------
command: main OnScreenRenderingResizeTest
reason: User specified action: run main/othervm OnScreenRenderingResizeTest 
started: Sat Nov 19 00:28:30 UTC 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.desktop
finished: Sat Nov 19 00:28:34 UTC 2022
elapsed time (seconds): 4.066
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(1/50)----------
Screen shot file: OnScreenRenderingResizeTest.png
----------System.err:(12/762)----------
java.lang.RuntimeException: Test failed at 0-0 rgb=0xff000000
	at OnScreenRenderingResizeTest.checkBI(OnScreenRenderingResizeTest.java:226)
	at OnScreenRenderingResizeTest.main(OnScreenRenderingResizeTest.java:174)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test failed at 0-0 rgb=0xff000000
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test failed at 0-0 rgb=0xff000000
----------rerun:(43/5528)*----------;;;","2022-11-20 19:19;jdv;I saw same issue while updating the test case under https://bugs.openjdk.org/browse/JDK-8297241.
Test is updated and PR is out for review. After update test is not failing after 100 runs on each platforms without retries and especially on Linux.;;;","2022-11-20 19:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11237
Date: 2022-11-18 12:27:46 +0000;;;","2022-11-21 01:52;dukebot;Changeset: 3c094982
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2022-11-21 09:50:57 +0000
URL:       https://git.openjdk.org/jdk/commit/3c0949824e06f2b3d44f1bde9d2292a7627b0197
;;;","2022-11-22 12:02;vrudomet;Fix request for [11u, 17u, 19u]

Clean backport.
Fixing unstable test.
Checked on mac and linux by running:
make run-test TEST=""test/jdk/sun/java2d/DirectX/OnScreenRenderingResizeTest/OnScreenRenderingResizeTest.java""
;;;","2022-11-22 12:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/90
Date: 2022-11-22 20:41:05 +0000;;;","2022-11-22 13:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/919
Date: 2022-11-22 21:31:59 +0000;;;","2022-11-22 13:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1546
Date: 2022-11-22 21:31:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
UnexpectedSourceImageSize test times out on slow machines when fastdebug is used,JDK-8297147,5087712,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-11-16 07:48,2023-04-03 06:35,2023-10-01 09:56,2022-11-22 00:03,11,17,19,20,,,,20,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-yes,,,,,,,,,,,,,,,,"The image related test  UnexpectedSourceImageSize test introduced with https://bugs.openjdk.org/browse/JDK-8264666
 times out on slow machines when fastdebug is used.  This happens especially in 11 and 17; in 20 it seems to be a bit faster but we better change timeouts across releases.
",,,,,,,,,,,JDK-8297610,JDK-8305465,JDK-8297614,JDK-8298018,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i2zab7:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-11-18 05:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11240
Date: 2022-11-18 13:38:47 +0000;;;","2022-11-22 00:03;dukebot;Changeset: 88957a7c
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-11-22 08:02:04 +0000
URL:       https://git.openjdk.org/jdk/commit/88957a7ce8932b95e3a18e6a7d1ceb3b7f60c781
;;;","2022-11-23 00:30;mbaesken;jdk17 backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too. The patch applies cleanly and is low risk.;;;","2022-11-23 00:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/923
Date: 2022-11-23 08:24:27 +0000;;;","2022-11-24 08:09;clanger;Fix request (19u)
Same reasons apply as for 17. Patch applies cleanly. Test fix for an issue seen at SAP's test farm.;;;","2022-11-24 08:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/93
Date: 2022-11-24 16:07:57 +0000;;;","2022-12-02 00:09;mbaesken;jdk11 backport request
I would like to have the patch in jdk11u-dev as well, because the issue is present there too. The patch applies cleanly and is low risk.;;;","2022-12-02 00:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1564
Date: 2022-12-02 08:03:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/event/runtime/TestShutdown.java fails on Linux ppc64le and Linux aarch64,JDK-8297142,5087706,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rschmelter,rschmelter,rschmelter,2022-11-16 06:15,2023-09-19 05:14,2023-10-01 09:56,2022-11-23 01:37,,,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,,This is the same problem we have already seen in JDK-8293166. Here the sub test crashing the VM doesn't create the emergency dump.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293166,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,ppc,,,,,,,,linux,,,,,,"0|i2za9v:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-11-17 00:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11203
Date: 2022-11-17 08:32:15 +0000;;;","2022-11-23 01:37;dukebot;Changeset: bde0e35d
Author:    Ralf Schmelter <rschmelter@openjdk.org>
Date:      2022-11-23 09:36:08 +0000
URL:       https://git.openjdk.org/jdk/commit/bde0e35ded82ab5e95452dc8da36c63e084536a2
;;;","2023-07-18 01:19;rschmelter;Fix request 17u;;;","2023-08-18 11:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1675
Date: 2023-08-18 18:13:21 +0000;;;","2023-09-19 04:35;rschmelter;Fix Request 17u

This change fixes a crash in a test on aarch64 and ppc64le. It eliminates the race condition between the error handling in VMError::report_and_die() and the illegal instruction handling when switching from c1 to c2 code on these platforms. Since the change only disables tiered compilation in one specific test, the change is low risk. It was tested with the nightly test suite at SAP.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix hotspot/test/runtime/SharedArchiveFile/DefaultUseWithClient.java for 8u,JDK-8297141,5087705,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,zzambers,zzambers,2022-11-16 05:54,2022-11-28 17:04,2023-10-01 09:56,2022-11-22 07:52,openjdk8u352,,,,,,,openjdk8u362,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,sustaining,,,,,,,,,,,,,,,,,,"Following test (from hotspot/tier1) currently fails on Windows x86:
hotspot/test/runtime/SharedArchiveFile/DefaultUseWithClient.java

Test output:
...
 stdout: [];
 stderr: [openjdk version ""1.8.0_362-internal""
OpenJDK Runtime Environment (build 1.8.0_362-internal-zzambers-54a485c13e59fa68ea9dc088f320520eedbe33fe-b00)
OpenJDK Server VM (build 25.362-b00, mixed mode)
]
 exitValue = 0

java.lang.RuntimeException: 'UseSharedSpaces:' missing from stdout/stderr 

	at com.oracle.java.testlibrary.OutputAnalyzer.shouldContain(OutputAnalyzer.java:134)
	at DefaultUseWithClient.main(DefaultUseWithClient.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.lang.Thread.run(Thread.java:750)
...


Problem:
Test is Windows 32-bit only, only applies to Client VM and checks default behaviour of shared archive feature. Problem is, that default build of 32-bit windows JDK does not include Client VM, so Server VM is used (so -client arg does nothing). With Server VM tests fails. I tried to make build which has Client VM and then this test passes (It breaks other tests which expect default to be Server VM though).

Fix:
Test runs java with -version argument, which can print something similar to:
openjdk version ""1.8.0_362-internal""
OpenJDK Runtime Environment (build 1.8.0_362-internal-zzambers-2bbffac3199782df1f9b81867fdfeb3d72889fcd-b00)
OpenJDK Client VM (build 25.362-b00, mixed mode)

This output can be used to check if Client VM and skip other checks, if Client VM is not used. Fix is JDK 8 only as test has been removed on newer JDKs by JDK-8154204 by [2]. But I decided to fix it for JDK 8.

Testing:
With this change test passes on Windows 32-bit. (both with Server [3] and Client [4] Vms)

[1] https://github.com/zzambers/jdk8u-dev/actions/runs/3438556844
[2] https://bugs.openjdk.org/browse/JDK-8154204
[3] https://github.com/zzambers/jdk8u-dev/actions/runs/3462926725
[4] https://github.com/zzambers/jdk8u-dev/actions/runs/3462887672",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2za9n:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-11-16 06:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/181
Date: 2022-11-16 13:55:19 +0000;;;","2022-11-16 06:10;zzambers;Fix request (8u):

Fixes hotspot/test/runtime/SharedArchiveFile/DefaultUseWithClient.java for Client-less builds
Changes test only, test passes.;;;","2022-11-22 07:52;dukebot;Changeset: 5a32484f
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-11-22 15:49:49 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/5a32484f0f3be91ccaef76271361ef2fbfdf7558
;;;","2022-11-28 17:04;dukebot;Changeset: 5a32484f
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-11-22 15:49:49 +0000
URL:       https://git.openjdk.org/jdk8u/commit/5a32484f0f3be91ccaef76271361ef2fbfdf7558
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ComboBox popup doesn't close after selecting value that was added with 'runLater',JDK-8297130,5087490,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mstrauss,webbuggrp,webbuggrp,2022-11-14 06:49,2022-12-20 21:48,2023-10-01 09:56,2022-11-24 07:54,jfx19,jfx20,,,,,,jfx20,javafx,,0,dcspn,regression,regression_8268225,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The combobox popup won't hide if there is only one selectable value and if if this one value was added with ""Platform.runLater"". In that specific case the showing and focused-Property of the combobox turn false immediately after showing. So they are false even though the popup is still showing. I guess thats why clicking on that one item does not hide the popup.
The bug only occur if the value is added with ""Platform.runLater"" and if there is only value added.
The source code shows 5 different cases of adding items. The described behavior occurs in case 3 and 5. The other cases work fine.

I've tested it in other javafx versions but it only occurs with version 19.

REGRESSION : Last worked in version 18

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. click on the combobox
2. select the first (and only) value


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
1. 
focused-Property: true
showing-Property: true
2.
focused-Property: true
showing-Property: false
-> Popup closes.
ACTUAL -
1. 
focused-Property: false
showing-Property: false
2.
focused-Property: false
showing-Property: false
-> Popup still showing.

---------- BEGIN SOURCE ----------
package com.arm.comboboxbugdemo;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class ComboBoxBugApplication extends Application {

    ComboBox<String> comboBox;

    public static void main(String[] args) {
        launch();
    }

    @Override
    public void start(Stage stage) {

        comboBox = new ComboBox<>();
        comboBox.showingProperty().addListener((observable1, oldValue1, newValue1) -> System.out.println(""showing: "" + newValue1));
        comboBox.focusedProperty().addListener((observable1, oldValue1, newValue1) -> System.out.println(""focused: "" + newValue1));

        //try different cases
//        case1(); //no bug
//        case2(); //no bug
        case3(); //bug
//        case4(); //no bug
//        case5(); //bug

        Scene scene = new Scene(new HBox(comboBox), 320, 240);
        stage.setScene(scene);
        stage.show();
    }

    /**
     * no bug
     */
    private void case1() {
        comboBox.getItems().addAll(""case1"");
    }

    /**
     * no bug
     */
    private void case2() {
        Platform.runLater(() -> comboBox.getItems().addAll(""case2"", ""case2_""));
    }

    /**
     * bug
     */
    private void case3() {
        Platform.runLater(() -> comboBox.getItems().add(""case3""));
    }

    /**
     * no bug
     */
    private void case4() {
        comboBox.getItems().addAll(""case4"", ""case4_"");
        Platform.runLater(() -> comboBox.getItems().remove(""case4""));
    }

    /**
     * bug
     */
    private void case5() {
        comboBox.getItems().addAll(""case5"", ""case5_"");
        Platform.runLater(() -> {
            comboBox.getItems().clear();
            comboBox.getItems().add(""case5"");
        });
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299171,,,,,,,,,,,,,,,,,JDK-8268225,,,,,,,,,"2022-11-16 03:57;pnarayanaswa;ComboBoxBugApplication.java;https://bugs.openjdk.org/secure/attachment/101633/ComboBoxBugApplication.java","2022-11-16 03:58;pnarayanaswa;capture_openjfx18.pptx;https://bugs.openjdk.org/secure/attachment/101634/capture_openjfx18.pptx","2022-11-16 03:58;pnarayanaswa;capture_openjfx19.pptx;https://bugs.openjdk.org/secure/attachment/101635/capture_openjfx19.pptx",,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b09,jfx19,,generic,,,,,,"0|i2z8xv:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2022-11-16 03:57;pnarayanaswa;Verified with attached testcase in Windows 10, issue is reproducible, Popup still showing. <attached short clipping>
Test Result
==========
openjfx11: Pass
openjfx17: Pass
openjfx18: Pass
openjfx19 b10: Fail <-Regression
openjfx19 b08: Pass
openjfx20ea7: Fail;;;","2022-11-16 04:58;kcr;[~pnarayanaswa] Did you try JavaFX 19+9? Since it fails in 19+8 and fails in 19+10 the bug could have been introduced in either build 9 or build 10.

UPDATE: I bisected it and found the change that introduced this bug; it was added in build 9.;;;","2022-11-16 05:36;kcr;I bisected it and discovered that this regression was introduced in JavaFX 19+9 by this commit:

JDK-8268225: Support :focus-visible and :focus-within CSS pseudoclasses

This will need to be fixed in JavaFX 20.;;;","2022-11-16 05:37;kcr;[~mstrauss] Since the regression was caused by the addition of :focus-visible / :focus-within, would you be able to take a look at this?;;;","2022-11-18 06:32;fastegal;also happens if at startup the combo is not empty and the last item is selected: see https://stackoverflow.com/q/74147187/203657;;;","2022-11-19 10:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/956
Date: 2022-11-19 18:01:41 +0000;;;","2022-11-24 07:54;dukebot;Changeset: 4a697f1a
Author:    Michael Strauß <mstrauss@openjdk.org>
Date:      2022-11-24 15:52:44 +0000
URL:       https://git.openjdk.org/jfx/commit/4a697f1afc5f8e850425f5934ee1bcb73dd5da9f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inflater documentation refers to 'deflate' methods,JDK-8297129,5087655,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,webbuggrp,webbuggrp,2022-11-15 14:51,2022-11-28 14:56,2023-10-01 09:56,2022-11-18 04:06,11,17,19,20,8,,,20,core-libs,,0,dcsaw,noreg-doc,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The documentation for `java.util.zip.Inflater` says:
> The output byte sequence is written to the output byte array or byte buffer passed to the deflate() methods.

This is probably a copy & paste error and should instead say ""inflate() methods"".


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z9yj:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2022-11-16 03:18;tongwan;The descriptions can be found at the following javadocs: 
https://docs.oracle.com/javase/8/docs/api/java/util/zip/Inflater.html
https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/zip/Inflater.html
https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/zip/Inflater.html
https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/zip/Inflater.html
https://download.java.net/java/early_access/jdk20/docs/api/java.base/java/util/zip/Inflater.html;;;","2022-11-17 22:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11232
Date: 2022-11-18 06:44:03 +0000;;;","2022-11-18 04:06;dukebot;Changeset: 2f2d4046
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-11-18 12:04:10 +0000
URL:       https://git.openjdk.org/jdk/commit/2f2d40465b3c31d95ba607ec053f5697aa22b66e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Change IncompatibleClassChangeError to MatchException for exhaustive switch statements and switch expressions,JDK-8297118,5087685,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-11-16 01:05,2022-12-08 15:28,2023-10-01 09:56,2022-12-01 02:53,,,,,,,,20,tools,,0,release-note=yes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2za57:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-16 07:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11189
Date: 2022-11-16 15:11:32 +0000;;;","2022-12-01 02:53;dukebot;Changeset: b60cce6f
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-12-01 10:51:57 +0000
URL:       https://git.openjdk.org/jdk/commit/b60cce6f3bf7dc96d632aa361a6eb10691dcf5c1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove the -Xcheck:jni local reference capacity checking,JDK-8297106,5087674,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2022-11-15 22:44,2022-12-05 14:45,2023-10-01 09:56,2022-11-28 18:05,11,17,20,8,,,,20,hotspot,,0,jni,,,,,,,,,,,,,,,,,,,,,"The Xcheck:jni version of EnsureLocalCapacity tries to validate use of local refs by tracking an artificial limit (the ""planned capacity"") which is checked on all JNI method returns, to ensure that the limit has not been exceeded (with some slack built in- CHECK_JNI_LOCAL_REF_CAP_WARN_THRESHOLD):

Checked JNI function exit:
  size_t planned_capacity = handles->get_planned_capacity();
  size_t live_handles = handles->get_number_of_live_handles();
  if (live_handles > planned_capacity) {
    IN_VM(
      tty->print_cr(""WARNING: JNI local refs: "" SIZE_FORMAT "", exceeds capacity: "" SIZE_FORMAT,
                    live_handles, planned_capacity);
      thr->print_stack();
    )

A well-written piece of native code that uses JNI is supposed to track the expected number of local refs it will use and call EnsureLocalCapacity beforehand to ensure it won't exceed the planned capacity.

Prior to JDK-8193222 EnsureLocalCapacity(capacity) simply did:

 add_planned_handle_capacity(thr->active_handles(), capacity);

where:

add_planned_handle_capacity(JNIHandleBlock* handles, size_t capacity) {
  handles->set_planned_capacity(capacity +
                                handles->get_number_of_live_handles() +
                                CHECK_JNI_LOCAL_REF_CAP_WARN_THRESHOLD);
}

so we simply add the required amount of capacity to the current in-use amount, plus the slack.

That approach was wrong because it did not handle nested native method calls correctly. Suppose funcA will create 20 local refs, and funcB will create 5, then they both call EnsureLocalCapacity with 20 and 5 respectively. But if funcA calls funcB then we have a problem. Lets say there are initially 0 active handles and the slack is 2. Then:

EnsureLocalCapacity(20) will do:

planned_capacity = 20 + 0 + 2 = 22

Lets say funcA creates no local refs before calling funcB, then in funcB EnsureLocalCapacity(5) will do:

planned_capacity = 5 + 0 + 2 = 7

we then return to funcA and proceed to loop 20 times to call a JNI function that returns a local ref. Once we get to the 8th iteration the function exit check will detect 8 active handles is greater than the planned capacity of 7 and produce the warning! The code lost the fact that funcA had requested a capacity of 20.

So the fix in JDK-8193222 was to have EnsureLocalCapacity only call add_planned_handle_capacity if the requested capacity was greater than the current planned_capacity. So in funcB the call to EnsureLocalCapacity becomes a no-op and when we return to funcA we still have a planned_capacity of 22 and now our loop completes fine. So bug fixed in a simple way - all good!

Except it isn't all good. What we haven't considered is that funcB created 5 local refs. Now if funcB calls DeleteLocalRef for each local ref it created all is well and good - we still have capacity for 22 local refs. However, funcB is not required to call DeleteLocalRef, and if it doesn't then our available capacity has been reduced to 22 - 5 = 17. So on the 18th iteration of the loop the function exit check will again fail and we get the warning!

So how to address this? The problem is that at the time EnsureLocalCapacity is called in funcB there is no knowledge of how many active handles will be created and remain when funcB returns. So there is no way to address this problem in EnsureLocalCapacity. Also funcB is just application native code, not a JNI function itself, so we can't put an adjustment in the JNI function exit hook that Xcheck:jni installs. So in short there seems no way to address this!

Now you may suggest that funcA has to call EnsureLocalCapacity with a value that accounts for all the local-refs created transitively by the code in funcA, including funcB - that would certainly fix the problem. But there is no way in general to know what this value would be. We would just encourage programmers to call EnsureLocalCapacity(BigNumber) to ""ensure"" there is plenty of allowance made. That makes the checked EnsureLocalCapacity a useless tool.

In practice, in Hotspot, the actual functionality of EnsureLocalcapacity is a no-op: there is no inherent local ref capacity limit: we create them till we run out of memory. So the Xcheck:jni version of EnsureLocalCapacity is just a way to encourage people to write portable JNI code, in case it runs on a VM that does have a limit. So the checked version is there to help developers write their native code in a way that will work on other VMs. This raises the question why we actually do this? If another VM has an inherent local ref limit (per the JNI specification) then why doesn't that other VM provide the tools to help developers write correct JNI code?

I think the checked version of EnsureLocalCapacity, whilst well-intentioned, cannot be implemented in a correct and useful way, and so has no real value and should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296936,,,,,,JDK-8193222,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2za2r:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-16 16:02;cjplummer;JDK-8296709 added a test case for JDK-8296936 and then immediately problem listed it due to the -Xcheck:jni warning. The test case should be removed from the problem list when this CR is implemented.;;;","2022-11-16 17:33;cjplummer;The issue we run across with JDK-8296936 is that there are a few JVMTI functions that will allocate and return a number of localrefs (in an array), and the caller has no way of knowing what that number may be. Therefore it can't call EnsureLocalCapacity() in a meaningful way to avoid the -Xcheck:jni warning.;;;","2022-11-16 20:30;dholmes;Thanks [~cjplummer] I will remove the test from the ProblemList and close JDK-8296936 in favour of this issue.;;;","2022-11-20 22:26;dholmes;Alternatively consider if EnsureLocalCapacity(n) always meant ""increase the previous planned capacity by 'n' "" (not, importantly, increase the available capacity by 'n'). That way the ""planned capacity"" would only ever grow as we have no way to know when it could be shrunk again (other than returning to Java code - but not all native code returns to Java). In this case if we had things like JVMTI GetLoadedClasses call EnsureLocalCapacity before converting the oops into local refs, then we would not get warnings in the caller.

But this seems of very limited use if the goal is to encourage programmers to correctly ""size"" their JNI code, as now failure to do so can easily be masked by a large increase to planned capacity by a JVM TI function. And as the ""planned capacity"" cannot be reduced we would easily mask many cases of incorrectly ""sized"" code.

So I remain of the view that the checked version of EnsureLocalCapacity has no utility.

I also think the regular version of EnsureLocalCapacity is a flawed and impractical API, whose flaws and limited were never really exposed because we don't actually have any inherent capacity limit.;;;","2022-11-20 23:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11259
Date: 2022-11-21 06:53:02 +0000;;;","2022-11-21 11:45;jvernee;We also have PushLocalFrame/PopLocalFrame, the former of which can be used to set a capacity as well it looks like. These push/pop a new jni handle block, which tracks the planned capacity, so EnsureLocalCapacity could work for nested function calls if those functions push a local frame at the start, and pop it again at the end.

I guess EnsureLocalCapacity alone would still be useful for root calls (i.e. first native frame when coming from Java). In HotSpot we automatically only set a new handle block when doing an upcall into Java. In other words, the handle block is the same across consecutive down calls from Java to native. Each jni call that comes from Java would have to call EnsureLocalCapacity to set the capacity for the currently active handle block. But, I don't think we do that anywhere at the moment.

Just adding some information. I don't have an opinion on whether the current checking behavior is useful or not.;;;","2022-11-21 17:33;dholmes;Thanks for the comment [~jvernee]. The main use of PushLocalFrame/PopLocalframe is to set up a scope that automatically clears local refs when you pop. The capacity associated with that is unused other than being range checked. In essence PushLocalFrame(n) is the same as doing a (hypothetical) PushLocalFrame() followed by EnsureLocalCapacity(n), so has the same issues in terms of capacity checking.

It is also unclear how the capacity specified for PushLocalFrame interacts with that set by EnsureLocalCapacity. As we have no inherent limit these spec issues have never been raised.;;;","2022-11-22 14:29;dcubed;Even if this was C++ and we could use ""helper"" objects to increment a relative
local capacity in funcN() and decrement that relative local capacity when funcN()
returns, we are killed by this:

> However, funcB is not required to call DeleteLocalRef, and if it doesn't then our
> available capacity has been reduced to 22 - 5 = 17.

If funcB doesn't have to clean up after itself, then nothing we do in the caller's
context will help. Sigh... There's a reason I hate JNI... :-);;;","2022-11-28 18:05;dukebot;Changeset: 692bedbc
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-11-29 02:03:49 +0000
URL:       https://git.openjdk.org/jdk/commit/692bedbc1df153f362b8e85693f20b089b5594e2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
New langtools test jdk/javadoc/doclet/testValueTag/TestValueFormats.java fails on machines with unexpected number format,JDK-8297091,5087656,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-11-15 14:59,2022-11-28 15:06,2023-10-01 09:56,2022-11-22 13:01,,,,,,,,20,tools,,0,javadoc-value-tag,noreg-self,,,,,,,,,,,,,,,,,,,,"The new langtools test jdk/javadoc/doclet/testValueTag/TestValueFormats.java, introduced by JDK-8286101, expects a number format with decimal separator dot (.). On machines with decimal separator comma (,), e.g. in german locale (user.country=DE), the test fails.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z9yr:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-11-15 15:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11177
Date: 2022-11-15 23:05:04 +0000;;;","2022-11-22 13:01;dukebot;Changeset: 4a544bb0
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-11-22 21:00:08 +0000
URL:       https://git.openjdk.org/jdk/commit/4a544bb0fcf1d334a681dd057a105d543976ef83
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update LCMS to 2.14,JDK-8297088,5087652,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,achung,dcubed,dcubed,2022-11-15 14:29,2023-03-01 12:59,2023-10-01 09:56,2022-11-18 11:41,11,17,20,8,,,,20,client-libs,,0,11-bp,17-bp,3rdparty,8-bp,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,littlecms,noreg-build,sn_131,,,,,,,,,,,"LittleCMS (aka LCMS) 2.14 released on Nov 1, 2022: 
https://github.com/mm2/Little-CMS/releases/tag/lcms2.14 

We should upgrade JDK 20 to use this last one.

The log from previous attempt: 
[2022-11-15T22:25:14,823Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8390/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/76234cd9-c2b0-4025-a89b-b7e173ca8803/runs/52e4fa9f-5910-43a4-9d35-50d8feab54a6/workspace/open/src/java.desktop/share/native/liblcms/cmscgats.c: In function 'satoi':
[2022-11-15T22:25:14,823Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8390/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/76234cd9-c2b0-4025-a89b-b7e173ca8803/runs/52e4fa9f-5910-43a4-9d35-50d8feab54a6/workspace/open/src/java.desktop/share/native/liblcms/cmscgats.c:1569:11: error: comparison is always false due to limited range of data type [-Werror=type-limits]
[2022-11-15T22:25:14,823Z]  1569 |     if (n > 0x7fffffffL) return 0x7fffffffL;
[2022-11-15T22:25:14,823Z]       |           ^
[2022-11-15T22:25:15,828Z] cc1: all warnings being treated as errors
[2022-11-15T22:25:15,837Z] make[3]: *** [/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8390/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/76234cd9-c2b0-4025-a89b-b7e173ca8803/runs/52e4fa9f-5910-43a4-9d35-50d8feab54a6/workspace/build/linux-x64/support/native/java.desktop/liblcms/static/cmscgats.o] Error 1",,,,,,,,,,,JDK-8300530,JDK-8297817,JDK-8297818,JDK-8299897,JDK-8297816,,,,,,,,,,,,,,,JDK-8215084,,,,,,,,,,,,JDK-8295369,JDK-8298261,JDK-8303482,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i2z9xv:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-11-15 14:31;dcubed;[~achung] - It looks like your fix for:

JDK-8295369 Update LCMS to 2.14

has broken Tier1 builds on at least Linux machines.;;;","2022-11-15 15:14;dcubed;Change from P1 -> P3 which is the original priority of:

JDK-8295369 Update LCMS to 2.14

since this bug is now the [REDO].;;;","2022-11-17 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11217
Date: 2022-11-17 19:05:36 +0000;;;","2022-11-18 11:41;dukebot;Changeset: 2c692aa3
Author:    Alisen Chung <achung@openjdk.org>
Date:      2022-11-18 19:39:47 +0000
URL:       https://git.openjdk.org/jdk/commit/2c692aa3567fff446b1a3263023077d8b4236945
;;;","2023-01-04 02:47;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
One of the regular update of external libs.
Clean backport except for a hunk in the makefile.
SAP nightly testing passed.;;;","2023-01-04 02:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1030
Date: 2023-01-04 10:44:39 +0000;;;","2023-01-16 05:22;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
One of the regular update of external libs.
Clean backport from 17 except for a trivial resolve in cmsio0.c. 
SAP nightly testing passed.;;;","2023-01-16 05:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1659
Date: 2023-01-16 13:19:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove com/sun/jdi/NashornPopFrameTest.java from the problem list,JDK-8297080,5087644,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2022-11-15 13:30,2022-12-15 05:37,2023-10-01 09:56,2022-11-18 11:18,20,,,,,,,20,core-svc,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,"The following problem list entry can be removed:

com/sun/jdi/NashornPopFrameTest.java 8225620 generic-all

The bug is closed (was specific to sparc) and the test no longer exists (Nashorn has been removed).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292650,,,,,,JDK-8225620,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z9w3:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-11-17 11:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11216
Date: 2022-11-17 18:53:58 +0000;;;","2022-11-18 11:18;dukebot;Changeset: 9b4e0e84
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-11-18 19:16:29 +0000
URL:       https://git.openjdk.org/jdk/commit/9b4e0e8446ec61b62819669a252ab5ae64da1eb4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/net/httpclient/CancelStreamedBodyTest.java fails with ""java.lang.AssertionError: WARNING: tracker for HttpClientImpl(1) has outstanding operations""",JDK-8297075,5087638,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dcubed,dcubed,2022-11-15 13:18,2023-08-10 17:49,2023-10-01 09:56,2022-11-17 07:10,20,,,,,,,20,core-libs,,0,regression,tier2,,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/net/httpclient/CancelStreamedBodyTest.java

Here's a snippet from the log file:

----------System.out:(273/17116)----------
Http1TestServer[localhost/127.0.0.1:41883]::addHandler CancelStreamedBodyTest$HTTPSlowHandler@358f2ca7, /http1/x/
Http1TestServer[localhost/127.0.0.1:38199]::addHandler CancelStreamedBodyTest$HTTPSlowHandler@358f2ca7, /https1/x/
Http2TestServerImpl[localhost/127.0.0.1:55169]::addHandler CancelStreamedBodyTest$HTTPSlowHandler@687e1a8a, /http2/x/
Http2TestServerImpl[localhost/127.0.0.1:43629]::addHandler CancelStreamedBodyTest$HTTPSlowHandler@687e1a8a, /https2/x/
Http1TestServer: start
Http1TestServer: start
Http2TestServerImpl: start
Http2TestServerImpl: start
config CancelStreamedBodyTest.setup(): success
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success

[0 s, 366 ms, 407427 ns]  testAsLines(http://localhost:41883/http1/x/new/testAsLines, false)
HTTPSlowHandler received request to /http1/x/new/testAsLines
Server wrote 12 bytes
Waiting for HTTP operations to terminate...
PASSED: No subscribers for testAsLines(http://localhost:41883/http1/x/new/testAsLines)
	 step [0,0] found in HttpClientImpl(1)
HTTPSlowHandler: unexpected exception: java.io.IOException: Broken pipe
HTTPSlowHandler reply sent: /http1/x/new/testAsLines
WARNING: exception caught in HttpTestHandler::handle java.io.IOException: Broken pipe
java.io.IOException: Broken pipe
	at java.base/sun.nio.ch.SocketDispatcher.write0(Native Method)
	at java.base/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:62)
	at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:136)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:101)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:57)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:542)
	at jdk.httpserver/sun.net.httpserver.Request$WriteStream.write(Request.java:390)
	at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.writeChunk(ChunkedOutputStream.java:125)
	at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.flush(ChunkedOutputStream.java:159)
	at jdk.httpserver/sun.net.httpserver.PlaceholderOutputStream.flush(ExchangeImpl.java:469)
	at CancelStreamedBodyTest$HTTPSlowHandler.handle(CancelStreamedBodyTest.java:430)
	at HttpServerAdapters$HttpTestHandler.doHandle(HttpServerAdapters.java:382)
	at HttpServerAdapters$HttpTestHandler.lambda$toHttpHandler$0(HttpServerAdapters.java:375)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
	at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:101)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:868)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:835)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:204)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:567)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:533)
	at java.base/java.lang.Thread.run(Thread.java:1591)
	Suppressed: java.io.IOException: Broken pipe
		at java.base/sun.nio.ch.SocketDispatcher.write0(Native Method)
		at java.base/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:62)
		at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:136)
		at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:101)
		at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:57)
		at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:542)
		at jdk.httpserver/sun.net.httpserver.Request$WriteStream.write(Request.java:390)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.writeChunk(ChunkedOutputStream.java:125)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.flush(ChunkedOutputStream.java:159)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.close(ChunkedOutputStream.java:134)
		at jdk.httpserver/sun.net.httpserver.PlaceholderOutputStream.close(ExchangeImpl.java:474)
		at CancelStreamedBodyTest$HTTPSlowHandler.handle(CancelStreamedBodyTest.java:421)
		... 12 more
HTTPSlowHandler received request to /http1/x/new/testAsLines
Server wrote 12 bytes
Server wrote 14 bytes
Waiting for HTTP operations to terminate...
Server wrote 22 bytes
HTTPSlowHandler: unexpected exception: java.io.IOException: Broken pipe
HTTPSlowHandler reply sent: /http1/x/new/testAsLines
WARNING: exception caught in HttpTestHandler::handle java.io.IOException: Broken pipe
java.io.IOException: Broken pipe
	at java.base/sun.nio.ch.SocketDispatcher.write0(Native Method)
	at java.base/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:62)
	at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:136)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:101)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:57)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:542)
	at jdk.httpserver/sun.net.httpserver.Request$WriteStream.write(Request.java:390)
	at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.writeChunk(ChunkedOutputStream.java:125)
	at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.flush(ChunkedOutputStream.java:159)
	at jdk.httpserver/sun.net.httpserver.PlaceholderOutputStream.flush(ExchangeImpl.java:469)
	at CancelStreamedBodyTest$HTTPSlowHandler.handle(CancelStreamedBodyTest.java:430)
	at HttpServerAdapters$HttpTestHandler.doHandle(HttpServerAdapters.java:382)
	at HttpServerAdapters$HttpTestHandler.lambda$toHttpHandler$0(HttpServerAdapters.java:375)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
	at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:101)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:868)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:835)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:204)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:567)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:533)
	at java.base/java.lang.Thread.run(Thread.java:1591)
	Suppressed: java.io.IOException: Broken pipe
		at java.base/sun.nio.ch.SocketDispatcher.write0(Native Method)
		at java.base/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:62)
		at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:136)
		at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:101)
		at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:57)
		at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:542)
		at jdk.httpserver/sun.net.httpserver.Request$WriteStream.write(Request.java:390)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.writeChunk(ChunkedOutputStream.java:125)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.flush(ChunkedOutputStream.java:159)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.close(ChunkedOutputStream.java:134)
		at jdk.httpserver/sun.net.httpserver.PlaceholderOutputStream.close(ExchangeImpl.java:474)
		at CancelStreamedBodyTest$HTTPSlowHandler.handle(CancelStreamedBodyTest.java:421)
		... 12 more
WARNING: tracker for HttpClientImpl(1) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 0
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true
test CancelStreamedBodyTest.testAsLines(""http://localhost:41883/http1/x/new"", false): failure
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(1) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 0
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true
	at ReferenceTracker.check(ReferenceTracker.java:229)
	at CancelStreamedBodyTest.testAsLines(CancelStreamedBodyTest.java:278)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testAsLines(""https://localhost:38199/https1/x/new"", false): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testAsLines(""http://localhost:55169/http2/x/new"", false): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testAsLines(""https://localhost:43629/https2/x/new"", false): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testAsLines(""http://localhost:41883/http1/x/same"", true): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testAsLines(""https://localhost:38199/https1/x/same"", true): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testAsLines(""http://localhost:55169/http2/x/same"", true): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testAsLines(""https://localhost:43629/https2/x/same"", true): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testInputStream(""http://localhost:41883/http1/x/new"", false): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testInputStream(""https://localhost:38199/https1/x/new"", false): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testInputStream(""http://localhost:55169/http2/x/new"", false): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testInputStream(""https://localhost:43629/https2/x/new"", false): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testInputStream(""http://localhost:41883/http1/x/same"", true): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testInputStream(""https://localhost:38199/https1/x/same"", true): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testInputStream(""http://localhost:55169/http2/x/same"", true): skip
org.testng.SkipException: some tests failed
config CancelStreamedBodyTest.beforeMethod(org.testng.TestRunner@1d9fea44): success
test CancelStreamedBodyTest.testInputStream(""https://localhost:43629/https2/x/same"", true): skip
org.testng.SkipException: some tests failed

=========================

[1 s, 799 ms, 470812 ns] Created 4 servers and 1 clients
Failed tests: 
	testAsLines[http://localhost:41883/http1/x/new, false]: java.lang.AssertionError: WARNING: tracker for HttpClientImpl(1) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 0
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(1) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 0
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true
	at ReferenceTracker.check(ReferenceTracker.java:229)
	at CancelStreamedBodyTest.testAsLines(CancelStreamedBodyTest.java:278)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)

=========================

config CancelStreamedBodyTest.printFailedTests(org.testng.TestRunner@1d9fea44): success
PASSED: No outstanding operations or unreleased resources found in 1 clients
Http1TestServer: stop
Http1TestServer: stop
Http2TestServerImpl: stop
Http2TestServerImpl: stop
config CancelStreamedBodyTest.teardown(): success

===============================================
java/net/httpclient/CancelStreamedBodyTest.java
Total tests run: 16, Passes: 0, Failures: 1, Skips: 15
===============================================

----------System.err:(590/58174)----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297149,,,,,,,,,,,JDK-8314136,JDK-8296889,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z9ur:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-11-15 13:23;dcubed;I've started this bug off as a P2 since it appears to be a regression.;;;","2022-11-15 13:25;dcubed;The first sighting of this failure is in jdk-20+24-1760-tier2 which includes
the following fix:

JDK-8296889 Race condition when cancelling a request

That fix includes a change to:

test/jdk/java/net/httpclient/CancelRequestTest.java

and that makes me think that JDK-8296889 is the cause of these test failures.;;;","2022-11-15 14:08;dcubed;[~dfuchs] - Can you please check out these test failures? I think it is related to your fix for:
JDK-8296889 Race condition when cancelling a request;;;","2022-11-15 14:52;dcubed;It looks like the ""java/net/httpclient/Cancel*"" tests do not execute in Tier1.
The PR for JDK-8296889 does not document the pre-integration testing
that was done.;;;","2022-11-16 08:27;dfuchs;Reducing priority now that offending change has been backed out.
See JDK-8297132;;;","2022-11-16 11:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11193
Date: 2022-11-16 18:52:42 +0000;;;","2022-11-17 07:10;dukebot;Changeset: 134acab5
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-11-17 15:08:04 +0000
URL:       https://git.openjdk.org/jdk/commit/134acab5a40b3f927ff6343aa49477a490e410b5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update boot JDK to 19.0.1,JDK-8297068,5087629,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,kcr,kcr,2022-11-15 11:08,2023-02-01 09:40,2023-10-01 09:56,2022-12-21 06:08,jfx20,,,,,,,jfx20,javafx,,0,noreg-build,sn_133,,,,,,,,,,,,,,,,,,,,"Now that JDK 19.0.1 has released, we should update the boot JDK for JavaFX to use JDK 19.0.1
",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297067,,,,,,,,,,,,,,JDK-8300705,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z9sr:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-12-20 00:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/979
Date: 2022-12-20 08:42:10 +0000;;;","2022-12-21 06:08;dukebot;Changeset: 1d9e2afc
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-12-21 14:07:25 +0000
URL:       https://git.openjdk.org/jfx/commit/1d9e2afc66011164a6ecb13a62f0c90128cc2fc1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update Gradle to 7.6.0,JDK-8297067,5087628,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,kcr,kcr,2022-11-15 11:00,2023-08-16 17:43,2023-10-01 09:56,2022-12-19 02:51,8,jfx20,,,,,,jfx20,javafx,,0,3rdparty,8-bp,noreg-build,sn_133,sn_134,,,,,,,,,,,,,,,,,"As soon as gradle 7.6 is released, we should update the JavaFX build to use it. This is required in order to allow using JDK 19 as the boot JDK.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297042,,JDK-8297068,JDK-8275246,,JDK-8314484,,,,,,,,,,,,,,,,,,,,JDK-8276142,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z9sj:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-11-15 11:04;kcr;gradle 7.6 is currently in RC3.;;;","2022-12-14 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/973
Date: 2022-12-14 08:26:35 +0000;;;","2022-12-19 02:51;dukebot;Changeset: ae86ed32
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-12-19 10:50:03 +0000
URL:       https://git.openjdk.org/jfx/commit/ae86ed322141c0087ef8a95c48aeafeb51e9a81b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DerOutputStream operations should not throw IOExceptions,JDK-8297065,5087626,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-11-15 10:42,2022-12-05 14:45,2023-10-01 09:56,2022-11-29 04:58,,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,"DerOutputStream is a child class of ByteArrayOutputStream, and operations on it should not trigger any I/O error. All ""throws IOException"" in method declarations should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296072,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z9s3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-11-22 14:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11302
Date: 2022-11-22 22:29:24 +0000;;;","2022-11-29 04:59;dukebot;Changeset: 2deb318c
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-11-29 12:57:46 +0000
URL:       https://git.openjdk.org/jdk/commit/2deb318c9f047ec5a4b160d66a4b52f93688ec42
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: graphContent not set when opening a new tab,JDK-8297047,5087602,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,tholenstein,tholenstein,2022-11-15 06:36,2022-12-13 23:50,2023-10-01 09:56,2022-11-16 05:54,20,,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,,"Open any graph in IGV. The graph will be opened in a new tab as expected. But the tab has the name ""graph"" instead of the actual graph name. Further, the ""Bytecode"" and ""Control Flow"" windows are not updated with the current graph. 

The reason for this is that we do not set `graphContent` when opening a new EditorTopComponent. This is a regression introduced in JDK-8295934",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,,,,,,,,,,,,JDK-8295934,,,,,,,,,"2022-11-15 06:36;tholenstein;graph_not_updated.png;https://bugs.openjdk.org/secure/attachment/101612/graph_not_updated.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z9mr:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-15 06:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11168
Date: 2022-11-15 14:38:57 +0000;;;","2022-11-15 07:09;tholenstein;This is a regression of JDK-8295934;;;","2022-11-15 07:58;chagedorn;ILW = Wrong tab name and outdated windows, always, no workaround = LHH = P4;;;","2022-11-16 05:54;dukebot;Changeset: 4946737f
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-11-16 13:52:41 +0000
URL:       https://git.openjdk.org/jdk/commit/4946737fcb581acaf2641d91c8db6728286ce29c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gradle -PBUILD_SDK_FOR_TEST=false fails with gradle 7.6,JDK-8297042,5087597,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-11-15 05:22,2022-11-29 06:15,2023-10-01 09:56,2022-11-16 05:06,jfx20,,,,,,,jfx20,javafx,,0,noreg-build,sn_131,test_sprint,testbug,,,,,,,,,,,,,,,,,,"To reproduce, run the following using gradle 7.6 RC3:

$ gradle sdk
$ gradle --info -PBUILD_SDK_FOR_TEST=false test

<==-----------> 15% CONFIGURING [3s]> IDLE
FAILURE: Build failed with an exception.

* Where:
Build file 'C:\Users\kcr\javafx\jfx-kcr\jfx\rt\build.gradle' line: 615

* What went wrong:
A problem occurred evaluating root project 'rt'.
> No signature of method: org.gradle.execution.taskgraph.DefaultTaskExecutionGraph.useFilter() is applicable for argument types: (build_32ube911nql8mvr8torfp363j$_run_closure1) values: [build_32ube911nql8mvr8torfp363j$_run_closure1@1679a7fe]


By way of background, setting the gradle ""-PBUILD_SDK_FOR_TEST=false"" flag can be used when running tests to avoid a complete build of the sdk. This flag is only partially effective, since building and running the tests unconditionally depend on the shims, which in turn depend on the module classes, even when ""BUILD_SDK_FOR_TEST"" is false. It does speed up the build somewhat in that it won't rebuild any of the native code
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297071,JDK-8297067,,,,,,,,,,,JDK-8166662,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z9ln:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-11-15 05:24;kcr;The root cause is that `gradle.taskGraph.useFilter` is not public API, but is an implementation detail that happened to ""work"" up until recently, but stopped working some time between gradle 7.3 and gradle 7.6. I say ""worked"" in quotes, because there is effectively no difference in what gets run because of the dependency on the shims.

The simple fix is to remove the following logic from build.gradle, which was added by JDK-8166662 back in the JDK 9 time frame. Removing this part of the logic has no perceived impact, and will allow us to update to gradle 7.6 when the GA is released.

-// All ""classes"" and ""jar"" tasks and their dependencies would be disabled
-// when running with DO_BUILD_SDK_FOR_TEST=false as they're unneeded for running tests
-if (!DO_BUILD_SDK_FOR_TEST) {
-    gradle.taskGraph.useFilter({ task -> !task.name.equals(""classes"") && !task.name.equals(""jar"") })
-}

Longer term, I will file an Enhancement to add a new mode that cleanly separates build from test (the current approach is insufficient).
;;;","2022-11-15 06:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/949
Date: 2022-11-15 14:21:12 +0000;;;","2022-11-16 05:06;dukebot;Changeset: 6cc9c4d1
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-11-16 13:03:13 +0000
URL:       https://git.openjdk.org/jfx/commit/6cc9c4d1b9a46432f1568a54d7dcdf51e224559b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix broken aarch64 build of 13u/15u after bad backport of 8293044,JDK-8297027,5087582,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,yan,yan,yan,2022-11-15 03:42,2023-04-27 04:28,2023-10-01 09:56,2022-11-15 05:08,13.0.14,15.0.10,,,,,,15.0.10,hotspot,,0,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,noreg-build,oraclejdk-na,oracle-triage-11,oracle-triage-20,,,,,,,,,,,,,,Backporting JDK-8293044 I didn't change in src/hotspot/share/c1/c1_Runtime1.cpp 'current' to 'thread' in a call to be compiled on aarch64 platforms.,,,,,,,,,,,JDK-8297034,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,,"0|i2z9ib:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-15 03:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/430
Date: 2022-11-15 11:47:22 +0000;;;","2022-11-15 04:07;chagedorn;ILW = Broken Aarch64 build, always, no workaround = HHH = P1;;;","2022-11-15 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/304
Date: 2022-11-15 11:53:51 +0000;;;","2022-11-15 05:08;dukebot;Changeset: a38104e1
Author:    Yuri Nesterenko <yan@openjdk.org>
Date:      2022-11-15 13:06:57 +0000
URL:       https://git.openjdk.org/jdk15u-dev/commit/a38104e176c2c5eca13db0f549e9201dd02a7bbc
;;;","2022-12-01 04:54;dukebot;Changeset: a38104e1
Author:    Yuri Nesterenko <yan@openjdk.org>
Date:      2022-11-15 13:06:57 +0000
URL:       https://git.openjdk.org/jdk15u/commit/a38104e176c2c5eca13db0f549e9201dd02a7bbc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: AbstractEventStream should not hold thread instance,JDK-8297006,5087564,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-11-15 02:04,2022-11-28 14:49,2023-10-01 09:56,2022-11-16 12:05,,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,Today AbstractEventStream holds on to thread that started the stream. This is unnecessary and could potentially lead to memory leaks. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z9eb:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-11-15 05:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11166
Date: 2022-11-15 13:16:01 +0000;;;","2022-11-16 12:05;dukebot;Changeset: 04a4d347
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-11-16 20:01:37 +0000
URL:       https://git.openjdk.org/jdk/commit/04a4d347bdd279be3281bf769de84e516b27000e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
saving errno on a value-returning function crashes the JVM,JDK-8296973,5087528,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jvernee,mcimadamore,mcimadamore,2022-11-14 16:02,2022-11-18 06:39,2023-10-01 09:56,2022-11-18 06:39,repo-panama,,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,"Description copied from [1].

This is the C code: 

#include <errno.h>
#include <stdint.h>

void set_errno(int32_t value) {
    errno = value;
}

int32_t set_errno2(int32_t value) {
    errno = (int) value;
    return value * 2;
}

I compiled the code on Linux (Fedora 36) with the following command:
gcc -o libCaptureCallState.so -shared -Wall libCaptureCallState.c
This is the Java code causing the issue:

import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.MemorySession;
import java.lang.foreign.SymbolLookup;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.file.Path;

public class TestCaptureCallState {

    public static void main(String[] args) throws Throwable {
        System.load(Path.of(""libCaptureCallState.so"").toAbsolutePath().toString());
        Linker linker = Linker.nativeLinker();
        SymbolLookup lookup = SymbolLookup.loaderLookup();
        Linker.Option.CaptureCallState state = Linker.Option.captureCallState(""errno"");
        VarHandle errno = state.layout().varHandle(MemoryLayout.PathElement.groupElement(""errno""));
        MethodHandle setErrno = linker.downcallHandle(
            lookup.find(""set_errno"").orElseThrow(),
            FunctionDescriptor.ofVoid(ValueLayout.JAVA_INT),
            state
        );
        MethodHandle setErrno2 = linker.downcallHandle(
            lookup.find(""set_errno2"").orElseThrow(),
            FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.JAVA_INT),
            state
        );

        try (MemorySession session = MemorySession.openConfined()) {
            MemorySegment saveSeg = session.allocate(state.layout());
            System.out.println(""Testing set_errno ..."");
            setErrno.invoke(saveSeg, 42);
            int savedErrno = (int) errno.get(saveSeg);
            System.out.printf(""errno: %d\n"", savedErrno);
        }
        try (MemorySession session = MemorySession.openConfined()) {
            System.out.println(""Testing set_errno2 ..."");
            MemorySegment saveSeg = session.allocate(state.layout());
            int result = (int) setErrno2.invoke(saveSeg, 42);
            int savedErrno = (int) errno.get(saveSeg);
            System.out.printf(""errno: %d, result: %d\n"", savedErrno, result);
        }
    }
}

I executed the code with the following commands:
javac --enable-preview --release 20 TestCaptureCallState.java
java --enable-preview --enable-native-access=ALL-UNNAMED TestCaptureCallState
The code fails when calling the function with the return value:

Testing set_errno ...
errno: 42
Testing set_errno2 ...
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fea8ed0dce8, pid=47154, tid=47155
#
# JRE version: OpenJDK Runtime Environment (20.0) (build 20-internal-adhoc.maschroeder.openjdk--panama-foreign)
# Java VM: OpenJDK 64-Bit Server VM (20-internal-adhoc.maschroeder.openjdk--panama-foreign, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x70dce8]  DowncallLinker::capture_state(int*, int)+0x18 

[1] - https://mail.openjdk.org/pipermail/panama-dev/2022-November/018094.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z96b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-11-14 17:02;jvernee;Something I initially overlooked: there is an optimization of the frame size by sharing the spill area for return values with some of the stub values. In the cases where there is no return buffer, and where we have no stack arguments, the spill of the return value will overwrite the pointer to the captured state segment.

On Windows this isn't a problem since there we also have 32 bytes of shadow space which absorbs the overflow. Reordering some of the code that allocates the frame size should fix this.

But, either way, I think doing some more testing is warranted.;;;","2022-11-17 10:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/753
Date: 2022-11-17 18:40:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos13] java/awt/Frame/MaximizedToIconified/MaximizedToIconified.java: getExtendedState() != 6 as expected.,JDK-8296972,5087527,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,achung,vprovodin,vprovodin,2022-11-14 15:27,2023-09-13 08:41,2023-10-01 09:56,2023-06-28 13:18,11,17,19,20,21,,,22,client-libs,,0,macos,macos13,sn_134,sn_135,sn_143,sn_144,sn_145,sn_146,sn_147,tier4,,,,,,,,,,,,"The test java/awt/Frame/MaximizedToIconified/MaximizedToIconified.java became failing on both macOS-aarch64 and macOS-x64 starting since Ventura 13.0 Beta (22A5365d) with the following output:

```
#section:main
----------messages:(7/279)----------
command: main MaximizedToIconified
reason: User specified action: run main MaximizedToIconified 
started: Wed Oct 12 04:13:38 UTC 2022
Mode: othervm
Additional options from @modules: --add-modules java.desktop
finished: Wed Oct 12 04:13:42 UTC 2022
elapsed time (seconds): 3.873
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(11/452)----------
last = 0; getOldState() = 0; getNewState() = 6
state = 6; getExtendedState() = 6
last = 6; getOldState() = 6; getNewState() = 0
last = 0; getOldState() = 0; getNewState() = 1
state = 1; getExtendedState() = 1
last = 1; getOldState() = 1; getNewState() = 0
state = 0; getExtendedState() = 0
last = 0; getOldState() = 0; getNewState() = 1
state = 1; getExtendedState() = 1
last = 1; getOldState() = 1; getNewState() = 0
state = 6; getExtendedState() = 0
----------System.err:(14/877)----------
java.lang.RuntimeException: getExtendedState() != 6 as expected.
	at MaximizedToIconified.checkState(MaximizedToIconified.java:70)
	at MaximizedToIconified.examineStates(MaximizedToIconified.java:98)
	at MaximizedToIconified.doTest(MaximizedToIconified.java:117)
	at MaximizedToIconified.main(MaximizedToIconified.java:124)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1588)

JavaTest Message: Test threw exception: java.lang.RuntimeException: getExtendedState() != 6 as expected.
```
It is still being observed on 13.1 Beta (22C5033e)
The test passes successfully on the previous macOS versions 11, 12.
The issue was observed on jdk20 20-ea+23-1677. It is also reproducible with jdk19 (19.0.1+10-21), jdk17

*Reproducibility*: 100%
*Steps to reproduce*:
$ jtreg/bin/jtreg -va  -testjdk:jdk-20.jdk/Contents/Home/ test/jdk/java/awt/Frame/MaximizedToIconified/MaximizedToIconified.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294890,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-14 15:25;vprovodin;MaximizedToIconified.jtr;https://bugs.openjdk.org/secure/attachment/101599/MaximizedToIconified.jtr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2z963:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-12-05 12:28;prr;Yes, this test is failing consistently. We should problem list it ASAP until it can be investigated and resolved.

I submitted https://bugs.openjdk.org/browse/JDK-8298123 for the problem listing;;;","2022-12-08 19:50;serb;This could be marked as a platform to platform regression.;;;","2023-05-10 13:17;achung;The issue is likely a synchronization error in CPlatformWindow.java where an iconified frame should be uniconified first before maximizing, but the maximization somehow doesn't happen. If you sleep the thread, the test will pass.;;;","2023-05-23 14:10;achung;Interestingly, on a newly built jdk, this test will pass and throw a warning:
2023-05-23 14:08:20.674 java[8544:7174596] 	Cocoa AWT: Not running on AppKit thread 0 when expected. (
	0   libawt_lwawt.dylib                  0x00000001031a1097 Java_sun_lwawt_macosx_LWCToolkit_createAWTRunLoopMediator + 39
	1   ???                                 0x00000001144b7680 0x0 + 4635457152
)
2023-05-23 14:08:20.674 java[8544:7174596] 	Please file a bug report at https://bugreport.java.com/bugreport with this message and a reproducible test case.
2023-05-23 14:08:20.675 java[8544:7174596] 	Cocoa AWT: Not running on AppKit thread 0 when expected. (
	0   libawt_lwawt.dylib                  0x00000001031a11e8 Java_sun_lwawt_macosx_LWCToolkit_doAWTRunLoopImpl + 56
	1   ???                                 0x00000001144b7680 0x0 + 4635457152

On subsequent runs the original failure reoccurs.;;;","2023-05-30 11:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14226
Date: 2023-05-30 18:41:38 +0000;;;","2023-06-28 13:18;dukebot;Changeset: f0c2f098
Author:    Alisen Chung <achung@openjdk.org>
Date:      2023-06-28 20:17:00 +0000
URL:       https://git.openjdk.org/jdk/commit/f0c2f098150335fce736708354d58bae383cc4a1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C1: PrintC1Statistics is broken after JDK-8292878,JDK-8296969,5087524,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcao,xliu,xliu,2022-11-14 14:00,2022-12-13 23:51,2023-10-01 09:56,2022-11-15 13:15,20,,,,,,,20,hotspot,,0,c1,diagnostics,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,,,,,,,,,,,,,,,,"Reproducible:

$./build/linux-x86_64-server-fastdebug/jdk/bin/java -XX:+PrintC1Statistics   --version
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/macroAssembler_x86.cpp:2261
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/xxinliu/Devel/jdk/src/hotspot/cpu/x86/macroAssembler_x86.cpp:2261), pid=121430, tid=121444
#  assert(rscratch != noreg || always_reachable(dst)) failed: missing
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.xxinliu.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc.xxinliu.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1534aee]  MacroAssembler::incrementl(AddressLiteral, Register)+0x1ee
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /local/home/xxinliu/Devel/jdk/hs_err_pid121430.log
[thread 121446 also had an error]
[thread 121456 also had an error]
[thread 121458 also had an error]
[thread 121457 also had an error]
openjdk 20-internal 2023-03-21
OpenJDK Runtime Environment (fastdebug build 20-internal-adhoc.xxinliu.jdk)
OpenJDK 64-Bit Server VM (fastdebug build 20-internal-adhoc.xxinliu.jdk, mixed mode)
#
# Compiler replay data is saved as:
# /local/home/xxinliu/Devel/jdk/replay_pid121430.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
[1]    121430 abort      ./build/linux-x86_64-server-fastdebug/jdk/bin/java -XX:+PrintC1Statistics",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298053,,,,,,,,,,,JDK-8292878,,,,,,,,,"2022-11-14 14:02;xliu;hs_err_pid121430.log;https://bugs.openjdk.org/secure/attachment/101597/hs_err_pid121430.log","2022-11-14 14:02;xliu;replay_pid121430.log;https://bugs.openjdk.org/secure/attachment/101598/replay_pid121430.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,generic,,,,,,"0|i2z95f:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-14 18:42;jcao;Issue seems to be coming from https://bugs.openjdk.org/browse/JDK-8292878. The `incrementl` that is in the hs_err stacktrace is missing a `rscratch1` argument.;;;","2022-11-15 02:05;chagedorn;ILW = Not product flag PrintC1Statistics is broken, always, no workaround = LHH = P4;;;","2022-11-15 07:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11170
Date: 2022-11-15 15:06:05 +0000;;;","2022-11-15 13:15;dukebot;Changeset: 0cbf084b
Author:    Joshua Cao <joshcao@amazon.com>
Committer: Xin Liu <xliu@openjdk.org>
Date:      2022-11-15 21:13:11 +0000
URL:       https://git.openjdk.org/jdk/commit/0cbf084b44cbae1b879f4dd7847de0a551e5c1ea
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update langtools tests to use @enablePreview,JDK-8296968,5087523,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-11-14 14:00,2022-11-28 14:51,2023-10-01 09:56,2022-11-16 16:51,20,,,,,,,20,tools,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297215,,,,,,,,,,,JDK-8297215,CODETOOLS-7902654,JDK-8296913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z957:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-14 14:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11149
Date: 2022-11-14 22:02:42 +0000;;;","2022-11-16 16:51;dukebot;Changeset: e2269fd2
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-11-17 00:49:53 +0000
URL:       https://git.openjdk.org/jdk/commit/e2269fd2ca64347fcfa2275d7dd530428afa75f2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix hotspot shell tests of 8u on multilib systems,JDK-8296959,5087513,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,zzambers,zzambers,2022-11-14 12:11,2022-11-25 08:39,2023-10-01 09:56,2022-11-15 05:05,openjdk8u352,,,,,,,openjdk8u362,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,sustaining,,,,,,,,,,,,,,,,,,"Few hotspot tests (from hotspot/tier1) currently fail for x86 (32-bit) builds on 64-bit system (Linux):
compiler/criticalnatives/argumentcorruption/Test8167409.sh 
runtime/jni/CallWithJNIWeak/test.sh 
runtime/jni/ReturnJNIWeak/test.sh

Problem:
Tests build 64-bit JNI libraries and trying to use them for 32-bit jdk, resulting in error:
Exception in thread ""main"" java.lang.UnsatisfiedLinkError: /home/runner/work/jdk8u-dev/jdk8u-dev/test-results/testoutput/hotspot_tier1/JTwork/scratch/libCNCheckLongArgs.so: /home/runner/work/jdk8u-dev/jdk8u-dev/test-results/testoutput/hotspot_tier1/JTwork/scratch/libCNCheckLongArgs.so: wrong ELF class: ELFCLASS64 (Possible cause: architecture word width mismatch)

These tests only target Linux and (some) Solaris.

Solution:
Fixed by supplying appropriate compiler argument (-m32) to build 32-bit libraries for 32-bit JDK. (Some tests already did that, but not in uniform way). I verified in manpage of gcc that -m32 argument is supported for all 32-bit variants of architectures supported by JDK 8 [1]. Solaris cc also seems to support -m32 [2].
This fix is JDK 8 only as newer JDK use new approach, where JNI test libraries are build are build system and tests not longer build them themselfs.

Testing:
Change fixed these tests on linux-x86. (tested here [3])
Tests are part of hotspot/tier1. This is one of problems, which needs to be fixed, so that hotspot/tier1 can be enabled in GHA on linux-x86. Other one is JDK-8295952 [4] (will need to get fixed and backported).

[1]  https://man7.org/linux/man-pages/man1/gcc.1.html
[2] https://docs.oracle.com/cd/E37069_01/html/E54439/cc-1.html
[3] https://github.com/zzambers/jdk8u-dev/actions/runs/3441392968
[4] https://bugs.openjdk.org/browse/JDK-8295952",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z92z:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-11-14 12:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/173
Date: 2022-11-14 20:12:10 +0000;;;","2022-11-14 12:21;zzambers;Fix request (8u):

Fixes few shell tests from hotspot/tier1 on multilib systems
Only touches tests.  Only for 8u (newer jdk use different approach to jni test libraries). Tested.;;;","2022-11-15 05:05;dukebot;Changeset: 7024bf0a
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-11-15 13:02:58 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/7024bf0af8169ea8e36d812860072c40d5371327
;;;","2022-11-25 08:39;dukebot;Changeset: 7024bf0a
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-11-15 13:02:58 +0000
URL:       https://git.openjdk.org/jdk8u/commit/7024bf0af8169ea8e36d812860072c40d5371327
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
One more cast in SAFE_SIZE_NEW_ARRAY2,JDK-8296957,5087508,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,serb,serb,2022-11-14 11:26,2023-02-15 11:53,2023-10-01 09:56,2022-11-22 10:10,20,,,,,,,20,client-libs,,0,11-bp,17-bp,8-bp,cssn22_11_02,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,regression,regression_8296496,,Implementation of SAFE_SIZE_NEW_ARRAY2 missed one cast to the size_t,,,,,,,,,,,JDK-8297669,JDK-8297929,JDK-8297735,JDK-8297947,JDK-8297913,JDK-8297937,JDK-8298143,JDK-8297673,JDK-8297672,JDK-8297540,,,,,,,,,,JDK-8292652,,,,,,,,,,,,,,,,,,,,,,,JDK-8296496,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z91v:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-11-21 01:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11253
Date: 2022-11-21 01:22:49 +0000;;;","2022-11-22 10:10;dukebot;Changeset: fb6c992f
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-11-22 18:08:12 +0000
URL:       https://git.openjdk.org/jdk/commit/fb6c992f325981c42c7f75109a6c9db7ca8715d8
;;;","2022-11-22 13:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/88
Date: 2022-11-22 18:23:50 +0000;;;","2022-11-22 14:45;serb;Fix request (19u)

Clean backport.
This is the fix for a problem (regression) introduced by the October CPU and only partly fixed by the JDK-8296496
Review https://github.com/openjdk/jdk19u/pull/88;;;","2022-11-27 20:27;serb;working on backports for 8/11/13/15/17.;;;","2022-11-28 03:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1556
Date: 2022-11-28 07:47:50 +0000;;;","2022-11-28 03:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/434
Date: 2022-11-28 07:42:56 +0000;;;","2022-11-28 03:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/196
Date: 2022-11-28 07:50:57 +0000;;;","2022-11-28 03:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/308
Date: 2022-11-28 07:40:12 +0000;;;","2022-11-28 03:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/937
Date: 2022-11-28 07:06:33 +0000;;;","2022-11-28 03:11;serb;Fix request (17u,15u,13u,11u,8u)

Clean backport.
This is the fix for a problem (regression) introduced by the October CPU and only partly fixed by the JDK-8296496
Review 17u-dev: https://git.openjdk.org/jdk17u-dev/pull/937
Review 15u-dev: https://git.openjdk.org/jdk15u-dev/pull/308
Review 13u-dev: https://git.openjdk.org/jdk13u-dev/pull/434
Review 11u-dev: https://git.openjdk.org/jdk11u-dev/pull/1556
Review 8u-dev: https://git.openjdk.org/jdk8u-dev/pull/196
;;;","2022-12-01 02:51;serb;The new review request(clean) for jdk13u-dev: https://github.com/openjdk/jdk13u-dev/pull/436 the old one glitched in the Skara tool
;;;","2022-12-01 02:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/436
Date: 2022-12-01 10:44:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
[JVMCI] HotSpotResolvedJavaFieldImpl.getIndex returns wrong value,JDK-8296956,5087507,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2022-11-14 11:26,2022-12-14 02:29,2023-10-01 09:56,2022-11-16 13:24,17,20,,,,,,20,hotspot,,0,jdk17-graalvm,jdk17u-fix-request,jdk17u-fix-yes,jvmci,oracle-triage-11,oracle-triage-20,,,,,,,,,,,,,,,,"The way unsigned 16-bit values for HotSpotResolvedJavaFieldImpl.index are handled by HotSpotResolvedJavaFieldImpl.getIndex() is wrong. It is passed into the constructor as an int, and returned by getIndex as an int - but it is stored as a short. Which means that unsigned 16-bit values are not handled correctly.",,,,,,,,,,,JDK-8298358,JDK-8297651,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z91n:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-14 12:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11142
Date: 2022-11-14 19:37:20 +0000;;;","2022-11-15 02:02;chagedorn;ILW = Wrong result due to wrong data type, not observed yet/low?, no workaround = MLH = P4;;;","2022-11-16 13:24;dukebot;Changeset: 95c390ec
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-11-16 21:21:04 +0000
URL:       https://git.openjdk.org/jdk/commit/95c390ec75eec31cdf613c8bb236e43aa65a1bb5
;;;","2022-11-25 03:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/933
Date: 2022-11-25 10:50:02 +0000;;;","2022-11-25 05:33;sgehwolf;Fix Request (OpenJDK 17u):

Please approve getting this backported to 17u. This is needed to get future (23.0) GraalVM building with Mandrel based on OpenJDK 17. Clean backport. Risk should be low as it's a JVMCI only change. Tested with jvmci tests.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Kitchensink.java failed with ""double free or corruption (!prev): <addr>""",JDK-8296955,5087506,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,coleenp,dcubed,dcubed,2022-11-14 11:15,2023-01-20 15:04,2023-10-01 09:56,2022-12-12 16:51,20,,,,,,,20,hotspot,,0,gc-g1,intermittent,noreg-hard,tier5,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

applications/kitchensink/Kitchensink.java

Here's a snippet from the log file:

[stress.process.err] Iteration start: Monitor at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: MemAccess at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: MBean at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: Inflater at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: SpecJbb2005 at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: Reference at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: LockDeflation at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: Jcmd at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: Jni at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: Jvmti at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: Jstat at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: SpecJvm2008Batch at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: ThreadDumper at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: Jfr at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: Perfmon at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: NMT at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: Exception at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration start: Allocator at Sat Nov 12 04:13:14 UTC 2022
[stress.process.err] Iteration done: MBean at Sat Nov 12 04:13:16 UTC 2022
[stress.process.err] Iteration done: ThreadDumper at Sat Nov 12 04:13:16 UTC 2022
[stress.process.err] *** Error in `/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/bin/java': double free or corruption (!prev): 0x00007fcaf0009a70 ***
[stress.process.err] ======= Backtrace: =========
[stress.process.err] /lib64/libc.so.6(+0x81329)[0x7fcb74161329]
[stress.process.err] /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so(+0xfea973)[0x7fcb72dc4973]
[stress.process.err] /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so(+0x16097ae)[0x7fcb733e37ae]
[stress.process.err] /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so(+0x1687ca3)[0x7fcb73461ca3]
[stress.process.err] /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so(+0x174af8b)[0x7fcb73524f8b]
[stress.process.err] /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so(+0xe5f027)[0x7fcb72c39027]
[stress.process.err] /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so(+0x1bd6c90)[0x7fcb739b0c90]
[stress.process.err] /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so(+0x1a7e070)[0x7fcb73858070]
[stress.process.err] /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so(+0x1714e43)[0x7fcb734eee43]
[stress.process.err] /lib64/libpthread.so.0(+0x7ea5)[0x7fcb746b9ea5]
[stress.process.err] /lib64/libc.so.6(clone+0x6d)[0x7fcb741deb2d]
[stress.process.err] ======= Memory map: ========
[stress.process.err] 519800000-785800000 rw-p 00000000 00:00 0 
[stress.process.err] 785800000-7ff000000 ---p 00000000 00:00 0 
[stress.process.err] 7ff000000-7ff700000 rw-p 00000000 00:00 0 

<snip>

[stress.process.err] 7ffe872a8000-7ffe872ab000 r--p 00000000 00:00 0                          [vvar]
[stress.process.err] 7ffe872ab000-7ffe872ad000 r-xp 00000000 00:00 0                          [vdso]
[stress.process.err] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
Stress process is started and all modules initialized.
Dumping stress process VM options.
 stdout: [23488:
];
 stderr: [java.io.IOException: Connection reset by peer
	at jdk.attach/sun.tools.attach.VirtualMachineImpl.read(Native Method)
	at jdk.attach/sun.tools.attach.VirtualMachineImpl$SocketInputStream.read(VirtualMachineImpl.java:265)
	at jdk.attach/sun.tools.attach.HotSpotVirtualMachine.readInt(HotSpotVirtualMachine.java:332)
	at jdk.attach/sun.tools.attach.VirtualMachineImpl.execute(VirtualMachineImpl.java:197)
	at jdk.attach/sun.tools.attach.HotSpotVirtualMachine.executeCommand(HotSpotVirtualMachine.java:313)
	at jdk.attach/sun.tools.attach.HotSpotVirtualMachine.executeJCmd(HotSpotVirtualMachine.java:295)
	at jdk.jcmd/sun.tools.jcmd.JCmd.executeCommandForPid(JCmd.java:124)
	at jdk.jcmd/sun.tools.jcmd.JCmd.main(JCmd.java:97)
]
 exitValue = 1

Got an exception, so I'll kill the stress process process
[Sat Nov 12 04:14:20 UTC 2022] Unexpected errors during GlueModule initialization: Expected to get exit value of [0], exit value is: [1]
java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at applications.kitchensink.process.glue.Main.dumpOptions(Main.java:442)
	at applications.kitchensink.process.glue.Main.execute(Main.java:333)
	at applications.kitchensink.process.glue.Main.main(Main.java:217)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]",,,,,,,,,,,JDK-8298665,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295357,,,,,,,,,,,,,,,,,JDK-8290012,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2z91f:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-14 11:18;dcubed;There's another BigApps bug that has a ""double free or corruption (!prev):"" failure mode:

JDK-8290012 RenaissanceStressTest.java and RenaissanceStressTest24H.java misc failures;;;","2022-11-14 12:46;lmesnik;I see the following stack in the core dump:

Thread 1 (Thread 0x7fcb7052f700 (LWP 23492)):
#0  0x00007fcb74116387 in raise () from /lib64/libc.so.6
#1  0x00007fcb74117a78 in abort () from /lib64/libc.so.6
#2  0x00007fcb74158f67 in __libc_message () from /lib64/libc.so.6
#3  0x00007fcb74161329 in _int_free () from /lib64/libc.so.6
#4  0x00007fcb72dc4973 in InstanceKlass::get_jmethod_id(methodHandle const&) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so
#5  0x00007fcb733e37ae in Method::jmethod_id() () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so
#6  0x00007fcb73461ca3 in nmethod::unlink() [clone .part.0] () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so
#7  0x00007fcb73524f8b in CodeCacheUnloadingTask::work(unsigned int) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so
#8  0x00007fcb72c39027 in G1ParallelCleaningTask::work(unsigned int) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so
#9  0x00007fcb739b0c90 in WorkerThread::run() () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so
#10 0x00007fcb73858070 in Thread::call_run() () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so
#11 0x00007fcb734eee43 in thread_native_entry(Thread*) () from /opt/mach5/mesos/work_dir/jib-master/install/jdk-20+24-1714/linux-x64-debug.jdk/jdk-20/fastdebug/lib/server/libjvm.so
#12 0x00007fcb746b9ea5 in start_thread () from /lib64/libpthread.so.0
#13 0x00007fcb741deb2d in clone () from /lib64/libc.so.6
----------------------------------------

;;;","2022-12-06 11:50;kbarrett;InstanceKlass::get_jmethod_id has a couple of places where it thinks it is single-threaded because it is either during bootstrapping or in a safepoint.  But as the stack from the core dump in the comment from 2022-11-14 shows, it is being called from G1ParallelCleaningTask.  So that single-threaded assumption looks to be wrong.

One of the places this can go wrong is in the call to get_jmethod_id_fetch_or_update, which has an out parameter for an array of jmethodID's that is to be deallocated.  I think what is happening is that two worker threads get that same array and both try to deallocate it.

Likely culprit is JDK-8290025: Remove the Sweeper.  Everything else in the relevant neighborhood looks to have been last changed 3+ years ago.
;;;","2022-12-07 09:05;coleenp;Yes, this looks like an accurate diagnosis.  In the core file, there are several threads doing CodeCacheUnloadingTask.;;;","2022-12-08 06:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11594
Date: 2022-12-08 14:22:15 +0000;;;","2022-12-09 04:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/10
Date: 2022-12-09 12:27:42 +0000;;;","2022-12-12 16:51;dukebot;Changeset: d4531903
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-12-13 00:49:16 +0000
URL:       https://git.openjdk.org/jdk20/commit/d4531903007dbe8dcdd163e423d23e8cefba61c8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix a typo in exception documentation,JDK-8296953,5087504,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prappo,prappo,prappo,2022-11-14 10:58,2022-11-28 14:45,2023-10-01 09:56,2022-11-16 01:22,20,,,,,,,20,core-svc,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z90z:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2022-11-14 11:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11140
Date: 2022-11-14 19:04:49 +0000;;;","2022-11-16 01:21;dukebot;Changeset: 97ab2c3e
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-11-16 09:18:14 +0000
URL:       https://git.openjdk.org/jdk/commit/97ab2c3ea61daa32ab51506fefa42d486121e089
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] AccessFlags should be specific to class file version,JDK-8296950,5087501,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2022-11-14 10:47,2023-02-13 07:09,2023-10-01 09:56,2023-02-13 07:09,,,,,,,,repo-valhalla,core-libs,,0,lw4,lworld,,,,,,,,,,,,,,,,,,,,"Some access flags apply only to class files with a range of class file versions.
The java.lang.AccessFlag class should return the AccessFlag corresponding to the actual accessflags that appear in the class file and depending on the class file version.
For example, Valhalla proposes to change the meaning of 0x0020 from ACC_SUPER to ACC_IDENTITY.  j.l.Class.accessFlags() should return the appropriate flags depending on the class file version.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297271,,,,,,,,,,,,,,,,,,,,JDK-8291360,JDK-8266670,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z90b:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2022-11-14 13:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/808
Date: 2022-11-14 21:12:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PublicMethodsTest is slow due to dependency verification with debug builds,JDK-8296945,5087494,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,jbechberger,jbechberger,2022-11-14 08:52,2022-12-07 02:13,2023-10-01 09:56,2022-11-20 23:42,17,19,20,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-yes,noreg-self,oracle-triage-20,starter,,,,,,,,,,,,,,,"The runtime of the PublicMethodsTest [1] increases from 24 to 58 seconds on our test system using a fastdebug variant of the OpenJDK. The increase is less pronounced for other tests.

We suspect that the problematic part of the change are the additions to the dependency checking in nmethods [2]: The flamegraphs created by the async-profilers shows clearly that the `nmethods::check_all_dependencies` method dominates the runtime of the program with a fastdebug build after the change.
The two flamegraphs are appended.

[1] https://github.com/openjdk/jdk/blob/master/test/jdk/java/lang/reflect/PublicMethods/PublicMethodsTest.java
[2] https://github.com/openjdk/jdk/commit/127bfe44f7d09f272a08f97bfc5d168eb22474a2#diff-2e8c9df3ee96f0ac67ca9ce82524c6132e5e9bbf828269cd81f160de15bc438fL551

The issue was brought up by Matthias Baesken.",,,,,,,,,,,JDK-8298263,JDK-8297483,JDK-8297568,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266074,,,,,,,,,"2022-11-14 08:52;jbechberger;after.html;https://bugs.openjdk.org/secure/attachment/101586/after.html","2022-11-14 08:52;jbechberger;before.html;https://bugs.openjdk.org/secure/attachment/101585/before.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z8yr:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-14 09:22;dcubed;Moving from hotspot/runtime to hotspot/compiler for initial triage
since JDK-8266074 Vtable-based CHA implementation is in
hotspot/compiler.;;;","2022-11-14 10:43;vlivanov;JDK-8266074 makes dependency verification more expensive (-XX:+VerifyDependencies, turned on by default in debug builds). The proper way to address it when it leads to test failures is either to explicitly disable verification (-XX:-VerifyDependencies) or increase timeout factor for a particular test. 
;;;","2022-11-14 15:54;vlivanov;The bug can be repurposed to speed up PublicMethodsTest (by specifying -XX:-VerifyDependencies) if it is desireable. 

Otherwise, there's not much to be done and the bug can be closed as WNF. ;;;","2022-11-15 00:45;thartmann;I agree with [~vlivanov]. Converting this to a test bug.

ILW = Test is slow due to dependency verification, single test but other tests might be affected as well, -XX:-VerifyDependencies = MML = P4;;;","2022-11-15 07:49;mbaesken;> The bug can be repurposed to speed up PublicMethodsTest 

We have a bad slowdown in fastdebug  also in various other tests because of  JDK-8266074 Vtable-based CHA implementation , not only PublicMethodsTest  .
Additionally I want to point out that on ppc64le , the  performance hit is even worse than on x86_64 ( 62s  vs. 187 s  / jdk17).

Is there potential to make these added checks faster? Or to make the checks more fine-granular  switchable ?
Completely switching off  the checks because of bad performance does not really sound like a great idea .;;;","2022-11-15 12:56;vlivanov;> Is there potential to make these added checks faster? Or to make the checks more fine-granular switchable?

The verification logic iterates over the whole code cache and ensures all dependencies are still valid. Probably, there are ways to speed it up, but only by omitting some nmethods/dependencies during the pass or checking them less often.

-XX:+VerifyDependencies was already expensive, but not too expensive (at least, we perceived it as such) to have it turned on by default. Probably, it's time to reconsider that decision and switch it off in debug builds on platforms where the overhead is prohibitive.;;;","2022-11-16 07:33;mbaesken;Would it be okay to set ""-XX:-VerifyDependencies""  for this test , like it has been done here already:
https://github.com/openjdk/jdk/commit/6843576c95a70bffad95df278d5f5be29371bca4
?
Or is there anything specific about PublicMethodsTest  that we want to run it ""at all costs"" with the deps verification enabled ?

Ideas about speeding up checking, or making it switchable in a more fine granular way probably need some more time.;;;","2022-11-16 22:39;thartmann;I think that's reasonable.;;;","2022-11-18 01:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11234
Date: 2022-11-18 09:19:26 +0000;;;","2022-11-20 23:42;dukebot;Changeset: bcc6b12b
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-11-21 07:41:11 +0000
URL:       https://git.openjdk.org/jdk/commit/bcc6b12b711a9c5007d963123fb38a7e72aaf8e5
;;;","2022-11-21 07:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/911
Date: 2022-11-21 15:14:18 +0000;;;","2022-11-22 00:27;mbaesken;jdk17 backport request
I would like to have the patch also in jdk17u-dev, because the issue has been observed there. The patch applies cleanly and is low risk.;;;","2022-11-22 03:06;clanger;Fix Request (19u)
Same reasoning as for 17u. Testfix that applies cleanly.;;;","2022-11-22 03:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/80
Date: 2022-11-22 11:05:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,
sun/net/www/http/HttpClient/MultiThreadTest Failing after KeepAliveCache Backport,JDK-8296943,5087491,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rwallace,rwallace,rwallace,2022-11-14 07:15,2023-07-12 00:53,2023-10-01 09:56,2022-11-15 05:52,11.0.19-oracle,,,,,,,11.0.19-oracle,tools,,0,11bpr-critical-approved,,,,,,,,,,,,,,,,,,,,,"blocked threads with KeepAliveCache.get backport (https://bugs.openjdk.org/browse/JDK-8296117)
Is causing MultiThreadTest to fail with the following error:
https://mach5.us.oracle.com/mdash/builds/jdk-11.0.19+1-39/results?search=status%3Afailed%20AND%20-state%3Ainvalid
worker: 7: Shutdown
worker: 1: Shutdown
worker: 5: Shutdown
worker: 3: Shutdown
worker: 6: Shutdown
worker: 7 end - PT15.02540052S
worker: 5 end - PT15.02718247S
worker: 3 end - PT15.0562644S
worker: 6 end - PT15.02719008S
worker: 1 end - PT15.0570011S
----------System.err:(44/2698)----------
java.lang.RuntimeException: Expected 5 connections: used 8
	at MultiThreadTest.main(MultiThreadTest.java:161)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:834)
JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test
JavaTest Message: Problem cleaning up the following threads:
Thread-19
  at java.base@11.0.19-ea/java.net.SocketInputStream.socketRead0(Native Method)
  at java.base@11.0.19-ea/java.net.SocketInputStream.socketRead(SocketInputStream.java:115)
  at java.base@11.0.19-ea/java.net.SocketInputStream.read(SocketInputStream.java:168)
  at java.base@11.0.19-ea/java.net.SocketInputStream.read(SocketInputStream.java:140)
  at java.base@11.0.19-ea/java.io.BufferedInputStream.fill(BufferedInputStream.java:252)
  at java.base@11.0.19-ea/java.io.BufferedInputStream.read(BufferedInputStream.java:271)
  at Worker.readUntil(MultiThreadTest.java:272)
  at Worker.run(MultiThreadTest.java:304)
Thread-21
  at java.base@11.0.19-ea/java.net.SocketInputStream.socketRead0(Native Method)
  at java.base@11.0.19-ea/java.net.SocketInputStream.socketRead(SocketInputStream.java:115)
  at java.base@11.0.19-ea/java.net.SocketInputStream.read(SocketInputStream.java:168)
  at java.base@11.0.19-ea/java.net.SocketInputStream.read(SocketInputStream.java:140)
  at java.base@11.0.19-ea/java.io.BufferedInputStream.fill(BufferedInputStream.java:252)
  at java.base@11.0.19-ea/java.io.BufferedInputStream.read(BufferedInputStream.java:271)
  at Worker.readUntil(MultiThreadTest.java:272)
  at Worker.run(MultiThreadTest.java:304)
Thread-23
  at java.base@11.0.19-ea/java.net.SocketInputStream.socketRead0(Native Method)
  at java.base@11.0.19-ea/java.net.SocketInputStream.socketRead(SocketInputStream.java:115)
  at java.base@11.0.19-ea/java.net.SocketInputStream.read(SocketInputStream.java:168)
  at java.base@11.0.19-ea/java.net.SocketInputStream.read(SocketInputStream.java:140)
  at java.base@11.0.19-ea/java.io.BufferedInputStream.fill(BufferedInputStream.java:252)
  at java.base@11.0.19-ea/java.io.BufferedInputStream.read(BufferedInputStream.java:271)
  at Worker.readUntil(MultiThreadTest.java:272)
  at Worker.run(MultiThreadTest.java:304)
result: Error. Error while cleaning up threads after test
test result: Error. Error while cleaning up threads after test",,,,,,,,,,,JDK-8297064,JDK-8299603,,,,,,,,,,,,,,,,,,JDK-8293562,,,,,,,,,,,,JDK-8302732,,,,,,,,,,,JDK-8223783,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z8y3:",9223372036854775807,b01,,,,,,,,,,,,"2023-07-12 00:53;goetz;[11u]
We never saw this in our internal testing. We only saw 8223783 (one extra connection) once on 20.5.22.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Arrays.asList() can return a List that throws undocumented ArrayStoreException,JDK-8296935,5087297,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smarks,webbuggrp,webbuggrp,2022-11-10 05:42,2023-05-04 03:29,2023-10-01 09:56,2023-04-28 12:46,11,17,18,19,20,8,,21,core-libs,,0,additional-information-received,dcsaw,noreg-doc,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
This issue also occurs on JDK 8, 11, 17 and 19.

A DESCRIPTION OF THE PROBLEM :
The javadoc for java.util.List.set(E) indicates that the method will throw a ClassCastException if the class of the specified element prevents it from being added to this list, but Lists returned by Arrays.asList(E...) throw an ArrayStoreException when trying to set an element with a wrong type, which is undocumented.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile and run the following code.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Throws ClassCastException
ACTUAL -
Throws ArrayStoreException

---------- BEGIN SOURCE ----------
public class Main {
    @SuppressWarnings({""rawtypes"", ""unchecked""})
    public static void main(String[] args) {
        List list = Arrays.asList(new String[1]);
        list.set(0, 0);
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307074,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-14 03:57;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/101580/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z7qz:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2022-11-14 03:58;tongwan;The observations on Windows 10:
JDK 8: Failed, ArrayStoreException thrown
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19: Failed.
JDK 20ea+23: Failed.;;;","2022-11-14 15:04;smarks;Because arrays are covariant, it's possible for an array store that is statically typesafe to throw an ArrayStoreException (ASE) at runtime. Consider:

    Object[] a = new String[1];
    a[0] = 1; // compiles without error or warning, throws ASE at runtime

Indirecting the array store through Arrays.asList() makes the problem a little worse, as the array variable's static type is propagated into the List's type argument -- the resulting List isn't ""really"" a List<Object>. Of course, the underlying fundamentals are the same.

    List<Object> list = Arrays.asList(a);
    list.set(0, 0); // compiles without error or warning, throws ASE at runtime

The question is whether it's worth documenting things like this. The Collection.toArray(T[]) method documents ArrayStoreException. In the java.util.Arrays class there are several methods that document ArrayStoreException:

    Arrays.copyOf(U[], int, Class<? extends T[]>)
    Arrays.copyOf(U[], int, int, Class<? extends T[]>)
    Arrays.fill(Object[], Object)
    Arrays.fill(Object[], int, int, Object)

However, there are also methods in java.util.Arrays that don't document ASE where it could be thrown immediately or in the future. These are generic methods where the type is taken from the array variable's static type that write or allow future writing to the array, or non-generic methods that take Object[] that write or allow future writing to the array.

    Arrays.asList() // as demonstrated here
    Arrays.copyOf(T[], int)
    Arrays.copyOfRange(T[], int, int)
    Arrays.parallelPrefix(T[], BinaryOperator<T>)
    Arrays.parallelPrefix(T[], int, int, BinaryOperator<T>)
    Arrays.setAll(T[], IntFunction<? extends T>)

All of these except Arrays.asList() operate only on arrays. It should already be
""well known"" that upcasting an array and then writing into it might result in an
ArrayStoreException being thrown. Using the various array manipulation APIs
on the Arrays class doesn't affect this. For completeness, though, it might make
sense to add ArrayStoreException to the Arrays utility methods that don't already
document it.

Arrays.asList() is a special case though. The static type of the array is carried over
to the List type parameter, and thereafter no array is in evidence. Therefore it might
be surprising that storing into such a List results in an ArrayStoreException.;;;","2022-11-14 20:13;pnarayanaswa;Additional Information from the submitter:
===============================
Thanks for your comment, but I do think it is worth documenting the behavior or even change the behavior to throw a ClassCastException.

There are other facilities in the Java Collection Framework that provides runtime type checking, such as EnumSet, Collections.checked{Collection, List, Map, Set, ...}, etc. When a wrong type element is inserted, these collections will throw a ClassCastException (as documented), but it surely compiles by using raw types or unchecked cast.

Lists returned by Arrays.asList also (de facto) provides runtime type checking, but it throws an unexpected exception (which I think it's a bug, not a feature).  It's a List, not an array, clients that deals with a List are not expected to handle type-safe failure by catching ClassCastException.  All methods in the Arrays class deal with arrays, so clients are expected to catch ArrayStoreException for type-safe failure.

P.S. Maybe I'm too late since Arrays.asList was introduced since Java 1.2. 
;;;","2023-01-22 19:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12135
Date: 2023-01-23 02:35:19 +0000;;;","2023-01-22 20:26;dholmes;Does ArrayList not have the same problem?

BTW any change in behaviour here would require a CSR request.;;;","2023-01-22 22:20;smarks;The main problem occurs only with Arrays.asList, as the backing array is provided by the caller. For reasons described above, its component type can differ from the List's static type. If this occurs, it can result in an ""unexpected"" ArrayStoreException. ArrayList doesn't have this problem, since ArrayList manages its own array, and it always has a component type of Object, so ArrayStoreException should never occur.

Yes, a behavior change would require a CSR. However, I'm opposed to changing the behavior at all here. This behavior has existed since 2004 (in Java SE 5.0 and the introduction of generics to collections). Actually it probably existed going all the way back to JDK 1.2 (1998) but it was less apparent because the resulting List had no type parameter that could disagree with the array's component type.

My inclination is to document this. I don't think it makes sense to go through every List API and add a possible ArrayStoreException, since this problem only occurs with a List obtained via Arrays.asList. Probably a brief explanation on Arrays.asList is all that's warranted. Also, possibly mention ArrayStoreException in the List class specification, where it discusses ineligible elements.

Of course, any such spec change would also require a CSR.;;;","2023-01-22 23:03;dholmes;[~smarks] are you envisaging an implNote to document this? It is a pity the mismatch between thrown and specified exceptions was never realized (test gap) but I agree the horse has bolted here and changing the behaviour at this stage would seem counter-productive. I don't think List needs to mention ASE as any List implementation using an array as backing store should either ensure ASE is not possible or else convert it to ClassCastException as per the spec. We are really acknowledging here that asList returns a List implementation that does not strictly conform to the List specification.;;;","2023-01-23 14:22;smarks;[~dholmes] I think it should be documented somehow, but I'm not exactly sure how at the moment. I believe the set of runtime exceptions that can be thrown in response to some operation is open-ended, and I don't believe it's reasonable to require or expect that every implementation shoehorn all possible exceptions into ClassCastException. For example, operations on a sublist can throw ConcurrentModificationException if the backing list has been modified independently of the sublist. I can imagine other implementations might throw other runtime exceptions under other circumstances. For example, Apache Commons Collections' PredicatedList will throw IllegalArgumentException if an element doesn't match the predicate that enforces constraints on the list's contents.;;;","2023-01-23 22:33;dholmes;The ClassCastException is only for elements of unsuitable type - for which the ArrayStoreException is incorrectly allowed to propagate. Not sure how things like ConcurrentModificatonException have any bearing on this specific issue. The minimalist apiNote currently in the PR seems quite adequate to me (naturally :) ) - it acknowledges the discrepancy in behaviour whilst not opening up a can of worms.;;;","2023-01-23 23:37;smarks;The point about ConcurrentModificationException is that it's not documented on every possible method where it can occur. Mostly it was an argument against modifying the specs of methods on the List interface, as suggested by the original submitter, and which was also done in an earlier version version of the PR.

Adding something to the spec of Arrays.asList() similar to what's in the PR right now seems more sensible. I'm still pondering whether it should be normative or informative (@apiNote is informative) and exactly what it should say.
;;;","2023-01-23 23:56;smarks;Methods that can write to a List returned by Arrays.asList that can possibly throw ArrayStoreException:

List.set
List.replaceAll
ListIterator.set
Collections.copy
Collections.fill
Collections.replaceAll
;;;","2023-01-24 00:29;forax;And given that Collection.toArray(T[]) already document ArrayStoreException, i believe all those methods should document it as well.

And when specialized generics will land, there will get more CCE and ASE because the underlying arrays will be specialized while casting an ArrayList<Complex> to an ArrayList<?> to an ArrayList<Object> will still be legal (with an unsafe warning).
;;;","2023-01-24 09:39;smarks;Note that the interface declaration is Collection<E> and the toArray() declaration is

    <T> T[] toArray(T[] a)

which means that there is no type constraint on T relative to E. Thus it's possible for the caller to pass in an array of any component type unrelated to E, and suffer ArrayStoreException as a result. This can happen with any collection, and is a different situation that what occurs with Arrays.asList. I don't think it's necessary or appropriate to add ASE to all of these methods because of this particular phenomenon that can occur with Arrays.asList.;;;","2023-01-30 13:45;smarks;I'd recommend the following text be added to the @apiNote that's currently part of the Arrays.asList specification. I'm recommending this be part of the @apiNote because this phenomenon arises because of the interaction between the generics in the API and the covariance of arrays in the language.

-----

It is possible for the type parameter T of the returned list to differ from the array's component type. This can occur, for example, if the array argument type has been upcast from its component type:

    String[] strings = ... 
    List<Object> objects = Arrays.asList((Object[]) strings);

Writing an element into the returned list may result in an ArrayStoreException being thrown if the element is incompatible with the underlying array's component type.

-----
;;;","2023-04-27 11:33;smarks;Instead of having a big explanation in an API Note, I now think it's better to have a brief normative statement in the specification that describes the possibility of ArrayStoreException being thrown.;;;","2023-04-27 11:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13698
Date: 2023-04-27 18:36:53 +0000;;;","2023-04-28 12:46;dukebot;Changeset: da9efee1
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2023-04-28 19:45:29 +0000
URL:       https://git.openjdk.org/jdk/commit/da9efee1c25f76f80fee9065680e7d75d03c7178
;;;",,,,,,,,,,,,,,,,,,
Fix failing string table test after log changes,JDK-8296928,5087475,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sjohanss,sjohanss,sjohanss,2022-11-14 02:04,2022-11-14 02:12,2023-10-01 09:56,2022-11-14 02:12,repo-genzgc,,,,,,,repo-genzgc,hotspot,,0,genzgc,zgc,,,,,,,,,,,,,,,,,,,,A string table test fails after ZGC log-changes. Test needs to be update to work correctly with the new log-messages.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z8uj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-14 02:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/zgc/pull/9
Date: 2022-11-14 09:44:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(is_valid_AArch64_address(dest.target())) failed: bad address,JDK-8296924,5086172,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,webbuggrp,webbuggrp,2022-10-26 02:50,2023-01-17 08:00,2023-10-01 09:56,2022-11-29 22:41,11,17,19,20,21,,,20,hotspot,,0,c2,dcsswa,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
MacOS 12 Monterey on M1, OpenJDK 17.0.5, but it's also reproducible on the latest build from the jdk17u project.


A DESCRIPTION OF THE PROBLEM :
JVM crash at JIT. Regular build crash on this line: https://github.com/corretto/corretto-17/blob/develop/src/hotspot/cpu/aarch64/assembler_aarch64.hpp#L248 Thus I was assuming it was another manifestation of https://bugs.openjdk.org/browse/JDK-8280476


I compiled my own slowdebug build, based on jdk17u, revision 120bf27fd1a3916199bb6ff903ba741f913ec4ed
and it's crashing on an assert even before this. See the attached hs_err files

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Clone https://github.com/questdb/questdb
2. Run mvn clean test on JDK 17u, on MacOS with M1 CPU

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
no crash
ACTUAL -
JVM crash

FREQUENCY : always


# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/scratch/tohartma/8296924/jdk/open/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:4584), pid=1102669, tid=1102682
#  assert(is_valid_AArch64_address(dest.target())) failed: bad address
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-11-16-1350559.tohartma...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-11-16-1350559.tohartma..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x1334210]  MacroAssembler::adrp(Register, Address const&, unsigned long&)+0x1b0

Current CompileTask:
C2:   2499  186    b  4       io.questdb.griffin.engine.table.LongTreeSet::put (117 bytes)

Stack: [0x0000fffe23c00000,0x0000fffe23e00000],  sp=0x0000fffe23dfa570,  free space=2025k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1334210]  MacroAssembler::adrp(Register, Address const&, unsigned long&)+0x1b0  (macroAssembler_aarch64.cpp:4584)
V  [libjvm.so+0x32094c]  loadConPNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x22c  (aarch64.ad:3384)
V  [libjvm.so+0x151294c]  PhaseOutput::scratch_emit_size(Node const*)+0x2f8  (output.cpp:3349)
V  [libjvm.so+0x1509fe4]  PhaseOutput::shorten_branches(unsigned int*)+0x2c4  (output.cpp:644)
V  [libjvm.so+0x151ccb8]  PhaseOutput::Output()+0xbc8  (output.cpp:445)
V  [libjvm.so+0x99c39c]  Compile::Code_Gen()+0x3fc  (compile.cpp:3001)
V  [libjvm.so+0x9a07f8]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1284  (compile.cpp:864)
V  [libjvm.so+0x7be468]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1b4  (c2compiler.cpp:113)
V  [libjvm.so+0x9ad1c4]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa14  (compileBroker.cpp:2237)
V  [libjvm.so+0x9ada3c]  CompileBroker::compiler_thread_loop()+0x3bc  (compileBroker.cpp:1916)
V  [libjvm.so+0xed1c90]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:699)
V  [libjvm.so+0x17e21a8]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x14f1ab4]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:710)
C  [libpthread.so.0+0x7908]  start_thread+0x188


# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (assembler_aarch64.hpp:232), pid=1103668, tid=1103680
#  guarantee(val < (1ULL << nbits)) failed: Field too big for insn

Current CompileTask:
C2:    860   57    b        Test::test (17 bytes)

Stack: [0x0000fffeb43f0000,0x0000fffeb45f0000],  sp=0x0000fffeb45eb300,  free space=2028k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc49080]  VMError::report_and_die(int, char const*, char const*, std::__va_list, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x138
V  [libjvm.so+0xc49d18]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, std::__va_list)+0x50
V  [libjvm.so+0x5177fc]  report_vm_error(char const*, int, char const*, char const*, ...)+0xec
V  [libjvm.so+0x96d204]  Assembler::movk(RegisterImpl*, unsigned int, unsigned int)+0xc4
V  [libjvm.so+0x960828]  MacroAssembler::adrp(RegisterImpl*, Address const&, unsigned long&)+0xd0
V  [libjvm.so+0x243d44]  loadConPNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0xc4
V  [libjvm.so+0x4b0f10]  Compile::scratch_emit_size(Node const*)+0x1b8
V  [libjvm.so+0xa63454]  Compile::shorten_branches(unsigned int*, int&, int&, int&)+0x234
V  [libjvm.so+0xa668e4]  Compile::init_buffer(unsigned int*)+0x17c
V  [libjvm.so+0xa6b480]  Compile::Output()+0x358
V  [libjvm.so+0x4babec]  Compile::Code_Gen()+0x3bc
V  [libjvm.so+0x4bda5c]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x9fc
V  [libjvm.so+0x3d30dc]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0xbc
V  [libjvm.so+0x4c7610]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x2e8
V  [libjvm.so+0x4c8aa8]  CompileBroker::compiler_thread_loop()+0x4f0
V  [libjvm.so+0xbe6584]  JavaThread::thread_main_inner()+0xdc
V  [libjvm.so+0xbe4294]  Thread::call_run()+0x94
V  [libjvm.so+0xa538d4]  thread_native_entry(Thread*)+0xec
C  [libpthread.so.0+0x7908]  start_thread+0x188",,,,,,,,,,,JDK-8298832,JDK-8300278,JDK-8299770,JDK-8298838,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-16 06:35;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/101638/Test.java","2022-11-15 07:14;chagedorn;replay.log;https://bugs.openjdk.org/secure/attachment/101613/replay.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2z1dn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-14 00:47;sswsharm;Issue is not reproduced.
No crash was observed.

OS: Mac OS Monterey 12.5 (intel-core i7)
Apache maven 3.8.6
JDK 17.0.5 : Pass

Issue is reported on Mac M1, moving it to dev team for further analysis;;;","2022-11-15 07:15;chagedorn;Could reproduce it with lastest JDK on Linux AArch64 with the given steps by the reporter. The crash is reproducible with the attached replay file replay.log and class files found in classfiles.zip (http://cr.openjdk.java.net/~chagedorn/reproduce/8296924/classfiles.zip):

$ java -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=replay.log;;;","2022-11-15 07:56;chagedorn;ILW = C2 assertion in code generation on AArch64, observed only with reported test, use -XX:-SplitIfBlocks = HLM = P3;;;","2022-11-16 06:05;thartmann;The problematic address is:

(gdb) p dest._target
$2 = (address) 0xffffffffffffffff

 760  ConP  === 0  [[ 757 ]]  #0xffffffffffffffff
 757  Phi  === 577 487 760  [[ 751 ]]  #rawptr:BotPTR !orig=[753],[585],[508] !jvms: AbstractRedBlackTree::allocateBlock @ bci:24 (line 183) LongTreeSet::put @ bci:73 (line 64)
 751  Phi  === 278 487 757  [[ 588 ]]  #rawptr:BotPTR !orig=[585],[508] !jvms: MemoryPages::addressOf @ bci:1 (line 54) MemoryPages::allocate @ bci:6 (line 58) AbstractRedBlackTree::allocateBlock @ bci:9 (line 181) LongTreeSet::put @ bci:73 (line 64)
 588  AddP  === _ 1 751 269  [[ 587 ]]  !orig=485 !jvms: MemoryPages::addressOf @ bci:6 (line 54) MemoryPages::allocate @ bci:6 (line 58) AbstractRedBlackTree::allocateBlock @ bci:9 (line 181) LongTreeSet::put @ bci:73 (line 64);;;","2022-11-16 06:38;thartmann;The 0xffffffffffffffff address comes from an Unsafe access:
https://github.com/questdb/questdb/blob/ff3f706e271362f94ae90d8fb0c407903b58b23c/core/src/main/java/io/questdb/griffin/engine/AbstractRedBlackTree.java#L134

It's split through Phis until it ends up with a constant -1 address:
  65  ConL  === 0  [[ 375 122 61 130 374 186 413 111 569 410 433 352 62 583 541 537 210 454 517 406 507 536 531 505 490 475 162 398 467 109 368 183 519 389 150 161 ]]  #long:-1 !jvms: LongTreeSet::put @ bci:23 (line 52)
 161  Phi  === 248 249 65  [[ 90 81 525 81 213 256 256 183 352 523 458 510 ]]  #long !jvms: Unsafe::getLong @ bci:4 (line 365) AbstractRedBlackTree::refOf @ bci:22 (line 134) LongTreeSet::put @ bci:27 (line 53)
 537  Phi  === 528 545 65  [[ 525 ]]  #long !jvms: MemoryPages::allocateOffset @ bci:26 (line 63) MemoryPages::allocate @ bci:3 (line 58) AbstractRedBlackTree::allocateBlock @ bci:9 (line 181) LongTreeSet::put @ bci:73 (line 64)
 209  Region  === 209 278 279  [[ 209 259 345 407 484 409 108 525 347 408 450 557 584 ]]  !jvms: AbstractRedBlackTree::leftOf @ bci:5 (line 122) LongTreeSet::put @ bci:40 (line 55)
 525  Phi  === 209 537 161  [[ 508 ]]  #long !jvms: MemoryPages::allocateOffset @ bci:25 (line 63) MemoryPages::allocate @ bci:3 (line 58) AbstractRedBlackTree::allocateBlock @ bci:9 (line 181) LongTreeSet::put @ bci:73 (line 64)
 508  CastX2P  === _ 525  [[ 485 ]]  !jvms: MemoryPages::allocateOffset @ bci:7 (line 62) MemoryPages::allocate @ bci:3 (line 58) AbstractRedBlackTree::allocateBlock @ bci:9 (line 181) LongTreeSet::put @ bci:73 (line 64)

I attached a simple Test.java that reproduces the issue:
java -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,Test::test -XX:-TieredCompilation -XX:+PrintIdeal -Xcomp Test.java;;;","2022-11-17 00:32;thartmann;Setting fixVersion to JDK 21 for now because this is an old issue.;;;","2022-11-17 00:36;thartmann;So the problem is that loadConP -> aarch64_enc_mov_p -> MacroAssembler::adrp assumes that we can only ever load constants pointers that are within the 48-bit AArch64 address space but that's not guaranteed. I'm not too familiar with the related code, so I'm leaving this to the aarch64 experts to fix.

[~aph], would you have time to look at this?;;;","2022-11-17 01:56;aph;Yes, it looks like movP does indeed assume that it's a valid address.

I think all we need is this:

--- a/src/hotspot/cpu/aarch64/aarch64.ad
+++ b/src/hotspot/cpu/aarch64/aarch64.ad
@@ -3377,7 +3377,8 @@ encode %{
         __ mov_metadata(dst_reg, (Metadata*)con);
       } else {
         assert(rtype == relocInfo::none, ""unexpected reloc type"");
-        if (con < (address)(uintptr_t)os::vm_page_size()) {
+        if (! is_valid_AArch64_address(con)
+            || con < (address)(uintptr_t)os::vm_page_size()) {
           __ mov(dst_reg, con);
         } else {
           uint64_t offset;
;;;","2022-11-17 05:28;thartmann;Makes sense, thanks Andrew. Feel free to assign back to me in case you don't have time to prepare this for review.;;;","2022-11-17 12:25;aph;Thank you. JEP 429 has to be my priority right now. I'm pretty sure this is right.;;;","2022-11-20 22:56;thartmann;Thanks Andrew, I'll take care of it.;;;","2022-11-29 04:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11412
Date: 2022-11-29 11:55:51 +0000;;;","2022-11-29 22:41;dukebot;Changeset: abe532a8
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-11-30 06:39:27 +0000
URL:       https://git.openjdk.org/jdk/commit/abe532a89cbdd2b959789611cecbad7c94f6a870
;;;","2023-01-04 03:07;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Low risk, small change aarch only.
Clean backport.
SAP nightly testing passed. Test passes on aarch;;;","2023-01-04 03:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1034
Date: 2023-01-04 11:13:56 +0000;;;","2023-01-16 06:16;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Low risk, small change aarch only.
Clean backport. 
Test passes on aarch. SAP nightly testing passed.;;;","2023-01-16 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1660
Date: 2023-01-16 14:16:13 +0000;;;",,,,,,,,,,,,,,,,,,
"JFR: jfr --version should return System.getProperty(""java version"")",JDK-8296923,5087470,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-11-14 00:25,2022-12-13 02:52,2023-10-01 09:56,2022-11-14 17:18,,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"Today the jfr tool returns ""1.0"" as version:

$ jfr --version
1.0

It would be more appropriate to return the System.getProperty(""java version"") like jlink, jdeps and many other JDK tools.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298533,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z8tf:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-11-14 02:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11132
Date: 2022-11-14 08:28:44 +0000;;;","2022-11-14 17:18;dukebot;Changeset: 873eccde
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-11-15 01:17:02 +0000
URL:       https://git.openjdk.org/jdk/commit/873eccde01895de06e2216f6838d52d07188addd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression Test DialogOrient.java fails on MacOS,JDK-8296920,5087467,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,mbollapragad,mbollapragad,2022-11-13 23:43,2023-06-12 20:46,2023-10-01 09:56,2023-06-05 02:16,11.0.13-oracle,17.0.1,18,19,20,8u311,,21,client-libs,,0,11-bp,17-bp,8-bp,imt,macos,regression,regression_8262731,sn_144,sn_145,sqebug,sqe-manual,,,,,,,,,,,"The Regression Test java/awt/print/Dialog/DialogOrient.java which checks  setting PageFormat Orientation functionality fails on MacOS 
Product Tested : JDK 19.0.2+4
Platform Tested : MacOS13 (x64)
Is it regression: No

On MacOS 13 with JDK 19.0.2+4  FAILED 
                 JDK 19.0.1+10 FAILED
on MacOS 12  with JDK 17.0.6+5 Failed. (Same exception is observed)
                  JDK 17.0.5+9 Failed.
                  JDK 11.0.18+5 Failed.
		 JDK 11.0.17+10 Failed.

The error observed in the log 
----------System.err:(23/2001)----------
objc[742]: Class CustomPageSizeNumberFormatter is implemented in both /System/Library/PrivateFrameworks/PrintingPrivate.framework/Versions/A/Plugins/PrintingUI.bundle/Contents/MacOS/PrintingUI (0x1ad4fc8f8) and /System/Library/PrivateFrameworks/PrintingPrivate.framework/Versions/A/Plugins/PrintingCocoaPDEs.bundle/Contents/MacOS/PrintingCocoaPDEs (0x1b05eac78). One of the two will be used. Which one is undefined.
objc[742]: Class PMMediaName is implemented in both /System/Library/PrivateFrameworks/PrintingPrivate.framework/Versions/A/Plugins/PrintingUI.bundle/Contents/MacOS/PrintingUI (0x1ad4fc448) and /System/Library/PrivateFrameworks/PrintingPrivate.framework/Versions/A/Plugins/PrintingCocoaPDEs.bundle/Contents/MacOS/PrintingCocoaPDEs (0x1b05eb678). One of the two will be used. Which one is undefined.
java.awt.print.PrinterException
	at java.desktop/sun.lwawt.macosx.CPrinterJob.print(CPrinterJob.java:393)
	at java.desktop/sun.print.RasterPrinterJob.print(RasterPrinterJob.java:1487)
	at DialogOrient.init(DialogOrient.java:76)
	at DialogOrient.main(DialogOrient.java:131)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1589)
Caused by: java.lang.RuntimeException: Wrong Orientation
	at DialogOrient.print(DialogOrient.java:87)
	at java.desktop/sun.lwawt.macosx.CPrinterJob$6.run(CPrinterJob.java:806)
	at java.desktop/sun.lwawt.macosx.CPrinterJob.printAndGetPageFormatArea(CPrinterJob.java:825)
	at java.desktop/sun.lwawt.macosx.CPrinterJob.printLoop(Native Method)
	at java.desktop/sun.lwawt.macosx.CPrinterJob.print(CPrinterJob.java:367)
	... 7 more

JavaTest Message: Test threw exception: java.awt.print.PrinterException
JavaTest Message: shutting down test",,,,,,,,,,,JDK-8309721,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,b02,18,,,,,,,,"0|i2z8sr:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-01-18 09:15;vdyakov;awt/print is a part of 2D (printing part);;;","2023-05-12 01:18;psadhukhan;In macOS 12.6.3 M1, I am not getting the above exception, rather I am getting below exception starting from jdk18 b02

Exception in thread ""main"" java.awt.print.PrinterException
	at java.desktop/sun.lwawt.macosx.CPrinterJob.print(CPrinterJob.java:393)
	at java.desktop/sun.print.RasterPrinterJob.print(RasterPrinterJob.java:1487)
	at DialogOrient.init(DialogOrient.java:76)
	at DialogOrient.main(DialogOrient.java:131)
Caused by: java.lang.RuntimeException: Wrong Orientation
	at DialogOrient.print(DialogOrient.java:87)
	at java.desktop/sun.lwawt.macosx.CPrinterJob$6.run(CPrinterJob.java:806)
	at java.desktop/sun.lwawt.macosx.CPrinterJob.printAndGetPageFormatArea(CPrinterJob.java:825)
	at java.desktop/sun.lwawt.macosx.CPrinterJob.printLoop(Native Method)
	at java.desktop/sun.lwawt.macosx.CPrinterJob.print(CPrinterJob.java:367)
	... 3 more

It seems LandScape orientation is not honoured so test is failing as it expects Landscape after switching from Portrait..;;;","2023-05-12 02:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13950
Date: 2023-05-12 09:03:07 +0000;;;","2023-06-05 02:16;dukebot;Changeset: 8c9d21e5
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-06-05 09:15:13 +0000
URL:       https://git.openjdk.org/jdk/commit/8c9d21e5193cd20585eae0636337a78bc9d89f60
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make system tests that detect memory leaks more robust by using JMemoryBuddy utility,JDK-8296919,5087465,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lkostyra,aghaisas,aghaisas,2022-11-13 22:54,2023-05-23 11:09,2023-10-01 09:56,2023-05-08 08:24,jfx20,,,,,,,jfx21,javafx,,0,noreg-self,sn_131,sn_142,test_sprint,testbug,,,,,,,,,,,,,,,,,"Some of the system tests check the memory leak using a loop and multiple calls to System.gc() method. These tests can be made more robust by using JMemoryBuddy utility.
E.g.
TabPaneHeaderLeakTest
AccordionTitlePaneLeakTest
ShapeViewOrderLeakTest
SwingNodeMemoryLeakTest
SwingNodeDnDMemoryLeakTest



For reference - systems test that already use JMemoryBuddy utility:
-----------------------------------------------------------------------------------------
ViewPainterLeakTest
PlatformStartupMemoryLeakTest
VirtualFlowMemoryLeakTest
StyleMemoryLeakTest
InitialNodesMemoryLeakTest
ProgressIndicatorLeakTest
",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8206430,,,,,,,,JDK-8196614,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-17 04:33;aghaisas;preliminaryPatch.txt;https://bugs.openjdk.org/secure/attachment/101657/preliminaryPatch.txt",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z8sb:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-11-14 14:15;kcr;Here are two more tests in the web module that are good candidates for this as well:

test.javafx.scene.web.EventListenerLeakTest
test.javafx.scene.web.LeakTest

The latter recently (within the last few days) failed on my system while I was doing a full test run:

LeakTest > testDOMNodeDisposeCount FAILED
    java.lang.AssertionError: NodeImpl HashCount after dispose expected:<2> but was:<4>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:647)
        at test.javafx.scene.web.LeakTest.testDOMNodeDisposeCount(LeakTest.java:254)

LeakTest > testJSObjectDisposeCount FAILED
    java.lang.AssertionError: All JSObjects are disposed
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.assertTrue(Assert.java:42)
        at test.javafx.scene.web.LeakTest.testJSObjectDisposeCount(LeakTest.java:171);;;","2022-11-17 04:32;aghaisas;All system tests that check for memory leak are modified to use JMemoryBuddy utility.
I am attaching a preliminary patch.

As Issue: https://bugs.openjdk.org/browse/JDK-8206430 is under review, I shall start the PR once that fix gets integrated.;;;","2022-11-19 04:56;kcr;Here is another system test that I remembered while doing a test run yesterday. It didn't fail for me this time, but has in the past:

test/robot/javafx/web/TooltipFXTest.java

I recommend 'grep'ing all of tests/system for uses of System.gc() or WeakReference looking for any others that might have been missed.;;;","2023-04-26 04:19;lkostyra;I restored the preliminary patch made by [~aghaisas] and made a few adjustments to it.

As for web tests which are potential candidates - JMemoryBuddy import is not visible from the perspective of these web tests.;;;","2023-04-26 05:12;kcr;Adding ""testImplementation project("":base"").sourceSets.test.output"" to the project dependencies in build.gradle will enable using JMemoryBuddy from web tests.;;;","2023-04-26 05:39;lkostyra;Thanks for the tip, I'll take a look into adding it in web tests then;;;","2023-05-01 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1121
Date: 2023-05-01 14:48:32 +0000;;;","2023-05-08 08:24;dukebot;Changeset: d9a82d10
Author:    Lukasz Kostyra <lkostyra@openjdk.org>
Committer: Andy Goryachev <angorya@openjdk.org>
Date:      2023-05-08 15:23:03 +0000
URL:       https://git.openjdk.org/jfx/commit/d9a82d103d60bc38b35ba94a21354c84a75bb22d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Correct enable preview idiom in JdbLastErrorTest.java,JDK-8296913,5087448,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-11-13 12:47,2022-11-28 14:44,2023-10-01 09:56,2022-11-15 10:25,20,,,,,,,20,core-svc,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292302,JDK-8296968,,,,,,,,,,JDK-8296149,JDK-8296786,CODETOOLS-7902654,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z8oj:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-11-14 10:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11139
Date: 2022-11-14 18:49:14 +0000;;;","2022-11-14 12:39;dcubed;Just a heads up that this other bug fix is changing the same test
so there are two different PRs out at the same time:
    JDK-8296786 Limit VM modes for com/sun/jdi/JdbLastErrorTest.java;;;","2022-11-15 10:25;dukebot;Changeset: 87530e66
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-11-15 18:22:00 +0000
URL:       https://git.openjdk.org/jdk/commit/87530e66dd3e0b7cd95e6576998a0567884c7985
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: CreateExNode::Identity fails with assert(i < _max) failed: oob: i=1, _max=1",JDK-8296912,5087446,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,dholmes,dholmes,2022-11-13 12:29,2023-02-08 08:10,2023-10-01 09:56,2022-11-16 23:52,11,17,19,20,,,,20,hotspot,,0,c2,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,tier8,,,,,,,,,,,,,,"Test: applications/javafuzzer/BigTest.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S137645/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/72a847c5-0dfa-463d-80ea-653cfc7b10d2/runs/9b5e7e00-47a5-4f25-807b-13a7d2e68fd7/workspace/open/src/hotspot/share/opto/node.hpp:391), pid=3845172, tid=3845191
#  assert(i < _max) failed: oob: i=1, _max=1
#
# JRE version: Java(TM) SE Runtime Environment (20.0+24) (fastdebug build 20-ea+24-1716)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+24-1716, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x95f703]  Node::in(unsigned int) const [clone .constprop.1]+0x43
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /tmp/fuzzer.tmp.v4XtScQSMB/core.3845172)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:+StressCCP -XX:StressSeed=2110910222 -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S95112/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b2e63de8-ca02-4fe5-b102-74b605ca0976/runs/3842a7e9-919c-431f-9cc9-bdf4450d8cf5/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_BigTest_java/tmp Test

Host: AMD EPYC 7742 64-Core Processor, 12 cores, 23G, Oracle Linux Server release 8.6
Time: Sun Nov 13 01:06:49 2022 UTC elapsed time: 0.854743 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007fd66833c870):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=3845191, stack(0x00007fd658e61000,0x00007fd658f62000)]


Current CompileTask:
C2:    854    9    b        Test::vMeth (290 bytes)

Stack: [0x00007fd658e61000,0x00007fd658f62000],  sp=0x00007fd658f5c620,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x95f703]  Node::in(unsigned int) const [clone .constprop.1]+0x43  (node.hpp:391)
V  [libjvm.so+0x96c148]  CreateExNode::Identity(PhaseGVN*)+0x1e8  (cfgnode.cpp:2785)
V  [libjvm.so+0x17a025a]  PhaseIterGVN::transform_old(Node*)+0x2da  (phaseX.cpp:1322)
V  [libjvm.so+0x179849e]  PhaseIterGVN::optimize()+0x6e  (phaseX.cpp:1203)
V  [libjvm.so+0xafd1c2]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x6e2  (loopnode.hpp:1166)
V  [libjvm.so+0xaf9265]  Compile::Optimize()+0xfc5  (compile.cpp:2381)
V  [libjvm.so+0xafb3fd]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15ed  (compile.cpp:831)
V  [libjvm.so+0x90bb27]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7  (c2compiler.cpp:113)
V  [libjvm.so+0xb083ec]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xb091d8]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x107c576]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:699)
V  [libjvm.so+0x1a7e0d0]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1714e43]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:710)",,,,,,,,,,,JDK-8302078,JDK-8298842,JDK-8298833,JDK-8299818,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284358,,,,,,,,,"2022-11-15 03:51;thartmann;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/101610/FuzzerUtils.java","2022-11-15 03:46;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/101609/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2z8o3:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-15 03:50;thartmann;To reproduce, run attached Test.java with ""-XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:+StressCCP -XX:StressSeed=2110910222 -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet"".;;;","2022-11-15 04:34;thartmann;Looks like this was introduced/triggered by JDK-8284358.;;;","2022-11-15 04:41;thartmann;ILW = Assert during C2 compilation, reproducible with generated test and stress flags, no known workaround but disable compilation of affected method = HLM = P3;;;","2022-11-16 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11181
Date: 2022-11-16 12:00:34 +0000;;;","2022-11-16 23:52;dukebot;Changeset: 502fa3ee
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-11-17 07:39:57 +0000
URL:       https://git.openjdk.org/jdk/commit/502fa3eeea849cfcc50436602be1654695ef4e26
;;;","2023-01-04 01:43;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Very simple C2 fix. Low risk.
Clean backport.
Test passes, but also without the fix. SAP nightly testing passed.;;;","2023-01-04 02:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1029
Date: 2023-01-04 10:18:08 +0000;;;","2023-01-16 03:07;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Very simple C2 fix. Low risk.
Clean backport.
Test passes, but also without the fix. SAP nightly testing passes.;;;","2023-01-16 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1657
Date: 2023-01-16 11:06:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
VMError::controlled_crash crashes with wrong code and address,JDK-8296906,5087433,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-11-12 01:35,2022-11-28 14:52,2023-10-01 09:56,2022-11-16 23:09,20,,,,,,,20,hotspot,,0,hs_err,,,,,,,,,,,,,,,,,,,,,"The point of VMError::controlled_crash(14) is to crash with a SEGV mapping error and a well known code/address to regression-test error handling.

However, at least on Linux x64 I see SEGV with SI_KERNEL and si_addr=0. We don't have tests for that, so we never noticed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297184,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z8l7:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-12 01:38;stuefe;Simply changing VMError::segfault_address to a different address should do the trick. SI_KERNEL means we crash outside the possible address range for user space memory. A good candidate for a non-zero ""valid"" invalid address would be a very low address, like a crash we would get when dereferencing this=NULL. This should work on all platforms but AIX, which has a readable NULL page. But there, we can just keep the old pattern.;;;","2022-11-13 12:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11122
Date: 2022-11-13 09:01:09 +0000;;;","2022-11-16 23:09;dukebot;Changeset: b9d6e83e
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-11-17 07:08:14 +0000
URL:       https://git.openjdk.org/jdk/commit/b9d6e83e9bc8c37780f6af0f6135cda72ce3c1b2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not create unsigned certificate and CRL,JDK-8296901,5087410,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-11-11 09:37,2022-11-28 14:56,2023-10-01 09:56,2022-11-17 18:22,,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,"Currently, an X509CertImpl or X509CRLImpl can be unsigned. No such object should exist.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296072,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z8g3:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-11-14 16:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11151
Date: 2022-11-15 00:35:31 +0000;;;","2022-11-17 18:23;dukebot;Changeset: ab6b7ef9
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-11-18 02:21:03 +0000
URL:       https://git.openjdk.org/jdk/commit/ab6b7ef98800bee5e87e39a616af642874eb154a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CertificateValidity fields are not optional,JDK-8296900,5087409,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-11-11 09:35,2022-11-28 14:43,2023-10-01 09:56,2022-11-14 11:48,,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,"When a CertificateValidity object is created with 2 Date objects, they cannot be null.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296072,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z8fv:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-11-13 13:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11126
Date: 2022-11-13 21:32:48 +0000;;;","2022-11-14 11:48;dukebot;Changeset: a7c2338a
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-11-14 19:46:43 +0000
URL:       https://git.openjdk.org/jdk/commit/a7c2338a6d71bdbbceee9ad7481badc76456fadf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Race condition when cancelling a request,JDK-8296889,5087395,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dfuchs,dfuchs,2022-11-11 06:41,2023-02-01 07:41,2023-10-01 09:56,2022-11-15 10:39,20,,,,,,,20,core-libs,,0,httpclient,regression,,,,,,,,,,,,,,,,,,,,There is a small race condition in the code that unregisters the request BodySubscriber when a request is cancelled: if the request cancellation happens after the body subscriber is registered but before it is subscribed it may not be unregistered. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298340,JDK-8297149,JDK-8297075,,,,,,,,,JDK-8277969,JDK-8294916,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z8cr:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-11-11 07:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11110
Date: 2022-11-11 15:18:08 +0000;;;","2022-11-15 10:39;dukebot;Changeset: 7357a1a3
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-11-15 18:36:45 +0000
URL:       https://git.openjdk.org/jdk/commit/7357a1a379ed79c6754a8093eb108cd82062880a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Document Filter attached to JPasswordField and setText("""") is not cleared instead inserted characters replaced with unicode null characters",JDK-8296878,5086998,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,webbuggrp,webbuggrp,2022-11-08 03:10,2023-03-27 20:17,2023-10-01 09:56,2022-11-29 19:23,11.0.11,17,19,20,8u291,,,20,client-libs,,0,11-bp,17-bp,dcspn,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,regression,reproducer-yes,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
To clear a JPasswordField you're supposed to do setText(""""). In versions before 11.0.11 this would work if that field had a document filter attached to it, but since 11.0.11 this does not work anymore, and instead the currently inserted characters will be replaced with unicode null characters instead. 
Visually and functionally this means the passwordfield is not empty.

Tested versions:
11.0.11+9 (does no work)
11.0.10+9 (does work)

REGRESSION : Last worked in version 11.0.10

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create a JPasswordField
2. Get the document as PlainDocument from the field
3. Set a documentFilter
4. Input text in the JPasswordField (either through the UI or with setTexT(String)
5. Clear the text with setText("""") (ie. with a button)

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The field is empty
ACTUAL -
The originally set characters get replaced with unicode null characters

---------- BEGIN SOURCE ----------
public class PasswordTest {

    public static void main(String... args) {

        JPasswordField test = new JPasswordField();
        PlainDocument document = (PlainDocument) test.getDocument();
        document.setDocumentFilter(new DocumentFilter() {
            @Override
            public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                String string = fb.getDocument().getText(0, fb.getDocument().getLength()) + text;

                if (string.length() <= 6 && string.matches(""[0-9]+"")) {
                    super.replace(fb, offset, length, text, attrs); //To change body of generated methods, choose Tools | Templates.
                }
            }
        });
        test.setText(""123456"");
        test.setText("""");
        System.out.println(Arrays.equals(test.getPassword(), new char[0]));
    }

}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Remove the document filter.

FREQUENCY : always


",,,,,,,,,,,JDK-8298534,JDK-8301839,JDK-8298537,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8258373,,,,,,,,,"2022-11-11 05:33;pnarayanaswa;PasswordTest.java;https://bugs.openjdk.org/secure/attachment/101568/PasswordTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b01,8u291,,generic,,,,,,"0|i2z5wj:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-11-11 05:33;pnarayanaswa;Verified with attached testcase in Windows 10, issue is reproducible 
Test Result
==========
8u281: Pass
8u291: Fail<-Regression
11.0.10: Pass
11.0.11: Fail<-Regression
17: Fail
19: Fail
20ea22: Fail;;;","2022-11-11 06:23;psadhukhan;Seems to be a regression of JDK-8258373...Should be assigned to the author of that bug...;;;","2022-11-20 15:45;serb;This is an expected change in behavior after the JDK-8258373 and it was discussed during the review request. That change clears the old storage for the password before using the new password, that change became visible to the user via text notifications events, and as in the test in the description of this bug the application may start to work differently.;;;","2022-11-28 12:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11281
Date: 2022-11-22 03:15:55 +0000;;;","2022-11-29 19:23;dukebot;Changeset: 87f00f4a
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-11-30 03:22:52 +0000
URL:       https://git.openjdk.org/jdk/commit/87f00f4a1bfb392be0684edcdfa0254caec4ca03
;;;","2022-12-01 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/102
Date: 2022-12-01 10:58:05 +0000;;;","2022-12-01 03:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/943
Date: 2022-12-01 11:04:36 +0000;;;","2022-12-01 15:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1563
Date: 2022-12-01 22:02:50 +0000;;;","2022-12-01 23:34;serb;Fix request (19u)

Clean backport.
This is the fix for a regression introduced in JDK 11.0.11.
The new test passed, and the java_desktop tests are green.
Review 19u: https://git.openjdk.org/jdk19u/pull/102
;;;","2022-12-02 18:49;serb;Fix request (17u)

Clean backport.
This is the fix for a regression introduced in JDK 11.0.11.
The new test passed, and the java_desktop tests are green.
Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/943;;;","2022-12-03 15:53;serb;Fix request (11u)

Clean backport.
This is the fix for a regression introduced in JDK 11.0.11.
The new test passed, and the java_desktop tests are green.
Review 11u-dev: https://git.openjdk.org/jdk11u-dev/pull/1563;;;",,,,,,,,,,,,,,,,,,,,,,,,
gtest is built with the build-jdk,JDK-8296872,5087378,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-11-11 02:55,2022-11-16 23:37,2023-10-01 09:56,2022-11-11 13:51,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"The build-jdk is a JDK built on the current sources that can execute on the build platform. This is needed when cross-compiling, in addition to the boot-jdk (which runs on the build platform, but is an older version of the JDK), and is different from the JDK resulting from the build (which can only execute on the target platform).

If we do not supply a pre-built build-jdk, the build system creates a new, on the fly, before starting the compilation proper. 

This build-jdk includes gtest for hotspot, if available. This is just a waste of resources (and actually triggered a bug; which is how it was discovered).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z88z:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-11 03:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11106
Date: 2022-11-11 11:07:39 +0000;;;","2022-11-11 13:51;dukebot;Changeset: 7f587e5a
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-11-11 21:47:00 +0000
URL:       https://git.openjdk.org/jdk/commit/7f587e5a5cc1b71ced1cd27f748201c6662040bd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NULL check of CTFontCopyAvailableTables return value is required,JDK-8296854,5087141,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,webbuggrp,webbuggrp,2022-11-09 05:12,2022-12-09 16:12,2023-10-01 09:56,2022-12-06 16:16,jfx17,,,,,,,jfx20,javafx,,0,dcspn,reproducer-other,sn_132,sn_133,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
macOS Monterey
openjdk version ""17.0.4.1"" 2022-08-12
OpenJDK Runtime Environment (build 17.0.4.1+1)
OpenJDK 64-Bit Server VM (build 17.0.4.1+1, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
The same code that caused the crash in JDK-8287609 was
Found in dfontdecoder.c

jfx/modules/javafx.graphics/src/main/native-font/dfontdecoder.c
----
JNIEXPORT jintArray JNICALL Java_com_sun_javafx_font_DFontDecoder_getCTFontTags
(JNIEnv *env, jclass clazz, jlong fontPtr)
{
    CTFontRef fontRef = (CTFontRef)fontPtr;
    CTFontTableOptions options = kCTFontTableOptionNoOptions;
    CFArrayRef tags = CTFontCopyAvailableTables(fontRef, options);
    CFIndex count = CFArrayGetCount(tags);
----

The patch is in the Workaround section. I am OCA signed.


CUSTOMER SUBMITTED WORKAROUND :
diff --git a/modules/javafx.graphics/src/main/native-font/dfontdecoder.c b/modules/javafx.graphics/src/main/native-font/dfontdecoder.c
index 2ce8e875f3..2fdbc0a428 100644
--- a/modules/javafx.graphics/src/main/native-font/dfontdecoder.c
+++ b/modules/javafx.graphics/src/main/native-font/dfontdecoder.c
@@ -117,6 +117,9 @@ JNIEXPORT jintArray JNICALL Java_com_sun_javafx_font_DFontDecoder_getCTFontTags
     CTFontRef fontRef = (CTFontRef)fontPtr;
     CTFontTableOptions  options = kCTFontTableOptionNoOptions;
     CFArrayRef tags = CTFontCopyAvailableTables(fontRef, options);
+    if (tags == NULL) {
+        return NULL;
+    }
     CFIndex count = CFArrayGetCount(tags);
     jintArray intArrObj = (*env)->NewIntArray(env, count);
     if (intArrObj == NULL) {

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287609,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2z6sb:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-11-11 01:24;pnarayanaswa;Relates to JDK-8287609;;;","2022-11-14 10:00;prr;The reporter doesn't say so, but I suppose this causes a crash so P3 seems better
I am a bit surprised we haven't had other reports given that Monterey is now 1 year old.
Not so many dfonts around now perhaps .. ?
;;;","2022-12-05 11:54;prr;Reading this more closely, it is not clear to me that the submitter saw a crash.
I think this is entirely theoretical. The ONLY call site is that Java method
com.sun.javafx.font.DFontDecoder.decode(..) and the lines where the native call are these
        int format = DFontDecoder.getCTFontFormat(fontRef);
            if (format != trueTag && format != v1ttTag && format != ottoTag) {
                throw new IOException(""Unsupported Dfont"");
            }
            int[] tags = DFontDecoder.getCTFontTags(fontRef);

So unless this is a font that has tables we never call the decode. Ergo a null return should never happen.
Out of an abundance of caution I can add additional checks but  ... 


;;;","2022-12-05 13:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/968
Date: 2022-12-05 21:18:38 +0000;;;","2022-12-06 16:16;dukebot;Changeset: f96b3504
Author:    Phil Race <prr@openjdk.org>
Date:      2022-12-07 00:14:47 +0000
URL:       https://git.openjdk.org/jfx/commit/f96b3504d364ce3baa42e46f5d7238b344791e08
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor cleanup of some dead code in Flow.java,JDK-8296846,5087066,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,acobbs,webbuggrp,webbuggrp,2022-11-08 09:46,2023-01-10 19:25,2023-10-01 09:56,2022-11-17 20:26,20,,,,,,,20,tools,,0,dcsad,noreg-cleanup,reproducer-other,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
jdk-20+22-65-gdd5d4df5b68


A DESCRIPTION OF THE PROBLEM :
There is some dead code in Flow.java that can be safely removed by this patch:

diff --git a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Flow.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Flow.java
index 55b214b6a7e..d9e2f5ac4a5 100644
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Flow.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Flow.java
@@ -2170,16 +2170,12 @@ public class Flow {
         public void visitClassDef(JCClassDecl tree) {
             if (tree.sym == null) {
                 return;
             }
 
             Lint lintPrev = lint;
             lint = lint.augment(tree.sym);
             try {
-                if (tree.sym == null) {
-                    return;
-                }
-
                 JCClassDecl classDefPrev = classDef;
                 int firstadrPrev = firstadr;
                 int nextadrPrev = nextadr;
                 ListBuffer<PendingExit> pendingExitsPrev = pendingExits;
@@ -2254,27 +2250,18 @@ public class Flow {
         public void visitMethodDef(JCMethodDecl tree) {
             if (tree.body == null) {
                 return;
             }
 
             /*  MemberEnter can generate synthetic methods ignore them
              */
             if ((tree.sym.flags() & SYNTHETIC) != 0) {
                 return;
             }
 
             Lint lintPrev = lint;
             lint = lint.augment(tree.sym);
             try {
-                if (tree.body == null) {
-                    return;
-                }
-                /*  Ignore synthetic methods, except for translated lambda methods.
-                 */
-                if ((tree.sym.flags() & (SYNTHETIC | LAMBDA_METHOD)) == SYNTHETIC) {
-                    return;
-                }
-
                 final Bits initsPrev = new Bits(inits);
                 final Bits uninitsPrev = new Bits(uninits);
                 int nextadrPrev = nextadr;
                 int firstadrPrev = firstadr;


REGRESSION : Last worked in version 8


CUSTOMER SUBMITTED WORKAROUND :
None.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z6bn:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-10 23:36;adev;Removal of dead code in /src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Flow.java;;;","2022-11-11 13:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11112
Date: 2022-11-11 21:40:36 +0000;;;","2022-11-17 20:26;dukebot;Changeset: 2f063b86
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2022-11-18 04:25:12 +0000
URL:       https://git.openjdk.org/jdk/commit/2f063b86fba785bce03f9f9b3092046be188b84c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/NativeCallTest.java fails after JDK-8262901,JDK-8296821,5087329,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,omikhaltcova,dcubed,dcubed,2022-11-10 14:23,2023-01-23 06:12,2023-10-01 09:56,2022-11-14 00:42,20,,,,,,,20,hotspot,,0,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,tier2,tier3,tier6,tier7,tier8,,,,,,,,,,,,"The following test failed in the JDK20 CI:

compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/NativeCallTest.java

Here's a snippet from the log file:

#section:junit
----------messages:(7/1051)----------
command: junit -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -Xbootclasspath/a:. jdk.vm.ci.code.test.NativeCallTest
reason: User specified action: run junit/othervm/native -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -Xbootclasspath/a:. jdk.vm.ci.code.test.NativeCallTest 
started: Thu Nov 10 22:19:58 UTC 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.internal.vm.ci --add-exports jdk.internal.vm.ci/jdk.vm.ci.hotspot=ALL-UNNAMED --add-exports jdk.internal.vm.ci/jdk.vm.ci.code=ALL-UNNAMED --add-exports jdk.internal.vm.ci/jdk.vm.ci.code.site=ALL-UNNAMED --add-exports jdk.internal.vm.ci/jdk.vm.ci.meta=ALL-UNNAMED --add-exports jdk.internal.vm.ci/jdk.vm.ci.runtime=ALL-UNNAMED --add-exports jdk.internal.vm.ci/jdk.vm.ci.common=ALL-UNNAMED --add-exports jdk.internal.vm.ci/jdk.vm.ci.aarch64=ALL-UNNAMED --add-exports jdk.internal.vm.ci/jdk.vm.ci.amd64=ALL-UNNAMED --add-exports jdk.internal.vm.ci/jdk.vm.ci.riscv64=ALL-UNNAMED
finished: Thu Nov 10 22:20:00 UTC 2022
elapsed time (seconds): 2.405
----------configuration:(12/661)----------
Boot Layer
  add modules: jdk.internal.vm.ci                     
  add exports: jdk.internal.vm.ci/jdk.vm.ci.aarch64   ALL-UNNAMED
               jdk.internal.vm.ci/jdk.vm.ci.amd64     ALL-UNNAMED
               jdk.internal.vm.ci/jdk.vm.ci.code      ALL-UNNAMED
               jdk.internal.vm.ci/jdk.vm.ci.code.site ALL-UNNAMED
               jdk.internal.vm.ci/jdk.vm.ci.common    ALL-UNNAMED
               jdk.internal.vm.ci/jdk.vm.ci.hotspot   ALL-UNNAMED
               jdk.internal.vm.ci/jdk.vm.ci.meta      ALL-UNNAMED
               jdk.internal.vm.ci/jdk.vm.ci.riscv64   ALL-UNNAMED
               jdk.internal.vm.ci/jdk.vm.ci.runtime   ALL-UNNAMED

----------System.out:(0/0)----------
----------System.err:(121/8671)----------
java.lang.AssertionError: Unimplemented move rax
	at jdk.vm.ci.code.test.amd64.AMD64TestAssembler.emitFloatRet(AMD64TestAssembler.java:349)
	at jdk.vm.ci.code.test.NativeCallTest.lambda$test$0(NativeCallTest.java:162)
	at jdk.vm.ci.code.test.CodeInstallationTest.test(CodeInstallationTest.java:104)
	at jdk.vm.ci.code.test.NativeCallTest.test(NativeCallTest.java:151)
	at jdk.vm.ci.code.test.NativeCallTest.testI32I(NativeCallTest.java:146)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:126)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:85)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)
JavaTest Message: JUnit Platform Failure(s): 1

java.lang.AssertionError: Unimplemented move rax
	at jdk.vm.ci.code.test.amd64.AMD64TestAssembler.emitFloatRet(AMD64TestAssembler.java:349)
	at jdk.vm.ci.code.test.NativeCallTest.lambda$test$0(NativeCallTest.java:162)
	at jdk.vm.ci.code.test.CodeInstallationTest.test(CodeInstallationTest.java:104)
	at jdk.vm.ci.code.test.NativeCallTest.test(NativeCallTest.java:151)
	at jdk.vm.ci.code.test.NativeCallTest.testI32I(NativeCallTest.java:146)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:126)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:85)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)

Test run finished after 594 ms
[         3 containers found      ]
[         0 containers skipped    ]
[         3 containers started    ]
[         0 containers aborted    ]
[         3 containers successful ]
[         0 containers failed     ]
[         5 tests found           ]
[         0 tests skipped         ]
[         5 tests started         ]
[         0 tests aborted         ]
[         4 tests successful      ]
[         1 tests failed          ]


java.lang.Exception: JUnit test failure
	at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:141)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:85)
	at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.Exception: JUnit test failure",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262901,,,,,,,,,"2022-11-11 06:46;omikhaltcova;macosx_x86_64_noflags_NativeCallTest.jtr;https://bugs.openjdk.org/secure/attachment/101570/macosx_x86_64_noflags_NativeCallTest.jtr","2022-11-11 06:46;omikhaltcova;macosx_x86_64_withflags_NativeCallTest.jtr;https://bugs.openjdk.org/secure/attachment/101571/macosx_x86_64_withflags_NativeCallTest.jtr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z7y3:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-11-10 14:40;dcubed;The test: compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/NativeCallTest.java
was modified by:

JDK-8262901 [macos_aarch64] NativeCallTest expected:<-3.8194101E18> but was:<3.02668882E10>

The test passed on five platforms in Tier1, but failed on 6 platforms in Tier2.

These seem to be the two JVM arg combinations that are failing in Tier2:

-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation
-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation
;;;","2022-11-10 14:41;kvn;[~omikhaltcova] Please, look. It is regression from your changes.;;;","2022-11-10 14:47;kvn;I think `-ea -esa -XX:CompileThreshold=100` flags are only matter.
For aarch64 the assertion message is next (r0 instead of rax):
java.lang.AssertionError: Unimplemented move r0
	at jdk.vm.ci.code.test.aarch64.AArch64TestAssembler.emitFloatRet(AArch64TestAssembler.java:481)
	at jdk.vm.ci.code.test.NativeCallTest.lambda$test$0(NativeCallTest.java:162)
	at jdk.vm.ci.code.test.CodeInstallationTest.test(CodeInstallationTest.java:104)
;;;","2022-11-10 15:00;dlong;ILW = JVMCI test failure regression; tier2 with specific flags; no workaround = MHH = P2;;;","2022-11-11 06:46;omikhaltcova;Reproduced this issue on macosx x86_64 by addition of the flag '-ea' (-enableassertions).
NativeCallTest.java passes if no flag is added (see macosx_x86_64_noflags_NativeCallTest.jtr)
and the test fails if '-ea' is added (see macosx_x86_64_withflags_NativeCallTest.jtr).

It's not a regression because it fails in the new test for odd number of arguments that was added to NativeCallTest.java by JDK-8262901.;;;","2022-11-11 07:01;omikhaltcova;It seems the returned 'int' from this new test is the culprit of this issue because it is waited for 'float' in 
public class NativeCallTest extends CodeInstallationTest {
..
    public void test(String name, long addr, Class<?> returnClazz, Class<?>[] types, Object[] values) {
..
                 asm.emitFloatRet(((RegisterValue) 
..
    }
} 
Started working on the fix.;;;","2022-11-12 15:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11114
Date: 2022-11-11 22:34:59 +0000;;;","2022-11-14 00:42;dukebot;Changeset: 277f0c24
Author:    Olga Mikhaltsova <omikhaltcova@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-11-14 08:40:11 +0000
URL:       https://git.openjdk.org/jdk/commit/277f0c24a2e186166bfe70fc93ba79aec10585aa
;;;","2022-11-14 11:25;dcubed;The fix for this bug is integrated in jdk-20+24-1723.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
sprintf is deprecated in Xcode 14,JDK-8296812,5087319,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-11-10 10:48,2023-05-12 10:25,2023-10-01 09:56,2022-12-09 14:41,11,17,18,19,20,,,21,hotspot,,0,c2,noreg-cleanup,oracle-triage-20,tencent-interest,,,,,,,,,,,,,,,,,,"Build failed on MacOS, with build log information as:

/Users/xueleifan/workspace/jdk-dev/src/hotspot/share/adlc/adlparse.cpp:215:11: error: 'sprintf' is deprecated: This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead. [-Werror,-Wdeprecated-declarations]
          sprintf(buf, ""%s_%d"", instr->_ident, match_rules_cnt++);
          ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.0.sdk/usr/include/stdio.h:188:1: note: 'sprintf' has been explicitly marked deprecated here
__deprecated_msg(""This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of sprintf(3), it is highly recommended that you use snprintf(3) instead."")
^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.0.sdk/usr/include/sys/cdefs.h:215:48: note: expanded from macro '__deprecated_msg'
        #define __deprecated_msg(_msg) __attribute__((__deprecated__(_msg)))

The system is macOS Monterey version 12.6. Here is the related OpenJDK building configure summary:

* Toolchain:      clang (clang/LLVM from Xcode 14.1)
* Sysroot:        /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.0.sdk
* C Compiler:     Version 14.0.0 (at /usr/bin/clang)
* C++ Compiler:   Version 14.0.0 (at /usr/bin/clang++)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301132,JDK-8307850,JDK-8307848,JDK-8303527,JDK-8303617,JDK-8301279,JDK-8303830,JDK-8308022,JDK-8307855,JDK-8302495,JDK-8299635,JDK-8301274,JDK-8299378,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7vv:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-10 12:36;dlong;ILW = build failure; with newer Xcode; disable warning = MMM = P3;;;","2022-11-11 09:09;lucy;This is more widespread than just adlc. I found 20 occurrences in hotspot code plus one in java.desktop (macosx/native/libjsound/PLATFORM_API_MacOSX_Ports.cpp). Here is my diff for hotspot: 

diff --git a/make/hotspot/lib/CompileJvm.gmk b/make/hotspot/lib/CompileJvm.gmk
index 1f38d1bdcea..21947697e7a 100644
--- a/make/hotspot/lib/CompileJvm.gmk
+++ b/make/hotspot/lib/CompileJvm.gmk
@@ -162,6 +162,26 @@ $(eval $(call SetupJdkLibrary, BUILD_LIBJVM, \
     DISABLED_WARNINGS_gcc_templateTable.cpp := cast-function-type, \
     DISABLED_WARNINGS_clang := $(DISABLED_WARNINGS_clang), \
     DISABLED_WARNINGS_clang_arguments.cpp := missing-field-initializers, \
+    DISABLED_WARNINGS_clang_attachListener_bsd.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_bootstrapInfo.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_chaitin.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_compileBroker.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_debug.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_deoptimization.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_dependencies.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_filemap.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_idealGraphPrinter.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_javaClasses.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_jfrSymbolTable.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_jvmciCompilerToVMInit.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_node.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_os.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_os_bsd.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_parserTests.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_perfData.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_type.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_utf8.cpp := deprecated-declarations, \
+    DISABLED_WARNINGS_clang_c1_Runtime1.cpp := deprecated-declarations, \
     DISABLED_WARNINGS_clang_codeBuffer.cpp := tautological-undefined-compare, \
     DISABLED_WARNINGS_clang_directivesParser.cpp := missing-field-initializers, \
     DISABLED_WARNINGS_clang_g1ParScanThreadState.cpp := delete-abstract-non-virtual-dtor, \

There are many more occurrences of sprintf but they don't seem to strike for MacOS/Xcode. ;;;","2022-11-12 22:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11115
Date: 2022-11-11 22:41:19 +0000;;;","2022-12-09 14:41;dukebot;Changeset: 478ef389
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-12-09 22:37:20 +0000
URL:       https://git.openjdk.org/jdk/commit/478ef389dc3767edfbe21d10a7f7f1522c648c2e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ctw build is broken,JDK-8296805,5087310,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2022-11-10 08:49,2022-12-13 22:47,2023-10-01 09:56,2022-11-14 07:08,20,,,,,,,20,hotspot,,0,build,ctw,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,"$ cd ./test/hotspot/jtreg/testlibrary/ctw
$ PATH=/home/roland/jdk-19/bin/:$PATH make
find: ‘../../../../../test/lib/sun/hotspot’: No such file or directory
echo '${JAVA_HOME}/bin/java ${JAVA_OPTIONS} --add-exports java.base/jdk.internal.jimage=ALL-UNNAMED --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/jdk.internal.reflect=ALL-UNNAMED --add-exports java.base/jdk.internal.access=ALL-UNNAMED -XX:-U\
seCounterDecay -Xbatch ""-XX:CompileCommand=exclude,java/lang/invoke/MethodHandle.*"" -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath/a:wb.jar -jar ctw.jar $@' > dist/ctw.sh
chmod a+x dist/ctw.sh
find: ‘../../../../../test/lib/sun/hotspot’: No such file or directory
/home/roland/jdk-19/bin/../bin/javac  -sourcepath ../../../../../test/lib \
        -d build/classes \
        -cp build/classes \
        @wb_filelist
/home/roland/jdk-19/bin/../bin/jar --create --file=dist/wb.jar -C build/classes .
/home/roland/jdk-19/bin/../bin/javac --add-exports java.base/jdk.internal.jimage=ALL-UNNAMED --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/jdk.internal.reflect=ALL-UNNAMED --add-exports java.base/jdk.internal.access=ALL-UNNAMED -sourcepath s\
rc -d build/classes -cp dist/wb.jar @filelist
../../../../../test/lib/jdk/test/lib/util/ClassTransformer.java:26: error: package jdk.test.lib.compiler does not exist
import jdk.test.lib.compiler.CompilerUtils;
                            ^
../../../../../test/lib/jdk/test/lib/util/ClassTransformer.java:100: error: cannot find symbol
            CompilerUtils.compile(subdir, subdir, false, args.toArray(new String[args.size()]));
            ^
  symbol:   variable CompilerUtils
  location: class ClassTransformer
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
2 errors
make: *** [Makefile:78: dist/ctw.jar] Error 1
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7tv:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-10 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11090
Date: 2022-11-10 16:54:39 +0000;;;","2022-11-10 14:56;dlong;ILW = broken test build; rarely used Makefile?; no workaround = MLH =  P4;;;","2022-11-14 07:08;dukebot;Changeset: 0fe2bf51
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-11-14 15:05:57 +0000
URL:       https://git.openjdk.org/jdk/commit/0fe2bf51b2f62bd95ef653fec4b97bea82e002e8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parse errors when deconstructing a record using the enhanced for loop of JEP 432,JDK-8296802,5087306,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,abimpoudis,abimpoudis,2022-11-10 07:39,2022-12-08 15:28,2023-10-01 09:56,2022-12-01 04:42,,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"1. Reported error about JEP 432's enhanced for loop, when deconstructing a record with primitive components.

public class RecordPatternTest {
    public static void main(String argv[]) {
        Point[] pointArray = {new Point(1,2), new Point(3,4)};
        dump(pointArray);
    }

    record Point(int x, int y) {}

    static void dump(Point[] pointArray) {
        for (Point(int x, int y) : pointArray) {
            System.out.println(""("" + x + "", "" + y + "")"");
        }
    }
}

$ java --enable-preview --source 20 RecordPatternTest.java

RecordPatternTest.java:10: error: '.class' expected

        for (Point(int x, int y) : pointArray) {
                       ^
RecordPatternTest.java:10: error: ';' expected
        for (Point(int x, int y) : pointArray) {
                        ^
RecordPatternTest.java:10: error: '.class' expected
        for (Point(int x, int y) : pointArray) {
                              ^
RecordPatternTest.java:10: error: not a statement
        for (Point(int x, int y) : pointArray) {
                          ^
RecordPatternTest.java:10: error: ';' expected

        for (Point(int x, int y) : pointArray) {
                               ^
RecordPatternTest.java:10: error: not a statement
        for (Point(int x, int y) : pointArray) {
                                   ^
RecordPatternTest.java:10: error: ';' expected
        for (Point(int x, int y) : pointArray) {
                                             ^
7 errors
error: compilation failed
 
However, if we use “var” instead of “int”, i.e.
for (Point(var x, var y) : pointArray) {
then it works:
 
$ java --enable-preview --source 20 RecordPatternTest.java
Note: RecordPatternTest.java uses preview features of Java SE 20.
Note: Recompile with -Xlint:preview for details.
(1, 2)
(3, 4)

2. Nested patterns raise parsing error
3. Lambdas in normal for erroneously parsed as patterns:

static <T> void method2(Function<Integer, Integer> f) {}
int i = 42;
for (method2((Integer a) -> 42); i == 0;) { i++; }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297986,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7sz:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-15 15:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10798
Date: 2022-10-20 16:39:51 +0000;;;","2022-12-01 04:42;dukebot;Changeset: 2cb64a75
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-12-01 12:40:09 +0000
URL:       https://git.openjdk.org/jdk/commit/2cb64a75578ccc15a1dfc8c2843aa11d05ca8aa7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/channels/vthread/BlockingChannelOps.testSocketChannelWriteAsyncClose failed with ClosedChannelException,JDK-8296797,5087296,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,msheppar,msheppar,2022-11-10 05:41,2022-11-16 23:37,2023-10-01 09:56,2022-11-12 23:46,20,,,,,,,20,core-libs,,0,intermittent,loom,noreg-self,sbr,,,,,,,,,,,,,,,,,,"a number of failures in SocketChannelImpl write method indicating a race condition, but based on the test scenario logic this should not be possible. This indicates that the state examined by ensureOpenAndConnected is possibly inconsistent.

virtual thread attempts a write on a channel, concurrently a platform thread attempt to close channel, BUT only after the virtual thread has ""parked"". The Closer platform thread polls virtual thread state and then once parked attempts the close after a little pause to raise an AsyncCloseException.

In this instance a CloseChannelException is thrown as the SocketChannelImpl state is not OPEN and CONNECT i.e. CLOSED
As such it would appear that the Closer thread has raced ahead of the writer and closed the channel. For this to happen then the virtual thread has been ""parked"", but parking only takes place after the invocation ensureOpenAndConnected. Thus highlighting a possible (intermittent) inconsistency in either the state of the SocketChannelImpl at the time of ensureOpenAndConnected, during the write call flow, OR an incosistency of the virtual thread state when read by the Closer platform thread.

test BlockingChannelOps.testSocketChannelWrite(): success
test BlockingChannelOps.testSocketChannelWriteAsyncClose(): failure
java.nio.channels.ClosedChannelException
	at java.base/sun.nio.ch.SocketChannelImpl.ensureOpenAndConnected(SocketChannelImpl.java:222)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:536)
	at BlockingChannelOps.lambda$testSocketChannelWriteAsyncClose$7(BlockingChannelOps.java:203)
	at jdk.test.lib.thread.VThreadRunner.lambda$run$0(VThreadRunner.java:75)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:327)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:320)
test BlockingChannelOps.testSocketChannelWriteInterrupt(): success

===============================================
java/nio/channels/vthread/BlockingChannelOps.java#default
Total tests run: 32, Passes: 31, Failures: 1, Skips: 0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2z7qr:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-11-10 06:42;alanb;The setup to have a thread block indefinitely in write is hard to setup. If the thread blocks more than once in testSocketChannelWriteAsyncClose may fail with ClosedChannelException, as observed. 

testPipeWriteAsyncClose is likely to have the same issue as it also depends on write blocking once and indefinitely. ;;;","2022-11-11 01:46;alanb;The behavior differs by kernel. On macOS, the write loop will block, wakes up after 5 seconds, then block again. On Windows Server 2019, the write loop blocks, wakes up after 1 second, allows many writes to complete immediately, then blocks again. In both cases it is ""as if"" the kernel expands the socket buffer to allow more bytes to be queued.

I have an update to the test that allows for write to block more than once. This requires updates to:

testSocketChannelWriteAsyncClose
testSocketChannelWriteInterrupt
testPipeWriteAsyncClose
testPipeWriteInterrupt

The latter two are only needed on Windows when the socket implementation of Pipe is used.

[~msheppar] I see you've assigned this to yourself. Do you want to run with this issue? If so, I can attach the patch. Alternatively I can just create a PR for this.;;;","2022-11-11 03:20;msheppar;[~alanb]  if you supply the patch I'll do a build and push it through an SBR run to see how it performs;;;","2022-11-11 03:40;alanb;Thanks. I've put a draft PR is: https://github.com/openjdk/jdk/pull/11107;;;","2022-11-12 08:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11107
Date: 2022-11-11 11:37:18 +0000;;;","2022-11-12 23:44;alanb;[~msheppar] I think the update to the test (to allow writers to block more than once) is good so I'll get the reviewed change into the main line. I assume it will be picked for the next SBR run. ;;;","2022-11-12 23:46;dukebot;Changeset: 8eb90e2d
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-11-13 07:45:38 +0000
URL:       https://git.openjdk.org/jdk/commit/8eb90e2d9c4ab5975f4301dbfdb0a6d9fa036af3
;;;","2022-11-13 07:33;msheppar;I ran and SBR for changes yesterday and the changes seem to mitigate the intermittent failures.
However, as the test are inherently racy, and the repeat loop has no upper bound, it is possible that the tests will fail with jtreg test timeout, which is about 8/10 minutes;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
<TAB>-completion in jshell fails to expose synthetic bridge methods,JDK-8296789,5087290,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,rgiulietti,rgiulietti,2022-11-10 03:40,2023-01-17 12:05,2023-10-01 09:56,2023-01-11 01:23,19,20,,,,,,21,tools,,0,,,,,,,,,,,,,,,,,,,,,,"`j.l.StringBuilder`'s documentation mentions the public method `setLength()`. This method is declared in superclass `AbstractStringBuilder`, a package-protected abstract class, and does not appear in `StringBuilder` source code.
The javac compiler generates a public synthetic bridge method for `setLength()` in `StringBuilder`.
However, jshell fails to show it on <TAB>-completion. For a reader of the javadoc of the class, this is quite surprising.

|  Welcome to JShell -- Version 19.0.1
|  For an introduction type: /help intro

jshell> var sb = new StringBuilder()
sb ==> 

jshell> sb.<TAB>
append(            appendCodePoint(   compareTo(         delete(            
deleteCharAt(      equals(            getClass()         hashCode()         
indexOf(           insert(            isEmpty()          lastIndexOf(       
notify()           notifyAll()        replace(           reverse()          
toString()         wait(              
jshell> sb.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7pf:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2023-01-02 03:49;asotona;There is significant amount of members not proposed in jshell completion.
Jshell completion seems to filter out all members declared in inaccessible parent classes, despite the fact these members can be accessed through sub-classes.
;;;","2023-01-02 09:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11814
Date: 2023-01-02 16:57:54 +0000;;;","2023-01-11 01:23;dukebot;Changeset: 257f667a
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-01-11 09:21:28 +0000
URL:       https://git.openjdk.org/jdk/commit/257f667afb3dfaefb9a5a6916472066257ca0788
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Limit VM modes for com/sun/jdi/JdbLastErrorTest.java,JDK-8296786,5087287,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2022-11-10 03:02,2022-11-28 14:43,2023-10-01 09:56,2022-11-14 23:28,20,,,,,,,20,core-svc,,0,,,,,,,,,,,,,,,,,,,,,,"JdbLastErrorTest fails with -Xcomp and -Xint VM modes.  

The test examines the interaction of the native (Windows) GetLastError value and Panama native invocation.  This usage is known not to work in all modes, and the test should limit itself using ""@requires vm.compMode"" to avoid failures.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7or:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-11-14 05:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11136
Date: 2022-11-14 13:19:38 +0000;;;","2022-11-14 12:40;dcubed;Just a heads up that this other bug fix is changing the same test
so there are two different PRs out at the same time:
    JDK-8296913 Correct enable preview idiom in JdbLastErrorTest.java;;;","2022-11-14 23:28;dukebot;Changeset: 8a9eabbe
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-11-15 07:23:40 +0000
URL:       https://git.openjdk.org/jdk/commit/8a9eabbec6eb9eb77056ed582e0ad6ec908f9ce3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: C2: assert(false) failed: bad AD file,JDK-8296771,5087270,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-11-10 00:58,2023-07-09 19:23,2023-10-01 09:56,2022-11-11 00:08,19,20,,,,,,20,hotspot,,0,c2,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,oracle-triage-20,,,,,,,,,,,,,,,,,"The same issue is encountered with RISC-V fastdebug build, when testing `compiler/types/TestSubTypeCheckMacroTrichotomy.java`.

```
o1062  Conv2B  === _ o961  [[ o949 ]]

--N: o1062  Conv2B  === _ o961  [[ o949 ]]

   --N: o961  PartialSubtypeCheck  === o943 o116 o119  [[ o1062 ]]
   IREGP_R15  2100  partialSubtypeCheck
   _PartialSubtypeCheck_iRegP_R14_iRegP_R10  200  _PartialSubtypeCheck_iRegP_R14_iRegP_R10

      --N: o116  ConP  === o0  [[ o121 o121 o427 o128 o406 o1424 o170 o170 o406 o191 o382 o365 o308 o263 o678 o679 o960 o961 o840 o841 o959 o1122 o1123 o1168 o1169 o1224 o1225 o1263 o1264 o1309 o1310 o1363 o1364 o1419 o1420 o1421 o1422 o1423 o1593 o1594 o1595 o1596 o1657 o1658 o1659 o1660 o1735 o1736 o1737 o1739 o1910 o1911 ]]  #precise TestSubTypeCheckMacroTrichotomy$A: 0x00000040ac31b1c8:Constant:exact *  Klass:precise TestSubTypeCheckMacroTrichotomy$A: 0x00000040ac31b1c8:Constant:exact *
      IMMP  0  IMMP
      IREGP  100  loadConP
      IREGPNOSP  100  loadConP
      IREGP_R10  100  loadConP
      IREGP_R11  100  loadConP
      IREGP_R12  100  loadConP
      IREGP_R13  100  loadConP
      IREGP_R14  100  loadConP
      IREGP_R15  100  loadConP
      IREGP_R16  100  loadConP
      IREGP_R28  100  loadConP
      JAVATHREAD_REGP  100  loadConP
      INDIRECT  100  loadConP
      INLINE_CACHE_REGP  100  loadConP
      MEMORY  100  INDIRECT
      IREGNORP  100  IREGP
      IREGILNP  100  IREGP
      IREGILNPNOSP  100  IREGPNOSP
      VMEMA  100  INDIRECT

      --N: o119  ConP  === o0  [[ o124 o124 o308 o1424 o167 o167 o263 o174 o191 o961 o1421 o1422 o1423 o1737 o1739 ]]  #precise TestSubTypeCheckMacroTrichotomy$B: 0x00000040ac31b318:Constant:exact *  Klass:precise TestSubTypeCheckMacroTrichotomy$B: 0x00000040ac31b318:Constant:exact *
      IMMP  0  IMMP
      IREGP  100  loadConP
      IREGPNOSP  100  loadConP
      IREGP_R10  100  loadConP
      IREGP_R11  100  loadConP
      IREGP_R12  100  loadConP
      IREGP_R13  100  loadConP
      IREGP_R14  100  loadConP
      IREGP_R15  100  loadConP
      IREGP_R16  100  loadConP
      IREGP_R28  100  loadConP
      JAVATHREAD_REGP  100  loadConP
      INDIRECT  100  loadConP
      INLINE_CACHE_REGP  100  loadConP
      MEMORY  100  INDIRECT
      IREGNORP  100  IREGP
      IREGILNP  100  IREGP
      IREGILNPNOSP  100  IREGPNOSP
      VMEMA  100  INDIRECT

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/matcher.cpp:1707
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/jdk/src/hotspot/share/opto/matcher.cpp:1707), pid=577, tid=594
#  assert(false) failed: bad AD file
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc..jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc..jdk, mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-riscv64)
# Problematic frame:
# V  [libjvm.so+0xee4538]  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0x3f2
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /jdk/jtregReportDir/workdir/scratch/0/hs_err_pid577.log
#
# Compiler replay data is saved as:
# /jdk/jtregReportDir/workdir/scratch/0/replay_pid577.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
```",,,,,,,,,,,JDK-8311737,JDK-8297463,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295414,,,,,,,,,"2022-11-10 00:59;xlinzheng;hs_err_pid577.log;https://bugs.openjdk.org/secure/attachment/101534/hs_err_pid577.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,19,,linux,,,,,,"0|i2z7kz:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-10 01:00;xlinzheng;Will file a patch soon.;;;","2022-11-10 01:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11085
Date: 2022-11-10 09:35:52 +0000;;;","2022-11-10 04:26;chagedorn;ILW = Same as JDK-8295414 but for riscv = P4;;;","2022-11-11 00:08;dukebot;Changeset: 7244eac9
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-11-11 08:03:48 +0000
URL:       https://git.openjdk.org/jdk/commit/7244eac9dfe4e7e9c3eea613149f0fb1390f00aa
;;;","2022-11-21 20:54;xlinzheng;Fix request [19u]

This is a fix for a fast debug build assertion failure, and the impact is small.
Clean backport from 20.

I would like to backport the aarch64 one (JDK-8295414) and this one to jdk19u before the deadline.;;;","2022-11-21 21:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/79
Date: 2022-11-22 04:58:38 +0000;;;","2023-03-07 01:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/8
Date: 2023-03-07 09:01:32 +0000;;;","2023-06-19 20:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] Revert 8296115,JDK-8296758,5087243,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-11-09 19:25,2023-08-07 12:59,2023-10-01 09:56,2022-11-11 13:51,,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,"8296115 unfortunately did not prove to be as useful as expected, revert it and redo with JDK-8307160.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241499,,,,,,,,,,,JDK-8307160,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7ez:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-09 19:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11077
Date: 2022-11-10 03:25:33 +0000;;;","2022-11-11 13:51;dukebot;Changeset: f0b648bc
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-11-11 21:48:45 +0000
URL:       https://git.openjdk.org/jdk/commit/f0b648bc5cea0014e85e16b14c285618c4b94661
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoCreateSharedArchive in JDK 20 is not compatible with JDK 19,JDK-8296754,5087239,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,matsaave,iklam,iklam,2022-11-09 18:04,2022-12-22 00:09,2023-10-01 09:56,2022-11-28 07:29,20,,,,,,,20,hotspot,,0,cds,dynamic-cds,,,,,,,,,,,,,,,,,,,,"The -XX:+AutoCreateSharedArchive  flag was implemented in JDK 19 (JDK-8261455). However, this flag doesn't work across JDK 19 and 20.

Expected: JDK 20 should recreate the specified CDS archive
Actual: JDK 20 cannot recognize the archive file and gives up

$ rm foo.jsa

$ ./jdk-19/bin/java -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=foo.jsa -cp HelloWorld.jar HelloWorld
Hello World

$ ls -l foo.jsa
-r--r--r-- 1 iklam iklam 241664 Nov  9 17:58 foo.jsa

$ java -showversion -Xlog:cds -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=foo.jsa -cp HelloWorld.jar HelloWorld
[0.000s][info][cds] UseSharedSpaces: The shared archive file version 0xe does not match the required version 0x11.
[0.000s][info][cds] UseSharedSpaces: Invalid base_archive_name offset/size: 0/527052459
Java HotSpot(TM) 64-Bit Server VM warning: -XX:+AutoCreateSharedArchive is unsupported when base CDS archive is not loaded. Run with -Xlog:cds for more info.
[0.000s][info][cds] Unable to use shared archive: invalid archive
java version ""20-internal"" 2023-03-21
Java(TM) SE Runtime Environment (build 20-internal-adhoc.iklam.rum)
Java HotSpot(TM) 64-Bit Server VM (build 20-internal-adhoc.iklam.rum, mixed mode)
Hello World
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287873,,,,,,,,,,,JDK-8279366,JDK-8261455,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7e3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-09 18:13;iklam;When -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=foo.jsa is specified:

- If the JVM can recognize the format of foo.jsa, and found out that it's out of date, the archive is re-generated
- If the JVM canNOT recognize the format of foo.jsa, it leaves foo.jsa, without overwriting it.

The intention is to avoid overwriting important files that are unintentionally specified, e.g., -XX:SharedArchiveFile=key-to-bitcoin-locker

====
For the archive file to be recognizable across different versions of JDK, we require that the GenericCDSFileMapHeader must be always the same in different JDK versions.

https://github.com/openjdk/jdk/blob/3a873d3c5b2281b2389e9364ff26f04ee86b0607/src/hotspot/share/include/cds.h#L67-L88

However, this requirement was broken by JDK-8279366 when a new field was added in there.

The fix is to move this new field from GenericCDSFileMapHeader (in cds.h)  to FileMapHeader (in filemap.hpp);;;","2022-11-15 09:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11148
Date: 2022-11-14 21:33:23 +0000;;;","2022-11-28 07:29;dukebot;Changeset: a249a525
Author:    Matias Saavedra Silva <matsaave@openjdk.org>
Committer: Ioi Lam <iklam@openjdk.org>
Date:      2022-11-28 15:26:27 +0000
URL:       https://git.openjdk.org/jdk/commit/a249a52501f3cd7d4fbe5293d14ac8d0d6ffcc69
;;;","2022-12-14 01:42;mbaesken;Since 28th November this test fails in our nightly tests on linux x86_64.
java.lang.RuntimeException: Use -Dtest.previous.jdk or -Dtest.boot.jdk to specify a previous version of the JDK that supports -XX:+AutoCreateSharedArchive
       at TestAutoCreateSharedArchiveUpgrade.setupJVMs(TestAutoCreateSharedArchiveUpgrade.java:80)
       at TestAutoCreateSharedArchiveUpgrade.main(TestAutoCreateSharedArchiveUpgrade.java:64)
       at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
       at java.base/java.lang.reflect.Method.invoke(Method.java:578)
       at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
       at java.base/java.lang.Thread.run(Thread.java:1623)

Seems the test is problematic and needs some preconditions fulfilled to really work.
Could the test be adjusted or maybe tagged for manual execution ?;;;","2022-12-21 20:03;iklam;[~mbaesken]

Our CI always use ""make test"" to start the test cases. As a result, -J-Dtest.boot.jdk=xxxx is passed to jtreg.

The test.boot.jdk is specified by make/RunTests.gmk

;;;","2022-12-21 23:36;mbaesken;Our nightly tests showing the errors are run differently, not by calling ""make test"" . Probably there are more people running the tests without make.;;;","2022-12-22 00:09;iklam;Maybe we can change the test to throw a SkippedException instead of RuntimeException, so jtreg won't treat it as an error.

But for good coverage, your test harness should pass  -Dtest.previous.jdk to jtreg so that this feature is properly tested.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/net/httpserver/simpleserver/StressDirListings.java timed out,JDK-8296747,5087232,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dcubed,dcubed,2022-11-09 16:25,2022-11-16 23:37,2023-10-01 09:56,2022-11-11 03:28,20,,,,,,,20,core-libs,,0,intermittent,noreg-self,tier2,,,,,,,,,,,,,,,,,,,"The following test timed out in the JDK20 CI:

com/sun/net/httpserver/simpleserver/StressDirListings.java

Here's a snippet from the log file:

#section:testng
----------messages:(9/373)----------
command: testng StressDirListings
reason: User specified action: run testng/othervm StressDirListings 
started: Wed Nov 09 23:22:01 UTC 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.httpserver,java.logging
Timeout information:
--- Timeout information end.
finished: Wed Nov 09 23:30:15 UTC 2022
elapsed time (seconds): 494.009
----------configuration:(3/55)----------
Boot Layer
  add modules: jdk.httpserver java.logging

----------System.out:(1602/85389)----------

<snip>

127.0.0.1 - - [09/Nov/2022:23:30:09 +0000] ""GET / HTTP/1.1"" 200 -
Resource requested: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S137578/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ff2de1b0-21e3-40f0-b50f-3b8816b3dd0d/runs/3bf9fcc1-4211-4165-976d-d54fc1b41117/testoutput/test-support/jtreg_open_test_jdk_tier2_part3/scratch/2
> Connection: Upgrade, HTTP2-Settings
> Http2-settings: AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA
> Host: localhost:46749
> Upgrade: h2c
> User-agent: Java-http-client/20-ea
>
< Date: Wed, 09 Nov 2022 23:30:09 GMT
< Last-modified: Wed, 9 Nov 2022 23:30:04 GMT
< Content-type: text/html; charset=UTF-8
< Content-length: 309
<
test StressDirListings.testDirListings(): success
config StressDirListings.teardown(): success

===============================================
com/sun/net/httpserver/simpleserver/StressDirListings.java
Total tests run: 1, Passes: 1, Failures: 0, Skips: 0
===============================================

----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(37/7091)*----------

The test PASSed while the timeout handler was running.
With a name like StressDirListings.java, perhaps it needs
a slightly longer default timeout value than 120 seconds/
2 minutes? With the default timeoutFactor of 4, that gives
us a total timeout value of 480 seconds/8 minutes and
the test timed out in:

elapsed time (seconds): 494.009
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2z7cj:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-11-10 09:27;dfuchs;From the test log it appears that the test took 8min 7s to run (not 7s as I previously believed). 

----------System.out:(1602/85389)----------
config StressDirListings.setup(): success
127.0.0.1 - - [09/Nov/2022:23:22:02 +0000] ""GET / HTTP/1.1"" 200 -
[...]
127.0.0.1 - - [09/Nov/2022:23:30:09 +0000] ""GET / HTTP/1.1"" 200 -

test StressDirListings.testDirListings(): success
config StressDirListings.teardown(): success

===============================================
com/sun/net/httpserver/simpleserver/StressDirListings.java
Total tests run: 1, Passes: 1, Failures: 0, Skips: 0
===============================================

----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(37/7091)*----------
;;;","2022-11-11 01:57;dfuchs;Jaikiran noted that the test actually took 8min 7s to run :-) My bad. This is confirmed by the thread dump taken in the timeout handler which shows that the test is still running:

""MainThread"" #21 [3438324] prio=5 os_prio=0 cpu=1961.79ms elapsed=483.03s allocated=126M defined_classes=1658 tid=0x00007fb5142ab140 nid=3438324 waiting on condition  [0x00007fb4ed28e000]
   java.lang.Thread.State: WAITING (parking)
	at jdk.internal.misc.Unsafe.park(java.base@20-ea/Native Method)
	- parking to wait for  <0x00000000d28a2790> (a java.util.concurrent.CompletableFuture$Signaller)
	at java.util.concurrent.locks.LockSupport.park(java.base@20-ea/LockSupport.java:221)
	at java.util.concurrent.CompletableFuture$Signaller.block(java.base@20-ea/CompletableFuture.java:1864)
	at java.util.concurrent.ForkJoinPool.unmanagedBlock(java.base@20-ea/ForkJoinPool.java:3745)
	at java.util.concurrent.ForkJoinPool.managedBlock(java.base@20-ea/ForkJoinPool.java:3690)
	at java.util.concurrent.CompletableFuture.waitingGet(java.base@20-ea/CompletableFuture.java:1898)
	at java.util.concurrent.CompletableFuture.get(java.base@20-ea/CompletableFuture.java:2072)
	at jdk.internal.net.http.HttpClientImpl.send(java.net.http@20-ea/HttpClientImpl.java:852)
	at jdk.internal.net.http.HttpClientFacade.send(java.net.http@20-ea/HttpClientFacade.java:133)
	at StressDirListings.testDirListings(StressDirListings.java:94)
	at java.lang.invoke.LambdaForm$DMH/0x0000000801030000.invokeVirtual(java.base@20-ea/LambdaForm$DMH)
	at java.lang.invoke.LambdaForm$MH/0x0000000801030800.invoke(java.base@20-ea/LambdaForm$MH)
	at java.lang.invoke.Invokers$Holder.invokeExact_MT(java.base@20-ea/Invokers$Holder)
	at jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(java.base@20-ea/DirectMethodHandleAccessor.java:154)
	at jdk.internal.reflect.DirectMethodHandleAccessor.invoke(java.base@20-ea/DirectMethodHandleAccessor.java:104)
	at java.lang.reflect.Method.invoke(java.base@20-ea/Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at org.testng.TestRunner$$Lambda$116/0x0000000801084548.accept(Unknown Source)
	at java.util.ArrayList.forEach(java.base@20-ea/ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.lang.invoke.LambdaForm$DMH/0x0000000801002000.invokeStatic(java.base@20-ea/LambdaForm$DMH)
	at java.lang.invoke.LambdaForm$MH/0x0000000801003400.invoke(java.base@20-ea/LambdaForm$MH)
	at java.lang.invoke.Invokers$Holder.invokeExact_MT(java.base@20-ea/Invokers$Holder)
	at jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(java.base@20-ea/DirectMethodHandleAccessor.java:155)
	at jdk.internal.reflect.DirectMethodHandleAccessor.invoke(java.base@20-ea/DirectMethodHandleAccessor.java:104)
	at java.lang.reflect.Method.invoke(java.base@20-ea/Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.lang.Thread.run(java.base@20-ea/Thread.java:1591)

;;;","2022-11-11 02:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11105
Date: 2022-11-11 10:03:03 +0000;;;","2022-11-11 03:28;dukebot;Changeset: 4a300818
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-11-11 11:23:57 +0000
URL:       https://git.openjdk.org/jdk/commit/4a300818fe7a47932c5b762ccd3b948815a31974
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tighten Class.getModifiers spec for array classes,JDK-8296743,5087225,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-11-09 14:24,2022-11-28 14:58,2023-10-01 09:56,2022-11-18 13:54,20,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297237,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7az:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2022-11-17 19:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11229
Date: 2022-11-18 03:26:38 +0000;;;","2022-11-18 13:54;dukebot;Changeset: 6fd14421
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-11-18 21:51:55 +0000
URL:       https://git.openjdk.org/jdk/commit/6fd1442123f7c67740280e8555f60f01a4a2a30e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Illegal X509 Extension should not be created,JDK-8296742,5087224,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-11-09 14:18,2022-11-28 15:07,2023-10-01 09:56,2022-11-22 14:22,,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,"We should only created legal X509 Extension objects. At least, all created Extension objects must be encodable to a byte array.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296072,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7ar:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-11-14 08:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11137
Date: 2022-11-14 16:47:22 +0000;;;","2022-11-22 14:23;dukebot;Changeset: e174558c
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-11-22 22:21:50 +0000
URL:       https://git.openjdk.org/jdk/commit/e174558cad836e56ac31725813abf7d8540c9919
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Illegal X400Address and EDIPartyName should not be created,JDK-8296741,5087223,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-11-09 14:02,2022-11-16 23:35,2023-10-01 09:56,2022-11-14 06:55,,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,"We should only created legal objects for these types. By legal, it means they can always be encoded back to a byte array.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296072,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7aj:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-11-09 14:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11071
Date: 2022-11-09 22:32:19 +0000;;;","2022-11-14 06:58;dukebot;Changeset: e1d298c1
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-11-14 14:53:53 +0000
URL:       https://git.openjdk.org/jdk/commit/e1d298c12d8c8f22d36ba9592d188a3162b0c6e5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some PKCS9Attribute can be created but cannot be encoded,JDK-8296736,5087218,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-11-09 13:44,2022-11-28 14:44,2023-10-01 09:56,2022-11-15 07:36,,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,The SigningCertificate PKCS9Attribute can be created but cannot be encoded.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296072,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z79f:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-11-09 14:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11070
Date: 2022-11-09 21:54:49 +0000;;;","2022-11-15 07:36;dukebot;Changeset: d3051a75
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-11-15 15:33:08 +0000
URL:       https://git.openjdk.org/jdk/commit/d3051a75a37db5c8582c3040a220d15f4c29a851
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: File Read event for RandomAccessFile::write(byte[]) is incorrect,JDK-8296733,5087215,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,egahlin,egahlin,egahlin,2022-11-09 11:58,2022-12-14 08:41,2023-10-01 09:56,2022-11-11 07:52,15,,,,,,,20,hotspot,,1,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,noreg-hard,regression,,,,,,,,,,,,,,,"The duration of the jdk.FileRead event calculation is incorrect. The start time is not subtracted from the end time, instead the end time is used as the duration.

This means all FileRead events are likely to be included, regardless if the threshold is below 20 ms. This could overflow buffers, but also lead to overlapping events, which are trickier (slower) for JMC to read..

This regression was introduced in JDK 15 when ThreadLocals were removed. 


Impact: High, loss of data
Likelihood: Low/Medium
Workaround: Medium, disable FileRead event

H(L/M)M => P2",,,,,,,,,,,JDK-8297592,JDK-8297643,JDK-8297462,JDK-8297231,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z78r:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,Not verified,,"2022-11-09 18:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11075
Date: 2022-11-10 01:54:15 +0000;;;","2022-11-11 07:52;dukebot;Changeset: ced88a2f
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-11-11 15:49:36 +0000
URL:       https://git.openjdk.org/jdk/commit/ced88a2fd9a35e0e027661ef1f3c5ea3a5fff9e0
;;;","2022-11-11 15:26;clanger;Fix request (19u, 17u):
Backport of an obvious fix for JFR. Patch applies cleanly in 19 and with fuzz in 17. PR for 17 was acked by phh. Regression testing: GHA and SAP nightlies.;;;","2022-11-11 15:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/65
Date: 2022-11-11 23:25:00 +0000;;;","2022-11-17 14:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/895
Date: 2022-11-17 22:36:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CLDR v42 update for tzdata 2022f,JDK-8296715,5087195,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,naoto,naoto,naoto,2022-11-09 10:04,2023-01-31 03:46,2023-10-01 09:56,2022-11-10 08:54,20,,,,,,,20,core-libs,,0,cldr,CPU23_01-critical-approved,CPU23_01-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-yes,jdk8u-critical-request,jdk8u-critical-yes,tzdata,tzdata2022f,,,,,"A fix was made to the upstream CLDR v42 maintenance branch for meta zone mapping changes:

https://unicode-org.atlassian.net/browse/CLDR-16132

This needs to be picked up in the JDK repository.",,,,,,,,,,,JDK-8298009,JDK-8297502,JDK-8297120,JDK-8297121,JDK-8296831,JDK-8297926,JDK-8300553,JDK-8296829,JDK-8297409,JDK-8297410,JDK-8297486,JDK-8299251,JDK-8296828,JDK-8297078,JDK-8296830,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284840,JDK-8296108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z74b:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Verified,,"2022-11-09 11:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11066
Date: 2022-11-09 18:58:30 +0000;;;","2022-11-10 08:54;dukebot;Changeset: 54c986e7
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-11-10 16:51:52 +0000
URL:       https://git.openjdk.org/jdk/commit/54c986e7d5d0b48a22b4da81c13153ce431c9f2f
;;;","2022-11-10 17:01;ysatowse;Fix request (19u): 
request to include in 19u, necessary update to follow tzdata 2022f previously integrated.;;;","2022-11-13 17:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/66
Date: 2022-11-14 01:25:21 +0000;;;","2022-11-15 05:29;yan;Fix request (13u, 15u):
need to backport this change following tz2022f.
For 15u, we omit ldmlSupplemental.dtd change of version and adapt the list of bugs in LocaleDataTest.java
For 13u, we also remove es_MX.xml change: it already has restored in this fix format 'count' attribute but the number of patterns is different as it is in a newer (for 13) CLDR.;;;","2022-11-15 05:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/431
Date: 2022-11-15 13:33:13 +0000;;;","2022-11-15 05:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/305
Date: 2022-11-15 13:33:28 +0000;;;","2022-11-30 01:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/942
Date: 2022-11-30 08:55:12 +0000;;;","2022-11-30 01:14;mbaesken;jdk17u backport request
We need to backport this change as a follow-up to the tz2022f update. The ldmlSupplemental.dtd change is omitted (same as in 19u/15u).  The test changes needed  a bit of manual adjustment because of changes in the stride/non-present bug-numbers in LocaleDataTest.java.
PR : https://github.com/openjdk/jdk17u-dev/pull/942;;;","2022-11-30 08:04;mbaesken;jdk11u backport request
We need to backport this change as a follow-up to the tz2022f update. The backport is close to the 13u backport. The test changes needed a bit of manual adjustment because of changes in the stride/non-present bug-numbers in LocaleDataTest.java.;;;","2022-11-30 08:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1560
Date: 2022-11-30 16:03:17 +0000;;;","2022-12-20 10:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u/pull/27
Date: 2022-12-20 18:45:39 +0000;;;","2022-12-21 08:12;andrew;Critical Request [8u]:

This brings the CLDR data into sync with the tzdata changes in 2022f, which is in the upcoming 8u362 release. The patch for 8u is minimal and has been reviewed by dcherepanov & sgehwolf.;;;",,,,,,,,,,,,,,,,,,,,,,
[lworld] identity/value javadoc cleanup,JDK-8296711,5087190,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2022-11-09 09:15,2022-11-15 10:43,2023-10-01 09:56,2022-11-15 10:43,,,,,,,,repo-valhalla,core-libs,,0,lw4,lworld,,,,,,,,,,,,,,,,,,,,Review and update the spec for java.lang.ref.* classes that mention that referents must be identity objects.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z737:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-11-14 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/807
Date: 2022-11-14 18:40:55 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WARNING: JNI call made without checking exceptions,JDK-8296709,5087186,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lucy,lucy,lucy,2022-11-09 08:12,2022-11-28 14:47,2023-10-01 09:56,2022-11-16 07:04,11,17,20,,,,,20,core-svc,,0,,,,,,,,,,,,,,,,,,,,,,"After a JNI call returned, it should be checked whether there is a pending exception. Otherwise, at the moment of the next JNI call, you will receive a warning message. 

This rule is obviously not adhered to in src/jdk.jdwp.agent/share/native/libjdwp/util.c. To reproduce, simply issue the command 
  bin/java -Xcheck:jni -agentlib:jdwp=transport=dt_socket,server=y,suspend=n -version
and you will see the warning.

The rule violation was found with the help of the test
  test/jdk/tools/launcher/TestXcheckJNIWarnings.java 
using SAP's commercial VM offering. For the OpenJDK variant to show the warning, you will need to specify the above -agentlib parameter. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296936,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z72b:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-11-10 01:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11083
Date: 2022-11-10 09:02:02 +0000;;;","2022-11-10 02:45;kevinw;For the record, here's my output from a latest JDK today:

$ ../build/linux-x64/images/jdk/bin/java -Xcheck:jni -agentlib:jdwp=transport=dt_socket,server=y,suspend=n -version
WARNING in native method: JNI call made without checking exceptions when required to from CallStaticObjectMethod
WARNING: JNI local refs: 467, exceeds capacity: 32
Listening for transport dt_socket at address: 40889
java version ""20-internal"" 2023-03-21
Java(TM) SE Runtime Environment (build 20-internal-2022-11-09-1314123.kwalls...)
Java HotSpot(TM) 64-Bit Server VM (build 20-internal-2022-11-09-1314123.kwalls..., mixed mode, sharing)
bash-4.2$
;;;","2022-11-10 02:57;lucy;Forget the below comment. For some reason, I did not see the first WARNING message. Basically, you confirmed my observation. I should have copied the original output into the description.
--------------
Thank you, this is interesting! My last sync was Nov 09, around 16:00 UTC. I did not test on linux-x64, though. My local machine is darwinintel64. 

I will resync now and test on various platforms. ;;;","2022-11-10 03:09;kevinw;No problem - neither of the warnings are new, but getting rid of any of them is good!
;;;","2022-11-10 06:57;dcubed;Moving to core-svc/debugger since that's who owns libjdwp.;;;","2022-11-16 07:04;dukebot;Changeset: eac26f4e
Author:    Lutz Schmidt <lucy@openjdk.org>
Date:      2022-11-16 15:00:20 +0000
URL:       https://git.openjdk.org/jdk/commit/eac26f4eb2b717676267c75e65e76fc3b958c9a7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo Found In CSSParser.java ,JDK-8296661,5086867,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,pnarayanaswa,webbuggrp,webbuggrp,2022-11-05 03:52,2023-09-13 02:59,2023-10-01 09:56,2023-01-25 11:21,19,20,,,,,,21,client-libs,,0,dcspn,noreg-doc,reproducer-other,webbug,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Fix typo in CSSParser.java

https://github.com/openjdk/jdk/pull/10975


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z53f:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-11-09 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10975
Date: 2022-11-04 01:56:05 +0000;;;","2023-01-25 11:21;dukebot;Changeset: 9f0887e2
Author:    ScientificWare <info@scientificware.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-01-25 19:20:39 +0000
URL:       https://git.openjdk.org/jdk/commit/9f0887e2056c3c535eb5a5df2c945d77d1290ce7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Swing HTML table with omitted closing tags misparsed,JDK-8296660,5086837,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,webbuggrp,webbuggrp,2022-11-04 09:22,2022-12-08 15:27,2023-10-01 09:56,2022-11-30 23:58,20,,,,,,,20,client-libs,,0,20ea,additional-information-received,dcspn,regression,reproducer-yes,sn_132,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Linux x64

A DESCRIPTION OF THE PROBLEM :
The test case shows a Swing JLabel with a two-column HTML table (from a generated file list item tooltip). The closing tags of HTML <tr> <th> <td> elements are optional by the spec, and here they are omitted. Java 6 thru 19 have never given me grief about omitted tags. Testing in JDK 20 EA Build 22, the table is completely mangled unless I add the closing tags.

REGRESSION : Last worked in version 19.0.1


---------- BEGIN SOURCE ----------
import javax.swing.*;

class SwingHtmlTable {
    SwingHtmlTable() {
        try {
            UIManager.setLookAndFeel(""javax.swing.plaf.nimbus.NimbusLookAndFeel"");
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        String html = ""<html><table>"" +
            ""<tr><th align=right>Name:<td>sync-001.mp4"" +
            ""<tr><th align=right>Modified:<td>2017-Jul-31, 00:14:55"" +
            ""<tr><th align=right>File size:<td>3.1 MB"" +
            ""<tr><th align=right>Duration:<td>1m03s"" +
            ""<tr><th align=right>Video:<td>854 x 480 - 16:9 - 30.0 fps - 271 kbps - H.264 / AVC"" +
            ""<tr><th align=right>Audio:<td>Stereo - 44100 Hz - 123 kbps - AAC"";
        
        JLabel label = new JLabel(html);
        
        frame.add(label);
        
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
    
    public static void main(String... args) {
        SwingUtilities.invokeLater(SwingHtmlTable::new);
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-09 03:14;pnarayanaswa;Capture.PNG;https://bugs.openjdk.org/secure/attachment/101523/Capture.PNG","2022-11-09 03:14;pnarayanaswa;SwingHtmlTable.java;https://bugs.openjdk.org/secure/attachment/101524/SwingHtmlTable.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b21,20,,generic,,,,,,"0|i2z4wr:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-11-09 03:14;pnarayanaswa;Checked with attached testcase in Windows 10, issue is reproducible<attached screenshot>
Test Result
=========
8u351: Pass
11.017: Pass
17.0.5: Pass
19.0.2: Pass
20ea20: Pass
20ea21: Fail <-Regression.;;;","2022-11-09 21:38;pnarayanaswa;Additional Information from submitter:
=============================
I believe this bug was introduced by the fix for JDK-7172359

https://github.com/openjdk/jdk/commit/7133fc93e168f3671d048b2ae654f84ec289b98d
;;;","2022-11-24 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11355
Date: 2022-11-24 14:59:37 +0000;;;","2022-11-30 23:58;dukebot;Changeset: c6125120
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-12-01 07:57:10 +0000
URL:       https://git.openjdk.org/jdk/commit/c61251201402f15bf0795564bf31545d9c72ee41
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.NoClassDefFoundError exception on running fully legitimate code,JDK-8296656,5086355,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,acobbs,webbuggrp,webbuggrp,2022-10-29 00:05,2023-06-14 14:56,2023-10-01 09:56,2023-03-27 14:35,11,17,18,19,20,21,8,21,tools,,0,dcsaw,release-note=yes,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
x86/windows 10/ openjdk 19.0.1

A DESCRIPTION OF THE PROBLEM :
Getting java.lang.NoClassDefFoundError exception on running fully legitimate code

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
run this snippet

public interface Main {
	
	@interface Annotation {
		interface foo {
			static void print() {System.out.println(""Oops!"");}
		}
		
		@interface Foo {}
	}
	
	static void main(String[] args) {
		Annotation.foo.print();
	}
}

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
 Ooops in the console
ACTUAL -
Exception in thread ""main"" java.lang.NoClassDefFoundError: Main$Annotation$Foo (wrong name: Main$Annotation$foo)
	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1013)
	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:150)
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:862)
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:760)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:681)
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:639)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at Main.main(Main.java:13)

---------- BEGIN SOURCE ----------
public interface Main {
	
	@interface Annotation {
		interface foo {
			static void print() {System.out.println(""Oops!"");}
		}
		
		@interface Foo {}
	}
	
	static void main(String[] args) {
		Annotation.foo.print();
	}
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
rename foo or Foo to something else

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304533,,,,,,,,,,,,,,,,,,,,,JDK-8287885,JDK-8310067,,,,,,,,"2022-11-09 02:32;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/101521/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z2ib:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-09 02:35;tongwan;The observations on Windows 10:
JDK 8: Failed, NoClassDefFoundError thrown.
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19: Failed.
JDK 20ea+22: Failed.;;;","2022-11-09 03:25;alanb;Moving this to tools/javac for now. This is about javac generating Main$Annotation$foo.class containing class Main$Annotation$Foo. That said, it will be very file system dependent on whether Main$Annotation$foo.class and Main$Annotation$Foo.class can exist as distinct files in the same directory.;;;","2023-02-21 16:39;acobbs;This is due to javac not supporting case-insensitive filesystems, which is a ""known bug"".

Same underlying issue as JDK-8287885, though this bug is harder to workaround because it doesn't involve local classes.;;;","2023-03-20 07:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12754
Date: 2023-02-25 21:22:57 +0000;;;","2023-03-27 14:35;dukebot;Changeset: 14b970dc
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-03-27 21:33:01 +0000
URL:       https://git.openjdk.org/jdk/commit/14b970dc9e8d0fe1173039c01cced8a9422ec1ae
;;;","2023-06-13 19:51;dholmes;[~vromero] The changes to the javac.1 manpage that are part of this issue should have been applied to the closed javac.md source and re-generated to apply them to the open java.1 page. These changes will be lost as soon as the manpages are re-generated, both for JDK 21 and JDK 22, so this needs to be fixed in both JDK 21 and JDK 22;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Crash when launching JavaFX app with JDK that targets SDK 13,JDK-8296654,5086919,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kcr,webbuggrp,webbuggrp,2022-11-07 08:41,2023-05-22 07:56,2023-10-01 09:56,2022-12-22 07:24,jfx17,jfx20,,,,,,jfx20,javafx,,0,dcsnr,dcspn,noreg-hard,reproducer-yes,sn_134,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
macOS 13.0 / Apple M1
Java 17.0.6+1


A DESCRIPTION OF THE PROBLEM :
JavaFX app (simple Hello) crashes on startup when built with JDK17u on Xcode 14.1 (sdk13.0).
Xcode 14.1 is required for Mac ports and homebrew binary builds for macOS Ventura.

Tried the following combinations.

* JavaFX(sdk13.0, minos11.0) + JDK 17.0.5+8(sdk12.3, minos11.0) -- no problem
* JavaFX(sdk13.0, minos11.0) + JDK 17.0.6+1(sdk13.0, minos11.0) -- process crash

Confirmed on aarch64 only, not sure if this can be reproduced on x86_64.

I have identified the cause of this problem and will provide a fix code (see Workaround section). I have signed the OCA.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
* Build JDK17u with Xcode 14.1.
* Launch the test app.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Test app launches normally.
ACTUAL -
Test apps do not launch and process crashes.

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class HelloTest extends Application{

	@Override
	public void start(Stage primaryStage) throws Exception {
		BorderPane root = new BorderPane();
		
		primaryStage.setScene(new Scene(root, 400, 400));
		primaryStage.show();
	}

	public static void main(String arg[]) {
		Application.launch(arg);
	}
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
diff --git a/modules/javafx.graphics/src/main/native-glass/mac/GlassViewDelegate.m b/modules/javafx.graphics/src/main/native-glass/mac/GlassViewDelegate.m
index 41fc4c7c4f..48bfa1b648 100644
--- a/modules/javafx.graphics/src/main/native-glass/mac/GlassViewDelegate.m
+++ b/modules/javafx.graphics/src/main/native-glass/mac/GlassViewDelegate.m
@@ -262,8 +262,9 @@ - (void)setFrameSize:(NSSize)newSize
     GET_MAIN_JENV;
     (*env)->CallVoidMethod(env, self->jView, jViewNotifyResize, (int)newSize.width, (int)newSize.height);
     GLASS_CHECK_EXCEPTION(env);
-
-    [self->nsView removeTrackingRect:self->trackingRect];
+    if (self->trackingRect) {
+      [self->nsView removeTrackingRect:self->trackingRect];
+    }
     self->trackingRect = [self->nsView addTrackingRect:[self->nsView bounds] owner:self->nsView userData:nil assumeInside:NO];
 }
 
@@ -276,14 +277,18 @@ - (void)setFrame:(NSRect)frameRect
     GET_MAIN_JENV;
     (*env)->CallVoidMethod(env, self->jView, jViewNotifyResize, (int)frameRect.size.width, (int)frameRect.size.height);
     GLASS_CHECK_EXCEPTION(env);
+    if (self->trackingRect) {
+      [self->nsView removeTrackingRect:self->trackingRect];
+    }
 
-    [self->nsView removeTrackingRect:self->trackingRect];
     self->trackingRect = [self->nsView addTrackingRect:[self->nsView bounds] owner:self->nsView userData:nil assumeInside:NO];
 }
 
 - (void)updateTrackingAreas
 {
-    [self->nsView removeTrackingRect:self->trackingRect];
+    if (self->trackingRect) {
+      [self->nsView removeTrackingRect:self->trackingRect];
+    }
     self->trackingRect = [self->nsView addTrackingRect:[self->nsView bounds] owner:self->nsView userData:nil assumeInside:NO];
 }

FREQUENCY : always


",,,,,,,,,,,JDK-8302361,JDK-8301791,JDK-8300665,JDK-8301790,,,,,,,,,,,,,,,,,,,,,JDK-8307925,JDK-8297131,,,,,,JDK-8299159,,,,,,,,,,,JDK-8295779,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2z5ez:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2022-11-09 02:02;pnarayanaswa;Duplicate of JDK-8295779;;;","2022-11-09 05:47;kcr;I don't think this is a duplicate of JDK-8295779, since that bug is a build failure in the JDK, whereas this bug is about running JavaFX once you are able to build using Xcode 14.1.;;;","2022-11-09 15:05;kcr;I see that there is a patch provided in the Description. Perhaps the bug reporter would like to contribute it as a pull request?;;;","2022-12-21 13:06;kcr;I can reproduce this.

Regardless of the version of Xcode / MacOSX SDK that JavaFX is built on, all JavaFX applications will start crashing when run on a JDK that is built with Xcode 14.1 + MacOSX SDK 13.

That makes this a more serious bug, since existing versions of the JavaFX SDK will simply stop working (all applications will crash on startup) if you run it on a JDK built with the latest Xcode.;;;","2022-12-21 16:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/981
Date: 2022-12-22 00:13:03 +0000;;;","2022-12-22 07:24;dukebot;Changeset: 5b96d348
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-12-22 15:22:56 +0000
URL:       https://git.openjdk.org/jfx/commit/5b96d348ebcabb4b6d2e1d95937de3c82a1f6876
;;;","2023-01-19 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1003
Date: 2023-01-19 13:05:49 +0000;;;","2023-02-03 07:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/109
Date: 2023-02-03 15:31:58 +0000;;;","2023-02-03 07:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/128
Date: 2023-02-03 15:34:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Restore windows aarch64 fixpath patch that was removed in 8239708,JDK-8296652,5087133,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gdams,gdams,gdams,2022-11-09 01:45,2022-11-22 22:24,2023-10-01 09:56,2022-11-17 14:14,11,,,,,,,11.0.18,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,,"When [JDK-8239708] was backported to 11u, the Windows aarch64 specific fixpath patch added in https://github.com/openjdk/jdk11u/commit/7bdb8ac7f9f9a83779427da7a6d7f5e9ae548db7#diff-cbf3a26a7e5854d626b3c7e11c8bcb3c287ed95113360aaf220108bfa018e066was missed out. This will need restoring",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z6qj:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-09 02:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1510
Date: 2022-11-09 10:17:53 +0000;;;","2022-11-16 00:07;gdams;Fix request (11u):
Restores a change from [JDK-8248496] that was inadvertently removed when [JDK-8239708] was backported. Tested via GHA and Microsoft's build scripts.;;;","2022-11-17 14:14;dukebot;Changeset: 1f173716
Author:    George Adams <george.adams@microsoft.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-11-17 22:13:21 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/1f173716812a570fe6b6eaf685ec90f66a840792
;;;","2022-11-22 22:21;dukebot;Changeset: 1f173716
Author:    George Adams <george.adams@microsoft.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-11-17 22:13:21 +0000
URL:       https://git.openjdk.org/jdk11u/commit/1f173716812a570fe6b6eaf685ec90f66a840792
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/JdbLastErrorTest.java  test failure,JDK-8296646,5087127,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2022-11-09 01:24,2023-04-12 07:27,2023-10-01 09:56,2023-02-07 02:15,20,21,,,,,,21,core-svc,,0,intermittent,tier3,tier6,,,,,,,,,,,,,,,,,,,"Occasional failures since this test for JDK-8292302 was added (ignoring the failures when -Xcomp was in use).
The failure seen was not with -Xint or -Xcomp.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z6p7:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-12-23 06:36;dcubed;Here's a log file snippet from the jdk-21+4-138-tier3 sighting:

com/sun/jdi/JdbLastErrorTest.java

----------System.out:(22/2958)*----------
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+4-138\\windows-x64-debug.jdk\\jdk-21\\fastdebug\\bin\\java.exe -cp C:\\sb\\prod\\1671804745\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_jdi\\classes\\1\\com\\sun\\jdi\\JdbLastErrorTest.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+4-138\\src.full\\open\\test\\jdk\\com\\sun\\jdi;C:\\sb\\prod\\1671804745\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_jdi\\classes\\1\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+4-138\\src.full\\open\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.1.1\\1\\bundles\\jtreg-7.1.1+1.zip\\jtreg\\lib\\jtreg.jar -Xmx768m -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk\\19\\36\\bundles\\windows-x64\\jdk-19_windows-x64_bin.zip\\jdk-19 -Djava.io.tmpdir=c:\\sb\\prod\\1671804745\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_jdi\\tmp -ea -esa -XX:+CreateCoredumpOnCrash -XX:+UseZGC --enable-preview -agentlib:jdwp=transport=dt_socket,server=y,suspend=y TestNativeLastError ]
[debuggee]:c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+4-138\\windows-x64-debug.jdk\\jdk-21\\fastdebug\\bin\\java.exe -cp C:\\sb\\prod\\1671804745\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_jdi\\classes\\1\\com\\sun\\jdi\\JdbLastErrorTest.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+4-138\\src.full\\open\\test\\jdk\\com\\sun\\jdi;C:\\sb\\prod\\1671804745\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_jdi\\classes\\1\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+4-138\\src.full\\open\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\7.1.1\\1\\bundles\\jtreg-7.1.1+1.zip\\jtreg\\lib\\jtreg.jar -Xmx768m -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk\\19\\36\\bundles\\windows-x64\\jdk-19_windows-x64_bin.zip\\jdk-19 -Djava.io.tmpdir=c:\\sb\\prod\\1671804745\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_jdi\\tmp -ea -esa -XX:+CreateCoredumpOnCrash -XX:+UseZGC --enable-preview -agentlib:jdwp=transport=dt_socket,server=y,suspend=y TestNativeLastError
[debuggee] Listening for transport dt_socket at address: 50503
[jdb] Set uncaught java.lang.Throwable
[jdb] Set deferred uncaught java.lang.Throwable
[jdb] Initializing jdb ...
[jdb] 
[jdb] VM Started: > No frames on the current call stack
[jdb] 
[jdb] main[1] 
> run 
[debuggee] 0
[jdb] > 
[jdb] Exception occurred: java.lang.RuntimeException (uncaught)""thread=main"", TestNativeLastError.testWindows(), line=68 bci=137
[jdb] 68                    throw new RuntimeException(""failed, lastError = "" + lastError);
[jdb] 
[jdb] main[1] 
=======================================
Exception thrown during test execution: 'The application exited' missing from stdout/stderr
=======================================
> quit
[debuggee] Listening for transport dt_socket at address: 50509
----------System.err:(46/2235)----------
[debuggee] WARNING: A restricted method in java.lang.foreign.Linker has been called
[debuggee] WARNING: java.lang.foreign.Linker::nativeLinker has been called by the unnamed module
[debuggee] WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for this module
 stdout: [Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...

VM Started: > No frames on the current call stack

main[1] 
> 
Exception occurred: java.lang.RuntimeException (uncaught)""thread=main"", TestNativeLastError.testWindows(), line=68 bci=137
68                    throw new RuntimeException(""failed, lastError = "" + lastError);

main[1] ];
 stderr: [Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...

VM Started: > No frames on the current call stack

main[1] 
> 
Exception occurred: java.lang.RuntimeException (uncaught)""thread=main"", TestNativeLastError.testWindows(), line=68 bci=137
68                    throw new RuntimeException(""failed, lastError = "" + lastError);

main[1] ]
 exitValue = -1

[debuggee] Exception in thread ""main"" java.lang.RuntimeException: failed, lastError = 0
[debuggee] 	at TestNativeLastError.testWindows(JdbLastErrorTest.java:68)
[debuggee] 	at TestNativeLastError.main(JdbLastErrorTest.java:49)
java.lang.RuntimeException: 'The application exited' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
	at JdbLastErrorTest.runCases(JdbLastErrorTest.java:95)
	at lib.jdb.JdbTest.run(JdbTest.java:96)
	at JdbLastErrorTest.main(JdbLastErrorTest.java:79)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 'The application exited' missing from stdout/stderr
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 'The application exited' missing from stdout/stderr
----------rerun:(47/5793)*----------;;;","2023-02-03 14:49;kevinw;The failure with -XX:+UseSerialGC:

In the test test/jdk/com/sun/jdi/JdbLastErrorTest.java it checks for:

new OutputAnalyzer(jdb.getJdbOutput()).shouldMatch(""The application exited"");
new OutputAnalyzer(jdb.getJdbOutput()).shouldNotMatch(""failed, lastError = "");

However in some logs we are seeing:
[jdb] The application has been disconnected

..so we fail!

This depends whether a vmDeathEvent or a vmDisconnectEvent happens, and is not key to the test, as long as we don't see the ""failed, lastError = "" and we do see the saved VALUE printed.

Other failures with -XX:+UseZGC:

These fail on the first iteration, so don't print any retrieved last error values.
I can reproduce occasional such failures with ZGC, a batch of tests may take 60 iterations to fail, or only one.
Not managed to get a native stacktrace, but as they always fail on the first iteration (and then work), it seems most likely that as we saw before, some VM work or resolution is needed, and makes a Windows system or library call that happens in the context of the app thread, resettting our last error value.  Once ""warmed up"", I never see the issue.

What this test does is on the edge of what is expected to work.  The Panama access to Windows' last error can of course be interrupted by VM work that changes the last error value, but it does generally work.  Not having the test at all is one option, but skipping with ZGC is also reasonable as you don't really _have_ to step through panama code with ZGC.;;;","2023-02-06 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12441
Date: 2023-02-06 14:24:51 +0000;;;","2023-02-07 02:15;dukebot;Changeset: c61a3821
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-02-07 10:14:37 +0000
URL:       https://git.openjdk.org/jdk/commit/c61a38212e8d7ab8d9ece4c414dddd5032bfd6aa
;;;","2023-02-07 07:10;dcubed;The fix for this bug is integrated in jdk-21+9-659.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: NegVI node emits wrong code when vector element basic type is T_BYTE/T_SHORT,JDK-8296638,5087120,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dzhang,dzhang,dzhang,2022-11-08 22:20,2022-11-16 23:36,2023-10-01 09:56,2022-11-10 00:40,20,,,,,,,20,hotspot,,0,c2,oracle-triage-20,vectorapi,,,,,,,,,,,,,,,,,,,"test/jdk/jdk/incubator/vector/Byte256VectorTests.java fails on riscv with the following error:
```
test Byte256VectorTests.negByte256VectorTests (byte [i * 5]): failure
java.lang.AssertionError: at index #2, input = 10 expected [-10] but found [-11]
```

Currently, `NegVI` can only handle the vector element basic type `T_INT` with`vsetvli(t0, x0, Assembler::e32)` but `T_SHORT/T_BYTE` can also be matched with `NegVI`, so these two types of tests are currently failing:
`test/jdk/jdk/incubator/vector/Byte*VectorTests.java`
`test/jdk/jdk/incubator/vector/Short*VectorTests.java`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,,"0|i2z6nn:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-09 00:48;rcastanedalo;Hi [~dzhang], is this issue a bug or an enhancement? If it is a bug (e.g. it results in some form or crash or misbehavior), how does it manifest itself?;;;","2022-11-09 17:37;dzhang;Hi [~ rcastanedalo], thanks for the reminder, I will update the description.;;;","2022-11-09 17:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11074
Date: 2022-11-10 01:43:40 +0000;;;","2022-11-09 23:44;chagedorn;ILW = Wrong execution with NegVI when using byte or short, only on riscv and observed with single test, disable compilation of affected method = HLM = P3;;;","2022-11-09 23:44;chagedorn;Thanks [~dzhang] for the update!;;;","2022-11-10 00:40;dukebot;Changeset: f2acdfdc
Author:    Dingli Zhang <dzhang@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2022-11-10 08:39:04 +0000
URL:       https://git.openjdk.org/jdk/commit/f2acdfdcbd2a49c1167656e73b67b38b545f9472
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix SkipIfEqual on AArch64 and RISC-V,JDK-8296630,5087112,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yadongwang,yadongwang,yadongwang,2022-11-08 18:02,2022-11-16 23:37,2023-10-01 09:56,2022-11-12 19:11,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"SkipIfEqual was supposed to load a flag value from some memory, compare it with a input boolean value, and jump to a specific label they a equals. The implementation on x86 and s390 platforms meets expectations, and ppc uses SkipIfEqualZero. However, on AArch64 and RISC-V platforms, the input argument ""value"" is not used, and jumping-if-equal-zero is generated only. That's not correct, but works well since only false passed on all call sites so far.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,riscv,,,,,,,,generic,,,,,,"0|i2z6lv:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-09 19:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11076
Date: 2022-11-10 03:17:37 +0000;;;","2022-11-12 19:11;dukebot;Changeset: a2cdcdd6
Author:    Yadong Wang <yadongwang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-11-13 03:07:09 +0000
URL:       https://git.openjdk.org/jdk/commit/a2cdcdd65dbbc6717c363fc4e22d9b16a4dea986
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stage steals focus on scene change,JDK-8296621,5087103,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsayao,tsayao,tsayao,2022-11-08 16:40,2023-04-20 10:33,2023-10-01 09:56,2022-12-07 07:20,jfx20,,,,,,,jfx20,javafx,,0,,,,,,,,,,,,,,,,,,,,,,"There's a requestFocus() call on setScene() that causes the fx window to steal the user focus.

Steps to reproduce:
1) Run the attached sample
2) Focus another window
3) On scene change the focus will be stealed.

Tested on Linux, but probably will either steal focus or show notifications/flash the taskbar on other platforms.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304476,,,,,,,,,,,JDK-8306121,JDK-8304734,,,,,,,,"2022-11-08 16:37;tsayao;FocusTest.java;https://bugs.openjdk.org/secure/attachment/101506/FocusTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2z6jv:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2022-11-08 17:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/940
Date: 2022-11-09 00:53:19 +0000;;;","2022-12-07 07:20;dukebot;Changeset: 5b0d3b55
Author:    Thiago Milczarek Sayao <tsayao@openjdk.org>
Date:      2022-12-07 15:19:23 +0000
URL:       https://git.openjdk.org/jfx/commit/5b0d3b554aa73d1e92a5f449a3f44808ab3b5f35
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upgrade jQuery to 3.6.1,JDK-8296619,5087100,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,mtrudeau,mtrudeau,2022-11-08 15:43,2023-01-18 06:15,2023-10-01 09:56,2022-12-05 08:26,20,,,,,,,20,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"We need to upgrade to jQuery 3.6.1 for JDK 20.

https://github.com/jquery/jquery/releases/tag/3.6.1

",,,,,,,,,,,JDK-8297550,JDK-8300044,JDK-8300532,JDK-8297551,,,,,,,,,,,,,,,,JDK-8215074,,,,,,,,,,,,,,,,,,,,,,,JDK-8282214,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z6j7:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-11-14 09:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11138
Date: 2022-11-14 17:19:22 +0000;;;","2022-12-05 08:26;dukebot;Changeset: 6a7a0db5
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2022-12-05 16:23:01 +0000
URL:       https://git.openjdk.org/jdk/commit/6a7a0db587446160e77c9ac225669e5a0c9bc638
;;;","2023-01-04 03:35;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
One of the regular required updates of external libs.
I had to resolve a test due to context differences.
Test passes. SAP nightly testing passed.;;;","2023-01-04 03:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1035
Date: 2023-01-04 11:36:01 +0000;;;","2023-01-16 09:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1661
Date: 2023-01-16 14:17:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
use of undeclared identifier 'IPV6_DONTFRAG',JDK-8296615,5087096,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-11-08 14:13,2022-11-14 19:22,2023-10-01 09:56,2022-11-09 09:38,,,,,,,,20,core-libs,,0,noreg-trivial,tencent-interest,,,,,,,,,,,,,,,,,,,,"Build failure on MacOS:
=== Output from failing command(s) repeated here ===
* For target support_native_jdk.net_libextnet_MacOSXSocketOptions.o:
/Users/xueleifan/workspace/jdk-dev/src/jdk.net/macosx/native/libextnet/MacOSXSocketOptions.c:207:43: error: use of undeclared identifier 'IPV6_DONTFRAG'
        rv = setsockopt(fd, IPPROTO_IPV6, IPV6_DONTFRAG, &value, sizeof(value));
                                          ^
/Users/xueleifan/workspace/jdk-dev/src/jdk.net/macosx/native/libextnet/MacOSXSocketOptions.c:229:43: error: use of undeclared identifier 'IPV6_DONTFRAG'
        rv = setsockopt(fd, IPPROTO_IPV6, IPV6_DONTFRAG, &value, sizeof(value));
                                          ^
/Users/xueleifan/workspace/jdk-dev/src/jdk.net/macosx/native/libextnet/MacOSXSocketOptions.c:246:43: error: use of undeclared identifier 'IPV6_DONTFRAG'
        rv = getsockopt(fd, IPPROTO_IPV6, IPV6_DONTFRAG, &optval, &sz);
                                          ^
3 errors generated.

$ uname -a
Darwin XFans-MBP 21.6.0 Darwin Kernel Version 21.6.0: Mon Aug 22 20:19:52 PDT 2022; root:xnu-8020.140.49~2/RELEASE_ARM64_T6000 arm64

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z6ib:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-11-08 14:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11047
Date: 2022-11-08 22:28:07 +0000;;;","2022-11-09 09:38;dukebot;Changeset: 17e34123
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-11-09 17:36:12 +0000
URL:       https://git.openjdk.org/jdk/commit/17e3412363bf5263c26d9bf1dfbef1fecc3d11a9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Need to backout JDK-6447817 for releases before JDK 20,JDK-8296614,5087095,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,valeriep,valeriep,valeriep,2022-11-08 13:55,2023-01-05 20:23,2023-10-01 09:56,2022-12-02 12:54,,,,,,,,8u371,docs,,0,20-na,hgupdate-sync,,,,,,,,,,,,,,,,,,,,"Sean pointed out the Standard Algorithms guide is considered a standard specification and its update requires filing CSR for latest release, and doing an MR for older releases.
Thus we need to backout the changes made under JDK-6447817 for older releases.",,,,,,,,,,,JDK-8297762,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6447817,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z6i3:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/net/HttpURLConnection/SetAuthenticator/HTTPSetAuthenticatorTest.java failed with ""BindException: Address already in use: connect""",JDK-8296610,5087088,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dcubed,dcubed,2022-11-08 12:40,2023-07-11 00:39,2023-10-01 09:56,2022-12-14 08:41,11.0.20-oracle,20,,,,,,21,core-libs,,0,intermittent,noreg-self,tier2,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/net/HttpURLConnection/SetAuthenticator/HTTPSetAuthenticatorTest.java

Here's a snippet from the log file:

Client: Using authenticator #2: 1904158599-11@HTTPTest$HttpTestAuthenticator
Client: FIRST request: http://127.0.0.1:50150/ GET
Server307: Got GET: /
Accept: [*/*]
Connection: [keep-alive]
Host: [127.0.0.1:50150]
User-agent: [Java/20-ea]
Server307: Redirecting to server
Server307: Sent back 307 Location: http://127.0.0.1:50146/
NoAuth Server: Got GET: /
Accept: [*/*]
Connection: [keep-alive]
Host: [127.0.0.1:50146]
User-agent: [Java/20-ea]
Response code: 200
Response body: 

Client: NEXT request: http://127.0.0.1:50150/ POST
----------System.err:(85/6239)----------
WARNING: HttpsProxyTunnel is an experimental test class
java.net.BindException: Address already in use: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:580)
	at java.base/sun.nio.ch.Net.connect(Net.java:569)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:576)
	at java.base/java.net.Socket.connect(Socket.java:666)
	at java.base/java.net.Socket.connect(Socket.java:600)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:533)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:638)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:281)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1310)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1288)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1129)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1058)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1431)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1402)
	at HTTPTestClient.connect(HTTPTestClient.java:63)
	at HTTPSetAuthenticatorTest.run(HTTPSetAuthenticatorTest.java:142)
	at HTTPTest.test(HTTPTest.java:217)
	at HTTPTest.test(HTTPTest.java:185)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1006)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at HTTPTest.execute(HTTPTest.java:178)
	at HTTPSetAuthenticatorTest.main(HTTPSetAuthenticatorTest.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)
java.io.UncheckedIOException: java.net.BindException: Address already in use: connect
	at HTTPTest.test(HTTPTest.java:223)
	at HTTPTest.test(HTTPTest.java:185)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1006)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at HTTPTest.execute(HTTPTest.java:178)
	at HTTPSetAuthenticatorTest.main(HTTPSetAuthenticatorTest.java:97)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)
Caused by: java.net.BindException: Address already in use: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:580)
	at java.base/sun.nio.ch.Net.connect(Net.java:569)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:576)
	at java.base/java.net.Socket.connect(Socket.java:666)
	at java.base/java.net.Socket.connect(Socket.java:600)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:533)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:638)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:281)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1310)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1288)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1129)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1058)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1431)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1402)
	at HTTPTestClient.connect(HTTPTestClient.java:63)
	at HTTPSetAuthenticatorTest.run(HTTPSetAuthenticatorTest.java:142)
	at HTTPTest.test(HTTPTest.java:217)
	... 16 more

JavaTest Message: Test threw exception: java.io.UncheckedIOException: java.net.BindException: Address already in use: connect",,,,,,,,,,,JDK-8302701,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302650,,,,,,,,,,,,,,,,,JDK-8302650,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2z6gj:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-11-09 02:08;dfuchs;This is one of these issues where there's not much that can be done: it's either ephemeral port exhaustion on the machine or concurrent connection limits enforced by the underlying OS.;;;","2022-12-12 06:19;dfuchs;I don't think this is worth fixing in 20 unless we see more occurrence (there's only one so far). I'm planning to attempt a fix for 21. We might then envisage to backport it if we still see some failure in 20 but none in 21.;;;","2022-12-12 07:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11634
Date: 2022-12-12 14:50:21 +0000;;;","2022-12-14 08:41;dukebot;Changeset: 0dce5b81
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-12-14 16:39:32 +0000
URL:       https://git.openjdk.org/jdk/commit/0dce5b811d64ac17b9580d6a2d8eca1df70990a1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skip failing test StraightLineTest on Linux,JDK-8296592,5087070,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-11-08 10:30,2022-11-29 06:13,2023-10-01 09:56,2022-11-09 10:27,jfx20,,,,,,,jfx20,javafx,,0,noreg-self,sn_131,test_sprint,testbug,,,,,,,,,,,,,,,,,,Until JDK-8296590 can be fixed we need to skip StraightLineTest on Linux since it consistently fails.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296590,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z6cj:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-11-09 06:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/943
Date: 2022-11-09 14:33:37 +0000;;;","2022-11-09 10:27;dukebot;Changeset: 706261bb
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-11-09 18:22:59 +0000
URL:       https://git.openjdk.org/jfx/commit/706261bb3bc23af214d9e6f4ae429cb47c0fba0d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StraightLineTest fails always on Linux and sometimes on other platforms,JDK-8296590,5087068,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbhaskar,kcr,kcr,2022-11-08 10:28,2023-05-23 11:08,2023-10-01 09:56,2023-04-27 06:31,jfx20,,,,,,,jfx21,javafx,,0,noreg-self,sn_142,test_sprint,testbug,,,,,,,,,,,,,,,,,,"This test consistently fails for me on Linux:

StraightLineTest > testLine FAILED
    org.junit.ComparisonFailure: expected:<rgba([0,0,0],255)> but was:<rgba([18,0,19],255)>
        at org.junit.Assert.assertEquals(Assert.java:117)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at test.javafx.scene.web.StraightLineTest.lambda$testLine$5(StraightLineTest.java:173)

We should probably skip this test on Linux until it is fixed, so I'll file a bug to do that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269067,JDK-8296592,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z6c3:",9223372036854775807,b16,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-11-10 12:54;almatvee;Got similar failure on macOS 12.6 x64. This failure is intermittent.

org.junit.ComparisonFailure: expected:<rgba([0,0,0],255)> but was:<rgba([255,255,255],255)>
	at org.junit.Assert.assertEquals(Assert.java:117)
	at org.junit.Assert.assertEquals(Assert.java:146)
	at test.javafx.scene.web.StraightLineTest.lambda$testLine$5(StraightLineTest.java:173);;;","2022-11-14 16:30;angorya;Failed for me on Mac M1 

StraightLineTest > testLine FAILED
    org.junit.ComparisonFailure: expected:<rgba([0,0,0],255)> but was:<rgba([255,255,255],255)>
        at org.junit.Assert.assertEquals(Assert.java:117)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at test.javafx.scene.web.StraightLineTest.lambda$testLine$5(StraightLineTest.java:178)

Second run with --debug option did not fail.;;;","2022-11-14 16:38;angorya;Noticed the test is trying to take a snapshot immediately after loadContent(), which I suspect is way too soon.
I would suggest to execute a script (some kind of a no-op) and take a snapshot right after it returns, hoping that the embedded browser executes loadContent and executeScript sequentially.;;;","2022-11-14 16:58;kcr;Not sure about that. The test already does wait for the content to be loaded (see the call to Util.await(webViewStateLatch)). It should be ready to take a snapshot after that. Still, there's something going on here, so Jay will need to take a look.;;;","2022-11-15 08:33;angorya;Util.await() on line 161 waits for event coming from the focused property (line 130), which is not really what we want.
We want to wait for the end of page loading by the WebEngine - which is an asynchronous method.  What that means is when it returns, the new content has been sent to the engine, but engine will take its sweet time rendering the content.

It is less clear what we can use to signal the page loading completed event.  I suspect we can try executing a script would do the trick, because it makes no sense for the web engine to execute a script when page has not been loaded yet, and also because it has a return value, that is, it's a synchronous method.;;;","2022-11-15 09:06;kcr;We already have a mechanism for waiting until the web page is loaded using the worker state ChangeListener. See lines 123-128. One possible problem I thought of yesterday is that we don't actually wait for that change listener, but rather just trigger focus; if the webView were to become focused via some other means, it would release the latch too early. If this is a problem, a possible way around that would be to initialize the latch to 2 and also countdown when the worker state goes to SUCCEEDED.
;;;","2022-11-15 09:07;angorya;I think intermittent failures in CSSFilterTest (ignored JDK-8269067, line 125) might be caused by the same issue.;;;","2022-11-15 09:14;angorya;> SUCCEEDED

I see.  This looks like a rather convoluted way, trying to involve the focus subsystem.  What if the webView gets focus on its own?  And also, should load worker state callback be sufficient?  And if it isn't we might have another issue.

Using a script (especially one that uses something in the page being loaded) should be more reliable.;;;","2022-11-15 09:48;kcr;>  I see. This looks like a rather convoluted way, trying to involve the focus subsystem. What if the webView gets focus on its own? And also, should load worker state callback be sufficient? And if it isn't we might have another issue. 

Yes to all of the above. I'm not sure what the original rationale was for involving focus, but several web tests do this.

>  Using a script (especially one that uses something in the page being loaded) should be more reliable. 

Possibly, but I'd prefer not to have to rely on a script in our html tests that otherwise don't need to use a script.
;;;","2022-11-15 09:52;angorya;the script might either check for something on the page (using an id, for example), or even be a simple expression like

.executeScript(""document;"");

I think the fact that we have multiple @Ignore's around this code is telling us the code is ""wrong"".;;;","2023-04-18 10:19;kcr;A couple instances of failures were seen on macOS as well.;;;","2023-04-25 04:40;jbhaskar;The test is failing in case
1. when snapshot is taken , just before finishing web view load
So, need to introduce a sleep before taking snapshot;;;","2023-04-25 04:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1115
Date: 2023-04-25 11:42:28 +0000;;;","2023-04-25 13:01;jvos;Note that there are similar issues with WebView snapshots, e.g. https://bugs.openjdk.org/browse/JDK-8237583;;;","2023-04-27 06:31;dukebot;Changeset: 1975165b
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Date:      2023-04-27 13:30:06 +0000
URL:       https://git.openjdk.org/jfx/commit/1975165bed2942eaad9a1d7685839d2f77339ccb
;;;",,,,,,,,,,,,,,,,,,,,
PixelBufferDrawTest fails on some systems,JDK-8296589,5087067,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lkostyra,kcr,kcr,2022-11-08 09:57,2022-11-29 06:14,2023-10-01 09:56,2022-11-14 06:00,jfx20,,,,,,,jfx20,javafx,,0,noreg-self,sn_131,test_sprint,testbug,,,,,,,,,,,,,,,,,,"On my MacBook Pro M1 system, I consistently get the following system test failures in PixelBufferDrawTest:

PixelBufferDrawTest > testByteBgraPreIndirectBuffer FAILED
    java.lang.AssertionError: expected:<0.10000000149011612> but was:<0.10588235408067703>

PixelBufferDrawTest > testIntArgbPreDirectBuffer FAILED
    java.lang.AssertionError: expected:<0.10000000149011612> but was:<0.10588235408067703>

PixelBufferDrawTest > testByteBgraPreDirectBuffer FAILED
    java.lang.AssertionError: expected:<0.10000000149011612> but was:<0.10588235408067703>

PixelBufferDrawTest > testIntArgbPreIndirectBuffer FAILED
    java.lang.AssertionError: expected:<0.10000000149011612> but was:<0.10588235408067703>

This is a problem with the test not having enough tolerance; the test uses a delta value of 0.005 and the observed difference on my system is slightly greater than that (by contrast, our other Robot tests use a much larger delta of 0.07). If I locally modify my test to use a delta of 0.01 (which is still 7 times tighter than most of our robot tests), they all pass.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z6bv:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-11-09 10:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/944
Date: 2022-11-09 18:00:31 +0000;;;","2022-11-14 06:00;dukebot;Changeset: 0ee116d3
Author:    Lukasz Kostyra <lukasz.kostyra@oracle.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-11-14 13:58:43 +0000
URL:       https://git.openjdk.org/jfx/commit/0ee116d3ff7d9b91df1424b2cebd4b771adb0c89
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mark two RobotTest methods as unstable on HiDPI Windows systems,JDK-8296556,5087030,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kpk,kcr,kcr,2022-11-08 08:50,2022-11-29 06:16,2023-10-01 09:56,2022-11-17 05:06,jfx20,,,,,,,jfx20,javafx,,0,hidpi,noreg-self,sn_131,test_sprint,testbug,,,,,,,,,,,,,,,,,"The following two test methods in RobotTest intermittently fail when running on a Windows system with HiDPI scaling:

RobotTest::testScreenCapture : JDK-8207379
RobotTest::testPixelCaptureAverage : JDK-8255079

These methods should be marked as unstable on Windows if the screen scale is > 1, until those test bugs can be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8207379,JDK-8255079,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2z63n:",9223372036854775807,b09,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2022-11-17 03:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/951
Date: 2022-11-16 09:04:28 +0000;;;","2022-11-17 05:06;dukebot;Changeset: 74af45d6
Author:    Karthik P K <karthikpk111@gmail.com>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2022-11-17 13:05:51 +0000
URL:       https://git.openjdk.org/jfx/commit/74af45d69828bf5bd8cea5b7fbf8e8c6cac4f689
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable hotspot/tier1 for 64-bit builds in GHA for 8u,JDK-8296555,5087029,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zzambers,zzambers,zzambers,2022-11-08 08:45,2022-11-16 07:32,2023-10-01 09:56,2022-11-08 10:53,openjdk8u362,,,,,,,openjdk8u362,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,,"It is now possible to enable hostspot/tier1 in Github Actions at least for 64-bit builds as problematic compiler/rtm tests have been problem listed [1]. So far only for 64-bit builds, as there are still some tests failing for 32-bit builds, which need to be fixed, before it (hotspot/tier1) can be enabled there.

All tests passed.

[1] https://bugs.openjdk.org/browse/JDK-8295915",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z63f:",9223372036854775807,b03,,,,,,,,,,,,"2022-11-08 08:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/163
Date: 2022-11-08 16:45:36 +0000;;;","2022-11-08 09:02;zzambers;Fix request (8u):

Enable hotspot/tier1 for 64-bit builds in GHA (there are still few test fixes needed for 32-bit)
Modifies GHA workflow file only. All tests passed.
;;;","2022-11-08 10:53;dukebot;Changeset: c605aa3f
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2022-11-08 18:50:54 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/c605aa3f5aa3e2370edcc9b3feb01f6f16541e2e
;;;","2022-11-16 07:32;dukebot;Changeset: c605aa3f
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2022-11-08 18:50:54 +0000
URL:       https://git.openjdk.org/jdk8u/commit/c605aa3f5aa3e2370edcc9b3feb01f6f16541e2e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GCM using more memory than necessary with in-place operations,JDK-8296507,5086954,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,ascarpino,ascarpino,ascarpino,2022-11-07 18:42,2022-12-12 13:53,2023-10-01 09:56,2022-12-06 13:38,18,19,,,,,,20,security-libs,,0,noreg-perf,,,,,,,,,,,,,,,,,,,,,"With the addition of the AVX512 intrinsic that combined gctr and ghash operations, caused a check for in-place operations to require a new buffer for decryption to avoid complications with tag mismatches.  This below mail thread and test showed that TLS, who uses in-place byte[] or heap bytebuffers can drive up memory usage when the system.  Direct ByteBuffers are unaffected as the intrinsic does not call them directly.

https://mail.openjdk.org/pipermail/security-dev/2022-October/032723.html
https://mail.openjdk.org/pipermail/security-dev/2022-November/032757.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267125,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z5mr:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2022-11-14 19:54;ascarpino;While I saw a small ops/sec difference between jdk17 and 19 when I ran the performance numbers, the memory usage was a lot larger when looking at JFR.  The test mentioned in the mailing links showed ops/sec went up (bad direction) from 77 to 90, but JFR byte[] allocations went from 700MB to 13.7GB.  After change in this fix, the numbers returned to normal.

No longer are in-place operations using the combined GCM intrinsic.  They must go back to first running ghash over the whole buffer, then decrypting like it was in jdk17.  From what I have seen in perf testing, the numbers have increased despite using slower intrinsics at small and larger data sizes. This shows the memory usage slowed the system despite using the faster intrinsic.

With a modified perf test for in-place ops decrypt:
    JDK 17:   122913.554 ops/sec
    JDK 19:    94885.008 ops/sec
    Post fix:  122735.804 ops/sec 

;;;","2022-11-15 14:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11121
Date: 2022-11-13 02:54:10 +0000;;;","2022-12-06 13:38;dukebot;Changeset: b4da0ee7
Author:    Anthony Scarpino <ascarpino@openjdk.org>
Date:      2022-12-06 21:37:12 +0000
URL:       https://git.openjdk.org/jdk/commit/b4da0ee706b6a274e6ba4e5483ef972f45c9f81e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in G1PLABAllocator::PLABData,JDK-8296504,5086950,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,manc,manc,manc,2022-11-07 16:15,2022-11-14 19:21,2023-10-01 09:56,2022-11-08 11:38,20,,,,,,,20,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,,,,,,"Colleague Justin King (jcking@google.com) made LeakSanitizer working with HotSpot, and identified a memory leak in G1PLABAllocator::PLABData. The pointer array _alloc_buffer introduced in JDK-8291912 should be freed in the destructor G1PLABAllocator::~PLABData().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291912,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,"0|i2z5lv:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-07 16:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11032
Date: 2022-11-08 00:20:28 +0000;;;","2022-11-08 11:38;dukebot;Changeset: 0ee25de7
Author:    Man Cao <manc@openjdk.org>
Date:      2022-11-08 19:37:31 +0000
URL:       https://git.openjdk.org/jdk/commit/0ee25de704eb8f179888812bd9b1e7bebc384fd6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Overzealous check in sizecalc.h prevents large memory allocation,JDK-8296496,5086942,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,kizune,kizune,2022-11-07 13:35,2023-02-15 11:56,2023-10-01 09:56,2022-11-10 14:45,11,17,19,20,8,,,20,client-libs,,0,11-bp,17-bp,8-bp,cssn22_11_01,cssn22_11_02,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,sn_130,sn_131,,The new macro in sizecalc.h that is supposed to catch the integer multiplication overflow while allocating and reallocating memory for native arrays is too restrictive and limits the amount of memory that can be allocated - especially on the 32-bit systems. Right now the existing functionality that uses this macro does not require such memory allocation but i think we should be proactively defensive in anticipation that this macro might be used in the future for something else that will require large amount of memory allocated at once. ,,,,,,,,,,,JDK-8297894,JDK-8297893,JDK-8297895,JDK-8297892,JDK-8297151,JDK-8297461,JDK-8297655,JDK-8298139,JDK-8297647,JDK-8297646,JDK-8297734,,,,,,,,,JDK-8292652,,,,,,,,,,,,JDK-8296957,,,,,,,,,,,JDK-8291675,JDK-8297447,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z5k3:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-11-07 14:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11030
Date: 2022-11-07 22:04:55 +0000;;;","2022-11-10 14:45;dukebot;Changeset: 84e12244
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-11-10 22:43:02 +0000
URL:       https://git.openjdk.org/jdk/commit/84e12244a4ff82b3307a5ffe6fbe9dded7b08d86
;;;","2022-11-14 05:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/67
Date: 2022-11-14 13:02:59 +0000;;;","2022-11-14 05:15;aivanov;Fix request (19u)

Clean backport. This is the fix for a problem (regression) introduced by the October CPU.
The checks in ""sizecalc.h"" are too restrictive.
Review https://github.com/openjdk/jdk19u/pull/67;;;","2022-11-14 11:11;serb;working on backports for 8/11/13/15/17.;;;","2022-11-15 11:40;aivanov;Follow-up fix: JDK-8296957 - One more cast in SAFE_SIZE_NEW_ARRAY2;;;","2022-11-23 20:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/928
Date: 2022-11-24 02:16:18 +0000;;;","2022-11-24 01:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/306
Date: 2022-11-24 02:19:30 +0000;;;","2022-11-24 20:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/432
Date: 2022-11-24 02:29:08 +0000;;;","2022-11-25 00:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1551
Date: 2022-11-24 02:33:50 +0000;;;","2022-11-25 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/194
Date: 2022-11-24 02:37:43 +0000;;;","2022-11-27 20:29;serb;Fix request (17u,15u,13u,11u,8u)

Clean backport. This is the fix for a problem (regression) introduced by the October CPU.
The checks in ""sizecalc.h"" are too restrictive.
Review 17u-dev: https://git.openjdk.org/jdk17u-dev/pull/928
Review 15u-dev: https://git.openjdk.org/jdk15u-dev/pull/306
Review 13u-dev: https://git.openjdk.org/jdk13u-dev/pull/432
Review 11u-dev: https://git.openjdk.org/jdk11u-dev/pull/1551
Review 8u-dev: https://git.openjdk.org/jdk8u-dev/pull/194;;;",,,,,,,,,,,,,,,,,,,,,,,
tools/jpackage/windows/WinL10nTest.java fails with timeout,JDK-8296489,5086934,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,msheppar,msheppar,2022-11-07 11:00,2022-12-14 11:03,2023-10-01 09:56,2022-12-05 16:16,20,,,,,,,20,tools,,0,intermittent,same-binary,sbr,sn_132,sn_133,,,,,,,,,,,,,,,,,"
[12:47:53.510] TRACE: assertEquals(2): Check the package has 2 top installation directories
[12:47:53.510] TRACE: Not verifying desktop integration because package was unpacked, not installed
[12:47:53.510] TRACE: assertFalse(): Check [.\\test.dd2031ed\\unpacked-msi\\Program Files\\WinL10nTest\\service-installer.exe] path doesn't exist
[12:47:53.510] TRACE: assertStringListEquals(): Check there are no files with [.jpackage.xml] name in the package
[12:47:53.510] TRACE: assertStringListEquals(): Check there is only one file with [.package] name in the package
[12:47:53.510] TRACE: assertStringListEquals(1, .\\test.dd2031ed\\unpacked-msi\\Program Files\\WinL10nTest\\app\\.package)
[12:47:53.510] TRACE: assertTrue(): Check [.\\test.dd2031ed\\unpacked-msi\\Program Files\\WinL10nTest\\runtime] path exists
[12:47:53.510] TRACE: assertTrue(): Check [.\\test.dd2031ed\\unpacked-msi\\Program Files\\WinL10nTest\\runtime] is a directory
[12:47:53.510] TRACE: assertTrue(): Check [.\\test.dd2031ed\\unpacked-msi\\Program Files\\WinL10nTest\\WinL10nTest.exe] path exists
[12:47:53.510] TRACE: assertTrue(): Check [.\\test.dd2031ed\\unpacked-msi\\Program Files\\WinL10nTest\\WinL10nTest.exe] is a file
[12:47:53.510] TRACE: assertTrue(): Check [.\\test.dd2031ed\\unpacked-msi\\Program Files\\WinL10nTest\\WinL10nTest.exe] file is executable
[12:47:53.510] TRACE: assertTrue(): Check [.\\test.dd2031ed\\unpacked-msi\\Program Files\\WinL10nTest\\app\\WinL10nTest.cfg] path exists
[12:47:53.510] TRACE: assertTrue(): Check [.\\test.dd2031ed\\unpacked-msi\\Program Files\\WinL10nTest\\app\\WinL10nTest.cfg] is a file
[12:47:53.510] TRACE: Not running [.\\test.dd2031ed\\unpacked-msi\\Program Files\\WinL10nTest\\WinL10nTest.exe] launcher because application runtime directory [.\\test.dd2031ed\\unpacked-msi\\Program Files\\WinL10nTest\\runtime] is incomplete
[12:47:53.510] TRACE: Deleting [.\\test.dd2031ed] directory recursively
[12:47:53.525] [       OK ] WinL10nTest(null, zh-cn, null, zh, CN, true).test; checks=24
[12:47:53.525] [==========] 17 tests ran
[12:47:53.525] [  PASSED  ] 17 tests
----------System.err:(1/16)----------
STATUS:Passed.

test result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-20+18-1281\windows-x64.jdk\jdk-20\bin\java' timed out (timeout set to 1440000ms, elapsed time including timeout handling was 1460054ms).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2z5ib:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-12-05 14:19;asemenyuk;Simply increase the timeout. The test runs a number of candle.exe light.exe commands that can take time on slower or busy host;;;","2022-12-05 14:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11522
Date: 2022-12-05 22:20:19 +0000;;;","2022-12-05 16:16;dukebot;Changeset: 8d8a28ff
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-12-06 00:14:31 +0000
URL:       https://git.openjdk.org/jdk/commit/8d8a28ffcbd974bb1a5389839a7e3046a232f85d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BuildEEBasicConstraints.java test fails with SunCertPathBuilderException,JDK-8296485,5086930,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rhalade,rhalade,rhalade,2022-11-07 10:25,2023-04-17 07:10,2023-10-01 09:56,2022-11-07 11:14,11,17,20,7,8,,,20,security-libs,,0,CPU23_01-critical-approved,CPU23_01-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,tier2,,,,,,,,,,"open/test/jdk/java/security/cert/CertPathBuilder/targetConstraints/BuildEEBasicConstraints.java

sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at java.base/sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:141)
	at java.base/sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:126)
	at java.base/java.security.cert.CertPathBuilder.build(CertPathBuilder.java:297)
	at jdk.test.lib.security.CertUtils.build(CertUtils.java:604)
	at BuildEEBasicConstraints.main(BuildEEBasicConstraints.java:77)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)
",,,,,,,,,,,JDK-8298107,JDK-8296713,JDK-8297104,JDK-8296978,JDK-8297005,JDK-8296766,JDK-8296760,JDK-8306107,JDK-8296712,JDK-8296844,JDK-8296798,JDK-8297029,JDK-8296716,JDK-8297077,JDK-8297058,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z5hf:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-11-07 10:49;rhalade;Test certificates are expired but backdated validation can be performed to fix this issue.;;;","2022-11-07 11:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11027
Date: 2022-11-07 18:51:52 +0000;;;","2022-11-07 11:14;dukebot;Changeset: 520db1ee
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2022-11-07 19:09:57 +0000
URL:       https://git.openjdk.org/jdk/commit/520db1eeb18797c782ddfad90467e19bbdd424ac
;;;","2022-11-08 13:42;vrudomet;Fix request [11u, 17u, 19u] 

Clean backport, jtreg tier2 test fix, low risk.
Test fails before the fix and passes after the fix.;;;","2022-11-08 15:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/63
Date: 2022-11-08 23:43:42 +0000;;;","2022-11-08 15:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/865
Date: 2022-11-08 23:43:37 +0000;;;","2022-11-08 15:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1509
Date: 2022-11-08 23:43:40 +0000;;;","2022-11-21 08:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/188
Date: 2022-11-21 15:31:36 +0000;;;","2022-11-22 16:42;aoqi;Fix request [8u]

Trivial test change, no risk, parity with Oracle JDK 8. The patch applies clean after the fix of the copyright year and the import part. This backport fixes the test failure. Reviewed by [~phh].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
java/security/cert/pkix/policyChanges/TestPolicy.java is failing,JDK-8296480,5086915,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rhalade,weijun,weijun,2022-11-07 08:09,2023-04-17 07:09,2023-10-01 09:56,2022-11-07 10:23,11,17,19,7,8,,,20,security-libs,,0,CPU23_01-critical-approved,CPU23_01-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,tier2,,,,,"Certificates created 20 years ago expired today.

CertificateExpiredException: NotAfter: Mon Nov 07 11:57:03 UTC 2022",,,,,,,,,,,JDK-8296562,JDK-8297125,JDK-8296996,JDK-8296869,JDK-8296843,JDK-8297464,JDK-8296560,JDK-8296561,JDK-8306105,JDK-8297630,JDK-8296868,JDK-8296998,JDK-8298106,JDK-8297128,JDK-8296997,JDK-8297631,JDK-8297101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z5e3:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-11-07 09:39;rhalade;The test is checking the policy inside the certificates. Simple fix would be to set backdated validation date in PKIXParameters.;;;","2022-11-07 09:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11026
Date: 2022-11-07 17:43:42 +0000;;;","2022-11-07 10:23;dukebot;Changeset: b6ea69c0
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2022-11-07 18:22:08 +0000
URL:       https://git.openjdk.org/jdk/commit/b6ea69c06aca7f013e26596cebd039960c5b4d34
;;;","2022-11-10 05:54;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.19-oracle,17.0.7-oracle.
No risk, only a test change.  It fixes an issue we see in our tests currently.
Clean backport.
Test passes and fails without the change.;;;","2022-11-10 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/876
Date: 2022-11-10 13:56:36 +0000;;;","2022-11-10 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1512
Date: 2022-11-10 14:04:01 +0000;;;","2022-11-17 09:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/69
Date: 2022-11-16 14:53:06 +0000;;;","2022-11-17 22:44;jnibedita;Fix request [19u]

Its a clean backport.
No risk, only a test change. This backport fixes the test failure. ;;;","2022-11-21 08:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/189
Date: 2022-11-21 15:46:18 +0000;;;","2022-11-21 16:38;aoqi;Fix request [8u]

Clean backport of test, trivial change, no risk, parity with Oracle JDK 8. This backport is only a test change and fixes the test failure.;;;","2022-11-25 02:47;yan;Fix request (13u,15u):
clean backport of a test fix.;;;","2022-11-25 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/433
Date: 2022-11-25 09:22:22 +0000;;;","2022-11-25 03:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/307
Date: 2022-11-25 09:04:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,
Remove stray comment about POST_STRIP_CMD,JDK-8296479,5086914,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-11-07 06:54,2022-11-14 19:19,2023-10-01 09:56,2022-11-07 11:07,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"The variable POST_STRIP_CMD has been removed, but not all comments about it",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z5dv:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-07 07:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11021
Date: 2022-11-07 14:56:09 +0000;;;","2022-11-07 11:06;dukebot;Changeset: b29817a6
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-11-07 19:02:30 +0000
URL:       https://git.openjdk.org/jdk/commit/b29817a626ce58fb06a104720317ea62ea6697d7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in JVM_StartThread with the integration of Virtual threads,JDK-8296463,5086545,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,webbuggrp,webbuggrp,2022-11-02 08:36,2022-12-12 18:11,2023-10-01 09:56,2022-11-17 16:47,18,19,,,,,,20,hotspot,,0,capbug,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,loom,noreg-hard,redhat-interest,threads,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Microsoft Windows [Version 10.0.19044.2006]

openjdk version ""19.0.1"" 2022-10-18
OpenJDK Runtime Environment (build 19.0.1+10-21)
OpenJDK 64-Bit Server VM (build 19.0.1+10-21, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
See https://youtrack.jetbrains.com/issue/IDEA-305072 for a related discussion.

The attached testcase runs fine without a debugger, but if you run it in debug mode the JVM will get progressively slower until ~2 hours later the JVM will hang indefinitely.

Sometimes the hang is so bad that jstack and jmap will refuse to connect (they are probably unable to spawn a new thread).

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Start a debugging session of the attached testcase: 
2. About 2 hours - 2:30 hours later, output will cease and the JVM will hang indefinitely.
3. If you run the same testcase without a debugging session, it will not hang.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
There are about 500 live threads running at a time and no threads or memory seem to be leaking (as far as VisualVM seems to show), so I am not expecting a hang or a crash.
ACTUAL -
JVM hangs. Often when this happens, jstack (and related tools) cannot attach to probe the state of the JVM.

---------- BEGIN SOURCE ----------
pom.xml:
----------------------------
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.example</groupId>
	<artifactId>ThreadsHang</artifactId>
	<version>1.0-SNAPSHOT</version>

	<properties>
		<maven.compiler.release>19</maven.compiler.release>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>31.1-jre</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>2.0.3</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.4.4</version>
			<exclusions>
				<exclusion>
					<groupId>javax.activation</groupId>
					<artifactId>activation</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.mail</groupId>
					<artifactId>javax.mail</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.10.1</version>
				<configuration>
					<showWarnings>true</showWarnings>
					<showDeprecation>true</showDeprecation>
					<compilerArgs>
						<arg>-Xlint:all,-preview,-try</arg>
						<arg>-Xdiags:verbose</arg>
						<arg>-Werror</arg>
						<arg>--enable-preview</arg>
					</compilerArgs>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>

PlatformThreadsTestcase:
---------------------------------------
import com.google.common.util.concurrent.ThreadFactoryBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.LongAdder;

public class PlatformThreadsTestcase
{
	private final ThreadFactory blockingTasksThreadFactory = new ThreadFactoryBuilder().
		setNameFormat(""BlockingTask-%d"").
		build();
	private final ExecutorService blockingTasksExecutor = Executors.newThreadPerTaskExecutor(
		blockingTasksThreadFactory);
	private final Logger log = LoggerFactory.getLogger(PlatformThreadsTestcase.class);

	public static void main(String[] args) throws InterruptedException
	{
		PlatformThreadsTestcase testcase = new PlatformThreadsTestcase();
		testcase.run();
	}

	public void run() throws InterruptedException
	{
		Semaphore semaphore = new Semaphore(500);
		LongAdder adder = new LongAdder();
		while (true)
		{
			semaphore.acquire();
			blockingTasksExecutor.submit(() ->
			{
				adder.increment();
				long sum = adder.sum();
				if ((sum % 1000) == 0)
					log.info(""Progress: {}"", sum);
				try
				{
					Thread.sleep(50);
				}
				catch (InterruptedException e)
				{
					throw new RuntimeException(e);
				}
				finally
				{
					semaphore.release();
				}
			});
		}
	}
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8297690,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294228,,,,,,JDK-8297168,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2z3oj:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-07 03:08;fmatte;Thanks [~ddamodaran] for the reproducer testcase,
I am able to reproduce the issue in 19.0.1 and 19 GA release, but the issue is not reproducible on 18 GA.
Debugging more...;;;","2022-11-07 20:07;dholmes;Likely related to changes made for virtual threads.if it only happens in 19.;;;","2022-11-07 21:37;fmatte;Please ignore my earlier comment. It is my lack of knowlede on the Maven as the reproducer is mvn project and I didn't change that to jdk18. I just added jdk18 in the IDE and project didn't pick that up. After understanding how to do proper setting in Maven project, it looks like the project cannot be run in jdk18 (still not sure why).
;;;","2022-11-08 00:24;alanb;[~fmatte] Can you change the test to use Executors.newCachedThreadPool as it should give you an equivalent that works with older JDK releases as the test doesn't use virtual threads. It would be interesting to try on JDK 18, JDK 19, and JDK 20 EA, with and without --enable-preview. That would give information on whether this is a regression or an issue when running with --enable-preview or not.;;;","2022-11-09 07:35;fmatte;The testcase takes 3 to 4 hours to hang, this is my observations.
19.0.1 with --enable-preview -> JVM hang
19.0.1 Without --enable-preview -> JVM still hang.

There is one more observation, we can get the hang only when we tried to launch visualvm and try to start observing monitor window. Without that application will be keep running.

I am running now for 19 GA with above two cases.;;;","2022-11-10 07:40;fmatte;Looks like it is native memory leak in Thread area which is consuming entire memory over a period of time.
You can see the malloc area is increasing over a period of time (on 19.0.1)

Start
-                    Thread (reserved=549976KB +80719KB, committed=40304KB +9415KB)
                            (thread #0)
                            (stack: reserved=540672KB +75776KB, committed=31000KB +4472KB)
                            (malloc=8687KB +4858KB #16237 +8098)
                            (arena=617KB +84 #1054 +144)

After 4 mins
-                    Thread (reserved=533290KB +64032KB, committed=47722KB +16832KB)
                            (thread #0)
                            (stack: reserved=515072KB +50176KB, committed=29504KB +2976KB)
                            (malloc=17628KB +13799KB #30410 +22271)
                            (arena=590KB +57 #1008 +98)

After 10 mins
-                    Thread (reserved=591090KB +121832KB, committed=81422KB +50532KB)
                            (thread #0)
                            (stack: reserved=540672KB +75776KB, committed=31004KB +4476KB)
                            (malloc=49801KB +45972KB #81400 +73261)
                            (arena=617KB +84 #1054 +144)

After 30 mins
-                    Thread (reserved=646635KB +177378KB, committed=136979KB +106090KB)
                            (thread #0)
                            (stack: reserved=540672KB +75776KB, committed=31016KB +4488KB)
                            (malloc=105346KB +101517KB #169738 +161599)
                            (arena=617KB +84 #1054 +144)

After 1 hour
-                    Thread (reserved=540089KB +70832KB, committed=223589KB +192700KB)
                            (thread #0)
                            (stack: reserved=334848KB -130048KB, committed=18348KB -8180KB)
                            (malloc=204739KB +200910KB #326881 +318742)
                            (arena=502KB -30 #858 -52)

After 2 hours
-                    Thread (reserved=788189KB +318932KB, committed=424097KB +393208KB)
                            (thread #0)
                            (stack: reserved=386048KB -78848KB, committed=21956KB -4572KB)
                            (malloc=401699KB +397870KB #639276 +631137)
                            (arena=442KB -90 #756 -154)

I will execute same test against jdk18 tomorrow.

;;;","2022-11-10 10:00;fmatte;Using jdk18 without preview, there is no memory leak issue
Start
-                    Thread (reserved=545205KB -1027KB, committed=36577KB -43KB)
                            (thread #0)
                            (stack: reserved=543744KB -1024KB, committed=35116KB -40KB)
                            (malloc=841KB -2KB #3722 -6)
                            (arena=620KB -1 #1060 -2)

After 25 minutes
-                    Thread (reserved=546232KB, committed=36796KB +176KB)
                            (thread #0)
                            (stack: reserved=544768KB, committed=35332KB +176KB)
                            (malloc=842KB #3728)
                            (arena=622KB #1062)

I got another update from Gili

==
I've got another interesting discovery for you.
I ran the JDK 18, 19 testcases I sent you yesterday. JDK 18 and JDK 19 without --enable-preview did not hang. Now for the interesting news...
When running JDK 19 with --enable-preview testcases involving Executor.newCachedThreadPool() never hang, but Executors.newThreadPerTaskExecutor(Thread.ofPlatform().factory()) do. This executor hangs even if I remove all 3rd-party libraries and just use System.out.println() to print out the progress.
This makes me believe that the bug has something to do with Executors.newThreadPerTaskExecutor(), as opposed to the type of Thread being used.
==

Thanks Gili for that update.;;;","2022-11-10 10:49;alanb;It may help to just replace the use of Executors in the test to use new Thread(runnable).start(). Also just to confirm, the issue is only running with the debugger agent. The original description says it doesn't happen when there is no debugger (I think).;;;","2022-11-10 14:08;dholmes;So it uses a ThreadPerTaskExecutor and we see Thread native memory increasing over time. How many tasks are there? If the debugger is somehow stopping tasks or threads from completing then the number of threads will increase over time and eventually exhaust the ability to create native threads (though you should see some kind of error/warning).;;;","2022-11-10 21:26;fmatte;Just to confiorm, I am not using debugger there is no IDE's/visualvm involved.
;;;","2022-11-10 22:00;dholmes;[~fmatte] How are you observing the memory usage? I was chasing phantom leaks in JDK-8294228 that appeared to be caused by the monitoring tools themselves.;;;","2022-11-10 23:12;alanb;I got an update from Gil that removes the ExecutorService from the picture, it just uses `new Thread(Runnable).start()` so keeps creating platform threads. The interesting thing is that he's duplicating the issues/leak with JDK 18 and no debugger. This is a bit different to the original description where it suggested the issue was only observed when running with the debugger. He's running with -XX:NativeMemoryTracking=detail and then using jcmd's VM.native_memory command to look at the memory usage.

;;;","2022-11-11 00:23;fmatte;Hi [~dholmes] I am using NMT to track the memory,
I also used new Thread() instead of ExecutorService, and leak still exist
Start
-                    Thread (reserved=128887KB -217701KB, committed=12427KB -10505KB)
                            (thread #0)
                            (stack: reserved=122880KB -220160KB, committed=6420KB -12964KB)
                            (malloc=5744KB +2591KB #10152 +3634)
                            (arena=263KB -132 #578 -98)

After 2hour 45 mins
-                    Thread (reserved=748207KB +401619KB, committed=558571KB +535639KB)
                            (thread #0)
                            (stack: reserved=200704KB -142336KB, committed=11068KB -8316KB)
                            (malloc=547267KB +544114KB #874334 +867816)
                            (arena=236KB -159 #404 -272)
;;;","2022-11-11 00:41;fmatte;I am also running the same program against jdk11.0.12 (Oracle) version but didn't observe the leak
Start
-                    Thread (reserved=512259KB +157390KB, committed=28935KB +6978KB)
                            (thread #504 +159)
                            (stack: reserved=509952KB +156672KB, committed=26628KB +6260KB)
                            (malloc=1717KB +534KB #2802 +725)
                            (arena=590KB +184 #1007 +313)

After 90 mins
-                    Thread (reserved=458751KB +103883KB, committed=28563KB +6607KB)
                            (thread #446 +101)
                            (stack: reserved=456704KB +103424KB, committed=26516KB +6148KB)
                            (malloc=1524KB +341KB #2677 +600)
                            (arena=523KB +117 #894 +200)

There is no leak in jdk11, the regression may be somewhere between jdk11 to jdk18, is it worth checking that?;;;","2022-11-13 13:28;dholmes;[~fmatte] are you using the NMT diff option to see the usage or are you also using jcmd's VM.native_memory command to look at the memory usage?;;;","2022-11-13 19:10;fmatte;Hi [~dholmes], yes exactly the same things.

-                    Thread (reserved=459715KB +98515KB, committed=93175KB +68779KB)
                            (thread #0)
                            (stack: reserved=390144KB +31744KB, committed=23604KB +2008KB)
                            (malloc=69124KB +66742KB #112041 +106649)
                            (arena=447KB +29 #764 +50);;;","2022-11-13 23:52;fmatte;Hi David, Alan,

I think I could reproduce 2 kinds of leak here.
1. With the usage of new Thread() 
Reproducible on 19 ea b22 and not on 19 ea b21 or any other previous releases. So possibly caused due to JDK-8284161

2. There is another slow leak with Executors.newThreadPerTaskExecutor/newCachedThreadPool, the testcase I have with third party dependencies.
Reproducible with jdk19 and jdk18 also. Didn't try with lower versions yet. Let me know, if second slow leak need to be tracked with separate bug?

Thanks,;;;","2022-11-14 14:31;dholmes;As I did not observe any leak with my investigation of  JDK-8294228:

  Thread (reserved=39038KB +7KB, committed=1242KB +47KB)
                            (thread #0)
                            (stack: reserved=38952KB, committed=1156KB +40KB)
                            (malloc=53KB +7KB #196 +11)
                            (arena=33KB #58)

(this is after several minutes of continually attaching and detaching the current thread) it suggests that the leak is somewhere in the JVM_StartThread path, rather  than the actual JavaThread creation and destruction (which also happens with JNI AttachCurrentThread). ;;;","2022-11-14 21:04;dholmes;I think the key thing is here:

  (malloc=69124KB +66742KB #112041 +106649) 

showing that we have an increasing number of Handles (which will consume memory of course). If I change the test to a simple:

Thread t = new Thread() ...
t.start();
t.join();

then there is no handle leak. I think we may have a thread termination bottleneck in the VM.;;;","2022-11-14 21:20;dholmes;FTR it seems the original IDEA issue reported above is a memory leak in IDEA.;;;","2022-11-14 21:33;dholmes;One potential issue is that vthreads tripled the amount of work being delegated to the service thread:

// Ask ServiceThread to release the threadObj OopHandle
  ServiceThread::add_oop_handle_release(_threadObj);
+  ServiceThread::add_oop_handle_release(_vthread);
+  ServiceThread::add_oop_handle_release(_jvmti_vthread);

that in itself would not be an issue but this is actually a very heavyweight operation and we will wake up the service thread for each oop! 

void ServiceThread::add_oop_handle_release(OopHandle handle) {
  MutexLocker ml(Service_lock, Mutex::_no_safepoint_check_flag);
  OopHandleList* new_head = new OopHandleList(handle, _oop_handle_list);
  _oop_handle_list = new_head;
  Service_lock->notify_all();
}

So if we have a lot of threads we can be introducing a lot of context switching with the service thread and a lot of contention on the Service_lock.;;;","2022-11-15 00:14;alanb;[~dholmes] I was surprised to see that JavaThread::~JavaThread doesn't also release _extentLocalCache. For ServiceThread, would a bulk add help so that Service_lock is only locked/notified once by the JavaThread deconstructor help reduce the overhead?;;;","2022-11-15 04:55;rehn;If we have like 10 JavaThreads exiting at the same time, this can become very slow.
Since normally service thread have a really low run-quote, when we have one JavaThread owning the Service_lock and nine JavaThreads + ServiceThread waiting on that lock, it could bounce around to service thread multiple times before all the JT gets through.

We added a bunch of work on the service thread, which is essentially ""a JavaThread should do this"" (but I don't want to take the cost).
All 'extra' threads makes is just harder to tune your benchmark, and you may end up with two choices: over- or under-provision.
If we instead spread out the work on the application JavaThreads, so for example:
Growing the stringtable is done in segmented work (not prolonging TTS), this segmented work can perfectly fine be done with multiple threads.
So instead of service thread spinning up and burning 100% for a hundreds of milliseconds, we could just emit handshakes with the segmented work until completed.

In this case we need a JT to release oopStorage, so if we had a new type of handshake:
""asynchronous with target any"" we could just emit that with the oop storage release inside.
Handshakes are already installed with CAS, with a per handshake closure list, we don't need a global one at all, so this would be done with a single CAS.

(not saying implementing handshake ""any"" is trivial, since we don't want that 'any' to be a thread in native, never returning to the VM)

We use to have a test which created a many thousands of threads until out of resources, then joined them, if you did something bad in exit path of JT this test would timeout. I saw some changes to that test a while back, I think the orginal version would timeout.

EDIT: I misremembered some code in ServiceThread.;;;","2022-11-15 05:57;alanb;I brought up the issue of releasing _scopedValueCache (_extentLocalCache in main line) with aph and he has fixed it in the PR for JEP 429:
https://github.com/openjdk/jdk/commit/21eb011771ce0232d69706b88a102a93461fd6f5;;;","2022-11-15 13:33;dholmes;[~alanb] I am considering a bulk add, and also moving as much work as possible to the callee to take some load off the service thread. The OopHandleList management makes things a little awkward.

[~rehn] are you suggesting we try to define a handshake that is effectively a request for any JavaThread to do some work on behalf of the terminating thread? Spreading the load like that may work in one sense,  but stealing arbitrary threads to do some internal VM book-keeping like this seems a questionable idea in general. Worth thinking about though - but as a significant future enhancement. I've also no idea how you say ""here is a handshake for anyone"" as normally handshakes need a target thread. ??;;;","2022-11-16 00:19;rehn;[~dholmes] Yes. Implementation would not be trivial. No need to further discuss it in this bug. I'll create an issue. (https://bugs.openjdk.org/browse/JDK-8297115)
;;;","2022-11-16 00:34;alanb;[~dholmes] Are you going to your repeat your test with the code changed to release _extentLocalCache?;;;","2022-11-16 04:46;dholmes;[~alanb] Good point! It may not be a termination bottleneck just this missing OopHandle release. I will check that tomorrow (and still look at improving the interaction with the service thread).

Though I also note that this extra release also adds to the potential for that bottleneck.;;;","2022-11-16 14:05;dholmes;[~alanb] releasing the _extentLocalCache OopHandle fixed the problem. I no longer see any malloc/handle leak. I will file a seperate RFE to address the ServiceThread interaction. Thanks.;;;","2022-11-16 14:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11198
Date: 2022-11-16 22:10:18 +0000;;;","2022-11-17 05:21;coleenp;Maybe there should be a new RFE to add these all at once.;;;","2022-11-17 16:47;dukebot;Changeset: 7b3984cb
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-11-18 00:46:09 +0000
URL:       https://git.openjdk.org/jdk/commit/7b3984cb5a08edb99a233c28331c00b25457d664
;;;","2022-11-17 17:27;dholmes;[~coleenp] there is - JDK-8297168;;;","2022-11-27 22:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/97
Date: 2022-11-28 06:16:21 +0000;;;","2022-11-28 17:01;dholmes;Fix Request

First my apologies for not following the process and integrating without approval.

This is a trivial fix for a memory leak that was introduced by the Project Loom preview that went in to JDK 19, hence it is important to fix in 19u ASAP.

The fix is extremely low risk - it only releases storage at thread termination that was not being released. There are no specific testing issues related to this fix. Verification of the fix requires manually checking used memory over time as threads are created and destroyed.

The fix does not apply cleanly due to code refactoring in mainline JDK, but the change itself is identical in the context it applies. The fix has been reviewed - see PR link above.;;;"
System.console() shouldn't return null in jshell,JDK-8296454,5086874,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,webbuggrp,webbuggrp,2022-11-06 09:02,2023-04-10 10:25,2023-10-01 09:56,2023-04-05 03:38,11,17,19,20,,,,21,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 22.04.1 LTS
Release:        22.04
Codename:       jammy

$ java --version
openjdk 19.0.1 2022-10-18
OpenJDK Runtime Environment (build 19.0.1+10-21)
OpenJDK 64-Bit Server VM (build 19.0.1+10-21, mixed mode, sharing)

$ jshell --version
jshell 19.0.1


A DESCRIPTION OF THE PROBLEM :
When running jshell, System.console() should not return null.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Launch jshell (without any redirection)
2. In jshell, enter System.console()

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The expected result is for jshell to behave, apart from its REPL capabilities, as similar to java as possible. That includes the provision of a Console through System.console() to use jshell's REPL to tinker with java.io.Console.
ACTUAL -
The actual result is that in jshell, System.console() returns null, which makes using jshell's REPL to tinker with java.io.Console impossible.

CUSTOMER SUBMITTED WORKAROUND :
* One could write their own Java shell that doesn't have this defect.
* One could use java to tinker with Console.log()
Both workaround defeat the purpose of existence of jshell in this context.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299680,,,,,,,,,,,,,,,,,,,,,JDK-8298425,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z54z:",9223372036854775807,b17,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-11-06 20:17;adev;System.console() returns null in jshell. Therefore no console operations possible subsequently.;;;","2023-01-06 01:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11695
Date: 2022-12-15 15:30:12 +0000;;;","2023-04-05 03:38;dukebot;Changeset: 4bf19878
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-04-05 10:35:01 +0000
URL:       https://git.openjdk.org/jdk/commit/4bf1987856f454e029c413e53d4b0c5807d3e890
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Solaris Ucrypto context memory leak on CRYPTO_BUFFER_TOO_SMALL error,JDK-8296452,5086887,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pkumaraswamy,shadowbug,shadowbug,2022-11-06 22:38,2023-07-04 03:41,2023-10-01 09:56,2023-06-03 04:29,8,,,,,,,11.0.21-oracle,security-libs,,0,12-na,bugdb_34764074,CPU23_07-defer-approved,CPU23_07-defer-SQE-OK,jdk11u-solaris-sparc-defer,,,,,,,,,,,,,,,,,"Memory leak is observed upon BUFFER_TOO_SMALL error from Ucrypto library, this is because Solaris libucrypto library doesn't clean up the memory upon BUFFER_TOO_SMALL error and expects a re-trial.",,,,,,,,,,,JDK-8310093,JDK-8309950,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z57v:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: Fix temp usages of heapbase register killed by MacroAssembler::en/decode_klass_not_null,JDK-8296448,5086880,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-11-06 19:37,2023-07-09 19:23,2023-10-01 09:56,2022-11-09 17:32,19,20,,,,,,20,hotspot,,0,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,oraclejdk-na,oracle-triage-20,,,,,,,,,,,,,,,,,"A crash is observed when running the movie-lens benchmark in Renaissance using a native build JDK with -UseCompressedOops, +UseCompressedClassPointers, and C2 enabled.

The fix is understood and a workaround for this issue can be disabling CDS.

To reproduce using a cross-compiled:
```
# dump one cds-nocoops.jsa
<java> -XX:-UseCompressedOops -XX:+UseCompressedClassPointers -Xshare:dump -Xlog:cds* -version

# reproduce
<java> -XX:-UseCompressedOops -XX:+UseCompressedClassPointers -Xshare:on -XX:-TieredCompilation -Xlog:cds* -Xlog:gc+metaspace=info -Xshare:on -jar renaissance-gpl-0.14.1.jar -r 1 movie-lens
```

Logs: (fastdebug build)
```
```
[1.089s][info][cds] trying to map /jdk/tmp2/jdk/lib/server/classes_nocoops.jsa
[1.092s][info][cds] Opened archive /jdk/tmp2/jdk/lib/server/classes_nocoops.jsa.
[1.092s][info][cds] Archive was created with UseCompressedOops = 0, UseCompressedClassPointers = 1
[1.093s][info][cds] full module graph: disabled because archive was created without full module graph
[1.093s][info][cds] Core region alignment: 4096
[1.104s][info][cds] Reserved archive_space_rs [0x0000000800000000 - 0x0000000801000000] (16777216) bytes
[1.105s][info][cds] Reserved class_space_rs   [0x0000000801000000 - 0x0000000841000000] (1073741824) bytes
[1.105s][info][cds] Mapped static  region #0 at base 0x0000000800000000 top 0x00000008004fa000 (ReadWrite)
[1.106s][info][cds] Mapped static  region #1 at base 0x00000008004fa000 top 0x0000000800cdd000 (ReadOnly)
[1.107s][info][cds] optimized module handling: enabled
[1.107s][info][cds] full module graph: disabled
[1.110s][info][gc,metaspace] CDS archive(s) mapped at: [0x0000000800000000-0x0000000800cdd000-0x0000000800cdd000), size 13488128, SharedBaseAddress: 0x0000000800000000, ArchiveRelocationMode: 0.
[1.111s][info][gc,metaspace] Compressed class space mapped at: 0x0000000801000000-0x0000000841000000, reserved size: 1073741824
[1.111s][info][gc,metaspace] Narrow klass base: 0x0000000800000000, Narrow klass shift: 0, Narrow klass range: 0x100000000
Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties
............. (ignored)
[129.485s][info][gc,metaspace] GC(25) Metaspace: 66099K(67264K)->66099K(67264K) NonClass: 57560K(58240K)->57560K(58240K) Class: 8539K(9024K)->8539K(9024K)
# To suppress the following error report, specify this argument# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=
# after -XX: or in .hotspotrc:  SuppressErrorAt=/stackValue.cpp:154/stackValue.cpp:154

[thread 2836 also had an error]
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/buildbot/worker/build-jdkX-debian11/build/src/hotspot/share/runtime/stackValue.cpp:154), pid=2608, tid=2838
#  assert(oopDesc::is_oop_or_null(val)) failed: bad oop found at 0x00000054e0e5d450 in_cont: 0 compressed: 0
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-testing-builds.shipilev.net-openjdk-jdk-b249-20221102)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-testing-builds.shipilev.net-openjdk-jdk-b249-20221102, mixed mode, sharing, compressed class ptrs, g1 gc, linux-riscv64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /jdk/hs_err_pid2608.log
[thread 2837 also had an error]
[130.823s][warning][os          ] Loading hsdis library failed
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted
```
```
",,,,,,,,,,,JDK-8297469,JDK-8297339,JDK-8311735,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-06 19:38;xlinzheng;hs_err_pid2608.log;https://bugs.openjdk.org/secure/attachment/101457/hs_err_pid2608.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,19,,linux,,,,,,"0|i2z56b:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-06 20:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11010
Date: 2022-11-07 04:03:57 +0000;;;","2022-11-07 00:32;rcastanedalo;ILW = VM assertion failure; using -UseCompressedOops, +UseCompressedClassPointers on RISC-V; disable CDS = HLM = P3;;;","2022-11-09 17:32;dukebot;Changeset: 93fed9b2
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-11-10 01:30:51 +0000
URL:       https://git.openjdk.org/jdk/commit/93fed9b251c21f20b68ddc4e179d6595275dbcd2
;;;","2022-11-17 20:26;xlinzheng;Fix request [19u]

This is a critical P3 fix for RISC-V and affects RISC-V only, so the impact is small.
This is not clean that needs very minor conflict fixes.
Tier1~2 testing passed.;;;","2022-11-17 20:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/71
Date: 2022-11-18 04:29:32 +0000;;;","2023-03-11 02:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/12
Date: 2023-03-11 09:55:47 +0000;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
C++ syntax error in jdwpTransport.h,JDK-8296445,5086876,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2022-11-06 13:42,2022-11-14 19:21,2023-10-01 09:56,2022-11-07 22:31,11,17,20,,,,,20,core-svc,,0,,,,,,,,,,,,,,,,,,,,,,"Reported by <1052156701@qq.com>

Bug description
The code in jdwpTransport.h has syntax error.
For example, use `g++ -c jdwpTransport.h` to compile it, this error message will be produced:
-----------------------------------------------------------------------
jdwpTransport.h:266:9: error: expected identifier before 'return'
         return functions->SetTransportConfiguration(this, config);
         ^~~~~~
jdwpTransport.h:266:9: error: expected ',' or '...' before 'return'
jdwpTransport.h:266:66: error: expected ')' before ';' token
         return functions->SetTransportConfiguration(this, config);
                                                                  ^
jdwpTransport.h:267:5: error: expected ';' after struct definition
     }
     ^
jdwpTransport.h:273:1: error: expected declaration before '}' token
 } /* extern ""C"" */
 ^
------------------------------------------------------------------------

Bug fix
The bug is caused by the wrong signature of method `SetTransportConfiguration(jdwpTransportEnv* env,`.
So, I correct the method signature to `SetTransportConfiguration(jdwpTransportConfiguration *config)`.

Git diff
-------------------------------------------------------------------
diff --git a/src/jdk.jdwp.agent/share/native/include/jdwpTransport.h b/src/jdk.jdwp.agent/share/native/include/jdwpTransport.h
index cdbd04d429c..642d167a230 100644
--- a/src/jdk.jdwp.agent/share/native/include/jdwpTransport.h
+++ b/src/jdk.jdwp.agent/share/native/include/jdwpTransport.h
@@ -262,7 +262,7 @@ struct _jdwpTransportEnv {
     }

     /*  SetTransportConfiguration added in JDWPTRANSPORT_VERSION_1_1 */
-    jdwpTransportError SetTransportConfiguration(jdwpTransportEnv* env,
+    jdwpTransportError SetTransportConfiguration(jdwpTransportConfiguration *config) {
         return functions->SetTransportConfiguration(this, config);
     }
----------------------------------------------------------------------

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8061228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b23,10,,,,,,,,"0|i2z55f:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-11-06 13:43;dholmes;This is a  day one bug in the code introduced by JDK-8061228;;;","2022-11-06 15:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11008
Date: 2022-11-06 23:02:35 +0000;;;","2022-11-07 22:31;dukebot;Changeset: cf656056
Author:    pandaapo <1052156701@qq.com>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2022-11-08 06:28:54 +0000
URL:       https://git.openjdk.org/jdk/commit/cf656056a34fbb40f0dbe7b42dce7e7dbf251ec8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EncryptedPrivateKeyInfo can be created with an uninitialized AlgorithmParameters,JDK-8296442,5086871,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,weijun,weijun,2022-11-05 14:13,2022-11-28 14:50,2023-10-01 09:56,2022-11-16 12:35,,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,EncryptedPrivateKeyInfo can be created with an uninitialized AlgorithmParameters and its getEncoded() method would throw an IOE.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296072,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z54b:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2022-11-09 12:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11067
Date: 2022-11-09 19:59:08 +0000;;;","2022-11-16 12:35;dukebot;Changeset: 68d3ed5c
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-11-16 20:30:34 +0000
URL:       https://git.openjdk.org/jdk/commit/68d3ed5ceec38505b934d79f288eb78d09fb3cc4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NMT incurs costs if disabled,JDK-8296437,5086866,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,stuefe,stuefe,2022-11-05 00:26,2023-09-29 02:59,2023-10-01 09:56,2022-11-17 00:33,20,,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,nmt,,,,,,,,,,,,,,,,,,,"While investigating the performance of the os::malloc wrapper, I noticed that we spend a lot of cycles copying empty callstacks around, even if NMT is disabled. 

The CURRENT_PC and CALLER_PC macros are used to create `NativeCallStack` objects out of thin air : 

```
#define CURRENT_PC ((MemTracker::tracking_level() == NMT_detail) ? \
                    NativeCallStack(0) : NativeCallStack::empty_stack())
#define CALLER_PC  ((MemTracker::tracking_level() == NMT_detail) ?  \
                    NativeCallStack(1) : NativeCallStack::empty_stack())
```

and feed them to a callee routine, which usually has the argument defined via const reference, e.g. os::malloc:

```
void* os::malloc(size_t size, MEMFLAGS memflags, const NativeCallStack& stack);
```

In CURRENT|CALLER_PC, the left hand of the ':' operator handles the detail mode, when we actually do collect a stack. In that case, the stack sits on the thread stack as an automatic anonymous variable and is filled by the stack walker. That's all fine.

The right-hand of ':' handles the case when we don't want a stack. In that case, the intent is to hand down the reference to a pre-created ""empty stack"" singleton (NativeCallStack::empty_stack()). 

However, that does not work as intended. The C++ compiler - at least gcc on linux - generates code that laboriously copies the content of the empty stack singleton onto the thread stack. It uses four SSE instructions - two 16byte loads + two 16byte moves (the NMT stacks are 4 pointer-sized slots containing PCs):

```
0000000000cb9a60 <_ZN2os6mallocEm8MEMFLAGS>:
...
# Load tracking level
  cb9a77:	48 8d 1d 02 35 78 00 	lea    0x783502(%rip),%rbx        # 143cf80 <_ZN10MemTracker15_tracking_levelE>
  cb9a7e:	8b 03                	mov    (%rbx),%eax
# detail (3) tracking?  
  cb9a80:	83 f8 03             	cmp    $0x3,%eax
# yes: go and collect callstack    
  cb9a83:	0f 84 57 01 00 00    	je     cb9be0 <_ZN2os6mallocEm8MEMFLAGS+0x180>
# no: copy the content of NativeCallStack::_empty_stack to the local stack, in 16 byte intervals:
  cb9a89:	48 8d 05 30 44 78 00 	lea    0x784430(%rip),%rax        # 143dec0 <_ZN15NativeCallStack12_empty_stackE>
  cb9a90:	f3 0f 6f 00          	movdqu (%rax),%xmm0
  cb9a94:	f3 0f 6f 48 10       	movdqu 0x10(%rax),%xmm1
  cb9a99:	0f 11 45 c0          	movups %xmm0,-0x40(%rbp)
  cb9a9d:	0f 11 4d d0          	movups %xmm1,-0x30(%rbp)
  ...  
# do the actual malloc:
  cb9af8:	e8 c3 40 5d ff       	callq  28dbc0 <malloc@plt>

# call MallocTracker::record_malloc() and hand down pointer to NMT stack (4th argument->RCX):
  cb9b0f:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  ...
  cb9b19:	e8 f2 b7 f3 ff       	callq  bf5310 <_ZN13MallocTracker13record_mallocEPvm8MEMFLAGSRK15NativeCallStack>  
```

This is completely unnecessary, since if NMT mode != detail, the stack is never used. This hits every call site where these macros are used, and we pay if NMT is disabled.",,,,,,,,,,,JDK-8317304,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296436,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z537:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-08 10:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11040
Date: 2022-11-08 14:40:10 +0000;;;","2022-11-17 00:33;dukebot;Changeset: 9f8b6d2a
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-11-17 08:31:21 +0000
URL:       https://git.openjdk.org/jdk/commit/9f8b6d2aa6733efb69d2d4f7e5f9e09dc5df9800
;;;","2023-09-28 01:11;goetz;Fix request [17u]

A nice to have small mem improvement.
Low risk, simple change.
Clean backport.
SAP nightly testing passed.;;;","2023-09-28 01:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1808
Date: 2023-09-28 08:11:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Encountered null CLD while loading shared lambda proxy class,JDK-8296433,5086862,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,ccheung,ccheung,2022-11-04 15:34,2022-11-14 19:21,2023-10-01 09:56,2022-11-08 13:58,20,,,,,,,20,hotspot,,0,cds,,,,,,,,,,,,,,,,,,,,,"With the following patch, JDK build will fail the assert during the creation of classlist.raw.

diff --git a/src/hotspot/share/oops/instanceKlass.cpp b/src/hotspot/share/oops/instanceKlass.cpp
index df04200a4dc..cdf171636e9 100644
--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
@@ -387,6 +387,7 @@ void InstanceKlass::set_nest_host(InstanceKlass* host) {
   _nest_host = host;
   // Record dependency to keep nest host from being unloaded before this class.
   ClassLoaderData* this_key = class_loader_data();
+  assert(this_key != NULL, """");
   this_key->record_dependency(host);
 }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z52b:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-04 15:38;ccheung;From lldb (thanks to [~vlivanov]):

The lambda proxy class:
(lldb) p ik->print()
java.util.stream.FindOps$FindSink$OfRef$$Lambda$8/0x800000039 {0x000000080030e410}
 - instance size:     2
 - klass size:        74
 - access:            final synchronized synthetic 
 - state:             allocated
 - name:              'java/util/stream/FindOps$FindSink$OfRef$$Lambda$8+0x800000039'
 - super:             'java/lang/Object'
 - sub:               
 - arrays:            NULL
 - methods:           Array<T>(0x0000000800a154a0)
 - method ordering:   Array<T>(0x0000000800a15558)
 - default_methods:   Array<T>(0x0000000800a15538)
 - default vtable indices:   Array<T>(0x0000000800a15568)
 - local interfaces:  Array<T>(0x0000000800a15398)
 - trans. interfaces: Array<T>(0x0000000800a15398)
 - constants:         constant pool [21] {0x0000000800a153a8} for 'java/util/stream/FindOps$FindSink$OfRef$$Lambda$8+0x800000039' cache=0x000000080030e680
 - class annotations:       Array<T>(0x0000000000000000)
 - class type annotations:  Array<T>(0x0000000000000000)
 - field annotations:       Array<T>(0x0000000000000000)
 - field type annotations:  Array<T>(0x0000000000000000)
 - inner classes:     Array<T>(0x0000000800660660)
 - nest members:     Array<T>(0x0000000800660660)
 - permitted subclasses:     Array<T>(0x0000000800660660)
 - java mirror:       NULL
 - vtable length      8  (start addr: 0x000000080030e5e0)
 - itable length      8 (start addr: 0x000000080030e620)
 - ---- static fields (0 words):
 - ---- non-static fields (0 words):
 - non-static oop maps: 
(lldb) p ik->class_loader_data()
(ClassLoaderData *) $1 = nullptr

The shared_nest_host:

(lldb) p shared_nest_host->print()
java.util.stream.FindOps {0x0000000800301f28}
 - instance size:     2
 - klass size:        65
 - access:            final synchronized 
 - state:             fully_initialized
 - name:              'java/util/stream/FindOps'
 - super:             'java/lang/Object'
 - sub:               
 - arrays:            NULL
 - methods:           Array<T>(0x0000000800a0a0f8)
 - method ordering:   Array<T>(0x0000000800a0a338)
 - default_methods:   Array<T>(0x0000000000000000)
 - local interfaces:  Array<T>(0x00000008006606d8)
 - trans. interfaces: Array<T>(0x00000008006606d8)
 - constants:         constant pool [67] {0x0000000800a09e48} for 'java/util/stream/FindOps' cache=0x0000000800302180
 - class loader data:  loader data: 0x0000600003710610 of 'bootstrap'
 - source file:       'FindOps.java'
 - class annotations:       Array<T>(0x0000000000000000)
 - class type annotations:  Array<T>(0x0000000000000000)
 - field annotations:       Array<T>(0x0000000000000000)
 - field type annotations:  Array<T>(0x0000000000000000)
 - inner classes:     Array<T>(0x0000000800a0a0b0)
 - nest members:     Array<T>(0x0000000800a0a350)
 - permitted subclasses:     Array<T>(0x0000000800660660)
 - java mirror:       a 'java/lang/Class'{0x00000007ffb29888} = 'java/util/stream/FindOps'
 - vtable length      5  (start addr: 0x00000008003020f8)
 - itable length      2 (start addr: 0x0000000800302120)
 - ---- static fields (0 words):
 - ---- non-static fields (0 words):
 - non-static oop maps: 
;;;","2022-11-04 15:41;ccheung;The class loader data is being initialized during SystemDictionary::load_shared_class -> InstanceKlass::restore_unshareable_info -> Klass::restore_unshareable_info

  if (class_loader_data() == NULL) {
    set_class_loader_data(loader_data);

    // Add to class loader list first before creating the mirror
    // (same order as class file parsing)
    loader_data->add_class(this);
  }

A suggested fix is to call set_nest_host after load_shared_class in SystemDictionary::load_shared_lambda_proxy_class:

diff --git a/src/hotspot/share/classfile/systemDictionary.cpp b/src/hotspot/share/classfile/systemDictionary.cpp
index cfb615f399e..82092e04b09 100644
--- a/src/hotspot/share/classfile/systemDictionary.cpp
+++ b/src/hotspot/share/classfile/systemDictionary.cpp
@@ -1163,12 +1163,6 @@ InstanceKlass* SystemDictionary::load_shared_lambda_proxy_class(InstanceKlass* i
     assert(s->is_shared(), ""must be"");
   }
 
-  // The lambda proxy class and its nest host have the same class loader and class loader data,
-  // as verified in SystemDictionaryShared::add_lambda_proxy_class()
-  assert(shared_nest_host->class_loader() == class_loader(), ""mismatched class loader"");
-  assert(shared_nest_host->class_loader_data() == ClassLoaderData::class_loader_data(class_loader()), ""mismatched class loader data"");
-  ik->set_nest_host(shared_nest_host);
-
   InstanceKlass* loaded_ik = load_shared_class(ik, class_loader, protection_domain, NULL, pkg_entry, CHECK_NULL);
 
   if (loaded_ik != NULL) {
@@ -1176,6 +1170,12 @@ InstanceKlass* SystemDictionary::load_shared_lambda_proxy_class(InstanceKlass* i
            ""lambda proxy class and its nest host must be in the same package"");
   }
 
+  // The lambda proxy class and its nest host have the same class loader and class loader data,
+  // as verified in SystemDictionaryShared::add_lambda_proxy_class()
+  assert(shared_nest_host->class_loader() == class_loader(), ""mismatched class loader"");
+  assert(shared_nest_host->class_loader_data() == ClassLoaderData::class_loader_data(class_loader()), ""mismatched class loader data"");
+  ik->set_nest_host(shared_nest_host);
+
   return loaded_ik;
 };;;","2022-11-07 16:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11031
Date: 2022-11-08 00:18:54 +0000;;;","2022-11-08 13:57;dukebot;Changeset: d04d6566
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-11-08 21:55:51 +0000
URL:       https://git.openjdk.org/jdk/commit/d04d6566b0cc9b68cff48871d195ee54f1c194ff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac has long lines in its command-line help,JDK-8296420,5086846,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,jjg,jjg,2022-11-04 11:50,2023-04-20 13:48,2023-10-01 09:56,2023-04-13 08:10,,,,,,,,21,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"There are some long lines in the javac command-line help.
Suggested max length is 80 characters.
For the longest lines in `javac --help`, it should be enough to insert `\n` characters.

 $ ./build/macosx-aarch64/images/jdk/bin/javac --help | bash ../../my.utils/src/bin/my.show-line-length.sh | sort --numeric -r 
 133 Provide source compatibility with the specified Java SE release. Supported releases: 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
 133 Generate class files suitable for the specified Java SE release. Supported releases: 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
 111 Compile for the specified Java SE release. Supported releases: 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
  93 Enable preview language features. To be used in conjunction with either -source or --release.
  78 Specify whether or not to generate class files for implicitly referenced files
  77 Names of the annotation processors to run; bypasses default discovery process
  77 -verbose                     Output messages about what the compiler is doing
  76 -encoding <encoding>         Specify character encoding used by source files
  74 Root modules to resolve in addition to the initial modules, or all modules
  74 -s <directory>               Specify where to place generated source files
  73 -endorseddirs <dirs>         Override location of endorsed standards path
  73 -d <directory>               Specify where to place generated class files
  71 -J<flag>                     Pass <flag> directly to the runtime system


 $ ./build/macosx-aarch64/images/jdk/bin/javac --help-extra | bash ../../my.utils/src/bin/my.show-line-length.sh | sort --numeric -r
 108 Specify which file to read when both a source file and class file are found for an implicitly compiled class
  97 Fallback target module for files created by annotation processors, if none specified or inferred.
  82 to additional modules, or to all unnamed modules if <other-module> is ALL-UNNAMED.
  80 expands to all sub-packages of the given package. Each <package> can be prefixed
  75 where <group> is one of accessibility, html, missing, reference, or syntax,
  75 Enable or disable checks in specific packages. Each <package> is either the
  74 qualified name of a package or a package name prefix followed by .*, which
  74 Specify additional modules to be considered as required by a given module.
  73 Print information about which annotations a processor is asked to process
  73 -Djava.endorsed.dirs=<dirs>  Override location of endorsed standards path
  72 -Xmaxwarns <number>          Set the maximum number of warnings to print
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306607,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4yr:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-04 11:57;jjg;Here's a small script to show line lengths


while read line ; do
    printf ""%4d %s\n"" $(expr $(wc -c <<< ""$line"") - 1) ""$line""
done;;;","2023-04-04 08:48;acobbs;Here's a slightly better script :)

    #!/bin/bash
    
    while IFS= read line; do
        len=$(expr $(wc -c <<< ""$line"") - 1)
        if [ $len -gt 80 ]; then
            flag=""*""
        else
            flag="" ""
        fi
        printf ""%s%4d %s\n"" ""${flag}"" ""${len}"" ""${line}""
    done
;;;","2023-04-04 09:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13329
Date: 2023-04-04 16:16:51 +0000;;;","2023-04-13 08:10;dukebot;Changeset: e0620b8e
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-04-13 15:08:55 +0000
URL:       https://git.openjdk.org/jdk/commit/e0620b8e05e9be2b76f7cc47484e81799d2cdf6e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[XWayland] Fix screenshot after display changes,JDK-8296415,5086841,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,azvegint,azvegint,azvegint,2022-11-04 10:29,2023-01-25 11:09,2023-10-01 09:56,2023-01-22 21:49,internal,,,,,,,internal,client-libs,,0,sn_130,sn_132,sn_134,sn_135,sn_136,wayland,wayland_x11_compatibility,,,,,,,,,,,,,,,"Current prototype does not handle display changes in multiscreen environment(like resolution, arrangement changes, display add/remove)

https://github.com/openjdk/wakefield/tree/proto_screencast",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280982,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4xn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-01-22 21:49;azvegint;Display changes are not reported currently by ScreenCast API.
External issue tracked by https://gitlab.freedesktop.org/pipewire/pipewire/-/issues/2872

Workaround: we can recreate ScreenCast session for every screenshot, instead of keeping it open.
As a benefit ""Screen is being shared"" icon in system tray(may annoy a user) appears only when we are actually taking a screenshot.

https://github.com/openjdk/wakefield/commit/afa6ea75ceb95492fefa3ce8646f138e1cef09cc;;;","2023-01-23 11:14;azvegint;Changeset: afa6ea75
Author: Aleksandr Zvegintsev <alexander.zvegintsev@oracle.com>
Date: 2023-01-23 06:41:25 +0100
URL: https://github.com/openjdk/wakefield/commit/afa6ea75ceb95492fefa3ce8646f138e1cef09cc;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] JDK-8295319: pending_cards_at_gc_start doesn't include cards in thread buffers,JDK-8296414,5086840,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,tschatzl,tschatzl,2022-11-04 09:28,2023-01-23 06:09,2023-10-01 09:56,2022-11-04 11:27,20,,,,,,,20,hotspot,,0,gc-g1,gc-g1-prediction,gc-g1-refinement,intermittent,noreg-undo,regression,tier1,tier4,tier5,tier6,,,,,,,,,,,,Backout JDK-8295319 because it causes many crashes in CI,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296419,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4xf:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-04 10:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10993
Date: 2022-11-04 16:54:23 +0000;;;","2022-11-04 11:27;dukebot;Changeset: b847fb68
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-11-04 18:22:55 +0000
URL:       https://git.openjdk.org/jdk/commit/b847fb687735ae5dff56d12d221556a5218b5bba
;;;","2022-11-09 13:15;dcubed;Change this from a P4 RFE to a P2 Bug since this caused
intermittent test failures in Tier1. Also added the 'regression'
label.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tree/TableView with null focus model throws NPE in queryAccessibleAttribute(),JDK-8296413,5086839,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-11-04 09:26,2023-03-14 08:02,2023-10-01 09:56,2023-01-05 08:06,jfx19,,,,,,,jfx20,javafx,,0,a11y,FocusModel,sn_133,sn_134,TableView,,,,,,,,,,,,,,,,,"Calling TableView.queryAccessibleAttribute(AccessibleAttribute.FOCUS_ITEM); with a null focus model results in an NPE

added to TableViewTest:
```
    @Ignore(""JDK-8296413"")
    @Test
    public void testQueryAccessibleAttributeFocusItemWithNullFocusModel() {
        table.getItems().addAll(""1"", ""2"");
        table.setFocusModel(null);

        stageLoader = new StageLoader(table);

        Object result = table.queryAccessibleAttribute(AccessibleAttribute.FOCUS_ITEM);

        assertNull(result);
    }
```

ALSO
- see if TreeTableView has the same issue
- check whether other Controls throw exceptions from queryAccessibleAttribute(), trying all possible AccessibleAttribute values",,,,,,,,,,,JDK-8304142,,,,,,,,,,,,,,,,,,,,,,,JDK-8187145,,,,,,,,,,,,,,,,,,,JDK-8279640,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4x7:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-04 09:44;kcr;Should this be done as a part of JDK-8187145? Or do you think it should be done as a follow-on fix?;;;","2022-11-04 09:48;angorya;I would rather do it separately for two reasons:
- it concerns a focus model and not a selection model
- there might be more controls involved, so we probably should double check queryAccessibleAttribute()... may be with a blanket test that goes through all the accessible attributes and all the controls similarly to SkinMemoryLeakTest;;;","2022-11-04 09:55;fastegal;for consistency, I would handle it the same as JDK-8279640 which included correct handling of null focusModel everywhere (hopefully :)

We probably have similar problems in other controls/skin with focus-/selectionModel that should be handled per control, IMO

;;;","2022-11-04 10:06;angorya;TreeTableView behaves differently, returning some sort of a label with a null focus model.  The comment in TreeTableView:2146 suggests it should be a placeholder (and it is, if TTV has no columns) - I wonder if TableView should do the same.;;;","2022-11-04 10:41;kcr;>  - it concerns a focus model and not a selection model 

I missed that. That alone argues for doing this in a separate issue.;;;","2022-12-15 09:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/938
Date: 2022-11-04 22:58:55 +0000;;;","2023-01-05 08:06;dukebot;Changeset: e866a6c3
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2023-01-05 16:03:26 +0000
URL:       https://git.openjdk.org/jfx/commit/e866a6c35c9040115dd62c6c04fd4b3d4d0e1324
;;;","2023-03-13 12:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/124
Date: 2023-03-13 19:36:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Special case infinite loops with unmerged backedges in IdealLoopTree::check_safepts,JDK-8296412,5086838,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2022-11-04 09:23,2023-05-24 00:39,2023-10-01 09:56,2022-12-19 04:23,11,17,19,20,21,,,21,hotspot,,0,c2,irreducibility,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-20,,,,,,,,,,,,,,"Working hypothesis:
Maybe backedge of irreducible loop is missing a SafePoint.

During fuzzing work of JDK-8280126, I found an S.jasm that triggers the following assert:

#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/loopnode.cpp:3610), pid=159269, tid=159282
#  assert(is_member(nlpt)) failed: nested loop
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-10-06-1045569.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-10-06-1045569.emanuel..., compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xf5cb86]  IdealLoopTree::check_safepts(VectorSet&, Node_List&)+0x200

Current CompileTask:
C2:    742   26    b        S::test (27 bytes)

Stack: [0x00007f4a65dfe000,0x00007f4a65eff000],  sp=0x00007f4a65ef9090,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xf5cb86]  IdealLoopTree::check_safepts(VectorSet&, Node_List&)+0x200  (loopnode.cpp:3610)
V  [libjvm.so+0xf5c9f7]  IdealLoopTree::check_safepts(VectorSet&, Node_List&)+0x71  (loopnode.cpp:3584)
V  [libjvm.so+0xf5c9cf]  IdealLoopTree::check_safepts(VectorSet&, Node_List&)+0x49  (loopnode.cpp:3583)
V  [libjvm.so+0xf5ff1f]  PhaseIdealLoop::build_and_optimize()+0x8bf  (loopnode.cpp:4358)
V  [libjvm.so+0x8a6343]  PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&, LoopOptsMode)+0x105  (loopnode.hpp:1087)
V  [libjvm.so+0x8a653e]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x46  (loopnode.hpp:1166)
V  [libjvm.so+0x899177]  Compile::Optimize()+0xa69  (compile.cpp:2365)
V  [libjvm.so+0x892104]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1404  (compile.cpp:830)
V  [libjvm.so+0x780a9b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x179  (c2compiler.cpp:113)
V  [libjvm.so+0x8b0df8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x916  (compileBroker.cpp:2240)
V  [libjvm.so+0x8afa61]  CompileBroker::compiler_thread_loop()+0x3ed  (compileBroker.cpp:1916)
V  [libjvm.so+0x8d01aa]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x72  (compilerThread.cpp:58)
V  [libjvm.so+0xc5e0cc]  JavaThread::thread_main_inner()+0x144  (javaThread.cpp:699)
V  [libjvm.so+0xc5df84]  JavaThread::run()+0x182  (javaThread.cpp:684)
V  [libjvm.so+0x13306e7]  Thread::call_run()+0x195  (thread.cpp:224)
V  [libjvm.so+0x10ddf15]  thread_native_entry(Thread*)+0x19b  (os_linux.cpp:710)

Reproduce it:
java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm S.jasm
java -Xcomp -XX:CompileCommand=compileonly,S::test -XX:-TieredCompilation -XX:PerMethodTrapLimit=0 -XX:-RenumberLiveNodes S

Note that the flags
 -XX:PerMethodTrapLimit=0 -XX:-RenumberLiveNodes
are not required, but simplify the graph by removing traps (no predicates inserted), and the node idx are stable as they are not renumbered during remove useless.

While it is well possible that this is only reproducilbe with irreducible loops, it does not seem to have to do with dead irreducible loops, so it is a separate bug from JDK-8280126.

Analysis:
(please look at attached png's for node idx)
In IdealLoopTree::check_safepts.
this:
  Loop: N37/N57
    Loop: N37/N56  sfpts={ 44 }
We start walking from n = tail() up the n = idom(n):
57  IfFalse
55  If
We realize that 55 If belongs to:
Loop: N37/N56
Hence, we jump to head of that loop, so set n:
37  Region
(note: this is the loop head of ""this"" loop, we should abort the idom walk)
We take n = idom(n), and get:
25  IfTrue
(this node is outside the loop, but the assumption of the code is that we are still inside the loop)
This node's loop (nlpt) is:
Loop: N0/N0  has_sfpt
  Loop: N103/N102  sfpts={ 82 70 }
  Loop: N37/N57
    Loop: N37/N56  sfpts={ 44 }
(this is the root loop)
Now we hit the assert, we check that ""nlpt"" is a member of ""this"".

Why does this usually work?
Usually, when we have a nested loop, where the loop is shared, we seem to always have a SafePoint on the backedge of the outer loop. So when we exit the inner loop, we expect to go through a SafePoint before we take the backedge to the loop head.
This seems not to be given, and may well have to do with the fact that we have an irreducible loop here (37 and 38 Region).

What could be solutions?
I have not really understood the issue. But some first thoughts include:
1) Checking when we jump to the loop-head of the inner loop, if this is also the loop head of the outer loop. But this would be accepting that backedges of outer-loops do not have safepoints.
2) Insert the safepoint during parsing.",,,,,,,,,,,JDK-8306192,JDK-8305168,JDK-8307046,JDK-8306826,JDK-8305876,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299214,JDK-8296318,,,,,,,,,,JDK-8280126,,,,,,,,,"2022-11-04 09:12;epeter;S.jasm;https://bugs.openjdk.org/secure/attachment/101450/S.jasm","2022-11-04 09:12;epeter;S.jasm.0.png;https://bugs.openjdk.org/secure/attachment/101449/S.jasm.0.png","2022-11-04 09:12;epeter;S.jasm.1.png;https://bugs.openjdk.org/secure/attachment/101448/S.jasm.1.png","2022-11-04 09:12;epeter;S.jasm.2.png;https://bugs.openjdk.org/secure/attachment/101447/S.jasm.2.png","2022-11-04 09:12;epeter;hs_err_pid159269.log;https://bugs.openjdk.org/secure/attachment/101452/hs_err_pid159269.log","2022-11-04 09:12;epeter;replay_pid159269.log;https://bugs.openjdk.org/secure/attachment/101451/replay_pid159269.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4wz:",9223372036854775807,b03,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-04 19:35;dlong;ILW = assert in debug build; debug only, jasm test; no workaround = MMH = P3;;;","2022-12-13 06:20;epeter;Current understanding:
Issue is not irreducibility (at least not primarily).
Rather, we have an issue if a loop-entry (or just loop-head) comes after (a part of) its loop body. During parsing, we only insert SafePoints when we jump from a higher to lower bci. That ensures every backedge has a SafePoint (at least initially). But if the head is after the body, there is no SafePoint on the backedge, but the SafePoint is somewhere in the loop-body. This is not expected in the logic of IdealLoopTree::check_safepts.
There is an issue for irreducible loops: at least one loop-entry cannot be the first block of the loop. If all other loop-entries were to lose their entry, we now have a loop-head that is not in the first block, hence no SafePoints on backedges.;;;","2022-12-16 03:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11706
Date: 2022-12-16 09:57:35 +0000;;;","2022-12-19 04:23;dukebot;Changeset: da38d43f
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-12-19 12:21:50 +0000
URL:       https://git.openjdk.org/jdk/commit/da38d43fcc640ea9852db6c7c23817dcef7080d5
;;;","2023-04-04 06:27;thartmann;Fix Request (JDK 20u)
Fixes an assert during C2 compilation. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-04-04 06:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/49
Date: 2023-04-04 13:27:12 +0000;;;","2023-04-20 04:08;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
A small C2 change with the typical risk.
Clean backport.
Test passes and fails without the fix.
SAP nightly testing passed.;;;","2023-04-20 04:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1287
Date: 2023-04-20 11:22:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpClient throws java.io.IOException: no statuscode in response for HTTP2,JDK-8296410,5086810,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,ccleary,webbuggrp,webbuggrp,2022-11-04 03:28,2023-07-21 07:35,2023-10-01 09:56,2023-02-13 00:36,11,17,18,19,20,,,21,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubuntu 20.04.5
openjdk 19.0.1 2022-10-18
OpenJDK Runtime Environment (build 19.0.1+10-21)
OpenJDK 64-Bit Server VM (build 19.0.1+10-21, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
HttpClient throws java.io.IOException: no statuscode in response when used with HTTP2 endpoint. Changing the version of request to HTTP 1.1 seems to fix the problem.

Stack trace seems to be similar in meaning to https://bugs.openjdk.org/browse/JDK-8263031?jql=text%20~%20%22no%20statuscode%20in%20response%22 which should be fix in opne-jdk 19. However I am still experiencing the problem - maybe the root cause is different. 

Exception in thread ""main"" java.io.IOException: no statuscode in response
	at java.net.http/jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:857)
	at java.net.http/jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:123)
	at Test.main(Test.java:17)
Caused by: java.io.IOException: no statuscode in response
	at java.net.http/jdk.internal.net.http.Stream.lambda$handleResponse$2(Stream.java:497)
	at java.base/java.util.OptionalLong.orElseThrow(OptionalLong.java:273)
	at java.net.http/jdk.internal.net.http.Stream.handleResponse(Stream.java:497)
	at java.net.http/jdk.internal.net.http.Stream.incoming(Stream.java:463)
	at java.net.http/jdk.internal.net.http.Http2Connection.processFrame(Http2Connection.java:838)
	at java.net.http/jdk.internal.net.http.frame.FramesDecoder.decode(FramesDecoder.java:155)
	at java.net.http/jdk.internal.net.http.Http2Connection$FramesController.processReceivedData(Http2Connection.java:232)
	at java.net.http/jdk.internal.net.http.Http2Connection.asyncReceive(Http2Connection.java:681)
	at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.processQueue(Http2Connection.java:1387)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.runOrSchedule(Http2Connection.java:1405)
	at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.onNext(Http2Connection.java:1431)
	at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.onNext(Http2Connection.java:1365)
	at java.net.http/jdk.internal.net.http.common.SSLTube$DelegateWrapper.onNext(SSLTube.java:210)
	at java.net.http/jdk.internal.net.http.common.SSLTube$SSLSubscriberWrapper.onNext(SSLTube.java:492)
	at java.net.http/jdk.internal.net.http.common.SSLTube$SSLSubscriberWrapper.onNext(SSLTube.java:295)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper$DownstreamPusher.run1(SubscriberWrapper.java:316)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper$DownstreamPusher.run(SubscriberWrapper.java:259)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.outgoing(SubscriberWrapper.java:232)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.outgoing(SubscriberWrapper.java:198)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Reader.processData(SSLFlowDelegate.java:444)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Reader$ReaderDownstreamPusher.run(SSLFlowDelegate.java:268)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1589)

Process finished with exit code 1


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Use java code provided below to send a request via HttpClient.


---------- BEGIN SOURCE ----------
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;

public class Test {

    public static void main(String[] args) throws IOException, InterruptedException {

        String baseUri = ""https://dawa.aws.dk/autocomplete?q=Rentemestervej+8,+2400+K%C3%B8benhavn+NV"";
        HttpRequest build = HttpRequest
                .newBuilder(URI.create(baseUri))
                .build();

        HttpResponse<String> send = HttpClient.newHttpClient().send(build, BodyHandlers.ofString());
        String body = send.body();
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Changing the HTTP version to 1.1 by adding .version(HttpClient.Version.HTTP_1_1) when building HttpRequest object.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292928,,,,,,,,,,,,,,,,,,,,"2022-11-08 04:38;ccleary;HeadersEndStreamTest.java;https://bugs.openjdk.org/secure/attachment/101487/HeadersEndStreamTest.java","2022-11-04 08:40;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/101445/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z4qr:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-11-04 08:42;tongwan;The observations on Windows 10:
JDK 11: Failed, HttpClient throws java.io.IOException: no statuscode in response
JDK 17: Failed.
JDK 18: Failed.
JDK 19: Failed.
JDK 20ea+4: Failed.;;;","2022-11-07 08:33;ccleary;Issue is reproducible always with the reproducer code given in the report. Investigating if cause is related to previous fix as mentioned in the description of the bug,;;;","2022-11-08 02:19;ccleary;From what I can ascertain, the issue is not entirely related to https://bugs.openjdk.org/browse/JDK-8263031?jql=text%20~%20%22no%20statuscode%20in%20response%22, it just results in the same exception being thrown. What is happening here is that the server is sending a HEADERS frame with the END_STREAM and END_HEADERS flag set after sending it's last DATA frame which includes a 200 response code. Our client expects a response code to be included in the HEADERS frame even though it has already been received and correctly set by the receipt of the DATA frame. See src/java.net.http/share/classes/jdk/internal/net/http/Stream.java:502"". It could be that our client does not account for the case where both the END_STREAM and END_HEADERS flag are set, or that possibly a check for an already successful response is missing meaning a check for the status code is not needed.

According to the HTTP/2 RFC section 8.1 (https://datatracker.ietf.org/doc/html/rfc7540#section-8.1), "" An HTTP response is complete after the server sends -- or the client receives -- a frame with the END_STREAM flag set"" and "" so the connection should probably be made to close normally (i.e. put the active stream in the half-closed state). Changes to how this last HEADER frame received is handled in Stream::incoming() should help fix this issue.;;;","2022-11-08 04:40;ccleary;Added a reproducer for the issue, HeadersEndStreamTest.java, to the bugs files. It recreates the situation observed in the submitters code as I described in my previous comment.;;;","2022-11-08 04:58;dfuchs;Receiving a HEADERS frame after a DATA frame is unusual. It looks like the server is trying to send trailers and we don't support that. According to the RFC a server shouldn't send trailers if the client doesn't opt in.;;;","2022-11-08 07:46;dfuchs;If I understand RFC 9110 correctly a client that doesn't support trailers should just quietly drop them. So we probably should support this scenario in the HttpClient: recognize that this is a trailer frame, if it has a non empty payload, send its payload to HPACK to make sure that the encoder and decoder are kept in sync, and then drop the content, and process the flags. Note that a trailer MUST have the END_STREAM flag set, but if it doesn't have the END_HEADERS flag set we also should expect  CONTINUATIONS until a continuation with the END_HEADERS flag is received. At which point we can close the stream.;;;","2023-01-17 07:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12028
Date: 2023-01-17 10:58:54 +0000;;;","2023-02-13 00:36;dukebot;Changeset: f4b140b4
Author:    Conor Cleary <ccleary@openjdk.org>
Date:      2023-02-13 08:34:45 +0000
URL:       https://git.openjdk.org/jdk/commit/f4b140b4200fc0f49161395501d3dbcba7a79059
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Multiple copies of accelerator change listeners are added to MenuItems, but only 1 is removed",JDK-8296409,5086832,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dwookey,dwookey,dwookey,2022-11-04 08:36,2022-12-23 08:22,2023-10-01 09:56,2022-12-19 04:29,jfx19,,,,,,,jfx20,javafx,,0,,,,,,,,,,,,,,,,,,,,,,"The MenuButtonSkinBase adds a scene listener to add and remove change listeners to the acceleratorProperty, however it also calls ControlAcceleratorSupport which does the same. Each time the MenuButton's scene changes, multiple listeners are added, but only 1 copy is removed causing the number of listeners to grow continuously.

This test demonstrates the issue:


    @Test
    public void testMemoryButtonSkinDoesntAddAdditionalListeners() {
        MenuItem menuItem = new MenuItem(""Menu Item"");
        MenuButton menuButton = new MenuButton(""Menu Button"", null, menuItem);
        StackPane root = new StackPane(menuButton);
        StageLoader sl = new StageLoader(root);
        assertEquals(1, getListenerCount(menuItem.acceleratorProperty()));
        root.getChildren().remove(menuButton);
        assertEquals(0, getListenerCount(menuItem.acceleratorProperty()));
        root.getChildren().add(menuButton);
        assertEquals(1, getListenerCount(menuItem.acceleratorProperty()));
        sl.dispose();
    }


Alternatively run the following app, click the button to add/remove the menu a few times, then profile and check the number of listeners created by ControlAcceleratorSupport.java, then click the button some more and check the number again. It keeps growing.


import javafx.application.Application;

import javafx.scene.Scene;
import javafx.scene.control.*;

import javafx.scene.layout.VBox;
import javafx.stage.Stage;


public class MenuButtonChangeListenerTest extends Application {



    @Override
    public void start(Stage primaryStage) {

        VBox root = new VBox();
        Scene scene = new Scene(root, 800, 600);
        primaryStage.setTitle(""Hello World!"");
        primaryStage.setScene(scene);
        primaryStage.show();
        MenuItem menuItem = new MenuItem(""Menu Item"");
        Menu mainMenu = new Menu(""Main Menu"", null, menuItem);
        MenuButton menuButton = new MenuButton(""Main Menu"", null, mainMenu);


        Button button = new Button(""Add/Remove Menu"");
        button.setOnAction((e)->{
            if (root.getChildren().contains(menuButton)) {
                root.getChildren().remove(menuButton);
            }
            else {
                root.getChildren().add(menuButton);
            }
        });
        root.getChildren().add(button);
    }


}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295426,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2z4vn:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-04 09:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/937
Date: 2022-11-04 16:07:54 +0000;;;","2022-12-19 04:29;dukebot;Changeset: bac8ee87
Author:    Dean Wookey <dwookey@openjdk.org>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2022-12-19 12:27:27 +0000
URL:       https://git.openjdk.org/jfx/commit/bac8ee878815a179ecebe212d324da32a4eb89fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] IR test runner methods in TestLongRangeChecks.java invoke wrong test methods,JDK-8296403,5086827,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,dfenacci,chagedorn,chagedorn,2022-11-04 06:39,2023-01-25 23:07,2023-10-01 09:56,2023-01-20 00:17,18,19,20,,,,,21,hotspot,,0,noreg-self,oracle-triage-20,starter,,,,,,,,,,,,,,,,,,,"The following two @Run methods invoke the wrong @Test methods, most likely due to a copy-paste error:

    @Run(test = ""testStrideNegScalePosInIntLoop2"")
    private void testStrideNegScalePosInIntLoop2_runner() {
        testStrideNegScalePosInIntLoop1(0, 100, 200, 0);
    }

    @Run(test = ""testStridePosScaleNegInIntLoop2"")
    private void testStridePosScaleNegInIntLoop2_runner() {
        testStridePosScaleNegInIntLoop1(0, 100, 200, 198);
    }

We should change these to invoke the correct methods instead.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278296,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4uj:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-04 06:40;chagedorn;ILW = IR test runner methods invoke wrong test methods, single test, no workaround = LLH = P5;;;","2023-01-19 00:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12088
Date: 2023-01-19 07:40:26 +0000;;;","2023-01-20 00:17;dukebot;Changeset: e1893976
Author:    Damon Fenacci <damon.fenacci@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-01-20 08:16:28 +0000
URL:       https://git.openjdk.org/jdk/commit/e1893976d588c7c2bffe47a133ecd0e0e35f17ea
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pointCrlIssuers might be null in DistributionPointFetcher::verifyURL,JDK-8296400,5086824,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdonovan,weijun,weijun,2022-11-04 06:03,2023-03-16 00:19,2023-10-01 09:56,2023-03-10 06:11,,,,,,,,21,security-libs,,0,noreg-trivial,starter-bug,,,,,,,,,,,,,,,,,,,,"436: if (pointCrlIssuers.size() != 1) {
...
445: pointNames = getFullNames
446:        (pointCrlIssuer, relativeName);
...
481: for (Iterator<GeneralName> t = pointCrlIssuers.iterator();

See https://github.com/openjdk/jdk/blob/4cec141a90bc5d3b8ec17c024291d9c74a112cd4/src/java.base/share/classes/sun/security/provider/certpath/DistributionPointFetcher.java#L436",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4tv:",9223372036854775807,b14,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-03-03 11:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12866
Date: 2023-03-03 19:45:22 +0000;;;","2023-03-10 06:11;dukebot;Changeset: de9f3b6a
Author:    Matthew Donovan <matthew.p.donovan@oracle.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2023-03-10 14:10:41 +0000
URL:       https://git.openjdk.org/jdk/commit/de9f3b6aac85edb39af67db887af78906e8d5da0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
crlNumExtVal might be null inside X509CRLSelector::match,JDK-8296399,5086823,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-11-04 05:54,2023-01-31 03:45,2023-10-01 09:56,2022-11-21 07:26,,,,,,,,20,security-libs,,0,starter-bug,,,,,,,,,,,,,,,,,,,,,"629: DerInputStream in = new DerInputStream(crlNumExtVal);

See https://github.com/openjdk/jdk/blob/63fec5da27994b05a58ce1abcfe07a8ed8bc497b/src/java.base/share/classes/java/security/cert/X509CRLSelector.java#L629",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4tn:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2022-11-17 08:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11215
Date: 2022-11-17 16:14:57 +0000;;;","2022-11-21 07:26;dukebot;Changeset: 57f5cfde
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-11-21 15:25:18 +0000
URL:       https://git.openjdk.org/jdk/commit/57f5cfdeb52b160e58968fb177b4432b3e079607
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incremental build failed with a NPE,JDK-8296390,5086812,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-11-04 04:33,2022-12-05 14:05,2023-10-01 09:56,2022-11-30 01:50,20,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"An incremental build involving modified source files, but not modified module-info.java, from java.management, failed with:
---
Building target 'default (exploded-image)' in configuration 'linux-x86_64-server-release'
Compiling up to 56 files for java.sql.rowset
Compiling up to 97 files for jdk.jshell
Compiling up to 30 files for jdk.security.auth
Compiling up to 941 files for jdk.hotspot.agent
An exception has occurred in the compiler (20-internal). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot invoke ""java.util.Map.get(Object)"" because ""msym.visiblePackages"" is null
        at jdk.compiler.interim/com.sun.tools.javac.code.Symtab.lookupPackage(Symtab.java:713)
        at jdk.compiler.interim/com.sun.tools.javac.code.Symtab.lookupPackage(Symtab.java:694)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Resolve.lookupPackage(Resolve.java:2140)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Resolve.findIdentInternal(Resolve.java:2440)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Resolve.findIdent(Resolve.java:2419)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Resolve.resolveIdent(Resolve.java:2712)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Attr.visitIdent(Attr.java:4268)
        at jdk.compiler.interim/com.sun.tools.javac.tree.JCTree$JCIdent.accept(JCTree.java:2664)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:662)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Attr.visitSelect(Attr.java:4345)
        at jdk.compiler.interim/com.sun.tools.javac.tree.JCTree$JCFieldAccess.accept(JCTree.java:2530)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:662)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Attr.visitSelect(Attr.java:4345)
        at jdk.compiler.interim/com.sun.tools.javac.tree.JCTree$JCFieldAccess.accept(JCTree.java:2530)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:662)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Attr.attribImportQualifier(Attr.java:396)
        at jdk.compiler.interim/com.sun.tools.javac.comp.TypeEnter$ImportsPhase.doImport(TypeEnter.java:416)
        at jdk.compiler.interim/com.sun.tools.javac.comp.TypeEnter$ImportsPhase.resolveImports(TypeEnter.java:365)
        at jdk.compiler.interim/com.sun.tools.javac.comp.TypeEnter.lambda$ensureImportsChecked$0(TypeEnter.java:167)
        at jdk.compiler.interim/com.sun.tools.javac.comp.TypeEnter.finishImports(TypeEnter.java:219)
        at jdk.compiler.interim/com.sun.tools.javac.comp.TypeEnter.ensureImportsChecked(TypeEnter.java:167)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Enter.complete(Enter.java:626)
        at jdk.compiler.interim/com.sun.tools.javac.main.JavaCompiler.readSourceFile(JavaCompiler.java:822)
        at jdk.compiler.interim/com.sun.tools.javac.main.JavaCompiler.readSourceFile(JavaCompiler.java:779)
        at jdk.compiler.interim/com.sun.tools.javac.main.JavaCompiler.lambda$new$0(JavaCompiler.java:342)
        at jdk.compiler.interim/com.sun.tools.javac.code.ClassFinder.fillIn(ClassFinder.java:378)
        at jdk.compiler.interim/com.sun.tools.javac.code.ModuleFinder$1.complete(ModuleFinder.java:387)
        at jdk.compiler.interim/com.sun.tools.javac.code.Symbol.complete(Symbol.java:682)
        at jdk.compiler.interim/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1410)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Modules$1.complete(Modules.java:641)
        at jdk.compiler.interim/com.sun.tools.javac.code.Symbol.complete(Symbol.java:682)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Modules.completeModule(Modules.java:1512)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Modules.lambda$completeModule$19(Modules.java:1474)
        at jdk.compiler.interim/com.sun.tools.javac.code.Symbol.complete(Symbol.java:682)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Modules.enter(Modules.java:272)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Modules.initModules(Modules.java:233)
        at jdk.compiler.interim/com.sun.tools.javac.main.JavaCompiler.initModules(JavaCompiler.java:1022)
        at jdk.compiler.interim/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:920)
        at jdk.compiler.interim/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler.interim/com.sun.tools.sjavac.comp.SjavacImpl.compile(SjavacImpl.java:117)
        at jdk.compiler.interim/com.sun.tools.sjavac.comp.PooledSjavac.lambda$compile$0(PooledSjavac.java:63)
        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
        at java.base/java.lang.Thread.run(Thread.java:1589)
printing javac parameters to: /home/jlahoda/src/jdk/jdk/make/javac.20221104_105809.args
gmake[3]: *** [CompileJavaModules.gmk:95: /home/jlahoda/src/jdk/jdk/build/linux-x86_64-server-release/jdk/modules/java.management/_the.java.management_batch] Error 4
gmake[2]: *** [make/Main.gmk:193: java.management-java] Error 2
gmake[2]: *** Waiting for unfinished jobs....
Updating support/modules_libs/java.desktop/libsplashscreen.so due to 6 file(s)

ERROR: Build failed for target 'default (exploded-image)' in configuration 'linux-x86_64-server-release' (exit code 2) 
Stopping sjavac server

=== Output from failing command(s) repeated here ===
* For target jdk_modules_java.management__the.java.management_batch:
An exception has occurred in the compiler (20-internal). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot invoke ""java.util.Map.get(Object)"" because ""msym.visiblePackages"" is null
        at jdk.compiler.interim/com.sun.tools.javac.code.Symtab.lookupPackage(Symtab.java:713)
        at jdk.compiler.interim/com.sun.tools.javac.code.Symtab.lookupPackage(Symtab.java:694)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Resolve.lookupPackage(Resolve.java:2140)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Resolve.findIdentInternal(Resolve.java:2440)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Resolve.findIdent(Resolve.java:2419)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Resolve.resolveIdent(Resolve.java:2712)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Attr.visitIdent(Attr.java:4268)
        at jdk.compiler.interim/com.sun.tools.javac.tree.JCTree$JCIdent.accept(JCTree.java:2664)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:662)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Attr.visitSelect(Attr.java:4345)
        at jdk.compiler.interim/com.sun.tools.javac.tree.JCTree$JCFieldAccess.accept(JCTree.java:2530)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:662)
        at jdk.compiler.interim/com.sun.tools.javac.comp.Attr.visitSelect(Attr.java:4345)
   ... (rest of output omitted)

* All command lines available in /home/jlahoda/src/jdk/jdk/build/linux-x86_64-server-release/make-support/failure-logs.
=== End of repeated output ===

No indication of failed target found.
HELP: Try searching the build log for '] Error'.
HELP: Run 'make doctor' to diagnose build problems.

make[1]: *** [/home/jlahoda/src/jdk/jdk/make/Init.gmk:320: main] Error 2
make: *** [/home/jlahoda/src/jdk/jdk/make/Init.gmk:186: default] Error 2
---
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4r7:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-04 07:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10985
Date: 2022-11-04 14:05:05 +0000;;;","2022-11-30 01:50;dukebot;Changeset: 9e80cf9c
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-11-30 09:47:48 +0000
URL:       https://git.openjdk.org/jdk/commit/9e80cf9c37f4dbc6e176a59dce92817c109dd561
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: PhaseCFG::convert_NeverBranch_to_Goto must handle both orders of successors,JDK-8296389,5086811,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2022-11-04 04:26,2023-05-24 00:39,2023-10-01 09:56,2022-12-12 04:11,17,20,21,,,,,21,hotspot,,0,c2,c2-loopopts,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-11,oracle-triage-20,,,,,,,,,,,,,"During fuzzer work of JDK-8280126, I found the same assert but with irreducible loops. I suspected it would also be possible to trigger the same bug but without irreducible loops, so I went and constructed an R3.java, using various tricks.

To reproduce, use either:
$ java -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:+PrintOptoAssembly -XX:+TraceLoopOpts -XX:+PrintInlining -Xcomp -XX:CompileCommand=compileonly,R3::test -XX:-TieredCompilation -XX:PerMethodTrapLimit=0 R3.java
$ java -Xcomp -XX:CompileCommand=compileonly,R3::test -XX:PerMethodTrapLimit=0 R3.java

#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/node.cpp:830), pid=111698, tid=111711
#  assert(idx < _cnt) failed: oob
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-10-06-1045569.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-10-06-1045569.emanuel..., compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1095a1e]  Node::del_req(unsigned int)+0x26

Current CompileTask:
C2:   5472   83    b        R3::test (96 bytes)

Stack: [0x00007f3430cdc000,0x00007f3430ddd000],  sp=0x00007f3430dd7f90,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1095a1e]  Node::del_req(unsigned int)+0x26  (node.cpp:830)
V  [libjvm.so+0x656230]  PhaseCFG::convert_NeverBranch_to_Goto(Block*)+0x232  (block.cpp:653)
V  [libjvm.so+0x65669c]  PhaseCFG::remove_empty_blocks()+0x100  (block.cpp:744)
V  [libjvm.so+0x89bb42]  Compile::Code_Gen()+0x354  (compile.cpp:2978)
V  [libjvm.so+0x8920fd]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x159f  (compile.cpp:863)
V  [libjvm.so+0x780a29]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x179  (c2compiler.cpp:113)
V  [libjvm.so+0x8b0c56]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x916  (compileBroker.cpp:2240)
V  [libjvm.so+0x8af8bf]  CompileBroker::compiler_thread_loop()+0x3ed  (compileBroker.cpp:1916)
V  [libjvm.so+0x8d0008]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x72  (compilerThread.cpp:58)
V  [libjvm.so+0xc5df2a]  JavaThread::thread_main_inner()+0x144  (javaThread.cpp:699)
V  [libjvm.so+0xc5dde2]  JavaThread::run()+0x182  (javaThread.cpp:684)
V  [libjvm.so+0x132fe8f]  Thread::call_run()+0x195  (thread.cpp:224)
V  [libjvm.so+0x10dd81b]  thread_native_entry(Thread*)+0x19b  (os_linux.cpp:710)

TraceLoopOpts:
PHASE_PHASEIDEALLOOP1 start
Counted          Loop: N237/N231  counted [76,0),-1 (-1 iters) 
Parallel IV: 59     Loop: N237/N231  counted [76,0),-1 (-1 iters)  has_sfpt strip_mined
Counted          Loop: N252/N136  counted [0,4),+1 (-1 iters) 
Loop: N0/N0  has_sfpt
  Loop: N236/N235 
    Loop: N237/N231  counted [76,0),-1 (-1 iters)  has_sfpt strip_mined
  Loop: N251/N250 
    Loop: N252/N136  counted [0,4),+1 (-1 iters)  has_sfpt strip_mined
Empty with zero trip guard       Loop: N237/N231  counted [76,0),-1 (-1 iters)  has_sfpt strip_mined
MaxUnroll  4     Loop: N252/N136  counted [0,4),+1 (2147483648 iters)  has_sfpt strip_mined
Unroll 2( 4)     Loop: N252/N136  counted [0,4),+1 (2147483648 iters)  has_sfpt strip_mined
PHASE_PHASEIDEALLOOP1 end
PHASE_PHASEIDEALLOOP2 start
Loop: N0/N0  has_sfpt
  Loop: N251/N250  sfpts={ 253 }
    Loop: N277/N136  counted [0,4),+2 (2147483648 iters)  has_sfpt strip_mined
  Loop: N309/N170  sfpts={ 170 }
MaxUnroll  2     Loop: N277/N136  counted [0,4),+2 (2147483648 iters)  has_sfpt strip_mined
Unroll 4( 2)     Loop: N277/N136  counted [0,4),+2 (2147483648 iters)  has_sfpt strip_mined
Peel           Loop: N309/N170  sfpts={ 170 }
PHASE_PHASEIDEALLOOP2 end
PHASE_PHASEIDEALLOOP3 start
Loop: N0/N0  has_sfpt
  Loop: N309/N170  sfpts={ 170 }
PHASE_PHASEIDEALLOOP3 end
Loop: N0/N0  has_sfpt
  Loop: N309/N170  sfpts={ 170 }",,,,,,,,,,,JDK-8299026,JDK-8307022,JDK-8300220,JDK-8305542,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299214,JDK-8298568,JDK-8303611,,,,,,,,,JDK-8305750,JDK-8298582,JDK-8280126,,,,,,,"2022-11-04 04:28;epeter;R3.java;https://bugs.openjdk.org/secure/attachment/101434/R3.java","2022-11-04 04:28;epeter;R3.java.1.png;https://bugs.openjdk.org/secure/attachment/101436/R3.java.1.png","2022-11-04 04:28;epeter;R3.java.2.png;https://bugs.openjdk.org/secure/attachment/101437/R3.java.2.png","2022-11-04 04:28;epeter;R3.java.3.png;https://bugs.openjdk.org/secure/attachment/101438/R3.java.3.png","2022-11-04 04:28;epeter;R3.java.4.png;https://bugs.openjdk.org/secure/attachment/101439/R3.java.4.png","2022-11-04 04:28;epeter;R3.java.5.png;https://bugs.openjdk.org/secure/attachment/101440/R3.java.5.png","2022-11-04 04:28;epeter;R3.java.6.png;https://bugs.openjdk.org/secure/attachment/101441/R3.java.6.png","2022-11-04 04:40;epeter;R3.java.7.png;https://bugs.openjdk.org/secure/attachment/101444/R3.java.7.png","2022-11-04 04:28;epeter;hs_err_pid111803.log;https://bugs.openjdk.org/secure/attachment/101433/hs_err_pid111803.log","2022-11-04 04:28;epeter;replay_pid111803.log;https://bugs.openjdk.org/secure/attachment/101442/replay_pid111803.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4qz:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-04 04:44;epeter;Context:
Normal case: during matching, ""live""/""succ"" projection is added as output of NeverBranch before the ""dead"" projection leading to Halt. Thus, the outputs of NeverBranch are normally [[ ""succ"", ""dead"" ]].
Details: During DFS, usually we go from Halt to NeverBranch. Then via Region/Loop, take backedge, and find the ""live""/""succ"" edge. We already have its inputs (NeverBranch), thus we can now post-visit the live edge, and attach it to the NeverBranch first. Later, once we have processed the whole infinite loop, we post-visit out of NeverBranch to the ""dead"" projection edge, which we attach second.

In R3.java:
Abnormal order: ""dead"" projection is first attached to NeverBranch, and ""live""/""succ"" projection is added second.
Details (see R3.java.6.png):
In our pathological case, during bottom-up DFS traversal for matching, we go in through the shared 224 Halt, and first visit the 345 NeverBranch of the peeled iteration, and visit all of what is above. But there is no backedge, so we will not find the ""live"" edge, and we post-visit the ""dead"" edge first (350 CProj). Then, we take the second branch of the Halt (351 Region -> 222 CProj), and visit the peeled loop. From there, we finally find the ""live"" projection (346 CProj) of the peeled iterations NeverBranch, and attach it second.

Why is the order of ""live""/""succ"" Projection vs the ""dead"" one relevant?
It predicts in what order we later DFS traverse the nodes for scheduling the nodes into blocks, and also matters the order of successor blocks.
It seems that the code in PhaseCFG::convert_NeverBranch_to_Goto expects the ""succ"" projection and block to have idx=0. On first appearance the code looks like it should also handle the inverted case where ""succ"" has idx=1, but the code has a bug, where we overwrite the _succs array where the ""dead"" block reference is stored before we read it off.

This is how the nodes are scheduled in the block:
B6: #	out( B12 B7 ) <- in( N55 N57 )  Freq: 0.9
 17  Region  === 17 54 53  [[ 17 16 42 ]]  !jvms: R3::test @ bci:57 (line 29)
 42  Phi  === 17 43 44  [[ 40 ]]  #int:1..3 !jvms: R3::test @ bci:57 (line 29)
 16  NeverBranch  === 17  [[ 15 27 ]] 
 15  CProj  === 16  [[ 52 ]] #1
 27  CProj  === 16  [[ 61 ]] #0 !jvms: R3::test @ bci:65 (line 30)

Why did this bug not trigger before?
Well, this seems to be quite an obscure code pattern, many things need to play together. We need an infinite-loop, which is peeled. This leads to the shared HaltNode, where the peeled iteration is visited first. However, we also cannot have a HaltNode further down after the peeled loop which would be traversed first.
To cause the peeling, the infinite loop needs an if with a loop exit.
Further, we need some of the ifs to collapse at the exactly right loop-opts phase, to trigger this sequence of events.
It turns out that with irreducible loops this is a bit more common, at least my bytecode fuzzer found an example quite fast.

Note:
We need the flag: -XX:PerMethodTrapLimit=0
But probably we could just exhaust the traps with some extra code above the failing code.
Without traps, we cannot insert predicates at parsing, which would act as fake ""loop-exits"", hence we would not add the NeverBranch nodes that trigger the bug.;;;","2022-11-04 04:56;epeter;Suggested solution:
Fix PhaseCFG::convert_NeverBranch_to_Goto.
On first sight it looks like the code should handle both cases:
[[ ""succ"", ""dead"" ]]   -> works
[[ ""dead"", ""succ"" ]]   -> broken

The second case is broken because we do:

Block *succ = b->_succs[idx];
...
b->_succs.map(0,succ);
...
Block* dead = b->_succs[1 - idx];

This only works if idx == 0. Else, if idx == 1 we overwrite position 0, before we read ""dead"" from it - and instead read ""succ"" again. Then the code below thinks it is deleting inputs of ""dead"", but in fact deletes inputs of ""succ"". Some of the input positions are not available in ""succ"", and we throw an assert in Node::del_req.;;;","2022-11-04 05:21;epeter;Just ran it with
openjdk 17.0.4 2022-07-19
product build
Reproduces with SIGSEGV, was to be expected, since we modify the blocks and nodes in unintended ways.;;;","2022-11-04 06:19;chagedorn;ILW = C2 assertion failure with obscure code pattern, only with infinite loops and mainly with irreducible loops, use large enough PerMethodTrapLimit value = HLM = P3;;;","2022-12-02 05:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11481
Date: 2022-12-02 12:48:31 +0000;;;","2022-12-12 04:11;dukebot;Changeset: fabda246
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-12-12 12:11:02 +0000
URL:       https://git.openjdk.org/jdk/commit/fabda246960cfdfff13c5a87de53d97169248172
;;;","2023-01-11 07:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1059
Date: 2023-01-11 15:29:29 +0000;;;","2023-01-16 00:18;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Follow up for 8294672.
I had to adapt the code slightly and included a follow up for a build fix.
Tests pass. SAP nightly testing passed.;;;","2023-03-29 03:38;thartmann;Fix Request (JDK 20u)
Resolves an assert during C2 compilation. The fix is medium risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-03-29 03:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/26
Date: 2023-03-29 10:38:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] sun/security/provider/SecureRandom/AbstractDrbg/SpecTest.java intermittently timeout ,JDK-8296384,5086805,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yyang,yyang,yyang,2022-11-04 02:56,2023-07-26 17:39,2023-10-01 09:56,2022-12-04 23:43,,,,,,,,20,security-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,,"Created on behalf of yansendao.ysd@alibaba-inc.com
----
sun/security/provider/SecureRandom/AbstractDrbg/SpecTest.java intermittently fail. When the /dev/random is empty, then this testcase will run timeout

To Reproduce:
1. make /proc/sys/kernel/random/entropy_avail small than 1000
wc -l /dev/random
cat /proc/sys/kernel/random/entropy_avail

2. run the test
rm -rf tmp/ ; jtreg -nr -v:fail,error -w tmp -timeout:0.1 test/jdk/sun/security/provider/SecureRandom/AbstractDrbg/SpecTest.java",,,,,,,,,,,JDK-8312732,JDK-8313222,JDK-8312552,JDK-8313151,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293412,,,,,,,,,,,JDK-8297909,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4pn:",9223372036854775807,b27,,,,,,,,,,,,"2022-11-16 02:38;djelinski;there's one other test that uses /dev/random:
java/security/SecureRandom/NoSync.java
see my first comment on JDK-8293412 for search methodology;;;","2022-11-28 09:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11014
Date: 2022-11-07 09:04:45 +0000;;;","2022-12-04 23:43;dukebot;Changeset: 82561de7
Author:    sendaoYan <yansendao.ysd@alibaba-inc.com>
Committer: Yi Yang <yyang@openjdk.org>
Date:      2022-12-05 07:41:42 +0000
URL:       https://git.openjdk.org/jdk/commit/82561de722b9ca580c0c1a53050c711b64611352
;;;","2023-07-24 04:00;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nightly testing passed.;;;","2023-07-24 04:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1619
Date: 2023-07-24 11:02:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javapath/java.exe strips embedded double quotes from command line arguments,JDK-8296383,5086284,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,billyh,webbuggrp,webbuggrp,2022-10-27 23:49,2023-09-11 17:34,2023-10-01 09:56,2022-12-12 10:02,11,17,18,19,,,,21,install,,0,dcsad,reproducer-yes,sn_132,sn_133,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10 

java version ""17.0.5"" 2022-10-18 LTS
Java(TM) SE Runtime Environment (build 17.0.5+9-LTS-191)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.5+9-LTS-191, mixed mode, sharing)

(The same behavior can be observed from Java version 1.8 and above)

A DESCRIPTION OF THE PROBLEM :
When Installing Java 17.0.5, there at least two java.exe installed:

1. C:\Program Files\Java\jdk-17.0.5\bin\java.exe
2. C:\Program Files\Common Files\Oracle\Java\javapath\java.exe

and #2 is the picked up as the java command on the system.

The two java's respond differently to embedded quoted arguments on the command line

#1 keeps the quoted args
#2 strips them

Please also see JDK-8266473 which fixed the outer double quoted arguments case.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a java program to print out the command line args:

public class PrintArgs
{
    public static void main(String [] args)
    {
	for (String arg: args)
	    {
		System.out.println(arg);
	    }
    }
}

Running this using the javapath/java.exe (the numbers represent the depth of the embedded quotes):
""C:\Program Files\Common Files\Oracle\Java\javapath\java.exe"" PrintArgs ""0\""1\\\""2\\\""1\""0""

gives back

0""1\2\1""0

while running them with java from the jdk directoy, 
""C:\Program Files\Java\jdk-17.0.5\bin\java.exe"" PrintArgs ""0\""1\\\""2\\\""1\""0""

gives back

0""1\""2\""1""0

i.e. the embedded double quotes are respected.




EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
I expect the result of calling both java.exe's to be the same and to respect the embedded double quotes in command line arguments.
ACTUAL -
The result differs between the two invocation, and the embedded double quote is dropped from javapath/java.exe

FREQUENCY : always


",,,,,,,,,,,JDK-8298782,JDK-8298654,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309489,,,,,,,,,,,JDK-8266473,,,,,,,,,"2022-11-04 02:28;adev;PrintArgs.java;https://bugs.openjdk.org/secure/attachment/101430/PrintArgs.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z22j:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6d4c575e,,,,,,,Verified,,"2022-11-04 02:28;adev;The issue is similar to https://bugs.openjdk.org/browse/JDK-8266473.
We may need to add 
 tstring keepquotes = tstrings::replace(argarg, _T(""\\""), _T(""\\\\""));
at https://orahub.oci.oraclecorp.com/jpg-dev/jdk17/-/blob/0e51c110d3776178b4c1dcf86f299a5ec4af55de/closed/install/src/windows/shimlaunchers/shim.cpp#L53;;;","2023-01-12 01:38;goetz;[11u-na, 17u-na]
Install is not maintained in OpenJDK.;;;","2023-05-23 14:04;efrenkel;Tested with JDK21+23.
I created PrintArgs.java and compiled it with JDK 21+23.

Before Fix:
C:\Users\tempuser\Desktop>java -version
java version ""21-ea"" 2023-09-19 LTS
Java(TM) SE Runtime Environment (build 21-ea+1-LTS-1)
Java HotSpot(TM) 64-Bit Server VM (build 21-ea+1-LTS-1, mixed mode, sharing)

C:\Users\tempuser\Desktop>""c:\Program Files\Java\jdk-21\bin\java.exe"" PrintArgs ""0\""1\\\""2\\\""1\""0""
0""1\""2\""1""0

C:\Users\tempuser\Desktop>""c:\Program Files\Common Files\Oracle\Java\javapath\java.exe"" PrintArgs ""0\""1\\\""2\\\""1\""0""
0""1\2\1""0

After Fix:
C:\Users\tempuser\Desktop>java -version
java version ""21-ea"" 2023-09-19 LTS
Java(TM) SE Runtime Environment (build 21-ea+23-LTS-1988)
Java HotSpot(TM) 64-Bit Server VM (build 21-ea+23-LTS-1988, mixed mode, sharing)

C:\Users\tempuser\Desktop>""c:\Program Files\Java\jdk-21\bin\java.exe"" PrintArgs ""0\""1\\\""2\\\""1\""0""
0""1\""2\""1""0

C:\Users\tempuser\Desktop>""c:\Program Files\Common Files\Oracle\Java\javapath\java.exe"" PrintArgs ""0\""1\\\""2\\\""1\""0""
0""1\""2\""1""0

After the fix, the embedded double quotes are respected. Fix is a PASS;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Shortcut for quick search not working,JDK-8296380,5086802,Bug,Closed,JDK,JDK,software,duke,,,P5,Fixed,tholenstein,tholenstein,tholenstein,2022-11-04 02:19,2022-11-14 19:17,2023-10-01 09:56,2022-11-04 02:34,20,,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,,The shortcut Ctrl-F for quick search is not working (detected on Linux),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4oz:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-11-04 02:27;chagedorn;ILW = Search shortcut Ctrl+F does nothing on Linux, Linux and possibly Windows, no workaround = LMH = P5;;;","2022-11-04 02:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10980
Date: 2022-11-04 09:22:11 +0000;;;","2022-11-04 02:34;dukebot;Changeset: bd729e69
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-11-04 09:32:53 +0000
URL:       https://git.openjdk.org/jdk/commit/bd729e69066b94593b7a775c0034c5e8537b73cc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak from ClassPathDirEntry::_dir,JDK-8296347,5086768,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,manc,manc,manc,2022-11-03 17:42,2022-11-14 19:21,2023-10-01 09:56,2022-11-08 15:38,11,17,19,20,8,,,20,hotspot,,0,classloading,,,,,,,,,,,,,,,,,,,,,"Colleague Justin King (jcking@google.com) made LeakSanitizer working with HotSpot, and identified a memory leak. ClassPathDirEntry does not deallocate memory allocated in its constructor, resulting in a memory leak. This seems a long-standing bug that exists in JDK 8 or earlier.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4hf:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-03 18:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10974
Date: 2022-11-04 01:34:42 +0000;;;","2022-11-08 15:38;dukebot;Changeset: 8146e1af
Author:    Man Cao <manc@openjdk.org>
Date:      2022-11-08 23:34:45 +0000
URL:       https://git.openjdk.org/jdk/commit/8146e1af82605e557078f5d7fa8c59e00b16b178
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CPVE thrown on missing content-length in OCSP response,JDK-8296343,5086764,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jnimeh,rhalade,rhalade,2022-11-03 16:14,2023-09-28 08:41,2023-10-01 09:56,2023-01-23 10:09,17,,,,,,,21,security-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,CertPathValidatorException is thrown when OCSP response doesn't specify the content-length.,,,,,,,,,,,JDK-8308635,,,,,,,,,,,,,,,,,,,JDK-8316138,,,,,JDK-8308255,,,,,,,JDK-8250220,JDK-8300939,JDK-8179503,,,,,,,,,JDK-8300946,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4gj:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2022-11-03 16:16;rhalade;contentLength is set to Integer.MAX_VALUE if it is missing in OCSP response. It causes EOFException to be thrown from IOUtils.readExactlyNBytes eventually causing CertPathValidatorException.;;;","2023-01-09 22:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11917
Date: 2023-01-10 06:02:29 +0000;;;","2023-01-23 10:09;dukebot;Changeset: 1a3cb8c5
Author:    Jamil Nimeh <jnimeh@openjdk.org>
Date:      2023-01-23 18:05:48 +0000
URL:       https://git.openjdk.org/jdk/commit/1a3cb8c5018bc016c2ad6b078e4abe13b39d151c
;;;","2023-05-18 09:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1361
Date: 2023-05-18 15:59:18 +0000;;;","2023-05-18 12:22;apavlyutkin;Fix Request (17u)

The patch fixes CertPathValidatorException taking place if OCSP response does not contain ContentLength field.

Original patch is applied cleanly.

Verification/regression (amd64/20.04 LTS): jdk_security including newly added test/jdk/sun/security/provider/certpath/OCSP/OCSPNoContentLength.java

[~clanger] please take a look
;;;","2023-05-31 10:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1920
Date: 2023-05-31 16:56:07 +0000;;;","2023-06-07 03:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/332
Date: 2023-06-07 10:17:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS SharedArchiveConsistency tests fail after JDK-8296157,JDK-8296337,5086758,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,iklam,iklam,iklam,2022-11-03 15:10,2023-01-26 10:21,2023-10-01 09:56,2022-11-03 15:31,,,,,,,,20,hotspot,,0,cds,regression,tier2,tier3,,,,,,,,,,,,,,,,,,"This was missing from  JDK-8296157

$ git diff
diff --git a/test/lib/jdk/test/lib/cds/CDSArchiveUtils.java b/test/lib/jdk/test/lib/cds/CDSArchiveUtils.java
index 69a7f947267..c51490a4a75 100644
--- a/test/lib/jdk/test/lib/cds/CDSArchiveUtils.java
+++ b/test/lib/jdk/test/lib/cds/CDSArchiveUtils.java
@@ -100,7 +100,7 @@ public class CDSArchiveUtils {
             offsetJvmIdent = wb.getCDSOffsetForName(""FileMapHeader::_jvm_ident"");
             spOffsetCrc = wb.getCDSOffsetForName(""CDSFileMapRegion::_crc"");
             spUsedOffset = wb.getCDSOffsetForName(""CDSFileMapRegion::_used"") - spOffsetCrc;
-            spOffset = wb.getCDSOffsetForName(""CDSFileMapHeaderBase::_space[0]"") - offsetMagic;
+            spOffset = wb.getCDSOffsetForName(""CDSFileMapHeaderBase::_regions[0]"") - offsetMagic;
             // constants
             staticMagic = wb.getCDSConstantForName(""static_magic"");
             dynamicMagic = wb.getCDSConstantForName(""dynamic_magic"");


Tests that failed:

runtime/cds/appcds/SharedArchiveConsistency.java
runtime/cds/appcds/dynamicArchive/ArchiveConsistency.java
runtime/cds/appcds/dynamicArchive/TestAutoCreateSharedArchive.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296157,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4f7:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-11-03 15:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10971
Date: 2022-11-03 22:13:10 +0000;;;","2022-11-03 15:31;dukebot;Changeset: 8f6c0489
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-11-03 22:30:28 +0000
URL:       https://git.openjdk.org/jdk/commit/8f6c0489117d1912d15a670c6ca056391e31286d
;;;","2022-11-09 13:47;dcubed;Bumped this from a P4 -> P2 since this was a regression
and added tier2 and tier3 sighting labels.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix accessibility manual test instruction,JDK-8296335,5086754,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-11-03 14:25,2023-04-26 04:48,2023-10-01 09:56,2022-11-05 14:32,,,,,,,,20,client-libs,,0,testbug,,,,,,,,,,,,,,,,,,,,,"Following tests instruction says that Press  ""until the <Component> Demo icon has focus. Actually its not Tab key its should be Arrow key to navigate between buttons on the JToolBar.

https://github.com/openjdk/jdk/blob/master/test/jdk/javax/accessibility/manual/ButtonDemo.html#L47-#L48
https://github.com/openjdk/jdk/blob/master/test/jdk/javax/accessibility/manual/ComboBoxDemo.html#L47-L48
https://github.com/openjdk/jdk/blob/master/test/jdk/javax/accessibility/manual/OptionPaneDemo.html#L47
https://github.com/openjdk/jdk/blob/master/test/jdk/javax/accessibility/manual/TableDemo.html#L47
https://github.com/openjdk/jdk/blob/master/test/jdk/javax/accessibility/manual/TreeDemo.html#L46


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4eb:",9223372036854775807,b23,,,,,,,,,,,,"2022-11-04 13:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10996
Date: 2022-11-04 20:18:09 +0000;;;","2022-11-05 14:32;dukebot;Changeset: c2f76383
Author:    lawrence.andrews <87324768+lawrence-andrew@users.noreply.github.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-11-05 21:27:52 +0000
URL:       https://git.openjdk.org/jdk/commit/c2f76383895e3d054988a5817de52e7795bf69c2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jar validator doesn't account for minor class file version,JDK-8296329,5086748,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2022-11-03 12:20,2023-02-21 00:22,2023-10-01 09:56,2022-11-22 19:10,19,,,,,,,20,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,"There's currently a check in the jar validator that checks if a class file in a versioned directory is of a greater version than the class file of the same class in the 'default' section of the jar. This happens in `FingerPrint::isCompatibleVersion`.

This rejects for instance a case where a Java 19 class file has a versioned class file for java 17:

    entry: META-INF/versions/17/Lib.class, has a class version incompatible with an earlier version

The 'version' that is used by the check comes from ASM, and is a mix of the major and minor version fused into a single int. However, this check doesn't seem to account for preview versions, which change the minor in such a way that the 'version' will appear negative, and will allow the above check to pass, seemingly erroneously.

I think this check was only ever designed to compare major versions, so we can fix this issue by extracting just the major version bits from the 'version' value given by ASM.

Here is a full reproducer that demonstrates the issue. I have 2 versions of the same class:

src/17/Lib.java:

    public class Lib {
        public static void method() {
            System.out.println(""java 17"");
        }
    }

src/19/Lib.java:

    public class Lib {
        public static void method() {
            System.out.println(""java 19"");
        }
    }

Compiled into a jar as follows (resulting in an error):

    $ javac --release 19 -d classes/19 ./src/19/Lib.java
    $ javac --release 17 -d classes/17 ./src/17/Lib.java
    $ jar --create --file lib.jar -C classes/19 Lib.class --release 17 -C classes/17 Lib.class
    entry: META-INF/versions/17/Lib.class, has a class version incompatible with an earlier version
    invalid multi-release jar file lib.jar deleted

However, if I modify src/19/Lib.java to reference a preview API:

    public class Lib {
        public static void method() {
            System.out.println(""java 19"");
            java.lang.foreign.Linker.nativeLinker();
        }
    }

And then recompile the jar:

    $ javac --enable-preview --release 19 -d classes/19 .\src\19\Lib.java
    Note: .\src\19\Lib.java uses preview features of Java SE 19.
    Note: Recompile with -Xlint:preview for details.
    $ jar --create --file lib.jar -C classes/19 Lib.class --release 17 -C classes/17 Lib.class

I don't receive any error from the jar validator (due to the reasons outlined above). I believe that is a bug.",,,,,,,,,,,JDK-8302223,JDK-8302958,JDK-8301860,,,,,,,,,,,,,,,,,,,,,,,JDK-8296119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4cz:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@189ffaae,,,,,,,,,"2022-11-03 12:30;jvernee;This issue also makes it impossible to create a jar file with a default version 17 class file, and version 19 class file of the same class in the META-INF/versions directory which uses preview features. However, manually copying the latter class into the archive makes it work as intended when running.;;;","2022-11-14 17:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11153
Date: 2022-11-15 01:52:14 +0000;;;","2022-11-22 19:10;dukebot;Changeset: faf48e61
Author:    Bo Zhang <zhangbodut@gmail.com>
Committer: Jorn Vernee <jvernee@openjdk.org>
Date:      2022-11-23 03:09:12 +0000
URL:       https://git.openjdk.org/jdk/commit/faf48e61be4f97f725b053aa351d3c64638546bf
;;;","2023-01-31 07:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1132
Date: 2023-01-31 15:25:48 +0000;;;","2023-02-02 04:43;yan;Fix request (17u):
on behalf of Radim Vansa:
I backport this as the issue appears in JDK 17, too.
Backport is almost clean, only JDK class version numbers changed in the test.
Risk seems small.;;;","2023-02-03 02:41;goetz;[17u risk]
I think the risk is not so small. 
First, the fix is only based on an assumption ""I think this check was only ever designed to compare major versions,...""
Second, it changes which classes are loaded and adds more errors. Even if these are intended, a working app might
fail after the update of the VM now, right?;;;","2023-02-03 11:17;jvernee;[~goetz] FWIW, the check only affects the `jar` tool, not any general class loading done at runtime by the VM/runtime. The jar tool will not output a .jar file if validation fails (because there is little sense in outputting an invalid jar file).

There could be an observed change in behavior since invalid jars that were previously undetected are now detected (and valid jars which were treated erroneously as invalid are now allowed);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JVMTI GetStackTrace truncates vthread stack trace for agents loaded into running VM,JDK-8296324,5086404,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,webbuggrp,webbuggrp,2022-10-31 07:04,2022-12-07 21:10,2023-10-01 09:56,2022-11-18 12:54,20,,,,,,,20,hotspot,,0,capbug,loom,,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubunu 22.10 x86_64 
openjdk version ""20-ea"" 2023-03-21
OpenJDK Runtime Environment (build 20-ea+21-1545)
OpenJDK 64-Bit Server VM (build 20-ea+21-1545, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
JVMTI GetStackTrace returns a truncated trace for the current thread (with nullptr for the jthread parameter) when the agent was attached. When the agent is loaded at start up the JVMTI trace matches Thread.getStackTrace.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
With the attached sources and JAVA_HOME set to a JDK 20: 

g++ -shared -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC VirtualStackTraceTest.cpp -o libVirtualStackTraceTest.so

$JAVA_HOME/bin/javac --enable-preview --release=20 VirtualStackTraceTest.java

LD_LIBRARY_PATH=. $JAVA_HOME/bin/java --enable-preview -Djdk.attach.allowAttachSelf=true VirtualStackTraceTest attach

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The test should show two identical stack traces and exit with 0.
ACTUAL -
The test shows a truncated stack trace, prints ""Stack traces do not match"" and exits with 1.

When started with

LD_LIBRARY_PATH=. $JAVA_HOME/bin/java --enable-preview -agentlib:VirtualStackTraceTest VirtualStackTraceTest 

it works as expected.

---------- BEGIN SOURCE ----------
-- VirtualStackTraceTest.java -----------------------------------------------------------
import com.sun.tools.attach.VirtualMachine;

import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.locks.LockSupport;

public class VirtualStackTraceTest {
    public static native String[] getStackTrace();

    public static void main(String[] args) throws Exception {
        if (args.length == 1 && args[0].equals(""attach"")) {
            VirtualMachine vm = VirtualMachine.attach(String.valueOf(ProcessHandle.current().pid()));
            vm.loadAgentLibrary(""VirtualStackTraceTest"");
        }
        Thread.sleep(2000);
        Thread.ofVirtual().name(""virtual-test"").start(VirtualStackTraceTest::testVirtual).join();
    }

    private static void testVirtual() {
        work();
    }

    private static void work() {
        LockSupport.parkNanos(1000);
        inner();
    }

    private static void inner() {
        checkCurrentThread();
    }

    private static void checkCurrentThread() {
        System.out.println(""Stack trace for "" + Thread.currentThread() + "": "");
        var jvmtiStackTrace = List.of(getStackTrace());
        var javaStackTrace = Arrays.stream(Thread.currentThread().getStackTrace()).map(StackTraceElement::getMethodName).toList();
        System.out.println(""JVM TI: "" + jvmtiStackTrace);
        System.out.println(""Java  : "" + javaStackTrace);
        if (!Objects.equals(jvmtiStackTrace, javaStackTrace)) {
            System.out.println(""Stack traces do not match"");
            System.exit(1);
        }
    }
}
-----------------------------------------------------------------------------------------

-- VirtualStackTraceTest.cpp ------------------------------------------------------------
#include <jvmti.h>
#include <cstdlib>
#include <cstring>
#include <vector>

namespace {
    jvmtiEnv *jvmti = nullptr;

    void checkJvmti(int code, const char* message) {
        if (code != JVMTI_ERROR_NONE) {
            printf(""Error %s: %d\n"", message, code);
            abort();
        }
    }
}

extern ""C"" JNIEXPORT jobjectArray JNICALL Java_VirtualStackTraceTest_getStackTrace(JNIEnv* jni_env, jclass clazz) {
    jvmtiFrameInfo frameInfo[50];
    jint count;
    checkJvmti(jvmti->GetStackTrace(nullptr, 0, 50, frameInfo, &count), ""GetStackTrace"");
    std::vector<jobject> visibleFrames;
    for (int frameIndex = 0; frameIndex < count; frameIndex++) {
        jclass declaringClass = nullptr;
        checkJvmti(jvmti->GetMethodDeclaringClass(frameInfo[frameIndex].method, &declaringClass), ""GetMethodDeclaringClass"");
        if (declaringClass) {
            char *clasSignature = nullptr, *methodName = nullptr;
            checkJvmti(jvmti->GetClassSignature(declaringClass, &clasSignature, nullptr), ""GetClassSignature"");
            checkJvmti(jvmti->GetMethodName(frameInfo[frameIndex].method, &methodName, nullptr, nullptr), ""GetMethodName"");
            if (clasSignature && methodName) {
                if (!strchr(clasSignature, '.')) {
                    visibleFrames.push_back(jni_env->NewStringUTF(methodName));
                }
                jvmti->Deallocate(reinterpret_cast<unsigned char*>(methodName));
                jvmti->Deallocate(reinterpret_cast<unsigned char*>(clasSignature));
            }
        }
    }
    jobjectArray methodStrings = jni_env->NewObjectArray(visibleFrames.size(), jni_env->FindClass(""java/lang/String""), nullptr);
    if (methodStrings) {
        for (int frameIndex = 0; frameIndex < visibleFrames.size(); frameIndex++) {
            jni_env->SetObjectArrayElement(methodStrings, frameIndex, visibleFrames[frameIndex]);
        }
    }
    return methodStrings;
}

extern ""C"" JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *options, void *reserved) {
    if (vm->GetEnv(reinterpret_cast<void **>(&jvmti), JVMTI_VERSION) != JNI_OK || !jvmti) {
        printf(""Could not initialize JVMTI\n"");
        abort();
    }
    return JVMTI_ERROR_NONE;
}

extern ""C"" JNIEXPORT jint JNICALL Agent_OnAttach(JavaVM *vm, char *options, void *reserved) {
    return Agent_OnLoad(vm, options, reserved);
}
-----------------------------------------------------------------------------------------
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298347,JDK-8297286,,,,,,,,,,JDK-8296323,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z2t7:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-11-15 02:46;sspitsyn;This issue is reproducible with the late binding JVMTI agents.
It'd be great to fix it in 20. At least, evaluation is needed.;;;","2022-11-17 01:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11204
Date: 2022-11-17 09:12:07 +0000;;;","2022-11-18 12:54;dukebot;Changeset: 035eaeec
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-11-18 20:52:56 +0000
URL:       https://git.openjdk.org/jdk/commit/035eaeecabd484d6db629c8b4056fa4b3a73f960
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JVMTI can_support_virtual_threads not available for agents loaded into running VM,JDK-8296323,5086410,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,webbuggrp,webbuggrp,2022-10-31 08:13,2022-11-28 15:07,2023-10-01 09:56,2022-11-22 15:44,20,,,,,,,20,hotspot,,0,capbug,loom,,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubunu 22.10 x86_64 
openjdk version ""20-ea"" 2023-03-21
OpenJDK Runtime Environment (build 20-ea+21-1545)
OpenJDK 64-Bit Server VM (build 20-ea+21-1545, mixed mode, sharing)


A DESCRIPTION OF THE PROBLEM :
The JVMTI ThreadStart is not generated for virtual threads when the agent was attached. When the agent is loaded at start up the events are generated as expected.

The can_support_virtual_threads capability is not available when attaching (with JVMTI_ERROR_NOT_AVAILABLE), so there are also no VirtualThreadStart events.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
With the attached sources and JAVA_HOME set to a JDK 20: 

g++ -shared -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC VirtualThreadStartTest.cpp -o libVirtualThreadStartTest.so

$JAVA_HOME/bin/javac --enable-preview --release=20 VirtualThreadStartTest.java 

LD_LIBRARY_PATH=. $JAVA_HOME/bin/java --enable-preview -Djdk.attach.allowAttachSelf=true VirtualThreadStartTest attach


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The test should see 15 ThreadStart events and exit with 0.
ACTUAL -
The test only sees 5 ThreadStart events and exit with 1.

It works as expected with

LD_LIBRARY_PATH=. $JAVA_HOME/bin/java --enable-preview -agentlib:VirtualThreadStartTest VirtualThreadStartTest 

---------- BEGIN SOURCE ----------
-- VirtualThreadStartTest.java ----------------------------------------------------------
import com.sun.tools.attach.VirtualMachine;

public class VirtualThreadStartTest {
    private static native int getAndResetStartedThreads();

    public static void main(String[] args) throws Exception {
        if (args.length == 1 && args[0].equals(""attach"")) {
            VirtualMachine vm = VirtualMachine.attach(String.valueOf(ProcessHandle.current().pid()));
            vm.loadAgentLibrary(""VirtualThreadStartTest"");
        }
        Thread.sleep(2000);
        Thread.ofVirtual().start(() -> {}).join(); // start ForkJoinPool worker
        getAndResetStartedThreads();

        for (int i=0; i<10; i++) {
            Thread.ofVirtual().start(() -> {}).join();
        }
        for (int i=0; i<5; i++) {
            Thread.ofPlatform().start(() -> {}).join();
        }

        int startedThreads = getAndResetStartedThreads();
        System.out.println(""Thread start event count: "" + startedThreads + "", expected: 15"");
        if (startedThreads != 15) {
            System.out.println(""Wrong count."");
            System.exit(1);
        }
    }
}
-----------------------------------------------------------------------------------------

-- VirtualThreadStartTest.cpp -----------------------------------------------------------
#include <jvmti.h>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <mutex>

namespace {
    jvmtiEnv *jvmti = nullptr;
    int startedThreads = 0;
    std::mutex startedMutex;

    void checkJvmti(int code, const char* message) {
        if (code != JVMTI_ERROR_NONE) {
            printf(""Error %s: %d\n"", message, code);
            abort();
        }
    }

    void JNICALL testThreadStart(jvmtiEnv *jvmti_env, JNIEnv* jni_env, jthread thread) {
        std::lock_guard<std::mutex> lock(startedMutex);
        startedThreads++;
    }
}

extern ""C"" JNIEXPORT jint JNICALL Java_VirtualThreadStartTest_getAndResetStartedThreads(JNIEnv* jni_env, jclass clazz) {
    std::lock_guard<std::mutex> lock(startedMutex);
    int result = startedThreads;
    startedThreads = 0;
    return result;
}

extern ""C"" JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *options, void *reserved) {
    if (vm->GetEnv(reinterpret_cast<void **>(&jvmti), JVMTI_VERSION) != JNI_OK || !jvmti) {
        printf(""Could not initialize JVMTI\n"");
        abort();
    }
    jvmtiEventCallbacks callbacks;
    memset(&callbacks, 0, sizeof(callbacks));
    callbacks.ThreadStart = &testThreadStart;
    checkJvmti(jvmti->SetEventCallbacks(&callbacks, (jint)sizeof(callbacks)), ""setting callbacks"");
    checkJvmti(jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_THREAD_START, nullptr), ""enabling events"");
    return JVMTI_ERROR_NONE;
}

extern ""C"" JNIEXPORT jint JNICALL Agent_OnAttach(JavaVM *vm, char *options, void *reserved) {
    return Agent_OnLoad(vm, options, reserved);
}
-----------------------------------------------------------------------------------------
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296324,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z2uj:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-11-03 10:57;alanb;I've changed the description to make it clearer what this issue is about. Ideally the can_support_virtual_threads capability can be added in the live phase.;;;","2022-11-17 09:42;sspitsyn;A part of this issue is a dup of JDK-8296324 as both issues have the same root cause: the VirtualThread class static field notifyJvmtiEvents is not updated properly when an agent is loaded into running VM.
However, the can_support_virtual_threads is currently an onload capability.
Yes, it has to be available for late binding agents as well.;;;","2022-11-18 23:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11246
Date: 2022-11-19 07:08:38 +0000;;;","2022-11-22 15:44;dukebot;Changeset: e661c5a3
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-11-22 23:43:15 +0000
URL:       https://git.openjdk.org/jdk/commit/e661c5a3d0c8683043e238b669ae1bc59d94a682
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
use-def assert: special case undetected loops nested in infinite loops,JDK-8296318,5086737,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,epeter,epeter,2022-11-03 09:37,2023-05-24 00:39,2023-10-01 09:56,2022-12-14 09:27,11,17,18,19,20,21,,21,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-20,,,,,,,,,,,,,,,"During the work of JDK-8280126, I found this P2.java, which fails with:

java -Xcomp -XX:CompileCommand=compileonly,P2::test -XX:-TieredCompilation -XX:PerMethodTrapLimit=0 P2.java

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/opto/block.cpp:1382), pid=59759, tid=59772
#  assert(is_loop || block->find_node(def) < j) failed: uses must follow definitions
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-10-06-1045569.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-10-06-1045569.emanuel..., compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x659166]  PhaseCFG::verify() const+0x4c8

Current CompileTask:
C2:   5503   83    b        P2::test (27 bytes)

Stack: [0x00007f9fde757000,0x00007f9fde858000],  sp=0x00007f9fde853000,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x659166]  PhaseCFG::verify() const+0x4c8  (block.cpp:1382)
V  [libjvm.so+0x89baf3]  Compile::Code_Gen()+0x229  (compile.cpp:2948)
V  [libjvm.so+0x89229f]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x159f  (compile.cpp:863)
V  [libjvm.so+0x780a9b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x179  (c2compiler.cpp:113)
V  [libjvm.so+0x8b0d32]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x916  (compileBroker.cpp:2240)
V  [libjvm.so+0x8af99b]  CompileBroker::compiler_thread_loop()+0x3ed  (compileBroker.cpp:1916)
V  [libjvm.so+0x8d00e4]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x72  (compilerThread.cpp:58)
V  [libjvm.so+0xc5e006]  JavaThread::thread_main_inner()+0x144  (javaThread.cpp:699)
V  [libjvm.so+0xc5debe]  JavaThread::run()+0x182  (javaThread.cpp:684)
V  [libjvm.so+0x1330627]  Thread::call_run()+0x195  (thread.cpp:224)
V  [libjvm.so+0x10dde55]  thread_native_entry(Thread*)+0x19b  (os_linux.cpp:710)",,,,,,,,,,,JDK-8305851,JDK-8305136,JDK-8306179,JDK-8307043,JDK-8306506,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299214,,,,,,,,,,,JDK-8297642,JDK-8296412,JDK-8280126,,,,,,,"2022-11-04 04:29;epeter;P2.java;https://bugs.openjdk.org/secure/attachment/101443/P2.java","2022-11-03 10:54;epeter;P2.java.before-loop-opts.png;https://bugs.openjdk.org/secure/attachment/101415/P2.java.before-loop-opts.png","2022-11-03 10:23;epeter;P2.java.crash.png;https://bugs.openjdk.org/secure/attachment/101413/P2.java.crash.png","2022-11-03 09:36;epeter;hs_err_pid59759.log;https://bugs.openjdk.org/secure/attachment/101409/hs_err_pid59759.log","2022-11-03 09:36;epeter;replay_pid59759.log;https://bugs.openjdk.org/secure/attachment/101408/replay_pid59759.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z4aj:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-03 10:38;epeter;Please see P2.java.crash.png, it displays the relevant nodes of the graph at the time of the assert.

Analysis:
We have an infinite loop: ""while(true)"" (16 Region)
During PhaseIdealLoop::build_loop_tree, we build the loop-tree bottom up.
However, at that time the loop has no exit, hence we add the NeverBranch node.
One other unfortunate consequence is that none of the bottom-up detected loops (16/52 and 26/55) are attached to the loop-tree. We only attach loops once we find a loop exit (we ""sort"" loops). The inner loop can be attached to the outer, but the outer has no exit and is never attached to the root of the loop-tree.
The consequence of this is that we do not do any ""optimizations"" on the non-attached loops.
This is intentional - why waste compile time for loops that are infinite anyway.
The unfortunate effect is that we hence do not make LoopNodes out of the found loop-heads for the non-attached loops.

During PhaseCFG::verify we check if blocks look reasonable.
In the picture, I marked all the control nodes orange, and the data-nodes dark blue.
block:
B8: #	out( B10 B9 ) <- in( N56 N57 )  Freq: 1e-35
 26  Region  === 26 55 54  [[ 26 23 24 35 ]]  !jvms: P2::test @ bci:13 (line 16)
 35  Phi  === 26 31 36  [[ 32 ]]  #int !jvms: P2::test @ bci:13 (line 16)
 32  decI_rReg  === _ 35  [[ 33 31 ]] #-1/0xffffffff
 33  MachProj  === 32  [[ ]] #1
 31  xorI_rReg_imm  === _ 32  [[ 34 35 41 23 23 22 17 ]] #1/0x00000001 !jvms: P2::test @ bci:17 (line 16)
 34  MachProj  === 31  [[ ]] #1
 29  tlsLoadP  === 7  [[ 24 18 ]]  !jvms: P2::test @ bci:20 (line 23)
 24  loadP  === 26 10 29  [[ 23 ]] rawptr:BotPTR
 23  safePoint_poll_tls  === 26 0 10 0 0 24 30 0 31 31  [[ 25 21 ]]  !jvms: P2::test @ bci:20 (line 23)
 25  MachProj  === 23  [[ ]] #1
 22  testI_reg  === _ 31  [[ 21 ]] #0/0x00000000
 21  jmpCon  === 23 22  [[ 27 20 ]] P=0.900000, C=-1.000000 !jvms: P2::test @ bci:20 (line 23)
 27  IfTrue  === 21  [[ 56 ]] #1 !jvms: P2::test @ bci:20 (line 23)
 20  IfFalse  === 21  [[ 53 ]] #0 !jvms: P2::test @ bci:20 (line 23)

We assert for these nodes:
def:
 31  xorI_rReg_imm  === _ 32  [[ 34 35 41 23 23 22 17 ]] 
n:
 35  Phi  === 26 31 36  [[ 32 ]] 
We find that 31 is scheduled after 35, even though that 31 is an input to 35. We have a use-before-def assert.

This would be problematic, except we are actually in a loop, we just have not realized it.
In fact, had we found the 26 Region to be a LoopNode, we would not have checked this assert.
For loops it is ok that Phi nodes have inputs that are scheduled after the Phi, in the same block, since those correspond to the values of the backedge.

Why does this bug only reproduce with the flag -XX:PerMethodTrapLimit=0 ?
This is because if we do not disallow traps, we insert predicates before the inner loop, which effectively are loop-exits, and then the nested-loop is not an infinite loop anymore.
I was able to trigger this bug with irreducible loops, and without this flag, see P.jasm in JDK-8280126.;;;","2022-11-03 10:45;epeter;Some solution ideas:

We could attach loops to the loop-tree even if the subgraph is an infinite loop.
For one, it is very rare to have ""true-infinite-loops"". In most cases, we have some predicate, uncommon trap etc that lead us out of the loop to a HaltNode. We also insert NeverBranch nodes once we detect true-infinite-loops, and on any subsequent pass we then have a loop-exit, and the loop does not count as infinite any more.
Thus, the cost would probably be low.
It may also be desired to optimize even infinite loops, even if they never terminate they can still do more work, and do the work more efficiently.
We may be able to attach the loops directly, or just rerun build_loop_tree.

Alternative:
Adapt the assert. The difficulty is that we do not know which Regions should actually have been Loop heads. Disabling the assert would be unfortunate. Tagging all regions of infinite loops would also complicate the code unnecessarily, and be bug-prone.;;;","2022-11-03 14:56;dlong;ILW = assert in debug, unknown in product; reproduces with specific test and flags; no workaround = MMH = P3;;;","2022-11-04 05:23;epeter;I suspect that this is only a but in the verification code, so it would not reproduce in product builds.
Did not reproduce on product build of:
openjdk 17.0.4 2022-07-19

The assert is wrong in this case. So we only fail in debug builds.
Argument:
If we had registered the Loop, then we would not have checked/executed the assert. We did not register the Loop since it was part of an infinite-loop subgraph, and we do not attach such loops to the loop tree, and then we do not replace the RegionNode with a LoopNode in beautify_loop.;;;","2022-12-02 06:06;epeter;Quick summary:
This is another casualty of infinite loops. Just like JDK-8297642.
An inner loop of an infinite loop is not attached to the loop-tree.
Later, during scheduling we assume that in a block all uses are after the definitions.
Except for LoopNodes - there we accept that a phi may have some operations below, that feed back into the phi.
Sadly, we do not replace the inner loop's region-node with a LoopNode, as the infinite loop is not attached to the loop-tree.
We assert.

Idea: can we uncommon_trap infinite loops?

Alternative: special case the assert. Check if we are (nested) in an infinite loop, and so maybe the loop head was not turned into a LoopNode.;;;","2022-12-12 06:25;epeter;Currently testing my fix;;;","2022-12-12 23:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11642
Date: 2022-12-13 07:49:47 +0000;;;","2022-12-14 09:27;dukebot;Changeset: 736fcd49
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-12-14 17:25:49 +0000
URL:       https://git.openjdk.org/jdk/commit/736fcd49f7cd3aa6f226b2e088415eaf05f97ee8
;;;","2023-04-04 06:29;thartmann;Fix Request (JDK 20u)
Fixes an assert during C2 compilation. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-04-04 06:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/51
Date: 2023-04-04 13:29:12 +0000;;;","2023-04-16 08:18;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Very low risk, fixes assertion.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-04-16 23:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1247
Date: 2023-04-17 06:05:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,
Document the default behavior of '$' in regular expressions correctly,JDK-8296292,5086525,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,webbuggrp,webbuggrp,2022-11-02 05:19,2022-11-28 14:53,2023-10-01 09:56,2022-11-17 04:48,11,17,19,8,,,,20,core-libs,,0,dcsaw,noreg-doc,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The Javadoc for Pattern does not document the fact that $ (not in MULTILINE mode) will not only match at the very end of the input-sequence, but also right before a final line-terminator in the input-sequence.

Currently, the Javadocs say ""By default, the regular expressions ^ and $ ignore line terminators and only match at the beginning and the end, respectively, of the entire input sequence.""

But the following Code produces two matches, due to behavior apparently inherited from Perl:
---
var m = Pattern.compile(""\n\\z"").matcher(""\n\n"");
while (m.find()) {
    System.out.println(m.start() + "":"" + m.end());
}
---

Internally, this behavior is documented in the Javadoc for the ""Pattern.Dollar"" inner-class:
""When not in multiline mode, the $ can only match at the very end
of the input, unless the input ends in a line terminator in which
it matches right before the last line terminator.""

This should be reflected in the public Javadoc as well.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296529,,,,JDK-8183391,JDK-8059325,JDK-8218146,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z3k3:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,,,"2022-11-03 04:34;tongwan;Moved to JDK to review the content.;;;","2022-11-08 03:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11038
Date: 2022-11-08 11:35:17 +0000;;;","2022-11-08 04:38;rgiulietti;The example should read

```
var m = Pattern.compile(""$"").matcher(""\n"");
while (m.find()) {
    System.out.println(m.start() + "":"" + m.end());
}
```;;;","2022-11-09 17:47;smarks;JDK-8183391 is another possible duplicate.;;;","2022-11-09 17:48;smarks;See also this Stack Overflow question (which refers to JDK-8183391):

https://stackoverflow.com/q/71595614/1441122
;;;","2022-11-15 10:07;smarks;Fixing the spec as proposed seems like a reasonable resolution. However it doesn't answer the question of WHY the behavior is as it is. Here's a recent note from [~rgiulietti] that likens the behavior to Perl's:

----------

Perl has a similar counterintuitive behavior. Running the script below produces two lines of output for $ but only one for ^. I think this might be a reason for having it in JDK as well. I have the impression that JDK wanted to be as close to Perl as possible, with some additional extensions.

#!/usr/bin/perl
while (""\n"" =~ /$/g) {
    print (""\$ |$1|\n"");
}
while (""\n"" =~ /^/g) {
    print (""\^ |$1|\n"");
}

----------

This seems to explain that the behavior is as intended (and is not a bug). However, it doesn't explain why Perl behaves this way in the first place.... However, this behavior is described in the perlre man page, so it's intended behavior there as well. The relevant section is below. Note that perl's ""/m"" modifier corresponds to Java's MULTILINE mode.

    By default, the ""^"" character is guaranteed to match only the beginning of the string,
    the ""$"" character only the end (or before the newline at the end), and Perl does certain
    optimizations with the assumption that the string contains only one line. Embedded
    newlines will not be matched by ""^"" or ""$"". You may, however, wish to treat a string as a
    multi-line buffer, such that the ""^"" will match after any newline within the string (except if
    the newline is the last character in the string), and ""$"" will match before any newline. At
    the cost of a little more overhead, you can do this by using the ""/m"" modifier on the pattern
    match operator.

https://perldoc.perl.org/perlre
;;;","2022-11-17 04:48;dukebot;Changeset: 35acb891
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2022-11-17 12:46:19 +0000
URL:       https://git.openjdk.org/jdk/commit/35acb891660fd5e0fee48b56acb16a6a193417ed
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
test/hotspot/jtreg/compiler/intrinsics/TestFloatIsFinite.java fails after JDK-8280378,JDK-8296285,5086608,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fyang,fyang,fyang,2022-11-03 00:25,2022-11-14 19:17,2023-10-01 09:56,2022-11-03 17:59,20,,,,,,,20,hotspot,,0,noreg-self,oracle-triage-20,,,,,,,,,,,,,,,,,,,,"--------------------------------------------------
TEST: compiler/intrinsics/TestFloatIsFinite.java
TEST JDK: /home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/images/jdk

ACTION: build -- Failed. Compilation failed: Compilation failed
REASON: Named class compiled on demand
TIME:   0.075 seconds
messages:
command: build compiler.intrinsics.TestFloatIsFinite
reason: Named class compiled on demand
started: Thu Nov 03 15:08:21 CST 2022
Test directory:
  compile: compiler.intrinsics.TestFloatIsFinite
finished: Thu Nov 03 15:08:21 CST 2022
elapsed time (seconds): 0.075

ACTION: compile -- Failed. Compilation failed: Compilation failed
REASON: .class file out of date or does not exist
TIME:   0.071 seconds
messages:
command: compile /home/fyang/openjdk-jdk-fork/test/hotspot/jtreg/compiler/intrinsics/TestFloatIsFinite.java
reason: .class file out of date or does not exist
started: Thu Nov 03 15:08:21 CST 2022
Mode: agentvm
Agent id: 1
finished: Thu Nov 03 15:08:21 CST 2022
elapsed time (seconds): 0.071
configuration:
Boot Layer (javac runtime environment)
  class path: /home/fyang/tools/jtreg-7+1/lib/jtreg.jar
  patch:      java.base /home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/patches/java.base

javac compilation environment
  source path: /home/fyang/openjdk-jdk-fork/test/hotspot/jtreg/compiler/intrinsics
               /home/fyang/openjdk-jdk-fork/test/lib
               /home/fyang/openjdk-jdk-fork/test/hotspot/jtreg
  class path:  /home/fyang/openjdk-jdk-fork/test/hotspot/jtreg/compiler/intrinsics
               /home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1/compiler/intrinsics/TestFloatIsFinite.d
               /home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1/test/lib
               /home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1

rerun:
cd /home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/scratch/1 && \
HOME=/home/fyang \
LANG=C.UTF-8 \
LC_ALL=C \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/images/test \
TZ=Asia/Shanghai \
_JVM_DWARF_PATH=/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/images/symbols \
    /home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/images/jdk/bin/javac \
        -J-XX:MaxRAMPercentage=12.5 \
        -J-Djava.io.tmpdir=/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/tmp \
        -J-Dtest.vm.opts='-XX:MaxRAMPercentage=12.5 -Djava.io.tmpdir=/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/tmp' \
        -J-Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=12.5 -J-Djava.io.tmpdir=/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/tmp' \
        -J-Dtest.compiler.opts= \
        -J-Dtest.java.opts= \
        -J-Dtest.jdk=/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/images/jdk \
        -J-Dcompile.jdk=/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/images/jdk \
        -J-Dtest.timeout.factor=16.0 \
        -J-Dtest.nativepath=/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/images/test/hotspot/jtreg/native \
        -J-Dtest.root=/home/fyang/openjdk-jdk-fork/test/hotspot/jtreg \
        -J-Dtest.name=compiler/intrinsics/TestFloatIsFinite.java \
        -J-Dtest.file=/home/fyang/openjdk-jdk-fork/test/hotspot/jtreg/compiler/intrinsics/TestFloatIsFinite.java \
        -J-Dtest.src=/home/fyang/openjdk-jdk-fork/test/hotspot/jtreg/compiler/intrinsics \
        -J-Dtest.src.path=/home/fyang/openjdk-jdk-fork/test/hotspot/jtreg/compiler/intrinsics:/home/fyang/openjdk-jdk-fork/test/lib:/home/fyang/openjdk-jdk-fork/test/hotspot/jtreg \
        -J-Dtest.classes=/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1/compiler/intrinsics/TestFloatIsFinite.d \
        -J-Dtest.class.path=/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1/compiler/intrinsics/TestFloatIsFinite.d:/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1/test/lib:/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1 \
        -J-Dtest.class.path.prefix=/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1/compiler/intrinsics/TestFloatIsFinite.d:/home/fyang/openjdk-jdk-fork/test/hotspot/jtreg/compiler/intrinsics:/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1/test/lib:/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1 \
        -d /home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1/compiler/intrinsics/TestFloatIsFinite.d \
        -sourcepath /home/fyang/openjdk-jdk-fork/test/hotspot/jtreg/compiler/intrinsics:/home/fyang/openjdk-jdk-fork/test/lib:/home/fyang/openjdk-jdk-fork/test/hotspot/jtreg \
        -classpath /home/fyang/openjdk-jdk-fork/test/hotspot/jtreg/compiler/intrinsics:/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1/compiler/intrinsics/TestFloatIsFinite.d:/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1/test/lib:/home/fyang/openjdk-jdk-fork/build/linux-riscv64-server-release/test-support/jtreg_test_hotspot_jtreg_tier1/classes/1 /home/fyang/openjdk-jdk-fork/test/hotspot/jtreg/compiler/intrinsics/TestFloatIsFinite.java
direct:
/home/fyang/openjdk-jdk-fork/test/hotspot/jtreg/compiler/intrinsics/TestFloatIsFinite.java:43: error: annotation is missing element value
    @IR(counts = {IRNode.IS_FINITE_F"", "">= 1""}) // At least one IsFiniteF node is generated if intrinsic is used
                                    ^
/home/fyang/openjdk-jdk-fork/test/hotspot/jtreg/compiler/intrinsics/TestFloatIsFinite.java:43: error: unclosed string literal
    @IR(counts = {IRNode.IS_FINITE_F"", "">= 1""}) // At least one IsFiniteF node is generated if intrinsic is used
                                            ^
2 errors

TEST RESULT: Failed. Compilation failed: Compilation failed
--------------------------------------------------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280378,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,,"0|i2z42j:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-03 00:26;fyang;Proposed fix is trivial:

diff --git a/test/hotspot/jtreg/compiler/intrinsics/TestFloatIsFinite.java b/test/hotspot/jtreg/compiler/intrinsics/TestFloatIsFinite.java
index ed55c9312de..7fb0bebc516 100644
--- a/test/hotspot/jtreg/compiler/intrinsics/TestFloatIsFinite.java
+++ b/test/hotspot/jtreg/compiler/intrinsics/TestFloatIsFinite.java
@@ -40,7 +40,7 @@ public class TestFloatIsFinite extends TestFloatClassCheck {

     @Test // needs to be run in (fast) debug mode
     @Warmup(10000)
-    @IR(counts = {IRNode.IS_FINITE_F"", "">= 1""}) // At least one IsFiniteF node is generated if intrinsic is used
+    @IR(counts = {IRNode.IS_FINITE_F, "">= 1""}) // At least one IsFiniteF node is generated if intrinsic is used
     public void testIsFinite() {
         for (int i = 0; i < BUFFER_SIZE; i++) {
             outputs[i] = Float.isFinite(inputs[i]);;;;","2022-11-03 00:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10965
Date: 2022-11-03 07:39:05 +0000;;;","2022-11-03 06:37;chagedorn;ILW = Test does not compile due to a type, single test and only on riscv, no workaround = MLH = P4;;;","2022-11-03 17:59;dukebot;Changeset: 4d1bc1b5
Author:    Fei Yang <fyang@openjdk.org>
Date:      2022-11-04 00:56:47 +0000
URL:       https://git.openjdk.org/jdk/commit/4d1bc1b5add61f443f99f6d0726ebf8e37dc14ab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JUnit5 tests using Params API fails to compile,JDK-8296283,5086602,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,arapte,arapte,2022-11-03 00:03,2022-11-29 06:13,2023-10-01 09:56,2022-11-07 22:05,jfx20,,,,,,,jfx20,javafx,,0,noreg-self,sn_131,test_sprint,testbug,,,,,,,,,,,,,,,,,,"Tests using the JUnit 5 params API fails to compile due to missing dependencies. 
------------
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

Class JUnit5Test {

    @ValueSource(doubles = { 1.0, 2.0, 3.0 })
    @ParameterizedTest
    void aTest(double value) {
    }
}
------------
This was uncovered when running the test added in a PR in commit #1+#2: https://github.com/openjdk/jfx/pull/910

The test failed to compile on local mac machine but passed on GHA.
Error:
error: package org.junit.jupiter.params does not exist
error: package org.junit.jupiter.params.provider does not exist
error: cannot find symbol @ValueSource
error: cannot find symbol @ParameterizedTest",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296330,JDK-8295078,,,,,,,,,,,JDK-8280275,,,,,,,,,,,JDK-8296284,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z417:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-11-04 13:01;kcr;NOTE: this blocks the fixes for JDK-8295078 and  JDK-8296330 since the PRs for those bugs use the JUnit 5 Params API;;;","2022-11-07 05:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/939
Date: 2022-11-07 13:11:27 +0000;;;","2022-11-07 22:05;dukebot;Changeset: b08f1359
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-11-08 06:03:51 +0000
URL:       https://git.openjdk.org/jfx/commit/b08f1359902882ba97cfdbae64280d1bf10179e3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in ClassLoader::setup_bootstrap_search_path_impl,JDK-8296270,5086587,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,manc,manc,manc,2022-11-02 19:56,2022-11-14 19:19,2023-10-01 09:56,2022-11-06 19:55,11,17,19,20,9,,,20,hotspot,,0,modules,,,,,,,,,,,,,,,,,,,,,"Colleague Justin King (jcking@google.com) made LeakSanitizer working with HotSpot, and identified a memory leak. ClassLoader::setup_bootstrap_search_path_impl() leaks a single ClassPathEntry, which should be deleted. This was present after JDK-8263421, but it is possibly introduced since JDK-8154239.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263421,JDK-8154239,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z3xv:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-02 20:01;manc;LeakSanitizer also identified MDO extra_data_lock leak fixed by JDK-8232112. However, it is likely benign as it is mainly due to shutdown code not destructing the object.;;;","2022-11-03 17:47;manc;Per suggestion from [~jiangli], I've splitted this up into two bugs as they are different leaks. The other is JDK-8296347.;;;","2022-11-03 18:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10973
Date: 2022-11-04 01:20:41 +0000;;;","2022-11-06 19:55;dukebot;Changeset: 556377a0
Author:    Man Cao <manc@openjdk.org>
Date:      2022-11-07 03:53:32 +0000
URL:       https://git.openjdk.org/jdk/commit/556377a0583b519ac191675c2b078f1a2efe2f72
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[IR Framework] Fix issues with IRNode.ALLOC* regexes,JDK-8296243,5086555,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,mdoerr,mdoerr,2022-11-02 10:26,2022-11-16 23:37,2023-10-01 09:56,2022-11-14 00:32,20,,,,,,,20,hotspot,,0,ir-framework,noreg-self,oracle-triage-20,,,,,,,,,,,,,,,,,,,"There are two problems with IRNode.ALLOC* regexes:
- On PPC64, we do not account for an LI instruction which matches the array size. As a result, we could miss some array allocations with the ALLOC_ARRAY regexes
- The new IRNode.ALLOC regex which can be matched on the independent ideal phases by using the name of the IR node ""Allocate"" also matches ""AllocateArray"". This should be changed.

Original report:

Since JDK-8280378, the test testlibrary_tests/ir_framework/tests/TestPhaseIRMatching.java reports:
""Expected Failures"" WITHOUT ""Found Failures"":
Failure[methodName=alloc, irRuleId=1, compilePhase=PRINT_OPTO_ASSEMBLY, checkAttributeType=FAIL_ON, constraintId=2]
Failure[methodName=alloc, irRuleId=1, compilePhase=PRINT_OPTO_ASSEMBLY, checkAttributeType=COUNTS, constraintId=2]
""Found Failures"" WITHOUT ""Expected Failures"":
[]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280378,,,,,,,,,,,,,,,,,,,,"2022-11-02 10:32;mdoerr;pid-4070-output.log;https://bugs.openjdk.org/secure/attachment/101311/pid-4070-output.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,"0|i2z3qr:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-03 00:30;chagedorn;ILW = New IR framework test fails on PPC, single test and PPC only, no workaround = MLH = P4;;;","2022-11-08 02:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11037
Date: 2022-11-08 09:58:42 +0000;;;","2022-11-14 00:32;dukebot;Changeset: 34d10f19
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-11-14 08:28:41 +0000
URL:       https://git.openjdk.org/jdk/commit/34d10f19f5321961bdeea8d1c9aff7ca89101d1f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ISO 4217 Amendment 174 Update,JDK-8296239,5086550,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlu,naoto,naoto,2022-11-02 09:17,2023-03-31 11:22,2023-10-01 09:56,2022-11-08 17:22,,,,,,,,20,core-libs,,0,8bpr-critical-approved,bugdb_34883153,iso4217,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,"02 November 2022
ISO 4217 AMENDMENT NUMBER 174
Effective from 1 January 2023, the following change will be made to
“List one: Currency, fund and precious metal codes”:
Entity Currency Alphabetic
code
Numeric code Minor unit
CROATIA Euro EUR 978 2
The exchange rate is fixed at EUR 1 = HRK 7.53450
The Kuna (HRK) and Euro (EUR) will be used during the parallel circulation period from
1 January 2023 to 14 January 2023 inclusive.
The period of mandatory dual price display lasts from 5 September 2022 to 31 December
2023. As of 1 January 2023, the Kuna should be listed as the old/historic currency of Croatia.",,,,,,,,,,,JDK-8296738,JDK-8296740,JDK-8299472,JDK-8300482,JDK-8299925,JDK-8300465,JDK-8298624,JDK-8299655,JDK-8298717,JDK-8299912,JDK-8300352,JDK-8296739,JDK-8296860,JDK-8296861,JDK-8299630,,,,,,,,JDK-8305400,,,,,,,,,JDK-8299438,JDK-8299439,JDK-8297915,,,,,,,,,JDK-8298539,JDK-8294307,,,,,,,,"2022-11-02 09:19;naoto;AMENDMENT NUMBER 174.pdf;https://bugs.openjdk.org/secure/attachment/101307/AMENDMENT+NUMBER+174.pdf",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z3pn:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-11-07 14:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10994
Date: 2022-11-04 17:21:04 +0000;;;","2022-11-08 17:22;dukebot;Changeset: fd837649
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-11-09 01:18:01 +0000
URL:       https://git.openjdk.org/jdk/commit/fd837649811c866c144c9133d211fb5ad8f994a7
;;;","2022-11-11 01:36;yan;Fix request (13u, 15u)
backporting to keep data up-to-date. Again,  src/java.base/share/data is make/data in older releases.
Otherwise, it is a clean backport to 15u and with a difference in bugfix list in a test in 13u. The relevant tests run fine.;;;","2022-11-11 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/429
Date: 2022-11-11 09:37:19 +0000;;;","2022-11-11 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/303
Date: 2022-11-11 09:37:50 +0000;;;","2022-12-30 08:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1006
Date: 2022-12-30 16:51:22 +0000;;;","2022-12-31 02:01;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Required update. Low risk.
Clean backport.
SAP nightly testing passed.;;;","2023-01-04 05:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1637
Date: 2023-01-04 13:26:04 +0000;;;","2023-01-04 05:41;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Required Currency data update.
Clean backport, skara adapted the path.
Test passes. 
I already tagged fix-request. Naturally, I will only push 
if the Pre-submit tests and SAPs nighlties complete successful.;;;","2023-01-06 04:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/226
Date: 2023-01-06 12:38:38 +0000;;;","2023-01-06 09:21;andrew;Fix Request [8u]

Regular currency data update, in this case updating Croatia's currency to the Euro which changed on 2022-12-31 23:00 UTC / 2023-01-01 00:00 CET. Patch has been reviewed and Currency tests pass.;;;","2023-02-17 10:52;naoto;Adding `b23` manually in the `Resolved In Build` as `Fix Version/s` field was modified
```
wxiaoWeibing Xiao made changes - 2022-11-09 08:56
Fix Version/s		8-pool [ 11886 ]
Fix Version/s		11-pool-oracle [ 23416 ]
Fix Version/s		17-pool-oracle [ 23417 ]
```
 before SKARA bot tried to fill the build field (and gave up).;;;",,,,,,,,,,,,,,,,,,,,,,,
Fix MEMFLAGS for CHeapBitMaps,JDK-8296231,5086536,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stefank,stefank,stefank,2022-11-02 07:14,2022-11-14 19:17,2023-10-01 09:56,2022-11-04 02:38,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"Some usages of CHeapBitMaps rely on the default value of the MEMFLAGS argument (mtInternal). This is undesirable, and should be fixed.

I'd prefer to remove the default value, but there is currently a PR touching the BitMap classes, so I'd like to limit this Bug to only fixing the incorrect usage of mtInternal. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z3mj:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-11-02 07:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10948
Date: 2022-11-02 14:24:07 +0000;;;","2022-11-04 02:38;dukebot;Changeset: 8ee0f7d5
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2022-11-04 09:36:26 +0000
URL:       https://git.openjdk.org/jdk/commit/8ee0f7d5982d95674cfc1b217dbabaeafefbc8f1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SwingEventMonitor - installListeners(Component , int ) - CELLEDITOR - bug",JDK-8296222,5085980,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,webbuggrp,webbuggrp,2022-10-21 04:14,2022-11-28 14:52,2023-10-01 09:56,2022-11-16 23:19,11,17,19,6,,,,20,client-libs,,0,dcspn,reproducer-no,sn_131,webbug,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When adding a CellEditorListener via SwingEventMonitor.addCellEditorListener, the method never succeedes. This is happening because there is a typo inside function installListeners(Component, int), on case EventID.CELLEDITOR.

//  Look for components which support the getCellEditor method
                //  (e.g. JTable, JTree)
                //
                try {
                    getCellEditorMethod = c.getClass().getMethod(
                        ""getCellEditorMethod"", nullClass);

Instead of ""getCellEditorMethod"", the method searched for should have only been ""getCellEditor"".
The consequence is that targets like JTables and JTrees are never found.

-> It looks like it was never tested :)


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Add a cellEditorListener via SwingEventMonitor to listen to the editor of a JTable.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Listener methods ""editingStoped"" and ""editingCanceled"" are called when such actions happen.
ACTUAL -
Nothing happens.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6788481,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z06z:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-11-02 04:29;pnarayanaswa;Duplicate of JDK-6788481;;;","2022-11-02 20:42;psadhukhan;SwingEventMonitor belongs to jdk.accessibilty package not java_desktop, I guess not under client-libs, so this bug needs to be moved to appropriate project but am not sure myself which one...;;;","2022-11-10 00:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11082
Date: 2022-11-10 08:01:38 +0000;;;","2022-11-16 23:19;dukebot;Changeset: 5795c760
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Committer: Jayathirth D V <jdv@openjdk.org>
Date:      2022-11-17 07:17:03 +0000
URL:       https://git.openjdk.org/jdk/commit/5795c760db5bbfd7ff3b56a0c6236827526df70a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFileChooser throws InternalError java.lang.InternalError with Windows shortcuts,JDK-8296198,5085956,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tr,webbuggrp,webbuggrp,2022-10-21 00:06,2022-12-14 14:00,2023-10-01 09:56,2022-12-07 20:36,11,17,19,20,,,,20,client-libs,,0,dcspn,reproducer-yes,sn_133,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10, tried with Java 15, Java 17 and Java 20 (Early Access)

A DESCRIPTION OF THE PROBLEM :
When having a shortcut to a folder on Windows, you normally can follow the shortcut by double clicking it. If you are creating the JFileChooser with your own FileSystemView you always get an Exception:

Exception in thread ""AWT-EventQueue-0"" java.lang.InternalError: Unable to bind C:\temp\myShortcutToFolder.lnk to parent
        at java.desktop/sun.awt.shell.Win32ShellFolder2$4.call(Win32ShellFolder2.java:474)
        at java.desktop/sun.awt.shell.Win32ShellFolder2$4.call(Win32ShellFolder2.java:458)
        at java.desktop/sun.awt.shell.Win32ShellFolderManager2$ComInvoker.invoke(Win32ShellFolderManager2.java:626)
        at java.desktop/sun.awt.shell.ShellFolder.invoke(ShellFolder.java:532)
        at java.desktop/sun.awt.shell.Win32ShellFolder2.getIShellFolder(Win32ShellFolder2.java:458)
        at java.desktop/sun.awt.shell.Win32ShellFolder2$16.call(Win32ShellFolder2.java:1261)
        at java.desktop/sun.awt.shell.Win32ShellFolder2$16.call(Win32ShellFolder2.java:1259)
        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
        at java.desktop/sun.awt.shell.Win32ShellFolderManager2$ComInvoker$1.run(Win32ShellFolderManager2.java:595)
        at java.base/java.lang.Thread.run(Thread.java:1591)

This Issue has ben reported multiple times but all bug reports I found here were either marked as ""cannot reproduce"" or as duplicate of an bug report marked as cannot reproduce.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create a shortcut in ""C:\temp"" to a folder of your liking (you can create the shortcut anywhere else. It is just to have a short, easy to remeber path for the following setpes. The only condition is that the shortcut has to be a shortcut to a folder)
2. Execute the attached java Program (a JFileChooser with a custom FileSystemView)
=> A File Chooser Opens
3. Navigate to C:\temp (or the path you created the shortcut in)
=> The shortcut should be shown as an normal folder
4. Double click on the shortcut
=> The exception is thrown ""java.lang.InternalError: Unable to bind C:\temp\myShortcutToFolder.lnk to parent""


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The shortcut should be followed and the folder the shortcut points to should be displayed in the File Chooser
ACTUAL -
An Exception is thrown ""java.lang.InternalError: Unable to bind C:\temp\myShortcutToFolder.lnk to parent""

---------- BEGIN SOURCE ----------
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;

public class JFileChooserError {

  public static void main(String[] args) {
    JFileChooser fc = new JFileChooser(new MyFileSystemView());
    fc.showOpenDialog(null);
  }

  private static class MyFileSystemView extends FileSystemView {

    FileSystemView delegate;

    MyFileSystemView() {
      delegate = FileSystemView.getFileSystemView();
      assert ""javax.swing.filechooser.WindowsFileSystemView""
          .equals(delegate.getClass().getCanonicalName()) : ""Please run this on Windows"";
    }

    @Override
    public File createNewFolder(File containingDir) throws IOException {
      return delegate.createNewFolder(containingDir);
    }

    @Override
    public boolean isRoot(File f) {
      return delegate.isRoot(f);
    }

    @Override
    public Boolean isTraversable(File f) {
      return delegate.isTraversable(f);
    }

    @Override
    public String getSystemDisplayName(File f) {
      return delegate.getSystemDisplayName(f);
    }

    @Override
    public String getSystemTypeDescription(File f) {
      return delegate.getSystemTypeDescription(f);
    }

    @Override
    public Icon getSystemIcon(File f) {
      return delegate.getSystemIcon(f);
    }

    @Override
    public Icon getSystemIcon(File f, int width, int height) {
      return delegate.getSystemIcon(f, width, height);
    }

    @Override
    public boolean isParent(File folder, File file) {
      return delegate.isParent(folder, file);
    }

    @Override
    public File getChild(File parent, String fileName) {
      return delegate.getChild(parent, fileName);
    }

    @Override
    public boolean isFileSystem(File f) {
      return delegate.isFileSystem(f);
    }

    @Override
    public boolean isHiddenFile(File f) {
      return delegate.isHiddenFile(f);
    }

    @Override
    public boolean isFileSystemRoot(File dir) {
      return delegate.isFileSystemRoot(dir);
    }

    @Override
    public boolean isDrive(File dir) {
      return delegate.isDrive(dir);
    }

    @Override
    public boolean isFloppyDrive(File dir) {
      return delegate.isFloppyDrive(dir);
    }

    @Override
    public boolean isComputerNode(File dir) {
      return delegate.isComputerNode(dir);
    }

    @Override
    public File[] getRoots() {
      return delegate.getRoots();
    }

    @Override
    public File getHomeDirectory() {
      return delegate.getHomeDirectory();
    }

    @Override
    public File getDefaultDirectory() {
      return delegate.getDefaultDirectory();
    }

    @Override
    public File createFileObject(File dir, String filename) {
      return delegate.createFileObject(dir, filename);
    }

    @Override
    public File createFileObject(String path) {
      return delegate.createFileObject(path);
    }

    @Override
    public File[] getFiles(File dir, boolean useFileHiding) {
      return delegate.getFiles(dir, useFileHiding);
    }

    @Override
    public File getParentDirectory(File dir) {
      return delegate.getParentDirectory(dir);
    }

    @Override
    public File[] getChooserComboBoxFiles() {
      return delegate.getChooserComboBoxFiles();
    }

    @Override
    public boolean isLink(File file) {
      return delegate.isLink(file);
    }

    @Override
    public File getLinkLocation(File file) throws FileNotFoundException {
      return delegate.getLinkLocation(file);
    }

  }

}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
No workaround found

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-01 22:35;pnarayanaswa;FileChooserTest.java;https://bugs.openjdk.org/secure/attachment/101286/FileChooserTest.java","2022-11-01 22:35;pnarayanaswa;JFileChooserError.java;https://bugs.openjdk.org/secure/attachment/101287/JFileChooserError.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2z01n:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-11-01 23:48;pnarayanaswa;Checked with attached testcase(FileChooserTest.java) in Windows 10, Issue is not reproducible,
Test Result
========
8u351: Pass
11.0.17: Pass
17.0.5: Pass
19.0.1: Pass
20ea21: Pass

But when the testcase(JFileChooserError.java) with a custom FileSystemView, issue is reproducible, Exception in thread ""AWT-EventQueue-0"" java.lang.InternalError: Unable to bind
Test Result
=========
20ea21: Fail
19: Fail
17: Fail;;;","2022-11-29 02:00;tr;Seems like regression caused from fix JDK-6698013. FilsSystem check fails which leads to unresolved link directory path.;;;","2022-12-05 03:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11510
Date: 2022-12-05 11:35:11 +0000;;;","2022-12-07 20:36;dukebot;Changeset: d5cf18e7
Author:    Tejesh R <tr@openjdk.org>
Date:      2022-12-08 04:34:48 +0000
URL:       https://git.openjdk.org/jdk/commit/d5cf18e7fb591185eecb042bfa015609ea7d15e0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Class.getEnumConstants() throws undocumented ClassCastException and NullPointerException,JDK-8296196,5086391,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,asotona,webbuggrp,webbuggrp,2022-10-31 02:37,2023-01-31 03:44,2023-10-01 09:56,2022-11-09 22:23,11,17,18,19,20,,,20,core-libs,,0,20ea,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When `Class.getEnumConstants()` is called on a bad enum class where `values()` is an instance method, or returns a non‑array, then it throws `NullPointerException` or `ClassCastException` respectively.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the attached Java and Jasm program. Might need https://github.com/openjdk/asmtools/pull/46 to compile successfully.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The program completes successfully.
ACTUAL -
The program throws `java.lang.AssertionError`:
```
Exception in thread ""main"" java.lang.AssertionError: [java.lang.NullPointerException, java.lang.ClassCastException: class java.lang.Object cannot be cast to class [Ljava.lang.Object; (java.lang.Object and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')]
	at Test.main(Test.java:28)
	Suppressed: java.lang.NullPointerException
		at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
		at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)
		at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:52)
		at java.base/java.lang.reflect.Method.invoke(Method.java:578)
		at java.base/java.lang.Class.getEnumConstantsShared(Class.java:3894)
		at java.base/java.lang.Class.getEnumConstants(Class.java:3869)
		at Test.main(Test.java:14)
	Suppressed: java.lang.ClassCastException: class java.lang.Object cannot be cast to class [Ljava.lang.Object; (java.lang.Object and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')
		at java.base/java.lang.Class.getEnumConstantsShared(Class.java:3894)
		at java.base/java.lang.Class.getEnumConstants(Class.java:3869)
		at Test.main(Test.java:21)
```

---------- BEGIN SOURCE ----------
/// BEGIN JAVA
import java.util.ArrayList;
import java.util.List;

final class Test {
	public static void main(final String... args) throws Throwable {
		final List<Throwable> errors = new ArrayList<>();

		try {
			final Object actual = BadEnum1.class.getEnumConstants();
			if (actual != null) throw new AssertionError(""Expected BadEnum1.class.getEnumConstants() to return null, got "" + actual);
		} catch (final Throwable t) {
			errors.add(t);
		}

		try {
			final Object actual = BadEnum2.class.getEnumConstants();
			if (actual != null) throw new AssertionError(""Expected BadEnum2.class.getEnumConstants() to return null, got "" + actual);
		} catch (final Throwable t) {
			errors.add(t);
		}

		if (!errors.isEmpty()) {
			final AssertionError err = new AssertionError(List.copyOf(errors));
			errors.forEach(err::addSuppressed);
			throw err;
		}
	}
}
/// END JAVA

/// BEGIN JASM
super final enum class BadEnum1
	extends java/lang/Enum
	version 52:0
{
	Signature ""Ljava/lang/Enum<LBadEnum1;>;"";

	private static final synthetic Field $VALUES:""[LBadEnum1;"";

	public Method values:""()[LBadEnum1;""
		stack 1
	{
		getstatic	Field $VALUES:""[LBadEnum1;"";
		invokevirtual	Method ""[LBadEnum1;"".clone:""()Ljava/lang/Object;"";
		checkcast	class ""[LBadEnum1;"";
		areturn;
	}

	public static Method valueOf:""(Ljava/lang/String;)LBadEnum1;""
		stack 2
		0: #{name mandated}
	{
		ldc	class BadEnum1;
		aload_0;
		invokestatic	Method java/lang/Enum.valueOf:""(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;"";
		checkcast	class BadEnum1;
		areturn;
	}

	private Method ""<init>"":""(Ljava/lang/String;I)V"":""()V""
		stack 3
		0: #{$enum$name synthetic}
		1: #{$enum$ordinal synthetic}
	{
		aload_0;
		aload_1;
		iload_2;
		invokespecial	Method java/lang/Enum.""<init>"":""(Ljava/lang/String;I)V"";
		return;
	}

	private static synthetic Method $values:""()[LBadEnum1;""
		stack 1
	{
		iconst_0;
		anewarray	class BadEnum1;
		areturn;
	}

	static Method ""<clinit>"":""()V""
		stack 1
	{
		invokestatic	Method $values:""()[LBadEnum1;"";
		putstatic	Field $VALUES:""[LBadEnum1;"";
		return;
	}
}

super final enum class BadEnum2
	extends java/lang/Enum
	version 52:0
{
	Signature ""Ljava/lang/Enum<LBadEnum2;>;"";

	private static final synthetic Field $VALUES:""[LBadEnum2;"";

	public static Method values:""()Ljava/lang/Object;""
		stack 2
	{
		new class java/lang/Object;
		dup;
		invokespecial	Method java/lang/Object.""<init>"":""()V"";
		areturn;
	}

	public static Method valueOf:""(Ljava/lang/String;)LBadEnum2;""
		stack 2
		0: #{name mandated}
	{
		ldc	class BadEnum2;
		aload_0;
		invokestatic	Method java/lang/Enum.valueOf:""(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;"";
		checkcast	class BadEnum2;
		areturn;
	}

	private Method ""<init>"":""(Ljava/lang/String;I)V"":""()V""
		stack 3
		0: #{$enum$name synthetic}
		1: #{$enum$ordinal synthetic}
	{
		aload_0;
		aload_1;
		iload_2;
		invokespecial	Method java/lang/Enum.""<init>"":""(Ljava/lang/String;I)V"";
		return;
	}

	private static synthetic Method $values:""()[LBadEnum2;""
		stack 1
	{
		iconst_0;
		anewarray	class BadEnum2;
		areturn;
	}

	static Method ""<clinit>"":""()V""
		stack 1
	{
		invokestatic	Method $values:""()[LBadEnum2;"";
		putstatic	Field $VALUES:""[LBadEnum2;"";
		return;
	}
}
/// END JASM
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-01 22:48;tongwan;BadEnum.jasm;https://bugs.openjdk.org/secure/attachment/101288/BadEnum.jasm","2022-11-01 22:48;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/101289/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z2qb:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-11-01 05:37;tongwan;Can not compile Test.java with the following errors:
Test.java:9: error: cannot find symbol
final Object actual = BadEnum1.class.getEnumConstants();
                      ^
  symbol:   class BadEnum1
  location: class Test
Test.java:16: error: cannot find symbol
final Object actual = BadEnum2.class.getEnumConstants();
                      ^
  symbol:   class BadEnum2
  location: class Test
2 errors;;;","2022-11-01 05:40;tongwan;Requested more details from the submitter.;;;","2022-11-01 20:00;tongwan;Additional information from the submitter:
Before javac can compile Test.java, you first need to use Jasm[1] to compile the BadEnum classes.

[1]: from OpenJDK Code Tools: https://github.com/openjdk/asmtools, it’s used for some JVM tests in the OpenJDK repository.;;;","2022-11-01 22:52;tongwan;The observations on Windows 10:
JDK 11: Failed, AssertionError thrown.
JDK 17: Failed.
JDK 18: Failed.
JDK 19: Failed.
JDK 20ea+4: Failed.;;;","2022-11-08 05:49;asotona;Class::getEnumConstants does not catch NullPointerException nor ClassCastException for corrupted Enums.
The fix is relatively simple.
;;;","2022-11-09 02:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11056
Date: 2022-11-09 10:14:45 +0000;;;","2022-11-09 22:23;dukebot;Changeset: e802b124
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2022-11-10 06:20:57 +0000
URL:       https://git.openjdk.org/jdk/commit/e802b124b7a363ca4cb56f8072b4dde5176ef96a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update style and header in JDWP Protocol spec and JVMTI spec,JDK-8296188,5086489,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-11-01 14:24,2022-11-14 19:15,2023-10-01 09:56,2022-11-02 14:14,19,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,"The  JDWP Protocol spec and JVMTI spec are outliers in the specs directory for not using the standard stylesheet and recent new header providing a navigation bar.

Without changing the way the basic content is generated, this can be fixed by post-processing in Docs.gmk.   Both files are already processed there.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296268,,,,,,,,,,,JDK-8295914,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z3c3:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-02 12:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10957
Date: 2022-11-02 19:07:36 +0000;;;","2022-11-02 14:14;dukebot;Changeset: fd60036a
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-11-02 21:12:25 +0000
URL:       https://git.openjdk.org/jdk/commit/fd60036a34b0a8516eb29b698674c8242c4a84c1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] vmTestbase/nsk/jvmti/GetObjectMonitorUsage/objmonusage007/TestDescription.java fails with ""primitive"" keyword",JDK-8296172,5086465,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,dsimms,dsimms,2022-11-01 07:52,2022-11-01 08:03,2023-10-01 09:56,2022-11-01 08:03,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,,,"
vmTestbase/nsk/jvmti/GetObjectMonitorUsage/objmonusage007/TestDescription.java

Uses primitve class, could just as well use value class
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z36r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-11-01 07:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/803
Date: 2022-11-01 14:55:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compiler incorrectly rejects code with variadic method references,JDK-8296171,5086464,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,mcimadamore,mcimadamore,2022-11-01 07:35,2022-11-16 23:40,2023-10-01 09:56,2022-11-14 10:36,15,16,17,18,19,20,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"Consider the program below, originally reported here:
https://old.reddit.com/r/java/comments/yhlv52/strange_behaviour_of_javac_15_16_17_18_19/

import java.util.function.*;

interface Intf {
    Object apply(String... args);
}

class Test {
   public final Object foo(Object... o) { return ""foo""; }
   public static Object foo(Object o) { return ""bar""; }

    public void test() {
        Intf f = this::foo;

        System.out.println(f.apply());
    }

    public static void main(String[] args) {
        new Test().test();
    }
}

When checking the method reference, both 'foo' methods are applicable methods to the parameter types Object[] (this is the parameter type derived from the functional descriptor).

The compiler should then pick the most specific: since we have determined applicability w/o resorting to variadic conversions, we should just use plain subtyping to prove most specific. Hence, foo(Object...) is more specific than foo(Object) because Object[] <: Object but not vice-versa.

But the compiler still reports an error, as if the most specific method was the static method, which is confusing.

After debugging, it seems like the compiler correctly identifies the most specific method, but then is getting confused by the fact that _one_ applicable static method was found during the search. While this is an important fact to record in case the method reference could be unbound (e.g. TypeName::methodName), this fact is immaterial in the method reference lookup in this example, given the qualifier expression is not a type name, but a plain expression.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z36j:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-14 10:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11093
Date: 2022-11-10 22:02:04 +0000;;;","2022-11-14 10:36;dukebot;Changeset: 3eb789af
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2022-11-14 18:31:26 +0000
URL:       https://git.openjdk.org/jdk/commit/3eb789af74231d37796a5670ffab935cabbf3b09
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test/langtools/tools/jdeps/jdkinternals/ShowReplacement.java failing after JDK-8296072,JDK-8296167,5086460,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,weijun,alanb,alanb,2022-11-01 06:49,2022-11-14 19:12,2023-10-01 09:56,2022-11-01 08:15,20,,,,,,,20,tools,,0,noreg-self,regression,tier1,tier4,,,,,,,,,,,,,,,,,,"jdeps/jdkinternals/src/q/NoRepl.java depends on sun.security.util.DerEncoder, changed by JDK-8296072.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296072,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z35n:",9223372036854775807,b22,,,,,,,,,,,,"2022-11-01 07:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10935
Date: 2022-11-01 14:18:27 +0000;;;","2022-11-01 08:15;dukebot;Changeset: da0ae512
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-11-01 15:14:19 +0000
URL:       https://git.openjdk.org/jdk/commit/da0ae5128a250bb7a5c6a7484589528db8220ed2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[macos] Change ""/Applications"" to ""Applications"" in DMG image",JDK-8296154,5086445,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,almatvee,almatvee,almatvee,2022-10-31 15:31,2022-11-14 19:20,2023-10-01 09:56,2022-11-07 12:55,14,,,,,,,20,tools,,0,macos,sn_130,sn_131,,,,,,,,,,,,,,,,,,,"Currently DMG image will show ""/Applications"" with ""/"" for ""Applications"" folder. This needs to be change to ""Applications"". See attached image.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296455,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-03 19:03;almatvee;AppAfter.png;https://bugs.openjdk.org/secure/attachment/101419/AppAfter.png","2022-11-03 19:03;almatvee;AppBefore.png;https://bugs.openjdk.org/secure/attachment/101420/AppBefore.png","2022-11-03 19:03;almatvee;RuntimeAfter.png;https://bugs.openjdk.org/secure/attachment/101421/RuntimeAfter.png","2022-11-03 19:03;almatvee;RuntimeBefore.png;https://bugs.openjdk.org/secure/attachment/101422/RuntimeBefore.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2z32b:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-11-04 16:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11001
Date: 2022-11-04 23:26:00 +0000;;;","2022-11-07 12:55;dukebot;Changeset: 7e85b41d
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-11-07 20:52:57 +0000
URL:       https://git.openjdk.org/jdk/commit/7e85b41d37c5eec9693cfc07447f5deffd5d483b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Start of release updates for JDK 21,JDK-8296149,5086440,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-10-31 15:13,2023-04-20 10:31,2023-10-01 09:56,2022-12-08 08:06,21,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296182,,,,,,,,,,JDK-8296913,JDK-8284858,,,,,,,,,,JDK-8296962,JDK-8306584,JDK-8300698,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z317:",9223372036854775807,b01,,,,,,,,,,,,"2022-11-28 20:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10924
Date: 2022-11-01 05:49:25 +0000;;;","2022-12-08 08:06;dukebot;Changeset: 175e3d3f
Author:    Joe Darcy <darcy@openjdk.org>
Committer: Jesper Wilhelmsson <jwilhelm@openjdk.org>
Date:      2022-12-08 16:04:00 +0000
URL:       https://git.openjdk.org/jdk/commit/175e3d3ff332be25cca9822c58c46f1e012953c2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
diags-examples.xml is broken,JDK-8296137,5086418,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-10-31 10:05,2022-11-14 19:19,2023-10-01 09:56,2022-11-07 08:02,19,,,,,,,20,tools,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,"diags-example.xml exists as an extension to the main build.xml file, to generate the HTML report containing the output from the RunExamples code.

The file is reported to be broken.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z2wb:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-11-04 14:43;jjg;Some amount of bitrot since various repo reorgs ...;;;","2022-11-04 14:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10998
Date: 2022-11-04 21:50:10 +0000;;;","2022-11-07 08:02;dukebot;Changeset: f8b2574e
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-11-07 15:58:42 +0000
URL:       https://git.openjdk.org/jdk/commit/f8b2574ebc32fa0e62dbaa0f2447757ff83c320f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
nmethod::is_unloading result unstable with concurrent unloading,JDK-8296101,5086367,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,dlong,dlong,2022-10-29 20:04,2023-01-24 07:11,2023-10-01 09:56,2022-11-03 06:34,20,,,,,,,20,hotspot,,0,noreg-hard,zgc,,,,,,,,,,,,,,,,,,,,"From JDK-8295969:
I have been assuming that the result of is_unloading() is stable, but that might not be the case. Consider 3 threads, where one thread Patch is calling is_unloading() before patching a compiled call site, thread Clear is calling is_unloading() to see if it the call site should be cleared, and thread Compiler has just set the nmethod state to not_entrant. Now let's say the Patch thread sees the nmethod as is_use and not unloading and decides to patch the call site. The Clear thread sees the nmethod as unloading and decides to clear the call site. The Patch thread writes the cached is_unloading state first with ""not unloading"", then the Clear thread overwrites it with ""is unloading"". The call site is first cleared by thread Clear and then patched by thread Patch. The GC unlinks the nmethod, and soon it gets released and the memory recycled. Now we have a compiled call site calling into bad memory. That memory can get overwritten with a new nmethod, and then we have a call into the middle of an nmethod.

If the above scenario is indeed possible, then I think the is_cold/make_not_entrant race can be fixed with memory barriers. There may be a similar race with the has_dead_oop path of is_unloading, because C1 patching can add new nmethod oops. It might be better to fix the race in is_unloading. When is_unloading writes the cached result, it could use a compare-and-swap so that the first value written always wins. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295969,,,,,,,,,,,,,,,,,JDK-8295969,JDK-8290025,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z2kz:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-10-29 20:06;dlong;I was thinking that this race would only happen with a weak memory model, like aarch64.  But we could have:

is_cold READ is_maybe_on_stack == false
make_not_entrant WRITE is_maybe_on_stack = true
make_not_entrant WRITE not_entrant = true
is_cold READ not_entrant == true

and a memory barrier wouldn't help here.  Instead we could do:

if (is_not_entrant()) {
  OrderAccess::loadload();
  if (!is_maybe_on_stack() {
  }
}

and:

mark_as_maybe_on_stack();
OrderAccess::storestore();
try_transition(not_entrant);

Or use Atomic::load_acquire() and Atomic::release_store() for is_not_entrant() and try_transition().;;;","2022-10-31 03:10;eosterlund;I don't understand the connection to memory ordering. I do however understand that since make_not_entrant can happen while concurrent threads are computing is_unloading(), that depending on whether a concurrent observer reads the state of the nmethod before or after make_not_entrant, then it can end up thinking the nmethod is either is_cold() or not is_cold(), which in turn will make it set the is_unloading_state for the current unloading cycle to either true or false racingly.

I'm currently trying out a patch (in the generational ZGC repo) for this: https://github.com/fisk/jdk/commit/8aaa8488110b1277de6dc466a9514dc34fbcf0e9

By guarding with a CAS, the thread that makes the nmethod not_entrant ensures that the is_unloading_state value is updated first, and racing threads observing stale values are forced to agree that the nmethod is or is not is_unloading().

But I don't see the connection to the memory ordering of mark_as_maybe_on_stack(). The source for the instability is IMO the not_entrant condition which we look at in is_cold. As for the counter used to mark_as_maybe_on_stack(), this counter is only updated after the is_unloading_state has been updated. If we do that with a CAS, then we know that the state is stable for the current unloading cycle. Moreover, we only ever call mark_as_maybe_on_stack() on nmethods that are !is_unloading.

Hope this makes sense.;;;","2022-10-31 04:09;eosterlund;If I modify is_cold to use (os::random % 2) instead of is_not_entrant() to simulate the source of instability but with higher probability (50% chance true vs false), and run RunThese, we hit a crash very quickly. With my patch that installs the is_unloading_state with a CAS, it does not crash, because all threads observe consistent and stable is_unloading values. The first thread that installs the value decides if we should or should not heuristically unload the nmethod.;;;","2022-10-31 13:55;dlong;With the CAS we can detect the race/instability and decide a winner, which solves the problem especially if we don't know where all the races are or don't want to fix them.  But if we wanted to, for example, avoid the CAS in release/product builds because it is more expensive, then we could try to remove the races instead.  That's where memory ordering comes in.  When I reproduce the race with delays, it is when this sequence happened:

 is_cold READ is_maybe_on_stack == false
make_not_entrant WRITE is_maybe_on_stack = true
make_not_entrant WRITE not_entrant = true
is_cold READ not_entrant == true 

(I have simplified is_maybe_on_stack and not_entrant to be a flags for illustrative purposes)

If we change the order of the reads in is_cold:

is_cold READ not_entrant
is_cold READ is_maybe_on_stack

then it should be impossible for is_cold to see (not_entrant && !is_maybe_on_stack) as a result of the other thread calling make_not_entrant(), assuming the reads and write and performed in order, which requires memory barriers.;;;","2022-11-01 02:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10926
Date: 2022-11-01 09:46:33 +0000;;;","2022-11-03 06:34;dukebot;Changeset: cc3c5a18
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2022-11-03 13:31:07 +0000
URL:       https://git.openjdk.org/jdk/commit/cc3c5a18ed4e52ea385ea0e8bedaf1b01f3c5e6e
;;;","2022-11-04 20:03;dlong;I think this race could happen with two threads calling make_not_entrant() at the same time (after 8290025: Remove the Sweeper), without the need for concurrent unloading.  In other words, I think it could have happened with G1 too, possibly leaving the nmethod in the is_unloading state but with active frames on the stack.;;;","2022-11-04 21:12;eosterlund;I don’t understand how that would happen. Nobody makes any nmethod not_entrant during the GC safepoint, and the GC safepoint updates the is_unloading_state of all nmethods. So once the safepoint is released, nobody would calculate the value any more.;;;","2022-11-05 01:05;dlong;OK, I missed that.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Problem list headful tests which may fail on Linux VMs,JDK-8296087,5086352,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2022-10-28 18:53,2023-08-28 21:48,2023-10-01 09:56,2022-10-30 22:20,20,,,,,,,20,client-libs,,0,jdk11u-todo,testbug,,,,,,,,,,,,,,,,,,,,"We have a couple tests that may fail intermittently on VMs that seem to be similarly configured to physical systems, but perhaps don't have the same level of responsiveness due to the host being busy.

We need to problem list these until they can be stabilised so that we can use VMs for testing in addition to physical systems.

Tests at issue are
JDK-8296083 : javax/swing/JTree/6263446/bug6263446.java fails intermittently on a VM 
JDK-8296084 javax/swing/JSpinner/4788637/bug4788637.java fails intermittently on a VM

There's also one test that fails ""always"" on VMs which don't support sound devices :
JDK-8282463: javax/sound/sampled/Clip/DataPusherThreadCheck.java fails

There's a PR out for review for that which should resolve that aspect of the failure .. TBD on whether it really is root cause of other failures but they are much rarer.

So we would perhaps problem list that only if this fix isn't pushed .. as we'd at least need to see another case of it still failing anyway and file a new bug.


",,,,,,,,,,,JDK-8305693,JDK-8306226,JDK-8315184,JDK-8314981,JDK-8305833,JDK-8314988,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z2hn:",9223372036854775807,b22,,,,,,,,,,,,"2022-10-30 09:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10911
Date: 2022-10-30 16:30:37 +0000;;;","2022-10-30 22:23;dukebot;Changeset: f8cc0677
Author:    Phil Race <prr@openjdk.org>
Date:      2022-10-31 05:19:11 +0000
URL:       https://git.openjdk.org/jdk/commit/f8cc067792ca8be1426ba6ae97968efa91c71db7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/JSpinner/4788637/bug4788637.java fails intermittently on a VM,JDK-8296084,5086349,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,prr,prr,2022-10-28 16:38,2023-06-27 08:21,2023-10-01 09:56,2022-12-02 03:51,17,20,,,,,,20,client-libs,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sn_131,sn_132,test_sprint,test_sprint_nov_2022,testbug,,,,,,,,,,,,"javax/swing/JSpinner/4788637/bug4788637.java fails about 10% of the time on a VM although it has always passed on physical h/w, so likely a test bug

Log below
java.lang.reflect.InvocationTargetException
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
	at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
	at bug4788637.main(bug4788637.java:78)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)
Caused by: java.lang.Error: JSpinner buttons don't conform to most platform conventions
	at bug4788637.destroy(bug4788637.java:148)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException
",,,,,,,,,,,JDK-8305879,JDK-8306248,JDK-8310972,JDK-8307607,JDK-8305901,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-01 22:33;psadhukhan;screen.png;https://bugs.openjdk.org/secure/attachment/101285/screen.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z2gz:",9223372036854775807,b27,,,,,,,,,,,,"2022-10-31 08:39;psadhukhan;It would be nice to know the platform where it fails. And also the full log as "" System.out.println(""LookAndFeel: "" + laf.getClassName());"" this print is not shown above.

I guess attaching the full jtr of the failure will help if it is targetted for this test sprint..;;;","2022-11-01 22:41;psadhukhan;I have taken full screenshot using Robot createScreenCapture too when it fails and that also shows lock screen.;;;","2022-12-01 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11455
Date: 2022-12-01 15:29:48 +0000;;;","2022-12-02 03:51;dukebot;Changeset: 319faa5a
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-12-02 11:48:28 +0000
URL:       https://git.openjdk.org/jdk/commit/319faa5afc37df5fd9ce4305e6e38a7bd4b39c65
;;;","2023-05-05 06:39;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a test change.
I resolved the ProblemList.
Test passes. SAP nightly testing passed.;;;","2023-05-05 06:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1326
Date: 2023-05-05 13:38:17 +0000;;;","2023-06-22 08:28;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
No risk, only a test change.
Clean backport from 17.
Test passes. SAP nighlty testing passed;;;","2023-06-22 08:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1996
Date: 2023-06-22 15:28:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/JTree/6263446/bug6263446.java fails intermittently on a VM,JDK-8296083,5086348,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,prr,prr,2022-10-28 16:36,2023-08-15 22:10,2023-10-01 09:56,2022-11-16 19:26,17,19,20,,,,,20,client-libs,,0,Intermittent,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-yes,sn_131,test_sprint,test_sprint_nov_2022,testbug,,,,,,,,,,,,,"When javax/swing/JTree/6263446/bug6263446.java is run on a VM it fails 
sometimes with the log below.
Because it passes 75% of the time and always has passed on physical systems it seems likely to be a test issue

java.lang.reflect.InvocationTargetException
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
	at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
	at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
	at bug6263446.assertEditingNoTreeLock(bug6263446.java:266)
	at bug6263446.assertEditing(bug6263446.java:256)
	at bug6263446.main(bug6263446.java:74)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)
Caused by: java.lang.RuntimeException: Tree should be editing
	at bug6263446$7.run(bug6263446.java:271)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException",,,,,,,,,,,JDK-8305014,JDK-8314093,JDK-8314359,JDK-8297279,JDK-8304856,JDK-8314095,JDK-8297465,JDK-8297280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-02 00:33;psadhukhan;fullScreen.png;https://bugs.openjdk.org/secure/attachment/101294/fullScreen.png","2022-11-01 22:55;psadhukhan;screen.png;https://bugs.openjdk.org/secure/attachment/101290/screen.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z2gr:",9223372036854775807,b25,,,,,,,,,,,,"2022-10-31 08:43;psadhukhan;It would be nice to know the platform where it fails.;;;","2022-11-03 20:45;psadhukhan;OK. It's a another system this time..will test it there...;;;","2022-11-04 04:04;psadhukhan;We have similar test javax/swing/JTable/6263446/bug6263446.java which doesn't seem to fail in these systems. Comparing it looks like JTree test uses reflection access to access JDK class internal variable, not sure if that is recommended but it has not failed till now...
---------
DefaultTreeCellEditor editor =
                            (DefaultTreeCellEditor) tree.getCellEditor();
                    Field field = DefaultTreeCellEditor.class.getDeclaredField(""realEditor"");
                    field.setAccessible(true);
                    DefaultCellEditor ce = (DefaultCellEditor) field.get(editor);
                    ce.setClickCountToStart(clicks);
---------------

In my ubuntu 20.04 VM also, it seems to fail 1st time this test is run albeit with different issue..
Made similar fix as JTable one, it seems to pass for 20 times consecutively...
But could not test on OCI system as Lawrence tasks is scheduled for long 
https://mach5.us.oracle.com/mdash/jobs/lpandrew-jdk-20-23-1615-20221104-0159-38125496?search=state%3ARUNNING;;;","2022-11-06 19:28;psadhukhan;Even after 2 days my job in those OCI systems are still scheduled..It seems current SQE job are taking too long a time to complete..EVen the above job is not complete yet...I tried on 2 different systems but still job not getting run...
[~landrews] Can you please specify a OCI system where I could test my fix?;;;","2022-11-09 02:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11057
Date: 2022-11-09 10:37:24 +0000;;;","2022-11-16 19:26;dukebot;Changeset: dd9aa727
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-11-17 03:25:37 +0000
URL:       https://git.openjdk.org/jdk/commit/dd9aa7272d04b49dd5cbf3ff9f9091c7d63d68ae
;;;","2022-11-17 18:47;vrudomet;Fix Request [17u, 19u]

Clean test backport, had to merge ProblemList.txt (test is missing in ProblemList.txt). 
Test update, low risk.
Test passed during manual run (run in a 50 loop). ;;;","2022-11-17 22:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/897
Date: 2022-11-18 06:37:00 +0000;;;","2022-11-17 22:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/73
Date: 2022-11-18 06:37:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/c2/irTests/TestVectorizeTypeConversion.java fails with release VMs after JDK-8291781,JDK-8296030,5086293,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2022-10-28 04:15,2022-11-14 11:42,2023-10-01 09:56,2022-10-28 05:51,20,,,,,,,20,hotspot,,0,c2,noreg-self,oracle-triage-20,tencent-interest,tier6,,,,,,,,,,,,,,,,,"Error: VM option 'SuperWordRTDepCheck' is develop and is available only in debug version of VM.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291781,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z24j:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-28 04:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10900
Date: 2022-10-28 11:21:07 +0000;;;","2022-10-28 05:21;rcastanedalo;ILW = test case fails in release build due to unavailable flag; always; ignore test failure = MHL = P3;;;","2022-10-28 05:51;dukebot;Changeset: 754bd531
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-10-28 12:46:32 +0000
URL:       https://git.openjdk.org/jdk/commit/754bd53137a1c596e6f1a7debb847cd563d95699
;;;","2022-10-29 06:41;dcubed;The fix for this bug is integrated in jdk-20+22-1568.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Usage of DirectBuffer::address should be guarded,JDK-8296024,5086288,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,pminborg,mcimadamore,mcimadamore,2022-10-28 01:38,2023-02-15 04:10,2023-10-01 09:56,2022-12-06 02:45,20,,,,,,,20,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,"There are around 34 usages of DirectBuffer::address in the JDK code. While some of these usages have been vetted to take into account the possibility of buffers backed by shared memory segments (which can be closed asynchronously) - most are not.

Currently the code is defensive, and throws whenever a buffer backed by a shared segment is found.

Eyeballing all the use sites, it seems the vast majority is doing a trivial synchronous operation, inside a try/finally (with a reachability fence). We should replace these so that, if there's a segment, we keep its session alive using MemorySession::whileAlive.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z23f:",9223372036854775807,b27,,,,,,,,,,Verified,,"2022-11-21 02:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11260
Date: 2022-11-21 10:53:07 +0000;;;","2022-12-06 02:45;dukebot;Changeset: 84b927a0
Author:    Per Minborg <pminborg@openjdk.org>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2022-12-06 10:42:59 +0000
URL:       https://git.openjdk.org/jdk/commit/84b927a05bcb7bf32a12829070ffd3a5670066d2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jshell crashes on mismatched record pattern,JDK-8296012,5086272,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,dlsmith,dlsmith,2022-10-27 16:09,2022-12-05 14:03,2023-10-01 09:56,2022-11-29 11:36,19,,,,,,,20,tools,,0,amber,javac-record,,,,,,,,,,,,,,,,,,,,"% -> jshell19 --enable-preview
|  Welcome to JShell -- Version 19
|  For an introduction type: /help intro

jshell> record Foo(int x, int y) {}
|  created record Foo

jshell> Foo f = new Foo(1, 2)
f ==> Foo[x=1, y=2]

jshell> switch (f) { case Foo(int z) -> z; }
Exception in thread ""main"" java.lang.InternalError: Exception during analyze - java.lang.IndexOutOfBoundsException: Index: 1, Size: 1
	at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:415)
	at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.<init>(TaskFactory.java:406)
	at jdk.jshell/jdk.jshell.TaskFactory.lambda$analyze$1(TaskFactory.java:178)
	at jdk.jshell/jdk.jshell.TaskFactory.lambda$runTask$4(TaskFactory.java:213)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskPool.getTask(JavacTaskPool.java:193)
	at jdk.jshell/jdk.jshell.TaskFactory.runTask(TaskFactory.java:206)
	at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:175)
	at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:161)
	at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:150)
	at jdk.jshell/jdk.jshell.ExpressionToTypeInfo.expressionInfo(ExpressionToTypeInfo.java:239)
	at jdk.jshell/jdk.jshell.Eval.processExpression(Eval.java:607)
	at jdk.jshell/jdk.jshell.Eval.lambda$sourceToSnippets$1(Eval.java:223)
	at jdk.jshell/jdk.jshell.TaskFactory.lambda$parse$6(TaskFactory.java:255)
	at jdk.jshell/jdk.jshell.TaskFactory.lambda$runTask$4(TaskFactory.java:213)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskPool.getTask(JavacTaskPool.java:193)
	at jdk.jshell/jdk.jshell.TaskFactory.runTask(TaskFactory.java:206)
	at jdk.jshell/jdk.jshell.TaskFactory.parse(TaskFactory.java:140)
	at jdk.jshell/jdk.jshell.TaskFactory.parse(TaskFactory.java:240)
	at jdk.jshell/jdk.jshell.Eval.sourceToSnippets(Eval.java:197)
	at jdk.jshell/jdk.jshell.Eval.eval(Eval.java:133)
	at jdk.jshell/jdk.jshell.JShell.eval(JShell.java:493)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSource(JShellTool.java:3624)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSourceCatchingReset(JShellTool.java:1348)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processInput(JShellTool.java:1246)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.run(JShellTool.java:1217)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.start(JShellTool.java:1001)
	at jdk.jshell/jdk.internal.jshell.tool.JShellToolBuilder.start(JShellToolBuilder.java:261)
	at jdk.jshell/jdk.internal.jshell.tool.JShellToolProvider.main(JShellToolProvider.java:120)
Caused by: java.lang.IllegalStateException: java.lang.IndexOutOfBoundsException: Index: 1, Size: 1
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:383)
	at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:412)
	... 27 more
Caused by: java.lang.IndexOutOfBoundsException: Index: 1, Size: 1
	at jdk.compiler/com.sun.tools.javac.util.List.get(List.java:490)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.lambda$coversDeconstructionFromComponent$3(Flow.java:815)
	at jdk.compiler/com.sun.tools.javac.util.List.map(List.java:425)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.coversDeconstructionFromComponent(Flow.java:815)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.coversDeconstructionFromComponent(Flow.java:856)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.coveredSymbols(Flow.java:783)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.coveredSymbolsForCases(Flow.java:748)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitSwitchExpression(Flow.java:728)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitchExpression.accept(JCTree.java:1382)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:447)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitReturn(Flow.java:1020)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCReturn.accept(JCTree.java:1711)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:447)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.scanStat(Flow.java:507)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.scanStats(Flow.java:515)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitBlock(Flow.java:607)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1082)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:447)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.scanStat(Flow.java:507)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitMethodDef(Flow.java:571)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:912)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:447)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitClassDef(Flow.java:551)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:810)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:447)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.analyzeTree(Flow.java:1082)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.analyzeTree(Flow.java:1074)
	at jdk.compiler/com.sun.tools.javac.comp.Flow.analyzeTree(Flow.java:223)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.flow(JavaCompiler.java:1377)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.flow(JavaCompiler.java:1341)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:404)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$analyze$1(JavacTaskImpl.java:379)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:379)
	... 28 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z1zv:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-11-25 03:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11363
Date: 2022-11-25 10:55:03 +0000;;;","2022-11-29 11:36;dukebot;Changeset: 7af6b4b5
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2022-11-29 19:33:18 +0000
URL:       https://git.openjdk.org/jdk/commit/7af6b4b54cc2ead4f5dbd6bfa7fd343b84c1d8b5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AssertionError in annotationTargetType,JDK-8296010,5086270,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,cushon,cushon,2022-10-27 14:12,2023-02-22 23:13,2023-10-01 09:56,2023-02-16 11:07,19,,,,,,,21,tools,,0,javac-crash,,,,,,,,,,,,,,,,,,,,,"In the following example, javac crashes when compiling a file that references an annotation with a @Target containing an invalid ElementType.

The class file is not well formed, but the compiler should handle it without crashing.

I think this should be a warning, but not a fatal error. The values in ElementType are updated for new language features, so this is similar this crash involve a Java 8 compilation that saw a reference to ElementType.MODULE: https://bugs.openjdk.org/browse/JDK-8295314

```
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Opcodes;

import java.nio.file.Files;
import java.nio.file.Paths;

public class Gen {

  public static void main(String[] args) throws Exception {
    Files.write(Paths.get(""A.class""), dump());
  }

  private static byte[] dump() {
    ClassWriter classWriter = new ClassWriter(0);
    classWriter.visit(
        Opcodes.V11,
        Opcodes.ACC_ANNOTATION | Opcodes.ACC_ABSTRACT | Opcodes.ACC_INTERFACE,
        ""A"",
        null,
        ""java/lang/Object"",
        new String[] {""java/lang/annotation/Annotation""});
    classWriter.visitSource(""A.java"", null);
    AnnotationVisitor target = classWriter.visitAnnotation(""Ljava/lang/annotation/Target;"", true);
    AnnotationVisitor value = target.visitArray(""value"");
    value.visitEnum(null, ""Ljava/lang/annotation/ElementType;"", ""FIELD"");
    value.visitEnum(null, ""Ljava/lang/annotation/ElementType;"", ""NO_SUCH"");
    value.visitEnd();
    target.visitEnd();
    classWriter.visitEnd();
    return classWriter.toByteArray();
  }
}
```

```
class B {
  @A Object o;
}
```

```
$ javac -cp asm-9.4.jar:asm-util-9.4.jar Gen.java
$ java -cp asm-9.4.jar:asm-util-9.4.jar:. Gen
$ javac -fullversion B.java
javac full version ""19-ea+34-2229""
warning: unknown enum constant ElementType.NO_SUCH
warning: unknown enum constant ElementType.NO_SUCH
2 warnings
An exception has occurred in the compiler (19-ea). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError: annotationTargetType(): unrecognized Attribute name NO_SUCH (class com.sun.tools.javac.util.SharedNameTable$NameImpl)
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:162)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations.targetToAnnotationType(TypeAnnotations.java:256)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations.lambda$annotationTargetType$3(TypeAnnotations.java:190)
        at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
        at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
        at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1921)
        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
        at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
        at java.base/java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:657)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations.annotationTargetType(TypeAnnotations.java:191)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.separateAnnotationsKinds(TypeAnnotations.java:316)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.visitVarDef(TypeAnnotations.java:1269)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:1018)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.scan(TypeAnnotations.java:294)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:57)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.visitClassDef(TypeAnnotations.java:1142)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:810)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations$TypeAnnotationPositions.scan(TypeAnnotations.java:294)
        at jdk.compiler/com.sun.tools.javac.code.TypeAnnotations.lambda$organizeTypeAnnotationsSignatures$0(TypeAnnotations.java:131)
        at jdk.compiler/com.sun.tools.javac.comp.Annotate.flush(Annotate.java:198)
        at jdk.compiler/com.sun.tools.javac.comp.Annotate.unblockAnnotations(Annotate.java:145)
        at jdk.compiler/com.sun.tools.javac.comp.Annotate.enterDone(Annotate.java:158)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.enterDone(JavaCompiler.java:1741)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.enterTrees(JavaCompiler.java:1044)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:917)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295314,,,,,,,JDK-8295314,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z1zf:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-01-26 10:53;vromero;I agree that javac shouldn't crash, but not sure if this should be a compiler error instead of a warning. I mean right now if this was declared in source code the compiler would do:
```
error: cannot find symbol
@Target(ElementType.NO_SUCH)
                   ^
  symbol:   variable NO_SUCH
  location: class ElementType
1 error
```;;;","2023-01-26 13:32;cushon;The more realistic example than NO_SUCH is something like MODULE in a jar of Java 8 bytecode, which is possible to produce using -source/-target/-bootclasspath.

A potential benefit of allowing this instead of reporting an error would to support libraries of annotations that want to be applicable to newer target types when used in projects targeting newer language versions, but for that jar of annotations to also be compatible with projects targeting older language levels. I'm curious what you think about that use-case?

A potential alternative would be to use multi-release jars, and have definitions of the annotations with different `@Target`s for newer versions. JEP-238 mentions ""every version of the library should offer the same API"", though, so it's not clear that having different @Targets for different versions is allowed by the spirit of that.;;;","2023-01-26 21:00;vromero;I understand the concern here but it seems to me that allowing this situation without issuing an error would be odd from the compiler POV. I see that ignoring this could have practical applications but to me it also offers a way to circumvent compiler's symbol resolution. We can continue discussing the issue on the PR but TBH this seems  to me that the compiler should issue an error not a warning.;;;","2023-01-26 21:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12241
Date: 2023-01-27 05:13:35 +0000;;;","2023-01-27 11:24;cushon;Thanks, that all SGTM--reporting an error here is clearly an improvement over crashing.

The other use-case might warrant another thread or RFE in the future. Thinking a little more about it, though, i can see it would be surprising if a @Target(MODULE) annotation that was only intended to be applicable to modules was interpreted as @Target() on earlier versions, and become applicable to other declaration types.;;;","2023-02-16 11:07;dukebot;Changeset: de80dd9c
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2023-02-16 19:06:26 +0000
URL:       https://git.openjdk.org/jdk/commit/de80dd9c15cd3194ba8c512498d37a76c747e5fc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
crash in runtime/DefineClass/NullClassBytesTest.java,JDK-8296007,5086264,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,dlong,dlong,2022-10-27 12:43,2022-11-14 19:12,2023-10-01 09:56,2022-10-31 17:50,17,18,19,20,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000ffff9bb0a9a4, pid=3059533, tid=3062037
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-10-26-0236027.drlong...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-10-26-0236027.drlong..., mixed mode, tiered, compressed class ptrs, z gc, linux-aarch64)
# Problematic frame:
# v  ~StubRoutines::atomic entry points 0x0000ffff9bb0a9a4
#
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z1y3:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-27 12:46;dlong;The problem is that Java_NullClassBytesTest_nativeDefineClass does not return a value.  However, most of the time the result ends up in the correct register, so nothing bad happens.;;;","2022-10-27 14:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10892
Date: 2022-10-27 21:00:17 +0000;;;","2022-10-31 17:49;dukebot;Changeset: 37107fc1
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-11-01 00:46:24 +0000
URL:       https://git.openjdk.org/jdk/commit/37107fc1574a4191987420d88f7182e63c7da60c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove left over InetAddressContainer class,JDK-8295994,5086247,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,michaelm,michaelm,michaelm,2022-10-27 07:56,2022-11-14 11:42,2023-10-01 09:56,2022-10-27 14:10,,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"src/java.base/share/classes/java/net/InetAddressContainer.java was left after the plain socketimpl code was deleted. There are no other usages of the class. So, it can be deleted.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z1ub:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-10-27 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10886
Date: 2022-10-27 15:54:58 +0000;;;","2022-10-27 14:10;dukebot;Changeset: 182c2158
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2022-10-27 21:05:44 +0000
URL:       https://git.openjdk.org/jdk/commit/182c215888fa2f58f9d1f4cfb32f1f45012b8d9f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
use K instead of 1024 in a couple of hotspot outputs,JDK-8295993,5086246,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-10-27 07:51,2022-11-14 19:11,2023-10-01 09:56,2022-10-31 02:13,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,There are a couple of outputs e.g. in os_posix.cpp and os_windows.cpp where the K constant could be used nicely instead of 1024  (this is done already at a number of places but not everywhere).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z1u3:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-28 05:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10902
Date: 2022-10-28 12:32:40 +0000;;;","2022-10-31 02:13;dukebot;Changeset: 274ea1db
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-10-31 09:09:43 +0000
URL:       https://git.openjdk.org/jdk/commit/274ea1db5b248968c1ff1c5c24d75f07fb8a0600
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/CancelRequestTest.java fails intermittently,JDK-8295991,5086242,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dfuchs,dfuchs,2022-10-27 06:52,2022-12-10 08:09,2023-10-01 09:56,2022-11-02 08:35,20,,,,,,,20,core-libs,,0,httpclient,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,,,"java.lang.AssertionError: WARNING: tracker for HttpClientImpl(13) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 2
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true

Log extract:

=================================================================================================

HTTPSlowHandler received request to /http1/x/same/interrupt/post
Cancelling from Thread[#29,pool-1-thread-1,5,MainThreadGroup]
java.util.concurrent.CompletionException: java.util.concurrent.CancellationException: Request cancelled
Got expected exception: java.util.concurrent.ExecutionException: java.util.concurrent.CancellationException: Request cancelled
cancelled jdk.internal.net.http.common.MinimalFuture@37b42f67[Completed exceptionally: java.util.concurrent.CompletionException: java.util.concurrent.CancellationException: Request cancelled] (id=6054)
Got expected exception: java.util.concurrent.ExecutionException: java.util.concurrent.CancellationException: Request cancelled
Got expected exception: java.util.concurrent.CancellationException: Request cancelled
	cause: java.io.IOException: Request cancelled
Waiting for HTTP operations to terminate...
Server wrote 12 bytes
Server wrote 12 bytes
HTTPSlowHandler: unexpected exception: java.io.IOException: Broken pipe
HTTPSlowHandler reply sent: /http1/x/same/interrupt/post
WARNING: exception caught in HttpTestHandler::handle java.io.IOException: Broken pipe
java.io.IOException: Broken pipe
	at java.base/sun.nio.ch.UnixFileDispatcherImpl.write0(Native Method)
	at java.base/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:62)
	at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:136)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:101)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:57)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:542)
	at jdk.httpserver/sun.net.httpserver.Request$WriteStream.write(Request.java:390)
	at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.writeChunk(ChunkedOutputStream.java:125)
	at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.flush(ChunkedOutputStream.java:159)
	at jdk.httpserver/sun.net.httpserver.PlaceholderOutputStream.flush(ExchangeImpl.java:469)
	at CancelRequestTest$HTTPSlowHandler.handle(CancelRequestTest.java:655)
	at HttpServerAdapters$HttpTestHandler.doHandle(HttpServerAdapters.java:382)
	at HttpServerAdapters$HttpTestHandler.lambda$toHttpHandler$0(HttpServerAdapters.java:375)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
	at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:101)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:868)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:835)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:204)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:567)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:533)
	at java.base/java.lang.Thread.run(Thread.java:1591)
	Suppressed: java.io.IOException: Broken pipe
		at java.base/sun.nio.ch.UnixFileDispatcherImpl.write0(Native Method)
		at java.base/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:62)
		at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:136)
		at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:101)
		at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:57)
		at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:542)
		at jdk.httpserver/sun.net.httpserver.Request$WriteStream.write(Request.java:390)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.writeChunk(ChunkedOutputStream.java:125)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.flush(ChunkedOutputStream.java:159)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.close(ChunkedOutputStream.java:134)
		at jdk.httpserver/sun.net.httpserver.PlaceholderOutputStream.close(ExchangeImpl.java:474)
		at CancelRequestTest$HTTPSlowHandler.handle(CancelRequestTest.java:646)
		... 12 more
WARNING: tracker for HttpClientImpl(13) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 2
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true
Found 0 client still active, with 0 operations still pending out of 61 tracked clients.
test CancelRequestTest.testPostSendAsync(""http://localhost:44765/http1/x/same/interrupt"", true, true): failure
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(13) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 2
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true
Found 0 client still active, with 0 operations still pending out of 61 tracked clients.
	at ReferenceTracker.check(ReferenceTracker.java:268)
	at CancelRequestTest.testPostSendAsync(CancelRequestTest.java:493)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)
config CancelRequestTest.beforeMethod(org.testng.TestRunner@4b0d5fdc): success
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z1t7:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-10-27 06:59;dfuchs;Suspecting a timeout issue - maybe we should wait a bit longer for the subscriber to get removed.;;;","2022-11-01 04:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10931
Date: 2022-11-01 11:39:04 +0000;;;","2022-11-02 08:35;dukebot;Changeset: e15d2419
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-11-02 15:31:50 +0000
URL:       https://git.openjdk.org/jdk/commit/e15d2419ab9c812a3dc18812406f7b59976d2143
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve make handling of strip flags,JDK-8295990,5086241,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-10-27 06:37,2022-11-14 19:14,2023-10-01 09:56,2022-11-02 06:10,,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,"Strip currently has its flags set by guessing based on the target OS, it would be more appropriate to instead set them based on properly checking the strip binary instead.

Examples of version strings obtained from the command line that can be used to extract information about the exact strip utility used:
Windows: GNU strip (GNU Binutils) 2.39
Linux: GNU strip (GNU Binutils for Ubuntu) 2.38
llvm-strip, compatible with GNU strip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z1sz:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-28 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10882
Date: 2022-10-27 13:38:04 +0000;;;","2022-11-02 06:10;dukebot;Changeset: dac6ecc8
Author:    Julian Waters <jwaters@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-11-02 13:07:20 +0000
URL:       https://git.openjdk.org/jdk/commit/dac6ecc857c527e9df7af68389b46d452ac59ae0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unexpected JShell feature,JDK-8295984,5086234,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-10-27 01:57,2023-01-26 09:07,2023-10-01 09:56,2022-11-23 06:46,20,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"As part of JDK-8199912, the /open JShell command has been extended to handle URLs. But, this unexpectedly also allows to specify URL on the command line. The support for URLs on the command line should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296326,,,JDK-8292711,,,,,,,JDK-8297525,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z1rf:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-11-04 01:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10979
Date: 2022-11-04 07:57:27 +0000;;;","2022-11-23 06:46;dukebot;Changeset: bc59f2a4
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-11-23 14:43:41 +0000
URL:       https://git.openjdk.org/jdk/commit/bc59f2a4ac3ac02d8333a4f89525bc7c81dc3c9e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failure in sun/security/tools/keytool/WeakAlg.java - ks: The process cannot access the file because it is being used by another process,JDK-8295982,5086232,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rmarchenko,rmarchenko,rmarchenko,2022-10-27 01:43,2023-01-30 20:11,2023-10-01 09:56,2022-12-01 07:26,openjdk8u362,,,,,,,openjdk8u372,security-libs,,0,jdk8u-fix-request,jdk8u-fix-yes,testbug,,,,,,,,,,,,,,,,,,,"Test sun/security/tools/keytool/WeakAlg.java occasionally fails on Windows 64 bit (win2016, win11.)

Error logs contain the following message:

---------------------------------------------
$ rm ks
----------System.err:(22/1459)----------
java.nio.file.FileSystemException: ks: The process cannot access the file because it is being used by another process.

        at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:86)
        at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97)
        at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102)
        at sun.nio.fs.WindowsFileSystemProvider.implDelete(WindowsFileSystemProvider.java:269)
        at sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
        at java.nio.file.Files.deleteIfExists(Files.java:1165)
        at WeakAlg.rm(WeakAlg.java:940)
        at WeakAlg.main(WeakAlg.java:147)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.lang.Thread.run(Thread.java:750)

JavaTest Message: Test threw exception: java.nio.file.FileSystemException: ks: The process cannot access the file because it is being used by another process.

JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.nio.file.FileSystemException: ks: The process cannot access the file because it is being used by another process.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2z1qz:",9223372036854775807,b01,,,,,,,,,,,,"2022-10-27 01:58;rmarchenko;The root cause of the problem ""java.nio.file.FileSystemException: ks: The process cannot access the file because it is being used by another process"" is ""ks"" file is still open by FileInputStream instance used by KeyStore in the test code.

Perhaps, forcing GC to run may avoid this issue, but I guess explicit closing of the input stream is more suitable here.

Also I'd note that it seems there is no similar issue on jdk11 and later. These versions have another KeyStore implementation, so the issue fixed indirectly there maybe. 

Since there is no obvious fix for the issue in jdk11+, and we cannot apply another KeyStore implementation to jdk8,  it's suggested to make changes in the test code by applying explicit closing of the input stream.;;;","2022-10-29 14:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/150
Date: 2022-10-29 21:25:40 +0000;;;","2022-12-01 07:26;dukebot;Changeset: 8356d04a
Author:    Roman Marchenko <rmarchenko@openjdk.org>
Committer: Andrew Brygin <bae@openjdk.org>
Date:      2022-12-01 15:25:12 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/8356d04acbbb3c31c4baea034fce2f7bc0691847
;;;","2023-01-30 20:11;dukebot;Changeset: 8356d04a
Author:    Roman Marchenko <rmarchenko@openjdk.org>
Committer: Andrew Brygin <bae@openjdk.org>
Date:      2022-12-01 15:25:12 +0000
URL:       https://git.openjdk.org/jdk8u/commit/8356d04acbbb3c31c4baea034fce2f7bc0691847
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GetThreadListStackTraces returns wrong state for blocked VirtualThread,JDK-8295976,5086199,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,webbuggrp,webbuggrp,2022-10-26 13:22,2023-06-12 20:51,2023-10-01 09:56,2023-06-07 00:54,20,,,,,,,21,hotspot,,0,capbug,loom,,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubunu 22.10 x86_64
openjdk version ""20-ea"" 2023-03-21
OpenJDK Runtime Environment (build 20-ea+20-1466)
OpenJDK 64-Bit Server VM (build 20-ea+20-1466, mixed mode, sharing)


A DESCRIPTION OF THE PROBLEM :
GetThreadListStackTraces returns JVMTI_THREAD_STATE_RUNNABLE for a VirtualThread blocked on an intrinsic monitor when called for more than one thread. When called for a single VirtualThread it correctly returns a state that includes the JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER flag.

It looks like the carrier thread state is not checked in this code path. Maybe VM_GetThreadListStackTraces::doit should call get_threadOop_and_JavaThread instead of cv_external_thread_to_JavaThread.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
With the attached sources and JAVA_HOME set to a JDK 20:

gcc -shared -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC VirtualThreadStateTest.c -o libVirtualThreadStateTest.so

$JAVA_HOME/bin/javac --enable-preview --release=20 VirtualThreadStateTest.java 

LD_LIBRARY_PATH=. $JAVA_HOME/bin/java --enable-preview -agentlib:VirtualThreadStateTest VirtualThreadStateTest


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Test process should return 0.
ACTUAL -
Test process prints ""Multiple state wrong"" and returns 1.

---------- BEGIN SOURCE ----------
-- VirtualThreadStateTest.java -------------------------------------------------------------
import java.util.concurrent.locks.ReentrantLock;

public class VirtualThreadStateTest {
    private static final int JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER = 0x0400;
    private static final int JVMTI_THREAD_STATE_WAITING = 0x0080;

    private static native int getStateSingle(Thread thread);
    private static native int getStateMultiple(Thread thread, Thread other);

    public static void main(String[] args) throws InterruptedException {
        System.loadLibrary(""VirtualThreadStateTest"");

        checkReentrantLock();
        checkSynchronized();
    }

    private static void checkReentrantLock() throws InterruptedException {
        final ReentrantLock reentrantLock = new ReentrantLock();
        reentrantLock.lock();
        Thread virtualThread = Thread.ofVirtual().start(() -> {
            System.out.println(""trying to get lock"");
            reentrantLock.lock();
            System.out.println(""got lock"");
        });
        Thread.sleep(1000);
        checkStates(virtualThread, Thread.State.WAITING);
    }

    private static void checkSynchronized() throws InterruptedException {
        final Object monitor = new Object();
        synchronized (monitor) {
            Thread virtualThread = Thread.ofVirtual().start(() -> {
                System.out.println(""trying to get monitor"");
                synchronized (monitor) {
                    System.out.println(""got monitor"");
                }
            });
            Thread.sleep(1000);
            checkStates(virtualThread, Thread.State.BLOCKED);
        }
    }

    private static void checkStates(Thread virtualThread, Thread.State expected) {
        int stateSingle = getStateSingle(virtualThread);
        int stateMultiple = getStateMultiple(virtualThread, Thread.currentThread());
        System.out.println(""State: "" + virtualThread.getState() + "", Single: "" + 
					Integer.toHexString(stateSingle) + "", Multiple: "" + Integer.toHexString(stateMultiple));
        if (virtualThread.getState() != expected) {
            System.out.println(""Java state wrong"");
            System.exit(1);
        }
        int jvmtiExpected = expected == Thread.State.WAITING ? JVMTI_THREAD_STATE_WAITING : JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER;
        if ((stateSingle & jvmtiExpected) == 0) {
            System.out.println(""Single state wrong"");
            System.exit(1);
        }
        if ((stateMultiple & jvmtiExpected) == 0) {
            System.out.println(""Multiple state wrong"");
            System.exit(1);
        }
    }
}
--------------------------------------------------------------------------------------------

-- VirtualThreadStateTest.c -------------------------------------------------------------
#include <jvmti.h>
#include <stdlib.h>

static jvmtiEnv *jvmti = NULL; 

static void checkJvmti(int code, const char* message) { 
    if (code != JVMTI_ERROR_NONE) { 
        printf(""Error %s: %d\n"", message, code); 
        abort(); 
    } 
} 

JNIEXPORT jint JNICALL Java_VirtualThreadStateTest_getStateSingle(JNIEnv* jni_env, jclass clazz, jthread virtualThread) {
    jvmtiStackInfo* stackInfo = NULL;
    checkJvmti((*jvmti)->GetThreadListStackTraces(jvmti, 1, &virtualThread, 1000, &stackInfo), ""getStateSingle"");
    return stackInfo[0].state;
}

JNIEXPORT jint JNICALL Java_VirtualThreadStateTest_getStateMultiple
		(JNIEnv* jni_env, jclass clazz, jthread virtualThread, jthread otherThread) 
{
    jthread threads[2];
    threads[0] = virtualThread;
    threads[1] = otherThread;
    jvmtiStackInfo* stackInfo = NULL;
    checkJvmti((*jvmti)->GetThreadListStackTraces(jvmti, 2, threads, 1000, &stackInfo), ""getStateMultiple"");
    return stackInfo[0].state;
}

JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *options, void *reserved) {
    (*vm)->GetEnv(vm, (void**)&jvmti, JVMTI_VERSION);
    if (jvmti == NULL) { 
        printf(""could not initialize JVMTI\n""); 
        abort(); 
    } 
    return JVMTI_ERROR_NONE;
} 
--------------------------------------------------------------------------------------------
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z1jn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-12-06 09:48;sspitsyn;This can be fixed in 21.;;;","2023-06-05 18:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14326
Date: 2023-06-06 00:50:34 +0000;;;","2023-06-07 00:54;dukebot;Changeset: a25b7b8b
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-06-07 07:51:37 +0000
URL:       https://git.openjdk.org/jdk/commit/a25b7b8b55f2dcd3c2945193d78f754580421733
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reference to State in Task.java is ambiguous when building with JDK 19,JDK-8295962,5086202,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kcr,kcr,kcr,2022-10-26 14:33,2022-11-29 06:11,2023-10-01 09:56,2022-11-02 10:16,jfx20,,,,,,,jfx20,javafx,,1,noreg-trivial,sn_130,,,,,,,,,,,,,,,,,,,,"When using JDK 19 to build JavaFX, we get the following error from the ""javadoc"" task:

modules/javafx.graphics/src/main/java/javafx/concurrent/Task.java:693: error: reference to State is ambiguous
    private ObjectProperty<State> state = new SimpleObjectProperty<>(this, ""state"", State.READY);
                           ^
  both enum java.util.concurrent.Future.State in Future and enum javafx.concurrent.Worker.State in Worker match
modules/javafx.graphics/src/main/java/javafx/concurrent/Task.java:694: error: reference to State is ambiguous
    final void setState(State value) { // package access for the Service
                        ^
  both enum java.util.concurrent.Future.State in Future and enum javafx.concurrent.Worker.State in Worker match
modules/javafx.graphics/src/main/java/javafx/concurrent/Task.java:732: error: reference to State is ambiguous
    @Override public final State getState() { checkThread(); return state.get(); }
                           ^
  both enum java.util.concurrent.Future.State in Future and enum javafx.concurrent.Worker.State in Worker match
modules/javafx.graphics/src/main/java/javafx/concurrent/Task.java:733: error: reference to State is ambiguous
    @Override public final ReadOnlyObjectProperty<State> stateProperty() { checkThread(); return state; }
                                                  ^
  both enum java.util.concurrent.Future.State in Future and enum javafx.concurrent.Worker.State in Worker match
4 errors


The only reason we don't get them from the javac task is that we run javac with ""--release 17"" for most modules, including the gaphics modules. If we instead use ""-source 17 -target 17"" then javac produces the same error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277090,,,,,,,,,,,JDK-8295965,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z1kb:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-10-26 14:40;kcr;The javafx.concurrent.Task class implements javafx.concurrent.Worker and extends java.util.concurrent.FutureTask, which in turn implements java.util.concurrent.Future.

Worker has a nested enum ""State"", which is used in the implementing Task class without being qualified -- since Task is a Worker, we can just say ""State"" instead of ""Worker.State"". The problem arises because java.util.concurrent.Future added an enum in JDK 19 also named ""State"" (as part of JDK-8277090), so the reference to ""State"" in the Task class is ambiguous.

The solution is to replace all occurrences of ""State"" with ""Worker.State"" in Task.java.;;;","2022-10-26 15:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/933
Date: 2022-10-26 22:38:15 +0000;;;","2022-11-02 10:16;dukebot;Changeset: 4a2afb4c
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-11-02 17:14:10 +0000
URL:       https://git.openjdk.org/jfx/commit/4a2afb4ce28b46ee463b1dc8d38d1c81962e3c88
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
intermittent cmp_baseline task failures with CDS files,JDK-8295951,5086190,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,dcubed,dcubed,2022-10-26 09:20,2023-02-28 04:37,2023-10-01 09:56,2023-01-31 08:54,20,21,,,,,,21,hotspot,,0,cds,intermittent,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,tier5,,,,,,,,,,,,,,,,"The Mach5 Tier5 cmp-baseline task has been failing intermittently
on macosx-aarch64 and macosx-x64. The files being complained
about are related to CDS.",,,,,,,,,,,JDK-8303345,JDK-8303014,,,,,,,,,,,,,,,,,,,,,,,JDK-8283220,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2z1hn:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-11-01 11:15;mseledtsov;ILW = HLM = P3;;;","2022-11-03 09:08;ccheung;I couldn't reproduce the issue using the same hosts where the bug was spotted.

This is similar to JDK-8283220.
In order to get more info when there is difference in the classlist, the subtask of JDK-8283220 (JDK-8283238) should be implemented first.;;;","2022-12-01 13:39;iklam;We found the difference in the classlist:

[2022-11-20T01:37:12,523Z] JDK Other files with binary differences... 
[2022-11-20T01:37:12,929Z] ./lib/classlist 
[2022-11-20T01:37:12,929Z] 737a738 
[2022-11-20T01:37:12,929Z] > java/util/concurrent/atomic/Striped64$Cell 

It's related to this code: https://github.com/openjdk/jdk/blob/337ca10085fcec125fb658167e51d2f35f1f0cda/src/java.base/share/classes/java/util/concurrent/atomic/LongAdder.java#L85

public class LongAdder extends Striped64 implements Serializable {
....
    public void add(long x) {
        Cell[] cs; long b, v; int m; Cell c;
        if ((cs = cells) != null || !casBase(b = base, b + x)) {
            int index = getProbe();  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< HERE
            boolean uncontended = true;
            if (cs == null || (m = cs.length - 1) < 0 ||
                (c = cs[index & m]) == null ||
                !(uncontended = c.cas(v = c.value, v + x)))
                longAccumulate(x, null, uncontended, index);
        }
    }

the value of getProbe() seems to be random. And it seems like only some rare occasions, due to a specific value returned by Striped64.getProbe(), we will (because of a contention??) call longAccumulate(), which does this to cause the Striped64$Cell class to be loaded:

https://github.com/openjdk/jdk/blob/337ca10085fcec125fb658167e51d2f35f1f0cda/src/java.base/share/classes/java/util/concurrent/atomic/Striped64.java#L229-L241

final void longAccumulate(long x, LongBinaryOperator fn,
                              boolean wasUncontended, int index) {
                    ...
                    if (cellsBusy == 0) {       // Try to attach new Cell
                        Cell r = new Cell(x);   // Optimistically create;;;","2022-12-01 13:44;iklam;Suggested fix:

The randomness of Striped64.getProbe(), as noted from the previous comment, comes from here:

https://github.com/openjdk/jdk/blob/337ca10085fcec125fb658167e51d2f35f1f0cda/src/java.base/share/classes/java/util/concurrent/ThreadLocalRandom.java#L400-L402

    private static final AtomicLong seeder
        = new AtomicLong(RandomSupport.mixMurmur64(System.currentTimeMillis()) ^
                         RandomSupport.mixMurmur64(System.nanoTime()));

We can consider a fix similar to this (see JDK-8241071 for details)

https://github.com/openjdk/jdk/blob/337ca10085fcec125fb658167e51d2f35f1f0cda/src/java.base/share/classes/java/util/ImmutableCollections.java#L76-L83

        // When running with -Xshare:dump, the VM will supply a ""random"" seed that's
        // derived from the JVM build/version, so can we generate the exact same
        // CDS archive for the same JDK build. This makes it possible to verify the
        // consistency of the JDK build.
        long seed = CDS.getRandomSeedForDumping();
        if (seed == 0) {
          seed = System.nanoTime();
        }
;;;","2023-01-27 16:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12272
Date: 2023-01-28 00:29:29 +0000;;;","2023-01-31 08:49;ccheung;Instead of changing core-libs classes, a fix is to always load the java/util/concurrent/atomic/Striped64$Cellclass from the HelloClasslist.java app so that the generated classlist and CDS archive would be the same as the baseline build.;;;","2023-01-31 08:54;dukebot;Changeset: e193a0b7
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-01-31 16:51:45 +0000
URL:       https://git.openjdk.org/jdk/commit/e193a0b72a143889170b64da19fb22f7f8555e89
;;;","2023-02-09 22:15;ccheung;JDK 20u fix justification:

The fix is small and is in the HelloClasslist.java app which is used for generating a classlist during JDK build time. The classlist will be used for generating CDS archives during JDK build time.

With the fix, we should not see intermittent build failure in JDK 20 due to this bug.;;;","2023-02-15 14:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/5
Date: 2023-02-15 22:28:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Enable langtools/tier1 in GHA for 8u,JDK-8295950,5086189,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,zzambers,zzambers,2022-10-26 09:14,2022-11-09 07:25,2023-10-01 09:56,2022-11-03 09:48,openjdk8u362,,,,,,,openjdk8u362,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,,"It is now possible to enable langtools/tier1 in Github actions for jdk8u as the only failure there has been resolved [1].

[1] https://bugs.openjdk.org/browse/JDK-8265527",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265527,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z1hf:",9223372036854775807,b02,,,,,,,,,,,,"2022-10-26 09:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/149
Date: 2022-10-26 16:15:22 +0000;;;","2022-10-26 09:26;zzambers;Fix request (8u):

Enables langtools/tier1 testing by GHA for jdk8. Tests in GHA are passing. Only changes github workflow file.;;;","2022-11-03 09:48;dukebot;Changeset: ae6d30db
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-11-03 16:45:19 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/ae6d30dba462ee53eb89999b7b24a72693737c03
;;;","2022-11-09 07:25;dukebot;Changeset: ae6d30db
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-11-03 16:45:19 +0000
URL:       https://git.openjdk.org/jdk8u/commit/ae6d30dba462ee53eb89999b7b24a72693737c03
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: C1: Fix LIRGenerator::do_LibmIntrinsic,JDK-8295926,5086156,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-10-25 21:49,2023-09-06 20:23,2023-10-01 09:56,2022-10-28 05:01,19,20,,,,,,20,hotspot,,0,c1,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,oraclejdk-na,oracle-triage-20,,,,,,,,,,,,,,,,"The ported logic of LIRGenerator::do_LibmIntrinsic has a correctness problem, which will kill argument registers when the current libm intrinsic's operand is also a libm intrinsic, such as:

(dpow val1 (dlog val2))

LIRItem walks operands, so the `value.load_item_force(cc->at(0));` should be moved below after the LIRItem. But we might as well keep aligning AArch64's style.


Reproducer: (pattern extracted from Renaissance `gauss-mix`)

```
public class A {

    static int count = 0;

    public static void print(double var) {
        if (count % 10000 == 0) {
            System.out.println(var);
        }
        count++;
    }

    public static void a(double var1, double var2, double var3) {
        double var4 = Math.pow(var3, Math.log(var1 / var2));
        print(var4);
    }

    public static void main(String[] args) {

        for (int i = 0; i < 50000; i++) {
            double var21 = 2.2250738585072014E-308D;
            double var15 = 1.1102230246251565E-16D;
            double d1 = 2.0D;
            A.a(var21, var15, d1);
        }

    }

}
```",,,,,,,,,,,JDK-8311731,JDK-8297337,JDK-8297468,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276799,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,19,,linux,,,,,,"0|i2z1a3:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-25 22:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10867
Date: 2022-10-26 04:57:11 +0000;;;","2022-10-25 22:49;thartmann;ILW = Incorrect result of C1 compiled code, simple reproducer on Linux riscv, disable affected intrinsics = HML = P2;;;","2022-10-28 05:01;dukebot;Changeset: 1fdbb1ba
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-10-28 11:56:21 +0000
URL:       https://git.openjdk.org/jdk/commit/1fdbb1ba337b07dbcfb3c28c4fdeba74fee113dc
;;;","2022-11-17 20:12;xlinzheng;Fix request [19u]

This is a critical P2 fix for RISC-V and affects RISC-V only, so the impact is small.
Clean backport from 20.
Tier1~2 testing passed, including the added jtreg test in this PR.;;;","2022-11-17 20:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/70
Date: 2022-11-18 04:14:37 +0000;;;","2023-03-09 03:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/10
Date: 2023-03-09 11:33:34 +0000;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.AssertionError: E.value - compiler crashes when using Type parameter with enhanced switch,JDK-8295923,5086028,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,webbuggrp,webbuggrp,2022-10-23 03:04,2022-12-02 02:31,2023-10-01 09:56,2022-12-01 05:42,19,,,,,,,20,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Fedora Linux, Oracle Java build 19.0.1+10-21

$ java -version                                 
java version ""19.0.1"" 2022-10-18
Java(TM) SE Runtime Environment (build 19.0.1+10-21)
Java HotSpot(TM) 64-Bit Server VM (build 19.0.1+10-21, mixed mode, sharing)

$ uname -a
Linux neumann 5.19.16-200.fc36.x86_64 #1 SMP PREEMPT_DYNAMIC Sun Oct 16 22:50:04 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux

A DESCRIPTION OF THE PROBLEM :
Compilation of the following program fails with an java.lang.AssertionError thrown within the Java compiler.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1) Compile via javac --enable-preview -source 19 -cp . *.java
2) Observe output

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Program should compile.
ACTUAL -
java: An exception has occurred in the compiler (19.0.1). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java: java.lang.AssertionError: E.value
java: 	at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:162)
java: 	at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.<init>(Symbol.java:1920)
java: 	at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol$1.<init>(Symbol.java:1926)
java: 	at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.clone(Symbol.java:1926)
java: 	at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.clone(Symbol.java:1896)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.binaryQualifier(Gen.java:261)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitSelect(Gen.java:2340)
java: 	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCFieldAccess.accept(JCTree.java:2530)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:881)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitApply(Gen.java:1879)
java: 	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1799)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitNewArray(Gen.java:1989)
java: 	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCNewArray.accept(JCTree.java:1910)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genArgs(Gen.java:906)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitApply(Gen.java:1884)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitExec(Gen.java:1752)
java: 	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1586)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:666)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.handleSwitch(Gen.java:1377)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitSwitch(Gen.java:1197)
java: 	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitch.accept(JCTree.java:1287)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1101)
java: 	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1082)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:971)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:934)
java: 	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:912)
java: 	at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2424)
java: 	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:737)
java: 	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1635)
java: 	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1603)
Writing classes… [java19]
java: 	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
java: 	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:104)
java: 	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
java: 	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)
java: 	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)
java: 	at org.jetbrains.jps.javac.JavacMain.compile(JavacMain.java:237)
java: 	at org.jetbrains.jps.javac.ExternalJavacProcess.compile(ExternalJavacProcess.java:195)
java: 	at org.jetbrains.jps.javac.ExternalJavacProcess.access$400(ExternalJavacProcess.java:30)
java: 	at org.jetbrains.jps.javac.ExternalJavacProcess$CompilationRequestsHandler$1.run(ExternalJavacProcess.java:268)
java: 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
java: 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
java: 	at java.base/java.lang.Thread.run(Thread.java:1589)
java: Compilation failed: internal java compiler error

---------- BEGIN SOURCE ----------
class ExtensiblePseudoEnums {

    static final CustomEnum CUSTOM = ""custom""::toString;

    public static void main(String[] args) {
        consumeCustomEnum(CustomEnum.DEFAULT);
        consumeCustomEnum(CUSTOM);
    }

    static <E extends CustomEnum> void consumeCustomEnum(E customEnum) {
        System.out.println(customEnum.value());

        switch (customEnum) {
            case E e when e == CUSTOM -> System.out.printf(""handle %s%n"", e.value());
            default -> System.out.printf(""handle %s%n"", customEnum.value());
        }
    }

    interface CustomEnum {

        CustomEnum DEFAULT = ""default""::toString;

        String value();
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297986,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-25 20:58;adev;Main.java;https://bugs.openjdk.org/secure/attachment/101188/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z0hn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-25 20:58;adev;The issue is reproducible with the given reproducer.

 javac --enable-preview -source 19 *.java ;;;","2022-11-14 07:54;jlahoda;Will be part of the patch for JEP 432/JEP433.;;;","2022-12-01 05:42;jlahoda;Fixed together with JDK-8294945.;;;","2022-12-02 02:30;jlahoda;Specifically, this change should be fixing this bug:
https://github.com/openjdk/jdk/pull/10814/files#diff-e50bbfa8783f3bc8f5542452740b78f3167bee19be7365a87da2298c6333cca6R734;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.security.MessageDigest.isEqual does not adhere to @implNote,JDK-8295919,5086054,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kdriver,webbuggrp,webbuggrp,2022-10-24 03:58,2023-09-29 12:06,2023-10-01 09:56,2023-09-29 11:50,20,,,,,,,22,security-libs,,0,20ea,dcsaw,noreg-doc,reproducer-other,starter-bug,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The @implNote section of the MessageDigest.isEqual method reads:

""All bytes in {@code digesta} are examined to determine equality. The calculation time depends only on the length of {@code digesta}. It does not depend on the length of {@code digestb} or the contents of {@code digesta} and {@code digestb}.""

(see: https://github.com/openjdk/jdk/blob/jdk-20%2B20/src/java.base/share/classes/java/security/MessageDigest.java#L455)

Looking at the implementation, these statements are violated at two different places:

(1) In line 473, if 'digestb' is null, then the calculation time does not depend on 'digesta'.
(2) In line 480, if the length of 'digestb' is zero, then the calculation time does also not depend on 'digesta'.

I'd say (2) can be fixed by switching the two comparisions in lines 480 and 481. I'm not sure whether (1) has any relevant implications. 


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z0nf:",9223372036854775807,master,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-10-25 17:48;tongwan;Moved to JDK for further investigations.;;;","2022-10-27 11:08;mullan;We cannot switch lines 480 and 481.  lenB needs to be non-zero so that digestb[indexB] is always inside the array.

The most reasonable fix is to adjust the implementation note to say that it does not apply if digestb is null or zero length. These two cases do not reveal anything about the contents of digesta, so it does not have to be a constant time comparison.;;;","2023-09-26 12:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15933
Date: 2023-09-26 19:37:23 +0000;;;","2023-09-29 11:50;dukebot;Changeset: 47569a25
Author:    Kevin Driver <kdriver@openjdk.org>
Date:      2023-09-29 18:47:47 +0000
URL:       https://git.openjdk.org/jdk/commit/47569a256cb61f210bf2d9f28656fd3fa5ad27b8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
build error after JDK-8279366,JDK-8295895,5086122,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,ccheung,dcubed,dcubed,2022-10-25 11:11,2022-11-14 11:37,2023-10-01 09:56,2022-10-25 11:58,20,,,,,,,20,hotspot,,0,cds,noreg-build,regression,tier1,,,,,,,,,,,,,,,,,,"[2022-10-25T18:04:37,954Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8385/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/94e60bac-4c32-47f6-a74c-678754acd011/runs/0263fe07-26ce-4e18-8204-28060c6f339c/workspace/open/src/hotspot/share/cds/filemap.cpp: In member function 'bool FileMapInfo::check_paths(int, int, GrowableArray<const char*>*, unsigned int, unsigned int)':
[2022-10-25T18:04:37,954Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8385/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/94e60bac-4c32-47f6-a74c-678754acd011/runs/0263fe07-26ce-4e18-8204-28060c6f339c/workspace/open/src/hotspot/share/cds/filemap.cpp:898:45: error: operation on 'runtime_path' may be undefined [-Werror=sequence-point]
[2022-10-25T18:04:37,954Z]   898 |     const char* runtime_path = runtime_path = rp_array->at(i)  + runtime_prefix_len;
[2022-10-25T18:04:37,954Z]       |                                ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279366,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i2z12j:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-25 11:28;dcubed;This might be simply due to a typo:

$ git diff
diff --git a/src/hotspot/share/cds/filemap.cpp b/src/hotspot/share/cds/filemap.cpp
index fc1e65a96eb..f9b1c66348e 100644
--- a/src/hotspot/share/cds/filemap.cpp
+++ b/src/hotspot/share/cds/filemap.cpp
@@ -895,7 +895,7 @@ bool FileMapInfo::check_paths(int shared_path_start_idx, int num_paths, Growable
     assert(strlen(shared_path(j)->name()) > (size_t)dumptime_prefix_len, ""sanity"");
     const char* dumptime_path = shared_path(j)->name() + dumptime_prefix_len;
     assert(strlen(rp_array->at(i)) > (size_t)runtime_prefix_len, ""sanity"");
-    const char* runtime_path = runtime_path = rp_array->at(i)  + runtime_prefix_len;
+    const char* runtime_path = rp_array->at(i)  + runtime_prefix_len;
     if (!os::same_files(dumptime_path, runtime_path)) {
       return true;
     }
;;;","2022-10-25 11:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10858
Date: 2022-10-25 18:43:52 +0000;;;","2022-10-25 11:58;dukebot;Changeset: 0caea818
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-10-25 18:54:48 +0000
URL:       https://git.openjdk.org/jdk/commit/0caea818b59f7e2cd60708b1002fba328c5357fe
;;;","2022-10-25 11:58;coleenp;Weird, it passed GHA.;;;","2022-10-25 12:07;shade;AFAICS, JDK-8279366 PR was based on version that did not yet remove ""sequence-point"" warning off the global ignore list. Current mainline contains the changeset that does it. This error is almost exactly why we wanted to limit these warnings to particular files, and then even fix them :);;;","2022-10-25 12:18;dcubed;So this is a case where a pre-integration Mach5 Tier1 would not have
necessarily caught the problem if the 'remove ""sequence-point"" warning'
changeset hit the repo just before Calvin integrated.;;;","2022-10-25 12:36;shade;Yeah, it is a good technique to rebase before integration to catch these kind of merge issues, but that does not always help either.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove SECOM certificate that is expiring in September 2023,JDK-8295894,5086121,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rhalade,rajmaddu,rajmaddu,2022-10-25 11:05,2023-09-20 16:40,2023-10-01 09:56,2023-07-11 16:56,11,17,21,22,,,,22,security-libs,2023-08-09 00:00,0,amazon-interest,cac-remv,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-critical-request,jdk8u-critical-yes,release-note=yes,,,,,,,,,,,,"The following secom root certificate is expiring in September 2023 and needs action -

OU=Security Communication RootCA1, O=SECOM Trust.net, C=JP

EXPIRATION DATE: 9/29/2023",,,,,,,,,,,JDK-8312541,JDK-8312905,JDK-8311966,JDK-8312046,JDK-8312045,JDK-8312693,JDK-8312451,JDK-8312053,JDK-8316635,JDK-8315982,JDK-8312054,,,,,,,,,,,,,,,JDK-8313420,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z12b:",9223372036854775807,b07,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-07-11 13:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14838
Date: 2023-07-11 20:42:14 +0000;;;","2023-07-11 16:56;dukebot;Changeset: fd7fddb6
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2023-07-11 23:53:40 +0000
URL:       https://git.openjdk.org/jdk/commit/fd7fddb6ed24e0ae4b5e18fb27fd80230941dc0b
;;;","2023-07-12 10:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/114
Date: 2023-07-12 17:52:47 +0000;;;","2023-07-17 03:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1589
Date: 2023-07-17 09:58:20 +0000;;;","2023-07-18 00:41;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
One of the required updates of meta information.
I had to resolve and adapt. 
SAP nighlyt testing passed. Test passes.;;;","2023-07-20 07:53;goetz;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
One of the required updates of meta information.
I had to resolve and adapt.  I backported from 17, but it made no difference in the end.
Test passes. SAP nightly testing passed.;;;","2023-07-20 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2052
Date: 2023-07-20 14:55:48 +0000;;;","2023-09-05 02:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/363
Date: 2023-09-05 09:34:23 +0000;;;","2023-09-05 03:02;sgehwolf;Fix Request (OpenJDK 8u critical):

Please approve backporting this fix to OpenJDK 8u392. It removes a certificate which is going to expire in September 23 (i.e. if the fix goes in now well before the actual release is going to be live). Should be low risk. Tests pass. Also a pre-requisite for clean application of JDK-8314960.;;;","2023-09-06 02:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u/pull/48
Date: 2023-09-06 09:32:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
NMT preinit code does not handle allocation errors,JDK-8295889,5086114,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-10-25 08:14,2022-11-14 11:40,2023-10-01 09:56,2022-10-26 01:37,17,19,20,,,,,20,hotspot,,0,nmt,,,,,,,,,,,,,,,,,,,,,"The NMT preinit allocator (used for os::malloc and friends before the VM is initialized) does not handle malloc errors, nor does it handle overflows due to large sizes (it uses malloc headers too). Both cases need to be handled.

However, we can keep matters very simple. No need to propagate errors up to the caller; we can just fatal out on errors here since in this phase, there is no alternative for failed allocations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295881,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z10r:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-25 09:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10855
Date: 2022-10-25 15:18:05 +0000;;;","2022-10-26 01:37;dukebot;Changeset: cf121df1
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-10-26 08:35:05 +0000
URL:       https://git.openjdk.org/jdk/commit/cf121df17e60df61a1b8825724c0d735f11e73f6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PPC64] JfrGetCallTrace: Need pc == nullptr check before frame constructor,JDK-8295872,5086096,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2022-10-25 03:17,2022-11-14 19:16,2023-10-01 09:56,2022-11-03 07:48,11,17,19,20,,,,20,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"JDK-8293998 has introduced a pc == nullptr check which occurs in very rare cases. Unfortunately, the frame constructor is called before the new check which contains the assertion ""assert(_pc != nullptr)"". Hence, the null check needs to get moved.",,,,,,,,,,,JDK-8296892,JDK-8296922,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293998,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,"0|i2z0wr:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-10-25 03:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10846
Date: 2022-10-25 10:36:34 +0000;;;","2022-11-03 07:48;dukebot;Changeset: 59a13b18
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-11-03 14:29:51 +0000
URL:       https://git.openjdk.org/jdk/commit/59a13b1856cb1cf86385874b1152531016d41c22
;;;","2022-11-10 06:36;mdoerr;Fix Request (17u):
The code in the backport releases is the same (because previous changes were backported). So, the same weakness exists which can lead to intermittent crashes while profiling. Fix is small and simple. Applies cleanly modulo file renaming.;;;","2022-11-10 06:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/877
Date: 2022-11-10 14:28:40 +0000;;;","2022-11-11 07:19;mdoerr;Fix Request (11u): 
See 17u request. Doesn't apply cleanly due to unrelated context changes. Requires minor adaptation for 11u (see PR).;;;","2022-11-11 07:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1519
Date: 2022-11-11 15:13:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
32-bit Windows build failures after JDK-8294466,JDK-8295868,5086092,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-10-25 02:08,2022-11-14 11:40,2023-10-01 09:56,2022-10-26 01:12,20,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,"Fails like this:

```
* For target support_native_java.desktop_libsplashscreen_splashscreen_impl.obj:
splashscreen_impl.c
c:\buildbot\worker\build-jdkx-windows\build\src\java.desktop\share\native\libsplashscreen\splashscreen_impl.c(443): error C2220: the following warning is treated as an error
c:\buildbot\worker\build-jdkx-windows\build\src\java.desktop\share\native\libsplashscreen\splashscreen_impl.c(443): warning C4018: '>': signed/unsigned mismatch
c:\buildbot\worker\build-jdkx-windows\build\src\java.desktop\share\native\libsplashscreen\splashscreen_impl.c(444): warning C4018: '>': signed/unsigned mismatch
c:\buildbot\worker\build-jdkx-windows\build\src\java.desktop\share\native\libsplashscreen\splashscreen_impl.c(466): warning C4018: '>': signed/unsigned mismatch
c:\buildbot\worker\build-jdkx-windows\build\src\java.desktop\share\native\libsplashscreen\splashscreen_impl.c(467): warning C4018: '>': signed/unsigned mismatch
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294466,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z0vv:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-25 03:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10848
Date: 2022-10-25 10:40:05 +0000;;;","2022-10-26 01:12;dukebot;Changeset: 772be2e0
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-10-26 08:10:42 +0000
URL:       https://git.openjdk.org/jdk/commit/772be2e02b7bb1089116c0debb514154489cfa81
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestVerifyGraphEdges.java fails with exit code -1073741571 when using AlwaysIncrementalInline,JDK-8295867,5086089,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kvn,epeter,epeter,2022-10-25 01:37,2022-12-13 22:45,2023-10-01 09:56,2022-11-11 08:13,20,,,,,,,20,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,,"Extra flags:
-XX:-TieredCompilation -XX:+AlwaysIncrementalInline

All the testing system spits out is this:
Failed. Unexpected exit from test [exit code: -1073741571]

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295936,,,,,,,JDK-8256540,,,,,,,,,,,JDK-8293979,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b21,20,,,,,,,,"0|i2z0v7:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-25 01:43;epeter;Googling the error code gives me this:
0xC00000FD is the error code for stack overflows;;;","2022-10-25 09:26;rcastanedalo;The issue appears after integration of JDK-8293979, even if the connection between these two issues is not obvious.;;;","2022-10-25 20:13;dlong;ILW = stack overflow; windows only, one test only, with AlwaysIncrementalInline only; no workaround = MMH = P3;;;","2022-10-26 02:50;shade;Saw similar thing with x86_32, JDK-8295936. There seems to be an usually deep graph that stack-overflows the verification code.

This patch:
 https://cr.openjdk.java.net/~shade/8295867/diag.patch

...run with:
 $ build/linux-x86-server-fastdebug/images/jdk/bin/java -Xshare:on -Xcomp -XX:+VerifyGraphEdges

...produces:

Depth is too high: 5232
 16826  jmpDir  === 5685  [[ 5684 ]]  !orig=14419
Depth is too high: 5233
  5685  Region  === 5685 16828 16827  [[ 5685 16826 8083 ]]  !jvms: LambdaForm$Kind::<init> @ bci:8 (line 328) LambdaForm$Kind::<clinit> @ bci:135 (line 258)
Depth is too high: 5234
 16828  jmpDir  === 5686  [[ 5685 ]]  !orig=14419
Depth is too high: 5235
  5686  MachProj  === 5687  [[ 16828 ]] #0/unmatched !jvms:
Segmentation fault (core dumped);;;","2022-10-26 04:03;rcastanedalo;Right, the issue I observed also seems to affect compilation of LambdaForm$Kind::<init>, which also explains the connection to JDK-8295936.;;;","2022-10-26 04:21;rcastanedalo;[~shade] Since you have got further in the investigation, would you like to take over this bug? Feel free to re-assign it if so.;;;","2022-10-26 04:30;rcastanedalo;Re-adjusting priority after latest findings:
ILW = stack overflow in debug-only code; one test, on multiple platforms; no workaround = LHH = P4;;;","2022-10-26 04:33;shade;I don't want to be the assignee for this. I think this calls for the compiler expert to take a look. :);;;","2022-10-26 04:47;rcastanedalo;Fair enough :);;;","2022-10-27 21:29;kvn;I can't reproduce it locally with 64 bit VM.
[~shade] Since you can easy reproduce the issue with 32-bit VM (based on your comment in JDK-8295936) can you give us information about which method was compiled when that happened?
-Xshare:on|off may affect methods compiled with Xcomp.

Unless there is indeed some bug in CDS changes (or bug in C2 where we had JDK-8284882) I can't imaging why we runout of stack (1Mb on x64).
There maximum nodes in graph I observed in my local test run by printing visited.size() in verify_graph_edges() was:
Compiling java.net.URLStreamHandler::parseURL (1124 bytes): visited='6333',  nodes='7015' live='6968'
Note, it is ""visited nodes"" and not max stack depth during recursive call.

Theoretically we may fill 1MB stack because we have MaxNodeLimit=80000 if code is huge and very linear.

My first suggestion is to add -XX:+PrintCompilation -XX:-TieredCompilation -XX:CICompilerCount=1 flags to the test. So we know which compilation crashed VM.
Second, we may instrument Node::verify_edges() to check recursion depth.

But real fix would be to convert recursive Node::verify_edges() method to normal method.

;;;","2022-11-07 22:06;manc;This test keeps failing in Github pre-submit tests. I saw it in https://github.com/openjdk/jdk/pull/10974 and https://github.com/openjdk/jdk/pull/11032.
Should we add it to ProblemList.txt if it is hard to come up with a good fix?;;;","2022-11-08 05:58;rcastanedalo;[~manc] Let me have a look, the potential fix should not be hard (simulating recursion with a stack) but I would like to check first that the large size of the method under compilation is justifiable.;;;","2022-11-08 08:17;shade;This can be reproduced reliably with:

```
$ build/linux-x86-server-fastdebug/images/jdk/bin/java -Xshare:on -Xcomp -XX:+VerifyGraphEdges  -XX:+PrintCompilation -XX:-TieredCompilation -XX:CICompilerCount=1
...
   7809 1684   !b        java.lang.invoke.DirectMethodHandle::makePreparedLambdaForm (798 bytes)
   7812 1684   !         java.lang.invoke.DirectMethodHandle::makePreparedLambdaForm (798 bytes)   made not entrant
   7813 1685    b        java.lang.invoke.LambdaForm$Kind::<clinit> (1261 bytes)
<end of compilation log>
...
Segmentation fault (core dumped)

I did the depth instrumentation in `Node::verify_edges` before, see my first comment here. It matches the compilation log: `java.lang.invoke.LambdaForm$Kind::<clinit>` seems to cause stack overflow.;;;","2022-11-08 08:56;rcastanedalo;Re-adjusting priority (again) since it adds noise to GHA testing:
ILW = stack overflow in debug-only code, affects tier1 (linux-x86) in GHA CI testing; one test, on multiple platforms; no workaround = MMH = P3;;;","2022-11-08 10:28;kvn;Test passed by setting compiler's stack size the same as for 64 bits -XX:CompilerThreadStackSize=1024 with maximum stack depth from Aleksey's patch output:
Depth is too high: 6306

Aleksey is right - it is stack overflow because on 32-bit we have smaller stacks.
In general it also proves that there is Java code which requires big stack for recursive calls during compilation.
We need to avoid recursions in C2.;;;","2022-11-08 10:29;kvn;I reproduced failure with 64 bits VM with -XX:CompilerThreadStackSize=256
;;;","2022-11-08 16:55;kvn;`java.lang.invoke.LambdaForm$Kind::<clinit>`  is really long linear Enum class method:
https://github.com/openjdk/jdk/blame/master/src/java.base/share/classes/java/lang/invoke/LambdaForm.java#L250

In addition we inline all <init> class initializer for EA when run with -Xcomp:
https://github.com/openjdk/jdk/blame/master/src/hotspot/share/opto/bytecodeInfo.cpp#L410

We even hit inlined Nodes limit (18000) during sequential inlining:
<inline_fail reason='NodeCountInliningCutoff'/>

I looked on stack frame size for  `verify_edges()` and it is 10 words including PC and SP (640 bytes in 64-bits VM). With recursion depth 5000 it is 3.2Mb. 

Anyway, we need to convert `verify_edges()` to normal method to avoid this deep recursion. I don't see other solutions here.
;;;","2022-11-08 20:00;kvn;I am testing fix.;;;","2022-11-08 23:01;shade;Testing more, I think CDS is involved tangentially: after enhanced constants resolution with JDK-8293979, we are able to inline a bit more deeply, which is enough to go overboard with smaller compiler stacks.;;;","2022-11-09 10:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11065
Date: 2022-11-09 18:14:43 +0000;;;","2022-11-11 08:13;dukebot;Changeset: 819c6919
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-11-11 16:09:39 +0000
URL:       https://git.openjdk.org/jdk/commit/819c6919ca3067ec475b5b268f54e10700eec039
;;;",,,,,,,,,,,,,,
Several issues with os::realloc,JDK-8295865,5086086,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,stuefe,stuefe,2022-10-24 23:17,2023-07-21 10:44,2023-10-01 09:56,2022-11-11 21:54,17,19,20,,,,,20,hotspot,,0,amazon-interest,nmt,,,,,,,,,,,,,,,,,,,,"There are several issues with os::realloc():

1) If realloc(3) fails, the original block will be left untouched. That is fine, and the caller may expect this continue to use it, and later hand it to os::free(). But NMT has marked the original block as dead already. This will cause a subsequent os::free() or os::realloc() to trigger a false block integrity error. So, if realloc(3) fails, we need to revive the NMT header and re-account the original block.

2) If handed in very large sizes, the size may overflow if the NMT header is added. The result would be that the VM reallocates to a much smaller buffer which would cause subsequent memory corruption if the caller were to use the buffer (same as JDK-8286519, but for realloc).

3) If os::realloc() enlarges a buffer, the newly added memory should be zapped with uinitBlockPad as we do for os::malloc(). Of course we only can do this if NMT is enabled, otherwise we won't know the original block size.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z0uj:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-26 03:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10857
Date: 2022-10-25 16:27:37 +0000;;;","2022-11-11 21:54;dukebot;Changeset: 657a0b2f
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-11-12 05:51:50 +0000
URL:       https://git.openjdk.org/jdk/commit/657a0b2f1564e1754dbd64b776c53a52c480c901
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify that cleanup code can be skipped when the JVM terminates (e.g. when calling halt()),JDK-8295857,5086078,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bchristi,bchristi,bchristi,2022-10-24 15:42,2022-12-19 12:39,2023-10-01 09:56,2022-12-13 11:09,20,,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"JDK-8290036 documented  the shutdown sequence, noting that calling Runtime.halt() skips the shutdown sequence and immediately terminates the VM. Thus, ""threads' current methods do not complete normally or abruptly; no finally clause of any method is executed"".

One ramification of this is that resources within try-with-resource blocks will not be released. Some developers may realize this implication of calling halt(), but it would be better to state it explicitly.

",,,,,,,,,,,JDK-8298598,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290036,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b19,20,,,,,,,,"0|i2z0sr:",9223372036854775807,b28,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-10-28 16:20;smarks;[~bchristi] Perhaps you would like to work on this.;;;","2022-11-17 11:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11218
Date: 2022-11-17 19:25:42 +0000;;;","2022-11-17 15:32;dholmes;Personally, I don't think it is necessary to add to the list of things that won't happen when a thread is ""immediately prevented from executing any further Java code"" due to VM termination.The more you add, the more people take it as a proscriptive list and so anything not listed may actually still happen. If you insist on expanding this then the language must clearly show that these are just examples of things that won't happen, not a complete list.;;;","2022-11-18 13:11;bchristi;I will clearly indicate that it's not a complete list.;;;","2022-11-20 17:38;dholmes;Your latest update did not address my concern. It is this list that needs to clearly indicate it is just examples:

*  {@linkplain Thread.UncaughtExceptionHandler Uncaught exception handlers} are not run,
 * no {@code finally} clause of any method is executed, and try-with-resources
 * blocks do not {@linkplain AutoCloseable close} their resources.

Thanks

;;;","2022-11-22 11:27;bchristi;OK, updated that passage too;;;","2022-12-12 11:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/19
Date: 2022-12-12 19:51:22 +0000;;;","2022-12-13 11:09;dukebot;Changeset: bf78f716
Author:    Brent Christian <bchristi@openjdk.org>
Date:      2022-12-13 19:07:44 +0000
URL:       https://git.openjdk.org/jdk20/commit/bf78f716bd3e58df24ff1e6f4a0104025379f821
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
slow debug build error after JDK-8294466,JDK-8295847,5086065,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,ihse,dcubed,dcubed,2022-10-24 10:57,2022-11-14 11:36,2023-10-01 09:56,2022-10-24 13:35,20,,,,,,,20,infrastructure,,0,regression,tier2,,,,,,,,,,,,,,,,,,,,"[2022-10-24T11:59:57,422Z] In file included from /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/open/src/java.desktop/share/native/libsplashscreen/libpng/pngerror.c:47:
[2022-10-24T11:59:57,422Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/open/src/java.desktop/share/native/libsplashscreen/libpng/pngerror.c: In function 'png_warning_parameter_unsigned':
[2022-10-24T11:59:57,422Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/open/src/java.desktop/share/native/libsplashscreen/libpng/pngpriv.h:1777:4: error: 'buffer' may be used uninitialized [-Werror=maybe-uninitialized]
[2022-10-24T11:59:57,422Z]  1777 |    png_format_number(buffer, buffer + (sizeof buffer), format, number)
[2022-10-24T11:59:57,422Z]       |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[2022-10-24T11:59:57,422Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/open/src/java.desktop/share/native/libsplashscreen/libpng/pngerror.c:287:37: note: in expansion of macro 'PNG_FORMAT_NUMBER'
[2022-10-24T11:59:57,422Z]   287 |    png_warning_parameter(p, number, PNG_FORMAT_NUMBER(buffer, format, value));
[2022-10-24T11:59:57,422Z]       |                                     ^~~~~~~~~~~~~~~~~
[2022-10-24T11:59:57,422Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/open/src/java.desktop/share/native/libsplashscreen/libpng/pngerror.c:161:1: note: by argument 1 of type 'png_const_charp' {aka 'const char *'} to 'png_format_number' declared here
[2022-10-24T11:59:57,422Z]   161 | png_format_number(png_const_charp start, png_charp end, int format,
[2022-10-24T11:59:57,422Z]       | ^~~~~~~~~~~~~~~~~
[2022-10-24T11:59:57,422Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/open/src/java.desktop/share/native/libsplashscreen/libpng/pngerror.c:286:9: note: 'buffer' declared here
[2022-10-24T11:59:57,422Z]   286 |    char buffer[PNG_NUMBER_BUFFER_SIZE];
[2022-10-24T11:59:57,422Z]       |         ^~~~~~
[2022-10-24T11:59:57,422Z] In file included from /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/open/src/java.desktop/share/native/libsplashscreen/libpng/pngerror.c:47:
[2022-10-24T11:59:57,422Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/open/src/java.desktop/share/native/libsplashscreen/libpng/pngerror.c: In function 'png_warning_parameter_signed':
[2022-10-24T11:59:57,422Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/open/src/java.desktop/share/native/libsplashscreen/libpng/pngpriv.h:1777:4: error: 'buffer' may be used uninitialized [-Werror=maybe-uninitialized]
[2022-10-24T11:59:57,422Z]  1777 |    png_format_number(buffer, buffer + (sizeof buffer), format, number)
[2022-10-24T11:59:57,422Z]       |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[2022-10-24T11:59:57,422Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/open/src/java.desktop/share/native/libsplashscreen/libpng/pngerror.c:303:10: note: in expansion of macro 'PNG_FORMAT_NUMBER'
[2022-10-24T11:59:57,422Z]   303 |    str = PNG_FORMAT_NUMBER(buffer, format, u);
[2022-10-24T11:59:57,422Z]       |          ^~~~~~~~~~~~~~~~~
[2022-10-24T11:59:57,422Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/open/src/java.desktop/share/native/libsplashscreen/libpng/pngerror.c:161:1: note: by argument 1 of type 'png_const_charp' {aka 'const char *'} to 'png_format_number' declared here
[2022-10-24T11:59:57,422Z]   161 | png_format_number(png_const_charp start, png_charp end, int format,
[2022-10-24T11:59:57,422Z]       | ^~~~~~~~~~~~~~~~~
[2022-10-24T11:59:57,422Z] /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/open/src/java.desktop/share/native/libsplashscreen/libpng/pngerror.c:296:9: note: 'buffer' declared here
[2022-10-24T11:59:57,422Z]   296 |    char buffer[PNG_NUMBER_BUFFER_SIZE];
[2022-10-24T11:59:57,422Z]       |         ^~~~~~
[2022-10-24T11:59:57,469Z] cc1: all warnings being treated as errors
[2022-10-24T11:59:57,479Z] lib/Awt2dLibraries.gmk:746: recipe for target '/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/build/linux-x64-slowdebug/support/native/java.desktop/libsplashscreen/static/pngerror.o' failed
[2022-10-24T11:59:57,479Z] make[3]: *** [/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b93ec9a2-2a9a-4e90-920c-077c060ef4a1/runs/3ee85b33-4841-4147-9919-c3e2919f458e/workspace/build/linux-x64-slowdebug/support/native/java.desktop/libsplashscreen/static/pngerror.o] Error 1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294466,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i2z0pv:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-24 13:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10840
Date: 2022-10-24 20:01:26 +0000;;;","2022-10-24 13:35;dukebot;Changeset: 8c86e925
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-24 20:32:31 +0000
URL:       https://git.openjdk.org/jdk/commit/8c86e92535afa52c4d454a3b8cc59ee5f8bb6477
;;;","2022-10-24 13:58;dcubed;This fix is integrated in jdk-20+21-1518.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/test/whitebox/CPUInfoTest.java failed with ""not all features are known: expected true, was false""",JDK-8295844,5086062,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kvn,dcubed,dcubed,2022-10-24 10:00,2023-01-24 23:51,2023-10-01 09:56,2022-10-24 12:13,20,,,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,tier1,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

jdk/test/whitebox/CPUInfoTest.java

Here's a snippet from the log fie:

#section:main
----------messages:(6/371)----------
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI CPUInfoTest
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI CPUInfoTest 
started: Mon Oct 24 16:10:03 UTC 2022
Mode: othervm [/othervm specified]
finished: Mon Oct 24 16:10:03 UTC 2022
elapsed time (seconds): 0.363
----------configuration:(0/0)----------
----------System.out:(4/1155)----------
WB.getCPUFeatures(): ""(12 cores per cpu, 2 threads per core) family 25 model 1 stepping 1 microcode 0x0, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4a, sse4.1, sse4.2, popcnt, lzcnt, tsc, avx, avx2, aes, erms, clmul, bmi1, bmi2, adx, sha, fma, vzeroupper, clflush, clflushopt, hv, rdtscp, rdpid, f16c, pku""
CPUInfo.getAdditionalCPUInfo(): ""(12 cores per cpu, 2 threads per core) family 25 model 1 stepping 1 microcode 0x0""
CPUInfo.getFeatures(): [cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4a, sse4.1, sse4.2, popcnt, lzcnt, tsc, avx, avx2, aes, erms, clmul, bmi1, bmi2, adx, sha, fma, vzeroupper, clflush, clflushopt, hv, rdtscp, rdpid, f16c, pku]
Well-known CPU features: [clmul, avx512cd, avx512f, sse4a, cmov, fxsr, rdpid, lzcnt, rtm, ht, fma, clwb, rdtscp, hv, avx512_vpopcntdq, avx512_vaes, tscinvbit, vzeroupper, avx512dq, gfni, fsrm, adx, f16c, sse4.1, sse4.2, avx512_vbmi, avx512_vbmi2, sha, avx2, avx512vl, tscinv, avx512_vpclmulqdq, avx512_vnni, popcnt, bmi1, bmi2, avx512er, sse2, sse3, avx, aes, avx512pf, cx8, 3dnowpref, sse, avx512bw, ssse3, mmx, clflushopt, tsc, avx512_bitalg, erms, clflush]
----------System.err:(13/823)----------
java.lang.RuntimeException: not all features are known: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at CPUInfoTest.main(CPUInfoTest.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException: not all features are known: expected true, was false",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295846,,,,,,,,,,,,,,,,,,JDK-8295776,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,,"0|i2z0p7:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-10-24 10:28;kvn;Strange JDK-8295776 passed pre-integration testing. Arrgg, they run job `hs-tier1,hs-tier2,hs-tier3` instead of `tier1,tier2,tier3` so they did not run CPUInfoTest.java.

;;;","2022-10-24 11:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10837
Date: 2022-10-24 18:13:04 +0000;;;","2022-10-24 12:13;dukebot;Changeset: e122321c
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-10-24 19:11:56 +0000
URL:       https://git.openjdk.org/jdk/commit/e122321cb599d2e0041029b34b306ce88117aef7
;;;","2022-10-24 15:38;dlong;ILW = tier1 test failure; always; no workaround = MHH = P2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Single threaded phases (within parallel phases) report as using multiple threads in logs,JDK-8295839,5086057,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,tschatzl,tschatzl,tschatzl,2022-10-24 04:39,2022-11-14 11:37,2023-10-01 09:56,2022-10-25 11:51,20,,,,,,,20,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,,,,,,"Trace level logs for ext root scan that are (known) single threaded report as using multiple threads:

[87.104s][debug][gc,phases] GC(1412)     Ext Root Scanning (ms):        Min:  0.0, Avg:  0.0, Max:  0.0, Diff:  0.0, Sum:  0.1, Workers: 6
[...]
[87.104s][trace][gc,phases] GC(1412)       CLDG Roots (ms):               Min:  0.0, Avg:  0.0, Max:  0.0, Diff:  0.0, Sum:  0.0, Workers: 6
[87.104s][trace][gc,phases] GC(1412)       CM RefProcessor Roots (ms):    Min:  0.0, Avg:  0.0, Max:  0.0, Diff:  0.0, Sum:  0.0, Workers: 6
[...]

which is misleading.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z0o3:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-10-24 07:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10833
Date: 2022-10-24 12:19:12 +0000;;;","2022-10-25 11:51;dukebot;Changeset: 3e49f8fd
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-10-25 18:49:06 +0000
URL:       https://git.openjdk.org/jdk/commit/3e49f8fd28590116e245faffe1c467371be6f43e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdwp jck tests failing with ""FATAL ERROR in native method: JDWP SetTag, jvmtiError=JVMTI_ERROR_WRONG_PHASE(112)""",JDK-8295816,5086026,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2022-10-22 18:25,2022-11-14 11:38,2023-10-01 09:56,2022-10-25 15:18,20,,,,,,,20,core-svc,,0,tier6,,,,,,,,,,,,,,,,,,,,,"5 JDWP jck tests passed, but then failed on exit with the following:

Debugee PASSED
Listening for transport dt_socket at address: 39227
FATAL ERROR in native method: JDWP SetTag, jvmtiError=JVMTI_ERROR_WRONG_PHASE(112)
	at java.util.IdentityHashMap$KeySet.iterator(java.base@20-ea/IdentityHashMap.java:980)
	at java.util.Collections$SetFromMap.iterator(java.base@20-ea/Collections.java:5694)
	at jdk.internal.misc.TerminatingThreadLocal.threadTerminated(java.base@20-ea/TerminatingThreadLocal.java:70)
	at java.lang.Thread.exit(java.base@20-ea/Thread.java:1626)
result: Failed. unexpected exit code: exit code 134

This was seen with the following tests, but could occur in others:

vm/jdwp/ReferenceType/Status/status001/status001.html	
vm/jdwp/VirtualMachine/AllClassesWithGeneric/allclassesgeneric001/allclassesgeneric001.html	
vm/jdwp/StackFrame/ThisObject/thisobject001/thisobject001.html	
vm/jdwp/VirtualMachine/ReleaseEvents/releaseevents001/releaseevents001.html	
vm/jdwp/ThreadReference/OwnedMonitorsStackDepthInfo/ownedmonstackdepthinfo002/ownedmonstackdepthinfo002.html	
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295815,JDK-8295375,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,"0|i2z0h7:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-10-22 18:51;cjplummer;I'm pretty sure this is due to JDK-8295375, which changed the debug agent CLASS_PREPARE event handling used for class tracking. It moved it from the main debug agent JVMTIEnv to a JVMTIEnv that already existed for class tracking purposes to deal with OBJECT_FREE events.

The error seems to have been triggered by the following code in classTrack_addPreparedClass():

    error = JVMTI_FUNC_PTR(trackingEnv, SetTag)(env, klass, ptr_to_jlong(signature));
    if (error != JVMTI_ERROR_NONE) {
        jvmtiDeallocate(signature);
        EXIT_ERROR(error,""SetTag"");
    }

The main event handler does some synchronizing around VMDEATH. When the main event handler sees a VMDEATH, it will block until all other event callbacks have exited. I believe this allows the other event handlers to still safely make JVMTI calls without getting JVMTI_ERROR_WRONG_PHASE, since the VMDEATH callback has not yet returned (need to verify this). The class tracking event handler does not have this safeguard, so it can get a CLASS_PREPARE event, but before processing it a VMDEATH can be sent and fully processed by the main event handler.

I think the easiest fix is for the above code is to check for JVMTI_ERROR_WRONG_PHASE, and if it gets it then just return. It should probably also assert that gData->vmDead is true when this happens.;;;","2022-10-22 20:03;dcubed;[~cjplummer] - Please see this bug that I filed earlier today:

JDK-8295815 JDI AttachingConnector/attach/attach001 failed with ""JDWP exit error JVMTI_ERROR_WRONG_PHASE(112)""

Looks like the same problem.;;;","2022-10-23 20:46;cjplummer;As I mentioned above,  the easiest fix is for the code in classTrack_addPreparedClass() to check for JVMTI_ERROR_WRONG_PHASE, and if it gets it then just return. It should also assert that gData->vmDead is true when this happens. This is needed in 3 places where JVMTI is called.

The purist fix would be to somehow synchronize with VMDEATH, either with the same locking done by the main event handling code (for example, use BEGIN_CALLBACK and END_CALLBACK), or by having the class tracking JVMTIEnv also enable VMDEATH events. The VMDEATH callback block would disable the CLASS_PREPARE events, and also block until any currently executing CLASS_PREPARE callback has exited. I think this is overkill, and also adds locking overhead to the CLASS_PREPARE callback.;;;","2022-10-23 22:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10831
Date: 2022-10-24 05:29:26 +0000;;;","2022-10-25 15:18;dukebot;Changeset: fec61746
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-10-25 22:14:36 +0000
URL:       https://git.openjdk.org/jdk/commit/fec61746d1b9e3143fe64e9604732207b0a8c643
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"misc JDI tests failed with ""JDWP exit error JVMTI_ERROR_WRONG_PHASE(112)""",JDK-8295815,5086021,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2022-10-22 07:03,2022-11-14 11:39,2023-10-01 09:56,2022-10-25 15:19,20,,,,,,,20,core-svc,,0,intermittent,tier3,tier5,tier6,tier7,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

vmTestbase/nsk/jdi/AttachingConnector/attach/attach001/TestDescription.java

The test task's JVM args are:
-Dmain.wrapper=Virtual -XX:-VerifyContinuations

Here's a snippet from the log file:

#section:main
----------messages:(6/761)*----------
command: main nsk.jdi.AttachingConnector.attach.attach001 -verbose -arch=windows-x64 -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""-XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=c:\\sb\\prod\\1666432835\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi\\tmp -Dmain.wrapper=Virtual -XX:-VerifyContinuations""
reason: User specified action: run main/othervm nsk.jdi.AttachingConnector.attach.attach001 -verbose -arch=${os.family}-${os.simpleArch} -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""${test.vm.opts} ${test.java.opts}"" 
started: Sat Oct 22 10:02:15 UTC 2022
Mode: othervm [/othervm specified]
finished: Sat Oct 22 10:02:17 UTC 2022
elapsed time (seconds): 1.296
----------configuration:(0/0)----------
----------System.out:(50/3123)*----------
command: c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+21-1502\\windows-x64-debug.jdk\\jdk-20\\fastdebug\\bin\\java -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=c:\\sb\\prod\\1666432835\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi\\tmp -Dmain.wrapper=Virtual -XX:-VerifyContinuations -Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,address=0 nsk.jdi.AttachingConnector.attach.attach001t
debugee.stdout> Listening for transport dt_socket at address: 62881
Debuggee is listening on port 62881
Connector name=com.sun.jdi.SocketAttach
	description=Attaches by socket to other VMs
	transport=dt_socket
	argument name=timeout
		value=
	argument name=hostname
		value=localhost
	argument name=port
		value=62881
debugee VM: name=Java HotSpot(TM) 64-Bit Server VM JRE version=20-ea
	description=Java Debug Interface (Reference Implementation) version 20.0 
Java Debug Wire Protocol (Reference Implementation) version 20.0
JVM Debug Interface version 20.0
JVM version 20-ea (Java HotSpot(TM) 64-Bit Server VM, mixed mode, sharing)
Initial VMStartEvent received: VMStartEvent in thread main

resuming debugee VM

waiting for debugee VM exit
debugee.stderr> JDWP exit error JVMTI_ERROR_WRONG_PHASE(112): signature [c:\\sb\\prod\\1666393524\\workspace\\open\\src\\jdk.jdwp.agent\\share\\native\\libjdwp\\classTrack.c:82]
debugee.stdout> FATAL ERROR in native method: JDWP signature, jvmtiError=JVMTI_ERROR_WRONG_PHASE(112)
debugee.stdout> 	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(java.base@20-ea/AbstractQueuedSynchronizer.java:1847)
debugee.stdout> 	at java.lang.ref.ReferenceQueue.await(java.base@20-ea/ReferenceQueue.java:71)
debugee.stdout> 	at java.lang.ref.ReferenceQueue.remove0(java.base@20-ea/ReferenceQueue.java:143)
debugee.stdout> 	at java.lang.ref.ReferenceQueue.remove(java.base@20-ea/ReferenceQueue.java:218)
debugee.stdout> 	at jdk.internal.ref.CleanerImpl.run(java.base@20-ea/CleanerImpl.java:140)
debugee.stdout> 	at java.lang.Thread.run(java.base@20-ea/Thread.java:1591)
debugee.stdout> 	at jdk.internal.misc.InnocuousThread.run(java.base@20-ea/InnocuousThread.java:186)
# ERROR: Debugee VM has crashed: exit code=1
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Debugee VM has crashed: exit code=1
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.jdi.AttachingConnector.attach.attach001.runIt(attach001.java:127)
	at nsk.jdi.AttachingConnector.attach.attach001.run(attach001.java:69)
	at nsk.jdi.AttachingConnector.attach.attach001.main(attach001.java:65)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: Debugee VM has crashed: exit code=1
----------System.err:(0/0)----------
----------rerun:(39/6531)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295816,JDK-8295375,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2z0g3:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-10-22 21:25;cjplummer;Same as JDK-8295816. There are a few JVMTI calls in classTrack_addPreparedClass() that can result in this error if the VMDEATH completes in the middle of the callback. This failure is due to the following failing:

    error = classSignature(klass, &signature, NULL);
    if (error != JVMTI_ERROR_NONE) {
        EXIT_ERROR(error,""signature"");
    }
;;;","2022-10-25 10:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10831
Date: 2022-10-24 05:29:26 +0000;;;","2022-10-25 15:19;dukebot;Changeset: fec61746
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-10-25 22:14:36 +0000
URL:       https://git.openjdk.org/jdk/commit/fec61746d1b9e3143fe64e9604732207b0a8c643
;;;","2022-10-26 06:12;dcubed;The fix for this bug is integrated in jdk-20+21-1532.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jshell/CommandCompletionTest.java fails with ""lists don't have the same size expected [2] but found [1]""",JDK-8295814,5086020,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asotona,dcubed,dcubed,2022-10-22 06:48,2022-11-28 14:44,2023-10-01 09:56,2022-11-15 04:13,20,,,,,,,20,tools,,0,intermittent,tier1,tier4,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

jdk/jshell/CommandCompletionTest.java

Here's a snippet from the log file:

config ReplToolTesting.setUp(): success 
test CommandCompletionTest.testReload(): success 
config ReplToolTesting.setUp(): success 
test CommandCompletionTest.testReset(): success 
config ReplToolTesting.setUp(): success 
test CommandCompletionTest.testSave(): success 
config ReplToolTesting.setUp(): success 
test CommandCompletionTest.testSet(): failure 
java.lang.AssertionError: Command: /set editor |, output: [/]: lists don't have the same size expected [2] but found [1] 
at org.testng.Assert.fail(Assert.java:99) 
at org.testng.Assert.failNotEquals(Assert.java:1037) 
at org.testng.Assert.assertEqualsImpl(Assert.java:140) 
at org.testng.Assert.assertEquals(Assert.java:122) 
at org.testng.Assert.assertEquals(Assert.java:907) 
at org.testng.Assert.assertEquals(Assert.java:1089) 
at CommandCompletionTest.assertCompletion(CommandCompletionTest.java:89) 
at CommandCompletionTest.assertCompletion(CommandCompletionTest.java:83) 
at CommandCompletionTest.lambda$testSet$102(CommandCompletionTest.java:392) 
at ReplToolTesting$PromptedCommandOutputStream.write(ReplToolTesting.java:824) 
at java.base/java.io.PrintStream.implWrite(PrintStream.java:597) 
at java.base/java.io.PrintStream.write(PrintStream.java:577) 
at jdk.internal.le/jdk.internal.org.jline.terminal.impl.LineDisciplineTerminal.processOutputByte(LineDisciplineTerminal.java:253) 
at jdk.internal.le/jdk.internal.org.jline.terminal.impl.LineDisciplineTerminal$FilteringOutputStream.write(LineDisciplineTerminal.java:294) 
at java.base/sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:313) 
at java.base/sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:409) 
at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:414) 
at java.base/sun.nio.cs.StreamEncoder.lockedFlush(StreamEncoder.java:218) 
at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:205) 
at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:263) 
at java.base/java.io.PrintWriter.implFlush(PrintWriter.java:417) 
at java.base/java.io.PrintWriter.flush(PrintWriter.java:409) 
at jdk.internal.le/jdk.internal.org.jline.terminal.impl.AbstractTerminal.flush(AbstractTerminal.java:177) 
at jdk.internal.le/jdk.internal.org.jline.utils.Display.update(Display.java:340) 
at jdk.internal.le/jdk.internal.org.jline.reader.impl.LineReaderImpl.redisplay(LineReaderImpl.java:3924) 
at jdk.internal.le/jdk.internal.org.jline.reader.impl.LineReaderImpl.redisplay(LineReaderImpl.java:3784) 
at jdk.internal.le/jdk.internal.org.jline.reader.impl.LineReaderImpl.readLine(LineReaderImpl.java:640) 
at jdk.internal.le/jdk.internal.org.jline.reader.impl.LineReaderImpl.readLine(LineReaderImpl.java:468) 
at jdk.jshell/jdk.internal.jshell.tool.ConsoleIOContext.readLine(ConsoleIOContext.java:223) 
at jdk.jshell/jdk.internal.jshell.tool.JShellTool.getInput(JShellTool.java:1280) 
at jdk.jshell/jdk.internal.jshell.tool.JShellTool.run(JShellTool.java:1214) 
at jdk.jshell/jdk.internal.jshell.tool.JShellTool.start(JShellTool.java:1000) 
at CommandCompletionTest.testRawRun(CommandCompletionTest.java:73) 
at ReplToolTesting.testRaw(ReplToolTesting.java:296) 
at ReplToolTesting.test(ReplToolTesting.java:249) 
at ReplToolTesting.test(ReplToolTesting.java:233) 
at CommandCompletionTest.testSet(CommandCompletionTest.java:386) 
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104) 
at java.base/java.lang.reflect.Method.invoke(Method.java:578) 
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132) 
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599) 
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174) 
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46) 
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822) 
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147) 
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146) 
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128) 
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) 
at org.testng.TestRunner.privateRun(TestRunner.java:764) 
at org.testng.TestRunner.run(TestRunner.java:585) 
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384) 
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378) 
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337) 
at org.testng.SuiteRunner.run(SuiteRunner.java:286) 
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53) 
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96) 
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218) 
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140) 
at org.testng.TestNG.runSuites(TestNG.java:1069) 
at org.testng.TestNG.run(TestNG.java:1037) 
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93) 
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104) 
at java.base/java.lang.reflect.Method.invoke(Method.java:578) 
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312) 
at java.base/java.lang.Thread.run(Thread.java:1591) 
config ReplToolTesting.setUp(): success 
test CommandCompletionTest.testUserHome(): skip 
org.testng.SkipException: No suitable file(s) found for this test in /opt/mach5 
at CommandCompletionTest.testUserHome(CommandCompletionTest.java:363) 
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104) 
at java.base/java.lang.reflect.Method.invoke(Method.java:578) 
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132) 
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599) 
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174) 
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46) 
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822) 
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147) 
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146) 
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128) 
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) 
at org.testng.TestRunner.privateRun(TestRunner.java:764) 
at org.testng.TestRunner.run(TestRunner.java:585) 
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384) 
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378) 
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337) 
at org.testng.SuiteRunner.run(SuiteRunner.java:286) 
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53) 
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96) 
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218) 
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140) 
at org.testng.TestNG.runSuites(TestNG.java:1069) 
at org.testng.TestNG.run(TestNG.java:1037) 
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93) 
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104) 
at java.base/java.lang.reflect.Method.invoke(Method.java:578) 
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312) 
at java.base/java.lang.Thread.run(Thread.java:1591) 
config ReplToolTesting.setUp(): success 
test CommandCompletionTest.testVarsMethodsTypes(): success 

=============================================== 
jdk/jshell/CommandCompletionTest.java 
Total tests run: 16, Passes: 14, Failures: 1, Skips: 1 
=============================================== 

----------System.err:(10/528)---------- 
java.lang.Exception: failures: 1 
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:95) 
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104) 
at java.base/java.lang.reflect.Method.invoke(Method.java:578) 
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312) 
at java.base/java.lang.Thread.run(Thread.java:1591) 

JavaTest Message: Test threw exception: java.lang.Exception 
JavaTest Message: shutting down test 

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: failures: 1


This test also has a much older unresolved bug that describes
two other failure modes:

JDK-8148625 JShell tests: jdk/jshell/CommandCompletionTest.java test fails",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8148625,,,,,,,,,,,JDK-8295375,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,,,,,,"0|i2z0fv:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-10-26 03:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10870
Date: 2022-10-26 10:28:19 +0000;;;","2022-10-26 06:38;dcubed;I've bisected the Mach5 build-IDs and isolated this failure down
to jdk-20+21-1500 which only contains a single changeset:

JDK-8295375 debug agent class tracking should not piggy back on the cbClassPrepare() callback

When I originally reached jdk-20+21-1500 during my bisection,
I discounted JDK-8295375 because it is a debug agent fix
and the failure is in jdk/jshell/CommandCompletionTest.java.
After bisecting down to jdk-20+21-1495 and back again, I
thought about some more and then I remembered that jshell
does have built-in debug agent support. I remembered that
there are some tests for that feature that use JDI if memory
serves...

While 24 passing runs of ""open/test/langtools/:tier1"" with
jdk-20+21-1499 are not definitive proof, it is a very strong
indicator that jdk-20+21-1500 introduced the bug that we're
running into with jdk/jshell/CommandCompletionTest.java.;;;","2022-10-26 09:07;dcubed;> I should probably remove test cases affected by execution of another tests.

Is the interference caused by other sub-tests within this test or other tests in
the same test suite? I don't the internals of this test so I don't know if the test
is using some area that is outside the scratch directory that is setup for each
test's execution. If that directory is in some ""common"" location that is used
by all tests and/or sub-tests then interference will definitely be an issue.

The addition of the ""expected"" value in the proposed patch will definitely help
us understand any future failures of this test. When the sub-test fails, you might
also show the path to the directory that is being listed.;;;","2022-10-26 09:34;asotona;Small number of test cases depend on stability of FileSystem::getRootDirectories response.

In the proposed patch I've added ""expected"" value, so we can give it a try and know what really happens there or comment the problematic test cases out now.;;;","2022-11-15 04:13;dukebot;Changeset: a45c9af1
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2022-11-15 12:09:59 +0000
URL:       https://git.openjdk.org/jdk/commit/a45c9af1242d9ad497995f2c1228b6e85dfd79d8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/sa/TestObjectAlignment.java fails on x86_32 ,JDK-8295811,5086014,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-10-21 21:25,2023-06-19 06:53,2023-10-01 09:56,2022-10-22 21:03,17,20,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tencent-interest,,,,,,,,,,,,,,,,,,"```
STDOUT:
LingeredApp failed to start: java.io.IOException: App exited unexpectedly with 1
 LingeredApp stdout: [];
 LingeredApp stderr: [Unrecognized VM option 'ObjectAlignmentInBytes=8'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
 LingeredApp exitValue = 1
STDERR:
java.io.IOException: LingeredApp terminated with non-zero exit code 1
        at jdk.test.lib.apps.LingeredApp.stopApp(LingeredApp.java:426)
        at jdk.test.lib.apps.LingeredApp.stopApp(LingeredApp.java:484)
        at TestObjectAlignment.main(TestObjectAlignment.java:90)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
        at java.base/java.lang.Thread.run(Thread.java:1591)
```",,,,,,,,,,,JDK-8310319,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295657,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z0ej:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-10-21 21:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10829
Date: 2022-10-22 04:30:24 +0000;;;","2022-10-22 21:03;dukebot;Changeset: 7cbf6721
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-10-23 04:01:16 +0000
URL:       https://git.openjdk.org/jdk/commit/7cbf6721dcae6b0c22a57838d8dd769d87df9127
;;;","2023-06-16 07:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1458
Date: 2023-06-16 14:13:39 +0000;;;","2023-06-16 07:32;shade;Fix Request (17u)

Followup for JDK-8295657, applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TreeTableViewSkin: memory leak when changing skin,JDK-8295809,5086011,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,angorya,angorya,angorya,2022-10-21 16:40,2023-05-08 10:50,2023-10-01 09:56,2022-12-08 08:06,,,,,,,,jfx20,javafx,,0,sn_132,sn_133,,,,,,,,,,,,,,,,,,,,"as determined by SkinMemoryLeakTest (remove line 180) and a leak tester 
https://github.com/andy-goryachev-oracle/Test/blob/main/src/goryachev/apps/LeakTest.java

caused by:
- adding and not removing listeners
- adding and not removing event handlers/filters
- adding and not removing cell factory
- holding unnecessary instance in TreeTableViewSkin.treeTableViewSkin // test-only

NOTES:
1. this fix requires JDK-8294809 ListenerHelper and JDK-8295806 TableViewSkin.
2. there were more memory leaks in this skin than detected by SkinMemoryLeakTest, probably because of cell factory (?).  A manual test using LeakTest shows that there are no memory leaks after a) replacing skin, b) moving the components to a new window, and c) removing all the components from the window. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241364,,,,,,,,,,,,JDK-8307538,,,,,,,,,,,JDK-8294809,JDK-8295806,,,,,,,,"2022-10-24 14:46;angorya;Screen Shot 2022-10-24 at 12.45.18.png;https://bugs.openjdk.org/secure/attachment/101175/Screen+Shot+2022-10-24+at+12.45.18.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z0dv:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-12-05 09:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/931
Date: 2022-10-24 19:06:26 +0000;;;","2022-12-08 08:06;dukebot;Changeset: 6abbe080
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2022-12-08 16:04:11 +0000
URL:       https://git.openjdk.org/jfx/commit/6abbe0803456ad648117b8e72deeeeced7cb5231
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"9.7.4: No ""closest"" type for 'var' lambda parameter",JDK-8295807,5086008,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,dlsmith,dlsmith,2022-10-21 12:43,2022-12-12 08:33,2023-10-01 09:41,2022-12-12 08:33,,,,,,,,20,specification,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"A type annotation applied to a lambda parameter with a 'var' type has no type to annotate:

Predicate<String> p = (@TypeAnno var s) -> true;

A rule in 9.7.4 handles this for local variables, but neglects to mention lambda parameters.

Proposed change:

""If the annotation appears before a void method declaration or a ~~local~~ variable declaration that uses var (§14.4**, §15.27.1**), then there is no closest type. If the annotation's interface is deemed to apply only to the type which is closest to the annotation, a compile-time error occurs.

https://mail.openjdk.org/pipermail/compiler-dev/2022-October/020593.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z0d7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TableViewSkin: memory leak when changing skin,JDK-8295806,5086007,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,angorya,angorya,angorya,2022-10-21 12:11,2022-12-09 16:12,2023-10-01 09:56,2022-12-05 08:27,,,,,,,,jfx20,javafx,,0,sn_132,sn_133,,,,,,,,,,,,,,,,,,,,"as determined by SkinMemoryLeakTest (remove line 179) and a leak tester 
https://github.com/andy-goryachev-oracle/Test/blob/main/src/goryachev/apps/LeakTest.java

caused by:
- adding and not removing listeners
- adding and not removing event handlers/filters

NOTE:
this fix requires JDK-8294809 ListenerHelper",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241364,,,,,,,,,,,,JDK-8295809,,,,,,,,,,,JDK-8294809,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z0cz:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-28 12:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/929
Date: 2022-10-21 23:21:52 +0000;;;","2022-12-05 08:27;dukebot;Changeset: bb98d886
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2022-12-05 16:25:24 +0000
URL:       https://git.openjdk.org/jfx/commit/bb98d886b01d5d1c6117303f40d43eab9f7ac504
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(ch) Test java/nio/channels/Channels/ReadXBytes.java is very slow on Windows,JDK-8295798,5085993,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,bpb,bpb,2022-10-21 08:46,2023-01-02 16:53,2023-10-01 09:56,2022-10-25 00:28,20,,,,,,,20,core-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,,,,Execution times on the order of nine minutes have been observed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294723,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2z09v:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-10-24 05:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10834
Date: 2022-10-24 12:27:51 +0000;;;","2022-10-25 00:28;dukebot;Changeset: 706d1b75
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-10-25 07:25:07 +0000
URL:       https://git.openjdk.org/jdk/commit/706d1b7508af58f7ed669bde4820ec9f80f58607
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ScrollPaneSkin: memory leak when changing skin,JDK-8295796,5085991,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,angorya,angorya,angorya,2022-10-21 08:40,2022-12-09 16:11,2023-10-01 09:56,2022-11-29 08:25,,,,,,,,jfx20,javafx,,0,sn_129,sn_132,,,,,,,,,,,,,,,,,,,,"as determined by SkinMemoryLeakTest (remove line 174) and a leak tester 
https://github.com/andy-goryachev-oracle/Test/blob/main/src/goryachev/apps/LeakTest.java

caused by:
- adding and not removing listeners
- adding and not removing event handlers/filters

NOTE:
this fix requires JDK-8295242 scroll bar fixes, as well as JDK-8294809 ListenerHelper",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241364,,,,,,,,,,,,,,,,,,,,,,,JDK-8295242,JDK-8294809,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z09f:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-28 09:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/928
Date: 2022-10-21 19:01:54 +0000;;;","2022-11-29 08:25;dukebot;Changeset: fbad15d1
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-11-29 16:23:37 +0000
URL:       https://git.openjdk.org/jfx/commit/fbad15d1add3f8680b3aa5e8a2b7da2d812e8fd7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2 compilation hits ""assert((mode == ControlAroundStripMined && use == sfpt) || !use->is_reachable_from_root()) failed: missed a node""",JDK-8295788,5085984,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,dcubed,dcubed,2022-10-21 06:09,2023-01-25 00:58,2023-10-01 09:56,2022-11-18 05:47,11,17,19,20,,,,20,hotspot,,0,c2,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,tier6,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

applications/javafuzzer/MediumTest.java

Here's a snippet from the log file:

Summary of the JavaFuzzer run:
------------------------------
Host:     ol8-aarch64-832091
Tests:    8 x 50
Args:     -conf config.yml

Started  at: Fri Oct 21 01:24:42 UTC 2022


r1- 50: 36 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 14 Reference Java failures
r4- 50: 36 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 14 Reference Java failures
r6- 50: 34 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 16 Reference Java failures
r7- 50: 33 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 17 Reference Java failures
r3- 50: 30 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 20 Reference Java failures
r2- 50: 31 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 19 Reference Java failures
r8- 50: 29 passed, 2 crashes, 0 fails, 0 hangs, 0 incorrect tests, 20 Reference Java failures
r5- 50: 33 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 17 Reference Java failures

Finished at: Fri Oct 21 02:41:00 UTC 2022


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94858/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/bad20306-ee82-4a61-b8c5-d4fc93ef82c4/runs/34267369-fc6d-4d4a-bc89-ab6463246786/workspace/open/src/hotspot/share/opto/loopopts.cpp:2029), pid=4015835, tid=4015854
#  assert((mode == ControlAroundStripMined && use == sfpt) || !use->is_reachable_from_root()) failed: missed a node
#
# JRE version: Java(TM) SE Runtime Environment (20.0+21) (fastdebug build 20-ea+21-1477)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+21-1477, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x12c8d9c]  PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&, IdealLoopTree*, IdealLoopTree*, Node_List*&, Node_List*&, Node_List*&, Node_List&, unsigned int, PhaseIdealLoop::CloneLoopMode)+0x688
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /tmp/fuzzer.tmp.E5qwPl1JQF/core.4015835)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94858/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/bad20306-ee82-4a61-b8c5-d4fc93ef82c4/runs/34267369-fc6d-4d4a-bc89-ab6463246786/workspace/open/src/hotspot/share/opto/loopopts.cpp:2029), pid=4016103, tid=4016117
#  assert((mode == ControlAroundStripMined && use == sfpt) || !use->is_reachable_from_root()) failed: missed a node
#
# JRE version: Java(TM) SE Runtime Environment (20.0+21) (fastdebug build 20-ea+21-1477)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+21-1477, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x12c8d9c]  PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&, IdealLoopTree*, IdealLoopTree*, Node_List*&, Node_List*&, Node_List*&, Node_List&, unsigned int, PhaseIdealLoop::CloneLoopMode)+0x688
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /tmp/fuzzer.tmp.E5qwPl1JQF/core.4016103)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

[2022-10-21T02:41:00.576880951Z] Waiting for completion for process 3987624
[2022-10-21T02:41:00.577065552Z] Waiting for completion finished for process 3987624
----------System.err:(13/728)----------
java.lang.RuntimeException: assertEquals: expected 1 to equal 2
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:189)
	at applications.javafuzzer.JavaFuzzerRunner.main(JavaFuzzerRunner.java:245)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: assertEquals: expected 1 to equal 2


Here's the stack track from the first crash:

---------------  T H R E A D  ---------------

Current thread (0x0000fffd1434e500):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=4015854, stack(0x0000fffced800000,0x0000fffceda00000)]


Current CompileTask:
C2:    315   12    b  4       Test::dMeth (269 bytes)

Stack: [0x0000fffced800000,0x0000fffceda00000],  sp=0x0000fffced9f95b0,  free space=2021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12c8d9c]  PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&, IdealLoopTree*, IdealLoopTree*, Node_List*&, Node_List*&, Node_List*&, Node_List&, unsigned int, PhaseIdealLoop::CloneLoopMode)+0x688  (loopopts.cpp:2029)
V  [libjvm.so+0x12cb594]  PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&, int, PhaseIdealLoop::CloneLoopMode, Node*)+0x2e0  (loopopts.cpp:2454)
V  [libjvm.so+0x128941c]  PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&, CountedLoopNode*, CountedLoopEndNode*, Node*&, Node*, CountedLoopNode*&)+0xcc  (loopTransform.cpp:1976)
V  [libjvm.so+0x128a950]  PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&, bool)+0x300  (loopTransform.cpp:1661)
V  [libjvm.so+0x128c234]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x4e4  (loopTransform.cpp:3863)
V  [libjvm.so+0x128c474]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x114  (loopTransform.cpp:3931)
V  [libjvm.so+0x128c3ac]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x4c  (loopTransform.cpp:3915)
V  [libjvm.so+0x12b8c80]  PhaseIdealLoop::build_and_optimize()+0xc6c  (loopnode.cpp:4510)
V  [libjvm.so+0x98ee60]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x1e0  (loopnode.hpp:1082)
V  [libjvm.so+0x98bd0c]  Compile::Optimize()+0x408  (compile.cpp:2365)
V  [libjvm.so+0x98dc18]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xfe8  (compile.cpp:831)
V  [libjvm.so+0x7b3d08]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1c4  (c2compiler.cpp:113)
V  [libjvm.so+0x99a554]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa34  (compileBroker.cpp:2237)
V  [libjvm.so+0x99adbc]  CompileBroker::compiler_thread_loop()+0x3b8  (compileBroker.cpp:1916)
V  [libjvm.so+0xeb0de0]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:699)
V  [libjvm.so+0x17b3078]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x14c73d4]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:710)
C  [libpthread.so.0+0x7908]  start_thread+0x188


Here's the stack trace from the second crash:

---------------  T H R E A D  ---------------

Current thread (0x0000fffc2434dad0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=4016117, stack(0x0000fffc06fc0000,0x0000fffc071c0000)]


Current CompileTask:
C2:    206    7    b        Test::dMeth (269 bytes)

Stack: [0x0000fffc06fc0000,0x0000fffc071c0000],  sp=0x0000fffc071b95b0,  free space=2021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12c8d9c]  PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&, IdealLoopTree*, IdealLoopTree*, Node_List*&, Node_List*&, Node_List*&, Node_List&, unsigned int, PhaseIdealLoop::CloneLoopMode)+0x688  (loopopts.cpp:2029)
V  [libjvm.so+0x12cb594]  PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&, int, PhaseIdealLoop::CloneLoopMode, Node*)+0x2e0  (loopopts.cpp:2454)
V  [libjvm.so+0x128941c]  PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&, CountedLoopNode*, CountedLoopEndNode*, Node*&, Node*, CountedLoopNode*&)+0xcc  (loopTransform.cpp:1976)
V  [libjvm.so+0x128a950]  PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&, bool)+0x300  (loopTransform.cpp:1661)
V  [libjvm.so+0x128c234]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x4e4  (loopTransform.cpp:3863)
V  [libjvm.so+0x128c474]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x114  (loopTransform.cpp:3931)
V  [libjvm.so+0x128c3ac]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x4c  (loopTransform.cpp:3915)
V  [libjvm.so+0x12b8c80]  PhaseIdealLoop::build_and_optimize()+0xc6c  (loopnode.cpp:4510)
V  [libjvm.so+0x98ee60]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x1e0  (loopnode.hpp:1082)
V  [libjvm.so+0x98bd0c]  Compile::Optimize()+0x408  (compile.cpp:2365)
V  [libjvm.so+0x98dc18]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xfe8  (compile.cpp:831)
V  [libjvm.so+0x7b3d08]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1c4  (c2compiler.cpp:113)
V  [libjvm.so+0x99a554]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa34  (compileBroker.cpp:2237)
V  [libjvm.so+0x99adbc]  CompileBroker::compiler_thread_loop()+0x3b8  (compileBroker.cpp:1916)
V  [libjvm.so+0xeb0de0]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:699)
V  [libjvm.so+0x17b3078]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x14c73d4]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:710)
C  [libpthread.so.0+0x7908]  start_thread+0x188",,,,,,,,,,,JDK-8300029,JDK-8298837,JDK-8298829,JDK-8301055,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281429,JDK-8202747,,,,,,,,"2022-10-25 08:33;thartmann;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/101185/FuzzerUtils.java","2022-10-25 08:33;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/101184/Test.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z07v:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-10-21 07:21;thartmann;ILW = Assert during C2 compilation, single test but easy to reproduce, disable loop strip mining (-XX:LoopStripMiningIter=0) = HMM = P2;;;","2022-10-21 07:23;thartmann;Quickly executed build search, looks like it was introduced/first triggered in jdk-19+22.;;;","2022-10-21 07:57;thartmann;I narrowed it down to JDK-8281429 but it's likely that this only triggers and existing issue. [~roland] could you please have a look?;;;","2022-10-25 08:33;thartmann;Sorry, forgot to attach the test. To reproduce, run with:
java -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:MaxRAMPercentage=6.25 Test.java;;;","2022-11-15 03:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11162
Date: 2022-11-15 11:42:00 +0000;;;","2022-11-18 05:47;dukebot;Changeset: 761a4f48
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-11-18 13:46:01 +0000
URL:       https://git.openjdk.org/jdk/commit/761a4f4852cbb40660b6fb9eda4d740464218f75
;;;","2023-01-04 02:34;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Medium C2 change with the typical risk. Test reproduces issue. We should take it.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-01-04 02:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1031
Date: 2023-01-04 10:46:05 +0000;;;","2023-01-16 03:14;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Medium C2 change with the typical risk. Test reproduces issue. We should take it.
Clean backport.
Test passes but also without the fix.
SAP nightly testing passed.;;;","2023-01-16 03:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1658
Date: 2023-01-16 11:16:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
"API doc enhancement needed for MemorySegment.get/setUtf8String, MemoryAddress.ofLong",JDK-8295780,5085975,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pminborg,pgundarlahal,pgundarlahal,2022-10-21 03:29,2022-10-25 04:06,2023-10-01 09:56,2022-10-25 04:06,19,,,,,,,,core-libs,,0,preview,,,,,,,,,,,,,,,,,,,,,"1. MemorySegment.get/setUtf8String - Need to mention about -ve offset results in IndexOutOfBoundsException
Ex. 1: MemorySession.global().allocateUtf8String(""HelloWordl"").setUtf8String(-1, ""JavaWorld""); 
Ex.2: MemorySession.global().allocateUtf8String(""HelloWordl"").getUtf8String(-1);

2. MemoryAddress.ofLong - Caution to the programmer of VM crash due to unsafe or incorrect usage (like there is for MemoryAddress.get/setUtf8String)
Ex: MemoryAddress.ofLong(Long.MAX_VALUE).getUtf8String(0)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z05v:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-10-25 02:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/748
Date: 2022-10-25 09:26:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue with MemoryAddress.setUtf8String,JDK-8295772,5085962,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pminborg,pgundarlahal,pgundarlahal,2022-10-21 00:41,2022-12-12 08:57,2023-10-01 09:56,2022-12-05 10:01,19,20,,,,,,20,core-libs,,0,conformance,preview,tck-red-20,,,,,,,,,,,,,,,,,,,"Below line leads to IllegalStateException:
MemorySession.global().allocateUtf8String(""HelloWorld"").address().setUtf8String(0, ""JavaWorld""); ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z02z:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-10-21 02:59;rgiulietti;Reproduced on jshell 19 and jshell 20-ea with previews enabled and with native access enabled:

<path-to-jdk20-ea>/bin/jshell --enable-preview --enable-native-access=ALL-UNNAMED;;;","2022-10-21 04:09;pminborg;In Java 20, it is proposed that the method `MemorySegment.address()` returns a `long` and so, this problem would no longer exist.

MemorySession.global().allocateUtf8String(""HelloWorld"").setUtf8String(0, ""JavaWorld""); // Produces no Exception;;;","2022-10-21 11:57;pgundarlahal;This isn't working either:
                MemoryAddress.ofLong(MemorySession.global().allocateUtf8String(""HelloWordl"").address().toRawLongValue()).setUtf8String(0, ""JavaWorld"");
;;;","2022-12-05 10:01;pminborg;By the introduction of JEP 434 (https://openjdk.org/jeps/434), the MemoryAddress has been removed and consequently, this problem does not exist any more.;;;","2022-12-07 05:37;pgundarlahal;Please indicate the jdk build with the fix (resolved in build - 'abc');;;","2022-12-08 01:04;pminborg;Resolved in Build 27 (to be released);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Vector API] Update generate_iota_indices for x86_32 after JDK-8293409,JDK-8295762,5085947,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2022-10-20 20:42,2022-11-14 11:34,2023-10-01 09:56,2022-10-21 20:53,20,,,,,,,20,hotspot,,0,oraclejdk-na,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,tencent-interest,vectorapi,,,,,,,,,,,,,,,"The following vector api tests fail (computing incorrect results) after JDK-8293409.
```
TEST: jdk/incubator/vector/Long256VectorTests.java
TEST: jdk/incubator/vector/Float128VectorTests.java
TEST: jdk/incubator/vector/FloatMaxVectorTests.java
TEST: jdk/incubator/vector/Int256VectorTests.java
TEST: jdk/incubator/vector/Double256VectorTests.java
TEST: jdk/incubator/vector/Float64VectorTests.java
TEST: jdk/incubator/vector/LongMaxVectorTests.java
TEST: jdk/incubator/vector/Short128VectorTests.java
TEST: jdk/incubator/vector/Short64VectorTests.java
TEST: jdk/incubator/vector/Float256VectorTests.java
TEST: jdk/incubator/vector/Double128VectorTests.java
TEST: jdk/incubator/vector/DoubleMaxVectorTests.java
TEST: jdk/incubator/vector/Short256VectorTests.java
TEST: jdk/incubator/vector/Int128VectorTests.java
TEST: jdk/incubator/vector/ShortMaxVectorTests.java
TEST: jdk/incubator/vector/IntMaxVectorTests.java
TEST: jdk/incubator/vector/Long128VectorTests.java
TEST: jdk/incubator/vector/Int64VectorTests.java
```

To fix the bug, the generate_iota_indices also needs to be updated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293409,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,,"0|i2yzzn:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-20 21:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10807
Date: 2022-10-21 03:55:50 +0000;;;","2022-10-20 22:33;thartmann;ILW = Incorrect results (regression), with vector API tests on 32-bit, disable intrinsics = HLM = P3;;;","2022-10-21 20:53;dukebot;Changeset: adad59ee
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-10-22 03:50:41 +0000
URL:       https://git.openjdk.org/jdk/commit/adad59ee11b84958f127d04835762b4f0fd5fb21
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update SQLite to 3.39.4,JDK-8295755,5085928,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hmeda,vdyakov,vdyakov,2022-10-20 11:41,2023-03-02 16:51,2023-10-01 09:56,2022-12-09 05:02,8u351,jfx19,,,,,,jfx20,javafx,,0,3rdparty,noreg-other,sn_132,sn_133,,,,,,,,,,,,,,,,,,"We currently use SQLite version 3.37.2. It's time to update to the latest stable release version 3.39.4 released on 2022-09-29
https://www.sqlite.org/index.html
",,,,,,,,,,,JDK-8299139,JDK-8302272,JDK-8302276,,,,,,,,,,,,,,,,,JDK-8275245,,,,JDK-8280841,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yzvn:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-11-21 09:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/953
Date: 2022-11-17 06:16:34 +0000;;;","2022-12-09 05:02;dukebot;Changeset: 9f6ec88b
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-12-09 12:59:49 +0000
URL:       https://git.openjdk.org/jfx/commit/9f6ec88b222461da9486911ecefb68a936e5fc77
;;;","2023-02-11 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/130
Date: 2023-02-11 14:11:05 +0000;;;","2023-02-11 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/110
Date: 2023-02-11 14:42:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PaginationSkin: memory leak when changing skin,JDK-8295754,5085927,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,angorya,angorya,angorya,2022-10-20 11:30,2023-02-03 11:36,2023-10-01 09:56,2022-11-30 08:13,,,,,,,,jfx20,javafx,,0,sn_129,sn_132,,,,,,,,,,,,,,,,,,,,"as determined by SkinMemoryLeakTest (remove line 171) and a leak tester 
https://github.com/andy-goryachev-oracle/Test/blob/main/src/goryachev/apps/LeakTest.java

Make sure to configure the current test in LeakTest:
protected final Type WE_ARE_TESTING = Type.PAGINATION;

Found another issue: Pagination class does not survive replacing its skin (all components disappear).

caused by:
- adding and not removing listeners
- adding and not removing children Nodes
- setting control's properties in the constructor
- incorrectly setting a clip rectangle

NOTE: the fix requires both ListenerHelper JDK-8294809 and Skin.install() JDK-8290844 changes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241364,,,,,,,,,,,,JDK-8301797,JDK-8088490,,,,,,,,,,JDK-8294809,JDK-8290844,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yzvf:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-28 09:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/925
Date: 2022-10-20 20:48:07 +0000;;;","2022-11-30 08:13;dukebot;Changeset: 0a785ae0
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2022-11-30 16:10:13 +0000
URL:       https://git.openjdk.org/jfx/commit/0a785ae036f48c736b65df865a3b93f954d46fe5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) UnixPath::toRealPath does not return correct case when links not followed,JDK-8295753,5085926,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-10-20 11:12,2023-05-25 10:09,2023-10-01 09:56,2022-11-04 10:35,20,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"If one has for example

$ ls -l link ~/TheTarget 
-rw-r--r--  1 bpb  staff   0 Oct 19 10:49 /Users/bpb/TheTarget
lrwxr-xr-x  1 bpb  staff  10 Oct 19 10:48 link@ -> /Users/bpb

and one calls Path.of(""link/thetarget"").toRealPath() the result is

/Users/bpb/TheTarget

but if one calls Path.of(""link/thetarget"").toRealPath(NOFOLLOW_LINKS) the result it

/Users/bpb/dev/bugs/jdk/Path-toRealPath/link/thetarget

In the latter result the retained case of ""thetarget"" is not obtained. This appears to be because realpath(3) is used when links are followed, but if they are not followed then the code goes down the hierarchy and the case is not preserved. This example is on APFS.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8069337,,,,,,,JDK-8295543,JDK-8308678,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i2yzv7:",9223372036854775807,b23,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-10-24 16:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10843
Date: 2022-10-24 22:58:10 +0000;;;","2022-11-04 10:35;dukebot;Changeset: 5b7e7064
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-11-04 17:32:32 +0000
URL:       https://git.openjdk.org/jdk/commit/5b7e70645b311b7060da20cb7ca813df34834332
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Automate javax/swing/JFileChooser/FileSizeCheck.java,JDK-8295738,5085870,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-10-20 08:10,2023-03-05 21:15,2023-10-01 09:56,2022-10-24 10:44,20,,,,,,,20,client-libs,,0,cssn22_10_02,noreg-self,sustaining,ursqe-triaged,,,,,,,,,,,,,,,,,,"The test added for JDK-8288882, javax/swing/JFileChooser/FileSizeCheck.java, can be automated.

When JFileChooser is added to a frame, its components can be accessed. Therefore it is possible to find JTable and read the displayed values.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288882,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b20,20,,linux,,,,,,"0|i2yziz:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-10-20 13:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10802
Date: 2022-10-20 19:50:38 +0000;;;","2022-10-24 10:44;dukebot;Changeset: df81b3c6
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-10-24 17:39:57 +0000
URL:       https://git.openjdk.org/jdk/commit/df81b3c66a3b17fc5d10098ce879416affbddd40
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
macOS: Print content cut off when width > height with portrait orientation,JDK-8295737,5085857,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alexsch,alexsch,alexsch,2022-10-20 07:50,2023-08-27 22:33,2023-10-01 09:56,2023-03-05 23:50,10,19,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,macos,,,,,,,,,,,,,,,,,"Steps to reproduce:
- Run the attached CutOffImage sample on macOS.

The sample prints four rectangles:
1. size 300x100, portrait orientation
2. size 300x100, landscape orientation
3. size 100x300, portrait orientation
4. size 100x300, landscape orientation

The first image (300x100, portrait) where width is larger than height with portrait orientation and fourth (100x300, landscape) where height is large than width with landscape orientation cut off.

See attached cut-of-image.pdf where the content has been printed to pdf.  ","JDK:
openjdk version ""19"" 2022-09-20
OpenJDK Runtime Environment (build 19+37)
OpenJDK 64-Bit Server VM (build 19+37, mixed mode, sharing)

OS: macOS
",,,,,,,,,,JDK-8315077,JDK-8315078,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8181659,JDK-8201818,,,,,,,,"2022-10-20 07:58;alexsch;CutOffImage.java;https://bugs.openjdk.org/secure/attachment/101145/CutOffImage.java","2022-11-07 04:00;alexsch;FxPrintImageWithHelper.java;https://bugs.openjdk.org/secure/attachment/101461/FxPrintImageWithHelper.java","2022-11-29 02:16;alexsch;PrintArrowPaperA5.java;https://bugs.openjdk.org/secure/attachment/101839/PrintArrowPaperA5.java","2022-10-21 01:20;alexsch;after-fix-1.pdf;https://bugs.openjdk.org/secure/attachment/101162/after-fix-1.pdf","2022-10-21 01:20;alexsch;after-fix-2.pdf;https://bugs.openjdk.org/secure/attachment/101161/after-fix-2.pdf","2022-10-21 01:20;alexsch;after-fix-3.pdf;https://bugs.openjdk.org/secure/attachment/101160/after-fix-3.pdf","2022-10-21 01:20;alexsch;after-fix-4.pdf;https://bugs.openjdk.org/secure/attachment/101159/after-fix-4.pdf","2022-10-21 01:20;alexsch;after-fix-all.pdf;https://bugs.openjdk.org/secure/attachment/101158/after-fix-all.pdf","2022-10-21 01:20;alexsch;before-fix-1.pdf;https://bugs.openjdk.org/secure/attachment/101157/before-fix-1.pdf","2022-10-21 01:20;alexsch;before-fix-2.pdf;https://bugs.openjdk.org/secure/attachment/101156/before-fix-2.pdf","2022-10-21 01:20;alexsch;before-fix-3.pdf;https://bugs.openjdk.org/secure/attachment/101155/before-fix-3.pdf","2022-10-21 01:20;alexsch;before-fix-4.pdf;https://bugs.openjdk.org/secure/attachment/101154/before-fix-4.pdf","2022-10-21 01:20;alexsch;before-fix-all.pdf;https://bugs.openjdk.org/secure/attachment/101153/before-fix-all.pdf","2022-10-24 11:37;alexsch;cut-jdk-11.0.2.pdf;https://bugs.openjdk.org/secure/attachment/101173/cut-jdk-11.0.2.pdf","2022-10-24 11:37;alexsch;cut-jdk-11.0.3.pdf;https://bugs.openjdk.org/secure/attachment/101172/cut-jdk-11.0.3.pdf","2022-10-20 07:59;alexsch;cut-of-image.pdf;https://bugs.openjdk.org/secure/attachment/101146/cut-of-image.pdf","2022-10-21 00:55;alexsch;cut-off-image-fix.pdf;https://bugs.openjdk.org/secure/attachment/101152/cut-off-image-fix.pdf","2022-11-01 05:38;alexsch;image-LANDSCAPE-100x300.png;https://bugs.openjdk.org/secure/attachment/101271/image-LANDSCAPE-100x300.png","2022-11-01 05:38;alexsch;image-LANDSCAPE-300x100.png;https://bugs.openjdk.org/secure/attachment/101273/image-LANDSCAPE-300x100.png","2022-11-01 05:38;alexsch;image-PORTRAIT-100x300.png;https://bugs.openjdk.org/secure/attachment/101272/image-PORTRAIT-100x300.png","2022-11-01 05:38;alexsch;image-PORTRAIT-300x100.png;https://bugs.openjdk.org/secure/attachment/101274/image-PORTRAIT-300x100.png","2022-11-02 06:51;alexsch;image-PORTRAIT-600x200.png;https://bugs.openjdk.org/secure/attachment/101295/image-PORTRAIT-600x200.png","2022-11-07 04:02;alexsch;jfx-image-300x100-portrait-jdk17.pdf;https://bugs.openjdk.org/secure/attachment/101462/jfx-image-300x100-portrait-jdk17.pdf","2022-11-07 04:02;alexsch;jfx-image-300x100-portrait-jdk8.pdf;https://bugs.openjdk.org/secure/attachment/101463/jfx-image-300x100-portrait-jdk8.pdf","2022-11-01 06:14;alexsch;main.m;https://bugs.openjdk.org/secure/attachment/101275/main.m","2023-02-27 08:39;alexsch;print-a4-jdk-fix.pdf;https://bugs.openjdk.org/secure/attachment/102809/print-a4-jdk-fix.pdf","2023-02-27 08:39;alexsch;print-a4-jdk19.pdf;https://bugs.openjdk.org/secure/attachment/102808/print-a4-jdk19.pdf","2022-11-29 02:25;alexsch;print-arrow-paper-a5-macos-jdk-fix.pdf;https://bugs.openjdk.org/secure/attachment/101841/print-arrow-paper-a5-macos-jdk-fix.pdf","2022-11-29 02:25;alexsch;print-arrow-paper-a5-macos-jdk19.pdf;https://bugs.openjdk.org/secure/attachment/101840/print-arrow-paper-a5-macos-jdk19.pdf",,generic,,,,,,,,,os_x,,,,,,"0|i2yzg3:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-10-20 07:57;alexsch;The problem is that setting a size which width is larger than height to NSPrintInfo on macOS changes the NSPrintInfo orientation from portrait to landscape.

javaPageFormatToNSPrintInfo() method from CPrinterJob.m
https://github.com/openjdk/jdk/blob/08a7ecf47ee5811f88dfcc82fe8614c72ccf3221/src/java.desktop/macosx/native/libawt_lwawt/awt/CPrinterJob.m#L298

first sets NSPrintInfo size to (300, 100) which changes the NSPrintInfo orientation to landscape:
https://github.com/openjdk/jdk/blob/08a7ecf47ee5811f88dfcc82fe8614c72ccf3221/src/java.desktop/macosx/native/libawt_lwawt/awt/CPrinterJob.m#L318
https://github.com/openjdk/jdk/blob/08a7ecf47ee5811f88dfcc82fe8614c72ccf3221/src/java.desktop/macosx/native/libawt_lwawt/awt/CPrinterJob.m#L228

and sets the orientation to portrait after that:
https://github.com/openjdk/jdk/blob/08a7ecf47ee5811f88dfcc82fe8614c72ccf3221/src/java.desktop/macosx/native/libawt_lwawt/awt/CPrinterJob.m#L323

which triggers changing the orientation from landscape to portrait and subsequently changing the size from (300, 100) to (100, 300)

The Cocoa code which reproduces the size flip:

```
#import <Cocoa/Cocoa.h>

int main()
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSApp = [NSApplication sharedApplication];

    #ifdef __MAC_10_9 // code for SDK 10.9 or newer
    #define NS_PORTRAIT NSPaperOrientationPortrait
    #define NS_LANDSCAPE NSPaperOrientationLandscape
    #else // code for SDK 10.8 or older
    #define NS_PORTRAIT NSPortraitOrientation
    #define NS_LANDSCAPE NSLandscapeOrientation
    #endif

    printf(""NS_PORTRAIT: %d\n"", NS_PORTRAIT);
    printf(""NS_LANDSCAPE: %d\n"", NS_LANDSCAPE);

    printf(""create default print info\n"");
    NSPrintInfo* defaultPrintInfo = [[NSPrintInfo sharedPrintInfo] copy];
    NSSize size = [defaultPrintInfo paperSize];
    printf(""orientation: %d, paper size: [%f, %f]\n"", [defaultPrintInfo orientation], size.width, size.height);

    printf(""call setUpPrintOperationDefaultValues\n"");
    [defaultPrintInfo setUpPrintOperationDefaultValues];
    size = [defaultPrintInfo paperSize];
    printf(""orientation: %d, paper size: [%f, %f]\n"", [defaultPrintInfo orientation], size.width, size.height);

    double w = 300.0;
    double h = 100.0;
    printf(""set size: [%f, %f]\n"", w, h);
    [defaultPrintInfo setPaperSize:NSMakeSize(w, h)];
    size = [defaultPrintInfo paperSize];
    printf(""orientation: %d, paper size: [%f, %f]\n"", [defaultPrintInfo orientation], size.width, size.height);

    printf(""Set NS_PORTRAIT orientation\n"");
    [defaultPrintInfo setOrientation: NS_PORTRAIT];
    size = [defaultPrintInfo paperSize];
    printf(""orientation: %d, paper size: [%f, %f]\n"", [defaultPrintInfo orientation], size.width, size.height);

    [NSApp run];

    [NSApp release];
    [pool release];
    return(EXIT_SUCCESS);
}
``

On macOS Mojave 10.14.5 it prints:

```
NS_PORTRAIT: 0
NS_LANDSCAPE: 1
create default print info
orientation: 0, paper size: [612.000000, 792.000000]
call setUpPrintOperationDefaultValues
orientation: 0, paper size: [612.000000, 792.000000]
set size: [300.000000, 100.000000]
orientation: 1, paper size: [300.000000, 100.000000] // orientation flip
Set NS_PORTRAIT orientation
orientation: 0, paper size: [100.000000, 300.000000] // size flip
```;;;","2022-10-21 01:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10808
Date: 2022-10-21 08:42:12 +0000;;;","2022-10-24 11:35;alexsch;This is the regression from fixes: JDK-8181659 and JDK-8181192

CutOffImage sample with jdk 11.0.2 (without JDK-8181659 and JDK-8181192 fixes. Image is not truncated, page size is not taken into account):
https://bugs.openjdk.org/secure/attachment/101173/cut-jdk-11.0.2.pdf 

CutOffImage sample with jdk 11.0.3 (with JDK-8181659 and JDK-8181192 fixes. Image is truncated, page size is taken into account):
https://bugs.openjdk.org/secure/attachment/101172/cut-jdk-11.0.3.pdf
;;;","2022-11-01 07:07;alexsch;Attached main.m file is a Objective-C code which uses pure Cocoa API with NSPrint and NSPrintInfo classes to print an image.

The application shows the issue with printing an image which width is greater than height with portrait orientation. 

To run the code:
- Create macOS App project in Xcode
- Open main.m file in the project
- Copy the code from the attached file https://bugs.openjdk.org/secure/attachment/101275/main.m
  to the main.m file
- Select the root node in the project and go to the Signing & Capabilities tab
- Select 'Hardware->Printing' checkbox
- Choose Read Only option in 'File Access Type -> Pictures Folder'
- Build the project

The application expects that the printed image is stored in Pictures folder and the SAMPLE_PRINTER_NAME environment variable is set to the used printer name.

- Copy the attached image-LANDSCAPE-300x100.png image to Pictures folder:
https://bugs.openjdk.org/secure/attachment/101274/image-PORTRAIT-300x100.png

- Set the SAMPLE_PRINTER_NAME environment variable to the used printer name.
- Run the app

First, the image size is set to NSPrintInfo and then the Portrait orientation after that:
    [printInfo setPaperSize: imageSize];
    [printInfo setOrientation: NS_PORTRAIT];

The output is:
 print info: set image size [300.000000, 100.000000]
 print info orientation: [1] NS_LANDSCAPE, size: [300.000000, 100.000000]
 print info: set orientation NS_PORTRAIT
 print info orientation: [0] NS_PORTRAIT, size: [100.000000, 300.000000]

NSPrintInfo has paper size 100x300 after changing the landscape orientation to portrait.

Second, setting the paper size and the orientation order is manually changed in the code:
    [printInfo setOrientation: NS_PORTRAIT];
    [printInfo setPaperSize: imageSize];

The output is:
 print info: set orientation NS_PORTRAIT
 print info orientation: [0] NS_PORTRAIT, size: [612.000000, 792.000000]
 print info: set image size [300.000000, 100.000000]
 print info orientation: [1] NS_LANDSCAPE, size: [300.000000, 100.000000]

NSPrintInfo has landscape orientation after changing the paper size from the default one to 300x100.;;;","2023-03-05 23:50;dukebot;Changeset: d00a7670
Author:    Alexander Scherbatiy <alexsch@openjdk.org>
Date:      2023-03-06 07:48:37 +0000
URL:       https://git.openjdk.org/jdk/commit/d00a767047ec41e233e711dbc5fe7b8818e72f28
;;;","2023-08-22 06:56;alexsch;Fix request [11u]

The fix allows to print a page which width is greater than height with portrait orientation on macOS.
Manual test/jdk/java/awt/print and test/jdk/javax/print tests were run to check printing on macOS with and without the fix.;;;","2023-08-22 06:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2092
Date: 2023-08-22 13:53:20 +0000;;;","2023-08-25 08:14;alexsch;Fix request [17u]

The fix allows to print a page which width is greater than height with portrait orientation on macOS.
Manual test/jdk/java/awt/print and test/jdk/javax/print tests were run to check printing on macOS with and without the fix. ;;;","2023-08-25 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1700
Date: 2023-08-25 15:08:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Missing membar after buffer initialization in method handle return,JDK-8295735,5085855,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2022-10-20 07:11,2022-10-21 00:14,2023-10-01 09:56,2022-10-21 00:14,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lworld,,,,,,,,,,,,,,,,,,,,A missing membar after buffer initialization in C2's handling of scalarized returns from method handle intrinsics leads to incorrect execution and crashes with compiler/valhalla/inlinetypes/TestBufferTearing.java on aarch64.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295126,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yzfn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-20 23:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/799
Date: 2022-10-21 05:55:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] C1's linear register allocator spill map is incorrect,JDK-8295731,5085845,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2022-10-20 05:12,2022-10-20 07:12,2023-10-01 09:56,2022-10-20 07:12,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c1,lworld,,,,,,,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S107580/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/df6bdd08-a0d8-48e2-b960-d0f91a860990/runs/8d511390-71bc-45fe-a706-e97ee371832a/workspace/open/src/hotspot/cpu/aarch64/c1_LIRAssembler_aarch64.cpp:227), pid=1292991, tid=1293014
#  assert((addr.offset() & mask) == 0) failed: scaled offsets only
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-lworld4ea-2022-10-19-1330468.tobias.hartmann.valhalla)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-lworld4ea-2022-10-19-1330468.tobias.hartmann.valhalla, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x7174f8]  LIR_Assembler::stack_slot_address(int, unsigned int, Register, int)+0x1f4

Current CompileTask:
C1:    380   59 % !b  3       osr::test @ 62 (82 bytes)

Stack: [0x0000fffbe0d20000,0x0000fffbe0f20000],  sp=0x0000fffbe0f1bb70,  free space=2030k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x7174f8]  LIR_Assembler::stack_slot_address(int, unsigned int, Register, int)+0x1f4  (c1_LIRAssembler_aarch64.cpp:227)
V  [libjvm.so+0x719358]  LIR_Assembler::reg2stack(LIR_Opr, LIR_Opr, BasicType, bool)+0x4d4  (c1_LIRAssembler_aarch64.cpp:775)
V  [libjvm.so+0x7130f0]  LIR_Assembler::move_op(LIR_Opr, LIR_Opr, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool)+0x3b0  (c1_LIRAssembler.cpp:932)
V  [libjvm.so+0x71486c]  LIR_Assembler::emit_lir_list(LIR_List*)+0xdc  (c1_LIRAssembler.cpp:309)
V  [libjvm.so+0x714fa0]  LIR_Assembler::emit_code(BlockList*)+0x70  (c1_LIRAssembler.cpp:233)
V  [libjvm.so+0x6b5324]  Compilation::emit_code_body()+0x144  (c1_Compilation.cpp:351)
V  [libjvm.so+0x6b5a44]  Compilation::compile_java_method()+0x524  (c1_Compilation.cpp:413)
V  [libjvm.so+0x6b6590]  Compilation::compile_method()+0x1c0  (c1_Compilation.cpp:471)
V  [libjvm.so+0x6b6f3c]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x30c  (c1_Compilation.cpp:603)
V  [libjvm.so+0x6b87dc]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x148  (c1_Compiler.cpp:251)
V  [libjvm.so+0x9dae04]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa94  (compileBroker.cpp:2240)
V  [libjvm.so+0x9db6d4]  CompileBroker::compiler_thread_loop()+0x3f4  (compileBroker.cpp:1916)
V  [libjvm.so+0xefd620]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:700)
V  [libjvm.so+0x1842f98]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x15330e4]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:710)
C  [libpthread.so.0+0x7908]  start_thread+0x188",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yzdf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-20 05:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/797
Date: 2022-10-20 12:21:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VirtualMachineError: Out of space in CodeCache for method handle intrinsic,JDK-8295724,5085835,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2022-10-20 03:41,2023-05-01 23:05,2023-10-01 09:56,2022-12-06 12:58,17,20,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,"We were testing an application with small code cache (-XX:ReservedCodeCacheSize=20000000) and enabled segmentation (-XX:+SegmentedCodeCache). The JIT compilers have filled up both, the space for non-profiled nmethods and the one for profiled nmethods, and then, the JIT compilers got switched off as intended by the test (it is a stress test for exactly this situation).
After the sweeper removal (JDK-8290025), the VM terminates with ""java.lang.VirtualMachineError: Out of space in CodeCache for method handle intrinsic"". Unlike normal JIT compiled Java methods, method handle intrinsics are strictly required by the VM, so we should try harder to get them created. They are allocated in the non-profiled space and alternatively in the profiled space. In the situation of the test, unloading is already requested (""_unloading_threshold_gc_requested""), but not yet done.
We could wait for the GC to do the job or reserve some space. Or allocate in NonNMethod space.",,,,,,,,,,,JDK-8299515,JDK-8299427,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297267,,,,,,JDK-8298947,JDK-8296334,JDK-8305088,JDK-8296336,JDK-8290025,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yzb7:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-01 06:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10933
Date: 2022-11-01 13:13:46 +0000;;;","2022-11-23 12:37;mdoerr;There is an easy way to reproduce it:
jdk/bin/java -XX:ReservedCodeCacheSize=2496k -XX:+SegmentedCodeCache -version
This passes when using the linked PR. (Note that this reproducer can also run into other failures like NoSuchMethodException. It's not suitable for an automatic regression test.);;;","2022-12-06 12:58;dukebot;Changeset: cd2182a9
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-12-06 20:56:48 +0000
URL:       https://git.openjdk.org/jdk/commit/cd2182a9967917e733e486d918e9aeba3bd35ee8
;;;","2022-12-13 04:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/951
Date: 2022-12-13 11:58:23 +0000;;;","2022-12-13 04:06;mdoerr;Fix Request (17u):
The issue has been reported for 17u: https://issuetracker.google.com/issues/260643754
In addition, the included test fails in 17u without the fix and passes with it.
Risk: The fix is relatively new, but the behavior only changes at the point at which the code cache segments for profiled and non-profiled nmethods are full and the VM needs to create a method handle intrinsic. Without this fix, the VM terminates unexpectedly. With it, it can continue running and the VM has a chance to recover.
Doesn't apply cleanly, but it's not hard to resolve (see PR).
;;;","2022-12-16 05:55;thartmann;It looks like this caused a regression / test bug: JDK-8298947;;;","2022-12-19 08:24;mdoerr;The new test has a minor issue. Fix for JDK-8298947 is integrated into the PR and has been reviewed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unneeded disabled warnings in jdk.sctp,JDK-8295719,5085830,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-10-20 03:27,2022-11-14 11:32,2023-10-01 09:56,2022-10-20 11:50,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"In `libsctp`, there are a couple of `DISABLED_WARNINGS` that are no longer needed to build successfully. These should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yza3:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-20 03:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10789
Date: 2022-10-20 10:28:55 +0000;;;","2022-10-20 11:50;dukebot;Changeset: de1e0c57
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-20 18:48:08 +0000
URL:       https://git.openjdk.org/jdk/commit/de1e0c57a75efee0b171f7ad341ce8db24c5507f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minimize disabled warnings in accessibility native code,JDK-8295717,5085828,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-10-20 03:23,2022-11-14 11:34,2023-10-01 09:56,2022-10-24 03:02,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"After JDK-8294281, it is now possible to disable warnings for individual files instead for whole libraries. I used this opportunity to go through all disabled warnings in the accessibility native code.

Any warnings that were only triggered in a few files were removed from the library as a whole, and changed to be only disabled for those files.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yz9n:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-20 03:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10788
Date: 2022-10-20 10:24:28 +0000;;;","2022-10-24 03:02;dukebot;Changeset: 7a49c9ba
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-24 10:01:04 +0000
URL:       https://git.openjdk.org/jdk/commit/7a49c9baa1d4ad7df90e7ca626ec48ba76881822
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minimize disabled warnings in security libs,JDK-8295716,5085827,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-10-20 03:18,2022-11-14 11:36,2023-10-01 09:56,2022-10-24 13:48,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"After JDK-8294281, it is now possible to disable warnings for individual files instead for whole libraries. I used this opportunity to go through all disabled warnings in the security native libraries.

Any warnings that were only triggered in a few files were removed from the library as a whole, and changed to be only disabled for those files.

Some warnings didn't trigger in any file anymore, and could just be removed. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yz9f:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-20 03:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10787
Date: 2022-10-20 10:19:38 +0000;;;","2022-10-24 13:48;dukebot;Changeset: 1d15e5cd
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-24 20:47:24 +0000
URL:       https://git.openjdk.org/jdk/commit/1d15e5cdd698045ab9c285c92b96126ed0666ac5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minimize disabled warnings in serviceability libs,JDK-8295715,5085826,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-10-20 03:12,2022-11-14 11:32,2023-10-01 09:56,2022-10-20 11:53,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"After JDK-8294281, it is now possible to disable warnings for individual files instead for whole libraries. I used this opportunity to go through all disabled warnings in the serviceability native libraries.

Any warnings that were only triggered in a few files were removed from the library as a whole, and changed to be only disabled for those files.

Some warnings didn't trigger in any file anymore, and could just be removed. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yz97:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-20 03:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10786
Date: 2022-10-20 10:15:50 +0000;;;","2022-10-20 11:53;dukebot;Changeset: faa6b662
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-20 18:51:34 +0000
URL:       https://git.openjdk.org/jdk/commit/faa6b662577a24eeb726ba525303b68b87269869
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GHA ::set-output is deprecated and will be removed,JDK-8295714,5085825,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-10-20 02:59,2022-11-14 11:33,2023-10-01 09:56,2022-10-21 01:26,20,,,,,,,20,infrastructure,,0,build-infra,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,"We need to transition to use the new `$GITHUB_OUTPUT` method instead. 

This needs to be fixed since it is currently spamming the summary with warnings, and will stop working soon.",,,,,,,,,,,JDK-8296941,JDK-8296944,JDK-8296732,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yz8z:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-20 03:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10785
Date: 2022-10-20 10:00:14 +0000;;;","2022-10-21 01:26;dukebot;Changeset: b35922be
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-21 08:23:45 +0000
URL:       https://git.openjdk.org/jdk/commit/b35922be6de7b848a2982d6a278dbd205fc39e6a
;;;","2022-11-01 15:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/852
Date: 2022-11-01 22:43:37 +0000;;;","2022-11-01 15:51;zzambers;Fix request (17u):

Fixes GHA warnings caused by deprecated, soon to be removed, set-output command
clean backport, all tests passed (no warnings);;;","2022-11-08 05:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1494
Date: 2022-11-02 15:42:00 +0000;;;","2022-11-08 05:59;zzambers;Fix request (11u):

Fixes GHA warnings caused by deprecated, soon to be removed, set-output command
Fix for 11u is redone from scratch as changeset in jdk could not be used for 11u (there was rewrite of GHA tests, see: JDK-8287906).
all tests passed (no warnings);;;","2022-11-14 06:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/172
Date: 2022-11-14 13:56:19 +0000;;;","2022-11-14 06:03;zzambers;Fix request (8u):

Fixes GHA warnings caused by deprecated, soon to be removed, set-output command
Not a clean backport (based on 11u version)
all tests passed (no warnings);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/ParallelLoad/SuperWait/SuperWaitTest.java fails intermittently on Windows,JDK-8295713,5085824,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,shade,shade,2022-10-20 01:51,2022-11-14 11:40,2023-10-01 09:56,2022-10-26 10:30,20,,,,,,,20,hotspot,,0,classloading,,,,,,,,,,,,,,,,,,,,,"This can be seen in GHA, for example:
  https://github.com/RealFYang/jdk/actions/runs/3286513225

```
#section:main
----------messages:(8/293)----------
command: main SuperWaitTest
reason: User specified action: run main/othervm SuperWaitTest 
started: Thu Oct 20 05:32:26 UTC 2022
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Thu Oct 20 05:41:43 UTC 2022
elapsed time (seconds): 556.383
----------configuration:(0/0)----------
----------System.out:(13/351)----------
Thread 1 was started...
Thread 2 was started...
Loading Thread #2: Starting forName thread ...
Loading Thread #2: Loading C
Loading Thread #2: Loading D
D called
C called
D.<init> called
C.<init> called
Loading Thread #1: Starting forName thread ...
Loading Thread #1: Loading A
Loading Thread #1: Waiting for A
Timeout refired 480 times
----------System.err:(0/0)----------
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yz8r:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-20 01:53;shade;Hey [~coleenp], would you mind looking into these? I wonder if it has to do with low-CPU-count machines GHA has.;;;","2022-10-21 11:07;coleenp;The test has broken synchronization.  I wasn't expecting Thread2 to win anything.;;;","2022-10-21 11:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10822
Date: 2022-10-21 18:19:36 +0000;;;","2022-10-26 10:30;dukebot;Changeset: a8450b37
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-10-26 17:28:44 +0000
URL:       https://git.openjdk.org/jdk/commit/a8450b37ee6ea83c5354ba0892ac71df19e5a1cc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Linux AArch64 builds broken after JDK-8294438,JDK-8295709,5085820,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,shade,shade,shade,2022-10-20 00:39,2023-01-23 06:02,2023-10-01 09:56,2022-10-20 10:07,20,,,,,,,20,hotspot,,0,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,,"This seems to only manifest with GCC 11+:

```
* For target hotspot_variant-server_libjvm_objs_assembler_aarch64.o:
/home/shade/trunks/jdk/src/hotspot/cpu/aarch64/assembler_aarch64.cpp: In member function 'void Address::lea(MacroAssembler*, Register) const':
/home/shade/trunks/jdk/src/hotspot/cpu/aarch64/assembler_aarch64.cpp:138:5: error: this 'else' clause does not guard... [-Werror=misleading-indentation]
  138 |     else
      |     ^~~~
/home/shade/trunks/jdk/src/hotspot/cpu/aarch64/assembler_aarch64.cpp:140:7: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'else'
  140 |       break;
      |       ^~~~~
cc1plus: all warnings being treated as errors
```

JDK-8294438 missed this spot, because it was tested with GCC 10.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294438,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yz7v:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-10-20 00:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10781
Date: 2022-10-20 07:40:21 +0000;;;","2022-10-20 03:56;thartmann;ILW = Build breakage, linux aarch74 with GCC 11+, no workaround = HHH = P1;;;","2022-10-20 10:07;dukebot;Changeset: 4f994c03
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-10-20 07:58:35 +0000
URL:       https://git.openjdk.org/jdk/commit/4f994c037023603bb1d1d94ad97aeb01ac604ebd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: test/jdk/sun/security/ec/ed/EdDSATest.java failed with -XX:+UseSHA3Intrinsics,JDK-8295698,5085799,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dongbo,haosun,haosun,2022-10-19 16:19,2022-12-13 23:47,2023-10-01 09:56,2022-11-17 01:07,20,,,,,,,20,hotspot,,0,c2,c2-intrinsic,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,"On sha3 feature supported hardware, test case test/jdk/sun/security/ec/ed/EdDSATest.java failed with -XX:+UseSHA3Intrinsics

Here shows the snippet of error log.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000ffffa01ae000, pid=125589, tid=125592
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc..jdk-src)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc..jdk-src, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# v  ~StubRoutines::sha3_implCompressMB 0x0000ffffa01ae000
#
# Core dump will be written. Default location: /tmp/core.125589
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#


Attached please find the full error log file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292894,,,,,,,,,,,,,,,,,,,,,,,JDK-8252204,,,,,,,,,"2022-10-25 05:47;dongbo;0001-8295698-AArch64-test-jdk-sun-security-ec-ed-EdDSATes.patch;https://bugs.openjdk.org/secure/attachment/101183/0001-8295698-AArch64-test-jdk-sun-security-ec-ed-EdDSATes.patch","2022-10-19 16:28;haosun;hs_err_pid125589.log;https://bugs.openjdk.org/secure/attachment/101140/hs_err_pid125589.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2yz37:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-19 17:52;dlong;ILW = crash; one test with -XX:+UseSHA3Intrinsics; no workaround if -XX:+UseSHA3Intrinsics is needed = HLH = P2 ;;;","2022-10-24 05:35;thartmann;Updated ILW = Crash, single test with diagnostic and non-default flag, -XX:-UseSHA3Intrinsics = HLM = P3;;;","2022-10-24 05:38;thartmann;[~fyang] since you authored/sponsored JDK-8252204, any plans to look into this?;;;","2022-10-24 07:53;haosun;I'd like to share my observations.

`200 - 2 * digestLength` is used to compute `block_size`. See https://github.com/openjdk/jdk/blob/master/src/hotspot/cpu/aarch64/stubGenerator_aarch64.cpp#L4015

It should be correct for SHA3-224/256/384/512, since `WIDTH - c` is used as the blockSize in SHA3 constructor. See https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/sun/security/provider/SHA3.java#L74. 
Note that WIDTH is 200, and `c` is 2 times of the digestLength for SHA3-224/256/384/512. See https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/sun/security/provider/SHA3.java#L299~L332

However, for SHAKE-256, `c` is NOT always 2 times of the digestLength. See https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/sun/security/provider/SHAKE256.java#L32. 
Here, `d` can be 64 or 114 for ed448.

As a result, in the generated sha3 intrinsics, integer underflow would occur, i.e. turning `ofs` as a negative value. As a result, infinite loop is executed and memory OOB for `buf` is triggered.
Hence, in my opinion, we may also want to pass another argument to the sha3 intrinsic, i.e. blockSize.

The above is my conjecture, and I will make further testing.;;;","2022-10-24 18:49;fyang;[~thartmann] Thanks for letting us know. I will check with the original author of the work. 
[~dongbo] Could you please take a look if we missed anything before? Thanks. ;;;","2022-10-24 19:14;dongbo;Hi, I've reproduced the crash, will also look into and try to fix this. Thanks.;;;","2022-10-25 01:02;thartmann;Thanks, assigning this to [~dongbo]!;;;","2022-10-25 06:14;dongbo;Hi, I upload a fix for this issue, see the attachment.

As mentioned by [~haosun], the cause of the crash is `block_size == 200 - 2 * digest_length` is not true for SHAKE128 and SHAKE256.
The `digest_length` are variable (input by user) for SHAKE128 and SHAKE256:
                   digest_length     block_size
SHA3-224         28                   144
SHA3-256         32                   136
SHA3-384         48                   104
SHA3-512         64                    72
SHAKE128     variable              168
SHAKE256     variable              136

SHAKE256 is supported by JDK after JDK-8252204, so we missed this before.

The main idea of the fix is to pass the `block_size` and use it to distingush these SHA3 functions.
Tests `test/jdk/sun/security/ec/ed/EdDSATest.java` and `./test/jdk/sun/security/provider/MessageDigest/SHA3.java` both passed with this fix.

We don't have a hardware with SHA3 yet, so the tests are executed with QEMU. More tests are still running.
[~haosun] could you please also help to test this on real hardware?
I think we also need performance results, theJMH is available at `test/micro/org/openjdk/bench/java/security/MessageDigests.java`.
Thanks a lot.;;;","2022-10-26 03:11;haosun;Hi [~dongbo], thanks a lot for your quick fix!

I built the latest code from upstream with your patch, and tier1~3 passed on sha3 supported hardware.
I also launched the JMH performance testing and will post back the result when the test finished.

Besides, you mentioned that ""SHAKE256 is supported by JDK after JDK-8252204, so we missed this before"", but I doubt that.
I think SHAKE256 is already there when supporting JDK-8252204.
In my local test, I reverted the code back to the commit JDK-8252204, and EdDSATest.java failed as well. 
Here shows the snippet of the error log.

```
STDERR:
java.lang.RuntimeException: Actual array: 0c8b70e543f25783999a7f9c4765b2f6104c5900650a0c4ff571d666fb0986aa73ef862b92d9cee98b3010ae8ea478ddbae2a421da83243f0056a96159ac37e83c751f88b9e7b9ed33878bb8a9130343e773c9
5bff7b3e4839145b81434b74e216a2069d646db517967a9b042ceb2d6f3100, Expected array:0c8b70e543f25783999a7f9c4765b2f6104c5900650a0c4ff571d666fb0986aa73ef862b92d9cee98b3010ae8ea478ddbae2a421da83243f0009d347606b8916e
2de717623532bfcf6ecbb5ea83acd9701914afda7cdc13217402b288e33e759c89c30a2cc6d8926db756623d763bf150a00
        at EdDSATest.equals(EdDSATest.java:351)
        at EdDSATest.signAndVerify(EdDSATest.java:226)
        at EdDSATest.testSignature(EdDSATest.java:206)
        at EdDSATest.test(EdDSATest.java:123)
        at EdDSATest.main(EdDSATest.java:82)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:564)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:832)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

STDOUT:
Case Algo:EdDSA, Param:null, Intitiate with random:true
Passed.
Case Algo:Ed25519, Param:null, Intitiate with random:true
Passed.
Case Algo:Ed448, Param:null, Intitiate with random:true

TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Actual array: 0c8b70e543f25783999a7f9c4765b2f6104c5900650a0c4ff571d666fb0986aa73ef862b92d9cee98b3010ae8ea478ddbae2a42
1da83243f0056a96159ac37e83c751f88b9e7b9ed33878bb8a9130343e773c95bff7b3e4839145b81434b74e216a2069d646db517967a9b042ceb2d6f3100, Expected array:0c8b70e543f25783999a7f9c4765b2f6104c5900650a0c4ff571d666fb0986aa73
ef862b92d9cee98b3010ae8ea478ddbae2a421da83243f0009d347606b8916e2de717623532bfcf6ecbb5ea83acd9701914afda7cdc13217402b288e33e759c89c30a2cc6d8926db756623d763bf150a00
```

Perhaps, EdDSATest.java behaved slightly differently between QEMU (the test environment used in JDK-8252204) and the real hardware as I used.
Or the test failure was omitted by mistake somehow when implementing JDK-8252204.;;;","2022-10-26 20:00;haosun;Hi [~dongbo], here shows the data of JMH case MessageDigests.java on Graviton3.

Note-1: the following update is made to cover more SHA3 algorithms.

```
--- a/test/micro/org/openjdk/bench/java/security/MessageDigests.java
+++ b/test/micro/org/openjdk/bench/java/security/MessageDigests.java
@@ -53,7 +53,7 @@ public class MessageDigests {
     @Param({""64"", ""16384""})
     private int length;

-    @Param({""md5"", ""SHA-1"", ""SHA-224"", ""SHA-256"", ""SHA-384"", ""SHA-512"", ""SHA3-256"", ""SHA3-512""})
+   @Param({""md5"", ""SHA-1"", ""SHA-224"", ""SHA-256"", ""SHA-384"", ""SHA-512"", ""SHA3-224"", ""SHA3-256"", ""SHA3-384"", ""SHA3-512""})
     private String digesterName;

     @Param({""DEFAULT""})
```

Note-2: the performance testing is run with your patch.

```
# Disable sha3 intrinsics (Before)
# make test TEST=micro:MessageDigests

  Benchmark                    (digesterName)  (length)  (provider)   Mode  Cnt      Score    Error   Units
  MessageDigests.digest                   md5        64     DEFAULT  thrpt    5   3311.755 ±  0.831  ops/ms
  MessageDigests.digest                   md5     16384     DEFAULT  thrpt    5     25.948 ±  0.002  ops/ms
  MessageDigests.digest                 SHA-1        64     DEFAULT  thrpt    5  10024.275 ±  3.415  ops/ms
  MessageDigests.digest                 SHA-1     16384     DEFAULT  thrpt    5     94.973 ±  0.003  ops/ms
  MessageDigests.digest               SHA-224        64     DEFAULT  thrpt    5   9851.082 ±  5.359  ops/ms
  MessageDigests.digest               SHA-224     16384     DEFAULT  thrpt    5     98.633 ±  0.006  ops/ms
  MessageDigests.digest               SHA-256        64     DEFAULT  thrpt    5   9827.080 ±  7.214  ops/ms
  MessageDigests.digest               SHA-256     16384     DEFAULT  thrpt    5     98.623 ±  0.014  ops/ms
  MessageDigests.digest               SHA-384        64     DEFAULT  thrpt    5   2406.742 ±  1.053  ops/ms
  MessageDigests.digest               SHA-384     16384     DEFAULT  thrpt    5     20.387 ±  0.005  ops/ms
  MessageDigests.digest               SHA-512        64     DEFAULT  thrpt    5   2386.029 ±  1.177  ops/ms
  MessageDigests.digest               SHA-512     16384     DEFAULT  thrpt    5     20.387 ±  0.007  ops/ms
  MessageDigests.digest              SHA3-224        64     DEFAULT  thrpt    5   2306.868 ±  0.965  ops/ms
  MessageDigests.digest              SHA3-224     16384     DEFAULT  thrpt    5     19.983 ±  0.005  ops/ms
  MessageDigests.digest              SHA3-256        64     DEFAULT  thrpt    5   2328.226 ±  1.473  ops/ms
  MessageDigests.digest              SHA3-256     16384     DEFAULT  thrpt    5     18.987 ±  0.005  ops/ms
  MessageDigests.digest              SHA3-384        64     DEFAULT  thrpt    5   2321.988 ±  0.146  ops/ms
  MessageDigests.digest              SHA3-384     16384     DEFAULT  thrpt    5     14.960 ±  0.002  ops/ms
  MessageDigests.digest              SHA3-512        64     DEFAULT  thrpt    5   2347.715 ±  0.924  ops/ms
  MessageDigests.digest              SHA3-512     16384     DEFAULT  thrpt    5     10.691 ±  0.001  ops/ms
  MessageDigests.getAndDigest             md5        64     DEFAULT  thrpt    5   2742.342 ±  0.529  ops/ms
  MessageDigests.getAndDigest             md5     16384     DEFAULT  thrpt    5     25.855 ±  0.002  ops/ms
  MessageDigests.getAndDigest           SHA-1        64     DEFAULT  thrpt    5   6722.189 ±  2.467  ops/ms
  MessageDigests.getAndDigest           SHA-1     16384     DEFAULT  thrpt    5     94.617 ±  0.072  ops/ms
  MessageDigests.getAndDigest         SHA-224        64     DEFAULT  thrpt    5   6420.922 ± 15.793  ops/ms
  MessageDigests.getAndDigest         SHA-224     16384     DEFAULT  thrpt    5     98.231 ±  0.033  ops/ms
  MessageDigests.getAndDigest         SHA-256        64     DEFAULT  thrpt    5   6456.705 ± 19.116  ops/ms
  MessageDigests.getAndDigest         SHA-256     16384     DEFAULT  thrpt    5     98.259 ±  0.036  ops/ms
  MessageDigests.getAndDigest         SHA-384        64     DEFAULT  thrpt    5   1935.874 ± 19.817  ops/ms
  MessageDigests.getAndDigest         SHA-384     16384     DEFAULT  thrpt    5     20.274 ±  0.035  ops/ms
  MessageDigests.getAndDigest         SHA-512        64     DEFAULT  thrpt    5   1951.265 ±  6.875  ops/ms
  MessageDigests.getAndDigest         SHA-512     16384     DEFAULT  thrpt    5     20.281 ±  0.030  ops/ms
  MessageDigests.getAndDigest        SHA3-224        64     DEFAULT  thrpt    5   1954.348 ± 16.831  ops/ms
  MessageDigests.getAndDigest        SHA3-224     16384     DEFAULT  thrpt    5     19.579 ±  0.004  ops/ms
  MessageDigests.getAndDigest        SHA3-256        64     DEFAULT  thrpt    5   1991.660 ±  0.981  ops/ms
  MessageDigests.getAndDigest        SHA3-256     16384     DEFAULT  thrpt    5     18.688 ±  0.011  ops/ms
  MessageDigests.getAndDigest        SHA3-384        64     DEFAULT  thrpt    5   1992.789 ±  0.324  ops/ms
  MessageDigests.getAndDigest        SHA3-384     16384     DEFAULT  thrpt    5     14.704 ±  0.098  ops/ms
  MessageDigests.getAndDigest        SHA3-512        64     DEFAULT  thrpt    5   2005.937 ±  1.201  ops/ms
  MessageDigests.getAndDigest        SHA3-512     16384     DEFAULT  thrpt    5     10.507 ±  0.004  ops/ms

# Enable sha3 intrinsics (After)
# make test TEST=micro:MessageDigests MICRO=""VM_OPTIONS=-XX:+UnlockDiagnosticVMOptions -XX:+UseSHA3Intrinsics""

  Benchmark                    (digesterName)  (length)  (provider)   Mode  Cnt      Score    Error   Units
  MessageDigests.digest                   md5        64     DEFAULT  thrpt    5   3312.531 ±  0.923  ops/ms
  MessageDigests.digest                   md5     16384     DEFAULT  thrpt    5     25.948 ±  0.003  ops/ms
  MessageDigests.digest                 SHA-1        64     DEFAULT  thrpt    5  10120.345 ±  2.913  ops/ms
  MessageDigests.digest                 SHA-1     16384     DEFAULT  thrpt    5     94.971 ±  0.011  ops/ms
  MessageDigests.digest               SHA-224        64     DEFAULT  thrpt    5   9850.342 ±  5.056  ops/ms
  MessageDigests.digest               SHA-224     16384     DEFAULT  thrpt    5     98.630 ±  0.005  ops/ms
  MessageDigests.digest               SHA-256        64     DEFAULT  thrpt    5   9932.454 ±  8.612  ops/ms
  MessageDigests.digest               SHA-256     16384     DEFAULT  thrpt    5     98.620 ±  0.007  ops/ms
  MessageDigests.digest               SHA-384        64     DEFAULT  thrpt    5   2404.487 ±  1.394  ops/ms
  MessageDigests.digest               SHA-384     16384     DEFAULT  thrpt    5     20.375 ±  0.004  ops/ms
  MessageDigests.digest               SHA-512        64     DEFAULT  thrpt    5   2348.372 ±  2.656  ops/ms
  MessageDigests.digest               SHA-512     16384     DEFAULT  thrpt    5     20.382 ±  0.004  ops/ms
  MessageDigests.digest              SHA3-224        64     DEFAULT  thrpt    5   1572.587 ± 41.909  ops/ms
  MessageDigests.digest              SHA3-224     16384     DEFAULT  thrpt    5     14.798 ±  0.002  ops/ms
  MessageDigests.digest              SHA3-256        64     DEFAULT  thrpt    5   1568.188 ± 44.675  ops/ms
  MessageDigests.digest              SHA3-256     16384     DEFAULT  thrpt    5     13.943 ±  0.007  ops/ms
  MessageDigests.digest              SHA3-384        64     DEFAULT  thrpt    5   1567.505 ±  0.812  ops/ms
  MessageDigests.digest              SHA3-384     16384     DEFAULT  thrpt    5     10.680 ±  0.001  ops/ms
  MessageDigests.digest              SHA3-512        64     DEFAULT  thrpt    5   1574.162 ±  1.321  ops/ms
  MessageDigests.digest              SHA3-512     16384     DEFAULT  thrpt    5      7.402 ±  0.001  ops/ms
  MessageDigests.getAndDigest             md5        64     DEFAULT  thrpt    5   2728.874 ±  0.406  ops/ms
  MessageDigests.getAndDigest             md5     16384     DEFAULT  thrpt    5     25.851 ±  0.003  ops/ms
  MessageDigests.getAndDigest           SHA-1        64     DEFAULT  thrpt    5   6698.834 ±  2.710  ops/ms
  MessageDigests.getAndDigest           SHA-1     16384     DEFAULT  thrpt    5     94.612 ±  0.072  ops/ms
  MessageDigests.getAndDigest         SHA-224        64     DEFAULT  thrpt    5   6347.114 ± 26.600  ops/ms
  MessageDigests.getAndDigest         SHA-224     16384     DEFAULT  thrpt    5     98.221 ±  0.048  ops/ms
  MessageDigests.getAndDigest         SHA-256        64     DEFAULT  thrpt    5   6389.373 ± 29.867  ops/ms
  MessageDigests.getAndDigest         SHA-256     16384     DEFAULT  thrpt    5     98.255 ±  0.055  ops/ms
  MessageDigests.getAndDigest         SHA-384        64     DEFAULT  thrpt    5   1946.505 ± 13.586  ops/ms
  MessageDigests.getAndDigest         SHA-384     16384     DEFAULT  thrpt    5     20.270 ±  0.036  ops/ms
  MessageDigests.getAndDigest         SHA-512        64     DEFAULT  thrpt    5   1948.869 ± 10.119  ops/ms
  MessageDigests.getAndDigest         SHA-512     16384     DEFAULT  thrpt    5     20.276 ±  0.034  ops/ms
  MessageDigests.getAndDigest        SHA3-224        64     DEFAULT  thrpt    5   1403.128 ± 11.181  ops/ms
  MessageDigests.getAndDigest        SHA3-224     16384     DEFAULT  thrpt    5     14.772 ±  0.067  ops/ms
  MessageDigests.getAndDigest        SHA3-256        64     DEFAULT  thrpt    5   1415.765 ±  0.259  ops/ms
  MessageDigests.getAndDigest        SHA3-256     16384     DEFAULT  thrpt    5     13.912 ±  0.086  ops/ms
  MessageDigests.getAndDigest        SHA3-384        64     DEFAULT  thrpt    5   1414.935 ±  0.184  ops/ms
  MessageDigests.getAndDigest        SHA3-384     16384     DEFAULT  thrpt    5     10.643 ±  0.011  ops/ms
  MessageDigests.getAndDigest        SHA3-512        64     DEFAULT  thrpt    5   1426.190 ±  0.346  ops/ms
  MessageDigests.getAndDigest        SHA3-512     16384     DEFAULT  thrpt    5      7.386 ±  0.001  ops/ms
```

Unfortunately, from the data we can see that performance regression occurred when using sha3 intrinsics.
Do you have any clue about this?
;;;","2022-10-26 23:47;dongbo;[~haosun] Thanks for the testing.

You're right, SHAKE256 has been supported in since JDK-8166597, which is ealier than JDK-8252204.
I made the mistake by looking at the wrong commit number.

```
STDERR:
java.lang.RuntimeException: Actual array: 0c8b70e543f25783999a7f9c4765b2f6104c5900650a0c4ff571d666fb0986aa73ef862b92d9cee98b3010ae8ea478ddbae2a421da83243f0056a96159ac37e83c751f88b9e7b9ed33878bb8a9130343e773c9
5bff7b3e4839145b81434b74e216a2069d646db517967a9b042ceb2d6f3100, Expected array:0c8b70e543f25783999a7f9c4765b2f6104c5900650a0c4ff571d666fb0986aa73ef862b92d9cee98b3010ae8ea478ddbae2a421da83243f0009d347606b8916e
2de717623532bfcf6ecbb5ea83acd9701914afda7cdc13217402b288e33e759c89c30a2cc6d8926db756623d763bf150a00
        at EdDSATest.equals(EdDSATest.java:351)
        at EdDSATest.signAndVerify(EdDSATest.java:226)
...
```
For the array mismatch error, I think it is another issue will caused by the old `digest_length` logic.
I ran the test serveral times, both segment fault crash and the mismatch error can be observed.

The implentaion in linux kernel was referenced for SHA3 intrinsics: https://github.com/torvalds/linux/blob/b229b6ca5abbd63ff40c1396095b1b36b18139c3/arch/arm64/crypto/sha3-ce-core.S#L43.
We witnessed ~30% improvements on our pre-silicon simulation platform with the code in the latest JDK mainstream.
The cpu core used by Graviton3 is Neoverse V1. All its crypto SHA3 ops, e.g. `eor3 v25.16B, v12.16B, v7.16B, v2.16B`, take 2 cpu cycles and only have one execution pipe.
The instructions manipulate general purpose registers, like `eor x1, x2, x3`, take only 1 cycle and have 4 execution pipes.
Perhaps that's why Gravitio3 has the performance regression.

Besides that, with the patch I uploaded in this issue, the SHA3 instrinsics will execute 1 or 2 more branch instructions than the mainstream code.
Would you mind to run the performance test without the patch? So that we can narrow down the scope of the performance issue.
Thanks.;;;","2022-10-27 01:30;haosun;[~dongbo] Thanks for your prompt rely.

The following shows the JMH results without the patch, i.e. using the latest JDK mainstream code base.
I'm afraid we still got similar performance regression.
Hope the data will be useful to you.
Thanks~

```
# Disable sha3 intrinsics (Before)
# run_numactl make test TEST=micro:MessageDigests 

Benchmark                    (digesterName)  (length)  (provider)   Mode  Cnt     Score   Error   Units
MessageDigests.digest              SHA3-224        64     DEFAULT  thrpt    2  2192.973          ops/ms
MessageDigests.digest              SHA3-224     16384     DEFAULT  thrpt    2    19.920          ops/ms
MessageDigests.digest              SHA3-256        64     DEFAULT  thrpt    2  2239.828          ops/ms
MessageDigests.digest              SHA3-256     16384     DEFAULT  thrpt    2    18.896          ops/ms
MessageDigests.digest              SHA3-384        64     DEFAULT  thrpt    2  2207.647          ops/ms
MessageDigests.digest              SHA3-384     16384     DEFAULT  thrpt    2    14.873          ops/ms
MessageDigests.digest              SHA3-512        64     DEFAULT  thrpt    2  2239.472          ops/ms
MessageDigests.digest              SHA3-512     16384     DEFAULT  thrpt    2    10.633          ops/ms
MessageDigests.getAndDigest        SHA3-224        64     DEFAULT  thrpt    2  1901.341          ops/ms
MessageDigests.getAndDigest        SHA3-224     16384     DEFAULT  thrpt    2    19.814          ops/ms
MessageDigests.getAndDigest        SHA3-256        64     DEFAULT  thrpt    2  1920.579          ops/ms
MessageDigests.getAndDigest        SHA3-256     16384     DEFAULT  thrpt    2    18.793          ops/ms
MessageDigests.getAndDigest        SHA3-384        64     DEFAULT  thrpt    2  1942.584          ops/ms
MessageDigests.getAndDigest        SHA3-384     16384     DEFAULT  thrpt    2    14.870          ops/ms
MessageDigests.getAndDigest        SHA3-512        64     DEFAULT  thrpt    2  1951.758          ops/ms
MessageDigests.getAndDigest        SHA3-512     16384     DEFAULT  thrpt    2    10.649          ops/ms

# Enable sha3 intrinsics (After)
# run_numactl make test TEST=micro:MessageDigests MICRO=""VM_OPTIONS=-XX:+UnlockDiagnosticVMOptions -XX:+UseSHA3Intrinsics""

Benchmark                    (digesterName)  (length)  (provider)   Mode  Cnt     Score   Error   Units
MessageDigests.digest              SHA3-224        64     DEFAULT  thrpt    2  1524.555          ops/ms
MessageDigests.digest              SHA3-224     16384     DEFAULT  thrpt    2    14.789          ops/ms
MessageDigests.digest              SHA3-256        64     DEFAULT  thrpt    2  1534.675          ops/ms
MessageDigests.digest              SHA3-256     16384     DEFAULT  thrpt    2    13.935          ops/ms
MessageDigests.digest              SHA3-384        64     DEFAULT  thrpt    2  1518.855          ops/ms
MessageDigests.digest              SHA3-384     16384     DEFAULT  thrpt    2    10.674          ops/ms
MessageDigests.digest              SHA3-512        64     DEFAULT  thrpt    2  1515.757          ops/ms
MessageDigests.digest              SHA3-512     16384     DEFAULT  thrpt    2     7.399          ops/ms
MessageDigests.getAndDigest        SHA3-224        64     DEFAULT  thrpt    2  1398.380          ops/ms
MessageDigests.getAndDigest        SHA3-224     16384     DEFAULT  thrpt    2    14.716          ops/ms
MessageDigests.getAndDigest        SHA3-256        64     DEFAULT  thrpt    2  1415.706          ops/ms
MessageDigests.getAndDigest        SHA3-256     16384     DEFAULT  thrpt    2    13.869          ops/ms
MessageDigests.getAndDigest        SHA3-384        64     DEFAULT  thrpt    2  1416.226          ops/ms
MessageDigests.getAndDigest        SHA3-384     16384     DEFAULT  thrpt    2    10.638          ops/ms
MessageDigests.getAndDigest        SHA3-512        64     DEFAULT  thrpt    2  1425.434          ops/ms
MessageDigests.getAndDigest        SHA3-512     16384     DEFAULT  thrpt    2     7.382          ops/ms
```;;;","2022-10-27 04:52;dongbo;[~haosun] Thanks for the testing.

So now we can say that the modifications in this patch does not leading to the performance regression.

I'm not quite surprised by the regression on Graviton3.
As I mentioned in last comment, all crypto SHA3 ops in Neoverse V1 take 2 cpu cycles and only have one execution pipe.

I believe the critical part of the SHA3 instrinsics is `keccak()` loop, i.e. `rounds24_loop`.
It is almost the same as code sequence shown in ARM architecture reference manual, section `K10.2.2 Use of the SHA3 instructions`.
And the code snippet seems quite straight, I'm afraid there is little we can do from software side.

Because we do not have a real hardware yet, I'll re-check the performance benifits via simulation platform.
If performance still goes fine, then a PR for fix this crash issue. Thanks.;;;","2022-10-31 18:38;dongbo;Perfomance impovements on our pre-silicon simulated platform stays all the same.
The latency and thoughput of crypto SHA3 ops are designed to be 1 cpu cycles and 2 pipes respectively.

We also tested SHA3 instrinsics on M1, ~50% performance improvements observed. The JMH results are shown below.
The performance with the patch attached demonstrates negligible difference with the main stream code.

[Default, -XX:-UseSHA3Intrinsics]
Benchmark	(digesterName)	(length)	(provider)	Mode	Cnt	Score	Error	Units	
MessageDigests.digest	SHA3-224	64	DEFAULT	thrpt	15	3559.274	±	7.416	ops/ms
MessageDigests.digest	SHA3-224	16384	DEFAULT	thrpt	15	30.594	±	0.132	ops/ms
MessageDigests.digest	SHA3-256	64	DEFAULT	thrpt	15	3557.043	±	5.414	ops/ms
MessageDigests.digest	SHA3-256	16384	DEFAULT	thrpt	15	29.022	±	0.193	ops/ms
MessageDigests.digest	SHA3-384	64	DEFAULT	thrpt	15	3591.42	±	5.311	ops/ms
MessageDigests.digest	SHA3-384	16384	DEFAULT	thrpt	15	22.918	±	0.186	ops/ms
MessageDigests.digest	SHA3-512	64	DEFAULT	thrpt	15	3613.872	±	6.279	ops/ms
MessageDigests.digest	SHA3-512	16384	DEFAULT	thrpt	15	16.395	±	0.17	ops/ms
MessageDigests.getAndDigest	SHA3-224	64	DEFAULT	thrpt	15	3211.923	±	5.847	ops/ms
MessageDigests.getAndDigest	SHA3-224	16384	DEFAULT	thrpt	15	30.066	±	0.158	ops/ms
MessageDigests.getAndDigest	SHA3-256	64	DEFAULT	thrpt	15	3128.264	±	93.023	ops/ms
MessageDigests.getAndDigest	SHA3-256	16384	DEFAULT	thrpt	15	28.475	±	0.141	ops/ms
MessageDigests.getAndDigest	SHA3-384	64	DEFAULT	thrpt	15	3202.693	±	31.153	ops/ms
MessageDigests.getAndDigest	SHA3-384	16384	DEFAULT	thrpt	15	22.454	±	0.158	ops/ms
MessageDigests.getAndDigest	SHA3-512	64	DEFAULT	thrpt	15	3287.311	±	3.882	ops/ms
MessageDigests.getAndDigest	SHA3-512	16384	DEFAULT	thrpt	15	16.385	±	0.148	ops/ms

[-XX:+UnlockDiagnosticVMOptions +UseSHA3Intrinsics]
Benchmark	(digesterName)	(length)	(provider)	Mode	Cnt	Score	Error	Units	
MessageDigests.digest	SHA3-224	64	DEFAULT	thrpt	15	5497.51	±	6.228	ops/ms
MessageDigests.digest	SHA3-224	16384	DEFAULT	thrpt	15	55.065	±	0.03	ops/ms
MessageDigests.digest	SHA3-256	64	DEFAULT	thrpt	15	5501.651	±	20.973	ops/ms
MessageDigests.digest	SHA3-256	16384	DEFAULT	thrpt	15	51.88	±	0.024	ops/ms
MessageDigests.digest	SHA3-384	64	DEFAULT	thrpt	15	5486.111	±	7	ops/ms
MessageDigests.digest	SHA3-384	16384	DEFAULT	thrpt	15	39.779	±	0.022	ops/ms
MessageDigests.digest	SHA3-512	64	DEFAULT	thrpt	15	5444.476	±	44.857	ops/ms
MessageDigests.digest	SHA3-512	16384	DEFAULT	thrpt	15	27.621	±	0.026	ops/ms
MessageDigests.getAndDigest	SHA3-224	64	DEFAULT	thrpt	15	4680.77	±	6.453	ops/ms
MessageDigests.getAndDigest	SHA3-224	16384	DEFAULT	thrpt	15	54.693	±	0.05	ops/ms
MessageDigests.getAndDigest	SHA3-256	64	DEFAULT	thrpt	15	4680.802	±	6.011	ops/ms
MessageDigests.getAndDigest	SHA3-256	16384	DEFAULT	thrpt	15	51.52	±	0.042	ops/ms
MessageDigests.getAndDigest	SHA3-384	64	DEFAULT	thrpt	15	4635.309	±	18.437	ops/ms
MessageDigests.getAndDigest	SHA3-384	16384	DEFAULT	thrpt	15	39.547	±	0.036	ops/ms
MessageDigests.getAndDigest	SHA3-512	64	DEFAULT	thrpt	15	4727.525	±	9.322	ops/ms
MessageDigests.getAndDigest	SHA3-512	16384	DEFAULT	thrpt	15	27.477	±	0.014	ops/ms

IMHO, the performance benifit of SHA3 intrinsics depends on the micro architecture, it should be switched on/off based on the running platform.

For those who are interested in running the JMH on M1/MacOS, modification below is needed to enable SHA3Intriniscs by default.
Other features, i.e. UseSHA, can not be automatically detected neither, seems current hardware feature detection logic does not work on MacOS.

--- a/src/hotspot/cpu/aarch64/vm_version_aarch64.cpp
+++ b/src/hotspot/cpu/aarch64/vm_version_aarch64.cpp
@@ -334,15 +334,15 @@ void VM_Version::initialize() {
     FLAG_SET_DEFAULT(UseSHA256Intrinsics, false);
   }

-  if (UseSHA && VM_Version::supports_sha3()) {
+ // if (UseSHA && VM_Version::supports_sha3()) {
     // Do not auto-enable UseSHA3Intrinsics until it has been fully tested on hardware
-    // if (FLAG_IS_DEFAULT(UseSHA3Intrinsics)) {
-      // FLAG_SET_DEFAULT(UseSHA3Intrinsics, true);
-    // }
-  } else if (UseSHA3Intrinsics) {
-    warning(""Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU."");
-    FLAG_SET_DEFAULT(UseSHA3Intrinsics, false);
-  }
+    if (FLAG_IS_DEFAULT(UseSHA3Intrinsics)) {
+      FLAG_SET_DEFAULT(UseSHA3Intrinsics, true);
+    }
+  //} else if (UseSHA3Intrinsics) {
+  //  warning(""Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU."");
+  //  FLAG_SET_DEFAULT(UseSHA3Intrinsics, false);
+  //}

;;;","2022-11-01 20:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10939
Date: 2022-11-02 03:06:21 +0000;;;","2022-11-01 20:15;dongbo;[~haosun] Hi, I have raised a PR, could you please help to review? Thanks.;;;","2022-11-01 23:24;haosun;[~dongbo] Sure. Let me take a look.;;;","2022-11-17 01:07;dukebot;Changeset: 2f728d0c
Author:    Dong Bo <dongbo@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-11-17 09:05:43 +0000
URL:       https://git.openjdk.org/jdk/commit/2f728d0cbb366b98158ca8b2acf4b6f58df2fd52
;;;",,,,,,,,,,,,,,,,,
Update Libpng to 1.6.38,JDK-8295685,5085779,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,honkar,vdyakov,vdyakov,2022-10-19 13:22,2023-09-19 07:48,2023-10-01 09:56,2022-11-03 11:33,11,17,20,8,,,,20,client-libs,2019-05-31 00:00,0,11-bp,17-bp,3rdparty,8-bp,CPU23_04-critical-approved,CPU23_04-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,sn_130,,,,,,,,,"Need to upgrade libpng from 1.6.37 to 1.6.38
",,,,,,,,,,,JDK-8296352,JDK-8296351,JDK-8301331,JDK-8296353,JDK-8301188,JDK-8316530,JDK-8301431,JDK-8301595,JDK-8301051,JDK-8301487,JDK-8301615,,,,,,,,,JDK-8215082,,,JDK-8305815,JDK-8217676,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yyyr:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,Verified,,"2022-11-02 10:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10953
Date: 2022-11-02 16:39:22 +0000;;;","2022-11-03 11:33;dukebot;Changeset: b685fc2d
Author:    Harshitha Onkar <honkar@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-11-03 18:28:54 +0000
URL:       https://git.openjdk.org/jdk/commit/b685fc2de4d2847de2d1efaab2890646257ea6d3
;;;","2023-01-23 07:09;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
One of the required updates of external libs.
Clean backport.
SAP nightly testing passed.;;;","2023-01-23 07:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1097
Date: 2023-01-23 14:58:48 +0000;;;","2023-01-25 02:12;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
One of the required updates of external libs.
Clean backport. SAP nightly testing passed.;;;","2023-01-25 02:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1690
Date: 2023-01-25 10:16:25 +0000;;;","2023-09-14 13:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/372
Date: 2023-09-14 20:27:03 +0000;;;","2023-09-14 14:20;mbalao;8u

This comment is to notify that I'm working on a proposal to have this fix in 8u. This proposal depends on 8209115, which has a PR waiting for review at the moment.

Note: the intention is to propose the following series of 8u backports: JDK-8209115, JDK-8295685 and JDK-8305815.;;;","2023-09-18 19:18;mbalao;8u Fix Request

I'd like to request this fix for 8u so we have the latest and more stable version of libpng in OpenJDK (in-tree). A PR has been review-approved here: https://github.com/openjdk/jdk8u-dev/pull/372

Our ultimate goal at this time is to propose an 8u backport of libpng 1.6.39 (JDK-8305815), and this backport is a dependency.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Remove duplication in java/util/Formatter/Basic*.java ,JDK-8295670,5085730,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2022-10-19 09:31,2022-11-14 19:15,2023-10-01 09:56,2022-11-02 10:33,,,,,,,,20,core-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,"Duplication of methods between BasicXXX test classes, due to auto generation by genBasic.sh

Reorganize parts of Basic-X.java.template into Basic.java 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295239,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2yynv:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-10-28 14:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10910
Date: 2022-10-28 21:51:03 +0000;;;","2022-11-02 10:33;dukebot;Changeset: f84b0ad0
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Brent Christian <bchristi@openjdk.org>
Date:      2022-11-02 17:30:02 +0000
URL:       https://git.openjdk.org/jdk/commit/f84b0ad07c73c305d21c71ec6b8195dc1ee31a3e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
validate-source failure after JDK-8290011,JDK-8295668,5085727,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,dcubed,dcubed,dcubed,2022-10-19 09:01,2022-11-14 11:30,2023-10-01 09:56,2022-10-20 10:05,20,,,,,,,20,hotspot,,0,igv,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,tier1,,,,,,,,,,,,,,,"[2022-10-19T15:56:08,044Z] BAD COPYRIGHT: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e8c8fb57-5f83-4908-abf0-bdcc6ee4dfae/runs/ecb0e9ba-e803-4d2e-9b74-576d8b01d184/workspace/open/src/utils/IdealGraphVisualizer/ControlFlow/src/main/java/com/sun/hotspot/igv/controlflow/BlockConnectionWidget.java
[2022-10-19T15:56:08,044Z] BAD COPYRIGHT: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e8c8fb57-5f83-4908-abf0-bdcc6ee4dfae/runs/ecb0e9ba-e803-4d2e-9b74-576d8b01d184/workspace/open/src/utils/IdealGraphVisualizer/ControlFlow/src/main/java/com/sun/hotspot/igv/controlflow/BlockWidget.java
[2022-10-19T15:56:08,044Z] BAD COPYRIGHT: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e8c8fb57-5f83-4908-abf0-bdcc6ee4dfae/runs/ecb0e9ba-e803-4d2e-9b74-576d8b01d184/workspace/open/src/utils/IdealGraphVisualizer/ControlFlow/src/main/java/com/sun/hotspot/igv/controlflow/ControlFlowAction.java
[2022-10-19T15:56:08,044Z] BAD COPYRIGHT: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e8c8fb57-5f83-4908-abf0-bdcc6ee4dfae/runs/ecb0e9ba-e803-4d2e-9b74-576d8b01d184/workspace/open/src/utils/IdealGraphVisualizer/ControlFlow/src/main/java/com/sun/hotspot/igv/controlflow/ControlFlowScene.java
[2022-10-19T15:56:08,044Z] BAD COPYRIGHT: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e8c8fb57-5f83-4908-abf0-bdcc6ee4dfae/runs/ecb0e9ba-e803-4d2e-9b74-576d8b01d184/workspace/open/src/utils/IdealGraphVisualizer/ControlFlow/src/main/java/com/sun/hotspot/igv/controlflow/ControlFlowTopComponent.java
[2022-10-19T15:56:08,044Z] BAD COPYRIGHT: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e8c8fb57-5f83-4908-abf0-bdcc6ee4dfae/runs/ecb0e9ba-e803-4d2e-9b74-576d8b01d184/workspace/open/src/utils/IdealGraphVisualizer/ControlFlow/src/main/java/com/sun/hotspot/igv/controlflow/DoubleClickSelectAction.java
[2022-10-19T15:56:08,044Z] BAD COPYRIGHT: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e8c8fb57-5f83-4908-abf0-bdcc6ee4dfae/runs/ecb0e9ba-e803-4d2e-9b74-576d8b01d184/workspace/open/src/utils/IdealGraphVisualizer/ControlFlow/src/main/java/com/sun/hotspot/igv/controlflow/HierarchicalGraphLayout.java
[2022-10-19T15:56:08,044Z] BAD COPYRIGHT: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e8c8fb57-5f83-4908-abf0-bdcc6ee4dfae/runs/ecb0e9ba-e803-4d2e-9b74-576d8b01d184/workspace/open/src/utils/IdealGraphVisualizer/FilterWindow/src/main/java/com/sun/hotspot/igv/filterwindow/actions/FilterAction.java
[2022-10-19T15:56:08,044Z] BAD COPYRIGHT: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e8c8fb57-5f83-4908-abf0-bdcc6ee4dfae/runs/ecb0e9ba-e803-4d2e-9b74-576d8b01d184/workspace/open/src/utils/IdealGraphVisualizer/ServerCompiler/src/main/java/com/sun/hotspot/igv/servercompiler/ServerCompilerScheduler.java
[2022-10-19T15:56:08,044Z] 9 header format error(s).
[2022-10-19T15:56:08,049Z] HandleGplSource.gmk:146: recipe for target '/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94880/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e8c8fb57-5f83-4908-abf0-bdcc6ee4dfae/runs/ecb0e9ba-e803-4d2e-9b74-576d8b01d184/workspace/build/validate-source/support/header_validated/_src_utils_validated' failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290011,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yyn7:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-19 09:29;chagedorn;ILW = Source validation failed, always, no workaround = HHH = P1;;;","2022-10-19 09:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10772
Date: 2022-10-19 16:20:38 +0000;;;","2022-10-20 10:05;dukebot;Changeset: 5eaf5686
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-10-19 16:32:18 +0000
URL:       https://git.openjdk.org/jdk/commit/5eaf5686656a10ee27977de23ed5290a723b96a8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Linux x86 build fails after 8292591,JDK-8295666,5085722,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bulasevich,bulasevich,bulasevich,2022-10-19 07:48,2022-11-14 11:33,2023-10-01 09:56,2022-10-21 02:03,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"src/hotspot/os/linux/systemMemoryBarrier_linux.cpp:65:18: error: 'SYS_membarrier' was not declared in this scope
   return syscall(SYS_membarrier, cmd, flags, cpu_id); // cpu_id only on >= 5.10
                  ^~~~~~~~~~~~~~

We need to add a SYS_membarrier definition in systemMemoryBarrier_linux.cpp for x86 as well:

#ifndef SYS_membarrier
  #if defined(AMD64)
  #define SYS_membarrier 324
  #elif defined(PPC64)
  #define SYS_membarrier 365
  #elif defined(AARCH64)
  #define SYS_membarrier 283
  #elif defined(ALPHA)
  #define SYS_membarrier 517
  #else
  #error define SYS_membarrier for the arch
  #endif
#endif // SYS_membarrier
","Oracle Linux Server 6.10
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292591,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux,,,,,,"0|i2yym3:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-19 23:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10771
Date: 2022-10-19 16:15:18 +0000;;;","2022-10-21 02:03;dukebot;Changeset: 15bebf92
Author:    Boris Ulasevich <bulasevich@openjdk.org>
Date:      2022-10-21 08:59:24 +0000
URL:       https://git.openjdk.org/jdk/commit/15bebf922fb3fe46b755c85bc0a459b3c1e34c98
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/incubator/vector tests fail ""assert(VM_Version::supports_avx512vlbw()) failed""",JDK-8295662,5085718,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,qamai,dcubed,dcubed,2022-10-19 06:26,2023-01-23 06:00,2023-10-01 09:56,2022-10-20 10:05,20,,,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,tier3,vectorapi,,,,,,,,,,,,,,,,"The following tests failed in the JDK20 CI:

jdk/incubator/vector/Long512VectorTests.java
jdk/incubator/vector/Int512VectorTests.java
jdk/incubator/vector/Float512VectorTests.java
jdk/incubator/vector/Double512VectorTests.java

Here's a snippet from the Long512VectorTests.jtr log file:

test Long512VectorTests.shuffleEqualsLong512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success
test Long512VectorTests.shuffleEqualsLong512VectorTestsSmokeTest(shuffle[i], shuffle[random]): success
test Long512VectorTests.shuffleMiscellaneousLong512VectorTestsSmokeTest(shuffle[random]): success
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\assembler_x86.cpp:3195
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1666171758\\workspace\\open\\src\\hotspot\\cpu\\x86\\assembler_x86.cpp:3195), pid=97300, tid=40888
#  Error: assert(VM_Version::supports_avx512vlbw()) failed
#
# JRE version: Java(TM) SE Runtime Environment (20.0+20) (fastdebug build 20-ea+20-1456)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+20-1456, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1666180880\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_vector\\scratch\\4\\hs_err_pid97300.mdmp
#
# An error report file with more information is saved as:
# C:\\sb\\prod\\1666180880\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_vector\\scratch\\4\\hs_err_pid97300.log
#
# Compiler replay data is saved as:
# C:\\sb\\prod\\1666180880\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_vector\\scratch\\4\\replay_pid97300.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(1/56)----------
WARNING: Using incubator modules: jdk.incubator.vector
----------rerun:(48/5516)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00000207b4796db0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=40888, stack(0x000000706e900000,0x000000706ea00000)]


Current CompileTask:
C2:  26001 1780    b        jdk.incubator.vector.Long512Vector::addIndex (6 bytes)

Stack: [0x000000706e900000,0x000000706ea00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc08f81]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe6cb8e]  VMError::report+0x10be  (vmError.cpp:841)
V  [jvm.dll+0xe6e684]  VMError::report_and_die+0x644  (vmError.cpp:1700)
V  [jvm.dll+0xe6edc4]  VMError::report_and_die+0x64  (vmError.cpp:1481)
V  [jvm.dll+0x57c4b7]  report_vm_error+0xb7  (debug.cpp:285)
V  [jvm.dll+0x2a4a3f]  Assembler::evmovdqub+0x5f  (assembler_x86.cpp:3195)
V  [jvm.dll+0xaf0dbc]  MacroAssembler::evmovdqub+0x18c  (macroAssembler_x86.cpp:2717)
V  [jvm.dll+0x41bfa6]  C2_MacroAssembler::load_iota_indices+0x2a6  (c2_MacroAssembler_x86.cpp:1713)
V  [jvm.dll+0x75ade]  loadIotaIndicesNode::emit+0xce  (ad_x86.cpp:38225)
V  [jvm.dll+0xc171a8]  PhaseOutput::scratch_emit_size+0x268  (output.cpp:3352)
V  [jvm.dll+0xc17765]  PhaseOutput::shorten_branches+0x445  (output.cpp:646)
V  [jvm.dll+0xc10d17]  PhaseOutput::Output+0x877  (output.cpp:447)
V  [jvm.dll+0x50ff49]  Compile::Code_Gen+0x379  (compile.cpp:3002)
V  [jvm.dll+0x50ec5a]  Compile::Compile+0x15da  (compile.cpp:865)
V  [jvm.dll+0x4353c5]  C2Compiler::compile_method+0x145  (c2compiler.cpp:116)
V  [jvm.dll+0x5288c4]  CompileBroker::invoke_compiler_on_method+0x884  (compileBroker.cpp:2243)
V  [jvm.dll+0x5260bd]  CompileBroker::compiler_thread_loop+0x23d  (compileBroker.cpp:1917)
V  [jvm.dll+0x7f26a2]  JavaThread::thread_main_inner+0x282  (javaThread.cpp:700)
V  [jvm.dll+0xde6f37]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc07898]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]

This failure mode looks like a regression so I'm starting this bug as a P2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1640,,,,,,,,,,,JDK-8293409,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,windows,,,,,"0|i2yyl7:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-10-19 06:39;dcubed;jdk-20+20-1456-tier3 is the first build-ID where these failures
occurred and it contains the following fix:

JDK-8293409 [vectorapi] Intrinsify VectorSupport.indexVector

There are two other changsets in that build-ID, but one of them
is for the zero interpreter and the other is a test compilation fix.
I think it's very likely that JDK-8293409 is the root cause.;;;","2022-10-19 06:44;chagedorn;ILW = Assertion failure due to unsupported AVX512 instructions and recent regression, 4 tests, use -XX:UseAVX=[0,1,2] and/or -XX:-UseKNLSetting = HMM = P2;;;","2022-10-19 06:45;chagedorn;Hi [~xgong], can you take a look at this?;;;","2022-10-19 06:53;dcubed;The test task's JVM args for both the windows-x64 and linux-x64 failures are:

-XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting;;;","2022-10-19 07:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10764
Date: 2022-10-19 14:08:39 +0000;;;","2022-10-19 08:46;dcubed;The Tier[1-2] Mach5 job set is almost done; 1 open/test/jdk/:tier2_part3 task on macosx-aarch64
is still running.

The Tier3 still has 42 scheduled tasks and 11 tasks running, but the tasks that failed before:
""tier3-vector-avx512-open_test_jdk_jdk_vector"" have passed on linux-x64 and windows-x64
so the fix appears to solve the previous failures.;;;","2022-10-20 10:05;dukebot;Changeset: 7b1c6767
Author:    Quan Anh Mai <qamai@openjdk.org>
Date:      2022-10-19 16:39:25 +0000
URL:       https://git.openjdk.org/jdk/commit/7b1c6767fc5ea90630776e5bfa0fcc47ffc89aa6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] AArch64: Deoptimization from return value stub fails,JDK-8295655,5085709,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-10-19 04:12,2022-10-19 06:28,2023-10-01 09:56,2022-10-19 06:28,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,,,,,"Running stress testing with -XX:+DeoptimizeALot triggers the following crash with several tests:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (0xe0000000), pid=3326739, tid=3326742
#  stop: SharedRuntime::generate_deopt_blob: last_Java_fp not cleared
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-lworld4ea-2022-10-19-0909217.tobias.hartmann.valhalla)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-lworld4ea-2022-10-19-0909217.tobias.hartmann.valhalla, mixed mode, tiered, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# v  ~DeoptimizationBlob 0x0000fffd7859d7dc
#

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~DeoptimizationBlob 0x0000fffd7859d800
J 782 c1 jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance([Ljava/lang/Object;)Ljava/lang/Object; java.base@20-lworld4ea (148 bytes) @ 0x0000fffd7110be30 [0x0000fffd7110a240+0x0000000000001bf0]
j  java.lang.reflect.Constructor.newInstanceWithCaller([Ljava/lang/Object;ZLjava/lang/Class;)Ljava/lang/Object;+41 java.base@20-lworld4ea
J 781 c1 java.lang.reflect.Constructor.newInstance([Ljava/lang/Object;)Ljava/lang/Object; java.base@20-lworld4ea (34 bytes) @ 0x0000fffd71109930 [0x0000fffd71109780+0x00000000000001b0]
j  compiler.lib.ir_framework.test.AbstractTest.createInvocationTarget(Ljava/lang/reflect/Method;)Ljava/lang/Object;+39
j  compiler.lib.ir_framework.test.CustomRunTest.<init>(Ljava/lang/reflect/Method;Lcompiler/lib/ir_framework/Warmup;Lcompiler/lib/ir_framework/Run;Ljava/util/List;Z)V+58
j  compiler.lib.ir_framework.test.TestVM.addCustomRunTest(Ljava/lang/reflect/Method;Lcompiler/lib/ir_framework/Run;)V+166
j  compiler.lib.ir_framework.test.TestVM.setupCheckedAndCustomRunTests()V+123
j  compiler.lib.ir_framework.test.TestVM.setupTests()V+71
j  compiler.lib.ir_framework.test.TestVM.start()V+1
j  compiler.lib.ir_framework.test.TestVM.main([Ljava/lang/String;)V+38
v  ~StubRoutines::call_stub 0x0000fffd784b016c",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2yyj7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-19 04:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/796
Date: 2022-10-19 11:46:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: jfr scrub should warn if an event type doesn't exist,JDK-8295650,5085704,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-10-19 02:34,2022-11-14 11:33,2023-10-01 09:56,2022-10-21 10:15,19,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"If a user enters an event name that doesn't exist, the tool should warn the user that the event type doesn't exist. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yyi3:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-10-20 03:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10779
Date: 2022-10-20 05:35:10 +0000;;;","2022-10-21 10:15;dukebot;Changeset: f41711ef
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-10-21 17:14:24 +0000
URL:       https://git.openjdk.org/jdk/commit/f41711ef63d1a14392bf5e5b9ae6939f8772e803
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ignore zero pairs in address descriptors read by dwarf parser,JDK-8295646,5085700,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-10-19 01:09,2022-11-14 19:13,2023-10-01 09:56,2022-11-02 02:13,20,,,,,,,20,hotspot,,0,hs_err,,,,,,,,,,,,,,,,,,,,,"gtests os_linux.decoder_get_source_info* fail on RISC-V platform, for RISC-V's debuginfo has (0, 0) pairs in address descriptors, which will be misread as a terminating entry.

Some examples:

```
   ... readelf results ...

  Length:                   220
  Version:                  2
  Offset into .debug_info:  0x756b7
  Pointer Size:             8
  Segment Size:             0

    Address            Length
    00000000002d431e 0000000000001e5e
    00000000002d617c 00000000000005aa
    00000000002d6726 000000000000030e
    00000000002d6a34 00000000000000c8
    00000000002d6afc 0000000000000bfe
    00000000002d76fa 00000000000002e4
    00000000002d79de 0000000000000bfe
    00000000002d85dc 00000000000002e2
    0000000000000000 0000000000000000    <- here
    00000000002d88be 00000000000000c8
    00000000002d8986 000000000000030e
    0000000000265b3e 000000000000003a
    0000000000000000 0000000000000000
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242181,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,20,,linux,,,,,,"0|i2yyh7:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-19 01:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10758
Date: 2022-10-19 08:22:01 +0000;;;","2022-11-02 02:13;dukebot;Changeset: 2634eff2
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-11-02 09:09:39 +0000
URL:       https://git.openjdk.org/jdk/commit/2634eff24fde2760a72b607095412eef9955919e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix DEFAULT_PROMOTED_VERSION_PRE=ea for -dev,JDK-8295641,5085695,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,goetz,goetz,goetz,2022-10-19 00:31,2023-01-19 02:16,2023-10-01 09:56,2022-10-19 00:51,11.0.18,17.0.6,,,,,,17.0.6,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"This was removed in 17.0.5 and 11.0.17 -ga.
I should have reverted this when merging the changes to the -dev repo. So now here in a change of it's own.",,,,,,,,,,,JDK-8295647,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300642,,,,,,,,,,,JDK-8295056,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yyg3:",9223372036854775807,b01,,,,,,,,,,,,"2022-10-19 00:34;goetz;Fix request [11u, 17u]

Needed in 11.0.18, 17.0.6. Trivial.;;;","2022-10-19 00:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/805
Date: 2022-10-19 07:36:15 +0000;;;","2022-10-19 00:51;dukebot;Changeset: 2f2b9147
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2022-10-19 07:49:05 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/2f2b914794fd6fa6bf33fe49620e91bff1103f49
;;;","2022-10-19 01:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1464
Date: 2022-10-19 08:01:52 +0000;;;","2022-11-02 04:49;dukebot;Changeset: 2f2b9147
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2022-10-19 07:49:05 +0000
URL:       https://git.openjdk.org/jdk17u/commit/2f2b914794fd6fa6bf33fe49620e91bff1103f49
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Norwegian Nynorsk Locale is missing formatting,JDK-8295564,5085420,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,naoto,webbuggrp,webbuggrp,2022-10-17 01:54,2023-04-18 06:01,2023-10-01 09:56,2022-10-20 10:07,17,18,19,20,,,,20,core-libs,,0,dcsaw,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Norwegian Nynorsk is a language in Norway: https://www.unicode.org/cldr/cldr-aux/charts/28/summary/nn.html and https://github.com/openjdk/jdk/blob/master/make/data/cldr/common/main/nn.xml
Formatting should be similar to Norwegian Bokmål https://github.com/openjdk/jdk/blob/master/make/data/cldr/common/main/nb.xml
In Java 17, 18 and 19 Norwegian Nynorsk defaults to English formatting when using BigDecimal, Integer and probably other types. 

REGRESSION : Last worked in version 11.0.16.1

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;

public class JDKBug {

    public static void main(String args[]) {
        BigDecimal amount = new BigDecimal(""2345.78"");

        DecimalFormat norwegianNynorskAmountFormatter = getAmountFormatter(new Locale(""nn"", ""NO""));
        System.out.println(""Nynorsk amount formatting: "" + norwegianNynorskAmountFormatter.format(amount));


        DecimalFormat norwegianBokmaalAmountFormatter = getAmountFormatter(new Locale(""nb"", ""NO""));
        System.out.println(""Bokmål amount formatting: "" + norwegianBokmaalAmountFormatter.format(amount));
    }

    private static DecimalFormat getAmountFormatter(Locale locale) {
        NumberFormat nf = NumberFormat.getNumberInstance(locale);
        return (DecimalFormat) nf;
    }

}

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Nynorsk amount formatting: 2 345,78
Bokmål amount formatting: 2 345,78
ACTUAL -
Nynorsk amount formatting: 2,345.78
Bokmål amount formatting: 2 345,78

---------- BEGIN SOURCE ----------
See above source code
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Use Norwegian Bokmål locale for formatting. 

FREQUENCY : always


",,,,,,,,,,,JDK-8301317,JDK-8306296,JDK-8302398,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301945,,,,,,,,,,,JDK-8258794,,,,,,,,,"2022-10-18 23:29;tongwan;JDKBug.java;https://bugs.openjdk.org/secure/attachment/101119/JDKBug.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ywqz:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,Verified,,"2022-10-18 23:25;tongwan;The observations on Windows 10:
JDK 17ea+18: Passed.
JDK 17ea+19: Failed, Nynorsk amount formatting: 2,345.78
JDK 18: Failed.
JDK 19: Failed.
JDK 20ea+4: Failed.;;;","2022-10-19 05:25;naoto;Possibly caused by the upgrade to CLDR v39 (JDK-8258794). 

From CLDR v39's release note:
```
Additionally, nn is now inheriting from no. Practically speaking, this means that where there is missing data in nn, the data from no will be used. That would not be as satisfactory has (sic) having full data in nn, but is probably better than inheriting from root (English).
```;;;","2022-10-19 12:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10774
Date: 2022-10-19 19:04:57 +0000;;;","2022-10-20 10:07;dukebot;Changeset: b37421e7
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-10-20 15:59:22 +0000
URL:       https://git.openjdk.org/jdk/commit/b37421e7578c108df87c24c93dcbc1f358f6c257
;;;","2023-04-17 05:19;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Small risk, formatting issue only.
I resolved two hunks trivially in the test files.
Test passes and fails without the fix. I had to do a full rebuild to get it working. SAP nightly testing passed.;;;","2023-04-17 05:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1248
Date: 2023-04-17 12:16:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Move the ""sizecalc.h"" to the correct location",JDK-8295554,5085609,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-10-18 19:57,2022-11-14 11:37,2023-10-01 09:56,2022-10-25 02:49,19.0.1,20,,,,,,20,client-libs,,0,7-na,8-na,cssn22_10_02,cssn22_11_01,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,noreg-cleanup,regression,,,,,"Currently this file is located in the ""java.desktop/share/native/include/sizecalc.h"" where for example the ""jawt.h"" is located. As a result, the ""sizecalc.h"" appears in the include folder after jdk installation, which seems unexpected.
",,,,,,,,,,,JDK-8296416,JDK-8296397,JDK-8296370,JDK-8296372,JDK-8296373,JDK-8296371,JDK-8296424,JDK-8296593,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2yxwz:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-10-19 21:17;serb;The problem introduced in 19.0.1;;;","2022-10-19 21:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10757
Date: 2022-10-19 08:15:54 +0000;;;","2022-10-25 02:49;dukebot;Changeset: 6673cd85
Author:    Sergey Bylokhov <serb@openjdk.org>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-10-25 09:45:33 +0000
URL:       https://git.openjdk.org/jdk/commit/6673cd857722d117b108590ba7f7c02f8622fc3b
;;;","2022-10-25 23:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/57
Date: 2022-10-25 16:46:59 +0000;;;","2022-10-26 01:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/839
Date: 2022-10-25 16:52:11 +0000;;;","2022-10-26 15:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/295
Date: 2022-10-25 16:56:30 +0000;;;","2022-10-26 16:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/421
Date: 2022-10-26 01:21:53 +0000;;;","2022-10-26 17:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1476
Date: 2022-10-26 01:25:51 +0000;;;","2022-10-26 17:16;serb;Fix request (19u)

Clean backport. This is the fix for a regression introduced by the October CPU.
The ""sizecalc.h"" file is moved out from java.desktop/share/native/include.
Review https://github.com/openjdk/jdk19u/pull/57;;;","2022-10-26 17:17;serb;Fix request (17u)

Clean backport. This is the fix for a regression introduced by the October CPU.
The ""sizecalc.h"" file is moved out from java.desktop/share/native/include.
Review https://github.com/openjdk/jdk17u-dev/pull/839;;;","2022-10-26 17:17;serb;Fix request (15u)

Clean backport. This is the fix for a regression introduced by the October CPU.
The ""sizecalc.h"" file is moved out from java.desktop/share/native/include.
Review https://github.com/openjdk/jdk15u-dev/pull/295;;;","2022-10-26 17:18;serb;Fix request (13u)

Clean backport, only the path to the makefile is changed.
This is the fix for a regression introduced by the October CPU.
The ""sizecalc.h"" file is moved out from java.desktop/share/native/include.
Review https://github.com/openjdk/jdk13u-dev/pull/421;;;","2022-10-26 17:19;serb;Fix request (11u)

Clean backport, only the path to the makefile is changed.
This is the fix for a regression introduced by the October CPU.
The ""sizecalc.h"" file is moved out from java.desktop/share/native/include.
Review https://github.com/openjdk/jdk11u-dev/pull/1476;;;","2022-10-27 05:39;goetz;[11u]
I am not so sure this is a good backport. Does the file do any harm?
I know e.g. that there are installations that count the number of files
in a jdk to make sure it is complete ... For 17 this may be acceptable, 
but I don't think for 11.
Oh sorry ... I oversaw this is a regression.  Will approve.;;;",,,,,,,,,,,,,,,,,,,,,
Generational ZGC: Crash Running SpecJBB 2015,JDK-8295532,5085582,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,,wkemper,wkemper,2022-10-18 14:36,2022-10-31 15:27,2023-10-01 09:56,2022-10-31 15:24,repo-genzgc,,,,,,,repo-genzgc,hotspot,,0,genzgc,zgc,,,,,,,,,,,,,,,,,,,,"When testing the `zgc_generational` branch, we observed crashes running the SpecJBB 2015 workload. Details are available in the attached hs_err logs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-24 15:16;wkemper;hs_err_pid1272.log;https://bugs.openjdk.org/secure/attachment/101176/hs_err_pid1272.log","2022-10-24 15:16;wkemper;hs_err_pid1273.log;https://bugs.openjdk.org/secure/attachment/101178/hs_err_pid1273.log","2022-10-18 14:35;wkemper;hs_err_pid564-2.log;https://bugs.openjdk.org/secure/attachment/101118/hs_err_pid564-2.log","2022-10-18 14:35;wkemper;hs_err_pid564-3.log;https://bugs.openjdk.org/secure/attachment/101116/hs_err_pid564-3.log","2022-10-24 15:16;wkemper;specjbb.1272.log;https://bugs.openjdk.org/secure/attachment/101177/specjbb.1272.log","2022-10-24 15:16;wkemper;specjbb2015.1273.log;https://bugs.openjdk.org/secure/attachment/101179/specjbb2015.1273.log","2022-10-18 14:35;wkemper;specjbb2015.564-1.log;https://bugs.openjdk.org/secure/attachment/101117/specjbb2015.564-1.log","2022-10-18 14:35;wkemper;specjbb2015.564-2.log;https://bugs.openjdk.org/secure/attachment/101115/specjbb2015.564-2.log",,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,repo-genzgc,,linux,,,,,,"0|i2yxqz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-10-20 04:25;stefank;I'll move this to repo-genzgc as soon as that version gets created in JBS.;;;","2022-10-24 13:13;stefank;We've pushed a fix to a bug in our segmented array clearing. It's not unlikely that it fixes the reported bug here. We've also fixed a few other bugs found while hunting this bug, but I don't think those would cause any of the reported crashes.

If you get time to retest and report back that would be much appreciated. Thanks!;;;","2022-10-24 15:15;wkemper;Saw two crashes with:
```
commit e7dfa303818ae25f4f76662b5226bf606c4df273 (origin/zgc_generational)
Author: Erik Österlund <eosterlund@openjdk.org>
Date:   Mon Oct 24 12:54:22 2022 +0000

    Fix obj array clearing bug when racing with safepoints
```
Crash log and gc logs attached.;;;","2022-10-25 08:02;eosterlund;Thank you for the feedback - this is very valuable information to us!
I have found that there is a flaw in the ReduceBulkZeroing C2 logic which is on by default.
It sometimes clears memory in arrays without GC barriers which is not okay for generational ZGC and leads to missed remembered set entries.
It's an optimization to reduce redundant memory zeroing, but ironically the optimization itself introduces redundant memory zeroing, when the allocation comes from the slow path and is hence already appropriately initialized. It then re-initializes the memory to raw null. We are looking into what to do about this.
It's also worth mentioning that there is an upstream bug for ZGC that has recently been fixed but we have not rebased over yet: https://bugs.openjdk.org/browse/JDK-8294538;;;","2022-10-25 13:13;wkemper;> It sometimes clears memory in arrays without GC barriers which is not okay for generational ZGC and leads to missed remembered set entries.

Would the `ReduceBulkZeroing` only do this to newly allocated arrays? does it interfere with the metadata bits in the pointers?;;;","2022-10-25 13:37;eosterlund;The fix would be to only do it for newly allocated arrays. The trouble is that it doesn’t know right now if I’m reading this right, if the allocation came from the fast path or slow path. If it came from the slow path, it is problematic to us because it isn’t necessarily all that fresh any longer. By reinitializing the memory a second time to null, from coloured null, we disarm the next store so it won’t insert a remembered set entry, which in some conditions can lead to heap corruption.
Since this is an optimization with the purpose of not initializing the memory twice, it would make sense to fix the issue by doing just that - not re-initializing already initialized memory that vame from the allocation slow path.;;;","2022-10-26 01:53;eosterlund;I filed a bug for the bulk zeroing issue: https://bugs.openjdk.org/browse/JDK-8295937
[~stefank] made a reproducer that crashes within a few minutes, and ran all night with ReduceBulkZeroing turned off.;;;","2022-10-31 04:18;eosterlund;I pushed a fix to make the GC code immune to C2 memory re-initialization. Moreover, it would appear that we lost one of our two hooks to bail from AVX512 arraycopy in a recent rebase. That explains why issues have shown up on newer intel machines with AVX512 enabled, while we could not reproduce any issues locally with skylake, where AVX512 is disabled by default. Turning it explicitly on, did show the same issues. I pushed a fix for that as well.;;;","2022-10-31 15:24;wkemper;I'm no longer seeing any crashes after these latest fixes. Thank you!;;;","2022-10-31 15:27;eosterlund;Thanks William! If you run into any further observations, please don’t hesitate to share it with us.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
ComboBoxBaseSkin: memory leak when changing skin,JDK-8295531,5085579,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,angorya,angorya,angorya,2022-10-18 13:56,2023-04-21 12:39,2023-10-01 09:56,2022-12-06 08:30,,,,,,,,jfx20,javafx,,0,sn_129,sn_132,sn_133,,,,,,,,,,,,,,,,,,,"as determined by SkinMemoryLeakTest (remove line 166) and a leak tester 
https://github.com/andy-goryachev-oracle/Test/blob/main/src/goryachev/apps/LeakTest.java

Affected skins:
- ColorPicker
- DatePicker
- ComboBox

caused by:
- out-of-order modification of the control property (skin.install)
- adding skin nodes and not removing them in dispose()
- adding listeners and not removing them in dispose()

NOTE: the fix will require not only ListenerHelper JDK-8294809 but also Skin.install() JDK-8290844 changes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290844,JDK-8294809,JDK-8241364,,,,,,,,,,,,JDK-8087680,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yxqb:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-28 10:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/922
Date: 2022-10-18 23:41:05 +0000;;;","2022-12-06 08:30;dukebot;Changeset: bb139208
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2022-12-06 16:27:38 +0000
URL:       https://git.openjdk.org/jfx/commit/bb139208222d7c045be0a3c6f07ef15edcb1625b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ButtonBarSkin: memory leak when changing skin,JDK-8295506,5085553,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-10-18 12:13,2022-12-09 16:12,2023-10-01 09:56,2022-12-02 08:15,,,,,,,,jfx20,javafx,,0,sn_129,sn_132,,,,,,,,,,,,,,,,,,,,"as determined by SkinMemoryLeakTest (remove line 165) and a leak tester 
https://github.com/andy-goryachev-oracle/Test/blob/main/src/goryachev/apps/LeakTest.java

Make sure to configure the current test in LeakTest:
protected final Type WE_ARE_TESTING = Type.BUTTON_BAR;


caused by:
- adding and not removing listeners
- adding and not removing children Nodes

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241364,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yxkj:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-28 11:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/921
Date: 2022-10-18 19:49:45 +0000;;;","2022-12-02 08:15;dukebot;Changeset: 6ab65a96
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2022-12-02 16:13:45 +0000
URL:       https://git.openjdk.org/jfx/commit/6ab65a9625871cc75953575372ac1b672198b2e9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AccordionSkin: memory leak when changing skin,JDK-8295500,5085546,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-10-18 11:22,2022-12-09 16:12,2023-10-01 09:56,2022-12-02 09:17,,,,,,,,jfx20,javafx,,0,sn_129,sn_132,,,,,,,,,,,,,,,,,,,,"as determined by SkinMemoryLeakTest (remove line 164) and a leak tester 
https://github.com/andy-goryachev-oracle/Test/blob/main/src/goryachev/apps/LeakTest.java

Make sure to configure the current test in LeakTest:
protected final Type WE_ARE_TESTING = Type.ACCORDION;


caused by:
- adding and not removing listeners
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241364,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yxiz:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-28 09:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/920
Date: 2022-10-18 18:51:33 +0000;;;","2022-12-02 09:17;dukebot;Changeset: e64e1292
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2022-12-02 17:15:48 +0000
URL:       https://git.openjdk.org/jfx/commit/e64e1292e674cb0f8c525ddde66ee5c4de86cf8d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent constant field values observed during compilation,JDK-8295486,5085527,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,dcubed,dcubed,2022-10-18 07:03,2023-02-06 10:43,2023-10-01 09:56,2023-02-01 03:19,11,17,19,20,21,,,21,hotspot,,0,c2,intermittent,intermittent-low-frequency,oracle-triage-20,regression,tier4,tier6,tier7,tier8,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

serviceability/jvmti/DynamicCodeGenerated/DynamicCodeGeneratedTest.java

Here's a snippet from the log file:

#section:main
----------messages:(6/331)----------
command: main -agentlib:DynamicCodeGenerated DynamicCodeGeneratedTest
reason: User specified action: run main/othervm/native -agentlib:DynamicCodeGenerated DynamicCodeGeneratedTest 
started: Tue Oct 18 04:57:40 UTC 2022
Mode: othervm [/othervm specified]
finished: Tue Oct 18 04:58:43 UTC 2022
elapsed time (seconds): 63.775
----------configuration:(0/0)----------
----------System.out:(21/1329)*----------
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\phaseX.cpp:1751
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1665986525\\workspace\\open\\src\\hotspot\\share\\opto\\phaseX.cpp:1751), pid=27764, tid=6024
#  assert(t->meet(t0) == t->remove_speculative()) failed: Not monotonic
#
# JRE version: Java(TM) SE Runtime Environment (20.0+20) (fastdebug build 20-ea+20-1411)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+20-1411, compiled mode, sharing, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1666068570\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\2\\hs_err_pid27764.mdmp
#
# An error report file with more information is saved as:
# C:\\sb\\prod\\1666068570\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\2\\hs_err_pid27764.log
#
# Compiler replay data is saved as:
# C:\\sb\\prod\\1666068570\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\scratch\\2\\replay_pid27764.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(48/6421)*----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000002685b675090):  JavaThread ""C2 CompilerThread2"" daemon [_thread_in_native, id=6024, stack(0x000000e8ec100000,0x000000e8ec200000)]


Current CompileTask:
C2:  57269 15000    b        java.lang.invoke.StringConcatFactory::newArray (35 bytes)

Stack: [0x000000e8ec100000,0x000000e8ec200000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc08351]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe6ac0e]  VMError::report+0x10be  (vmError.cpp:841)
V  [jvm.dll+0xe6c704]  VMError::report_and_die+0x644  (vmError.cpp:1700)
V  [jvm.dll+0xe6ce44]  VMError::report_and_die+0x64  (vmError.cpp:1481)
V  [jvm.dll+0x57c6e7]  report_vm_error+0xb7  (debug.cpp:285)
V  [jvm.dll+0xc453f9]  PhaseCCP::analyze+0x569  (phaseX.cpp:1795)
V  [jvm.dll+0xc42d6f]  PhaseCCP::PhaseCCP+0x10f  (phaseX.cpp:1738)
V  [jvm.dll+0x511a71]  Compile::Optimize+0xc51  (compile.cpp:2396)
V  [jvm.dll+0x50ed3d]  Compile::Compile+0x148d  (compile.cpp:832)
V  [jvm.dll+0x4355d5]  C2Compiler::compile_method+0x145  (c2compiler.cpp:116)
V  [jvm.dll+0x528af4]  CompileBroker::invoke_compiler_on_method+0x884  (compileBroker.cpp:2243)
V  [jvm.dll+0x5262ed]  CompileBroker::compiler_thread_loop+0x23d  (compileBroker.cpp:1917)
V  [jvm.dll+0x7f2bd2]  JavaThread::thread_main_inner+0x282  (javaThread.cpp:700)
V  [jvm.dll+0xde5867]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc06c68]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x2268a]
C  [KERNEL32.DLL+0x17974]
C  [ntdll.dll+0x5a0b1]

The failing assertion is similar to one that was fixed in jdk-20+20-1404,
but this failure happened in jdk-20+20-1411-tier7:

JDK-8293531 C2: some vectorapi tests fail assert ""Not monotonic"" with flag -XX:TypeProfileLevel=222",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294616,,,,,,,,,,,JDK-8024042,,,,,,,,,"2022-10-28 08:26;dcubed;for_jatin.zip;https://bugs.openjdk.org/secure/attachment/101245/for_jatin.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,generic,,,,,,"0|i2yxer:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-18 08:47;chagedorn;ILW = Newly changed assertion fails, single test and intermittent, use -XX:+UseCompressedOoops or disable compilation of affected method = HLM = P3;;;","2022-10-18 08:48;chagedorn;Hi [~jbhateja], can you take a look at that one?;;;","2022-10-21 05:55;dcubed;Here's a log file snippet for the jdk-20+21-1485-tier4 sighting:

runtime/clinit/ClassInitBarrier.java

java.base/java.lang.Thread.run(Thread.java:1591)
Phase: IN_PROGRESS
Non-blocking actions: 68 / 68
Blocking actions:     0 / 14
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:1751
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48915/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6fabba54-5717-4210-8645-008c514d3801/runs/075776c2-60f8-4694-8e16-34141524c9a8/workspace/open/src/hotspot/share/opto/phaseX.cpp:1751), pid=4096539, tid=4096834
#  assert(t->meet(t0) == t->remove_speculative()) failed: Not monotonic
#
# JRE version: Java(TM) SE Runtime Environment (20.0+21) (fastdebug build 20-ea+21-1485)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+21-1485, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x154c554]  PhaseCCP::analyze()+0x254
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94901/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c4633add-ae09-4266-96a8-9d401965a0d3/runs/d6b1e4d5-7858-4bdb-b77f-27dfb59f5de2/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/3/core.4096539)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94901/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c4633add-ae09-4266-96a8-9d401965a0d3/runs/d6b1e4d5-7858-4bdb-b77f-27dfb59f5de2/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/3/hs_err_pid4096539.log
Thread Thread[#33,Thread-4,5,MainThreadGroup]: Finished successfully
Thread Thread[#50,Thread-21,5,MainThreadGroup]: Finished successfully
Thread Thread[#35,Thread-6,5,MainThreadGroup]: Finished successfully
Thread Thread[#52,Thread-23,5,MainThreadGroup]: Finished successfully
Thread Thread[#53,Thread-24,5,MainThreadGroup]: Finished successfully
Thread Thread[#34,Thread-5,5,MainThreadGroup]: Finished successfully
Thread Thread[#55,Thread-26,5,MainThreadGroup]: Finished successfully
Thread Thread[#51,Thread-22,5,MainThreadGroup]: Finished successfully
Thread Thread[#41,Thread-12,5,MainThreadGroup]: Finished successfully
Thread Thread[#61,Thread-32,5,MainThreadGroup]: Finished successfully
Thread Thread[#32,Thread-3,5,MainThreadGroup]: Finished successfully
Thread Thread[#31,Thread-2,5,MainThreadGroup]: Finished successfully
Thread Thread[#54,Thread-25,5,MainThreadGroup]: Finished successfully
#
# Compiler replay data is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94901/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c4633add-ae09-4266-96a8-9d401965a0d3/runs/d6b1e4d5-7858-4bdb-b77f-27dfb59f5de2/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/3/replay_pid4096539.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(49/7336)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000fffd0c2bb5c0):  JavaThread ""C2 CompilerThread3"" daemon [_thread_in_native, id=4096834, stack(0x0000fffcd6000000,0x0000fffcd6200000)]


Current CompileTask:
C2:  17939 3195    b        java.lang.invoke.StringConcatFactory::newArrayWithSuffix (61 bytes)

Stack: [0x0000fffcd6000000,0x0000fffcd6200000],  sp=0x0000fffcd61fabc0,  free space=2026k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x154c554]  PhaseCCP::analyze()+0x254  (phaseX.cpp:1751)
V  [libjvm.so+0x98be04]  Compile::Optimize()+0x500  (compile.cpp:2393)
V  [libjvm.so+0x98dc18]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xfe8  (compile.cpp:831)
V  [libjvm.so+0x7b3d08]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1c4  (c2compiler.cpp:113)
V  [libjvm.so+0x99a554]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa34  (compileBroker.cpp:2237)
V  [libjvm.so+0x99adbc]  CompileBroker::compiler_thread_loop()+0x3b8  (compileBroker.cpp:1916)
V  [libjvm.so+0xeb0de0]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:699)
V  [libjvm.so+0x17b3078]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x14c73d4]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:710)
C  [libpthread.so.0+0x7908]  start_thread+0x188;;;","2022-10-27 23:18;jbhateja;Hi [~dcubed], Please upload the relevant replay and hs_err files. I am not able to reproduce the failures with -XX:-TieredCompilation -Xbatch -XX:TypeProfileLevel=222 options.;;;","2022-10-28 08:31;dcubed;[~jbhateja] - I've attached the hs_err_pid and replay files for five sightings:

Test runtime/clinit/ClassInitBarrier.java:
test-support_jtreg_open_test_hotspot_jtreg_hotspot_runtime_runtime_clinit_ClassInitBarrier_hs_err_pid4096539.log
test-support_jtreg_open_test_hotspot_jtreg_hotspot_runtime_runtime_clinit_ClassInitBarrier_replay_pid4096539.log

Test serviceability/jvmti/DynamicCodeGenerated/DynamicCodeGeneratedTest.java:
test-support_jtreg_open_test_hotspot_jtreg_hotspot_serviceability_serviceability_jvmti_DynamicCodeGenerated_DynamicCodeGeneratedTest_hs_err_pid27764.log
test-support_jtreg_open_test_hotspot_jtreg_hotspot_serviceability_serviceability_jvmti_DynamicCodeGenerated_DynamicCodeGeneratedTest_replay_pid27764.log

Test java/util/Collections/EmptyNavigableMap.java:
test-support_jtreg_open_test_jdk_jdk_util_java_util_Collections_EmptyNavigableMap_hs_err_pid44102.log
test-support_jtreg_open_test_jdk_jdk_util_java_util_Collections_EmptyNavigableMap_replay_pid44102.log

Test sun/util/calendar/CalendarSystemDeadLockTest.java (2 sightings):
test-support_jtreg_open_test_jdk_jdk_util_sun_util_calendar_CalendarSystemDeadLockTest_hs_err_pid16780.log
test-support_jtreg_open_test_jdk_jdk_util_sun_util_calendar_CalendarSystemDeadLockTest_hs_err_pid38424.log
test-support_jtreg_open_test_jdk_jdk_util_sun_util_calendar_CalendarSystemDeadLockTest_replay_pid16780.log
test-support_jtreg_open_test_jdk_jdk_util_sun_util_calendar_CalendarSystemDeadLockTest_replay_pid38424.log;;;","2022-11-17 03:58;chagedorn;Updated ILW = JDK-8293531 only made the failing assert stronger so it is a debug VM only issue for the reported cases; seen couple of times but still intermittent and not locally reproducible, yet (tried with various replay files); disable compilation of affected method = MMM = P3;;;","2022-11-17 22:27;thartmann;This is extremely intermittent but I managed to reproduce with additional logging enabled:
t:
narrowoop: java/lang/invoke/DirectMethodHandle:exact *
t0:
narrowoop: java/lang/invoke/DirectMethodHandle:exact *
t->meet(t0):
narrowoop: java/lang/invoke/DirectMethodHandle:NotNull:exact *
t->remove_speculative():
narrowoop: java/lang/invoke/DirectMethodHandle:exact *

I'm not sure how this can happen.;;;","2022-11-18 00:25;thartmann;Output with -XX:+Verbose suggest that the actual issue is that t = type(n) and t0 = n->Value() point to different DirectMethodHandles:

t:
narrowoop: java/lang/invoke/DirectMethodHandle java.lang.invoke.DirectMethodHandle {0x00000000db71ee08} - klass: synchronized 'java/lang/invoke/DirectMethodHandle' - ---- fields (total size 5 words): - private 'customizationCount' 'B' @12  0 (0x00) - private volatile 'updateInProgress' 'Z' @13  false (0x00) - private final 'type' 'Ljava/lang/invoke/MethodType;' @16  a 'java/lang/invoke/MethodType'{0x00000000db795c10} = (Ljava/lang/Object;)Ljava/lang/String; (0xdb795c10) - final 'form' 'Ljava/lang/invoke/LambdaForm;' @20  a 'java/lang/invoke/LambdaForm'{0x00000000d037ed88} => a 'java/lang/invoke/MemberName'{0x00000000d037ee90} = {method} {0x00007f67d4316af0} 'invokeStatic' '(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' in final synchronized 'java/lang/invoke/DirectMethodHandle$Holder' (0xd037ed88) - private 'asTypeCache' 'Ljava/lang/invoke/MethodHandle;' @24  NULL (0x00000000) - private 'asTypeSoftCache' 'Ljava/lang/ref/SoftReference;' @28  NULL (0x00000000) - final 'crackable' 'Z' @14  true (0x01) - final 'member' 'Ljava/lang/invoke/MemberName;' @32  a 'java/lang/invoke/MemberName'{0x00000000db71ed78} = {method} {0x00007f67d420e6b0} 'stringOf' '(Ljava/lang/Object;)Ljava/lang/String;' in final synchronized 'java/lang/StringConcatHelper' (0xdb71ed78):Constant:exact *

t0:
narrowoop: java/lang/invoke/DirectMethodHandle java.lang.invoke.DirectMethodHandle {0x00000000db9ad3d0} - klass: synchronized 'java/lang/invoke/DirectMethodHandle' - ---- fields (total size 5 words): - private 'customizationCount' 'B' @12  0 (0x00) - private volatile 'updateInProgress' 'Z' @13  false (0x00) - private final 'type' 'Ljava/lang/invoke/MethodType;' @16  a 'java/lang/invoke/MethodType'{0x00000000db795c10} = (Ljava/lang/Object;)Ljava/lang/String; (0xdb795c10) - final 'form' 'Ljava/lang/invoke/LambdaForm;' @20  a 'java/lang/invoke/LambdaForm'{0x00000000d037ed88} => a 'java/lang/invoke/MemberName'{0x00000000d037ee90} = {method} {0x00007f67d4316af0} 'invokeStatic' '(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' in final synchronized 'java/lang/invoke/DirectMethodHandle$Holder' (0xd037ed88) - private 'asTypeCache' 'Ljava/lang/invoke/MethodHandle;' @24  NULL (0x00000000) - private 'asTypeSoftCache' 'Ljava/lang/ref/SoftReference;' @28  NULL (0x00000000) - final 'crackable' 'Z' @14  true (0x01) - final 'member' 'Ljava/lang/invoke/MemberName;' @32  a 'java/lang/invoke/MemberName'{0x00000000db9ad2a8} = {method} {0x00007f67d420e6b0} 'stringOf' '(Ljava/lang/Object;)Ljava/lang/String;' in final synchronized 'java/lang/StringConcatHelper' (0xdb9ad2a8):Constant:exact *

t->meet(t0):
narrowoop: java/lang/invoke/DirectMethodHandle:NotNull:exact *

t->remove_speculative():
narrowoop: java/lang/invoke/DirectMethodHandle java.lang.invoke.DirectMethodHandle {0x00000000db71ee08} - klass: synchronized 'java/lang/invoke/DirectMethodHandle' - ---- fields (total size 5 words): - private 'customizationCount' 'B' @12  0 (0x00) - private volatile 'updateInProgress' 'Z' @13  false (0x00) - private final 'type' 'Ljava/lang/invoke/MethodType;' @16  a 'java/lang/invoke/MethodType'{0x00000000db795c10} = (Ljava/lang/Object;)Ljava/lang/String; (0xdb795c10) - final 'form' 'Ljava/lang/invoke/LambdaForm;' @20  a 'java/lang/invoke/LambdaForm'{0x00000000d037ed88} => a 'java/lang/invoke/MemberName'{0x00000000d037ee90} = {method} {0x00007f67d4316af0} 'invokeStatic' '(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' in final synchronized 'java/lang/invoke/DirectMethodHandle$Holder' (0xd037ed88) - private 'asTypeCache' 'Ljava/lang/invoke/MethodHandle;' @24  NULL (0x00000000) - private 'asTypeSoftCache' 'Ljava/lang/ref/SoftReference;' @28  NULL (0x00000000) - final 'crackable' 'Z' @14  true (0x01) - final 'member' 'Ljava/lang/invoke/MemberName;' @32  a 'java/lang/invoke/MemberName'{0x00000000db71ed78} = {method} {0x00007f67d420e6b0} 'stringOf' '(Ljava/lang/Object;)Ljava/lang/String;' in final synchronized 'java/lang/StringConcatHelper' (0xdb71ed78):Constant:exact *;;;","2022-11-18 02:19;thartmann;I verified that the assert also triggers without JDK-8293531, so this is unrelated.;;;","2022-11-18 03:47;thartmann;The type belongs to a load from the @Stable field OBJECT_STRINGIFIER from the StringConcatFactory:
2662  LoadN  === 2521 768 1643  [[ 2525 ]]  @java/lang/Class java.lang.Class {0x00000000d04ee3e0} - klass: public final synchronized 'java/lang/Class' [...] 0 (0x0000000000000000):Constant:exact+176 * [narrow], name=OBJECT_STRINGIFIER, idx=14; (does not depend only on test, pinned)  Type:narrowoop: java/lang/invoke/MethodHandle:BotPTR * !jvms: java.lang.invoke.StringConcatFactory::floatStringifier @ bci:16 (line 905) java.lang.invoke.StringConcatFactory::generateMHInlineCopy @ bci:275 (line 508)

It looks like as if the load is constant folded to a DirectMethodHandle but the field value is update during CCP, leading to inconsistent types. I'm not sure yet how that can happen because the constant field value should be cached during compilation.;;;","2022-11-23 10:20;vlivanov;> It looks like as if the load is constant folded to a DirectMethodHandle but the field value is update during CCP, leading to inconsistent types. I'm not sure yet how that can happen because the constant field value should be cached during compilation.

I believe the problematic scenario is the following:
  - the first time a NULL is observed and the load stays intact;
  - meanwhile, Java code initializes the field with non-NULL value;
  - the second time an attempt is made, JIT observes a non-default value and turns the load into a constant.

The immediate problem is that CI doesn't cache observed element values and reads the field/array element on every request (see Type::make_constant_from_field()/ciInstance::field_value() and Type::make_constant_from_array_element()/ciArray::element_value()). ;;;","2022-11-23 11:00;thartmann;Thanks, Vladimir. In the meantime, I noticed as well that LoadNode::Value -> Type::make_constant_from_field loads the field value again on each invocation and I'm currently trying to write a test reproducing the failing scenario. There are at least two non-null field values involved though, as the logging I posted in a previous comment shows. I.e., the field value is already non-null at the start of PhaseCCP and is then updated to a different non-null value during CCP. Probably just because of a concurrent initialization of the stable field by multiple threads. Similar to what I described in JDK-8288970 (see also Test.java I attached there).;;;","2022-11-23 11:19;vlivanov;Yes, results of multiple initialization stores may be observed during compilation unless CI caches observed value. ;;;","2022-11-23 11:22;thartmann;Right, I'm currently just struggling with coming up with a test that delays constant folding the load up until CCP, because only there we would invoke LoadNode::Value multiple times.;;;","2022-11-23 11:28;vlivanov;The only way to keep the load IMO is to delay the field initialization.  ;;;","2022-11-23 11:32;thartmann;But even a null field value will be constant folded, right? So we would need to delay initialization of the field holder which is kind of tricky for a static field when we still want the load to be compiled.;;;","2022-11-23 11:42;vlivanov;No, NULL value of a @Stable field signals that the field is not yet initialized.;;;","2022-11-23 11:44;thartmann;Ah, you are right. That's probably the way to go then. Let me try mixing some null values in my test :);;;","2023-01-05 05:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11861
Date: 2023-01-05 13:26:11 +0000;;;","2023-02-01 03:19;dukebot;Changeset: cae577a7
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-02-01 11:15:35 +0000
URL:       https://git.openjdk.org/jdk/commit/cae577a7102e97278f3f6880e529a68c1f7b71ab
;;;",,,,,,,,,,,,,,,
S390X: Optimized builds are broken,JDK-8295469,5085507,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-10-18 03:54,2022-11-08 10:42,2023-10-01 09:56,2022-10-18 08:31,11,17,19,20,,,,20,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,noreg-build,,,,,,,,,,,,,,"Attempting to build S390X ""optimized"" debuglevel fails with: 

```
* For target hotspot_variant-server_libjvm_objs_BUILD_LIBJVM_link:
/usr/lib/gcc-cross/s390x-linux-gnu/10/../../../../s390x-linux-gnu/bin/ld: /home/shade/trunks/jdk/build/build-all-server-optimized-s390x-linux-gnu-10/hotspot/variant-server/libjvm/objs/interp_masm_s390.o: in function `InterpreterMacroAssembler::get_monitors(RegisterImpl*)':
make/hotspot/src/hotspot/cpu/s390/interp_masm_s390.cpp:673: undefined reference to `InterpreterMacroAssembler::asm_assert_ijava_state_magic(RegisterImpl*)'
/usr/lib/gcc-cross/s390x-linux-gnu/10/../../../../s390x-linux-gnu/bin/ld: /home/shade/trunks/jdk/build/build-all-server-optimized-s390x-linux-gnu-10/hotspot/variant-server/libjvm/objs/interp_masm_s390.o: in function `InterpreterMacroAssembler::save_bcp()':
make/hotspot/src/hotspot/cpu/s390/interp_masm_s390.cpp:654: undefined reference to `InterpreterMacroAssembler::asm_assert_ijava_state_magic(RegisterImpl*)'
```
",,,,,,,,,,,JDK-8295770,JDK-8295771,JDK-8296525,JDK-8296601,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yxab:",9223372036854775807,b20,,,,,,,,,,,,"2022-10-18 05:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10743
Date: 2022-10-18 11:53:20 +0000;;;","2022-10-18 08:31;dukebot;Changeset: 7b2e83b3
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-10-18 15:27:13 +0000
URL:       https://git.openjdk.org/jdk/commit/7b2e83b3955c034208325ea5477afd3c5e1da41a
;;;","2022-10-20 03:59;shade;Fix Request (11u, 17u)

Fixes S390X optimized builds, applies cleanly, builds pass. ;;;","2022-10-20 04:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/813
Date: 2022-10-20 10:49:28 +0000;;;","2022-10-20 04:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1466
Date: 2022-10-20 10:59:16 +0000;;;","2022-10-25 10:10;shade;Fix Request (19u)

Same reason as for 17u and 11u.;;;","2022-10-25 10:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/58
Date: 2022-10-25 17:09:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
RISC-V: Minimal builds are broken,JDK-8295468,5085506,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-10-18 03:43,2023-03-02 07:09,2023-10-01 09:56,2022-10-18 08:09,19,20,,,,,,20,hotspot,,0,noreg-build,,,,,,,,,,,,,,,,,,,,,"Attempting to build RISC-V ""minimal"" variant fails with:

```
* For target hotspot_variant-minimal_libjvm_objs_macroAssembler_riscv.o:
In file included from /home/shade/trunks/jdk/src/hotspot/share/utilities/globalDefinitions.hpp:29,
                 from /home/shade/trunks/jdk/src/hotspot/share/memory/allocation.hpp:29,
                 from /home/shade/trunks/jdk/src/hotspot/share/memory/arena.hpp:28,
                 from /home/shade/trunks/jdk/src/hotspot/share/runtime/handles.hpp:28,
                 from /home/shade/trunks/jdk/src/hotspot/share/code/oopRecorder.hpp:28,
                 from /home/shade/trunks/jdk/src/hotspot/share/asm/codeBuffer.hpp:28,
                 from /home/shade/trunks/jdk/src/hotspot/share/asm/assembler.hpp:28,
                 from /home/shade/trunks/jdk/src/hotspot/cpu/riscv/macroAssembler_riscv.cpp:28:
/home/shade/trunks/jdk/src/hotspot/cpu/riscv/macroAssembler_riscv.cpp: In member function 'void MacroAssembler::movoop(Register, jobject)':
/home/shade/trunks/jdk/src/hotspot/cpu/riscv/macroAssembler_riscv.cpp:1966:30: error: invalid use of incomplete type 'class CollectedHeap'
 1966 |       assert(Universe::heap()->is_in(JNIHandles::resolve(obj)), ""should be real oop"");
      |                              ^~

```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276799,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yxa3:",9223372036854775807,b20,,,,,,,,,,,,"2022-10-18 03:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10742
Date: 2022-10-18 10:48:45 +0000;;;","2022-10-18 08:09;dukebot;Changeset: e7375f9c
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-10-18 15:07:01 +0000
URL:       https://git.openjdk.org/jdk/commit/e7375f9c527fd86dc1414a308a440903fb9f22da
;;;","2023-03-02 07:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/6
Date: 2023-03-02 14:40:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: Wrong src/dest nodes highlighted for edge,JDK-8295461,5085496,Bug,Closed,JDK,JDK,software,duke,,,P5,Fixed,tholenstein,tholenstein,tholenstein,2022-10-18 01:26,2022-11-14 11:35,2023-10-01 09:56,2022-10-24 07:16,20,,,,,,,20,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-20,starter,,,,,,,,,,,,,,,,,"1) open Reproducer.xml in IGV
2) hover with the mouse the last part of the edge between node ""3 Start"" - ""7 Parm""
3) IGV falsely highlights the nodes ""9 Parm"", ""8 Parm"" and ""7 Parm""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289503,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-18 01:25;tholenstein;Reproduce.xml;https://bugs.openjdk.org/secure/attachment/101111/Reproduce.xml","2022-10-18 01:25;tholenstein;wrong-highlighting.png;https://bugs.openjdk.org/secure/attachment/101110/wrong-highlighting.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yx7v:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-10-18 08:43;chagedorn;ILW = Wrong message when hovering over edges, edge case?, no workaround = LLH = P5;;;","2022-10-21 08:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10815
Date: 2022-10-21 13:53:51 +0000;;;","2022-10-24 07:16;dukebot;Changeset: 38983857
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2022-10-24 14:14:12 +0000
URL:       https://git.openjdk.org/jdk/commit/38983857883eb1b8948cb7645e77ecc97c4e4dd5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] find_callee_info_helper hits ""must have non-abstract attached method"" assert",JDK-8295455,5085490,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-10-17 23:41,2022-10-18 22:12,2023-10-01 09:56,2022-10-18 22:12,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c1,intermittent,lworld,,,,,,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/runtime/sharedRuntime.cpp:1204), pid=575065, tid=575066
#  assert(attached_method.not_null() && !attached_method->is_abstract()) failed: must have non-abstract attached method
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-lworld4ea-2022-10-03-1240228.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-lworld4ea-2022-10-03-1240228.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x18f5159]  SharedRuntime::find_callee_info_helper(vframeStream&, Bytecodes::Code&, CallInfo&, JavaThread*)+0xce9

Stack: [0x00007f94e1322000,0x00007f94e1423000],  sp=0x00007f94e141a440,  free space=993k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x18f5159]  SharedRuntime::find_callee_info_helper(vframeStream&, Bytecodes::Code&, CallInfo&, JavaThread*)+0xce9  (sharedRuntime.cpp:1204)
V  [libjvm.so+0x18f5ab3]  SharedRuntime::find_callee_method(JavaThread*)+0xa3  (sharedRuntime.cpp:1284)
V  [libjvm.so+0x18f5e8a]  SharedRuntime::reresolve_call_site(bool&, bool&, bool&, JavaThread*)+0xda  (sharedRuntime.cpp:1992)
V  [libjvm.so+0x18f65c0]  SharedRuntime::handle_wrong_method(JavaThread*)+0x1f0  (sharedRuntime.cpp:1586)
v  ~RuntimeStub::wrong_method_stub 0x00007f94d901a81b
J 1089 c1 compiler.valhalla.inlinetypes.TestValueClasses.test22(Lcompiler/valhalla/inlinetypes/TestValueClasses$ManyOopsValue;)I (5 bytes) @ 0x00007f94d9558924 [0x00007f94d9556d00+0x0000000000001c24]
j  compiler.valhalla.inlinetypes.TestValueClasses.test22_verifier()V+3
J 1066 c1 java.lang.invoke.LambdaForm$DMH+0x0000000800081400.invokeVirtual(Ljava/lang/Object;Ljava/lang/Object;)V java.base (14 bytes) @ 0x00007f94d9536914 [0x00007f94d9536520+0x00000000000003f4]
j  java.lang.invoke.LambdaForm$MH+0x0000000800123800.invoke(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+38 java.base
J 1065 c1 compiler.lib.ir_framework.test.CustomRunTest.invokeTest()V (79 bytes) @ 0x00007f94d9529064 [0x00007f94d951fd00+0x0000000000009364]
j  compiler.lib.ir_framework.test.AbstractTest.run()V+23
j  compiler.lib.ir_framework.test.CustomRunTest.run()V+59
j  compiler.lib.ir_framework.test.TestVM.runTests()V+198
j  compiler.lib.ir_framework.test.TestVM.start()V+9
j  compiler.lib.ir_framework.test.TestVM.main([Ljava/lang/String;)V+38
v  ~StubRoutines::call_stub 0x00007f94d9000d21
V  [libjvm.so+0x10687ad]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x56d  (javaCalls.cpp:445)
V  [libjvm.so+0x11ad055]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x375  (jni.cpp:902)
V  [libjvm.so+0x11b0f45]  jni_CallStaticVoidMethod+0x1b5  (jni.cpp:1771)
C  [libjli.so+0x47d5]  JavaMain+0xd55  (java.c:547)
C  [libjli.so+0x7a09]  ThreadJavaMain+0x9  (java_md.c:650)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yx6j:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-18 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/795
Date: 2022-10-18 14:41:45 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException with invalid pattern matching construct in constructor call,JDK-8295447,5085252,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,webbuggrp,webbuggrp,2022-10-13 00:16,2022-12-01 03:04,2023-10-01 09:56,2022-11-26 07:54,19,20,,,,,,20,tools,,0,dcsad,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Applies to JDK 19 and JDK 20ea

A DESCRIPTION OF THE PROBLEM :
When using an invalid pattern matching construct, i.e. using a class without decomposition pattern, in a super constructor call, javac produces a NullPointerException (at compile-time) instead of an error message.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile the provided example.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
This should produce an error message that java.awt.Point has no deconstruction pattern.
ACTUAL -
java.lang.NullPointerException: Cannot read field ""type"" because ""sym"" is null
        at jdk.compiler/com.sun.tools.javac.code.Types.asSuper(Types.java:2159)
        at jdk.compiler/com.sun.tools.javac.code.Types$4.visitClassType(Types.java:1189)
        at jdk.compiler/com.sun.tools.javac.code.Types$4.visitClassType(Types.java:1110)
        at jdk.compiler/com.sun.tools.javac.code.Type$ClassType.accept(Type.java:1013)
        at jdk.compiler/com.sun.tools.javac.code.Types$DefaultTypeVisitor.visit(Types.java:4906)
        at jdk.compiler/com.sun.tools.javac.code.Types.isSubtype(Types.java:1106)
        at jdk.compiler/com.sun.tools.javac.code.Types.isSubtype(Types.java:1077)
        at jdk.compiler/com.sun.tools.javac.code.Types.isCastable(Types.java:1655)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.checkCastablePattern(Attr.java:4148)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitRecordPattern(Attr.java:4223)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCRecordPattern.accept(JCTree.java:2459)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:687)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitTypeTest(Attr.java:4107)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCInstanceOf.accept(JCTree.java:2216)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:687)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:733)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitConditional(Attr.java:2000)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCConditional.accept(JCTree.java:1519)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:687)
        at jdk.compiler/com.sun.tools.javac.comp.DeferredAttr.attribSpeculative(DeferredAttr.java:500)
        at jdk.compiler/com.sun.tools.javac.comp.DeferredAttr.attribSpeculative(DeferredAttr.java:480)
        at jdk.compiler/com.sun.tools.javac.comp.DeferredAttr.attribSpeculative(DeferredAttr.java:467)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.lambda$processArg$0(ArgumentAttr.java:220)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.processArg(ArgumentAttr.java:242)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.processArg(ArgumentAttr.java:219)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.visitConditional(ArgumentAttr.java:255)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCConditional.accept(JCTree.java:1519)
        at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.attribArg(ArgumentAttr.java:197)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:685)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribArgs(Attr.java:788)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitApply(Attr.java:2507)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1799)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:687)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:740)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitExec(Attr.java:2300)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1586)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:687)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:761)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:780)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1463)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1082)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:687)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:761)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1253)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:912)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:687)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:761)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5601)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5492)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5316)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5255)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1317)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)


---------- BEGIN SOURCE ----------
class Base { int i; Base(int j) { i = j; } }
class Sub extends Base {
  Sub(Object o) { super(o instanceof java.awt.Point(int x, int y)? x + y: 0); }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
After identifying the invalidity of the construct without the compiler's help, just fix the error in the source code.

FREQUENCY : always


",,,,,,,,,,,JDK-8297942,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-17 20:09;adev;Main.java;https://bugs.openjdk.org/secure/attachment/101109/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2yvpn:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-17 20:10;adev;The issue is reproducible with 
PS C:\test> java -version
java version ""19"" 2022-09-20
Java(TM) SE Runtime Environment (build 19+36-2238)
Java HotSpot(TM) 64-Bit Server VM (build 19+36-2238, mixed mode, sharing)

javac --enable-preview -source 19 Main.java
;;;","2022-10-19 09:07;abimpoudis;Another test

```
    class Foo {
        Foo(Object o) {
            m((o instanceof Bar(int x))? 0 : 1);
        }
        void m(int i) { }
    }

    class Bar { }
```

This happens because the (same) NPE ex is caught in the case where the argument's attribution is not deferred and does not happen when it is deferred, i.e., the two cases mentioned.

It attribution is not deferred for example in the code below:

```
int i = (o instanceof Bar(int x))? 0 : 1;
meth(i);
```;;;","2022-10-20 04:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10791
Date: 2022-10-20 11:30:41 +0000;;;","2022-11-26 07:54;dukebot;Changeset: 6c05771b
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2022-11-26 15:53:00 +0000
URL:       https://git.openjdk.org/jdk/commit/6c05771b9be3dd5cbcdb40d2e53cc53959926cdd
;;;","2022-11-28 20:04;vrudomet;Fix request [19u]

Clean backport
JTreg tier1, tier2, jck runtime and jck compiler passed.
Test T8295447.java passes during run. ;;;","2022-11-28 20:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/99
Date: 2022-11-29 04:03:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure with GCC7 after JDK-8294314 due to strict-overflow warnings,JDK-8295435,5085468,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-10-17 19:25,2022-11-14 11:29,2023-10-01 09:56,2022-10-20 10:03,20,,,,,,,20,infrastructure,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,,"* For target hotspot_variant-server_libjvm_objs_bytecodeAssembler.o:
In file included from /home/jvm/jdk/src/hotspot/share/utilities/globalDefinitions.hpp:29:0,
                 from /home/jvm/jdk/src/hotspot/share/memory/allocation.hpp:29,
                 from /home/jvm/jdk/src/hotspot/share/classfile/bytecodeAssembler.hpp:28,
                 from /home/jvm/jdk/src/hotspot/share/classfile/bytecodeAssembler.cpp:27:
/home/jvm/jdk/src/hotspot/share/utilities/growableArray.hpp: In member function 'void BytecodeAssembler::append(u2)':
/home/jvm/jdk/src/hotspot/share/utilities/debug.hpp:59:7: error: assuming signed overflow does not occur when assuming that (X - c) > X is always false [-Werror=strict-overflow]
   if (!(p)) {                                                                  \
       ^~~~
/home/jvm/jdk/src/hotspot/share/utilities/debug.hpp:68:24: note: in expansion of macro 'vmassert'
 #define assert(p, ...) vmassert(p, __VA_ARGS__)
                        ^~~~~~~~
/home/jvm/jdk/src/hotspot/share/utilities/growableArray.hpp:155:5: note: in expansion of macro 'assert'
     assert(0 <= i && i < _len, ""illegal index"");",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294314,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yx1n:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-17 19:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10738
Date: 2022-10-18 02:35:59 +0000;;;","2022-10-20 10:03;dukebot;Changeset: f502ab85
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-10-19 07:41:27 +0000
URL:       https://git.openjdk.org/jdk/commit/f502ab85c987be827d36b0a29f77ec5ce5bb3d01
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update harfbuzz md file,JDK-8295429,5085460,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnguyen,dnguyen,dnguyen,2022-10-17 16:03,2023-09-29 08:46,2023-10-01 09:56,2022-10-19 11:17,11,17,19,20,,,,11.0.18-oracle,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sn_129,,,,,,,,,,,,,Need to update harfbuzz md file,,,,,,,,,,,JDK-8295790,JDK-8295674,JDK-8295793,JDK-8296317,JDK-8295878,JDK-8295749,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1640,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ywzv:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-10-17 17:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10735
Date: 2022-10-18 00:43:02 +0000;;;","2022-10-20 07:36;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a license file change.
Did not apply clean because of a white space at the line end in 17. 
SAP nighlty testing passed.;;;","2022-10-20 07:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/818
Date: 2022-10-20 14:35:40 +0000;;;","2022-10-21 05:55;yan;Fix request (15u,13u):
backporting for parity with other releases containing HarfBuzz 4.4.1;;;","2022-10-21 06:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/292
Date: 2022-10-21 12:55:41 +0000;;;","2022-10-21 06:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/418
Date: 2022-10-21 13:24:58 +0000;;;","2022-11-02 06:30;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
No risk, only a comment change
Clean backport from 17.
SAP nighlty testing passed.;;;","2022-11-02 06:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1493
Date: 2022-11-02 13:29:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
MenuButtonSkin: memory leak when changing skin,JDK-8295426,5085456,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,angorya,angorya,angorya,2022-10-17 11:52,2022-12-09 16:11,2023-10-01 09:56,2022-12-01 08:23,,,,,,,,jfx20,javafx,,0,sn_129,sn_132,,,,,,,,,,,,,,,,,,,,"as determined by SkinMemoryLeakTest (remove line 170) and a leak tester 
https://github.com/andy-goryachev-oracle/Test/blob/main/src/goryachev/apps/LeakTest.java

Also applies to SplitMenuButton, since they share the same base class MenuButtonSkinBase.

Make sure to configure the current test in LeakTest:
protected final Type WE_ARE_TESTING = Type.MENU_BUTTON; // or SPLIT_MENU_BUTTON

In addition, there seems to be another failure scenario when simply replacing the skin - no menu is shown upon a click.  To reproduce, launch LeakTest and click once on the [Replace Skin] button.  Second click restores the function.

caused by:
- adding and not removing EventHandlers
- setting and not clearing onAction handlers
- incorrect logic in setting mousePressed/mouse/Released handlers",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296409,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ywyz:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-28 10:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/919
Date: 2022-10-17 22:42:42 +0000;;;","2022-12-01 08:23;dukebot;Changeset: 4a19fe71
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2022-12-01 16:22:30 +0000
URL:       https://git.openjdk.org/jfx/commit/4a19fe71f9151460dca97d4ca9962fd630404ee8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Match the default priv exp length between SunPKCS11 and other JDK providers,JDK-8295425,5085455,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,valeriep,valeriep,valeriep,2022-10-17 11:17,2023-07-21 07:35,2023-10-01 09:56,2023-03-01 14:42,,,,,,,,21,security-libs,,0,release-note=yes,,,,,,,,,,,,,,,,,,,,,"Even when the given DHParameterSpec explicitly specifies a private exponent length, the associated params in the generated DH keys do not contain its value. This seems like a bug, the specified value should be returned.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293554,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ywyr:",9223372036854775807,b13,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,Verified,,"2023-02-07 18:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12466
Date: 2023-02-08 01:53:34 +0000;;;","2023-03-01 14:42;dukebot;Changeset: 394eac85
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2023-03-01 22:40:50 +0000
URL:       https://git.openjdk.org/jdk/commit/394eac850cf8def6107193695f1d438f083d275a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
adjust timeout for another JLI GetObjectSizeIntrinsicsTest.java subtest,JDK-8295424,5085454,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2022-10-17 11:07,2023-09-29 03:08,2023-10-01 09:56,2022-12-02 14:30,20,,,,,,,20,core-svc,,0,jdk17u-fix-request,noreg-self,,,,,,,,,,,,,,,,,,,,"Another sub-test in the following test has timed out in my
recent stress testing runs on jdk-20+19:

java/lang/instrument/GetObjectSizeIntrinsicsTest.java#id8

Here's my notes for these failures:

# jdk-20+19_1_linux-x64 - observed in jdk-20+19 testing on 2022.10.13 on
# linux-x64 in slowdebug config:
#   - -Xmx8g -Xbatch -XX:-TieredCompilation config
#   - timeout at 1490.949 PASSED while timeout handler was running
# jdk-20+19_2_linux-x64 - observed in jdk-20+19 testing on 2022.10.14 on
# linux-x64 in slowdebug config:
#   - -Xmx8g -Xbatch -XX:-TieredCompilation config
#   - timeout at 1489.805 PASSED while timeout handler was running
# jdk-20+19_3_linux-x64 - observed in jdk-20+19 testing on 2022.10.15 on
# linux-x64 in slowdebug config:
#   - -Xmx8g -Xbatch -XX:-TieredCompilation config
#   - timeout at 1481.296 PASSED while timeout handler was running",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292261,,,,,,,,,,,,,,,,,,,,"2022-10-17 11:13;dcubed;jdk-20+19_linux-x64.8295424.zip;https://bugs.openjdk.org/secure/attachment/101108/jdk-20%2B19_linux-x64.8295424.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,,"0|i2ywyj:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@dc685aa,,,,,,,,,"2022-10-17 11:13;dcubed;Here's the log file from the sightings in my jdk-20+19 stress runs:

$ unzip -l jdk-20+19_linux-x64.8295424.zip
Archive:  jdk-20+19_linux-x64.8295424.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    53141  2022-10-13 19:28   jdk-20+19_1/failures.linux-x86_64/GetObjectSizeIntrinsicsTest_id8.jtr.slowdebug
    47091  2022-10-14 17:10   jdk-20+19_2/failures.linux-x86_64/GetObjectSizeIntrinsicsTest_id8.jtr.slowdebug
    47144  2022-10-15 14:49   jdk-20+19_3/failures.linux-x86_64/GetObjectSizeIntrinsicsTest_id8.jtr.slowdebug
---------                     -------
   147376                     3 files;;;","2022-11-22 09:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11278
Date: 2022-11-21 22:55:40 +0000;;;","2022-12-02 14:30;dukebot;Changeset: 6e547052
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-12-02 22:29:21 +0000
URL:       https://git.openjdk.org/jdk/commit/6e5470525d5236901c219146f363d4860e6b8008
;;;","2023-09-28 06:47;goetz;Fix request [17u]

I backport this for preparation of JDK-8301377.
No risk, only a test change.
Clean backport except for a patch to a test not in 17.
Tests pass. SAP nightly testing passed.;;;","2023-09-28 06:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1816
Date: 2023-09-28 13:46:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Change name of jdk.JitRestart,JDK-8295419,5085447,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,egahlin,egahlin,2022-10-17 09:40,2022-11-17 00:54,2023-10-01 09:56,2022-10-18 14:44,20,,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,"The convention used by JFR events have been to use uppercase for acronyms, for example CPULoad, TLSHandshake, SystemGC, JVMInformation and ObjectAllocationInNewTLAB.

The jdk.JitRestart event, which has not been in a release yet, should follow the same convention to stay consistent with other events.",,,,,,,,,,,JDK-8297189,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ywwz:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-10-17 10:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10731
Date: 2022-10-17 16:44:28 +0000;;;","2022-10-18 14:44;dukebot;Changeset: ecfb6bce
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-10-18 21:43:06 +0000
URL:       https://git.openjdk.org/jdk/commit/ecfb6bce5a9878d7bedce47da60f96fa9146acf7
;;;","2022-11-16 07:45;mbaesken;jdk17 backport request
I would like to have the patch in jdk17u-dev as well,  reason is that the event naming should be consistent in 17 and 20. Patch is low risk, unfortunately not clean.;;;","2022-11-16 07:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/888
Date: 2022-11-16 15:42:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pass $AR to binutils cross-build,JDK-8295417,5085442,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-10-17 08:38,2022-11-14 11:30,2023-10-01 09:56,2022-10-20 10:04,20,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,"While adapting my CI to build hsdis automatically, I realized that sometimes we miss the proper $AR for binutils cross-build. Configure would then fail like:

```
$ CXX=aarch64-linux-gnu-g++ CC=aarch64-linux-gnu-gcc sh ./configure --with-debug-level=fastdebug --openjdk-target=aarch64-linux-gnu --with-sysroot=/chroots/arm64 --with-boot-jdk=/home/shade/Install/jdk19u-ea --with-hsdis=binutils --with-binutils-src=binutils-2.38 
...
/usr/bin/bash: line 1: aarch64-unknown-linux-gnu-ar: command not found
gmake[1]: *** [Makefile:254: libiberty.a] Error 127
gmake[1]: Leaving directory '/home/shade/trunks/jdk/build/linux-aarch64-server-fastdebug/configure-support/binutils/libiberty'
gmake: *** [Makefile:9220: all-libiberty] Error 2
configure: Automatic building of binutils failed on make. Try building it manually
configure: error: Cannot continue
configure exiting with result code 1
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ywvv:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-17 08:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10729
Date: 2022-10-17 15:46:11 +0000;;;","2022-10-20 10:04;dukebot;Changeset: 1d883c53
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-10-19 11:58:24 +0000
URL:       https://git.openjdk.org/jdk/commit/1d883c5312721980898f91898665b528948a985b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Aarch64] C2: assert(false) failed: bad AD file,JDK-8295414,5085437,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,epeter,epeter,2022-10-17 07:29,2023-01-04 03:12,2023-10-01 09:56,2022-10-20 14:27,17,18,19,20,,,,20,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,oracle-triage-11,oracle-triage-20,,,,,,,,,,,,,,"Running test:
compiler/types/TestSubTypeCheckMacroTrichotomy.java

With flags:
-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:-TieredCompilation -XX:+StressReflectiveCode -XX:-ReduceInitialCardMarks -XX:-ReduceBulkZeroing -XX:+UnlockDiagnosticVMOptions -XX:+ExpandSubTypeCheckAtParseTime
(probably not all are required)

I have only seen these failures on aarch64 (macosx, linux), did not manage to reproduce it with replay file on my linux-x64 machine.

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/.../src/hotspot/share/opto/matcher.cpp:1707), pid=1316815, tid=1316830
#  assert(false) failed: bad AD file
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-10-14-1537132.emanuel.peter.fork3-jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-10-14-1537132.emanuel.peter.fork3-jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x1358e60]  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0xa3c",,,,,,,,,,,JDK-8299582,JDK-8296280,JDK-8297460,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296771,JDK-8256540,,,,,,,,,,,,,,,,,,,"2022-10-17 07:35;epeter;TestSubTypeCheckMacroTrichotomy_hs_err_pid1316815.log;https://bugs.openjdk.org/secure/attachment/101104/TestSubTypeCheckMacroTrichotomy_hs_err_pid1316815.log","2022-10-17 07:35;epeter;TestSubTypeCheckMacroTrichotomy_replay_pid1316815.log;https://bugs.openjdk.org/secure/attachment/101105/TestSubTypeCheckMacroTrichotomy_replay_pid1316815.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2ywur:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-17 09:27;chagedorn;Requires these flags to reproduce it:
-Xbatch -XX:CompileThreshold=100 -XX:-TieredCompilation -XX:+StressReflectiveCode -XX:+ExpandSubTypeCheckAtParseTime

ILW = C2 matching failure, only with single test and specific flag combo, use -XX:-StressReflectiveCode and -XX:-ExpandSubTypeCheckAtParseTime = HLL = P4;;;","2022-10-17 09:29;chagedorn;Can be traced back to JDK-8251462 which, however, just changed the compilation policy and seems to be unrelated and just revealed an existing bug.;;;","2022-10-18 12:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10749
Date: 2022-10-18 18:52:43 +0000;;;","2022-10-20 14:27;dukebot;Changeset: d3eba859
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-10-20 21:24:36 +0000
URL:       https://git.openjdk.org/jdk/commit/d3eba859f9c87465a8f1c0dfd6dd5aef368d5853
;;;","2022-11-21 20:52;xlinzheng;Fix request [19u]

This is a fix for a fast debug build assertion failure, and the impact is small.
Clean backport from 20.;;;","2022-11-21 21:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/78
Date: 2022-11-22 04:57:44 +0000;;;","2022-12-31 01:52;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Simple, aarch only C2 fix. Low risk.
Clean backport.
Test passes on aarch. SAP nightly testing passed.;;;","2023-01-01 10:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1015
Date: 2023-01-01 18:03:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/EATests.java fails with compiler flag -XX:+StressReflectiveCode,JDK-8295413,5085436,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rrich,epeter,epeter,2022-10-17 07:15,2023-01-12 23:39,2023-10-01 09:56,2022-10-24 01:01,20,,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,,"I ran:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork2-jdk/build/linux-x64-slowdebug/jdk/ -javaoptions:""-XX:+StressReflectiveCode"" /home/emanuel/Documents/fork2-jdk/open/test/jdk/com/sun/jdi/EATests.java

And got this:
Exception in thread ""main"" java.lang.RuntimeException: Caught unexpected exception
	at jdk.test.lib.Asserts.fail(Asserts.java:617)
	at EATestCaseBaseTarget.run(EATests.java:823)
	at EATestsTarget.main(EATests.java:192)
Caused by: java.lang.RuntimeException: EAMaterializeLocalVariableUponGet: expected test method frame at depth 1 to be deoptimized: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at EATestCaseBaseTarget.dontinline_brkpt(EATests.java:890)
	at EAMaterializeLocalVariableUponGetTarget.dontinline_testMethod(EATests.java:1128)
	at EATestCaseBaseTarget.run(EATests.java:818)
	... 1 more
STDERR:
[11ms] run args: [-XX:+UnlockDiagnosticVMOptions, -Xms256m, -Xmx256m, -Xbootclasspath/a:., -XX:CompileCommand=dontinline,*::dontinline_*, -XX:+WhiteBoxAPI, -Xbatch, -XX:+DoEscapeAnalysis, -XX:+EliminateAllocations, -XX:+EliminateLocks, -XX:+EliminateNestedLocks, EATestsTarget]
[5178ms] Note: Unexpected Debuggee Exception: java.lang.RuntimeException at line 617
[5188ms] detailMessage = ""Caught unexpected exception""
java.lang.RuntimeException: Unexpected exception in test case EAMaterializeLocalVariableUponGet
	at jdk.test.lib.Asserts.fail(Asserts.java:617)
	at EATestCaseBaseDebugger.run(EATests.java:417)
	at EATests.runTests(EATests.java:306)
	at TestScaffold.startTests(TestScaffold.java:433)
	at EATests.main(EATests.java:265)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1588)
Caused by: java.lang.RuntimeException: VM Disconnected before requested event occurred
	at TestScaffold.waitForRequestedEvent(TestScaffold.java:758)
	at TestScaffold.resumeTo(TestScaffold.java:814)
	at TestScaffold.resumeTo(TestScaffold.java:881)
	at EATestCaseBaseDebugger.resumeTo(EATests.java:428)
	at EATestCaseBaseDebugger.resumeToTestCaseDone(EATests.java:439)
	at EATestCaseBaseDebugger.run(EATests.java:414)
	... 7 more

JavaTest Message: Test threw exception: java.lang.RuntimeException",,,,,,,,,,,JDK-8300103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256540,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ywuj:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-10-17 09:32;dcubed;[~epeter] - please set the ""Affects Version/s"" value and add a comment
with some version info in it. Thanks!;;;","2022-10-18 00:26;epeter;I ran this on the main repository which I just checked out now:
java 20-internal 2023-03-21
Java(TM) SE Runtime Environment (fastdebug build 20-internal-2022-10-18-0715158.emanuel...)
Java HotSpot(TM) 64-Bit Server VM (fastdebug build 20-internal-2022-10-18-0715158.emanuel..., mixed mode);;;","2022-10-18 11:12;cjplummer;Fails on all supported platforms when run with fastdebug builds:

macosx-x64-debug
linux-x64-debug
windows-x64-debug
macosx-aarch64-debug
linux-aarch64-debug

Not applicable to product builds since -XX:+StressReflectiveCode can only be used with debug builds.;;;","2022-10-19 07:13;rrich;With -XX:+StressReflectiveCode C2 uses inexact types at allocations, etc., to test reflection. This has the effect that the allocations are marked as `GlobalEscape` which prevents scalarization and lock elimination. The test cases do expect these optimizations and also that accesses to optimized objects cause deoptimization. ;;;","2022-10-20 12:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10769
Date: 2022-10-19 15:43:17 +0000;;;","2022-10-24 01:01;dukebot;Changeset: 08d3ef4f
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2022-10-24 08:00:06 +0000
URL:       https://git.openjdk.org/jdk/commit/08d3ef4fe60460d94b0a2db0b6671adc56a6653c
;;;","2023-01-10 02:35;rrich;Fix request (17u)

I would like to backport this to jdk17u to avoid issues when running with -XX:+StressReflectiveCode
Applies cleanly.
This is just a test fix, so there's hardly any risk.

Tested on Linux x86_64 with fastdebug and release builds:

      make test TEST=test/jdk/com/sun/jdi/EATests.java TEST_VM_OPTS=""-XX:+IgnoreUnrecognizedVMOptions -XX:+StressReflectiveCode""
;;;","2023-01-10 02:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1042
Date: 2023-01-09 14:40:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
support latest VS2022 MSC_VER in abstract_vm_version.cpp,JDK-8295412,5085435,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-10-17 06:04,2023-01-09 08:43,2023-10-01 09:56,2022-10-18 00:46,17,20,,,,,,20,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"Currently the latest VS2022 versions are not supported when checking _MSC_VER in abstract_vm_version.cpp, that should be improved.
See 
https://learn.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-170
https://learn.microsoft.com/de-de/visualstudio/install/visual-studio-build-numbers-and-release-dates?view=vs-2022
Visual Studio 2022 version 17.3	1933
Visual Studio 2022 version 17.2	1932",,,,,,,,,,,JDK-8296434,JDK-8295942,JDK-8296432,JDK-8299824,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,"0|i2ywub:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-17 06:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10727
Date: 2022-10-17 13:19:48 +0000;;;","2022-10-18 00:46;dukebot;Changeset: bca7ab3c
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-10-18 07:43:59 +0000
URL:       https://git.openjdk.org/jdk/commit/bca7ab3c1109e6cff9b50ecdd3045cb0ae8f6953
;;;","2022-10-19 03:35;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well because the issue is present there too. The patch applies cleanly and is low risk.;;;","2022-10-19 03:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/808
Date: 2022-10-19 10:33:14 +0000;;;","2023-01-04 08:58;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Trivial change, low risk.
Clean backport.;;;","2023-01-04 09:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1638
Date: 2023-01-04 17:02:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 crash: Error: ShouldNotReachHere() in multiple vector tests with -XX:-MonomorphicArrayCheck -XX:-UncommonNullCast,JDK-8295407,5085428,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fgao,epeter,epeter,2022-10-17 05:15,2022-12-13 23:50,2023-10-01 09:56,2022-11-16 17:42,20,,,,,,,20,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,vectorapi,,,,,,,,,,,,,,,,"I ran the following tests with extra compiler flags:
-XX:+IgnoreUnrecognizedVMOptions -XX:-MonomorphicArrayCheck -XX:-UncommonNullCast

So far only seen it on aarch64 (linux / macosx)

jdk/incubator/vector/Float512VectorTests.java
jdk/incubator/vector/Vector128ConversionTests.java
jdk/incubator/vector/VectorMaxConversionTests.java

Error mixing types: vectorx[4]:{float_top} and float_top 

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/type.cpp:1179
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S107603/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/57d56251-e15d-4be2-a96f-2fece2c8162e/runs/971fce5c-2e86-4644-94a9-92f392cad7dc/workspace/open/src/hotspot/share/opto/type.cpp:1179), pid=1036744, tid=1036759
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-10-14-0755324.emanuel.peter.fork3-jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-10-14-0755324.emanuel.peter.fork3-jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x17d8378]  Type::typerr(Type const*) const+0x84
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6a05eca0-8afd-44ed-bb10-6608b5100f7c/runs/24fb71ad-6cc1-49b1-bb99-393b164a2865/testoutput/test-support/jtreg_open_test_jdk_jdk_vector/scratch/3/core.1036744)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S48953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6a05eca0-8afd-44ed-bb10-6608b5100f7c/runs/24fb71ad-6cc1-49b1-bb99-393b164a2865/testoutput/test-support/jtreg_open_test_jdk_jdk_vector/scratch/3/hs_err_pid1036744.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256540,,,,,,,,,,,JDK-8289422,,,,,,,,,"2022-10-17 05:21;epeter;Float512VectorTests_hs_err_pid54728.log;https://bugs.openjdk.org/secure/attachment/101102/Float512VectorTests_hs_err_pid54728.log","2022-10-17 05:21;epeter;Float512VectorTests_replay_pid54728.log;https://bugs.openjdk.org/secure/attachment/101103/Float512VectorTests_replay_pid54728.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b17,20,,,,,,,,"0|i2ywsr:",9223372036854775807,b25,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-17 07:53;chagedorn;ILW = Assertion failure in C2, only with -XX:-MonomorphicArrayCheck -XX:-UncommonNullCast, use -XX:+MonomorphicArrayCheck and/or -XX:+UncommonNullCast = HLM = P3;;;","2022-10-24 06:36;thartmann;Seems to be a regression in JDK 20, at least I can not reproduce with latest JDK 19.

Update: I narrowed it down to JDK-8289422 in JDK 20 b17.;;;","2022-10-25 01:47;thartmann;[~fgao], could you please have a look? Thanks.;;;","2022-10-26 00:39;fgao;Hi [~thartmann], thanks for reporting it and bisecting work.

For the loop like:
```
// float[] a, c;
// boolean[] mask;
for (int i = 0; i < a.length; i++) {
   c[i] = mask[i]? -a[i]: a[i];
}
```
it generates `CMoveF` nodes but superword can’t vectorize it, even if enabling `-XX:+UseCMoveUnconditionally -XX:+UseVectorCmov`.
```
Node_1 = CmpI LoadUB ConI
Node_2 = Bool Node_1 mask
Node_3 = CMoveF Node_2 NegF LoadF
```

Currently, only when enabling `UseVectorCmov`, superword will remove these unqualified `CMoveF` nodes from the pack candidate set, see https://github.com/openjdk/jdk/blob/b2878c904beb971da37b1da50a7294c460d6cef3/src/hotspot/share/opto/superword.cpp#L537. Without the option enabled, the `CMoveF` pack is kept in the packset and thus superword wrongly vectorizes its input `NegF` and `LoadF`. Finally, we get a scalar `CMoveF` node with two vector inputs, `NegVF` and `LoadVF`, which has wrong mixing types, then the assertion fails.

Also, considering that superword redefined the semantics of `CMoveVF`, containing the behavior of `VectorMaskCmp` + `VectorBlend` requiring for the same inputs, which is largely different from the semantics of scalar `CMoveF`, we need to check if the `CMoveF` is in a merged cmove pack, besides consulting whether the single scalar `CMoveF` is supported for vectorization in the current platform, https://github.com/openjdk/jdk/blob/b2878c904beb971da37b1da50a7294c460d6cef3/src/hotspot/share/opto/superword.cpp#L2103.

I'll propose a patch to fix it ASAP. Thanks.
;;;","2022-11-07 18:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11034
Date: 2022-11-08 02:36:13 +0000;;;","2022-11-15 23:27;kvn;I got 2 new failures which I did not see before.

First could be not related (but who knows): Running tier1_compiler_3 tests with stress testing flag -XX:StressLongCountedLoop=2000000  caused 
Exception in thread ""main"" java.lang.ClassFormatError: Unknown constant tag 0 in class file net/logstash/logback/encoder/org/apache/commons/lang/text/StrBuilder
 	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
 	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1012)
 	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:150)

Second could be related or not. Test jdk/incubator/vector/Vector512ConversionTests.java failed (1 time from 3 runs) on AVX512 machine with -XX:+IgnoreUnrecognizedVMOptions -XX:-MonomorphicArrayCheck -XX:-UncommonNullCast flags:

#
#  Internal Error (/workspace/open/src/hotspot/share/opto/buildOopMap.cpp:350), pid=3803, tid=3850
#  assert(false) failed: there should be a oop in OopMap instead of a live raw oop at safepoint
#

I attached hs_err and replay files.
;;;","2022-11-15 23:36;kvn;Vector512ConversionTests.java failure looks like JDK-8276064.
;;;","2022-11-15 23:39;kvn;I moved files to that bug.;;;","2022-11-16 17:42;dukebot;Changeset: cc444198
Author:    Fei Gao <fgao@openjdk.org>
Committer: Pengfei Li <pli@openjdk.org>
Date:      2022-11-17 01:39:56 +0000
URL:       https://git.openjdk.org/jdk/commit/cc44419840d98fed0bcdab66bbb835855f1a8a11
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
C1 crash with -XX:TypeProfileArgsLimit=0 -XX:TypeProfileLevel=222,JDK-8295406,5085427,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfenacci,epeter,epeter,2022-10-17 05:08,2023-01-11 23:03,2023-10-01 09:56,2023-01-08 23:58,11,17,18,19,20,8,,21,hotspot,,0,c1,oracle-triage-20,starter,,,,,,,,,,,,,,,,,,,"Run this to reproduce the crash:
./java -XX:TypeProfileArgsLimit=0 -XX:TypeProfileLevel=222 --version

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/c1_LIRGenerator.cpp:3074
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/emanuel/Documents/fork2-jdk/open/src/hotspot/share/c1/c1_LIRGenerator.cpp:3074), pid=2038898, tid=2038912
#  assert(MethodData::profile_parameters() && (MethodData::profile_arguments_jsr292_only() || (x->inlined() && ((code == Bytecodes::_invokedynamic && n <= 1) || (code == Bytecodes::_invokehandle && n <= 2))))) failed: only at JSR292 bytecodes
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-10-06-1045569.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-10-06-1045569.emanuel..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7016b0]  LIRGenerator::profile_arguments(ProfileCall*)+0x660
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/emanuel/Documents/fork2-jdk/build/linux-x64-slowdebug/jdk/bin/JTwork/scratch/core.2038898)
#
# An error report file with more information is saved as:
# /home/emanuel/Documents/fork2-jdk/build/linux-x64-slowdebug/jdk/bin/JTwork/scratch/hs_err_pid2038898.log
[thread 2038914 also had an error]
[thread 2038916 also had an error]
[thread 2038915 also had an error]
java 20-internal 2023-03-21
Java(TM) SE Runtime Environment (slowdebug build 20-internal-2022-10-06-1045569.emanuel...)
Java HotSpot(TM) 64-Bit Server VM (slowdebug build 20-internal-2022-10-06-1045569.emanuel..., mixed mode)
#
# Compiler replay data is saved as:
# /home/emanuel/Documents/fork2-jdk/build/linux-x64-slowdebug/jdk/bin/JTwork/scratch/replay_pid2038898.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256540,,,,,,,,,,,,,,,,,,,,"2022-10-17 05:09;epeter;hs_err_pid2040847.log;https://bugs.openjdk.org/secure/attachment/101100/hs_err_pid2040847.log","2022-10-17 05:09;epeter;replay_pid2040847.log;https://bugs.openjdk.org/secure/attachment/101101/replay_pid2040847.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ywsj:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-17 06:27;chagedorn;ILW = Assertion failure in C1, only with -XX:TypeProfileArgsLimit=0 -XX:TypeProfileLevel=222, use default flag values = MLM = P4  ;;;","2022-11-15 14:27;xliu;hi, [~thartmann]
Are you working on issue? I am helping my colleague to get familiar with hotspot codebase. if you are happy with it, we can take it over. 
--lx


;;;","2022-11-15 22:41;thartmann;Hi [~xliu], I'm currently not working on it but we have a new hire starting in two weeks that will take the starter issues assigned to me.;;;","2023-01-05 23:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11843
Date: 2023-01-04 13:41:36 +0000;;;","2023-01-08 23:58;dukebot;Changeset: 9b1ade8e
Author:    Damon Fenacci <damon.fenacci@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-01-09 07:56:11 +0000
URL:       https://git.openjdk.org/jdk/commit/9b1ade8e2b324b3875bf97c70d8591c577568c32
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add cause in a couple of IllegalArgumentException and InvalidParameterException shown by sun/security/pkcs11 tests,JDK-8295405,5085426,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-10-17 03:33,2023-02-15 00:54,2023-10-01 09:56,2022-10-28 00:08,20,,,,,,,20,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"We have a number of failing sun/security/pkcs11 test on RHEL 8.6, see 

https://bugs.openjdk.org/browse/JDK-8295343
8295343 : sun/security/pkcs11 tests fail on Linux RHEL 8.6

The exceptions generated by these tests sometimes miss the cause (causing exception), it would be nice to have this added to get the complete exception backtrace.",,,,,,,,,,,JDK-8301579,JDK-8297629,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295343,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ywsb:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Not verified,,"2022-10-17 03:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10726
Date: 2022-10-17 10:42:18 +0000;;;","2022-10-28 00:08;dukebot;Changeset: d5d34241
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-10-28 07:04:27 +0000
URL:       https://git.openjdk.org/jdk/commit/d5d34241e21305379f1858556f225e7645cd294e
;;;","2022-11-18 05:28;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well, because it would enhance exceptions there and  this way would be helpful to make some error situations clearer. The patch is low risk and applies cleanly.;;;","2022-11-18 05:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/900
Date: 2022-11-18 13:23:30 +0000;;;","2023-01-30 06:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1696
Date: 2023-01-30 14:32:16 +0000;;;","2023-01-30 06:48;mbaesken;jdk11 backport request
I would like to have the patch in jdk11u-dev as well, because it would enhance exceptions there and this way would be helpful to make some error situations clearer. The patch is low risk  but not clean, needs minor adjustments (COPYRIGHT YEAR in CertAndKeyGen.java, some diffs in 2 strides).;;;","2023-01-31 02:21;goetz;[11u]
Matthias, do you expect any incompatibilities because of the more verbose exception messages?  What kind of information is it that is printed?  Are more exception objects kept alive potentially increasing memory consumption?;;;","2023-01-31 08:07;mbaesken;Hi Goetz, we added printing the causing exception, ""caused by ... ""  and afterwards the real exception causing the issue.  In case someone parses the *exact* whole exception output, in theory the change might bring a compatibility issue but I see it as rather unlikely; backport to jdk17 last year did not show any issues.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Error recovery in module-info.java could be improved,JDK-8295401,5085422,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2022-10-17 03:01,2022-12-05 14:05,2023-10-01 09:56,2022-11-30 01:51,20,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"Consider code like:
---
module m {
     provides com.
}
---

When this code is parsed, the AST will not contain the provides directive, due to not ideal error recovery. Note this is unlike to other directives, which are included even if they are not fully written.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ywrf:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-17 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10728
Date: 2022-10-17 14:19:05 +0000;;;","2022-11-30 01:51;dukebot;Changeset: b52611bc
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-11-30 09:49:51 +0000
URL:       https://git.openjdk.org/jdk/commit/b52611bc36d4fa7b62d1bb1618aa5185f75bf5d0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Linux Alpha Zero builds fail after JDK-8292591,JDK-8295395,5085413,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-10-17 00:40,2022-10-31 04:11,2023-10-01 09:56,2022-10-17 10:57,20,,,,,,,20,hotspot,,0,JDK-8292591,,,,,,,,,,,,,,,,,,,,,"```
* For target hotspot_variant-zero_libjvm_objs_systemMemoryBarrier_linux.o:
cc1plus: warning: -fstack-protector not supported for this target
src/hotspot/os/linux/systemMemoryBarrier_linux.cpp:43:4: error: #error define SYS_membarrier for the arch
   #error define SYS_membarrier for the arch
    ^~~~~
src/hotspot/os/linux/systemMemoryBarrier_linux.cpp: In function 'int membarrier(int, unsigned int, int)':
src/hotspot/os/linux/systemMemoryBarrier_linux.cpp:65:18: error: 'SYS_membarrier' was not declared in this scope
   return syscall(SYS_membarrier, cmd, flags, cpu_id); // cpu_id only on >= 5.10
                  ^~~~~~~~~~~~~~
At global scope:
```

This only fails with Debian 9 (GCC 6, GLIBC 2.24, Linux 4.9), more recent versions have the definition.

There:

```
/usr/alpha-linux-gnu/include/bits/syscall.h
898:#ifdef __NR_membarrier
899:# define SYS_membarrier __NR_membarrier

/usr/alpha-linux-gnu/include/asm-generic/unistd.h
755:#define __NR_membarrier 283
756:__SYSCALL(__NR_membarrier, sys_membarrier)
```

We can just add the fallback definition in the relevant block.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292591,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ywpf:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-17 00:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10721
Date: 2022-10-17 07:44:55 +0000;;;","2022-10-17 10:57;dukebot;Changeset: b269c51d
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-10-17 17:56:49 +0000
URL:       https://git.openjdk.org/jdk/commit/b269c51d10c353d9b7143b2239beb23c01352182
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CompactNumberFormat handling of number one with decimal part,JDK-8295372,5085318,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2022-10-13 22:36,2023-01-31 03:45,2023-10-01 09:56,2022-10-20 10:05,17,18,19,20,,,,20,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Certain languages such as DE, ES, IT, or PT treat the number 1.1 as plural. But JDK returns the long formats in singular form for these cases. E.g., expecting '1,1 millones' for ES but received '1,1 millón' instead.

CLDR Standards:
https://www.unicode.org/cldr/cldr-aux/charts/28/verify/numbers/es.html
https://www.unicode.org/cldr/cldr-aux/charts/28/verify/numbers/de.html
https://www.unicode.org/cldr/cldr-aux/charts/28/verify/numbers/it.html
https://www.unicode.org/cldr/cldr-aux/charts/28/verify/numbers/pt.html
...


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Execute the provided test code to reproduce the error.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
1,1 millones
ACTUAL -
1,1 millón

---------- BEGIN SOURCE ----------
import java.text.NumberFormat;
import java.util.Locale;

public class TestCompactNumberFormat {
    public static void main(String[] args) {
        NumberFormat fmt = NumberFormat.getCompactNumberInstance(
                new Locale(""es""), NumberFormat.Style.LONG);
        fmt.setMaximumFractionDigits(1);
        System.out.println(fmt.format(1_100_000));
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-14 11:53;tongwan;TestCompactNumberFormat.java;https://bugs.openjdk.org/secure/attachment/101083/TestCompactNumberFormat.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2yw4b:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,Verified,,"2022-10-14 11:50;tongwan;The observations on Windows 10:
JDK 17: Failed, the output is not 1,1 millones
JDK 18: Failed.
JDK 19: Failed.
JDK 20ea+4: Failed.;;;","2022-10-15 03:11;rgiulietti;I'm an Italian native speaker, so I second what the reporter points out: in Italian we would say ""1.1 milioni"" (plural), and not ""1.1 milione"" (singular).;;;","2022-10-17 13:36;naoto;The plural logic only considered the integer part of the number. Should also take the fraction part into consideration.;;;","2022-10-18 10:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10748
Date: 2022-10-18 17:44:45 +0000;;;","2022-10-20 10:05;dukebot;Changeset: e238920b
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-10-19 16:24:15 +0000
URL:       https://git.openjdk.org/jdk/commit/e238920bb69836e982138cb7e1fed2a39182df8f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update java.io.ObjectStreamField to use Class.descriptorString,JDK-8295370,5085374,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2022-10-14 11:18,2022-10-19 23:17,2023-10-01 09:56,2022-10-14 16:48,,,,,,,,20,core-libs,,0,noreg-sqe,,,,,,,,,,,,,,,,,,,,,"java.io.ObjectStreamField predates the addition of Class.descriptorString().
The code for constructing type signatures should be replaced by Class.descriptorString().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ywgr:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,,,"2022-10-14 11:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10714
Date: 2022-10-14 18:23:58 +0000;;;","2022-10-14 16:48;dukebot;Changeset: 20874247
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2022-10-14 23:45:03 +0000
URL:       https://git.openjdk.org/jdk/commit/2087424736f15a5a80a0492993a6cd74da87188a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Attempted] Update LCMS to 2.14,JDK-8295369,5085373,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,achung,vdyakov,vdyakov,2022-10-14 10:25,2022-11-28 14:45,2023-10-01 09:56,2022-11-15 14:15,11,17,20,8,,,,20,client-libs,,0,littlecms,sn_130,sn_131,,,,,,,,,,,,,,,,,,,"LittleCMS (aka LCMS) 2.14 released on Nov 1, 2022: 
https://github.com/mm2/Little-CMS/releases/tag/lcms2.14

We should upgrade JDK 20 to use this last one.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260380,,,,,,,,,,,,,,,,,,,JDK-8297088,JDK-8297089,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ywgj:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-10-16 14:01;prr;There's now a 2.14 release candidate, so we should pick up 2.14 (GA) instead
https://github.com/mm2/Little-CMS/releases/tag/lcms2.14rc1
It is supposed to be GA by the end of this month.;;;","2022-11-01 09:39;prr;2.14 was released today https://github.com/mm2/Little-CMS/releases;;;","2022-11-07 09:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11000
Date: 2022-11-04 22:44:11 +0000;;;","2022-11-15 14:15;dukebot;Changeset: 6a60d318
Author:    Alisen Chung <achung@openjdk.org>
Date:      2022-11-15 22:12:24 +0000
URL:       https://git.openjdk.org/jdk/commit/6a60d318b64d7f478d0d43dd1362cd27894a09dc
;;;","2022-11-16 21:28;prr;Backed out by https://bugs.openjdk.org/browse/JDK-8297089
Will be retried as https://bugs.openjdk.org/browse/JDK-8297088
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mark Register v24 as Volatile in Foreign Function & Memory C ABI Definition,JDK-8295353,5085356,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,macarte,macarte,macarte,2022-10-14 07:47,2022-11-01 07:53,2023-10-01 09:56,2022-11-01 07:53,repo-panama,,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,"[creating on behalf of Saint Wesonga]

The C ABI defined by the Foreign Function & Memory API does not include v24 in the list of volatile floating point vector registers. As per the spec, v16-v31 do not need to be preserved. See https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#612simd-and-floating-point-registers



The definition of the volatile vector registers is at https://github.com/openjdk/panama-foreign/blob/b9e9a20a4e6f3d3d0f35dd35499911eca0de6893/src/java.base/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java#L88",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,windows,,,,,,"0|i2ywcr:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-10-31 20:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/743
Date: 2022-10-14 16:06:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/lang/Float/Binary16Conversion.java fails with ""Unexpected result of converting""",JDK-8295351,5085353,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,svkamath,dcubed,dcubed,2022-10-14 07:09,2023-01-23 14:11,2023-10-01 09:56,2022-11-28 11:26,20,,,,,,,20,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,problemlist,regression,tier6,tier8,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/lang/Float/Binary16Conversion.java

Here's a snippet from the log file:

#section:main
----------messages:(7/234)----------
command: main Binary16Conversion
reason: User specified action: run main Binary16Conversion 
started: Fri Oct 14 00:25:20 UTC 2022
Mode: agentvm
Agent id: 22
finished: Fri Oct 14 00:25:21 UTC 2022
elapsed time (seconds): 0.773
----------configuration:(14/1341)*----------

<snip>

----------System.out:(10/791)----------
Unexpected result of converting 0x1.1dff7ep30 to short. Expected 0x7bff got 0x7c00
Unexpected result of converting -0x1.1dff7ep30 to short. Expected 0xfbff got 0xfc00
Unexpected result of converting 0x1.1dff8p30 to short. Expected 0x7bff got 0x7c00
Unexpected result of converting -0x1.1dff8p30 to short. Expected 0xfbff got 0xfc00
Unexpected result of converting 0x1.1dff82p30 to short. Expected 0x7bff got 0x7c00
Unexpected result of converting -0x1.1dff82p30 to short. Expected 0xfbff got 0xfc00
Unexpected result of converting 0x1.1dff7ep30 to short. Expected 0x7bff got 0x7c00
Unexpected result of converting -0x1.1dff7ep30 to short. Expected 0xfbff got 0xfc00
Round-to-nearest violation on converting 0x1.0p0 to binary16 and back.
Different conversion of float value 0x1.0p1
----------System.err:(10/531)----------
java.lang.RuntimeException: 10 errors
	at Binary16Conversion.main(Binary16Conversion.java:47)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 10 errors",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289552,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,linux,os_x,windows,,,,"0|i2ywc3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-10-15 07:30;alanb;It fails with -Xcomp -XX:CompileThreshold=100 -XX:-TieredCompilation  but passing if the newly added intrinsics are disabled with -XX:DisableIntrinsic=_float16ToFloat,_floatToFloat16. So I assume related to JDK-8289552 so I will move to hotspot/compiler.

;;;","2022-10-15 07:35;dcubed;[~alanb] - Thanks I was just going to suggest moving this to hotspot/compiler since
it only fails in -Xcomp mode.;;;","2022-10-15 10:21;kvn;Test passed after reverting JDK-8289552 changes
;;;","2022-10-15 10:24;kvn;[~svkamath] Please, look on this failure. It is regression after your latest changes.

It reproduces easy with `-Xcomp -XX:-TieredCompilation` flags.
;;;","2022-10-17 06:24;chagedorn;ILW = Conversion error of floats, single test, no workaround = HLH = P2;;;","2022-10-17 08:39;svkamath;[~kvn] Thanks, I will take a look at it.;;;","2022-11-22 20:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11301
Date: 2022-11-22 21:52:59 +0000;;;","2022-11-28 11:26;dukebot;Changeset: 105d9d75
Author:    Smita Kamath <svkamath@openjdk.org>
Committer: Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2022-11-28 19:24:25 +0000
URL:       https://git.openjdk.org/jdk/commit/105d9d75e84a46400f52fafda2ea00c99c14eaf0
;;;","2022-11-28 14:05;dcubed;The fix for this bug is integrated in jdk-20+26-1972.;;;","2023-01-23 14:11;epavlova;java/lang/Float/Binary16Conversion.java test passed in JDK20 ATR.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
DatePicker updates its value property with wrong date when dialog closes,JDK-8295339,5085027,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kpk,webbuggrp,webbuggrp,2022-10-10 09:43,2022-12-23 08:21,2023-10-01 09:56,2022-12-10 10:00,jfx18,jfx19,jfx20,,,,,jfx20,javafx,,0,dcspn,regression,reproducer-yes,sn_132,sn_133,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When the user changes the value of a DatePicker interactively via the dropdown and the value change at the same time triggers the closing of the dialog where the picker is being displayed then the new code for updating the date value upon ""focus lost"" will use the old date that is still being displayed inside the editor field (the textfield).

REGRESSION : Last worked in version openjfx17

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expecting the newly selected date and ONLY the newly selected date.
ACTUAL -
First we receive the new date, then the code for handling ""focus lost"" will revert the date based on the text found inside the editor field.

---------- BEGIN SOURCE ----------
// Provided by Dirk Lemmermann
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.stage.Stage;

import java.time.LocalDate;

public class DatePickerBug extends Application {
    
    @Override
    public void start(Stage primaryStage) throws Exception {
        DatePicker picker = new DatePicker(LocalDate.now());

        Alert dialog = new Alert(AlertType.INFORMATION);
        dialog.setTitle(""Date Picker"");
        dialog.getDialogPane().setContent(picker);

        Button button = new Button(""Show Dialog"");
        button.setOnAction(evt -> {
            dialog.show();
        });

        picker.valueProperty().addListener(it -> {
            System.out.println(""date: "" + picker.getValue());
            dialog.close();
        });

        Scene scene = new Scene(button);
        primaryStage.setTitle(""Date Picker Bug"");
        primaryStage.setScene(scene);
        primaryStage.setWidth(300);
        primaryStage.setHeight(250);
        primaryStage.centerOnScreen();
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Manually update the editor field before dealing with the new value. Example:

        datePicker.valueProperty().addListener((obs, oldValue, newValue) -> {
                datePicker.getEditor().setText(datePicker.getConverter().toString(newValue));
                // do your thing
               .....
        });


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277756,,,,,,,,,"2022-10-14 05:09;pnarayanaswa;DatePickerBug.java;https://bugs.openjdk.org/secure/attachment/101081/DatePickerBug.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b10,jfx18,,generic,,,,,,"0|i2yubn:",9223372036854775807,b12,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-10-10 10:42;kcr;Also reported on the openjfx-dev mailing list in this message:

https://mail.openjdk.org/pipermail/openjfx-dev/2022-October/036100.html;;;","2022-10-14 05:09;pnarayanaswa;Checked with attached testcase in Windows 10, issue is reproducible, user changed date is not retained.
Test Result
=========
openjfx17: Pass
openjfx18 b08 :Pass
openjfx18 b10: Fail
openjfx19 : Fail
openjfx20ea4: Fail;;;","2022-12-07 09:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/963
Date: 2022-11-28 12:42:15 +0000;;;","2022-12-10 10:00;dukebot;Changeset: dadfcaf4
Author:    Karthik P K <kpk@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-12-10 17:58:34 +0000
URL:       https://git.openjdk.org/jfx/commit/dadfcaf43f4bc682aa7a73cbe6f2ede88f89a639
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaFX - IllegalArgumentException when printing with margins equal to 0,JDK-8295327,5085331,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,fkirmaier,fkirmaier,2022-10-14 01:57,2022-11-29 06:11,2023-10-01 09:56,2022-11-03 08:28,jfx19,,,,,,,jfx20,javafx,,0,sn_130,,,,,,,,,,,,,,,,,,,,,"At least on Windows, an IllegalArgumentException is thrown when printing with margins equal to 0.



Caused by: java.lang.IllegalArgumentException: Margins must be >= 0
    at javafx.print.Printer.createPageLayout(Printer.java:359) ~[javafx-graphics-19.0.0-CZM-01-win.jar:?]
    at com.sun.prism.j2d.print.J2DPrinterJob.updatePageLayout(J2DPrinterJob.java:519) ~[javafx-graphics-19.0.0-CZM-01-win.jar:?]
    at com.sun.prism.j2d.print.J2DPrinterJob.updateSettingsFromDialog(J2DPrinterJob.java:600) ~[javafx-graphics-19.0.0-CZM-01-win.jar:?]
    at com.sun.prism.j2d.print.J2DPrinterJob.showPageDialog(J2DPrinterJob.java:296) ~[javafx-graphics-19.0.0-CZM-01-win.jar:?]
    at javafx.print.PrinterJob.showPageSetupDialog(PrinterJob.java:337) ~[javafx-graphics-19.0.0-CZM-01-win.jar:?]
    at com.zeiss.forum.viewer.feature.actions.print.pdf.ImagePrintFx.print(ImagePrintFx.java:122) ~[classes/:?]
    ... 62 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-14 01:58;fkirmaier;MicrosoftTeams-image (1).png;https://bugs.openjdk.org/secure/attachment/101077/MicrosoftTeams-image+%281%29.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yw77:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-10-17 14:45;kcr;The code in question only throws the exception if one of the 4 margins is < 0, so it doesn't look like the bug is in the page layout code. The only caller of that method clamps to zero anything that is near zero, so that seems fine. It looks like somehow the margin values are coming out negative. Maybe Phil has some ideas on this.;;;","2022-10-24 11:56;prr;I need to dig into this but ""A4"" is measured in mm and internally we are using 1/72"" .. so somewhere we need to take a look at whether the conversion and then some addition/subtraction arithmetic can cause us to end up with something like ""-0.000012345"" inches .. ;;;","2022-10-24 13:29;prr;The code is
            if (Math.abs(lm) < 0.01) lm = 0;
            if (Math.abs(rm) < 0.01) rm = 0;
            if (Math.abs(tm) < 0.01) tm = 0;
            if (Math.abs(bm) < 0.01) bm = 0;
            newLayout = fxPrinter.createPageLayout(paper, orient,
                                                   lm, rm, tm, bm);

So .. if we actually had ""-0.01"" then we'd let that through (oops).
The expectation that we'd not have rounding issues at 10^-2 is apparently wrong.
I think we just need to ditch the Math.abs(). ;;;","2022-10-31 14:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/934
Date: 2022-10-31 21:30:51 +0000;;;","2022-11-03 08:28;dukebot;Changeset: 748107a0
Author:    Phil Race <prr@openjdk.org>
Date:      2022-11-03 15:24:14 +0000
URL:       https://git.openjdk.org/jfx/commit/748107a09949594828a600abcccbabb6ca381c2d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tools/jlink/plugins/SaveJlinkArgfilesPluginTest.java fails on Linux ppc64le,JDK-8295325,5085328,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-10-14 00:53,2022-10-19 23:18,2023-10-01 09:56,2022-10-16 23:56,20,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"The test tools/jlink/plugins/SaveJlinkArgfilesPluginTest.java fails on Linux ppc64le because it assumes that vm.jvmci is
available on all platforms but this is currently not the case on Linux ppc64le.
Error is :

Error: Module jdk.internal.vm.ci not found
java.lang.module.FindException: Module jdk.internal.vm.ci not found
	at java.base/java.lang.module.Resolver.findFail(Resolver.java:892)
	at java.base/java.lang.module.Resolver.resolve(Resolver.java:129)
	at java.base/java.lang.module.Configuration.resolve(Configuration.java:420)
	at java.base/java.lang.module.Configuration.resolve(Configuration.java:254)
	at jdk.jlink/jdk.tools.jlink.internal.Jlink$JlinkConfiguration.resolve(Jlink.java:217)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.createImageProvider(JlinkTask.java:551)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.createImage(JlinkTask.java:439)
	at jdk.jlink/jdk.tools.jlink.internal.JlinkTask.run(JlinkTask.java:291)
	at jdk.jlink/jdk.tools.jlink.internal.Main.run(Main.java:56)
	at jdk.jlink/jdk.tools.jlink.internal.Main$JlinkToolProvider.run(Main.java:73)
	at tests.JImageGenerator$JLinkTask.call(JImageGenerator.java:715)
	at tests.Helper.generateDefaultImage(Helper.java:257)
	at SaveJlinkArgfilesPluginTest.main(SaveJlinkArgfilesPluginTest.java:66)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,,"0|i2yw6j:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2022-10-14 04:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10713
Date: 2022-10-14 11:16:50 +0000;;;","2022-10-16 23:56;dukebot;Changeset: b3bb3e6e
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-10-17 06:53:49 +0000
URL:       https://git.openjdk.org/jdk/commit/b3bb3e6ed89f3abcaae584fcbe75688141e886cb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaFX: Blank pages when printing,JDK-8295324,5085327,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fkirmaier,fkirmaier,fkirmaier,2022-10-14 00:28,2022-12-09 16:12,2023-10-01 09:56,2022-12-06 04:50,jfx19,,,,,,,jfx20,javafx,,0,,,,,,,,,,,,,,,,,,,,,,"From time to time only blank pages are printed out.
Unfortunately, there are no clear reproduction steps.
But with the attached JUnit test it is always reproducible.

The attached test is a .patch, because it requires other changes in JFX to work.

The test was written by Sedov Eduard",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-14 00:28;fkirmaier;SkippingPageWhenPrinting.patch;https://bugs.openjdk.org/secure/attachment/101076/SkippingPageWhenPrinting.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yw6b:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-10-14 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/916
Date: 2022-10-14 15:45:10 +0000;;;","2022-12-06 04:49;dukebot;Changeset: 7b3c88b5
Author:    Eduard Sedov <eduard.sedov@zeiss.com>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-12-06 12:48:17 +0000
URL:       https://git.openjdk.org/jfx/commit/7b3c88b5aeb802c756056bc3bf9a167dc359f1ab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tests for JDK-8271459 were not backported to 11u,JDK-8295322,5085325,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,apavlyutkin,apavlyutkin,apavlyutkin,2022-10-13 23:36,2022-12-01 02:29,2023-10-01 09:56,2022-10-25 03:31,11,8,,,,,,11.0.18,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,sustaining,,,,,,,,,,,,,,,,,"Original tests created in the scope of JDK-8271459 are based on IR test framework, thus they were not backported to the jdk11u-dev where the framework does not present. This one imples re-factoring of the tests and encorporating them into the 11 and the 8",,,,,,,,,,,JDK-8297935,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271459,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2yw5v:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-10-14 03:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1460
Date: 2022-10-14 09:13:29 +0000;;;","2022-10-20 20:18;apavlyutkin;Fix request (11u)

The patch adapts original tests created in the scope of JDK-8271459 to the 11.

Verified on amd64/20.04LTS:

7 of 7 new tests PASS with integrated JDK-8271459
4 of 7 new tests FAIL before the integration;;;","2022-10-25 03:31;dukebot;Changeset: 70ddb1b0
Author:    Alexey Pavlyutkin <apavlyutkin@azul.com>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2022-10-25 10:29:59 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/70ddb1b025ce3b8eed4d8ad5af1b1fa4d0e0b015
;;;","2022-11-01 00:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/152
Date: 2022-11-01 07:31:19 +0000;;;","2022-11-01 07:53;apavlyutkin;Fix request (8u)

The patch adds missed tests for JDK-8271459. Except the path shuffling the following changes were done to the original patch:

- visibility of test class and methods was changed to public to support older JTReg
- requires annotation was removed to support older JTReg

Verification (amd64/20.04 LTS): running new hotspot/test/compiler/c2/TestNegativeStringBuilderCapacity.java

7 of 7 new tests PASS with integrated JDK-8271459
4 of 7 new tests FAIL before the integration;;;","2022-11-02 04:50;dukebot;Changeset: 70ddb1b0
Author:    Alexey Pavlyutkin <apavlyutkin@azul.com>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2022-10-25 10:29:59 +0000
URL:       https://git.openjdk.org/jdk11u/commit/70ddb1b025ce3b8eed4d8ad5af1b1fa4d0e0b015
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem list TrayIcon tests that fail on Ubuntu 22.04,JDK-8295301,5085303,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2022-10-13 14:02,2023-09-26 02:18,2023-10-01 09:56,2022-10-13 14:38,,,,,,,,20,client-libs,,0,jdk11u-todo,noreg-self,,,,,,,,,,,,,,,,,,,,"https://bugs.openjdk.org/browse/JDK-8295300 lists 7 TrayIcon tests that fail on Ubuntu 22.04.
We need to problem list these until the issue is resolved.",,,,,,,,,,,JDK-8314814,JDK-8314815,JDK-8315188,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295300,,,,,,,,,,,JDK-8314775,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yw0z:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-10-13 14:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10705
Date: 2022-10-13 21:21:12 +0000;;;","2022-10-13 14:38;dukebot;Changeset: fdb74ed4
Author:    Phil Race <prr@openjdk.org>
Date:      2022-10-13 21:37:28 +0000
URL:       https://git.openjdk.org/jdk/commit/fdb74ed45240477bd08eb40ede5eaa2345ca6b5d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Automate javax/swing/JFileChooser/FileViewNPETest.java,JDK-8295298,5085299,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-10-13 12:55,2023-03-05 21:26,2023-10-01 09:56,2022-10-24 10:34,20,,,,,,,20,client-libs,,0,cssn22_10_02,noreg-self,sustaining,ursqe-triaged,,,,,,,,,,,,,,,,,,"As identified on code review [1] for JDK-6616245, the added test — test/jdk/javax/swing/JFileChooser/FileViewNPETest.java — could be automated.

This is to automate it if possible.

[1] https://github.com/openjdk/jdk/pull/10485#discussion_r993912107",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6616245,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b19,20,,,,,,,,"0|i2yw03:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-10-20 12:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10801
Date: 2022-10-20 19:31:27 +0000;;;","2022-10-24 10:34;dukebot;Changeset: 68cf248b
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-10-24 17:29:51 +0000
URL:       https://git.openjdk.org/jdk/commit/68cf248b440a09c4d9bd16c862473f6a97cde279
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS ArchivedEnumTest fails with StaticProperty::JAVA_LOCALE_USE_OLD_ISO_CODES,JDK-8295295,5085295,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,iklam,iklam,2022-10-13 11:18,2022-10-19 23:15,2023-10-01 09:56,2022-10-13 11:54,20,,,,,,,20,hotspot,,0,archive-heap,cds,tier2,,,,,,,,,,,,,,,,,,,"This happens after JDK-8295232

[2.351s][warning][cds,heap] Archive heap points to a static field that may be reinitialized at runtime:
[2.351s][warning][cds,heap] Field: jdk/internal/util/StaticProperty::JAVA_LOCALE_USE_OLD_ISO_CODES
[2.351s][warning][cds,heap] Value: java.lang.String 
[2.351s][warning][cds,heap] {0x00000000c18f6028} - klass: 'java/lang/String'
[2.351s][warning][cds,heap]  - string: """"
[2.351s][warning][cds,heap]  - ---- fields (total size 3 words):
[2.351s][warning][cds,heap]  - private 'hash' 'I' @12  0 (0x00000000)
[2.351s][warning][cds,heap]  - private final 'coder' 'B' @16  0 (0x00)
[2.351s][warning][cds,heap]  - private 'hashIsZero' 'Z' @17  true (0x01)
[2.351s][warning][cds,heap]  - abstract internal 'flags' 'B' @18  0 (0x00)
[2.351s][warning][cds,heap]  - private final synchronized 'value' '[B' @20  [B{0x00000000c18f6040} (0xc18f6040)
[2.351s][warning][cds,heap] --- trace begin ---
[2.351s][warning][cds,heap] [ 0] (shared string table)
[2.351s][warning][cds,heap] [ 1] {0x00000000c18f6028} java.lang.String
[2.351s][warning][cds,heap] --- trace end ---
[2.351s][warning][cds,heap] 
[2.353s][warning][cds,heap] Scanned 23829 objects. Found 1 case(s) where an object points to a static field that may be reinitialized at runtime.

================
The fix is to add this field to the exception table in src/hotspot/share/cds/cdsHeapVerifier.cpp
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295232,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvz7:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-13 11:18;iklam;Set priority to P3 since this causes tier2 failure.;;;","2022-10-13 11:54;dukebot;Changeset: f5f8df11
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-10-13 18:50:29 +0000
URL:       https://git.openjdk.org/jdk/commit/f5f8df11ce146f8b33963eea4de6ccf9d2373ff3
;;;","2022-10-13 11:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10702
Date: 2022-10-13 18:32:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Misc cleanups in runtime/InvocationTests,JDK-8295294,5085294,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vlivanov,vlivanov,vlivanov,2022-10-13 11:16,2022-10-19 23:17,2023-10-01 09:56,2022-10-14 10:47,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"Address the following problems in runtime/InvocationTests:
  - Test case tracing output is omitted.
  - Stand-alone test case executors are broken.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvyz:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-13 13:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10701
Date: 2022-10-13 18:17:42 +0000;;;","2022-10-14 10:47;dukebot;Changeset: 8487c56f
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2022-10-14 17:46:11 +0000
URL:       https://git.openjdk.org/jdk/commit/8487c56f7ea224169d9d42efda9efb824266289f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add Windows ARM64 ABI support to the Foreign Function & Memory API,JDK-8295290,5085290,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,macarte,macarte,macarte,2022-10-13 10:01,2023-01-10 20:27,2023-10-01 09:56,2023-01-10 20:27,repo-panama,,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,,,,,"[creating on behalf of Saint Wesonga]

Windows on ARM64 is not currently supported by the Foreign Function & Memory API. A new CallArranger is required for this platform.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,windows,,,,,,"0|i2yvy3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-11-22 11:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/754
Date: 2022-11-22 19:01:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(false) failed: bad AD file,JDK-8295289,5085289,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2022-10-13 09:54,2022-11-02 04:47,2023-10-01 09:56,2022-10-16 22:50,11.0.16,11.0.17,11.0.2,,,,,11.0.18,hotspot,,0,dcsswa,javafuzzer,oracle-triage-20,reproducer-yes,sustaining,webbug,,,,,,,,,,,,,,,,Open Source clone of the 11.0.18-oracle issue.,,,,,,,,,,JDK-8291461,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8076276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,,"0|i2yvxv:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-13 13:31;mdoerr;Fix Request (11u):
Should get fixed for parity with 11.0.18-oracle. Fix is trivial, tested and reviewed (see https://github.com/openjdk/jdk11u-dev/pull/1459 ).
;;;","2022-10-16 22:50;dukebot;Changeset: b092d77b
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-10-17 05:49:11 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/b092d77b379755828ee4ec367d58ce5e2df60ec0
;;;","2022-11-02 04:47;dukebot;Changeset: b092d77b
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-10-17 05:49:11 +0000
URL:       https://git.openjdk.org/jdk11u/commit/b092d77b379755828ee4ec367d58ce5e2df60ec0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Expand {@inheritDoc} in @throws fully,JDK-8295277,5085273,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-10-13 06:32,2022-11-28 14:46,2023-10-01 09:56,2022-11-16 01:45,20,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,,"The solution provided for JDK-6509045 and JDK-8067757 becomes inadequate if documentation inheritance depth > 1 and {@inheritDoc} expands to multiple @throws tags on the higher levels of the inheritance hierarchy.

The solution fails because the code that processes {@inheritDoc} in that case does not have necessary context to complete its job. While every @throws tag that a particular {@inheritDoc} expands to, translates to a separate entry in the ""Throws:"" section, by the time such an {@inheritDoc} is processed, the ""Throws:"" section is unavailable.

One solution is to process {@inheritDoc} deeply and collectively in ThrowsTaglet#getAllBlockTagOutput. This hijacks the model of context-free processing, however, it does so just for one specific tag: @throws. 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6509045,JDK-8067757,,,,,,,,,,JDK-8285488,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvub:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-10-13 08:06;prappo;There's this TagletWriterImpl.Context class. It could be explored in an alternative approach to fix this issue.;;;","2022-10-18 13:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10746
Date: 2022-10-18 15:05:16 +0000;;;","2022-11-16 01:45;dukebot;Changeset: 499406c7
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-11-16 09:43:21 +0000
URL:       https://git.openjdk.org/jdk/commit/499406c764ba0ce57079b1f612297be5b148e5bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"HelidonAppTest.java fails ""assert(event->should_commit()) failed: invariant"" from compiled frame""",JDK-8295274,5085270,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,dcubed,dcubed,2022-10-13 05:45,2022-10-19 23:16,2023-10-01 09:56,2022-10-14 05:37,20,,,,,,,20,hotspot,,0,tier5,,,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

applications/helidonapp/HelidonAppTest.java

Here's a snippet from the log file:

[2022-10-13T05:39:07.637887500Z] Gathering output for process 47884
[2022-10-13T05:39:07.940001500Z] Waiting for completion for process 47884
[2022-10-13T05:39:07.940276Z] Waiting for completion finished for process 47884
Output and diagnostic info for process 47884 was saved into 'pid-47884-output.log'
[stress.process.out] #
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:
[stress.process.out] #
[stress.process.out] #  Internal Error (c:\\sb\\prod\\1665585502\\workspace\\open\\src\\hotspot\\share\\prims\\unsafe.cpp:756), pid=41348, tid=32984
[stress.process.out] #  assert(event->should_commit()) failed: invariant
[stress.process.out] #
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (20.0+19) (fastdebug build 20-ea+19-1363)
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+19-1363, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
[stress.process.out] # Core dump will be written. Default location: C:\\sb\\prod\\1665638747\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_helidonapp_HelidonAppTest_java\\scratch\\0\\hs_err_pid41348.mdmp
[stress.process.out] #
[stress.process.out] # JFR recording file will be written. Location: C:\\sb\\prod\\1665638747\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_helidonapp_HelidonAppTest_java\\scratch\\0\\hs_err_pid41348.jfr
[stress.process.out] #
[stress.process.out] Unsupported internal testing APIs have been used.
[stress.process.out] 
[stress.process.out] # An error report file with more information is saved as:
[stress.process.out] # C:\\sb\\prod\\1665638747\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_helidonapp_HelidonAppTest_java\\scratch\\0\\hs_err_pid41348.log
[stress.process.out] [610.514s][warning][os] Loading hsdis library failed
[stress.process.out] #
[stress.process.out] # If you would like to submit a bug report, please visit:
[stress.process.out] #   https://bugreport.java.com/bugreport/crash.jsp
[stress.process.out] #
[stress.process.out] [thread 27004 also had an error]


Here's the stack trace from the crashing thread:

---------------  T H R E A D  ---------------

Current thread (0x000002177eab8f40):  JavaThread ""helidon-19"" daemon [_thread_in_vm, id=32984, stack(0x000000fd53100000,0x000000fd53200000)]

Stack: [0x000000fd53100000,0x000000fd53200000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc0b641]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe6e18e]  VMError::report+0x10be  (vmError.cpp:841)
V  [jvm.dll+0xe6fc84]  VMError::report_and_die+0x644  (vmError.cpp:1700)
V  [jvm.dll+0xe703c4]  VMError::report_and_die+0x64  (vmError.cpp:1481)
V  [jvm.dll+0x57fb27]  report_vm_error+0xb7  (debug.cpp:285)
V  [jvm.dll+0xe264c5]  post_thread_park_event+0xb5  (unsafe.cpp:756)
V  [jvm.dll+0xe19f78]  Unsafe_Park+0x348  (unsafe.cpp:781)
C  0x0000021708139c53

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 9900  jdk.internal.misc.Unsafe.park(ZJ)V java.base@20-ea (0 bytes) @ 0x0000021708139bb8 [0x0000021708139b40+0x0000000000000078]
J 13328 c2 java.util.concurrent.CompletableFuture.timedGet(J)Ljava/lang/Object; java.base@20-ea (212 bytes) @ 0x0000021708df4588 [0x0000021708df4460+0x0000000000000128]
J 13330 c2 java.util.concurrent.CompletableFuture.get(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object; java.base@20-ea (31 bytes) @ 0x0000021708df81d4 [0x0000021708df8160+0x0000000000000074]
J 13197 c2 io.helidon.security.integration.jersey.SecurityFilterCommon.processAuthorization(Lio/helidon/security/integration/jersey/SecurityFilterCommon$FilterContext;Lio/helidon/security/SecurityClientBuilder;)V (335 bytes) @ 0x0000021708c8951c [0x0000021708c89480+0x000000000000009c]
J 11992 c2 io.helidon.security.integration.jersey.SecurityFilter.processSecurity(Ljavax/ws/rs/container/ContainerRequestContext;Lio/helidon/security/integration/jersey/SecurityFilterCommon$FilterContext;Lio/helidon/security/integration/common/SecurityTracing;Lio/helidon/security/SecurityContext;)V (78 bytes) @ 0x0000021708504e20 [0x0000021708503c20+0x0000000000001200]
J 12290 c2 io.helidon.security.integration.jersey.SecurityFilterCommon.doFilter(Ljavax/ws/rs/container/ContainerRequestContext;Lio/helidon/security/SecurityContext;)V (383 bytes) @ 0x000002170890f79c [0x000002170890c5c0+0x00000000000031dc]
J 12320 c2 io.helidon.security.integration.jersey.SecurityFilter.filter(Ljavax/ws/rs/container/ContainerRequestContext;)V (31 bytes) @ 0x00000217087f7bcc [0x00000217087f7b40+0x000000000000008c]
J 12880 c2 org.glassfish.jersey.server.ContainerFilteringStage.apply(Lorg/glassfish/jersey/server/internal/process/RequestProcessingContext;)Lorg/glassfish/jersey/process/internal/Stage$Continuation; (431 bytes) @ 0x0000021708923a8c [0x0000021708922520+0x000000000000156c]
J 10719 c2 org.glassfish.jersey.server.ContainerFilteringStage.apply(Ljava/lang/Object;)Lorg/glassfish/jersey/process/internal/Stage$Continuation; (9 bytes) @ 0x00000217083b4f0c [0x00000217083b4ec0+0x000000000000004c]
J 12094 c2 org.glassfish.jersey.process.internal.RequestScope.runInScope(Lorg/glassfish/jersey/process/internal/RequestContext;Ljava/lang/Runnable;)V (49 bytes) @ 0x000002170851c8bc [0x000002170851b320+0x000000000000159c]
J 11941 c2 org.glassfish.jersey.server.ServerRuntime.process(Lorg/glassfish/jersey/server/ContainerRequest;)V (185 bytes) @ 0x00000217085bb500 [0x00000217085ba800+0x0000000000000d00]
J 13085 c2 io.helidon.webserver.jersey.JerseySupport$JerseyHandler.lambda$doAccept$4(Lio/helidon/webserver/ServerRequest;Ljava/util/Optional;Lorg/glassfish/jersey/server/ContainerRequest;Lio/helidon/webserver/ServerResponse;Ljava/util/concurrent/CompletableFuture;)V (113 bytes) @ 0x0000021708b90b44 [0x0000021708b90720+0x0000000000000424]
J 13113 c2 io.helidon.webserver.jersey.JerseySupport$JerseyHandler$$Lambda$1934+0x0000000801587348.run()V (28 bytes) @ 0x0000021708baffa0 [0x0000021708bafe20+0x0000000000000180]
J 10502 c2 io.helidon.common.context.Contexts.runInContext(Lio/helidon/common/context/Context;Ljava/lang/Runnable;)V (25 bytes) @ 0x00000217081c2b68 [0x00000217081c2840+0x0000000000000328]
J 13238% c2 java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V java.base@20-ea (187 bytes) @ 0x0000021708d70f48 [0x0000021708d70b40+0x0000000000000408]
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 java.base@20-ea
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x000002170753107d",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287832,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvtn:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-10-13 07:14;chagedorn;This does not seem to be directly related to compiler. As the failing event is a EventThreadPark pointer from JFR, I'll move it to JFR for now for further investigation.;;;","2022-10-13 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10700
Date: 2022-10-13 14:38:59 +0000;;;","2022-10-14 05:37;dukebot;Changeset: 21e4f06a
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-10-14 12:34:42 +0000
URL:       https://git.openjdk.org/jdk/commit/21e4f06ada24098dad4e71b0f9c13afeff87c24b
;;;","2022-10-14 06:59;dcubed;The fix for this bug is integrated in jdk-20+20-1395.;;;","2022-10-15 06:34;dcubed;Here's a log file snippet for the jdk-20+20-1384-tier8 sighting: 

applications/kafkastress/KafkaStressTest.java

[2022-10-15 05:05:01,999] INFO [GroupCoordinator 1001]: Stabilized group perf-consumer-87875 generation 1 (__consumer_offsets-0) (kafka.coordinator.group.GroupCoordinator)
[2022-10-15 05:05:02,024] INFO [GroupCoordinator 1001]: Assignment received from leader for group perf-consumer-87875 for generation 1 (kafka.coordinator.group.GroupCoordinator)
[2022-10-15 05:05:03,544] INFO [GroupCoordinator 1001]: Member[group.instance.id None, member.id consumer-perf-consumer-87875-1-156e58b2-2c8a-464e-bcc3-61a0e3b49b55] in group perf-consumer-87875 has left, removing it from the group (kafka.coordinator.group.GroupCoordinator)
[2022-10-15 05:05:03,544] INFO [GroupCoordinator 1001]: Preparing to rebalance group perf-consumer-87875 in state PreparingRebalance with old generation 1 (__consumer_offsets-0) (reason: removing member consumer-perf-consumer-87875-1-156e58b2-2c8a-464e-bcc3-61a0e3b49b55 on LeaveGroup) (kafka.coordinator.group.GroupCoordinator)
[2022-10-15 05:05:03,544] INFO [GroupCoordinator 1001]: Group perf-consumer-87875 with generation 2 is now empty (__consumer_offsets-0) (kafka.coordinator.group.GroupCoordinator)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94981/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2eda829a-f85f-45b4-b01c-4a699a3b5266/runs/1e00aff6-1da9-4f23-815e-a776be954226/workspace/open/src/hotspot/share/prims/unsafe.cpp:756), pid=989084, tid=989308
#  assert(event->should_commit()) failed: invariant
#
# JRE version: Java(TM) SE Runtime Environment (20.0+20) (fastdebug build 20-ea+20-1384)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+20-1384, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1ab207f]  post_thread_park_event(EventThreadPark*, oop, long, long)+0x15f
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94950/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/22d0de81-e81e-4809-86a8-94626a8d13b4/runs/b807e1dd-cfe1-4038-9f58-c590c51f1625/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kafkastress_KafkaStressTest_java/scratch/0/core.989084)
#
# JFR recording file will be written. Location: /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94950/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/22d0de81-e81e-4809-86a8-94626a8d13b4/runs/b807e1dd-cfe1-4038-9f58-c590c51f1625/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kafkastress_KafkaStressTest_java/scratch/0/hs_err_pid989084.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94950/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/22d0de81-e81e-4809-86a8-94626a8d13b4/runs/b807e1dd-cfe1-4038-9f58-c590c51f1625/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_kafkastress_KafkaStressTest_java/scratch/0/hs_err_pid989084.log
[607.483s][warning][os] Loading hsdis library failed
[thread 989154 also had an error]
[thread 989156 also had an error]
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(132/47890)----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f853d8a7a70):  JavaThread ""data-plane-kafka-request-handler-7"" daemon [_thread_in_vm, id=989308, stack(0x00007f847fcfd000,0x00007f847fdfe000)]

Stack: [0x00007f847fcfd000,0x00007f847fdfe000],  sp=0x00007f847fdfc700,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1ab207f]  post_thread_park_event(EventThreadPark*, oop, long, long)+0x15f  (unsafe.cpp:756)
V  [libjvm.so+0x1ab287a]  Unsafe_Park+0x2da  (unsafe.cpp:778)
J 3732  jdk.internal.misc.Unsafe.park(ZJ)V java.base@20-ea (0 bytes) @ 0x00007f87c8b26621 [0x00007f87c8b26540+0x00000000000000e1]
J 6438 c2 java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(J)J java.base@20-ea (207 bytes) @ 0x00007f87c8bbbfa4 [0x00007f87c8bbbba0+0x0000000000000404]
J 8974 c2 java.util.concurrent.ArrayBlockingQueue.poll(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object; java.base@20-ea (83 bytes) @ 0x00007f87c8dbc1f4 [0x00007f87c8dbc0a0+0x0000000000000154]
J 7536% c2 kafka.server.KafkaRequestHandler.run()V (223 bytes) @ 0x00007f87c90cbc84 [0x00007f87c90cbb60+0x0000000000000124]
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x00007f87c84f8d1a
V  [libjvm.so+0x102b870]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x500  (javaCalls.cpp:417)
V  [libjvm.so+0x102c080]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x430  (javaCalls.cpp:331)
V  [libjvm.so+0x102c4f1]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x71  (javaCalls.cpp:193)
V  [libjvm.so+0x11ad8eb]  thread_entry(JavaThread*, JavaThread*)+0x12b  (jvm.cpp:2876)
V  [libjvm.so+0x1061da6]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:699)
V  [libjvm.so+0x1a54f90]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x16f1443]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:710)

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 3732  jdk.internal.misc.Unsafe.park(ZJ)V java.base@20-ea (0 bytes) @ 0x00007f87c8b265ae [0x00007f87c8b26540+0x000000000000006e]
J 6438 c2 java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(J)J java.base@20-ea (207 bytes) @ 0x00007f87c8bbbfa4 [0x00007f87c8bbbba0+0x0000000000000404]
J 8974 c2 java.util.concurrent.ArrayBlockingQueue.poll(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object; java.base@20-ea (83 bytes) @ 0x00007f87c8dbc1f4 [0x00007f87c8dbc0a0+0x0000000000000154]
J 7536% c2 kafka.server.KafkaRequestHandler.run()V (223 bytes) @ 0x00007f87c90cbc84 [0x00007f87c90cbb60+0x0000000000000124]
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x00007f87c84f8d1a;;;","2022-10-15 19:49;dcubed;Here's the stack track for the crashing thread in the jdk-20+20-1388-tier8 sighting:

applications/kitchensink/Kitchensink8H.java

---------------  T H R E A D  ---------------

Current thread (0x000002b935c67460):  JavaThread ""pool-1-thread-2"" [_thread_in_vm, id=44700, stack(0x000000eb56400000,0x000000eb56500000)]

Stack: [0x000000eb56400000,0x000000eb56500000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc0b6d1]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe6e21e]  VMError::report+0x10be  (vmError.cpp:841)
V  [jvm.dll+0xe6fd14]  VMError::report_and_die+0x644  (vmError.cpp:1700)
V  [jvm.dll+0xe70454]  VMError::report_and_die+0x64  (vmError.cpp:1481)
V  [jvm.dll+0x57fb77]  report_vm_error+0xb7  (debug.cpp:285)
V  [jvm.dll+0xe26555]  post_thread_park_event+0xb5  (unsafe.cpp:756)
V  [jvm.dll+0xe1a008]  Unsafe_Park+0x348  (unsafe.cpp:781)
C  0x000002b916e2cd53

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 20617  jdk.internal.misc.Unsafe.park(ZJ)V java.base@20-ea (0 bytes) @ 0x000002b916e2ccb8 [0x000002b916e2cc40+0x0000000000000078]
J 54553 c1 java.util.concurrent.locks.LockSupport.parkNanos(Ljava/lang/Object;J)V java.base@20-ea (56 bytes) @ 0x000002b90de35544 [0x000002b90de352a0+0x00000000000002a4]
J 20822 c1 java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(J)J java.base@20-ea (207 bytes) @ 0x000002b90f8d00a4 [0x000002b90f8cf8c0+0x00000000000007e4]
J 30067 c2 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take()Ljava/util/concurrent/RunnableScheduledFuture; java.base@20-ea (203 bytes) @ 0x000002b916f56694 [0x000002b916f564c0+0x00000000000001d4]
J 30537 c2 java.util.concurrent.ThreadPoolExecutor.getTask()Ljava/lang/Runnable; java.base@20-ea (177 bytes) @ 0x000002b916e941ac [0x000002b916e940e0+0x00000000000000cc]
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+26 java.base@20-ea
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 java.base@20-ea
j  java.lang.Thread.run()V+13 java.base@20-ea
v  ~StubRoutines::call_stub 0x000002b9150d107d;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Optimized builds are broken due to incorrect assert_is_rfp shortcuts,JDK-8295268,5085264,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-10-13 05:01,2022-11-11 01:53,2023-10-01 09:56,2022-10-18 03:02,19,20,,,,,,20,hotspot,,0,jdk19u-fix-request,jdk19u-fix-yes,,,,,,,,,,,,,,,,,,,,"Fails on many platforms, for example arm32:

```
/home/shade/trunks/jdk/src/hotspot/cpu/arm/smallRegisterMap_arm.inline.hpp:36:36: error: expected ';' at end of member declaration
   36 |   static void assert_is_rfp(VMReg r) PRODUCT_RETURN
      |                                    ^
```

The reason is that `PRODUCT_RETURN` + `DEBUG_ONLY` are not unity: in ""optimized"" builds, we have `!PRODUCT` and `!DEBUG`.

```
  static void assert_is_rfp(VMReg r) PRODUCT_RETURN
                                     DEBUG_ONLY({ Unimplemented(); })
```
",,,,,,,,,,,JDK-8295904,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvsb:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-13 05:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10696
Date: 2022-10-13 12:03:16 +0000;;;","2022-10-18 03:02;dukebot;Changeset: e7a964b4
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-10-18 09:59:05 +0000
URL:       https://git.openjdk.org/jdk/commit/e7a964b4dbbdd21eba87dc94eb3680e9553f5039
;;;","2022-10-20 03:26;shade;Fix Request (19u)

Fixes optimized builds on some architectures, broken by Virtual Threads integration.;;;","2022-10-20 03:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/50
Date: 2022-10-20 10:18:55 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix PaX check on RISC-V,JDK-8295264,5085255,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,luhenry,luhenry,luhenry,2022-10-13 00:48,2022-11-24 10:30,2023-10-01 09:56,2022-10-18 02:50,,,,,,,,20,hotspot,,0,jdk19u-fix-request,jdk19u-fix-yes,,,,,,,,,,,,,,,,,,,,"On Linux RISC-V, PROT_WRITE doesn't imply PROT_READ [1]

The fix is to pass PROT_READ|PROT_WRITE. That matches all other calls to mmap in hotspot.

[1] https://lkml.org/lkml/2022/9/8/1066",,,,,,,,,,,JDK-8297601,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,,"0|i2yvqb:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-13 00:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10690
Date: 2022-10-13 07:49:55 +0000;;;","2022-10-18 02:50;dukebot;Changeset: 4434cbb7
Author:    Ludovic Henry <luhenry@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-10-18 09:47:23 +0000
URL:       https://git.openjdk.org/jdk/commit/4434cbb719db37880b48474ba342f300ed4828a8
;;;","2022-11-23 12:48;luhenry;Fix Request jdk19u.

It explicitely sets the default value to paper over Linux kernel bug. Given that the default behavior of passing `PROT_WRITE` implies `PROT_READ`, this doesn't introduce a change on any other platform. It only ensure that older versions of the Linux kernel on RISC-V behave as expected.

The risk is extremely low since it only explicits the default behavior.;;;","2022-11-23 12:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/91
Date: 2022-11-23 20:49:58 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ScrollBarSkin: memory leak when changing skin,JDK-8295242,5085232,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2022-10-12 16:06,2022-12-09 16:11,2023-10-01 09:56,2022-11-29 08:25,,,,,,,,jfx20,javafx,,0,sn_129,sn_132,,,,,,,,,,,,,,,,,,,,"as determined by SkinMemoryLeakTest (remove line 173) and a leak tester 
https://github.com/andy-goryachev-oracle/Test/blob/main/src/goryachev/apps/LeakTest.java

caused by:
- adding event handler(s) without removing them in dispose()",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241364,,,,,,,,,,,,JDK-8295796,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvl7:",9223372036854775807,b10,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-28 11:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/914
Date: 2022-10-12 23:18:46 +0000;;;","2022-11-28 13:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/928
Date: 2022-10-21 19:01:54 +0000;;;","2022-11-29 08:25;dukebot;Changeset: fbad15d1
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-11-29 16:23:37 +0000
URL:       https://git.openjdk.org/jfx/commit/fbad15d1add3f8680b3aa5e8a2b7da2d812e8fd7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refactor java/util/Formatter/Basic script into a Java native test launcher,JDK-8295239,5085226,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2022-10-12 13:17,2022-11-14 11:34,2023-10-01 09:56,2022-10-21 16:00,,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,Convert `Basic.sh` script into a Java native test launcher.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295670,JDK-8295000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2yvjv:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-10-17 15:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10715
Date: 2022-10-14 20:38:32 +0000;;;","2022-10-21 16:00;dukebot;Changeset: 902162ca
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Brent Christian <bchristi@openjdk.org>
Date:      2022-10-21 22:59:18 +0000
URL:       https://git.openjdk.org/jdk/commit/902162ca9f0fc589b888e73862275554691697f4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update JavaDoc in javafx.geometry.Point3D,JDK-8295236,5085212,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,arapte,webbuggrp,webbuggrp,2022-10-12 07:35,2022-11-29 06:10,2023-10-01 09:56,2022-10-19 05:50,jfx20,,,,,,,jfx20,javafx,,0,noreg-doc,webbug,,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The method equals() JavaDoc describes the method as hashCode(). It is a copy/paste error.
I have proposed a simple JavaDoc for Point3D.equals(), BASED ON THE EXISTING JAVADOC FOR java.awt.Point.equals()

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Browse to https://docs.oracle.com/javase/8/javafx/api/javafx/geometry/Point3D.html#equals-java.lang.Object-


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Doc describes the equals method
ACTUAL -
Doc describes the hashCode method

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2yvgr:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-10-12 10:54;kcr;This is still a problem in the latest version. The equivalent pointer to the JavaFX 19 docs is:

https://openjfx.io/javadoc/19/javafx.graphics/javafx/geometry/Point3D.html#equals%28java.lang.Object%29

;;;","2022-10-13 04:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/913
Date: 2022-10-12 17:28:42 +0000;;;","2022-10-19 05:50;dukebot;Changeset: 60a79156
Author:    Douglas Held <doug.held@oracle.com>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-10-19 12:48:48 +0000
URL:       https://git.openjdk.org/jfx/commit/60a79156ebce8b610af002ee6e4283a3409c732b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] inner class of older classfile versions is not recognized as identity class,JDK-8295234,5085219,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,rriggs,rriggs,2022-10-12 08:59,2022-10-17 17:13,2023-10-01 09:56,2022-10-14 12:25,,,,,,,,repo-valhalla,core-libs,,0,lw4,lworld,,,,,,,,,,,,,,,,,,,,"Testing an object for identity in java.util.Objects.isIdentityObject(obj) checks the ACC_IDENTITY bit in Class.getModifiers() of the inner class.
For class file versions including Valhalla, the compiler does not set the identity bit in the innerclass attribute, but earlier versions do no have the bit set.

For top level classes, the VM adds the ACC_IDENTITY bit where appropriate when the classfile version is older.

It would help consistency if the VM treated the modifiers in the inner class attribute the same as top level classes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295431,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvib:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2022-10-13 14:03;mchung;The current implementation of Class::isIdentity relies on the modifiers to have `ACC_IDENTITY` set to determine if a class is an identity class.

For an inner class, it reads the modifiers from the InnerClasses attribute, which does not have ACC_IDENTITY set.   Hence, it's not recognized as an identity class. 

All classes with an older classfile version numbers other than 64.65535 are identity classes by default.  It's an open discussion that the return value of Class::getModifiers and Class::accessFlags should include ACC_IDENTITY or return the access flags in the class file. 

Array types are another exception case.  VM creates array types and Class::getModifiers returns ACC_FINAL | modifiers of its element types.   For compatibility, it's inclined not to change the spec to include ACC_IDENTITY for array types.

I propose to make Class::isIdentity a native method implemented by the VM so that it will be independent of the modifiers.   In addition, Class::isIdentity can be made as intrinsics.;;;","2022-10-13 17:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/794
Date: 2022-10-14 00:10:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""java.locale.useOldISOCodes"" property is read lazily ",JDK-8295232,5085214,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,naoto,kganapureddy,kganapureddy,2022-10-12 08:18,2022-12-20 09:59,2023-10-01 09:56,2022-10-13 09:21,20,,,,,,,20,core-libs,,0,conformance,tck-red-20,,,,,,,,,,,,,,,,,,,,"The tests validate ""https://download.java.net/java/early_access/jdk20/docs/api/java.base/java/util/Locale.html""

""For the backward compatible behavior, the system property java.locale.useOldISOCodes reverts the behavior back to that of before Java SE 17. If the system property is set to true, those three current language codes are mapped to their backward compatible forms. The property is only read at Java runtime startup and subsequent calls to System.setProperty() will have no effect.""

So the tests are providing the property during JVM start and also trying to override programmatically using System.setProperty() to prove that the later does not have any effect.

But JDK20-b18 looks breaks this expectation.

Please find a stand alone code to demonstrate the problem.

Results :
run with b18
/scratch/jdk-cache/20/18/jdk-20/bin/java -Djava.locale.useOldISOCodes=true ISOCodeTest
Expected that newcode mapped to old

run with b17
/scratch/jdk-cache/20/17/jdk-20/bin/java -Djava.locale.useOldISOCodes=true ISOCodeTest
Expected

Possible cause :
All I can suspect is - sun.util.locale:BaseLocale is loaded lazily from b18 where the ""java.locale.useOldISOCodes"" property is read.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7318248,,,,,,,,,,,JDK-8295295,JDK-8294667,,,,,,,,"2022-10-12 08:20;kganapureddy;ISOCodeTest.java;https://bugs.openjdk.org/secure/attachment/101061/ISOCodeTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b18,20,,,,,,,,"0|i2yvh7:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-10-12 08:52;coffeys;Use of StaticProperty functionality might be a good solution here ?

https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/jdk/internal/util/StaticProperty.java;;;","2022-10-12 09:23;naoto;That is correct, [~coffeys];;;","2022-10-12 09:26;naoto;This issue was revealed by the fix to JDK-8294667;;;","2022-10-12 13:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10683
Date: 2022-10-12 20:03:05 +0000;;;","2022-10-13 09:21;dukebot;Changeset: 4224d451
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-10-13 16:18:53 +0000
URL:       https://git.openjdk.org/jdk/commit/4224d45132b98e4f7bb7a96b696692d2f0bf645e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Try to verify gtest version,JDK-8295229,5085208,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-10-12 07:04,2023-08-30 09:00,2023-10-01 09:56,2022-10-12 23:19,17,20,,,,,,20,infrastructure,,0,build-infra,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,"Inspired by the comment
https://github.com/openjdk/jdk/pull/10503#issuecomment-1275500585 for JDK-8294623, I realized we need to do at least some kind of version verification of gtest.

Since gtest do not properly declare its version, this can't be done exactly, but we can look at some tell-tales and rule out versions that are way too far off.",,,,,,,,,,,JDK-8315381,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvfv:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-12 07:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10677
Date: 2022-10-12 14:08:13 +0000;;;","2022-10-12 23:19;dukebot;Changeset: cd1357b0
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-13 06:16:15 +0000
URL:       https://git.openjdk.org/jdk/commit/cd1357b0af0d4e3b459fcf88e67510502464bb90
;;;","2023-08-30 02:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1708
Date: 2023-08-30 09:18:28 +0000;;;","2023-08-30 04:29;shade;Fix Request (17u)

Another clean backport on the way to get clean backports for gtest updates. Applies cleanly. Configure passes well; GHA tests look good too.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] codeStart should be cleared when entryPoint is cleared,JDK-8295225,5085202,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2022-10-12 06:21,2022-10-19 23:15,2023-10-01 09:56,2022-10-13 01:36,20,,,,,,,20,hotspot,,0,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-20,,,,,,,,,,,,,,,,,,"When the InstalledCode.entryPoint field is cleared[1], the HotSpotInstalledCode.codeStart field should also be cleared. That is, when making an nmethod non-entrant, all Java side values pointing to code in the nmethod should be cleared. This avoids an inconsistent view of the code.

[1] https://github.com/openjdk/jdk/search?q=set_InstalledCode_entryPoint",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvej:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-12 10:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10682
Date: 2022-10-12 17:12:18 +0000;;;","2022-10-12 16:41;dlong;ILW = inconsistent view of the code; non-entrant nmethod; no workaround = MMH = P3;;;","2022-10-13 01:36;dukebot;Changeset: 03e63a2b
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-10-13 08:34:36 +0000
URL:       https://git.openjdk.org/jdk/commit/03e63a2b87e1bef6025722ec9a016312c55ebd81
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: At most one native periodic event thread at a time,JDK-8295223,5085199,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-10-12 06:03,2023-05-19 09:26,2023-10-01 09:56,2022-10-13 08:55,11,17,,,,,,20,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,,,,,"Today two threads can call into JVM::emitEvent(long, long, long) at the same time. This can happen if a recording is started/stopped at the same time as a periodic event is emitted. 

It's unlikely they will emit the same event as start/stop triggers event with ""beginChunk"", ""endChunk"" or ""everyChunk"", while periodic events have an interval, for example ""1 s"". Still, they might access the same data structure, for example Performance Counters on Windows.

There is no known issue because of this, but if if we see some strange intermittent failures go away, we may want to consider a backport to JDK 11 and JDK 17.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvdv:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-10-12 07:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10676
Date: 2022-10-12 13:11:46 +0000;;;","2022-10-13 08:55;dukebot;Changeset: c7f65438
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-10-13 15:53:33 +0000
URL:       https://git.openjdk.org/jdk/commit/c7f65438bb4a4fd449bd19b68574cfa4b42d7ca8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New KeepAliveTest.java has invalid copyright notice,JDK-8295218,5085193,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,michaelm,michaelm,michaelm,2022-10-12 04:56,2023-04-19 07:00,2023-10-01 09:56,2022-10-12 05:13,,,,,,,,20,core-libs,,0,jdk11u-na,jdk17u-na,noreg-self,,,,,,,,,,,,,,,,,,,As Summary,,,,,,,,,,,JDK-8302583,JDK-8302940,JDK-8302582,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvcj:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-10-12 05:13;dukebot;Changeset: cb62f1c5
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2022-10-12 12:10:07 +0000
URL:       https://git.openjdk.org/jdk/commit/cb62f1c5c0dd0d2a1570bace3c494a5c0c2b06b8
;;;","2022-10-12 05:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10674
Date: 2022-10-12 12:05:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Fix autoconf 2.71 warning ""AC_CHECK_HEADERS: you should use literals""",JDK-8295211,5085184,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-10-12 03:21,2023-01-17 09:31,2023-10-01 09:56,2022-10-12 06:37,11.0.17,17.0.5,20,,,,,20,infrastructure,,0,build-infra,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"In autoconf 2.71, there is a warning generated for calling AC_CHECK_HEADERS with a variable.

It is not clear to me why they consider this to be a problem, but the warning is printed whenever you run configure with autoconf 2.71 or newer, and it is annoying.

We're only doing this in one place. Let's hardcode the values instead so we get rid of the warning.",,,,,,,,,,,JDK-8300191,JDK-8295784,JDK-8300293,,,,,,,,,,,,,,,,,,,,,,JDK-8294581,JDK-8273145,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvaj:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-12 03:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10672
Date: 2022-10-12 10:23:13 +0000;;;","2022-10-12 06:37;dukebot;Changeset: c357b590
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-12 13:32:49 +0000
URL:       https://git.openjdk.org/jdk/commit/c357b5908a091a77bc2b26d74a38785412b88a73
;;;","2022-10-21 04:14;yan;Fix request (15u)
this change does fix the annoying warning on configuration stage. Clean backport.;;;","2022-10-21 04:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/291
Date: 2022-10-21 11:14:49 +0000;;;","2023-01-13 05:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1066
Date: 2023-01-13 13:22:47 +0000;;;","2023-01-13 06:38;sgehwolf;Fix Request (OpenJDK 17u):

Clean backport which fixes the annoying warning when using autoconf 2.71 (e.g. F37). Build only change, should be low risk as it only inlines variable contents. Testing: warning is gone on a patched system where it was observed without the patch.;;;","2023-01-13 08:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1653
Date: 2023-01-13 16:05:34 +0000;;;","2023-01-17 08:34;sgehwolf;Fix Request (OpenJDK 11u):

This issue affects JDK 11u builds with autoconf 2.71 (e.g. F37) as well. The backport isn't clean. It got reviewed by Paul Hohensee. It's a build only change and should therefore be low risk as it only inlines variable contents. Testing: warning is gone on a patched system where it was observed without the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
IR framework should not whitelist -XX:-UseTLAB,JDK-8295210,5085183,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,enothum,thartmann,thartmann,2022-10-12 03:12,2023-07-25 04:29,2023-10-01 09:56,2023-06-23 00:27,17,20,21,22,,,,22,hotspot,,0,hgupdate-sync,ir-framework,noreg-self,oracle-triage-20,starter,,,,,,,,,,,,,,,,,"The IR framework currently whitelists UseTLAB and as a result, IR verification is enabled even if TLAB allocations are disabled which can lead to failures (because the IR differs).

Since JDK-8310187, test/hotspot/jtreg/compiler/gcbarriers/TestZGCBarrierElision.java fails in compiler stress testing (stress-comp-no-tlab) with -XX:-UseTLAB:

Failed IR Rules (4) of Methods (4)
----------------------------------
1) Method ""static void compiler.gcbarriers.TestZGCEffectiveBarrierElision.testAllocateArrayThenStoreAtKnownIndex(compiler.gcbarriers.Outer)"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfCPUFeatureAnd={}, phase={FINAL_CODE}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#C#Z_STORE_P_WITH_BARRIER_FLAG#_"", ""elided"", ""1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""Final Code"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\\d+(\\s){2}(zStoreP\\S*.*)+(\\s){2}===.*barrier\\(\\s*elided\\s*\\))""
           - Failed comparison: [found] 0 = 1 [given]
           - No nodes matched!

[...]",,,,,,,,,,,JDK-8311629,JDK-8312892,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310187,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvab:",9223372036854775807,b04,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-12 03:22;thartmann;ILW = Potential IR verification failures due to unexpected IR, with -XX:-UseTLAB, no workaround = MLH = P4;;;","2023-06-21 05:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14583
Date: 2023-06-21 11:29:51 +0000;;;","2023-06-23 00:27;dukebot;Changeset: 31dcda5d
Author:    Eric Nothum <eric.nothum@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-06-23 07:25:34 +0000
URL:       https://git.openjdk.org/jdk/commit/31dcda5d67c90ecd571b0a943bcedc0bfe3f1fba
;;;","2023-07-06 23:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/104
Date: 2023-07-07 06:43:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add jcheck whitespace checking for markdown files,JDK-8295205,5085178,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-10-12 02:40,2022-10-17 13:56,2023-10-01 09:56,2022-10-12 06:33,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"Markdown files are basically source code for documentation. It should have the same whitespace checks as all other source code, so we don't get spurious trailing whitespace changes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yv97:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-12 02:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10671
Date: 2022-10-12 09:44:54 +0000;;;","2022-10-12 06:33;dukebot;Changeset: 86078423
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-12 13:31:54 +0000
URL:       https://git.openjdk.org/jdk/commit/860784238ea1f3e4a817fc3c28fb89cfee7549dd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update more openjdk.java.net => openjdk.org URLs,JDK-8295198,5085171,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-10-12 02:07,2022-12-21 14:38,2023-10-01 09:56,2022-10-12 06:37,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,"In JDK-8294618, many of the old references to openjdk.java.net was updated. 

The test code was intentionally left out of that change, but some other instances were missed, though.

This patch will fix those misses (but will still leave test code changes to a separate fix).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294725,JDK-8294728,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yv7n:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-12 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10670
Date: 2022-10-12 09:08:55 +0000;;;","2022-10-12 06:37;dukebot;Changeset: 84022605
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-12 13:34:07 +0000
URL:       https://git.openjdk.org/jdk/commit/8402260535eae0fb8bca2327372d03e33cc2add9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IR framework timeout options expect ms instead of s,JDK-8295191,5085161,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,enothum,thartmann,thartmann,2022-10-12 00:43,2023-07-12 13:39,2023-10-01 09:56,2023-06-29 00:01,17,20,22,,,,,22,hotspot,,0,ir-framework,oracle-triage-11,oracle-triage-17,oracle-triage-20,starter,,,,,,,,,,,,,,,,,"The README says:
- `-DTestCompilationTimeout=20`: Change the default waiting time (default: 10s) for a compilation of a normal `@Test` annotated method.
- `-DWaitForCompilationTimeout=20`: Change the default waiting time (default: 10s) for a compilation of a `@Test` annotated method with compilation level [WAIT\_FOR\_COMPILATION](./CompLevel.java).

But both flags expect values in ms.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yv5f:",9223372036854775807,b05,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-12 03:23;thartmann;ILW = Inconsistency between README and actual behavior of IR framework flag, timeout flags, simply use ms instead of s = LLL = P5;;;","2023-06-26 04:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14649
Date: 2023-06-26 08:37:31 +0000;;;","2023-06-29 00:01;dukebot;Changeset: b2eae16c
Author:    Eric Nothum <eric.nothum@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-06-29 06:59:12 +0000
URL:       https://git.openjdk.org/jdk/commit/b2eae16c4504fb13bd06c999ef97f2faf0ad4932
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Printing messages with a RecordComponentElement does not include position,JDK-8295184,5084960,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,webbuggrp,webbuggrp,2022-10-08 15:25,2022-12-12 13:50,2023-10-01 09:56,2022-12-05 20:25,17,19,,,,,,20,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
There is no position information included when using a RecordComponentElement with Messager#printMessage, regardless of if an annotation mirror is included or not.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. `javac proc/*.java`
2. `javac -processorpath . -processor proc.ReproducingAP Test.java`

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Test.java:1: warning: Reporting Test with an annotation
@proc.TestWarning(includeAnnotation = true)
^
Test.java:3: warning: Reporting first with an annotation
        @proc.TestWarning(includeAnnotation = true) int first,
        ^
Test.java:4: warning: Reporting second
        @proc.TestWarning(includeAnnotation = false) int second
                                                     ^
Test.java:8: warning: Reporting Test2
record Test2() {}
^
4 warnings
ACTUAL -
Test.java:1: warning: Reporting Test with an annotation
@proc.TestWarning(includeAnnotation = true)
^
warning: Reporting first with an annotation
warning: Reporting second
Test.java:8: warning: Reporting Test2
record Test2() {}
^
4 warnings

---------- BEGIN SOURCE ----------
proc/ReproducingAP.java:
```
package proc;

import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.TypeElement;

@SupportedSourceVersion(SourceVersion.RELEASE_17)
public class ReproducingAP extends AbstractProcessor {

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        return Set.of(TestWarning.class.getName());
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        roundEnv.getElementsAnnotatedWith(TestWarning.class).forEach(e -> {
            var annotation = e.getAnnotation(TestWarning.class);
            if (annotation.includeAnnotation()) {
                processingEnv.getMessager().printMessage(
                        javax.tools.Diagnostic.Kind.WARNING,
                        ""Reporting "" + e.getSimpleName() + "" with an annotation"",
                        e,
                        e.getAnnotationMirrors().get(0));
            } else {
                processingEnv.getMessager().printMessage(
                        javax.tools.Diagnostic.Kind.WARNING,
                        ""Reporting "" + e.getSimpleName(),
                        e);
            }
        });
        return false;
    }

}
```
proc/TestWarning.java:
```
package proc;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

/**
 * Direct {@link ReproducingAP} to emit a warning.
 */
@Target({ElementType.TYPE, ElementType.RECORD_COMPONENT})
public @interface TestWarning {
    /**
     * {@return {@code true} to include the relevant mirror in the warning message}
     */
    boolean includeAnnotation() default false;
}
```
Test.java:
```
@proc.TestWarning(includeAnnotation = true)
public record Test(
        @proc.TestWarning(includeAnnotation = true) int first,
        @proc.TestWarning int second) {
}

@proc.TestWarning
record Test2() {}
```
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-11 21:31;adev;test.zip;https://bugs.openjdk.org/secure/attachment/101044/test.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ytwr:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-11 21:50;adev;Position information is missing when using a RecordComponentElement with Messager#printMessage, regardless of an annotation mirror is included or not.
To reproduce use below commands:
1. javac proc/*.java
2. javac -processorpath . -processor proc.ReproducingAP Test.java;;;","2022-11-11 02:38;sadayapalam;With this patch which is work in progress: 

```
diff --git a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
index 27f06398064..9d76a5e934d 100644
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
@@ -1443,6 +1443,7 @@ public class TypeEnter implements Completer {
                         List.nil() :
                         tc.copy(rc.getOriginalAnnos());
                 arg.vartype = tc.copy(tmpRecordFieldDecls.head.vartype);
+                arg.pos = tmpRecordFieldDecls.head.pos;
                 tmpRecordFieldDecls = tmpRecordFieldDecls.tail;
             }
             return md;
diff --git a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeInfo.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeInfo.java
index a0fd4f3a3b7..382842a84e7 100644
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeInfo.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeInfo.java
@@ -30,6 +30,7 @@ package com.sun.tools.javac.tree;
 import com.sun.source.tree.Tree;
 import com.sun.source.util.TreePath;
 import com.sun.tools.javac.code.*;
+import com.sun.tools.javac.code.Symbol.RecordComponent;
 import com.sun.tools.javac.comp.AttrContext;
 import com.sun.tools.javac.comp.Env;
 import com.sun.tools.javac.tree.JCTree.*;
@@ -779,8 +780,15 @@ public class TreeInfo {
                 super.visitMethodDef(that);
         }
         public void visitVarDef(JCVariableDecl that) {
-            if (!checkMatch(that, that.sym))
+            if (!checkMatch(that, that.sym)) {
+                if (that.sym != null && (that.sym.flags_field & RECORD) != 0) {
+                    RecordComponent rc = that.sym.enclClass().getRecordComponent(that.sym);
+                    if (checkMatch(that, rc)) {
+                        return;
+                    }
+                }
                 super.visitVarDef(that);
+            }
         }
         public void visitTypeParameter(JCTypeParameter that) {
             if (that.type == null || !checkMatch(that, that.type.tsym))

```

I get the following while compiling with annotation processing turned on:

```
/home/srikanth/tmp/X.java:1: warning: Reporting X with an annotation
@TestWarning(includeAnnotation = true)
^
/home/srikanth/tmp/X.java:3: warning: Reporting first with an annotation
        @TestWarning(includeAnnotation = true) int first,
                                                                              ^
/home/srikanth/tmp/X.java:4: warning: Reporting second
        @TestWarning int second) {
                                    ^
/home/srikanth/tmp/X.java:8: warning: Reporting Test2
record Test2() {}
^
```

This is a step in the right direction, but not quite what it should be.

Design question:

The problem arises because as the comment in com.sun.tools.javac.comp.Check#validateAnnotation(com.sun.tools.javac.tree.JCTree.JCAnnotation, com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Symbol) calls out:

```
         * At this point we need to remove all the annotations that are not in place before going on with the annotation
         * party. On top of the above there is the issue that there is no AST representing record components, just symbols
         * so the corresponding field has been holding all the annotations and it's metadata has been modified as if it
         * was both a field and a record component.
         
```

The method com.sun.tools.javac.tree.TreeInfo#declarationFor which is used to locate the AST given a symbol can't really
find the declaration for the record components, since there is no AST representing these. So the present fix instead relies
on the mapping between other declarations (parameters, fields) and record components to locate the declaration. But 
this is problematic since some or all annotations on the record component may have been deemed to be improper to 
carried over to the parameter/field declaration (due to target type mismatch).

It seems to me that there ought to be AST mapping back to record components for this to work properly. 

[~vromero]Comments ? ;;;","2022-12-05 04:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11511
Date: 2022-12-05 11:57:36 +0000;;;","2022-12-05 20:25;dukebot;Changeset: ee9ba745
Author:    Srikanth Adayapalam <sadayapalam@openjdk.org>
Date:      2022-12-06 04:23:40 +0000
URL:       https://git.openjdk.org/jdk/commit/ee9ba7456403c59a6e14d22cf9c2f53eef97ea57
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
some langtools test pollutes source tree,JDK-8295176,5085146,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,kbarrett,kbarrett,2022-10-11 15:55,2022-11-03 13:49,2023-10-01 09:56,2022-10-18 00:46,20,,,,,,,20,tools,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,"Running `make test TEST=langtools:tier1` from the build directory creates the file test/langtools/tools/javac/options/release/ReleaseOption.class in the source tree.  Running the ReleaseOption.java test does *not* create that file.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8173605,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yv23:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-11 17:10;jjg;It's coming from open/test/langtools/tools/javac/options/release/ReleaseOptionThroughAPI.java
;;;","2022-10-11 17:13;jjg;It's falling foul of the javac rule: if no output directory is specified, write the class file next to the source file.

It should be enough to add `-d .` or even `-proc:only` into the list of options.


            List<String> options = Arrays.asList(""--release"", ""8"", ""-XDrawDiagnostics"", ""-Xlint:-options"");;;;","2022-10-17 02:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10724
Date: 2022-10-17 09:35:40 +0000;;;","2022-10-18 00:46;dukebot;Changeset: 71aa8210
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-10-18 07:45:23 +0000
URL:       https://git.openjdk.org/jdk/commit/71aa8210910dbafe30eccc772eaa7747f46be0cd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SplitPaneSkin: memory leak when changing skin,JDK-8295175,5085145,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,angorya,angorya,angorya,2022-10-11 14:37,2022-12-09 16:12,2023-10-01 09:56,2022-12-06 08:39,,,,,,,,jfx20,javafx,,0,sn_129,sn_132,sn_133,,,,,,,,,,,,,,,,,,,"as determined by SkinMemoryLeakTest (remove line 178) and a leak tester 
https://github.com/andy-goryachev-oracle/Test/blob/main/src/goryachev/apps/LeakTest.java

caused by:
- adding listeners and not removing them in dispose()",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8241364,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yv1v:",9223372036854775807,b11,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-11-28 10:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/911
Date: 2022-10-11 22:44:10 +0000;;;","2022-12-06 08:39;dukebot;Changeset: 6f36e704
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2022-12-06 16:35:41 +0000
URL:       https://git.openjdk.org/jfx/commit/6f36e7043299bfb9edf8befbca1e45a938077e4b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Vector constant materialization attempt,JDK-8295174,5085144,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2022-10-11 14:32,2022-11-02 04:47,2023-10-01 09:56,2022-10-16 22:50,11.0.15,12,13,14,15,,,11.0.18,hotspot,,0,additional-information-received,c2,dcsswa,oracle-triage-20,reproducer-yes,sustaining,webbug,,,,,,,,,,,,,,,Open Source clone of the 11.0.18-oracle issue.,,,,,,,,,,JDK-8289043,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8223347,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux_ubuntu,,,,,,"0|i2yv1n:",9223372036854775807,b01,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-14 00:28;mdoerr;Fix Request (11u): 
Should get fixed for parity with 11.0.18-oracle. Fix is small, tested and reviewed (see https://github.com/openjdk/jdk11u-dev/pull/1445 ). ;;;","2022-10-16 22:50;dukebot;Changeset: 7a90ff28
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-10-17 05:47:26 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/7a90ff280025e6dc487d600f0172df040d06f471
;;;","2022-11-02 04:47;dukebot;Changeset: 7a90ff28
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-10-17 05:47:26 +0000
URL:       https://git.openjdk.org/jdk11u/commit/7a90ff280025e6dc487d600f0172df040d06f471
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove superfluous period in @throws tag description,JDK-8295168,5085136,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prappo,prappo,prappo,2022-10-11 09:58,2022-10-17 13:55,2023-10-01 09:56,2022-10-11 12:47,20,,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"https://docs.oracle.com/en/java/javase/19/docs/api/java.prefs/java/util/prefs/AbstractPreferences.html#remove(java.lang.String)

the above is rendered as:

Throws:
IllegalStateException - if this node (or an ancestor) has been removed with the removeNode() method.
IllegalArgumentException - if key contains the null control character, code point U+0000.
NullPointerException - if key is null..

(Note two successive periods after null in the NPE entry). That happens because of this:

     * @throws NullPointerException {@inheritDoc}.
     */
    public void remove(String key) {

     ...

     * @throws NullPointerException if {@code key} is {@code null}.
     ...
     */
    public abstract void remove(String key);
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yuzv:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-10-11 10:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10664
Date: 2022-10-11 17:11:49 +0000;;;","2022-10-11 12:47;dukebot;Changeset: 3a980b97
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-10-11 19:44:54 +0000
URL:       https://git.openjdk.org/jdk/commit/3a980b972f72b5bbfd7bb63b433ae562890dbcf2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK 8 jdi tests should not use tasklist command on Windows,JDK-8295164,5085130,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,zzambers,zzambers,2022-10-11 09:02,2022-11-03 04:33,2023-10-01 09:56,2022-10-13 05:11,openjdk8u345,openjdk8u352,,,,,,openjdk8u362,client-libs,,0,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,,"Shell jdi tests are currently failing on windows. These tests are part of jdk_tier1.

Problem:
Tests fail because ShellScaffold.sh uses (native) tasklist command to check if process with given PID is alive. However this no longer works, since PIDs by Cygwin/Msys2 are no longer same as native Windows PIDs [1][2].

Solution:
Fixed by switching to ps command. Original comment says tasklist was used due to ps sometimes missing some processes. This could be because ps, by default, only shows cygwin processes. I added -W argument to also show native windows processes [3] and I have seen no problems. Fix is targeted for JDK8, since newer JDKs migrated to java based tests (in several steps [4][5][6][7]...), but i think backporting all of that work, just to fix this issue would be overkill. (However nothing prevents anyone from doing so in the future, if desired.)

Testing:
With this fix jdk_tier1 passes for me on Windows.

[1] https://github.com/msys2/MSYS2-packages/issues/1724
[2] https://cygwin.com/git/?p=newlib-cygwin.git;a=commit;h=b5e1003722cb14235c4f166be72c09acdffc62ea
[3] https://www.cygwin.com/cygwin-ug-net/ps.html
[4] https://bugs.openjdk.org/browse/JDK-8209109
[5] https://bugs.openjdk.org/browse/JDK-8209604
[6] https://bugs.openjdk.org/browse/JDK-8210243
[7] https://bugs.openjdk.org/browse/JDK-8210760",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-12 05:53;zzambers;ArrayLengthDumpTest.jtr;https://bugs.openjdk.org/secure/attachment/101059/ArrayLengthDumpTest.jtr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yuyj:",9223372036854775807,b01,,,,,,,,,,,,"2022-10-11 09:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/133
Date: 2022-10-11 16:03:40 +0000;;;","2022-10-11 09:17;zzambers;Fix request (8u)

fixes jdi shell tests on windows, these tests are part of jdk_tier1 (blocks jdk_tier1 testing in GHA on Windows)
low risk, test only;;;","2022-10-12 05:58;zzambers;I attached jtr file which illustrates the issue (without fix). You can see there that test falsely identifies top process as dead:
--Top process (1081) is dead.  We better die too;;;","2022-10-13 01:32;sgehwolf;As part of this fix jdk_tier1 GHA pre-integration tests will be enabled on Windows.;;;","2022-10-13 05:11;dukebot;Changeset: 8280a89a
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-10-13 12:09:11 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/8280a89a1e4748ca6b7534dceca8c2b1fd17697a
;;;","2022-11-03 04:33;dukebot;Changeset: 8280a89a
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-10-13 12:09:11 +0000
URL:       https://git.openjdk.org/jdk8u/commit/8280a89a1e4748ca6b7534dceca8c2b1fd17697a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove old hsdis Makefile,JDK-8295163,5085129,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-10-11 08:59,2022-10-17 13:54,2023-10-01 09:56,2022-10-11 09:39,20,,,,,,,20,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,For some reason the old Makefile for hsdis was not removed when the build was moved into the normal build system in JDK-8188073. This should be fixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yuyb:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-11 09:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10660
Date: 2022-10-11 16:00:38 +0000;;;","2022-10-11 09:39;dukebot;Changeset: e1a77cfd
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-11 16:35:55 +0000
URL:       https://git.openjdk.org/jdk/commit/e1a77cfd5f296e3e77c945a20d3688e6774dee29
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect javadoc of java.base module,JDK-8295155,5085120,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,jvernee,jvernee,2022-10-11 06:54,2022-10-17 13:54,2023-10-01 09:56,2022-10-11 10:01,20,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"The javadoc of the java,base module suggests the following code to get a 'jrt:/' FileSystem:

    FileSystems.newFileSystem(URI.create(""jrt:/""))

But, this code does not compile. It should use `getFileSystem` instead of `newFileSystem`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yuwb:",9223372036854775807,b19,,,,,,,,,,,,"2022-10-11 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10658
Date: 2022-10-11 15:48:56 +0000;;;","2022-10-11 10:01;dukebot;Changeset: 2586b1a3
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2022-10-11 16:58:36 +0000
URL:       https://git.openjdk.org/jdk/commit/2586b1a3c1e1c653e2e7e3398a1955882161193e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Documentation for RemoteExecutionControl.invoke(Method) inherits non-existent documentation,JDK-8295154,5085119,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-10-11 06:46,2022-10-17 13:54,2023-10-01 09:56,2022-10-11 12:37,20,,,,,,,20,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"    /**
     * @throws ExecutionControl.UserException {@inheritDoc}
     * @throws ExecutionControl.ResolutionException {@inheritDoc}
     * @throws ExecutionControl.StoppedException {@inheritDoc}
     * @throws ExecutionControl.EngineTerminationException {@inheritDoc}
     * @throws ExecutionControl.NotImplementedException {@inheritDoc}
     */
    // Overridden only so this stack frame is seen
    @Override
    protected String invoke(Method doitMethod) throws Exception {
        return super.invoke(doitMethod);
    }

The above list of @throws tags was erroneously added in JDK-8294377. That part of JDK-8294377 needs to be reverted.

Documentation for jdk.jshell.execution.DirectExecutionControl#invoke(java.lang.reflect.Method) does not document any of the above exceptions.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294377,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yuw3:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-10-11 07:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10653
Date: 2022-10-11 13:56:43 +0000;;;","2022-10-11 12:37;dukebot;Changeset: 9bb932ce
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-10-11 19:35:18 +0000
URL:       https://git.openjdk.org/jdk/commit/9bb932ce3007f3f5c67344ebb42dd3c94fa035ab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Various C2 compiler issues revealed by stress testing,JDK-8295152,5085117,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2022-10-11 06:40,2022-10-12 06:02,2023-10-01 09:56,2022-10-12 06:02,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lworld,,,,,,,,,,,,,,,,,,,,"Stress testing revealed some issues:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/inlinetypenode.cpp:1134), pid=2656025, tid=2656038
#  assert(false) failed: Unbuffered inline type should not have known instance id
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-lworld4ea-2022-10-03-1240228.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-lworld4ea-2022-10-03-1240228.tobias..., mixed mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xfeb96f]  InlineTypeNode::Value(PhaseGVN*) const+0x45f



# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/compile.cpp:1703), pid=2659682, tid=2659690
#  assert(flat != TypePtr::BOTTOM) failed: cannot alias-analyze an untyped ptr: adr_type = NULL+104
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-lworld4ea-2022-10-03-1240228.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-lworld4ea-2022-10-03-1240228.tobias..., mixed mode, compressed oops, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb0f59d]  Compile::find_alias_type(TypePtr const*, bool, ciField*, bool) [clone .part.0]+0x2bd



java.lang.NoClassDefFoundError: jdk/experimental/bytecode/BasicTypeHelper
	at test.java.lang.invoke.lib.InstructionHelper.<clinit>(InstructionHelper.java:54)
	at compiler.valhalla.inlinetypes.TestNullableInlineTypes.<clinit>(TestNullableInlineTypes.java:2536)
	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized0(Native Method)
	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized(Unsafe.java:1285)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.ensureClassInitialized(MethodHandleAccessorFactory.java:300)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.newMethodAccessor(MethodHandleAccessorFactory.java:71)
	at java.base/jdk.internal.reflect.ReflectionFactory.newMethodAccessor(ReflectionFactory.java:159)
	at java.base/java.lang.reflect.Method.acquireMethodAccessor(Method.java:722)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1588)
Caused by: java.lang.ClassNotFoundException: jdk.experimental.bytecode.BasicTypeHelper
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yuvn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-12 05:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/789
Date: 2022-10-12 12:45:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
os::signal should be os specific,JDK-8295125,5085084,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,kbarrett,kbarrett,2022-10-11 02:11,2022-11-14 19:11,2023-10-01 09:56,2022-10-30 22:57,20,,,,,,,20,hotspot,,0,os,signals,,,,,,,,,,,,,,,,,,,,"The second argument for os::signal is a void* handler function.

The posix implementation of os::signal expects that handler argument to be a sigaction handler, taking 3 arguments.

The Windows implementation of os::signal expects that handler argument to be a signal handler, taking 1 argument.  It's not a sigaction handler like POSIX because Windows seemingly doesn't support the sigaction stuff.

This all makes os::signal a quite questionable portability API.  And it turns out all calls to os::signal are in posix-specific or windows-specific files.  So it seems like we don't even need this portability API.  Probably os::signal should be removed entirely, and windows and posix code should each have their own signal handler manipulation functions, and never the twain shall meet.

There are also some problematic uses.  For example, in os_windows.cpp there is a call to os::signal with the handler being UserHandler, a function of 3 arguments (though only the first is used), which will be called with only one argument.  All the other uses need to be examined.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295702,JDK-8294594,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yuob:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-13 01:06;dholmes;Edit: The original comment here was wrong.

This gets even worse when you look at the callers of os::signal and how things come in from the Java side. The sun.misc.Signal API is fundamentally broken: it allows you to register a Java level callback by installing the os::user_handler() as the actual signal handling function, and return the previous handler as a jlong ""address"". That part is fine, but if the application logic then tries to re-install that previous handler, the VM just gets an address and has no idea whether this should be set via sa_handler or sa_sigaction, nor whether to set SA_SIGINFO! For VM-level signal chaining we actually save the sigact structures associated with a signal - and for the JDK sun.misc.Signal we would have to do the same, and somehow persist those structures - but we would never know when we could free them again.
;;;","2022-10-16 21:45;dholmes;> The posix implementation of os::signal expects that handler argument to be a sigaction handler, taking 3 arguments. 

[~kbarrett] The handler argument can also be SIG_DFL or SIG_IGN or an arbitrary signal handling function that the Java code is trying to restore - the type of which we have no idea.;;;","2022-10-19 21:56;dholmes;We can move some of the signal API's out of os.hpp and then streamline the code in both Posix and Windows, but the cleanup is not as extensive as first envisaged.;;;","2022-10-19 23:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10780
Date: 2022-10-20 05:59:33 +0000;;;","2022-10-30 22:57;dukebot;Changeset: 9b9be88b
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-10-31 05:55:54 +0000
URL:       https://git.openjdk.org/jdk/commit/9b9be88bcaa35c89b6915ff0c251e5a04b10b330
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Atomic::add to pointer type may return wrong value,JDK-8295124,5085082,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kbarrett,kbarrett,kbarrett,2022-10-11 01:52,2022-11-14 11:33,2023-10-01 09:56,2022-10-20 15:26,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"For all platforms, Atomic::PlatformAdd implements one of fetch_and_add and add_and_fetch in terms of the other, adding or subtracting (as appropriate) the result of the other operation and the addend.

That's incorrect when the destination type is a pointer type. When the destination type is a pointer type, AddImpl scales the addend by the size of the pointee type, and passes that scaled value to the platform layer. (This is described in the comment documenting PlatformAdd.)  If the pointee type has size > 1, this will double-scale the addend.

Fortunately, at this time there are no uses of Atomic add operations with a pointer type whose pointee type's size > 1.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yunv:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-11 18:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10667
Date: 2022-10-12 01:09:04 +0000;;;","2022-10-20 15:26;dukebot;Changeset: 1164258e
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2022-10-20 22:24:53 +0000
URL:       https://git.openjdk.org/jdk/commit/1164258ec7d173944f48cba368d6c50a07b4c283
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(dead->outcnt() == 0 && !dead->is_top()) failed: node must be dead,JDK-8295116,5085070,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,aharadigopal,aharadigopal,2022-10-10 23:53,2023-02-14 12:35,2023-10-01 09:56,2022-12-08 04:02,11,17,20,,,,,20,hotspot,,0,c2,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,sqebug,tier5,tier7,,,,,,,,,,,,"Tests:
java/util/stream/test/org/openjdk/tests/java/util/stream/SequentialOpTest.java
Product tested on: mach5-one-jdk-17-0-6+2-152-tier5 (CI build)
OS/architecture: Windows-x64-debug, linux-x64-debug builds
Reproducible: Intermittent, once in 100 times
Is it a Regression: No, it's an intermittent crash. I have seen it only once in the CI run.
Is it a platform-specific issue: currently seen with Windows-x64-debug, linux-x64-debug builds.

Error:
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\opto/phaseX.hpp:505
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1665174735\\workspace\\open\\src\\hotspot\\share\\opto/phaseX.hpp:505), pid=18536, tid=16608
#  assert(dead->outcnt() == 0 && !dead->is_top()) failed: node must be dead
#
# JRE version: Java(TM) SE Runtime Environment (17.0.6+2) (fastdebug build 17.0.6-ea+2-LTS-152)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17.0.6-ea+2-LTS-152, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)

",,,,,,,,,,,JDK-8302510,JDK-8300048,JDK-8299019,JDK-8299020,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-11-01 14:21;dlong;hs_err_pid18536-1.log;https://bugs.openjdk.org/secure/attachment/101280/hs_err_pid18536-1.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yul7:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-11-28 14:39;dcubed;Here's the crashing thread's stack in the jdk-20+25-1923-tier7 windows-x64-debug sighting: 

java/util/stream/test/org/openjdk/tests/java/util/stream/mapMultiOpTest.java

---------------  T H R E A D  ---------------

Current thread (0x0000026ffdd038d0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=42264, stack(0x000000b651500000,0x000000b651600000)]


Current CompileTask:
C2:  12048 2808       4       java.util.ArrayList$ArrayListSpliterator::forEachRemaining (127 bytes)

Stack: [0x000000b651500000,0x000000b651600000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc04d51]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe8bad0]  VMError::report+0x10c0  (vmError.cpp:841)
V  [jvm.dll+0xe8d5c4]  VMError::report_and_die+0x644  (vmError.cpp:1700)
V  [jvm.dll+0xe8dd04]  VMError::report_and_die+0x64  (vmError.cpp:1481)
V  [jvm.dll+0x576ef7]  report_vm_error+0xb7  (debug.cpp:286)
V  [jvm.dll+0x45c633]  PhaseIterGVN::remove_dead_node+0x103  (phaseX.hpp:506)
V  [jvm.dll+0x788631]  IfNode::fold_compares_helper+0xf71  (ifnode.cpp:1045)
V  [jvm.dll+0x787300]  IfNode::fold_compares+0x1a0  (ifnode.cpp:1315)
V  [jvm.dll+0x785661]  IfNode::Ideal+0x81  (ifnode.cpp:1463)
V  [jvm.dll+0xc48551]  PhaseIterGVN::transform_old+0xc1  (phaseX.cpp:1256)
V  [jvm.dll+0xc44d93]  PhaseIterGVN::optimize+0x2b3  (phaseX.cpp:1204)
V  [jvm.dll+0x50ad22]  Compile::Optimize+0x1b2  (compile.cpp:2215)
V  [jvm.dll+0x508aca]  Compile::Compile+0x167a  (compile.cpp:831)
V  [jvm.dll+0x42bb05]  C2Compiler::compile_method+0x145  (c2compiler.cpp:116)
V  [jvm.dll+0x522dd8]  CompileBroker::invoke_compiler_on_method+0x858  (compileBroker.cpp:2240)
V  [jvm.dll+0x5205fd]  CompileBroker::compiler_thread_loop+0x23d  (compileBroker.cpp:1917)
V  [jvm.dll+0x7f0af2]  JavaThread::thread_main_inner+0x282  (javaThread.cpp:698)
V  [jvm.dll+0xe01973]  Thread::call_run+0x253  (thread.cpp:229)
V  [jvm.dll+0xc03668]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791]


Here's the crashing thread's stack in the jdk-20+25-1923-tier7 linux-x64-debug sighting: 

java/util/stream/test/org/openjdk/tests/java/util/stream/mapMultiOpTest.java

---------------  T H R E A D  ---------------

Current thread (0x00007f83f4c7f2b0):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=1372366, stack(0x00007f8424be4000,0x00007f8424ce5000)]


Current CompileTask:
C2:   9740 2814       4       java.util.ArrayList$ArrayListSpliterator::forEachRemaining (127 bytes)

Stack: [0x00007f8424be4000,0x00007f8424ce5000],  sp=0x00007f8424ce0000,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xfddd7c]  PhaseIterGVN::remove_dead_node(Node*)+0xac  (phaseX.hpp:506)
V  [libjvm.so+0xfd530b]  IfNode::fold_compares_helper(ProjNode*, ProjNode*, ProjNode*, PhaseIterGVN*)+0x148b  (ifnode.cpp:1043)
V  [libjvm.so+0xfd9abc]  IfNode::fold_compares(PhaseIterGVN*)+0x3bc  (ifnode.cpp:1317)
V  [libjvm.so+0xfdca27]  IfNode::Ideal(PhaseGVN*, bool)+0x367  (ifnode.cpp:1462)
V  [libjvm.so+0x179ef38]  PhaseIterGVN::transform_old(Node*)+0xb8  (phaseX.cpp:1256)
V  [libjvm.so+0x179737e]  PhaseIterGVN::optimize()+0x6e  (phaseX.cpp:1203)
V  [libjvm.so+0xaf8f1b]  Compile::Optimize()+0x1bb  (compile.cpp:2214)
V  [libjvm.so+0xafc19e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x18ce  (compile.cpp:830)
V  [libjvm.so+0x90d2e7]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7  (c2compiler.cpp:113)
V  [libjvm.so+0xb0966c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xb0a478]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x107c846]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:697)
V  [libjvm.so+0x1a800f0]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1713cc3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739);;;","2022-12-07 23:18;chagedorn;I was able to reproduce this with a specific state and a specific seed in mainline. It looks like an If is proven to be not taken and is folded. As a result, data is also replaced by top and is dying. In this process, we try to fold two Ifs that share the same CmpI by replacing these with a CmpU. At that specific point, one of the If node has top as bool input. We then try to remove the bool input because it is not used anymore and hit the assert that we cannot remove top. This is extremely intermittent and hard to reproduce. It is an old issue and I will therefore defer it for now to JDK 21.;;;","2022-12-08 02:07;chagedorn;Was still able to find a trivial fix which I've just sent out for review. This could make it before the fork later today.;;;","2022-12-08 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11581
Date: 2022-12-08 10:06:32 +0000;;;","2022-12-08 04:02;dukebot;Changeset: 94575d14
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-12-08 12:00:01 +0000
URL:       https://git.openjdk.org/jdk/commit/94575d14f47e2dfb11b671bce26b69270b6bb3c8
;;;","2023-01-11 06:33;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Low risk, small and obvious change, but C2.
Clean backport. 
SAP nightly testing passed.;;;","2023-01-11 06:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1057
Date: 2023-01-11 14:31:59 +0000;;;","2023-02-13 01:16;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Low risk, small and obvious change, but C2.
Clean backport.
SAP nightly testing passed.;;;","2023-02-13 01:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1719
Date: 2023-02-13 09:22:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/stress/strace/strace013.java failed with ""TestFailure: wrong lengths of stack traces:  strace013Thread0: NNN strace013Thread83: MMM""",JDK-8295099,5085052,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,dcubed,dcubed,2022-10-10 13:40,2023-06-09 03:50,2023-10-01 09:56,2022-11-10 19:43,20,,,,,,,20,hotspot,,0,intermittent,noreg-self,tier7,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

vmTestbase/nsk/stress/strace/strace013.java

Here's a snippet from the log file:

#section:main
----------messages:(6/266)----------
command: main nsk.stress.strace.strace013
reason: User specified action: run main/othervm nsk.stress.strace.strace013 
started: Sat Oct 01 05:15:30 UTC 2022
Mode: othervm [/othervm specified]
finished: Sat Oct 01 05:15:32 UTC 2022
elapsed time (seconds): 1.69
----------configuration:(0/0)----------
----------System.out:(236/8255)----------
#>  
#>  WARNING: switching log to verbose mode,
#>      because error is complained
#>  
starting threads...

<snip>

strace013Thread94>waiting on a monitor
strace013Thread84>waiting on a monitor
strace013Thread90>waiting on a monitor
making all threads snapshots...
making snapshots of each thread...
notifying

checking lengths of stack traces...
strace013Thread0>notified
strace013Thread83>notified
strace013Thread97>notified
# ERROR: wrong lengths of stack traces:
# ERROR: 	strace013Thread0: 204	strace013Thread83: 201
The following stacktrace is for failure analysis.
nsk.share.TestFailure: wrong lengths of stack traces:  strace013Thread0: 204 strace013Thread83: 201
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.stress.strace.strace013.complain(strace013.java:247)
	at nsk.stress.strace.strace013.makeSnapshot(strace013.java:176)
	at nsk.stress.strace.strace013.run(strace013.java:105)
	at nsk.stress.strace.strace013.main(strace013.java:91)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1588)
waiting for finish strace013Thread1
strace013Thread72>notified
strace013Thread95>notified
strace013Thread78>notified
strace013Thread96>notified

<snip>

strace013Thread7>notified
strace013Thread2>notified
strace013Thread1>notified
# ERROR: ***>>>Test failed<<<***


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: wrong lengths of stack traces:
# ERROR: 	strace013Thread0: 204	strace013Thread83: 201
# ERROR: ***>>>Test failed<<<***
----------System.err:(0/0)----------
----------rerun:(38/6212)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300317,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2yuh7:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-11 12:00;dcubed;[~mseledtsov] - These are stack trace stress tests. Normally stack trace
stuff lands in Runtime...;;;","2022-10-18 19:47;dholmes;The error report is not very useful: ""wrong length of stacktraces"" - but it doesn't say if they are too long or too short! And there seems to be no record of what the stacktraces actually were - I downloaded the test artifacts and there is nothing that I can find to show what actually happened. ??

The same test failed the same way in Valhalla CI back on September 9.;;;","2022-11-06 20:49;dholmes;The test is incorrectly synchronized:

 synchronized (test) {
                test.achivedCount++;
            }

            synchronized (strace013.lockedObject) {
                try {
                    strace013.lockedObject.wait();
                } catch (InterruptedException e) {
                    strace013.complain("""" + e);
                }
            }

It uses achivedcount (sic) to indicate the threads have reached the wait() call, but that is obviously not the case. The error on closer reading says:

# ERROR: wrong lengths of stack traces:
# ERROR: strace013Thread0: 204 strace013Thread83: 201

So 204 elements versus 201 - so 3 frames missing. If we have not yet called wait() then those three frames are : wait(), wait(0) and wait0(0).;;;","2022-11-06 21:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11011
Date: 2022-11-07 05:37:50 +0000;;;","2022-11-10 19:43;dukebot;Changeset: 956d75bc
Author:    David Holmes <dholmes@openjdk.org>
Date:      2022-11-11 03:41:54 +0000
URL:       https://git.openjdk.org/jdk/commit/956d75bcc0a358b7ff6d7ea7eb501d789096e518
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] follow-up for JDK-8288131,JDK-8295086,5085038,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,vromero,vromero,2022-10-10 11:40,2022-10-24 12:27,2023-10-01 09:56,2022-10-24 12:27,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw4,lworld,,,,,,,,,,,,,,,,,,,,some code dealing with primitive classes remain to be guarded by the -XDenablePrimitiveClasses option. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yue3:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-10-12 12:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/793
Date: 2022-10-12 19:35:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TextField blurry when inside an TitledPane -> AnchorPane,JDK-8295078,5085030,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mhanl,tsayao,tsayao,2022-10-10 10:05,2023-05-23 11:10,2023-10-01 09:56,2023-05-17 09:43,jfx19,,,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,,,,,,,,,,"When the TextField is inside a TitledPane -> AnchorPane structure, it looks blurry and the border looks thicker.

Opening the provided .fxml on SceneBuilder shows the problem as well as running the attached example.

       ",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296283,,JDK-8296609,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-10 10:02;tsayao;Bug.fxml;https://bugs.openjdk.org/secure/attachment/101016/Bug.fxml","2022-10-10 09:59;tsayao;HelloFx.java;https://bugs.openjdk.org/secure/attachment/101017/HelloFx.java","2022-10-10 10:12;tsayao;blurry_with_anchorpane.png;https://bugs.openjdk.org/secure/attachment/101020/blurry_with_anchorpane.png","2022-10-10 10:12;tsayao;normal_without_anchorpane.png;https://bugs.openjdk.org/secure/attachment/101019/normal_without_anchorpane.png",,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux_ubuntu,,,,,,"0|i2yucb:",9223372036854775807,b18,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-10-10 10:49;mhanl;Is also happening on Windows. Maybe the children of the AnchorPane are not snapped correctly.;;;","2022-10-10 11:29;mhanl;Just had a look and I can confirm that this is a problem with snapping. I also already have an idea to fix this. Should I file a PR? Just asking since Ambarish got assigned.;;;","2022-10-10 14:17;kcr;[~mhanl] Please go ahead and take it.;;;","2022-10-10 14:18;kcr;I just looked at the two images. I was looking at whether the *text* was blurry, which is the usual problem we run into. I didn't see any problem with the text. From the attached images (which aren't showing any text) I can see that the *border* of the TextField is blurry when in an AnchorPane and is not blurry if not in an AnchorPane. As mentioned by Maruis, I can also reproduce this on Windows.;;;","2022-10-11 02:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/910
Date: 2022-10-11 09:05:34 +0000;;;","2023-05-17 09:43;dukebot;Changeset: 6aeaff36
Author:    Marius Hanl <mhanl@openjdk.org>
Date:      2023-05-17 16:41:26 +0000
URL:       https://git.openjdk.org/jfx/commit/6aeaff36c07129d807fd3efa8aa20fb8dd8dc31a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Spec Clarification : ClassFileFormatVersion: System property java.class.version | Java class format version number",JDK-8295071,5085020,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,amadgundi,amadgundi,2022-10-10 08:21,2023-06-12 20:49,2023-10-01 09:56,2023-06-06 11:35,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"Spec Clarification : ClassFileFormatVersion: System property java.class.version | Java class format version number

https://download.java.net/java/early_access/jdk20/docs/api/java.base/java/lang/reflect/ClassFileFormatVersion.html

How System.getProperty(""java.class.version"") could be parsed and used -
is it M.m (JVMS-4.1)
(minor_version, major_version
The values of the minor_version and major_version items are the minor and major version numbers of this class file. Together, a major and a minor version number determine the version of the class file format. If a class file has major version number M and minor version number m, we denote the version of its class file format as M.m.)

or is it major version as double, 
and whether it should match ClassFileFormatVersion::latest()

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309415,,,,,,,,,,JDK-8309554,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,"0|i2yua3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-06-04 18:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14305
Date: 2023-06-05 01:11:54 +0000;;;","2023-06-06 11:35;dukebot;Changeset: d82436e4
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-06-06 18:33:42 +0000
URL:       https://git.openjdk.org/jdk/commit/d82436e4e33a33b1a2ea5ad01c7370ccaf4eb2c5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PPC64] Performance regression after JDK-8290025,JDK-8295069,5085015,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2022-10-10 06:44,2022-10-17 13:54,2023-10-01 09:56,2022-10-11 12:21,20,,,,,,,20,hotspot,,0,oracle-triage-20,performance,,,,,,,,,,,,,,,,,,,,"JDK-8290025 has enabled usage of nmethod entry barriers regardless of the selected GC. This causes a noticeable performance drop (about 3% in SPEC jvm98, jvm2008, and a bit more in jbb2015). PPC64 suffers more than x86 because the nmethod entry barrier contains a memory barrier for GCs which patch nmethods during a concurrent phase.

However, not all GCs perform patching of nmethods while the Java Threads are running, so, the memory barrier is not always needed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290025,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,"0|i2yu8z:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-10 07:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10632
Date: 2022-10-10 14:02:09 +0000;;;","2022-10-10 12:10;dlong;ILW = performance regression; 3 benchmarks; no workaround = MMH = P3;;;","2022-10-11 12:21;dukebot;Changeset: 945950d8
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-10-11 19:19:41 +0000
URL:       https://git.openjdk.org/jdk/commit/945950d863ebe984e099d83f967adce71892bb95
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSLEngine throws NPE parsing CertificateRequests,JDK-8295068,5085014,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kdriver,mschoene,mschoene,2022-10-10 06:42,2023-07-12 13:55,2023-10-01 09:56,2023-07-07 09:56,11,17,21,22,8,,,22,security-libs,,0,amazon-interest,fuzzing,noreg-trivial,,,,,,,,,,,,,,,,,,,"A fuzzed server hello message causes an NPE during handshake:

Exception in thread ""main"" java.lang.NullPointerException: Cannot read field ""isAvailable"" because ""cct"" is null
	at java.base/sun.security.ssl.CertificateRequest$ClientCertificateType.getKeyTypes(CertificateRequest.java:138)
	at java.base/sun.security.ssl.CertificateRequest$T12CertificateRequestMessage.getKeyTypes(CertificateRequest.java:518)
	at java.base/sun.security.ssl.CertificateRequest$T12CertificateRequestConsumer.choosePossession(CertificateRequest.java:756)
	at java.base/sun.security.ssl.CertificateRequest$T12CertificateRequestConsumer.consume(CertificateRequest.java:733)
	at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:396)
	at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:480)
	at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:1273)
	at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:1260)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask.run(SSLEngineImpl.java:1205)
	at SSLEngineClientReadFile.runDelegatedTasks(SSLEngineClientReadFile.java:121)
	at SSLEngineClientReadFile.runDemo(SSLEngineClientReadFile.java:94)
	at SSLEngineClientReadFile.main(SSLEngineClientReadFile.java:45)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8196584,,,,,,,,,"2022-10-10 06:42;mschoene;SSLEngineClientReadFile.java;https://bugs.openjdk.org/secure/attachment/101010/SSLEngineClientReadFile.java","2022-10-10 06:42;mschoene;ssl19_npe_isAvailable_cct.bin;https://bugs.openjdk.org/secure/attachment/101011/ssl19_npe_isAvailable_cct.bin","2022-10-10 06:42;mschoene;testkeys;https://bugs.openjdk.org/secure/attachment/101009/testkeys",,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2yu8r:",9223372036854775807,b06,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-07-05 13:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14778
Date: 2023-07-05 20:25:26 +0000;;;","2023-07-07 09:56;dukebot;Changeset: 5667afc3
Author:    Kevin Driver <kdriver@openjdk.org>
Committer: Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2023-07-07 16:55:26 +0000
URL:       https://git.openjdk.org/jdk/commit/5667afc36275b064c7700518f453fe8657e13636
;;;","2023-07-10 02:00;shade;Seems to be this way since original TLS 1.3 implementation, JDK-8196584.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Folding of loads is broken in C2 after JDK-8242115,JDK-8295066,5085012,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iveresov,thartmann,thartmann,2022-10-10 06:14,2023-03-09 00:21,2023-10-01 09:56,2022-10-26 13:49,11,17,20,,,,,20,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-20,performance,,,,,,,,,,,,,,,"When merging JDK-8242115 into Valhalla, we noticed massive failures with our IR verification tests. It turned out that (at least) folding of loads is broken. For example, with the following test (attached):

    static class MyClass {
        int x = 42;
    }

    public static int test() {
        MyClass[] array = new MyClass[1];
        array[0] = new MyClass();
        return array[0].x;
    }

Before JDK-8242115, the load from the array is constant folded to 42 and the MyClass array and object allocations are removed. This does not work anymore after the fix, leading to a significant performance regression in microbenchmarks.

To reproduce, simply run:
java -XX:+AlwaysIncrementalInline -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,Test::test -Xbatch -XX:CompileCommand=print,Test::test -XX:-TieredCompilation Test.java

and check _new_array_Java and _new_instance_Java calls in compiled code.

There might be more issues but we can check that by applying a prototype fix and re-running Valhalla tests. For now, we omitted JDK-8242115 when merging master into Valhalla.",,,,,,,,,,,JDK-8298860,JDK-8299160,JDK-8299480,,,,,,,,,,,,,,,,,,,,,,JDK-8296014,,,,,,,JDK-8303701,,,,,,,,,,,JDK-8242115,,,,,,,,,"2022-10-22 10:24;iveresov;8295066-2.patch;https://bugs.openjdk.org/secure/attachment/101167/8295066-2.patch","2022-10-15 14:21;iveresov;8295066.patch;https://bugs.openjdk.org/secure/attachment/101092/8295066.patch","2022-10-10 06:14;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/101007/Test.java","2022-10-17 03:09;thartmann;Test2.java;https://bugs.openjdk.org/secure/attachment/101099/Test2.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yu8b:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-10 06:28;thartmann;ILW = Performance regression due to broken folding of loads, loads from arrays, no workaround = MMH = P3;;;","2022-10-10 06:32;thartmann;Igor, could you please have a look?;;;","2022-10-10 10:16;iveresov;So, actually it broke EA. Because for folding to happen (at least in this case EA needs to happen).;;;","2022-10-10 19:55;iveresov;I have a hack to make it work again, but I need to tidy it up and hide a bunch stuff behind the GC API.;;;","2022-10-10 23:11;thartmann;Thanks for the update, Igor. I did not look into it in detail, so it might well be that other things are broken as well. Let me know if you have a prototype fix, so I can run it through Valhalla testing.;;;","2022-10-15 14:21;iveresov;The solution is actually to allow it to constant fold in LoadNode::Identity().
I attached the suggested fix.;;;","2022-10-17 03:11;thartmann;I verified that this fixes most of the issues we obverse in Valhalla but there's at least one issue left. I attached a corresponding test (Test2.java):
java -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,Test2::test -XX:-TieredCompilation -XX:CompileCommand=print,Test2::test Test2.java | grep new_instance

The problem is that your fix bails out from LoadNode::Ideal and therefore the ""// Split instance field load through Phi"" code is not executed.

I'm worried that your fix disables more optimizations that are currently not caught by any tests. For example, all the other code that's part of LoadNode::Ideal and LoadNode::Identity. ;;;","2022-10-17 09:25;iveresov;Ugh, this would be very hard to do. Even if it's doable in this case, in general with loops it would mean moving the load across safepoints, which is exactly what we don't want to do. I guess the only way to approach this is to tweak the scalarization logic to ignore the barriers. ;;;","2022-10-21 00:09;thartmann;Right, it's probably not worth the trouble. But if I understand correctly, either:
- JDK-8242115 is not complete yet, because LCM/GCM *could* still move the pre-val load above a safepoint, in which case we would need something similar to very late barrier expansion in ZGC, or
- LCM/GCM are not an issue and we could introduce a ""simple"" macro node for oop loads/stores that expand the barrier code only after optimizations.;;;","2022-10-22 10:26;iveresov;So, I tweaked the scalarization logic. Now both of you tests pass. Please see if it solves all the problems. The second patch (8295066-2.patch) includes the changes from the first one.;;;","2022-10-24 02:58;thartmann;I'm now seeing new IR verification failures with the patch. You can reproduce them by applying both JDK-8242115 and your patch to the 'lworld' branch of https://github.com/openjdk/valhalla and then run test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestArrays.java.;;;","2022-10-25 00:55;thartmann;Okay, my bad, I screwed up the merge. Your latest fix passes all Valhalla tests.;;;","2022-10-25 13:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10861
Date: 2022-10-25 19:50:10 +0000;;;","2022-10-26 13:49;dukebot;Changeset: 58a7141a
Author:    Igor Veresov <iveresov@openjdk.org>
Date:      2022-10-26 20:45:26 +0000
URL:       https://git.openjdk.org/jdk/commit/58a7141a0dea5d1b4bfe6d56a95d860c854b3461
;;;","2022-12-29 05:40;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Required follow-up to 8242115.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-12-29 10:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1001
Date: 2022-12-29 13:41:19 +0000;;;",,,,,,,,,,,,,,,,,,,
[11u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 11.0.17,JDK-8295057,5085003,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-10-10 03:24,2022-10-19 00:34,2023-10-01 09:56,2022-10-18 13:21,11.0.17,,,,,,,11.0.17,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,"As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.",,,,,,,,,,,JDK-8295644,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yu6b:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2022-10-18 13:21;dukebot;Changeset: 69ce82b9
Author:    Christoph Langer <christoph.langer@sap.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-10-10 17:03:28 +0000
URL:       https://git.openjdk.org/jdk11u/commit/69ce82b96fceb82c0363d0b33b977111685d516a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[17u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 17.0.5,JDK-8295056,5085002,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-10-10 03:22,2022-10-19 00:32,2023-10-01 09:56,2022-10-18 13:29,17.0.5,,,,,,,17.0.5,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,"As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.",,,,,,,,,,,JDK-8295635,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295641,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yu63:",9223372036854775807,b08,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2022-10-18 13:29;dukebot;Changeset: 0a625278
Author:    Christoph Langer <christoph.langer@sap.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-10-10 15:07:22 +0000
URL:       https://git.openjdk.org/jdk17u/commit/0a6252780a862e6d5646a28c2b22a1c03eff37bf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
hsdis configure error when cross-compiling with --with-binutils-src,JDK-8295033,5084979,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dzhang,dzhang,dzhang,2022-10-09 23:23,2022-10-17 13:55,2023-10-01 09:56,2022-10-12 00:27,20,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,"I built hsdis with the following parameters from source code of binutils while cross-compiling:
```
--with-hsdis=binutils \
--with-binutils-src=/home/dingli/jdk-tools/binutils-2.38
```

But configure will exit with the following error:
```
checking whether we are cross compiling... configure: error: in `/home/dingli/jdk-tools/binutils-2.38-src':
configure: error: cannot run C compiled programs.
If you meant to cross compile, use `--host'.
See `config.log' for more details
configure: Automatic building of binutils failed on configure. Try building it manually
configure: error: Cannot continue
configure exiting with result code 1
```

The reason for the error is that binutils wants to be configured with --host during cross-compilation. So we can determine if we are currently cross-compiling and add the --host parameter to binutils_target:
```
diff --git a/make/autoconf/lib-hsdis.m4 b/make/autoconf/lib-hsdis.m4
index d72bbf6df32..dddc1cf6a4d 100644
--- a/make/autoconf/lib-hsdis.m4
+++ b/make/autoconf/lib-hsdis.m4
@@ -175,7 +175,11 @@ AC_DEFUN([LIB_BUILD_BINUTILS],
       fi
     else
       binutils_cc=""$CC $SYSROOT_CFLAGS""
-      binutils_target=""""
+      if test ""x$host"" = ""x$build""; then
+        binutils_target=""""
+      else
+        binutils_target=""--host=$host""
+      fi
     fi
     binutils_cflags=""$binutils_cflags $MACHINE_FLAG $JVM_PICFLAG $C_O_FLAG_NORM""
```

In the meantime, I removed some useless code about hsdis-demo because hsdis-demo.c was removed in JDK-8275128 .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2yu0z:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-09 23:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10628
Date: 2022-10-10 06:32:09 +0000;;;","2022-10-12 00:27;dukebot;Changeset: 392f35df
Author:    Dingli Zhang <dzhang@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2022-10-12 07:24:30 +0000
URL:       https://git.openjdk.org/jdk/commit/392f35df4be1a9a8d7a67a25ae01230c7dd060ac
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/LotsOfClasses.java fail with jfx,JDK-8295029,5084975,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,lzhai,lzhai,2022-10-09 19:29,2022-11-06 23:39,2023-10-01 09:56,2022-10-18 13:29,,,,,,,,20,hotspot,,0,classloading,noreg-hard,,,,,,,,,,,,,,,,,,,,"configure --with-import-modules=modular-sdk

make run-test CONF=fastdebug TEST=""runtime/cds/appcds/LotsOfClasses.java"" failed:

```
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/dictionary.cpp:290
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/zhaixiang/jdk/src/hotspot/share/classfile/dictionary.cpp:290), pid=7748, tid=7749
#  assert(!needs_rehashing) failed: should never need rehashing
#
# JRE version: OpenJDK Runtime Environment (20.0) (fastdebug build 20-internal-adhoc.zhaixiang.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 20-internal-adhoc.zhaixiang.jdk, interpreted mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xa85ee4]  Dictionary::get_entry(Thread*, Symbol*)+0x284
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/zhaixiang/jdk/build/linux-aarch64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_LotsOfClasses_java/scratch/0/hs_err_pid7748.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
];
 stderr: [WARNING: Using incubator modules: jdk.incubator.vector, jdk.incubator.concurrent
]
 exitValue = 134

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [134]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at jdk.test.lib.cds.CDSTestUtils.checkDump(CDSTestUtils.java:280)
	at jdk.test.lib.cds.CDSTestUtils.createArchiveAndCheck(CDSTestUtils.java:300)
	at LotsOfClasses.main(LotsOfClasses.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test


TEST RESULT: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [134]
```

Workaround via UseEpsilonGC:

```
make run-test CONF=fastdebug TEST=""runtime/cds/appcds/LotsOfClasses.java"" JTREG=""VM_OPTIONS=-XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC""
```

or just increase the ""magic number"":

```
diff --git a/src/hotspot/share/classfile/dictionary.cpp b/src/hotspot/share/classfile/dictionary.cpp
index c07d17ab1db..bc498ca041b 100644
--- a/src/hotspot/share/classfile/dictionary.cpp
+++ b/src/hotspot/share/classfile/dictionary.cpp
@@ -50,8 +50,8 @@
 
 // 2^24 is max size, like StringTable.
 const size_t END_SIZE = 24;
-// If a chain gets to 100 something might be wrong
-const size_t REHASH_LEN = 100;
+// If a chain gets to magic number 103 something might be wrong
+const size_t REHASH_LEN = 103;
 
 Dictionary::Dictionary(ClassLoaderData* loader_data, size_t table_size, bool resizable)
   : _resizable(resizable), _number_of_entries(0), _loader_data(loader_data) {
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292680,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,"0|i2yu03:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-10-10 01:15;lkorinth;Seems to be a runtime issue, changing to subcomponent runtime.;;;","2022-10-11 11:20;mseledtsov;ILW = HLM = P3;;;","2022-10-11 18:24;lzhai;Thank Leo for changing the subcomponent!

Before: Configured without jfx-modular-sdk
After:    Configured with jfx-modular-sdk

debug patch:

```
diff --git a/src/hotspot/share/classfile/dictionary.cpp b/src/hotspot/share/classfile/dictionary.cpp
index c07d17ab1db..a6a712bd89a 100644
--- a/src/hotspot/share/classfile/dictionary.cpp
+++ b/src/hotspot/share/classfile/dictionary.cpp
@@ -233,6 +233,9 @@ public:
   bool equals(DictionaryEntry** value, bool* is_dead) {
     DictionaryEntry *entry = *value;
     *is_dead = false;
+    if (entry->instance_klass()->name() != _name) {
+      log_debug(cds)(""DEBUG: %s != %s"", entry->instance_klass()->name()->as_utf8(), _name->as_utf8());
+    }
     return (entry->instance_klass()->name() == _name);
   }
 };
```

Before there are only 2609957 (grep DEBUG) !lookup_f.equals (not equals) in the ConcurrentHashTable get_node.
After there are more than 6000000 (overflow threshold).

So I just debug the overflow threshold:

```
diff --git a/src/hotspot/share/utilities/concurrentHashTable.inline.hpp b/src/hotspot/share/utilities/concurrentHashTable.inline.hpp
index f004be604f6..938568d7bf9 100644
--- a/src/hotspot/share/utilities/concurrentHashTable.inline.hpp
+++ b/src/hotspot/share/utilities/concurrentHashTable.inline.hpp
@@ -622,10 +624,13 @@ ConcurrentHashTable<CONFIG, F>::
   Node* node = bucket->first();
   while (node != NULL) {
     bool is_dead = false;
-    ++loop_count;
-    if (lookup_f.equals(node->value(), &is_dead)) {
+    bool is_overflow = false;
+    if (lookup_f.equals(node->value(), &is_dead, &is_overflow)) {
       break;
     }
+    if (!is_overflow) {
+      ++loop_count;
+    }
     if (is_dead && !(*have_dead)) {
       *have_dead = true;
     }

diff --git a/src/hotspot/share/classfile/dictionary.cpp b/src/hotspot/share/classfile/dictionary.cpp
index c07d17ab1db..8b0a2bbd96d 100644
--- a/src/hotspot/share/classfile/dictionary.cpp
+++ b/src/hotspot/share/classfile/dictionary.cpp
@@ -230,9 +230,16 @@ public:
   uintx get_hash() const {
     return _name->identity_hash();
   }
-  bool equals(DictionaryEntry** value, bool* is_dead) {
+  bool equals(DictionaryEntry** value, bool* is_dead, bool* is_overflow) {
     DictionaryEntry *entry = *value;
     *is_dead = false;
+    *is_overflow = false;
+    if (_not_equals_count > 6000000) {
+      *is_overflow = true;
+    }
+    if (entry->instance_klass()->name() != _name) {
+      _not_equals_count++;
+    }
     return (entry->instance_klass()->name() == _name);
   }
 };

```

Is it OK to just increase the magic number REHASH_LEN instead of overflow threshold?

Thanks,
Leslie Zhai;;;","2022-10-12 05:40;coleenp;This table should resize and never rehash, unless one bucket is unbalanced which I don't know if that's the case.  A bucket can be unbalanced if the hash function is wrong, but not otherwise.  Maybe the END_SIZE for resizing should be a lot higher.;;;","2022-10-12 05:43;coleenp;And what is this class loader with 6000000 classes?;;;","2022-10-12 07:34;coleenp;configure: error: --with-import-modules=""modular-sdk"" must point to a dir or a zip file
Can you provide a path for this?;;;","2022-10-12 10:59;iklam;LotsOfClasses.java loads all classes from the $JAVA_HOME/lib/modules file, which usually has about 26000 classes in JDK 20. Maybe [~lzhai] is using  --with-import-modules= during the build process to add a large number of classes? I doubt it's 6,000,000 classes, though.

Anyway, instead of running LotsOfClasses.java inside jtreg, here's a simpler reproducer that doesn't depend on CDS.

The failure may depend on the exact names of the class in the module image, so simply having a large number of classes (e.g., auto-generate 1000000 classes) may not reproduce the crash.

$ javac LoadAll.java
$ java -cp . --enable-preview LoadAll


import java.net.URI;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LoadAll {
    static Pattern pattern;
    static ClassLoader loader = LoadAll.class.getClassLoader();

    public static void main(String args[])  throws Exception {
        pattern = Pattern.compile(""/modules/[a-z.]*[a-z]+/([^-]*)[.]class"");
        FileSystem fs = FileSystems.getFileSystem(URI.create(""jrt:/""));
        Path base = fs.getPath(""/modules/"");
        loadAllClassesAtPath(base);
    }

    private static void loadAllClassesAtPath(Path p) throws Exception {
        try (DirectoryStream<Path> stream = Files.newDirectoryStream(p)) {
            for (Path entry: stream) {
                Matcher matcher = pattern.matcher(entry.toString());
                if (matcher.find()) {
                    String className = matcher.group(1).replace('/', '.');
                    System.out.println(className);
                    System.out.println(Class.forName(className, false, loader));
                }
                try {
                    loadAllClassesAtPath(entry);
                } catch (Exception ex) {}
            }
        }
    }
}
;;;","2022-10-12 11:02;iklam;[~lzhai] if you cannot share modular-sdk, please see if you can reproduce the error with LoadAll.java, and email us a copy of the stdout/stderr so we know what names are used for the classes.;;;","2022-10-12 19:39;lzhai;> Maybe the END_SIZE for resizing should be a lot higher.

2^27 still failed:

```
diff --git a/src/hotspot/share/classfile/dictionary.cpp b/src/hotspot/share/classfile/dictionary.cpp
index c07d17ab1db..99220562f21 100644
--- a/src/hotspot/share/classfile/dictionary.cpp
+++ b/src/hotspot/share/classfile/dictionary.cpp
@@ -48,8 +48,8 @@
 #include ""utilities/growableArray.hpp""
 #include ""utilities/tableStatistics.hpp""
 
-// 2^24 is max size, like StringTable.
-const size_t END_SIZE = 24;
+// 2^27 is max size, like StringTable.
+const size_t END_SIZE = 27;
 // If a chain gets to 100 something might be wrong
 const size_t REHASH_LEN = 100;
 
```

> Can you provide a path for this?

Sure:   https://pan.lawh.fun:88/#s/8mFdFSdQ   and password: openjdk

md5sum:
7ad77afc17437eef1540793c1a61f465  jfx-ls-modular-sdk-Release-ls-20+0-0-1-ga81a662-internal-x86-f29-build.tar.gz

tar xf jfx-ls-modular-sdk-Release-ls-20+0-0-1-ga81a662-internal-x86-f29-build.tar.gz

then reconfigure --with-import-modules=""your extract modular-sdk path""

> I doubt it's 6,000,000 classes, though

Yes! too lots of javafx classes:

grep DEBUG with-import-modules-debug.log |wc -l
6487245

> the stdout/stderr so we know what names are used for the classes.

Sure:   https://pan.lawh.fun:88/#s/8mGBL5Dw  and password: openjdk

grep javafx LoadAll-with-import-modules-debug.log |wc -l
8526

Thanks,
Leslie Zhai;;;","2022-10-13 15:14;coleenp;The reason for the assert is that it's happening during CDS dumptime and there's this code:

  if (!DynamicallyResizeSystemDictionaries || DumpSharedSpaces) {
    resizable = false;
  }

Which makes the Dictionary not resizeable.  The dictionary code expects that large hashtables get resized, and this hashtable is:

Dictionary statistics:
Number of buckets       :       128 =      1024 bytes, each 8
Number of entries       :      9939 =    159024 bytes, each 16
Number of literals      :      9939 =    159024 bytes, avg  16.000
Total footprint         :           =    319072 bytes
Average bucket size     :    77.648
Variance of bucket size :    94.525
Std. dev. of bucket size:     9.722
Maximum bucket size     :       101
;;;","2022-10-13 18:46;lzhai;Yes! the root cause:

```
  if (!DynamicallyResizeSystemDictionaries || DumpSharedSpaces) {
    resizable = false;
  }
```

The testcase passed if just comment the DumpSharedSpaces.

But how about the ""overflow threshold"" to change _resizable as true in the Dictionary's check_if_needs_resize?

```
diff --git a/src/hotspot/share/classfile/dictionary.cpp b/src/hotspot/share/classfile/dictionary.cpp
index c07d17ab1db..9c57819dfe8 100644
--- a/src/hotspot/share/classfile/dictionary.cpp
+++ b/src/hotspot/share/classfile/dictionary.cpp
@@ -53,6 +53,8 @@ const size_t END_SIZE = 24;
 // If a chain gets to 100 something might be wrong
 const size_t REHASH_LEN = 100;
 
+static size_t _not_equals_count = 0;
+
 Dictionary::Dictionary(ClassLoaderData* loader_data, size_t table_size, bool resizable)
   : _resizable(resizable), _number_of_entries(0), _loader_data(loader_data) {
 
@@ -104,6 +106,10 @@ int Dictionary::table_size() const {
 }
 
 bool Dictionary::check_if_needs_resize() {
+  // overflow threshold
+  if (_not_equals_count > 5846200) {
+    _resizable = true;
+  }
   return (_resizable &&
          (_number_of_entries > (_resize_load_trigger * table_size())) &&
          !_table->is_max_size_reached());
@@ -233,6 +239,9 @@ public:
   bool equals(DictionaryEntry** value, bool* is_dead) {
     DictionaryEntry *entry = *value;
     *is_dead = false;
+    if (entry->instance_klass()->name() != _name) {
+      _not_equals_count++;
+    }
     return (entry->instance_klass()->name() == _name);
   }
 };
```

Thanks,
Leslie Zhai;;;","2022-10-13 19:27;coleenp;Even better, I'm planning on taking out the whole concept of tables not resizable since there's no reason for it anymore since the shared dictionaries use the compact hashtable.
https://github.com/openjdk/jdk/pull/10708;;;","2022-10-17 05:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10708
Date: 2022-10-14 02:27:01 +0000;;;","2022-10-18 13:29;dukebot;Changeset: 37f93b67
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-10-18 20:26:15 +0000
URL:       https://git.openjdk.org/jdk/commit/37f93b6728ae9ebe4bbd89edcf521def67845fdf
;;;",,,,,,,,,,,,,,,,,,,,,
"(bf) ByteBuffer ""Access to binary data"" section suggests putFloat is void",JDK-8295025,5084970,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,alanb,alanb,2022-10-09 09:03,2022-10-19 23:15,2023-10-01 09:56,2022-10-13 11:42,20,,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"This was reported in a mail to nio-dev. The ""Access to binary data"" section of the javadoc has ""void putFloat"" but the method returns the buffer.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ytyz:",9223372036854775807,b20,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-10-10 02:07;rgiulietti;Verified on JDK 19 documentation;;;","2022-10-10 15:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10638
Date: 2022-10-10 22:05:58 +0000;;;","2022-10-13 11:42;dukebot;Changeset: 18dd9ee7
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-10-13 18:39:48 +0000
URL:       https://git.openjdk.org/jdk/commit/18dd9ee7010cc4c2ded24042049e94d3f775a785
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac emits incorrect code for for-each on an intersection type.,JDK-8295020,5084856,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,webbuggrp,webbuggrp,2022-10-06 13:32,2022-10-19 23:18,2023-10-01 09:56,2022-10-17 00:42,19,,,,,,,20,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
A for each on an intersection type with an Iterable whose iterator() method returns a subclass (e.g. MyIterator iterable()) generates a call to a non existing method of the class java.lang.Iterable (iterator() returning MyIterator).

The error at runtime is:
Exception in thread ""main"" java.lang.NoSuchMethodError: 'Main$MyIterable$MyIterator java.lang.Iterable.iterator()'
	at Main.main(Main.java:7


The full offending program is below:

public class Main {

  public static void main(String... args) {
    for (Object s : (MyIterable & Serializable) null) {}
  )}

  static class MyIterable implements Iterable<Object>, Serializable {
    class MyIterator implements Iterator<Object> {
      public boolean hasNext() {
        return false;
      }

      public Object next() {
        return null;
      }

      public void remove() {}
    }

    public MyIterator iterator() {
      return new MyIterator();
    }
  }
}


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
---- Main.java
public class Main {

  public static void main(String... args) {
    for (Object s : (MyIterable & Serializable) null) {}
  )}

  static class MyIterable implements Iterable<Object>, Serializable {
    class MyIterator implements Iterator<Object> {
      public boolean hasNext() {
        return false;
      }

      public Object next() {
        return null;
      }

      public void remove() {}
    }

    public MyIterator iterator() {
      return new MyIterator();
    }
  }
}
----

javac Main.java
java Main

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
no error 
ACTUAL -
Exception in thread ""main"" java.lang.NoSuchMethodError: 'Main$MyIterable$MyIterator java.lang.Iterable.iterator()'
	at Main.main(Main.java:7)

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295022,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-09 05:06;adev;Main.java;https://bugs.openjdk.org/secure/attachment/100998/Main.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2yt9n:",9223372036854775807,b20,,,,,,,,,,,,"2022-10-09 05:11;adev;The issue is reproducible with the following error:

PS C:\test> java Main.java
Exception in thread ""main"" java.lang.NoSuchMethodError: 'Main$MyIterable$MyIterator java.lang.Iterable.iterator()'
        at Main.main(Main.java:7)
;;;","2022-10-10 22:04;sadayapalam;Problem dates back all the way to JDK8 when intersection casts were introduced (prior to that this code is illegal and is rightly rejected) - I could reproduce it in 9, 10, 11, 12 ... and of course of JDK 20 tip. 

ECJ generates code without the exception.

I will investigate.;;;","2022-10-13 21:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10710
Date: 2022-10-14 04:16:33 +0000;;;","2022-10-17 00:42;dukebot;Changeset: cf07eaeb
Author:    Srikanth Adayapalam <sadayapalam@openjdk.org>
Date:      2022-10-17 07:40:19 +0000
URL:       https://git.openjdk.org/jdk/commit/cf07eaeb9291da725181832b8bb1dc54957ba886
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/JRadioButton/4314194/bug4314194.java fails in mach5 for WIndowLookAndFeel,JDK-8295007,5084953,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2022-10-07 21:43,2023-03-05 22:18,2023-10-01 09:56,2022-10-10 04:54,20,,,,,,,20,client-libs,,0,noreg-self,regression,regression_8075916,sn_129,tier4,ursqe-triaged,,,,,,,,,,,,,,,,javax/swing/JRadioButton/4314194/bug4314194.java fails in mach5 for WindowsLookAndFeel with correct color tolerance less than 20%,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8075916,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2ytv7:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-10-08 12:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10618
Date: 2022-10-08 05:04:57 +0000;;;","2022-10-09 08:18;aivanov;I can reproduce the test failure on Linux and macOS.

On Linux, it passes in Metal L&F but fails in Nimbus even though the text color is expected. Metal uses bold fonts whereas Nimbus uses regular font which makes the strokes in letters smaller.

Overall, the test depends greatly on whether the font strokes are thick enough.

The test should disable text anti-aliasing and count the pixels of the correct color; it should ignore pixels of the background color. The accommodate for anti-aliasing on macOS, the tolerance which already in in the test could be used.

In addition to that or instead of, you can use the ‘full block’ character (U+2588 █) which results in a text filled with the selected color.

Use ""\u2588"".repeat(5) instead of ""WWWWW"".;;;","2022-10-10 04:54;dukebot;Changeset: 269252aa
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-10-10 11:51:21 +0000
URL:       https://git.openjdk.org/jdk/commit/269252aa3d5d72859c907a032110d482cf475560
;;;","2022-10-10 12:46;dcubed;The fix for this bug is in jdk-20+19-1323.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Colored text is not shown on disabled checkbox and radio button with GTK LAF for bug4314194.,JDK-8295006,5084952,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abhiscxk,psadhukhan,psadhukhan,2022-10-07 21:26,2022-12-08 15:27,2023-10-01 09:56,2022-12-01 00:09,11,20,8,9,,,,20,client-libs,,0,sn_129,sn_130,sn_132,,,,,,,,,,,,,,,,,,,"Testsuite name:Swing Regression 
Test name(s):open/test/jdk/javax/swing/JRadioButton/4314194/bug4314194.java
fails with GTK L&F

Actual behavior:
Colored text is not shown on disabled checkbox and radio button",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8075916,,,,,,,,JDK-8298083,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux_ubuntu,,,,,,"0|i2ytuz:",9223372036854775807,b27,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-10-10 08:30;aivanov;Can we make the subject shorter and perhaps include the test name?;;;","2022-10-18 21:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10755
Date: 2022-10-19 04:25:42 +0000;;;","2022-12-01 00:09;dukebot;Changeset: ce048e7c
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Committer: Jayathirth D V <jdv@openjdk.org>
Date:      2022-12-01 08:07:22 +0000
URL:       https://git.openjdk.org/jdk/commit/ce048e7cb55517e2710dfe4e802602869d8c5cb8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/loopopts/TestRemoveEmptyLoop.java fails with release VMs after JDK-8294839,JDK-8295005,5084951,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-10-07 16:57,2022-10-12 23:09,2023-10-01 09:56,2022-10-10 00:09,20,,,,,,,20,hotspot,,0,noreg-self,oracle-triage-20,tencent-interest,tier6,tier8,,,,,,,,,,,,,,,,,"
STDERR:
Error: VM option 'StressLongCountedLoop' is develop and is available only in debug version of VM.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294839,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ytur:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-08 12:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10617
Date: 2022-10-08 00:13:04 +0000;;;","2022-10-09 23:48;chagedorn;ILW = Test failure due to using debug only flag with release VM, only single test with release VM, no workaround = MLH = P4;;;","2022-10-10 00:09;dukebot;Changeset: 6ed74ef6
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-10-10 07:06:51 +0000
URL:       https://git.openjdk.org/jdk/commit/6ed74ef654f0b3e5c748895654d6925e2b832732
;;;","2022-10-11 06:56;dcubed;The fix for this bug is in jdk-20+19-1322.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Do not mention applets in the ""java.awt.color"" package",JDK-8295003,5084949,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,serb,serb,serb,2022-10-07 16:17,2022-10-17 13:53,2023-10-01 09:56,2022-10-10 17:43,20,,,,,,,20,client-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,"Some of the specs in the ""java.awt.color"" package mention the applets. It would be good to use ""applications"" instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ytub:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-10-08 12:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10616
Date: 2022-10-07 23:18:58 +0000;;;","2022-10-10 17:43;dukebot;Changeset: 891156a7
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-10-11 00:40:34 +0000
URL:       https://git.openjdk.org/jdk/commit/891156a744e706e2d8da5082b2ee3e63ff6fab76
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/util/Formatter/Basic test cleanup,JDK-8295000,5084942,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,naoto,naoto,2022-10-07 14:35,2023-02-12 11:10,2023-10-01 09:56,2022-10-27 14:00,,,,,,,,20,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,,"Currently, the regression test emits lots of warning messages (attached) that need to be cleaned up.",,,,,,,,,,,JDK-8299486,JDK-8302285,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295239,,,,,,,,,,,,,,,,,,,,"2022-10-07 14:34;naoto;Basic.jtr;https://bugs.openjdk.org/secure/attachment/100994/Basic.jtr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ytsr:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-10-13 15:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10684
Date: 2022-10-13 01:02:43 +0000;;;","2022-10-27 14:00;dukebot;Changeset: 78763fc8
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-10-27 20:55:26 +0000
URL:       https://git.openjdk.org/jdk/commit/78763fc8e0d6940f1c85ff8705733b8e6ae8e945
;;;","2023-02-09 09:12;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nighlty testing passed.;;;","2023-02-09 09:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1157
Date: 2023-02-09 17:20:42 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ResourceBundle naming convention issue in JdbcRowSetResourceBundle.java,JDK-8294989,5084928,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2022-10-07 09:30,2022-11-14 11:37,2023-10-01 09:56,2022-10-25 12:23,,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,"In JdbcRowSetResourceBundle[1]:
    private static final String PATH = “com/sun/rowset/RowSetResourceBundle”;
does not follow proper bundle name conventions, and in some cases the bundles can not be loaded. This constant needs to be a fully qualified class, per ResourceBundle.getBundle()[2].

1. https://github.com/openjdk/jdk/blob/master/src/java.sql.rowset/share/classes/com/sun/rowset/JdbcRowSetResourceBundle.java#L83
2. https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/ResourceBundle.html#getBundle(java.lang.String,java.util.Locale,java.lang.Module)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8247804,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ytpn:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@57fef174,,,,,,,,,"2022-10-19 14:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10612
Date: 2022-10-07 18:24:02 +0000;;;","2022-10-25 12:23;dukebot;Changeset: d393e051
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-10-25 19:21:34 +0000
URL:       https://git.openjdk.org/jdk/commit/d393e051e660d05b645a2d148c6cdfc21b1d347e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSLEngine throws IAE during parsing of X500Principal,JDK-8294985,5084923,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kdriver,mschoene,mschoene,2022-10-07 08:25,2023-06-28 23:17,2023-10-01 09:56,2023-06-09 16:32,19,21,22,,,,,22,security-libs,,0,amazon-interest,fuzzing,noreg-hard,noreg-other,,,,,,,,,,,,,,,,,,"A fuzzed client hello request causes an IAE during handshake: 

Exception in thread ""main"" java.lang.IllegalArgumentException: improperly specified input name
	at java.base/javax.security.auth.x500.X500Principal.<init>(X500Principal.java:227)
	at java.base/sun.security.ssl.CertificateAuthoritiesExtension$CertificateAuthoritiesSpec.getAuthorities(CertificateAuthoritiesExtension.java:129)
	at java.base/sun.security.ssl.CertificateAuthoritiesExtension$CHCertificateAuthoritiesConsumer.consume(CertificateAuthoritiesExtension.java:280)
	at java.base/sun.security.ssl.SSLExtension.consumeOnLoad(SSLExtension.java:609)
	at java.base/sun.security.ssl.SSLExtensions.consumeOnLoad(SSLExtensions.java:201)
	at java.base/sun.security.ssl.ClientHello$T13ClientHelloConsumer.consume(ClientHello.java:1176)
	at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.onClientHello(ClientHello.java:840)
	at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.consume(ClientHello.java:801)
	at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:396)
	at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:480)
	at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:1273)
	at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:1260)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask.run(SSLEngineImpl.java:1205)
	at SSLEngineServerReadFile.runDelegatedTasks(SSLEngineServerReadFile.java:123)
	at SSLEngineServerReadFile.runDemo(SSLEngineServerReadFile.java:94)
	at SSLEngineServerReadFile.main(SSLEngineServerReadFile.java:46)
Caused by: java.io.IOException: Invalid lenByte
	at java.base/sun.security.util.DerValue.<init>(DerValue.java:405)
	at java.base/sun.security.util.DerInputStream.getDerValue(DerInputStream.java:110)
	at java.base/sun.security.util.DerValue.subs(DerValue.java:1283)
	at java.base/sun.security.util.DerInputStream.getSequence(DerInputStream.java:204)
	at java.base/sun.security.x509.X500Name.parseDER(X500Name.java:804)
	at java.base/sun.security.x509.X500Name.<init>(X500Name.java:333)
	at java.base/javax.security.auth.x500.X500Principal.<init>(X500Principal.java:225)
	... 16 more



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-07 08:24;mschoene;SSLEngineServerReadFile.java;https://bugs.openjdk.org/secure/attachment/100984/SSLEngineServerReadFile.java","2022-10-07 08:24;mschoene;ssl19_iae_in_der_parsing_breaks_handshake.bin;https://bugs.openjdk.org/secure/attachment/100985/ssl19_iae_in_der_parsing_breaks_handshake.bin","2022-10-07 08:24;mschoene;testkeys;https://bugs.openjdk.org/secure/attachment/100983/testkeys",,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ytoj:",9223372036854775807,b02,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-04-28 08:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13466
Date: 2023-04-13 18:49:48 +0000;;;","2023-06-09 16:32;dukebot;Changeset: 80edd5c2
Author:    Kevin Driver <kdriver@openjdk.org>
Committer: Bradford Wetmore <wetmore@openjdk.org>
Date:      2023-06-09 23:31:12 +0000
URL:       https://git.openjdk.org/jdk/commit/80edd5c298f21c5e5be3a0c2bb63129e76e0334f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SSLEngine throws ClassCastException during handshake,JDK-8294983,5084921,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,kdriver,mschoene,mschoene,2022-10-07 08:08,2023-08-29 09:18,2023-10-01 09:56,2023-05-04 12:28,19,,,,,,,21,security-libs,,0,fuzzing,,,,,,,,,,,,,,,,,,,,,"A fuzzed client hello request causes a CCE being thrown: 

Exception in thread ""main"" java.lang.ClassCastException: class sun.security.ssl.ServerHandshakeContext cannot be cast to class sun.security.ssl.ClientHandshakeContext (sun.security.ssl.ServerHandshakeContext and sun.security.ssl.ClientHandshakeContext are in module java.base of loader 'bootstrap')
	at java.base/sun.security.ssl.HelloRequest$HelloRequestConsumer.consume(HelloRequest.java:174)
	at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:396)
	at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:480)
	at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:1273)
	at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:1260)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask.run(SSLEngineImpl.java:1205)
	at SSLEngineServerReadFile.runDelegatedTasks(SSLEngineServerReadFile.java:123)
	at SSLEngineServerReadFile.runDemo(SSLEngineServerReadFile.java:94)
	at SSLEngineServerReadFile.main(SSLEngineServerReadFile.java:46)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-07 08:13;mschoene;SSLEngineServerReadFile.java;https://bugs.openjdk.org/secure/attachment/100982/SSLEngineServerReadFile.java","2022-10-07 08:11;mschoene;ssl19_handshake_CCE;https://bugs.openjdk.org/secure/attachment/100981/ssl19_handshake_CCE","2022-10-07 08:57;mschoene;testkeys;https://bugs.openjdk.org/secure/attachment/100990/testkeys",,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2yto3:",9223372036854775807,b22,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,Verified,,"2023-04-28 12:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13727
Date: 2023-04-28 19:28:03 +0000;;;","2023-05-04 12:28;dukebot;Changeset: 197d0cc6
Author:    Kevin Driver <kdriver@openjdk.org>
Committer: Bradford Wetmore <wetmore@openjdk.org>
Date:      2023-05-04 19:25:01 +0000
URL:       https://git.openjdk.org/jdk/commit/197d0cc6031cb470f1bd7678796593ff1bf440ca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Document IllegalArgumentException and NullPointerException thrown by URLStreamHandler::parseURL and URLStreamHandler::setURL,JDK-8294948,5084878,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dfuchs,dfuchs,2022-10-07 02:01,2022-11-14 11:31,2023-10-01 09:56,2022-10-20 10:07,20,,,,,,,20,core-libs,,0,docs-only,noreg-doc,,,,,,,,,,,,,,,,,,,,"URLStreamHandler::parseURL and URLStreamHandler::setURL may throw an IllegalArgumentException if passed malformed/illegal parameters. 
This behavior should be documented.

Note that when these methods are called from URL constructors, the exception is later transformed into MalformedURLException by the constructor.
We should also document (possibly in a blanket statement in URL?) that all URL constructors may also throw MalformedURLException if the underlying URLStreamHandler reject any arguments by throwing IllegalArgumentException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294984,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ytej:",9223372036854775807,b21,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-10-07 09:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10609
Date: 2022-10-07 16:11:07 +0000;;;","2022-10-20 10:07;dukebot;Changeset: 9d0cfd11
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-10-20 08:54:45 +0000
URL:       https://git.openjdk.org/jdk/commit/9d0cfd1130b63f7acd67a52eb35c1ec38d43e514
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use 64bit atomics in patch_verified_entry on x86_64,JDK-8294947,5084877,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsamersoff,dsamersoff,dsamersoff,2022-10-07 01:40,2023-01-16 11:27,2023-10-01 09:56,2022-11-15 02:45,11,17,18,19,20,8,,20,hotspot,,0,c1,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-20,,,,,,,,,,,,,,,"I'm working on a crash that seems to be related to CMC[1] - the JVM crashes when a method become not re-entrant because a JavaThread executing a compiled method reaches an instruction partially-assembled during patching of verified entry point.

Unfortunately, no simple reproducer available.

In the void NativeJump::patch_verified_entry() we atomically patch first 4 bytes, then atomically patch 5th byte, then atomically patch first 4 bytes again. 

But from CMC point of view it's better to patch atomically 8 bytes at once.

1. http://cr.openjdk.java.net/~jrose/jvm/hotspot-cmc.html",,,,,,,,,,,JDK-8298828,JDK-8299586,JDK-8300224,JDK-8298843,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8223613,JDK-8294002,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2yteb:",9223372036854775807,b24,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-10-25 20:29;dlong;[~dsamersoff], I agree making this atomic is a good idea.  But I'm curious, what kind of hardware is the crash happening on, and what are the symtoms that point to patch_verified_entry()?  I tried inserting delays in patch_verified_entry() between the 3 patching steps to make the race condition more evident, but I still couldn't demonstrate a problem with patch_verified_entry().;;;","2022-10-25 20:31;dlong;ILW = 3-step patching allows too many intermediate states, possible cause of crashes; hard to reproduce; no workaround = MLH = P4;;;","2022-10-28 06:42;dsamersoff;The problem is reproducible in a virtualized environment on multi-core Xeon Gold machine. The crash always happens if the compiled method being replaced, immediately after patching, and RIP always points to the byte right after inserted jmp-to-self.
;;;","2022-10-28 13:29;dlong;Thanks [~dsamersoff].  We have been seeing some strange crashes in the OCI virtualized environment, all on AMC EPYC hardware (see JDK-8258825).  I have been wondering if something in the hypervisor could be contributing.  Your crash sounds strange if RIP is at entry-point + 2 or entry-point + 4, because the old instruction is supposed to be at least 5 bytes.  However, if the hypervisor is fetching instructions differently than the CPU, maybe that could cause problems.  Looking around in the Linux KVM code, I see places where it fetches instruction bytes when emulating instructions, or when computing the next RIP.  If the hypervisor does not read the bytes atomically then it seems like it could see strange transient decodings, even if the JVM does patch the code atomically.;;;","2022-11-09 04:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11059
Date: 2022-11-09 12:41:59 +0000;;;","2022-11-15 02:45;dukebot;Changeset: d0fae43e
Author:    Dmitry Samersoff <dsamersoff@openjdk.org>
Date:      2022-11-15 10:43:05 +0000
URL:       https://git.openjdk.org/jdk/commit/d0fae43e89a73e9d73b074fa12276c43ba629278
;;;","2023-01-03 05:51;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Low risk, simple change changing update of a field. Only one platform, but the most important one.
Clean backport.
SAP nightly testing passed.;;;","2023-01-03 05:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1025
Date: 2023-01-03 13:51:46 +0000;;;","2023-01-15 09:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1654
Date: 2023-01-15 16:56:08 +0000;;;","2023-01-16 00:02;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Low risk, simple change changing update of a field. Only one platform, but the most important one.
Clean backport.
SAP nightly testing passed. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] LambdaMetafactory class should reject identity and value superinterface,JDK-8294927,5084861,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2022-10-06 15:27,2022-10-10 16:36,2023-10-01 09:56,2022-10-10 16:36,repo-valhalla,,,,,,,repo-valhalla,core-libs,,0,lw4,lworld,,,,,,,,,,,,,,,,,,,,See http://cr.openjdk.java.net/~dlsmith/jep8277163/jep8277163-20220830/specs/value-objects-jls.html#jls-9.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ytar:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2022-10-08 12:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/783
Date: 2022-10-08 02:12:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JvmtiExport::post_exception_throw() doesn't deal well with concurrent stack processing,JDK-8294924,5084858,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,dholmes,dholmes,2022-10-06 14:09,2023-01-23 05:53,2023-10-01 09:56,2022-11-30 06:18,20,,,,,,,20,hotspot,,0,noreg-hard,tier8,zgc,,,,,,,,,,,,,,,,,,,"closed test:  applications/runthese/RunThese8H.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S95035/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4d5ff98e-fdf0-4290-81ef-a13bbd7f659e/runs/d57b2447-1135-45b7-b94f-9a9db6678149/workspace/open/src/hotspot/share/runtime/stackWatermark.cpp:179), pid=3467366, tid=3543065
#  assert(is_frame_safe(f)) failed: Frame must be safe
#
# JRE version: Java(TM) SE Runtime Environment (20.0+18) (fastdebug build 20-ea+18-1259)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+18-1259, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x18e25f4]  StackWatermark::assert_is_frame_safe(frame const&)+0x74
#

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S95035/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4d5ff98e-fdf0-4290-81ef-a13bbd7f659e/runs/d57b2447-1135-45b7-b94f-9a9db6678149/workspace/open/src/hotspot/share/runtime/stackWatermark.cpp:179), pid=3467366, tid=3543065
#  assert(is_frame_safe(f)) failed: Frame must be safe
#
# JRE version: Java(TM) SE Runtime Environment (20.0+18) (fastdebug build 20-ea+18-1259)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+18-1259, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x18e25f4]  StackWatermark::assert_is_frame_safe(frame const&)+0x74
#

Looks like it crashed when trying to process an exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yta3:",9223372036854775807,b26,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-10-07 01:33;stefank;The exception says that some part of the JVM (most likely not the GC) is trying access the frame without (correctly?) poking the stack watermark. Take a look at the stack trace and see if there's anything obvious there:
```
V  [libjvm.so+0x18e25f4]  StackWatermark::assert_is_frame_safe(frame const&)+0x74  (stackWatermark.cpp:179)
V  [libjvm.so+0x18e4a7d]  StackWatermarkSet::on_iteration(JavaThread*, frame const&)+0xcd  (stackWatermark.inline.hpp:83)
V  [libjvm.so+0xaf6594]  vframeStreamCommon::next()+0x3a4  (frame_x86.inline.hpp:365)
V  [libjvm.so+0x135c9ec]  JvmtiExport::post_exception_throw(JavaThread*, Method*, unsigned char*, oop)+0xc2c  (jvmtiExport.cpp:2021)
V  [libjvm.so+0x100a07c]  InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)+0xb7c  (interpreterRuntime.cpp:556)
j  javasoft.sqe.tests.api.java.util.jar.JarInputStream.StubInputStream.read()I+28
```;;;","2022-10-07 01:54;stefank;Note that there's code inside the vframeStream iteration loop that can safepoint:
```
        vframeStream st(thread);
        assert(!st.at_end(), ""cannot be at end"");
        Method* current_method = NULL;
        // A GC may occur during the Method::fast_exception_handler_bci_for()
        // call below if it needs to load the constraint class. Using a
        // methodHandle to keep the 'current_method' from being deallocated
        // if GC happens.
...
<loop>
  ...
  <safepointing operation>
  ...
  t.next();
```

I don't know of any code that would fix the vframeStream after a safepoint.

Maybe a fix would be to fully process the stack watermark after the potential safepoint?;;;","2022-10-11 02:26;eosterlund;I wonder if it would be worthwhile to disable concurrent stack processing, when in interpreter only mode. Clearly any form of nice low latency characteristics have already been thrown out of the window, and there is a lot of dubious JVMTI code being executed in interpreter only mode. It wouldn't have to think about concurrent stack processing at all then.;;;","2022-10-11 02:57;eosterlund;This small patch would ensure the stack remains fully processed throughout JvmtiExport::post_exception_throw()

diff --git a/src/hotspot/share/prims/jvmtiExport.cpp b/src/hotspot/share/prims/jvmtiExport.cpp
index 25b114a780e..32c165fbdc4 100644
--- a/src/hotspot/share/prims/jvmtiExport.cpp
+++ b/src/hotspot/share/prims/jvmtiExport.cpp
@@ -60,6 +60,7 @@
 #include ""runtime/javaCalls.hpp""
 #include ""runtime/javaThread.hpp""
 #include ""runtime/jniHandles.inline.hpp""
+#include ""runtime/keepStackGCProcessed.hpp""
 #include ""runtime/objectMonitor.hpp""
 #include ""runtime/objectMonitor.inline.hpp""
 #include ""runtime/os.hpp""
@@ -1962,6 +1963,7 @@ void JvmtiExport::post_exception_throw(JavaThread *thread, Method* method, addre
   HandleMark hm(thread);
   methodHandle mh(thread, method);
   Handle exception_handle(thread, exception);
+  KeepStackGCProcessedMark ksgcpm(thread);

   JvmtiThreadState *state = thread->jvmti_thread_state();
   if (state == NULL) {
;;;","2022-11-21 01:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11238
Date: 2022-11-18 12:30:19 +0000;;;","2022-11-30 06:17;dukebot;Changeset: be4245e8
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2022-11-30 14:15:18 +0000
URL:       https://git.openjdk.org/jdk/commit/be4245e814cc29701cc425d8e66854e36eb3aef0
;;;","2023-01-23 05:53;enikitin;As this bug is bearing the 'noreg-hard' label and no tests were present in the commit, I close it with no verification.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing SP value in Linux x86_32 thread context,JDK-8294920,5084843,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-10-06 10:31,2022-10-12 23:09,2023-10-01 09:56,2022-10-07 11:26,11,17,19,20,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,"Manifests with recently added test on x86_32:

$ CONF=linux-x86-server-fastdebug make test TEST=serviceability/sa/ClhsdbThreadContext.java

...

Thread ""SteadyStateThread"" id=2303604 Address=0xa52d32e0
GS: 0x00000063
FS: null
ES: 0x0000002b
DS: 0x0000002b
EDI: null
ESI: 0xa3e7cb40: In java stack [0xa3e7e000,null,0xa3e2e000] for thread sun.jvm.hotspot.runtime.JavaThread@0xa52d32e0:
   ""SteadyStateThread"" #19 prio=5 tid=0xa52d32e0 nid=2303604 waiting for monitor entry [0xa3e7c000]
   java.lang.Thread.State: BLOCKED (on object monitor)
   JavaThread state: _thread_blocked
EBP: 0xffffffff
ESP: null
EBX: 0xa52d3a68
EDX: null
ECX: 0x00000089
EAX: 0xfffffdfc
TRAPNO: null
ERR: null
EIP: 0xf7f38549
CS: 0x00000023
EFLAGS: null
UESP: 0xa3e7cb08: In java stack [0xa3e7e000,null,0xa3e2e000] for thread sun.jvm.hotspot.runtime.JavaThread@0xa52d32e0:
   ""SteadyStateThread"" #19 prio=5 tid=0xa52d32e0 nid=2303604 waiting for monitor entry [0xa3e7c000]
   java.lang.Thread.State: BLOCKED (on object monitor)
   JavaThread state: _thread_blocked


java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'In java stack \[0x\p{XDigit}+,0x\p{XDigit}+,0x\p{XDigit}+\] for thread' missing from stdout/stderr
```

The test fails because debugger output prints `null` in `[0xa3e7e000,null,0xa3e2e000]`, which is read from ESP. However, we actually populate only `SP`, which is the alias to `UESP`, *not* `ESP`, in `Java_sun_jvm_hotspot_debugger_linux_LinuxDebuggerLocal_getThreadIntegerRegisterSet0`. See the snippet above: `UESP` is definitely there.

`UESP` is user stack pointer in Solaris, `sp_at_signal` in Linux. It looks to me from Linux sources that `sp_at_signal` is always populated with the same value as `sp`. So we either need to populate `ESP` from `get_lwp_regs` input, or we should pull from `SP` (which is aliased to `UESP`) in `*X86JavaThreadPDAccess.getLastSP()`. Prior work in JDK-8208091 did the latter.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250801,JDK-8208091,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yt6r:",9223372036854775807,b19,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-10-06 12:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10598
Date: 2022-10-06 18:59:57 +0000;;;","2022-10-07 11:26;dukebot;Changeset: fe7a4617
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-10-07 18:23:16 +0000
URL:       https://git.openjdk.org/jdk/commit/fe7a4617fec4d9358b8ce08d74f82714198867d1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Summary reporter getter not thread-safe,CODETOOLS-7903390,5088763,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,cstein,cstein,cstein,2022-12-01 22:32,2022-12-06 09:18,2023-10-01 09:56,2022-12-02 10:20,jtreg7.1,,,,,,,jtreg7.2,tools,,0,,,,,,,,,,,,,,,,,,,,,,"An exception

java.util.ConcurrentModificationException
	at java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1229)
	at com.sun.javatest.regtest.report.SummaryReporter.forTestNG(SummaryReporter.java:61)
	at com.sun.javatest.regtest.exec.RegressionScript.getTestNGSummaryReporter(RegressionScript.java:1100)
	at com.sun.javatest.regtest.exec.TestNGAction.endAction(TestNGAction.java:174)
	at com.sun.javatest.regtest.exec.MainAction.run(MainAction.java:361)
	at com.sun.javatest.regtest.exec.RegressionScript.run(RegressionScript.java:275)
	at com.sun.javatest.Script.run(Script.java:431)
	at com.sun.javatest.DefaultTestRunner.runTest(DefaultTestRunner.java:183)
	at com.sun.javatest.DefaultTestRunner$1.run(DefaultTestRunner.java:76)

leads to a couple of JDK tests to fail in ""error"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298178,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,jtreg7.1,,,,,,,,"0|i2zgsj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-12-01 22:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/139
Date: 2022-12-02 06:41:42 +0000;;;","2022-12-05 12:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/141
Date: 2022-12-05 19:10:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update version to 7.2,CODETOOLS-7903388,5087801,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,cstein,cstein,cstein,2022-11-17 09:02,2023-04-20 00:59,2023-10-01 09:56,2022-11-17 09:52,jtreg7.1,,,,,,,jtreg7.2,tools,,0,,,,,,,,,,,,,,,,,,,,,,The next promoted version will be 7.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903460,CODETOOLS-7903226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zauz:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-11-17 09:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/138
Date: 2022-11-17 17:04:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sync jextract for jdk 20 panama API changes,CODETOOLS-7903384,5087701,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-11-16 05:02,2022-12-12 07:22,2023-10-01 09:56,2022-12-12 05:26,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"sync jextract for jdk 20 panama API changes

there have been some renamings - most notably:

MemorySession -> SegmentScope
MemorySegment::session -> MemorySegment::scope
MemorySession.implicit -> SegmentScope.auto",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295044,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2za8r:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-12-05 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/94
Date: 2022-12-05 16:12:25 +0000;;;","2022-12-12 07:22;sundar;The changes were integrated to jdk20 branch of jextract.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: All State objects should be processed,CODETOOLS-7903383,5087276,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2022-11-10 01:35,2023-01-12 07:57,2023-10-01 09:56,2023-01-12 07:57,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"There is a reasonable expectation that once `@State` object is created, it would eventually be acted upon. In fact, the Javadoc for `@Actor`/`@Arbiter` mentions that actor methods would be called on each state object exactly once. There are cases where users rely on this implicit lifecycle assumption to perform cleanups at `@Arbiter` methods. 

Unfortunately, once jcstress leaves the test, it keeps last created state object slice unprocessed, which breaks this assumption.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z7mb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2022-11-10 01:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jcstress/pull/124
Date: 2022-11-10 09:40:21 +0000;;;","2023-01-12 07:57;shade;https://github.com/openjdk/jcstress/commit/e599459354fa0e7fe7b9a2bf7eb468fd3696b373;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sync jextract for memory session a pure lifetime abstraction panama api change,CODETOOLS-7903380,5086922,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-11-07 09:37,2022-11-07 10:05,2023-10-01 09:56,2022-11-07 10:05,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,sync jextract for memory session a pure lifetime abstraction panama api change,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296417,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2z5fn:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-11-07 09:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/92
Date: 2022-11-07 17:40:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH: GC profiler misreports allocation and churn rates,CODETOOLS-7903368,5085723,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2022-10-19 08:32,2022-10-19 10:52,2023-10-01 09:56,2022-10-19 10:48,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"Look at the new test. If you multiply the allocation rate from `gc.alloc.rate.norm` by the benchmark throughput, it would disagree with `gc.alloc.rate`. This is because `gc.alloc.rate` is computed by GC profiler using its own timer, which accidentally includes the artificial delay before deregistering the GC notifications.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yymb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2022-10-19 08:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmh/pull/87
Date: 2022-10-19 15:33:40 +0000;;;","2022-10-19 10:48;shade;https://github.com/openjdk/jmh/commit/e7b1218657240bf14e97868efde81defd8710f20;;;","2022-10-19 10:52;roboduke;Changeset: e7b12186
Author:    Aleksey Shipilëv <shade@redhat.com>
Committer: GitHub <noreply@github.com>
Date:      2022-10-19 19:48:09 +0000
URL:       https://git.openjdk.org/jmh/commit/e7b1218657240bf14e97868efde81defd8710f20
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JOL: Fix support for modern SA,CODETOOLS-7903364,5085547,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2022-10-18 11:32,2022-10-18 12:16,2023-10-01 09:56,2022-10-18 12:16,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"SA shuffled a few things around in newer JDKs, we need to update JOL support to match it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yxj7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ea3ea3c,,,,,,,,,"2022-10-18 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jol/pull/36
Date: 2022-10-18 18:59:29 +0000;;;","2022-10-18 12:16;shade;https://github.com/openjdk/jol/commit/2d958ff579c4fedfb906126dc4498dacb2dc2695;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rename --include-macro option to be --include-constant,CODETOOLS-7903362,5085508,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-10-18 04:31,2022-10-18 07:04,2023-10-01 09:56,2022-10-18 07:04,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,rename --include-macro option to be --include-constant. It filters not just preprocessor macros but also enum constants.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yxaj:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-10-18 05:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/91
Date: 2022-10-18 12:06:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract does not handle function pointer return type properly,CODETOOLS-7903360,5085485,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-10-17 22:49,2022-10-18 04:03,2023-10-01 09:56,2022-10-18 04:03,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"jextract does not handle function pointer return type properly.

Example:

void (*signal(int sig, void (*func)(int)))(int);

Two problems:

* Functional interface class is not generated for function pointer return type
(while function pointer argument types are handled fine)

* javadoc snippet comment for functions returning function pointer types is wrong. It is not a valid C declaration.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yx5f:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-10-17 23:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/90
Date: 2022-10-18 06:09:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract does not generate correct signature for multidimensional arrays in doc comments,CODETOOLS-7903358,5085412,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-10-17 00:00,2022-10-17 07:40,2023-10-01 09:56,2022-10-17 07:40,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"jextract does not generate correct signature in doc comments for multidimensional arrays

File: t.h

int abc[2][2];

Generated javadoc snippet looks as follows:

{@snippet :
    int [2] abc[2];
}

instead of the expected

{@snippet :
    int abc[2][2];
}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ywp7:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-10-17 00:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/89
Date: 2022-10-17 07:03:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
add a jextract sample that uses pcre2 library,CODETOOLS-7903357,5085354,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-10-14 07:30,2022-10-14 09:54,2023-10-01 09:56,2022-10-14 09:54,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,add a jextract sample that uses pcre2 library,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ywcb:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-10-14 07:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/88
Date: 2022-10-14 14:32:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jtreg Def.gmk fails to find tidy ,CODETOOLS-7903356,5085306,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-10-13 15:49,2022-10-17 15:51,2023-10-01 09:56,2022-10-17 15:51,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"Plain bug in line
170 : echo/usr/bin/tidy ; \

need space.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yw1n:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-10-13 16:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/132
Date: 2022-10-13 22:53:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract generates redundant cast in ofAddress method,CODETOOLS-7903354,5085278,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-10-13 07:42,2022-10-13 10:22,2023-10-01 09:56,2022-10-13 10:22,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"File: t.h

void (*f)(int);

The generated f.java looks as follows:

public interface f {

    void apply(int _x0);
    static MemorySegment allocate(f fi, MemorySession session) {
        return RuntimeHelper.upcallStub(f.class, fi, constants$0.f$FUNC, session);
    }
    static f ofAddress(MemorySegment addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, session);
        return (int __x0) -> {
            try {
                constants$0.f$MH.invokeExact((MemorySegment)symbol, __x0);
            } catch (Throwable ex$) {
                throw new AssertionError(""should not reach here"", ex$);
            }
        };
    }
}

Note the redundant cast in the line:

                constants$0.f$MH.invokeExact((MemorySegment)symbol, __x0);
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yvvf:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-10-13 10:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/87
Date: 2022-10-13 14:47:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
int parameter in generated allocateArray method should be long,CODETOOLS-7903349,5085086,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,pminborg,pminborg,2022-10-11 03:18,2022-10-13 07:17,2023-10-01 09:56,2022-10-13 07:17,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,The MemoryLayout::sequenceLayout method takes a long for `elementCount` and so the allocateArray should do the same.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2yuor:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-10-13 07:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/86
Date: 2022-10-13 14:06:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
add long name option for all single letter options and expand help on default values for various options,CODETOOLS-7903347,5084884,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-10-07 03:47,2022-10-07 06:27,2023-10-01 09:56,2022-10-07 06:27,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,,"The following single letter options -I, -l, -D should have long option names like --include-dir, --library, --define-macro.

--help output should mention default values for target package, output directory, header class name.

-l (--library) option help needs to be clear (name or absolute path of library is accepted with examples)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ytfv:",9223372036854775807,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-10-07 04:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/83
Date: 2022-10-07 11:12:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
