Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Inward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Sprint,Sprint,Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
IssueNotifier updates wrong backport records on new build tags,SKARA-1146,5054812,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,pmohan,pmohan,2021-07-21 05:56,2022-01-11 10:10,2023-10-01 09:57,2022-01-07 06:46,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"Syncing of fixes from JDK17 to 17.0.1 (17u-cpu) brings in the same 'resolved in build' value from 17 to 17.0.1 backport. Say if a bug is resolved in JDK17-b27 (for ex: JDK-8268716) , the corresponding 17.0.1 backport also shows resolved in build as b27 until next RE promotion where RE script updates it to the correct promoted build. So even though this discrepancy is interim, it still causes confusion until next RE promotion as the specified build is non-existent for 17.0.1.

Few more examples from 17.0.1-b03-
JDK-8270702 (changed from b30 to b03)
JDK-8270730 (changed from b31 to b03)

List of all such bugs (corrected on 07/21): issue in linked-subquery(""issue in masterbug(\""project = JDK AND fixVersion = 17\"")"", Backport, outward) AND fixVersion in (17.0.1) ORDER BY updated DESC, summary ASC ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1306,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tq7v:",9223372036854775807,,,,,,,,,,,,,,"2021-07-21 10:41;kcr;Btw, the bot doesn't copy the fix version from the 17 record. It sets it explicitly after creation.;;;","2021-08-27 13:12;erikj;Is this intended to be a bug on Skara? It definitely does not look like an infra/build bug at least. Please don't use the ""build"" subcomponent as ""misc"".;;;","2021-12-22 16:09;erikj;I believe I know what needs to be done for this.;;;","2021-12-22 16:45;erikj;Hm, it seems this may be a fault in the backport rest api plugin rather than Skara. I will need to check with Tony next year.;;;","2021-12-23 11:52;erikj;I have now tried using the create backport button on bugs-stage and it does not copy the ""Resolved In Build field"" to the backport. I have also looked through the source code for the plugin that handles backports, and it looks like it's skipping the field as well. This means the fault most likely resides in Skara.

The problem now is that Skara has two different implementations for creating backports, either call some backport rest API, which I assume is provided by the plugin above, or of that's not available, create it through standard Jira API. The latter implementation definitely does include the Resolved In Build field, but what puzzles me is that I would expect the bots to use the backport rest API. I will need to investigate more to understand why that isn't the case.;;;","2021-12-23 13:31;erikj;I have now verified that Skara uses the JBS plugin and handles the field correctly on backport creation.

A more recent occurrence of this is JDK-8279103 which at the time of this writing says fixed in b29. Looking at the history, it was first set to ""master"", but later that was updated to b29. I think this is a bug in the notifier when processing tags. It finds the jdk-18+29 tag and applies that to backports where the fixversion isn't matching the tag.;;;","2021-12-23 14:06;erikj;Confirmed that IssueNotifier lacks verification that the jdk version in a tag matches the fixversion of the bug/backport when setting ""Resolved In Build"". It even looks like there are tests verifying that a tag updates multiple backports, which I find strange.;;;","2022-01-03 13:22;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/skara/pull/1271
Date: 2022-01-03 21:21:46 +0000
;;;","2022-01-07 06:46;roboduke;Changeset: 157bbfff
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-01-07 14:45:36 +0000
URL:       https://git.openjdk.java.net/skara/commit/157bbfffdb4523745b43984605ad83572b570c46
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] The mlbridge bot occasionally posts the same comments twice on Github,SKARA-1129,5056401,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,kcr,kcr,2021-08-10 10:12,2021-09-01 07:04,2023-10-01 09:57,2021-09-01 07:04,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"Posted on skara-dev:

Hi all,

When we send an email to reply to a RFR email, the bot will post a comment
on Github for us.
But sometimes the bot may post the same comments twice.
Please see this email[1]. We expect that the bot will post one comment to
the corresponding PR[2].
But actually, the bot posted two same comments[3][4].

It is an intermittent issue. Sometimes, the bot behaves correctly.
Even today, the bot can operate normally at one PR[5] but fails at another
PR[6][7].

Is it a known issue?
Anyway, it is good to fix it so that the redundant information won't be
generated.

[1]
https://mail.openjdk.java.net/pipermail/compiler-dev/2021-May/016981.html
[2] https://github.com/openjdk/jdk/pull/4157
[3] https://github.com/openjdk/jdk/pull/4157#issuecomment-846605316
[4] https://github.com/openjdk/jdk/pull/4157#issuecomment-846605322
[5] https://github.com/openjdk/jdk/pull/3976#issuecomment-847663710
[6] https://github.com/openjdk/jdk/pull/4167#issuecomment-847595516
[7] https://github.com/openjdk/jdk/pull/4167#issuecomment-847595538

Best Regards,
-- Guoxiong",,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1058,,,,,,,,,,,SKARA-1058,SKARA-1128,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tzqz:",9223372036854775807,,,,,,,,,,,,,,"2021-08-10 10:14;kcr;The original fix for SKARA-1058 was reverted to fix SKARA-1128. It will need to be redone in such a way that it doesn't reintroduce SKARA-1128.;;;","2021-08-31 13:06;erikj;Given the conclusion of SKARA-1148, I very much doubt this change had anything to do with the missing emails. I'm going to propose reapplying the exact same patch.;;;","2021-08-31 13:50;kcr;Yes, I don't see any reason to suppose that it was at all related.;;;","2021-09-01 07:04;roboduke;Changeset: 273d83d9
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-09-01 14:03:53 +0000
URL:       https://git.openjdk.java.net/skara/commit/273d83d90b3987b326db27770a153679c6f9c163
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
mailing list thread comments aren't being registered in github PR,SKARA-1128,5056371,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,smohammedkan,smohammedkan,smohammedkan,2021-08-10 07:45,2021-08-10 10:19,2023-10-01 09:57,2021-08-10 10:12,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,mailing list thread comments aren't being registered in github PR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1129,,,,,SKARA-1058,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tzkb:",9223372036854775807,,,,,,,,,,,,,,"2021-08-10 10:12;roboduke;Changeset: 47943b09
Author:    Shahinshah Mohammed Kannu Rawther <smohammedkan@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-08-10 17:12:10 +0000
URL:       https://git.openjdk.java.net/skara/commit/47943b0960f1eb974fc09bf676b4b610bf0b2711
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user forantar,SKARA-1126,5056250,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,smohammedkan,ant,ant,2021-08-09 03:50,2021-10-04 05:28,2023-10-01 09:57,2021-08-09 19:22,,,,,,,,,bots,,0,,,,,,,,,,,,,,,,,,"Please associate my GitHub account with my OpenJDK identity.

https://github.com/forantar
https://openjdk.java.net/census#ant",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tytf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OpenJDK 7 backports incorrectly tagged with hgupdate-sync,SKARA-1125,5056186,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,rcalnan,rcalnan,2021-08-06 11:05,2021-09-07 11:59,2023-10-01 09:57,2021-09-07 11:42,,,,,,,,1.0,bots,,0,urt-infra,,,,,,,,,,,,,,,,,"for example 
https://bugs.openjdk.java.net/browse/JDK-8271045

there are around 15 from July CPU and perhaps more from earlier CPUs",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tyf7:",9223372036854775807,,,,,,,,,,,,,,"2021-09-03 13:58;erikj;The issue here is that Skara does not recognize ""openjdk7u"" as a valid JDK version. Looking into adjusting the parser. This is basically an extension of SKARA-1011, but allowing the openjdk prefix.;;;","2021-09-07 11:42;roboduke;Changeset: 34c565e9
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-09-07 18:41:38 +0000
URL:       https://git.openjdk.java.net/skara/commit/34c565e99d217afb25db9d776f176c6b5d17a8d7
;;;","2021-09-07 11:59;erikj;This has now been deployed. Any current Jira bug/backport where this issue is present will get automatically updated if any backport or main bug gets touched with any kind of change. We do not have a way of automatically updating every bug in batch unfortunately.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user svijayasekar,SKARA-1120,5055473,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,tbell,svijayasekar,svijayasekar,2021-07-29 21:31,2021-08-02 00:54,2023-10-01 09:57,2021-08-02 00:54,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,"Please Add GitHub user svijayasekar.

While I submitted a PR https://github.com/openjdk/jdk17/pull/296, I learnt that I am not yet recognized as a Contributor. 
Could you please do the needful adding my GitHub user account svijayasekar to the list of contributors?",,,,,,,,,,,,,,,,,,,,,,,JDK-8271150,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tu1f:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The Skara PR bot should not block on a CSR if not enabled for a repo,SKARA-1118,5055012,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,kcr,kcr,2021-07-23 10:01,2022-05-02 09:09,2023-10-01 09:57,2022-05-02 09:09,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"Support for CSRs is a configuration option for a repository. If a repository does not have CSR support enabled, it is still possible for an author or Reviewer to issue the `/csr` command, which will add the ""csr"" label and block the integration. However, an approved CSR will not unblock it for a PR in a repo that doesn't enable it. The workaround is to enter the `/csr unneeded` command to unblock it.

This is confusing, so what the PR bot should do instead is not process the /csr command for a repo that doesn't enable that feature and instead warn the user.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1419,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2trgb:",9223372036854775807,,,,,,,,,,,,,,"2021-11-24 01:40;gli;Because the different bots, PullRequestBot and CSRBot, can only read their own configuration. So the PullRequestBot doesn't kown whether the project has CSR support enabled, which is configured at the CSRBot. 

To fix this issue, the class `BotConfiguration` should provide the method to get the configuration of other bots, such as adding method `JSONObject specific(String botName)`.

Any idea is appreciated.;;;","2022-04-26 06:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1308
Date: 2022-04-26 13:20:08 +0000;;;","2022-05-02 09:09;roboduke;Changeset: b9e89e20
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-02 16:09:13 +0000
URL:       https://git.openjdk.java.net/skara/commit/b9e89e202deab7d7d192a61b1fd76e2510b33f64
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user mashoubing,SKARA-1113,5054898,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,smohammedkan,shoubingma,shoubingma,2021-07-22 04:34,2021-07-22 08:38,2023-10-01 09:57,2021-07-22 08:38,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqqz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add Github user wuyan0,SKARA-1112,5054583,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,smohammedkan,wuyan,wuyan,2021-07-18 21:02,2021-07-23 07:43,2023-10-01 09:57,2021-07-23 07:41,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,"Please add GitHub user 'wuyan0' [1] and map to me (OpenJDK username - 'wuyan') [2]. Thanks!

[1]https://github.com/wuyan0
[2]https://openjdk.java.net/census#wuyan",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tosz:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Backport command needs better matching of target repo,SKARA-1111,5054511,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2021-07-16 01:37,2021-08-30 07:39,2023-10-01 09:57,2021-08-30 07:39,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"When issuing a backport commit command, you can specify the target repository either with just the repository name or with the organization/group prefix (or even as a full URL, but I don't think we should advertise this as it only works for repos within the same host anyway). The former only works if the target repository is in the same org/group as the current repository. In our current usage on Github, where all repos are in the org ""openjdk"", this works fine, but in our internal GitLab repo we have multiple groups.

In SKARA-1070, I added a helpful reply when an invalid target repo was entered, which lists the valid repos. This list is not really helpful in the Gitlab case as it only lists the repo names and not the group names.

I believe the matching logic could be made smarter so that it can find repos regardless of group/org, because we have a list of all the valid target repos already, we can just work from that and find the best match. The help message should also be clarified to about adding the org/group prefix if the user wants to be more explicit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tocz:",9223372036854775807,,,,,,,,,,,,,,"2021-08-30 07:39;roboduke;Changeset: 6a76a146
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-08-30 14:39:24 +0000
URL:       https://git.openjdk.java.net/skara/commit/6a76a146b39656e441f0c6c15727737d399ce16e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix label updater for gitlab,SKARA-1108,5053989,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-07-13 02:19,2021-07-13 08:09,2023-10-01 09:57,2021-07-13 08:09,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"When deploying SKARA-1084 I discovered that gitlab doesn't accept '<' or '>' in label descriptions. The email address toString() method returns the email inside those characters. I don't think we need to store that in the description so simply switch to adding the .address() instead.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tl4z:",9223372036854775807,,,,,,,,,,,,,,"2021-07-13 08:09;roboduke;Changeset: 68fc5e4b
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-13 15:08:52 +0000
URL:       https://git.openjdk.java.net/skara/commit/68fc5e4b6801291258f462a572d82c59108fd33e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Document minimum required JDK version 16 for Skara,SKARA-1102,5053591,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2021-07-07 08:52,2021-07-09 12:40,2023-10-01 09:57,2021-07-09 12:40,1.0,,,,,,,1.0,doc,,0,,,,,,,,,,,,,,,,,,"Skara currently lists JDK 14 as the minimum version to build and run. But, as the default build logic automatically downloads JDK 16, we've had some dependencies on newer JDK features creep in, so the build now effectively requires JDK 16. Rather than trying to revert this, I think we should just update the documentation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tioj:",9223372036854775807,,,,,,,,,,,,,,"2021-07-08 12:29;erikj;After review discussion, I decided to also enforce the JDK 16 compatibility in Gradle so we don't end up in this mismatched situation again.;;;","2021-07-09 12:40;roboduke;Changeset: 2ae00f87
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-09 19:39:39 +0000
URL:       https://git.openjdk.java.net/skara/commit/2ae00f87b1670ce30b4b17b1f96acf6f3266c05b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
git webrev for mercurial should ignore config defaults for mercurial commands,SKARA-1101,5053586,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,rriggs,rriggs,2021-07-07 08:23,2021-07-15 00:12,2023-10-01 09:57,2021-07-15 00:12,,,,,,,,1.0,cli,,0,,,,,,,,,,,,,,,,,,"Webrev on a mercurial repo fails with:

% git webrev -N -r -2 -C  -m
error: could not resolve reference '-2'

It also fails with an explicit hash of a rev known to be present, both the full hash and the short hash.

The problem maybe an incorrect expectation that --rev=x returns exactly 1 revision.

The patch below to set a --limit=1 seems to work.

git diff
diff --git a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
index 51f40a2b..552d3de9 100644
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -195,7 +195,7 @@ public class HgRepository implements Repository {

     @Override
     public Optional<Hash> resolve(String ref) throws IOException {
-        try (var p = capture(""hg"", ""log"", ""--rev="" + ref, ""--template={node}\n"")) {
+        try (var p = capture(""hg"", ""log"", ""--rev="" + ref, ""--limit=1"", ""--template={node}\n"")) {
             var res = p.await();
             if (res.status() == 0 && res.stdout().size() == 1) {
                 return Optional.of(new Hash(res.stdout().get(0)));
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tinf:",9223372036854775807,,,,,,,,,,,,,,"2021-07-07 09:47;erikj;I don't think adding --limit=1 is correct here. We need the -r argument to resolve to exactly one commit, otherwise the argument is ambiguous. In Mercurial, '--rev=-2' should resolve to exactly one change. What exactly is the repository state where this error is given? ;;;","2021-07-07 12:46;erikj;I'm trying all the hg versions I have available (5.5, 4.9, 4.5.3) in different repositories on Mac and Linux and I get exactly one commit listed from ""hg log -r -2"". Could you have something in your config that changes this behavior? AFAIK, Mercurial is not supposed to list ancestors of the -r argument unless asked to.;;;","2021-07-07 14:42;rriggs;~/.hgrc had:

[defaults]
log = --follow

""File history is shown without following rename or copy history of files. Use -f/--follow with a filename to follow history across renames and copies. --follow without a filename will only show ancestors or descendants of the starting revision.""

Thanks for the diagnostic help.;;;","2021-07-08 11:10;erikj;Ah, when I tried adding --follow, I get all the output too. Now that we know what caused this, it may still warrant some kind of fix. It would be a good idea for any hg command run by Skara to either ignore or override such a config setting. This could be achieved by adding '--config defaults.log=' to the Skara command line.;;;","2021-07-15 00:12;roboduke;Changeset: 36fdc9bd
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-15 07:12:14 +0000
URL:       https://git.openjdk.java.net/skara/commit/36fdc9bdda4d020254fe371ee03bd6a2425e0a50
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user woess,SKARA-1098,5052970,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,aw,aw,2021-06-29 10:44,2021-06-30 06:04,2023-10-01 09:57,2021-06-30 06:04,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,"I'm a previous OpenJDK committer by the name ""aw"": https://openjdk.java.net/census#aw
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2teuj:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ignore tags in pr branches when notifying,SKARA-1095,5052604,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-06-24 10:03,2021-07-06 10:15,2023-10-01 09:57,2021-07-06 10:15,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"The IssueNotifier has started throwing exceptions today. Here is a description of the situation:

1. The jdk17 repo was tagged with jdk-17+28
2. The commit with that tag was included in the forward merge to the jdk repo
3. The PR for the forward merge created a pr/XXXX branch in the jdk repo
4. The PR has not yet been merged

Because of 3, the tagged commit, and so the tag, was added to the jdk repo before the PR was actually merged. The notifier finds this new tag and starts notifying. The IssueNotifier needs to find what branch the tag is present in to figure out the fixVersion and backport to update. While doing this, if it ends up not finding any branch (except for pr/X branches), it throws an exception. By throwing an exception, we end up in a loop as the bot will just retry endlessly.

Taking a step back, I noticed that the MailingListNotifier succeeded with this notification, and sent out an email about this new tag entering the mainline jdk repo. This email was sent out prematurely since the tag is still just in the pr branch: https://mail.openjdk.java.net/pipermail/jdk-changes/2021-June/014126.html

My conclusion is that when reacting to tags, we need to filter them and ignore tags that are only present in pr branches.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tclf:",9223372036854775807,,,,,,,,,,,,,,"2021-07-06 10:15;roboduke;Changeset: ac074bcc
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-06 17:14:40 +0000
URL:       https://git.openjdk.java.net/skara/commit/ac074bcc465d8368e2c22d8cdfdfa4615e514067
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
/backport commit command does not validate non existing repos,SKARA-1092,5052501,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2021-06-23 06:07,2021-06-24 09:13,2023-10-01 09:57,2021-06-24 09:13,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"In https://github.com/openjdk/jdk/commit/dc12cb78 , a user requested a backport to a repo that does not exist. The /backport command fails to recognize this and ends up in an infinite retry loop, throwing exception when it can't get branches for the repository.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbyr:",9223372036854775807,,,,,,,,,,,,,,"2021-06-23 06:29;erikj;This looks to be caused by an inconsistency between implementations of Forge.repository(String). From what I can tell, this method is expected to return an empty Optional if the repository does not exist, and in the Gitlab case, this is what it does, but for Github there is no actual check. In both cases, they call the hosted repository constructor (GitlabRepository and GithubRepository respectively) and expect an exception if it doesn't exist. In the case of Gitlab, the constructor will make a rest call to get information about the repository, while the Github variant does not.

I don't think the GithubRepository constructor should be made to call Github if it doesn't need to, but the GithubHost.repository(String) method could add a call to GithubRepository.id(), which will force a rest call.

This change has some risk to it. There seems to be a lot of places in the source that expect Forge.repository(String) to return empty for non existing repositories, which will now actually trigger if that is the case.;;;","2021-06-23 06:34;erikj;The current logic has ""catch (Throwable t)"" in it. That is rarely a good idea. Changing this to Exception. We really don't want to be catching and swallowing any Error here. On further inspection, I'm going to try to get rid of some of this control flow by exception, especially when we throw and catch it ourselves within the same module.;;;","2021-06-23 13:59;erikj;I found the change where the GitHubRepository constructor stopped calling to github: https://github.com/openjdk/skara/pull/296

The motivation was to get rid of an unnecessary extra roundtrip to GitHub. I believe we can try to keep this for some creations of a GitHubRepository, but the Forge.repository(String) method definitely seems to be used in a way where it's expected to return Optional.empty() if the repository doesn't exist, so this requires a rest call to verify.

I have rewritten this logic and aligned the behavior between GitHub and GitLab. Now they both will only return Optional.empty() if the rest call to get repository info returns 404. Any other RuntimeException or Error is just let through, as it should be. There are other ways a hosted repository can be created, where Optional is not used in the return value. In these cases we now have consistent throwing of a RuntimeException with the message ""Project/Repository not found"" (in the GitLab case directly as it's needed for constructing the object, and in the GitHub case when a method is called that triggers the lazy initialization). The assumption is that in these other code paths, the repository name does not originate from human input, but rather other query results, so a 404 is truly unexpected.;;;","2021-06-23 14:26;erikj;Tested my patch in staging with the playground repo here: https://github.com/openjdk/playground/commit/a8e3eabb6df7d8304083bfdaa4f8f0b33f768dab;;;","2021-06-24 09:13;roboduke;Changeset: 8801187c
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-06-24 16:12:45 +0000
URL:       https://git.openjdk.java.net/skara/commit/8801187c088ed261de4db4084631bd672b0f6857
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""PR body must not be empty"" check pointless for clean backports",SKARA-1091,5052487,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,sgehwolf,sgehwolf,2021-06-23 01:47,2021-07-16 00:02,2023-10-01 09:57,2021-07-16 00:02,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"Sometimes you need to do follow-up PRs so that relevant commits can get integrated. I've just done one. The commit message is ""Backport <sha>"" and that's it. As it was a clean backport and the PR body would not show up anywhere but the RFR email anyway I've left the body empty. For this reason it didn't let me integrate due to:

Error: PR body must not be empty

Adding ""Clean backport"" or the like to the PR body fixes it, but I'm not sure this check makes a lot of sense for clean backports. It seems a pointless check making the user jump through extra hoops to get it integrated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbvn:",9223372036854775807,,,,,,,,,,,,,,"2021-06-24 13:02;erikj;I have experienced this myself and I think I agree with you. In the case of a clean backport, there really isn't anything to add.;;;","2021-07-16 00:02;roboduke;Changeset: a9de6a64
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-16 07:01:57 +0000
URL:       https://git.openjdk.java.net/skara/commit/a9de6a64e76f881a481b891f44a6116aa73ede77
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
csr label still there after CSR was approved,SKARA-1088,5052351,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,weijun,weijun,2021-06-21 19:11,2021-06-22 06:02,2023-10-01 09:57,2021-06-22 06:02,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,"https://github.com/openjdk/jdk17/pull/13 still has the csr label but its CSR at https://bugs.openjdk.java.net/browse/JDK-8268392 is already approved. I tried `/csr needed` and the bot replied with ""an approved CSR request is already required for this pull request"". I had to `/csr unneeded` to go on.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tb1f:",9223372036854775807,,,,,,,,,,,,,,"2021-06-22 05:57;erikj;This is caused by a missing configuration for the jdk17 repo. The CSRBot isn't even active for that repo.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Gitlab PR has bad link to patch file ,SKARA-1085,5052138,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,ihse,erikj,erikj,2021-06-17 12:15,2021-07-06 12:32,2023-10-01 09:57,2021-07-06 12:32,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"The link generated under the ""Reviewing"" header in a PR description works fine on Github, but on Gitlab, the link has a Github style form which does not work.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t9q3:",9223372036854775807,,,,,,,,,,,,,,"2021-07-06 12:32;roboduke;Changeset: 2540619f
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-07-06 19:32:34 +0000
URL:       https://git.openjdk.java.net/skara/commit/2540619f7dfb7e6df1bf37e7de460276959b05b1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Automatically update repository labels from Skara config,SKARA-1084,5052060,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2021-06-16 13:36,2021-07-09 13:45,2023-10-01 09:57,2021-07-09 13:45,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"When configuring a new repository in Gitlab (typically forking jdk mainline to a release repository like jdk17), our labels aren't automatically propagated to the new repository. 

The way labels work in Gitlab and Github is different. On github, we have the skara /label command to manually add labels. In Gitlab, this command is native, so is not handled by Skara at all. This difference is causing some different semantics when trying to add a new label for the first time in a particular repository. Gitlab will only let the /label command add labels that are preconfigured for the repository. On Github, because Skara is running the /label command, it seems that when adding a label through the rest api, it's automatically added to the repository. The only way new labels are added to repositories in Gitlab today is when Skara automatically matches code changes in a PR to a label, in which case Gitlab seem to accept new labels and add them to the repo if needed. What this means in practice is that users can't manually add a label until another PR has been created which automatically added that label.

Unfortunately, Gitlab does not provide any way to bulk import labels when we create a new fork. That would otherwise have been a convenient way to handle this.

I think we need to add some logic somewhere that syncs the label configuration from Skara to the repository. This could be a new WorkItem in the MailingListBridgeBot that monitors the label config file and updates each repository on changes.

Looking around in the Skara source, it seems the repository labels are queried for their description in the PR CLI command. The description in that case is expected to contain the mailing list which the label is associated with. The mainline jdk labels have this configured, but any labels that were automatically added to the jdk17 repository are missing this description. This goes for both Github and Gitlab.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t98r:",9223372036854775807,,,,,,,,,,,,,,"2021-06-16 17:07;dholmes;When I created a MR just now it gave me the option of applying a label, and that dialog also gave the option of creating a label, so I created one called hotspot-runtime and applied it. That did eventually case the RFR email to be sent to the mailing list as expected (though it took a few minutes).;;;","2021-06-22 13:34;erikj;My resent discovery in SKARA-1086 gives you another option of adding labels, more similar to how it works in Github (by prepending a space to the command in the comment).

However, none of these workarounds fix the issue of adding the mailing list metadata to the label for consumption by the CLI tools. Also in the gitlab case, having to create the labels is cumbersome.

I will see if I can implement my suggested WorkItem.;;;","2021-07-09 13:45;roboduke;Changeset: 6c33395f
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-09 20:45:07 +0000
URL:       https://git.openjdk.java.net/skara/commit/6c33395fe2f8fa8569a14b015dd2487144c59061
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
/backport command reports conflict even though there isn't any,SKARA-1080,5051741,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,sgehwolf,sgehwolf,2021-06-14 02:15,2021-08-24 08:25,2023-10-01 09:57,2021-06-15 06:39,1.0,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,"I've tried the /backport bot command on an openjdk/jdk commit. When I've tried it, a dependency bug hasn't been integrated yet. However, when I tried it again *with* the dependency integrated it still reported conflicts in files, which didn't happen when I did the commands manually.

jdk head commit with the comment history:
https://github.com/openjdk/jdk/commit/2963c9e6778b95f5c0fc4298064a21d1e8f31b91

When trying locally, it applied clean:

$ git fetch jdk-jdk --no-tags 2963c9e6778b95f5c0fc4298064a21d1e8f31b91
remote: Enumerating objects: 279995, done.
remote: Counting objects: 100% (101004/101004), done.
remote: Total 279995 (delta 101004), reused 101004 (delta 101004), pack-reused 178991
Receiving objects: 100% (279995/279995), 151.53 MiB | 9.36 MiB/s, done.
Resolving deltas: 100% (210212/210212), completed with 20912 local objects.
From https://github.com/openjdk/jdk
 * branch                    2963c9e6778b95f5c0fc4298064a21d1e8f31b91 -> FETCH_HEAD
[sgehwolf@t580-laptop jdk11u-dev]$ git cherry-pick 2963c9e6778b95f5c0fc4298064a21d1e8f31b91
Auto-merging src/jdk.management/macosx/native/libmanagement_ext/UnixOperatingSystem.c
Auto-merging src/jdk.management/aix/native/libmanagement_ext/UnixOperatingSystem.c
warning: inexact rename detection was skipped due to too many files.
warning: you may want to set your merge.renamelimit variable to at least 11565 and retry the command.
[jdk-8268103-osbean-native-double-fix 2bfece19597] 8268103: JNI functions incorrectly return a double after JDK-8265836
 Author: Severin Gehwolf <sgehwolf@openjdk.org>
 Date: Wed Jun 2 12:18:30 2021 +0000
 2 files changed, 2 insertions(+), 2 deletions(-)


So IMO, the '/backport jdk11u-dev' command in the following comment should have worked:
https://github.com/openjdk/jdk/commit/2963c9e6778b95f5c0fc4298064a21d1e8f31b91#commitcomment-52122825",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1133,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t79v:",9223372036854775807,,,,,,,,,,,,,,"2021-06-14 02:18;sgehwolf;Note that in this particular instance when the first '/backport jdk11u-dev' command was issued, the dependency wasn't there so this conflict reporting was correct (but it changed later once the dep got integrated):
https://github.com/openjdk/jdk/commit/2963c9e6778b95f5c0fc4298064a21d1e8f31b91#commitcomment-51876136

So maybe there is some timing issue or the bots don't fetch latest <repo> master when another /backport <repo> command is being issued at a later date.;;;","2021-06-14 12:02;erikj;You are correct, the bot is not fetching the latest from the correct repo. For each possible target repo for a /backport, we have a fork repo in the openjdk-bots 'organization'. This is where we store the backport branch and create the pull request from. When attempting to create this branch, the bot is fetching the latest from this fork (which is basically always stale) instead of the target repo.;;;","2021-06-15 06:39;roboduke;Changeset: 5cf9d46c
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-06-15 13:38:55 +0000
URL:       https://git.openjdk.java.net/skara/commit/5cf9d46c6a6faa6e25dfe756ccba3671ed67d6b7
;;;","2021-06-15 11:14;erikj;Deployed live.;;;","2021-06-15 11:25;sgehwolf;Thanks, Erik, for the quick turn-around!;;;","2021-08-24 08:25;clanger;I still see a similar issue (see https://github.com/openjdk/jdk11u-dev/pull/286) and have opened SKARA-1133.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update THIRDPARTYREADME.TXT and its license attribute,JMC-7369,5055328,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,ghb,ghb,ghb,2021-07-28 04:24,2022-04-06 22:23,2023-10-01 09:57,2021-07-28 11:27,8.1.0,,,,,,,8.1.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,"# create a new thirdpartyreadme.txt for ""agent"" 
 # remove ""ASM"" from JMC Product Thirdpartyreadme.txt"" 
 # update version number of individual license entry if required. ",,,,,,,,,,,JMC-7687,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tt5f:",9223372036854775807,,,,,,,,,,,,,,"2021-07-28 11:27;roboduke;Changeset: 68d5eec1
Author:    Guru Hb <ghb@openjdk.org>
Date:      2021-07-28 18:26:23 +0000
URL:       https://git.openjdk.java.net/jmc/commit/68d5eec182ea90a7b3d68114cd250c66e9c34cf5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reference wrong in agent plug-in.xml,JMC-7362,5055092,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,hirt,hirt,hirt,2021-07-26 02:56,2022-04-06 22:23,2023-10-01 09:57,2021-07-26 07:21,,,,,,,,8.1.0,Mission Control Client,,0,,,,,,,,,,,,,,,,,,The reference to the raw editor class is incorrect in the plug-in.xml. ,,,,,,,,,,,JMC-7682,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2try3:",9223372036854775807,,JMC 8.1 RDP2 Final,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5162edbb,,,,,,,,,"2021-07-26 04:57;bbanathur;This fix would probably resolve JMC-7348  as well?;;;","2021-07-26 07:21;roboduke;Changeset: 4b492a42
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2021-07-26 14:20:02 +0000
URL:       https://git.openjdk.java.net/jmc/commit/4b492a429393642bc87a0865d46a14093bf47aca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provider Name missing for Agent Plugin,JMC-7360,5055060,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,ghb,bbanathur,bbanathur,2021-07-25 09:12,2022-04-06 22:24,2023-10-01 09:57,2021-07-30 06:35,8.1.0,,,,,,,8.1.0,Release Engineering,,0,sqe-8.1.0,,,,,,,,,,,,,,,,,"Agent plugin is a newly added RCP plugin project in JMC, and no provider name is added o this plugin 

 

!image-2021-07-25-21-38-02-015.png|width=735,height=67!

Other existing issues which could be corrected 
 # Provider name for all artifacts 
 # Case correction for JOveflow

!image-2021-07-25-21-39-36-815.png|width=875,height=62!

!image-2021-07-25-21-41-39-368.png|width=92,height=90!",,,,,,,,,,,JMC-7691,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-25 09:07;bbanathur;image-2021-07-25-21-37-17-352.png;https://bugs.openjdk.org/secure/attachment/95688/image-2021-07-25-21-37-17-352.png","2021-07-25 09:08;bbanathur;image-2021-07-25-21-38-02-015.png;https://bugs.openjdk.org/secure/attachment/95687/image-2021-07-25-21-38-02-015.png","2021-07-25 09:09;bbanathur;image-2021-07-25-21-39-36-815.png;https://bugs.openjdk.org/secure/attachment/95686/image-2021-07-25-21-39-36-815.png","2021-07-25 09:11;bbanathur;image-2021-07-25-21-41-39-368.png;https://bugs.openjdk.org/secure/attachment/95685/image-2021-07-25-21-41-39-368.png",,,,,,,,,,,,,,,,,"0|i2trqz:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5dc4c445,,,,,,,,,"2021-07-30 06:35;roboduke;Changeset: bba9764b
Author:    Guru Hb <ghb@openjdk.org>
Date:      2021-07-30 13:35:20 +0000
URL:       https://git.openjdk.java.net/jmc/commit/bba9764b4dccb12bbf6c1822049e69b6c6da58c4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rename Agent Plug-in in the JVM Browser,JMC-7358,5055028,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,hirt,hirt,hirt,2021-07-23 15:24,2022-04-06 22:23,2023-10-01 09:57,2021-07-26 08:23,,,,,,,,8.1.0,Mission Control Client,,0,,,,,,,,,,,,,,,,,,"We should rename Agent Plug-in in the JMC browser to just Agent, or perhaps JMC Agent. The reason is that we're manipulating the agent, not the plug-in. Just like we're manipulating the Flight Recorder and the MBean Server (two other entries under the JVM nodes).",,,,,,,,,,,JMC-7683,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2trjv:",9223372036854775807,,JMC 8.1 RDP2 Final,,,,,,,,,,,,"2021-07-26 07:06;hirt;A quick poll in the JMC slack seems to favour JMC Agent, so will go with that.;;;","2021-07-26 08:23;roboduke;Changeset: ef886f3a
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2021-07-26 15:22:27 +0000
URL:       https://git.openjdk.java.net/jmc/commit/ef886f3a84e212d28543354ca1bfa2c8b7c5467f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Double-Checked Locking in Agent Plugin code,JMC-7357,5054973,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,ghb,bbanathur,bbanathur,2021-07-23 01:29,2022-04-06 22:24,2023-10-01 09:57,2021-08-22 19:30,8.1.0,,,,,,,8.2.0,Mission Control Client,,0,sqe-8.1.0,,,,,,,,,,,,,,,,,"The method createSingleton() in PresetRepositoryFactory.java relies on double-checked locking, an incorrect idiom that does not achieve the intended effect.

 
{code:java}
private static PresetRepository singleton; 
public static PresetRepository createSingleton() { 
    if (singleton == null) { 
         synchronized (PresetRepositoryFactory.class) {
            if (singleton == null) { 
               singleton = create(); 
             } 
           } 
     } 
     return singleton;
{code}
 ",,,,,,,,,,,JMC-7693,JMC-7370,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tr7n:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@212a8732,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update to Tycho 2.4,JMC-7355,5054893,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,,hirt,hirt,2021-07-22 03:44,2022-01-13 13:52,2023-10-01 09:57,2022-01-13 13:52,,,,,,,,8.2.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqpv:",9223372036854775807,,JMC 8.1 RDP2 1,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5dc4c445,,,,,,,,,"2022-01-13 13:52;aptmac;This was addressed in the patch to update to 2021-06: [https://github.com/openjdk/jmc/commit/d05f377bdc5e4028db618e0d5f79c052136e1578#diff-9c5fb3d1b7e3b0f54bc5c4182965c4fe1f9023d449017cece3005d3f90e8e4d8R82]

and the 2.5.0 tycho update will be included in: https://github.com/openjdk/jmc/pull/355;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMC fails to build because it can't download babel dependency,JMC-7353,5054831,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,aptmac,hirt,hirt,2021-07-21 10:40,2022-04-06 22:23,2023-10-01 09:57,2021-07-23 11:37,,,,,,,,8.1.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7681,,,,,,,,,,,,JMC-7356,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqc3:",9223372036854775807,,JMC 8.1 RDP2 1,JMC 8.1 RDP2 Final,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4bcb9d9e,,,,,,,,,"2021-07-23 11:37;roboduke;Changeset: 0113da9c
Author:    Alex Macdonald <aptmac@openjdk.org>
Date:      2021-07-23 18:37:24 +0000
URL:       https://git.openjdk.java.net/jmc/commit/0113da9ca69601c58244361e4322b4ea210809f6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[Accessibility, JAWS] [Misc] Deadlinks in Help Page",JMC-7350,5054772,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,schaturvedi,bbanathur,bbanathur,2021-07-21 02:23,2023-01-11 02:36,2023-10-01 09:57,2022-10-11 01:18,8.0.0,8.1.0,8.2.0,,,,,8.3.0,Mission Control Client,,0,a11y,a11y-jaws,jmc-imt,sqe-8.1.0,,,,,,,,,,,,,,"Working with attribute link does not have any content associated with it. 

!image-2021-07-21-14-53-22-856.png|width=694,height=246!

Go to primary content link does not have any content associated with it. 

!image-2021-07-21-14-57-57-383.png!

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-21 02:22;bbanathur;image-2021-07-21-14-52-35-180.png;https://bugs.openjdk.org/secure/attachment/95600/image-2021-07-21-14-52-35-180.png","2021-07-21 02:23;bbanathur;image-2021-07-21-14-53-22-856.png;https://bugs.openjdk.org/secure/attachment/95599/image-2021-07-21-14-53-22-856.png","2021-07-21 02:27;bbanathur;image-2021-07-21-14-57-57-383.png;https://bugs.openjdk.org/secure/attachment/95601/image-2021-07-21-14-57-57-383.png","2022-09-25 21:58;bbanathur;image-2022-09-26-10-27-46-921.png;https://bugs.openjdk.org/secure/attachment/100854/image-2022-09-26-10-27-46-921.png",,,,,,,,,,,,,,,,,"0|i2tpyz:",9223372036854775807,,,,,,,,,,,,,,"2022-09-23 03:01;schaturvedi;I am able to reproduce the issue. Clicking on this link doesn't have any impact. But I am not sure what should be the expected content. This link is present in all the help pages and everywhere its just a dead link. I feel we should remove the link from all pages unless there is some logical content we need to show on click of this link.

[~ssatish] [~snair] Any thoughts on this?;;;","2022-09-25 21:58;bbanathur;[~snair]  This is from client itself, Please find the navigation below.
 * Start JMC using JDK 11
 * From Menu Bar -> Help -> JDK Mission Control Help

!image-2022-09-26-10-27-46-921.png|width=629,height=263!;;;","2022-09-27 00:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/430
Date: 2022-09-27 07:35:15 +0000;;;","2022-10-11 01:18;roboduke;Changeset: e3f4c5bd
Author:    Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2022-10-11 08:17:25 +0000
URL:       https://git.openjdk.org/jmc/commit/e3f4c5bde20730a4e1aecffe263ac185463cd444
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR Parser struct types hashcode is not stable,JMC-7349,5054688,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,jbachorik,jbachorik,jbachorik,2021-07-20 09:09,2022-04-06 22:23,2023-10-01 09:57,2021-07-28 02:50,,,,,,,,8.1.0,Mission Control Core,,0,,,,,,,,,,,,,,,,,,"A bunch of JFR Parser struct types (eg. StructTypes.JfrFrame, StructTypes.JfrMethod) are using lazily initialized attributes which happen to be a part of hashCode/equals computations.
The problem is that the hashCode/equals computation does not force the attribute initialization so if someone adds an instance of one of those types to eg. a hashmap before accessing some of its fields via getters the hash code will be different than when it is done after accessing those fields. Also, which fields are accessed makes difference.

 

The proposed solution is to have guarded initialization of the state necessary for hashCode/equals computations and force init of all required fields there.",,,,,,,,,,,JMC-7685,,,,,,,,,,,,,,JMC-7403,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tpgb:",9223372036854775807,,JMC 8.1 RDP2 1,JMC 8.1 RDP2 Final,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@250111f,,,,,,,,,"2021-07-28 02:50;roboduke;Changeset: bba7e411
Author:    Jaroslav Bachorik <jbachorik@openjdk.org>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2021-07-28 09:49:23 +0000
URL:       https://git.openjdk.java.net/jmc/commit/bba7e411c8e65f94d2e4e74a056372a9a98554c6
;;;","2021-09-28 01:41;eushakov;Hi all, it seems that now ensureParsed in equals methods is called only for this object (not for both compared). Also the check is better be moved after the if (this == obj) quick check. Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMC preference options are duplicated,JMC-7348,5054561,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,ghb,bbanathur,bbanathur,2021-07-17 09:43,2022-04-06 22:23,2023-10-01 09:57,2021-07-28 04:16,8.1.0,,,,,,,8.1.0,Mission Control Client,,0,regression,regression_JMC-7167,sqe-8.1.0,,,,,,,,,,,,,,,"Some of the preference options/configuraitons for JMC are duplicated, and it has following impacts.

+*Duplicate Configuration Options*+

!image-2021-07-17-22-09-02-781.png|width=527,height=355!

+*Unuseful Views*+

*!image-2021-07-17-22-10-30-316.png|width=693,height=564!*

+*Unwanted Error Message in Terminal*+
{code:java}
[opc@jmcoel8-1 JDK Mission Control]$ ./jmc -consoleLog[opc@jmcoel8-1 JDK Mission Control]$ ./jmc -consoleLogJava HotSpot(TM) 64-Bit Server VM warning: Option FlightRecorder was deprecated in version 13.0 and will likely be removed in a future release.Started recording 1.
Use jcmd 872471 JFR.dump name=JMC_Default filename=FILEPATH to copy recording data to file.!SESSION 2021-07-16 15:46:55.585 -----------------------------------------------eclipse.buildId=unknownjava.version=17-eajava.vendor=Oracle CorporationBootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=en_USCommand-line arguments:  -os linux -ws gtk -arch x86_64 -consoleLog
!ENTRY org.apache.felix.scr 4 0 2021-07-16 15:46:56.688!MESSAGE FrameworkEvent ERROR!STACK 0org.osgi.framework.BundleException: Could not resolve module: org.apache.felix.scr [5]  Unresolved requirement: Import-Package: org.apache.felix.service.command; version=""[1.0.0,2.0.0)""; resolution:=""optional""  Unresolved requirement: Import-Package: org.osgi.service.cm; version=""[1.6.0,2.0.0)""; resolution:=""optional""  Unresolved requirement: Import-Package: org.osgi.service.component; version=""[1.4.0,1.5.0)""
 at org.eclipse.osgi.container.Module.start(Module.java:463) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel$2.run(ModuleContainer.java:1845) at org.eclipse.osgi.internal.framework.EquinoxContainerAdaptor$1$1.execute(EquinoxContainerAdaptor.java:136) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1838) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1781) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.doContainerStartLevel(ModuleContainer.java:1743) at org.eclipse.osgi.container.SystemModule.startWorker(SystemModule.java:269) at org.eclipse.osgi.container.Module.doStart(Module.java:605) at org.eclipse.osgi.container.Module.start(Module.java:468) at org.eclipse.osgi.container.SystemModule.start(SystemModule.java:193) at org.eclipse.osgi.internal.framework.EquinoxBundle.start(EquinoxBundle.java:440) at org.eclipse.osgi.internal.framework.EquinoxBundle.start(EquinoxBundle.java:459) at org.eclipse.osgi.launch.Equinox.start(Equinox.java:139) at org.eclipse.core.runtime.adaptor.EclipseStarter.startup(EclipseStarter.java:338) at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:251) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653) at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590) at org.eclipse.equinox.launcher.Main.run(Main.java:1461) at org.eclipse.equinox.launcher.Main.main(Main.java:1434)
!ENTRY org.eclipse.jface 2 0 2021-07-16 15:47:03.587!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.!SUBENTRY 1 org.eclipse.jface 2 0 2021-07-16 15:47:03.588!MESSAGE A conflict occurred for CTRL+3:Binding(CTRL+3, ParameterizedCommand(Command(org.eclipse.ui.window.quickAccess,Find Actions, Quickly access UI elements, Category(org.eclipse.ui.category.window,Window,null,true), org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@571db8b4, ,,true),null), org.eclipse.ui.defaultAcceleratorConfiguration, org.eclipse.ui.contexts.window,,,system)Binding(CTRL+3, ParameterizedCommand(Command(org.eclipse.ui.window.quickAccess,Find Actions, Quickly access UI elements, Category(org.eclipse.ui.category.window,Window,null,true), org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@571db8b4, ,,true),null), org.eclipse.ui.defaultAcceleratorConfiguration, org.eclipse.ui.contexts.window,,,system){code}",,,,,,,,,,,JMC-7686,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7167,,,,,,"2021-07-17 09:39;bbanathur;image-2021-07-17-22-09-02-781.png;https://bugs.openjdk.org/secure/attachment/95524/image-2021-07-17-22-09-02-781.png","2021-07-17 09:41;bbanathur;image-2021-07-17-22-10-30-316.png;https://bugs.openjdk.org/secure/attachment/95523/image-2021-07-17-22-10-30-316.png",,,,,,,,,,,,,,,,,,,"0|i2too3:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@782c9296,,,,,,,,,"2021-07-28 04:16;roboduke;Changeset: 76f5a565
Author:    Guru Hb <ghb@openjdk.org>
Date:      2021-07-28 11:15:10 +0000
URL:       https://git.openjdk.java.net/jmc/commit/76f5a56554082d7b5663b557ce1e6a6fcde60867
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unhandled exception in rule evaluation,JMC-7344,5054095,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,ghb,bbanathur,bbanathur,2021-07-14 00:03,2022-04-06 22:23,2023-10-01 09:57,2021-07-22 04:49,8.1.0,,,,,,,8.1.0,Mission Control Core,,0,sqe-8.1.0,,,,,,,,,,,,,,,,,"!image-2021-07-14-12-29-35-867.png|width=435,height=115!

 ",,,,,,,,,,,JMC-7678,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-14 00:01;bbanathur;flight_recording_17eaMonitoredVM10440_3.jfr;https://bugs.openjdk.org/secure/attachment/95491/flight_recording_17eaMonitoredVM10440_3.jfr","2021-07-13 23:59;bbanathur;image-2021-07-14-12-29-35-867.png;https://bugs.openjdk.org/secure/attachment/95492/image-2021-07-14-12-29-35-867.png",,,,,,,,,,,,,,,,,,,"0|i2tlsj:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@25ad7987,,,,,,,,,"2021-07-22 04:49;roboduke;Changeset: b0b037aa
Author:    Guru Hb <ghb@openjdk.org>
Date:      2021-07-22 11:48:10 +0000
URL:       https://git.openjdk.java.net/jmc/commit/b0b037aa001eed8e9ac004ffed302672a4e95472
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMC fails to parse JFR with events from WebLogic Server,JMC-7337,5053747,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,ghb,bbanathur,bbanathur,2021-07-09 01:38,2022-04-06 22:24,2023-10-01 09:57,2021-07-30 07:04,8.1.0,,,,,,,8.1.0,Mission Control Core,,0,sqe-8.1.0,,,,,,,,,,,,,,,,,"+_*Steps to reproduce*_+.

Open attached JFR  ([^WLS.lz4]) or perform the following on a WebLogic Server   
 # Setup WebLogic 14c server with a _wl_server_ domain (This domain contains example applications pre-deployed, and the example applications use Servlets, EJBs, JSPs,  JMS, JPA, JDBC transactions, and so on)
 # Enable diagnostic level to _HIGH_
 # Start Flight recording of the WLS Server for 10 to 15 minutes, by enabling all events from profiling on server template, set threshold of events to 1 ms.
 # Open the example applications deployed into the WebLogic server and try out different operations given (when the recording is going on, this is to ensure different events from the WebLogic server are getting dumped to JFR)
 # Upon completion of the recording interval,  JMC fails to dump the JFR file with the following error message.
 # While opening the JFR (which is dumped to file system by WLS Server) , an error message as in the image is displayed.

 
{code:java}
      java.lang.NullPointerException: Cannot invoke ""org.openjdk.jmc.common.IMCPackage.getModule()"" because ""thePackage"" is null at org.openjdk.jmc.flightrecorder.parser.synthetic.SyntheticAttributeExtension$ModuleExportSink.addEvent(SyntheticAttributeExtension.java:206) at org.openjdk.jmc.flightrecorder.internal.parser.v1.TypeManager$EventTypeEntry.readEvent(TypeManager.java:321) at org.openjdk.jmc.flightrecorder.internal.parser.v1.TypeManager.readEvent(TypeManager.java:420) at org.openjdk.jmc.flightrecorder.internal.parser.v1.ChunkLoaderV1.call(ChunkLoaderV1.java:92) at org.openjdk.jmc.flightrecorder.internal.parser.v1.ChunkLoaderV1.call(ChunkLoaderV1.java:47) at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) at java.base/java.lang.Thread.run(Thread.java:831){code}
 

!image-2021-07-09-14-09-53-675.png|width=652,height=251!  

 

_P.S._ : The attached JFR is compressed using lz4 to reduce the size,  .lz4 file can be opened directly in JMC 8.1.0.

 ",,,,,,,,,,,JMC-7690,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-30 05:26;ghb;WLF_3.jfr.lz4;https://bugs.openjdk.org/secure/attachment/95852/WLF_3.jfr.lz4","2021-07-09 01:44;bbanathur;WLS.lz4;https://bugs.openjdk.org/secure/attachment/95427/WLS.lz4","2021-07-09 01:40;bbanathur;image-2021-07-09-14-09-53-675.png;https://bugs.openjdk.org/secure/attachment/95426/image-2021-07-09-14-09-53-675.png",,,,,,,,,,,,,,,,,,"0|i2tjn7:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@250111f,,,,,,,,,"2021-07-30 07:04;ghb;https://github.com/openjdk/jmc/commit/ad9b602d9219c726239f848672ee27da96611254;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception while opening Method Profile page.,JMC-7329,5053444,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,schaturvedi,bbanathur,bbanathur,2021-07-06 05:28,2022-04-06 22:22,2023-10-01 09:57,2021-07-15 04:39,8.1.0,,,,,,,8.1.0,Mission Control Client,,0,regression,regression_JMC-7268,sqe-8.1.0,,,,,,,,,,,,,,,"JMC fails to get icon/label for method from certain JFRs and results in NPE. (Unfortunately, the JFR is confidential)

{{Attached screen recording, and log file.}}",,,,,,,,,,,JMC-7676,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-06 05:27;bbanathur;Exception.mov;https://bugs.openjdk.org/secure/attachment/95388/Exception.mov","2021-07-06 05:27;bbanathur;exception.log;https://bugs.openjdk.org/secure/attachment/95387/exception.log",,,,,,,,,,,,,,,,,,,"0|i2thrv:",9223372036854775807,,JMC 8.1 RDS 2,JMC 8.1 RDP2 1,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1c80c3d6,,,,,,,,,"2021-07-15 04:39;roboduke;Changeset: 362414b5
Author:    Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2021-07-15 11:38:35 +0000
URL:       https://git.openjdk.java.net/jmc/commit/362414b51b3306dacb4869a3022ce3d566508eb4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect sort order in method profiling page,JMC-7328,5053440,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,hirt,bbanathur,bbanathur,2021-07-06 04:49,2022-04-06 22:22,2023-10-01 09:57,2021-07-12 09:27,8.1.0,,,,,,,8.1.0,Mission Control Client,,0,sqe-8.1.0,,,,,,,,,,,,,,,,,"The alphabetical ordering based on method name is not working as expected.

*Steps to reproduce*

Open same JFR  in JMC v8.0.0 and v8.1.0

Go to the method profiling page and sort _Method_ column in ascending order.

*8.1.0* 

!image-2021-07-06-17-21-06-072.png|width=687,height=421!

*8.0.0* 

!image-2021-07-06-17-21-40-182.png|width=692,height=706!

 ",,,,,,,,,,,JMC-7675,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-06 04:47;bbanathur;image-2021-07-06-17-17-52-551.png;https://bugs.openjdk.org/secure/attachment/95384/image-2021-07-06-17-17-52-551.png","2021-07-06 04:48;bbanathur;image-2021-07-06-17-18-39-533.png;https://bugs.openjdk.org/secure/attachment/95383/image-2021-07-06-17-18-39-533.png","2021-07-06 04:51;bbanathur;image-2021-07-06-17-21-06-072.png;https://bugs.openjdk.org/secure/attachment/95385/image-2021-07-06-17-21-06-072.png","2021-07-06 04:51;bbanathur;image-2021-07-06-17-21-40-182.png;https://bugs.openjdk.org/secure/attachment/95386/image-2021-07-06-17-21-40-182.png",,,,,,,,,,,,,,,,,"0|i2thqz:",9223372036854775807,,JMC 8.1 RDS 2,JMC 8.1 RDP2 1,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1c80c3d6,,,,,,,,,"2021-07-09 18:23;hirt;Not sure the sort order ever made much sense, but I decided to let go of the return value, but keep the package in the class name. That way you get them sorted by package, class and method.;;;","2021-07-12 09:27;roboduke;Changeset: 11e547a0
Author:    Marcus Hirt <hirt@openjdk.org>
Date:      2021-07-12 16:27:02 +0000
URL:       https://git.openjdk.java.net/jmc/commit/11e547a0fc127973eeeacc6ee30b22ea21ef2daa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Constant Pool optimizations,JMC-7327,5053439,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,jpbempel,bbanathur,bbanathur,2021-07-06 04:35,2022-04-06 22:22,2023-10-01 09:57,2021-07-08 13:05,8.1.0,,,,,,,8.1.0,Mission Control Client,,0,sqe-8.1.0,,,,,,,,,,,,,,,,,"(1) Duplicate/Repeated Rule evaluation/analysis for constant pools in Automated Analysis page.

!image-2021-07-06-17-06-17-580.png|width=402,height=205!

 

(2) Display stack trace to show the occurrence 

!image-2021-07-06-17-06-56-025.png|width=546,height=294!

 

 ",,,,,,,,,,,JMC-7674,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7332,,,,,,"2021-07-06 04:36;bbanathur;image-2021-07-06-17-06-17-580.png;https://bugs.openjdk.org/secure/attachment/95381/image-2021-07-06-17-06-17-580.png","2021-07-06 04:36;bbanathur;image-2021-07-06-17-06-56-025.png;https://bugs.openjdk.org/secure/attachment/95382/image-2021-07-06-17-06-56-025.png",,,,,,,,,,,,,,,,,,,"0|i2thqr:",9223372036854775807,,JMC 8.1 RDS 2,JMC 8.1 RDP2 1,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1c80c3d6,,,,,,,,,"2021-07-08 13:04;roboduke;Changeset: f5a9cf32
Author:    Jean-Philippe Bempel <jpbempel@openjdk.org>
Date:      2021-07-08 20:04:15 +0000
URL:       https://git.openjdk.java.net/jmc/commit/f5a9cf32a17f2c74685eb4682beea76a420f0d44
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update eclipse version and Min JDK required in Update Site landing pages,JMC-7324,5053340,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P2,Fixed,ghb,bbanathur,bbanathur,2021-07-04 09:31,2022-04-06 22:22,2023-10-01 09:57,2021-07-15 22:53,8.1.0,,,,,,,8.1.0,Mission Control Client,,0,sqe-8.1.0,,,,,,,,,,,,,,,,,"*1. Eclipse: Oracle^®^ Plug-ins for JDK Mission Control (Oracle IDE Plugin Page)*
 * Requires Eclipse *4.16* or later.
 * Requires Eclipse running on *JDK 8* or above.
 * update-site-instructions
 * Before starting, make sure that you have downloaded and installed *Eclipse 4.16* or later and installed the [JDK Mission Control base Plug-ins|https://download.oracle.com/technology/products/missioncontrol/updatesites/oracle/8.1.0/ide/].

*2. JDK Mission Control Plug-ins for Eclipse (Supported IDE Plugin Page)*

Version shows : *Version 8.0.0*

*Prerequisites :* JDK Mission Control is a set of plug-ins for Eclipse 4.16 or later.

Note that you need to run your Eclipse on a JDK (version 8 or above)

run-on-jdk-instructions (reference to JDK 8 Version)

Also mention about point :  JMC-7086

*3. JDK Mission Control Plug-ins ( Supported RCP Plugin Page)*

Requires JDK Mission Control RCP Edition 8.0.0

*4. All Pages (Link to [Newsgroup|https://community.oracle.com/community/java/java_hotspot_virtual_machine/java_mission_control] is a dead link)*

These plug-ins are supported, so you can contact Oracle support, but you can also try asking your question in the forum [Newsgroup|https://community.oracle.com/community/java/java_hotspot_virtual_machine/java_mission_control]

*5.* *Update Site Name still shows version number as 8.0.0* 

!image-2021-07-14-21-03-45-954.png!  ",,,,,,,,,,,JMC-7677,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-14 08:33;bbanathur;image-2021-07-14-21-03-45-954.png;https://bugs.openjdk.org/secure/attachment/95496/image-2021-07-14-21-03-45-954.png",,,,,,,,,,,,,,,,,,,,"0|i2th4r:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@782c9296,,,,,,,,,"2021-07-15 22:53;roboduke;Changeset: 5a3e3033
Author:    Guru Hb <ghb@openjdk.org>
Date:      2021-07-16 05:52:55 +0000
URL:       https://git.openjdk.java.net/jmc/commit/5a3e30334a303903fcdca7c77f321dc19b0a888b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to view JMC Help Contents  (HTTP ERROR 500 ) when booted with JDK 17 or higher,JMC-7321,5053336,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,vpurnam,bbanathur,bbanathur,2021-07-04 08:28,2022-09-26 07:53,2023-10-01 09:57,2022-09-26 07:53,8.1.0,8.2.0,,,,,,8.3.0,Mission Control Client,,0,imt,regression,regression_JMC-7046,sqe-8.1.0,,,,,,,,,,,,,," Waiting for more details from : [https://bugs.eclipse.org/bugs/show_bug.cgi?id=574937] 

The following error message is shown while trying to access JMC help content in macOS

 
{code:java}
HTTP ERROR 500 org.apache.jasper.JasperException: PWC6033: Error in Javac compilation for JSP PWC6197: An error occurred at line: 40 in the jsp file: /index.jsp PWC6199: Generated servlet error: System cannot be resolvedHTTP ERROR 500 org.apache.jasper.JasperException: PWC6033: Error in Javac compilation for JSP PWC6197: An error occurred at line: 40 in the jsp file: /index.jsp PWC6199: Generated servlet error: System cannot be resolved
URI: /help/index.jspSTATUS: 500MESSAGE: org.apache.jasper.JasperException: PWC6033: Error in Javac compilation for JSP PWC6197: An error occurred at line: 40 in the jsp file: /index.jsp PWC6199: Generated servlet error: System cannot be resolvedSERVLET: org.eclipse.equinox.http.jetty.internal.HttpServerManager$InternalHttpServiceServlet-f7a8717CAUSED BY: org.apache.jasper.JasperException: PWC6033: Error in Javac compilation for JSP PWC6197: An error occurred at line: 40 in the jsp file: /index.jsp PWC6199: Generated servlet error: System cannot be resolvedCaused by:
org.apache.jasper.JasperException: PWC6033: Error in Javac compilation for JSP
PWC6197: An error occurred at line: 40 in the jsp file: /index.jspPWC6199: Generated servlet error:System cannot be resolved{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7813,,,,,,,,,,,"2021-07-04 08:28;bbanathur;index.log;https://bugs.openjdk.org/secure/attachment/95361/index.log",,,,,,,,,,,,,,,,,,,,"0|i2th3v:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@24773a91,,,,,,,,,"2021-07-04 21:49;psrivastava;please check on 8.0;;;","2021-07-04 23:44;bbanathur;Reproducible with JDK 17 as boot JDK for JMC 8.1.0 (and works fine on JMC 8.0.1);;;","2021-07-18 22:50;ghb;Works with JDK which has version name ""x.y.z"" but fails with version ""x-ea"" prefix. 

Reducing the priority.;;;","2021-07-21 00:42;ghb;Workaround : Use GA version of JDK to test, (i.e one which doesn't have Alpha prefix such has ""-EA""). 

JDK Version having ""-EA"" prefix would lead to this failure. I have filed a Bug on JDT Compiler [https://bugs.eclipse.org/bugs/show_bug.cgi?id=574937] . will update the bug once we root cause or workaround from JDT / Jasper / Jetty Component . 

 ;;;","2021-11-09 10:29;eistepan;Issue is still reproducible on all platforms with 17GA on JMC8.1.0 and not reproducible with JMC8.0.1.  Stack is the same;;;","2022-09-26 07:53;vpurnam;Fixed along with [JMC-7813|https://bugs.openjdk.org/browse/JMC-7813].;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMC UI Automation test execution gets stuck in Linux,JMC-7310,5053020,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,aptmac,bbanathur,bbanathur,2021-06-29 21:23,2021-10-07 12:49,2023-10-01 09:57,2021-10-07 12:49,8.1.0,,,,,,,8.2.0,Infrastructure,,0,sqe-8.1.0,,,,,,,,,,,,,,,,,"JMC UI Automation test execution gets stuck in Linux (starting from org.openjdk.jmc.flightrecorder.uitest)

 

Attached are 

Complete Execution Log: [^Linux.log]

Test Specific Log: [^Test.log]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7309,,,,,,"2021-06-29 21:21;bbanathur;Linux.log;https://bugs.openjdk.org/secure/attachment/95313/Linux.log","2021-06-29 21:22;bbanathur;Test.log;https://bugs.openjdk.org/secure/attachment/95312/Test.log",,,,,,,,,,,,,,,,,,,"0|i2tf5n:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@166a4dc0,,,,,,,,,"2021-06-30 06:59;aptmac;The last line in the Linux.log is: Running org.openjdk.jmc.flightrecorder.uitest.JfrRecordingTest

This is tracked by: https://bugs.openjdk.java.net/browse/JMC-7068

From the other issue:
""This issue doesn't happen if I checkout the commit before the 2020-09 update (pre-JDK 11 update), but happens on the 2020-09 checkout.

I've tried tracing the paths with some crude logger statements, and it looks like something happens between a unit test completing and the @after method starting."";;;","2021-10-07 12:49;aptmac;As posted in JMC-7068 [0], this issue was located in GTK3 and was fixed in 2021-06 [1]

[0] https://bugs.openjdk.java.net/browse/JMC-7068

[1] [https://git.eclipse.org/c/platform/eclipse.platform.swt.git/commit/?id=3f32f32c87e879ecf9d5bd94fe8fbd1f949f104a]

Relevant Eclipse bugs for more information: [https://bugs.eclipse.org/bugs/show_bug.cgi?id=566864,] [https://bugs.eclipse.org/bugs/show_bug.cgi?id=569468]

 ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMC 8.0.1 fix formatting failure,JMC-7304,5052533,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,hirt,ghb,ghb,2021-06-23 11:39,2022-04-06 22:22,2023-10-01 09:57,2021-06-30 12:41,8.0.1,,,,,,,8.1.0,Mission Control Client,,0,,,,,,,,,,,,,,,,,,JMC 8.0.1 has Formatting error due to commit of 7188,,,,,,,,,,,JMC-7670,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tc5n:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5162edbb,,,,,,,,,"2021-06-30 12:41;roboduke;Changeset: e838a74c
Author:    Marcus Hirt <marcus@hirt.se>
Date:      2021-06-23 20:46:16 +0000
URL:       https://git.openjdk.java.net/jmc/commit/e838a74ca34df98728a7554e3100a414e00c4c5e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMC Install guide should cite absolute path to hsperfdata_username directory ,JMC-7302,5052477,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,ssatish,pardesha,pardesha,2021-06-22 21:17,2021-09-07 00:38,2023-10-01 09:57,2021-09-07 00:38,8.0.1,,,,,,,,docs,,0,,,,,,,,,,,,,,,,,,"Currently, under Prerequisite section in JMC Install guide, it's mentioned that,
 ""Ensure that the hsperfdata_username directory is present in the Windows $TEMP directory and is writable by the user. In case there are any issues while starting JMC with user permissions, then start JMC as an administrator""

 Ref: [https://www.oracle.com/java/technologies/javase/jmc8-install.html]

Having a reference example to an absolute path would provide more clarity, since Windows at times has multiple temp directories in C:\

Details: Ensure that a directory named hsperfdata_<user> in your tmp directory, where <user> is your login. (On windows you should be able to find this folder under C:\Users\user_name\AppData\Local\Temp\hsperfdata_username.) Make sure that the directory can be written to. Also make sure that you are using a file system that supports ACLs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbtf:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3cb3fd74,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Accessibility Issue - Too low contrast on rule result values,JMC-7299,5052043,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,schaturvedi,schaturvedi,schaturvedi,2021-06-16 09:53,2022-04-06 22:20,2023-10-01 09:57,2021-06-20 05:27,6.0.0,,,,,,,8.1.0,Mission Control Client,,0,accessibility,vpat,,,,,,,,,,,,,,,,"In the HTML version of the Automated Analysis Result page, the score of a rule is printed on top of a bar. In the worst case, it is white text on a yellow background. According to WCAG 2.0 (accessibility), the contrast should be at least 4.5:1.

On the other hand, an alternative view is available (the table).",,,,,,,,,,,JMC-7665,,,,,,,,,,,,,,,,,,JMC-4971,,,JMC-4971,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2t94z:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1c80c3d6,,,,,,,,,"2021-06-20 05:27;roboduke;Changeset: 6723a701
Author:    Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2021-06-20 12:25:52 +0000
URL:       https://git.openjdk.java.net/jmc/commit/6723a7012c2bbe65aa51e366a92afe22fa86ad6b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMC Help Documentation requires corrections,JMC-7289,5051878,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,schaturvedi,bbanathur,dukebot,2021-06-15 05:58,2021-07-28 10:10,2023-10-01 09:57,2021-06-15 05:58,7.0.0,7.0.1,7.1.2,8.0.0,,,,8.1.0,docs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-6753,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t84b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update the build script help to include the installCore option,JMC-7287,5051876,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P5,Fixed,hirt,hirt,dukebot,2021-06-15 05:57,2021-07-28 10:13,2023-10-01 09:57,2021-06-15 05:57,,,,,,,,8.1.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t83v:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5dc4c445,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Example JBS issue,JDK-8272373,5056562,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jwilhelm,jwilhelm,jwilhelm,2021-08-12 07:49,2022-09-28 12:43,2023-10-01 09:57,2022-01-31 14:20,17,18,,,,,,18,hotspot,,0,starter,,,,,,,,,,,,,,,,,This is an example issue created for the OpenJDK Developers' Guide. Read more about how to handle backports here: https://openjdk.org/guide/#backporting,,,,,,,,,,,JDK-8277499,JDK-8280986,JDK-8277498,,,,,,,,,,,,JDK-8280989,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u0qr:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/io/File/GetXSpace.java failed with ""RuntimeException: java.nio.file.NoSuchFileException: /run/user/0""",JDK-8272369,5056555,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,dcubed,dcubed,2021-08-12 06:08,2021-11-16 12:26,2023-10-01 09:57,2021-08-17 10:08,11,17,18,,,,,18,core-libs,,0,intermittent,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,redhat-interest,tier2,,,,,,,,,,,"The following test failed in the JDK18 CI:

java/io/File/GetXSpace.java

Here's a snippet from the log file:

----------System.err:(32/2482)----------
WARNING: A terminally deprecated method in java.lang.System has been called
WARNING: System::setSecurityManager has been called by GetXSpace (file:/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S100467/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a559167e-050c-47e0-9b77-21c8954cc466/runs/1dfb257d-cfc8-4dfc-85c9-c7c06b47ad0f/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/classes/3/java/io/File/GetXSpace.d/)
WARNING: Please consider reporting this to the maintainers of GetXSpace
WARNING: System::setSecurityManager will be removed in a future release
java.lang.RuntimeException: java.nio.file.NoSuchFileException: /run/user/0
	at GetXSpace.compare(GetXSpace.java:224)
	at GetXSpace.testDF(GetXSpace.java:395)
	at GetXSpace.main(GetXSpace.java:429)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.nio.file.NoSuchFileException: /run/user/0
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at java.base/sun.nio.fs.UnixFileStore.devFor(UnixFileStore.java:61)
	at java.base/sun.nio.fs.UnixFileStore.<init>(UnixFileStore.java:68)
	at java.base/sun.nio.fs.LinuxFileStore.<init>(LinuxFileStore.java:49)
	at java.base/sun.nio.fs.LinuxFileSystemProvider.getFileStore(LinuxFileSystemProvider.java:51)
	at java.base/sun.nio.fs.LinuxFileSystemProvider.getFileStore(LinuxFileSystemProvider.java:39)
	at java.base/sun.nio.fs.UnixFileSystemProvider.getFileStore(UnixFileSystemProvider.java:381)
	at java.base/java.nio.file.Files.getFileStore(Files.java:1498)
	at GetXSpace.compare(GetXSpace.java:220)
	... 8 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /run/user/0
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: java.nio.file.NoSuchFileException: /run/user/0
----------rerun:(36/5386)*----------",,,,,,,,,,,JDK-8277293,JDK-8277205,,,,,,,,,,,,,,,,,,,,JDK-8277159,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,"0|i2u0p7:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2021-08-12 06:11;alanb;Maybe the test needs to be harden to deal with file systems being unmounted while the test runs.;;;","2021-08-16 17:01;bpb;Indeed /run/user/0 is a temporary directory for root processes which could be present when the test is started but deleted before an attempt is made to access its FileStore.;;;","2021-08-17 10:08;roboduke;Changeset: a68b5b9c
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-08-17 17:07:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a68b5b9c1dd9dd69fa3ef29d8f1186707ec09311
;;;","2021-11-15 11:50;akasko;Fix request (17u)

Clean backport of a test fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some tests may fail when executed with other locales than the US,JDK-8272358,5056540,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-08-12 01:39,2022-04-05 02:56,2023-10-01 09:57,2021-11-17 14:23,11,17,18,,,,,18,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,"This issue was reported a few times:
https://mail.openjdk.java.net/pipermail/core-libs-dev/2014-June/027312.html
http://openjdk.5641.n7.nabble.com/8-langtools-javac-lambda-test-fails-on-a-French-platform-fixes-provided-as-hg-diff-td169330.html#a169463

Since then a few other tests were added which may fail on non-US locales as well.",,,,,,,,,,,JDK-8283932,JDK-8284345,JDK-8283776,JDK-8283946,JDK-8283836,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2u0lv:",9223372036854775807,b25,,,,,,,,,,,,,"2021-11-17 14:23;roboduke;Changeset: 29e552c0
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-11-17 22:21:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/29e552c03a2825f9526330072668a1d63ac68fd4
;;;","2022-03-29 03:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/292
Date: 2022-03-29 10:37:33 +0000;;;","2022-03-29 03:44;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Tests have passed.;;;","2022-03-31 11:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/973
Date: 2022-03-31 18:50:13 +0000;;;","2022-03-31 22:55;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only a test change.
Clean backport except for Copyright.
Tests pass.
SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Java launcher can not parse Chinese character when system locale is set to UTF-8,JDK-8272352,5056527,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,yyang,yyang,2021-08-11 19:44,2022-09-09 01:35,2023-10-01 09:57,2022-05-05 13:03,17,18,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-hard,regression,,,,,,,,,,,,"Create on behalf of Glavo <zjx001202@gmail.com>
----

When we turned on ""Use Unicode UTF-8 for worldwide language support""(something like https://stackoverflow.com/questions/56419639/what-does-beta-use-unicode-utf-8-for-worldwide-language-support-actually-do) option, java default launcher can not parse arguments that containing Chinese characters:

java Foo 你好世界

String[]args are actually garbled Chinese characters.
",,,,,,,,,,,JDK-8290869,JDK-8290120,JDK-8293084,JDK-8293085,,,,,,,,,,,,,,,,,,,,,,,JDK-8260265,JDK-8124977,JDK-6584897,JDK-8266774,,,"2021-08-15 15:00;naoto;Screen Shot 2021-08-15 at 2.59.07 PM.png;https://bugs.openjdk.org/secure/attachment/96017/Screen+Shot+2021-08-15+at+2.59.07+PM.png","2021-08-15 15:03;naoto;Screen Shot 2021-08-15 at 3.02.59 PM.png;https://bugs.openjdk.org/secure/attachment/96018/Screen+Shot+2021-08-15+at+3.02.59+PM.png","2021-08-16 10:27;naoto;Screen Shot 2021-08-16 at 10.26.26 AM.png;https://bugs.openjdk.org/secure/attachment/96025/Screen+Shot+2021-08-16+at+10.26.26+AM.png",,,,generic,,,,,,,,,,windows,,,,"0|i2u0iz:",9223372036854775807,b22,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2021-08-12 19:21;dholmes;Moved to tools -> launcher.;;;","2021-08-12 19:26;dholmes;Past report of the same problem: JDK-6584897 - Will Not Fix

Open issues related to this:  JDK-8124977 cmdline encoding challenges on Windows ;;;","2021-08-15 14:59;naoto;Can the submitter provide more information? I tried to reproduce the issue, however, I had exact the opposite result (which I expected), i.e., Chinese string cannot be displayed with non-UTF-8 command prompt (cp437, pic1), where they are displayed as four '?'s, while with the UTF-8 command prompt, they displayed correctly (pic2).;;;","2021-08-16 10:27;naoto;I tried it again with my latest build, and it looks garbled. Will look into it.;;;","2021-08-16 15:05;naoto;Looks like this is a regression caused by the fix to JDK-8266774. The following backout reverts the regression:
---
diff --git a/src/java.base/windows/native/libjava/java_props_md.c b/src/java.base/windows/native/libjava/java_props_md.c
index b3c16a453d7..754725264eb 100644
--- a/src/java.base/windows/native/libjava/java_props_md.c
+++ b/src/java.base/windows/native/libjava/java_props_md.c
@@ -147,8 +147,8 @@ static char* getConsoleEncoding()
     cp = GetConsoleCP();
     if (cp >= 874 && cp <= 950)
         sprintf(buf, ""ms%d"", cp);
-    else if (cp == 65001)
-        sprintf(buf, ""UTF-8"");
+//    else if (cp == 65001)
+//        sprintf(buf, ""UTF-8"");
     else
         sprintf(buf, ""cp%d"", cp);
     return buf;
---;;;","2021-08-18 17:13;naoto;Looking into this issue, it is not that simple just to revert the change above. The issue here is that launcher is using the encoding from `sun.jnu.encoding`(= windows-1252) and the code tries to read it as `UTF-8`. Before the above fix, it happens to work because System.out's encoding is set to `windows-1252` (note that setting `cp65001` throws the exception for `setOut0()`, falling back to `windows-1252`) which just passthrough UTF-8 bytes for Ni-Hao.;;;","2021-08-24 16:23;naoto;The following piece will fix it, but it would also mean that all JNI related platform string would be affected:
---
$ git diff
diff --git a/src/java.base/share/classes/sun/launcher/LauncherHelper.java b/src/
java.base/share/classes/sun/launcher/LauncherHelper.java
index 82b73d01c6b..985f33ce3c7 100644
--- a/src/java.base/share/classes/sun/launcher/LauncherHelper.java
+++ b/src/java.base/share/classes/sun/launcher/LauncherHelper.java
@@ -877,6 +877,7 @@ public final class LauncherHelper {
     }

     private static final String encprop = ""sun.jnu.encoding"";
+    private static final String stdoutprop = ""sun.stdout.encoding"";
     private static String encoding = null;
     private static boolean isCharsetSupported = false;

@@ -887,7 +888,7 @@ public final class LauncherHelper {
     static String makePlatformString(boolean printToStderr, byte[] inArray) {
         initOutput(printToStderr);
         if (encoding == null) {
-            encoding = System.getProperty(encprop);
+            encoding = System.getProperty(stdoutprop, System.getProperty(encpro
p));
             isCharsetSupported = Charset.isSupported(encoding);
         }
         try {
---;;;","2021-08-25 11:27;naoto;The issue here is that there is not any public document from MS wrt ""Beta: Use Unicode UTF-8 for worldwide language support"" check box. JDK is using the ANSI code page (CP_ACP) to translate the path/argument strings into Java's Strings, but GetACP() returns 1252, even if the check box is checked. It seems that it only affects the OEM code page (to 65001), thus this discrepancy. Would wait for the more clear definition of the functionality from MS (maybe Windows 11 will do?);;;","2022-04-27 11:29;naoto;To be precise, GetACP() returns 65001 if the checkbox is checked, but GetLocaleInfo(GetSystemDefaultLCID(), LOCALE_IDEFAULTANSICODEPAGE, ...) returns 1252. The call should be replaced with GetACP().;;;","2022-04-27 13:14;naoto;Relevant information on MS site (https://docs.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page)
;;;","2022-04-27 13:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8434
Date: 2022-04-27 20:23:32 +0000;;;","2022-05-05 13:03;dukebot;Changeset: 22934485
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-05-05 19:59:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/229344853126692d38ff7cb164dd5d17c5bf7fbb
;;;","2022-07-01 12:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/522
Date: 2022-07-01 19:11:42 +0000;;;","2022-07-05 10:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/530
Date: 2022-07-05 17:44:08 +0000;;;","2022-07-05 17:22;macarte;Fix request

[posted on behalf of Stephanie Crater]

Backport to allow java to correctly parse Chinese characters in file paths and string arguments passed to java.exe.

Java runtime has been detecting the Windows system locale encoding using GetLocaleInfo(GetSystemDefaultLCID(), LOCALE_IDEFAULTANSICODEPAGE, ...), but it returns the legacy ANSI code page value, e.g, 1252 for US-English. In order to detect whether the user has selected UTF-8 as the default, the code page has to be queried with GetACP().
Also, the case if the call to GetLocaleInfo fails changed to fall back to UTF-8 instead of Cp1252.

Clean backport, low risk, confirmed the fix ran locally (note that there's not jtreg test as per original commit, due to requirements of windows config changes and reboot);;;","2022-07-14 12:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1228
Date: 2022-07-14 19:27:47 +0000;;;","2022-07-15 17:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1234
Date: 2022-07-16 00:38:20 +0000;;;","2022-07-18 10:35;macarte;Backport of JDK-8272352: Java launcher can not parse Chinese character when system locale is set to UTF-8.

Does not apply cleanly to 11u due to a minor change for UTF-8 support otherwise included in JDK-8264208: Console charset API, which has not been backported to 11u. (I added case 65001: for UTF-8 on line 83).

tier1 tests pass (github actions)

fix confirmed locally (as it was in 17u) as there isnt a specific test;;;",,,,,,,,,,,,,,,,,,,,
ObjectMethods::bootstrap should specify NPE if any argument except lookup is null,JDK-8272347,5056522,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,mchung,mchung,2021-08-11 15:33,2021-09-08 22:52,2023-10-01 09:57,2021-08-30 14:18,18,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"NullPointerException is thrown by ObjectMethods::bootstrap if any of the arguments except `names` is null but @throws NPE is missing in the spec

Note: according to test (test/jdk/java/lang/runtime/ObjectMethodsTest.java) the only argument that can be null without a NPE being generated is `lookup` which is actually ignored inside of the method's body",,,,,,,,,,,,,,,,,,,,,,,,JDK-8272852,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u0hv:",9223372036854775807,b13,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-08-30 14:18;roboduke;Changeset: 0609421d
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-08-30 21:16:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0609421d4b824c5642ca75d525bad3edd72cd23a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
macos doesn't check `os::set_boot_path()` result,JDK-8272345,5056519,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-08-11 13:29,2021-11-30 11:26,2023-10-01 09:57,2021-08-11 20:46,17,18,,,,,,18,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,"we don't check `os::set_boot_path()` return value on macos, which leads to a crash/assert down the road in case we weren't able to set BCP. on all other OSes, we terminate JVM w/ ""Failed setting boot class path."" error message.",,,,,,,,,,,JDK-8278017,JDK-8276725,JDK-8276574,JDK-8276724,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u0h7:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-11 20:46;roboduke;Changeset: bd27bb9c
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-08-12 03:45:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bd27bb9cbedebd09f589679947ff32261f9ef352
;;;","2021-11-03 14:51;akasko;Fix request (17u)

Clean backport of a Mac-specific fix.;;;","2021-11-29 13:44;akasko;Fix request (11u)

Backport to 11u is requested because it is a part of 11.0.15-oracle. Patch does not apply cleanly, review approval:

https://github.com/openjdk/jdk11u-dev/pull/674#pullrequestreview-818334032;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TEST_BUG] java/awt/print/PrinterJob/PageDialogMarginTest.java catches all exceptions,JDK-8272342,5056516,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rmahajan,aivanov,aivanov,2021-08-11 12:53,2021-10-08 01:36,2023-10-01 09:57,2021-08-16 15:25,9,,,,,,,18,client-libs,,0,11-bp,8-bp,cssn21_08_01,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,sustaining,testbug,,,,,"The java/awt/print/PrinterJob/PageDialogMarginTest.java test catches all exceptions and always passes:

----------System.out:(2/99)----------
pageDialog - left/top from pageFormat: 1.0 1.0
pageDialog - left/top from attribute set: 1.0 1.0
----------System.err:(9/633)----------
java.lang.RuntimeException: Top margin value not updated
        at PageDialogMarginTest.main(PageDialogMarginTest.java:67)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:831)
STATUS:Passed.

To reproduce, run the test. Click OK in the Page Setup dialog displayed without modifying any values. The test must fail but it does not: the test harness considers the test passed because the thrown RuntimeException is caught within the test.",,,,,,,,,,,JDK-8273141,JDK-8274021,JDK-8274951,JDK-8274553,JDK-8273184,,,,,,,,,,,,,,,,,JDK-6801613,,,,,,,,,,,,,,,,,,,,,,,,b117,9,,,,,,"0|i2u0gj:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-08-11 12:59;aivanov;The test should also set Locale to English to make sure the margins are displayed in inches. For me, the margins are displayed in mm which makes it less obvious.;;;","2021-08-16 15:25;roboduke;Changeset: a5ad7720
Author:    Rajat Mahajan <rajat.m.mahajan@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-08-16 22:24:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a5ad7720d235610ad45fc341c61f164805f82a54
;;;","2021-09-16 03:32;jdowland;Fix request (11u)

Please consider approving this for 11u. It's a test-only change. The test always passes prior to applying the patch, even if you deliberately supply invalid values. It also localizes the UI so, in my case, the test asks me to set a margin to 2 inches, but my localized UI lists the units in mm.

Patch applies clean. After applying, the UI is localized to US (so shows inches), passes if you follow the instructions, and fails if you do not, as it should.;;;","2021-09-16 03:41;jdowland;Fix request (8u)

Same rationale as for 11u. Patch applies cleanly after two unshuffles. Behaviour before/after is as with 11u.;;;","2021-09-16 05:04;clanger;[~jdowland], can you backport this to 17u as well (and even before 11u). 17 is an LTS and I'd like to make sure backports cascade down through all relevant releases... Thx.;;;","2021-09-16 06:29;jdowland;[~clanger], Sure OK. Also: I didn't raise a GItHub PR for this one, although on re-reading the guidance I probably should do, even though it applies clean. is that right?;;;","2021-09-16 06:38;jdowland;Fix request (17u)

Please consider this for 17u. Same rationale as for 11u (above comment). Patch applies cleanly after two unshuffles. Behaviour before/after is as with 11u. Thanks;;;","2021-09-16 08:27;clanger;OK, so let's wait for JDK17 Updates approval first. In the meanwhile you could also open the PR for 11 :);;;","2021-09-20 03:22;jdowland;11u PR: https://github.com/openjdk/jdk11u-dev/pull/377;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/MoveJDKTest.java doesn't check exit codes,JDK-8272335,5056508,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-08-11 10:37,2021-10-25 08:28,2023-10-01 09:57,2021-08-11 12:40,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275878,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u0er:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-11 12:40;roboduke;Changeset: 75a06421
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-08-11 19:38:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/75a06421e596b0e0006120a13836ec65a3ab9d46
;;;","2021-08-25 06:32;inakonechnyy;Backport request to jdk17, applies cleanly, tier1 runs ok. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com.sun.net.httpserver.HttpExchange: Improve API doc of getRequestHeaders,JDK-8272334,5056507,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2021-08-11 10:23,2021-08-25 18:14,2023-10-01 09:57,2021-08-19 02:10,,,,,,,,18,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272565,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u0ej:",9223372036854775807,b12,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-08-19 02:10;roboduke;Changeset: 1c80f078
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-08-19 09:09:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1c80f078f61a53ee80640e76a9af86f9b16a0618
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
--with-harfbuzz=system doesn't add -lharfbuzz after JDK-8255790,JDK-8272332,5056505,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2021-08-11 10:15,2023-07-17 13:07,2023-10-01 09:57,2021-08-12 01:53,17,18,,,,,,18,client-libs,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,redhat-interest,,,,,,,"Looking at make/modules/java.desktop/lib/Awt2dLibraries.gmk I see this:

ifeq ($(USE_EXTERNAL_HARFBUZZ), true)
   LIBFONTMANAGER_EXTRA_SRC =
   BUILD_LIBFONTMANAGER_FONTLIB += $(LIBHARFBUZZ_LIBS)
else
   LIBFONTMANAGER_EXTRA_SRC = libharfbuzz
[...]

Note the BUILD_LIBFONTMANAGER_FONTLIB += $(LIBHARFBUZZ_LIBS) piece which is supposed to add relevant linker flags.

Yet, LIBHARFBUZZ_LIBS is never actually set by the build system. HARFBUZZ_LIBS is:

$ grep HARFBUZZ_LIBS build/linux-x86_64-server-release/spec.gmk 
HARFBUZZ_LIBS:=-lharfbuzz",,,,,,,,,,,JDK-8278900,JDK-8272900,JDK-8272676,JDK-8277791,JDK-8272518,,,,,,,,,,,,,,JDK-8262502,,,,,,,,JDK-8255790,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u0e3:",9223372036854775807,b11,,,,,,,,,,,,,"2021-08-11 10:50;sgehwolf;Before JDK-8255790:

$ grep -n lharfbuzz build/linux-x86_64-server-release/build.log
21569: [14] LIBS := -lharfbuzz -lfreetype  
28666:( /usr/bin/rm -f /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/BUILD_LIBFONTMANAGER_link.log && /usr/bin/g++ -Wl,-z,relro -Wl,-z,now -Wl,-z,noexecstack -Wl,-O1 -m64 -L/disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/modules_libs/java.base -L/disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/modules_libs/java.base/server -shared -Wl,--exclude-libs,ALL -Wl,-O1 -Wl,-z,origin -Wl,-rpath,\$ORIGIN -L/disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/modules_libs/java.desktop -Wl,-soname=libfontmanager.so -o /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/modules_libs/java.desktop/libfontmanager.so /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/DrawGlyphList.o /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/HBShaper.o /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/X11FontScaler.o /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/X11TextRenderer.o /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/freetypeScaler.o /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/hb-jdk-font.o /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/scriptMapping.o /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/sunFont.o -lharfbuzz -lfreetype -lawt -ljava -ljvm -lm > >(/usr/bin/tee -a /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/BUILD_LIBFONTMANAGER_link.log) 2> >(/usr/bin/tee -a /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/BUILD_LIBFONTMANAGER_link.log >&2) || ( exitcode=$? && /usr/bin/cp /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/BUILD_LIBFONTMANAGER_link.log /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/make-support/failure-logs/support_native_java.desktop_libfontmanager_BUILD_LIBFONTMANAGER_link.log && /usr/bin/cp /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfontmanager/BUILD_LIBFONTMANAGER_link.cmdline /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/make-support/failure-logs/support_native_java.desktop_libfontmanager_BUILD_LIBFONTMANAGER_link.cmdline && exit $exitcode ) ) ; /usr/bin/objcopy --only-keep-debug /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/modules_libs/java.desktop/libfontmanager.so /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-release/support/modules_libs/java.desktop/libfontmanager.debuginfo

latest HEAD:

$ grep -n lharfbuzz build/linux-x86_64-server-release/build.log
<nothing>;;;","2021-08-11 10:53;sgehwolf;I believe this dosn't fail the build because -lfreetype will transitively resolve harfbuzz refs.;;;","2021-08-12 01:53;roboduke;Changeset: d38b3143
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-08-12 08:52:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d38b31438dd4730ee2149c02277d60c35b9d7d81
;;;","2021-08-12 08:45;sgehwolf;Fix Request (OpenJDK 17):

Please approve backporting this simple build fix to JDK 17u. The issue applies to it as well and might cause build failures later down the line.;;;","2021-08-16 02:55;sgehwolf;Fix Request (OpenJDK 11u):

Please approve backporting this fix as part of JDK-8255790 backport. Low risk, fixes the actual bug in current 11.0.12.;;;","2021-11-24 05:45;dcherepanov;Fix Request (15u)

Request to backport for parity with 11u. Will be fixed as a part of JDK-8255790 backport.;;;","2021-12-15 11:00;omikhaltcova;Fix request (13u) 

I'd like to backport this fix to jdk13u for parity with jdk11u. 
It will be included as a part of the JDK-8255790 backport.

RFR: https://github.com/openjdk/jdk13u-dev/pull/304;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cherry pick GTK WebKit 2.32.3 changes,JDK-8272329,5056500,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,arapte,arapte,arapte,2021-08-11 09:02,2021-09-21 13:55,2023-10-01 09:57,2021-08-17 05:00,8u311,jfx18,,,,,,jfx18,javafx,,0,CPU21_10-critical-approved,CPU21_10-critical-SQE-OK,sn_100,sn_99,webkit-2.32,,,,,,,,,,,,,https://webkitgtk.org/2021/07/23/webkitgtk2.32.3-released.html,,,,,,,,,,,JDK-8272844,JDK-8272601,JDK-8272642,JDK-8273855,,,,,,,,,,,,,,,,,,,,,,,JDK-8268849,JDK-8274107,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u0cz:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-08-17 05:00;roboduke;Changeset: ee442e51
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2021-08-17 11:59:46 +0000
URL:       https://git.openjdk.java.net/jfx/commit/ee442e516a20e979dc228ab63c6b795b74d49e41
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 java.library.path is not set properly by Windows jpackage app launcher,JDK-8272328,5056496,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,asemenyuk,asemenyuk,2021-08-11 08:05,2022-03-30 23:11,2023-10-01 09:57,2021-08-11 13:55,17,18,,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_99,,,,,,,,,,,,,,,"JDK-8267598 removed the regression caused by JDK-8263157 without actually fixing the problem described in JDK-8263157 on Windows.
JDK-8267598 fix was to set environment variable used by JLI initialization code to configure the value of java.library.path system property instead of setting the system property directly.
It turned out that on Windows setting `PATH` environment variable from jpackage app launcher doesn't affect the output of getenv() called from jli.dll from open/src/hotspot/os/windows/os_windows.cpp os::init_system_properties_values().
",,,,,,,,,,,JDK-8274441,,,,,,,,,,,,,,,,,,,,,JDK-8284067,JDK-8274290,,,,JDK-8267598,JDK-8271170,,,,,,,,,,,generic,,,,,,,,,,windows,,,,"0|i2u0c3:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-08-11 08:12;asemenyuk;Suggested solutions:

1.) Modify jli code to set default java.library.path based on current environment, not based on the environment when executable was loaded. I.e. use GetEnvironmentVariable() instead of getenv() to get the value of `PATH` in os::init_system_properties_values().

2.) Restart jpackage app launcher with an altered PATH environment variable.

3.) Don't fix the issue as on Windows java.library.path system property contains the path to directory with app launcher, so if the app requires custom native libs, they can be placed in this directory.

Neither option is great. Opted to implement #2.;;;","2021-08-11 13:55;roboduke;Changeset: cd2dbe5f
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2021-08-11 20:54:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cd2dbe5f007baf81ae9262c1152917e620970621
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/util/Random/RandomTestMoments.java had two Gaussian fails,JDK-8272326,5056493,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jlaskey,dcubed,dcubed,2021-08-11 06:48,2022-04-25 10:58,2023-10-01 09:57,2021-08-17 08:54,18,,,,,,,18,core-libs,,0,intermittent,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,tier6,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

java/util/Random/RandomTestMoments.java

Here's a snippet from the log file:

#section:main
----------messages:(5/153)----------
command: main RandomTestMoments
reason: User specified action: run main RandomTestMoments 
Mode: agentvm
Agent id: 86
elapsed time (seconds): 2.617
----------configuration:(14/1248)*----------
Boot Layer
  class path: C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\javatest.jar 
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\jtreg.jar 
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\junit.jar 
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\hamcrest.jar 
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\testng.jar 
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\jcommander.jar 
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\guice.jar 
  patch:      java.base T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_util\\patches\\java.base

Test Layer
  class path: T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_util\\classes\\3\\java\\util\\Random\\RandomTestMoments.d
              C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-18+10-471\\src.full\\open\\test\\jdk\\java\\util\\Random

----------rerun:(36/4475)*----------

<snip>

----------System.err:(16/990)----------
SecureRandom
  Gaussian fail: actual=55.330287, expected=38.298500, basis=38.298500, tolerance=0.200000
  Gaussian fail: actual=216.303488, expected=105.000000, basis=105.000000, tolerance=0.400000
java.lang.RuntimeException: 2 fails detected
	at RandomTestMoments.exceptionOnFail(RandomTestMoments.java:56)
	at RandomTestMoments.main(RandomTestMoments.java:202)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 2 fails detected",,,,,,,,,,,JDK-8272949,JDK-8272789,,,,,,,,,,,,,,,JDK-8270348,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,"0|i2u0bf:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2021-08-16 05:21;jlaskey;RandomTestMoments.java  and RandomTestChiSquared.java expect successive calls to nextLong to reproduce the same sequence of values. SecureRandom, by its nature, does not follow this requirement. The patch filters out SecureRandom from these tests.
;;;","2021-08-17 08:54;roboduke;Changeset: cf64c3e7
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-08-17 15:53:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cf64c3e7e226eacf675d984db52872b0a8343a46
;;;","2021-08-18 14:04;darcy;Fix Request
Increase stability of 17u testing by removing a testing scenario this is known to be able to fail intermittently.
;;;","2022-04-25 10:58;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong Boot JDK help message in 11,JDK-8272316,5056478,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-08-11 05:01,2021-11-03 07:14,2023-10-01 09:57,2021-09-06 06:39,11,,,,,,,11.0.14,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,"When building jdk11u-dev on a Linux ppc64le machine with OpenJDK8 installed, I get the following message :

configure: Found potential Boot JDK using java(c) in PATH
configure: Potential Boot JDK found at /usr/lib/jvm/java-8-openjdk-ppc64el is incorrect JDK version (openjdk version ""1.8.0_292""); ignoring
configure: (Your Boot JDK version must be one of: 10 11)
configure: Found potential Boot JDK using well-known locations (in /usr/lib/jvm/java-8-openjdk-ppc64el)
configure: Potential Boot JDK found at /usr/lib/jvm/java-8-openjdk-ppc64el is incorrect JDK version (openjdk version ""1.8.0_292""); ignoring
configure: (Your Boot JDK version must be one of: 10 11)
configure: Found potential Boot JDK using well-known locations (in /usr/lib/jvm/java-11-openjdk-ppc64el)
configure: Potential Boot JDK found at /usr/lib/jvm/java-11-openjdk-ppc64el did not contain bin/javac; ignoring
configure: (This might be an JRE instead of an JDK)
configure: Found potential Boot JDK using well-known locations (in /usr/lib/jvm/java-1.8.0-openjdk-ppc64el)
configure: Potential Boot JDK found at /usr/lib/jvm/java-1.8.0-openjdk-ppc64el is incorrect JDK version (openjdk version ""1.8.0_292""); ignoring
configure: (Your Boot JDK version must be one of: 10 11)
configure: Found potential Boot JDK using well-known locations (in /usr/lib/jvm/java-1.11.0-openjdk-ppc64el)
configure: Potential Boot JDK found at /usr/lib/jvm/java-1.11.0-openjdk-ppc64el did not contain bin/javac; ignoring
configure: (This might be an JRE instead of an JDK)
configure: Found potential Boot JDK using well-known locations (in /usr/lib/jvm/default-java)
configure: Potential Boot JDK found at /usr/lib/jvm/default-java did not contain bin/javac; ignoring
configure: (This might be an JRE instead of an JDK)
configure: Could not find a valid Boot JDK. You might be able to fix this by running 'sudo apt-get install openjdk-8-jdk'.
configure: This might be fixed by explicitly setting --with-boot-jdk
configure: error: Cannot continue
configure exiting with result code 1

I think the help output should better mention openjdk-11-jdk because 8 is not sufficient to build jdk11.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8219788,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2u083:",9223372036854775807,b01,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-09-06 06:38;roboduke;Changeset: 569688f5
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-09-06 13:37:54 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/569688f56d0ef1d688226b0d474f7a886851956f
;;;","2021-09-06 13:36;clanger;[~mbaesken], while this is a JDK 11 specific change, you still need to request push approval via jdk11u-fix-request label. I have retroactively approved this now but please take care next time.;;;","2021-11-03 07:08;roboduke;Changeset: 569688f5
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-09-06 13:37:54 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/569688f56d0ef1d688226b0d474f7a886851956f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [AArch64] TestCallingConventionC1 test63 and test64 get incorrect result,JDK-8272307,5056454,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ngasson,ngasson,ngasson,2021-08-10 20:27,2021-08-13 03:16,2023-10-01 09:57,2021-08-13 03:16,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,"Caused by: java.lang.RuntimeException: assertEquals: expected -1163019586 to equal 777
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:189)
	at jdk.test.lib.Asserts.assertEQ(Asserts.java:166)
	at compiler.valhalla.inlinetypes.TestCallingConventionC1.test64_verifier(TestCallingConventionC1.java:1518)
	... 9 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2u02r:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
several hotspot runtime/modules don't check exit codes,JDK-8272305,5056449,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-08-10 14:46,2021-10-25 08:31,2023-10-01 09:57,2021-08-16 09:57,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,"runtime/modules/ClassLoaderNoUnnamedModuleTest.java, IgnoreModulePropertiesTest.java, runtime/modules/Visibility/XbootcpNoVisibility.java, and runtime/modules/PatchModule/PatchModuleCDS.java, PatchModuleTraceCL.java spawn child JVMs but (in some cases) don't check their exit codes.",,,,,,,,,,,JDK-8275880,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2u01n:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-16 09:57;roboduke;Changeset: b2c272d4
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-08-16 16:56:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b2c272d4e21eb4aeb6c8e1c0be0d08943dc36db8
;;;","2021-08-25 06:32;inakonechnyy;Backport request to jdk17, applies cleanly, runs ok. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FileInputStream should override transferTo() for better performance,JDK-8272297,5056440,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2021-08-10 14:00,2021-08-23 15:02,2023-10-01 09:57,2021-08-16 08:55,18,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,"Invoking transferTo() on a FileInputStream will use the superclass method which copies using looping over buffers of a fixed size. If the parameter is a FileOutputStream, the copy should be greatly accelerated by using the java.nio.channels.FileChannel.transferTo() method with the FileChannels of the source and destination streams.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tzzn:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2021-08-16 08:55;roboduke;Changeset: 82688258
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-08-16 15:53:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/82688258f676e6be8a603f6ab744d52728e3478b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Disable CDS if InlineTypePassFieldsAsArgs has changed,JDK-8272290,5056433,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,mchung,mchung,2021-08-10 12:09,2021-08-15 17:56,2023-10-01 09:57,2021-08-15 17:56,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,cds,lworld,,,,,,,,,,,,,,,,"When the attached patch to convert a few JDK classes to ref-default primitive classes, the following compiler tests fail with this assertion when the CDS sharing is on:
   assert(pos == TypeFunc::Parms + arg_cnt) failed: wrong number of arguments

compiler/valhalla/inlinetypes/TestArrays.java 
compiler/valhalla/inlinetypes/TestBasicFunctionality.java 
compiler/valhalla/inlinetypes/TestCallingConvention.java 
compiler/valhalla/inlinetypes/TestIntrinsics.java 
compiler/valhalla/inlinetypes/TestJNICalls.java 
compiler/valhalla/inlinetypes/TestLWorld.java 
compiler/valhalla/inlinetypes/TestMethodHandles.java 
compiler/valhalla/inlinetypes/TestNullableArrays.java 
compiler/valhalla/inlinetypes/TestNullableInlineTypes.java 
compiler/valhalla/inlinetypes/TestOnStackReplacement.java 

#  Internal Error (/Users/mlchung/ws/valhalla/lworld-closed/open/src/hotspot/share/opto/type.cpp:2163), pid=52390, tid=23299
#  assert(pos == TypeFunc::Parms + arg_cnt) failed: wrong number of arguments

Current CompileTask:
C2:   2782  924    b  4       compiler.lib.ir_framework.test.TestVM::getAnnotation (45 bytes)

Stack: [0x0000700006667000,0x0000700006767000],  sp=0x00007000067644e0,  free space=1013k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x1190899]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e9
V  [libjvm.dylib+0x1190f1b]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x5fe96d]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x11057ab]  TypeTuple::make_domain(ciMethod*, bool)+0x91b
V  [libjvm.dylib+0x111263c]  TypeFunc::make(ciMethod*, bool)+0x8c
V  [libjvm.dylib+0x82cc11]  GraphKit::record_profiled_arguments_for_speculation(ciMethod*, Bytecodes::Code)+0x31
V  [libjvm.dylib+0x6a2ff4]  Parse::do_call()+0xa54
V  [libjvm.dylib+0xed71c4]  Parse::do_one_bytecode()+0x194
V  [libjvm.dylib+0xebfbe1]  Parse::do_one_block()+0x441
V  [libjvm.dylib+0xebdb68]  Parse::do_all_blocks()+0x3f8
V  [libjvm.dylib+0xeb8dad]  Parse::Parse(JVMState*, ciMethod*, float)+0x112d
V  [libjvm.dylib+0x48207b]  ParseGenerator::generate(JVMState*)+0xab
V  [libjvm.dylib+0x59c5d3]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1523
V  [libjvm.dylib+0x480599]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x109
V  [libjvm.dylib+0x5be252]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x7a2
V  [libjvm.dylib+0x5bd890]  CompileBroker::compiler_thread_loop()+0x2c0
V  [libjvm.dylib+0x10e12c4]  JavaThread::thread_main_inner()+0x254
V  [libjvm.dylib+0x10de137]  Thread::call_run()+0x177
V  [libjvm.dylib+0xe8e110]  thread_native_entry(Thread*)+0x150
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94
C  [libsystem_pthread.dylib+0x1b8b]  thread_start+0xf
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271959,,,,,,,,,,,"2021-08-10 13:09;mchung;refval-v1.patch;https://bugs.openjdk.org/secure/attachment/95973/refval-v1.patch",,,,,,,,,,,,,,,,,,,,"0|i2tzy3:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-10 12:16;mchung;These tests pass when running with -Xshare:off.   I assign this to hotspot/compiler category for evaluation where the assertion comes from.  This could be related to CDS.;;;","2021-08-10 14:13;iklam;The crash happens when compiling java/util/ImmutableCollections$ListN::size:""()I"". For some reason, when loaded from CDS,  Method::has_scalarized_args() is true.

backtrace:
 1 TypeTuple::make_domain 
 2 TypeFunc::make 
 3 Compile::Compile 
 4 C2Compiler::compile_method 
 5 CompileBroker::invoke_compiler_on_method 
 6 CompileBroker::compiler_thread_loop 
 7 CompilerThread::thread_entry 
 8 JavaThread::thread_main_inner 
 9 JavaThread::run 
10 Thread::call_run 
11 thread_native_entry 
12 start_thread 
13 clone 

Inside TypeFunc::make():

  bool has_scalar_args = method->has_scalarized_args() && !is_osr_compilation;
  const TypeTuple* domain_sig = is_osr_compilation ? osr_domain() : TypeTuple::make_domain(method, false);
  const TypeTuple* domain_cc = has_scalar_args ? TypeTuple::make_domain(method, true) : domain_sig;

When CDS is disabled: 
(gdb) p method->has_scalarized_args()
$8 = false

When CDS is enabled: 
(gdb) p method->has_scalarized_args()
$37 = true

As a result, TypeTuple::make_domain() is called a second time when CDS is enabled, leading up to the assert.;;;","2021-08-10 14:26;iklam;The crash happens only with compiler.valhalla.inlinetypes.InlineTypes::Scenario[5]:

            new Scenario(5,
                         ""-XX:+IgnoreUnrecognizedVMOptions"",
                         ""-XX:-UseACmpProfile"",
                         ""-XX:+AlwaysIncrementalInline"",
                         ""-XX:FlatArrayElementMaxOops=5"",
                         ""-XX:FlatArrayElementMaxSize=-1"",
                         ""-XX:-UseArrayLoadStoreProfile"",
                         ""-XX:InlineFieldMaxFlatSize=-1"",
                         ""-XX:-InlineTypePassFieldsAsArgs"",
                         ""-XX:-InlineTypeReturnedAsFields""

However, the CDS archive is dumped with InlineTypePassFieldsAsArgs==true and InlineTypeReturnedAsFields==true. So the archived version of java/util/ImmutableCollections$ListN::size() thinks that it has scalarized args. However, the compiler, looking at the runtime value of InlineTypePassFieldsAsArgs, think that size() should not have scalarized args.

The fix is to refuse to load the CDS archive is such important globals do not match.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Funky multiresolution image breaks graphics context,JDK-8272288,5056429,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,alans,alans,2021-08-10 10:53,2023-02-15 23:17,2023-10-01 09:57,2023-02-09 11:24,16,17,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,,,"I discovered this problem when a system service returned a 2x image with user size 28.0 x 0.5. I created a multiresolution image to preserve the extra resolution, but (erroneously) gave it a size of 28 x 0. Prior to JDK 16, this erroneous image was rejected when painted (see below). However, in JDK 16 and 17, there is no exception. Instead, the graphics context is apparently damaged. In this example, the label text is not painted. In other examples, it seems to have cleared the rendering buffer.

(Actually, I believe the exception is thrown but is caught internally, at which point different drawing code is used.)

The exception from JDK 15:

Exception in thread ""AWT-EventQueue-0"" java.lang.IllegalArgumentException: Invalid Image variant
	at java.desktop/sun.awt.image.SurfaceManager.getManager(SurfaceManager.java:82)
	at java.desktop/sun.java2d.SurfaceData.getSourceSurfaceData(SurfaceData.java:219)
	at java.desktop/sun.java2d.opengl.OGLDrawImage.renderImageXform(OGLDrawImage.java:62)
	at java.desktop/sun.java2d.pipe.DrawImage.transformImage(DrawImage.java:264)
	at java.desktop/sun.java2d.pipe.DrawImage.copyImage(DrawImage.java:76)
	at java.desktop/sun.java2d.pipe.DrawImage.copyImage(DrawImage.java:1027)
	at java.desktop/sun.java2d.pipe.ValidatePipe.copyImage(ValidatePipe.java:186)
	at java.desktop/sun.java2d.SunGraphics2D.drawImage(SunGraphics2D.java:3425)
	at java.desktop/sun.java2d.SunGraphics2D.drawImage(SunGraphics2D.java:3401)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302169,,,,,,"2021-08-10 10:52;alans;TestFunkyImage.java;https://bugs.openjdk.org/secure/attachment/95971/TestFunkyImage.java",,,,,,,,,,,,,,16,,generic,,,,"0|i2tzx7:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-09-11 17:13;serb;It is not particularly related to the MRI, the test use the custom image as a base image. Since the resolution size is zero we skip it and try to draw the base image instead, our default java2d pipeline do not know how to draw such images so it is just ignored(related drawImage return false)
https://bugs.openjdk.java.net/browse/JDK-7183828

Why the text is not drawn after is a good question.;;;","2021-09-11 18:13;serb;When the text works the OGLTextRenderer is used, when the bug is occurred the AATextRenderer is used. Looks like the SG2D object invalidation/validation logic is buggy.;;;","2021-09-11 18:22;serb;I can take a look to this one.;;;","2022-05-19 10:47;prr;Do you still intend to look at this ? If not assign it back to me.;;;","2022-05-19 12:11;vdyakov;[~serb] please share your plans (see above)
;;;","2022-05-20 11:07;serb;I'll take a look.;;;","2022-12-13 15:54;serb;The problem is in the OGL, on windows the test works fine for GDI and d3d.;;;","2022-12-13 22:38;serb;All accelerated pipelines except D3D do not set contentLost flag if some errors occurred during rendering. As a result, the Swing library do not try to use a fallback path for that and nothing appeared on the screen.;;;","2022-12-14 14:12;alans;I'm wondering if the contentLost issue explains another problem. I have observed that when my macOS system is severely bogged down, Java applications are prone to reliably display blank windows (including blank menus). I don't know if Java is getting an error in this case. It could also be a timing problem if Java expects the creation of a native window to happen quickly and does not check to see if it was actually created before doing the initial painting of the window content.;;;","2022-12-20 01:03;serb;If the ""blank menus"" are actually global menus, then I think it is related to the macOS slowdown, since java does not render them.
Note that java does not render directly to the window, it uses the back buffer similar to a volatile image, and copies it to the window when macOS requests it to do so.;;;","2022-12-26 08:37;alans;The menus I was referring to are contextual menus.
If Java renders on demand, then either the request was not made or the rendering somehow failed and was not retried.
I do not see this behavior from non-Java applications.
;;;","2022-12-29 14:05;serb;>  If Java renders on demand, then either the request was not made or the rendering somehow failed and was not retried. 

Then yes, it is possible. Is there any difference between OpenGL and metal?;;;","2022-12-29 14:11;alans;I don't know. Unfortunately, I cannot force the system into this state and it has not happened recently.;;;","2022-12-29 22:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11664
Date: 2022-12-14 08:20:31 +0000;;;","2023-02-09 11:24;dukebot;Changeset: 51479692
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-02-09 19:22:51 +0000
URL:       https://git.openjdk.org/jdk/commit/5147969253a9792d883fdd505a62b959c5541566
;;;",,,,,,,,,,,,,,,,,,,,,,,
"javax/swing/JTable/4275046/bug4275046.java failed with ""Expected value in the cell: 'rededited' but found 'redEDITED'.""",JDK-8272232,5056368,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,dcubed,dcubed,2021-08-10 07:15,2021-09-08 22:56,2023-10-01 09:57,2021-09-04 04:06,18,,,,,,,18,client-libs,,0,intermittent,sn_100,sn_101,sn_99,tier4,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

javax/swing/JTable/4275046/bug4275046.java

Here's a snippet from the log file:

#section:main
----------messages:(5/186)----------
command: main bug4275046
reason: User specified action: run main bug4275046 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 2.88
----------configuration:(3/43)----------
Boot Layer
  add modules: java.desktop

----------System.out:(2/46)----------
The edited value is = redEDITED
Test failed
----------System.err:(15/1026)----------
java.lang.RuntimeException: Expected value in the cell: 'rededited' but found 'redEDITED'.
	at bug4275046.checkResult(bug4275046.java:188)
	at bug4275046.test(bug4275046.java:105)
	at bug4275046.main(bug4275046.java:67)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected value in the cell: 'rededited' but found 'redEDITED'.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Expected value in the cell: 'rededited' but found 'redEDITED'.
----------rerun:(47/4693)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,"0|i2tzjn:",9223372036854775807,b14,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-09-04 04:06;roboduke;Changeset: cec6c068
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-09-04 11:04:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cec6c068b03d890312e50b448fbc26102c635249
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BasicSplitPaneDivider:oneTouchExpandableChanged() returns leftButton and rightButton as null with GTKLookAndFeel,JDK-8272229,5056365,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pbansal,amadgundi,amadgundi,2021-08-10 06:33,2021-10-13 17:39,2023-10-01 09:57,2021-10-08 20:54,18,,,,,,,18,client-libs,,0,conformance,gtk,sn_100,sn_101,sn_102,sn_103,,,,,,,,,,,,"There is unspecified behavior of BasicSplitPaneDivider:oneTouchExpandableChanged() spec when run with -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel.

Spec says
https://download.java.net/java/early_access/jdk17/docs/api/java.desktop/javax/swing/plaf/basic/BasicSplitPaneDivider.html#oneTouchExpandableChanged()
""it will create the leftButton and rightButton if they are null.""
 
Generally, by calling oneTouchExpandableChanged(), leftButton and rightButton should be created if they are null. 
But with GTKLookAndFeel,oneTouchExpandableChanged() does not initialize leftButton and rightButton. They remain null.

If the behavior of the BasicSplitPaneDivider::oneTouchExpandableChanged() varies based on Look and feel then this should be stated explicitly in spec.

Code snippet:
class BasicImpl extends BasicSplitPaneDivider {
    public JButton leftB;
    public JButton rightB;
    public BasicImpl(BasicSplitPaneUI ui) {
        super(ui);
    }
    @Override
    protected void oneTouchExpandableChanged() {
        super.oneTouchExpandableChanged();
        this.leftB = super.leftButton;
        this.rightB = super.rightButton;
    }
}

public class SplitTests {
    public static void main(String[] args) {
        new SplitTests().test();
    }
    public void test(){
        BasicSplitPaneUI splitPaneUIS = new BasicSplitPaneUI(){};
        JSplitPane splitPane = new JSplitPane();
        splitPane.setOneTouchExpandable(true);
        splitPane.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
        splitPaneUIS.installUI(splitPane);
        BasicImpl basic= new BasicImpl(splitPaneUIS);
        basic.oneTouchExpandableChanged();
        if(basic.leftB != null && basic.rightB != null)
            System.out.println(""Expected : left and right Button created."");
        else
            System.out.println(""Unexpected : buttons are null. "" +basic.rightB+ "" ""+basic.leftB);
    }
}

Obeservation:
=====
/scratch/jdk-cache/17/34/jdk-17/bin/java -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel SplitTests
Unexpected : buttons are null. null null

/scratch/jdk-cache/17/34/jdk-17/bin/java SplitTests
Expected : left and right Button created.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7316623,JCK-7316622,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tziz:",9223372036854775807,b19,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-08-19 02:54;pbansal;The function is clearly specifying that if the L&F does not support the touch buttons, this will just return. The function API is applicable to Basic L&F and may not be true for other L&Fs.  I will specify this in the function specification.;;;","2021-08-26 23:37;pbansal;As mentioned in the review, the current test case is wrong, the oneTouchExpandableChanged() should not be called directly, only when the ""oneTouchExpandable"" property is changed.
So to consider this as a bug the test should trigger the call to the oneTouchExpandableChanged() as a result of the "" oneTouchExpandable value change"" and then validate the state of the buttons.

I am closing this as ""not an issue"". Please try to reproduce the issue correctly, and if does reproduce, reopen the bug.;;;","2021-08-27 06:44;dbessono;This part of the spec is confusing: ""Messaged when the oneTouchExpandable value of the JSplitPane the receiver is contained in changes"" - is there a typo? General rewording might be also good to have.

In addition to that the spec doesn't tell that this method should not be called directly.

Reopening this ticket as a spec issue.
;;;","2021-08-27 07:20;pbansal;[~dbessono] 
<<This part of the spec is confusing: ""Messaged when the oneTouchExpandable value of the JSplitPane the receiver is contained in changes"" - is there a typo? General rewording might be also good to have.
<<In addition to that the spec doesn't tell that this method should not be called directly.

Ok, I will try to change the wording to make it clear that the function will be called when oneTouchExpandable property changes. The function name also suggests the same though.;;;","2021-08-27 09:20;serb;Looks like the ""Messaged when XXX"" is quite common spec description for the listeners in Swing.;;;","2021-08-30 00:27;pbansal;Also, the function name oneTouchExpandableChanged is also self-explanatory that this will be called when oneTouchExpandable property changes. I can make the changes in specification on when it will be called or not, but it looks a bit redundant as it is already doing it. ;;;","2021-09-01 13:02;serb;My point is that calling this method directly is not correct, the test expects that some work will be done by a method which should not be called at all.

Just take a look to the code example:
 * It uses its own BasicImpl of the BasicSplitPaneDivider not a GTK one
 * It sets its own dummy BasicSplitPaneUI not a GTK one
 * Its call the oneTouchExpandableChanged() method directly not a GTK L&F call it.

What steps above are related to the GTK L&F? Instead the test emulates the dummy BasicSplitPaneUI implementation which supports the ""oneTouchExpandable"" property, because it calls the ""oneTouchExpandableChanged"" method. It is responsibility of the testcase to implement that method correctly and create the buttons.

It could be the problem of the GTK L&F or any other L&F(including Basic). If the ""oneTouchExpandable"" property will be changed and then the ""oneTouchExpandableChanged"" will be called. If after that the buttons will be null the bug is reproduced.;;;","2021-09-06 22:40;pbansal;I am closing this as ""not an issue"". If the issue is reproducible using the correct steps mentioned in the comments, please reopen the issue.;;;","2021-09-07 02:36;dbessono;This part of the spec is confusing: ""Messaged when the oneTouchExpandable value of the JSplitPane the receiver is contained in changes"" - is there a typo? General rewording might be also good to have.

In addition to that the spec doesn't tell that this method should not be called directly.

Reopening this ticket as a spec issue. ;;;","2021-09-11 19:05;serb;What the ""typo"" do you mean?

""Messaged when the oneTouchExpandable value of the JSplitPane the receiver is contained in changes""
Will it solve the problem if the ""Messaged when"" be changed to the ""Called when"" / ""Notified when""?;;;","2021-09-12 04:53;pbansal;I think something like should be ok

    /**
     * This function is called when the oneTouchExpandable value of the 
     * JSplitPane in which the receiver is contained in changes. The
     * function will create the <code>leftButton</code> and 
     * <code>rightButton</code> if they are null. It invalidates
     * the receiver as well.
     */;;;","2021-09-13 06:07;dbessono;OK, a simplification to the confusing ""Messaged when the oneTouchExpandable value of the JSplitPane the receiver is contained in changes"" would be good to have.
And an addition stating how this method should and/or should not be used has also been requested - for example a statement saying that the user should not call the method directly seem critical.;;;","2021-09-16 03:19;serb;The app/l&f/user can call it, if it implement the chain of methods properly, started from JSplitPane -> change the ""oneTouchExpandable"" property -> call this listener. A spec for the ""oneTouchExpandable"" state, this property may not be supported by L&F. 

So when in the testcase above the ""splitPane.setOneTouchExpandable(true)"" method is called  and the listener is not notified means that the property is not supported;  So when the code call this method and expects something it contradicts to the existing specification.

BTW I do not see a problem in the current spec, the text ""Messaged when XXX happen"" is used in Swing 22 times. So if we have the questions to this one, then others probably should be updated as well.;;;","2021-09-19 22:22;pbansal;I also see that this format is used in Swing a lot. So either a new bug will be created to handle all these instances together or this is not really an issue as I mentioned earlier. 

About the current bug, I think the word ""receiver"" is not very clear. I think we can change this word to divider or <code>BasicSplitPaneDivider</code>. This should fix the ""typo""/confusion being discussed in above comment.
About the statement saying  this method should not be called directly should not be included. As this method is called via a listener on a property change event, it will not be called directly. Or it should be discussed/included in all the instances where the format ""Messaged when XXX"" is used under a new bug.
 
    /**
     * Messaged when the oneTouchExpandable value of the JSplitPane the
     * current divider is contained in changes. Will create the
     * <code>leftButton</code> and <code>rightButton</code> if they
     * are null. invalidates the receiver as well.
     */;;;","2021-09-26 13:49;pbansal;[~dbessono] Any comments in the above discussion/comments? I need to make some progress in this issue, so could you please have a look at this and let me know.;;;","2021-09-27 04:33;dbessono;[~pbansal] the proposed rewording seems OK. ;;;","2021-10-08 20:54;roboduke;Changeset: aac6c4ea
Author:    Pankaj Bansal <pbansal@openjdk.org>
Date:      2021-10-09 03:52:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/aac6c4ea707fa592b2bcd7586c1fe61a19e3725e
;;;",,,,,,,,,,,,,,,,,,,,,
[8u] Build failure after backport of JDK-8248901,JDK-8272214,5056351,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,andrew,sgehwolf,sgehwolf,2021-08-10 02:50,2021-08-19 03:34,2023-10-01 09:57,2021-08-15 22:12,openjdk8u312,,,,,,,openjdk8u312,hotspot,,0,11-na,16-na,17-na,18-na,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,"After inclusion of JDK-8248901 into OpenJDK 8u (8u312-b01), the tree fails to build on RHEL 6 and Windows. This is an 8u-specific bug. Failures look like:

/usr/bin/g++ -DLINUX -D_GNU_SOURCE -DAMD64 -DPRODUCT -I. -I/home/openjdk/jdk8u/hotspot/src/share/vm/prims -I/home/openjdk/jdk8u/hotspot/src/share/vm -I/home/openjdk/jdk8u/hotspot/src/share/vm/precompiled -I/home/openjdk/jdk8u/hotspot/src/cpu/x86/vm -I/home/openjdk/jdk8u/hotspot/src/os_cpu/linux_x86/vm -I/home/openjdk/jdk8u/hotspot/src/os/linux/vm -I/home/openjdk/jdk8u/hotspot/src/os/posix/vm -I../generated -DHOTSPOT_RELEASE_VERSION=""\""25.312-b01\"""" -DHOTSPOT_BUILD_TARGET=""\""product\"""" -DHOTSPOT_BUILD_USER=""\""openjdk\"""" -DHOTSPOT_LIB_ARCH=\""amd64\"" -DHOTSPOT_VM_DISTRO=""\""OpenJDK\"""" -DTARGET_OS_FAMILY_linux -DTARGET_ARCH_x86 -DTARGET_ARCH_MODEL_x86_64 -DTARGET_OS_ARCH_linux_x86 -DTARGET_OS_ARCH_MODEL_linux_x86_64 -DTARGET_COMPILER_gcc -DINCLUDE_JFR=1 -DCOMPILER2 -DCOMPILER1 -fPIC -fno-rtti -fno-exceptions -D_REENTRANT -fcheck-new -fvisibility=hidden -m64 -pipe -fno-strict-aliasing -fno-omit-frame-pointer -O3 -g -DVM_LITTLE_ENDIAN -D_LP64=1 -Werror -Wpointer-arith -Wsign-compare -Wundef -Wunused-function -Wunused-value -Wformat=2 -Wreturn-type -fstack-protector -std=gnu++98 -DDTRACE_ENABLED -c -MMD -MP -MF ../generated/dependencies/precompiled.hpp.gch.d -fpch-deps -x c++-header /home/openjdk/jdk8u/hotspot/src/share/vm/precompiled/precompiled.hpp -o precompiled.hpp.gch
In file included from /home/openjdk/jdk8u/hotspot/src/share/vm/precompiled/precompiled.hpp:29:
/home/openjdk/jdk8u/hotspot/src/share/vm/asm/assembler.hpp: In static member function ‘static bool AbstractAssembler::is_simm(int64_t, uint)’:
/home/openjdk/jdk8u/hotspot/src/share/vm/asm/assembler.hpp:302: error: ‘INT64_C’ was not declared in this scope
/home/openjdk/jdk8u/hotspot/src/share/vm/asm/assembler.hpp: In static member function ‘static bool AbstractAssembler::is_uimm(uint64_t, uint)’:
/home/openjdk/jdk8u/hotspot/src/share/vm/asm/assembler.hpp:315: error: ‘UINT64_C’ was not declared in this scope
gmake[6]: *** [precompiled.hpp.gch] Error 1
gmake[6]: Leaving directory `/home/openjdk/jdk8u/build/release/hotspot/linux_amd64_compiler2/product'
gmake[5]: *** [the_vm] Error 2
gmake[5]: Leaving directory `/home/openjdk/jdk8u/build/release/hotspot/linux_amd64_compiler2/product'
gmake[4]: *** [product] Error 2
gmake[4]: Leaving directory `/home/openjdk/jdk8u/build/release/hotspot'
gmake[3]: *** [generic_build2] Error 2
gmake[3]: Leaving directory `/home/openjdk/jdk8u/hotspot/make'
gmake[2]: *** [product] Error 2
gmake[2]: Leaving directory `/home/openjdk/jdk8u/hotspot/make'
gmake[1]: *** [/home/openjdk/jdk8u/build/release/hotspot/_hotspot.timestamp] Error 2
gmake[1]: Leaving directory `/home/openjdk/jdk8u/make'
make: *** [hotspot-only] Error 2 

And on Windows:

C:\tmp\build-8\OJDKBU~1\tools\TOOLCH~1\vs2010e\VC\Bin\X86_AM~1\cl.exe /nologo /W3 /WX /Zi /D ""_LP64"" /D ""AMD64"" /D ""WIN32"" /D ""_WINDOWS"" /D ""VM_LITTLE_ENDIAN"" /D TARGET_OS_FAMILY_windows /D TARGET_ARCH_x86 /D TARGET_ARCH_MODEL_x86_64 /D TARGET_OS_ARCH_windows_x86 /D TARGET_OS_ARCH_MODEL_windows_x86_64 /D TARGET_COMPILER_visCPP /MD /D _STATIC_CPPLIB /D _DISABLE_DEPRECATE_STATIC_CPPLIB /MP /D INCLUDE_JFR=1 /O2 /Oy- /D ""PRODUCT"" /D ""COMPILER1"" /D ""COMPILER2"" /D ""HOTSPOT_RELEASE_VERSION=\""25.312-b01\"""" /D ""JRE_RELEASE_VERSION=\""1.8.0_312-ea-b01\"""" /D ""HOTSPOT_LIB_ARCH=\""amd64\"""" /D ""HOTSPOT_BUILD_TARGET=\""product\"""" /D ""HOTSPOT_BUILD_USER=\""tester\"""" /D ""HOTSPOT_VM_DISTRO=\""OpenJDK\"""" /I ""..\generated"" /I ""C:\tmp\build-8\jdk8u\hotspot\src\share\vm"" /I ""C:\tmp\build-8\jdk8u\hotspot\src\share\vm\precompiled"" /I ""C:\tmp\build-8\jdk8u\hotspot\src\share\vm\prims"" /I ""C:\tmp\build-8\jdk8u\hotspot\src\os\windows\vm"" /I ""C:\tmp\build-8\jdk8u\hotspot\src\os_cpu\windows_x86\vm"" /I ""C:\tmp\build-8\jdk8u\hotspot\src\cpu\x86\vm"" /D ""_JNI_IMPLEMENTATION_"" /Fp""vm.pch"" /Yc""precompiled.hpp"" /c ../generated/_build_pch_file.cpp
_build_pch_file.cpp
C:\tmp\build-8\jdk8u\hotspot\src\share\vm\asm/assembler.hpp(302) : error C3861: 'INT64_C': identifier not found
C:\tmp\build-8\jdk8u\hotspot\src\share\vm\asm/assembler.hpp(315) : error C3861: 'UINT64_C': identifier not found
NMAKE : fatal error U1077: 'C:\tmp\build-8\OJDKBU~1\tools\TOOLCH~1\vs2010e\VC\Bin\X86_AM~1\cl.exe' : return code '0x2'
Stop.
NMAKE : fatal error U1077: 'cd' : return code '0x2'
Stop.
NMAKE : fatal error U1077: 'C:\tmp\build-8\ojdkbuild\tools\toolchain\vs2010e\VC\Bin\nmake.EXE' : return code '0x2'
Stop.
make[3]: *** [Makefile:231: generic_build2] Error 2
make[3]: Leaving directory '/cygdrive/c/tmp/build-8/jdk8u/hotspot/make'
make[2]: Leaving directory '/cygdrive/c/tmp/build-8/jdk8u/hotspot/make'
make[1]: Leaving directory '/cygdrive/c/tmp/build-8/jdk8u/make'
make[2]: *** [Makefile:177: product] Error 2
make[1]: *** [HotspotWrapper.gmk:45: /cygdrive/c/tmp/build-8/jdk8u/build/windows-x86_64-server-release/hotspot/_hotspot.timestamp] Error 2
make: *** [/cygdrive/c/tmp/build-8/jdk8u//make/Main.gmk:110: hotspot-only] Error 2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248901,,,,,JDK-8272714,,,,,,,,,,,,x86,,,,,,,,,,linux_redhat_6.1,,,,"0|i2tzfv:",9223372036854775807,b03,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-10 02:51;sgehwolf;See https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-August/014171.html;;;","2021-08-15 22:12;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/a6da205dfd9f
User:  andrew
Date:  2021-08-16 05:12:19 +0000
;;;","2021-08-17 21:43;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/a6da205dfd9f
User:  andrew
Date:  2021-08-18 04:37:49 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Delete directory technotes\guides\logging\.xvpics from JDK 8 documentation,JDK-8272182,5056312,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgallard,rgallard,rgallard,2021-08-09 20:27,2021-09-10 03:48,2023-10-01 09:57,2021-08-10 10:47,8u311,,,,,,,8u311,docs,,0,CPU21_10-critical-approved,openjdk-na,,,,,,,,,,,,,,,,Delete directory technotes\guides\logging\.xvpics from the JDK 8 documentation. The contents of this directory aren't used elsewhere.,,,,,,,,,,,JDK-8272183,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tz77:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Windows-AArch64:Backport fix of `Backtracing broken on PAC enabled systems`,JDK-8272181,5056309,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkovacs,mbeckwit,mbeckwit,2021-08-09 20:10,2021-11-30 09:27,2023-10-01 09:57,2021-11-26 13:50,11,,,,,,,11.0.14,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,oraclejdk-na,,,,,,,,,,,,,,,"JDK-8266749 contained a Windows/AArch64 specific include file that was skipped when the patch was backported to JDK 11u (https://bugs.openjdk.java.net/browse/JDK-8271571) However, the missing file is necessary to build JDK 11u for this new platform. This patch will be a part of the Windows/AArch64 port PR.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,,,,,other,,,,"0|i2tz6j:",9223372036854775807,b05,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-11-26 13:50;roboduke;Changeset: 7bdb8ac7
Author:    Reka Kovacs <rkovacs@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2021-11-26 21:49:08 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/7bdb8ac7f9f9a83779427da7a6d7f5e9ae548db7
;;;","2021-11-30 09:24;roboduke;Changeset: 7bdb8ac7
Author:    Reka Kovacs <rkovacs@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2021-11-26 21:49:08 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/7bdb8ac7f9f9a83779427da7a6d7f5e9ae548db7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing memory barrier when checking active state for regions ,JDK-8272170,5056292,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,dcubed,dcubed,2021-08-09 16:12,2022-02-10 14:26,2023-10-01 09:57,2021-11-15 06:36,18,,,,,,,18,hotspot,,0,gc-g1,gc-pending-review,intermittent,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,tier2,,,,,,,,,,,"The following test failed in the JDK18 CI:

java/io/DataOutputStream/WriteUTF.java

Here's a snippet from the log file:

#section:testng
----------messages:(4/165)----------
command: testng -Xmx4g WriteUTF
reason: User specified action: run testng/othervm -Xmx4g WriteUTF 
Mode: othervm [/othervm specified]
elapsed time (seconds): 15.726
----------configuration:(0/0)----------
----------System.out:(18/1386)----------
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000fffc0159bcec, pid=633584, tid=633590
#
# JRE version: Java(TM) SE Runtime Environment (18.0+10) (build 18-ea+10-457)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (18-ea+10-457, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x63bcec]  G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)+0x1c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13270/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1e95697c-7e22-4bf5-bb85-b68dc28dac24/runs/aee4562b-7720-41c1-8410-93c8962614e0/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/1/core.633584)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13270/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1e95697c-7e22-4bf5-bb85-b68dc28dac24/runs/aee4562b-7720-41c1-8410-93c8962614e0/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/1/hs_err_pid633584.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(36/5834)*----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000fffbfc06a0d0):  GCTaskThread ""G1 Conc#0"" [stack: 0x0000fffbdb080000,0x0000fffbdb280000] [id=633590]

Stack: [0x0000fffbdb080000,0x0000fffbdb280000],  sp=0x0000fffbdb27e800,  free space=2042k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x63bcec]  G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)+0x1c
V  [libjvm.so+0x70e2e0]  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const+0xb0
V  [libjvm.so+0x63bc6c]  G1ClearBitMapTask::work(unsigned int)+0x6c
V  [libjvm.so+0xcb8224]  GangWorker::loop()+0x70
V  [libjvm.so+0xcb8280]  WorkGangBarrierSync::WorkGangBarrierSync()+0x0
V  [libjvm.so+0xc28dac]  Thread::call_run()+0x8c
V  [libjvm.so+0xabab8c]  thread_native_entry(Thread*)+0xdc
C  [libpthread.so.0+0x7738]  start_thread+0x198


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000000",,,,,,,,,,,JDK-8277699,JDK-8277487,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,"0|i2tz2r:",9223372036854775807,b24,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-11-09 02:07;tschatzl;Can be reproduced around around 1/500 runs with that build on linux/aarch64 release (only so far).

Random notes
  - Since si_addr is NULL, this seems to be some uninitialized pointer
  - there is only one gc, a concurrent mark start gc in the log
  - the clear bitmap task is because of an undo-mark concurrent operation

#3  0x0000ffff73a58c78 in WorkGang::run_task(AbstractGangTask*, unsigned int, bool) ()
#4  0x0000ffff733d8820 in G1ConcurrentMark::clear_bitmap(G1CMBitMap*, WorkGang*, bool) ()
#5  0x0000ffff733d893c in G1ConcurrentMark::cleanup_for_next_mark()
#6  0x0000ffff733e1c88 in G1ConcurrentMarkThread::phase_clear_bitmap_for_next_mark() 
#7  0x0000ffff733e1d9c in G1ConcurrentMarkThread::concurrent_undo_cycle_do()              // <----
#8  0x0000ffff733e2234 in G1ConcurrentMarkThread::run_service() 
#9  0x0000ffff732e7378 in ConcurrentGCThread::run()
;;;","2021-11-09 02:34;tschatzl;The failing code has changed quite a bit with JDK-8242847.;;;","2021-11-09 04:11;tschatzl;Looking at a core file, the passed HeapRegion is NULL which should not happen:

(gdb) frame 9
#9  G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region (this=0xfffc7851e6e8, r=0x0)

It should have been skipped by this check in HeapRegionManager::par_iterate

    if (!is_available(index)) {
      continue;
    }

My current suspicion is some memory ordering issue: reading of is_available()/G1CommittedRegionMap::active() needs to have a barrier to that the store to other bitmaps/arrays (notably the _regions array) must be visible before the load in the _active bitmap:

inline bool G1CommittedRegionMap::active(uint index) const {
  return _active.at(index);
}

Seems a bit too easy....;;;","2021-11-10 00:07;tschatzl;Testing showed that this is/has indeed been the problem - no test failures with the patch applied after 5k iterations.;;;","2021-11-15 06:36;roboduke;Changeset: 35a831d5
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-11-15 14:34:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/35a831d5a755de8f3c71653bd0a37190adddb8ae
;;;","2021-11-17 04:48;tschatzl;Fix request (17u)

This bug causes crashes on aarch64 (or weaker than x86-ordered cpus, although I think it is even possible there) because of a missing memory barrier.

Risk: There should be virtually no risk for this as the worst thing that can happen that an unnecessary memory barrier is issued before doing the operation that missed that memory barrier.

Test coverage: running for a week in internal CI in jdk/jdk now. Reproducable crashes do not occur any more.

Applies cleanly;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/logging/LoaderConstraintsTest.java doesn't build test.Empty,JDK-8272169,5056286,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-08-09 14:11,2022-03-10 05:54,2023-10-01 09:57,2021-08-09 19:27,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,runtime/logging/LoaderConstraintsTest.java test doesn't build test.Empty and hence its child JVM fails w/ CNFE.,,,,,,,,,,,JDK-8282969,JDK-8280808,,,,,,,,,,,,,,,,,,,,JDK-8272168,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tz1f:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-09 19:27;roboduke;Changeset: eb6f3fe5
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-08-10 02:26:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eb6f3fe59d469a369383a750d319318909cf8613
;;;","2022-03-09 07:19;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-03-09 07:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/221
Date: 2022-03-09 15:21:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
some hotspot runtime/logging tests don't check exit code,JDK-8272168,5056285,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-08-09 13:39,2022-03-15 02:16,2023-10-01 09:57,2021-08-09 22:12,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,"runtime/logging/MonitorMismatchTest.java, ClassInitializationTest.java, ClassResolutionTest.java, LoaderConstraintsTest.java and CondyIndyTest.java tests spawn a new JVMs but don't check their exit code.",,,,,,,,,,,JDK-8283157,JDK-8283016,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272169,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tz17:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-09 22:12;roboduke;Changeset: 3b899ef7
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-08-10 05:11:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3b899ef7ffd87477ac1b10f4334b127597e9fe32
;;;","2022-03-14 04:56;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Tests pass.  SAP nightlies passed.;;;","2022-03-14 05:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/247
Date: 2022-03-14 12:22:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AbsPathsInImage.java should skip *.dSYM directories,JDK-8272167,5056284,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2021-08-09 13:22,2022-04-29 03:23,2023-10-01 09:57,2021-10-11 17:15,18,,,,,,,18,infrastructure,,0,build-infra,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,,,,,,,,,,"I have built the OpenJDK from https://github.com/openjdk/jdk and the AbsPathsInImage.java test is always fails on it.

Steps to reproduce:
git clone https://github.com/openjdk/jdk
cd jdk
bash configure --with-jtreg=...jtreg6
make images
make test TEST=""build/AbsPathsInImage.java""",,,,,,,,,,,JDK-8282137,JDK-8285010,JDK-8285909,JDK-8279335,,,,,,,,,,,,,,,,,,JDK-8284940,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,"0|i2tz0z:",9223372036854775807,b19,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-08-09 13:28;serb;Log example:

/Users/xxx/moe/openjdk/jdk/build/macosx-x86_64-server-release/images/jdk/bin/jfr.dSYM/Contents/Resources/DWARF/jfr:
/Users/xxx/moe/openjdk/jdk\u0000/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.3.sdk/usr/include/i386
/Users/xxx/moe/openjdk/jdk/src/java.base/share/native/launcher/main.c
/Users/xxx/moe/openjdk/jdk/make
;;;","2021-08-27 13:26;erikj;Looks like the test isn't skipping *.dSYM dirs, which it really should do as .debuginfo and .pdb files are skipped. It could be that you need to configure with --enable-reproducible-builds to make this test pass.;;;","2021-08-30 06:44;ihse;I think `--enable-reproducible-builds` should only be required on Windows. But I agree that we should skip .dSYMs.;;;","2021-09-07 10:48;serb;If everybody agree that these folders should be skipped I'll update the test.;;;","2021-10-11 17:15;roboduke;Changeset: dd93c6e2
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-10-12 00:14:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dd93c6e27b66acebb221583fd28d03c65bfc1f24
;;;","2021-12-04 14:40;serb;Fix request (17u)

This is request to backport the fix for the testbug. The patch applies cleanly.
PR: https://github.com/openjdk/jdk17u-dev/pull/37;;;","2021-12-27 14:03;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/37
Date: 2021-12-27 21:53:55 +0000
;;;","2022-02-12 22:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/175
Date: 2022-02-13 05:24:42 +0000;;;","2022-02-14 12:35;serb;Fix request (15u)

This is the request to backport the fix for the test bug.
PR: https://github.com/openjdk/jdk15u-dev/pull/175;;;","2022-04-28 06:48;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle from jdk15u.
No risk, only a test change.
Clean backport.
Test passes.
SAP nightly testing passed.;;;","2022-04-28 06:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1058
Date: 2022-04-28 13:47:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove java/awt/print/PrinterJob/InitToBlack.html ,JDK-8272166,5056283,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2021-08-09 13:08,2021-08-11 21:26,2023-10-01 09:57,2021-08-09 14:16,,,,,,,,18,client-libs,,0,,,,,,,,,,,,,,,,,,In openjdk we have the InitToBlack.java and InitToBlack.html is not longer needed as the testcase uses Frame ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270331,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tz0r:",9223372036854775807,b10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
S4U2Self ticket without forwardable flag,JDK-8272162,5056278,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,abakhtin,abakhtin,2021-08-09 09:34,2021-12-07 07:56,2023-10-01 09:57,2021-11-30 16:50,18,,,,,,,18,security-libs,,0,,,,,,,,,,,,,,,,,,"Current JGSS implementation does not allow to use of non-forwardable S4U2self tickets.
The application fails with an exception caused by 
KrbException: S4U2self ticket must be FORWARDABLE
        at sun.security.krb5.internal.CredentialsUtil.acquireS4U2selfCreds(CredentialsUtil.java:105)
        at sun.security.krb5.Credentials.acquireS4U2selfCreds(Credentials.java:495)
        at sun.security.jgss.krb5.Krb5InitCredential.impersonate(Krb5InitCredential.java:395)
This exception was added as part of JDK-8022582 [1] and exception is thrown for every non-forwardable S4U2self ticket

However, according to Microsoft spec [2] KDC marks S4U2Self ticket as non-forwardable in case of trustedToAuthForDelegation is false and msDs-AllowedToDelegateTo list is nonempty. 

In this case, SFU client should not fail but locate DS_BEHAVIOR_WIN2012 DC to send the request [3] 

[1] - http://hg.openjdk.java.net/jdk9/jdk9/jdk/rev/ae6449bc523f#l3.17
[2] - https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/ddb2cafd-1f01-4834-b52a-d4a5b34cd960
[3] - https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/ddb2cafd-1f01-4834-b52a-d4a5b34cd960",,,,,,,,,,,,,,,,,,,,,,,,JDK-8277308,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tyzn:",9223372036854775807,b26,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a7b7e03,,,,,,,,,"2021-08-09 11:01;weijun;Is this for interop with an old version of Windows Server that had not turned the flag on?

It's not trivial to find a DS_BEHAVIOR_WIN2012 DC. It's not trivial to maintain multiple DCs with different behaviors. However, one simple thing we can do is to add a property (system or security) named ""dc.is.always.win2012"" so that when this flag is set we know every DC configured (either from env var or krb5.conf or DNS) is always WIN2012 and then we can ignore this check.;;;","2021-08-09 11:35;abakhtin;Yes, this is for win server 2012.
Am I understand correctly, this solution will not work correctly in case of multiple DC with mixed configuration : some DC support  non-forwarfable S4U2SELF tickets and some of them not? ;;;","2021-08-09 12:08;weijun;You're right. My overly simple solution would not work if some are old and some are new. We need to get a list with behavior flags. Do you know if the info is available through DNS? (See sun.security.krb5.Config::getKDCFromDNS). If not, we do have a native file (NativeCreds.c) for Windows in the java.security.jgss module and we can do something there.

Once the DC list contains names and behavior flags, we can add an argument in the ticket retrieval method so that we can filter out which DC to use.;;;","2021-08-09 14:37;abakhtin;Hi Weijun,
Thank you for your quick and valuable responses. I can not find, How to get behaviour flags in Java, but according to Microsoft docs [1] this flag can be retrieved using DsrGetDcNameEx2 MS-NRPC method

[1] - https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrpc/fb8e1146-a045-4c31-98d1-c68507ad5620;;;","2021-08-16 09:27;weijun;Is MIT krb5 reading this flag? If we want to support this, we will need to write a JNI method to get it and store it with the KDC list.

How many KDC does your customer have? If not many, can we just retry with the next KDC until the request is accepted? We will need to modify KdcComm.java to make this error remediable.;;;","2021-09-06 02:06;abakhtin;Hi Weijun Wang,

Sorry for the delay. We have received a response from the customer:

>> Is MIT krb5 reading this flag? If we want to support this, we will need to write a JNI method to get it and store it with the KDC list.

MIT krb5 client does not check forwardable flag in S4U2Self ticket and always tries S4U2Proxy even if the flag is false.
https://www.mail-archive.com/kerberos@mit.edu/msg23234.html

It also assumes that all the KDCs support RBCD and does not search for KDC with DS_BEHAVIOR_WIN2012.
https://www.mail-archive.com/kerberos@mit.edu/msg23240.html

>> How many KDC does your customer have? If not many, can we just retry with the next KDC until the request is accepted? We will need to modify KdcComm.java to make this error remediable.

At least one customer has 50 KDC servers. Retrying with KDC servers will have a performance impact in my opinion.

In my opinion, we can keep the behavior the same as MIT Kerberos and java should not check for the forwardable flag in the S4U2Self ticket (It should be the responsibility of the KDC server).;;;","2021-10-18 07:10;weijun;I'm OK with ignoring the forwardable flag.

But then if the 1st KDC happens to reject it, then it needs to try with the next. That's why I asked how many KDCs there are.

BTW, is JDK-8274205 related to this? What kind of error do we see when a request is rejected? We need to take care of this error code as well.;;;","2021-10-21 08:11;abakhtin;Hi Weijun,

This issue is not related to JDK-8274205. KDC_ERR_SVC_UNAVAILABLE is related to ubnormal workflow when KDC services temporary unavailable.
This issue is related to normal behavior of resource based constrained delegation:  S4U2Proxy should work for the S4U2Self not forwardable ticket in the following configurations:
    - Patch for CVE-2020-16996 is not applied in KDC.
    - Patch for CVE-2020-16996 is applied in KDC and registry entry - HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Kdc\NonForwardableDelegation is set to 1. (DWORD type)

If S4U2Proxy with non-forwardable ticket is not supported, KDC rejects it with KDC_ERR_BADOPTION error code (13) and implementation throws exception:
KrbException: KDC cannot accommodate requested option (13)
        at sun.security.krb5.KrbTgsRep.<init>(KrbTgsRep.java:70)
        at sun.security.krb5.KrbTgsReq.getReply(KrbTgsReq.java:226)
        at sun.security.krb5.KrbTgsReq.sendAndGetCreds(KrbTgsReq.java:237)
        at sun.security.krb5.internal.CredentialsUtil.serviceCredsSingle(CredentialsUtil.java:482)
        at sun.security.krb5.internal.CredentialsUtil.serviceCreds(CredentialsUtil.java:340)
        at sun.security.krb5.internal.CredentialsUtil.acquireS4U2proxyCreds(CredentialsUtil.java:137)
        at sun.security.krb5.Credentials.acquireS4U2proxyCreds(Credentials.java:501)
;;;","2021-11-30 16:50;roboduke;Changeset: ab867f6c
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-12-01 00:48:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ab867f6c7c578ae7e65af2989b6836d523a41c5a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SoftReference related bugs under memory pressure,JDK-8272158,5056273,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2021-08-09 08:42,2021-08-18 17:42,2023-10-01 09:57,2021-08-16 00:46,17,18,,,,,,18,tools,,0,noreg-hard,,,,,,,,,,,,,,,,,"Javadoc uses the SoftReference class in various places to cache per-element computed objects. Running javadoc under memory pressure reveals some problems with these caches.

 - in class VisibleMemberTable there is a bug in how SoftReferences are used to cache ImplementedMethod instances: The SoftReference.get() method is invoked two times, once to check whether the referenced value is null, and the second time to return the value. If the object is garbage-collected between the calls, null is returned.

 - Soft references are used to cache CommentHelper instances. However, there is one instance where special information is stored in a CommentHelper instance that cannot be restored if the instance is garbage collected and recreated later. This happens in MemberSummaryBuilder.buildSummary method when the CommentHelper.setOverrideElement method is invoked. 

While the first problem is easy to fix, the second one is a bit harder. Two solutions would be to either use hard references to store the CommentHelper instances, or create a way to restore the information in case the object has to be recreated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tyyj:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-08-16 00:46;roboduke;Changeset: 5db36ced
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-08-16 07:46:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5db36cedc91d0954ececd309a5f8f59ea828f6c1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDesktopPane:getComponentCount() returns one extra than expected with GTKLookAndFeel,JDK-8272148,5056256,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pbansal,kganapureddy,kganapureddy,2021-08-09 05:47,2021-09-15 20:05,2023-10-01 09:57,2021-09-09 23:14,18,,,,,,,18,client-libs,,0,conformance,sn_100,sn_101,sn_99,,,,,,,,,,,,,,"It’s observed that, getting the component count of the JDesktopPane returns one extra component than expected, when run with -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel.

The spec of - https://download.java.net/java/early_access/jdk18/docs/api/java.desktop/java/awt/Container.html#getComponentCount()
""Gets the number of components in this panel.""

Generally the Container(JDesktopPane) created fresh one does not expect any components by default.
If the behavior of the JDesktopPane:getComponentCount() varies based on Look and feel then this should be stated explicitly in spec.

Please find the code snipped to demonstrate the problem

JDesktopPane jDesktopPane = new JDesktopPane();
if (jDesktopPane.getComponentCount() == 0) {
    System.out.println(""Expected : no child components present"");
} else {
    System.out.println(""Unexpected : by default the jDesktopPane has components size "" + jDesktopPane.getComponentCount() + ""  And the child component is "" + jDesktopPane.getComponent(0));
}


Observation:
=====

/scratch/jdk-cache/17/34/jdk-17/bin/java -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel JDesktopPaneCompTests
Unexpected : by default the jDesktopPane has components size 1  And the child component is javax.swing.plaf.synth.SynthDesktopPaneUI$TaskBar

/scratch/jdk-cache/17/34/jdk-17/bin/java JDesktopPaneCompTests
Expected : no child components present

",,,,,,,,,,,,,,,,,,,,,,,,JDK-8273356,,,,,,,,,,,,,JCK-7316625,JCK-7316634,JCK-7316624,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tyur:",9223372036854775807,b15,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-08-09 12:07;pbansal;I am able to see the problem mentioned in the description with latest jdk18. I am not sure if this is actually a bug or not. I will come back to this after discussion with team.;;;","2021-08-15 23:47;pbansal;As discussed in the meeting with team, it has been decided that this is not really an issue. It is not mentioned anywhere that a container can not contain few components as default components when created. A user can even create a custom container component, which may include any number of default components.

To make it clear, this information will be added to spec of JComponent.;;;","2021-08-19 22:28;pbansal;Is this test ran for all components for all L&Fs? I just ran this test for JCombobox for all L&Fs on Mac, it fails for all L&F.

**************
Current Look and Feel is Metal
Unexpected : by default the Container has components size 2
Following are the components present
com.apple.laf.AquaComboBoxButton[,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.5,border=com.apple.laf.AquaButtonBorder$Named@42d80b78,flags=12583200,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=javax.swing.plaf.InsetsUIResource[top=0,left=2,bottom=0,right=2],paintBorder=true,paintFocus=true,pressedIcon=,rolloverEnabled=false,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=,defaultCapable=true]
javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]
**************
**************
Current Look and Feel is Nimbus
Unexpected : by default the Container has components size 2
Following are the components present
javax.swing.plaf.metal.MetalComboBoxButton[,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.5,border=javax.swing.plaf.BorderUIResource$CompoundBorderUIResource@6b57696f,flags=12583208,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=java.awt.Insets[top=0,left=1,bottom=1,right=3],paintBorder=true,paintFocus=false,pressedIcon=,rolloverEnabled=true,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=,defaultCapable=true]
javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]
**************
**************
Current Look and Feel is CDE/Motif
Unexpected : by default the Container has components size 2
Following are the components present
javax.swing.plaf.synth.SynthArrowButton[ComboBox.arrowButton,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.5,border=javax.swing.plaf.synth.SynthBorder@363ee3a2,flags=12583200,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=javax.swing.plaf.InsetsUIResource[top=0,left=0,bottom=0,right=0],paintBorder=true,paintFocus=true,pressedIcon=,rolloverEnabled=true,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=,defaultCapable=false]
javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]
**************
**************
Current Look and Feel is Mac OS X
Unexpected : by default the Container has components size 1
Following are the components present
javax.swing.CellRendererPane[,0,0,0x0,invalid,hidden]
**************
;;;","2021-09-09 23:14;roboduke;Changeset: 70c9e026
Author:    Pankaj Bansal <pbansal@openjdk.org>
Date:      2021-09-10 06:13:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/70c9e026b63aadf9a2bfcbda45c2b9ea866afafa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Disable Fibonacci test on memory constrained systems,JDK-8272146,5056253,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-08-09 05:19,2022-03-10 05:56,2023-10-01 09:57,2021-08-11 01:49,18,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,"Since the test case test/hotspot/jtreg/runtime/Thread/Fibonacci.java creates a huge number of threads, systems with not enough memory won't be able to execute the test case and might become unstable because of this test. The test is already disable for 32-bit windows because it can not handle the amount of threads. The test case should also be disabled for linux, if not enough memory is available.

$ uname -srvmpio
Linux 5.10.34-yocto-standard #1 PREEMPT Mon May 3 02:17:32 UTC 2021 armv5tejl armv5tejl armv5tejl GNU/Linux
$ free -h
               total        used        free      shared  buff/cache   available
Mem:           237Mi        23Mi        85Mi       3.0Mi       127Mi       202Mi
Swap:          1.0Gi       7.0Mi       1.0Gi
",,,,,,,,,,,JDK-8281448,JDK-8282972,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-08-09 05:18;cgo;Fibonacci.jtr;https://bugs.openjdk.org/secure/attachment/95955/Fibonacci.jtr",,,,,,,,,,,,,,,,linux,,,,"0|i2tyu3:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-11 01:49;roboduke;Changeset: adba09b9
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2021-08-11 08:48:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/adba09b91de2e86fe4eb844c9066a23b176176bd
;;;","2022-03-09 07:25;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-03-09 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/222
Date: 2022-03-09 15:26:04 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jshell: Method cannot use its overloaded version,JDK-8272135,5055959,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,webbuggrp,webbuggrp,2021-08-05 04:03,2021-09-13 14:24,2023-10-01 09:57,2021-09-07 03:30,11,15,17,18,,,,18,tools,,0,17ea,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Definition of overloaded methods is possible until the method call its overloaded version.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
jshell> void pr(int i, String s) {
   ...>         System.out.println(s + i);
   ...> }
|  created method pr(int,String)

jshell> void pr(String s, int i) {
   ...>         System.out.println(s + i);
   ...> }
|  created method pr(String,int)

jshell> void pr(String s, int i) {
   ...>         pr(i, s);
   ...> }
|  Error:
|  incompatible types: int cannot be converted to java.lang.String
|          pr(i, s);
|             ^
|    update overwrote method pr(String,int)

jshell>


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Interpret discovers that I call the yet defined version.
ACTUAL -
Interpret is not able to call the existing version.

---------- BEGIN SOURCE ----------
jshell> void pr(int i, String s) {
   ...>         System.out.println(s + i);
   ...> }
|  created method pr(int,String)

jshell> void pr(String s, int i) {
   ...>         System.out.println(s + i);
   ...> }
|  created method pr(String,int)

jshell> void pr(String s, int i) {
   ...>         pr(i, s);
   ...> }
|  Error:
|  incompatible types: int cannot be converted to java.lang.String
|          pr(i, s);
|             ^
|    update overwrote method pr(String,int)

jshell>

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-08-09 00:45;adev;jshell_cmds.txt;https://bugs.openjdk.org/secure/attachment/95953/jshell_cmds.txt",,,,,,generic,,,,,,,,,,generic,,,,"0|i2tx0r:",9223372036854775807,b14,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-08-09 00:44;adev;The issue is reproducible. The call  pr(i, s); is not able to call the overloaded method void pr(String s, int i); Rather it is calling the first declared method: void pr(int i, String s) and thus throwing the error :  | incompatible types: int cannot be converted to java.lang.String ;;;","2021-09-07 03:30;roboduke;Changeset: 70157c78
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-09-07 09:50:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/70157c78a838126bb29c91a410d9158763bfa2ad
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PhaseMacroExpand::generate_slow_arraycopy crash when clone null CallProjections.fallthrough_ioproj,JDK-8272131,5056237,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,hshi,hshi,hshi,2021-08-08 23:09,2022-12-06 23:29,2023-10-01 09:57,2021-08-10 19:01,11,17,18,,,,,18,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,oracle-triage-18,redhat-interest,tencent-interest,,,,,,,,"C2 crash when compile IllegalArrayCopy with negative index before an infinite loop.

    static void foo() {
        try {
            Arrays.copyOfRange(src, -1, 128);
            do {
            } while (true);
        } catch (ArrayIndexOutOfBoundsException ex) {
            count++;
        }
    }

#  SIGSEGV (0xb) at pc=0x00007f95e714f258, pid=14408, tid=14420
#
# JRE version: OpenJDK Runtime Environment (11.0.13) (build 11.0.13-internal+0-adhoc.shihui.jdk11u-dev)
# Java VM: OpenJDK 64-Bit Server VM (11.0.13-internal+0-adhoc.shihui.jdk11u-dev, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xc16258]  Node::clone() const+0x38

Stack: [0x00007f95b875c000,0x00007f95b885d000],  sp=0x00007f95b88587a0,  free space=1009k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc16258]  Node::clone() const+0x38
V  [libjvm.so+0xb0397b]  PhaseMacroExpand::generate_slow_arraycopy(ArrayCopyNode*, Node**, Node*, Node**, TypePtr const*, Node*, Node*, Node*, Node*, Node*, bool)+0x47b
V  [libjvm.so+0xb0646a]  PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*)+0xf5a
V  [libjvm.so+0xb08f0f]  PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*)+0x62f
V  [libjvm.so+0xb00028]  PhaseMacroExpand::expand_macro_nodes()+0x748
V  [libjvm.so+0x64a1fc]  Compile::Optimize()+0x6ec
V  [libjvm.so+0x64b695]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0xcb5
V  [libjvm.so+0x565074]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0xd4
V  [libjvm.so+0x655b84]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x474
V  [libjvm.so+0x657488]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0xe09141]  JavaThread::thread_main_inner()+0x1e1
V  [libjvm.so+0xe05ddf]  Thread::call_run()+0x14f
V  [libjvm.so+0xc5186e]  thread_native_entry(Thread*)+0xee

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000000


8u doesn't have this issue as second compilation is skipt due to inifinite loop.

jdk8u-dev/build/linux-x86_64-normal-server-release/images/j2sdk-image/bin/java -Xbatch -XX:-TieredCompilation -XX:-UseOnStackReplacement -XX:CompileCommand=compileonly,""IllegalArrayCopyBeforeInfiniteLoop::foo"" -XX:+PrintCompilation  IllegalArrayCopyBeforeInfiniteLoop
CompilerOracle: compileonly IllegalArrayCopyBeforeInfiniteLoop.foo
    112    1   !b        IllegalArrayCopyBeforeInfiniteLoop::foo (24 bytes)
    113    1   !b        IllegalArrayCopyBeforeInfiniteLoop::foo (24 bytes)   COMPILE SKIPPED: infinite loop (not retryable)",,,,,,,,,,,JDK-8272684,JDK-8272657,JDK-8272982,JDK-8272471,,,,,,,,,,,,,,,,,,JDK-8298246,JDK-8293413,,,,JDK-8272973,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tyqj:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-08-09 00:26;chagedorn;ILW = C2 crash in macro node expansion of array copy node, only happens with infinite loop and negative array index, use -XX:DisableIntrinsic=_copyOfRange,_arraycopy = HMM = P2;;;","2021-08-10 19:01;roboduke;Changeset: 5350b990
Author:    Hui Shi <hshi@openjdk.org>
Date:      2021-08-11 02:00:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5350b9901c6cebe5d40bbba9a31d1f26285b1cd6
;;;","2021-08-22 22:52;thartmann;I've already pushed the backport to JDK 17u and forgot to request approval. Doing this now:

Fix request (17u):
This bug leads to a crash during C2 compilation. The fix is low risk (additional null checks) and has been tested in the JDK 18 CI for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;","2021-08-23 14:06;clanger;[~hshi], I see that you have already integrated the 11u backport although it was not yet approved. Can you please take care to wait for approval before integrating (even though the PR is already marked as ready). After the switch over to git, the approval process is still done in JBS.

Furthermore, there is no jdk11u Fix request. I'm assuming the same applies as for JDK 17u, except for the cleanliness. On that grounds I'm approving retroactively.;;;","2021-08-27 04:18;shade;If you backport JDK-8272973 in 11u, then it would fail with:

#  Internal Error (/home/shade/trunks/shipilev-jdk11u-dev/src/hotspot/share/opto/cfgnode.cpp:612), pid=1392715, tid=1392736
#  assert(n->req() == 2 && n->in(1) != __null) failed: Only one data input expected

Which means 11u backport is broken, and it went unnoticed since the test was broken. [~hshi], please figure this out ASAP.;;;","2021-08-27 05:05;thartmann;I could also reproduce this in Oracle JDK 11u. The problem is reachable nodes with dead uses and was fixed by JDK-8263577 in JDK 17. We problem listed the test in JDK 11u because we will most likely not backport JDK-8263577 due to its bug tail and complexity.;;;","2021-08-27 06:50;hshi;New failure occures in second compilation for foo method. Before fix crash happens in first compilation. Will try  JDK-8263577 if possible.
;;;","2021-08-29 06:16;hshi;In JDK-8263577, src/hotspot/share/opto/cfgnode.cpp. Follow changes avoid crash in JDK11u-dev, Region's dead phi output is removed. 

        if (n->outcnt() == 0) {
          int uses_found = n->replace_edge(this, phase->C->top(), igvn);
          if (uses_found > 1) { // (--i) done at the end of the loop.
            i -= (uses_found - 1);
          }
          continue;
        }

Another way to fix new failure in jdk11u is  replace NULL with Top type dummy Proj node. Test on master and 11 both pass testcase after backport JDK-8272973.
I prefer following PR for master and backport to jdk11u with JDK-8272973.
[~shade] [~thartmann] Would you please give suggestions on this fix?

--- a/src/hotspot/share/opto/macroArrayCopy.cpp
+++ b/src/hotspot/share/opto/macroArrayCopy.cpp
@@ -999,13 +999,14 @@ MergeMemNode* PhaseMacroExpand::generate_slow_arraycopy(ArrayCopyNode *ac,
   transform_later(out_mem);
 
   // When src is negative and arraycopy is before an infinite loop, _ioproj_fallthrough
-  // could be NULL. Skip clone and update NULL _ioproj_fallthrough.
+  // could be NULL. Skip clone and update NULL _ioproj_fallthrough, return Proj with null
+  // input (Type::TOP).
   if (_ioproj_fallthrough != NULL) {
     *io = _ioproj_fallthrough->clone();
-    transform_later(*io);
   } else {
-    *io = NULL;
+    *io = new ProjNode(NULL, TypeFunc::I_O);
   }
+  transform_later(*io);
 
   return out_mem;
 }



;;;","2021-08-29 23:30;thartmann;[~roland], what do you think?;;;","2021-08-30 01:08;roland;Cherry picking JDK-8263577 would seem to make more sense to me. Not sure we need a change in master that doesn't fix an actual failure in master. Cherry picking also prevent the sources of the various trees from diverging too much.;;;","2021-08-30 17:44;hshi;Thanks [~roland] !  Do you have any plan to backport JDK-8263577 to 11u? If not, I would like do the backport (inlucde releated bugs) and tests.;;;","2021-08-31 02:03;roland;[~hshi] I have no plan to backport  JDK-8263577;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Cgroup v1 initialization causes NullPointerException when cgroup path contains colon,JDK-8272124,5055887,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,hseigel,webbuggrp,webbuggrp,2021-08-04 10:29,2023-02-21 00:18,2023-10-01 09:57,2021-08-18 07:26,11.0.12,16,openjdk8u312,,,,,18,hotspot,,0,additional-information-not-received,containers,dcsaw,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,regression,reproducer-other,webbug,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Flatcar linux, Kubernetes, Java 16

A DESCRIPTION OF THE PROBLEM :
Cgroup initialization goes through two steps, first in finding the mount points from /proc/self/mountinfo, and then reading cgroup subsystem paths from /proc/self/cgroup. The latter file is a line based text file with 3 fields, split by colon.

This is currently parsed in the jdk with a bare split (https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/linux/classes/jdk/internal/platform/CgroupSubsystemFactory.java#L197). However, that split needs to have a limit of 2 set, so that the cgroupPath (the third element) may contain colon.

When the cgroupPath contains a colon, the extra portions of the path is silently thrown away. When the subsystem's path element is initialized (https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/linux/classes/jdk/internal/platform/cgroupv1/CgroupV1SubsystemController.java#L45) it falls through, failing the prefix checks, and leaving path as null (perhaps an assertion should exist to ensure path is not null there). Finally, when any configuration file for the subsystem is attempted to be read, eg memory.is_hierarchy, Paths.get(path) is called and an NPE is thrown.

Additional investigation details can be found in https://github.com/kubernetes/kubernetes/issues/103944 and https://github.com/elastic/elasticsearch/issues/75767.

REGRESSION : Last worked in version 12


FREQUENCY : always


",,,,,,,,,,,JDK-8272787,JDK-8273088,JDK-8272685,JDK-8272663,JDK-8273196,JDK-8302530,JDK-8302941,,,,,,,,,,,,,,,,,,,,JDK-8286212,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,"0|i2twl7:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Not verified,,"2021-08-08 21:28;tongwan;It looks like a duplicate of JDK-8239559;;;","2021-08-17 01:42;sgehwolf;This is *not* a duplicate of JDK-8239559. Removing the link. Why? JDK-8239559 is about to cgroup controllers mounted on a cgroup v1 system. This bug is about "":"" in the third field in /proc/self/cgroup, i.e. the cgroup path.;;;","2021-08-17 01:47;sgehwolf;From ""man cgroups"":

===========================================
       /proc/[pid]/cgroup (since Linux 2.6.24)
              This file describes control groups to which the process with the corresponding PID belongs.  The displayed information differs for cgroups version 1 and version 2 hierarchies.

              For each cgroup hierarchy of which the process is a member, there is one entry containing three colon-separated fields:

                  hierarchy-ID:controller-list:cgroup-path

              For example:

                  5:cpuacct,cpu,cpuset:/daemons

              The colon-separated fields are, from left to right:

              1. For cgroups version 1 hierarchies, this field contains a unique hierarchy ID number that can be matched to a hierarchy ID in /proc/cgroups.  For the cgroups version 2 hierarchy, this field
                 contains the value 0.

              2. For cgroups version 1 hierarchies, this field contains a comma-separated list of the controllers bound to the hierarchy.  For the cgroups version 2 hierarchy, this field is empty.

              3. This field contains the pathname of the control group in the hierarchy to which the process belongs.  This pathname is relative to the mount point of the hierarchy.
=================================

Note ""[...] there is one entry containing three colon-separated fields"" bit.;;;","2021-08-17 05:02;sgehwolf;Relevant files on the affected system:

/proc/self/cgroup:

11:cpuset:/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a
10:hugetlb:/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a
9:cpu,cpuacct:/system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a
8:devices:/system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a
7:memory:/system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a
6:perf_event:/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a
5:blkio:/system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a
4:pids:/system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a
3:net_cls,net_prio:/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a
2:freezer:/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a
1:name=systemd:/system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a
0::/

/proc/self/mountinfo

4577 3100 0:450 / / rw,relatime master:1128 - overlay overlay rw,lowerdir=/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/20675/fs:/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/20674/fs:/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/20673/fs:/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/20672/fs:/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/20671/fs:/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/20670/fs:/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/2029/fs,upperdir=/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/20687/fs,workdir=/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/20687/work
4578 4577 0:489 / /proc rw,nosuid,nodev,noexec,relatime - proc proc rw
4579 4577 0:490 / /dev rw,nosuid - tmpfs tmpfs rw,seclabel,size=65536k,mode=755
4580 4579 0:525 / /dev/pts rw,nosuid,noexec,relatime - devpts devpts rw,seclabel,gid=5,mode=620,ptmxmode=666
4581 4579 0:431 / /dev/mqueue rw,nosuid,nodev,noexec,relatime - mqueue mqueue rw,seclabel
4582 4577 0:446 / /sys ro,nosuid,nodev,noexec,relatime - sysfs sysfs ro,seclabel
4583 4582 0:526 / /sys/fs/cgroup rw,nosuid,nodev,noexec,relatime - tmpfs tmpfs rw,seclabel,mode=755
4584 4583 0:23 /system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a /sys/fs/cgroup/systemd ro,nosuid,nodev,noexec,relatime master:6 - cgroup cgroup rw,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd
4617 4583 0:26 /kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a /sys/fs/cgroup/freezer ro,nosuid,nodev,noexec,relatime master:7 - cgroup cgroup rw,freezer
4620 4583 0:27 /kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a /sys/fs/cgroup/net_cls,net_prio ro,nosuid,nodev,noexec,relatime master:8 - cgroup cgroup rw,net_cls,net_prio
4621 4583 0:28 /system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a /sys/fs/cgroup/pids ro,nosuid,nodev,noexec,relatime master:9 - cgroup cgroup rw,pids
4622 4583 0:29 /system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a /sys/fs/cgroup/blkio ro,nosuid,nodev,noexec,relatime master:10 - cgroup cgroup rw,blkio
4623 4583 0:30 /kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a /sys/fs/cgroup/perf_event ro,nosuid,nodev,noexec,relatime master:11 - cgroup cgroup rw,perf_event
4624 4583 0:31 /system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a /sys/fs/cgroup/memory ro,nosuid,nodev,noexec,relatime master:12 - cgroup cgroup rw,memory
4625 4583 0:32 /system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a /sys/fs/cgroup/devices ro,nosuid,nodev,noexec,relatime master:13 - cgroup cgroup rw,devices
4626 4583 0:33 /system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a /sys/fs/cgroup/cpu,cpuacct ro,nosuid,nodev,noexec,relatime master:14 - cgroup cgroup rw,cpu,cpuacct
4627 4583 0:34 /kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a /sys/fs/cgroup/hugetlb ro,nosuid,nodev,noexec,relatime master:15 - cgroup cgroup rw,hugetlb
4628 4583 0:35 /kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a /sys/fs/cgroup/cpuset ro,nosuid,nodev,noexec,relatime master:16 - cgroup cgroup rw,cpuset
4629 4577 202:9 /var/lib/containerd/io.containerd.grpc.v1.cri/sandboxes/7e6f6132b4f3586e826f29e79681570c458df56e89e1062a8858ab8715ecf31e/resolv.conf /etc/resolv.conf rw,relatime - ext4 /dev/xvda9 rw,seclabel
4630 4577 202:9 /var/lib/containerd/io.containerd.grpc.v1.cri/sandboxes/7e6f6132b4f3586e826f29e79681570c458df56e89e1062a8858ab8715ecf31e/hostname /etc/hostname rw,relatime - ext4 /dev/xvda9 rw,seclabel
4631 4579 202:9 /var/lib/kubelet/pods/f65e797d-d5f9-4604-9773-94f4bb9946a0/containers/elasticsearch/6c8c0933 /dev/termination-log rw,relatime - ext4 /dev/xvda9 rw,seclabel
4632 4577 202:9 /var/lib/kubelet/pods/f65e797d-d5f9-4604-9773-94f4bb9946a0/etc-hosts /etc/hosts rw,relatime - ext4 /dev/xvda9 rw,seclabel
4633 4579 0:426 / /dev/shm rw,nosuid,nodev,noexec,relatime - tmpfs shm rw,seclabel,size=65536k
4634 4577 202:9 /var/lib/kubelet/pods/f65e797d-d5f9-4604-9773-94f4bb9946a0/volumes/kubernetes.io~configmap/elastic-internal-unicast-hosts /mnt/elastic-internal/unicast-hosts ro,relatime - ext4 /dev/xvda9 rw,seclabel
4635 4577 0:405 / /mnt/elastic-internal/elasticsearch-config ro,relatime - tmpfs tmpfs rw,seclabel
4636 4577 0:416 / /mnt/elastic-internal/probe-user ro,relatime - tmpfs tmpfs rw,seclabel
4637 4577 0:407 / /mnt/elastic-internal/xpack-file-realm ro,relatime - tmpfs tmpfs rw,seclabel
4638 4577 202:9 /var/lib/kubelet/pods/f65e797d-d5f9-4604-9773-94f4bb9946a0/volumes/kubernetes.io~configmap/elastic-internal-scripts /mnt/elastic-internal/scripts ro,relatime - ext4 /dev/xvda9 rw,seclabel
4639 4577 0:418 / /mnt/elastic-internal/downward-api ro,relatime - tmpfs tmpfs rw,seclabel
4662 4577 202:9 /var/lib/kubelet/pods/f65e797d-d5f9-4604-9773-94f4bb9946a0/volumes/kubernetes.io~empty-dir/elastic-internal-elasticsearch-bin-local /usr/share/elasticsearch/bin rw,relatime - ext4 /dev/xvda9 rw,seclabel
4663 4577 202:14848 / /usr/share/elasticsearch/data rw,relatime - ext4 /dev/xvdbg rw,seclabel
4664 4577 202:9 /var/lib/kubelet/pods/f65e797d-d5f9-4604-9773-94f4bb9946a0/volumes/kubernetes.io~empty-dir/elasticsearch-logs /usr/share/elasticsearch/logs rw,relatime - ext4 /dev/xvda9 rw,seclabel
4675 4577 202:9 /var/lib/kubelet/pods/f65e797d-d5f9-4604-9773-94f4bb9946a0/volumes/kubernetes.io~empty-dir/elastic-internal-elasticsearch-plugins-local /usr/share/elasticsearch/plugins rw,relatime - ext4 /dev/xvda9 rw,seclabel
4677 4577 202:9 /var/lib/kubelet/pods/f65e797d-d5f9-4604-9773-94f4bb9946a0/volumes/kubernetes.io~empty-dir/elastic-internal-elasticsearch-config-local /usr/share/elasticsearch/config rw,relatime - ext4 /dev/xvda9 rw,seclabel
4678 4677 0:415 / /usr/share/elasticsearch/config/http-certs ro,relatime - tmpfs tmpfs rw,seclabel
4679 4677 0:417 / /usr/share/elasticsearch/config/transport-remote-certs ro,relatime - tmpfs tmpfs rw,seclabel
4680 4677 0:404 / /usr/share/elasticsearch/config/transport-certs ro,relatime - tmpfs tmpfs rw,seclabel
3101 4579 0:525 /0 /dev/console rw,nosuid,noexec,relatime - devpts devpts rw,seclabel,gid=5,mode=620,ptmxmode=666
3102 4578 0:489 /bus /proc/bus ro,relatime - proc proc rw
3103 4578 0:489 /fs /proc/fs ro,relatime - proc proc rw
3135 4578 0:489 /irq /proc/irq ro,relatime - proc proc rw
3136 4578 0:489 /sys /proc/sys ro,relatime - proc proc rw
3137 4578 0:489 /sysrq-trigger /proc/sysrq-trigger ro,relatime - proc proc rw
3138 4578 0:527 / /proc/acpi ro,relatime - tmpfs tmpfs ro,seclabel
3139 4578 0:490 /null /proc/kcore rw,nosuid - tmpfs tmpfs rw,seclabel,size=65536k,mode=755
3168 4578 0:490 /null /proc/keys rw,nosuid - tmpfs tmpfs rw,seclabel,size=65536k,mode=755
3169 4578 0:490 /null /proc/latency_stats rw,nosuid - tmpfs tmpfs rw,seclabel,size=65536k,mode=755
3170 4578 0:490 /null /proc/timer_list rw,nosuid - tmpfs tmpfs rw,seclabel,size=65536k,mode=755
3171 4578 0:490 /null /proc/sched_debug rw,nosuid - tmpfs tmpfs rw,seclabel,size=65536k,mode=755
3172 4578 0:528 / /proc/scsi ro,relatime - tmpfs tmpfs ro,seclabel
3173 4582 0:545 / /sys/firmware ro,relatime - tmpfs tmpfs ro,seclabel;;;","2021-08-17 05:36;sgehwolf;Strack trace on an affected system:

Caused by: java.lang.NullPointerException
	at java.base/java.util.Objects.requireNonNull(Objects.java:208)
	at java.base/sun.nio.fs.UnixFileSystem.getPath(UnixFileSystem.java:260)
	at java.base/java.nio.file.Path.of(Path.java:147)
	at java.base/java.nio.file.Paths.get(Paths.java:69)
	at java.base/jdk.internal.platform.CgroupUtil.lambda$readStringValue$1(CgroupUtil.java:66)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:554)
	at java.base/jdk.internal.platform.CgroupUtil.readStringValue(CgroupUtil.java:68)
	at java.base/jdk.internal.platform.CgroupSubsystemController.getStringValue(CgroupSubsystemController.java:65)
	at java.base/jdk.internal.platform.CgroupSubsystemController.getLongValue(CgroupSubsystemController.java:124)
	at java.base/jdk.internal.platform.cgroupv1.CgroupV1Subsystem.getLongValue(CgroupV1Subsystem.java:272)
	at java.base/jdk.internal.platform.cgroupv1.CgroupV1Subsystem.getHierarchical(CgroupV1Subsystem.java:218)
	at java.base/jdk.internal.platform.cgroupv1.CgroupV1Subsystem.setPath(CgroupV1Subsystem.java:201)
	at java.base/jdk.internal.platform.cgroupv1.CgroupV1Subsystem.setSubSystemControllerPath(CgroupV1Subsystem.java:173)
	at java.base/jdk.internal.platform.cgroupv1.CgroupV1Subsystem.lambda$initSubSystem$5(CgroupV1Subsystem.java:113)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/jdk.internal.platform.cgroupv1.CgroupV1Subsystem.initSubSystem(CgroupV1Subsystem.java:113)
	at java.base/jdk.internal.platform.cgroupv1.CgroupV1Subsystem.<clinit>(CgroupV1Subsystem.java:47);;;","2021-08-17 05:53;sgehwolf;The issue is being caused by a parsing error of /proc/self/cgroup. This, in turn, causes the path setting logic in CgroupV1SubsystemController to fail. The 'path' instance variable is never set to anything, because ""/"".equals(root) is false and root.equals(cgroupPath) is false as well. Then the branch cgroupPath.startsWith(root) is taken for values root == ""/system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice:cri-containerd:86ac6260f9f8a9c1276748250f330ae9c2fcefe5ae809364ad1e45f3edf7e08a"" and cgroupPath == ""/system.slice/containerd.service/kubepods-burstable-podf65e797d_d5f9_4604_9773_94f4bb9946a0.slice"". Thus, expression cgroupPath.startsWith(root) evaluates to false and 'path' is never set.

CgroupV1SubsystemController.setPath() looks like this:

    public void setPath(String cgroupPath) {
        if (root != null && cgroupPath != null) {
            if (root.equals(""/"")) {
                if (!cgroupPath.equals(""/"")) {
                    path = mountPoint + cgroupPath;
                }
                else {
                    path = mountPoint;
                }
            }
            else {
                if (root.equals(cgroupPath)) {
                    path = mountPoint;
                }
                else {
                    if (cgroupPath.startsWith(root)) {
                        if (cgroupPath.length() > root.length()) {
                            String cgroupSubstr = cgroupPath.substring(root.length());
                            path = mountPoint + cgroupSubstr;
                        }
                    }
                }
            }
        }
    }

The expected branch should have been 'if (root.equals(cgroupPath))', which is true after the patch, thus 'path' gets set to value 'mountPoint'.;;;","2021-08-17 06:08;sgehwolf;The equivalent HotSpot code doesn't seem affected as strsep(&p, '\n') is being used for the last field:
https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/hotspot/os/linux/cgroupSubsystem_linux.cpp#L215;;;","2021-08-18 07:26;roboduke;Changeset: 4d6593ce
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2021-08-18 14:24:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4d6593ce0243457e7431a5990957a8f880e0a3fb
;;;","2021-08-18 10:09;sgehwolf;I don't think this is a regression. It appears to be present since the code was added with JDK-8203357. I see the same problematic split in latest OpenJDK 11u:
https://github.com/openjdk/jdk11u-dev/blob/8f402b26c164241b0ac705a5c42c80c646872fe7/src/java.base/linux/classes/jdk/internal/platform/cgroupv1/Metrics.java#L119 So I'm not sure why it would work for JDK 12.

Edit: It probably works in old not-updated JDK 12 since the OperatingSystemMXBean hasn't been made container aware there (a JDK 14 feature and backported to 11u and 8u). See JDK-8226575;;;","2021-08-24 09:20;sgehwolf;I've managed to reproduce this issue with (for sake of backporting):

$ sudo podman --cgroup-manager=cgroupfs run --cgroup-parent=""/opt/foo/bar:baz"" -v /disk/openjdk/builds/jdk-17-ea+33:/opt/jdk:z --rm -ti  fedora:34
[root@a69b46cd05ef /]# grep cgroup /proc/self/mountinfo | grep memory
1902 1893 0:34 /opt/foo/bar:baz/libpod-a69b46cd05ef3fd6ae2d8023066be581ca1a84cabab0436a892319fd250fa4c9 /sys/fs/cgroup/memory ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,seclabel,memory
[root@a69b46cd05ef /]# grep memory /proc/self/cgroup 
4:memory:/opt/foo/bar:baz/libpod-a69b46cd05ef3fd6ae2d8023066be581ca1a84cabab0436a892319fd250fa4c9
[root@a69b46cd05ef /]# /opt/jdk/bin/java -XshowSettings:system -version
Exception in thread ""main"" java.lang.NullPointerException
	at java.base/java.util.Objects.requireNonNull(Objects.java:208)
	at java.base/sun.nio.fs.UnixFileSystem.getPath(UnixFileSystem.java:263)
	at java.base/java.nio.file.Path.of(Path.java:147)
	at java.base/java.nio.file.Paths.get(Paths.java:69)
	at java.base/jdk.internal.platform.CgroupUtil.lambda$readStringValue$1(CgroupUtil.java:67)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at java.base/jdk.internal.platform.CgroupUtil.readStringValue(CgroupUtil.java:69)
	at java.base/jdk.internal.platform.CgroupSubsystemController.getStringValue(CgroupSubsystemController.java:65)
	at java.base/jdk.internal.platform.CgroupSubsystemController.getLongValue(CgroupSubsystemController.java:124)
	at java.base/jdk.internal.platform.cgroupv1.CgroupV1Subsystem.getLongValue(CgroupV1Subsystem.java:175)
	at java.base/jdk.internal.platform.cgroupv1.CgroupV1Subsystem.getHierarchical(CgroupV1Subsystem.java:149)
	at java.base/jdk.internal.platform.cgroupv1.CgroupV1Subsystem.initSubSystem(CgroupV1Subsystem.java:84)
	at java.base/jdk.internal.platform.cgroupv1.CgroupV1Subsystem.getInstance(CgroupV1Subsystem.java:60)
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.create(CgroupSubsystemFactory.java:116)
	at java.base/jdk.internal.platform.CgroupMetrics.getInstance(CgroupMetrics.java:167)
	at java.base/jdk.internal.platform.SystemMetrics.instance(SystemMetrics.java:29)
	at java.base/jdk.internal.platform.Metrics.systemMetrics(Metrics.java:58)
	at java.base/jdk.internal.platform.Container.metrics(Container.java:43)
	at java.base/sun.launcher.LauncherHelper.printSystemMetrics(LauncherHelper.java:318)
	at java.base/sun.launcher.LauncherHelper.showSettings(LauncherHelper.java:173);;;","2021-08-26 02:07;sgehwolf;Fix Request (OpenJDK 11u):

The issue is present in OpenJDK 11u too, but manifests differently. No NPE is being thrown when used on those systems, but instead the metrics won't get reported correctly. See the explicit backport bug how it manifests. The 11u fix is different to the JDK 18/17 version since it doesn't have the cgroups v2 code and the test infrastructure is missing. The backport patch is also more defensive in that it only applies the filter if the tokens are >= 3 as it's not clear if there are any systems out there in the wild with less than 3 tokens in /proc/self/cgroup. As such, the backport should be low risk (same code as before, but the returned tokens array has length at most 3). Testing: container tests and manual reproducer. Both pass. 11u patch has been reviewed by Aleksey Shipilev.

RFR: https://git.openjdk.java.net/jdk11u-dev/pull/292;;;","2021-08-27 05:39;sgehwolf;Fix Request (OpenJDK 8u):

The issue is present in OpenJDK 8u too, but manifests differently. No NPE is being thrown when used on those systems, but instead the metrics won't get reported correctly. See the JDK 11u backport bug how it manifests. The JDK 11u fix applies cleanly to 8u after path unshuffeling. Testing: passes the manual reproducer post patch. Container tests continue to pass.;;;","2021-08-31 02:57;tongwan;Request the submitter verify the fix by downloading the latest version of JDK 18 from https://jdk.java.net/18/;;;","2021-09-23 07:09;tongwan;No verification from the submitter.;;;",,,,,,,,,,,,,,,,,,,,,,,,
Problem list 4 jtreg tests which regularly fail on macos-aarch64,JDK-8272123,5056228,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2021-08-08 20:14,2022-10-31 10:00,2023-10-01 09:57,2021-08-09 08:59,11,17,18,,,,,18,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,testbug,,,,,,,,,,,,,"I've run the jtreg tests on JDK 18 macos ARM 6 times and every time the first 3 of these tests failed and 5 / 6 times the final test failed.

javax/swing/JButton/8151303/PressedIconTest.java
java/awt/FullScreen/FullScreenInsets/FullScreenInsets.java
java/awt/Dialog/MakeWindowAlwaysOnTop/MakeWindowAlwaysOnTop.java
java/awt/Frame/MiscUndecorated/RepaintTest.java

The logs and screenshots don't tell me much at all.
But it is clear we should problem list for macosx-aarch64 so that we can run these tests during CI without lots of noise.

There are existing bugs for macos relating to all of these 3 of them specific to these tests on this exact platform reporting that they fail sometimes.
I find they fail ""usually"" but I don't have an array of systems on which to test.
But on balance they are all likely test instability issues and I think most of
them are problem listed on other platforms already.

Bugs against we can problem list :- 
https://bugs.openjdk.java.net/browse/JDK-8252813 (all except Repaint test)
https://bugs.openjdk.java.net/browse/JDK-8266246 - specific about PressedIconTest on mac arm
https://bugs.openjdk.java.net/browse/JDK-8266245  - FullScreenInsets.java
https://bugs.openjdk.java.net/browse/JDK-8266244 - RepaintTest.java",,,,,,,,,,,JDK-8295123,JDK-8296008,JDK-8296135,JDK-8295122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,"0|i2tyoj:",9223372036854775807,b10,,,,,,,,,,,,,"2021-08-09 08:58;roboduke;Changeset: 0ac2be9b
Author:    Phil Race <prr@openjdk.org>
Date:      2021-08-09 15:58:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0ac2be9b35c56b4b1574cf03fe81111d3f39bedb
;;;","2022-10-25 22:23;vrudomet;Fix request [17u]

Backport not clean, but the fix is trivial.
Low risk, test ProblemList update.
Parity with 17.0.6-oracle;;;","2022-10-26 14:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/847
Date: 2022-10-26 21:29:05 +0000;;;","2022-10-28 00:37;vrudomet;Fix request [11u] 

Backport not clean, but the fix is trivial.
Low risk, test ProblemList update.
Parity with 11.0.18-oracle ;;;","2022-10-28 00:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1486
Date: 2022-10-28 07:39:38 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in Collectors.summingInt documentation (a -> an),JDK-8272119,5055731,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vklang,webbuggrp,webbuggrp,2021-08-03 12:19,2023-04-12 23:23,2023-10-01 09:57,2023-04-06 09:20,11,16.0.2,,,,,,21,core-libs,,0,dcspks,docs,noreg-doc,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Collectors.html#summingInt(java.util.function.ToIntFunction)

In the description of summingInt method:
""a integer-valued function"" should be ""an integer-valued function"" with ""an"" instead of ""a"".


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tvmj:",9223372036854775807,b18,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@c356540,,,,,,,,,"2023-04-05 07:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13353
Date: 2023-04-05 14:48:52 +0000;;;","2023-04-06 09:20;dukebot;Changeset: 08fbb7bb
Author:    Viktor Klang <viktor.klang@oracle.com>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2023-04-06 15:50:13 +0000
URL:       https://git.openjdk.org/jdk/commit/08fbb7bb5edebbc22e0a84710894be47bd4fe332
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ListViewSkin et al: must not cancel edit on scrolling,JDK-8272118,5056216,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fastegal,fastegal,fastegal,2021-08-08 08:31,2021-12-12 05:43,2023-10-01 09:57,2021-12-02 03:04,jfx16,,,,,,,jfx18,javafx,,0,ListViewSkin,TableViewSkinBase,TreeViewSkin,,,,,,,,,,,,,,,"this is basically reverting JDK-8114594 which cancels the edit on mouse interaction with the scrollBars. That bug is pre-historic (fixed in 2011, version fx2.0, before first commit accessible in the repository), has no description nor any tests. 

As noted in a comment to that issue, it's inconsistent/incomplete, behavior depends on how scrolling is done:

- mousePressed on scrollBar: edit cancelled 
- by mousewheel/touchPad: does nothing
- programmatically by control.scrollTo or scrollBar.setValue: does nothing

My guess is that due to incomplete/missing update of editing state on cell re-use, edits were committed on incorrect items, leading to data corruption. After fixing these re-use issues (see JDK-8264127 and related), the brute-force cancel should no longer be needed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264127,JDK-8114594,JDK-8171847,,,JDK-8278134,JDK-8114436,JDK-8150525,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tylv:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-12-02 03:04;roboduke;Changeset: aa045c5e
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-12-02 11:03:06 +0000
URL:       https://git.openjdk.java.net/jfx/commit/aa045c5e60f9566748b55d745d162d0c94ba5e59
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Automate java/awt/im/4959409/bug4959409.java,JDK-8272108,5056193,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2021-08-06 15:28,2021-09-20 14:22,2023-10-01 09:57,2021-09-20 14:22,,,,,,,,,client-libs,,0,testbug,,,,,,,,,,,,,,,,,Automate java/awt/im/4959409/bug4959409.java,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tygr:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,Fix Understood,,,,"2021-09-20 14:22;landrews;Fixed the test case https://github.com/openjdk/jdk/blob/master/test/jdk/java/awt/im/4959409/bug4959409.java ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestButtonGroupFocusTraversal.java fails in 8u,JDK-8272105,5056190,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2021-08-06 13:27,2022-02-09 13:07,2023-10-01 09:57,2022-01-10 09:40,8u311,,,,,,,8u331,client-libs,,0,11-na,17-na,cssn21_08_01,sustaining,,,,,,,,,,,,,,"The test test/javax/swing/ButtonGroup/TestButtonGroupFocusTraversal.java fails in Java 8 because the focus moves to button 1 instead of button 2 which is selected.

The test is brought into 8 by backporting JDK-8249548.

The current focus behaviour with ButtonGroup is incorrect in 8u: the first button in the group always receives focus whereas the selected button should receive focus.",,,,,,,,,,,JDK-8280908,,,,,,,,,,,,,,,,,,,,,JDK-8249548,JDK-8074883,,,,JDK-8277759,,,,,,,,,,,,,,,,,,,,8u311,,generic,,,,"0|i2tyg3:",9223372036854775807,b02,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-02-09 13:07;aivanov;The test failure is resolved by JDK-8074883.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/codecache/TestStressCodeBuffers.java crashes with ""failed to allocate space for trampoline""",JDK-8272094,5056135,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aph,tschatzl,tschatzl,2021-08-06 04:50,2023-01-03 06:04,2023-10-01 09:57,2022-05-17 02:05,11,17,18,19,,,,19,hotspot,,0,hs-comp-triaged,intermittent,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,tier1,tier3,tier6,,,,,,,,"compiler/codecache/TestStressCodeBuffers.java fails with:

StressCodeBuffers: have expanded 128 times
StressCodeBuffers: have expanded 256 times
StressCodeBuffers: have expanded 512 times
StressCodeBuffers: have expanded 1024 times
StressCodeBuffers: have expanded 2048 times
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/macroAssembler_aarch64.cpp:4646
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13240/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/314725c0-be51-4206-8ed3-e333582d452e/runs/c4733186-d791-4016-86cc-a894de692237/workspace/open/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:4646), pid=1511627, tid=1511637
#  assert(false) failed: failed to allocate space for trampoline
#
# JRE version: Java(TM) SE Runtime Environment (18.0+10) (fastdebug build 18-ea+10-439)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+10-439, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x1268958]  MacroAssembler::zero_words(RegisterImpl*, RegisterImpl*)+0x808",,,,,,,,,,,JDK-8294896,JDK-8294898,JDK-8295483,,,,,,,,,,,,,,JDK-8287129,,,,,JDK-8298720,,,,,JDK-8270947,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,"0|i2ty3v:",9223372036854775807,b23,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-06 07:20;chagedorn;ILW = C2 assertion failure in code generation, intermittent with single test, use -XX:-StressCodeBuffers or disable compilation of affected method = HLM = P3;;;","2021-08-06 07:25;chagedorn;[~aph] Is this related to JDK-8270947?;;;","2021-08-10 23:11;thartmann;[~aph], could you please have a look? It's likely related to JDK-8270947.;;;","2022-01-13 07:07;chagedorn;Hi [~aph], do you plan to get a fix in for this in JDK 18? As it is a P3, it needs to be fixed before RDP 2 is starting next Thursday. Otherwise, we have to defer it to JDK 19.;;;","2022-01-20 02:57;chagedorn;Deferring to JDK 19 as this is a P3 and RDP 2 is starting today.;;;","2022-05-16 08:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8730
Date: 2022-05-16 15:33:55 +0000;;;","2022-05-17 02:05;dukebot;Changeset: 0948c097
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-05-17 09:02:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0948c097a855dcc9a8a437b4618d7c1922722eab
;;;","2022-06-21 02:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/173
Date: 2022-06-21 09:40:52 +0000;;;","2022-10-14 06:53;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Requires follow-up to JDK-8270947.
Clean backport except for ProblemList.
Test passes. SAP nightly testing passed.;;;","2022-10-14 07:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/794
Date: 2022-10-14 13:52:02 +0000;;;","2022-11-04 11:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1503
Date: 2022-11-04 18:20:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong Checksums in Temurin BootJDK dependencies,JDK-8272078,5056116,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,clanger,clanger,clanger,2021-08-06 01:00,2021-08-11 00:34,2023-10-01 09:57,2021-08-06 02:05,11.0.13,,,,,,,11.0.13,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,JDK-8271993 introduced support for GitHub actions in JDK 11 Updates. The introduced Temurin Boot JDK requirements contain the wrong checksums.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271993,,,,,,,,,,,,,,,,,,,,,,,,,11.0.13,,,,,,"0|i2txzn:",9223372036854775807,b02,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-08-06 01:22;clanger;Fix request (11u):
Need to correct wrong bootstrap JDK checksums that haven't been uncovered in testing due to caching, to unbreak GHA workflow.;;;","2021-08-06 02:05;roboduke;Changeset: 1538790f
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2021-08-06 09:04:33 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/1538790fdcad884a40f9a91ddba8587affd034d6
;;;","2021-08-11 00:16;roboduke;Changeset: 1538790f
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2021-08-06 09:04:33 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/1538790fdcad884a40f9a91ddba8587affd034d6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Initial nroff manpage generation for JDK 18,JDK-8272067,5056103,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2021-08-05 18:20,2021-12-05 17:37,2023-10-01 09:57,2021-08-05 20:51,18,,,,,,,18,infrastructure,,0,build-infra,doc,manage,noreg-doc,,,,,,,,,,,,,,"Many of the manpages still have JDK 17 version information, so we should regenerate them all to update as needed.",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278275,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2txwr:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-08-05 20:50;roboduke;Changeset: ea02dade
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-08-06 03:49:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ea02dade43409444b7c9f8b5065fded535b64f3f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test/jdk/jdk/jfr/api/consumer/TestHiddenMethod.java needs update for JEP 416,JDK-8272064,5056100,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,mchung,mchung,2021-08-05 17:45,2022-01-10 09:31,2023-10-01 09:57,2021-12-15 05:25,18,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,"JEP 416 reimplements the core reflection with method handles.  Hidden frames now are present when executing the platform code.   

test/jdk/jdk/jfr/api/consumer/TestHiddenMethod.java has a test case to validate no hidden frame in a visible event (as the old implementation has no hidden frame on the stack).  That test case needs to be revised.

 81             assertFalse(hasHiddenStackFrame(visibleEvent), ""Hidden frame in visible event: "" + visibleEvent);

",,,,,,,,,,,JDK-8278881,JDK-8279723,,,,,,,,,,,,,,,,,,,,JDK-8271820,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2txw3:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-12-15 05:25;roboduke;Changeset: 69b5d49e
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-12-15 13:24:04 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/69b5d49e4f3a6b1ea616c39815dd16530eb32887
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
25 Null pointer dereference defect groups in 4 files,JDK-8272058,5056094,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,dcubed,shadowbug,shadowbug,2021-08-05 14:38,2022-03-11 13:35,2023-10-01 09:57,2022-01-19 09:39,18,,,,,,,18,hotspot,,0,bugdb_33196103,noreg-hard,parfait,,,,,,,,,,,,,,,25 Null pointer dereference defect groups in 4 files,,,,,,,,,,,JDK-8280336,JDK-8280669,,,,,,,,,,,,,,,,,JDK-8272060,,,,,,,,JDK-8280283,,,,,,,,,,,,,,,,,,,,,,other,,,,"0|i2txur:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-11-12 15:27;dcubed;This is my first Parfait bug...;;;","2021-11-24 23:05;dholmes;Parfait finds bugs in the code that may not actually manifest as runtime. Not knowing the Aarch64 code I couldn't say when that function might actually return NULL, but parfait is simply showing that if it does then there is a problem. Whomever wrote the ""return 0;"" part needs to be queried to determine what this should actually do.;;;","2021-12-20 13:28;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/51
Date: 2021-12-20 20:50:14 +0000
;;;","2022-01-19 09:39;roboduke;Changeset: f5de6fa7
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-01-19 17:37:36 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/f5de6fa7995fa1e82c8d969692392465b963ac35
;;;","2022-01-25 04:31;roboduke;Changeset: f5de6fa7
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-01-19 17:37:36 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/f5de6fa7995fa1e82c8d969692392465b963ac35
;;;","2022-03-11 13:35;dcubed;This fix was verified via a Parfait run by
jitender.z.singh@oracle.com.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
typo in MachSpillCopyNode::implementation after JDK-8131362 ,JDK-8272050,5056085,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,shadowbug,shadowbug,2021-08-05 12:48,2021-09-21 01:34,2023-10-01 09:57,2021-08-10 14:32,11,16,17,18,9,,,18,hotspot,,0,bugdb_33195774,c2,hs-comp-triaged,oracle-triage-18,redhat-interest,starter,,,,,,,,,,,,"After refactoring done by JDK-8131362, the fpr --> fpr now checks ""cbuf"" instead of ""is64"" when it decides between fmovd and fmovs.  But since this is register to register, it appears to be harmless.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8131362,,,,,,,,,,,,,,,,,,,,,,other,,,,"0|i2txsr:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-06 13:57;dlong;The warning seems to be about the rc_float case.  The fpr --> grp case checks is64, but the fpr --> fpr case checks cbuf, which seems to be a typo.  However, using fmovd instead of fmods here seems harmless.;;;","2021-08-06 14:05;dlong;ILW = typo but effectively harmless, no workaround = LHH = P4;;;","2021-08-10 14:32;roboduke;Changeset: 2a9acc31
Author:    Dean Long <dlong@openjdk.org>
Date:      2021-08-10 21:30:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2a9acc31b824ed964dfa2126bc5a859c79532d50
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/channels/FileChannel/Transfer2GPlus.java failed with Unexpected transfer size: 2147418112,JDK-8272047,5056080,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,bpb,bpb,bpb,2021-08-05 11:28,2022-01-21 10:24,2023-10-01 09:57,2021-08-09 09:52,18,,,,,,,18,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,regression,testbug,tier2,ursqe-triaged,,,,,,,,,,,"----------System.err:(13/787)----------
java.lang.RuntimeException: Unexpected transfer size: 2147418112
	at Transfer2GPlus.testToFileChannel(Transfer2GPlus.java:92)
	at Transfer2GPlus.main(Transfer2GPlus.java:60)
",,,,,,,,,,,JDK-8277769,JDK-8277719,,,,,,,,,,,,,,,,,,,,JDK-8271308,,,,,,,,,,,,,,,,,aarch64,ppc,,,,,,,,,linux,,,,"0|i2txrn:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2021-08-05 11:37;bpb;Apparently sendfile() on aarch64 sent 2147418112  bytes which is smaller than the documented maximum 0x7ffff000 (2147479552): 2147479552 - 2147418112 = 61440.;;;","2021-08-05 14:59;bpb;Interestingly the transfer size here is 2147418112 (0x7fff0000) while 0x7ffff000 was expected, i.e., the fourth least significant nibble is zero. Is this possibly expressing some sort of cache difference?;;;","2021-08-06 08:56;bpb;read(2) apparently has the same limitation [1]:

       On Linux, read() (and similar system calls) will transfer at most
       0x7ffff000 (2,147,479,552) bytes, returning the number of bytes
       actually transferred.  (This is true on both 32-bit and 64-bit
       systems.)

[1] https://man7.org/linux/man-pages/man2/read.2.html;;;","2021-08-09 02:59;ngasson;I suspect the 0x7fff0000 value is 0x80000000 - pagesize. On AArch64 the page size can be configured as 4k/16k/64k on boot so the limit would be 0x7ffff000 with 4k and 0x7fff0000 with 64k;;;","2021-08-09 09:52;roboduke;Changeset: b53828b7
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-08-09 16:50:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b53828b7c219f8f8fb22177bcc80b045ef7bad76
;;;","2021-11-23 10:19;akasko;Fix request (17u)

Clean backport of the Linux-aarch64 test fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.util.ImmutableCollections$Map1 and MapN should not be @ValueBased,JDK-8272042,5056071,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rriggs,mchung,mchung,2021-08-05 10:42,2021-12-01 17:43,2023-10-01 09:57,2021-11-23 07:05,18,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,"The superclass AbstractMap of java.util.ImmutableCollections$Map1 and MapN is not stateless and contains `keySet` and `values`.   They should not be annotated with `@ValueBased` and they can't be migrated to a primitive class.

The candidate list in https://openjdk.java.net/jeps/390 may need to be updated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8165396,JDK-8271959,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2txpn:",9223372036854775807,b26,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2021-11-19 07:16;rriggs;ImmutableCollection$AbstractImmutableMap is also not a value based class (because supertype AbstractMap has state.;;;","2021-11-23 07:04;roboduke;Changeset: 5e7e2da2
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2021-11-23 15:02:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5e7e2da227cd2b5e2d3d1e2f59fb74ddd1835abb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] CDS heap dump fails with primitive objects,JDK-8272041,5056070,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,mchung,mchung,2021-08-05 10:23,2021-08-06 13:14,2023-10-01 09:57,2021-08-06 13:14,repo-valhalla,,,,,,,,hotspot,,0,lworld,,,,,,,,,,,,,,,,,"JDK build fails in making `generate-link-opt-data` target when a few JDK classes are converted to primitive classes - reproduce with the attach refval.patch.


$ build/macosx-x86_64-server-release/support/interim-image/bin/java -Xshare:dump -XX:SharedClassListFile=${BUILD_OUTPUT}/support/link_opt/classlist.interim -XX:SharedArchiveFile=${BUILD_OUTPUT}/support/link_opt/classlist.jsa -Xmx128M -Xms128M

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (synchronizer.cpp:834), pid=40555, tid=15875
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (build 18-internal+0-adhoc.mlchung.open)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (18-internal+0-adhoc.mlchung.open, interpreted mode, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again

#

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271959,,,,,,,,,,,"2021-08-05 10:23;mchung;refval.patch;https://bugs.openjdk.org/secure/attachment/95915/refval.patch",,,,,,,,,,,,,,,,,,,,"0|i2txpf:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-05 14:15;iklam;Cause is known. Preliminary fix:
https://github.com/iklam/valhalla/commits/8272041-cds-dump-crash-with-archived-value-objects
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: C1 build failed after JDK-8270947,JDK-8271956,5055983,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,haosun,haosun,haosun,2021-08-05 08:33,2022-11-07 12:56,2023-10-01 09:57,2021-08-09 02:39,17,18,,,,,,18,hotspot,,0,c1,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-18,,,,,,,,,,"./configure --with-debug-level=release --with-jvm-variants=client

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-client_libjvm_objs_macroAssembler_aarch64.o:
/home/haosun01/jdk/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp: In member function 'u_char* MacroAssembler::zero_words(Register, Register)':
/home/haosun01/jdk/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:4642:30: error: invalid use of incomplete type 'class CompileTask'
 4642 |         && is_c2_compile(task->comp_level())) {
      |                              ^~
In file included from /home/haosun01/jdk/jdk_src/src/hotspot/share/ci/ciEnv.hpp:32,
                 from /home/haosun01/jdk/jdk_src/src/hotspot/share/c1/c1_Compilation.hpp:28,
                 from /home/haosun01/jdk/jdk_src/src/hotspot/share/c1/c1_ValueType.hpp:28,
                 from /home/haosun01/jdk/jdk_src/src/hotspot/share/c1/c1_LIR.hpp:29,
                 from /home/haosun01/jdk/jdk_src/src/hotspot/share/c1/c1_FrameMap.hpp:30,
                 from /home/haosun01/jdk/jdk_src/src/hotspot/share/c1/c1_CodeStubs.hpp:28,
                 from /home/haosun01/jdk/jdk_src/src/hotspot/share/c1/c1_LIRAssembler.hpp:28,
                 from /home/haosun01/jdk/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:55:
/home/haosun01/jdk/jdk_src/src/hotspot/share/code/dependencies.hpp:60:7: note: forward declaration of 'class CompileTask'
   60 | class CompileTask;
      |       ^~~~~~~~~~~

* All command lines available in /home/haosun01/jdk/build/make-support/failure-logs.
=== End of repeated output ===",,,,,,,,,,,JDK-8295481,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270947,,,,,,,,,,,,aarch64,,,,,,,b09,18,,,,,,"0|i2tx63:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-05 18:56;haosun;I suppose header `compiler/compileTask.hpp` is missing for COMPILER1;;;","2021-08-06 01:35;chagedorn;ILW = Client build failure on aarch64 due to missing header, only client build on aarch64, no workaround = MLH = P4;;;","2021-08-09 02:39;roboduke;Changeset: b84a9c7b
Author:    Hao Sun <haosun@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2021-08-09 09:38:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b84a9c7b377282bd9b3d9ac78707f0c12f8dc53d
;;;","2022-10-14 07:11;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, trivial change. Follow-up to 8270947.
Clean backport.  SAP nightly testing passed.;;;","2022-10-14 07:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/797
Date: 2022-10-14 14:13:36 +0000;;;","2022-11-07 12:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1507
Date: 2022-11-07 20:49:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: Bad graph detected in build_loop_late,JDK-8271954,5055980,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,chagedorn,chagedorn,chagedorn,2021-08-05 07:49,2022-11-22 04:56,2023-10-01 09:57,2022-06-10 01:33,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,,,,,,,,,,"The attached Java Fuzzer test starts to fail after JDK-8252372 with the following assertion:

To reproduce:
$ java -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Test Test.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124123/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/57294efe-464f-4c0a-b55a-fd67bfa32e7b/runs/71c23d41-87fd-4de4-92b5-4ba130c3e1dd/workspace/open/src/hotspot/share/opto/loopnode.cpp:5337), pid=1941868, tid=1941881
#  assert(false) failed: Bad graph detected in build_loop_late
#
# JRE version: Java(TM) SE Runtime Environment (18.0+7) (fastdebug build 18-ea+7-268)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+7-268, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12ddb47]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x307
...........
Command Line: -XX:CompileCommand=quiet -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Test Test
...........
Current thread (0x00007f649c2b1140):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=1941881, stack(0x00007f64562fb000,0x00007f64563fc000)]


Current CompileTask:
C2:    230    3    b        Test::mainTest (566 bytes)

Stack: [0x00007f64562fb000,0x00007f64563fc000],  sp=0x00007f64563f62f0,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12ddb47]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x307
V  [libjvm.so+0x12ddfea]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0xba
V  [libjvm.so+0x12de957]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x507
V  [libjvm.so+0x9fba3c]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x28c
V  [libjvm.so+0x9f8525]  Compile::Optimize()+0x1475
V  [libjvm.so+0x9f9ff4]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1564
V  [libjvm.so+0x81a076]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa0aab9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xef9
V  [libjvm.so+0xa0b7e8]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x186829c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x186eb90]  Thread::call_run()+0x100
V  [libjvm.so+0x1551464]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8274482,,,,,,,,,,,,,,,,,,,,,JDK-8252372,JDK-8290850,,,,,,,,,,"2021-08-05 07:49;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95911/FuzzerUtils.java","2021-08-05 07:49;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95912/Test.java","2021-08-05 07:48;chagedorn;hs_err_pid1941868.log;https://bugs.openjdk.org/secure/attachment/95913/hs_err_pid1941868.log",,,,,,,,,,,b24,17,,,,,,"0|i2tx5f:",9223372036854775807,b16,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-05 07:56;chagedorn;ILW = C2 assertion failure, found with multiple Java Fuzzer tests, use -XX:-SplitIfBlocks = HMM = P2;;;","2021-08-17 21:16;dlong;Could this be related to JDK-8272574?;;;","2021-08-17 23:44;chagedorn;It's unrelated. This bug is caused by JDK-8252372 which is an optimization in split if and does not reproduce with -XX:-SplitIfBlocks while JDK-8272574 crashes with -XX:-SplitIfBlocks.;;;","2021-09-16 04:58;roboduke;Changeset: c86e24d4
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-09-16 11:57:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c86e24d4be1e1a26a2a8323ef7ddbab6326bbf3a
;;;","2021-09-27 23:43;thartmann;Fix request (17u):
The bug leads to an assert in C2 (regression in JDK 17). The fix is medium risk and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;","2022-02-03 06:28;enikitin;The provided test 'TestUnswitchWithSunkNodes.java' has been run in all necessary configurations during ATR18, which I consider enough to verify this bug.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
dumppath in -XX:FlightRecorderOptions does not affect,JDK-8271949,5055973,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-08-05 06:11,2021-10-20 17:33,2023-10-01 09:57,2021-10-17 01:59,11,16,17,18,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,"We set `dumppath` in `-XX:FlightRecorderOptions` or `JFR.configure dumppath` jcmd when we want to set emergency dump path. However they do not afffect.

### -XX:FlightRecorderOptions

```
$ java -XX:FlightRecorderOptions=dumppath=`pwd` -XX:StartFlightRecording -Xlog:exceptions=info --version
[0.032s][info][exceptions] Exception <a 'java/lang/IllegalArgumentException'{0x00000007470163b8}: Unknown argument 'dumppath' in diagnostic command.> (0x00000007470163b8)
thrown [open/src/hotspot/share/services/diagnosticFramework.cpp, line 215]
for thread 0x00007f4f700236a0
[0.033s][error][arguments ] Unknown argument 'dumppath' in diagnostic command.
Error occurred during initialization of VM
Failure when starting JFR on_create_vm_2
```

### jcmd

`jcmd` shows the configuration change was succeeded, but it would not affect.

```
$ jcmd 1046 JFR.configure dumppath=/tmp
1046:
Dump path: /tmp
```",,,,,,,,,,,,,,,,,,,,,,,,JDK-8275314,,,,,,,,JDK-8270091,,,,,JDK-8275373,JDK-8270091,JDK-8275375,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tx3v:",9223372036854775807,b20,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-10-17 01:59;roboduke;Changeset: 31500692
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-10-17 08:59:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/31500692d1503cb73249e0425e6930aaaa49258a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: Arraycopy stub passes invalid oop to load barrier,JDK-8271925,5055938,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2021-08-04 23:51,2021-08-26 00:28,2023-10-01 09:57,2021-08-09 22:38,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,intermittent,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-hard,oracle-triage-11,oracle-triage-18,zgc,,,,,,,,"In Valhalla, runtime/valhalla/inlinetypes/ObjectMethods.java and compiler/arraycopy/TestObjectArrayClone.java spuriously fail with the following errors (see JDK-8271924):

# A fatal error has been detected by the Java Runtime Environment:
#
# Internal Error (t:\workspace\open\src\hotspot\share\gc\z\zBarrier.cpp:110), pid=39756, tid=34072
# assert(!ZAddress::is_weak_good(addr)) failed: Should not be weak good

Stack: [0x0000003691a00000,0x0000003691b00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [jvm.dll+0xb40ef1] os::platform_print_native_stack+0xf1 (os_windows_x86.cpp:235)
V [jvm.dll+0xd7a6a5] VMError::report+0x1005 (vmError.cpp:742)
V [jvm.dll+0xd7c02e] VMError::report_and_die+0x7fe (vmError.cpp:1552)
V [jvm.dll+0xd7c7b4] VMError::report_and_die+0x64 (vmError.cpp:1333)
V [jvm.dll+0x4eefc7] report_vm_error+0xb7 (debug.cpp:282)
V [jvm.dll+0xdc8cdf] ZBarrier::relocate+0x6f (zBarrier.cpp:110)
V [jvm.dll+0xdd04dc] ZBarrierSetRuntime::load_barrier_on_oop_array+0x5c (zBarrierSetRuntime.cpp:55)
C 0x000001b9b0345389


# A fatal error has been detected by the Java Runtime Environment:
#
# EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffad1ee87f3, pid=25328, tid=5072

Stack: [0x0000003083300000,0x0000003083400000], sp=0x00000030833fe560, free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [jvm.dll+0xdc87f3] ZBarrier::load_barrier_on_oop_slow_path+0x113 (zBarrier.cpp:130)
V [jvm.dll+0xdd04dc] ZBarrierSetRuntime::load_barrier_on_oop_array+0x5c (zBarrierSetRuntime.cpp:55)
C 0x000001dd583f5389

This is similar to JDK-8270461, the fix was not complete.",,,,,,,,,,,JDK-8272646,JDK-8272680,,,,,,,,,,,,,,,,,,,,JDK-8270461,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tww3:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-04 23:52;thartmann;ILW = Crash in ZGC code due to invalid oop, only reproduces in Valhalla (different mark word layout) with -XX:-UseCompressedClassPointers, -XX:DisableIntrinsic=_clone or use different GC = HMM = P2;;;","2021-08-09 22:38;roboduke;Changeset: d53d94b1
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-08-10 05:36:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d53d94b14d09bbcbfd9bbc0d214ead9bd52e7f58
;;;","2021-08-22 22:51;thartmann;I've already pushed the backport to JDK 17u and forgot to request approval. Doing this now:

Fix request (17u):
The bug leads to a crash with ZGC and is therefore important to fix. The fix is low risk and has been tested in the JDK 18 CI for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Crashes in ZBarrierSetRuntime::load_barrier_on_oop_array,JDK-8271924,5055937,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2021-08-04 23:24,2021-08-05 03:14,2023-10-01 09:57,2021-08-05 03:14,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,zgc,,,,,,,,,,,,,,"runtime/valhalla/inlinetypes/ObjectMethods.java and compiler/arraycopy/TestObjectArrayClone.java spuriously fail with the following errors:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\workspace\open\src\hotspot\share\gc\z\zBarrier.cpp:110), pid=39756, tid=34072
#  assert(!ZAddress::is_weak_good(addr)) failed: Should not be weak good

Stack: [0x0000003691a00000,0x0000003691b00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xb40ef1]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xd7a6a5]  VMError::report+0x1005  (vmError.cpp:742)
V  [jvm.dll+0xd7c02e]  VMError::report_and_die+0x7fe  (vmError.cpp:1552)
V  [jvm.dll+0xd7c7b4]  VMError::report_and_die+0x64  (vmError.cpp:1333)
V  [jvm.dll+0x4eefc7]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0xdc8cdf]  ZBarrier::relocate+0x6f  (zBarrier.cpp:110)
V  [jvm.dll+0xdd04dc]  ZBarrierSetRuntime::load_barrier_on_oop_array+0x5c  (zBarrierSetRuntime.cpp:55)
C  0x000001b9b0345389


# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffad1ee87f3, pid=25328, tid=5072

Stack: [0x0000003083300000,0x0000003083400000],  sp=0x00000030833fe560,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xdc87f3]  ZBarrier::load_barrier_on_oop_slow_path+0x113  (zBarrier.cpp:130)
V  [jvm.dll+0xdd04dc]  ZBarrierSetRuntime::load_barrier_on_oop_array+0x5c  (zBarrierSetRuntime.cpp:55)
C  0x000001dd583f5389
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2twvv:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] the text color on the selected disabled tabbed pane button remains white making text unreadable,JDK-8271923,5055936,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,mbollapragad,mbollapragad,2021-08-04 23:20,2021-09-13 14:24,2023-10-01 09:57,2021-09-07 09:30,11,16,17,18,8,9,,18,client-libs,,0,macos,sn_101,sn_99,sqebug,,,,,,,,,,,,,,"This issue of unfocused JTabbedPane having white text on grey background (as opposed to black text on grey background in unfoucsed native app) is long standing issue and I can see from jdk8 to current jdk18 and is not limited to jdk11u on osx10.15.7.. 

Test used for verification: Used the SwingSet2 Demo.
Product tested : JDK 11.0.13+4 (64 bit)
OS/architecture: MacOS Catalina 10.15.7 / x86_64

STEPS TO REPRODUCE :
1) Run SwingSet2 (MacOSX Look and Feel) and when the Frame is shown, move the focus to any native app and Observe JTabbedPane tab title text . 
JTabbedPane tab title text is white text on a light gray background which is barely legible.

It should not be compared to BigSur as the tabbedpane and other components background color design has been inverted by Apple as compared to Catalina and Apple's design is not backward compatible unlike JDK so we cannot expect same design to work for Catalina. That is why we used JRSUIUtils.isMacOSXBigSurOrAbove() check in 8251377 to have different drawing color for TabbedPane in BigSur vis-a-vis Catalina. 

I tried changing https://github.com/openjdk/jdk/blob/master/src/java.desktop/macosx/classes/com/apple/laf/AquaLookAndFeel.java#L330
to red color just to test but it does not change, so it seems to be controlled by JavaRuntimeSupport code, similar to JDK-8261243 and that library is handled by Apple. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271256,,,,,,,,,,,"2021-08-06 07:00;mbollapragad;BigSur_BugVerification_8271923_PASS.png;https://bugs.openjdk.org/secure/attachment/95942/BigSur_BugVerification_8271923_PASS.png","2021-08-04 23:20;mbollapragad;Catalina10.15.7_BugVer_8271256_failure1.png;https://bugs.openjdk.org/secure/attachment/95901/Catalina10.15.7_BugVer_8271256_failure1.png",,,,,x86_64,,,,,,,,,,os_x,,,,"0|i2twvn:",9223372036854775807,b14,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-08-05 09:49;kizune;Wait a second, ""move the focus to any native app""? When application window is unfocused the selected tabbed pane background SHOULD look like disabled, that's the expected behavior and that's exactly as native applications work. It has nothing to do to the fix in question.;;;","2021-08-06 15:58;kizune;[~mbollapragad] As you can see the background of the selected tabbed pane button of the unfocused native application is gray. If you focus it it will become blue. The fact that text color on the selected disabled tabbed pane button remains white making text unreadable is the separate issue and should be dealt with separately. It has nothing to do with the original fix. The text is black on BigSur simply because the normal (enabled) selection color on BigSur is light gray so the selected text color is changed there. The fact that it makes selected disabled button look better is just a coincidence. Again, that has nothing to do with the original fix. On MacOS 10.x we should change text color on disabled selected tabbed pane button and it is entirely different problem.;;;","2021-08-09 02:21;psadhukhan;I agree with [~kizune]. 
The issue in question has nothing to do with 8271256 fix nor with the parent fix JDK-8251377.
This issue of unfocused JTabbedPane having white text on grey background (as opposed to black text on grey background in unfoucsed native app) is long standing issue and I can see from jdk8 to current jdk18 and is not limited to jdk11u on osx10.15.7..

It should not be compared to BigSur as the tabbedpane and other components background color design has been inverted by Apple as compared to Catalina and Apple's design is not backward compatible unlike JDK so we cannot expect same design to work for Catalina. That is why we used JRSUIUtils.isMacOSXBigSurOrAbove() check in 8251377 to have different drawing color for TabbedPane in BigSur vis-a-vis Catalina.

I tried changing https://github.com/openjdk/jdk/blob/master/src/java.desktop/macosx/classes/com/apple/laf/AquaLookAndFeel.java#L330
to red color just to test but it does not change, so it seems to be controlled by JavaRuntimeSupport code, similar to JDK-8261243 and that library is handled by Apple.

So, it does not seem to be a critical-watch-issue as created initially and not a regression or a fix-failure;;;","2021-09-07 09:29;roboduke;Changeset: df05b4d1
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-09-07 15:50:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/df05b4d1a13e55755107695ad9ea7a8a1084901a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
After var handle support for boolean and MemoryAddress carrier jextract fails to compile,JDK-8271922,5055935,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sundar,sundar,sundar,2021-08-04 23:05,2021-08-05 03:36,2023-10-01 09:57,2021-08-05 03:36,repo-panama,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,ConstantBuilder.java has a switch on CLinker.TypeKind enum. This fails to compile (non exhaustive check) after the addition of BOOL TypeKind.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,,,,,"0|i2twvf:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
build error after JDK-8271599,JDK-8271888,5055895,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,darcy,dcubed,dcubed,2021-08-04 11:25,2022-02-07 14:55,2023-10-01 09:57,2021-08-04 11:49,18,,,,,,,18,core-libs,,0,noreg-build,tier1,,,,,,,,,,,,,,,,"There's a Tier1 build error:

[2021-08-04T17:25:24,137Z] Compiling 71 files for COMPILE_CREATE_SYMBOLS
[2021-08-04T17:25:26,492Z] Creating ct.sym classes
[2021-08-04T17:25:35,627Z] /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13987/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7e6ae08e-87ec-4081-9a79-79659e734888/runs/13d6324e-ecf2-428d-ab50-ffedc079fc71/workspace/open/src/java.base/share/classes/java/lang/Math.java:1386: warning: empty <p> tag
[2021-08-04T17:25:35,627Z]      * <p>
[2021-08-04T17:25:35,627Z]        ^
[2021-08-04T17:25:35,627Z] error: warnings found and -Werror specified
[2021-08-04T17:25:35,627Z] 1 error
[2021-08-04T17:25:35,627Z] 1 warning
[2021-08-04T17:25:35,702Z] CompileJavaModules.gmk:94: recipe for target '/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13987/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7e6ae08e-87ec-4081-9a79-79659e734888/runs/13d6324e-ecf2-428d-ab50-ffedc079fc71/workspace/build/linux-x64-open/jdk/modules/java.base/_the.java.base_batch' failed
[2021-08-04T17:25:35,702Z] make[3]: *** [/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13987/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7e6ae08e-87ec-4081-9a79-79659e734888/runs/13d6324e-ecf2-428d-ab50-ffedc079fc71/workspace/build/linux-x64-open/jdk/modules/java.base/_the.java.base_batch] Error 1
[2021-08-04T17:25:35,706Z] make[2]: *** [java.base-java] Error 1
[2021-08-04T17:25:35,706Z] make[2]: *** Waiting for unfinished jobs....
[2021-08-04T17:25:35,706Z] make/Main.gmk:193: recipe for target 'java.base-java' failed
[2021-08-04T17:27:48,717Z] 
[2021-08-04T17:27:48,717Z] ERROR: Build failed for target 'default (product-bundles test-bundles static-libs-bundles)' in configuration 'linux-x64-open' (exit code 2) 

after the integration of:

JDK-8271599 Javadoc of floorDiv() and floorMod() families is inaccurate in some places",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271599,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2twmz:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-08-04 11:26;dcubed;[~bpb] - Looks like the following fix caused this build error:

JDK-8271599 Javadoc of floorDiv() and floorMod() families is inaccurate in some places

Please take a look ASAP.;;;","2021-08-04 11:34;darcy;Fix in progress.;;;","2021-08-04 11:49;roboduke;Changeset: 91bbe2fc
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2021-08-04 18:48:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/91bbe2fcbda008a9adc8aa77149a4f2156e1b46b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: build errors with GCC11 in frame::saved_oop_result,JDK-8271869,5055872,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ahayward,ahayward,ahayward,2021-08-04 08:07,2022-08-03 06:41,2023-10-01 09:57,2021-08-10 01:31,18,,,,,,,18,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,oracle-triage-18,,,,,,,,,,,,,,"Building AArch64 using GCC 11.1.1 that is provided with Fedora 34:

In file included from /Users/alahay01/java/gerrit_jdk/src/hotspot/share/runtime/frame.inline.hpp:42,
                 from /Users/alahay01/java/gerrit_jdk/src/hotspot/cpu/aarch64/abstractInterpreter_aarch64.cpp:31:
/Users/alahay01/java/gerrit_jdk/src/hotspot/cpu/aarch64/frame_aarch64.inline.hpp: In member function 'oop frame::saved_oop_result(RegisterMap*) const':
/Users/alahay01/java/gerrit_jdk/src/hotspot/cpu/aarch64/frame_aarch64.inline.hpp:239:42: error: 'this' pointer is null [-Werror=nonnull]
  239 |   oop* result_adr = (oop *)map->location(r0->as_VMReg());
      |                                          ^~
In file included from /Users/alahay01/java/gerrit_jdk/src/hotspot/share/code/vmreg.inline.hpp:31,
                 from /Users/alahay01/java/gerrit_jdk/src/hotspot/cpu/aarch64/frame_aarch64.inline.hpp:30,
                 from /Users/alahay01/java/gerrit_jdk/src/hotspot/share/runtime/frame.inline.hpp:42,
                 from /Users/alahay01/java/gerrit_jdk/src/hotspot/cpu/aarch64/abstractInterpreter_aarch64.cpp:31:
/Users/alahay01/java/gerrit_jdk/src/hotspot/cpu/aarch64/vmreg_aarch64.inline.hpp:29:14: note: in a call to non-static member function 'VMRegImpl* RegisterImpl::as_VMReg()'
   29 | inline VMReg RegisterImpl::as_VMReg() {
      |              ^~~~~~~~~~~~
In file included from /Users/alahay01/java/gerrit_jdk/src/hotspot/share/runtime/frame.inline.hpp:42,
                 from /Users/alahay01/java/gerrit_jdk/src/hotspot/cpu/aarch64/abstractInterpreter_aarch64.cpp:31:
/Users/alahay01/java/gerrit_jdk/src/hotspot/cpu/aarch64/frame_aarch64.inline.hpp: In member function 'void frame::set_saved_oop_result(RegisterMap*, oop)':
/Users/alahay01/java/gerrit_jdk/src/hotspot/cpu/aarch64/frame_aarch64.inline.hpp:246:42: error: 'this' pointer is null [-Werror=nonnull]
  246 |   oop* result_adr = (oop *)map->location(r0->as_VMReg());
      |                                          ^~
In file included from /Users/alahay01/java/gerrit_jdk/src/hotspot/share/code/vmreg.inline.hpp:31,
                 from /Users/alahay01/java/gerrit_jdk/src/hotspot/cpu/aarch64/frame_aarch64.inline.hpp:30,
                 from /Users/alahay01/java/gerrit_jdk/src/hotspot/share/runtime/frame.inline.hpp:42,
                 from /Users/alahay01/java/gerrit_jdk/src/hotspot/cpu/aarch64/abstractInterpreter_aarch64.cpp:31:
/Users/alahay01/java/gerrit_jdk/src/hotspot/cpu/aarch64/vmreg_aarch64.inline.hpp:29:14: note: in a call to non-static member function 'VMRegImpl* RegisterImpl::as_VMReg()'
   29 | inline VMReg RegisterImpl::as_VMReg() {
      |              ^~~~~~~~~~~~

The cause of this bug is:

commit 4d2412ef3e1068063acc954a00b4db0fa4b5affb
8269122: The use of ""extern const"" for Register definitions generates poor code

","Fedora release 34 (Thirty Four)

gcc (GCC) 11.1.1 20210428 (Red Hat 11.1.1-1)

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291822,,,,,JDK-8270140,JDK-8270083,JDK-8269122,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2twhv:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-04 13:05;dlong;ILW = MML = P4;;;","2021-08-10 01:31;roboduke;Changeset: 1f881349
Author:    Alan Hayward <alan.hayward@arm.com>
Committer: Nick Gasson <ngasson@openjdk.org>
Date:      2021-08-10 08:29:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1f8813495e8184b6c38319df1c2cb70de7811a76
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Warn user when using mac-sign option with unsigned app-image.,JDK-8271868,5055871,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,herrick,herrick,herrick,2021-08-04 07:58,2021-09-16 08:34,2023-10-01 09:57,2021-08-06 05:26,16,17,18,,,,,18,tools,,0,hgupdate-sync-ignore,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,sn_99,,,,,,,,,,,,,"When jpackage is building a dmg or pkg bundle in two phases (that is, building an app-image type first and then using that app-image to build dmg or pkg bundle), and if signing is used, the --mac-sign option may be needed in both phases.
Though not strictly an error (you can build a signed pkg containing an unsigned app-image, or an unsigned pkg containing a signed app-image) the result could not be notarized, as both package and app-image needs to be signed to pass notarization.

We have had at least one user wondering why notarization failed in such a case, So this issue proposes to add a warning message when an unsigned app-image is used to build a bundle using --mac-sign option.",,,,,,,,,,,JDK-8273571,JDK-8273282,,,,,,,,,,,,,JDK-8273593,,,,,,,JDK-8273593,,,,,JDK-8273592,,,,,,,,,,,,,,,,,,,,,,os_x,,,,"0|i2twhn:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-08-04 08:00;herrick;when the options --app-image and --mac-sign are both used we will look at the application launcher in the given app-image and determine if it is signed.
If not, a warning message will be displayed.
;;;","2021-08-06 05:26;roboduke;Changeset: 0aca4f72
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-08-06 12:24:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0aca4f72ce48bc75f2c466d1cba4ad70d3c7b875
;;;","2021-09-02 05:51;herrick;Fix request (17u) :
simple fix usefull to jpackage users on mac.
fix needed in 17 for clean backport of JDK-8272639;;;","2021-09-10 07:35;roboduke;Changeset: a37254c7
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-09-09 19:31:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a37254c79fa5973465d90f4b52ab88fe68016c9f
;;;","2021-09-10 08:31;kcr;Even though the backout of this fix, JDK-8273592, was synced into jdk mainline from jdk17, and is listed as fixed in 18, that backout commit was accompanied by a sync (forward port) of the commit for this original bug (it was backported to 17, mistakenly, and synced into jdk along with the backout fix).

The net is that the following commits are in jdk mainline for JDK 18:

commit 0aca4f72ce48bc75f2c466d1cba4ad70d3c7b875
Date:   Fri Aug 6 12:24:58 2021 +0000
8271868: Warn user when using mac-sign option with unsigned app-image.

----
commit a37254c79fa5973465d90f4b52ab88fe68016c9f
Date:   Thu Sep 9 19:31:35 2021 +0000
8271868: Warn user when using mac-sign option with unsigned app-image.

commit 4afbcaf55383ec2f5da53282a1547bac3d099e9d
Date:   Fri Sep 10 14:17:45 2021 +0000
8273592: Backout JDK-8271868
----

The last two canceled each other out, so this fix is actual in JDK 18 and does not need to be redone.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 intrinsic for Reference.refersTo() is often not used,JDK-8271862,5055865,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pliden,pliden,pliden,2021-08-04 06:38,2022-04-06 22:00,2023-10-01 09:57,2021-08-11 04:11,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,"While fixing JDK-8270626 it was discovered that the C2 intrinsic for Reference.refersTo() is not used as often as one would think. Instead C2 often prefers using the native implementation, which is much slower which defeats the purpose of having an intrinsic in the first place.

The problem seem to arise from having refersTo0() being virtual, native and @IntrinsicCandidate. This can be easily worked around by making refersTo0() final, like this:

diff --git a/src/java.base/share/classes/java/lang/ref/PhantomReference.java b/src/java.base/share/classes/java/lang/ref/PhantomReference.java
index 9aba41feb02..36ff6299ffd 100644
--- a/src/java.base/share/classes/java/lang/ref/PhantomReference.java
+++ b/src/java.base/share/classes/java/lang/ref/PhantomReference.java
@@ -69,8 +69,12 @@ public class PhantomReference<T> extends Reference<T> {
      * do reference processing concurrently.
      */
     @Override
+    boolean refersToImpl(T obj) {
+        return refersTo0(obj);
+    }
+
     @IntrinsicCandidate
-    native final boolean refersTo0(Object o);
+    private native final boolean refersTo0(Object o);
 
     /**
      * Creates a new phantom reference that refers to the given object and
diff --git a/src/java.base/share/classes/java/lang/ref/Reference.java b/src/java.base/share/classes/java/lang/ref/Reference.java
index 0a312f97422..7f42daebb40 100644
--- a/src/java.base/share/classes/java/lang/ref/Reference.java
+++ b/src/java.base/share/classes/java/lang/ref/Reference.java
@@ -363,13 +363,20 @@ public abstract class Reference<T> {
      * @since 16
      */
     public final boolean refersTo(T obj) {
-        return refersTo0(obj);
+        return refersToImpl(obj);
     }
 
     /* Implementation of refersTo(), overridden for phantom references.
+     * This method exists only to avoid making refersTo0() virtual. Making
+     * refersTo0() virtual has the undesirable effect of C2 often preferring
+     * to call the native implementation over the intrinsic.
      */
+    boolean refersToImpl(T obj) {
+        return refersTo0(obj);
+    }
+
     @IntrinsicCandidate
-    native boolean refersTo0(Object o);
+    private native final boolean refersTo0(Object o);
 
     /**
      * Clears this reference object.  Invoking this method will not cause this


However, Object.clone() and Object.hashCode() are also virtual, native and @IntrinsicCandidate, and these get special treatment by C2 to get the intrinsic generated more optimally. It's not clear to me if we should do something similar with refersTo0() or if the above workaround should be considered good enough.",,,,,,,,,,,JDK-8274012,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272140,JDK-8256999,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2twgb:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-08-09 01:29;kbarrett;Use this bug for the described refersToImpl workaround.  JDK-8272140 is the bug for the fix to the compiler.  If the compiler is fixed first, then this bug becomes moot.  If the workaround described here is done first, then the compiler fix becomes an optional cleanup.
;;;","2021-08-11 04:11;roboduke;Changeset: 3f723ca4
Author:    Per Liden <pliden@openjdk.org>
Date:      2021-08-11 11:09:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3f723ca4577b9cffeb6153ee386edd75f1dfb1c6
;;;","2021-09-10 04:54;shade;Fix Request (17u)

Clean backport to make JDK 16 introduced feature more compelling with a workaround. Patch applies cleanly, relevant tests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] Wrong weakCompareAndSet assumption in UnsafeIntrinsicsTest,JDK-8271855,5055855,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2021-08-04 04:01,2021-10-18 02:35,2023-10-01 09:57,2021-09-29 02:55,11,17,18,,,,,18,hotspot,,0,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,redhat-interest,testbug,,,,,,,,,,,"The test UnsafeIntrinsicsTest can fail on PPC64 when testing new GCs. This platform has an optimized implementation of weakCompareAndSet.

According to [1], weakCompareAndSet is allowed to fail sporadically. Such sporadic failures are observable on PPC64.
[2] mentions memory contention as typical failure reason, but it's not the only possible reason. E.g., the OS can interrupt the Java Thread and the CPU can lose the reservation which also leads to such a failure. In addition, GC can access the same cache line concurrently, which is also a possible failure reason.

[1] https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html
[2] https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/VarHandle.html#weakCompareAndSet-java.lang.Object...-",,,,,,,,,,,JDK-8275396,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274851,,,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i2twe3:",9223372036854775807,b17,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-04 06:10;chagedorn;ILW = Intermittent test failure on PPC, only single test on a single platform, no workaround = MLH = P4;;;","2021-09-29 02:55;roboduke;Changeset: c4d11570
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-09-29 09:54:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c4d115701d102c33af937ca25dda8ac50117ac6b
;;;","2021-10-15 05:37;mdoerr;Fix Request (17u):
Test failures can be observed with ZGC on PPC64. So, this simple test fix should get backported before backporting new GCs on PPC64. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AmazonCA.java interop test fails,JDK-8271838,5055837,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rhalade,tvoniadka,tvoniadka,2021-08-04 00:10,2023-09-06 07:15,2023-10-01 09:57,2022-06-10 07:53,11,17.0.1,18,,,,,20,security-libs,,0,cac-issue,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,sqebug,,,,,,,,,"The test security/infra/java/security/cert/CertPathValidator/certification/AmazonCA.java fails with:

java.lang.RuntimeException: TEST FAILED: unexpected revocation date
	at ValidatePathWithParams.validate(ValidatePathWithParams.java:206)
	at AmazonCA_1.runTest(AmazonCA.java:189)
	at AmazonCA.main(AmazonCA.java:64)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

",,,,,,,,,,,JDK-8315793,JDK-8298486,JDK-8313442,JDK-8314402,JDK-8288353,JDK-8301586,,,,,,,,,,,,,,,,JDK-8309088,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2twa3:",9223372036854775807,b02,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-08-04 08:05;rhalade;In my understanding, revocation should be done at one place and then updated to CRL/OCSP responders. So we should see exact time of revocation for a certificate.;;;","2022-06-09 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9111
Date: 2022-06-09 18:59:36 +0000;;;","2022-06-10 07:53;dukebot;Changeset: 512db0ff
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2022-06-10 14:49:27 +0000
URL:       https://git.openjdk.org/jdk/commit/512db0ff31a0a1a2bd8805964ba3d06e2cbfb9e9
;;;","2023-01-30 09:33;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.
;;;","2023-01-30 09:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1124
Date: 2023-01-30 17:37:09 +0000;;;","2023-08-14 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2078
Date: 2023-08-14 13:15:58 +0000;;;","2023-08-14 06:27;mbaesken;jdk11 backport request
I would like to have the patch in jdk11u-dev as well, to be closer to OracleJDK and to backport follow up fixes in the same file more easily. The backport is clean and low risk.;;;","2023-09-05 02:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/364
Date: 2023-09-05 09:37:25 +0000;;;","2023-09-05 02:43;sgehwolf;Fix Request (OpenJDK 8u):

Please approve backporting this test-only change to 8u. It's a prerequisite of JDK-8309088 which I'd like to backport as AmazonCA.java is currently failing. Low risk, test only.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/ErrorHandling/ClassPathEnvVar.java fails with release VMs,JDK-8271836,5055835,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-08-03 23:16,2021-08-11 21:31,2023-10-01 09:57,2021-08-04 00:27,18,,,,,,,18,hotspot,,0,tencent-interest,tier6,,,,,,,,,,,,,,,,"STDERR:
 stdout: [];
 stderr: [Error: VM option 'ErrorHandlerTest' is develop and is available only in debug version of VM.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
 exitValue = 1

java.lang.RuntimeException: 'CreateCoredumpOnCrash turned off, no core file dumped' missing from stdout/stderr

        at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
        at ClassPathEnvVar.main(ClassPathEnvVar.java:44)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271003,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tw9n:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-04 00:08;dholmes;Missing:

@requires vm.debug

This hasn't shown up in our testing yet - probably tier 4.;;;","2021-08-04 00:26;jiefu;Yes, thanks David.;;;","2021-08-04 00:27;roboduke;Changeset: 977b8c4e
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-08-04 07:25:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/977b8c4e16b02421de8bf78dc60a3866ce25fc1f
;;;","2021-08-04 06:39;dcubed;This fix is in jdk-18+9-405.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Correct block size for KW,KWP mode and use fixed IV for KWP mode for SunJCE",JDK-8271745,5055736,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,valeriep,valeriep,valeriep,2021-08-03 14:28,2023-05-17 07:32,2023-10-01 09:57,2021-09-01 15:18,17,,,,,,,18,security-libs,,0,amazon-interest,redhat-interest,release-note=yes,,,,,,,,,,,,,,,"Instead of the usual 16 byte length for AES cipher, AES cipher with KW mode (KeyWrap) processes data in 8 byte blocks, thus the padding should use 8 instead of 16 as the block size when padding data. In addition, NSS's KWP impl ignores the specified IV and always use default IV. Thus, for max interoperability, it's probably safest to stick with default IV for KWP mode, at least for now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248268,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tvnn:",9223372036854775807,b14,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,Verified,,"2021-09-01 05:15;mullan;Bug filed against NSS for ignoring the IV: https://bugzilla.mozilla.org/show_bug.cgi?id=1728419;;;","2021-09-01 15:18;roboduke;Changeset: 1a5a2b6b
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2021-09-01 22:17:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1a5a2b6b15e22b21343244e3a2b649d00eef5ffa
;;;","2022-04-08 03:44;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression in StringBuilder.charAt bounds checking,JDK-8271732,5055717,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,redestad,kganapureddy,kganapureddy,2021-08-03 05:56,2022-02-07 02:22,2023-10-01 09:57,2021-08-12 00:03,18,,,,,,,18,core-libs,,0,conformance,regression,tck-red-18,,,,,,,,,,,,,,,"Its observed that with early access nightly builds of jdk-18-ea9 the conformance tests validating the charAt method of StringBuffer/StringBuilder are failing for the case - 
Throws:
IndexOutOfBoundsException - if index is negative or greater than or equal to length().

Please find the attached standalone code snippet to reproduce the issue.

This looks a regression caused by the fix - https://bugs.openjdk.java.net/browse/JDK-8270160",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270160,,,,,JCK-7316608,,,,,,"2021-08-03 05:56;kganapureddy;TestCharAt.java;https://bugs.openjdk.org/secure/attachment/95875/TestCharAt.java",,,,,,,,,,,,,,,,,,,,"0|i2tvjf:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2021-08-12 00:03;roboduke;Changeset: a15b6592
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2021-08-12 07:01:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a15b659278741337aefc15ce8002df66ce6323c0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: should use equal() to check event fields in tests,JDK-8271726,5055711,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ddong,ddong,ddong,2021-08-03 04:03,2021-08-11 21:29,2023-10-01 09:57,2021-08-03 18:36,,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,"In TestHeapDump.java, we should use EventField.equal() to check fields, but there are two lines that didn't abide by this rule(I think it's typo).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tvi3:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-08-03 18:36;roboduke;Changeset: 43a6ba96
Author:    Denghui Dong <ddong@openjdk.org>
Committer: Yi Yang <yyang@openjdk.org>
Date:      2021-08-04 01:35:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/43a6ba9677551762c1bc1dc2f994dde7d6d9f1a5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] gc/g1/TestMixedGCLiveThreshold.java can fail if G1 Full GC uses >1 workers,JDK-8271722,5055698,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rrich,rrich,rrich,2021-08-03 00:29,2022-10-12 23:23,2023-10-01 09:57,2021-08-05 00:32,17,18,,,,,,18,hotspot,,0,gc-g1,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,ursqe-triaged,,,,,,,,,,,,"If G1 Full GC uses more than one worker then the set of live objects is potentially distributed into more than one region. It is possible that in this case one of the regions has less than G1MixedGCLiveThresholdPercent live objects and therefore gets selected for the collection set of a later gc. This causes the test to fail.

On PPC the page size is 64k. On such a system the test is executed with 32M heap even though -Xms10m is given because for every page in the CardTable there has to be corresponding heap space (see CardTable::ct_max_alignment_constraint()). In that setup the test TestMixedGCLiveThreshold fails due to the issue discribed above.

The issue can be reproduced on x86 if it is run with -Xms32m. My system has 20 cores. Maybe a higher number of cores is a prerequisite too.

I have build and run the testcase with -XX:G1MixedGCLiveThresholdPercent=25.
The output is attached as TestMixedGCLiveThreshold_<platform>.log

TestMixedGCLiveThreshold_linuxppcle.log shows:

- L18: Heap size is 32m
- L67: 2 workers for full gc
- L80: Live data was distributed to 2 old regions
- L127: One of the old regions has 248k live bytes. This is less than 25% (256k) so it is selected which is unexpected by the test.


TestMixedGCLiveThreshold_linuxx86_64.log shows:

- L18:Hheap size is 10m
- L67: 1 worker for full gc
- L80: Live data was collected into 1 old region
- L127: That region has 591k live bytes and therefore is not selected.

The issue can be avoided if -XX:ParallelGCThreads=1 is given as L128 of attachment TestMixedGCLiveThreshold_linuxppcle_ParallelGCThreads_1.log shows.
",,,,,,,,,,,JDK-8273813,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271081,,,,,,"2021-08-03 05:59;rrich;TestMixedGCLiveThreshold_linuxppcle.log;https://bugs.openjdk.org/secure/attachment/95877/TestMixedGCLiveThreshold_linuxppcle.log","2021-08-03 06:05;rrich;TestMixedGCLiveThreshold_linuxppcle_ParallelGCThreads_1.log;https://bugs.openjdk.org/secure/attachment/95878/TestMixedGCLiveThreshold_linuxppcle_ParallelGCThreads_1.log","2021-08-03 05:59;rrich;TestMixedGCLiveThreshold_linuxx86_64.log;https://bugs.openjdk.org/secure/attachment/95876/TestMixedGCLiveThreshold_linuxx86_64.log",,,,,,,,,,,,,,,,,,"0|i2tvf7:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-08-03 00:35;rrich;I'm not sure what UT is but JDK-8271081 and JDK-8271722 seem to have the same symptom for different reasons.;;;","2021-08-03 00:36;rrich;As a fix I'd suggest to add -XX:ParallelGCThreads=1 to the test;;;","2021-08-05 00:32;roboduke;Changeset: 4abe5311
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2021-08-05 07:31:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4abe5311407c68d04fb0babb87fa279e35d5fabc
;;;","2021-08-10 08:26;rrich;Fix request (17u)

I would like to backport this to 17u to avoid false positives in 17u tests.
Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash when during color transformation the color profile is replaced,JDK-8271718,5055694,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,serb,serb,2021-08-02 23:13,2021-09-28 14:07,2023-10-01 09:57,2021-08-10 15:23,11,16,17,,,,,18,client-libs,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,,,,,,,,,,,,,,,"The modified version of the test case created for JDK-8260695(attached) may reproduce the crash.

The root cause is that the LCMSTransform may use the pointer to the color profile which was replaced already by the new data.",,,,,,,,,,,JDK-8274463,,,,,,,,,,,,,,,,,,,,,JDK-8273135,,,,,,,,,,,"2021-08-02 23:13;serb;MTTransformReplacedProfile.java;https://bugs.openjdk.org/secure/attachment/95869/MTTransformReplacedProfile.java",,,,,,generic,,,,,,,,,,generic,,,,"0|i2tveb:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-08-10 15:23;roboduke;Changeset: 14893527
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-08-10 22:22:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/148935279d177e66a08a7003975bce3077104e07
;;;","2021-09-27 21:23;serb;Fix request (17u)

This is request to backport the fix for the jvm crash. The patch applies cleanly.
PR: https://github.com/openjdk/jdk17u/pull/91;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Unsafe compareAndSet/Exchange C2 intrinsics should support inline types,JDK-8271710,5055684,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,mchung,mchung,2021-08-02 18:53,2021-08-04 03:32,2023-10-01 09:57,2021-08-04 03:32,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,"test/jdk/java/lang/invoke/VarHandles/VarHandleTestMethodHandleAccessPoint.java fails with this assertion if it runs with -Diters=2000 (see the patch below).


diff --git a/test/jdk/java/lang/invoke/VarHandles/VarHandleTestMethodHandleAccessPoint.java b/test/jdk/java/lang/invoke/VarHandles/VarHandleTestMethodHandleAccessPoint.java
index 0f74bf35e80..7623479d0d5 100644
--- a/test/jdk/java/lang/invoke/VarHandles/VarHandleTestMethodHandleAccessPoint.java
+++ b/test/jdk/java/lang/invoke/VarHandles/VarHandleTestMethodHandleAccessPoint.java
@@ -25,7 +25,7 @@
 
 /*
  * @test
- * @run testng/othervm -Diters=2000 VarHandleTestMethodHandleAccessPoint
+ * @run testng/othervm -Diters=20000 VarHandleTestMethodHandleAccessPoint
  */
 
 import org.testng.annotations.BeforeClass;


-----

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (lworld-closed/open/src/hotspot/share/gc/g1/c2/g1BarrierSetC2.cpp:209), pid=51042, 
tid=25099
#  assert(pre_val->bottom_type()->basic_type() == T_OBJECT) failed: or we shouldn't be here
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.mlchung.open)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-internal+0-adhoc.mlchung.open, mixed mode, tiered, compressed oops, c
ompressed class ptrs, g1 gc, bsd-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting
 Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Current CompileTask:
C2:   9846 1668       4       java.lang.invoke.LambdaForm$MH/0x0000000800164800::invoke (60 bytes)

Stack: [0x000070000c47d000,0x000070000c57d000],  sp=0x000070000c578ce0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x118d169]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, voi
d*, void*, char const*, int, unsigned long)+0x6e9
V  [libjvm.dylib+0x118d7eb]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)
+0x3b
V  [libjvm.dylib+0x5fdfbd]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x706a62]  G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr co
nst*, Node*, BasicType) const+0x112
V  [libjvm.dylib+0xdff07a]  ModRefBarrierSetC2::atomic_cmpxchg_bool_at_resolved(C2AtomicParseAccess&, Node*, Node*, Type const*)
 const+0x7a
V  [libjvm.dylib+0x33a1da]  BarrierSetC2::atomic_cmpxchg_bool_at(C2AtomicParseAccess&, Node*, Node*, Type const*) const+0x4a
V  [libjvm.dylib+0x826d41]  GraphKit::access_atomic_cmpxchg_bool_at(Node*, Node*, TypePtr const*, int, Node*, Node*, Type const*
, BasicType, unsigned long long)+0xd1
V  [libjvm.dylib+0xc1515e]  LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind, LibraryCallKit::A
ccessKind)+0xa5e
V  [libjvm.dylib+0xc0897e]  LibraryIntrinsic::generate(JVMState*)+0x24e
V  [libjvm.dylib+0x6a2719]  Parse::do_call()+0xc19
V  [libjvm.dylib+0xed4174]  Parse::do_one_bytecode()+0x194
V  [libjvm.dylib+0xebcb91]  Parse::do_one_block()+0x441
V  [libjvm.dylib+0xebab18]  Parse::do_all_blocks()+0x3f8
V  [libjvm.dylib+0xeb5d5d]  Parse::Parse(JVMState*, ciMethod*, float)+0x112d
V  [libjvm.dylib+0x48179b]  ParseGenerator::generate(JVMState*)+0xab
V  [libjvm.dylib+0x486b60]  PredictedCallGenerator::generate(JVMState*)+0x350
V  [libjvm.dylib+0x6a2719]  Parse::do_call()+0xc19
V  [libjvm.dylib+0xed4174]  Parse::do_one_bytecode()+0x194
V  [libjvm.dylib+0xebcb91]  Parse::do_one_block()+0x441
V  [libjvm.dylib+0xebab18]  Parse::do_all_blocks()+0x3f8
V  [libjvm.dylib+0xeb5d5d]  Parse::Parse(JVMState*, ciMethod*, float)+0x112d
V  [libjvm.dylib+0x48179b]  ParseGenerator::generate(JVMState*)+0xab
V  [libjvm.dylib+0x6a2719]  Parse::do_call()+0xc19
V  [libjvm.dylib+0xed4174]  Parse::do_one_bytecode()+0x194
V  [libjvm.dylib+0xebcb91]  Parse::do_one_block()+0x441
V  [libjvm.dylib+0xebab18]  Parse::do_all_blocks()+0x3f8
V  [libjvm.dylib+0xeb5d5d]  Parse::Parse(JVMState*, ciMethod*, float)+0x112d
V  [libjvm.dylib+0x48179b]  ParseGenerator::generate(JVMState*)+0xab
V  [libjvm.dylib+0x6a2719]  Parse::do_call()+0xc19
V  [libjvm.dylib+0xed4174]  Parse::do_one_bytecode()+0x194
V  [libjvm.dylib+0xebcb91]  Parse::do_one_block()+0x441
V  [libjvm.dylib+0xebab18]  Parse::do_all_blocks()+0x3f8
V  [libjvm.dylib+0xeb5d5d]  Parse::Parse(JVMState*, ciMethod*, float)+0x112d
V  [libjvm.dylib+0x48179b]  ParseGenerator::generate(JVMState*)+0xab
V  [libjvm.dylib+0x59bc53]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1523
V  [libjvm.dylib+0x47fcb9]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x109
V  [libjvm.dylib+0x5bd852]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x7a2
V  [libjvm.dylib+0x5bce90]  CompileBroker::compiler_thread_loop()+0x2c0
V  [libjvm.dylib+0x10de154]  JavaThread::thread_main_inner()+0x254
V  [libjvm.dylib+0x10dafd7]  Thread::call_run()+0x177
V  [libjvm.dylib+0xe8b0e0]  thread_native_entry(Thread*)+0x150
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94
C  [libsystem_pthread.dylib+0x1b8b]  thread_start+0xf",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tvc3:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-03 07:56;thartmann;The problem is that the Unsafe.compareAndSetReference C2 intrinsic does not yet support inline types.;;;","2021-08-03 10:41;mchung;`Unsafe.compareAndSetReference` should only be called when it's a non-flattened instance of the primitive class or primitive reference type.    Are you seeing this is the case?   For flattened instance, it's supposed to call `Unsafe.compareAndSetValue`. ;;;","2021-08-03 22:57;thartmann;Yes, compareAndSetReference is only called on non-flattened fields but the C2 intrinsic still needs to handle inline type arguments that might be passed in a scalarized form.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
oddPart in MutableBigInteger::mutableModInverse contains info on final result,JDK-8271616,5055586,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-08-02 08:53,2023-05-17 10:14,2023-10-01 09:57,2021-08-03 17:04,17,18,,,,,,18,core-libs,,0,amazon-interest,noreg-hard,noreg-trivial,,,,,,,,,,,,,,,"Since evenPart is usually quite small, the oddPart contains most of the info of the final result. We'd better clean up oddPart.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271120,,,JDK-8258915,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tuqb:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28853e3d,,,,,,,,,"2021-08-03 08:26;weijun;It's hard to prove what info is there in an internal class, but the fix is trivial.;;;","2021-08-03 17:04;roboduke;Changeset: a8408708
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-08-04 00:02:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a8408708b065a877278acc6b007ad6a9baaf2561
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/vm/jit/LongTransitions/ test fail due to locale mismatch,JDK-8271615,5055585,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mseledtsov,azeller,azeller,2021-08-02 07:25,2022-10-11 11:49,2023-10-01 09:57,2022-08-26 11:19,18,,,,,,,20,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,"On macos aarch64 all subtest of vmTestbase/vm/jit/LongTransitions fail with the following error:
FAIL:Test failed! 4 byte are wrong! C file - 46 Java file - 44

Test were executed on M1 MacMini with macOS 11.5.1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274350,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,"0|i2tuq3:",9223372036854775807,b13,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-03 17:06;iignatyev;despite vm/jit/LongTransitions tests having `jit` in them, they don't provoke compilation and don't test compilers. they are actually jni tests and, hence, runtime tests. moving this issue to runtime.

PS the tests will, eventually, be placed in the correct location.;;;","2021-08-03 18:05;dlong;I can't reproduce or find any failures for these tests.  What JDK version are you using?  What flags are you using?  How are you running the tests?;;;","2021-08-05 06:37;azeller;I have seen these test failing since I started with our testing on macOS aarch64 two weeks ago. But I have to admit that the error is no longer reproducable since I changed the User Settings for ""Language and Region"" from Germany to ""United States"". I did this to workaround some other jtreg errors and I must say, that I did not suspect these tests to be locale specific.
;;;","2021-08-05 07:09;azeller;I just verified on my machine that the test passes when I switch to United States as region and fails when the region is set to Germany.
I changed the title accordingly and you might close this bug if the test is expected to fail on a non US locale. ;;;","2021-08-08 19:03;dholmes;FAIL:Test failed! 4 byte are wrong! C file - 46 Java file - 44

This is the difference in the decimal-point character used by the different locales:

44 	2C 	00101100 	&#44; 	, 	comma
...
46 	2E 	00101110 	&#46; 	. 	period

I would have to suspect that the default behaviour of Java %e and C %e format specifiers are behaving differently under the non-US locale. Or perhaps we are overriding the locale used by one of these when running the test framework?;;;","2021-08-10 11:37;mseledtsov;ILW = MLM = P4;;;","2022-06-27 16:22;vprovodin;The same issue was observed with macOS 12.2.1 x64 (3,2 GHz 6-Core Intel Core i7) on JDK17;;;","2022-08-17 15:42;mseledtsov;Tests follow similar patterns: @run main/native/othervm vm.jit.LongTransitions.LTTest nativeFnc1

Where it fails exactly:
  LTTest.java: line 6223
  The code compares using byte-by-byte comparison the files which are 
  output of Java code versus the output of native code.

The comparison code is rather simple, and I do not see any mistakes here.
  - the code loads contents of both files (cFile and javaFile) in the same manner via FileInputStream
  - the data is loaded into simple byte array ""byte[]"" via FileInputStream.read() for both files
  - the data is then compared in a loop byte-by-byte

In such byte-by-byte comparison the code does a simple comparison, w/o considering the context or locale.
;;;","2022-08-17 16:38;mseledtsov;Analyzing the invocation side of the tests. Invocation follows a general patter of:
  - a nativeFnc{$NUMBER}_invoke is declared for each $NUMBER
  - for each $NUMBER the native method is declared with pattern nativeFnc${NUMBER}
  - the ""invoke"" method assigns random values to a large number of variables
  - the values are then recorded into a ""java log"" file via PrintStream.format()
  - the ""invoke"" method then calls the nativeFun${NUMBER} passing these values
  - the native side of the invocation, a function Java_vm_jit_LongTransitions_LTTest_nativeFnc${NUMBER}
    records the values into a ""c/native log"" file using fprintf()

The comparison code then compares the two files. Lots of numbers are of fload and double type, which uses
a decimal point. Difference in a format of decimal point on Java side versus native side will likely cause this problem.
;;;","2022-08-17 17:15;mseledtsov;  - Java side printing: PrintStream locale consideration
    The PrintStream constructor does not take Locale as an argument, but the printf() and format() methods do.
    In this test PrintStream.format() is used w/o specifying locale. According to specification the behavior is:
    ""The locale always used is the one returned by Locale.getDefault(Locale.Category) with FORMAT category specified"".
    In other words, if I understand correctly, this test will use the default locale on the Java side.
  - Native side printing: uses fprintf() from stdio.h
    The behavior of this function might be affected by the LC_CTYPE and LC_NUMERIC categories of the current locale.
;;;","2022-08-17 17:18;mseledtsov;Based on my findings I see two possible solutions:
(1) ensure Java side locale matches C side locale
(2) add special handling to "","" and ""."" to the comparison logic

I personally favor option (2) because:
  - option (1) does seem a lot more complicated
  - more places to fix in the code - every ps.format() statement will need to be updated that is over 5k places in the code
  - will need to get a reliable getter for native format for all supported platforms
  - will need to provide some sort of matching logic between native locale and java locale
  - and the goal of the test is not to test locale-specific stuff

Hence, I prefer a simple solution with option (2). If I do not hear any objections within next couple of days I will proceed with option (2) fix.
;;;","2022-08-25 16:00;mseledtsov;Simple reproducer:
Simple reproducer: set a different locale for Java:
  E.g.: add -Duser.language=sv -Duser.country=SE to command line

# Simple repro with locale difference
jtreg -nr -va \
  -nativepath:native-test/hotspot/jtreg/native \
  -Duser.language=sv -Duser.country=SE \
  test/hotspot/jtreg/vmTestbase/vm/jit/LongTransitions/nativeFnc1/TestDescription.java
;;;","2022-08-25 16:03;mseledtsov;Testing the fix:
------------- w/o locale difference:
jtreg -v1 -nativepath:native-test/hotspot/jtreg/native test/hotspot/jtreg/vmTestbase/vm/jit/LongTransitions/
PASS

------------- with locale difference:
jtreg -v1 \
  -nativepath:native-test/hotspot/jtreg/native \
  -Duser.language=sv -Duser.country=SE \
  test/hotspot/jtreg/vmTestbase/vm/jit/LongTransitions/
PASS;;;","2022-08-25 16:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10033
Date: 2022-08-25 23:36:37 +0000;;;","2022-08-26 11:19;dukebot;Changeset: 774edeb5
Author:    Mikhailo Seledtsov <mseledtsov@openjdk.org>
Date:      2022-08-26 18:16:16 +0000
URL:       https://git.openjdk.org/jdk/commit/774edeb52147bbb8b9a66da335e97398a6b4297d
;;;",,,,,,,,,,,,,,,,,,,,,,,
Test runtime/CalleeSavedRegisters/FPRegs.java fails,JDK-8271606,5055575,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jnordstrom,vagarwal,vagarwal,2021-08-02 03:54,2021-10-11 05:03,2023-10-01 09:57,2021-08-24 13:47,8u311,,,,,,,8u321,hotspot,,0,sqebug,sustaining,,,,,,,,,,,,,,,,"Test: runtime/CalleeSavedRegisters/FPRegs.java
OS: Failure seen in Windows, Linux
Is it a Regression: No, it is a new test

Partial failure log:
#section:main
----------messages:(4/117)----------
command: main FPRegs
reason: User specified action: run main FPRegs 
Mode: othervm
elapsed time (seconds): 0.765
----------configuration:(0/0)----------
----------System.out:(1/122)*----------
Launcher = c:\\opt\\aurora\\CommonData\\JTREG_NATIVEPATH_TESTBUNDLE_LIBRARY\\hotspot\\jtreg\\native\\FPRegs.exe (exists)
----------System.err:(13/670)----------
java.lang.NullPointerException
	at FPRegs.main(FPRegs.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.lang.Thread.run(Thread.java:748)

JavaTest Message: Test threw exception: java.lang.NullPointerException
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.NullPointerException
----------rerun:(34/3692)*----------
cd 'C:\\opt\\aurora\\sandbox\\results\\workDir\\runtime\\CalleeSavedRegisters\\FPRegs' && \\
CPAPPEND='c:\\opt\\aurora\\CommonData\\jemmy_dir\\jemmy.jar' \\
JTREG_COF=false \\
JTREG_HOME=c:/opt/aurora/CommonData/jtreg_dir \\
JTREG_NATIVEPATH=c:/opt/aurora/CommonData/JTREG_NATIVEPATH_TESTBUNDLE_LIBRARY/hotspot/jtreg/native \\
JTREG_NATIVEPATH_TESTBUNDLE_LIBRARY=c:/opt/aurora/CommonData/JTREG_NATIVEPATH_TESTBUNDLE_LIBRARY \\
JTREG_NATIVEPATH_TESTBUNDLE_LIBRARY_arl=aurora://artifactory/jdk/8u311/b04/bundles/windows-x64/jdk-8u311-fcs-bin-b04-windows-x64-test.tar.gz \\
JTREG_OPTS='-cpa:c:/opt/aurora/CommonData/jemmy_dir/jemmy.jar -javaoption:-Xmixed -javaoption:-server '-k:!ignore' -timeout:3 -J-Djavatest.script.jtrIfPassed=false -verbose:time -nativepath:c:/opt/aurora/CommonData/JTREG_NATIVEPATH_TESTBUNDLE_LIBRARY/hotspot/jtreg/native -othervm -conc:3 -vmoptions:'-XX:MaxRAMFraction=6' -exclude:C:/opt/aurora/sandbox/results/exclude1.jtx' \\
PATH='C:\\Cygwin\\bin;C:\\Cygwin\\bin;C:\\Cygwin\\usr\\local\\bin;C:\\Cygwin\\sbin;C:\\Cygwin\\usr\\sbin;C:\\Cygwin\\bin;C:\\Cygwin\\bin;C:\\Cygwin\\usr\\local\\bin;C:\\Cygwin\\sbin;C:\\Cygwin\\usr\\sbin;C:\\Cygwin\\bin;C:\\Cygwin\\bin;C:\\Cygwin\\usr\\local\\bin;C:\\Cygwin\\sbin;C:\\Cygwin\\usr\\sbin;C:\\Cygwin\\usr\\local\\bin;C:\\Cygwin\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0;C:\\WINDOWS\\System32\\OpenSSH;C:\\cygwin\\bin;C:\\Users\\jpgansible\\AppData\\Local\\Microsoft\\WindowsApps;%JAVA_HOME%\\bin;C:\\Cygwin\\usr\\local\\bin;C:\\Cygwin\\sbin;C:\\Cygwin\\usr\\sbin' \\
SystemDrive=C: \\
SystemRoot='C:\\WINDOWS' \\
TEMP='C:\\Cygwin\\tmp' \\
TMP='C:\\Cygwin\\tmp' \\
TZ=Etc/GMT \\
windir='C:\\WINDOWS' \\
CLASSPATH='C:\\opt\\aurora\\sandbox\\results\\workDir\\classes\\2\\runtime\\CalleeSavedRegisters;C:\\opt\\aurora\\sandbox\\ws\\hotspot\\test\\runtime\\CalleeSavedRegisters;C:\\opt\\aurora\\sandbox\\results\\workDir\\classes\\2\\testlibrary;C:\\opt\\aurora\\sandbox\\ws\\hotspot\\test\\testlibrary;c:\\opt\\aurora\\CommonData\\jdk\\lib\\tools.jar;c:\\opt\\aurora\\CommonData\\jemmy_dir\\jemmy.jar;C:\\opt\\aurora\\CommonData\\jtreg_dir\\lib\\javatest.jar;C:\\opt\\aurora\\CommonData\\jtreg_dir\\lib\\jtreg.jar' \\
    'c:\\opt\\aurora\\CommonData\\jdk\\bin\\java' \\
        -Dtest.src='C:\\opt\\aurora\\sandbox\\ws\\hotspot\\test\\runtime\\CalleeSavedRegisters' \\
        -Dtest.src.path='C:\\opt\\aurora\\sandbox\\ws\\hotspot\\test\\runtime\\CalleeSavedRegisters;C:\\opt\\aurora\\sandbox\\ws\\hotspot\\test\\testlibrary' \\
        -Dtest.classes='C:\\opt\\aurora\\sandbox\\results\\workDir\\classes\\2\\runtime\\CalleeSavedRegisters' \\
        -Dtest.class.path='C:\\opt\\aurora\\sandbox\\results\\workDir\\classes\\2\\runtime\\CalleeSavedRegisters;C:\\opt\\aurora\\sandbox\\results\\workDir\\classes\\2\\testlibrary' \\
        -Dtest.vm.opts=-XX:MaxRAMFraction=6 \\
        -Dtest.tool.vm.opts=-J-XX:MaxRAMFraction=6 \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts='-Xmixed -server' \\
        -Dtest.jdk='c:\\opt\\aurora\\CommonData\\jdk' \\
        -Dcompile.jdk='c:\\opt\\aurora\\CommonData\\jdk' \\
        -Dtest.timeout.factor=3.0 \\
        -Dtest.nativepath='c:\\opt\\aurora\\CommonData\\JTREG_NATIVEPATH_TESTBUNDLE_LIBRARY\\hotspot\\jtreg\\native' \\
        -XX:MaxRAMFraction=6 \\
        -Xmixed \\
        -server \\
        '-Djava.library.path=c:\\opt\\aurora\\CommonData\\JTREG_NATIVEPATH_TESTBUNDLE_LIBRARY\\hotspot\\jtreg\\native' \\
        com.sun.javatest.regtest.agent.MainWrapper 'C:\\opt\\aurora\\sandbox\\results\\workDir\\runtime\\CalleeSavedRegisters\\FPRegs.d\\main.0.jta'
result: Failed. Execution failed: `main' threw exception: java.lang.NullPointerException


test result: Failed. Execution failed: `main' threw exception: java.lang.NullPointerException",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tunv:",9223372036854775807,b01,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: CheckCastPP which should closely follow Allocate is sunk of a loop,JDK-8271600,5055569,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,njian,njian,2021-08-02 00:36,2021-10-27 16:02,2023-10-01 09:57,2021-08-23 13:24,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,intermittent,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,redhat-interest,tier3,vectorapi,,,,,,,,"Test on x86 with option ""-XX:UseAVX=2 -Djdk.incubator.vector.test.loop-iterations=400"":

config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@5560f6dd): success
test Vector256ConversionTests.castShape(Species[short, 16, S_256_BIT], Species[byte, 64, S_512_BIT], short(i)): success
castShape took 814 ms
config AbstractVectorConversionTest.getRunTime(org.testng.internal.TestResult@198fb10e): success
 2039  Phi  ===  1424  18810  18778  [[ 18818  19022  19060 ]]  #rawptr:BotPTR !jvms: ByteVector::blendTemplate @ bci:26 (line 1886) Byte256Vector::blend @ bci:11 (line 370) Byte256Vector::blend @ bci:3 (line 41) ByteVector::sliceTemplate @ bci:75 (line 1978) Byte256Vector::slice @ bci:3 (line 378) Byte256Vector::slice @ bci:3 (line 41) AbstractVector::convertShapeTemplate @ bci:266 (line 373) Short256Vector::convertShape @ bci:4 (line 248) AbstractVector::castShape @ bci:31 (line 287) AbstractVectorConversionTest::conversion_kernel @ bci:374 (line 449)
 1389  CallStaticJavaDirect  ===  10659  0  2076  29  0  2089  16867  631  16865  642  644  16656  0  16657  16658  0  0  646  16659  16660  0  436  16869  655  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  18670  0  0  0  2090  2091  0  0  0  0  0  0  0  1395  1394  1393  1392  26873  2090  1391  18865  18864  [[ 1390  1388  2092  2096  2104  13454 ]] Static wrapper for: _new_instance_Java # rawptr:NotNull ( java/lang/Object:NotNull * ) C=0.000100 ByteVector::rearrangeTemplate @ bci:24 (line 2093) reexecute Byte256Vector::rearrange @ bci:7 (line 412) Byte256Vector::rearrange @ bci:2 (line 41) ByteVector::sliceTemplate @ bci:64 (line 1978) Byte256Vector::slice @ bci:3 (line 378) Byte256Vector::slice @ bci:3 (line 41) AbstractVector::convertShapeTemplate @ bci:266 (line 373) Short256Vector::convertShape @ bci:4 (line 248) AbstractVector::castShape @ bci:31 (line 287) AbstractVectorConversionTest::conversion_kernel @ bci:374 (line 449) !jvms: ByteVector::blendTemplate @ bci:26 (line 1886) Byte256Vector::blend @ bci:11 (line 370) Byte256Vector::blend @ bci:3 (line 41) ByteVector::sliceTemplate @ bci:75 (line 1978) Byte256Vector::slice @ bci:3 (line 378) Byte256Vector::slice @ bci:3 (line 41) AbstractVector::convertShapeTemplate @ bci:266 (line 373) Short256Vector::convertShape @ bci:4 (line 248) AbstractVector::castShape @ bci:31 (line 287) AbstractVectorConversionTest::conversion_kernel @ bci:374 (line 449)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/buildOopMap.cpp:360
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/tmp/ci-scripts/jdk_src/src/hotspot/share/opto/buildOopMap.cpp:360), pid=12841, tid=12904
#  assert(false) failed: there should be a oop in OopMap instead of a live raw oop at safepoint
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-git-7cc1eb3e5)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-git-7cc1eb3e5, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x63bcf6]  OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*)+0xa06
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /tmp/work/scratch/hs_err_pid12841.log
#
# Compiler replay data is saved as:
# /tmp/work/scratch/replay_pid12841.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
STDERR:
WARNING: Using incubator modules: jdk.incubator.vector
rerun:
cd /tmp/work/scratch && \
HOME=/home/ent-admin \
LANG=en_US.UTF-8 \
LC_ALL=en_US.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
CLASSPATH=/tmp/work/classes/jdk/incubator/vector/Vector256ConversionTests.d:/home/ent-admin/ci-scripts/jdk_src/test/jdk/jdk/incubator/vector:/mnt/share/openjdk/packages/jtreg/jtreg/lib/testng.jar:/mnt/share/openjdk/packages/jtreg/jtreg/lib/jcommander.jar:/mnt/share/openjdk/packages/jtreg/jtreg/lib/guice.jar:/mnt/share/openjdk/packages/jtreg/jtreg/lib/javatest.jar:/mnt/share/openjdk/packages/jtreg/jtreg/lib/jtreg.jar \
    /mnt/share/homes/njian/jdk/daily-build/x86_64-fastdebug/jdk-master/bin/java \
        -Dtest.vm.opts='-ea -esa -Djdk.incubator.vector.test.loop-iterations=400 -Xmx768m -server' \
        -Dtest.tool.vm.opts='-J-ea -J-esa -J-Djdk.incubator.vector.test.loop-iterations=400 -J-Xmx768m -J-server' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts= \
        -Dtest.jdk=/mnt/share/homes/njian/jdk/daily-build/x86_64-fastdebug/jdk-master \
        -Dcompile.jdk=/mnt/share/homes/njian/jdk/daily-build/x86_64-fastdebug/jdk-master \
        -Dtest.timeout.factor=8.0 \
        -Dtest.root=/home/ent-admin/ci-scripts/jdk_src/test/jdk \
        -Dtest.name=jdk/incubator/vector/Vector256ConversionTests.java \
        -Dtest.file=/home/ent-admin/ci-scripts/jdk_src/test/jdk/jdk/incubator/vector/Vector256ConversionTests.java \
        -Dtest.src=/home/ent-admin/ci-scripts/jdk_src/test/jdk/jdk/incubator/vector \
        -Dtest.src.path=/home/ent-admin/ci-scripts/jdk_src/test/jdk/jdk/incubator/vector \
        -Dtest.classes=/tmp/work/classes/jdk/incubator/vector/Vector256ConversionTests.d \
        -Dtest.class.path=/tmp/work/classes/jdk/incubator/vector/Vector256ConversionTests.d \
        -Dtest.class.path.prefix=/tmp/work/classes/jdk/incubator/vector/Vector256ConversionTests.d:/home/ent-admin/ci-scripts/jdk_src/test/jdk/jdk/incubator/vector \
        -Dtest.modules='jdk.incubator.vector java.base/jdk.internal.vm.annotation' \
        --add-modules jdk.incubator.vector,java.base \
        --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
        -ea \
        -esa \
        -Djdk.incubator.vector.test.loop-iterations=400 \
        -Xmx768m \
        -server \
        -XX:-TieredCompilation \
        --add-opens jdk.incubator.vector/jdk.incubator.vector=ALL-UNNAMED \
        com.sun.javatest.regtest.agent.MainWrapper /tmp/work/jdk/incubator/vector/Vector256ConversionTests.d/testng.0.jta jdk/incubator/vector/Vector256ConversionTests.java false Vector256ConversionTests

TEST RESULT: Failed. Unexpected exit from test [exit code: 134]

My system info: Intel(R) Xeon(R) Silver 4116 CPU @ 2.10GHz. ",,,,,,,,,,,JDK-8274487,,,,,,,,,,,,,,,,,,,,,JDK-8276064,,,,,JDK-8252372,,,,,,"2021-08-02 00:37;njian;hs_err_pid12841.log;https://bugs.openjdk.org/secure/attachment/95865/hs_err_pid12841.log",,,,,,,,,,,,,,,,,,,,"0|i2tumj:",9223372036854775807,b12,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-02 14:11;dlong;ILW = Assert during C2 compilation (regression), single Vector API (incubator) test with command-line flag, no workaround but disable compilation of affected method = HLM = P3 ;;;","2021-08-13 05:16;thartmann;I was not able to reproduce this with > 1000 runs on a AVX-512 capable machine.;;;","2021-08-16 00:54;njian;I can easily reproduce (single run) this on another x86 system, with: (-Djdk.incubator.vector.test.loop-iterations=500)

$ jtreg -othervm -a -ea -esa -va -ignore:quiet -vmoptions:""-Djdk.incubator.vector.test.loop-iterations=500"" -timeoutFactor:32 -J-Xmx8g -testjdk:/mnt/share/homes/ninjia02/jdk/daily-build/x86_64-fastdebug/jdk-master -server -r:/tmp/report -w:/tmp/work /tmp/jdk_src/test/jdk/jdk/incubator/vector/Vector256ConversionTests.java

$ lscpu

Architecture:        x86_64
CPU op-mode(s):      32-bit, 64-bit
Byte Order:          Little Endian
CPU(s):              44
On-line CPU(s) list: 0-43
Thread(s) per core:  2
Core(s) per socket:  22
Socket(s):           1
NUMA node(s):        1
Vendor ID:           GenuineIntel
CPU family:          6
Model:               85
Model name:          Intel(R) Xeon(R) Gold 6152 CPU @ 2.10GHz
Stepping:            4
CPU MHz:             2100.151
BogoMIPS:            4200.00
Virtualization:      VT-x
L1d cache:           32K
L1i cache:           32K
L2 cache:            1024K
L3 cache:            30976K
NUMA node0 CPU(s):   0-43
Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single pti intel_ppin ssbd mba ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm mpx rdt_a avx512f avx512dq rdseed adx smap clflushopt clwb intel_pt avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm arat pln pts pku ospke md_clear flush_l1d

$ java -XX:+PrintFlagsFinal -version | grep UseAVX
intx UseAVX                                   = 2                                    {ARCH product} {default};;;","2021-08-16 01:04;thartmann;Right, -Djdk.incubator.vector.test.loop-iterations=500 seems to do the trick. I can reproduce it as well now. Thanks!;;;","2021-08-18 13:45;vlivanov;It looks like a regression from JDK-8252372.

A CheckCastPP node which immediately follows an Allocation node is successfully sunk out of a loop and it extends the live range of the corresponding raw oop (produced by Allocate node), so it crosses a safepoint.

[~thartmann] [~chagedorn] does it duplicate any existing bug?;;;","2021-08-18 14:41;vlivanov;The following patch fixes the crash:

diff --git a/src/hotspot/share/opto/loopopts.cpp b/src/hotspot/share/opto/loopopts.cpp
index d86a5db0718..7dc7283fafc 100644
--- a/src/hotspot/share/opto/loopopts.cpp
+++ b/src/hotspot/share/opto/loopopts.cpp
@@ -1441,7 +1441,8 @@ void PhaseIdealLoop::try_sink_out_of_loop(Node* n) {
       !n->is_Proj() &&
       !n->is_MergeMem() &&
       !n->is_CMove() &&
-      n->Opcode() != Op_Opaque4) {
+      n->Opcode() != Op_Opaque4 &&
+      !(n->is_CheckCastPP() && n->in(1)->bottom_type()->isa_rawptr())) {
     Node *n_ctrl = get_ctrl(n);
     IdealLoopTree *n_loop = get_loop(n_ctrl);
     if (n_loop != _ltree_root && n->outcnt() > 1) {
;;;","2021-08-18 23:25;chagedorn;I don't think we a have a bug for this problem, yet. So, this looks like a newly found regression for JDK-8252372.;;;","2021-08-23 13:24;roboduke;Changeset: 2ff4c01d
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-08-23 20:23:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2ff4c01d42f1afcc53abd48e074356fb4a700754
;;;","2021-09-28 00:32;thartmann;Fix request (17u):
The bug leads to an assert in C2 (regression in JDK 17). The fix is low risk (bail out) and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc of floorDiv() and floorMod() families is inaccurate in some places,JDK-8271599,5055551,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2021-08-01 06:10,2021-08-17 05:56,2023-10-01 09:57,2021-08-04 10:17,11,16,8,,,,,18,core-libs,,0,additional-information-received,dcsaw,noreg-doc,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Errata in floorDiv(int, int), floorDiv(long, int) and floorDiv(long, long)
----
""The floor rounding mode gives different results from truncation when the exact result is negative.""
shall be replaced with:
""The floor rounding mode gives different results from truncation when the exact result is [[not integer and]] negative.""


Errata in floorDiv(int, int)
----
""If the signs of the arguments are the same, the results...""
shall be replaced with:
""If the signs of the arguments are the same [[or x is zero]], the results...""

Errata in floorDiv(int, int)
----
""If the signs of the arguments are different, the quotient is negative and floorDiv returns the integer less than or equal to ...""
shall be replaced with:
""If the signs of the arguments are different [[and x is not zero]], the quotient is negative and floorDiv returns the [[largest]] integer less than or equal to ...""



Errata in floorMod(int, int), floorMod(long, int) and floorMod(long, long)
----
""The floor modulus is x - (floorDiv(x, y) * y), has the same sign as the divisor y, and...""
shall be replaced with:
""The floor modulus is [[r =]] x - (floorDiv(x, y) * y), has the same sign as the divisor y [[or is zero]], and...""

Errata in floorMod(int, int)
----
""that returns the integer less than or equal to...""
shall be replaced with:
""that returns the [[largest]] integer less than or equal to...""

Errata in floorMod(int, int)
----
""If the signs of the arguments are the same, the results...""
shall be replaced with:
""If the signs of the arguments are the same [[or x is zero]], the results...""

Errata in floorMod(int, int)
----
""If the signs of the arguments are different, the results...""
shall be replaced with:
""If the signs of the arguments are different [[and x is not zero]], the results...""

Errata in floorMod(int, int)
----
""If the signs of arguments are unknown...""
shall be removed, as it might lead to erroneous results due to overflow in the sum.





FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,JDK-8271225,JDK-8271827,,,,,,,,JDK-8271888,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tuij:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2021-08-02 00:28;tongwan;The errata can be found at:
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Math.java#L1301
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Math.java#L1261
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Math.java#L1264
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Math.java#L1356
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Math.java#L1368
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Math.java#L1373
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Math.java#L1379
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Math.java#L1388;;;","2021-08-04 10:17;roboduke;Changeset: 9f1edafa
Author:    Raffaello Giulietti <raffaello.giulietti@gmail.com>
Committer: Brian Burkhalter <bpb@openjdk.org>
Date:      2021-08-04 17:16:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9f1edafac4f096977ea6ce075ae7a6b0c2112b7d
;;;","2021-08-17 05:35;tongwan;Requested the submitter review the fix https://git.openjdk.java.net/jdk/commit/9f1edafac4f096977ea6ce075ae7a6b0c2112b7d ;;;","2021-08-17 05:56;tongwan;The submitter confirmed the fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fatal error with variable shift count integer rotate operation.,JDK-8271589,5055549,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,jbhateja,jbhateja,jbhateja,2021-07-31 10:26,2022-02-03 06:30,2023-10-01 09:57,2021-08-04 10:50,16.0.1,17,18,,,,,18,hotspot,,0,c2,hs-comp-triaged,jdk17-defer-request,jdk17-defer-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,oracle-triage-11,oracle-triage-18,,,,,,,,,"Following test case results into a fatal error.

  public static final int LEN  = 128;
  public static void rleft(int [] arr, int [] res, int shift) {
    for(int i = 0 ; i < LEN ; i++) {
       res[i] = Integer.rotateRight(arr[i], arr[i]);
    }
  }

Problem exists since JDK-16 onwards.
java -version
openjdk version ""16.0.1"" 2021-04-20
OpenJDK Runtime Environment (build 16.0.1+9-24)
OpenJDK 64-Bit Server VM (build 16.0.1+9-24, mixed mode, sharing)

",,,,,,,,,,,JDK-8272399,JDK-8272675,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248830,,,,,,,,,,,,generic,,,,,,,,16.0.1,,generic,,,,"0|i2tui3:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-07-31 11:37;jbhateja;# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (type.cpp:1125), pid=56471, tid=56493
#  Error: ShouldNotReachHere()
#
# JRE version: OpenJDK Runtime Environment (16.0.1+9) (build 16.0.1+9-24)
# Java VM: OpenJDK 64-Bit Server VM (16.0.1+9-24, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd9a0c6]  TypeInt::xmeet(Type const*) const+0x56
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/jatinbha/code/java/rotate/core.56471)
#
# An error report file with more information is saved as:
# /home/jatinbha/code/java/rotate/hs_err_pid56471.log
#
# Compiler replay data is saved as:
# /home/jatinbha/code/java/rotate/replay_pid56471.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)

;;;","2021-07-31 12:18;kvn;Deferral Request.
Complex fix very late in JDK 17 release cycle.  I prefer to test it first in JDK 18 and backport into JDK 17 update release.
It is not new regression in JDK 17. It was introduced in JDK 16.
Affects only Vector API.;;;","2021-08-02 14:20;dlong;ILW = compiler crash, problem with specific operation seen on platforms without variable vector shifts, no workaround = HMH = P1;;;","2021-08-02 23:16;thartmann;Looks like this has been introduced by JDK-8248830. Please link related bugs when filing issues to keep track of the bug tail. This helps us when deciding what (not) to backport.;;;","2021-08-04 10:50;roboduke;Changeset: 392fcc9d
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2021-08-04 17:49:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/392fcc9df7e1547672f727e8fdc8de73ffdfe534
;;;","2021-08-05 11:02;kvn;Deferral Request for JDK 17 is approved retroactively.;;;","2021-08-06 10:03;kvn;Fix Request for 17u.
Backport changes applied cleanly. 
Low risk fix - affects Vector API only. Fix is tested in latest JDK (18).
PR: https://git.openjdk.java.net/jdk/pull/4956
;;;","2021-08-12 02:57;jbhateja;[~kvn] We also need to backport this to jdk16u. Your above comment mentioned about backport changes applied to jdk17u, do I need to create new backport PR for it?;;;","2021-08-12 12:20;kvn;[~jbhateja] JDK 16u is dead after we release JDK 17. No need to patch it.
I will do backport into 17u.
;;;","2022-02-03 06:30;enikitin;The adjusted test 'TestIntVectRotate.java' has been run during ATR18 with no failures found, hence this is Verified.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR Recorder Thread crashed with SIGSEGV in write_klass,JDK-8271588,5055546,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mgronlun,dcubed,dcubed,2021-07-31 06:54,2021-08-10 02:24,2023-10-01 09:42,2021-08-05 02:14,17,,,,,,,17,hotspot,,0,intermittent,jdk17-fix-request,jdk17-fix-yes,noreg-hard,regression,tier7,,,,,,,,,,,,"The following test crashed in the JDK17 CI:

applications/runthese/RunThese30M.java

Here's snippets from the hs_err_pid file:

#  SIGSEGV (0xb) at pc=0x00007f1f1ac113d4, pid=2253, tid=2314
#
# JRE version: Java(TM) SE Runtime Environment (17.0+34) (build 17-ea+34-LTS-2715)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17-ea+34-LTS-2715, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8703d4]  write_klass(JfrCheckpointWriter*, Klass const*, bool)+0x234

<snip>

---------------  T H R E A D  ---------------

Current thread (0x00007f1c68e47510):  JavaThread ""JFR Recorder Thread"" daemon [_thread_in_vm, id=2314, stack(0x00007f1ce53eb000,0x00007f1ce54ec000)]

Stack: [0x00007f1ce53eb000,0x00007f1ce54ec000],  sp=0x00007f1ce54ea830,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8703d4]  write_klass(JfrCheckpointWriter*, Klass const*, bool)+0x234
V  [libjvm.so+0x876750]  JfrArtifactCallbackHost<Klass const*, CompositeFunctor<Klass const*, CompositeFunctor<Klass const*, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const*, LeakPredicate<Klass const*>, &(write__klass__leakp(JfrCheckpointWriter*, void const*))>, 164u>, JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const*, SerializePredicate<Klass const*>, &(write__klass(JfrCheckpointWriter*, void const*))>, 164u> >, KlassArtifactRegistrator> >::do_artifact(void const*)+0xb0
V  [libjvm.so+0x868d9d]  EpochDispatchOp<JfrEpochQueue<JfrEpochQueueKlassPolicy>::ElementDispatch<KlassFunctor> >::dispatch(bool, unsigned char const*, unsigned long)+0xad
V  [libjvm.so+0x868e77]  void JfrLinkedList<JfrBuffer, JfrCHeapObj>::iterate<CompositeOperation<EpochDispatchOp<JfrEpochQueue<JfrEpochQueueKlassPolicy>::ElementDispatch<KlassFunctor> >, ReinitializeAllReleaseRetiredOp<JfrMemorySpace<JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, false>, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>, JfrLinkedList<JfrBuffer, JfrCHeapObj> >, CompositeOperationAnd> >(CompositeOperation<EpochDispatchOp<JfrEpochQueue<JfrEpochQueueKlassPolicy>::ElementDispatch<KlassFunctor> >, ReinitializeAllReleaseRetiredOp<JfrMemorySpace<JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, false>, JfrMspaceRemoveRetrieval, JfrConcurrentQueue<JfrBuffer, JfrCHeapObj>, JfrLinkedList<JfrBuffer, JfrCHeapObj>, true>, JfrLinkedList<JfrBuffer, JfrCHeapObj> >, CompositeOperationAnd>&)+0x57
V  [libjvm.so+0x8690b1]  void JfrEpochStorageHost<JfrBuffer, JfrMspaceRemoveRetrieval, false>::iterate<EpochDispatchOp<JfrEpochQueue<JfrEpochQueueKlassPolicy>::ElementDispatch<KlassFunctor> > >(EpochDispatchOp<JfrEpochQueue<JfrEpochQueueKlassPolicy>::ElementDispatch<KlassFunctor> >&, bool)+0xe1
V  [libjvm.so+0x86897e]  JfrTraceIdKlassQueue::iterate(void (*)(Klass*), bool)+0x3e
V  [libjvm.so+0x871878]  do_klasses()+0x38
V  [libjvm.so+0x873634]  JfrTypeSet::serialize(JfrCheckpointWriter*, JfrCheckpointWriter*, bool, bool)+0x284
V  [libjvm.so+0x80d4fb]  JfrCheckpointManager::write_type_set()+0xfb
V  [libjvm.so+0x84f6b6]  JfrRecorderService::rotate(int)+0xa6
V  [libjvm.so+0x84ff0b]  recorderthread_entry(JavaThread*, JavaThread*)+0x1eb
V  [libjvm.so+0xd8e620]  JavaThread::thread_main_inner()+0xd0
V  [libjvm.so+0xd91cae]  Thread::call_run()+0xde
V  [libjvm.so+0xbe7f51]  thread_native_entry(Thread*)+0xe1


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x00000001000000a1

I have not seen this failure mode before so I'm tagging this
bug as a regression and starting it at P2. The triage team can
adjust as needed.",,,,,,,,,,,JDK-8272210,JDK-8272068,JDK-8272178,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tuhf:",9223372036854775807,b35,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-08-03 12:12;mgronlun;// Retired klass queue buffer (part of load barrier)

x /20g  0x7f1c487befc0
0x7f1c487befc0:	0x05722a48002a906d	0x02879498002a8d11
0x7f1c487befd0:	0x04336bf8002aca30	0x04336bf8002aca30
0x7f1c487befe0:	0x001a240800001058	0x0023378800001098
0x7f1c487beff0:	0x0448b400002acc75	0x032cc000002a9099
0x7f1c487bf000:	0x04a58b800027fb8c	0x00070c2000000564 <<-- f000 is the problematic address
0x7f1c487bf010:	0x00070c2000000564	0x0000efc80000056c
0x7f1c487bf020:	0x0000efc80000056c	0x00223fd000001330
0x7f1c487bf030:	0x03bd99e8002aa650	0x04671870002ae598
0x7f1c487bf040:	0x046712d8002ae56c	0x0226c400002a9be8
0x7f1c487bf050:	0x03c2ac00002ae708	0x04671870002ae598

// The entry is compressed, consisting of:

(low dword) shifted traceid for klass = 0027fb8c
(high dword) compressed klass = 0x04a58b80

// Klass metaspace base
p CompressedKlassPointers::_narrow_klass
$151 = {_base = 0x800000000 """", _shift = 0, _use_implicit_null_checks = true}

// The dereferenced memory for the decoded (uncompressed) Klass* is *not* a Klass (any more?):

p/x *(Klass*) 0x804a58b80

$150 = {<Metadata> = {<MetaspaceObj> = {static _shared_metaspace_base = 0x800000000, static _shared_metaspace_top = 0x800bb1000}, _vptr.Metadata = 0x7f1b4183ff58}, _layout_helper = 0x5827e0c0, _id = 0x7f1b, _vtable_len = 0x4183ff30, _super_check_offset = 0x7f1b, _name = 0x7f1b4183ff30, _secondary_super_cache = 0x7f1b5827e0b0, _secondary_supers = 0x7f1b5827e0d0, _primary_supers = {0x7f1b4183ff40, 0x800001378, 0x8000013d0, 0x800001428, 0x800001480, 0x8000014e8, 0x80016b080, 0x80016acb8}, _java_mirror = {_obj = 0x220}, _super = 0x0, _subklass = 0x0, _next_sibling = 0x7f1b5827e058, _next_link = 0x80016b080, _class_loader_data = 0x100000010, _modifier_flags = 0x1b573ee8, _access_flags = {_flags = 0x7f1f}, _trace_id = 0x1010, _last_biased_lock_bulk_revocation_time = 0x3800000006, _prototype_header = {_value = 0x7f1c40367400, static age_bits = 0x4, static lock_bits = 0x2, static biased_lock_bits = 0x1, static max_hash_bits = 0x39, static hash_bits = 0x1f, static unused_gap_bits = 0x1, static epoch_bits = 0x2, static lock_shift = 0x0, static biased_lock_shift = 0x2, static age_shift = 0x3, static unused_gap_shift = 0x7, static hash_shift = 0x8, static epoch_shift = 0x8, static lock_mask = 0x3, static lock_mask_in_place = 0x3, static biased_lock_mask = 0x7, static biased_lock_mask_in_place = 0x7, static biased_lock_bit_in_place = 0x4, static age_mask = 0xf, static age_mask_in_place = 0x78, static epoch_mask = 0x3, static epoch_mask_in_place = 0x300, static hash_mask = 0x7fffffff, static hash_mask_in_place = 0x7fffffff00, static biased_lock_alignment = 0x800, static locked_value = 0x0, static unlocked_value = 0x1, static monitor_value = 0x2, static marked_value = 0x3, static biased_lock_pattern = 0x5, static no_hash = 0x0, static no_hash_in_place = 0x0, static no_lock_in_place = 0x1, static max_age = 0xf, static max_bias_epoch = 0x3}, _biased_lock_revocation_count = 0x16acb8, _shared_class_path_index = 0x8, _shared_class_flags = 0x0, _archived_mirror_index = 0x5827e2f0, static _lh_neutral_value = 0x0, static _lh_instance_slow_path_bit = 0x1, static _lh_log2_element_size_shift = 0x0, static _lh_log2_element_size_mask = 0x3f, static _lh_element_type_shift = 0x8, static _lh_element_type_mask = 0xff, static _lh_header_size_shift = 0x10, static _lh_header_size_mask = 0xff, static _lh_array_tag_bits = 0x2, static _lh_array_tag_shift = 0x1e, static _lh_array_tag_obj_value = 0xfffffffe, static _lh_array_tag_type_value = 0xffffffff}

// Metaspace memory

x /40g 0x804a58b80 
0x804a58b80:	0x00007f1b4183ff58	0x00007f1b5827e0c0 <<-- ff58 is not a vtable == 0x804a58b80 is not a Klass
0x804a58b90:	0x00007f1b4183ff30	0x00007f1b4183ff30
0x804a58ba0:	0x00007f1b5827e0b0	0x00007f1b5827e0d0
0x804a58bb0:	0x00007f1b4183ff40	0x0000000800001378
0x804a58bc0:	0x00000008000013d0	0x0000000800001428
0x804a58bd0:	0x0000000800001480	0x00000008000014e8
0x804a58be0:	0x000000080016b080	0x000000080016acb8
0x804a58bf0:	0x0000000000000220	0x0000000000000000
0x804a58c00:	0x0000000000000000	0x00007f1b5827e058
0x804a58c10:	0x000000080016b080	0x0000000100000010
0x804a58c20:	0x00007f1f1b573ee8	0x0000000000001010 <<-- ee8 is a vtable == 0x804a58c20 is an InstanceKlass
0x804a58c30:	0x0000003800000006	0x00007f1c40367400
0x804a58c40:	0x000000080016acb8	0x00007f1b5827e2f0
0x804a58c50:	0x0000000800000d68	0x0000000804a58c20
0x804a58c60:	0x0000000000000000	0x0000000000000000
0x804a58c70:	0x0000000000000000	0x0000000000000000
0x804a58c80:	0x0000000000000000	0x0000000000000000
0x804a58c90:	0x00007f1c4106d750	0x0000000800000d68
0x804a58ca0:	0x0000000000000000	0x0000000804a589e8
0x804a58cb0:	0x0000000804a589e8	0x00007f1c182db240

info symbol 0x00007f1b4183ff58
No symbol matches 0x00007f1b4183ff58.

info symbol 0x00007f1f1b573ee8
vtable for InstanceKlass + 16 in section .data.rel.ro of /host/ade/debugging/8271588/jdk-17/lib/server/libjvm.so

0027fb8c is the shifted trace id for the klass; let us shift off the meta bits:

0027fb8c >> 2 = 0009fee3 // this is the real trace id of the Klass. If the Klass was unloaded, why is this id not listed in the unloaded klasses set?

How, and when, was the metaspace memory at 0x804a58b80 changed from an InstanceKlass (to something else, unsure what)? If the memory was released as part of correct klass unloading, an entry listing the associated trace id should be in the unloaded klasses set.

Is concurrent class unloading taking some uncovered route? The protocol states it should be done under the ClassLoaderDataGraph_lock. It is assumed that all unloading paths go through SystemDictionary::do_unloading.

Is there an issue with the Metaspace resulting in the loss / premature re-use of a block/chunk?;;;","2021-08-04 14:13;mgronlun;The best hypothesis I have so far is a latent visibility issue that manifests in a concurrent class unloading situation (ZGC does concurrent class unloading). This situation does not happen for traditional collectors that still rely on non-concurrent class unloading because the visibility is implied and guaranteed as part of a safepoint operation.

bool JfrKlassUnloading::on_unload(const Klass* k) {
  assert(k != NULL, ""invariant"");
  assert_locked_or_safepoint(ClassLoaderDataGraph_lock);
  if (IS_JDK_JFR_EVENT_SUBKLASS(k)) {
    ++event_klass_unloaded_count;
  }
  return USED_ANY_EPOCH(k) && add_to_unloaded_klass_set(JfrTraceId::load_raw(k), USED_THIS_EPOCH(k));
}

Above is the code that registers klasses with the unloaded set. It is conditioned under USED_ANY_EPOCH(k) to only include klasses that are tagged, i.e. marked as being in use by JFR.

If the tag bits are not adequately visible to the thread performing the unload, the klass will not register with the set.

In the typical, non-class unloading case, there are several implication relations in place for proper visibility. A tagged klass is also enqueued, post storestore, which implies that an element read from the queue is appropriately tagged.

Klass unloading works a bit differently: it does not make use of the queue because only klasses that are unloading are of interest (to keep the data set small). Instead of the queue, the klasses comes from ClassLoaderDataGraph::classes_unloading_do.  So class unloading cannot rely on the implication relation provided by the queue.

There is another happens-before system in place as well:
When a thread has tagged a previously untagged klass, and after having enqueued it, the thread performs a Store Release for a global variable (""tag_state_changed"").

The regular consumer, the JFR Recorder Thread, will only process the queue if this global variable is set, and so it is read using a Load Acquire.

Unfortunately, this does not hold for the class unloading case, which is run by an arbitrary worker thread (not the JFR Recorder Thread), and that thread does not co-operate over the global variable, and therefore there is no guaranteed happens-before relation.

Tagging of a class as being in use (most likely as part of a stack trace) must necessarily happen before that same class is subsequently unloaded, hence to materialize the happens-before relation also for concurrent class unloading, it should be enough to let the thread performing the unloading operation to Load Acquire the global variable. 

;;;","2021-08-04 14:35;mgronlun;Fix Request:

We should fix this in JDK17 so the VM does not crash in combination with JFR and ZGC (concurrent class unloading).

The fix is low risk.

Review mail: https://mail.openjdk.java.net/pipermail/hotspot-jfr-dev/2021-August/002927.html

Change has been reviewed by: egahlin

Testing: regular jdk_jfr tests;;;","2021-08-04 14:51;mgronlun;ILW = HMM = P2

Can happen when running JFR together with ZGC.;;;","2021-08-04 17:47;kvn;Fix request for JDK 17 is approved.;;;","2021-08-05 02:14;roboduke;Changeset: 90f85ff7
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-08-05 09:13:26 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/90f85ff70fe6b54ecc08794269422364f2128bfb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DSA signature length value is not accurate in P11Signature,JDK-8271566,5055518,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbalao,mbalao,mbalao,2021-07-30 08:28,2021-12-13 19:06,2023-10-01 09:57,2021-12-06 12:32,,,,,,,,18,security-libs,,0,,,,,,,,,,,,,,,,,,"In DSA signatures, the length of 'q' (CKA_SUBPRIME) does not derive from the length of 'p' (CKA_PRIME). Even when some tuples are common (as seen in OpenJDK for example [1]), they are an implementation-dependent assumption. I've seen for example 'p' values of 2048 with 'q' of 256, instead of 2048 with 224.

The length of a DSA signature is the length of 'q' * 2. Thus, this [2] and this [3] does not look good to me (in the latter case assuming a CKM_DSA_SHA1 or similar DSA-based mechanism). Even when we can say 'larger does not harm', here [4] it does not hold true if we use a 256 'q'. Furthermore, with an accurate value we can avoid passing '0' here [5] and having 2 C_SignFinal native calls with 1 extra buffer allocation in the heap.

In my view, we should use an accurate value for the signature length in DSA, and we already have an API to get it from the actual key [6] (which translates to a PKCS#11 call to get the CKA_SUBPRIME attribute from a key). This API works even when the key is CKA_SENSITIVE = true (the value retrieved is not sensitive).

--
[1] - https://github.com/openjdk/jdk/blob/a066c7bed0f9aa45fb9384f75ae84943548cd859/src/java.base/share/classes/sun/security/provider/ParameterCache.java#L89
[2] - https://github.com/openjdk/jdk/blob/a066c7bed0f9aa45fb9384f75ae84943548cd859/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Signature.java#L301
[3] - https://github.com/openjdk/jdk/blob/a066c7bed0f9aa45fb9384f75ae84943548cd859/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Signature.java#L303
[4] - https://github.com/openjdk/jdk/blob/a066c7bed0f9aa45fb9384f75ae84943548cd859/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Signature.java#L827
[5] - https://github.com/openjdk/jdk/blob/a066c7bed0f9aa45fb9384f75ae84943548cd859/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Signature.java#L621
[6] - https://github.com/openjdk/jdk/blob/a066c7bed0f9aa45fb9384f75ae84943548cd859/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Key.java#L773",,,,,,,,,,,JDK-8278651,,,,,,,,,,,,,,,,,,,,,JDK-8271510,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tubf:",9223372036854775807,b27,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2021-12-06 12:32;roboduke;Changeset: ea8d3c92
Author:    Martin Balao <mbalao@openjdk.org>
Date:      2021-12-06 20:31:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ea8d3c92c69c393cdbc6c62398f1e9c6adc708d3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"sun/security/ssl/DHKeyExchange/LegacyDHEKeyExchange.java still fails due to ""An established connection was aborted by the software in your host machine""",JDK-8271560,5055511,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fguallini,dcubed,dcubed,2021-07-30 06:54,2023-03-21 02:41,2023-10-01 09:57,2021-08-30 10:30,17,,,,,,,18,security-libs,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,noreg-self,testbug,tier2,,,,,,,,,"The following test failed in the JDK17 CI:

sun/security/ssl/DHKeyExchange/LegacyDHEKeyExchange.java


Here's a snippet from the log file:

#section:main
----------messages:(4/246)----------
command: main -Djdk.tls.ephemeralDHKeySize=legacy LegacyDHEKeyExchange
reason: User specified action: run main/othervm -Djdk.tls.ephemeralDHKeySize=legacy LegacyDHEKeyExchange 
Mode: othervm [/othervm specified]
elapsed time (seconds): 0.813
----------configuration:(0/0)----------
----------System.out:(30/2358)----------
Expected exception thrown in client
Server failed: java.net.SocketException: An established connection was aborted by the software in your host machine
java.net.SocketException: An established connection was aborted by the software in your host machine
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:325)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:350)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:803)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:966)
	at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:478)
	at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:472)
	at java.base/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:160)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)
	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1500)
	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1415)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:450)
	at java.base/sun.security.ssl.SSLSocketImpl.ensureNegotiated(SSLSocketImpl.java:915)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1006)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:966)
	at SSLSocketTemplate.runServerApplication(SSLSocketTemplate.java:94)
	at LegacyDHEKeyExchange.runServerApplication(LegacyDHEKeyExchange.java:48)
	at SSLSocketTemplate.doServerSide(SSLSocketTemplate.java:280)
	at SSLSocketTemplate.startServer(SSLSocketTemplate.java:584)
	at SSLSocketTemplate.bootup(SSLSocketTemplate.java:498)
	at SSLSocketTemplate.run(SSLSocketTemplate.java:83)
	at LegacyDHEKeyExchange.main(LegacyDHEKeyExchange.java:85)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
----------System.err:(33/2528)----------
java.net.SocketException: An established connection was aborted by the software in your host machine
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:325)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:350)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:803)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:966)
	at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:478)
	at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:472)
	at java.base/sun.security.ssl.SSLSocketInputRecord.decode(SSLSocketInputRecord.java:160)
	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)
	at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1500)
	at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1415)
	at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:450)
	at java.base/sun.security.ssl.SSLSocketImpl.ensureNegotiated(SSLSocketImpl.java:915)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1006)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:966)
	at SSLSocketTemplate.runServerApplication(SSLSocketTemplate.java:94)
	at LegacyDHEKeyExchange.runServerApplication(LegacyDHEKeyExchange.java:48)
	at SSLSocketTemplate.doServerSide(SSLSocketTemplate.java:280)
	at SSLSocketTemplate.startServer(SSLSocketTemplate.java:584)
	at SSLSocketTemplate.bootup(SSLSocketTemplate.java:498)
	at SSLSocketTemplate.run(SSLSocketTemplate.java:83)
	at LegacyDHEKeyExchange.main(LegacyDHEKeyExchange.java:85)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.net.SocketException: An established connection was aborted by the software in your host machine
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.net.SocketException: An established connection was aborted by the software in your host machine
----------rerun:(41/5554)*----------


This failure message was previously seen in the follow bug,
but with a different stack trace:

JDK-8228442 DHKeyExchange/LegacyDHEKeyExchange.java failed due to ""SSLException: An established connection was aborted by the software in your host machine""

Since this is a Tier2 failure, I'm starting this bug off as a P3.",,,,,,,,,,,JDK-8273991,JDK-8273525,JDK-8273529,JDK-8304494,JDK-8304644,,,,,,,,,,,,,,,,,JDK-8228442,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,"0|i2tu9v:",9223372036854775807,b13,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2021-08-02 05:51;mullan;[~fguallini] Assigning this to you based on the related issue that you recently fixed to see if there is a connection - can you please look into this one? Thanks.;;;","2021-08-03 10:45;fguallini;Ran the test many thousands of times and got a few sporadic failures. The only way to fully stabilize it seems to be by catching and expecting both the SocketException and SSLException in the test, which is not ideal but it will help removing noise;;;","2021-08-30 10:30;roboduke;Changeset: f18c0fac
Author:    Fernando Guallini <fguallini@openjdk.org>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2021-08-30 17:28:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f18c0fac11aac833edfdc484e221518c55daa9a7
;;;","2021-09-17 05:46;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4.9.1: Prohibit the ret opcode in the code array of >= 51.0 class files,JDK-8271555,5055506,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abuckley,hseigel,hseigel,2021-07-30 06:18,2021-08-05 09:38,2023-10-01 09:57,2021-08-05 09:38,16,,,,,,,17,specification,,0,noreg-doc,,,,,,,,,,,,,,,,,"JVMS 4.9.1 ""Static Constraints"" says ""If the class file version number is 51.0 or above, then neither the jsr opcode or the jsr_w opcode may appear in the code array.""  The ret opcode should be added to this constraint because HotSpot issues a VerifyError with the following message when it encounters a ret opcode in a class file with version 51.0 or above:

exception: Bad instruction: a9
Exception Details:
  Location:
    primArray.castToByteArray([I)[B @1: ret

More specifically, in a >=51.0 class file, HotSpot treats jsr (a8), jsr_w (c9), and ret (a9) the same as the three reserved opcodes (ca, fe, ff) and the numerous undocumented opcodes (cb-fd): there are no type-checking rules for any of these opcodes, so they are unrecognized and cause VerifyErrors. This is a valid way to ""implement"" the first bullet of 4.9.1.

The constraint about jsr/jsr_w/ret should mirror the constraint about reserved/undocumented opcodes, as follows: ""If the class file version number is 51.0 or above, then instances of instructions using the jsr, jsr_w, or ret opcodes must not appear in the code array.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tu8r:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c76b3dd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] GraphBuilder::withfield should handle identity class holder,JDK-8271544,5055496,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-07-30 02:27,2021-07-30 04:03,2023-10-01 09:57,2021-07-30 04:03,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c1,lw3,lworld,,,,,,,,,,,,,,,"test/hotspot/jtreg/runtime/valhalla/inlinetypes/withfieldTests/RunWithfieldTests.java fails with -Xcomp:

#  Internal Error (/scratch/hseigel/valhalla_8269756.lworld/open/src/hotspot/share/c1/c1_GraphBuilder.cpp:2086), pid=6932, tid=6949
#  assert(holder->is_inlinetype()) failed: must be an inline klass
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-lworld3ea+0-2021-07-20-1312049.hseigel.valhalla8269756.lworld)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-lworld3ea+0-2021-07-20-1312049.hseigel.valhalla8269756.lworld, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
                               ...

Stack: [0x00007f89cebf7000,0x00007f89cecf8000],  sp=0x00007f89cecf5cb0,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x74a0c3]  GraphBuilder::withfield(int)+0x233
V  [libjvm.so+0x750efd]  GraphBuilder::iterate_bytecodes_for_block(int)+0x6dd
V  [libjvm.so+0x752cd9]  GraphBuilder::iterate_all_blocks(bool)+0x89
V  [libjvm.so+0x753f0e]  GraphBuilder::GraphBuilder(Compilation*, IRScope*)+0x55e
V  [libjvm.so+0x764bf5]  IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool)+0x3e5
V  [libjvm.so+0x764d84]  IR::IR(Compilation*, ciMethod*, int)+0xf4
V  [libjvm.so+0x7220d1]  Compilation::build_hir() [clone .part.0]+0x261
V  [libjvm.so+0x726a4a]  Compilation::compile_java_method()+0x1ba
V  [libjvm.so+0x727850]  Compilation::compile_method()+0x1d0
V  [libjvm.so+0x7282ca]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x3ca
V  [libjvm.so+0x729793]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1a3
V  [libjvm.so+0xa854e9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa86258]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x19965a1]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x199e200]  Thread::call_run()+0x100
V  [libjvm.so+0x1640e64]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tu6j:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] VerifyError in hotspot/jtreg/runtime/classFileParserBug/NameAndTypeSig.java,JDK-8271536,5055488,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,dsimms,dsimms,2021-07-30 00:57,2021-07-30 10:26,2023-10-01 09:57,2021-07-30 10:26,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,"java.lang.VerifyError: Return type must be void in <init> method
Exception Details:
  Location:
    nonVoidInitSigCFE.<init>()V @1: invokespecial
  Reason:
    Error exists in the bytecode
  Bytecode:
    0000000: 2ab7 0001 b1                           

	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:380)
	at NameAndTypeSig.main(NameAndTypeSig.java:47)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

Maybe be related to merge with JDK-8268720",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268720,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tu4r:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] TestLWorld fails during IR verification because method is not inlined,JDK-8271535,5055487,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-07-30 00:27,2021-07-30 02:38,2023-10-01 09:57,2021-07-30 02:38,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,intermittent,lw3,lworld,noreg-self,,,,,,,,,,,,,,"Scenario #1
===========
Scenario flags: [-XX:+IgnoreUnrecognizedVMOptions, -XX:-UseACmpProfile, -XX:-UseCompressedOops, -XX:FlatArrayElementMaxOops=5, -XX:FlatArrayElementMaxSize=-1, -XX:-UseArrayLoadStoreProfile, -XX:InlineFieldMaxFlatSize=-1, -XX:-InlineTypePassFieldsAsArgs, -XX:-InlineTypeReturnedAsFields]

Command Line:
c:\\ade\\mesos\\work_dir\\jib-master\\install\\2021-07-29-1743488.tobias.hartmann.valhalla_s\\windows-x64-debug.jdk\\jdk-18\\fastdebug\\bin\\java.exe -cp T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_valhalla\\classes\\3\\compiler\\valhalla\\inlinetypes\\TestLWorld.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\2021-07-29-1743488.tobias.hartmann.valhalla_s\\src.full\\open\\test\\hotspot\\jtreg\\compiler\\valhalla\\inlinetypes;T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_valhalla\\classes\\3\\test\\lib;T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_valhalla\\classes\\3\\test\\jdk\\lib\\testlibrary\\bytecode;T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_valhalla\\classes\\3\\test\\jdk\\java\\lang\\invoke\\common;T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_valhalla\\classes\\3;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\javatest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\jtreg.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\junit.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\hamcrest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\testng.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\jcommander.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\guice.jar -Djava.library.path=c:\\ade\\mesos\\work_dir\\jib-master\\install\\2021-07-29-1743488.tobias.hartmann.valhalla_s\\windows-x64-debug.test\\hotspot\\jtreg\\native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=t:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_valhalla\\tmp -XX:-TieredCompilation -Dir.framework.server.port=56427 -XX:+IgnoreUnrecognizedVMOptions -XX:-UseACmpProfile -XX:-UseCompressedOops -XX:FlatArrayElementMaxOops=5 -XX:FlatArrayElementMaxSize=-1 -XX:-UseArrayLoadStoreProfile -XX:InlineFieldMaxFlatSize=-1 -XX:-InlineTypePassFieldsAsArgs -XX:-InlineTypeReturnedAsFields -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompileCommand=log,compiler.valhalla.inlinetypes.TestLWorld::* -XX:CompileCommand=option,compiler.valhalla.inlinetypes.TestLWorld::*,bool,PrintIdeal,true -XX:CompileCommand=option,compiler.valhalla.inlinetypes.TestLWorld::*,bool,PrintOptoAssembly,true -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet -DWarmup=251 compiler.lib.ir_framework.test.TestVM compiler.valhalla.inlinetypes.TestLWorld compiler.valhalla.inlinetypes.MyValue2Inline compiler.valhalla.inlinetypes.MyValue3 compiler.valhalla.inlinetypes.MyValue1 compiler.valhalla.inlinetypes.MyValue2 compiler.valhalla.inlinetypes.MyValue3Inline

One or more @IR rules failed:

Failed IR Rules (1)
------------------
- Method ""public long compiler.valhalla.inlinetypes.TestLWorld.test112()"":
  * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, failOn={""(.*call,static  wrapper for: _new_instance_Java)"", ""(\\\\d+ (.*MemBar.*)+ ===.*)""}, applyIfAnd={}, applyIfOr={}, counts={""(\\\\d+ (.*CallStaticJava.*)+ ===.*uncommon_trap.*predicate)"", ""= 1""}, applyIfNot={})""
    - counts: Graph contains wrong number of nodes:
        Regex 1: (\\d+ (.*CallStaticJava.*)+ ===.*uncommon_trap.*predicate)
        Expected 1 but found 0 nodes.

>>> Check stdout for compilation output of the failed methods",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tu4j:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Implicit null check optimization does not hoist constant load input,JDK-8271531,5055482,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-07-29 23:45,2021-07-30 01:25,2023-10-01 09:57,2021-07-30 01:25,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,"compiler/c2/TestNPEHeapBased.java fails with:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla2/open/src/hotspot/share/opto/block.cpp:1252), pid=184256, tid=184271
#  assert(n->is_Root() || n->is_Region() || n->is_Phi() || n->is_MachMerge() || def_block->dominates(block)) failed: uses must be dominated by definitions

Current CompileTask:
C2:    492  109    b        java.util.HashSet::add (20 bytes)

Stack: [0x00007fe8faa38000,0x00007fe8fab39000],  sp=0x00007fe8fab341e0,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x6cea09]  PhaseCFG::verify() const+0x1e9
V  [libjvm.so+0xa6d4a7]  Compile::Code_Gen()+0x2c7
V  [libjvm.so+0xa76252]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1832
V  [libjvm.so+0x873b30]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6a0
V  [libjvm.so+0xa86ef9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa87c68]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x19973d1]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x199efd0]  Thread::call_run()+0x100
V  [libjvm.so+0x1641b04]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265726,,,,,JDK-8231561,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tu3f:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] [TESTBUG] Several C2 IR tests fail on AArch64,JDK-8271528,5055476,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ngasson,ngasson,ngasson,2021-07-29 22:26,2021-08-19 07:19,2023-10-01 09:57,2021-08-03 22:55,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,ir-framework,lw3,lworld,noreg-self,,,,,,,,,,,,,,The regexes need to be adjusted slightly.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268963,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2tu23:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-30 00:07;chagedorn;Hi [~ngasson], this is most likely related to JDK-8268963 (currently out for review) which tests the default regexes of the framework. It found problems on platforms other than x86-64, including aarch64. I originally took over most of the regexes from the old IR framework in Valhalla and stripped the inline specific parts. So, you could have a look at the fix for JDK-8268963 and try to apply the same type of fixes to the regexes defined in the file InlineTypes.java which are used for the inline type IR tests.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/awt/event/SequencedEvent/MultipleContextsFunctionalTest.java failed with ""Total [200] - Expected [400]""",JDK-8271519,5055465,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,dcubed,dcubed,2021-07-29 17:23,2023-09-29 09:28,2023-10-01 09:57,2022-12-01 10:12,17,18,19,20,,,,20,client-libs,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sn_111,sn_132,testbug,tier4,,,,,,,,,"The following test failed in the JDK18 CI:

java/awt/event/SequencedEvent/MultipleContextsFunctionalTest.java

Here's a snippet from the log file:

#section:main
----------messages:(5/310)----------
command: main MultipleContextsFunctionalTest
reason: User specified action: run main/othervm/timeout=30 MultipleContextsFunctionalTest 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.desktop --add-exports java.desktop/sun.awt=ALL-UNNAMED
elapsed time (seconds): 20.402
----------configuration:(4/97)----------
Boot Layer
  add modules: java.desktop         
  add exports: java.desktop/sun.awt ALL-UNNAMED

----------System.out:(2/41)----------
Total [200] - Expected [400]
Test FAILED
----------System.err:(0/0)----------
----------rerun:(44/5496)*----------

<snip>

result: Failed. Unexpected exit from test [exit code: 255]
",,,,,,,,,,,JDK-8317323,JDK-8309338,JDK-8309341,JDK-8304612,JDK-8309454,JDK-8304239,JDK-8306504,,,,,,,,,,,,,,,JDK-8305061,,,,,,,,,,,"2021-09-25 07:40;dcubed;screen.png;https://bugs.openjdk.org/secure/attachment/96570/screen.png",,,,,,x86_64,,,,,,,,,,linux,,,,"0|i2ttzn:",9223372036854775807,b27,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-02-19 06:47;dcubed;Here's a log file snippet from the jdk-19+11-628-tier4 sighting: 

java/awt/event/SequencedEvent/MultipleContextsFunctionalTest.java

----------System.out:(2/41)----------
Total [200] - Expected [400]
Test FAILED
----------System.err:(0/0)----------
----------rerun:(44/5755)*----------

<snip>

result: Failed. Unexpected exit from test [exit code: 255]
;;;","2022-11-21 08:45;dcubed;Here's a log file snippet from the jdk-20+25-1862-tier4 sighting:

java/awt/event/SequencedEvent/MultipleContextsFunctionalTest.java


#section:main
----------messages:(7/387)----------
command: main MultipleContextsFunctionalTest
reason: User specified action: run main/othervm/timeout=30 MultipleContextsFunctionalTest 
started: Mon Nov 21 04:15:09 UTC 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.desktop --add-exports java.desktop/sun.awt=ALL-UNNAMED
finished: Mon Nov 21 04:15:30 UTC 2022
elapsed time (seconds): 20.454
----------configuration:(4/97)----------
Boot Layer
  add modules: java.desktop         
  add exports: java.desktop/sun.awt ALL-UNNAMED

----------System.out:(2/41)----------
Total [200] - Expected [400]
Test FAILED
----------System.err:(0/0)----------
----------rerun:(44/5444)*----------;;;","2022-11-29 13:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11423
Date: 2022-11-29 21:36:31 +0000;;;","2022-12-01 10:12;dukebot;Changeset: 9f94cbec
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2022-12-01 18:10:31 +0000
URL:       https://git.openjdk.org/jdk/commit/9f94cbec51df7556d34fffa810e59dd9eb8521df
;;;","2023-04-19 07:15;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.
;;;","2023-04-19 07:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1282
Date: 2023-04-19 14:15:01 +0000;;;","2023-09-28 08:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2145
Date: 2023-09-23 08:47:19 +0000;;;","2023-09-28 13:49;roboduke;[jdk11u-fix-request] Approval Request from Amos
Backport;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] disallow primitive classes with super_class of 0,JDK-8271508,5055454,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,hseigel,hseigel,2021-07-29 11:29,2021-07-30 07:21,2023-10-01 09:57,2021-07-30 07:21,repo-valhalla,,,,,,,,hotspot,,0,,,,,,,,,,,,,,,,,,"Remove inline class case from this code in ClassFileParser::parse_super_class():

  if (super_class_index == 0) {
    check_property(_class_name == vmSymbols::java_lang_Object()
                   || (_access_flags.get_flags() & JVM_ACC_INLINE),
                   ""Invalid superclass index %u in class file %s"",
                   super_class_index,
                   CHECK_NULL);
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ttx7:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[ppc] [s390]: Crash in JavaThread::pd_get_top_frame_for_profiling,JDK-8271490,5055435,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lucy,lucy,lucy,2021-07-29 10:07,2021-09-15 05:40,2023-10-01 09:57,2021-08-30 05:32,,,,,,,,18,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sap-interest,,,,,,,,,,,,,"Running jar related jtreg tests, we observed a SIGSEGV crash in pd_get_top_frame_for_profiling(). 

",,,,,,,,,,,JDK-8273637,JDK-8273812,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,s390x,,,,,,,,,linux,,,,"0|i2ttsz:",9223372036854775807,b13,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-07-29 10:21;lucy;Here is some more information about the crash.

Call Stack:

Stack: [0x000003ff3ff00000,0x000003ff40000000],  sp=0x000003ff3fffe488,  free space=1017k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12c8f12]  JavaThread::pd_get_top_frame_for_profiling(frame*, void*, bool)+0x142
V  [libjvm.so+0xb1020c]  JfrGetCallTrace::get_topframe(void*, frame&)+0x3c
V  [libjvm.so+0xba0b08]  OSThreadSampler::protected_task(os::SuspendedThreadTaskContext const&)+0x98
V  [libjvm.so+0xff33c4]  os::SuspendedThreadTask::internal_do_task()+0x14c
V  [libjvm.so+0xfe3c9c]  os::SuspendedThreadTask::run()+0x24
V  [libjvm.so+0xba0c66]  JfrThreadSampleClosure::sample_thread_in_java(JavaThread*, JfrStackFrame*, unsigned int)+0x66
V  [libjvm.so+0xba1718]  JfrThreadSampleClosure::do_sample_thread(JavaThread*, JfrStackFrame*, unsigned int, JfrSampleType)+0x278
V  [libjvm.so+0xba4f54]  JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**) [clone .constprop.62]+0x284
V  [libjvm.so+0xba5e54]  JfrThreadSampler::run()+0x2ec
V  [libjvm.so+0x12adc9c]  Thread::call_run()+0x9c
V  [libjvm.so+0xff5ab0]  thread_native_entry(Thread*)+0x128

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0xfffffffffffff000

failing instruction: e320 6008 0004   LG   r2,8(r0,r6)
contents of r6:  0xffffffffffffff90

The crash was observed when testing a jdk built from jdk11u-dev sources. Analysis revealed that the code defect is not specific to jdk11 but has been lingering around quite a while. The issue will occur (in this form) only one s390 and ppc platforms. 

The fix will first be proposed for OpenJDK/jdk (the head revision). Backports to older jdk releases will follow after integrated into head. ;;;","2021-08-30 05:32;roboduke;Changeset: 276b07b3
Author:    Lutz Schmidt <lucy@openjdk.org>
Date:      2021-08-30 12:31:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/276b07b36af01d339e48baada7a512451fe34afe
;;;","2021-09-10 05:25;lucy;jdk17u backport request 

I would like to backport this fix to jdk17u. The issue is also present in jdk17. The patch applies cleanly.

Backport PR: https://github.com/openjdk/jdk17u/pull/68
;;;","2021-09-11 13:32;lucy;jdk11u-dev backport request 

I would like to backport this fix to jdk11u-dev. The issue is also present in jdk11. At SAP, we observe jfr crashes intermittently in our jdk11 test runs.

The fix did not apply cleanly. Therefore, a formal review is required.

Backport PR: https://github.com/openjdk/jdk11u-dev/pull/333;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(doc) Clarify Filter Factory example,JDK-8271489,5055434,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2021-07-29 09:28,2021-08-04 18:25,2023-10-01 09:57,2021-07-29 13:23,,,,,,,,17,core-libs,,0,doc-only,,,,,,,,,,,,,,,,,"In the ObjectInputFilter class javadoc the FilterInThread example
uses the term 'prepend' but the context isn't clear about the execution order.
The term 'wrap' would be clearer.",,,,,,,,,,,JDK-8271677,JDK-8271516,JDK-8271812,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ttsr:",9223372036854775807,b34,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,,,"2021-07-29 13:23;roboduke;Changeset: 286d3136
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2021-07-29 20:22:02 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/286d31363551b00c4b3f50f5ee388f8e7875d0a1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Memory corruption due to out of bound access in MacroAssembler::move_helper,JDK-8271486,5055430,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2021-07-29 07:47,2021-07-29 10:45,2023-10-01 09:57,2021-07-29 10:45,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,intermittent,lw3,lworld,,,,,,,,,,,,,,"Out of bounds memory accesses in MacroAssembler::move_helper due to from->value() == -1 lead to memory corruption manifesting in weird crashes like below:

  // Update register states
  reg_state[from->value()] = reg_writable;
  reg_state[to->value()] = reg_written;


# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f5781a28a5d, pid=5895, tid=5913
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-lworld3ea+0-2021-07-27-1101206.david.simms.valhalla)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-lworld3ea+0-2021-07-27-1101206.david.simms.valhalla, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# C  [libc.so.6+0x8fa5d]  __memset_sse2+0x5d

Current CompileTask:
C2:   1733  252    b        compiler.valhalla.inlinetypes.MyValue1::<init> (90 bytes)

Stack: [0x00007f57532fb000,0x00007f57533fc000],  sp=0x00007f57533fa798,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libc.so.6+0x8fa5d]  __memset_sse2+0x5d
V  [libjvm.so+0x80cb09]  ResourceMarkImpl::~ResourceMarkImpl()+0x99
V  [libjvm.so+0xa66342]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x822
V  [libjvm.so+0xa67328]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x196b50c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x1971790]  Thread::call_run()+0x100
V  [libjvm.so+0x16233f4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ttrv:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Javadoc ""Method Summary"" table is misaligned if overridden JDK method has {@inheritDoc} tag",JDK-8271485,5055429,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,aghaisas,aghaisas,2021-07-29 07:44,2021-10-26 06:50,2023-10-01 09:57,2021-08-10 05:21,jfx17,,,,,,,jfx17,javafx,,0,noreg-doc,sn_98,sn_99,,,,,,,,,,,,,,,"The Javadoc HTML table for a class is messed up if any of the method documentation contains {@inheritDoc} tag.

This is specifically observed with openjfx17 javadoc, which are built with JDK 16.

It is not observed with openjfx16 javadoc which were build with JDK 15.

This came up during review of JDK-8250590.
See - https://github.com/openjdk/jfx/pull/589#issuecomment-888949660

It looks like this is the result of a javadoc tool bug that was introduced in JDK 16, although even in earlier versions of the JDK, the table has some problems with styling on the rows with overridden methods.",,,,,,,,,,,JDK-8272226,,,,,,,,,,,,JDK-8271083,,,,,,,,,JDK-8227765,JDK-8250590,,,,JDK-8157000,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2ttrn:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-07-29 07:57;kcr;We need to fix this for JavaFX 17.

I can see three possible solutions:

1. Remove all `{@inheritDoc}` tags from overridden JDK methods
2. Build the javadocs with JDK 17 (this is a bit problematic)
3. Add the ""--override-methods=summary"" flag to suppress overridden methods that don't have additional documentation, which will avoid generating docs for the overridden methods in the first place

I recommend option 3, since we don't currently get any useful documentation for the overridden methods and it matches the way the JDK docs are generated. The thinking behind the JDK change in JDK 10 (see JDK-8157000) is that there is no purpose in adding an entry for a method, such as toString or hashCode that you are only overriding to provide an implementation in the subclass. Unless there are API implications that a user of the API needs to know about, this is just an implementation detail and need not be in the generated docs.

In we go with option 3, then we should probably also do option 1 as a cleanup step in JavaFX 18;;;","2021-08-10 05:21;roboduke;Changeset: fbeb0bbd
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-08-10 12:19:55 +0000
URL:       https://git.openjdk.java.net/jfx/commit/fbeb0bbd1cec6616b01e8376013f833a191124e8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tree-/TableCell: NPE when accessing edit event from startEdit,JDK-8271484,5055428,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fastegal,fastegal,fastegal,2021-07-29 06:11,2021-08-18 05:06,2023-10-01 09:57,2021-08-11 02:30,jfx16,,,,,,,jfx18,javafx,,0,CellEditEvent,startEdit,TableCell,TreeTableCell,,,,,,,,,,,,,,"failing test: 

    @Test
    public void testEditStartEventAfterStartOnCell() {
        setupForEditing();
        int editingIndex = 1;
        cell.updateIndex(editingIndex);
        List<CellEditEvent<?, ?>> events = new ArrayList<>();
        editingColumn.setOnEditStart(events::add);
        cell.startEdit();
        assertEquals(editingColumn, events.get(0).getTableColumn());
    }

underlying reason is startEdit creating the event with an incorrect location:

            CellEditEvent<S,?> editEvent = new CellEditEvent<>(
                table,
                 table.getEditingCell(),
                TableColumn.editStartEvent(),
                null
            );

issue is that table might not yet be in editing state (JDK-8187474),
fix is similar to that of the corresponding issue for ListCell JDK-8187432 - use cell state to create the tablePosition

Note: the NPE (vs. having an incorrect location) is caused by JDK-8269871 which accesses properties of the position without null guard

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8187474,JDK-8269871,JDK-8187432,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ttrf:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-08-11 02:30;roboduke;Changeset: 852d2875
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-08-11 09:28:53 +0000
URL:       https://git.openjdk.java.net/jfx/commit/852d2875248040ea5eff2b41bd23a4fde02486a9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Checkin for correcting one missed file in JDK-6849922 ,JDK-8271483,5055427,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aj,aj,aj,2021-07-29 05:54,2021-10-11 05:12,2023-10-01 09:57,2021-07-29 06:00,8,,,,,,,8u321,client-libs,,0,sqebug,testbug,,,,,,,,,,,,,,,,"Missed removing file test/java/awt/Choice/ChoiceKeyEventReaction/ChoiceKeyEventReaction.html in the commit.
This check-in is for correcting this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6849922,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ttr7:",9223372036854775807,b01,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tree-/TableCell: inconsistent edit event firing pattern,JDK-8271474,5055417,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fastegal,fastegal,fastegal,2021-07-29 04:53,2021-10-01 16:51,2023-10-01 09:57,2021-09-24 09:08,jfx16,,,,,,,jfx18,javafx,,0,CellEditEvent,TableCell,TreeTableCell,,,,,,,,,,,,,,,"in commit/cancelEdit:

     if (table != null) 
        // create and fire edit event

in startEdit:
     
     if (column != null)
        // create and fire edit event     

digging into history: for cancel, the current pattern (null check of table) was added with JDK-8116392: before it checked column for null

failing test:

     @Test
     public void testEditCancelNoColumn() {
         table.setEditable(true);
         cell.updateTableView(table);
         // force artificially not-empty cell state
         TableCellShim.set_lockItemOnEdit(cell, true);
         CellShim.updateItem(cell, ""something"", false);
         // start edit: succeeds without firing event (null check  
against column)
         cell.startEdit();
         assertTrue(cell.isEditing());
         // cancel edit: NPE from Event.fire - all params  
must be != null
         cell.cancelEdit();
         assertFalse(cell.isEditing());
     }

notes:
- the event is fired on the column as target, so the column must not be null
- without guarding against null table, throws NPE due to JDK-8269871 (CellEditEvent is incorrectly? implemented to require !null table)
- same pattern in TreeTableCell which looks like c&p'ed from TableCell

see also: https://mail.openjdk.java.net/pipermail/openjfx-dev/2021-July/031106.html

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269871,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ttp7:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-08-25 06:12;fastegal;Note: the part below was originally included in JDK-8269871, on further analysis moved to this (because it must be resolved one way or another to fix this)

CellEditEvent throws NPE if instantiated with null table

might be considered a strengthening of precondition, because the table is passed as source to super. Arguably, though because that role is an implementation detail. At least, it should be specified as requiring not-null
 
    /**
     * Strengthened precondition: event must handle null source.
     */
    @Test
    public void testNullTable() {
        CellEditEvent<?, ?> ev = new CellEditEvent<Object, Object>(null, // null table
                new TablePosition<>(null, -1, null), editAnyEvent(), null);
    }
    

suggested fix: 

- remove throwing on null table: null source is allowed in a general event, nothing special in cellEditEvents, that given tableView is never used later on, the event fired onto the column isn't dispatched anywhere else ..
;;;","2021-09-24 09:08;roboduke;Changeset: 55faac49
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-09-24 16:06:27 +0000
URL:       https://git.openjdk.java.net/jfx/commit/55faac49082ee8c92893dac15d2777011ec7dca0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[IR Framework] Rare occurrence of ""<!-- safepoint while printing -->"" in PrintIdeal/PrintOptoAssembly can let tests fail",JDK-8271471,5055414,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,chagedorn,chagedorn,2021-07-29 04:44,2022-12-27 01:03,2023-10-01 09:57,2021-08-16 07:53,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,ir-framework,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,,,,,,,,,,,"The VM sometimes prints ""<!-- safepoint while printing -->"" in the middle of emitting the PrintIdeal or PrintOptoAssembly output which could lead to test failures.

This is rare but was already observed twice so far. Once in the converted Valhalla tests and once while running the framework internal TestIRMatching.java test.",,,,,,,,,,,JDK-8296863,JDK-8299356,,,,,,,,,,,,,,,,,JDK-8296852,,,JDK-8274911,JDK-8254129,JDK-8284115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ttoj:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-29 04:47;chagedorn;ILW = Intermittent test failures due to interfering output by VM, rare, no workaround = MLH = P4;;;","2021-08-16 07:53;roboduke;Changeset: 36777345
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-08-16 14:51:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3677734584859e1b4bea65f6719e839f949c9236
;;;","2022-12-22 05:00;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nightly testing passed.;;;","2022-12-22 05:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/969
Date: 2022-12-22 13:05:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[jdk8u] StackGap test fails on aarch64 due to ""-m64""",JDK-8271466,5055409,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,jiefu,jiefu,2021-07-29 03:56,2021-08-05 14:24,2023-10-01 09:57,2021-08-01 23:25,8,,,,,,,openjdk8u312,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,tencent-interest,,,,,,,,,,,,,,,"This is on behalf of <xiangyuan@tencent.com>.

3 tests fail on aarch64 platform.
 
1.      hotspot/test/runtime/StackGap/testme.sh
Error Info: gcc: error: unrecognized command line option '-m64'
When compiling stack-gap, this case passes compiler option '-m64' to gcc, which is unrecoginized by gcc on aarch64.
 
2.      jdk/test/sun/management/jmxremote/bootstrap/CustomLauncherTest.java
Error Info: [jdk/test/sun/management/jmxremote/bootstrap/linux-aarch64/launcher] does not exist. Skipping the test
 
This testcase depends on a pre-built binary launcher, which is placed the directory ""jdk/test/sun/management/jmxremote/bootstrap/{OS-arch}/launcher"".
Now there isn't include the file ""linux-aarch64/launcher"".
 
3.      jdk/test/sun/security/pkcs11/Secmod/TestNssDbSqlite.java
Error Info: Unsupported OS, skipping: Linux-aarch64-64
 
File jdk/test/sun/security/pkcs11/PKCS11Test.java defines a hashmap named osMap to help to find some native libs on different platform, which doesn't include aarch64.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8164322,JDK-8267721,JDK-8209011,JDK-8240604,,,,,,,,,other,,,,,,,,,,linux,,,,"0|i2ttnf:",9223372036854775807,b01,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-01 23:25;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/2f7a380c9a0a
User:  andrew
Date:  2021-08-02 06:23:36 +0000
;;;","2021-08-05 14:24;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/2f7a380c9a0a
User:  andrew
Date:  2021-08-05 21:14:14 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Missing NegativeArraySizeException when creating StringBuilder with negative capacity,JDK-8271459,5055168,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,chagedorn,webbuggrp,webbuggrp,2021-07-26 19:14,2023-05-14 23:11,2023-10-01 09:57,2021-10-05 00:03,11,16,17,18,8,,,18,hotspot,,0,additional-information-received,c2,dcsswa,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,reproducer-yes,webbug,,,,"ADDITIONAL SYSTEM INFORMATION :
# Java version
java version ""16.0.2"" 2021-07-20
Java(TM) SE Runtime Environment (build 16.0.2+7-67)
Java HotSpot(TM) 64-Bit Server VM (build 16.0.2+7-67, mixed mode, sharing)

# Operating system details
$ cat /etc/*release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=20.04
DISTRIB_CODENAME=focal
DISTRIB_DESCRIPTION=""Ubuntu 20.04.2 LTS""
NAME=""Ubuntu""
VERSION=""20.04.2 LTS (Focal Fossa)""
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=""Ubuntu 20.04.2 LTS""
VERSION_ID=""20.04""
HOME_URL=""https://www.ubuntu.com/""
SUPPORT_URL=""https://help.ubuntu.com/""
BUG_REPORT_URL=""https://bugs.launchpad.net/ubuntu/""
PRIVACY_POLICY_URL=""https://www.ubuntu.com/legal/terms-and-policies/privacy-policy""
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal

$ uname -a
Linux zzq-ThinkPad-T470 5.4.0-77-generic #86-Ubuntu SMP Thu Jun 17 02:35:03 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux

A DESCRIPTION OF THE PROBLEM :
Different outputs of the attached program are observed between different compilation tiers. This bug affects Oracle 1.8.0_301, 11.0.12, 16.0.2 and early access build 17-ea+32-2679 and 18-ea+7-288.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
# Compile
$ javac C.java

# Default or compilation up to level 4
$ java C

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
10000
ACTUAL -
# Non-deterministic
5597

---------- BEGIN SOURCE ----------
# C.java
(Attached.)
public class C {

    static String m() {
        StringBuilder sb = new StringBuilder(-1);
        return sb.toString();
    }

    public static void main(String[] args) {
        int sum = 0;
        for (int i = 0; i < 10_000; ++i) {
            try {
                m();
            } catch (Throwable e) {
                sum += 1;
            }
        }
        System.out.println(sum); // should be 10_000
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
# Compilation up to level 1
$ java -XX:TieredStopAtLevel=1 C
# Output (correct)
10000

# Interpreter or compilation up to level 0
$ java -Xint C
# Output (correct)
10000

FREQUENCY : always


",,,,,,,,,,,JDK-8275042,JDK-8275093,JDK-8275198,JDK-8295330,,,,,,,,,,,,,,,JI-9072446,,,,,,,,JDK-8295322,,,,,,"2021-07-28 23:58;sswsharm;test.java;https://bugs.openjdk.org/secure/attachment/95841/test.java",,,,,,generic,,,,,,,,,,generic,,,,"0|i2tsez:",9223372036854775807,b18,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-07-29 00:07;sswsharm;Issue is reproduced. This test case executes properly till JDK7 and produces output ""10000"" but fails from JDK 8 onwards

OS: Windows 10
JDK 7u321: Pass
Output: 10000

JDK 8: Fail
Output: 5566

JDK 8u301:fail
Output:5829

JDK 17ea32:Fail
Output:5653

However, customer workaround produces proper output for all JDKs
# Compilation up to level 1
$ java -XX:TieredStopAtLevel=1 test
# Output (correct)
10000

# Interpreter or compilation up to level 0
$ java -Xint test
# Output (correct)
10000

Moving it to Dev team for further analysis.;;;","2021-07-29 03:17;chagedorn;ILW = Incorrect execution of compiled C2 code, reproducible with simple test, use -XX:-OptimizeStringConcat = HMM = P2;;;","2021-10-05 00:03;roboduke;Changeset: 3953e077
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-10-05 07:02:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3953e0774c59c5e936e752aa08b6b6778e232994
;;;","2021-10-11 05:18;thartmann;Fix request (17u):
The patch fixes a bug in C2 that leads to incorrect execution of compiled code. The fix is low risk (bailout from optimization) and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch did not apply cleanly due to changes in IRNode.java (test code).;;;","2021-10-11 10:46;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Risk: see 17u backport comment above. Doesn't apply cleanly. Review: https://github.com/openjdk/jdk11u-dev/pull/510;;;","2022-01-18 22:11;pnarayanaswa;Additional Information from submitter:
============================
Thanks for the fix. I believe the fix should be backported to jdk8u as well, because I am still able to reproduce this bug in 8u321 released today (Jan 18, 2022).
java version ""1.8.0_321""
Java(TM) SE Runtime Environment (build 1.8.0_321-b07)
Java HotSpot(TM) 64-Bit Server VM (build 25.321-b07, mixed mode);;;","2022-02-03 06:33;enikitin;Tests provided (the   compiler/c2/irTests/stringopts/TestNegativeArraySize.java and test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestIRMatching.java) have been run during ATR18 and earlier builds, have shown no failures. I consider this enough to verify the bug
;;;","2022-08-23 05:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/111
Date: 2022-08-23 12:47:26 +0000;;;","2022-08-23 23:24;apavlyutkin;Fix request (8u)

The patch fixes loosing of NegativeArraySizeException on using StringBuilder of negative capacity. The patch from jdk-11 is applied cleanly except the path suffling.

Verification (amd64/Ubuntu 20.04): the reproducer throws 10000 of 10000 exceptions, and only ~55% (behaviour is non-deterministic) before the patch is applied

Regression: hotspot/test/runtime;;;","2023-05-14 21:53;pnarayanaswa;Additional Information from submitter:
===========================
Thanks for back porting to jdk8u. However, for some reason, the bug is still reproducible on 8u371.;;;","2023-05-14 23:11;apavlyutkin;Will check it, is there any how-to-reproduce routine available? Thank you;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
java.nio.file.InvalidPathException: Malformed input or input contains unmappable characters,JDK-8271447,5055390,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,dholmes,dholmes,2021-07-28 18:31,2022-01-10 09:35,2023-10-01 09:57,2021-12-22 06:00,11,17,18,,,,,18,hotspot,,0,intermittent,tier3,,,,,,,,,,,,,,,,"[1511.486s][error][jfr         ] Could not create chunk in repository /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S17989/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23b69376-3742-4a7a-a4f1-0c81320b3a55/runs/b68b5f86-b066-4a8e-b4ec-ad348c68ed23/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java/scratch/0/java.io.tmpdir/2021_07_28_23_35_26_296097, class java.nio.file.InvalidPathException: Malformed input or input contains unmappable characters: 2021_07_29_00_00_34_??????.jfr
[1511.487s][error][jfr,system  ] Could not create chunk in repository /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S17989/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23b69376-3742-4a7a-a4f1-0c81320b3a55/runs/b68b5f86-b066-4a8e-b4ec-ad348c68ed23/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java/scratch/0/java.io.tmpdir/2021_07_28_23_35_26_296097, class java.nio.file.InvalidPathException: Malformed input or input contains unmappable characters: 2021_07_29_00_00_34_??????.jfr
[1511.488s][error][jfr,system  ] An irrecoverable error in Jfr. Shutting down VM...",,,,,,,,,,,JDK-8279173,JDK-8279754,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ttj7:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-07-28 18:34;dholmes;Initially filed in JFR subcomponent to see where this filename is originating.;;;","2021-07-29 06:26;dcubed;Good catch! I was focused on this part of the log which is after the JFR failure:

Failed to parse file /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S17989/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23b69376-3742-4a7a-a4f1-0c81320b3a55/runs/b68b5f86-b066-4a8e-b4ec-ad348c68ed23/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java/scratch/0/perfmon-files/Perfmon.1627516857355.out
Cannot parse null string
Unexpected exception Connection reset during communication. Check process module status.
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
	at java.base/java.util.Arrays$ArrayList.get(Arrays.java:4165)
	at applications.kitchensink.process.picker.modules.Toolkit$LinuxToolkit.setMetrics(MonitorPickerModule.java:223)
	at applications.kitchensink.process.picker.modules.Toolkit.getSystemMetrics(MonitorPickerModule.java:123)
	at applications.kitchensink.process.picker.modules.MonitorPickerModule.execute(MonitorPickerModule.java:64)
	at applications.kitchensink.process.picker.modules.PickerModule.run(PickerModule.java:140)
	at java.base/java.lang.Thread.run(Thread.java:833)
[Thu Jul 29 00:01:58 UTC 2021] (1627516918542) Picker module is about to shutdown
Picker module expected time before shutdown for: Jcmd: 30s
Picker module expected time before shutdown for: Jfr: 3m 20s
Picker module expected time before shutdown for: Jstat: 5m
Picker module expected time before shutdown for: Monitor: 1m
Picker module expected time before shutdown for: NMT: 1m
Picker module expected time before shutdown for: Perfmon: 5m
Picker module finished at [Thu Jul 29 00:01:58 UTC 2021]: Jcmd
Picker module finished at [Thu Jul 29 00:01:58 UTC 2021]: Jfr
Picker module finished at [Thu Jul 29 00:01:58 UTC 2021]: Jstat
Picker module finished at [Thu Jul 29 00:01:58 UTC 2021]: Perfmon
Picker module finished at [Thu Jul 29 00:01:58 UTC 2021]: Monitor
Picker module finished at [Thu Jul 29 00:01:58 UTC 2021]: NMT
[Thu Jul 29 00:01:58 UTC 2021] (1627516918576) Picker module has been shutdown
[Thu Jul 29 00:01:58 UTC 2021] (1627516918576) Stress process is about to shutdown
Going to request to stop or kill stress process: 296097
WARNING: The process 296097 has already finished.
[Thu Jul 29 00:01:58 UTC 2021] (1627516918577) Stress process has been shutdown
[Thu Jul 29 00:01:58 UTC 2021] Execution finished.
----------rerun:(39/7849)*----------;;;","2021-12-07 08:54;egahlin;This is how the filename is generated:

String.format(""%s_%02d%s"", filename, counter, FILE_EXTENSION);

;;;","2021-12-17 03:00;egahlin;Further investigation has revealed that it can be reproduced with -Duser.language=ar;;;","2021-12-21 18:51;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/64
Date: 2021-12-22 00:58:44 +0000
;;;","2021-12-22 06:00;roboduke;Changeset: e49d4a98
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-12-22 13:59:20 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/e49d4a9870c19f55a1d5473743880b415a8ead3c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProblemList javax/sound/midi/Sequencer/Looping.java,JDK-8271412,5055352,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2021-07-28 10:40,2021-08-04 18:24,2023-10-01 09:57,2021-07-28 11:54,17,,,,,,,17,client-libs,,0,tier3,,,,,,,,,,,,,,,,,"In order to reduce the noise in the CIs, I'm ProblemListing:

javax/sound/midi/Sequencer/Looping.java

There are 7 sightings in the JDK17 and JDK18 CIs; there
are 6 more sightings spread across JDK11u, JDK13,
JDK15 and JDK16.",,,,,,,,,,,JDK-8271672,JDK-8271808,JDK-8271441,,,,,,,,,,,,,,,,,,,JDK-8136897,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ttar:",9223372036854775807,b34,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7d98911c,,,,,,,,,"2021-07-28 10:50;dcubed;Here's the context diff for the proposed fix:

$ git diff
diff --git a/test/jdk/ProblemList.txt b/test/jdk/ProblemList.txt
index 93ce162a185..ee203564b7b 100644
--- a/test/jdk/ProblemList.txt
+++ b/test/jdk/ProblemList.txt
@@ -703,6 +703,7 @@ javax/sound/sampled/Mixers/DisabledAssertionCrash.java 7067310 generic-all
 
 javax/sound/midi/Sequencer/Recording.java 8167580,8265485 linux-all,macosx-aarch64
 javax/sound/midi/Sequencer/MetaCallback.java 8178698 linux-all
+javax/sound/midi/Sequencer/Looping.java 8136897 generic-all
 
 ############################################################################;;;","2021-07-28 11:54;roboduke;Changeset: 7bf72ce3
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-07-28 18:52:55 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/7bf72ce301de80f4126607c2ef51d6df8c5849cf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Kitchensink failed with ""assert(early->flag() == current->flag()) failed: Should be the same""",JDK-8271406,5055344,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,dcubed,dcubed,2021-07-28 09:36,2023-09-13 20:10,2023-10-01 09:57,2022-05-27 05:19,17,19,,,,,,19,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,nmt,test-bigapps-Kitchensink,,,,,,,,,,,,,"The following test failed in a local run on my Ubuntu 20.04 machine:

applications/kitchensink/Kitchensink.java

I'm tested the fixes for JDK-8271251 and JDK-8271348 and I've
applied those fixes to a JDK17 repo baselined at:

commit 377a08679be8f56c95b55c5db9f6044fbf2ee0be
Author: Daniel D. Daugherty <daniel.daugherty@oracle.com>
Date:   Tue Jul 27 14:55:47 2021 -0400

    8271348: Add stronger sanity check of thread state when polling for safepoin
t/handshakes

commit e642f16f74d4beacf996d76c0de09379c27dd868
Author: Daniel D. Daugherty <daniel.daugherty@oracle.com>
Date:   Tue Jul 27 17:07:57 2021 -0400

    8271251: JavaThread::java_suspend() fails with ""fatal error: Illegal threads
tate encountered: 6""

commit fbe28e4ee1f1ff7fb617c2e1f96c04f4b371fa2b
Author: Hannes Wallnöfer <hannesw@openjdk.org>
Date:   Tue Jul 27 19:28:54 2021 +0000

    8270866: NPE in DocTreePath.getTreePath()
    
    Reviewed-by: jjg

Here's a snippet from the log file:

The tail of stress stdout is:
For random generator using seed: 2328450134296637374
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=2328450134296637374"" to command line.
Stress process main method is started.
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/work/shared/bug_hunt/8271251_for_jdk17.git/open/src/hotspot/share/services/memReporter.cpp:787), pid=162286, tid=162361
#  assert(early->flag() == current->flag()) failed: Should be the same
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (slowdebug build 17-internal+0-LTS-2021-07-27-2112574.dcubed...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 17-internal+0-LTS-2021-07-27-2112574.dcubed..., mixed mode, sharing, tiered, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xeaf280]  MemDetailDiffReporter::diff_virtual_memory_site(VirtualMemoryAllocationSite const*, VirtualMemoryAllocationSite const*) const+0x4a
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /work/shared/bug_hunt/8271251_for_jdk17.git/build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/core.162286)
#
# JFR recording file will be written. Location: /work/shared/bug_hunt/8271251_for_jdk17.git/build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/hs_err_pid162286.jfr
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /work/shared/bug_hunt/8271251_for_jdk17.git/build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink_java/scratch/0/hs_err_pid162286.log
[thread 166384 also had an error][thread 166385 also had an error]

#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(156/14455)----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007feea82e5d50):  JavaThread ""Attach Listener"" daemon [_thread_in_vm, id=162361, stack(0x00007fe65acfd000,0x00007fe65adfe000)]

Stack: [0x00007fe65acfd000,0x00007fe65adfe000],  sp=0x00007fe65adfc030,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xeaf280]  MemDetailDiffReporter::diff_virtual_memory_site(VirtualMemoryAllocationSite const*, VirtualMemoryAllocationSite const*) const+0x4a
V  [libjvm.so+0xeaee03]  MemDetailDiffReporter::diff_virtual_memory_sites() const+0x16b
V  [libjvm.so+0xeaeafc]  MemDetailDiffReporter::report_diff()+0x30
V  [libjvm.so+0xf38d51]  NMTDCmd::report_diff(bool, unsigned long)+0x1ad
V  [libjvm.so+0xf38998]  NMTDCmd::execute(DCmdSource, JavaThread*)+0x540
V  [libjvm.so+0x8c8426]  DCmd::parse_and_execute(DCmdSource, outputStream*, char const*, char, JavaThread*)+0x22c
V  [libjvm.so+0x55aa4e]  jcmd(AttachOperation*, outputStream*)+0x4a
V  [libjvm.so+0x55b466]  attach_listener_thread_entry(JavaThread*, JavaThread*)+0x349
V  [libjvm.so+0x118a3fc]  JavaThread::thread_main_inner()+0x14c
V  [libjvm.so+0x118a2a8]  JavaThread::run()+0x11e
V  [libjvm.so+0x1187ba0]  Thread::call_run()+0x180
V  [libjvm.so+0xf89773]  thread_native_entry(Thread*)+0x18f

Since this is a crash in NMT code, I'm starting this bug off
in hotspot/runtime.",,,,,,,,,,,JDK-8315631,JDK-8315474,JDK-8310739,,,,,,,,,,,,,,,,,,,JDK-8306428,,,,,,,,,,,"2021-07-28 09:40;dcubed;jdk-17+32_8271251,8271348_linux.8271406.zip;https://bugs.openjdk.org/secure/attachment/95834/jdk-17%2B32_8271251%2C8271348_linux.8271406.zip",,,,,,x86_64,,,,,,,,,,,,,,"0|i2tt8z:",9223372036854775807,b25,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-28 09:40;dcubed;$ unzip -l jdk-17+32_8271251,8271348_linux.8271406.zip
Archive:  jdk-17+32_8271251,8271348_linux.8271406.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
   187911  2021-07-27 19:29   test_failures.2021-07-27-175827/Kitchensink.jtr.slowdebug
   406110  2021-07-27 19:19   test_failures.2021-07-27-175827/hs_err_pid162286.log
---------                     -------
   594021                     2 files;;;","2021-07-28 11:43;dcubed;The failure did not reproduce in a re-run with the same bits.

The failure did not reproduce in a second re-run with the same bits.

The failure did not reproduce in a third re-run with the same bits.;;;","2021-08-03 11:23;mseledtsov;ILW = HLL = P4;;;","2022-01-26 13:11;dcubed;Here's the crashing thread's stack from the jdk-19+7-367-tier3 sighting: 

applications/runthese/RunThese30M.java

---------------  T H R E A D  ---------------

Current thread (0x0000018cfcc65f90):  JavaThread ""Attach Listener"" daemon [_thread_in_vm, id=56916, stack(0x000000080df00000,0x000000080e000000)]

Stack: [0x000000080df00000,0x000000080e000000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xbcbb01]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xe0d49e]  VMError::report+0x101e  (vmError.cpp:828)
V  [jvm.dll+0xe0ee9e]  VMError::report_and_die+0x7fe  (vmError.cpp:1656)
V  [jvm.dll+0xe0f624]  VMError::report_and_die+0x64  (vmError.cpp:1437)
V  [jvm.dll+0x53cef7]  report_vm_error+0xb7  (debug.cpp:283)
V  [jvm.dll+0xb0ef3f]  MemDetailDiffReporter::diff_virtual_memory_sites+0x14f  (memReporter.cpp:735)
V  [jvm.dll+0xb88572]  NMTDCmd::report_diff+0x1f2  (nmtDCmd.cpp:179)
V  [jvm.dll+0xb8808d]  NMTDCmd::execute+0x26d  (nmtDCmd.cpp:139)
V  [jvm.dll+0x5b96df]  DCmd::parse_and_execute+0x2ff  (diagnosticFramework.cpp:409)
V  [jvm.dll+0x2ecd88]  jcmd+0x68  (attachListener.cpp:204)
V  [jvm.dll+0x2ed741]  attach_listener_thread_entry+0x2c1  (attachListener.cpp:427)
V  [jvm.dll+0xd8be87]  JavaThread::thread_main_inner+0x297  (thread.cpp:1298)
V  [jvm.dll+0xd819d4]  Thread::call_run+0x1b4  (thread.cpp:363)
V  [jvm.dll+0xbca4b9]  thread_native_entry+0xb9  (os_windows.cpp:544)
C  [ucrtbase.dll+0x21bb2]
C  [KERNEL32.DLL+0x17034]
C  [ntdll.dll+0x52651];;;","2022-05-10 11:56;hseigel;[~zgu] Hi Zhengyu, is there additional information that we could add to this bug that would be helpful in figuring this issue?  It fails in our internal testing.;;;","2022-05-10 12:19;zgu;[~hseigel]
Hi Harold, 

I would like to try following patch, would you be able to test it? or you want me to file another CR to get the patch in?

diff --git a/src/hotspot/share/services/memReporter.cpp b/src/hotspot/share/services/memReporter.cpp
index e32511d83b5..112d12a51ac 100644
--- a/src/hotspot/share/services/memReporter.cpp
+++ b/src/hotspot/share/services/memReporter.cpp
@@ -793,7 +793,8 @@ void MemDetailDiffReporter::old_virtual_memory_site(const VirtualMemoryAllocatio
 
 void MemDetailDiffReporter::diff_virtual_memory_site(const VirtualMemoryAllocationSite* early,
   const VirtualMemoryAllocationSite* current) const {
-  assert(early->flag() == current->flag(), ""Should be the same"");
+  assert(early->flag() == current->flag() || early->flag() == mtNone,
+    ""Expect the same flag, but %s != %s"", NMTUtil::flag_to_name(early->flag()), NMTUtil::flag_to_name(current->flag()));
   diff_virtual_memory_site(current->call_stack(), current->reserved(), current->committed(),
     early->reserved(), early->committed(), current->flag());
 }

;;;","2022-05-26 08:54;coleenp;[~zgu] I tested with and without your fix and the bug couldn't reproduce it with either, so logically, your fix seems good and I think you should send out the PR.  I'll reassign it to you.;;;","2022-05-26 11:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8906
Date: 2022-05-26 18:11:29 +0000;;;","2022-05-27 05:19;dukebot;Changeset: f2bc4476
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-05-27 12:16:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f2bc4476593938094263f0d85fc9bdd369e95237
;;;","2023-06-23 05:25;goetz;Fix request [17u]

Included in backport of JDK-8306428.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Redo test/jdk/java/lang/invoke/VarHandles changes  for JDK-8269956,JDK-8271405,5055342,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2021-07-28 09:17,2021-08-02 18:31,2023-10-01 09:57,2021-08-02 18:31,repo-valhalla,,,,,,,repo-valhalla,core-libs,,0,lworld,testonly,,,,,,,,,,,,,,,,test/jdk/java/lang/invoke/VarHandles are generated from the template files.  The template files should be updated instead of editing the tests directly.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269956,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tt8j:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GTK3 drag view image swaps red and blue color channels,JDK-8271398,5055184,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsayao,webbuggrp,webbuggrp,2021-07-27 01:26,2021-09-18 07:02,2023-10-01 09:57,2021-09-17 08:03,jfx14,jfx16,jfx17,,,,,jfx18,javafx,,0,dcspn,gtk3,regression,regression_8225571,reproducer-yes,webbug,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Tested with JavaFX 16, JDK 16 on Ubuntu 20.04 and Fedora 34.

A DESCRIPTION OF THE PROBLEM :
When setting an image as drag view during drag and drop it will be shown with incorrect colors. The red and blue color channels will be swapped.
Does not happen in JavaFX 13, happens in 14 and later. Most likely related to this change: https://bugs.openjdk.java.net/browse/JDK-8225571 - ""Port Linux glass drag source (DND) to use gtk instead of gdk"".

REGRESSION : Last worked in version 13

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create a draggable control.
2. At drag start, set an image as drag view.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Drag view image displayed with correct colors.
ACTUAL -
Drag view image displayed with incorrect colors, red and blue channels are swapped.

---------- BEGIN SOURCE ----------
package com.example.bug;

import javafx.application.Application;
import javafx.embed.swing.SwingFXUtils;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.ClipboardContent;
import javafx.scene.input.Dragboard;
import javafx.scene.input.TransferMode;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.awt.image.BufferedImage;

/**
 * Example code for JavaFX bug ""GTK3 drag view image swaps red and blue color channels"".
 *
 * Does not happen in JavaFX 13, happens in 14 and later.
 * Most likely related to this change: https://bugs.openjdk.java.net/browse/JDK-8225571 - ""Port Linux glass drag source
 * (DND) to use gtk instead of gdk"".
 *
 * Workaround:
 * #1: Swap red and blue color channels before setting drag view image, see code.
 * #2: Use JavaFX 13.
 * #3: Use GTK2 at runtime with JVM argument ""-Djdk.gtk.version=2"".
 *
 * Tested with JavaFX 16, JDK 16 on Ubuntu 20.04 and Fedora 34.
 */
public class Main extends Application {
    Image image = createImage(240, 240);
    CheckBox workaround = new CheckBox(""Workaround"");

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        ImageView imageView = new ImageView(image);
        imageView.setOnDragDetected(event -> {
            ClipboardContent content = new ClipboardContent();
            content.putImage(image);
            Dragboard dragboard = imageView.startDragAndDrop(TransferMode.ANY);
            dragboard.setContent(content);
            if (workaround.isSelected()) {
                dragboard.setDragView(swapRedAndBlueColorChannels(image));
            } else {
                dragboard.setDragView(image);
            }
        });

        VBox vBox = new VBox(new Label(""Drag image""), imageView, workaround);
        vBox.setSpacing(5.0);
        vBox.setAlignment(Pos.CENTER);
        stage.setScene(new Scene(vBox, 480, 480));
        stage.setTitle(""GTK3 Drag View Image Wrong Colors"");
        stage.show();
    }

    private static Image createImage(int width, int height) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        for (int y=0; y<height; y++) {
            for (int x=0; x<width; x++) {
                if (x < width * 0.33) {
                    image.setRGB(x, y, 0xFF0000);
                } else if (x < width * 0.66) {
                    image.setRGB(x, y, 0x00FF00);
                } else {
                    image.setRGB(x, y, 0x0000FF);
                }
            }
        }
        return SwingFXUtils.toFXImage(image, null);
    }

    private static Image swapRedAndBlueColorChannels(Image image) {
        BufferedImage bufferedImage = SwingFXUtils.fromFXImage(image, null);
        int width = bufferedImage.getWidth();
        int height = bufferedImage.getHeight();
        for (int y=0; y<height; y++) {
            for (int x=0; x<width; x++) {
                int p = bufferedImage.getRGB(x, y);
                int a = (p>>24) & 0xFF;
                int r = (p>>16) & 0xFF;
                int g = (p>>8) & 0xFF;
                int b = p & 0xFF;
                p = (a<<24) | (b<<16) | (g<<8) | r; // Swap red and blue values.
                bufferedImage.setRGB(x, y, p);
            }
        }
        return SwingFXUtils.toFXImage(bufferedImage, null);
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
#1: Swap red and blue color channels before setting drag view image, see code.
#2: Use JavaFX 13.
#3: Use GTK2 at runtime with JVM argument ""-Djdk.gtk.version=2"".

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8225571,,,,,,"2021-07-28 06:43;pnarayanaswa;Capture_11.PNG;https://bugs.openjdk.org/secure/attachment/95821/Capture_11.PNG","2021-07-28 06:43;pnarayanaswa;Capture_17.PNG;https://bugs.openjdk.org/secure/attachment/95822/Capture_17.PNG","2021-07-28 06:43;pnarayanaswa;Main.java;https://bugs.openjdk.org/secure/attachment/95823/Main.java",,,,x86_64,,,,,,,,,,linux,,,,"0|i2tsij:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2021-07-28 06:43;pnarayanaswa;Checked with attached Testcase in Ubuntu 20.04, Issue is reproducible<Attached screenshot for reference>
$ gtk-launch --version
3.24.20
Test Result:
=========
openjfx11: Pass
openjfx15: Fail
openjfx16: Fail
openjfx17ea: Fail

Issue is not reproducible in Windows 10.;;;","2021-08-02 22:49;pbansal;I am able to reproduce the issue with latest OpenJFX code with JDK18;;;","2021-08-05 07:14;pbansal;I can confirm that this is a regression of JDK-8225571;;;","2021-09-17 08:03;roboduke;Changeset: b2ecfacf
Author:    Thiago Milczarek Sayao <tsayao@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2021-09-17 15:02:08 +0000
URL:       https://git.openjdk.java.net/jfx/commit/b2ecfacf0d8c9512d0b4cc13c1ac6c104a20f396
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] SIGSEGV in ciKlass::is_subtype_of,JDK-8271397,5055334,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-07-28 06:39,2021-07-28 08:32,2023-10-01 09:57,2021-07-28 08:32,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,intermittent,lworld,,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f912796929a, pid=31693, tid=31740
#
# JRE version: OpenJDK Runtime Environment (18.0+1) (build 18-valhalla+1-40)
# Java VM: OpenJDK 64-Bit Server VM (18-valhalla+1-40, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x54429a]  ciKlass::is_subtype_of(ciKlass*)+0xba

Current CompileTask:
C2:   1260  555             jdk.incubator.vector.LongVector::fromByteArray (34 bytes)

Stack: [0x00007f91056f6000,0x00007f91057f7000],  sp=0x00007f91057f3350,  free space=1012k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x54429a]  ciKlass::is_subtype_of(ciKlass*)+0xba
V  [libjvm.so+0x55d60e]  ciTypeFlow::StateVector::do_checkcast(ciBytecodeStream*)+0xae
V  [libjvm.so+0x55f4c7]  ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*)+0x1a27
V  [libjvm.so+0x5629e8]  ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)+0x1a8
V  [libjvm.so+0x563448]  ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)+0x258
V  [libjvm.so+0x56416e]  ciTypeFlow::flow_types()+0x18e
V  [libjvm.so+0x564252]  ciTypeFlow::do_flow()+0x12
V  [libjvm.so+0x545c22]  ciMethod::get_flow_analysis()+0x72
V  [libjvm.so+0x437711]  InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&, bool&)+0x101
V  [libjvm.so+0x6915e9]  Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool)+0x869
V  [libjvm.so+0x691e95]  Parse::do_call()+0x195
V  [libjvm.so+0xc69798]  Parse::do_one_block()+0x208
V  [libjvm.so+0xc69bc5]  Parse::do_all_blocks()+0xe5
V  [libjvm.so+0xc6d265]  Parse::Parse(JVMState*, ciMethod*, float)+0xb15
V  [libjvm.so+0x5067bb]  ParseGenerator::generate(JVMState*)+0x8b
V  [libjvm.so+0x691ee4]  Parse::do_call()+0x1e4
V  [libjvm.so+0xc69798]  Parse::do_one_block()+0x208
V  [libjvm.so+0xc69bc5]  Parse::do_all_blocks()+0xe5
V  [libjvm.so+0xc6d265]  Parse::Parse(JVMState*, ciMethod*, float)+0xb15
V  [libjvm.so+0x5067bb]  ParseGenerator::generate(JVMState*)+0x8b
V  [libjvm.so+0x691ee4]  Parse::do_call()+0x1e4
V  [libjvm.so+0xc69798]  Parse::do_one_block()+0x208
V  [libjvm.so+0xc69bc5]  Parse::do_all_blocks()+0xe5
V  [libjvm.so+0xc6d265]  Parse::Parse(JVMState*, ciMethod*, float)+0xb15
V  [libjvm.so+0x5067bb]  ParseGenerator::generate(JVMState*)+0x8b
V  [libjvm.so+0x5ce30d]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0xd0d
V  [libjvm.so+0x505479]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xe9
V  [libjvm.so+0x5d7451]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd71
V  [libjvm.so+0x5d7fe8]  CompileBroker::compiler_thread_loop()+0x4b8
V  [libjvm.so+0xe004d0]  JavaThread::thread_main_inner()+0xd0
V  [libjvm.so+0xe03aee]  Thread::call_run()+0xde",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tt6r:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash during printing when disposing textures,JDK-8271395,5055330,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,fkirmaier,fkirmaier,fkirmaier,2021-07-28 05:50,2022-11-29 06:08,2023-10-01 09:57,2022-08-20 05:44,jfx16,,,,,,,jfx20,javafx,,0,,,,,,,,,,,,,,,,,,"For some an unknown reason, this has been only reproducible on Mac.
But I don't see a technical reason, why this shouldn't happen also on Windows are Linux.

To reproduce this bug, in a minimal setup, we have to make sure of the following:
 - maximum available ram should be minimal, to quicker reproduce this issue. Setting it to 100MB with -Xmx100m worked for me.
 - Stimulating the GC is helpful - especially to make sure the timing of the GC is random instead of when the application allocates something. The timing of the GC is important, otherwise the textures get disposed from the JavaFX thread.
 - We have to create enough textures from the JavaFX Thread.
 - The printing thread has to depose one of these textures. This is sometimes triggered during printing textures.

 (In the affected application, this crash is triggered about every 3rd print with javafx)


files:
 - hs_err file
 - test image
 - reproducing test program
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-28 05:55;fkirmaier;TestPrinting.java;https://bugs.openjdk.org/secure/attachment/95820/TestPrinting.java","2021-07-28 05:53;fkirmaier;hs_err_pid19558.log;https://bugs.openjdk.org/secure/attachment/95818/hs_err_pid19558.log","2021-07-28 05:53;fkirmaier;pumpkins2.jpeg;https://bugs.openjdk.org/secure/attachment/95819/pumpkins2.jpeg",,,,,,,,,,,,,,,,,,"0|i2tt5v:",9223372036854775807,b03,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-08-10 08:41;prr;Printing needs to manage cached textures for itself since it isn't using the OGL pipeline.
Possibly some place the code needs to check it if it printing isn't checking.
II can't think why it would be platform-specific but it could be that the code path isn't used
during printing except on mac  ..  ? Needs to be debugged .. that's all guesswork so far.
;;;","2021-08-31 02:33;fkirmaier;
To give some more Details:
 - The issue happens in the class com.sun.prism.impl.Dispoer
 - It's an Threading issue - the class Disposer is only allowed to be called from the Quantum Renderer Thread
Possible solutions:
 - avoid cleanup from the Printing Thread (on a quick test, it didn't work for me)
 - If cleanup is required, wait for quantum thread, and cleanup in the quantum thread instead. This approach seems to work for me.
 For this i had to: Make QuantumRendrer Public
 Add the following snippet to the bing of the cleanup method:
 ```
if (!Thread.currentThread().getName().startsWith(""QuantumRenderer"")) {
   try {
       CountDownLatch latch = new CountDownLatch(1);
       com.sun.javafx.tk.quantum.QuantumRenderer.getInstance().execute(() -> {
           cleanUp();
           latch.countDown();
       });
       latch.await();
   } catch (Exception e){
       e.printStackTrace();
   }
   return;

 ```;;;","2021-08-31 03:54;fkirmaier;Classes like BaseResourcePool also don't seem to work correctly - if called from different threads at the same time (based on my code analysis) - which I don't really know (yet?) how to solve it in the best way.

These classes seem in general to be designed for only one thread - which makes the printing thread more problematic.
;;;","2021-09-06 01:51;fkirmaier;I have to correct my last comment!
After reading the code a bit more, it obvious that the is no ThreadingIssue in the Pool, because for the printing, an own pool is created. The issue only is in the Dispose method.
For that reason, my previous fix is valid - but discussable whether it's a good fix. So I will create a PR for it.;;;","2022-07-16 18:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/618
Date: 2021-09-06 10:33:28 +0000;;;","2022-08-20 05:44;dukebot;Changeset: 88159811
Author:    Florian Kirmaier <fkirmaier@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-08-20 12:40:29 +0000
URL:       https://git.openjdk.org/jfx/commit/88159811239b76399b8f90c6c648293b4a06528c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Improve typing of primitiveObject.getClass(),JDK-8271389,5055317,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-07-28 01:59,2021-07-28 04:45,2023-10-01 09:57,2021-07-28 04:45,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,"As of JDK-8244796 , we implemented a temporary typing strategy for 
the expression v.getClass() where v is an instance of a primitive class V that implements I1, I2, ... In.

According to this stop-gap strategy,  v.getClass() is typed to be Class<? extends Object & I1 & I2 .. & In>

We can revoke this temporary typing approach and move towards proper typing to match what is spelled out here:
https://mail.openjdk.java.net/pipermail/valhalla-spec-experts/2021-June/001557.html

Extract:

"" ...  Each primitive class has a primary (unrestricted) mirror corresponding to the 
L descriptor, and a secondary (restricted, flattened, possibly 
null-free) mirror corresponding to the Q descriptor.  The secondary 
mirror has only one job: reflecting Q descriptors in method and field 
descriptors (and supporting method handles in their emulation of same.)

When you ask an object for getClass(), it always hands back the primary 
mirror...."" 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tt2z:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PerfDataManager::destroy crashes in VM_Exit,JDK-8271353,5055230,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xliu,xliu,xliu,2021-07-27 15:59,2021-08-04 18:31,2023-10-01 09:57,2021-07-28 16:08,11,17,18,,,,,18,hotspot,,0,logging,redhat-interest,,,,,,,,,,,,,,,,"When the user enables UL -Xlog:perf+datacreation=debug, it may crash in PerfDataManager::destroy().

The following line will crash when _sample is NULL. 
  log_debug(perf, datacreation)(""Total = %d, Sampled = %d, Constants = %d"",
                                _all->length(), _sampled->length(), _constants->length());

This only happens when UsePerfData is on and PerfDataManager::destroy() is invoked before StatSampler::initialize() which initializes PerfDataManager::_sampled.
PerfDataManager::destroy() is called by VM_Exit which can be triggered by SIGINT on Linux anytime.

A reproducible: invoke the following command and keep pressing Ctrl-c.
$perf stat -r 100 java -Xlog:perf+datacreation=debug   --version

[0.043s][debug][perf,datacreation] name = sun.ci.lastInvalidatedType, dtype = 11, variability = 3, units = 1, dsize = 8, vlen = 0, pad_length = 1, size = 56, on_c_heap = FALSE, address = 0x00007f7662bc19f8, data address = 0x00007f7662bc1a28
^C#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f766187639e, pid=4801, tid=4808
#
# JRE version: OpenJDK Runtime Environment (18.0) (build 18-internal+0-adhoc.xxinliu.jdk)
# Java VM: OpenJDK 64-Bit Server VM (18-internal+0-adhoc.xxinliu.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xc3439e]  PerfDataManager::destroy()+0x4e
#
# Core dump will be written. Default location: /tmp/core.4801.%i
#
# An error report file with more information is saved as:
# /local/home/xxinliu/Devel/jdk/hs_err_pid4801.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

[error occurred during error reporting (), id 0xb, SIGSEGV (0xb) at pc=0x00007f766187639e]

./build/linux-x86_64-server-release/jdk/bin/java: Aborted
[error occurred during error reporting (), id 0xb, SIGSEGV (0xb) at pc=0x00007f70f41f9e9c]

java: Aborted

",,28800,28800,,0%,28800,28800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-27 16:32;xliu;hs_err_pid99538.log;https://bugs.openjdk.org/secure/attachment/95753/hs_err_pid99538.log",,,,,,generic,,,,,,,,,,generic,,,,"0|i2tssr:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-28 16:08;roboduke;Changeset: 41b4c190
Author:    Xin Liu <xliu@openjdk.org>
Date:      2021-07-28 23:07:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/41b4c19086c0b238bdeea9f3f14ee9997253b2f2
;;;","2021-08-02 03:10;shade;Provisionally adding previous JDK versions, as they are probably affected by this bug as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extend jcc erratum mitigation to additional processors,JDK-8271352,5055229,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kbarrett,kbarrett,kbarrett,2021-07-27 15:36,2021-08-10 00:23,2023-10-01 09:57,2021-07-28 08:32,17,18,,,,,,17,hotspot,,0,hs-comp-triaged,jdk17-fix-request,jdk17-fix-yes,oracle-triage-11,oracle-triage-18,,,,,,,,,,,,,Enable the jcc erratum by default for family 6 model 165 (0xA5).,,,,,,,,,,,JDK-8271669,JDK-8271437,JDK-8271805,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tssj:",9223372036854775807,b34,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Not verified,,"2021-07-28 07:05;kbarrett;Fix Request

This change seems to reduce the frequency of crashes discussed in JDK-8263710, which is still under investigation.

Low risk; this change just enables existing code for an additional processor model.  The code in question has been in use on other (closely related) models since jdk15.
;;;","2021-07-28 07:28;kvn;Fix Request for JDK 17 is approved.
;;;","2021-07-28 08:32;roboduke;Changeset: 5fcf7208
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2021-07-28 15:31:14 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/5fcf72086ffca85f524fae2d5bd9fd328c9a77e0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/Safepoint tests use OutputAnalyzer::shouldMatch instead of shouldContaint,JDK-8271350,5055227,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-07-27 12:39,2022-08-26 12:26,2023-10-01 09:57,2021-07-27 16:20,17,,,,,,,17,hotspot,,0,noreg-self,redhat-interest,,,,,,,,,,,,,,,,"runtime/Safepoint/TestAbortVMOnSafepointTimeout.java and TestAbortOnVMOperationTimeout.java tests use j.t.l.p.OutputAnalyzer::shouldMatch method, which accepts a regular expression, yet pass a fixed string as an argument.",,,,,,,,,,,JDK-8271803,JDK-8271360,JDK-8271666,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tss3:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-27 16:20;roboduke;Changeset: f1e15c8c
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-07-27 23:20:19 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/f1e15c8c8f598f3726fd6b3f65fe5ab155a2ee28
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Windows product version issue,JDK-8271344,5055219,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,herrick,herrick,herrick,2021-07-27 09:11,2022-07-21 02:36,2023-10-01 09:57,2021-08-03 11:52,16,17,18,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_98,sn_99,,,,,,,,,,,,,,"On Windows we currently require the version string to contain 1 to 3 elements (the first two must be integers from 0 to 255, the third must be integer between 0 and 65535.
The windows installer requires 2 to 4 elements, the first element 
The key points are:
1.) windows installer requires at least 2 elements.
2.) windows installer allows (though ignores) a forth element.

When only one element is used, it passes our checks in MsiVersion then fails later running candle.",,,,,,,,,,,JDK-8289956,JDK-8290785,,,,,,,,,,,,,,,,,,,,JDK-8283707,,,,,,,,,,,,,,,,,x86,,,,,,,,,,windows_10,,,,"0|i2tsqb:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-07-27 09:16;herrick;I think we should not change the requirements other than allowing a forth element.  If the Version has only one element when constructing main.wxs variable JpAppVersion should be padded with 0, such that ""18"" becomes ""18.0""
;;;","2021-07-30 05:54;herrick;yes - I no longer plan to pad the version.
Our check will be changed to require two elements so that we will give a proper error message instead of just failing running candel.exe.;;;","2021-08-03 11:52;roboduke;Changeset: 0199b03e
Author:    Andy Herrick <herrick@openjdk.org>
Date:      2021-08-03 18:51:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0199b03eb3bd9ffe79b5193ff1792144b5c488f1
;;;","2022-07-18 03:23;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Clean backport.
SAP nightly testing passed.;;;","2022-07-18 03:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/558
Date: 2022-07-18 10:28:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Opcode() != Op_If && Opcode() != Op_RangeCheck) || outcnt() == 2 assert failure with Test7179138_1.java",JDK-8271341,5055216,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2021-07-27 08:07,2022-08-09 08:37,2023-10-01 09:57,2021-09-07 08:14,11,17,18,,,,,18,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-17,oracle-triage-18,,,,,,,,,"See comment:

https://bugs.openjdk.java.net/browse/JDK-8270886?focusedCommentId=14436521&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14436521

in JDK-8270886. This failure is unrelated to JDK-8270886.

To reproduce:
Run test/hotspot/jtreg/compiler/c2/Test7179138_1.java with ""-XX:-ReduceInitialCardMarks -XX:-ReduceBulkZeroing -XX:-ReduceFieldZeroing -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -XX:RepeatCompilation=100"" (might need multiple runs to reproduce)",,,,,,,,,,,JDK-8274885,JDK-8274512,JDK-8274493,,,,,,,,,,,,,,,,,,,JDK-8273498,JDK-8270886,JDK-8291775,,,,,,,,,"2021-08-03 04:40;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95872/Test.java",,,,,,,,,,,,,,,,,,,,"0|i2tspn:",9223372036854775807,b14,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-28 00:42;chagedorn;ILW = Assert in C2, only with single test, disable loop strip mining = HLM = P3;;;","2021-08-03 04:40;chagedorn;I've attached another (already reduced) test found by fuzzing with the same assertion failure which might be related.

To reproduce:
$ java -Xbatch -XX:-TieredCompilation Test.java;;;","2021-09-07 08:14;roboduke;Changeset: 99fb12c7
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-09-07 15:13:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/99fb12c798ad24cc4a671a666930ba42c3cd10c9
;;;","2021-09-28 01:03;thartmann;Fix request (17u):
The bug leads to an assert in C2. The fix is low risk and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;","2021-10-06 03:40;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash PhaseIdealLoop::clone_outer_loop,JDK-8271340,5055215,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2021-07-27 08:03,2021-10-07 01:24,2023-10-01 09:57,2021-09-07 08:16,11,16,17,18,,,,18,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-17,oracle-triage-18,redhat-interest,,,,,,,,"See this comment:

https://bugs.openjdk.java.net/browse/JDK-8270886?focusedCommentId=14435370&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14435370

This was thought to be just another crash for JDK-8270886 but is a different issue.",,,,,,,,,,,JDK-8274513,JDK-8274485,JDK-8274887,,,,,,,,,,,,,,,,,,,JDK-8270886,,,,,,,,,,,"2021-07-28 00:34;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95801/FuzzerUtils.java","2021-07-28 00:34;chagedorn;SDD56.java;https://bugs.openjdk.org/secure/attachment/95800/SDD56.java",,,,,,,,,,,,,,,,,,,"0|i2tspf:",9223372036854775807,b14,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-28 00:35;chagedorn;ILW = Crashes in C2 loop peeling, only fails with single JavaFuzzer test containing infinite loops, disable loop strip mining = HLM = P3;;;","2021-09-07 08:16;roboduke;Changeset: 2abf3b3b
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-09-07 15:15:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2abf3b3b2743947282300ee8416611559e49fca0
;;;","2021-09-28 00:09;thartmann;Fix request (17u):
The bug leads to a crash in C2. The fix is low risk and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;","2021-10-06 03:42;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] SIGSEGV in MemNode::find_previous_store,JDK-8271330,5055194,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2021-07-27 04:27,2021-07-27 22:36,2023-10-01 09:57,2021-07-27 22:36,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,"Only reproduces on AVX-512 VLBW capable machines (for example, Intel(R) Xeon(R) Gold 6354).

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f25d2d17e90, pid=26838, tid=26865
#

---------------  T H R E A D  ---------------

Current thread (0x00007f25cc2b0e30):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=26865, stack(0x00007f25b09fa000,0x00007f25b0afb000)]


Current CompileTask:
C2:   1248 1885   !   4       sun.security.ssl.SSLCipher$T13GcmReadCipherGenerator$GcmReadCipher::decrypt (524 bytes)

Stack: [0x00007f25b09fa000,0x00007f25b0afb000],  sp=0x00007f25b0af6a70,  free space=1010k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xba8e90]  MemNode::find_previous_store(PhaseTransform*)+0x620
V  [libjvm.so+0xbb2c85]  StoreNode::Identity(PhaseGVN*)+0x75
V  [libjvm.so+0xc94461]  PhaseIterGVN::transform_old(Node*)+0x191
V  [libjvm.so+0xc90a18]  PhaseIterGVN::optimize()+0x118
V  [libjvm.so+0xb15161]  PhaseMacroExpand::expand_macro_nodes()+0x731
V  [libjvm.so+0x5cd357]  Compile::Optimize()+0x16d7
V  [libjvm.so+0x5ce49a]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0xe9a
V  [libjvm.so+0x505479]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xe9
V  [libjvm.so+0x5d7451]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd71
V  [libjvm.so+0x5d7fe8]  CompileBroker::compiler_thread_loop()+0x4b8
V  [libjvm.so+0xe004d0]  JavaThread::thread_main_inner()+0xd0
V  [libjvm.so+0xe03aee]  Thread::call_run()+0xde
V  [libjvm.so+0xc425f1]  thread_native_entry(Thread*)+0xe1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8189802,JDK-8271339,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tskr:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-27 04:30;thartmann;Debug fails with:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla2/open/src/hotspot/share/opto/memnode.cpp:3294), pid=992290, tid=992307
#  assert(alloc != __null) failed: should have allocation
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-internal+0-2021-05-07-0658132.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-internal+0-2021-05-07-0658132.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x14ebdc4]  ClearArrayNode::step_through(Node**, unsigned int, PhaseTransform*)+0x164

Current CompileTask:
C2: 173620   33   !b  4       sun.security.ssl.SSLCipher$T13GcmReadCipherGenerator$GcmReadCipher::decrypt (524 bytes)

Stack: [0x00007f6f4b6f8000,0x00007f6f4b7f9000],  sp=0x00007f6f4b7f41c0,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14eb9f9]  ClearArrayNode::step_through(Node**, unsigned int, PhaseTransform*)+0x169
V  [libjvm.so+0x14f3d82]  MemNode::find_previous_store(PhaseTransform*)+0x5b2
V  [libjvm.so+0x14f8770]  StoreNode::Identity(PhaseGVN*)+0x90
V  [libjvm.so+0x16d4d82]  PhaseIterGVN::transform_old(Node*)+0x2f2
V  [libjvm.so+0x16cda4e]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0x13d4680]  PhaseMacroExpand::expand_macro_nodes()+0xaf0
V  [libjvm.so+0xa72a2c]  Compile::Optimize()+0x162c
V  [libjvm.so+0xa74530]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1740
V  [libjvm.so+0x873b00]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x6a0
V  [libjvm.so+0xa852c9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa86038]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x19958c1]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x199d4c0]  Thread::call_run()+0x100
V  [libjvm.so+0x163ff94]  thread_native_entry(Thread*)+0x104;;;","2021-07-27 07:23;thartmann;This has been introduced long ago by JDK-8189802.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
User is able to choose the color after disabling the color chooser.,JDK-8271328,5055190,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,amrsahu,amrsahu,2021-07-27 03:28,2022-09-26 09:40,2023-10-01 09:57,2022-09-19 04:34,14,15,16,17,,,,20,client-libs,,0,atr,gtk,imt,sn_127,sqebug,,,,,,,,,,,,,"Testsuite name:regression manual 

TestCase:javax/swing/JColorChooser/Test4222508.java

JDK/JRE Tested: JDK14,JDK15, JDK16 and JDK 17 

OS: Ubuntu 20.10 x64

Steps to reproduce:
1. Launch the test case with ""com.sun.java.swing.plaf.gtk.GTKLookAndFeel vm option. ""Use the check box above the color chooser to disable it.
You should not be able to choose a color after disabling the color chooser.

Expected behavior:
User should not be able to choose a color after deselecting the enable the color chooser below checkbox.

Actual behavior:
User is able to choose color when color chooser is disabled.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8078503,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,"0|i2tsjv:",9223372036854775807,b16,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-09-13 10:05;pbansal;I am able to reproduce the issue on 20.10 with jdk18;;;","2022-09-14 23:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10276
Date: 2022-09-15 06:07:30 +0000;;;","2022-09-19 04:34;dukebot;Changeset: b920d299
Author:    Abhishek Kumar <abhishek.cx.kumar@oracle.com>
Committer: Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-09-19 11:30:47 +0000
URL:       https://git.openjdk.org/jdk/commit/b920d2999fed5ec5afe666559e14f8e1a0e90852
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] java/foreign/* tests fail with ""guarantee(sect->end() <= tend) failed: sanity""",JDK-8271324,5055185,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-07-27 01:46,2021-07-28 01:05,2023-10-01 09:57,2021-07-28 01:05,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,intermittent,lw3,lworld,,,,,,,,,,,,,,,"Only reproduces on AVX-512 VLBW capable machines (for example, Intel(R) Xeon(R) Gold 6354).

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (codeBuffer.cpp:972), pid=3048, tid=3123
#  guarantee(sect->end() <= tend) failed: sanity

Stack: [0x00007f6cd95f5000,0x00007f6cd96f6000],  sp=0x00007f6cd96f2320,  free space=1012k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x59b1ec]  CodeBuffer::verify_section_allocation()+0x36c
V  [libjvm.so+0x59b38f]  CodeBuffer::~CodeBuffer()+0xf
V  [libjvm.so+0xe2ee5f]  ProgrammableUpcallHandler::generate_optimized_upcall_stub(_jobject*, Method*, _jobject*, _jobject*)+0x234f
V  [libjvm.so+0xe2b393]  PUH_AllocateOptimizedUpcallStub+0x263",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271370,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tsir:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] serviceability/sa/ClhsdbCDSCore.java fails with -XX:TieredStopAtLevel=1,JDK-8271323,5055183,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ngasson,ngasson,ngasson,2021-07-27 01:00,2023-02-17 02:22,2023-10-01 09:57,2021-07-27 18:59,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,oracle-triage-18,testbug,,,,,,,,,"This test fails reliably with -XX:TieredStopAtLevel=1 since JDK-8251462. MDOs are no longer allocated in this mode so the clhsdb printmdo -a command prints nothing. The failure is basically the same as JDK-8236042 which happened with -Xcomp -XX:TieredStopAtLevel=1, so the workaround for that just needs to be adjusted slightly.",,,,,,,,,,,JDK-8277739,JDK-8277771,JDK-8298002,JDK-8302727,,,,,,,,,,,,,,,,,,JDK-8251462,JDK-8236042,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tsib:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-27 04:51;chagedorn;ILW = Test failure with -XX:TieredStopAtLevel=1, single test, no workaround = MLH = P4;;;","2021-07-27 18:59;roboduke;Changeset: 9bc52afa
Author:    Nick Gasson <ngasson@openjdk.org>
Date:      2021-07-28 01:58:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9bc52afa481c476ae9c379dff44ae8266777f616
;;;","2021-11-22 05:38;rsunderbabu;Fix Request (17u):
17u is affected, too. Fix is trivial and applies cleanly. ;;;","2023-02-16 07:13;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2023-02-16 07:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1758
Date: 2023-02-16 15:14:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Redo: Nimbus JTree renderer properties persist across L&F changes,JDK-8271315,5055171,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,trebari,trebari,2021-07-26 22:02,2022-01-03 20:06,2023-10-01 09:57,2021-08-26 05:37,11,14,15,16,7u45,8,9,18,client-libs,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,reproducer-no,sn_100,webbug,,,,,,,,,,,,"FULL PRODUCT VERSION :


A DESCRIPTION OF THE PROBLEM :
The following UI properties, documented at http://docs.oracle.com/javase/7/docs/api/javax/swing/tree/DefaultTreeCellRenderer.html, are supposed to be instances of UIResource if they are defined by the L&F:

1. ""Tree.leafIcon""
2. ""Tree.closedIcon""
3. ""Tree.openIcon""
4. ""Tree.selectionForeground""
5. ""Tree.textForeground""
6. ""Tree.selectionBackground""
7. ""Tree.textBackground""
8. ""Tree.selectionBorderColor""

On the Nimbus L&F, all are defined, but none of them implement UIResource. This causes them to incorrectly persist across L&F changes.

  See also:
http://bugs.sun.com/view_bug.do?bug_id=9008369
http://bugs.sun.com/view_bug.do?bug_id=9008389


REPRODUCIBILITY :
This bug can be reproduced always.",,,,,,,,,,,JDK-8277206,JDK-8277294,,,,,,,,,,,,,,JDK-8249674,,,,,,JDK-8266510,,,,,JDK-8273043,,,,,,"2021-07-26 22:02;trebari;NimbusPropertiesDoNotImplUIResource.java;https://bugs.openjdk.org/secure/attachment/95732/NimbusPropertiesDoNotImplUIResource.java","2021-07-26 22:02;trebari;NimbusPropertiesPersists.java;https://bugs.openjdk.org/secure/attachment/95733/NimbusPropertiesPersists.java",,,,,,,,,,,,,,,generic,,,,"0|i2tsfn:",9223372036854775807,b13,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-08-26 05:37;roboduke;Changeset: e43a907f
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-08-26 12:04:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e43a907f20f99fa1f788fcbe2e99631dd01578d4
;;;","2021-11-10 03:08;akasko;Fix request (17u)

Clean backport of a Swing fix. This is a follow-up to JDK-8266510.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] FieldModification event: new_value is invalid for Q objects,JDK-8271309,5055163,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,amenkov,amenkov,amenkov,2021-07-26 17:56,2021-07-28 23:15,2023-10-01 09:57,2021-07-28 23:15,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,"primitive class MyPrimitive {
  ...
}

class Class1 {
    public final MyPrimitive fld1;
   ...
}

SetFieldModificationWatch for class Class1, field fld1 generates FieldModification event with bad new_object.
Trying to use it causes crash:
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (open\src\hotspot\share\runtime\javaCalls.cpp:601), pid=16600, tid=7884
#  guarantee(oopDesc::is_oop_or_null(vv, true)) failed: Bad JNI oop argument 0: 0x00000000a0920208 -> 0x0000000000000005",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271355,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tsdv:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jshell/CommandCompletionTest.java fails with ""lists don't have the same size expected""",JDK-8271287,5055106,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,dcubed,dcubed,2021-07-26 06:50,2021-10-08 02:31,2023-10-01 09:57,2021-09-22 05:56,11,18,,,,,,18,tools,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,testbug,tier4,,,,,,,,,,,"The following test failed in the JDK18 CI:

jdk/jshell/CommandCompletionTest.java

Here's a snippet from the log file:

#section:testng
----------messages:(6/354)----------
command: testng CommandCompletionTest
reason: User specified action: run testng CommandCompletionTest 
Mode: agentvm
Agent id: 7
Additional exports to unnamed modules from @modules: jdk.compiler/com.sun.tools.javac.api jdk.compiler/com.sun.tools.javac.main jdk.jdeps/com.sun.tools.javap jdk.jshell/jdk.internal.jshell.tool
elapsed time (seconds): 30.857
----------configuration:(20/2271)----------
Boot Layer
  class path: /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/junit.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/hamcrest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/testng.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jcommander.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/guice.jar 
  patch:      java.base /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13784/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/63caca6e-6b60-430c-8bea-2385244c0ee1/runs/874479a5-000d-4967-abb9-2b9bc757822f/testoutput/test-support/jtreg_open_test_langtools_tier1/patches/java.base

Test Layer
  add exports: jdk.compiler/com.sun.tools.javac.api  ALL-UNNAMED
               jdk.compiler/com.sun.tools.javac.main ALL-UNNAMED
               jdk.jdeps/com.sun.tools.javap         ALL-UNNAMED
               jdk.jshell/jdk.internal.jshell.tool   ALL-UNNAMED
  class path:  /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13784/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/63caca6e-6b60-430c-8bea-2385244c0ee1/runs/874479a5-000d-4967-abb9-2b9bc757822f/testoutput/test-support/jtreg_open_test_langtools_tier1/classes/2/jdk/jshell/CommandCompletionTest.d 
               /opt/mach5/mesos/work_dir/jib-master/install/jdk-18+8-325/src.full/open/test/langtools/jdk/jshell 
               /opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S13784/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/63caca6e-6b60-430c-8bea-2385244c0ee1/runs/874479a5-000d-4967-abb9-2b9bc757822f/testoutput/test-support/jtreg_open_test_langtools_tier1/classes/2/tools/lib 
               /opt/mach5/mesos/work_dir/jib-master/install/jdk-18+8-325/src.full/open/test/langtools/tools/lib 

----------rerun:(29/6128)*----------

<snip>

----------System.out:(103/6626)----------
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testClassPath(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testCommand(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testDrop(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testEdit(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testEnv(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testHelp(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testHistory(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testList(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testOpen(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testReload(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testReset(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testSave(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testSet(): success
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testUserHome(): failure
java.lang.AssertionError: Command: /env --class-path ~/|, output: [.java/, .ssh/, mesos/]: lists don't have the same size expected [2] but found [3]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:907)
	at org.testng.Assert.assertEquals(Assert.java:1089)
	at CommandCompletionTest.assertCompletion(CommandCompletionTest.java:86)
	at CommandCompletionTest.assertCompletion(CommandCompletionTest.java:80)
	at CommandCompletionTest.lambda$testUserHome$89(CommandCompletionTest.java:342)
	at ReplToolTesting$PromptedCommandOutputStream.write(ReplToolTesting.java:824)
	at java.base/java.io.PrintStream.write(PrintStream.java:535)
	at jdk.internal.le/jdk.internal.org.jline.terminal.impl.LineDisciplineTerminal.processOutputByte(LineDisciplineTerminal.java:253)
	at jdk.internal.le/jdk.internal.org.jline.terminal.impl.LineDisciplineTerminal$FilteringOutputStream.write(LineDisciplineTerminal.java:294)
	at java.base/sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:234)
	at java.base/sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:313)
	at java.base/sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:318)
	at java.base/sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:160)
	at java.base/java.io.OutputStreamWriter.flush(OutputStreamWriter.java:248)
	at java.base/java.io.PrintWriter.flush(PrintWriter.java:396)
	at jdk.internal.le/jdk.internal.org.jline.terminal.impl.AbstractTerminal.flush(AbstractTerminal.java:174)
	at jdk.internal.le/jdk.internal.org.jline.utils.Display.update(Display.java:336)
	at jdk.internal.le/jdk.internal.org.jline.reader.impl.LineReaderImpl.redisplay(LineReaderImpl.java:3943)
	at jdk.internal.le/jdk.internal.org.jline.reader.impl.LineReaderImpl.redisplay(LineReaderImpl.java:3803)
	at jdk.internal.le/jdk.internal.org.jline.reader.impl.LineReaderImpl.readLine(LineReaderImpl.java:626)
	at jdk.internal.le/jdk.internal.org.jline.reader.impl.LineReaderImpl.readLine(LineReaderImpl.java:454)
	at jdk.jshell/jdk.internal.jshell.tool.ConsoleIOContext.readLine(ConsoleIOContext.java:248)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.getInput(JShellTool.java:1275)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.run(JShellTool.java:1209)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.start(JShellTool.java:995)
	at CommandCompletionTest.testRawRun(CommandCompletionTest.java:70)
	at ReplToolTesting.testRaw(ReplToolTesting.java:296)
	at ReplToolTesting.test(ReplToolTesting.java:249)
	at ReplToolTesting.testNoStartUp(ReplToolTesting.java:237)
	at CommandCompletionTest.testUserHome(CommandCompletionTest.java:341)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)
config ReplToolTesting.setUp(): success
test CommandCompletionTest.testVarsMethodsTypes(): success

===============================================
jdk/jshell/CommandCompletionTest.java
Total tests run: 15, Passes: 14, Failures: 1, Skips: 0
===============================================

----------System.err:(12/714)----------
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: failures: 1",,,,,,,,,,,JDK-8274956,JDK-8274641,JDK-8274627,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274642,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,"0|i2ts17:",9223372036854775807,b16,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-09-22 05:56;roboduke;Changeset: 71788c69
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-09-22 12:53:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/71788c69dbae854331f3393044dab458c906045f
;;;","2021-09-30 03:55;tvoniadka;17u fix request:

Please approve this fix for JDK 17. The patch applies clean, and the test passes on all platforms.;;;","2021-10-06 02:57;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;","2021-10-06 22:51;clanger;Hi Martin,
with JDK-8274642 I've fixed an issue that popped up after this one . So when we integrate this, we should also take care to pull the update - otherwise we see failures in some CI. Can you do that (JDK17u as well)?
Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with ""bad AD file""",JDK-8271282,5055099,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2021-07-26 05:07,2021-07-27 04:28,2023-10-01 09:57,2021-07-26 12:08,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,"Only reproduces on AVX-512 VLBW capable machines (for example, Intel(R) Xeon(R) Gold 6354).

o481  ClearArray  === o488 o475 o505 o96  [[o438  75 ]]   Memory: @BotPTR *+bot, idx=Bot;

--N: o481  ClearArray  === o488 o475 o505 o96  [[o438  75 ]]   Memory: @BotPTR *+bot, idx=Bot;

   --N: o505  Binary  === _ o494 o480  [[o481 ]] 
   _Binary_rcx_RegL_rdi_RegP  185  _Binary_rcx_RegL_rdi_RegP
   _Binary_immL_rRegP  135  _Binary_immL_rRegP

      --N: o494  ConL  === o0  [[o505 ]]  #long:1
      IMML  20  IMML
      IMML8  5  IMML8
      IMMUL32  10  IMMUL32
      IMML32  15  IMML32
      IMML_POW2  15  IMML_POW2
      IMML1  0  IMML1
      IMML_127  10  IMML_127
      RREGL  70  loadConUL32
      NO_RAX_RDX_REGL  70  loadConUL32
      NO_RAX_REGL  70  loadConUL32
      RAX_REGL  70  loadConUL32
      RCX_REGL  70  loadConUL32
      RDX_REGL  70  loadConUL32
      STACKSLOTL  170  storeSSL

      --N: o480  AddP  === _ o447 o447 o172  [[o505 ]] 
      ANY_REGP  115  addP_rReg_imm
      RREGP  115  addP_rReg_imm
      NO_RAX_REGP  115  addP_rReg_imm
      NO_RBP_REGP  115  addP_rReg_imm
      NO_RAX_RBX_REGP  115  addP_rReg_imm
      RAX_REGP  115  addP_rReg_imm
      RBX_REGP  115  addP_rReg_imm
      RSI_REGP  115  addP_rReg_imm
      RBP_REGP  115  addP_rReg_imm
      RDI_REGP  115  addP_rReg_imm
      R15_REGP  115  addP_rReg_imm
      INDIRECT  115  addP_rReg_imm
      INDOFFSET8  5  INDOFFSET8
      INDOFFSET32  15  INDOFFSET32
      INDINDEX  80  INDINDEX
      STACKSLOTP  215  storeSSP
      MEMORY  5  INDOFFSET8
      _AddP_any_RegP_rRegL  70  _AddP_any_RegP_rRegL

         --N: o447  LoadP  === o45 o7 o443  [[o448 o455 o458 o461 o464 o470 o471 o471 o474 o474 o480 o480 o440 ]]  @rawptr:BotPTR, idx=Raw; #rawptr:BotPTR (does not depend only on test)
         ANY_REGP  0  ANY_REGP
         RREGP  0  RREGP
         NO_RAX_REGP  0  NO_RAX_REGP
         NO_RBP_REGP  0  NO_RBP_REGP
         NO_RAX_RBX_REGP  0  NO_RAX_RBX_REGP
         RAX_REGP  0  RAX_REGP
         RBX_REGP  0  RBX_REGP
         RSI_REGP  0  RSI_REGP
         RBP_REGP  0  RBP_REGP
         RDI_REGP  0  RDI_REGP
         R15_REGP  0  R15_REGP
         INDIRECT  0  INDIRECT
         STACKSLOTP  100  storeSSP
         MEMORY  0  INDIRECT

         --N: o172  ConL  === o0  [[o173 o480 ]]  #long:16
         IMML  20  IMML
         IMML8  5  IMML8
         IMMUL32  10  IMMUL32
         IMML32  15  IMML32
         IMML_POW2  15  IMML_POW2
         IMML_127  10  IMML_127
         RREGL  70  loadConUL32
         NO_RAX_RDX_REGL  70  loadConUL32
         NO_RAX_REGL  70  loadConUL32
         RAX_REGL  70  loadConUL32
         RCX_REGL  70  loadConUL32
         RDX_REGL  70  loadConUL32
         STACKSLOTL  170  storeSSL

   --N: o96  OrL  === _ o95 o93  [[o481 ]] 
   RREGL  205  orL_rReg
   NO_RAX_RDX_REGL  205  orL_rReg
   NO_RAX_REGL  205  orL_rReg
   RAX_REGL  205  orL_rReg
   RCX_REGL  205  orL_rReg
   RDX_REGL  205  orL_rReg
   STACKSLOTL  305  storeSSL

      --N: o95  LShiftL  === _ o93 o94  [[o96 ]] 
      RREGL  105  salL_rReg_imm
      NO_RAX_RDX_REGL  105  salL_rReg_imm
      NO_RAX_REGL  105  salL_rReg_imm
      RAX_REGL  105  salL_rReg_imm
      RCX_REGL  105  salL_rReg_imm
      RDX_REGL  105  salL_rReg_imm
      STACKSLOTL  205  storeSSL

         --N: o93  CastP2X  === o45 o92  [[o95 o96 ]] 
         RREGL  0  RREGL
         NO_RAX_RDX_REGL  0  NO_RAX_RDX_REGL
         NO_RAX_REGL  0  NO_RAX_REGL
         RAX_REGL  0  RAX_REGL
         RCX_REGL  0  RCX_REGL
         RDX_REGL  0  RDX_REGL
         STACKSLOTL  100  storeSSL

         --N: o94  ConI  === o0  [[o95 ]]  #int:32
         IMMI  10  IMMI
         IMMU7  5  IMMU7
         IMMI8  5  IMMI8
         IMMU8  5  IMMU8
         IMMI16  10  IMMI16
         IMMU31  0  IMMU31
         IMMI_32  0  IMMI_32
         RREGI  100  loadConI
         RAX_REGI  100  loadConI
         RBX_REGI  100  loadConI
         RCX_REGI  100  loadConI
         RDX_REGI  100  loadConI
         RDI_REGI  100  loadConI
         NO_RAX_RDX_REGI  100  loadConI
         STACKSLOTI  200  storeSSI

      --N: o93  CastP2X  === o45 o92  [[o95 o96 ]] 
      RREGL  0  RREGL
      NO_RAX_RDX_REGL  0  NO_RAX_RDX_REGL
      NO_RAX_REGL  0  NO_RAX_REGL
      RAX_REGL  0  RAX_REGL
      RCX_REGL  0  RCX_REGL
      RDX_REGL  0  RDX_REGL
      STACKSLOTL  100  storeSSL

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/matcher.cpp:1711
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/ff806ead-2cac-495d-9cbc-62116f99bf14-S14144/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/907bc2b7-0335-4c1d-891a-7b49284948e9/runs/05d73220-ef6e-444b-af89-b019042ca4fc/workspace/open/src/hotspot/share/opto/matcher.cpp:1711), pid=32515, tid=32533
#  assert(false) failed: bad AD file",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2trzn:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Wrong JVM state used for receiver null check,JDK-8271276,5055048,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,vlivanov,webbuggrp,webbuggrp,2021-07-24 20:52,2022-02-03 09:14,2023-10-01 09:57,2021-08-18 03:32,16,16.0.2,17,18,,,,18,hotspot,,0,c2,c2-late-inline,dcsswa,deoptimization,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,reproducer-yes,webbug,,,,,,"ADDITIONAL SYSTEM INFORMATION :
# Java version
java version ""16.0.2"" 2021-07-20
Java(TM) SE Runtime Environment (build 16.0.2+7-67)
Java HotSpot(TM) 64-Bit Server VM (build 16.0.2+7-67, mixed mode, sharing)

# Operating system details
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=18.04
DISTRIB_CODENAME=bionic
DISTRIB_DESCRIPTION=""Ubuntu 18.04.1 LTS""
NAME=""Ubuntu""
VERSION=""18.04.1 LTS (Bionic Beaver)""
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=""Ubuntu 18.04.1 LTS""
VERSION_ID=""18.04""
HOME_URL=""https://www.ubuntu.com/""
SUPPORT_URL=""https://help.ubuntu.com/""
BUG_REPORT_URL=""https://bugs.launchpad.net/ubuntu/""
PRIVACY_POLICY_URL=""https://www.ubuntu.com/legal/terms-and-policies/privacy-policy""
VERSION_CODENAME=bionic
UBUNTU_CODENAME=bionic

$ uname -a
Linux xps1 4.15.0-50-generic #54-Ubuntu SMP Mon May 6 18:46:08 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux

A DESCRIPTION OF THE PROBLEM :
A JRE crash is observed when executing the attached program. This bug affects 16.0.2, 17-ea+32-2679 and 18-ea+7-288 but does not affect 1.8.0_301 or 11.0.12. This bug will not be reproduced if we limit compilation level up to 3 or lower, i.e., -XX:TieredStopAtLevel=<num> (num < 4).

ERROR MESSAGES/STACK TRACES THAT OCCUR :
# hs_err_pid673.log
(Attached.)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f81ad88e5e5, pid=673, tid=674
#
# JRE version: Java(TM) SE Runtime Environment (16.0.2+7) (build 16.0.2+7-67)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (16.0.2+7-67, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa555e5]  LinkResolver::runtime_resolve_interface_method(CallInfo&, methodHandle const&, Klass*, Handle, Klass*, bool, Thread*)+0x45
#
# Core dump will be written. Default location: /home/zzq/core
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:+PrintCommandLineFlags C

Host: Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz, 8 cores, 15G, Ubuntu 18.04.1 LTS
Time: Sat Jul 24 22:36:47 2021 CDT elapsed time: 0.097040 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007f81a8024a40):  JavaThread ""main"" [_thread_in_vm, id=674, stack(0x00007f81aeba7000,0x00007f81aeca8000)]

Stack: [0x00007f81aeba7000,0x00007f81aeca8000],  sp=0x00007f81aeca6360,  free space=1020k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa555e5]  LinkResolver::runtime_resolve_interface_method(CallInfo&, methodHandle const&, Klass*, Handle, Klass*, bool, Thread*)+0x45
V  [libjvm.so+0xa55cb5]  LinkResolver::resolve_interface_call(CallInfo&, Handle, Klass*, LinkInfo const&, bool, Thread*)+0x95
V  [libjvm.so+0xa568cb]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, Thread*)+0x13b
V  [libjvm.so+0x7ef8b1]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x181
V  [libjvm.so+0x7efe07]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x37
j  java.util.regex.Matcher.getTextLength()I+4 java.base@16.0.2
j  java.util.regex.Matcher.reset()Ljava/util/regex/Matcher;+110 java.base@16.0.2
j  java.util.regex.Matcher.<init>(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;)V+90 java.base@16.0.2
j  java.util.regex.Pattern.matcher(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;+38 java.base@16.0.2
j  C.m(Ljava/lang/String;)V+8
j  C.main([Ljava/lang/String;)V+10
v  ~StubRoutines::call_stub
V  [libjvm.so+0x7f4a75]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*)+0x2d5
V  [libjvm.so+0x88804b]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.1]+0x35b
V  [libjvm.so+0x88ac39]  jni_CallStaticVoidMethod+0x129
C  [libjli.so+0x462b]  JavaMain+0xcfb
C  [libjli.so+0x7ec9]  ThreadJavaMain+0x9

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.util.regex.Matcher.getTextLength()I+4 java.base@16.0.2
j  java.util.regex.Matcher.reset()Ljava/util/regex/Matcher;+110 java.base@16.0.2
j  java.util.regex.Matcher.<init>(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;)V+90 java.base@16.0.2
j  java.util.regex.Pattern.matcher(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;+38 java.base@16.0.2
j  C.m(Ljava/lang/String;)V+8
j  C.main([Ljava/lang/String;)V+10
v  ~StubRoutines::call_stub

siginfo: si_signo: 11 (SIGSEGV), si_code: 2 (SEGV_ACCERR), si_addr: 0x00000008035563c0

Register to memory mapping:

RAX=0x0 is NULL
RBX=0x00007f81aeca66c0 is pointing into the stack for thread: 0x00007f81a8024a40
RCX=0x00007f81a8025450 points into unknown readable memory: 0x00007f81aeca6770 | 70 67 ca ae 81 7f 00 00
RDX=0x0000000000000020 is an unknown value
RSP=0x00007f81aeca6360 is pointing into the stack for thread: 0x00007f81a8024a40
RBP=0x00007f81aeca64f0 is pointing into the stack for thread: 0x00007f81a8024a40
RSI=0x00007f81aeca6530 is pointing into the stack for thread: 0x00007f81a8024a40
RDI=0x00007f81aeca66c0 is pointing into the stack for thread: 0x00007f81a8024a40
R8 =0x00000008035563a0 is an unknown value
R9 =0x0000000000000001 is an unknown value
R10=0x00000008000640d0 is a pointer to class: 
java.lang.CharSequence {0x00000008000640d0}
R11=0x0000000800418248 is pointing into metadata
R12=0x00007f81a8024a40 is a thread
R13=0x00007f81a8025450 points into unknown readable memory: 0x00007f81aeca6770 | 70 67 ca ae 81 7f 00 00
R14=0x00000008035563a0 is an unknown value
R15=0x00007f81aeca6530 is pointing into the stack for thread: 0x00007f81a8024a40


Registers:
RAX=0x0000000000000000, RBX=0x00007f81aeca66c0, RCX=0x00007f81a8025450, RDX=0x0000000000000020
RSP=0x00007f81aeca6360, RBP=0x00007f81aeca64f0, RSI=0x00007f81aeca6530, RDI=0x00007f81aeca66c0
R8 =0x00000008035563a0, R9 =0x0000000000000001, R10=0x00000008000640d0, R11=0x0000000800418248
R12=0x00007f81a8024a40, R13=0x00007f81a8025450, R14=0x00000008035563a0, R15=0x00007f81aeca6530
RIP=0x00007f81ad88e5e5, EFLAGS=0x0000000000010206, CSGSFS=0x002b000000000033, ERR=0x0000000000000004
  TRAPNO=0x000000000000000e

Top of Stack: (sp=0x00007f81aeca6360)
0x00007f81aeca6360:   72732f6e65706f5b 29786c3631302578
0x00007f81aeca6370:   0000000000000000 0000000000000000
0x00007f81aeca6380:   efbe4786e49b69c1 3138663772be5d74
0x00007f81aeca6390:   0000000800064858 00007f81a8024a40 

Instructions: (pc=0x00007f81ad88e5e5)
0x00007f81ad88e4e5:   48 0f 6e db 48 8b 55 a0 66 0f 6c c3 0f 29 45 80
0x00007f81ad88e4f5:   48 85 c0 74 1c 48 8b 8b 88 02 00 00 48 63 31 3b
0x00007f81ad88e505:   71 04 74 57 8d 7e 01 89 39 48 8b 49 08 48 89 04
0x00007f81ad88e515:   f1 48 83 ec 08 41 b9 01 00 00 00 4c 89 e9 4c 89
0x00007f81ad88e525:   e6 4c 8b 85 78 ff ff ff 48 8b bd 70 ff ff ff 53
0x00007f81ad88e535:   e8 a6 f8 ff ff 4c 89 e7 e8 fe c1 d2 ff 58 5a e9
0x00007f81ad88e545:   be fe ff ff 0f 1f 80 00 00 00 00 48 8b 40 08 48
0x00007f81ad88e555:   89 85 78 ff ff ff e9 68 ff ff ff 48 89 cf 48 89
0x00007f81ad88e565:   95 58 ff ff ff 48 89 85 60 ff ff ff 48 89 8d 68
0x00007f81ad88e575:   ff ff ff e8 83 44 81 ff 48 8b 8d 68 ff ff ff 48
0x00007f81ad88e585:   8b 95 58 ff ff ff 48 8b 85 60 ff ff ff 48 63 31
0x00007f81ad88e595:   e9 6f ff ff ff 66 0f 1f 44 00 00 55 49 89 d2 48
0x00007f81ad88e5a5:   89 e5 41 57 49 89 f7 41 56 4d 89 c6 41 55 41 54
0x00007f81ad88e5b5:   53 48 89 fb 48 81 ec 68 01 00 00 4c 8b 65 10 64
0x00007f81ad88e5c5:   48 8b 04 25 28 00 00 00 48 89 45 c8 31 c0 45 84
0x00007f81ad88e5d5:   c9 74 09 48 85 c9 0f 84 ff 03 00 00 41 8b 52 14
0x00007f81ad88e5e5:   4d 3b 14 16 0f 84 20 01 00 00 83 fa 20 0f 84 e8
0x00007f81ad88e5f5:   00 00 00 4d 8b bc 24 78 02 00 00 4c 89 d7 49 8b
0x00007f81ad88e605:   47 18 49 8b 5f 10 4d 8b 6f 20 48 89 85 88 fe ff
0x00007f81ad88e615:   ff 49 8b 47 28 48 89 85 78 fe ff ff e8 ba 85 fc
0x00007f81ad88e625:   ff 4c 89 f7 4c 8d b5 00 ff ff ff 48 89 85 80 fe
0x00007f81ad88e635:   ff ff e8 a4 85 fc ff 4c 8b 85 80 fe ff ff be c8
0x00007f81ad88e645:   00 00 00 4c 89 f7 48 89 c1 48 8d 15 2b be 48 00
0x00007f81ad88e655:   31 c0 e8 f4 4d 7e ff 4d 89 f0 ba c6 05 00 00 4c
0x00007f81ad88e665:   89 e7 48 8d 05 d2 6f 7d 00 48 8d 35 db ce 49 00
0x00007f81ad88e675:   48 8b 88 20 05 00 00 e8 bf c9 c2 ff 48 83 3b 00
0x00007f81ad88e685:   74 17 48 8b b5 78 fe ff ff 4c 89 ff e8 1a ce 95
0x00007f81ad88e695:   ff 48 89 df e8 92 c1 95 ff 66 48 0f 6e c3 4d 89
0x00007f81ad88e6a5:   6f 20 0f 16 85 88 fe ff ff 41 0f 11 47 10 48 8b
0x00007f81ad88e6b5:   45 c8 64 48 2b 04 25 28 00 00 00 0f 85 46 05 00
0x00007f81ad88e6c5:   00 48 81 c4 68 01 00 00 5b 41 5c 41 5d 41 5e 41
0x00007f81ad88e6d5:   5f 5d c3 0f 1f 84 00 00 00 00 00 4c 89 d6 4c 89 


Stack slot to memory mapping:
stack at sp + 0 slots: 0x72732f6e65706f5b is an unknown value
stack at sp + 1 slots: 0x29786c3631302578 is an unknown value
stack at sp + 2 slots: 0x0 is NULL
stack at sp + 3 slots: 0x0 is NULL
stack at sp + 4 slots: 0xefbe4786e49b69c1 is an unknown value
stack at sp + 5 slots: 0x3138663772be5d74 is an unknown value
stack at sp + 6 slots: {method} {0x0000000800064858} 'length' '()I' in 'java/lang/CharSequence'
stack at sp + 7 slots: 0x00007f81a8024a40 is a thread


---------------  P R O C E S S  ---------------

Threads class SMR info:
_java_thread_list=0x00007f8154147650, length=12, elements={
0x00007f81a8024a40, 0x00007f81a81786e0, 0x00007f81a8179c60, 0x00007f81a817e2f0,
0x00007f81a817f840, 0x00007f81a8180d60, 0x00007f81a8182840, 0x00007f81a8183ea0,
0x00007f81a818d430, 0x00007f81a81948c0, 0x00007f81a819a340, 0x00007f8154146590
}

Java Threads: ( => current thread )
=>0x00007f81a8024a40 JavaThread ""main"" [_thread_in_vm, id=674, stack(0x00007f81aeba7000,0x00007f81aeca8000)]
  0x00007f81a81786e0 JavaThread ""Reference Handler"" daemon [_thread_blocked, id=681, stack(0x00007f81849c1000,0x00007f8184ac2000)]
  0x00007f81a8179c60 JavaThread ""Finalizer"" daemon [_thread_blocked, id=682, stack(0x00007f81848c0000,0x00007f81849c1000)]
  0x00007f81a817e2f0 JavaThread ""Signal Dispatcher"" daemon [_thread_blocked, id=683, stack(0x00007f81844e1000,0x00007f81845e2000)]
  0x00007f81a817f840 JavaThread ""Service Thread"" daemon [_thread_blocked, id=684, stack(0x00007f81843e0000,0x00007f81844e1000)]
  0x00007f81a8180d60 JavaThread ""Monitor Deflation Thread"" daemon [_thread_blocked, id=685, stack(0x00007f81842df000,0x00007f81843e0000)]
  0x00007f81a8182840 JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=686, stack(0x00007f81841de000,0x00007f81842df000)]
  0x00007f81a8183ea0 JavaThread ""C1 CompilerThread0"" daemon [_thread_blocked, id=687, stack(0x00007f81840dd000,0x00007f81841de000)]
  0x00007f81a818d430 JavaThread ""Sweeper thread"" daemon [_thread_blocked, id=688, stack(0x00007f816feff000,0x00007f8170000000)]
  0x00007f81a81948c0 JavaThread ""Notification Thread"" daemon [_thread_blocked, id=689, stack(0x00007f816fdfe000,0x00007f816feff000)]
  0x00007f81a819a340 JavaThread ""Common-Cleaner"" daemon [_thread_blocked, id=691, stack(0x00007f816f2ff000,0x00007f816f400000)]
  0x00007f8154146590 JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=692, stack(0x00007f816f1fe000,0x00007f816f2ff000)]

Other Threads:
  0x00007f81a8176120 VMThread ""VM Thread"" [stack: 0x00007f8184ac4000,0x00007f8184bc4000] [id=680]
  0x00007f81a81964d0 WatcherThread [stack: 0x00007f816fcfe000,0x00007f816fdfe000] [id=690]
  0x00007f81a8073f70 GCTaskThread ""GC Thread#0"" [stack: 0x00007f81878b2000,0x00007f81879b2000] [id=675]
  0x00007f81a80850a0 ConcurrentGCThread ""G1 Main Marker"" [stack: 0x00007f81877b0000,0x00007f81878b0000] [id=676]
  0x00007f81a8086130 ConcurrentGCThread ""G1 Conc#0"" [stack: 0x00007f81876ae000,0x00007f81877ae000] [id=677]
  0x00007f81a813be30 ConcurrentGCThread ""G1 Refine#0"" [stack: 0x00007f8184da4000,0x00007f8184ea4000] [id=678]
  0x00007f81a813ce50 ConcurrentGCThread ""G1 Service"" [stack: 0x00007f8184ca2000,0x00007f8184da2000] [id=679]

Threads with active compile tasks:
C2 CompilerThread0       99   42   !   4       java.util.regex.Pattern::<init> (144 bytes)
C2 CompilerThread1       99   43   !   4       java.util.regex.Pattern::matcher (44 bytes)

VM state: not at safepoint (normal execution)

VM Mutex/Monitor currently owned by a thread: None

Heap address: 0x0000000706400000, size: 3996 MB, Compressed Oops mode: Zero based, Oop shift amount: 3

CDS archive(s) mapped at: [0x0000000800000000-0x0000000800bc3000-0x0000000800bc3000), size 12333056, SharedBaseAddress: 0x0000000800000000, ArchiveRelocationMode: 0.
Compressed class space mapped at: 0x0000000800c00000-0x0000000840c00000, reserved size: 1073741824
Narrow klass base: 0x0000000800000000, Narrow klass shift: 3, Narrow klass range: 0x100000000

GC Precious Log:
 CPUs: 8 total, 8 available
 Memory: 15979M
 Large Page Support: Disabled
 NUMA Support: Disabled
 Compressed Oops: Enabled (Zero based)
 Heap Region Size: 2M
 Heap Min Capacity: 8M
 Heap Initial Capacity: 250M
 Heap Max Capacity: 3996M
 Pre-touch: Disabled
 Parallel Workers: 8
 Concurrent Workers: 2
 Concurrent Refinement Workers: 8
 Periodic GC: Disabled

Heap:
 garbage-first heap   total 260096K, used 12248K [0x0000000706400000, 0x0000000800000000)
  region size 2048K, 6 young (12288K), 0 survivors (0K)
 Metaspace       used 154K, committed 384K, reserved 1056768K
  class space    used 4K, committed 128K, reserved 1048576K

Heap Regions: E=young(eden), S=young(survivor), O=old, HS=humongous(starts), HC=humongous(continues), CS=collection set, F=free, OA=open archive, CA=closed archive, TAMS=top-at-mark-start (previous, next)
|   0|0x0000000706400000, 0x0000000706400000, 0x0000000706600000|  0%| F|  |TAMS 0x0000000706400000, 0x0000000706400000| Untracked 
|   1|0x0000000706600000, 0x0000000706600000, 0x0000000706800000|  0%| F|  |TAMS 0x0000000706600000, 0x0000000706600000| Untracked 
|   2|0x0000000706800000, 0x0000000706800000, 0x0000000706a00000|  0%| F|  |TAMS 0x0000000706800000, 0x0000000706800000| Untracked 
|   3|0x0000000706a00000, 0x0000000706a00000, 0x0000000706c00000|  0%| F|  |TAMS 0x0000000706a00000, 0x0000000706a00000| Untracked 
|   4|0x0000000706c00000, 0x0000000706c00000, 0x0000000706e00000|  0%| F|  |TAMS 0x0000000706c00000, 0x0000000706c00000| Untracked 
|   5|0x0000000706e00000, 0x0000000706e00000, 0x0000000707000000|  0%| F|  |TAMS 0x0000000706e00000, 0x0000000706e00000| Untracked 
|   6|0x0000000707000000, 0x0000000707000000, 0x0000000707200000|  0%| F|  |TAMS 0x0000000707000000, 0x0000000707000000| Untracked 
|   7|0x0000000707200000, 0x0000000707200000, 0x0000000707400000|  0%| F|  |TAMS 0x0000000707200000, 0x0000000707200000| Untracked 
|   8|0x0000000707400000, 0x0000000707400000, 0x0000000707600000|  0%| F|  |TAMS 0x0000000707400000, 0x0000000707400000| Untracked 
|   9|0x0000000707600000, 0x0000000707600000, 0x0000000707800000|  0%| F|  |TAMS 0x0000000707600000, 0x0000000707600000| Untracked 
|  10|0x0000000707800000, 0x0000000707800000, 0x0000000707a00000|  0%| F|  |TAMS 0x0000000707800000, 0x0000000707800000| Untracked 
|  11|0x0000000707a00000, 0x0000000707a00000, 0x0000000707c00000|  0%| F|  |TAMS 0x0000000707a00000, 0x0000000707a00000| Untracked 
|  12|0x0000000707c00000, 0x0000000707c00000, 0x0000000707e00000|  0%| F|  |TAMS 0x0000000707c00000, 0x0000000707c00000| Untracked 
|  13|0x0000000707e00000, 0x0000000707e00000, 0x0000000708000000|  0%| F|  |TAMS 0x0000000707e00000, 0x0000000707e00000| Untracked 
|  14|0x0000000708000000, 0x0000000708000000, 0x0000000708200000|  0%| F|  |TAMS 0x0000000708000000, 0x0000000708000000| Untracked 
|  15|0x0000000708200000, 0x0000000708200000, 0x0000000708400000|  0%| F|  |TAMS 0x0000000708200000, 0x0000000708200000| Untracked 
|  16|0x0000000708400000, 0x0000000708400000, 0x0000000708600000|  0%| F|  |TAMS 0x0000000708400000, 0x0000000708400000| Untracked 
|  17|0x0000000708600000, 0x0000000708600000, 0x0000000708800000|  0%| F|  |TAMS 0x0000000708600000, 0x0000000708600000| Untracked 
|  18|0x0000000708800000, 0x0000000708800000, 0x0000000708a00000|  0%| F|  |TAMS 0x0000000708800000, 0x0000000708800000| Untracked 
|  19|0x0000000708a00000, 0x0000000708a00000, 0x0000000708c00000|  0%| F|  |TAMS 0x0000000708a00000, 0x0000000708a00000| Untracked 
|  20|0x0000000708c00000, 0x0000000708c00000, 0x0000000708e00000|  0%| F|  |TAMS 0x0000000708c00000, 0x0000000708c00000| Untracked 
|  21|0x0000000708e00000, 0x0000000708e00000, 0x0000000709000000|  0%| F|  |TAMS 0x0000000708e00000, 0x0000000708e00000| Untracked 
|  22|0x0000000709000000, 0x0000000709000000, 0x0000000709200000|  0%| F|  |TAMS 0x0000000709000000, 0x0000000709000000| Untracked 
|  23|0x0000000709200000, 0x0000000709200000, 0x0000000709400000|  0%| F|  |TAMS 0x0000000709200000, 0x0000000709200000| Untracked 
|  24|0x0000000709400000, 0x0000000709400000, 0x0000000709600000|  0%| F|  |TAMS 0x0000000709400000, 0x0000000709400000| Untracked 
|  25|0x0000000709600000, 0x0000000709600000, 0x0000000709800000|  0%| F|  |TAMS 0x0000000709600000, 0x0000000709600000| Untracked 
|  26|0x0000000709800000, 0x0000000709800000, 0x0000000709a00000|  0%| F|  |TAMS 0x0000000709800000, 0x0000000709800000| Untracked 
|  27|0x0000000709a00000, 0x0000000709a00000, 0x0000000709c00000|  0%| F|  |TAMS 0x0000000709a00000, 0x0000000709a00000| Untracked 
|  28|0x0000000709c00000, 0x0000000709c00000, 0x0000000709e00000|  0%| F|  |TAMS 0x0000000709c00000, 0x0000000709c00000| Untracked 
|  29|0x0000000709e00000, 0x0000000709e00000, 0x000000070a000000|  0%| F|  |TAMS 0x0000000709e00000, 0x0000000709e00000| Untracked 
|  30|0x000000070a000000, 0x000000070a000000, 0x000000070a200000|  0%| F|  |TAMS 0x000000070a000000, 0x000000070a000000| Untracked 
|  31|0x000000070a200000, 0x000000070a200000, 0x000000070a400000|  0%| F|  |TAMS 0x000000070a200000, 0x000000070a200000| Untracked 
|  32|0x000000070a400000, 0x000000070a400000, 0x000000070a600000|  0%| F|  |TAMS 0x000000070a400000, 0x000000070a400000| Untracked 
|  33|0x000000070a600000, 0x000000070a600000, 0x000000070a800000|  0%| F|  |TAMS 0x000000070a600000, 0x000000070a600000| Untracked 
|  34|0x000000070a800000, 0x000000070a800000, 0x000000070aa00000|  0%| F|  |TAMS 0x000000070a800000, 0x000000070a800000| Untracked 
|  35|0x000000070aa00000, 0x000000070aa00000, 0x000000070ac00000|  0%| F|  |TAMS 0x000000070aa00000, 0x000000070aa00000| Untracked 
|  36|0x000000070ac00000, 0x000000070ac00000, 0x000000070ae00000|  0%| F|  |TAMS 0x000000070ac00000, 0x000000070ac00000| Untracked 
|  37|0x000000070ae00000, 0x000000070ae00000, 0x000000070b000000|  0%| F|  |TAMS 0x000000070ae00000, 0x000000070ae00000| Untracked 
|  38|0x000000070b000000, 0x000000070b000000, 0x000000070b200000|  0%| F|  |TAMS 0x000000070b000000, 0x000000070b000000| Untracked 
|  39|0x000000070b200000, 0x000000070b200000, 0x000000070b400000|  0%| F|  |TAMS 0x000000070b200000, 0x000000070b200000| Untracked 
|  40|0x000000070b400000, 0x000000070b400000, 0x000000070b600000|  0%| F|  |TAMS 0x000000070b400000, 0x000000070b400000| Untracked 
|  41|0x000000070b600000, 0x000000070b600000, 0x000000070b800000|  0%| F|  |TAMS 0x000000070b600000, 0x000000070b600000| Untracked 
|  42|0x000000070b800000, 0x000000070b800000, 0x000000070ba00000|  0%| F|  |TAMS 0x000000070b800000, 0x000000070b800000| Untracked 
|  43|0x000000070ba00000, 0x000000070ba00000, 0x000000070bc00000|  0%| F|  |TAMS 0x000000070ba00000, 0x000000070ba00000| Untracked 
|  44|0x000000070bc00000, 0x000000070bc00000, 0x000000070be00000|  0%| F|  |TAMS 0x000000070bc00000, 0x000000070bc00000| Untracked 
|  45|0x000000070be00000, 0x000000070be00000, 0x000000070c000000|  0%| F|  |TAMS 0x000000070be00000, 0x000000070be00000| Untracked 
|  46|0x000000070c000000, 0x000000070c000000, 0x000000070c200000|  0%| F|  |TAMS 0x000000070c000000, 0x000000070c000000| Untracked 
|  47|0x000000070c200000, 0x000000070c200000, 0x000000070c400000|  0%| F|  |TAMS 0x000000070c200000, 0x000000070c200000| Untracked 
|  48|0x000000070c400000, 0x000000070c400000, 0x000000070c600000|  0%| F|  |TAMS 0x000000070c400000, 0x000000070c400000| Untracked 
|  49|0x000000070c600000, 0x000000070c600000, 0x000000070c800000|  0%| F|  |TAMS 0x000000070c600000, 0x000000070c600000| Untracked 
|  50|0x000000070c800000, 0x000000070c800000, 0x000000070ca00000|  0%| F|  |TAMS 0x000000070c800000, 0x000000070c800000| Untracked 
|  51|0x000000070ca00000, 0x000000070ca00000, 0x000000070cc00000|  0%| F|  |TAMS 0x000000070ca00000, 0x000000070ca00000| Untracked 
|  52|0x000000070cc00000, 0x000000070cc00000, 0x000000070ce00000|  0%| F|  |TAMS 0x000000070cc00000, 0x000000070cc00000| Untracked 
|  53|0x000000070ce00000, 0x000000070ce00000, 0x000000070d000000|  0%| F|  |TAMS 0x000000070ce00000, 0x000000070ce00000| Untracked 
|  54|0x000000070d000000, 0x000000070d000000, 0x000000070d200000|  0%| F|  |TAMS 0x000000070d000000, 0x000000070d000000| Untracked 
|  55|0x000000070d200000, 0x000000070d200000, 0x000000070d400000|  0%| F|  |TAMS 0x000000070d200000, 0x000000070d200000| Untracked 
|  56|0x000000070d400000, 0x000000070d400000, 0x000000070d600000|  0%| F|  |TAMS 0x000000070d400000, 0x000000070d400000| Untracked 
|  57|0x000000070d600000, 0x000000070d600000, 0x000000070d800000|  0%| F|  |TAMS 0x000000070d600000, 0x000000070d600000| Untracked 
|  58|0x000000070d800000, 0x000000070d800000, 0x000000070da00000|  0%| F|  |TAMS 0x000000070d800000, 0x000000070d800000| Untracked 
|  59|0x000000070da00000, 0x000000070da00000, 0x000000070dc00000|  0%| F|  |TAMS 0x000000070da00000, 0x000000070da00000| Untracked 
|  60|0x000000070dc00000, 0x000000070dc00000, 0x000000070de00000|  0%| F|  |TAMS 0x000000070dc00000, 0x000000070dc00000| Untracked 
|  61|0x000000070de00000, 0x000000070de00000, 0x000000070e000000|  0%| F|  |TAMS 0x000000070de00000, 0x000000070de00000| Untracked 
|  62|0x000000070e000000, 0x000000070e000000, 0x000000070e200000|  0%| F|  |TAMS 0x000000070e000000, 0x000000070e000000| Untracked 
|  63|0x000000070e200000, 0x000000070e200000, 0x000000070e400000|  0%| F|  |TAMS 0x000000070e200000, 0x000000070e200000| Untracked 
|  64|0x000000070e400000, 0x000000070e400000, 0x000000070e600000|  0%| F|  |TAMS 0x000000070e400000, 0x000000070e400000| Untracked 
|  65|0x000000070e600000, 0x000000070e600000, 0x000000070e800000|  0%| F|  |TAMS 0x000000070e600000, 0x000000070e600000| Untracked 
|  66|0x000000070e800000, 0x000000070e800000, 0x000000070ea00000|  0%| F|  |TAMS 0x000000070e800000, 0x000000070e800000| Untracked 
|  67|0x000000070ea00000, 0x000000070ea00000, 0x000000070ec00000|  0%| F|  |TAMS 0x000000070ea00000, 0x000000070ea00000| Untracked 
|  68|0x000000070ec00000, 0x000000070ec00000, 0x000000070ee00000|  0%| F|  |TAMS 0x000000070ec00000, 0x000000070ec00000| Untracked 
|  69|0x000000070ee00000, 0x000000070ee00000, 0x000000070f000000|  0%| F|  |TAMS 0x000000070ee00000, 0x000000070ee00000| Untracked 
|  70|0x000000070f000000, 0x000000070f000000, 0x000000070f200000|  0%| F|  |TAMS 0x000000070f000000, 0x000000070f000000| Untracked 
|  71|0x000000070f200000, 0x000000070f200000, 0x000000070f400000|  0%| F|  |TAMS 0x000000070f200000, 0x000000070f200000| Untracked 
|  72|0x000000070f400000, 0x000000070f400000, 0x000000070f600000|  0%| F|  |TAMS 0x000000070f400000, 0x000000070f400000| Untracked 
|  73|0x000000070f600000, 0x000000070f600000, 0x000000070f800000|  0%| F|  |TAMS 0x000000070f600000, 0x000000070f600000| Untracked 
|  74|0x000000070f800000, 0x000000070f800000, 0x000000070fa00000|  0%| F|  |TAMS 0x000000070f800000, 0x000000070f800000| Untracked 
|  75|0x000000070fa00000, 0x000000070fa00000, 0x000000070fc00000|  0%| F|  |TAMS 0x000000070fa00000, 0x000000070fa00000| Untracked 
|  76|0x000000070fc00000, 0x000000070fc00000, 0x000000070fe00000|  0%| F|  |TAMS 0x000000070fc00000, 0x000000070fc00000| Untracked 
|  77|0x000000070fe00000, 0x000000070fe00000, 0x0000000710000000|  0%| F|  |TAMS 0x000000070fe00000, 0x000000070fe00000| Untracked 
|  78|0x0000000710000000, 0x0000000710000000, 0x0000000710200000|  0%| F|  |TAMS 0x0000000710000000, 0x0000000710000000| Untracked 
|  79|0x0000000710200000, 0x0000000710200000, 0x0000000710400000|  0%| F|  |TAMS 0x0000000710200000, 0x0000000710200000| Untracked 
|  80|0x0000000710400000, 0x0000000710400000, 0x0000000710600000|  0%| F|  |TAMS 0x0000000710400000, 0x0000000710400000| Untracked 
|  81|0x0000000710600000, 0x0000000710600000, 0x0000000710800000|  0%| F|  |TAMS 0x0000000710600000, 0x0000000710600000| Untracked 
|  82|0x0000000710800000, 0x0000000710800000, 0x0000000710a00000|  0%| F|  |TAMS 0x0000000710800000, 0x0000000710800000| Untracked 
|  83|0x0000000710a00000, 0x0000000710a00000, 0x0000000710c00000|  0%| F|  |TAMS 0x0000000710a00000, 0x0000000710a00000| Untracked 
|  84|0x0000000710c00000, 0x0000000710c00000, 0x0000000710e00000|  0%| F|  |TAMS 0x0000000710c00000, 0x0000000710c00000| Untracked 
|  85|0x0000000710e00000, 0x0000000710e00000, 0x0000000711000000|  0%| F|  |TAMS 0x0000000710e00000, 0x0000000710e00000| Untracked 
|  86|0x0000000711000000, 0x0000000711000000, 0x0000000711200000|  0%| F|  |TAMS 0x0000000711000000, 0x0000000711000000| Untracked 
|  87|0x0000000711200000, 0x0000000711200000, 0x0000000711400000|  0%| F|  |TAMS 0x0000000711200000, 0x0000000711200000| Untracked 
|  88|0x0000000711400000, 0x0000000711400000, 0x0000000711600000|  0%| F|  |TAMS 0x0000000711400000, 0x0000000711400000| Untracked 
|  89|0x0000000711600000, 0x0000000711600000, 0x0000000711800000|  0%| F|  |TAMS 0x0000000711600000, 0x0000000711600000| Untracked 
|  90|0x0000000711800000, 0x0000000711800000, 0x0000000711a00000|  0%| F|  |TAMS 0x0000000711800000, 0x0000000711800000| Untracked 
|  91|0x0000000711a00000, 0x0000000711a00000, 0x0000000711c00000|  0%| F|  |TAMS 0x0000000711a00000, 0x0000000711a00000| Untracked 
|  92|0x0000000711c00000, 0x0000000711c00000, 0x0000000711e00000|  0%| F|  |TAMS 0x0000000711c00000, 0x0000000711c00000| Untracked 
|  93|0x0000000711e00000, 0x0000000711e00000, 0x0000000712000000|  0%| F|  |TAMS 0x0000000711e00000, 0x0000000711e00000| Untracked 
|  94|0x0000000712000000, 0x0000000712000000, 0x0000000712200000|  0%| F|  |TAMS 0x0000000712000000, 0x0000000712000000| Untracked 
|  95|0x0000000712200000, 0x0000000712200000, 0x0000000712400000|  0%| F|  |TAMS 0x0000000712200000, 0x0000000712200000| Untracked 
|  96|0x0000000712400000, 0x0000000712400000, 0x0000000712600000|  0%| F|  |TAMS 0x0000000712400000, 0x0000000712400000| Untracked 
|  97|0x0000000712600000, 0x0000000712600000, 0x0000000712800000|  0%| F|  |TAMS 0x0000000712600000, 0x0000000712600000| Untracked 
|  98|0x0000000712800000, 0x0000000712800000, 0x0000000712a00000|  0%| F|  |TAMS 0x0000000712800000, 0x0000000712800000| Untracked 
|  99|0x0000000712a00000, 0x0000000712a00000, 0x0000000712c00000|  0%| F|  |TAMS 0x0000000712a00000, 0x0000000712a00000| Untracked 
| 100|0x0000000712c00000, 0x0000000712c00000, 0x0000000712e00000|  0%| F|  |TAMS 0x0000000712c00000, 0x0000000712c00000| Untracked 
| 101|0x0000000712e00000, 0x0000000712e00000, 0x0000000713000000|  0%| F|  |TAMS 0x0000000712e00000, 0x0000000712e00000| Untracked 
| 102|0x0000000713000000, 0x0000000713000000, 0x0000000713200000|  0%| F|  |TAMS 0x0000000713000000, 0x0000000713000000| Untracked 
| 103|0x0000000713200000, 0x0000000713200000, 0x0000000713400000|  0%| F|  |TAMS 0x0000000713200000, 0x0000000713200000| Untracked 
| 104|0x0000000713400000, 0x0000000713400000, 0x0000000713600000|  0%| F|  |TAMS 0x0000000713400000, 0x0000000713400000| Untracked 
| 105|0x0000000713600000, 0x0000000713600000, 0x0000000713800000|  0%| F|  |TAMS 0x0000000713600000, 0x0000000713600000| Untracked 
| 106|0x0000000713800000, 0x0000000713800000, 0x0000000713a00000|  0%| F|  |TAMS 0x0000000713800000, 0x0000000713800000| Untracked 
| 107|0x0000000713a00000, 0x0000000713a00000, 0x0000000713c00000|  0%| F|  |TAMS 0x0000000713a00000, 0x0000000713a00000| Untracked 
| 108|0x0000000713c00000, 0x0000000713c00000, 0x0000000713e00000|  0%| F|  |TAMS 0x0000000713c00000, 0x0000000713c00000| Untracked 
| 109|0x0000000713e00000, 0x0000000713e00000, 0x0000000714000000|  0%| F|  |TAMS 0x0000000713e00000, 0x0000000713e00000| Untracked 
| 110|0x0000000714000000, 0x0000000714000000, 0x0000000714200000|  0%| F|  |TAMS 0x0000000714000000, 0x0000000714000000| Untracked 
| 111|0x0000000714200000, 0x0000000714200000, 0x0000000714400000|  0%| F|  |TAMS 0x0000000714200000, 0x0000000714200000| Untracked 
| 112|0x0000000714400000, 0x0000000714400000, 0x0000000714600000|  0%| F|  |TAMS 0x0000000714400000, 0x0000000714400000| Untracked 
| 113|0x0000000714600000, 0x0000000714600000, 0x0000000714800000|  0%| F|  |TAMS 0x0000000714600000, 0x0000000714600000| Untracked 
| 114|0x0000000714800000, 0x0000000714800000, 0x0000000714a00000|  0%| F|  |TAMS 0x0000000714800000, 0x0000000714800000| Untracked 
| 115|0x0000000714a00000, 0x0000000714a00000, 0x0000000714c00000|  0%| F|  |TAMS 0x0000000714a00000, 0x0000000714a00000| Untracked 
| 116|0x0000000714c00000, 0x0000000714c00000, 0x0000000714e00000|  0%| F|  |TAMS 0x0000000714c00000, 0x0000000714c00000| Untracked 
| 117|0x0000000714e00000, 0x0000000714e00000, 0x0000000715000000|  0%| F|  |TAMS 0x0000000714e00000, 0x0000000714e00000| Untracked 
| 118|0x0000000715000000, 0x0000000715000000, 0x0000000715200000|  0%| F|  |TAMS 0x0000000715000000, 0x0000000715000000| Untracked 
| 119|0x0000000715200000, 0x00000007153c3370, 0x0000000715400000| 88%| E|  |TAMS 0x0000000715200000, 0x0000000715200000| Complete 
| 120|0x0000000715400000, 0x0000000715600000, 0x0000000715600000|100%| E|CS|TAMS 0x0000000715400000, 0x0000000715400000| Complete 
| 121|0x0000000715600000, 0x0000000715800000, 0x0000000715800000|100%| E|CS|TAMS 0x0000000715600000, 0x0000000715600000| Complete 
| 122|0x0000000715800000, 0x0000000715a00000, 0x0000000715a00000|100%| E|CS|TAMS 0x0000000715800000, 0x0000000715800000| Complete 
| 123|0x0000000715a00000, 0x0000000715c00000, 0x0000000715c00000|100%| E|CS|TAMS 0x0000000715a00000, 0x0000000715a00000| Complete 
| 124|0x0000000715c00000, 0x0000000715e00000, 0x0000000715e00000|100%| E|CS|TAMS 0x0000000715c00000, 0x0000000715c00000| Complete 
|1996|0x00000007ffc00000, 0x00000007ffd75000, 0x00000007ffe00000| 72%|OA|  |TAMS 0x00000007ffc00000, 0x00000007ffc00000| Untracked 
|1997|0x00000007ffe00000, 0x00000007ffe81000, 0x0000000800000000| 25%|CA|  |TAMS 0x00000007ffe00000, 0x00000007ffe00000| Untracked 

Card table byte_map: [0x00007f818fe60000,0x00007f819062e000] _byte_map_base: 0x00007f818c62e000

Marking Bits (Prev, Next): (CMBitMap*) 0x00007f81a8074b20, (CMBitMap*) 0x00007f81a8074b60
 Prev Bits: [0x00007f818b822000, 0x00007f818f692000)
 Next Bits: [0x00007f81879b2000, 0x00007f818b822000)

Polling page: 0x00007f81aecbb000

Metaspace:

Usage:
  Non-class:    149.81 KB used.
      Class:      4.79 KB used.
       Both:    154.60 KB used.

Virtual space:
  Non-class space:        8.00 MB reserved,     256.00 KB (  3%) committed,  1 nodes.
      Class space:        1.00 GB reserved,     128.00 KB ( <1%) committed,  1 nodes.
              Both:        1.01 GB reserved,     384.00 KB ( <1%) committed. 

Chunk freelists:
   Non-Class:  4.00 MB
       Class:  3.75 MB
        Both:  7.74 MB

MaxMetaspaceSize: 17179869184.00 GB
CompressedClassSpaceSize: 1.00 GB
 - commit_granule_bytes: 65536.
 - commit_granule_words: 8192.
 - virtual_space_node_default_size: 1048576.
 - enlarge_chunks_in_place: 1.
 - new_chunks_are_fully_committed: 0.
 - uncommit_free_chunks: 1.
 - use_allocation_guard: 0.
 - handle_deallocations: 1.


Internal statistics:

num_allocs_failed_limit: 0.
num_arena_births: 4.
num_arena_deaths: 0.
num_vsnodes_births: 2.
num_vsnodes_deaths: 0.
num_space_committed: 6.
num_space_uncommitted: 0.
num_chunks_returned_to_freelist: 0.
num_chunks_taken_from_freelist: 5.
num_chunk_merges: 0.
num_chunk_splits: 2.
num_chunks_enlarged: 0.
num_purges: 0.

CodeHeap 'non-profiled nmethods': size=120028Kb used=12Kb max_used=12Kb free=120015Kb
 bounds [0x00007f81992a3000, 0x00007f8199513000, 0x00007f81a07da000]
CodeHeap 'profiled nmethods': size=120028Kb used=89Kb max_used=89Kb free=119938Kb
 bounds [0x00007f8191d6c000, 0x00007f8191fdc000, 0x00007f81992a3000]
CodeHeap 'non-nmethods': size=5704Kb used=1046Kb max_used=1066Kb free=4657Kb
 bounds [0x00007f81917da000, 0x00007f8191a4a000, 0x00007f8191d6c000]
 total_blobs=347 nmethods=41 adapters=221
 compilation: enabled
              stopped_count=0, restarted_count=0
 full_count=0

Compilation events (20 events):
Event: 0.050 Thread 0x00007f81a8183ea0   30       3       java.lang.NullPointerException::<init> (5 bytes)
Event: 0.050 Thread 0x00007f81a8183ea0 nmethod 30 0x00007f8191d7f890 code [0x00007f8191d7fa40, 0x00007f8191d7fc40]
Event: 0.050 Thread 0x00007f81a8183ea0   31       3       java.lang.RuntimeException::<init> (5 bytes)
Event: 0.050 Thread 0x00007f81a8183ea0 nmethod 31 0x00007f8191d7fd10 code [0x00007f8191d7fee0, 0x00007f8191d80300]
Event: 0.050 Thread 0x00007f81a8183ea0   32       3       java.lang.Exception::<init> (5 bytes)
Event: 0.050 Thread 0x00007f81a8183ea0 nmethod 32 0x00007f8191d80410 code [0x00007f8191d805e0, 0x00007f8191d809a0]
Event: 0.050 Thread 0x00007f81a8183ea0   33       3       java.lang.Throwable::<init> (29 bytes)
Event: 0.050 Thread 0x00007f81a8183ea0 nmethod 33 0x00007f8191d80a90 code [0x00007f8191d80c60, 0x00007f8191d80fe0]
Event: 0.050 Thread 0x00007f81a8183ea0   34  s    3       java.lang.NullPointerException::fillInStackTrace (41 bytes)
Event: 0.050 Thread 0x00007f81a8183ea0 nmethod 34 0x00007f8191d81090 code [0x00007f8191d81260, 0x00007f8191d817b0]
Event: 0.050 Thread 0x00007f81a8183ea0   37   !   3       java.util.regex.Pattern::matcher (44 bytes)
Event: 0.050 Thread 0x00007f81a8183ea0 nmethod 37 0x00007f8191d81910 code [0x00007f8191d81ae0, 0x00007f8191d81e50]
Event: 0.050 Thread 0x00007f81a8183ea0   35  s    3       java.lang.Throwable::fillInStackTrace (29 bytes)
Event: 0.051 Thread 0x00007f81a8182840   38       4       java.util.regex.Matcher::reset (128 bytes)
Event: 0.051 Thread 0x00007f81a8183ea0 nmethod 35 0x00007f8191d81f90 code [0x00007f8191d82140, 0x00007f8191d82420]
Event: 0.053 Thread 0x00007f81a8182840 nmethod 38 0x00007f81992a3790 code [0x00007f81992a3920, 0x00007f81992a3b98]
Event: 0.054 Thread 0x00007f81a8182840   39       4       java.util.regex.Pattern$Node::study (21 bytes)
Event: 0.055 Thread 0x00007f81a8182840 nmethod 39 0x00007f81992a3d10 code [0x00007f81992a3ea0, 0x00007f81992a3fc8]
Event: 0.080 Thread 0x00007f81a8182840   40       4       C::m (13 bytes)
Event: 0.095 Thread 0x00007f81a8182840 nmethod 40 0x00007f81992a4110 code [0x00007f81992a4320, 0x00007f81992a50a8]

GC Heap History (0 events):
No events

Deoptimization events (4 events):
Event: 0.095 Thread 0x00007f81a8024a40 Uncommon trap: trap_request=0xfffffff6 fr.pc=0x00007f81992a4d70 relative=0x0000000000000a50
Event: 0.095 Thread 0x00007f81a8024a40 Uncommon trap: reason=null_check action=maybe_recompile pc=0x00007f81992a4d70 method=java.util.regex.Matcher.getTextLength()I @ 4 c2
Event: 0.095 Thread 0x00007f81a8024a40 DEOPT PACKING pc=0x00007f81992a4d70 sp=0x00007f81aeca6940
Event: 0.095 Thread 0x00007f81a8024a40 DEOPT UNPACKING pc=0x00007f8191827424 sp=0x00007f81aeca6760 mode 2

Classes unloaded (0 events):
No events

Classes redefined (0 events):
No events

Internal exceptions (20 events):
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715350cc8}> (0x0000000715350cc8) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715351270}> (0x0000000715351270) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715351818}> (0x0000000715351818) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715351dc0}> (0x0000000715351dc0) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715352368}> (0x0000000715352368) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715352c08}> (0x0000000715352c08) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x00000007153531b0}> (0x00000007153531b0) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715353758}> (0x0000000715353758) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715353d00}> (0x0000000715353d00) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x00000007153542a8}> (0x00000007153542a8) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715354850}> (0x0000000715354850) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715354df8}> (0x0000000715354df8) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x00000007153553a0}> (0x00000007153553a0) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715355948}> (0x0000000715355948) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715355ef0}> (0x0000000715355ef0) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715356498}> (0x0000000715356498) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715356a40}> (0x0000000715356a40) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715356fe8}> (0x0000000715356fe8) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715357590}> (0x0000000715357590) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]
Event: 0.095 Thread 0x00007f81a8024a40 Exception <a 'java/lang/NullPointerException'{0x0000000715357b38}> (0x0000000715357b38) 
thrown [open/src/hotspot/share/runtime/sharedRuntime.cpp, line 1153]

Events (20 events):
Event: 0.035 Thread 0x00007f81a817e2f0 Thread added: 0x00007f81a817e2f0
Event: 0.035 Protecting memory [0x00007f81844e1000,0x00007f81844e5000] with protection modes 0
Event: 0.035 Thread 0x00007f81a817f840 Thread added: 0x00007f81a817f840
Event: 0.035 Protecting memory [0x00007f81843e0000,0x00007f81843e4000] with protection modes 0
Event: 0.035 Thread 0x00007f81a8180d60 Thread added: 0x00007f81a8180d60
Event: 0.035 Protecting memory [0x00007f81842df000,0x00007f81842e3000] with protection modes 0
Event: 0.035 Thread 0x00007f81a8182840 Thread added: 0x00007f81a8182840
Event: 0.035 Protecting memory [0x00007f81841de000,0x00007f81841e2000] with protection modes 0
Event: 0.035 Thread 0x00007f81a8183ea0 Thread added: 0x00007f81a8183ea0
Event: 0.035 Protecting memory [0x00007f81840dd000,0x00007f81840e1000] with protection modes 0
Event: 0.035 Thread 0x00007f81a818d430 Thread added: 0x00007f81a818d430
Event: 0.035 Protecting memory [0x00007f816feff000,0x00007f816ff03000] with protection modes 0
Event: 0.037 Thread 0x00007f81a81948c0 Thread added: 0x00007f81a81948c0
Event: 0.037 Protecting memory [0x00007f816fdfe000,0x00007f816fe02000] with protection modes 0
Event: 0.038 loading class jdk/internal/loader/URLClassPath$FileLoader
Event: 0.038 loading class jdk/internal/loader/URLClassPath$FileLoader done
Event: 0.038 loading class jdk/internal/loader/URLClassPath$FileLoader$1
Event: 0.038 loading class jdk/internal/loader/URLClassPath$FileLoader$1 done
Event: 0.039 Thread 0x00007f81a819a340 Thread added: 0x00007f81a819a340
Event: 0.039 Protecting memory [0x00007f816f2ff000,0x00007f816f303000] with protection modes 0


Dynamic libraries:
706400000-715e00000 rw-p 00000000 00:00 0 
715e00000-7ffc00000 ---p 00000000 00:00 0 
7ffc00000-7ffd00000 rw-p 00000000 00:00 0 
7ffd00000-7ffd75000 rw-p 00c7c000 08:05 20189898                         /home/zzq/opt/jdk-16.0.2/lib/server/classes.jsa
7ffd75000-7ffe00000 rw-p 00000000 00:00 0 
7ffe00000-7ffe81000 rw-p 00bfb000 08:05 20189898                         /home/zzq/opt/jdk-16.0.2/lib/server/classes.jsa
7ffe81000-800000000 rw-p 00000000 00:00 0 
800000000-800003000 rwxp 00001000 08:05 20189898                         /home/zzq/opt/jdk-16.0.2/lib/server/classes.jsa
800003000-800412000 rw-p 00004000 08:05 20189898                         /home/zzq/opt/jdk-16.0.2/lib/server/classes.jsa
800412000-800bc3000 r--p 00413000 08:05 20189898                         /home/zzq/opt/jdk-16.0.2/lib/server/classes.jsa
800bc3000-800c00000 ---p 00000000 00:00 0 
800c00000-800c10000 rw-p 00000000 00:00 0 
800c10000-800c40000 ---p 00000000 00:00 0 
800c40000-800c50000 rw-p 00000000 00:00 0 
800c50000-840c00000 ---p 00000000 00:00 0 
56074b41e000-56074b41f000 r-xp 00000000 08:05 20189484                   /home/zzq/opt/jdk-16.0.2/bin/java
56074b420000-56074b421000 r--p 00001000 08:05 20189484                   /home/zzq/opt/jdk-16.0.2/bin/java
56074b421000-56074b422000 rw-p 00002000 08:05 20189484                   /home/zzq/opt/jdk-16.0.2/bin/java
56074c451000-56074c472000 rw-p 00000000 00:00 0                          [heap]
7f8138000000-7f8138021000 rw-p 00000000 00:00 0 
7f8138021000-7f813c000000 ---p 00000000 00:00 0 
7f813c000000-7f813c04d000 rw-p 00000000 00:00 0 
7f813c04d000-7f8140000000 ---p 00000000 00:00 0 
7f8140000000-7f8140021000 rw-p 00000000 00:00 0 
7f8140021000-7f8144000000 ---p 00000000 00:00 0 
7f8144000000-7f8144021000 rw-p 00000000 00:00 0 
7f8144021000-7f8148000000 ---p 00000000 00:00 0 
7f8148000000-7f81480d6000 rw-p 00000000 00:00 0 
7f81480d6000-7f814c000000 ---p 00000000 00:00 0 
7f814c000000-7f814c021000 rw-p 00000000 00:00 0 
7f814c021000-7f8150000000 ---p 00000000 00:00 0 
7f8150000000-7f8150021000 rw-p 00000000 00:00 0 
7f8150021000-7f8154000000 ---p 00000000 00:00 0 
7f8154000000-7f81542c9000 rw-p 00000000 00:00 0 
7f81542c9000-7f8158000000 ---p 00000000 00:00 0 
7f8158000000-7f8158021000 rw-p 00000000 00:00 0 
7f8158021000-7f815c000000 ---p 00000000 00:00 0 
7f815c000000-7f815c021000 rw-p 00000000 00:00 0 
7f815c021000-7f8160000000 ---p 00000000 00:00 0 
7f8160000000-7f8160021000 rw-p 00000000 00:00 0 
7f8160021000-7f8164000000 ---p 00000000 00:00 0 
7f8164000000-7f8164021000 rw-p 00000000 00:00 0 
7f8164021000-7f8168000000 ---p 00000000 00:00 0 
7f8168000000-7f8168021000 rw-p 00000000 00:00 0 
7f8168021000-7f816c000000 ---p 00000000 00:00 0 
7f816ee58000-7f816f1fe000 rw-p 00000000 00:00 0 
7f816f1fe000-7f816f202000 ---p 00000000 00:00 0 
7f816f202000-7f816f2ff000 rw-p 00000000 00:00 0 
7f816f2ff000-7f816f303000 ---p 00000000 00:00 0 
7f816f303000-7f816f430000 rw-p 00000000 00:00 0 
7f816f430000-7f816f800000 ---p 00000000 00:00 0 
7f816f800000-7f816f810000 rw-p 00000000 00:00 0 
7f816f810000-7f816fc00000 ---p 00000000 00:00 0 
7f816fcfc000-7f816fcfd000 ---p 00000000 00:00 0 
7f816fcfd000-7f816fdfe000 rw-p 00000000 00:00 0 
7f816fdfe000-7f816fe02000 ---p 00000000 00:00 0 
7f816fe02000-7f816feff000 rw-p 00000000 00:00 0 
7f816feff000-7f816ff03000 ---p 00000000 00:00 0 
7f816ff03000-7f8170000000 rw-p 00000000 00:00 0 
7f8170000000-7f8170021000 rw-p 00000000 00:00 0 
7f8170021000-7f8174000000 ---p 00000000 00:00 0 
7f8174000000-7f8174021000 rw-p 00000000 00:00 0 
7f8174021000-7f8178000000 ---p 00000000 00:00 0 
7f8178000000-7f8178021000 rw-p 00000000 00:00 0 
7f8178021000-7f817c000000 ---p 00000000 00:00 0 
7f817c000000-7f817c021000 rw-p 00000000 00:00 0 
7f817c021000-7f8180000000 ---p 00000000 00:00 0 
7f8180000000-7f8180021000 rw-p 00000000 00:00 0 
7f8180021000-7f8184000000 ---p 00000000 00:00 0 
7f81840dd000-7f81840e1000 ---p 00000000 00:00 0 
7f81840e1000-7f81841de000 rw-p 00000000 00:00 0 
7f81841de000-7f81841e2000 ---p 00000000 00:00 0 
7f81841e2000-7f81842df000 rw-p 00000000 00:00 0 
7f81842df000-7f81842e3000 ---p 00000000 00:00 0 
7f81842e3000-7f81843e0000 rw-p 00000000 00:00 0 
7f81843e0000-7f81843e4000 ---p 00000000 00:00 0 
7f81843e4000-7f81844e1000 rw-p 00000000 00:00 0 
7f81844e1000-7f81844e5000 ---p 00000000 00:00 0 
7f81844e5000-7f81845e2000 rw-p 00000000 00:00 0 
7f81845e2000-7f81848c0000 r--p 00000000 08:02 6162051                    /usr/lib/locale/locale-archive
7f81848c0000-7f81848c4000 ---p 00000000 00:00 0 
7f81848c4000-7f81849c1000 rw-p 00000000 00:00 0 
7f81849c1000-7f81849c5000 ---p 00000000 00:00 0 
7f81849c5000-7f8184ac2000 rw-p 00000000 00:00 0 
7f8184ac2000-7f8184ac3000 ---p 00000000 00:00 0 
7f8184ac3000-7f8184ca0000 rw-p 00000000 00:00 0 
7f8184ca0000-7f8184ca1000 ---p 00000000 00:00 0 
7f8184ca1000-7f8184da2000 rw-p 00000000 00:00 0 
7f8184da2000-7f8184da3000 ---p 00000000 00:00 0 
7f8184da3000-7f81876ac000 rw-p 00000000 00:00 0 
7f81876ac000-7f81876ad000 ---p 00000000 00:00 0 
7f81876ad000-7f81877ae000 rw-p 00000000 00:00 0 
7f81877ae000-7f81877af000 ---p 00000000 00:00 0 
7f81877af000-7f81878b0000 rw-p 00000000 00:00 0 
7f81878b0000-7f81878b1000 ---p 00000000 00:00 0 
7f81878b1000-7f8187d9a000 rw-p 00000000 00:00 0 
7f8187d9a000-7f818b812000 ---p 00000000 00:00 0 
7f818b812000-7f818bc0a000 rw-p 00000000 00:00 0 
7f818bc0a000-7f818f682000 ---p 00000000 00:00 0 
7f818f682000-7f818f70f000 rw-p 00000000 00:00 0 
7f818f70f000-7f818fe5e000 ---p 00000000 00:00 0 
7f818fe5e000-7f818fedd000 rw-p 00000000 00:00 0 
7f818fedd000-7f819062c000 ---p 00000000 00:00 0 
7f819062c000-7f81906ab000 rw-p 00000000 00:00 0 
7f81906ab000-7f8190dfa000 ---p 00000000 00:00 0 
7f8190dfa000-7f8191609000 rw-p 00000000 00:00 0 
7f8191609000-7f81916ef000 ---p 00000000 00:00 0 
7f81916ef000-7f81916f4000 rw-p 00000000 00:00 0 
7f81916f4000-7f81917da000 ---p 00000000 00:00 0 
7f81917da000-7f8191a4a000 rwxp 00000000 00:00 0 
7f8191a4a000-7f8191d6c000 ---p 00000000 00:00 0 
7f8191d6c000-7f8191fdc000 rwxp 00000000 00:00 0 
7f8191fdc000-7f81992a3000 ---p 00000000 00:00 0 
7f81992a3000-7f8199513000 rwxp 00000000 00:00 0 
7f8199513000-7f81a07da000 ---p 00000000 00:00 0 
7f81a07da000-7f81a8000000 r--s 00000000 08:05 20189889                   /home/zzq/opt/jdk-16.0.2/lib/modules
7f81a8000000-7f81a81b0000 rw-p 00000000 00:00 0 
7f81a81b0000-7f81ac000000 ---p 00000000 00:00 0 
7f81ac010000-7f81ac051000 rw-p 00000000 00:00 0 
7f81ac051000-7f81ac05c000 r-xp 00000000 08:02 9437852                    /lib/x86_64-linux-gnu/libnss_files-2.27.so
7f81ac05c000-7f81ac25b000 ---p 0000b000 08:02 9437852                    /lib/x86_64-linux-gnu/libnss_files-2.27.so
7f81ac25b000-7f81ac25c000 r--p 0000a000 08:02 9437852                    /lib/x86_64-linux-gnu/libnss_files-2.27.so
7f81ac25c000-7f81ac25d000 rw-p 0000b000 08:02 9437852                    /lib/x86_64-linux-gnu/libnss_files-2.27.so
7f81ac25d000-7f81ac263000 rw-p 00000000 00:00 0 
7f81ac263000-7f81ac27a000 r-xp 00000000 08:02 9437849                    /lib/x86_64-linux-gnu/libnsl-2.27.so
7f81ac27a000-7f81ac479000 ---p 00017000 08:02 9437849                    /lib/x86_64-linux-gnu/libnsl-2.27.so
7f81ac479000-7f81ac47a000 r--p 00016000 08:02 9437849                    /lib/x86_64-linux-gnu/libnsl-2.27.so
7f81ac47a000-7f81ac47b000 rw-p 00017000 08:02 9437849                    /lib/x86_64-linux-gnu/libnsl-2.27.so
7f81ac47b000-7f81ac47d000 rw-p 00000000 00:00 0 
7f81ac47d000-7f81ac488000 r-xp 00000000 08:02 9437854                    /lib/x86_64-linux-gnu/libnss_nis-2.27.so
7f81ac488000-7f81ac687000 ---p 0000b000 08:02 9437854                    /lib/x86_64-linux-gnu/libnss_nis-2.27.so
7f81ac687000-7f81ac688000 r--p 0000a000 08:02 9437854                    /lib/x86_64-linux-gnu/libnss_nis-2.27.so
7f81ac688000-7f81ac689000 rw-p 0000b000 08:02 9437854                    /lib/x86_64-linux-gnu/libnss_nis-2.27.so
7f81ac689000-7f81ac691000 r-xp 00000000 08:02 9437850                    /lib/x86_64-linux-gnu/libnss_compat-2.27.so
7f81ac691000-7f81ac891000 ---p 00008000 08:02 9437850                    /lib/x86_64-linux-gnu/libnss_compat-2.27.so
7f81ac891000-7f81ac892000 r--p 00008000 08:02 9437850                    /lib/x86_64-linux-gnu/libnss_compat-2.27.so
7f81ac892000-7f81ac893000 rw-p 00009000 08:02 9437850                    /lib/x86_64-linux-gnu/libnss_compat-2.27.so
7f81ac893000-7f81ac89a000 r-xp 00000000 08:02 9437859                    /lib/x86_64-linux-gnu/librt-2.27.so
7f81ac89a000-7f81aca99000 ---p 00007000 08:02 9437859                    /lib/x86_64-linux-gnu/librt-2.27.so
7f81aca99000-7f81aca9a000 r--p 00006000 08:02 9437859                    /lib/x86_64-linux-gnu/librt-2.27.so
7f81aca9a000-7f81aca9b000 rw-p 00007000 08:02 9437859                    /lib/x86_64-linux-gnu/librt-2.27.so
7f81aca9b000-7f81acc38000 r-xp 00000000 08:02 9437846                    /lib/x86_64-linux-gnu/libm-2.27.so
7f81acc38000-7f81ace37000 ---p 0019d000 08:02 9437846                    /lib/x86_64-linux-gnu/libm-2.27.so
7f81ace37000-7f81ace38000 r--p 0019c000 08:02 9437846                    /lib/x86_64-linux-gnu/libm-2.27.so
7f81ace38000-7f81ace39000 rw-p 0019d000 08:02 9437846                    /lib/x86_64-linux-gnu/libm-2.27.so
7f81ace39000-7f81adf47000 r-xp 00000000 08:05 20189901                   /home/zzq/opt/jdk-16.0.2/lib/server/libjvm.so
7f81adf47000-7f81adf48000 ---p 0110e000 08:05 20189901                   /home/zzq/opt/jdk-16.0.2/lib/server/libjvm.so
7f81adf48000-7f81adff9000 r--p 0110e000 08:05 20189901                   /home/zzq/opt/jdk-16.0.2/lib/server/libjvm.so
7f81adff9000-7f81ae02c000 rw-p 011bf000 08:05 20189901                   /home/zzq/opt/jdk-16.0.2/lib/server/libjvm.so
7f81ae02c000-7f81ae087000 rw-p 00000000 00:00 0 
7f81ae087000-7f81ae26e000 r-xp 00000000 08:02 9437842                    /lib/x86_64-linux-gnu/libc-2.27.so
7f81ae26e000-7f81ae46e000 ---p 001e7000 08:02 9437842                    /lib/x86_64-linux-gnu/libc-2.27.so
7f81ae46e000-7f81ae472000 r--p 001e7000 08:02 9437842                    /lib/x86_64-linux-gnu/libc-2.27.so
7f81ae472000-7f81ae474000 rw-p 001eb000 08:02 9437842                    /lib/x86_64-linux-gnu/libc-2.27.so
7f81ae474000-7f81ae478000 rw-p 00000000 00:00 0 
7f81ae478000-7f81ae47b000 r-xp 00000000 08:02 9437845                    /lib/x86_64-linux-gnu/libdl-2.27.so
7f81ae47b000-7f81ae67a000 ---p 00003000 08:02 9437845                    /lib/x86_64-linux-gnu/libdl-2.27.so
7f81ae67a000-7f81ae67b000 r--p 00002000 08:02 9437845                    /lib/x86_64-linux-gnu/libdl-2.27.so
7f81ae67b000-7f81ae67c000 rw-p 00003000 08:02 9437845                    /lib/x86_64-linux-gnu/libdl-2.27.so
7f81ae67c000-7f81ae696000 r-xp 00000000 08:02 9437857                    /lib/x86_64-linux-gnu/libpthread-2.27.so
7f81ae696000-7f81ae895000 ---p 0001a000 08:02 9437857                    /lib/x86_64-linux-gnu/libpthread-2.27.so
7f81ae895000-7f81ae896000 r--p 00019000 08:02 9437857                    /lib/x86_64-linux-gnu/libpthread-2.27.so
7f81ae896000-7f81ae897000 rw-p 0001a000 08:02 9437857                    /lib/x86_64-linux-gnu/libpthread-2.27.so
7f81ae897000-7f81ae89b000 rw-p 00000000 00:00 0 
7f81ae89b000-7f81ae8b7000 r-xp 00000000 08:02 9437992                    /lib/x86_64-linux-gnu/libz.so.1.2.11
7f81ae8b7000-7f81aeab6000 ---p 0001c000 08:02 9437992                    /lib/x86_64-linux-gnu/libz.so.1.2.11
7f81aeab6000-7f81aeab7000 r--p 0001b000 08:02 9437992                    /lib/x86_64-linux-gnu/libz.so.1.2.11
7f81aeab7000-7f81aeab8000 rw-p 0001c000 08:02 9437992                    /lib/x86_64-linux-gnu/libz.so.1.2.11
7f81aeab8000-7f81aeadf000 r-xp 00000000 08:02 9437822                    /lib/x86_64-linux-gnu/ld-2.27.so
7f81aeae3000-7f81aeaea000 r--s 00000000 08:02 6429840                    /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache
7f81aeaea000-7f81aeb70000 rw-p 00000000 00:00 0 
7f81aeb70000-7f81aeb77000 ---p 00000000 00:00 0 
7f81aeb77000-7f81aeb9b000 r-xp 00000000 08:05 20189867                   /home/zzq/opt/jdk-16.0.2/lib/libjava.so
7f81aeb9b000-7f81aeb9c000 ---p 00024000 08:05 20189867                   /home/zzq/opt/jdk-16.0.2/lib/libjava.so
7f81aeb9c000-7f81aeb9d000 r--p 00024000 08:05 20189867                   /home/zzq/opt/jdk-16.0.2/lib/libjava.so
7f81aeb9d000-7f81aeb9e000 rw-p 00025000 08:05 20189867                   /home/zzq/opt/jdk-16.0.2/lib/libjava.so
7f81aeb9e000-7f81aeb9f000 rw-p 00000000 00:00 0 
7f81aeb9f000-7f81aeba7000 rw-s 00000000 08:02 7869295                    /tmp/hsperfdata_zzq/673
7f81aeba7000-7f81aebab000 ---p 00000000 00:00 0 
7f81aebab000-7f81aecaa000 rw-p 00000000 00:00 0 
7f81aecaa000-7f81aecb9000 r-xp 00000000 08:05 20189872                   /home/zzq/opt/jdk-16.0.2/lib/libjli.so
7f81aecb9000-7f81aecba000 r--p 0000e000 08:05 20189872                   /home/zzq/opt/jdk-16.0.2/lib/libjli.so
7f81aecba000-7f81aecbb000 rw-p 0000f000 08:05 20189872                   /home/zzq/opt/jdk-16.0.2/lib/libjli.so
7f81aecbb000-7f81aecbc000 ---p 00000000 00:00 0 
7f81aecbc000-7f81aecbd000 r--p 00000000 00:00 0 
7f81aecbd000-7f81aecbe000 ---p 00000000 00:00 0 
7f81aecbe000-7f81aecd9000 r-xp 00000000 08:05 20189871                   /home/zzq/opt/jdk-16.0.2/lib/libjimage.so
7f81aecd9000-7f81aecda000 ---p 0001b000 08:05 20189871                   /home/zzq/opt/jdk-16.0.2/lib/libjimage.so
7f81aecda000-7f81aecdc000 r--p 0001b000 08:05 20189871                   /home/zzq/opt/jdk-16.0.2/lib/libjimage.so
7f81aecdc000-7f81aecdd000 rw-p 0001d000 08:05 20189871                   /home/zzq/opt/jdk-16.0.2/lib/libjimage.so
7f81aecdd000-7f81aecdf000 rw-p 00000000 00:00 0 
7f81aecdf000-7f81aece0000 r--p 00027000 08:02 9437822                    /lib/x86_64-linux-gnu/ld-2.27.so
7f81aece0000-7f81aece1000 rw-p 00028000 08:02 9437822                    /lib/x86_64-linux-gnu/ld-2.27.so
7f81aece1000-7f81aece2000 rw-p 00000000 00:00 0 
7ffdacc9b000-7ffdaccbc000 rw-p 00000000 00:00 0                          [stack]
7ffdacd42000-7ffdacd45000 r--p 00000000 00:00 0                          [vvar]
7ffdacd45000-7ffdacd47000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]


VM Arguments:
jvm_args: -XX:+PrintCommandLineFlags 
java_command: C
java_class_path (initial): .
Launcher Type: SUN_STANDARD

[Global flags]
     intx CICompilerCount                          = 4                                         {product} {ergonomic}
     uint ConcGCThreads                            = 2                                         {product} {ergonomic}
     uint G1ConcRefinementThreads                  = 8                                         {product} {ergonomic}
   size_t G1HeapRegionSize                         = 2097152                                   {product} {ergonomic}
    uintx GCDrainStackTargetSize                   = 64                                        {product} {ergonomic}
   size_t InitialHeapSize                          = 262144000                                 {product} {ergonomic}
   size_t MarkStackSize                            = 4194304                                   {product} {ergonomic}
   size_t MaxHeapSize                              = 4190109696                                {product} {ergonomic}
   size_t MaxNewSize                               = 2512388096                                {product} {ergonomic}
   size_t MinHeapDeltaBytes                        = 2097152                                   {product} {ergonomic}
   size_t MinHeapSize                              = 8388608                                   {product} {ergonomic}
    uintx NonNMethodCodeHeapSize                   = 5839372                                {pd product} {ergonomic}
    uintx NonProfiledCodeHeapSize                  = 122909434                              {pd product} {ergonomic}
     bool PrintCommandLineFlags                    = true                                      {product} {command line}
    uintx ProfiledCodeHeapSize                     = 122909434                              {pd product} {ergonomic}
    uintx ReservedCodeCacheSize                    = 251658240                              {pd product} {ergonomic}
     bool SegmentedCodeCache                       = true                                      {product} {ergonomic}
   size_t SoftMaxHeapSize                          = 4190109696                             {manageable} {ergonomic}
     bool UseCompressedClassPointers               = true                           {product lp64_product} {ergonomic}
     bool UseCompressedOops                        = true                           {product lp64_product} {ergonomic}
     bool UseG1GC                                  = true                                      {product} {ergonomic}

Logging:
Log output configuration:
 #0: stdout all=warning uptime,level,tags
 #1: stderr all=off uptime,level,tags

Environment Variables:
JAVA_HOME=/home/zzq/opt/jdk-16.0.2
CLASSPATH=.
PATH=/home/zzq/opt/jdk-16.0.2/bin:/home/zzq/opt/jdk1.8.0_291/bin:/usr/local/cuda/bin:/home/zzq/opt/bin:/home/zzq/opt:/home/zzq/projects/config/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:
SHELL=/bin/bash
LANG=en_US.UTF-8

Signal Handlers:
SIGSEGV: [libjvm.so+0xdfeb90], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGBUS: [libjvm.so+0xdfeb90], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGFPE: [libjvm.so+0xdfeb90], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGPIPE: [libjvm.so+0xca84d0], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGXFSZ: [libjvm.so+0xca84d0], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGILL: [libjvm.so+0xdfeb90], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGUSR2: [libjvm.so+0xca7bc0], sa_mask[0]=00000000000000000000000000000000, sa_flags=SA_RESTART|SA_SIGINFO
SIGHUP: [libjvm.so+0xca7af0], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGINT: [libjvm.so+0xca7af0], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGTERM: [libjvm.so+0xca7af0], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGQUIT: [libjvm.so+0xca7af0], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO
SIGTRAP: [libjvm.so+0xdfeb90], sa_mask[0]=11100100010111111101111111111110, sa_flags=SA_RESTART|SA_SIGINFO


---------------  S Y S T E M  ---------------

OS:
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=18.04
DISTRIB_CODENAME=bionic
DISTRIB_DESCRIPTION=""Ubuntu 18.04.1 LTS""
uname: Linux 4.15.0-50-generic #54-Ubuntu SMP Mon May 6 18:46:08 UTC 2019 x86_64
OS uptime: 735 days 8:22 hours
libc: glibc 2.27 NPTL 2.27 
rlimit (soft/hard): STACK 8515k/infinity , CORE infinity/infinity , NPROC 63634/63634 , NOFILE 1048576/1048576 , AS infinity/infinity , CPU infinity/infinity , DATA infinity/infinity , FSIZE infinity/infinity , MEMLOCK 16384k/16384k
load average: 0.03 0.07 0.02

/proc/meminfo:
MemTotal:       16363012 kB
MemFree:         4501796 kB
MemAvailable:   15268488 kB
Buffers:         3071756 kB
Cached:          6942464 kB
SwapCached:         7048 kB
Active:          4544688 kB
Inactive:        5903812 kB
Active(anon):     159432 kB
Inactive(anon):   275384 kB
Active(file):    4385256 kB
Inactive(file):  5628428 kB
Unevictable:          48 kB
Mlocked:              48 kB
SwapTotal:      15624188 kB
SwapFree:        3388368 kB
Dirty:               120 kB
Writeback:             0 kB
AnonPages:        427784 kB
Mapped:           152492 kB
Shmem:               536 kB
Slab:            1163432 kB
SReclaimable:    1093568 kB
SUnreclaim:        69864 kB
KernelStack:        8064 kB
PageTables:        80744 kB
NFS_Unstable:          0 kB
Bounce:                0 kB
WritebackTmp:          0 kB
CommitLimit:    23805692 kB
Committed_AS:   29841584 kB
VmallocTotal:   34359738367 kB
VmallocUsed:           0 kB
VmallocChunk:          0 kB
HardwareCorrupted:     0 kB
AnonHugePages:         0 kB
ShmemHugePages:        0 kB
ShmemPmdMapped:        0 kB
CmaTotal:              0 kB
CmaFree:               0 kB
HugePages_Total:       0
HugePages_Free:        0
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:       2048 kB
DirectMap4k:     9606376 kB
DirectMap2M:     7108608 kB
DirectMap1G:           0 kB

/sys/kernel/mm/transparent_hugepage/enabled: always [madvise] never
/sys/kernel/mm/transparent_hugepage/defrag (defrag/compaction efforts parameter): always defer defer+madvise [madvise] never

Process Memory:
Virtual Size: 7050140K (peak: 7050140K)
Resident Set Size: 53660K (peak: 53660K) (anon: 27428K, file: 26232K, shmem: 0K)
Swapped out: 0K
C-Heap outstanding allocations: 4756K

/proc/sys/kernel/threads-max (system-wide limit on the number of threads): 127268
/proc/sys/vm/max_map_count (maximum number of memory map areas a process may have): 65530
/proc/sys/kernel/pid_max (system-wide limit on number of process identifiers): 32768

container (cgroup) information:
container_type: cgroupv1
cpu_cpuset_cpus: 0-7
cpu_memory_nodes: 0
active_processor_count: 8
cpu_quota: no quota
cpu_period: 100000
cpu_shares: no shares
memory_limit_in_bytes: unlimited
memory_and_swap_limit_in_bytes: not supported
memory_soft_limit_in_bytes: unlimited
memory_usage_in_bytes: 10693459968
memory_max_usage_in_bytes: 46050836480

Steal ticks since vm start: 0
Steal ticks percentage since vm start:  0.000

CPU: total 8 (initial active 8) (4 cores per cpu, 2 threads per core) family 6 model 94 stepping 3 microcode 0xcc, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, tscinvbit, avx, avx2, aes, erms, clmul, bmi1, bmi2, rtm, adx, fma, vzeroupper, clflush, clflushopt
CPU Model and flags from /proc/cpuinfo:
model name	: Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb invpcid_single pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx rdseed adx smap clflushopt intel_pt xsaveopt xsavec xgetbv1 xsaves dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp md_clear flush_l1d

Online cpus: 0-7
Offline cpus: 
BIOS frequency limitation: <Not Available>
Frequency switch latency (ns): 0
Available cpu frequencies: <Not Available>
Current governor: powersave
Core performance/turbo boost: <Not Available>

Memory: 4k page, physical 16363012k(4501796k free), swap 15624188k(3388368k free)

vm_info: Java HotSpot(TM) 64-Bit Server VM (16.0.2+7-67) for linux-amd64 JRE (16.0.2+7-67), built on Jun  8 2021 22:16:25 by ""mach5one"" with gcc 10.2.0

END.

REGRESSION : Last worked in version 11.0.12-oracle

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
# Compile
$ javac C.java

# Execute
$ java -XX:+PrintCommandLineFlags C

ACTUAL -
-XX:ConcGCThreads=2 -XX:G1ConcRefinementThreads=8 -XX:GCDrainStackTargetSize=64 -XX:InitialHeapSize=261808192 -XX:MarkStackSize=4194304 -XX:MaxHeapSize=4188931072 -XX:MinHeapSize=6815736 -XX:+PrintCommandLineFlags -XX:ReservedCodeCacheSize=251658240 -XX:+SegmentedCodeCache -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseG1GC 
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f81ad88e5e5, pid=673, tid=674
#
# JRE version: Java(TM) SE Runtime Environment (16.0.2+7) (build 16.0.2+7-67)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (16.0.2+7-67, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa555e5]  LinkResolver::runtime_resolve_interface_method(CallInfo&, methodHandle const&, Klass*, Handle, Klass*, bool, Thread*)+0x45
#
# Core dump will be written. Default location: /home/zzq/core
#
# An error report file with more information is saved as:
# /home/zzq/hs_err_pid673.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)

---------- BEGIN SOURCE ----------
# C.java
(Attached.)
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class C {

    public static void m(String s) {
        Pattern pattern = Pattern.compile("""");
        Matcher matcher = pattern.matcher(s);
    }

    public static void main(String[] args) {
        for (int i = 0; i < 10_000; ++i) {
            try {
                m(null);
            } catch (Throwable e) {
            }
        }
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8272682,JDK-8272649,,,,,,,,,,,,,,,,,,,,JDK-8275638,JDK-8278873,JDK-8273165,,,JDK-8257211,,,,,,"2021-07-26 02:37;sswsharm;C.java;https://bugs.openjdk.org/secure/attachment/95715/C.java",,,,,,generic,,,,,,,,16,,generic,,,,"0|i2trob:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-07-26 02:44;sswsharm;Issue is reproduced on JDK 16.0.2 build 7 , test case executes fine on JDK 16.0.2 build 6

OS: Windows 10
JDK 8u301 : Pass
JDK 16.0.2+6 : Pass
JDK 16.0.2+7 : Fail
JDK 17ea31: Pass

Moving it to Dev team for further analysis.;;;","2021-07-26 04:30;dholmes;I will take an initial look at this.;;;","2021-07-26 14:50;dholmes;Debug build in mainline shows:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/scratch/users/daholme/jdk-dev3.git/open/src/hotspot/share/runtime/handles.cpp:37), pid=9701, tid=9702
#  assert(oopDesc::is_oop(obj)) failed: not an oop: 0x00007f543e7576f0

Stack: [0x00007f543e658000,0x00007f543e759000],  sp=0x00007f543e757460,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd6b2a4]  HandleArea::allocate_handle(oop)+0x174
V  [libjvm.so+0x7e5beb]  Handle::Handle(Thread*, oop)+0x9b
V  [libjvm.so+0xe5e929]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x3d9
V  [libjvm.so+0xe5f551]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x81
j  java.util.regex.Matcher.getTextLength()I+4 java.base@18-internal
j  java.util.regex.Matcher.reset()Ljava/util/regex/Matcher;+110 java.base@18-internal
j  java.util.regex.Matcher.<init>(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;)V+90 java.base@18-internal
j  java.util.regex.Pattern.matcher(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;+38 java.base@18-internal
;;;","2021-07-26 14:52;dholmes;Crash also happens with 16 GA.;;;","2021-07-26 14:54;dholmes;Only reproduces with -XX:TieredStopAtLevel=4 so looks like a C2 bug.;;;","2021-07-26 16:05;dholmes;Not clear why this appeared to not reproduce in 16.0.1 but returned in 16.0.2;;;","2021-07-26 16:16;dlong;The problem seems to be related to deoptimization (frames are all interpreted at crash time) and escape analysis (-XX:+IncrementalInlineVirtual required to reproduce crash).;;;","2021-07-26 16:20;dlong;ILW = crash, not seen in existing tests, workaround options = HMM = P2;;;","2021-07-26 21:52;dholmes;I tested 16.0.2 builds 4, 5, 6 and 7 and they all failed. Also 16.0.1 build 4.

AFAICS this was introduced sometime in JDK 16 and remains present through to jdk mainline.;;;","2021-07-27 20:15;dlong; java.util.regex.Matcher.getTextLength does this:

         0: aload_0
         1: getfield      #36                 // Field text:Ljava/lang/CharSequence;
         4: invokeinterface #348,  1          // InterfaceMethod java/lang/CharSequence.length:()I
         9: ireturn

and this.text, the field getting loaded at bci 1, is null so we do a ""null_check"" uncommon_trap.  When we try to reexecute the invokeinterface,  the debug info seems incorrect, as it has no expressions on the stack, so we read the wrong oop value.;;;","2021-08-18 03:32;roboduke;Changeset: e8f1219d
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-08-18 10:31:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e8f1219d6f471c89fe15b19c56e3062dd668466f
;;;","2021-08-22 22:51;thartmann;I've already pushed the backport to JDK 17u and forgot to request approval. Doing this now:

Fix request (17u):
This bug leads to a crash due incorrect execution in the interpreter after deoptimization. It's a regression in JDK 16 and important to fix. The fix is low risk (removal of a redundant null check and has been tested in the JDK 18 CI for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;","2022-02-03 09:14;enikitin;The provided test 'LateInlineVirtualNullReceiverCheck.java' have been run during ATR18 and never failed. I consider the case 'Verified'.;;;",,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(!had_error) failed: bad dominance,JDK-8271272,5055084,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,chagedorn,chagedorn,2021-07-26 01:33,2022-01-11 04:13,2023-10-01 09:57,2021-07-30 00:29,17,18,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk17-fix-request,jdk17-fix-yes,oracle-triage-11,oracle-triage-18,,,,,,,,,,,"The attached Java Fuzzer test starts to fail after JDK-8269746 with the following assertion:

To reproduce:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test.java
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Reduced Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79182/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/61fcc7a7-729c-4122-bd17-8b2b15316607/runs/5aa598ae-f0b4-46a1-a038-f527f0e2d1f0/workspace/open/src/hotspot/share/opto/loopnode.cpp:4910), pid=4924, tid=4938
#  assert(!had_error) failed: bad dominance
#
# JRE version: Java(TM) SE Runtime Environment (17.0+32) (fastdebug build 17-ea+32-LTS-2679)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+32-LTS-2679, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1320e82]  PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool)+0x6e2
#
............
Command Line: -Xmx1G -Xcomp -Xbatch -XX:-TieredCompilation -XX:CompileOnly=Test -XX:CompileCommand=quiet Test
............
Current thread (0x00007f19484810d0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=4938, stack(0x00007f19380fe000,0x00007f19381ff000)]


Current CompileTask:
C2:    274    4    b        Test::vMeth (185 bytes)

Stack: [0x00007f19380fe000,0x00007f19381ff000],  sp=0x00007f19381f9180,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1320e82]  PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool)+0x6e2
V  [libjvm.so+0x1321230]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x1d0
V  [libjvm.so+0x132180a]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0xba
V  [libjvm.so+0x1322177]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x507
V  [libjvm.so+0xa37c70]  PhaseIdealLoop::verify(PhaseIterGVN&)+0x2f0
V  [libjvm.so+0xa27fff]  Compile::process_for_post_loop_opts_igvn(PhaseIterGVN&)+0x1f
V  [libjvm.so+0xa33a7e]  Compile::Optimize()+0x163e
V  [libjvm.so+0xa354b8]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1618
V  [libjvm.so+0x84aca6]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa45541]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb71
V  [libjvm.so+0xa461e8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18da771]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18e1ce0]  Thread::call_run()+0x100
V  [libjvm.so+0x15a8054]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8271815,JDK-8271680,JDK-8271575,,,,,,,,,,,,,,,,,,,JDK-8269746,,,,,JDK-8279622,,,,,,"2021-07-26 01:33;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95701/FuzzerUtils.java","2021-07-26 01:33;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/95700/Reduced.java","2021-07-26 01:33;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95702/Test.java","2021-07-26 01:33;chagedorn;hs_err_pid4924.log;https://bugs.openjdk.org/secure/attachment/95703/hs_err_pid4924.log",,,,,,,,,,b31,17,,,,,,"0|i2trwb:",9223372036854775807,b34,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-07-26 01:35;chagedorn;ILW = C2 assertion failure (recent regression in JDK 17 b31), only with single Java Fuzzer test, disable compilation of affected method = HMM = P2;;;","2021-07-26 01:36;chagedorn;[~roland] can you have a look at it?;;;","2021-07-29 07:27;roland;Fix request: the fix for this addresses a c2 crash due to code that was new in jdk 17 so is important to get fixed. The fix is an improvement of a previous fix JDK-8269752 so that it applies to loop strip mining. The change is minimal so I think the risk is fairly low. I ran my own testing and Tobias ran testing as well. Fix was reviewed by Vladimir K, Tobias and Christian.;;;","2021-07-29 10:03;kvn;Fix request for JDK 17 is approved.
;;;","2021-07-30 00:29;roboduke;Changeset: e351de3b
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-07-30 07:28:04 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/e351de3bd67773109607db7f4648c173140cb024
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@param with non-ascii variable names produces incorrect results,JDK-8271258,5054890,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,webbuggrp,webbuggrp,2021-07-22 01:41,2021-08-30 17:34,2023-10-01 09:57,2021-08-24 07:42,11,15,17,18,9,,,18,tools,,0,dcsad,regression,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The html generated by javadoc for @param tags on variables whose names are non-ascii is incorrect. In Java8 and earlier, it was correct, and subsequently it is not.

If I have a method ""int foo(int 大象);"" then I would javadoc it using /** @param 大象  - The ({@code 大象} or 大象 chinese elephant) */"". If I use javadoc on a file containing this, the following is generated

<dl class=""notes"">
<dt>Parameters:</dt>
<dd><code>\u5927\u8c61</code> - The (<code>大象</code> or 大象 chinese elephant)</dd>
</dl>

It only seems to be the @param value that is affected. The fix for 8203176 resolved other similar issues.

REGRESSION : Last worked in version 8u301

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run javadoc on the 'Source code for an executable test case'.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
When looking at the javadoc in (any) browser, the parameters are shown correctly. The html line generated  line for the parameter is expected to be (something like)

<dd><code>大象</code> - The (<code>大象</code> or 大象 chinese elephant)</dd>
ACTUAL -
The generated html is incorrect, and thus displays incorrectly in the browser. The offending line is

<dd><code>\u5927\u8c61</code> - The (<code>大象</code> or 大象 chinese elephant)</dd>

---------- BEGIN SOURCE ----------
/**
 * An elephant class.
 * (That is 大象} is chinese.
 * Use {@code 大象} in chinese.
 */
public class Elephant {
    private int 大象;
    /**
     * Take a {@code 大象} or 大象 as a parameter.
     * That is a {@code 大象} or 大象.
     * @param 大象 The ({@code 大象} or 大象 chinese elephant)
     */
    public Elephant(int 大象) {
        this.大象 = 大象;
    }

    /**
     * Get the 大象.
     * @return The 大象.
     */
    public int get大象() {
        return 大象;
    }

    /**
     * Set the 大象.
     * @param 大象 The 大象.
     */
    public void set大象(int 大象) {
        this.大象 = 大象;
    }
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8203176,,,,,,"2021-07-25 22:34;adev;Elephant.java;https://bugs.openjdk.org/secure/attachment/95690/Elephant.java","2021-07-25 22:35;adev;Error.png;https://bugs.openjdk.org/secure/attachment/95691/Error.png",,,,,generic,,,,,,,,9,,generic,,,,"0|i2tqp7:",9223372036854775807,b12,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-07-25 22:30;adev;The issue is reproducible with JDK 9 onwards. (Attached screenshot) The reproducer can be executed using `-encoding utf8` option with javadoc.
.
When using UTF-8 chars  @param 大象 - The ({@code 大象} or 大象 chinese elephant), the generated HTML contains:
Parameters: 
    \u5927\u8c61 - The (大象 or 大象 chinese elephant)

Following is my observation:
JDK 8-pool: pass
JKD 9 - fail
JDK 11 - fail
JDK 15 - fail
JDK 18 - fail

;;;","2021-08-18 10:45;jjg;Reproduced.;;;","2021-08-18 11:18;jjg;diff --git a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java
index 24014e99494..2f5f77af44b 100644
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java
@@ -139,7 +139,7 @@ public class CommentHelper {
 
     public String getParameterName(DocTree dtree) {
         if (dtree.getKind() == PARAM) {
-            return ((ParamTree) dtree).getName().toString();
+            return ((ParamTree) dtree).getName().getName().toString();
         } else {
             return null;
         }
;;;","2021-08-24 07:42;roboduke;Changeset: 94f5e441
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-08-24 14:41:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/94f5e441f637b7a75227ba11a2b25d70f96cd274
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac generates unreachable code when using empty semicolon statement,JDK-8271254,5055065,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gli,yyang,yyang,2021-07-25 19:15,2021-09-28 22:23,2023-10-01 09:57,2021-09-14 07:47,,,,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"The following code is similar to JDK-8022186 with slight difference:

public class Test {
    void m() {
        try {
            ;
        } finally {
            System.out.println(""dead code"");
        }
    }
}

Using javap -v Test:

void m();
    descriptor: ()V
    flags: (0x0000)
    Code:
      stack=2, locals=2, args_size=1
         0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #13                 // String dead code
         5: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: goto          22
        11: astore_1
        12: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;
        15: ldc           #13                 // String dead code
        17: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        20: aload_1
        21: athrow
        22: return
      LineNumberTable:
        line 6: 0
        line 7: 8
        line 6: 11
        line 7: 20
        line 8: 22",,,,,,,,,,,JDK-8274477,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8022186,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2trs3:",9223372036854775807,b15,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-09-14 07:47;roboduke;Changeset: fe89dd3b
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2021-09-14 14:46:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fe89dd3b0d47807c7dbfe24d17f6aca152fc8908
;;;","2021-09-28 05:25;gli;Fix Request(17u)

Request to backport this change about unreachable code to jdk17u. The code applies cleanly.

Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"JavaThread::java_suspend() fails with ""fatal error: Illegal threadstate encountered: 6""",JDK-8271251,5055047,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,pchilanomate,dcubed,dcubed,2021-07-24 07:20,2021-08-04 18:24,2023-10-01 09:57,2021-07-28 10:00,17,18,,,,,,17,hotspot,,0,intermittent,jdk17-fix-request,jdk17-fix-yes,regression,sync,tier7,tier8,,,,,,,,,,,"The following test failed in the JDK17 CI:

vmTestbase/nsk/jvmti/scenarios/hotswap/HS202/hs202t002/hs202t002.java

Here's a snippet from the log file:

#section:main
----------messages:(4/436)----------
command: main -agentlib:hs202t002=pathToNewByteCode=./bin,-waittime=5,package=nsk,samples=100,mode=compiled nsk.jvmti.scenarios.hotswap.HS202.hs202t002.hs202t002
reason: User specified action: run main/othervm/native -agentlib:hs202t002=pathToNewByteCode=./bin,-waittime=5,package=nsk,samples=100,mode=compiled nsk.jvmti.scenarios.hotswap.HS202.hs202t002.hs202t002 
Mode: othervm [/othervm specified]
elapsed time (seconds): 15.111
----------configuration:(0/0)----------
----------System.out:(26/1480)*----------
Agent:: VM.. Started..
 Agent :: NOTIFICATIONS ARE ENABLED 
# info :: File = ./bin/newclass00/nsk/jvmti/scenarios/hotswap/HS202/hs202t002/MyThread.class 
#  info **Agent:: opening file ./bin/newclass00/nsk/jvmti/scenarios/hotswap/HS202/hs202t002/MyThread.class 
# info file size= 732
 File red completely 
 Agent:: redefine class success ..
Agent::SUSPENDING>> 
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\safepoint.cpp:745
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\share\\runtime\\safepoint.cpp:745), pid=43336, tid=12820
#  fatal error: Illegal threadstate encountered: 6
#
# JRE version: Java(TM) SE Runtime Environment (17.0+33) (fastdebug build 17-ea+33-LTS-2690)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+33-LTS-2690, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_quick\\scratch\\0\\hs_err_pid43336.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jvmti_quick\\scratch\\0\\hs_err_pid43336.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(49/7264)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000002a2cead3490):  JavaThread ""Thread-1"" [_thread_in_vm, id=12820, stack(0x000000dba9700000,0x000000dba9800000)], _nested_threads_hazard_ptr_cnt=1, _nested_threads_hazard_ptr=0x000002a2cf0aa5a0

Stack: [0x000000dba9700000,0x000000dba9800000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xadf271]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xd06e55]  VMError::report+0x1005  (vmError.cpp:739)
V  [jvm.dll+0xd087de]  VMError::report_and_die+0x7fe  (vmError.cpp:1549)
V  [jvm.dll+0x4c7e3e]  report_fatal+0xde  (debug.cpp:304)
V  [jvm.dll+0xb85255]  SafepointSynchronize::block+0xc5  (safepoint.cpp:745)
V  [jvm.dll+0xb88ad2]  SafepointMechanism::process+0x32  (safepointMechanism.cpp:134)
V  [jvm.dll+0x64dabd]  HandshakeState::suspend+0x9d  (handshake.cpp:693)
V  [jvm.dll+0xc8e2ec]  JavaThread::java_suspend+0x6c  (thread.cpp:1791)
V  [jvm.dll+0x8b1624]  JvmtiEnv::SuspendThread+0x34  (jvmtiEnv.cpp:946)
V  [jvm.dll+0x86d3c0]  jvmti_SuspendThread+0x160  (jvmtiEnter.cpp:536)
C  [hs202t002.dll+0x1f83]

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  nsk.jvmti.scenarios.hotswap.HS202.hs202t002.MyThread.display()V+19
j  nsk.jvmti.scenarios.hotswap.HS202.hs202t002.MyThread.playWithThis()V+1
j  nsk.jvmti.scenarios.hotswap.HS202.hs202t002.MyThread.run()V+1
v  ~StubRoutines::call_stub

I *think* this failure is related to the recent integration of:

    JDK-8270085 Suspend during block transition may deadlock if lock held

So far this failure has only been since once on Windows and
it did not show up in my stress testing of JDK-8270085 prior
to integration. Since this is a (possible) regression, I'm starting
this bug at P2.",,,,,,,,,,,JDK-8271807,JDK-8271440,JDK-8271671,,,,,,,,,,JDK-8271348,,,,,,,,,JDK-8270085,,,,,JDK-8271348,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,"0|i2tro3:",9223372036854775807,b34,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-07-24 07:23;dcubed;[~pchilanomate] - Can you take a look at this failure? It's a possible
regression due to:

    JDK-8270085 Suspend during block transition may deadlock if lock held;;;","2021-07-24 07:31;dcubed;Here's the crashing stack trace for the jdk-17+33-2691-tier7 sighting:

vmTestbase/runtime/threads/ThreadSuspendSelf/ThreadSuspendSelf.java 

---------------  T H R E A D  ---------------

Current thread (0x00007f433c001670):  JavaThread ""ThreadSuspendSelf"" [_thread_in_vm, id=12372, stack(0x00007f43755f5000,0x00007f43756f6000)], _nested_threads_hazard_ptr_cnt=1, _nested_threads_hazard_ptr=0x00007f4330006390

Stack: [0x00007f43755f5000,0x00007f43756f6000],  sp=0x00007f43756f4700,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x171306d]  SafepointSynchronize::block(JavaThread*)+0x23d
V  [libjvm.so+0x171ebc8]  SafepointMechanism::process(JavaThread*, bool)+0x58
V  [libjvm.so+0xd93889]  HandshakeState::suspend()+0xd9
V  [libjvm.so+0x18e825c]  JavaThread::java_suspend()+0x8c
V  [libjvm.so+0x101ce2c]  JVM_SuspendThread+0x16c
J 2684  java.lang.Thread.suspend0()V java.base@17-ea (0 bytes) @ 0x00007f43914b3db5 [0x00007f43914b3ce0+0x00000000000000d5]
J 2680 c2 runtime.threads.ThreadSuspendSelf.ThreadSuspendSelf.suspendSelf()V (28 bytes) @ 0x00007f43914b369c [0x00007f43914b3500+0x000000000000019c]
j  runtime.threads.ThreadSuspendSelf.ThreadSuspendSelf.run()V+20
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe95164]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0xe95a14]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x4b4
V  [libjvm.so+0xe95e67]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x77
V  [libjvm.so+0x100e19b]  thread_entry(JavaThread*, JavaThread*)+0x12b
V  [libjvm.so+0x18dc131]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18e3720]  Thread::call_run()+0x100
V  [libjvm.so+0x15a93c4]  thread_native_entry(Thread*)+0x104

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 2684  java.lang.Thread.suspend0()V java.base@17-ea (0 bytes) @ 0x00007f43914b3d44 [0x00007f43914b3ce0+0x0000000000000064]
J 2680 c2 runtime.threads.ThreadSuspendSelf.ThreadSuspendSelf.suspendSelf()V (28 bytes) @ 0x00007f43914b369c [0x00007f43914b3500+0x000000000000019c]
j  runtime.threads.ThreadSuspendSelf.ThreadSuspendSelf.run()V+20
v  ~StubRoutines::call_stub

The test task's JVM args are:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+DeoptimizeALot;;;","2021-07-24 11:19;pchilanomate;The issue is that method SafepointSynchronize::block() doesn't consider _thread_in_vm to be a valid state when polling for the safepoint. State _thread_in_vm is an unsafe state so it should also be added to the valid cases in the switch statement.

This can happen now when self-suspending in HandshakeState::suspend() when calling SafepointMechanism::process_if_requested(self). If there is a current safepoint we will call SafepointSynchronize::block() with a state of _thread_in_vm.

I checked the JVMTI specs for SuspendThread and we cannot just remove that process_if_requested() call in HandshakeState::suspend() relying on the fact that the JT will still suspend on the transition to Java. The specs says:

""Suspend the specified thread. If the calling thread is specified, this function will not return until some other thread calls ResumeThread.""
;;;","2021-07-24 12:54;pchilanomate;To fix this we can just add _thread_in_vm to the valid states in SafepointSynchronize::block().

As a future change, one of my goals with JDK-8260376 was to remove that switch statement and assert we only reach SafepointSynchronize::block() with a state of _thread_in_vm. All the transition states are not needed since _thread_in_vm is already unsafe. The only trans state that makes some sense is _thread_in_native_trans because we are setting it from macro assembler code and we might not need to call the vm if the poll is not armed. The case of _thread_in_Java can also be removed if we make the proper transitions in handle_polling_page_exception() and fix the zero interpreter SAFEPOINT macro.;;;","2021-07-24 16:32;dholmes;I'm not quite following the details at this stage but I'd be happier ensuring we always have the expected state than simply adding a new state to the allowed set - the full implications of that are not at all clear to me.

I'm also unclear why this wasn't detected during any of the stress testing.;;;","2021-07-24 20:01;pchilanomate;The state _thread_in_vm should always be valid for safepoint polling. The only reason I think it's not there is because we didn't have a case for it. 
We could also use ThreadBlockInVM to artificially cause a transition and a poll. We would have to provide another constructor for ThreadBlockInVM to set allow_suspend which is always false now.

As to why this wasn't detected I see in my jobs I only run once tier 7(I thought I run it more times, maybe I deleted some run). Since I knew Robbin also run it at least once in tier7 I thought 2/3 runs on tier7 without issues was enough. Should have run more times tiers7, my fault.;;;","2021-07-25 14:54;dholmes;> The state _thread_in_vm should always be valid for safepoint polling. The only reason I think it's not there is because we didn't have a case for it. 

Hmmmm ... we actually use the trans state for the majority of cases where we check for safepoints (now handshakes). I find it hard to understand how we can now say ""oh we don't need any of that we can just do this when _thread_in_vm"". But that is a different issue.

The current problem is much more specific IMO - we need a special case for self-suspension. The way self-suspension currently works is as a two step process:

1. Install an async handshake on ourselves
2. Hit a polling point where we see that async handshake and so actually suspend

This seems somewhat artificial - though general purpose. Can't we short-circuit that process by detecting self-suspension when we would install the async handshake and immediately suspend instead? Something like:

bool HandshakeState::suspend_with_handshake() {
  assert(_handshakee->threadObj() != NULL, ""cannot suspend with a NULL threadObj"");
+ if (_handshakee == JavaThread::current()) {
+  do_self_suspend();
+  } else {
  if (_handshakee->is_exiting()) {
    log_trace(thread, suspend)(""JavaThread:"" INTPTR_FORMAT "" exiting"", p2i(_handshakee));
    return false;
  }
  if (has_async_suspend_handshake()) {
    if (is_suspended()) {
      // Target is already suspended.
      log_trace(thread, suspend)(""JavaThread:"" INTPTR_FORMAT "" already suspended"", p2i(_handshakee));
      return false;
    } else {
      // Target is going to wake up and leave suspension.
      // Let's just stop the thread from doing that.
      log_trace(thread, suspend)(""JavaThread:"" INTPTR_FORMAT "" re-suspended"", p2i(_handshakee));
      set_suspended(true);
      return true;
    }
  }
  // no suspend request
  assert(!is_suspended(), ""cannot be suspended without a suspend request"");
  // Thread is safe, so it must execute the request, thus we can count it as suspended
  // from this point.
  set_suspended(true);
  set_async_suspend_handshake(true);
  log_trace(thread, suspend)(""JavaThread:"" INTPTR_FORMAT "" suspended, arming ThreadSuspension"", p2i(_handshakee));
  ThreadSelfSuspensionHandshake* ts = new ThreadSelfSuspensionHandshake();
  Handshake::execute(ts, _handshakee);
+ }
  return true;
}
;;;","2021-07-25 16:05;pchilanomate;I tried to think of something like that when I was working on 8270085, the problem is that after the JT is resumed and returns from do_self_suspend() to process_by_self(), we need to stop processing handshake operations and return true(as with the async branch) so that in SafepointMechanism::process() we do the re-checking(need_rechecking) due to a possible safepoint while the JT was blocked. I didn't find a straightforward way to do that without complicating the code so I left it as it is now.;;;","2021-07-25 16:41;pchilanomate;As to whether _thread_in_vm is a valid state or not when polling for safepoints, I think the question is what is the criteria to establish if certain state is valid when polling for safepoints. I think in SafepointSynchronize::block() we should only check that we are not coming from a safe state already(thread_blocked, thread_in_native), since that might indicate issues that we were/will be executing in VM in a safe state while a safepoint operation was/is in progress. Other than that I don't see why we have to differentiate the other states, and less so _thread_in_vm. But if it looks risky to add _thread_in_vm to the list we can leave that for 18. Another simple fix using TBIVM is:

--- a/src/hotspot/share/runtime/handshake.cpp
+++ b/src/hotspot/share/runtime/handshake.cpp
@@ -687,7 +687,7 @@ bool HandshakeState::suspend() {
     // If target is the current thread we need to call this to do the
     // actual suspend since Handshake::execute() above only installed
     // the asynchronous handshake.
-    SafepointMechanism::process_if_requested(self);
+    ThreadBlockInVM(self, true /* allow_suspend */);
   }
   return st.did_suspend();
 }

--- a/src/hotspot/share/runtime/interfaceSupport.inline.hpp
+++ b/src/hotspot/share/runtime/interfaceSupport.inline.hpp
@@ -290,6 +290,8 @@ class ThreadBlockInVM {
   InFlightMutexRelease _ifmr;
   ThreadBlockInVMPreprocess<InFlightMutexRelease> _tbivmpp;
  public:
+  ThreadBlockInVM(JavaThread* thread, bool allow_suspend)
+    : _ifmr(NULL), _tbivmpp(thread, _ifmr, allow_suspend) {}
   ThreadBlockInVM(JavaThread* thread, Mutex** in_flight_mutex_addr = NULL)
     : _ifmr(in_flight_mutex_addr), _tbivmpp(thread, _ifmr, /* allow_suspend= */ false) {}
 };;;;","2021-07-25 17:12;dholmes;> the problem is that after the JT is resumed and returns from do_self_suspend() to process_by_self()

I don't follow. With what I suggested above process_by_self() is not in the stack.

Can't we simply do:

bool HandshakeState::suspend() {
  JavaThread* self = JavaThread::current();
  if (_handshakee == self) {
    // If target is the current thread we can bypass the handshake machinery
    // and just suspend directly
   log_trace(...)(...);
   MutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);
    do_self_suspend();
    return true;
  } else {
    SuspendThreadHandshake st;
    Handshake::execute(&st, _handshakee);
    return st.did_suspend();
  }
}
;;;","2021-07-25 18:19;pchilanomate;So in do_self_suspend() we do a manual transition to thread_blocked. After being resumed and manually transitioning back to thread_in_vm there could be an ongoing safepoint, or a safepoint already finished and we need to call StackWatermarkSet::on_safepoint() to possibly fix the stack. 
Now, I don't see much code being executed by the JT since returning from HandshakeState::suspend() and transitioning back to native so it might be okay even if we don't stop for the safepoint, but I'm not sure.
It might work if we add a TBIVM above MutexLocker. The manual transitions in do_self_suspend() will be both to thread_blocked so they are benign.

bool HandshakeState::suspend() {
  JavaThread* self = JavaThread::current();
  if (_handshakee == self) {
    // If target is the current thread we can bypass the handshake machinery
    // and just suspend directly
    log_trace(...)(...);
    ThreadBlockInVM(self);
    MutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);
    do_self_suspend();
    return true;
  } else {
    SuspendThreadHandshake st;
    Handshake::execute(&st, _handshakee);
    return st.did_suspend();
  }
};;;","2021-07-25 19:21;pchilanomate;Testing: https://github.com/pchilano/jdk17/commit/e040266f6a6889f8e518d075a515eee5876fee55;;;","2021-07-25 21:07;dholmes;Sorry I missed that do_self_suspend() does a manual state transition to _thread_blocked rather than using TBIVM - so now I have to wonder why it does that rather than using TBIVM?;;;","2021-07-25 21:10;dholmes;That said, for 17 the more conservative the fix the better so the TBIVM addition to my suggestion may be the way to go.;;;","2021-07-25 22:08;pchilanomate;I think the issues of using TBIVM in do_self_suspend() were the recursive call to process_by_self() in ~TBIVM and possibly blocking for a safepoint with _lock held.

> That said, for 17 the more conservative the fix the better so the TBIVM addition to my suggestion may be the way to go.
Ok, I like this approach because we are also fixing all the overhead when self-suspending. A little less trivial than ThreadBlockInVM tbivm(self, true /* allow_suspend */); but still simple enough.;;;","2021-07-26 08:27;hseigel; ILW = HLH = P2;;;","2021-07-26 12:50;dcubed;I'm running vmTestbase/nsk/jvmti/scenarios/hotswap/HS202/hs202t002/hs202t002.java
with fastdebug bits and the following options on my Ubuntu 20.04 machine:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+DeoptimizeALot 

It takes almost 8 minutes per run. So far 20 runs without reproducing.

Update: No failures in 25 runs.;;;","2021-07-26 12:58;pchilanomate;Try running it with -Xcomp -XX:+SafepointALot -XX:+DeoptimizeALot. I was able to reproduce it locally pretty consistently(1/5) with those flags.;;;","2021-07-26 14:56;dcubed;I kicked off a new run and added -XX:+SafepointALot. I'll let that run overnight.;;;","2021-07-26 15:37;dcubed;Added a small bit of debugging code to show if we call
SafepointMechanism::process() with the problematic
thread state (_thread_in_vm), but don't happen to be
unlucky enough to have a pending safepoint at this time:

$ git diff
diff --git a/src/hotspot/share/runtime/safepointMechanism.cpp b/src/hotspot/share/runtime/safepointMechanism.cpp
index 20e163a7f6c..61fd6532382 100644
--- a/src/hotspot/share/runtime/safepointMechanism.cpp
+++ b/src/hotspot/share/runtime/safepointMechanism.cpp
@@ -118,6 +118,10 @@ void SafepointMechanism::process(JavaThread *thread, bool allow_suspend) {
   // local poll already checked, if used.
   bool need_rechecking;
   do {
+if (UseNewCode) {
+JavaThreadState state = thread->thread_state();
+guarantee(state != _thread_in_vm, ""XXX - bad news if we're _thread_in_vm and we go to a safepoint here"");
+}
     if (global_poll()) {
       // Any load in ::block() must not pass the global poll load.
       // Otherwise we might load an old safepoint counter (for example).
      OrderAccess::loadload();
      SafepointSynchronize::block(thread);
    };;;","2021-07-27 08:14;dcubed;My fastdebug bits run with the following options:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+DeoptimizeALot -XX:+SafepointALot

had a failure at run #75 that matches the original failure mode so
the original failure mode is very rare on my T7600.;;;","2021-07-27 12:13;pchilanomate;Fix Request

When self-suspending, a JavaThread might reach SafepointSynchronize::block() with a state of _thread_in_vm which is not listed as a valid state for safepoint polling. This happened after 8270085 where we had to explicitly add a call to process_if_requested() in HandshakeState::suspend() so that self-suspension cases would actually suspend, since TBIVM was changed to not process suspend requests to avoid possible deadlocks. Since the failure is intermittent in tier7, dependant on whether a safepoint happened at the right time, it escaped the testing of 8270085.

The fix is straightforward and involves removing the call to process_if_requested() and replacing it with a direct call to the self-suspend logic.

The patch only affects self-suspension cases so the risk should be minimal.

The fix was tested by taking the two failing tests from tier7, ThreadSuspendSelf.java and hs202t002.java, reproducing the failure locally and making sure the tests now pass with the patch. I also run 2 full cycles of tiers1-7 just to be conservative, plus currently running another tier7 job. 

The fix has been reviewed by [~dholmes] and [~dcubed].

Webrev: https://openjdk.github.io/cr/?repo=jdk17&pr=283&range=02
PR: https://github.com/openjdk/jdk17/pull/283
;;;","2021-07-28 09:54;kvn;Fix request for JDK 17 is approved.
;;;","2021-07-28 10:00;roboduke;Changeset: 6878b05f
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2021-07-28 16:59:21 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/6878b05f8fbc7bd72e79ec29a868008dde2321c6
;;;","2021-07-29 21:46;dholmes;Fixed in CI  jdk-17+33-2708 ;;;","2021-07-30 07:25;dcubed;Fix in jdk-18+8-359.;;;",,,,,,,,,,,,
[lworld] InlineTypeBaseNode::merge_with fails with assert(i < _cnt),JDK-8271234,5055027,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,mchung,mchung,2021-07-23 15:17,2021-08-05 09:15,2023-10-01 09:57,2021-08-03 08:12,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,"VM asserts when running with a few JDK value-based classes as ref-default primitive class (attached refval.patch of the JDK change) when building `exploded-image-optimize` target.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/Users/mlchung/ws/valhalla/lworld-dev/src/hotspot/share/opto/node.hpp:439), pid=96197, tid=39683
#  assert(i < _cnt) failed: oob: i=3, _cnt=3
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.mlchung.lworld-dev)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.mlchung.lworld-dev, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Current CompileTask:
C2:   1201  506       4       jdk.internal.module.ModulePath$$Lambda$9/0x000000080000cc20::apply (12 bytes)

Stack: [0x00007000019a8000,0x0000700001aa8000],  sp=0x0000700001aa39e0,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12faecc]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6dc
V  [libjvm.dylib+0x12fb4eb]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x6471ad]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x12d827]  Node::set_req(unsigned int, Node*)+0x87
V  [libjvm.dylib+0x8f40bc]  InlineTypeBaseNode::merge_with(PhaseGVN*, InlineTypeBaseNode const*, int, bool)+0x2ec
V  [libjvm.dylib+0x4fe920]  PhiNode::Ideal(PhaseGVN*, bool)+0x6b0
V  [libjvm.dylib+0xf48711]  PhaseIterGVN::transform_old(Node*)+0x131
V  [libjvm.dylib+0xf47fd4]  PhaseIterGVN::optimize()+0xb4
V  [libjvm.dylib+0x5e740c]  Compile::Optimize()+0x25c
V  [libjvm.dylib+0x5e5afe]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x18ae
V  [libjvm.dylib+0x4c5009]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x109
V  [libjvm.dylib+0x60688f]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x93f
V  [libjvm.dylib+0x605d30]  CompileBroker::compiler_thread_loop()+0x2c0
V  [libjvm.dylib+0x1249d2c]  JavaThread::thread_main_inner()+0x28c
V  [libjvm.dylib+0x1249a4d]  JavaThread::run()+0x2ad
V  [libjvm.dylib+0x1246bc7]  Thread::call_run()+0x177
V  [libjvm.dylib+0xee48b0]  thread_native_entry(Thread*)+0x150
C  [libsystem_pthread.dylib+0x6109]  _pthread_start+0x94
C  [libsystem_pthread.dylib+0x1b8b]  thread_start+0xf


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8244231,,,,,JDK-8271959,,,,,,"2021-07-23 15:15;mchung;hs_err_pid96197.log;https://bugs.openjdk.org/secure/attachment/95680/hs_err_pid96197.log","2021-07-23 15:15;mchung;refval.patch;https://bugs.openjdk.org/secure/attachment/95681/refval.patch","2021-07-23 15:16;mchung;replay_pid96197.log;https://bugs.openjdk.org/secure/attachment/95679/replay_pid96197.log",,,,,,,,,,,,,,,,,,"0|i2trjn:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-08-03 06:51;thartmann;[~mchung] the build still fails even after fixing this:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla2/open/src/hotspot/share/cds/heapShared.cpp:146), pid=125547, tid=125554
#  assert(!EnableValhalla || !p->mark().is_inline_type()) failed: this object should never have been locked
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-internal+0-2021-05-07-0658132.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-internal+0-2021-05-07-0658132.tobias..., interpreted mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xe26e75]  HeapShared::oop_hash(oop const&)+0x95
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /oracle/valhalla2/core.125547)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xint -Xshare:dump -XX:SharedClassListFile=/oracle/valhalla2/build/fast/support/link_opt/classlist.interim -XX:SharedArchiveFile=/oracle/valhalla2/build/fast/support/link_opt/classlist.jsa -Xmx128M -Xms128M 

Host: prometheus, Intel(R) Core(TM) i7-9850H CPU @ 2.60GHz, 12 cores, 31G, Ubuntu 20.04.2 LTS
Time: Tue Aug  3 15:50:36 2021 CEST elapsed time: 1.049114 seconds (0d 0h 0m 1s)

---------------  T H R E A D  ---------------

Current thread (0x00007fd8f4232de0):  VMThread ""VM Thread"" [stack: 0x00007fd8f8300000,0x00007fd8f8400000] [id=125554]

Stack: [0x00007fd8f8300000,0x00007fd8f8400000],  sp=0x00007fd8f83fda00,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xe26e75]  HeapShared::oop_hash(oop const&)+0x95
V  [libjvm.so+0xe26ec2]  HeapShared::find_archived_heap_object(oop)+0x32
V  [libjvm.so+0xe31492]  HeapShared::archive_reachable_objects_from(int, KlassSubGraphInfo*, oop, bool)+0x132
V  [libjvm.so+0xe3bb2c]  void WalkOopAndArchiveClosure::do_oop_work<narrowOop>(narrowOop*)+0x30c
V  [libjvm.so+0xe3c1b7]  void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>(WalkOopAndArchiveClosure*, oop, Klass*)+0xa7
V  [libjvm.so+0xe319f2]  HeapShared::archive_reachable_objects_from(int, KlassSubGraphInfo*, oop, bool)+0x692
V  [libjvm.so+0xe3bb2c]  void WalkOopAndArchiveClosure::do_oop_work<narrowOop>(narrowOop*)+0x30c
V  [libjvm.so+0xe3c1b7]  void OopOopIterateDispatch<WalkOopAndArchiveClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>(WalkOopAndArchiveClosure*, oop, Klass*)+0xa7
V  [libjvm.so+0xe319f2]  HeapShared::archive_reachable_objects_from(int, KlassSubGraphInfo*, oop, bool)+0x692
V  [libjvm.so+0xe3261f]  HeapShared::archive_reachable_objects_from_static_field(InstanceKlass*, char const*, int, char const*, bool)+0x21f
V  [libjvm.so+0xe33027]  HeapShared::copy_open_objects(GrowableArray<MemRegion>*)+0x117
V  [libjvm.so+0xe33285]  HeapShared::archive_objects(GrowableArray<MemRegion>*, GrowableArray<MemRegion>*)+0xe5
V  [libjvm.so+0x14f0a62]  VM_PopulateDumpSharedSpace::dump_java_heap_objects(GrowableArray<Klass*>*) [clone .part.0]+0x302
V  [libjvm.so+0x14f8b47]  VM_PopulateDumpSharedSpace::doit()+0x337
V  [libjvm.so+0x1a6949a]  VM_Operation::evaluate()+0x18a
V  [libjvm.so+0x1a8ca13]  VMThread::evaluate_operation(VM_Operation*)+0x183
V  [libjvm.so+0x1a8d69c]  VMThread::inner_execute(VM_Operation*)+0x20c
V  [libjvm.so+0x1a8d8e5]  VMThread::loop()+0xb5
V  [libjvm.so+0x1a8da17]  VMThread::run()+0xc7
V  [libjvm.so+0x196d680]  Thread::call_run()+0x100
V  [libjvm.so+0x161dfc4]  thread_native_entry(Thread*)+0x104;;;","2021-08-03 07:01;thartmann;Looks like another (not JIT related) bug.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove obsolete test classes and data files from 3DViewer sample,JDK-8271230,5055021,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-07-23 13:14,2021-08-23 06:58,2023-10-01 09:57,2021-07-26 06:23,8,jfx11,,,,,,jfx17,javafx,,0,noreg-cleanup,sn_98,,,,,,,,,,,,,,,,"This is a follow-up to JDK-8269259. I discovered that we have two test classes and a set of obsolete test models in 3DViewer. The tests don't run, and the data files won't load -- they either print a warning or an exception -- so I propose to delete the entire test directory:

apps/samples/3DViewer/src/test
",,,,,,,,,,,JDK-8272655,JDK-8271520,JDK-8271314,,,,,,,,,,JDK-8212088,,,,,,,,,JDK-8269259,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2trib:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f4f87d5,,,,,,,,,"2021-07-26 06:23;roboduke;Changeset: 0e5b7887
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-07-26 13:22:16 +0000
URL:       https://git.openjdk.java.net/jfx/commit/0e5b7887075e8cbe4d2b332c9021ec997f567ed7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Test serviceability/sa/ClhsdbDumpclass.java fails with unexpected end of file,JDK-8271229,5055019,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2021-07-23 12:18,2021-07-27 05:39,2023-10-01 09:57,2021-07-27 05:39,repo-valhalla,,,,,,,,hotspot,,0,lworld,,,,,,,,,,,,,,,,,"Test serviceability/sa/ClhsdbDumpclass.java is failing for a while.
Error message is:
Error: unexpected end of file while reading jdk\\test\\lib\\apps\\LingeredApp.class

The error can be manually reproduced by invoking javap manually on the LingeredApp.class class file.

The error can be reproduced with with either the javap from the Valhalla repo or the javap from the mainline, same error in each case.

Tracing the execution of javap shows that while processing fields of this class file, javap finds that 515 attributes must be processed (the number looks suspicious already) but reaches the end of the file while processing the first one.

At this point, it looks like the content of the LingeredApp.class class file is the cause of the issue, this is why the CR is created as a javac bug. If the issue is not a javac issue, please update the component/subcomponent fields.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-23 18:53;fparain;LingeredApp.class;https://bugs.openjdk.org/secure/attachment/95684/LingeredApp.class",,,,,,,,,,,,,,,,,,,,"0|i2trhv:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-26 08:01;fparain;When javap is processing the dumped class file, reading of fields data is off by the length of a short.
The section of the class file just before fields data is the interfaces section. The new suspect is the injection of the IdentityObject interface which could have caused an incorrect count of interfaces to dump in the class file. Investigating handling of injected interfaces now.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/EnclosingMethodAttr/EnclMethodAttr.java doesn't check exit code,JDK-8271224,5055011,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-07-23 09:14,2022-03-10 05:51,2023-10-01 09:57,2021-08-03 19:23,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282967,JDK-8280848,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2trg3:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-27 11:08;mseledtsov;ILW = LMM = P4;;;","2021-08-03 19:23;roboduke;Changeset: 68dd8280
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-08-04 02:22:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/68dd8280886ede7f5cd8d34811ad0f9ffac440f3
;;;","2022-03-09 07:17;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-03-09 07:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/220
Date: 2022-03-09 15:20:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
two runtime/ClassFile tests don't check exit code,JDK-8271223,5055010,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-07-23 09:04,2021-08-03 15:22,2023-10-01 09:57,2021-07-26 20:00,17,,,,,,,17,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,runtime/ClassFile/OomWhileParsingRepeatedJsr.java and JsrRewriting.java don't check exit code of spawns JVMs,,,,,,,,,,,JDK-8271357,JDK-8271800,JDK-8271663,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2trfv:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-26 20:00;roboduke;Changeset: cea7bc2d
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-07-27 02:59:40 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/cea7bc2dea8e179425db19998665f85c0b124d71
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
two runtime/Monitor tests don't check exit code,JDK-8271222,5055009,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-07-23 08:59,2021-08-03 15:22,2023-10-01 09:57,2021-07-26 10:18,16,17,,,,,,17,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,runtime/Monitor/MonitorUsedDeflationThresholdTest.java (added by JDK-8226416 in 17) and SyncOnValueBasedClassTest.java (added by JDK-8257845 in 16) don't check exit code of spawns JVMs,,,,,,,,,,,JDK-8271660,JDK-8271797,JDK-8271310,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2trfn:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-26 10:18;roboduke;Changeset: 3c27f919
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-07-26 17:18:26 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/3c27f919865584bcdcd85577306726afa5412571
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix data races in G1PeriodicGCTask,JDK-8271215,5054997,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kbarrett,kbarrett,kbarrett,2021-07-23 06:45,2021-10-25 08:28,2023-10-01 09:57,2021-07-26 07:24,17,18,,,,,,18,hotspot,,0,gc-g1,gc-pending-review,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,,,,,,,,,,,,,"G1PeriodicGCTask::should_start_periodic_gc calls g1h->time_since_last_collection(), possibly concurrently with the GC setting the collection time, leading to potential value tearing on 32bit platforms.  There might be other similar problems; that's just the first one I noticed.

should_start_periodic_gc should probably put it's entire body within an STS-joiner.  This would be consistent with other G1ServiceTasks that use an STS-joiner to protect against GC concurrency.
",,,,,,,,,,,JDK-8275877,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271217,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2trcz:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-07-26 07:24;roboduke;Changeset: f2c359a8
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2021-07-26 14:23:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f2c359a8826e51a92f6a7c6917f2c3d223c24488
;;;","2021-08-25 08:58;inakonechnyy;Request a backport to OpenJDK 17, applies cleanly, passed tier1 tests. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix doc comment typos in JavadocTokenizer,JDK-8271209,5054991,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2021-07-23 06:14,2021-07-28 21:15,2023-10-01 09:57,2021-07-23 07:06,18,,,,,,,18,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,Came across these typos while doing my research on JDK-8271153.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2trbn:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-23 07:06;roboduke;Changeset: c9251db1
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2021-07-23 14:05:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c9251db175803bb8d5e8b5b58ef34b50531c8e4b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in ModuleDescriptor.read javadoc,JDK-8271208,5054990,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,alanb,alanb,2021-07-23 05:50,2021-08-11 21:33,2023-10-01 09:57,2021-08-05 18:31,18,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,"The two 1-arg ModuleDescriptor.read methods have the text ""packager finder"", it should be ""package finder"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2trbf:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@34132c1c,,,,,,,,,"2021-08-05 18:31;roboduke;Changeset: e38e365c
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2021-08-06 01:30:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e38e365c70197f7e45d8bdc7d6c2e3c59717369e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: assert(iff->Opcode() == Op_If || iff->Opcode() == Op_CountedLoopEnd || iff->Opcode() == Op_RangeCheck) failed: Check this code when new subtype is added",JDK-8271203,5054981,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,yyang,chagedorn,chagedorn,2021-07-23 03:42,2021-08-23 11:29,2023-10-01 09:57,2021-08-15 19:32,16,17,18,,,,,18,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,oracle-triage-11,oracle-triage-18,redhat-interest,,,,,,,,,"The attached JavaFuzzer test fails with the following assertion:

To reproduce:
$ java java -XX:-TieredCompilation Test.java
$ java -Xbatch -XX:-TieredCompilation -XX:CompileOnly=Reduced Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124123/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/57294efe-464f-4c0a-b55a-fd67bfa32e7b/runs/71c23d41-87fd-4de4-92b5-4ba130c3e1dd/workspace/open/src/hotspot/share/opto/loopopts.cpp:237), pid=492453, tid=492466
#  assert(iff->Opcode() == Op_If || iff->Opcode() == Op_CountedLoopEnd || iff->Opcode() == Op_RangeCheck) failed: Check this code when new subtype is added
#
# JRE version: Java(TM) SE Runtime Environment (18.0+7) (fastdebug build 18-ea+7-268)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+7-268, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12e63a3]  PhaseIdealLoop::dominated_by(Node*, Node*, bool, bool)+0xd3
...........
Command Line: -XX:CompileCommand=quiet -XX:-TieredCompilation Test
...........
Current thread (0x00007f91e02b0b40):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=492466, stack(0x00007f9199cf8000,0x00007f9199df9000)]


Current CompileTask:
C2:   2894  108   !         Test::mainTest (1045 bytes)

Stack: [0x00007f9199cf8000,0x00007f9199df9000],  sp=0x00007f9199df30a0,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12e63a3]  PhaseIdealLoop::dominated_by(Node*, Node*, bool, bool)+0xd3
V  [libjvm.so+0x12b8423]  PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&)+0x11b3
V  [libjvm.so+0x12b2f0e]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x23e
V  [libjvm.so+0x12b2d05]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x35
V  [libjvm.so+0x12df1a8]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0xd58
V  [libjvm.so+0x9fba3c]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x28c
V  [libjvm.so+0x9f8525]  Compile::Optimize()+0x1475
V  [libjvm.so+0x9f9ff4]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1564
V  [libjvm.so+0x81a076]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa0aab9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xef9
V  [libjvm.so+0xa0b7e8]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x186829c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x186eb90]  Thread::call_run()+0x100
V  [libjvm.so+0x1551464]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8272683,JDK-8272650,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256655,,,,,,"2021-07-23 03:41;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95663/FuzzerUtils.java","2021-07-23 03:41;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/95661/Reduced.java","2021-07-23 03:41;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95662/Test.java","2021-07-23 03:41;chagedorn;hs_err_pid492453.log;https://bugs.openjdk.org/secure/attachment/95664/hs_err_pid492453.log",,,,,,,,,,,,,,,,,"0|i2tr9f:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-23 03:50;chagedorn;ILW = Assert in C2 loop unswitching, only with single JavaFuzzer test, disable compilation of affected method = HLM = P3;;;","2021-07-23 03:58;chagedorn;The `iff` is a LongCountedLoopEnd. I guess the code works just fine with them as well? [~roland];;;","2021-07-29 02:24;thartmann;[~yyang] please assign bugs to you and set them to In Progress if you are working on them.;;;","2021-07-29 02:49;yyang;[~thartmann] Okay! Status updated.;;;","2021-08-15 19:32;roboduke;Changeset: 3f38a50c
Author:    Yi Yang <yyang@openjdk.org>
Date:      2021-08-16 02:30:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3f38a50c528cccc30ca9e513b15ce9866d92aa82
;;;","2021-08-22 22:51;thartmann;I've already pushed the backport to JDK 17u and forgot to request approval. Doing this now:

Fix request (17u):
This bug leads to an assert during C2 compilation. The fix is low risk because it does not affect product (change in assert condition) and has been tested in the JDK 18 CI for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C1: assert(false) failed: live_in set of first block must be empty,JDK-8271202,5054980,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iveresov,chagedorn,chagedorn,2021-07-23 03:36,2022-01-22 02:06,2023-10-01 09:57,2021-12-24 21:38,11,13,16,17,18,,,18,hotspot,,0,c1,hs-comp-triaged,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,redhat-interest,,,,,,,"The attached JavaFuzzer test fails with the following assertion:

To reproduce:
$ java -XX:+DeoptimizeALot Test.java
$ java -XX:+DeoptimizeALot Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124123/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/57294efe-464f-4c0a-b55a-fd67bfa32e7b/runs/71c23d41-87fd-4de4-92b5-4ba130c3e1dd/workspace/open/src/hotspot/share/c1/c1_LinearScan.cpp:858), pid=28693, tid=28707
#  assert(false) failed: live_in set of first block must be empty
#
# JRE version: Java(TM) SE Runtime Environment (18.0+7) (fastdebug build 18-ea+7-268)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+7-268, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x79335c]  LinearScan::compute_global_live_sets()+0xc8c
............
Command Line: -XX:+DeoptimizeALot --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main Test.java
............
Current thread (0x00007fc8b41dca20):  JavaThread ""C1 CompilerThread0"" daemon [_thread_in_native, id=28707, stack(0x00007fc885638000,0x00007fc885739000)]


Current CompileTask:
C1:   2738 1445 % !   3       Test::mainTest @ 452 (1251 bytes)

Stack: [0x00007fc885638000,0x00007fc885739000],  sp=0x00007fc885736dc0,  free space=1019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x79335c]  LinearScan::compute_global_live_sets()+0xc8c
V  [libjvm.so+0x7b5594]  LinearScan::do_linear_scan()+0xe4
V  [libjvm.so+0x6e1bc9]  Compilation::emit_lir()+0xb59
V  [libjvm.so+0x6e458f]  Compilation::compile_java_method()+0x3ff
V  [libjvm.so+0x6e51a0]  Compilation::compile_method()+0x1d0
V  [libjvm.so+0x6e5bbf]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x36f
V  [libjvm.so+0x6e7013]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1a3
V  [libjvm.so+0xa0aab9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xef9
V  [libjvm.so+0xa0b7e8]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x186829c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x186eb90]  Thread::call_run()+0x100
V  [libjvm.so+0x1551464]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8279762,JDK-8279555,JDK-8280502,JDK-8280051,JDK-8279439,JDK-8279287,,,,,,,,,,,,,,,,,,,,,JDK-8275337,,,,,,"2021-12-18 11:57;iveresov;8271202.pdf;https://bugs.openjdk.org/secure/attachment/97409/8271202.pdf","2021-07-23 03:35;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95659/FuzzerUtils.java","2021-07-23 03:35;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/95657/Reduced.java","2021-07-23 03:35;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95658/Test.java","2021-07-23 03:35;chagedorn;hs_err_pid28693.log;https://bugs.openjdk.org/secure/attachment/95660/hs_err_pid28693.log",,,,,,,,,,,,,,,,"0|i2tr97:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-23 03:43;chagedorn;ILW = Assert in C1 Linear scan with debug flag DeoptimizeALot, rare - only with single JavaFuzzer test, disable compilation of affected method or use -XX:-DeoptimizeALot = HLM = P3;;;","2021-07-27 06:01;yyang;Hi [~chagedorn], can I try to fix this? I might know why it happens...

(DeoptimizeALot(ciMethod::liveness_at_bci) unconditionally extends the liveness of a local variable that should be already dead, and finally leads to this crash.

MethodLivenessResult ciMethod::liveness_at_bci(int bci) {
  if (CURRENT_ENV->should_retain_local_variables() || DeoptimizeALot) {
    // Keep all locals live for the user's edification and amusement.
    MethodLivenessResult result(_max_locals);
    result.set_range(0, _max_locals);
    result.set_is_valid();
    return result;
  }
  return raw_liveness_at_bci(bci);
}
);;;","2021-07-27 06:05;chagedorn;Hi [~yyang], sure go ahead! If it's unassigned you can always assign it to you and start working on it ;-);;;","2021-07-27 06:36;yyang;Thank you Christian, I got it!;;;","2021-10-11 12:49;mdoerr;I have tried to reproduce the issue, but the test Reduced.java has passed. Is the problem resolved by another fix?;;;","2021-10-11 23:58;chagedorn;It does not seem to trigger the bug anymore with the stated command line flags. I could, however, still reproduce it with latest JDK by adding -Xbatch to it:
$ java -Xbatch -XX:+DeoptimizeALot Reduced.java;;;","2021-12-02 15:48;mdoerr;Hi [~yyang], I have published a possible fix which simply detects the issue and bails out. I hope that it's helpful. If you find a better solution, fine with me.;;;","2021-12-03 07:09;chagedorn;Hi [~mdoerr], does your patch also fix JDK-8275337? I suspect that it is a dup. Maybe you could also add the fuzzer test as test case to the PR (if it is the same issue).;;;","2021-12-07 15:24;mdoerr;Hi [~chagedorn], I've added the test from the attachment: ""Reduced.java"". Note that my proposed workarounds for this one and the other issue are different. The one for this issue doesn't help for the other one and vice versa.;;;","2021-12-07 23:57;chagedorn;Okay, then we'll need to keep JDK-8275337 open. Thanks for the verification Martin and also for adding the test.;;;","2021-12-10 00:54;yyang;Hi [~mdoerr], I'm glad to see it can be simply fixed/bailouted. Please go ahead. I will get back to investigate this to see if there is a more general solution when I have finished my current work.;;;","2021-12-18 11:57;iveresov;I took a look at it. The root cause seems to be because of the irreducible loops (and therefore an unusual block traversal order when inserting phis) the phi invalidation logic in try_merge() doesn't invalidate phis that have invalid locals as inputs. I've attached a drawing. Notice that i54 = phi (i43, 96) is not invalidated even though 96 is illegal. Transitively, i43, it should be illegal too.  I would propose that we add a check for that and bailout in move_phi().

Suggested fix:

diff --git a/src/hotspot/share/c1/c1_LIRGenerator.cpp b/src/hotspot/share/c1/c1_LIRGenerator.cpp
index c064558b458..b386b541f89 100644
--- a/src/hotspot/share/c1/c1_LIRGenerator.cpp
+++ b/src/hotspot/share/c1/c1_LIRGenerator.cpp
@@ -963,6 +963,14 @@ void LIRGenerator::move_to_phi(PhiResolver* resolver, Value cur_val, Value sux_v
   Phi* phi = sux_val->as_Phi();
   // cur_val can be null without phi being null in conjunction with inlining
   if (phi != NULL && cur_val != NULL && cur_val != phi && !phi->is_illegal()) {
+    if (phi->is_local()) {
+      for (int i = 0; i < phi->operand_count(); i++) {
+        Value op = phi->operand_at(i);
+        if (op != NULL && op->type()->is_illegal()) {
+          bailout(""illegal phi operand"");
+        }
+      }
+    }
     Phi* cur_phi = cur_val->as_Phi();
     if (cur_phi != NULL && cur_phi->is_illegal()) {
       // Phi and local would need to get invalidated;;;","2021-12-24 11:24;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk18/pull/73
Date: 2021-12-24 19:19:35 +0000
;;;","2021-12-24 21:38;roboduke;Changeset: 54b800d5
Author:    Igor Veresov <iveresov@openjdk.org>
Date:      2021-12-25 05:38:12 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/54b800d56d6bc86676722ad96e87b8344606bcb7
;;;","2022-01-13 07:04;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
Risk: a bug that should be fixed, fix is trivial.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-01-13 07:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/92
Date: 2022-01-13 15:05:54 +0000;;;","2022-01-18 08:32;goetz;Fix request [11u]

I backport this for parity with 11.0.15-oracle.
Risk: a bug that should be fixed, fix is trivial.
Clean backport. 
SAP nightly testing passed.;;;","2022-01-18 08:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/774
Date: 2022-01-18 16:31:15 +0000;;;",,,,,,,,,,,,,,,,,,,,
Mutual TLS handshake fails signing client certificate with custom sensitive PKCS11 key,JDK-8271199,5054976,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abakhtin,abakhtin,abakhtin,2021-07-23 03:07,2023-04-04 03:34,2023-10-01 09:57,2021-10-25 01:01,11,13,15,17,18,8,,18,security-libs,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-hard,redhat-interest,,,,,,,,,"There is a use case with a custom PKCS11 provider (IAIK) which fails during the mutual TLS handshake.
TLS handshake fails to create a signature for the client certificate using sensitive PKCS11 RSA key.

EXPECTED BEHAVIOUR:
JDK selects custom RSASSA-PSS Signature implementation from the IAIK provider, signs client certificate, and completes TLS handshake

ACTUAL BEHAVIOUR:
JDK selects RSASSA-PSS Signature implementation from the SunRSASign provider and fails signing client certificate with the following stack trace:
  java.lang.UnsupportedOperationException: Prime P value is sensitive.
  at iaik.pkcs.pkcs11.provider.keys.IAIKPKCS11RsaPrivateKey.getPrimeP(Unknown Source)
  at java.base/sun.security.rsa.RSACore.crtCrypt(RSACore.java:176)
  at java.base/sun.security.rsa.RSACore.rsa(RSACore.java:130)
  at java.base/sun.security.rsa.RSAPSSSignature.engineSign(RSAPSSSignature.java:385)
  at java.base/java.security.Signature$Delegate.engineSign(Signature.java:1404)
  at java.base/java.security.Signature.sign(Signature.java:712)
  at java.base/sun.security.ssl.CertificateVerify$T12CertificateVerifyMessage.<init>(CertificateVerify.java:612)
  at java.base/sun.security.ssl.CertificateVerify$T12CertificateVerifyProducer.produce(CertificateVerify.java:764)
  at java.base/sun.security.ssl.SSLHandshake.produce(SSLHandshake.java:440)
  at java.base/sun.security.ssl.ServerHelloDone$ServerHelloDoneConsumer.consume(ServerHelloDone.java:182)
  at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:396)
  at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:480)
  at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:1277)
  at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:1264)
  at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
  at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask.run(SSLEngineImpl.java:1209)

The implementation uses a private PKCS11 key from the IAIK provider :
http://javadoc.iaik.tugraz.at/pkcs11_provider/current/iaik/pkcs/pkcs11/provider/keys/IAIKPKCS11RsaPrivateKey.html

This issue happens because of SignatureScheme.getSigner() selects RSAPSSSignature signer from the SunRSASign provider and RSAPSSSignature.engineInitSign() successfully initialises signature object.

Stack trace to RSAPSSSignature.engineInitSign():
java.base/sun.security.rsa.RSAPSSSignature.engineInitSign(RSAPSSSignature.java:148)
  	at java.base/java.security.SignatureSpi.engineInitSign(SignatureSpi.java:167)
  	at java.base/java.security.Signature$Delegate.tryOperation(Signature.java:1318)
  	at java.base/java.security.Signature$Delegate.chooseProvider(Signature.java:1270)
  	at java.base/java.security.Signature$Delegate.engineInitSign(Signature.java:1382)
  	at java.base/java.security.Signature.initSign(Signature.java:683)
  	at java.base/java.security.Signature$1.initSign(Signature.java:147)
  	at java.base/sun.security.util.SignatureUtil.initSignWithParam(SignatureUtil.java:194)
  	at java.base/sun.security.ssl.SignatureScheme.getSigner(SignatureScheme.java:595)
  	at java.base/sun.security.ssl.SignatureScheme.getSignerOfPreferableAlgorithm(SignatureScheme.java:542)
  	at java.base/sun.security.ssl.CertificateVerify$T12CertificateVerifyMessage.<init>(CertificateVerify.java:593)
  	at java.base/sun.security.ssl.CertificateVerify$T12CertificateVerifyProducer.produce(CertificateVerify.java:764)

As result, JDK does not try other signature providers. Later, RSAPSSSignature fails to sign the client certificate with the PKCS11 sensitive key.

This issue is possibly related to JDK-8226374 and JDK-8222937",,,,,,,,,,,JDK-8281718,JDK-8285714,JDK-8305534,,,,,,,,,,,,,,,,,,,,,,,,JDK-8222937,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tr8b:",9223372036854775807,b21,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-10-25 01:01;roboduke;Changeset: f6232982
Author:    Alexey Bakhtin <abakhtin@openjdk.org>
Committer: Yuri Nesterenko <yan@openjdk.org>
Date:      2021-10-25 08:00:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f6232982b91cb2314e96ddbde3984836a810a556
;;;","2022-02-11 02:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/157
Date: 2022-02-11 10:38:25 +0000;;;","2022-02-12 07:56;abakhtin;Fix request [17u]

I'd like to backport it to support custom PKCS11 providers.
The patch applies cleanly, all sun/security/rsa tests passed OK;;;","2022-04-19 05:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1036
Date: 2022-04-19 12:33:22 +0000;;;","2022-04-21 02:43;abakhtin;Fix request [11u]

I'd like to backport it to support custom PKCS11 providers.
Backport is not clean because of changes introduced by JDK-8023980 and JDK-8172366. These changes are not related to functionality of JDK-8271199 so merge is trivial.

sun/security/rsa jtreg and custom test with IAIK provider are passed;;;","2023-04-03 00:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/296
Date: 2023-04-03 07:08:54 +0000;;;","2023-04-03 08:32;abakhtin;Fix request [8u]

I'd like to backport it to support custom PKCS11 providers.
Clean backport from JDK11.

sun/security/rsa jtreg test are passed;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test/jdk/java/nio/file/spi/SetDefaultProvider.java @bug tag misleading,JDK-8271194,5054970,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,alanb,alanb,2021-07-23 00:27,2021-08-14 12:18,2023-10-01 09:57,2021-08-13 09:11,18,,,,,,,18,core-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,"JDK-8266345 added a new test to the existing test SetDefaultProvider.java. The @bug added by this change makes it look like the test is about JDK-8266345 whereas the test is much broader and dates back to the original JSR-203 implementation. We should fix the @bug tag or remove it.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266345,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tr6z:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-08-13 09:11;lancea;This issue was addressed as part of the update to SetDefaultProvider.java via JDK-8263940;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/GetObjectSizeClass.java doesn't check exit code,JDK-8271173,5054948,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-07-22 17:21,2021-08-03 15:20,2023-10-01 09:57,2021-07-23 08:54,17,,,,,,,17,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,`serviceability/jvmti/GetObjectSizeClass.java` test spawns a new JVM but doesn't check its exit code which might lead to both type-I and type-II errors,,,,,,,,,,,JDK-8271237,JDK-8271794,JDK-8271657,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tr23:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-07-23 08:54;roboduke;Changeset: e90ed6cc
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-07-23 15:53:48 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/e90ed6cc38ab8f8a2c7c740da1cb38144622b4eb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1 uses wrong degree of MT processing since JDK-8270169,JDK-8271163,5054936,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,tschatzl,dcubed,dcubed,2021-07-22 14:05,2023-08-15 08:30,2023-10-01 09:57,2021-11-04 01:50,18,,,,,,,18,hotspot,,0,tier1,,,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

gc/g1/TestEagerReclaimHumongousRegionsClearMarkBits.java

Here's a snippet from the log file:

[55.227s][info][gc] GC(145) Pause Young (Normal) (G1 Evacuation Pause) 96M->96M(128M) 528.168ms
[55.869s][info][gc] GC(146) Pause Young (Normal) (G1 Evacuation Pause) 97M->97M(128M) 641.814ms
[I@12edcd21 [I@34c45dca [I@52cc8049 [I@5b6f7412
Finishing test because maximum runtime exceeded
[I@27973e9b
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/referenceProcessor.hpp:327
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S56976/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f910762f-bde0-4482-b105-058ff8e2f0d5/runs/f2a36e2e-4866-43fa-bc16-d21ec0f68ec0/workspace/open/src/hotspot/share/gc/shared/referenceProcessor.hpp:327), pid=11911, tid=11913
#  assert(_next_id < _num_queues) failed: _next_id 0 _num_queues 3 _max_num_queues 10
#
# JRE version: Java(TM) SE Runtime Environment (18.0+8) (fastdebug build 18-ea+8-301)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+8-301, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x16681c1]  ReferenceProcessor::discover_reference(oop, ReferenceType) [clone .part.0]+0x671
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S92377/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/769fb53c-1b03-4461-b364-737fa5bbecbf/runs/882e4d6f-5337-4107-8b7c-5ae99582b821/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_gc_1/scratch/2/core.11911)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S92377/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/769fb53c-1b03-4461-b364-737fa5bbecbf/runs/882e4d6f-5337-4107-8b7c-5ae99582b821/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_gc_1/scratch/2/hs_err_pid11911.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
];
 stderr: []
 exitValue = 134

java.lang.RuntimeException: Expected to get exit value of [0]


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007fb508056780):  GCTaskThread ""GC Thread#0"" [stack: 0x00007fb4f0d6c000,0x00007fb4f0e6c000] [id=11913]

Stack: [0x00007fb4f0d6c000,0x00007fb4f0e6c000],  sp=0x00007fb4f0e6a838,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x16681c1]  ReferenceProcessor::discover_reference(oop, ReferenceType) [clone .part.0]+0x671
V  [libjvm.so+0xc1061c]  bool InstanceRefKlass::try_discover<narrowOop, G1CMOopClosure>(oop, ReferenceType, G1CMOopClosure*)+0x9c
V  [libjvm.so+0xc11cdd]  void InstanceRefKlass::oop_oop_iterate_discovery<narrowOop, G1CMOopClosure, AlwaysContains>(oop, ReferenceType, G1CMOopClosure*, AlwaysContains&) [clone .isra.0]+0x3d
V  [libjvm.so+0xc11f9c]  void InstanceRefKlass::oop_oop_iterate<narrowOop, G1CMOopClosure>(oop, G1CMOopClosure*)+0x19c
V  [libjvm.so+0xc1250a]  void OopOopIterateDispatch<G1CMOopClosure>::Table::oop_oop_iterate<InstanceRefKlass, narrowOop>(G1CMOopClosure*, oop, Klass*)+0x3a
V  [libjvm.so+0xc4979a]  void G1CMTask::process_grey_task_entry<true>(G1TaskQueueEntry)+0x2ba
V  [libjvm.so+0xc420cc]  G1CMTask::drain_local_queue(bool) [clone .part.0]+0x8c
V  [libjvm.so+0xc442e2]  G1CMTask::do_marking_step(double, bool, bool)+0xe72
V  [libjvm.so+0xc4f2ab]  G1CMRemarkTask::work(unsigned int)+0x35b
V  [libjvm.so+0x19eab75]  GangWorker::run_task(WorkData)+0x85
V  [libjvm.so+0x19eacb4]  GangWorker::loop()+0x44
V  [libjvm.so+0x19ead0a]
V  [libjvm.so+0x188f800]  Thread::call_run()+0x100
V  [libjvm.so+0x156ba64]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270800,JDK-8270356,JDK-8270948,,,JDK-8270948,,,,,JDK-8270169,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,"0|i2tqzf:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-07-23 01:05;tschatzl;Something strange going on here: discovery during mutator time using the CM ref processor; according to logs we have one CM thread

GC Precious Log:
[...]
 Concurrent Workers: 1

The assert can also only fail if _mt_discovery is false (see ReferenceProcessor::get_discovered_list()), but for some reason _num_queues and _max_workers is still > 1.

Note that there is a bug here somewhere in the determination of the mt discovery in the initialization of the CM ref processor because 

  _ref_processor_cm =
    new ReferenceProcessor(&_is_subject_to_discovery_cm,
                           ParallelGCThreads,                              // degree of mt processing
                           (ConcGCThreads > 1),                            // mt discovery
                           ConcGCThreads,                                  // degree of mt discovery

but in  G1ConcurrentMark::weak_refs_work() we use the parallel workers and the CM ref processor for discovery anyway:

[...]
    ReferenceProcessor* rp = _g1h->ref_processor_cm();

    // See the comment in G1CollectedHeap::ref_processing_init()
    // about how reference processing currently works in G1.

[...]
    // We need at least one active thread. If reference processing
    // is not multi-threaded we use the current (VMThread) thread,
    // otherwise we use the work gang from the G1CollectedHeap and
    // we utilize all the worker threads we can.
    uint active_workers = (ParallelRefProcEnabled ? _g1h->workers()->active_workers() : 1U);
    active_workers = clamp(active_workers, 1u, _max_num_tasks);

    // Set the concurrency level. The phase was already set prior to
    // executing the remark task.
    set_concurrency(active_workers);                                                               // !!!!!!!!!!!!!!!!!!!

    // Set the degree of MT processing here.  If the discovery was done MT,
    // the number of threads involved during discovery could differ from
    // the number of active workers.  This is OK as long as the discovered
    // Reference lists are balanced (see balance_all_queues() and balance_queues()).
    rp->set_active_mt_degree(active_workers);                                               // !!!!!!!!!!!!!!!!!!!

The change in the CM ref processor MT-ness has been in JDK-8270169.;;;","2021-07-23 01:37;kbarrett;Should probably just backout JDK-8270169.
;;;","2021-07-23 04:41;tschatzl;The issue is that JDK-8270169 made a change about reference discovery MT-ness assuming that only the concurrent GC threads do discovery (i.e. with a single thread in that case). However during Remark we do discovery using the gc worker threads in parallel always.;;;","2021-07-23 04:57;roboduke;Changeset: 8c8e3a0d
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-07-23 11:56:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8c8e3a0df2dac94a2978ec86093985af47ffe330
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/jni/checked/TestCheckedJniExceptionCheck.java doesn't set -Djava.library.path,JDK-8271160,5054930,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iignatyev,iignatyev,iignatyev,2021-07-22 13:01,2021-08-03 15:18,2023-10-01 09:57,2021-07-22 15:15,17,,,,,,,17,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,"TestCheckedJniExceptionCheck spawns a child JVM that uses a test native library, TestCheckedJniExceptionCheck, but it doesn't add/set test.nativepath value to -Djava.library.path, so the child JVM can't find the library and fails. 

this issue hasn't been noticed early b/c TestCheckedJniExceptionCheck doesn't check the exit code of the child JVM.",,,,,,,,,,,JDK-8271182,JDK-8271789,JDK-8271651,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqy3:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-22 15:15;roboduke;Changeset: 2d165a2b
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-07-22 22:15:25 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/2d165a2bdf6efbfb1541af53d83492769bc0f616
;;;","2021-07-22 15:19;dholmes;Just to re-state what was said in the review. The underlying problem is that different jtreg operating modes behave differently. In non-agentVM mode jtreg sets the LD_LIBRARY_PATH env var and so the child process gets the correct path. But in agentvm mode it does not do that and so the library is not found. That then coupled with the main flaw of the test - that it passed if the expected start line was not found.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] JDK-8249634 doclint should report implicit constructor as missing javadoc comments,JDK-8271159,5054929,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,dcubed,dcubed,2021-07-22 12:39,2021-08-18 17:41,2023-10-01 09:57,2021-08-11 11:04,18,,,,,,,18,tools,,0,tier1,,,,,,,,,,,,,,,,,"The following test fails in the JDK18 CI:

jdk/javadoc/doclet/testDocTreeDiags/TestDocTreeDiags.java

----------System.out:(55/2013)----------
Running test testStdout
Starting subtest 0.1: exit
Passed: javadoc exited OK, as expected

src/p/C.java:3: warning: length: 15 mid: 7 >>>t s[e]nte<<<
 * First sentence. &quot;  Second sentence.
          ^
Starting subtest 0.2: message-caret: src/p/C.java:3
Passed: src: 10 caret: 10

src/p/C.java:3: warning: length: 20 mid: 10 >>>d s[e]nte<<<
 * First sentence. &quot;  Second sentence.
                                   ^
Starting subtest 0.3: message-caret: src/p/C.java:3
Passed: src: 35 caret: 35

src/p/C.java:4: warning: length: 16 mid: 8 >>>lan[g].St<<<
 * {@link java.lang.String first phrase; &quot;  second phrase }
                  ^
Starting subtest 0.4: message-caret: src/p/C.java:4
Passed: src: 18 caret: 18

src/p/C.java:4: warning: length: 14 mid: 7 >>>t p[h]ras<<<
 * {@link java.lang.String first phrase; &quot;  second phrase }
                                  ^
Starting subtest 0.5: message-caret: src/p/C.java:4
Passed: src: 34 caret: 34

src/p/C.java:4: warning: length: 16 mid: 8 >>>ond[ ]phr<<<
 * {@link java.lang.String first phrase; &quot;  second phrase }
                                                       ^
Starting subtest 0.6: message-caret: src/p/C.java:4
Passed: src: 55 caret: 55

src/p/C.java:5: warning: length: 14 mid: 7 >>>d n[o]w .<<<
 * And now ... <!-- this is a comment --> and so it was.
        ^
Starting subtest 0.7: message-caret: src/p/C.java:5
Passed: src: 8 caret: 8

src/p/C.java:5: warning: length: 26 mid: 13 >>>is [a] co<<<
 * And now ... <!-- this is a comment --> and so it was.
                            ^
Starting subtest 0.8: message-caret: src/p/C.java:5
Passed: src: 28 caret: 28

src/p/C.java:5: warning: length: 15 mid: 7 >>> so[ ]it <<<
 * And now ... <!-- this is a comment --> and so it was.
                                                ^
Starting subtest 0.9: message-caret: src/p/C.java:5
Passed: src: 48 caret: 48

src/p/C.java:8: warning: use of default constructor, which does not provide a comment
public class C {
       ^
result: Failed. Execution failed: `main' threw exception: java.lang.IllegalArgumentException: detail pattern not found: src/p/C.java:8: warning: use of default constructor, which does not provide a comment",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249634,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqxv:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-07-22 12:43;dcubed;[~jjg] - Can you please take a look?;;;","2021-08-03 09:23;jjg;Needs to be addressed, but not a P1
;;;","2021-08-03 14:02;dcubed;[~jjg] - Sorry about that. It was a P1 when it was tracking the Tier1
test failures. When I morphed it into the [REDO], I should have
changed the priority to match the original bug (P3).;;;","2021-08-11 11:04;roboduke;Changeset: ec8d3bad
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-08-11 18:03:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec8d3badc869be7898b5a49fa5f9ba447bbbcf8d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/handshake/HandshakeTimeoutTest.java test doesn't check exit code,JDK-8271158,5054928,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-07-22 12:02,2021-08-03 15:18,2023-10-01 09:57,2021-07-22 16:54,17,,,,,,,17,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271653,JDK-8271184,JDK-8271791,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqxn:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-22 16:54;roboduke;Changeset: ee93cef8
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-07-22 23:53:36 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/ee93cef8aa73f801456f2231ada4971ca0a5a154
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[loom] VM crash on freeze operation (Ice Lake HW),JDK-8271157,5054927,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rpressler,skuksenko,skuksenko,2021-07-22 12:01,2022-03-06 16:31,2023-10-01 09:57,2022-03-06 16:31,repo-loom,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,"VM crash on freeze operation:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f33754885ab, pid=499735, tid=499774
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (build 18-internal+0-adhoc.skuksenk.open)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (18-internal+0-adhoc.skuksenk.open, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# v  ~StubRoutines::word_memcpy_up 0x00007f33754885ab
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/skuksenk/wrk/rabbit/core.499735)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:CompileCommandFile=/tmp/jmh158584075601359251compilecommand org.openjdk.jmh.runner.ForkedMain 127.0.0.1 34557

Host: 11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz, 8 cores, 31G, Ubuntu 20.04.2 LTS
Time: Thu Jul 22 09:03:14 2021 PDT elapsed time: 6.060475 seconds (0d 0h 0m 6s)

---------------  T H R E A D  ---------------

Current thread (0x00007f32dc008040):  JavaThread ""ForkJoinPool-1-worker-4"" daemon [_thread_in_vm, id=499774, stack(0x00007f33071f8000,0x00007f33072f9000)]

Stack: [0x00007f33071f8000,0x00007f33072f9000],  sp=0x00007f33072f5590,  free space=1013k
Thread 0x00007f32dc008040 [499774]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
v  ~StubRoutines::word_memcpy_up 0x00007f33754885ab
V  [libjvm.so+0x5d08c8]  int freeze0<Config<true, false> >(JavaThread*, long*, bool)+0x428
V  [libjvm.so+0x5c1469]  Continuation::freeze(JavaThread*, long*)+0x39
v  ~RuntimeStub::cont_doYield 0x00007f337545abf7
J 5198 c1 java.lang.Continuation.yield0(Ljava/lang/ContinuationScope;Ljava/lang/Continuation;)Z java.base@18-internal (560 bytes) @ 0x00007f33759e4058 [0x00007f33759e3f40+0x0000000000000118]
-----------
How to reproduce:
- use attached benchmarks.jar (or build it from attached sources)
- command line:
java -jar target/benchmarks.jar -f 1 -t 8
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-22 12:02;skuksenko;benchmarks.jar;https://bugs.openjdk.org/secure/attachment/95650/benchmarks.jar","2021-07-22 12:02;skuksenko;src.zip;https://bugs.openjdk.org/secure/attachment/95649/src.zip",,,,,x86,,,,,,,,,,linux,,,,"0|i2tqxf:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-22 12:37;skuksenko;Update: failure happens on new HW (Ice Lake). But on old Broadwell everything is fine. I could guess - new HW has AVX512, old - doesn't.;;;","2022-03-06 16:31;rpressler;word_memcpy stubs have been removed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong path separator in env variable,JDK-8271155,5054925,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,asemenyuk,asemenyuk,asemenyuk,2021-07-22 11:44,2021-08-09 10:08,2023-10-01 09:57,2021-07-22 15:15,17,,,,,,,17,tools,,0,jdk17-fix-request,jdk17-fix-yes,regression,regression_8267598,sn_98,,,,,,,,,,,,,""";"" path separator is used to join paths of UNIX env variable by jpackage - https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/share/native/applauncher/AppLauncher.cpp#L116
"":"" should be used on UNIX and "";"" should be used on Windows.",,,,,,,,,,,JDK-8271788,JDK-8271650,JDK-8271181,,,,,,,,,,,,,,,,,,,JDK-8271170,,,,,JDK-8267598,,,,,,,,,,,,generic,,,,,,,,17,,os_x,,,,"0|i2tqwz:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-07-22 12:32;asemenyuk;Fix Request
It is important to fix the issue in jdk17 as it makes unusable jpackage-packed apps with native libraries on Linux and OSX. The fix is low risk simple one-liner.;;;","2021-07-22 15:15;roboduke;Changeset: 7165b3f1
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2021-07-22 22:14:31 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/7165b3f105621398d7673253b6324e97ba0d2eee
;;;","2021-07-22 15:20;kcr;Fix request approved for JDK 17.;;;","2021-08-09 10:08;asemenyuk;Verified with jtreg test form JDK-8271170;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] CDS LoaderConstraintsTest fails after injection of IdentityObject,JDK-8271154,5054924,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2021-07-22 11:17,2023-05-31 02:04,2023-10-01 09:57,2021-07-23 06:27,repo-valhalla,,,,,,,,hotspot,,0,lworld,testbug,,,,,,,,,,,,,,,,"Test runtime/cds/appcds/loaderConstraints/LoaderConstraintsTest.java#custom-cl fails with this error message:

Currently specified interfaces[0] = {
}
Actual interfaces[1] = {
  java.lang.IdentityObject
}
An error has occurred while processing class list file /System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S110633/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7e138596-b53d-4d62-826f-2fde7549e059/runs/bbcf3d23-6078-46f9-94d9-01f7e4f243c7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/4/runtime.cds.appcds.loaderConstraints.LoaderConstraintsTest.java#custom-cl-test.classlist 3:45.
The number of interfaces (0) specified in class list does not match the class file (1):
LoaderConstraintsApp id: 2 super: 1 source: /System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S110633/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7e138596-b53d-4d62-826f-2fde7549e059/runs/bbcf3d23-6078-46f9-94d9-01f7e4f243c7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/4/loader_constraints.jar
                                            ^
The expected number of interfaces is incorrect because of the injection of the IdentityObject interface.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289747,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqwr:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove unreferenced functions from EncodingSupport_md.c,JDK-8271149,5054914,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-07-22 08:04,2021-07-28 21:14,2023-10-01 09:57,2021-07-22 23:39,18,,,,,,,18,core-svc,,0,,,,,,,,,,,,,,,,,,"I was running into those 2 warnings in EncodingSupport_md.c:
function ""utfTerminate"" was declared but never referenced
function ""platformToUtf8"" was declared but never referenced

Probably they can and should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tquj:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@dc685aa,,,,,,,,,"2021-07-22 23:39;roboduke;Changeset: fb859600
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-07-23 06:38:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fb85960015dfbd8e1d95d5fd7fdb65819828a317
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/file/Path.java javadoc typo,JDK-8271147,5054910,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jpai,lancea,lancea,2021-07-22 07:40,2021-07-28 21:14,2023-10-01 09:57,2021-07-22 21:08,,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,"In the javadoc for Path::endsWith:

Note that trailing separators are not taken into account, and so invoking this method on the Path""foo/bar"" with the String ""bar/"" returns true.


Notice the above is missing a space between ""Path"" and ""foo/bar""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqtn:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-07-22 21:08;roboduke;Changeset: 8156ff60
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2021-07-23 04:06:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8156ff609b27316f31ba89d9eb8ca752f4027c2b
;;;","2021-07-22 22:32;alanb;Jai seems to have fixed this even though it was initially assigned to Lance, so I'll re-assign.;;;","2021-07-23 05:34;jpai;I usually check with the assigned person before starting on any changes, but on this occasion, this one looked so trivial that I didn't check with Lance first. Sorry about that.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
package help is not displayed for missing X11/extensions/Xrandr.h,JDK-8271142,5054905,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-07-22 06:27,2021-10-10 23:51,2023-10-01 09:57,2021-08-22 23:40,17,18,,,,,,18,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"On SUSE Linux 15 configure was running into this error, because of a missing X11 header :

checking for X11/extensions/Xrandr.h... no
configure: error: Could not find all X11 headers (shape.h Xrender.h Xrandr.h XTest.h Intrinsic.h). 

I wondered about the missing package help output.
In help.m4, we detect PKGHANDLER as  /usr/bin/zypper  .
However only the exact string zypper is checked, this should be relaxed.
Afterwards, the package - help is back :

checking for X11/extensions/Xrandr.h... no
configure: error: Could not find all X11 headers (shape.h Xrender.h Xrandr.h XTest.h Intrinsic.h). 
You might be able to fix this by running 'sudo zypper install libX11-devel libXext-devel libXrender-devel libXrandr-devel libXtst-devel libXt-devel libXi-devel'.
",,,,,,,,,,,JDK-8275026,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,linux,,,,"0|i2tqsj:",9223372036854775807,b12,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-08-22 23:40;roboduke;Changeset: b7f75c0a
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-08-23 06:39:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b7f75c0a735f0cf40ae2288d1d0ae96a571a4155
;;;","2021-10-08 03:40;mbaesken;jdk17u Fix request:
I would like to have the fix in 17u as well because the issue is present there too. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Remove unused jvaluetype q member in jvalue,JDK-8271141,5054904,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fparain,fparain,fparain,2021-07-22 05:36,2021-07-22 06:12,2023-10-01 09:57,2021-07-22 06:12,repo-valhalla,,,,,,,,hotspot,,0,lworld,,,,,,,,,,,,,,,,,"The jvalue structure was extended with a new member when primitive objects and regular objects were handled completely separately. This member is not used anymore, and because primitive objects can now be handled like regular objects, there no reason to keep this member.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqsb:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix native frame handling in vframeStream::asJavaVFrame(),JDK-8271140,5054903,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aw,aw,aw,2021-07-22 05:34,2021-08-18 02:27,2023-10-01 09:57,2021-07-26 12:48,18,,,,,,,18,hotspot,,0,hs-comp-triaged,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-18,,,,,,,,,,,,,"JDK-8269592 added support for native frames to vframeStreamCommon::asJavaVFrame(), however, asJavaVFrame() does not correctly handle the case where a native frame is the last frame on the stack so there's no previous frame.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269592,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,"0|i2tqs3:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-22 05:50;chagedorn;ILW = Crash in c2v_iterateFrames, only observed with single unit test using JVMCI with -Xcomp, run without -Xcomp = HLM = P3;;;","2021-07-26 12:48;roboduke;Changeset: 3aadae20
Author:    Andreas Woess <aw@openjdk.org>
Committer: Tom Rodriguez <never@openjdk.org>
Date:      2021-07-26 19:47:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3aadae2077e9bf0a5900af79929b679bc6ec62b2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProblemList runtime/InvocationTests/invokevirtualTests.java,JDK-8271126,5054887,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jcm,jcm,jcm,2021-07-22 01:06,2021-08-10 00:22,2023-10-01 09:57,2021-07-22 07:06,17,18,,,,,,17,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-18,,,,,,,,,,,,,,,"In order to reduce the noise in the JDK17/JDK18 CI,
I'm ProblemListing:
runtime/InvocationTests/invokevirtualTests.java",,,,,,,,,,,JDK-8271146,JDK-8271640,JDK-8271783,,,,,,,,,,,,,,,,JDK-8270078,,,JDK-8271125,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tqoj:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-22 05:23;dholmes;Can we backport a sub-task or do we need a new sub-task for the problem-listing in the JDK 17 repo?;;;","2021-07-22 06:36;dcubed;You can backport a sub-task. I just did one the other day. I'll get going on this one shortly.
We need to get the noise in the JDK17 CI down.;;;","2021-07-22 06:51;dcubed;For some reason, the backport is not working like it did with JDK-8268223.
I'm going to convert this to an issue (temporarily).
;;;","2021-07-22 07:03;dcubed;Ahhh... the backport didn't work because the sub-task was confidential.
I've changed it to non-confidential and I have to keep it as an issue instead
of a sub-task because a sub-task inherits its security setting from the main issue.;;;","2021-07-22 07:06;roboduke;Changeset: 39b486db
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-07-22 14:04:34 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/39b486db6d83605deb8e49536892e0bc461b4531
;;;","2021-07-22 07:17;dcubed;To make things even more confusing, it looks like the change in security level
on the main issue (JDK-8271125) prevented Robo Duke from adding an entry
to this bug report (JDK-8271126) when [~jcm] integrated the fix into jdk/jdk
earlier today. So when I integrated the backport into jdk/jdk17, this bug was
updated with the JDK17 integration's info....

I've manually created a JDK18 (jdk/jdk) backport with the right info for that
integration.;;;","2021-07-22 12:29;dlong;LW = MMH = P3 ;;;","2021-07-23 02:40;jcm;[~dcubed] Thank you!!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: stack overflow (segv) when -Xlog:gc+start=debug,JDK-8271121,5053744,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,pliden,webbuggrp,webbuggrp,2021-07-09 00:42,2022-02-10 14:26,2023-10-01 09:57,2021-08-05 05:41,16,17,18,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,regression,webbug,zgc,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
I was able to reproduce the issue using OpenJDK 16.0.1, 17 (EA) and 18 (EA).

$ uname -a
Linux <redacted> 5.12.14-arch1-1 #1 SMP PREEMPT Thu, 01 Jul 2021 07:26:06 +0000 x86_64 GNU/Linux

$ jdk-16.0.1/bin/java -version
openjdk version ""16.0.1"" 2021-04-20
OpenJDK Runtime Environment (build 16.0.1+9-24)
OpenJDK 64-Bit Server VM (build 16.0.1+9-24, mixed mode, sharing)

$ jdk-17/bin/java -version
openjdk version ""17-ea"" 2021-09-14
OpenJDK Runtime Environment (build 17-ea+29-2576)
OpenJDK 64-Bit Server VM (build 17-ea+29-2576, mixed mode, sharing)

$ jdk-18/bin/java -version
openjdk version ""18-ea"" 2022-03-15
OpenJDK Runtime Environment (build 18-ea+4-122)
OpenJDK 64-Bit Server VM (build 18-ea+4-122, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
When the JVM is started with -XX:+UseZGC and -Xlog:gc+start=debug, oftentimes (80-90% of the time) it crashes eventually (usually within several seconds to several minutes) with a SIGSEGV. Below is the backtrace obtained from the core dump. Most of the frames are the repetition of #6-10 and omitted from the list.

(gdb) bt
#0  0x00007f461bcf605b in ZPageAllocator::alloc_page(unsigned char, unsigned long, ZAllocationFlags) () from jdk-16.0.1/lib/server/libjvm.so
#1  0x00007f461bcdf727 in ZHeap::alloc_page(unsigned char, unsigned long, ZAllocationFlags) () from jdk-16.0.1/lib/server/libjvm.so
#2  0x00007f461bcf2834 in ZObjectAllocator::alloc_object_in_shared_page(ZPage**, unsigned char, unsigned long, unsigned long, ZAllocationFlags) () from jdk-16.0.1/lib/server/libjvm.so
#3  0x00007f461bd00f82 in ZRelocate::relocate_object(ZForwarding*, unsigned long) const () from jdk-16.0.1/lib/server/libjvm.so
#4  0x00007f461b3c0bd0 in AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<286790ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 286790ul>::oop_access_barrier(oopDesc*, long) () from jdk-16.0.1/lib/server/libjvm.so
#5  0x00007f461bc1b9b2 in JavaThread::get_thread_name() const () from jdk-16.0.1/lib/server/libjvm.so
#6  0x00007f461bd09197 in ZStatCriticalPhase::register_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&) const () from jdk-16.0.1/lib/server/libjvm.so
#7  0x00007f461bcdec17 in ZForwarding::wait_page_released() const () from jdk-16.0.1/lib/server/libjvm.so
#8  0x00007f461bd00fc8 in ZRelocate::relocate_object(ZForwarding*, unsigned long) const () from jdk-16.0.1/lib/server/libjvm.so
#9  0x00007f461b3c0bd0 in AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<286790ul, ZBarrierSet>, (AccessInternal::BarrierType)3, 286790ul>::oop_access_barrier(oopDesc*, long) () from jdk-16.0.1/lib/server/libjvm.so
#10 0x00007f461bc1b9b2 in JavaThread::get_thread_name() const () from jdk-16.0.1/lib/server/libjvm.so
... (repeated frames ommited)
#14590 0x00007f461bc1b9b2 in JavaThread::get_thread_name() const () from jdk-16.0.1/lib/server/libjvm.so
#14591 0x00007f461bd09197 in ZStatCriticalPhase::register_start(TimeInstant<CompositeCounterRepresentation, CompositeElapsedCounterSource> const&) const () from jdk-16.0.1/lib/server/libjvm.so
#14592 0x00007f461bcf5ab5 in ZPageAllocator::alloc_page_stall(ZPageAllocation*) () from jdk-16.0.1/lib/server/libjvm.so
#14593 0x00007f461bcf62b0 in ZPageAllocator::alloc_page(unsigned char, unsigned long, ZAllocationFlags) () from jdk-16.0.1/lib/server/libjvm.so
#14594 0x00007f461bcdf727 in ZHeap::alloc_page(unsigned char, unsigned long, ZAllocationFlags) () from jdk-16.0.1/lib/server/libjvm.so
#14595 0x00007f461bcf2834 in ZObjectAllocator::alloc_object_in_shared_page(ZPage**, unsigned char, unsigned long, unsigned long, ZAllocationFlags) () from jdk-16.0.1/lib/server/libjvm.so
#14596 0x00007f461bcdb232 in ZCollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) () from jdk-16.0.1/lib/server/libjvm.so
#14597 0x00007f461b9d03de in MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const () from jdk-16.0.1/lib/server/libjvm.so
#14598 0x00007f461b9d072e in MemAllocator::allocate() const () from jdk-16.0.1/lib/server/libjvm.so
#14599 0x00007f461b6723b1 in InstanceKlass::allocate_instance(Thread*) () from jdk-16.0.1/lib/server/libjvm.so
#14600 0x00007f461bb18cc4 in OptoRuntime::new_instance_C(Klass*, JavaThread*) () from jdk-16.0.1/lib/server/libjvm.so
#14601 0x00007f45fd8578ad in ?? ()
#14602 0x0000100001200000 in ?? ()
#14603 0x00007f460530d3c8 in ?? ()
#14604 0x000186a00000eb78 in ?? ()
#14605 0x00007f43afa382a8 in ?? ()
#14606 0x0000000000000000 in ?? ()

I believe this is a stack overflow issue (and not null pointer dereference or alike) because the fault always seems to happen while the processor is running the instruction like `mov %esi,-0x118(%rbp)` or `push %rbx` to access the stack.

REGRESSION : Last worked in version 15

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run java with -Xlog:gc+start=debug and -XX:+UseZGC:

$ jdk-16.0.1/bin/java -Xlog:gc+start=debug:stdout:t,l,tg -Xmx128m -Xms128m -XX:+UseZGC Repro.java

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The JVM should keep running without crashing with a segmentation fault.
ACTUAL -
It crashes.

$ jdk-16.0.1/bin/java -Xlog:gc+start=debug:stdout:t,l,tg -Xmx128m -Xms128m -XX:+UseZGC Repro.java
[2021-07-09T15:05:48.103+0900][info][gc,start] GC(0) Garbage Collection (Warmup)
[2021-07-09T15:05:48.203+0900][info][gc,start] GC(1) Garbage Collection (Allocation Rate)
[2021-07-09T15:05:48.302+0900][info][gc,start] GC(2) Garbage Collection (Allocation Rate)
[2021-07-09T15:05:48.402+0900][info][gc,start] GC(3) Garbage Collection (Allocation Rate)
[2021-07-09T15:05:48.502+0900][info][gc,start] GC(4) Garbage Collection (Allocation Rate)
[2021-07-09T15:05:48.569+0900][debug][gc,start] Allocation Stall (main)
[2021-07-09T15:05:48.569+0900][info ][gc,start] GC(5) Garbage Collection (Allocation Stall)
... (omitted similar logs)
[2021-07-09T15:05:50.336+0900][info ][gc,start] GC(44) Garbage Collection (Allocation Stall)
[2021-07-09T15:05:50.397+0900][debug][gc,start] Allocation Stall (main)
[2021-07-09T15:05:50.397+0900][info ][gc,start] GC(45) Garbage Collection (Allocation Stall)
[2021-07-09T15:05:50.470+0900][debug][gc,start] Allocation Stall (main)
[2021-07-09T15:05:50.470+0900][info ][gc,start] GC(46) Garbage Collection (Allocation Stall)
zsh: segmentation fault (core dumped)  jdk-16.0.1/bin/java -Xlog:gc+start=debug:stdout:t,l,tg -Xmx128m -Xms128m -XX:+UseZGC Repro.java

---------- BEGIN SOURCE ----------
// java -Xlog:gc+start=debug:stdout:t,l,tg -Xmx128m -Xms128m -XX:+UseZGC Repro.java
public class Repro {
	public static void main(String[] args) throws InterruptedException {
		final String[] objs = new String[100000];
		while (true)
			for (int i = 0; i < 100000; ++i)
				objs[i] = new String(""abcdefghijklmnopqrstuvwxyz"");
	}
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Change -Xlog:gc+start=debug to -Xlog:gc+start=info. Not sure if this is enough to work around the issue, but at least it avoids the problematic code path found in the backtraces and seems to be working fine.

FREQUENCY : often


",,,,,,,,,,,JDK-8273537,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256390,,,,,,,,,,,,x86_64,,,,,,,b26,16,,linux,,,,"0|i2tjmj:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-07-21 21:12;fmatte;I could able to reproduce issue in 16 ea b26 but not on 16 b25. It tool very long time to crash in 16 b26 compared to latest version (tip). Possibly due to JDK-8256390;;;","2021-08-04 02:06;pliden;The problem here is that we're trying to access an oop (the thread and thread name used for logging) in the allocation path. We shouldn't do that since it can lead to a recursive allocation stall situation, which eventually will cause a stack overflow. I suggest we simply don't log anything in ZStatCriticalPhase::register_start().;;;","2021-08-05 05:41;roboduke;Changeset: 18dd4d46
Author:    Per Liden <pliden@openjdk.org>
Date:      2021-08-05 12:40:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/18dd4d469d120276d05e74607d780f01056f1a8b
;;;","2021-09-07 01:26;pliden;Fix request (jdk17u):
Very low risk backport that helps avoid a potential crash (stack overflow) when logging using -Xlog:gc+start=debug. Upstream patch applied cleanly.

PR: https://github.com/openjdk/jdk17u/pull/53;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] java/lang/constant/MethodHandleDescTest.java fails after JDK-8247376,JDK-8271113,5054872,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2021-07-21 17:52,2021-07-21 18:40,2023-10-01 09:57,2021-07-21 18:40,repo-valhalla,,,,,,,,core-libs,,0,lworld,,,,,,,,,,,,,,,,,"It's a bug in the fix of JDK-8247376 that appends "".ref"" in the display name if the descriptor is not Q-descriptor.   It can't determine if the class represented by the given L-descriptor string is a primitive class or not. 

We will follow up if ClassDesc::displayName should return a different string for primitive reference type vs primitive value type separately.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8247376,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tql7:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/duplAttributes/DuplAttributesTest.java doesn't check exit code,JDK-8271094,5054851,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-07-21 16:06,2021-08-03 15:17,2023-10-01 09:57,2021-07-22 10:15,17,,,,,,,17,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,`runtime/duplAttributes/DuplAttributesTest.java` test spawns new JVMs but doesn't check their exit code which might lead to both type-I and type-II errors. ,,,,,,,,,,,JDK-8271786,JDK-8271179,JDK-8271646,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqgj:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-22 10:15;roboduke;Changeset: 4812e537
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-07-22 17:14:30 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4812e537919dc1b1c08a2a8ddc0c9cb1c69a7744
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing API docs in UI controls classes,JDK-8271091,5054848,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,kcr,kcr,2021-07-21 15:36,2021-11-09 10:17,2023-10-01 09:57,2021-10-28 21:24,jfx17,,,,,,,jfx18,javafx,,0,noreg-doc,sn_104,test_sprint,,,,,,,,,,,,,,,"There are a few methods, fields, and constructors in various controls classes with missing documentation. There are also several constants in HTMLEditorSkin, so I included them here as well.

See the attached file with the list of javadoc warnings for missing comments.

This part of a larger effort to clean up missing or redundant docs, especially as they related to properties.  See JDK-8271083 for a general description.",,,,,,,,,,,,,,,,,,,,,,,JDK-8271083,,,,,,JDK-8227764,,,,,,,,,,,,,,"2021-07-21 15:36;kcr;javadoc-controls.log;https://bugs.openjdk.org/secure/attachment/95634/javadoc-controls.log",,,,,,,,,,,,,,,,,,,,"0|i2tqfv:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-10-28 21:24;roboduke;Changeset: a9474055
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-10-29 04:22:29 +0000
URL:       https://git.openjdk.java.net/jfx/commit/a9474055994d104288aff22fdb70f76ed8519627
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing API docs in scenegraph classes,JDK-8271090,5054847,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,kcr,kcr,2021-07-21 15:33,2021-11-09 10:17,2023-10-01 09:57,2021-10-28 21:17,jfx17,,,,,,,jfx18,javafx,,0,noreg-doc,sn_104,test_sprint,,,,,,,,,,,,,,,"There are a few methods, fields, and constructors in various scenegraph classes with missing documentation. There are also a small number in fxml and 1 in base, so I included them here as well.

See the attached file with the list of javadoc warnings for missing comments.

This part of a larger effort to clean up missing or redundant docs, especially as they related to properties.  See JDK-8271083 for a general description.",,,,,,,,,,,,,,,,,,,,,,,JDK-8271083,,,,,,,,,,,,,,JDK-8275848,,,,,,"2021-07-21 15:33;kcr;javadoc-scenegraph.log;https://bugs.openjdk.org/secure/attachment/95633/javadoc-scenegraph.log",,,,,,,,,,,,,,,,,,,,"0|i2tqfn:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2021-10-28 21:17;roboduke;Changeset: e7a106fa
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2021-10-29 04:17:08 +0000
URL:       https://git.openjdk.java.net/jfx/commit/e7a106faf3c0bb0126080d2f516248195679bf61
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Block comments of form '/***' are treated as javadoc comments,JDK-8271086,5054841,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2021-07-21 13:40,2021-09-03 10:21,2023-10-01 09:57,2021-07-28 10:24,jfx17,,,,,,,jfx17,javafx,,0,noreg-cleanup,sn_98,,,,,,,,,,,,,,,," See JDK-8271083 for a general description.

Several JavaFX classes have block comments of the following form:

```
    /***************************************************************************
     * ...
     **************************************************************************/
```

This pattern is treated as a javadoc comment and should be avoided. It can cause problems if the element that follows is a field or method that doesn't otherwise have or need a comment. For example, Node.java has the following:

```
    /***************************************************************************
     *                                                                         *
     *                       Component Orientation Properties                  *
     *                                                                         *
     **************************************************************************/
    private ObjectProperty<NodeOrientation> nodeOrientation;
```

which causes ""Component Orientation Properties"" to be used as the definition of that field. It is then copied to the getter and setter instead of the description of the Property method.

https://openjfx.io/javadoc/16/javafx.graphics/javafx/scene/Node.html#getNodeOrientation()

This specific example will also lead to warnings from a future version of the javadoc tool, since there is redundant documentation on the field and the Property method.

We should avoid using a / followed by 3 or more asterisks in block comments.
",,,,,,,,,,,JDK-8271522,,,,,,,,,,,,JDK-8271083,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqeb:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-07-22 08:27;jjg;The workaround is obviously to add a space after the initial `/*`.

;;;","2021-07-22 08:54;kcr;Yes, and given that there are nearly 1000 such block comments in 185 files, that's basically what I plan to do (I'll replace the 2nd asterisk with a space to keep the line length the same).;;;","2021-07-28 10:24;roboduke;Changeset: 78a3721a
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-07-28 17:23:42 +0000
URL:       https://git.openjdk.java.net/jfx/commit/78a3721a2b126e174b5fd94ea1d15ccdbe6d3624
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TabPane: Redundant API docs,JDK-8271085,5054840,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,kcr,kcr,2021-07-21 13:25,2022-02-23 04:31,2023-10-01 09:57,2022-02-10 21:17,jfx17,,,,,,,jfx18,javafx,,0,noreg-doc,sn_111,,,,,,,,,,,,,,,,"See JDK-8271083 for a general description.

The TabPane class has redundant documentation on several elements. Specifically, there are two properties that have javadoc comments on both the field and the Property method, and there are several properties (including those two) that have javadoc comments on the setter or getter.

The two things that need to be done for this bug are:

* Docs should be only on the field or the Property method (not both)
    tabMaxWidth, tabMaxWidthProperty() : remove docs on Property method
    tabMaxHeight, tabMaxHeightProperty() : remove docs on Property method

* Remove unnecessary docs on setters and getters

For each property, the most complete information should be taken. For example, tabClosingPolicy should take most of its documentation from the setter (which should be moved to either the field or the Property method).
",,,,,,,,,,,JDK-8281646,,,,,,,,,,,,JDK-8271083,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqe3:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-02-07 02:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/728
Date: 2022-02-07 10:53:00 +0000;;;","2022-02-10 21:17;roboduke;Changeset: 8b879eef
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2022-02-11 05:16:22 +0000
URL:       https://git.openjdk.java.net/jfx/commit/8b879eef96c9635a9ed16599344fa90568be2845
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaFileObject#toUri and multi-release jars,JDK-8271079,5054834,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cstein,cushon,cushon,2021-07-21 12:30,2021-12-15 17:33,2023-10-01 09:57,2021-12-13 04:01,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,"When the file manager returns a file object corresponding to an entry of a multi-release jar, JavaFileObject#toUri returns a URI that cannot be used to read the jar entry.

E.g. in the following example, the returned URI is:

jar:file:///tmp/tmp.28UW6cUPnS/mr.jar!/module-info.class

But the entry in the jar is in the `META-INF/versions/9/` directory, and calling `uri.toURL().openConnection()` on the URI returned by the file object will fail. Reading the jar entry would require a URI like:

jar:file:///tmp/tmp.28UW6cUPnS/mr.jar!/META-INF/versions/9/module-info.class

Is this expected behaviour? Is there a way to get a URI from a file object that includes the MR-JAR subdirectory?

===
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.JarURLConnection;
import java.net.URI;
import java.net.URLConnection;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.util.*;
import java.util.jar.JarEntry;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.StandardLocation;
import javax.tools.ToolProvider;

public class Repro {
  public static void main(String[] args) throws Exception {
    StandardJavaFileManager fileManager =
        ToolProvider.getSystemJavaCompiler()
            .getStandardFileManager(null, Locale.ENGLISH, StandardCharsets.UTF_8);
    Path path = Paths.get(""mr.jar"");
    fileManager.setLocationFromPaths(StandardLocation.CLASS_PATH, List.of(path));
    Iterator<String> options = Arrays.asList(""--multi-release"", ""9"").iterator();
    fileManager.handleOption(options.next(), options);

    Iterable<JavaFileObject> list =
        fileManager.list(
            StandardLocation.CLASS_PATH, """", EnumSet.allOf(JavaFileObject.Kind.class), false);

    for (JavaFileObject f : list) {
      System.err.println(""JavaFileObject: "" + f.getName());
      System.err.println(""JavaFileObject#toUri: "" + f.toUri());
      openUsingUri(f.toUri());
    }
  }

  private static void openUsingUri(URI uri) throws IOException {
    URLConnection connection = uri.toURL().openConnection();
    if (connection instanceof JarURLConnection) {
      try {
        JarEntry entry = ((JarURLConnection) connection).getJarEntry();
        System.err.println(""JarEntry: "" + entry.getName());
      } catch (FileNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
}
===

$ echo 'module hello {}' > module-info.java
$ javac -d classes --release 9 module-info.java
$ jar --create --file mr.jar --release 9 -C classes .
$ java Repro
JavaFileObject: mr.jar(/module-info.class)
JavaFileObject#toUri: jar:file:///tmp/tmp.28UW6cUPnS/mr.jar!/module-info.class
java.io.FileNotFoundException: JAR entry module-info.class not found in /tmp/tmp.28UW6cUPnS/mr.jar
        at java.base/sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:146)
        at java.base/sun.net.www.protocol.jar.JarURLConnection.getJarEntry(JarURLConnection.java:97)
        at Repro.openUsingUri(Repro.java:40)
        at Repro.main(Repro.java:32)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tqcr:",9223372036854775807,b02,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-08-04 23:56;alanb;The URI should refer to versioned entry. As it stands, it would require PathFileObject's toUri implementation to do the equivalent of JarEntry::getRealName

It appears that zipfs has the same issue. If a JAR file is opened as a file system with releaseVersion=runtime then it creates URIs for base entries that do not exist.;;;","2021-11-09 02:30;cstein;With ""the equivalent of JarEntry::getRealName"" you referred to this implementation found in JarFile's private JarEntry extension named JarFileEntry ?

https://github.com/openjdk/jdk/blob/8747882e4cb3af58062923bf830f9de877bdb03d/src/java.base/share/classes/java/util/jar/JarFile.java#L691-L698;;;","2021-12-07 23:39;alanb;If we fix the issue in zipfs, meaning Path::toUri will return a URI to the ""real entry"" then would it fix the issue for javac too? I'm also wondering about Path::toRealPath when the JAR file is a MR-JAR, arguably it should treat these entries as links to the real entry in the versioned section. ;;;","2021-12-08 02:42;cstein;> If we fix the issue in zipfs, meaning Path::toUri will return a URI to the ""real entry"" then would it fix the issue for javac too?

Yes, but only if workaround for JDK-8134451 is removed from javac's PathFileObject.java

For details and a proof-of-concept fix, see https://github.com/openjdk/jdk/compare/master...sormuras:JDK-8271079-versioned-uri-mrjar

> I'm also wondering about Path::toRealPath when the JAR file is a MR-JAR, arguably it should treat these entries as links to the real entry in the versioned section.

An interesting observation — shall I create a follow-up issue for this?;;;","2021-12-13 04:01;roboduke;Changeset: 23fd9f15
Author:    Christian Stein <cstein@openjdk.org>
Committer: Lance Andersen <lancea@openjdk.org>
Date:      2021-12-13 12:00:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/23fd9f15da40cef00231380766158bc0fa537c38
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/incubator/vector/Float128VectorTests.java failed a subtest,JDK-8271078,5054833,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,dcubed,dcubed,2021-07-21 11:41,2022-07-18 02:40,2023-10-01 09:57,2022-05-19 13:02,11,17,18,19,,,,19,hotspot,,0,hs-comp-triaged,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-18,tier3,,,,,,,,,,"The following test failed in the JDK18 CI:

jdk/incubator/vector/Float128VectorTests.java

Here's a snippet from the log file:

===============================================
jdk/incubator/vector/Float128VectorTests.java
Total tests run: 2501, Passes: 2500, Failures: 1, Skips: 0
===============================================

----------System.err:(15/928)----------
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
----------rerun:(47/5389)*----------

Unfortunately the failure occurred in the elided portion of the log file:

test Float128VectorTests.EQFloat128VectorTestsBroadcastLongSmokeTest(float[cornerCaseValue(i)], float[i - 2]): success
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongSmokeTest(float[cornerCaseValue(i)], float[zigZag(i)]): success
test Float128VectorTests.EQFloat128VectorTestsBroadcastLongSmokeTest(float[cornerCaseValue(i)], float[cornerCaseValue(i)]): success
test Float128VectorTests.EQFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[i], mask[i % 2]): 

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...",,,,,,,,,,,JDK-8288808,JDK-8290436,JDK-8288807,JDK-8289133,,,,,,,,,,,,,,,,,,,,,,,JDK-8140779,,,,,,,,,,,,x86_64,,,,,,,,,,generic,,,,"0|i2tqcj:",9223372036854775807,b24,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-21 11:50;dcubed;I downloaded the test run's artifacts and I can't find a more complete log that shows
the entire failure message for this test:

Float128VectorTests.EQFloat128VectorTestsBroadcastMaskedSmokeTest(float[i], float[i], mask[i % 2]);;;","2021-07-21 12:00;dlong;ILW = MLH = P4;;;","2021-09-09 07:19;dcubed;Here's a log file snippet for the jdk-18+15-761-tier3 sighting: 

jdk/incubator/vector/Float128VectorTests.java 

===============================================
jdk/incubator/vector/Float128VectorTests.java
Total tests run: 2501, Passes: 2500, Failures: 1, Skips: 0
===============================================

----------System.err:(15/928)----------
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
----------rerun:(47/5412)*----------

Again, the failing test info is lost in the elided section:

...
Output overflow:
JT Harness has limited the test output to the text
at the beginning and the end, so that you can see how the
test began, and how it completed.

If you need to see more of the output from the test,
set the system property javatest.maxOutputSize to a higher
value. The current value is 100000
...;;;","2021-10-25 18:48;psandoz;For jdk-18+21-1299-tier3

windows-x64 windows-x64-debug -XX:UseAVX=3 tier3-vector-avx512 open/test/jdk/:jdk_vector

From the XML that TestNG produces:

        <test-method signature=""MINReduceFloat128VectorTestsMasked(java.util.function.IntFunction, java.util.function.IntFunction)[pri:0, instance:Float128VectorTests@1494a913]"" started-at=""2021-10-25T17:14:48 UTC"" name=""MINReduceFloat128VectorTestsMasked"" data-provider=""floatUnaryOpMaskProvider"" finished-at=""2021-10-25T17:14:48 UTC"" duration-ms=""15"" status=""FAIL"">
          <params>
            <param index=""0"">
              <value>
                <![CDATA[float[i * 5]]]>
              </value>
            </param>
            <param index=""1"">
              <value>
                <![CDATA[mask[false]]]>
              </value>
            </param>
          </params>
          <exception class=""java.lang.AssertionError"">
            <message>
              <![CDATA[Final result is incorrect! expected [Infinity] but found [0.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Final result is incorrect! expected [Infinity] but found [0.0]
at org.testng.Assert.fail(Assert.java:99)

From the prior mach5 links i can conform the same test is failing.

Very hard to track down the actual reason, as it appears to be intermittent. Probably need to run a separate test X number of times.;;;","2021-10-28 10:10;psandoz;I ran MINReduceFloat128VectorTestsMasked (using a cut down version of the test file) multiple times using a debug build on machines with the same OS and CPU architecture and could not reproduce.;;;","2022-02-07 18:51;dlong;No recent failures.  Reopen if problem comes back.;;;","2022-05-03 13:30;dcubed;Here's a log file snippet from the jdk-19+21-1461-tier3 sighting: 

jdk/incubator/vector/Float128VectorTests.java

===============================================
jdk/incubator/vector/Float128VectorTests.java
Total tests run: 2518, Passes: 2517, Failures: 1, Skips: 0
===============================================

----------System.err:(13/739)----------
WARNING: Using incubator modules: jdk.incubator.vector
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
----------rerun:(46/5265)*----------

Unfortunately, this test generates a ""success"" line for every passing sub-test. So the
failure gets lost in the truncated output of 2517 passes. ;;;","2022-05-04 16:07;dlong;I was able to reproduce this on linux with -XX:UseAVX=3:

test Float128VectorTests.MAXReduceFloat128VectorTestsMasked(float[i * 5], mask[false]): failure
java.lang.AssertionError: Final result is incorrect! expected [-Infinity] but found [0.0]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEquals(Assert.java:774)
	at Float128VectorTests.assertReductionArraysEqualsMasked(Float128VectorTests.java:152)
	at Float128VectorTests.MAXReduceFloat128VectorTestsMasked(Float128VectorTests.java:2518)

This was 1 failure out of 1000 runs.;;;","2022-05-04 18:17;dlong;Reproduced on 3rd attempt with the following flags:
-XX:UseAVX=3
-XX:+DeoptimizeALot -XX:DeoptimizeALotInterval=100
-XX:CompileThresholdScaling=0.1
-XX:+TraceDeoptimization
-XX:+PrintDeoptimizationDetails
-XX:+PrintCompilation
-XX:CompileCommand=print,*::MINReduceFloat128VectorTestsMasked
-XX:CompileCommand=print,*::MAXReduceFloat128VectorTestsMasked
-XX:CompileCommand=PrintOptoAssembly,*::MINReduceFloat128VectorTestsMasked
-XX:CompileCommand=PrintOptoAssembly,*::MAXReduceFloat128VectorTestsMasked
;;;","2022-05-09 14:03;dlong;I guess reproducing in 3 runs was a fluke.  Sometimes it runs 10000 times with no failure.;;;","2022-05-09 16:17;dlong;I'm running out of ideas on this one.  I thought it could be a problem similar to JDK-8256054, but I can't find any place where destination register might be reusing one of the source registers.
[~vlivanov] or [~jbhateja], do you have any ideas?;;;","2022-05-10 13:36;dlong;It seems to be only the mask[false] tests that are failing.;;;","2022-05-11 12:07;dlong;I reproduced this with rr chaos mode, and the place where things go wrong seems to be an instruction like this:

 153d    vector_blend  XMM2,XMM21,XMM2,K7   ! using R10 and k2 as TEMP

The value of XMM2 is {-inf, -inf, 0, 0} instead of {-inf, -inf, -inf, -inf}, so I suspect that either XMM21 or K7 got partially corrupted, but ""rr"" isn't letting me print the values of avx512 registers.
;;;","2022-05-12 00:56;dlong;If I disable C2 from using XMM16-XMM31, the problem goes away, so there seems to be something going wrong with those AVX512 registers.;;;","2022-05-12 02:12;dlong;The test is only using 128-bit XMM registers, so the has_wide_vectors() returns false for the nmethods.  This means we use the save_live_vectors() with save_vectors set to false.  When it saves XMM16-XMM31, it only saves the low 64 bits.;;;","2022-05-12 19:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8690
Date: 2022-05-13 02:21:06 +0000;;;","2022-05-19 13:02;dukebot;Changeset: b0892295
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-05-19 19:59:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b0892295ee12c0c58c0121ff7f5f585b32d60eeb
;;;","2022-06-21 00:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/162
Date: 2022-06-21 07:44:30 +0000;;;","2022-06-21 11:19;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A C2 fix we should take, risk limited to x86_64.
Some simple resolves due to context.
SAP nightly testing passed.;;;","2022-06-21 11:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/490
Date: 2022-06-21 18:18:21 +0000;;;","2022-07-15 06:47;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
A C2 fix we should take, risk limited to x86_64. 
Clean backport from 17.
SAP nightly testing passed.;;;","2022-07-15 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1231
Date: 2022-07-15 13:46:58 +0000;;;",,,,,,,,,,,,,,,,
accessibility of a table on macOS lacks cell navigation,JDK-8271071,5054825,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenov,ant,ant,2021-07-21 09:09,2023-05-05 03:52,2023-10-01 09:57,2021-10-15 02:52,18,,,,,,,18,client-libs,,0,a11y,accessibility,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,macos,,,,,,,,,,,"JDK-8267388 implements accessibility of a Table in new a11y protocol, however it does not completely address the problem of cell navigation.

Cells in a table are navigated via Tab/Shift+Tab. However, each time a particular cell is navigated VoiceOver announces the whole row. Yet it's possible to edit a cell via Space in which case VoiceOver announces the cell's content.

It's suggested to investigate if the navigation problem can be resolved via implementing a Table a11y peer as NSAccessibilityGrid.",,,,,,,,,,,JDK-8287653,JDK-8277443,JDK-8277685,JDK-8288262,,,,,,,,,,,,,,,,,,JDK-8286266,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,"0|i2tqar:",9223372036854775807,b20,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-10-15 02:52;roboduke;Changeset: c0f3e1d6
Author:    Artem Semenov <asemenov@openjdk.org>
Committer: Anton Tarasov <ant@openjdk.org>
Date:      2021-10-15 09:51:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c0f3e1d6beab94a6b361814585b6d77fa617e7e4
;;;","2021-11-17 09:13;asemenov;Fix request (17u) 
This fix adds the ability to navigate table cells.
PR: https://github.com/openjdk/jdk17u/pull/281;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC several jvm08 perf regressions after JDK-8268372,JDK-8271064,5054817,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,eosterlund,ecaspole,ecaspole,2021-07-21 06:58,2021-08-27 09:21,2023-10-01 09:57,2021-08-04 03:29,17,18,,,,,,17,hotspot,,0,jdk17-fix-request,jdk17-fix-yes,perf-regression,zgc,,,,,,,,,,,,,,"Appeared in 17-b26 retriage:

SPECjvm2008-Crypto.signverify-ZGC	
-8.48%		
SPECjvm2008-XML.transform-ZGC	
-3.85%",,,,,,,,,,,JDK-8272206,JDK-8272174,JDK-8271914,,,,,,,,,,,,,,,,,,,JDK-8268372,,,,,,,,,,,,,,,,,,,,,,,,b26,,,,,,,"0|i2tq8z:",9223372036854775807,b34,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-07-29 03:43;eosterlund;So I had a look locally and found something interesting. I can reproduce the signverify regression, but only if the heap is large enough and the machine oversaturated. This happens in particular if I don't set -Xmx and don't set the number of application threads (seemingly defaulting to the whole machine), which seems to be consistent with what we observed in aurora if I read the logs right. The interesting thing is that when the heap is in this large mode, you hit allocation rate GCs during the warmup and a few GCs during the real run, and then the benchmark switches over to have all GC be satisfied by proactive GCs.

Proactive GCs which now drive this workload, have subtly changed with the mentioned patch. I recall pointing this out. When a proactive GC is triggered, it blindly uses ConcGCThreads threads, regardless of whether you UseDynamicNumberOfGCThreads or not. However, when you do use dynamic threads, the value for ConcGCThreads is heuristically chosen to be twice as high. In other words, after JDK-8268372, proactive GCs use twice as many threads. But the cost per GC duration is still assumed to be exactly the same as before, which of course is not the case. Although the previous estimate that it shouldn't use more than 50% of the machine for GC, which is still presumably true. Yet I note that the cost function has not changed, while we now use twice the number of threads.

I checked what happens if the proactive rule goes back to using the number of threads they did before (half the current amount). The result is that the regression disappears indeed.

I also checked what happens if I double the estimated cost per GC duration in the calculation for proactive GCs. The result is once again that the regression disappears indeed.

Note though that the proactive rule tries to conservatively make sure it does not waste more than 1% throughput. Then you might wonder how on earth it can waste over 8% throughput by throwing in twice the number of threads. The expected result is that if we were below 1% cost before and now waste 2x that no more aggressive GC, then the cost should be at least below 2%, and hence never cause an over 8% regression. And that might be the case in the world we assume we live in, where throwing in more GC threads linearly reduces the parallel part of the GC duration. However, during this benchmark run (the way it is run in aurora), the machine is constantly 100% loaded, and you really don't get close to that linear speed up. That causes the heuristics to make incorrect estimates about the cost of running proactive GC.

Now the assumptions we make about linear scaling in our heuristics, is very much intentional. We consciously prefer optimizing the heuristics for real-world workloads that we expect ZGC to run in. The expectation is that you are selecting ZGC because you are latency conscious. People that run real latency conscious workloads, typically don't max out the machine, as that leads to horrible latency jitter. Instead, you would have a healthy margin of CPU utilization, to ensure latencies are kept snappy. And indeed, if I set the number of application threads to 40% of the machine, there is no regression any more in this benchmark, and the heuristics manage to correctly keep proactive GCs within the 1% budget.

In summary, we seem to regress in signverify because proactive GCs now use twice as many threads. It's probably easy to provide the old behaviour should we choose to do that. But the regression is only visible in execution modes that are completely unrealistic for real-world production use of ZGC (brutally oversaturated machine where application latencies are bound to be through the roof). It can not be observed in realistic ZGC scenarios where app CPU utilization is <= 40%. So while a number has gone down, I can't decide if this should be dealt with or not. It would be mostly to satisfy throughput-only workloads that don't care about latency at all, which doesn't seem to be ZGC's cup of tea.

I have not analyzed the other benchmarks yet, so this analysis is only for the worst culprit so far: signverify;;;","2021-07-29 07:11;eosterlund;The fix that worked locally: to restore the same behaviour to proactive GCs, did not work in aurora. Still says there is a regression. So it looks like there might be multiple problems lurking.;;;","2021-07-30 04:30;eosterlund;Since I can't reproduce the results locally, I had a closer look at the GC logs of the runs done in aurora. Looks like with the new algorithm, allocation rate rules are triggered back-to-back even though there is really no need for it. There is seemingly always a new GC triggered within 100 ms of completing one. I keep on seeing ""Garbage Collection (Allocation Rate) 254M(1%)->54M(0%)"". It ends up running 3477 GC cycles until the benchmark run is over, compared to 272 GC cycles for the baseline. This seems to suggest there is a more serious problem lurking in here, that only triggers during ""certain"" conditions, that are not certain.;;;","2021-08-02 05:36;eosterlund;After some digging, it was found that the extra seat belt for being conservative when using a single GC thread, backfires heavily when the GC duration is very short (~100 ms), and the allocation rate is very high (~20 GB/s). The dynamic GC heuristic in this context sees that there is ~1.5 seconds until OOM, a GC takes ~100 ms, yet it thinks it needs to start ASAP, because of this extra conservative mode for single threads, that assume the GC could take a constant extra time, proportional to the sampling window, which is rather high compared to he time to do a GC.
Removing this code removes the regression in aurora, and even gives some significant speedups instead.;;;","2021-08-02 06:48;eosterlund;Fix Request

The perfomance bug in the dynamic CC thread heuristics causes some benchmarks with high allocation rate and short GC duration, to back-to-back GC thousands of times, instead of just doing just a few (< 100) GCs like before. The suggested fix can be found in the following webrev: http://cr.openjdk.java.net/~eosterlund/zgc_regression/webrev.00/
It removes an extra conservative seatbelt that was added to avoid running with only 1 thread too close to OOM. There are however other conservative measures to avoid this. The mechanism itself however leads to pointless excessive back-to-back GC in these scenarios. Both [~pliden] and [~ayang] who co-authored the dynamic GC thread code, agree that this code can and should be removed due to the obvious trouble it causes. The regressing benchmarks no longer regress with this fix, and run like normal. A 2.88% significant improvement can be seen instead in the specjvm2008 serial benchmark. The risk of including this fix in JDK17 seems far lower than the risk of not having it. To mitigate the risk further, [~ecaspole] is helping me run an extended amount of benchmarks to ensure a regression due to the fix will not pop up later.;;;","2021-08-03 07:50;kvn;Fix request for JDK 17 is approved.
;;;","2021-08-04 03:29;roboduke;Changeset: 181483b9
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2021-08-04 10:28:47 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/181483b90bcc7d4e44109a14213d4ee2804f7f32
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: ""assert(no_dead_loop) failed: dead loop detected"" due to cmoving identity",JDK-8271056,5054809,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,chagedorn,chagedorn,2021-07-21 05:39,2022-02-03 00:38,2023-10-01 09:57,2021-11-08 04:48,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-18,,,,,,,,,,,"The attached Java Fuzzer test crashes with the following assertion which seems to be unrelated to JDK-8268019:

To reproduce:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test.java
$ java-Xcomp -XX:-TieredCompilation -XX:CompileOnly=Reduced Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124123/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/57294efe-464f-4c0a-b55a-fd67bfa32e7b/runs/71c23d41-87fd-4de4-92b5-4ba130c3e1dd/workspace/open/src/hotspot/share/opto/phaseX.cpp:945), pid=295183, tid=295196
#  assert(no_dead_loop) failed: dead loop detected
#
# JRE version: Java(TM) SE Runtime Environment (18.0+7) (fastdebug build 18-ea+7-268)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+7-268, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x15c93f6]  PhaseGVN::dead_loop_check(Node*) [clone .part.0]+0x156
............
Command Line: -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main Test.java
............
Current thread (0x00007ffa981da920):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=295196, stack(0x00007ffa74a64000,0x00007ffa74b65000)]


Current CompileTask:
C2:   3295   88    b        Test::lMeth (390 bytes)

Stack: [0x00007ffa74a64000,0x00007ffa74b65000],  sp=0x00007ffa74b603e0,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x15c93f6]  PhaseGVN::dead_loop_check(Node*) [clone .part.0]+0x156
V  [libjvm.so+0x15d67f9]  PhaseIterGVN::transform_old(Node*)+0x4f9
V  [libjvm.so+0x15cfcbe]  PhaseIterGVN::optimize()+0x7e
V  [libjvm.so+0x9f7269]  Compile::Optimize()+0x1b9
V  [libjvm.so+0x9f9ff4]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1564
V  [libjvm.so+0x81a076]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa0aab9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xef9
V  [libjvm.so+0xa0b7e8]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x186829c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x186eb90]  Thread::call_run()+0x100
V  [libjvm.so+0x1551464]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8281204,JDK-8280559,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268883,,,,,,"2021-07-21 05:37;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95616/FuzzerUtils.java","2021-07-21 05:37;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/95619/Reduced.java","2021-07-21 05:37;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95618/Test.java","2021-07-23 01:38;chagedorn;Test2.java;https://bugs.openjdk.org/secure/attachment/95656/Test2.java","2021-07-21 05:37;chagedorn;hs_err_pid295183.log;https://bugs.openjdk.org/secure/attachment/95617/hs_err_pid295183.log",,,,,,,,,,17,,,,,,"0|i2tq77:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-21 05:45;chagedorn;ILW = C2 assertion during IGVN, only fails intermittently with single Java Fuzzer test, disable compilation of affected method = HLM = P3;;;","2021-07-23 01:40;chagedorn;Attached another test (Test2.java) found by fuzzing which might be the same issue. If not, a separate bug should be filed.

To reproduce:
$ java -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Test2 Test2.java;;;","2021-10-15 05:05;chagedorn;Another failure was found with JDK-8275326. That test should also be verified before integration.;;;","2021-10-29 05:41;chagedorn;Test2.java seems to be the same root cause while JDK-8275326 seems to be unrelated.;;;","2021-11-08 04:48;roboduke;Changeset: 54481394
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-11-08 12:47:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/54481394a3b7d36b2326e22e4aa910a3e8041b5c
;;;","2022-01-31 05:10;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
Small risk, simple change.
Clean backport.
Test passes.  SAP nightly testing passed.;;;","2022-01-31 05:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/136
Date: 2022-01-31 13:09:45 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Crash during deoptimization with ""assert(bb->is_reachable()) failed: getting result from unreachable basicblock"" with -XX:+VerifyStack",JDK-8271055,5054808,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,chagedorn,chagedorn,2021-07-21 05:35,2022-04-07 01:33,2023-10-01 09:57,2022-02-03 14:13,11,16,17,18,8,,,19,hotspot,,0,hs-comp-triaged,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,oracle-triage-18,starter,,,,,,,"The attached Java Fuzzer test crashes with the following assertion:

To reproduce:
$ java -XX:+VerifyStack Test.java
$ java -XX:+VerifyStack Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S124123/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/57294efe-464f-4c0a-b55a-fd67bfa32e7b/runs/71c23d41-87fd-4de4-92b5-4ba130c3e1dd/workspace/open/src/hotspot/share/oops/generateOopMap.cpp:2216), pid=2766569, tid=2766570
#  assert(bb->is_reachable()) failed: getting result from unreachable basicblock
#
# JRE version: Java(TM) SE Runtime Environment (18.0+7) (fastdebug build 18-ea+7-268)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+7-268, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd349cc]  GenerateOopMap::result_for_basicblock(int)+0x9c
..........
Command Line: -XX:CompileCommand=quiet -XX:CompileCommand=dontinline,Test::* -XX:+VerifyOops -XX:+VerifyStack -XX:+VerifyLastFrame -XX:+VerifyBeforeGC -XX:+VerifyAfterGC -XX:+VerifyDuringGC -XX:+VerifyAdapterSharing Test
..........
Current thread (0x00007f5934029370):  JavaThread ""main"" [_thread_in_Java, id=2766570, stack(0x00007f593d827000,0x00007f593d928000)]

Stack: [0x00007f593d827000,0x00007f593d928000],  sp=0x00007f593d9242c0,  free space=1012k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd349cc]  GenerateOopMap::result_for_basicblock(int)+0x9c
V  [libjvm.so+0x1530e2e]  OopMapForCacheEntry::compute_map(Thread*)+0x17e
V  [libjvm.so+0x1532ad1]  OopMapCacheEntry::fill(methodHandle const&, int)+0xf1
V  [libjvm.so+0x15333c3]  OopMapCache::compute_one_oop_map(methodHandle const&, int, InterpreterOopMap*)+0x63
V  [libjvm.so+0xa9edcc]  Deoptimization::unpack_frames(JavaThread*, int)+0xaec
v  ~DeoptimizationBlob
j  Test.iMeth(II)I+346
j  Test.vMeth1(II)V+86
j  Test.vMeth(IJJ)V+119
j  Test.mainTest([Ljava/lang/String;)V+72
j  Test.main([Ljava/lang/String;)V+18
v  ~StubRoutines::call_stub
V  [libjvm.so+0xe5f8f4]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0xf91c95]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x375
V  [libjvm.so+0xf953a5]  jni_CallStaticVoidMethod+0x1c5
C  [libjli.so+0x47e7]  JavaMain+0xd37
C  [libjli.so+0x7d19]  ThreadJavaMain+0x9

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~DeoptimizationBlob
j  Test.iMeth(II)I+346
j  Test.vMeth1(II)V+86
j  Test.vMeth(IJJ)V+119
j  Test.mainTest([Ljava/lang/String;)V+72
j  Test.main([Ljava/lang/String;)V+18
v  ~StubRoutines::call_stub",,,,,,,,,,,JDK-8283819,JDK-8284511,JDK-8283948,JDK-8284260,JDK-8284059,,,,,,,,,,,,,,,,,JDK-8074292,,,,,,,,,,,"2021-07-21 05:33;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95613/FuzzerUtils.java","2021-07-21 05:34;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/95612/Reduced.java","2021-07-21 05:32;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95615/Test.java","2021-07-21 05:32;chagedorn;hs_err_pid2766569.log;https://bugs.openjdk.org/secure/attachment/95614/hs_err_pid2766569.log",,,,,,,,,,,,,,,,,"0|i2tq6z:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-21 05:43;chagedorn;ILW = Assert in deoptimization when using VerifyStack flag, seen multiple times so far, use -XX:-VerifyStack = MML = P4;;;","2021-07-26 06:54;coleenp;I just linked a bug that we thought was due to an async exception, that we don't think is possible.  Could this be the root cause of JDK-8074292 also?  We've been chasing that one for years.;;;","2021-07-27 00:57;yyang;[~coleenp] I tried JDK-8074292 many times but still can not trigger the assertion. I'm glad to investigate it if there is a reliable reproducible test case. Otherwise, we can see if the crash still occurs after removing trap bytecode checking.;;;","2021-07-27 01:00;yyang;Sorry for Christian that I started work on this w/o any sync earlier. I will take care of this in the furuter;-);;;","2021-07-27 01:08;chagedorn;No problem :-);;;","2021-07-27 07:36;coleenp;[~yyang] Bug JDK-8074292 happened 4 times, in 2015, 2019 and 2 times in 2020.  We/I spent a lot of time on this and couldn't reproduce it either.  This bug is a different stack trace, but same symptom.  All the data from it is gone now.
Looking at the fix, it seems it might fix this bug also, but I honestly don't know.


;;;","2021-11-16 06:54;chagedorn;Hi [~yyang], as the fork's soon coming up in early December, are you planing to get this fixed in 18? Otherwise, it needs to be deferred to 19 once RDP 1 starts (because it's a P4).;;;","2021-11-16 18:43;yyang;Hi [~chagedorn], this is a debug flag, it does not affect the product environment, I'm not sure if I have time to investigate and fix this problem in jdk18, so I clear the assignee, anyone who is interested in this problem (including me) can also investigate it later.

Some thoughts(IIRC):

The root cause is that javac generates unreachable blocks and there is no exception table for that method, thus hitting the assertions when turning VerifyStack on. Since JDK-8271254 is fixed, I think the attached test should not trigger the assertion anymore. But JDK-8271254 is not enough for this problem, because it only fixes a javac bug that emits unreachable blocks, people can still generate problematic bytecodes in other ways. (I'm not quite sure, maybe JDK-8271254 generates unreadable blocks with an exception table, maybe it does not generate unreachable blocks, but the conclusion is still valid, i.e. people can still generate problematic bytecodes in other ways).

To fix this, we might change many codes around VerifyStack, because VerifyStack thinks they are really unreachable(no exception table and unreachable from CFG perspective), but they are actually reachable(logically in code, `catch` would be reachable if `try` throws exceptions).

Thanks.;;;","2021-11-17 00:19;chagedorn;Thanks for the detailed summary Yi! It seems that this is not so easy to fix and requires quite some changes in code for the debug build flag VerifyStack. I'll re-target it to 19 for now. If you, or someone else, still want to pick this up 18, please move it back to 18 again.;;;","2022-02-01 21:22;dlong;Test.java still fails for me.  When I run in gdb, it says the current bytecode is Bytecodes::_goto.  If that's always the case, the fix is simple.  We shouldn't be computing the stack state for next instruction if the current instruction doesn't fall through.  The current code has a special case for Bytecodes::_athrow, so it makes sense to also check for other instructions that don't fall through.

804	          if (!Bytecodes::is_invoke(cur_code) && cur_code != Bytecodes::_athrow) {

[~yyang], can you confirm my findings?  ;;;","2022-02-02 20:02;dlong;Baseline testing with new test and fix disabled:
MDash: https://mach5.us.oracle.com/mdash/jobs/dlong-8271055-baseline-20220203-0352-28759881
MDash: https://mach5.us.oracle.com/mdash/jobs/dlong-8271055-baseline-20220203-0353-28759908
MDash: https://mach5.us.oracle.com/mdash/jobs/dlong-8271055-baseline-20220203-0354-28759939
MDash: https://mach5.us.oracle.com/mdash/jobs/dlong-8271055-baseline-20220203-0355-28759966
;;;","2022-02-02 20:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7331
Date: 2022-02-03 04:11:38 +0000;;;","2022-02-02 20:21;dlong;Testing with fix enabled:
https://mach5.us.oracle.com/mdash/jobs/dlong-8271055-fix-20220203-0404-28760219
https://mach5.us.oracle.com/mdash/jobs/dlong-8271055-fix-20220203-0404-28760250
https://mach5.us.oracle.com/mdash/jobs/dlong-8271055-fix-20220203-0405-28760277
https://mach5.us.oracle.com/mdash/jobs/dlong-8271055-fix-20220203-0423-28760836;;;","2022-02-03 14:13;roboduke;Changeset: e44dc638
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-02-03 22:10:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e44dc638b8936b1b76ca9ddf9ece0c5c4705a19c
;;;","2022-02-10 19:37;yyang;Hi [~dlong], the fix looks reasonable to me.;;;","2022-03-29 06:06;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-29 06:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/298
Date: 2022-03-29 13:04:38 +0000;;;","2022-03-29 08:25;thartmann;Fix Request (JDK 18u)
Fixes an assert during stack verification. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 08:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/67
Date: 2022-03-29 15:24:24 +0000;;;","2022-04-05 08:37;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only a change to debug coding.
Clean backport.
Test passes.  SAP nightly testing passes.;;;","2022-04-05 08:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1004
Date: 2022-04-05 15:42:59 +0000;;;",,,,,,,,,,,,,,,,,
[REDO] Wrong stage gets focused after modal stage creation,JDK-8271054,5054802,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsayao,pbansal,pbansal,2021-07-21 04:31,2022-07-13 05:32,2023-10-01 09:57,2022-03-09 06:17,jfx17,,,,,,,jfx19,javafx,,0,,,,,,,,,,,,,,,,,,"When a MODAL stage is created as the owner of previous stage after a Dialog/Alert, the wrong stage is focused.

Steps to reproduce:

1) Run the sample
2) Press the ""Click Me!"" button
3) Answer YES on the Alert

The primary stage is brought to front instead of the stage with the button (it's the owner of the last stage).

",,,,,,,,,,,JDK-8289266,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8240640,JDK-8227366,,,,,"2021-07-21 04:31;pbansal;StageTest.java;https://bugs.openjdk.org/secure/attachment/95607/StageTest.java",,,,,,x86_64,,,,,,,,,,linux,,,,"0|i2tq5n:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2021-07-21 05:39;kcr;This bug is not yet actual. The proposed fix for JDK-8240640 is to backout the original fix for JDK-8227366 at which time this bug will be ready.

[~pbansal] Please assign it back to [~tsayao] once the fix for JDK-8240640 is integrated.;;;","2021-10-12 08:16;kcr;NOTE: this fix will need to be redone so that it doesn't reintroduce JDK-8240640 or JDK-8269429.;;;","2022-03-09 06:17;dukebot;Changeset: c6069d68
Author:    Thiago Milczarek Sayao <tsayao@openjdk.org>
Date:      2022-03-09 14:15:27 +0000
URL:       https://git.openjdk.java.net/jfx/commit/c6069d6845df4b90cca226e2b3dff49e3b48d8ac
;;;","2022-06-27 01:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/63
Date: 2022-06-27 08:24:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] vmTestbase/jit/t/* tests fail after JDK-8237073,JDK-8271025,5054771,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2021-07-21 02:20,2021-07-21 02:29,2023-10-01 09:57,2021-07-21 02:29,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,noreg-self,,,,,,,,,,,,,,,Tests fail because java.lang.Object is not found in the output.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8237073,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tpyr:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
vmTestbase/gc/lock/malloc/malloclock04/TestDescription.java crashes intermittently,JDK-8271010,5054753,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iveresov,vagarwal,vagarwal,2021-07-20 21:19,2023-07-12 05:25,2023-10-01 09:57,2022-07-01 14:48,11,,,,,,,11.0.17-oracle,hotspot,,0,hs-comp-triaged,intermittent,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-18,sqebug,,,,,,,,,,,,"Test case : tools/jdeprscan/tests/jdk/jdeprscan/TestRelease.java
OS : Crash seen on Windows-x64 fastdebug build
Is it a Regression: Intermittent failure (can't say) 

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:/workspace/open/src/hotspot/share/runtime/compilationPolicy.cpp:332), pid=8620, tid=4588
#  assert(!m->was_never_executed()) failed: don't reset to 0 -- could be mistaken for never-executed
#
# JRE version: Java(TM) SE Runtime Environment 18.9 (11.0.13+2) (fastdebug build 11.0.13-ea+2-LTS-294)
# Java VM: Java HotSpot(TM) 64-Bit Server VM 18.9 (fastdebug 11.0.13-ea+2-LTS-294, compiled mode, compressed oops, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_gc_lock_malloc_malloclock04_TestDescription_java\scratch\0\hs_err_pid8620.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#",,,,,,,,,,,JDK-8311944,JDK-8290809,,,,,,,,,,,,,,,,,JDK-8271012,,,,,,,,,,,,,,"2021-07-20 21:27;vagarwal;hs_err_pid35080.log;https://bugs.openjdk.org/secure/attachment/95582/hs_err_pid35080.log","2021-07-20 21:18;vagarwal;test-support_jtreg_open_test_hotspot_jtreg_vmTestbase_gc_lock_malloc_malloclock04_TestDescription_java_vmTestbase_gc_lock_malloc_malloclock04_TestDescription_hs_err_pid8620.log;https://bugs.openjdk.org/secure/attachment/95581/test-support_jtreg_open_test_hotspot_jtreg_vmTestbase_gc_lock_malloc_malloclock04_TestDescription_java_vmTestbase_gc_lock_malloc_malloclock04_TestDescription_hs_err_pid8620.log",,,,,,,,,,,,,,,,,,,"0|i2tpur:",9223372036854775807,b01,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-21 00:42;tschatzl;Stack trace implies a compiler issue

V  [jvm.dll+0xce2b64]  VMError::report_and_die+0x64  (vmerror.cpp:1284)
V  [jvm.dll+0x50d89e]  report_vm_error+0x7e  (debug.cpp:248)
V  [jvm.dll+0x491d38]  NonTieredCompPolicy::reset_counter_for_invocation_event+0x138  (compilationpolicy.cpp:332)
V  [jvm.dll+0x4914db]  SimpleCompPolicy::method_invocation_event+0x7b  (compilationpolicy.cpp:527)
V  [jvm.dll+0x490170]  NonTieredCompPolicy::event+0x100  (compilationpolicy.cpp:475)
V  [jvm.dll+0x6c7320]  InterpreterRuntime::frequency_counter_overflow_inner+0x2d0  (interpreterruntime.cpp:1065)
V  [jvm.dll+0x6c6f03]  InterpreterRuntime::frequency_counter_overflow+0x23  (interpreterruntime.cpp:1018)

so reassigning;;;","2021-07-21 02:40;chagedorn;ILW = Assert due to invalid update of method invocation counter (should not affect product), intermittent and only seen on JDK 11u (code changed a lot with JDK-8251462 in JDK 17), no workaround = MMH = P3;;;","2021-07-21 02:43;chagedorn;Issue is known (JDK-8025220) and was reported several times before (dups of JDK-8025220). JDK-8251462 seems to have fixed this problem which is, however, not available in JDK 11u.

[~iveresov] can you take a look at it?;;;","2021-07-23 12:06;iveresov;I'm not sure what to do with this. I haven't been able to find a reason of these failures. It's also a benign assert in a non-default mode of operation. We can either keep ignoring this (since it's not a problem since 17), or we can remove this assert in 11u.;;;","2022-04-01 02:16;thartmann;I would say that we should simply disable that assert in JDK 11u.;;;","2022-04-01 02:30;chagedorn;I agree with that, given how rarely it occurs in 11u only and not affecting product.;;;","2022-07-18 06:12;goetz;Fix request [11u]

I implemented this according to the description.
No risk, only removin an assertion.
SAP nightly testing passed.;;;","2022-07-18 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1237
Date: 2022-07-18 13:11:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
appcds/*/MethodHandlesAsCollectorTest.java  tests time out because of excessive GC (CodeCache GC Threshold) in loom,JDK-8271008,5054751,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,lmesnik,lmesnik,2021-07-20 20:45,2022-04-03 22:41,2023-10-01 09:57,2022-02-22 05:45,11,17,19,repo-loom,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK-next,jdk18u-fix-yes,performance,,,,,,,,,,,,"Tests 
runtime/cds/appcds/dynamicArchive/methodHandles/MethodHandlesAsCollectorTest.java
runtime/cds/appcds/methodHandles/MethodHandlesAsCollectorTest.java",,,,,,,,,,,JDK-8284099,JDK-8283995,JDK-8284247,,,,,,,,,,,,,,,,JDK-8256327,,,,,,,,JDK-8015774,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tpub:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-20 20:46;lmesnik;Test works ten times longer. The gc log says:
[0.005s][info][gc] Using Serial
[0.118s][info][cds] trying to map /data1/lmesnik/ws/loom/open/build/linux-x86_64-server-fastdebug/images/jdk/lib/server/classes.jsa
[0.118s][info][cds] Opened archive /data1/lmesnik/ws/loom/open/build/linux-x86_64-server-fastdebug/images/jdk/lib/server/classes.jsa.
[0.118s][info][cds] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
[0.118s][info][cds] Core region alignment: 4096
[0.118s][info][cds] Reserved archive_space_rs [0x0000000800000000 - 0x0000000801000000] (16777216) bytes
[0.118s][info][cds] Reserved class_space_rs   [0x0000000801000000 - 0x0000000841000000] (1073741824) bytes
[0.118s][info][cds] Mapped static  region #0 at base 0x0000000800000000 top 0x00000008004d2000 (ReadWrite)
[0.118s][info][cds] Mapped static  region #1 at base 0x00000008004d2000 top 0x0000000800c99000 (ReadOnly)
[0.118s][info][cds] CDS heap data is being ignored. UseG1GC, UseCompressedOops and UseCompressedClassPointers are required.
[0.118s][info][cds] optimized module handling: enabled
[0.118s][info][cds] full module graph: disabled
class test.java.lang.invoke.MethodHandlesAsCollectorTest
     annotation: @org.junit.Test(timeout=0L, expected=org.junit.Test$None.class)
    invoking method: testAsCollector
[2.963s][info ][gc        ] GC(0) Pause Full (CodeCache GC Threshold) 77M->6M(317M) 210.994ms
[6.097s][info ][gc        ] GC(1) Pause Young (Allocation Failure) 93M->12M(317M) 102.272ms
[8.896s][info ][gc        ] GC(2) Pause Full (Metadata GC Threshold) 60M->13M(317M) 1250.338ms
[12.303s][info ][gc        ] GC(3) Pause Young (Allocation Failure) 101M->21M(317M) 138.592ms
[15.611s][info ][gc        ] GC(4) Pause Young (Allocation Failure) 109M->29M(317M) 269.567ms
[17.673s][info ][gc        ] GC(5) Pause Full (Metadata GC Threshold) 43M->28M(317M) 1297.886ms
[21.954s][info ][gc        ] GC(6) Pause Young (Allocation Failure) 116M->37M(317M) 140.353ms
[25.198s][info ][gc        ] GC(7) Pause Young (Allocation Failure) 124M->45M(317M) 263.376ms
[30.474s][info ][gc        ] GC(8) Pause Full (CodeCache GC Threshold) 66M->37M(317M) 4397.933ms
[31.292s][info ][gc        ] GC(9) Pause Full (CodeCache GC Threshold) 39M->37M(317M) 806.148ms
[32.103s][info ][gc        ] GC(10) Pause Full (CodeCache GC Threshold) 39M->37M(317M) 802.904ms
[32.923s][info ][gc        ] GC(11) Pause Full (CodeCache GC Threshold) 39M->37M(317M) 806.492ms
[33.790s][info ][gc        ] GC(12) Pause Full (CodeCache GC Threshold) 39M->37M(317M) 856.007ms
[34.568s][info ][gc        ] GC(13) Pause Full (CodeCache GC Threshold) 39M->37M(317M) 772.412ms
[35.383s][info ][gc        ] GC(14) Pause Full (CodeCache GC Threshold) 39M->37M(317M) 804.582ms
[36.178s][info ][gc        ] GC(15) Pause Full (CodeCache GC Threshold) 39M->37M(317M) 788.689ms
....;;;","2021-07-20 20:48;lmesnik;it is interesting that codecache is smaller and smaller .....
[338.068s][info ][gc        ] GC(423) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 191.468ms
[338.278s][info ][gc        ] GC(424) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 204.919ms
[338.476s][info ][gc        ] GC(425) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 192.277ms
[338.672s][info ][gc        ] GC(426) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 191.003ms
[338.871s][info ][gc        ] GC(427) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 192.947ms
[339.070s][info ][gc        ] GC(428) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 193.339ms
[339.269s][info ][gc        ] GC(429) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 192.665ms
[339.468s][info ][gc        ] GC(430) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 193.621ms
[339.668s][info ][gc        ] GC(431) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 194.164ms
[339.869s][info ][gc        ] GC(432) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 195.432ms
[340.069s][info ][gc        ] GC(433) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 194.919ms
[340.270s][info ][gc        ] GC(434) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 195.752ms
[340.473s][info ][gc        ] GC(435) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 196.762ms
[340.676s][info ][gc        ] GC(436) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 197.005ms
[340.879s][info ][gc        ] GC(437) Pause Full (CodeCache GC Threshold) 11M->10M(317M) 196.781ms
[341.082s][info ][gc        ] GC(438) Pause Full (CodeCache GC Threshold) 11M->10M(317M) 197.541ms
[341.291s][info ][gc        ] GC(439) Pause Full (CodeCache GC Threshold) 11M->10M(317M) 198.915ms
[341.498s][info ][gc        ] GC(440) Pause Full (CodeCache GC Threshold) 11M->10M(317M) 199.824ms
[341.702s][info ][gc        ] GC(441) Pause Full (CodeCache GC Threshold) 11M->10M(317M) 198.376ms
[341.907s][info ][gc        ] GC(442) Pause Full (CodeCache GC Threshold) 11M->10M(317M) 199.254ms
[342.112s][info ][gc        ] GC(443) Pause Full (CodeCache GC Threshold) 11M->10M(317M) 199.130ms
[342.319s][info ][gc        ] GC(444) Pause Full (CodeCache GC Threshold) 11M->10M(317M) 201.495ms
[342.687s][info ][gc        ] GC(445) Pause Full (CodeCache GC Threshold) 11M->10M(317M) 363.190ms
[342.880s][info ][gc        ] GC(446) Pause Full (CodeCache GC Threshold) 11M->10M(317M) 187.108ms
[343.073s][info ][gc        ] GC(447) Pause Full (CodeCache GC Threshold) 11M->10M(317M) 187.247ms
[343.279s][info ][gc        ] GC(448) Pause Full (CodeCache GC Threshold) 12M->9M(317M) 200.114ms
[343.472s][info ][gc        ] GC(449) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 186.963ms
[343.665s][info ][gc        ] GC(450) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 187.084ms
[343.861s][info ][gc        ] GC(451) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 188.256ms
[344.068s][info ][gc        ] GC(452) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 201.168ms
[344.264s][info ][gc        ] GC(453) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 188.932ms
[344.458s][info ][gc        ] GC(454) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 188.312ms
[344.652s][info ][gc        ] GC(455) Pause Full (CodeCache GC Threshold) 11M->9M(317M) 188.131ms
[344.906s][info ][gc        ] GC(456) Pause Full (CodeCache GC Threshold) 14M->10M(317M) 232.155ms
[345.138s][info ][gc        ] GC(457) Pause Full (CodeCache GC Threshold) 16M->11M(317M) 199.609ms
[345.389s][info ][gc        ] GC(458) Pause Full (CodeCache GC Threshold) 13M->11M(317M) 197.282ms
[345.415s][info ][cds       ] Regenerate MethodHandle Holder classes...done
[345.718s][info ][gc        ] GC(459) Pause Full (CodeCache GC Threshold) 13M->11M(317M) 298.332ms;;;","2021-07-21 01:56;eosterlund;What is shrinking is the Java heap, not the code cache. We can't unload nmethods that are on-stack. With virtual threads, said stacks can be in the heap. So we use a Java heap GC to find out what nmethods are reachable through loom continuations. This symptom seems to indicate that we are about to run out of code cache, and excessively trigger GCs, hoping to find more nmethods that we can sweep.;;;","2022-02-18 06:20;coleenp;The trigger for the sweeper calculates the reverse_free_ratio for the NonNMethod code heap repeatedly for this test, which is never cleaned.  The fall back for when heaps are filled are the other code heaps MethodProfiled, then MethodNonProfiled.  The aggressive sweeper trigger should really check the whole code heap is below 10% and not only check the NonNMethod code heap in this case.
Changing the code to check the overall code cache in CodeCache::reverse_free_ratio() fixes the loom slower performance (loom does a full GC for each sweeper activation).;;;","2022-02-18 12:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7514
Date: 2022-02-17 13:34:39 +0000;;;","2022-02-22 05:45;dukebot;Changeset: 022d8070
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-02-22 13:42:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/022d80707c346f4b82ac1eb53e77c634769631e9
;;;","2022-03-29 22:47;thartmann;Fix Request (JDK 18u)
Fixes a performance issue with the code cache sweeper. The fix is low risk and applies cleanly. Already tested and about to be backported to Oracle JDK 17u. Tier 1-3 testing is running for JDK 18u.;;;","2022-03-29 22:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/81
Date: 2022-03-30 05:46:43 +0000;;;","2022-03-30 05:36;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly except Copyright year update. (That was changed by the enhancement JDK-8268368 in 18.) Nightly tests have passed.;;;","2022-03-30 05:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/319
Date: 2022-03-30 12:35:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] G1BarrierSetC2::step_over_gc_barrier asserts with ""bad barrier shape""",JDK-8270995,5054740,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,epavlova,epavlova,2021-07-20 16:01,2021-07-27 01:03,2023-10-01 09:57,2021-07-27 01:03,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,"compiler/valhalla/inlinetypes/TestBasicFunctionality.java ran with following stress flags ""-XX:-TieredCompilation -XX:-ReduceInitialCardMarks -XX:-ReduceBulkZeroing -XX:-ReduceFieldZeroing -DVerifyIR=false"" crashes with

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/katya/work/JavaSE/Hotspot/ws/git/valhalla/open/src/hotspot/share/gc/g1/c2/g1BarrierSetC2.cpp:764), pid=4869, tid=4884
#  assert(call->in(0) == __null || call->in(0)->in(0) == __null || call->in(0)->in(0)->in(0) == __null || call->in(0)->in(0)->in(0)->in(0) == __null || call->in(0)->in(0)->in(0)->in(0)->in(0) == __null || c == call->in(0)->in(0)->in(0)->in(0)->in(0)) failed: bad barrier shape
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-lworld3ea+0-2021-07-19-2212264.katya...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-lworld3ea+0-2021-07-19-2212264.katya..., mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xc6a71c]  G1BarrierSetC2::step_over_gc_barrier(Node*) const+0x77c


I am able to reproduce this on my Linux without problems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271280,,,,,,"2021-07-20 16:04;epavlova;hs_err_bug8270995.log;https://bugs.openjdk.org/secure/attachment/95577/hs_err_bug8270995.log",,,,,,,,,,,,,,,,,,,,"0|i2tprv:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-22 07:17;thartmann;The G1BarrierSetC2::step_over_gc_barrier code gets confused by a MemBarCPUOrder, assuming it belongs to a GC barrier. However, it comes from a MemBarStoreStore added by InlineTypeBaseNode::buffer that is then transformed to a MemBarCPUOrder by Escape Analysis (ConnectionGraph::optimize_ideal_graph).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing forward declaration of ZeroFrame,JDK-8270993,5054736,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jwilhelm,iklam,iklam,2021-07-20 14:08,2021-08-03 14:47,2023-10-01 09:57,2021-07-20 17:18,17,18,,,,,,17,hotspot,,0,jdk17-fix-request,jdk17-fix-yes,noreg-build,regression,zero,,,,,,,,,,,,,"This can be reproduced with a version like

https://github.com/openjdk/jdk/commit/9cac94d581f240c10fe8fff2f803109a1ae30637

$ git diff
diff --git a/src/hotspot/share/code/codeBlob.hpp b/src/hotspot/share/code/codeBlob.hpp
index 61d33463387..78fdaa32629 100644
--- a/src/hotspot/share/code/codeBlob.hpp
+++ b/src/hotspot/share/code/codeBlob.hpp
@@ -27,6 +27,7 @@
 
 #include ""asm/codeBuffer.hpp""
 #include ""compiler/compilerDefinitions.hpp""
+#include ""runtime/javaFrameAnchor.hpp""
 #include ""runtime/frame.hpp""
 #include ""runtime/handles.hpp""
 #include ""utilities/align.hpp""
=============================================

In file included from /jdk2/ken/open/src/hotspot/share/runtime/javaFrameAnchor.hpp:82,
                 from /jdk2/ken/open/src/hotspot/share/code/codeBlob.hpp:30,
                 from /jdk2/ken/open/src/hotspot/share/code/codeCache.hpp:28,
                 from /jdk2/ken/open/src/hotspot/cpu/zero/assembler_zero.inline.hpp:31,
                 from /jdk2/ken/open/src/hotspot/share/asm/assembler.inline.hpp:30,
                 from /jdk2/ken/open/src/hotspot/share/compiler/abstractDisassembler.cpp:30:
/jdk2/ken/open/src/hotspot/cpu/zero/javaFrameAnchor_zero.hpp:30:3: error: 'ZeroFrame' does not name a type
   30 |   ZeroFrame* volatile _last_Java_fp;
      |   ^~~~~~~~~
",,,,,,,,,,,JDK-8271756,JDK-8271001,JDK-8271632,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tpqz:",9223372036854775807,b32,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-20 14:09;iklam;This blocks the merging of JDK-8269240 from JDK 17 into JDK 18.;;;","2021-07-20 14:16;iklam;Proposed fix:
diff --git a/src/hotspot/share/runtime/javaFrameAnchor.hpp b/src/hotspot/share/runtime/javaFrameAnchor.hpp
index d73372d092a..893054d3623 100644
--- a/src/hotspot/share/runtime/javaFrameAnchor.hpp
+++ b/src/hotspot/share/runtime/javaFrameAnchor.hpp
@@ -34,6 +34,7 @@
 //
 class JavaThread;
 class MacroAssembler;
+class ZeroFrame;
 
 class JavaFrameAnchor {
;;;","2021-07-20 17:06;jwilhelm;Fix request
This is a build failure on a platform that built fine before JDK-8269240 (it's a regression). The fix is trivial and poses minimal risk to the release.;;;","2021-07-20 17:14;kvn;Fix request for JDK 17 is approved.;;;","2021-07-20 17:18;roboduke;Changeset: 61359c46
Author:    Jesper Wilhelmsson <jwilhelm@openjdk.org>
Date:      2021-07-21 00:17:31 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/61359c46a74b03b94738744d309334a5af162f08
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1 Full GC always performs heap verification after JDK-8269295,JDK-8270991,5054734,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,ecaspole,ecaspole,2021-07-20 14:04,2022-02-10 14:26,2023-10-01 09:57,2021-07-21 08:42,18,,,,,,,18,hotspot,,0,gc-g1,gc-pending-review,perf-regression,,,,,,,,,,,,,,,"I get the impression that G1 veriffication got turned on by default?

Before the change:
[1.418s][info][gc,task        ] GC(7) Using 1 workers of 48 for full compaction
[1.418s][info][gc,start       ] GC(7) Pause Full (System.gc())
[1.418s][info][gc,phases,start] GC(7) Phase 1: Mark live objects
[1.424s][info][gc,phases      ] GC(7) Phase 1: Mark live objects 5.746ms
[1.424s][info][gc,phases,start] GC(7) Phase 2: Prepare for compaction
[1.425s][info][gc,phases      ] GC(7) Phase 2: Prepare for compaction 0.720ms
[1.425s][info][gc,phases,start] GC(7) Phase 3: Adjust pointers
[1.428s][info][gc,phases      ] GC(7) Phase 3: Adjust pointers 3.534ms
[1.428s][info][gc,phases,start] GC(7) Phase 4: Compact heap
[1.429s][info][gc,phases      ] GC(7) Phase 4: Compact heap 0.536ms
[1.430s][info][gc             ] GC(7) Pause Full (System.gc()) 3M->3M(160M) 11.715ms
[1.430s][info][gc,heap        ] GC(7) Eden regions: 1->0(1)
[1.430s][info][gc,heap        ] GC(7) Survivor regions: 0->0(0)
[1.430s][info][gc,heap        ] GC(7) Old regions: 1->1
[1.430s][info][gc,heap        ] GC(7) Archive regions: 2->2
[1.430s][info][gc,heap        ] GC(7) Humongous regions: 0->0
[1.430s][info][gc,metaspace   ] GC(7) Metaspace: 14041K(14272K)->14041K(14272K) NonClass: 12686K(12800K)->12686K(12800K) Class: 1355K(1472K)->1355K(1472K)
[1.430s][info][gc,cpu         ] GC(7) User=0.03s Sys=0.00s Real=0.01s

After the change:

[1.968s][info][gc,task        ] GC(7) Using 1 workers of 48 for full compaction
[1.968s][info][gc,start       ] GC(7) Pause Full (System.gc())
[1.968s][info][gc,verify,start] GC(7) Verifying Before GC
[2.006s][info][gc,verify      ] GC(7) Verifying Before GC 38.124ms
[2.006s][info][gc,phases,start] GC(7) Phase 1: Mark live objects
[2.012s][info][gc,phases      ] GC(7) Phase 1: Mark live objects 5.912ms
[2.012s][info][gc,phases,start] GC(7) Phase 2: Prepare for compaction
[2.013s][info][gc,phases      ] GC(7) Phase 2: Prepare for compaction 0.723ms
[2.013s][info][gc,phases,start] GC(7) Phase 3: Adjust pointers
[2.016s][info][gc,phases      ] GC(7) Phase 3: Adjust pointers 3.399ms
[2.016s][info][gc,phases,start] GC(7) Phase 4: Compact heap
[2.017s][info][gc,phases      ] GC(7) Phase 4: Compact heap 0.549ms
[2.018s][info][gc,verify,start] GC(7) Verifying After GC
[2.057s][info][gc,verify      ] GC(7) Verifying After GC 38.438ms
[2.057s][info][gc             ] GC(7) Pause Full (System.gc()) 3M->3M(160M) 88.347ms
[2.057s][info][gc,heap        ] GC(7) Eden regions: 1->0(1)
[2.057s][info][gc,heap        ] GC(7) Survivor regions: 0->0(0)
[2.057s][info][gc,heap        ] GC(7) Old regions: 1->1
[2.057s][info][gc,heap        ] GC(7) Archive regions: 2->2
[2.057s][info][gc,heap        ] GC(7) Humongous regions: 0->0
[2.057s][info][gc,metaspace   ] GC(7) Metaspace: 14060K(14336K)->14060K(14336K) NonClass: 12706K(12864K)->12706K(12864K) Class: 1354K(1472K)->1354K(1472K)
[2.057s][info][gc,cpu         ] GC(7) User=0.10s Sys=0.00s Real=0.09s

We run this test with -Xlog:gc*
Is it the intent that verification runs at INFO level or using gc* is caveat emptor? It could be a surprise to add this relatively long phase.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271082,,,JDK-8269295,,,,,,,,,,,,,,,,,,,,,,,,b06,,,,,,,"0|i2tpqj:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-07-21 00:32;tschatzl;It's a bug, need to check if it's just the message or actually does the verification. Probably the latter given the issue description.;;;","2021-07-21 01:02;tschatzl;Missing early exit from verification code if not enabled for full gc.;;;","2021-07-21 08:42;roboduke;Changeset: 57611b30
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-07-21 15:41:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/57611b30219191160f7faccb811b41a31c25c0b8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update boot JDK to 16.0.2,JDK-8270959,5054702,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-07-20 11:11,2021-07-24 06:15,2023-10-01 09:57,2021-07-23 04:41,jfx17,,,,,,,jfx17,javafx,,0,noreg-build,sn_98,,,,,,,,,,,,,,,,"JDK 16.0.2 has released, superseding JDK 16.0.1. We should switch to using 15.0.2 as our boot JDK.

Note that until JDK-8255712 is implemented, we need to update both `build.properties` and `.github/workflows/submit.yml`.
",,,,,,,,,,,JDK-8271250,,,,,,,,,,,,,,,,,,,,,JDK-8263761,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tpjf:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-07-23 04:41;roboduke;Changeset: d5401095
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-07-23 11:40:13 +0000
URL:       https://git.openjdk.java.net/jfx/commit/d5401095f7655f281e9cb5006caf95bc6d0695d5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
X509CertImpl.getFingerprint should not return the empty String,JDK-8270946,5054684,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,mullan,mullan,mullan,2021-07-20 06:34,2022-04-08 03:44,2023-10-01 09:57,2021-07-27 06:50,11,17,18,,,,,18,security-libs,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,"X509CertImpl.getFingerprint should return null and not """" if there is an issue generating a fingerprint, and should not treat null as a valid fingerprint. Also, as a performance improvement, it should call X509CertImpl.getEncodedInternal(Certificate) which avoids cloning the encoded bytes if the Certificate is an instance of X509CertImpl.",,,,,,,,,,,JDK-8275700,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tpff:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2021-07-27 06:50;roboduke;Changeset: fc80a6b4
Author:    Sean Mullan <mullan@openjdk.org>
Date:      2021-07-27 13:49:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fc80a6b49364594fafa0e2efc769d2f6234cfa22
;;;","2021-10-19 10:29;abakhtin;Fix request (17u):
Request to include in 17u, applies cleanly, all relevant tests passed. ;;;","2022-04-08 03:44;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
replay dump using CICrashAt does not include inlining data,JDK-8270925,5054647,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,dlong,dlong,2021-07-19 20:29,2021-09-16 17:57,2023-10-01 09:57,2021-07-28 11:51,11-pool,17,18,8-pool,,,,18,hotspot,,0,ci-replay,hs-comp-triaged,oracle-triage-11,oracle-triage-18,,,,,,,,,,,,,,The check for CICrashAt happens too late.  The inlining data from the compilation context has already been released.,,,,,,,,,,,,,,,,,,,,,,,JDK-8254106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tp77:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-19 20:31;dlong;ILW = LHH = P4;;;","2021-07-28 11:50;roboduke;Changeset: 034788a0
Author:    Dean Long <dlong@openjdk.org>
Date:      2021-07-28 18:50:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/034788a02cbe1f80fc1581ec307a3d54bef380b4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update java.lang.annotation.Target for changes in JLS 9.6.4.1,JDK-8270916,5054637,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2021-07-19 13:04,2021-08-03 15:17,2023-10-01 09:57,2021-07-22 12:51,17,,,,,,,17,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"Given changes in JLS 9.6.4.1 (JDK-8231435 in Java SE 14, 
JDK-8261610 in Java SE 17), the statements about annotation applicability made in java.lang.annotation.Target need to be updated to match.",,,,,,,,,,,JDK-8271787,JDK-8271180,JDK-8271648,,,,,,,,,,,JDK-8270917,,,,,,,,JDK-8261610,JDK-8261181,JDK-8231435,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tp4z:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2021-07-22 12:51;roboduke;Changeset: ecc37b06
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2021-07-22 19:50:23 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/ecc37b06f283c18ab4aa2b23562843bca14da85d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GIFImageReader disregards ignoreMetadata flag which causes memory exhaustion,JDK-8270915,5054203,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,webbuggrp,webbuggrp,2021-07-15 02:39,2023-05-19 08:08,2023-10-01 09:57,2022-10-05 22:45,11,16,17,8,,,,20,client-libs,,0,additional-information-received,amazon-interest,dcspn,noreg-hard,reproducer-yes,sn_128,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Tested on Linux Ubuntu 20.04.2.0, MacBook 2019, 
JDK version: 1.8.0_291, 11.0.11

A DESCRIPTION OF THE PROBLEM :
The problem was raised by our customers that particularly crafted GIF files processed by Jira instance cause high CPU usage and ""hang"" Jira instance. During our investigation, we found that problem is caused by GIF file created in Adobe Photoshop 2019 (I can provide a problematic file). Due to a bug in Adobe Photoshop (https://prepression.blogspot.com/2017/06/metadata-bloat-photoshopdocumentancestors.html), the file contains an extensive amount of metadata.
Our software uses javax.imageio library to read and manipulate GIF files which uses `com.sun.imageio.plugins.gif.GIFImageReader` class for operations on GIF files. 
This class tries to read all metadata from GIF files and in the process, it allocates big byte arrays and copies data between them multiple times. It causes high CPU usage and even hangs JVM application. We crafted a small program to confirm that problem is indeed in JVM implementation and not in our software. Java code included.
GIFImageReader ignores the flag ""ignoreMetadata"" of `javax.imageio.ImageReader` so there is no way to avoid problems with malicious metadata.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create or download malicious GIF file
2. Run a java program that opens the file and reads its metadata
3. Observe results

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The program successfully reads metadata (or don't read metadata at all) and don't cause high CPU usage
ACTUAL -
The program hangs and causes high CPU usage

---------- BEGIN SOURCE ----------
import javax.imageio.ImageIO;
import javax.imageio.ImageReadParam;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.time.LocalDateTime;

class Scratch {
    public static void main(String[] args) throws IOException {
        String workingFolder = ""<directory>"";
        String imageFilename = ""btn_offer_wall_animation.gif"";

        ImageInputStream imageInputStream = ImageIO.createImageInputStream(
                new BufferedInputStream(
                        new FileInputStream(
                                new File(workingFolder + imageFilename))));

        ImageReader reader = ImageIO.getImageReaders(imageInputStream).next();

        reader.setInput(imageInputStream, false, true);
        final ImageReadParam param = reader.getDefaultReadParam();
        param.setSourceSubsampling(1, 1, 0, 0);

        System.out.println(LocalDateTime.now().toString());
        final BufferedImage scaledImage = reader.read(0, param);
        File output = new File(workingFolder + ""scaled.gif"");
        if(output.exists()){
            output.delete();
        }
        ImageIO.write(scaledImage, ""gif"", output);
        System.out.println(LocalDateTime.now().toString());
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
1. Remove metadata from the file using an external tool/library before processing the file
2. Craft a modified version of GIFImageReader that instead of reading application metadata, skips it. Then use this modified version instead of original GIFImageReader


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-26 06:02;pnarayanaswa;Scratch.java;https://bugs.openjdk.org/secure/attachment/95719/Scratch.java","2021-07-26 06:04;pnarayanaswa;btn_offer_wall_animation.zip;https://bugs.openjdk.org/secure/attachment/95720/btn_offer_wall_animation.zip",,,,,generic,,,,,,,,,,generic,,,,"0|i2tmgj:",9223372036854775807,b19,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@377c353d,,,,,,,,,"2021-07-19 12:02;pnarayanaswa;Mail to Submitter:
==============
Please share the (Error) GIF file.;;;","2021-07-26 06:04;pnarayanaswa;Checked with attached testcase in Ubuntu 20.04, Issue is reproducible,
Test Result:
=========
8: Fail
8u301: Fail
11: Fail
11.0.12: Fail
16: Fail
17ea31: Fail;;;","2021-08-03 04:32;jdv;Looks like we are not honouring ignoreMetadata flag in GIFImageReader.
In GIFImageReader.readMetadata() it is just reading lot of metadata and not hitting Image descriptor block.

If i make change to use ignoreMetadata flag for extension blocks i am getting below exception :
Exception in thread ""main"" javax.imageio.IIOException: Unexpected block type 33!
	at java.desktop/com.sun.imageio.plugins.gif.GIFImageReader.readMetadata(GIFImageReader.java:801)
	at java.desktop/com.sun.imageio.plugins.gif.GIFImageReader.read(GIFImageReader.java:879)
	at Scratch.main(Scratch.java:29)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.intellij.rt.execution.application.AppMainV2.main(AppMainV2.java:131)

Needs more analysis.;;;","2022-09-29 03:17;jdv;We are not checking ignoreMetadata flag itself and reading all extensions in GIFImageReader.
Looks like we can ignore all blocks except ""Image Descriptor"" and ""Graphics Control Extension"" block. But in some extension blocks upfront length is not available so we need to check ignoreMetadata flag at multiple levels and skip the Metadata.;;;","2022-10-03 07:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10536
Date: 2022-10-03 13:59:25 +0000;;;","2022-10-05 22:45;dukebot;Changeset: 8c15f77a
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2022-10-06 05:43:43 +0000
URL:       https://git.openjdk.org/jdk/commit/8c15f77abac0beb7f39a90fdfc5efb245b09ca32
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestParallelRefProc fails on single core machines,JDK-8270908,5054626,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cgo,cgo,cgo,2021-07-19 06:05,2022-10-25 21:32,2023-10-01 09:57,2021-07-28 07:50,17,18,,,,,,17,hotspot,,0,redhat-interest,testbug,ursqe-triaged,,,,,,,,,,,,,,,"The test case TestParallelRefProc fails on single core machines, since it expects that ParallelRefProcEnabled is always true if the ParallelGC is used:

test result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: [-XX:+UseParallelGC] didn't set ParallelRefProcEnabled to true as expected

According to the code, ParallelRefProcEnabled is only enabled if there are more than 1 ParallelGCThreads. Ergonomics never configure more parallel GC threads than there are CPU cores.",,,,,,,,,,,JDK-8271668,JDK-8271436,JDK-8271804,,,,,,,,,,,,,,,,,,,,,,,,JDK-8204686,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tp2j:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-07-28 07:50;roboduke;Changeset: 6e1da644
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Kim Barrett <kbarrett@openjdk.org>
Date:      2021-07-28 14:49:02 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/6e1da6440b898d8a10b3db56707a75f32a489149
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun.net.httpserver.HttpConnection: Improve toString,JDK-8270903,5054618,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2021-07-19 04:15,2021-08-11 21:33,2023-10-01 09:57,2021-08-05 02:42,,,,,,,,18,core-libs,,0,noreg-trivial,spotbugs,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,INTJDK-7629620,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tp0r:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-08-05 02:42;roboduke;Changeset: 685fc3c6
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-08-05 09:42:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/685fc3c677cd0e71ef4443214ae14c7eed355140
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
update panama_jextract.md and panama_jextract.html files,JDK-8270898,5054613,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sundar,sundar,sundar,2021-07-19 03:38,2021-07-19 05:34,2023-10-01 09:57,2021-07-19 05:34,repo-panama,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,update panama_jextract.md and panama_jextract.html files,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tozn:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] C2 compilation fails with ""Meet Not Symmetric""",JDK-8270896,5054612,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,thartmann,thartmann,2021-07-19 03:02,2021-07-19 05:51,2023-10-01 09:57,2021-07-19 05:51,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,"compiler/valhalla/inlinetypes/TestIntrinsics.java spuriously fails with:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (.../workspace/open/src/hotspot/share/opto/type.cpp:925), pid=20712, tid=20739
#  fatal error: meet not symmetric

=== Meet Not Symmetric ===
t   =                   compiler/valhalla/inlinetypes/MyValue1:TopPTR:exact *,iid=top (inline_depth=InlineDepthTop)
this=                   java/lang/Object:AnyNull * (flatten array),iid=top (inline_depth=InlineDepthTop)
mt=(t meet this)=       compiler/valhalla/inlinetypes/MyValue1:AnyNull:exact *,iid=top (inline_depth=InlineDepthTop)
t_dual=                 compiler/valhalla/inlinetypes/MyValue1:exact *
this_dual=              java/lang/Object:NotNull * (flatten array)
mt_dual=                compiler/valhalla/inlinetypes/MyValue1:NotNull:exact *
mt_dual meet t_dual=    compiler/valhalla/inlinetypes/MyValue1:exact *
mt_dual meet this_dual= java/lang/Object:NotNull *",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tozf:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IndexOutOfBoundsException while reading large TIFF file,JDK-8270893,5054606,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jdv,sgehwolf,sgehwolf,2021-07-19 02:31,2022-01-20 05:45,2023-10-01 09:57,2021-08-04 02:18,11.0.8,16,,,,,,18,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,sn_98,sn_99,,,,,,,,,,"The standard TIFF plugin for ""javax.imageio"" throws an exception on a large CMYK tiff file. Reproducer program and image are attached.

With JDK 11.0.7:

$ java --version
openjdk 11.0.7 2020-04-14
OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.7+10)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.7+10, mixed mode)
$ java ./testImageIO.java
#### IMAGIO: DEBUGGING #######
1  Standard GIF image reader
2  Standard BMP Image Reader
3  Standard WBMP Image Reader
4  Standard PNG image reader
5  Standard JPEG Image Reader
6  Standard TIFF image reader
#### END DEBUG: IMAGIO #######
Read: SUCCESS

With JDK 11.0.8+:

$ java -version
openjdk version ""11.0.8"" 2020-07-14
OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.8+10)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.8+10, mixed mode)
[testimageio@b93e34df603d] 02:12:27 ~/testImageIO [] $
java ./testImageIO.java
#### IMAGIO: DEBUGGING #######
1  Standard TIFF image reader
2  Standard PNG image reader
3  Standard GIF image reader
4  Standard BMP Image Reader
5  Standard WBMP Image Reader
6  Standard JPEG Image Reader
#### END DEBUG: IMAGIO #######
Read: FAILED
java.lang.IndexOutOfBoundsException: off < 0 || len < 0 || off + len > b.length!
        at java.desktop/javax.imageio.stream.ImageInputStreamImpl.readFully(ImageInputStreamImpl.java:346)
        at java.desktop/com.sun.imageio.plugins.tiff.TIFFIFD.readFieldValue(TIFFIFD.java:326)
        at java.desktop/com.sun.imageio.plugins.tiff.TIFFIFD.initialize(TIFFIFD.java:1088)
        at java.desktop/com.sun.imageio.plugins.tiff.TIFFImageMetadata.initializeFromStream(TIFFImageMetadata.java:88)
        at java.desktop/com.sun.imageio.plugins.tiff.TIFFImageReader.readMetadata(TIFFImageReader.java:319)
        at java.desktop/com.sun.imageio.plugins.tiff.TIFFImageReader.seekToImage(TIFFImageReader.java:291)
        at java.desktop/com.sun.imageio.plugins.tiff.TIFFImageReader.prepareRead(TIFFImageReader.java:964)
        at java.desktop/com.sun.imageio.plugins.tiff.TIFFImageReader.read(TIFFImageReader.java:1140)
        at java.desktop/javax.imageio.ImageIO.read(ImageIO.java:1468)
        at java.desktop/javax.imageio.ImageIO.read(ImageIO.java:1315)
        at testImageIO.main(testImageIO.java:23)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:404)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:179)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:119)",,,,,,,,,,,JDK-8271856,JDK-8276114,JDK-8271885,JDK-8271857,JDK-8276115,,,,,,,,,,,,JDK-8271281,,,,,,,,,,,,,,,,"2021-07-19 02:30;sgehwolf;cmyk_image_alphaChannel.tiff;https://bugs.openjdk.org/secure/attachment/95549/cmyk_image_alphaChannel.tiff","2021-07-19 02:30;sgehwolf;testImageIO.java;https://bugs.openjdk.org/secure/attachment/95550/testImageIO.java",,,,,generic,,,,,,,,,,generic,,,,"0|i2toy3:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@377c353d,,,,,,,,,"2021-07-19 02:31;sgehwolf;Originally reported here:
https://github.com/adoptium/adoptium-support/issues/325;;;","2021-07-19 02:36;sgehwolf;The affected code got introduced with the July 2020 CPU update:
https://github.com/openjdk/jdk11u-dev/commit/562ce7281481c109ed5204615554bd6117790882;;;","2021-07-19 09:30;jdv;We are passing offset count of source stream which will be used for destination in readFully() and it is causing IOOBE. Stream offset is maintained by individual stream implementations under streamPosition, there is no need to pass any offset in this case.;;;","2021-08-04 02:18;roboduke;Changeset: efcdcc7f
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2021-08-04 09:16:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/efcdcc7fb792c77aef1da69b1fcc652b401115f7
;;;","2021-08-04 08:29;zgu;Fix Request (11u)

A clean backport for parity with Oracle 11.0.14. New test passed with patch;;;","2021-10-28 07:39;yan;Fix request (15u, 13u)

A clean backport fixing a sensitive plugin. Plugin tests pass, July 2020 fix works well.;;;","2022-01-19 17:39;roboduke;Changeset: a93833d8
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2021-08-04 11:01:55 +0000
URL:       https://git.openjdk.java.net/jdk17u/commit/a93833d88f85eb693077ac3d4fdfdf67fc1e572c
;;;","2022-01-20 05:45;roboduke;Changeset: a93833d8
Author:    Jayathirth D V <jdv@openjdk.org>
Date:      2021-08-04 11:01:55 +0000
URL:       https://git.openjdk.java.net/jdk17u-dev/commit/a93833d88f85eb693077ac3d4fdfdf67fc1e572c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash in PhaseIdealLoop::verify_strip_mined_scheduling,JDK-8270886,5054597,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,thartmann,thartmann,2021-07-18 23:50,2022-05-30 23:47,2023-10-01 09:57,2021-07-29 00:34,11,16,17,18,,,,18,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,redhat-interest,tencent-interest,,"Several fuzzer generated tests trigger crashes/asserts because the OuterStripMinedLoopEnd main_head->outer_loop()->outer_loop_tail() only has an IfTrue projection.

For example, with attached SDD87.java we fail because sfpt = head->as_Loop()->outer_safepoint() is
NULL, because loop->_head->outer_loop_tail() only has an IfTrue projection:

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fdf1d8794ec, pid=9384, tid=9397
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-internal+0-2021-07-15-1125012.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-internal+0-2021-07-15-1125012.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12bb4ec]  Node::in(unsigned int) const [clone .constprop.1]+0xc
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/tobias/Downloads/32703210/core.9384)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: SDD87

Host: prometheus, Intel(R) Core(TM) i7-9850H CPU @ 2.60GHz, 12 cores, 31G, Ubuntu 20.04.2 LTS
Time: Mon Jul 19 08:47:12 2021 CEST elapsed time: 0.285794 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007fdf182ed9e0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=9397, stack(0x00007fdee5739000,0x00007fdee583a000)]


Current CompileTask:
C2:    285  283   !   4       SDD87::mainTest (845 bytes)

Stack: [0x00007fdee5739000,0x00007fdee583a000],  sp=0x00007fdee58341a0,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12bb4ec]  Node::in(unsigned int) const [clone .constprop.1]+0xc
V  [libjvm.so+0x12cfbc3]  PhaseIdealLoop::verify_strip_mined_scheduling(Node*, Node*)+0x93
V  [libjvm.so+0x12dd0f2]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x122
V  [libjvm.so+0x12dd77a]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0xba
V  [libjvm.so+0x12de0e7]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x507
V  [libjvm.so+0x9fb46c]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x28c
V  [libjvm.so+0x9f7d5f]  Compile::Optimize()+0x127f
V  [libjvm.so+0x9f9a24]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1564
V  [libjvm.so+0x819aa6]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa0a4e9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xef9
V  [libjvm.so+0xa0b218]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x186728c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x186da30]  Thread::call_run()+0x100
V  [libjvm.so+0x1550bf4]  thread_native_entry(Thread*)+0x104

These issues were reported by John Jiang (johnsjiang@tencent.com)",,,,,,,,,,,JDK-8287543,JDK-8274510,JDK-8287523,JDK-8274886,JDK-8274486,,,,,,,,,,,,,,,,,,,,,,JDK-8271340,JDK-8186027,JDK-8271341,,,,"2021-07-18 23:51;thartmann;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95537/FuzzerUtils.java","2021-07-18 23:53;thartmann;SDD56.java;https://bugs.openjdk.org/secure/attachment/95539/SDD56.java","2021-07-18 23:59;thartmann;SDD62.java;https://bugs.openjdk.org/secure/attachment/95540/SDD62.java","2021-07-18 23:51;thartmann;SDD87.java;https://bugs.openjdk.org/secure/attachment/95538/SDD87.java","2021-07-19 00:01;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/95542/Test.java",,,,,,,,,,,,,,,,"0|i2tow3:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-18 23:54;thartmann;SDD56.java fails with SIGSEGV in PhaseIdealLoop::clone_outer_loop because stack.node() is NULL because sfpt = cl->outer_safepoint() is NULL:

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fad1c2432bb, pid=9927, tid=9945
#
# JRE version: Java(TM) SE Runtime Environment (18.0) (fastdebug build 18-internal+0-2021-07-15-1125012.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-internal+0-2021-07-15-1125012.tobias..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12e32bb]  PhaseIdealLoop::clone_outer_loop(LoopNode*, PhaseIdealLoop::CloneLoopMode, IdealLoopTree*, IdealLoopTree*, int, Node_List&, Node_List&) [clone .part.0]+0x31b

Current CompileTask:
C2:    272  282   !   4       SDD56::mainTest (273 bytes)

Stack: [0x00007facb7cfd000,0x00007facb7dfe000],  sp=0x00007facb7df7da0,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12e32bb]  PhaseIdealLoop::clone_outer_loop(LoopNode*, PhaseIdealLoop::CloneLoopMode, IdealLoopTree*, IdealLoopTree*, int, Node_List&, Node_List&) [clone .part.0]+0x31b
V  [libjvm.so+0x12eebd8]  PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&, int, PhaseIdealLoop::CloneLoopMode, Node*)+0x4e8
V  [libjvm.so+0x12a0fe2]  PhaseIdealLoop::do_peeling(IdealLoopTree*, Node_List&)+0x102
V  [libjvm.so+0x12acd3e]  PhaseIdealLoop::do_maximally_unroll(IdealLoopTree*, Node_List&)+0xbe
V  [libjvm.so+0x12b1f80]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&) [clone .part.0]+0x460
V  [libjvm.so+0x12b259b]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x13b
V  [libjvm.so+0x12b2495]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x35
V  [libjvm.so+0x12de938]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0xd58
V  [libjvm.so+0x9fb46c]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x28c
V  [libjvm.so+0x9f7f55]  Compile::Optimize()+0x1475
V  [libjvm.so+0x9f9a24]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1564
V  [libjvm.so+0x819aa6]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa0a4e9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xef9
V  [libjvm.so+0xa0b218]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x186728c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x186da30]  Thread::call_run()+0x100
V  [libjvm.so+0x1550bf4]  thread_native_entry(Thread*)+0x104

This reproduces with JDK 11u as well.;;;","2021-07-19 00:00;thartmann;SDD62.java fails with as assert because l->outer_loop_end is NULL because l->outer_loop()->outer_loop_tail() only has an IfTrue projection:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S78974/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/37c71054-bd06-4323-a05c-bfac0e7342c9/runs/fc41a2a1-240b-4634-8179-0bbf19fca6ba/workspace/open/src/hotspot/share/opto/loopTransform.cpp:80), pid=10424, tid=10436
#  assert(outer_loop_end != __null) failed: missing piece of strip mined loop

Current CompileTask:
C2:    137   75   !   4       SDD62::mainTest (202 bytes)

Stack: [0x00007f09f583a000,0x00007f09f593b000],  sp=0x00007f09f5934340,  free space=1000k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x18bb644]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x194
V  [libjvm.so+0x18bc6af]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x2f
V  [libjvm.so+0xb00900]  report_vm_error(char const*, int, char const*, char const*, ...)+0x100
V  [libjvm.so+0x12860b1]  IdealLoopTree::record_for_igvn()+0x6b1
V  [libjvm.so+0x128ecef]  PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&, bool)+0x81f
V  [libjvm.so+0x1295051]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x581
V  [libjvm.so+0x129530a]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x24a
V  [libjvm.so+0x129523c]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x17c
V  [libjvm.so+0x12bdaa5]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0xfa5
V  [libjvm.so+0xa2753a]  Compile::optimize_loops(int&, PhaseIterGVN&, LoopOptsMode) [clone .part.435]+0x2da
V  [libjvm.so+0xa2ae20]  Compile::Optimize()+0xcb0
V  [libjvm.so+0xa2bfd7]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0xf87
V  [libjvm.so+0x82bc0b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0xfb
V  [libjvm.so+0xa394b2]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x342
V  [libjvm.so+0xa3a6e8]  CompileBroker::compiler_thread_loop()+0x568
V  [libjvm.so+0x17f8bdb]  JavaThread::thread_main_inner()+0x20b
V  [libjvm.so+0x17f452a]  Thread::call_run()+0x19a
V  [libjvm.so+0x1502ee6]  thread_native_entry(Thread*)+0x106;;;","2021-07-19 00:02;thartmann;I've attached a simplified Test.java that fails with:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk/open/src/hotspot/share/opto/multnode.cpp:49), pid=10566, tid=10579
#  assert((Opcode() != Op_If && Opcode() != Op_RangeCheck) || outcnt() == 2) failed: bad if #1

Current CompileTask:
C2:    322  353 %     4       Test::test @ 12 (59 bytes)

Stack: [0x00007ff3b6334000,0x00007ff3b6435000],  sp=0x00007ff3b642f160,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14a8342]  MultiNode::proj_out_or_null(unsigned int) const+0x172
V  [libjvm.so+0x14a865e]  MultiNode::proj_out(unsigned int) const+0xe
V  [libjvm.so+0x12d7aab]  PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&, BasicType)+0xb7b
V  [libjvm.so+0x12d937f]  IdealLoopTree::counted_loop(PhaseIdealLoop*)+0x10f
V  [libjvm.so+0x12d9304]  IdealLoopTree::counted_loop(PhaseIdealLoop*)+0x94
V  [libjvm.so+0x12de5aa]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x9ca
V  [libjvm.so+0x9fb46c]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x28c
V  [libjvm.so+0x9f6fd6]  Compile::Optimize()+0x4f6
V  [libjvm.so+0x9f9a24]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1564
V  [libjvm.so+0x819aa6]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa0a4e9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xef9
V  [libjvm.so+0xa0b218]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x186728c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x186da30]  Thread::call_run()+0x100
V  [libjvm.so+0x1550bf4]  thread_native_entry(Thread*)+0x104;;;","2021-07-19 00:04;thartmann;ILW = Asserts/crashes in C2, reproducible with JavaFuzzer generated tests containing infinite loops, disable loop strip mining = HLM = P3;;;","2021-07-19 00:05;thartmann;Roland, could you please have a look?;;;","2021-07-21 23:16;thartmann;Running test/hotspot/jtreg/compiler/c2/Test7179138_1.java with ""-XX:-ReduceInitialCardMarks -XX:-ReduceBulkZeroing -XX:-ReduceFieldZeroing -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -XX:RepeatCompilation=100"" (might need multiple runs to reproduce) also triggers the ""bad if #1"" assert:

#  Internal Error (/oracle/jdk/open/src/hotspot/share/opto/multnode.cpp:49), pid=629891, tid=629907
#  assert((Opcode() != Op_If && Opcode() != Op_RangeCheck) || outcnt() == 2) failed: bad if #1;;;","2021-07-27 08:04;roland;I couldn't reproduce SDD62.java or Test.java;;;","2021-07-29 00:34;roboduke;Changeset: 6afcf5f5
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-07-29 07:34:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6afcf5f5a243be10e2ec61229819c298ccce3267
;;;","2021-09-28 00:30;thartmann;Fix request (17u):
The bug leads to a crash in C2. The fix is low risk and has been tested in the JDK 18 for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;","2021-10-06 03:06;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly.;;;","2022-05-30 06:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/214
Date: 2022-05-30 12:57:13 +0000;;;","2022-05-30 06:29;yan;Fix request (15u, 13u):

I'd like to backport this fix to 15u, 13u for parity with major releases. Clean backport.;;;","2022-05-30 23:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/354
Date: 2022-05-31 06:33:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,
JFrame paint artifacts when dragged from standard monitor to HiDPI monitor,JDK-8270874,5052407,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,webbuggrp,webbuggrp,2021-06-22 10:58,2022-06-28 00:24,2023-10-01 09:57,2021-11-18 10:27,16,17,,,,,,18,client-libs,,0,11-bp,11bpr-critical-approved,17-bp,amazon-interest,dcspks,hidpi,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,regression,regression_8211999,reproducer-yes,webbug,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10 with two monitors set to extend, one set at 100% display scale, the second at 225% scale.  Happens in Java 16 and Java 17, does not happen in Java 8.

A DESCRIPTION OF THE PROBLEM :
When a JFrame is dragged from a standard dpi monitor (display scale set to 100%) to a HiDPI monitor (display scale set to > 100%, 225% in our testing), the JFrame leaves behind a lot of painting artifacts as it is dragged.

REGRESSION : Last worked in version 8u291

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a simple JFrame and set visible.
Drag the JFrame from one monitor to the other, slowly.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No painting artifacts should be visible, the JFrame should remain clean.
ACTUAL -
Painting artifacts are visible on the JFrame as it is dragged.

---------- BEGIN SOURCE ----------
public class SimpleFrame extends JFrame
{
	public static void main(String [] args) throws Exception
	{
		SimpleFrame sf = new SimpleFrame();
		sf.setSize(800, 600);
		sf.setLocationRelativeTo(null);
		sf.setDefaultCloseOperation(EXIT_ON_CLOSE);
		sf.setTitle(""Java Version: "" + System.getProperty(""java.version""));

		sf.setVisible(true);
	}
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8279035,JDK-8279334,JDK-8280505,JDK-8278301,JDK-8281730,,,,,,,,,,,,,,,,,,,,,,JDK-8281430,JDK-8211999,,,,,"2021-07-18 18:30;pardesha;SimpleFrame.java;https://bugs.openjdk.org/secure/attachment/95533/SimpleFrame.java","2021-07-19 17:01;pardesha;screenshot-17ea.png;https://bugs.openjdk.org/secure/attachment/95561/screenshot-17ea.png",,,,,generic,,,,,,,,,,generic,,,,"0|i2tbdv:",9223372036854775807,b25,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-07-18 18:29;pardesha;Reported with JDK 17, JFrame when dragged from standard DPI monitor to HiDPI monitor (display scale > 100%), leaves behind painting artifacts as it is dragged.

Checked this with reported version and could confirm the regression introduced in a specific JDK 16 build. See attached screenshot as reference.

Result:
JDK 15 GA: OK
JDK 16 b01: OK
JDK 16 GA: Fail
JDK 16.0.1 GA: Fail
JDK 17 ea b31: Fail

To check, run the attached test case with respective JDK version.;;;","2021-11-08 00:50;psadhukhan;It is an after-effect of awt fix done in 
JDK-8211999: Window positioning bugs due to overlapping GraphicsDevice bounds (Windows/HiDPI)
in jdk16b24.
I am not sure of the proper resolution to this and I don't want to rollback the fix so assigning to the fix author to decide on future action.;;;","2021-11-08 11:35;serb;Could be similar to this one:
https://bugs.openjdk.java.net/browse/JDK-8261725?focusedCommentId=14445945&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14445945;;;","2021-11-08 11:47;serb;I was able to reproduce this by disabling the d3d pipeline.;;;","2021-11-08 17:44;serb;The problem occurs more often if initially the window is moved partly outside of the first screen(let's name this part as the invisible part), and then slowly moved to the second screen where that invisible part became visible on the second screen. 

The problem is how we try to repaint the frame when it is moved from one screen to another. The Windows send us coordinates to repaint in the device space, if the width/height values are less than a unit in the user's space, we round it to the empty rectangle and skip it.

Workaround: repaint the whole window on the component resize/move event.;;;","2021-11-18 10:27;roboduke;Changeset: 03473b4c
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2021-11-18 18:25:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/03473b4c271b2ec7f0ebdb0edabadf7f36816b9d
;;;","2021-12-05 09:42;serb;Fix request (17u)

This is the follow-up of JDK-8211999. An additional improvement of HiDPI support in the multiscreen environment. The patch applies cleanly.
The jdk_desktop tests are green on the system where the bug was reproduced.
PR: https://github.com/openjdk/jdk17u-dev/pull/38;;;","2021-12-23 07:20;aivanov;[~goetz] I think “jdk17u-fix-request” label is still relevant. The request to backport it to 17u hasn't been approved or rejected yet. Since this fix addresses a regression, it needs to be backported to 17u.

[~serb] Do you agree?;;;","2021-12-23 07:34;goetz;If you mean that the issue qualifies for 17u, yes.
But please add a proper PR before adding the tag again.
Because of the transition to jdk17u-dev I had a long list of stale issues in my filter and cleaned them out this way, after giving people a week to update their issues.


;;;","2021-12-27 15:46;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/38
Date: 2021-12-27 23:29:50 +0000
;;;","2021-12-29 18:11;serb;Fix request (11u)

This is the follow-up of JDK-8211999. An additional improvement of HiDPI support in the multiscreen environment. The patch applies cleanly.
The jdk_desktop tests are green on the system where the bug was reproduced.
PR: https://github.com/openjdk/jdk11u-dev/pull/732;;;","2021-12-29 18:14;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk11u-dev/pull/732
Date: 2021-12-30 01:14:20 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Catch DirectoryIteratorException when scanning for .jfr files,JDK-8270873,5054579,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,dholmes,dholmes,2021-07-18 14:52,2021-09-28 07:12,2023-10-01 09:57,2021-09-21 05:03,17,,,,,,,18,hotspot,,0,tier8,,,,,,,,,,,,,,,,,"ommand line: [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-17+32-2671/macosx-x64-open.jdk/jdk-17.jdk/Contents/Home/bin/java -cp /System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S109687/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7791b72f-15af-47c8-97b8-05d50f618ff0/runs/29e4ae8d-7863-444c-8de9-7e439870af57/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/classes/0/jdk/jfr/api/consumer/streaming/TestBaseRepositoryMultipleProcesses.d:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-17+32-2671/src.full/open/test/jdk/jdk/jfr/api/consumer/streaming:/System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S109687/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7791b72f-15af-47c8-97b8-05d50f618ff0/runs/29e4ae8d-7863-444c-8de9-7e439870af57/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/classes/0/test/lib:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-17+32-2671/src.full/open/test/lib:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar -Xmx768m -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S109687/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7791b72f-15af-47c8-97b8-05d50f618ff0/runs/29e4ae8d-7863-444c-8de9-7e439870af57/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/tmp -ea -esa -XX:StartFlightRecording -XX:FlightRecorderOptions:repository=multiple jdk.jfr.api.consumer.streaming.Application ./3_65479_1626620513503.lock Whatever ]
[2021-07-18T15:01:53.771748Z] Gathering output for process 65485
App started
Application 3 status: 
Has repository: false
Has lock file: true
Is alive: true

----------System.err:(32/2781)----------
java.nio.file.DirectoryIteratorException: java.nio.file.NoSuchFileException: multiple/2021_07_18_15_01_53_65483
	at java.base/sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.readNextEntry(UnixDirectoryStream.java:169)
	at java.base/sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.hasNext(UnixDirectoryStream.java:198)
	at jdk.jfr/jdk.jfr.internal.consumer.RepositoryFiles.updatePaths(RepositoryFiles.java:194)
	at jdk.jfr/jdk.jfr.internal.consumer.RepositoryFiles.updatePaths(RepositoryFiles.java:100)
	at jdk.jfr/jdk.jfr.internal.consumer.RepositoryFiles.lastPath(RepositoryFiles.java:78)
	at jdk.jfr/jdk.jfr.internal.consumer.EventDirectoryStream.processRecursionSafe(EventDirectoryStream.java:144)
	at jdk.jfr/jdk.jfr.internal.consumer.EventDirectoryStream.process(EventDirectoryStream.java:126)
	at jdk.jfr/jdk.jfr.internal.consumer.AbstractEventStream.execute(AbstractEventStream.java:266)
	at jdk.jfr/jdk.jfr.internal.consumer.AbstractEventStream$1.run(AbstractEventStream.java:289)
	at jdk.jfr/jdk.jfr.internal.consumer.AbstractEventStream$1.run(AbstractEventStream.java:286)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at jdk.jfr/jdk.jfr.internal.consumer.AbstractEventStream.run(AbstractEventStream.java:286)
	at jdk.jfr/jdk.jfr.internal.consumer.AbstractEventStream.start(AbstractEventStream.java:237)
	at jdk.jfr/jdk.jfr.internal.consumer.EventDirectoryStream.start(EventDirectoryStream.java:108)
	at jdk.jfr.api.consumer.streaming.TestBaseRepositoryMultipleProcesses.main(TestBaseRepositoryMultipleProcesses.java:57)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.nio.file.NoSuchFileException: multiple/2021_07_18_15_01_53_65483
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	at java.base/sun.nio.fs.UnixException.asIOException(UnixException.java:115)
	at java.base/sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.readNextEntry(UnixDirectoryStream.java:168)
	... 20 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tos3:",9223372036854775807,b16,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-09-13 15:47;egahlin;This is a strange exception, because DirectoryIteratorException is a subclass of java.util.ConcurrentModificationException, and there is nothing in the Javadoc that says Files.newDirectoryStream(Path) can throw a CCME. 

In the JFR code, IOException is caught, and it retries if the repository is changed while trying to iterate the files, but it doesn't expect a RuntimeException.;;;","2021-09-13 19:45;dholmes;It is the iteration that produces the exception as specified by java.nio.files.DirectoryStream;;;","2021-09-13 19:52;egahlin;Thanks, I can see that now.;;;","2021-09-21 05:03;roboduke;Changeset: 57df0dbc
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-09-21 12:02:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/57df0dbc45914969df34e6f42b6c815785e11048
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Final nroff manpage update for JDK 17,JDK-8270872,5054578,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,jjg,dholmes,dholmes,2021-07-18 14:36,2021-08-10 02:25,2023-10-01 09:57,2021-08-05 15:13,17,,,,,,,17,infrastructure,,0,build-infra,doc,jdk17-fix-request,jdk17-fix-yes,manpage,,,,,,,,,,,,,Before RC we need to update the man pages in the open repo from the Markdown sources in the closed repo.,,,,,,,,,,,JDK-8272179,JDK-8272211,JDK-8272069,,,,,,,,,,,,,JDK-8258378,,,,,,,,,,,JDK-8268895,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2torv:",9223372036854775807,b35,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-08-05 14:51;mr;Fix approved by Project Lead.;;;","2021-08-05 15:08;jjg;Fix Request

This is a Fix Request, to update the copies of the man pages in the open JDK repo. The fix is a semi-automatic update that is generated by a special makefile target.;;;","2021-08-05 15:13;roboduke;Changeset: dfacda48
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-08-05 22:12:27 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/dfacda488bfbe2e11e8d607a6d08527710286982
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1ServiceThread may not terminate,JDK-8270869,5054570,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kbarrett,kbarrett,kbarrett,2021-07-18 04:15,2023-04-24 20:39,2023-10-01 09:57,2021-07-19 17:28,17,18,,,,,,18,hotspot,,0,gc-g1,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"In G1ServiceThread, there is a race between stop_service and the termination check in sleep_before_next_cycle. The latter checks should_terminate outside the lock, and then enters the monitor and waits for notification or the next task to be ready.  If stop is requested after the should_terminate check but before entering the monitor, the stop request will be missed.  The should_terminate check should be (re)done after entering the monitor.  It will eventually terminate if there are periodic tasks, but only when the next task becomes ready.
",,,,,,,,,,,JDK-8306073,JDK-8306493,JDK-8306786,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2toq3:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-07-19 17:28;roboduke;Changeset: 7f35e5ba
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2021-07-20 00:27:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7f35e5bac9925c06985f16d225f5dd9c50157d06
;;;","2023-04-17 05:49;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Simple change slightly exceeding a locked passage. Low risk.
Clean backport. SAP nightly testing passed.;;;","2023-04-17 05:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1250
Date: 2023-04-17 12:48:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Debug build of WebKit 613.1 fails on Linux,JDK-8270867,5054559,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,peterz,kcr,kcr,2021-07-17 07:30,2022-05-02 04:48,2023-10-01 09:57,2022-03-17 00:42,8,jfx19,,,,,,jfx19,javafx,,0,noreg-build,,,,,,,,,,,,,,,,,"The following was spotted in our weekly CI debug build on Oracle Linux 7.x:

$ gradle -PCONF=DebugNative -PCOMPILE_WEBKIT=true ... all
...
Scanning dependencies of target LowLevelInterpreterLib
[ 26%] Building CXX object Source/JavaScriptCore/CMakeFiles/LowLevelInterpreterLib.dir/llint/LowLevelInterpreter.cpp.o
.../jfx/modules/javafx.web/build/linux/Debug/DerivedSources/ForwardingHeaders/JavaScriptCore/Scripts/resolve-asm-file-conflicts.rb:89:in `parse': undefined method `/' for #<Pathname:working_directory> (NoMethodError)
	from .../jfx/modules/javafx.web/build/linux/Debug/DerivedSources/ForwardingHeaders/JavaScriptCore/Scripts/resolve-asm-file-conflicts.rb:129:in `test'
	from .../jfx/modules/javafx.web/build/linux/Debug/DerivedSources/ForwardingHeaders/JavaScriptCore/Scripts/resolve-asm-file-conflicts.rb:208:in `block in selftest'
	from .../jfx/modules/javafx.web/build/linux/Debug/DerivedSources/ForwardingHeaders/JavaScriptCore/Scripts/resolve-asm-file-conflicts.rb:207:in `each'
	from .../jfx/modules/javafx.web/build/linux/Debug/DerivedSources/ForwardingHeaders/JavaScriptCore/Scripts/resolve-asm-file-conflicts.rb:207:in `selftest'
	from .../jfx/modules/javafx.web/build/linux/Debug/DerivedSources/ForwardingHeaders/JavaScriptCore/Scripts/resolve-asm-file-conflicts.rb:398:in `<main>'
Error running cmd: pid 14478 exit 1
gmake[2]: *** [Source/JavaScriptCore/CMakeFiles/LowLevelInterpreterLib.dir/llint/LowLevelInterpreter.cpp.o] Error 1
gmake[1]: *** [Source/JavaScriptCore/CMakeFiles/LowLevelInterpreterLib.dir/all] Error 2
gmake: *** [all] Error 2

> Task :web:compileNativeLinux FAILED

I wasn't able to reproduce it locally on Ubuntu (16.04). It might be related to the version of ruby or some other tool on our build machine.",,,,,,,,,,,JDK-8284821,JDK-8285858,JDK-8285994,,,,,,,,,,JDK-8283273,,JDK-8283273,,,,JDK-8283246,,,JDK-8268849,,,,,JDK-8278980,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tonn:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-07-17 07:33;kcr;Note that this doesn't affect the production build at all, since we don't produce or release any debug builds.;;;","2022-02-05 06:42;kcr;Now that we've updated to WebKit 613.1 in JDK-8278980 we are seeing additional failures in debug mode, only on Linux:

In file included from jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/StdLibExtras.h:32,
                 from jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/FastMalloc.h:26,
                 from jfx/modules/javafx.web/src/main/native/Source/WTF/config.h:31,
                 from jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/linux/MemoryPressureHandlerLinux.cpp:28:
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/linux/MemoryPressureHandlerLinux.cpp: In member function 'void WTF::MemoryPressureHandler::triggerMemoryPressureEvent(bool)':
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/linux/MemoryPressureHandlerLinux.cpp:39:28: error: 'LogMemoryPressure' was not declared in this scope; did you mean 'isUnderMemoryPressure'?
   39 | #define LOG_CHANNEL_PREFIX Log
      |                            ^~~
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/Assertions.h:175:63: note: in definition of macro 'JOIN_LOG_CHANNEL_WITH_PREFIX_LEVEL_2'
  175 | #define JOIN_LOG_CHANNEL_WITH_PREFIX_LEVEL_2(prefix, channel) prefix ## channel
      |                                                               ^~~~~~
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/Assertions.h:172:27: note: in expansion of macro 'JOIN_LOG_CHANNEL_WITH_PREFIX'
  172 | #define LOG_CHANNEL(name) JOIN_LOG_CHANNEL_WITH_PREFIX(LOG_CHANNEL_PREFIX, name)
      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/Assertions.h:172:56: note: in expansion of macro 'LOG_CHANNEL_PREFIX'
  172 | #define LOG_CHANNEL(name) JOIN_LOG_CHANNEL_WITH_PREFIX(LOG_CHANNEL_PREFIX, name)
      |                                                        ^~~~~~~~~~~~~~~~~~
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/Assertions.h:495:35: note: in expansion of macro 'LOG_CHANNEL'
  495 | #define LOG(channel, ...) WTFLog(&LOG_CHANNEL(channel), __VA_ARGS__)
      |                                   ^~~~~~~~~~~
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/linux/MemoryPressureHandlerLinux.cpp:62:9: note: in expansion of macro 'LOG'
   62 |         LOG(MemoryPressure, ""Got memory pressure notification (%s)"", isCritical ? ""critical"" : ""non-critical"");
      |         ^~~
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/linux/MemoryPressureHandlerLinux.cpp:39:28: error: 'LogMemoryPressure' was not declared in this scope; did you mean 'isUnderMemoryPressure'?
   39 | #define LOG_CHANNEL_PREFIX Log
      |                            ^~~
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/Assertions.h:175:63: note: in definition of macro 'JOIN_LOG_CHANNEL_WITH_PREFIX_LEVEL_2'
  175 | #define JOIN_LOG_CHANNEL_WITH_PREFIX_LEVEL_2(prefix, channel) prefix ## channel
      |                                                               ^~~~~~
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/Assertions.h:172:27: note: in expansion of macro 'JOIN_LOG_CHANNEL_WITH_PREFIX'
  172 | #define LOG_CHANNEL(name) JOIN_LOG_CHANNEL_WITH_PREFIX(LOG_CHANNEL_PREFIX, name)
      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/Assertions.h:172:56: note: in expansion of macro 'LOG_CHANNEL_PREFIX'
  172 | #define LOG_CHANNEL(name) JOIN_LOG_CHANNEL_WITH_PREFIX(LOG_CHANNEL_PREFIX, name)
      |                                                        ^~~~~~~~~~~~~~~~~~
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/Assertions.h:495:35: note: in expansion of macro 'LOG_CHANNEL'
  495 | #define LOG(channel, ...) WTFLog(&LOG_CHANNEL(channel), __VA_ARGS__)
      |                                   ^~~~~~~~~~~
jfx/modules/javafx.web/src/main/native/Source/WTF/wtf/linux/MemoryPressureHandlerLinux.cpp:74:9: note: in expansion of macro 'LOG'
   74 |         LOG(MemoryPressure, ""System is no longer under memory pressure."");
      |         ^~~
gmake[2]: *** [Source/WTF/wtf/CMakeFiles/WTF.dir/linux/MemoryPressureHandlerLinux.cpp.o] Error 1
gmake[2]: *** Waiting for unfinished jobs....
gmake[1]: *** [Source/WTF/wtf/CMakeFiles/WTF.dir/all] Error 2
gmake: *** [all] Error 2

> Task :web:compileNativeLinux FAILED
:web:compileNativeLinux (Thread[Execution worker for ':' Thread 3,5,main]) completed. Took 2 mins 53.449 secs.

FAILURE: Build failed with an exception.
;;;","2022-03-16 06:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/756
Date: 2022-03-16 07:54:57 +0000;;;","2022-03-17 00:42;dukebot;Changeset: eb7fa5dd
Author:    Peter Zhelezniakov <peterz@openjdk.org>
Date:      2022-03-17 07:40:39 +0000
URL:       https://git.openjdk.java.net/jfx/commit/eb7fa5dd1c0911bca15576060691d884d29895a1
;;;","2022-04-28 10:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/91
Date: 2022-04-28 17:52:40 +0000;;;","2022-04-29 10:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/48
Date: 2022-04-29 17:14:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in DocTreePath.getTreePath(),JDK-8270866,5054558,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,hannesw,leder,leder,2021-07-17 05:36,2021-08-09 03:45,2023-10-01 09:57,2021-07-27 12:29,17,,,,,,,17,tools,,0,jdk17-fix-request,jdk17-fix-yes,jooq-found,regression,,,,,,,,,,,,,,"I'm getting an error when running the javadoc tool since recently on JDK 17

[ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.2.0:javadoc (default-cli) on project jooq-codegen: An error has occurred in Javadoc report generation:
[ERROR] Exit code: 1 - Building index for all the packages and classes...
[ERROR] Standard Doclet version 17-ea+26-2439
[ERROR] Building tree for all the packages and classes...
[ERROR] Generating C:\Users\lukas\jOOQ\jdk-bugs\jOOQ\jOOQ-codegen\target\site\apidocs\org\jooq\codegen\AbstractGeneratorStrategy.html...
[ERROR] Generating C:\Users\lukas\jOOQ\jdk-bugs\jOOQ\jOOQ-codegen\target\site\apidocs\org\jooq\codegen\DefaultGenerator.html...
[ERROR] error: An internal exception has occurred.
[ERROR]         (java.lang.NullPointerException: Cannot invoke ""com.sun.source.util.DocTreePath.getTreePath()"" because ""path"" is null)
[ERROR] Please file a bug against the javadoc tool via the Java bug reporting page
[ERROR] (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com)
[ERROR] for duplicates. Include error messages and the following diagnostic in your report. Thank you.
[ERROR] java.lang.NullPointerException: Cannot invoke ""com.sun.source.util.DocTreePath.getTreePath()"" because ""path"" is null
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.tool.JavadocLog.getDiagnosticSource(JavadocLog.java:618)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.tool.JavadocLog.print(JavadocLog.java:245)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.Messages.report(Messages.java:187)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.Messages.warning(Messages.java:133)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.seeTagToContent(HtmlDocletWriter.java:1072)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitLink(HtmlDocletWriter.java:1557)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitLink(HtmlDocletWriter.java:1419)
[ERROR]         at jdk.compiler/com.sun.tools.javac.tree.DCTree$DCLink.accept(DCTree.java:538)
[ERROR]         at jdk.compiler/com.sun.source.util.SimpleDocTreeVisitor.visit(SimpleDocTreeVisitor.java:79)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1641)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1362)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addCommentTags(HtmlDocletWriter.java:1278)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addCommentTags(HtmlDocletWriter.java:1258)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addSummaryComment(HtmlDocletWriter.java:1227)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.SubWriterHolderWriter.addIndexComment(SubWriterHolderWriter.java:133)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.SubWriterHolderWriter.addSummaryLinkComment(SubWriterHolderWriter.java:158)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.AbstractMemberWriter.addMemberSummary(AbstractMemberWriter.java:366)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder.buildSummary(MemberSummaryBuilder.java:279)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder.addSummary(MemberSummaryBuilder.java:446)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder.buildMethodsSummary(MemberSummaryBuilder.java:235)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder$1.build(MemberSummaryBuilder.java:112)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildMemberSummary(ClassBuilder.java:327)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildClassDoc(ClassBuilder.java:148)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.build(ClassBuilder.java:113)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:388)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.generateClassFiles(AbstractDoclet.java:286)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:199)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.startGeneration(AbstractDoclet.java:212)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.run(AbstractDoclet.java:115)
[ERROR]         at jdk.javadoc/jdk.javadoc.doclet.StandardDoclet.run(StandardDoclet.java:103)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.tool.Start.parseAndExecute(Start.java:556)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:393)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:342)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.tool.Main.execute(Main.java:63)
[ERROR]         at jdk.javadoc/jdk.javadoc.internal.tool.Main.main(Main.java:52)

To reproduce, use

$ git clone https://github.com/jOOQ/jOOQ
$ cd jOOQ
$ git checkout 2f242b563cb4996e7088a6e0b513a86210b83898
$ mvn clean install -pl jooq,jooq-meta,jooq-codegen
$ mvn javadoc:javadoc -pl jooq-codegen

If required, I can try to make a smaller reproducer, but it might take some time","$ java -version
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
openjdk version ""17-ea"" 2021-09-14
OpenJDK Runtime Environment (build 17-ea+31-2664)
OpenJDK 64-Bit Server VM (build 17-ea+31-2664, mixed mode, sharing)

C:\Users\lukas>ver

Microsoft Windows [Version 10.0.19043.1110]",,,,,,,,,,JDK-8271359,JDK-8271802,JDK-8271665,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,b24,17,,generic,,,,"0|i2tonf:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,Verified,,"2021-07-17 06:26;leder;Here's a much more simple reproducer without the complete jOOQ dependency:

$ cat p/Test.java
package p;

public interface Test {
        /**
         * {@link javax.annotation.Generated}
         */
        void m();
}

$ cat p/Impl.java
package p;

public class Impl implements Test {
        public void m() {}
}

$ javadoc -d doc p
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
Loading source files for package p...
Constructing Javadoc information...
Building index for all the packages and classes...
Standard Doclet version 17-ea+31-2664
Building tree for all the packages and classes...
Generating doc\p\Impl.html...
.\p\Test.java:5: error: reference not found
         * {@link javax.annotation.Generated}
                  ^
.\p\Impl.java:3: warning: no comment
public class Impl implements Test {
       ^
error: An internal exception has occurred.
        (java.lang.NullPointerException: Cannot invoke ""com.sun.source.util.DocTreePath.getTreePath()"" because ""path"" is null)
Please file a bug against the javadoc tool via the Java bug reporting page
(http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com)
for duplicates. Include error messages and the following diagnostic in your report. Thank you.
java.lang.NullPointerException: Cannot invoke ""com.sun.source.util.DocTreePath.getTreePath()"" because ""path"" is null
        at jdk.javadoc/jdk.javadoc.internal.tool.JavadocLog.getDiagnosticSource(JavadocLog.java:618)
        at jdk.javadoc/jdk.javadoc.internal.tool.JavadocLog.print(JavadocLog.java:245)
        at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.Messages.report(Messages.java:187)
        at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.Messages.warning(Messages.java:133)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.seeTagToContent(HtmlDocletWriter.java:1068)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitLink(HtmlDocletWriter.java:1561)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitLink(HtmlDocletWriter.java:1413)
        at jdk.compiler/com.sun.tools.javac.tree.DCTree$DCLink.accept(DCTree.java:538)
        at jdk.compiler/com.sun.source.util.SimpleDocTreeVisitor.visit(SimpleDocTreeVisitor.java:79)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1645)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1356)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addCommentTags(HtmlDocletWriter.java:1272)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addCommentTags(HtmlDocletWriter.java:1252)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addSummaryComment(HtmlDocletWriter.java:1221)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.SubWriterHolderWriter.addIndexComment(SubWriterHolderWriter.java:133)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.SubWriterHolderWriter.addSummaryLinkComment(SubWriterHolderWriter.java:158)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.AbstractMemberWriter.addMemberSummary(AbstractMemberWriter.java:366)
        at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder.buildSummary(MemberSummaryBuilder.java:279)
        at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder.addSummary(MemberSummaryBuilder.java:446)
        at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder.buildMethodsSummary(MemberSummaryBuilder.java:235)
        at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder$1.build(MemberSummaryBuilder.java:112)
        at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildMemberSummary(ClassBuilder.java:327)
        at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildClassDoc(ClassBuilder.java:148)
        at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.build(ClassBuilder.java:113)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:388)
        at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.generateClassFiles(AbstractDoclet.java:286)
        at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:199)
        at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.startGeneration(AbstractDoclet.java:212)
        at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.run(AbstractDoclet.java:115)
        at jdk.javadoc/jdk.javadoc.doclet.StandardDoclet.run(StandardDoclet.java:103)
        at jdk.javadoc/jdk.javadoc.internal.tool.Start.parseAndExecute(Start.java:556)
        at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:393)
        at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:342)
        at jdk.javadoc/jdk.javadoc.internal.tool.Main.execute(Main.java:63)
        at jdk.javadoc/jdk.javadoc.internal.tool.Main.main(Main.java:52)
2 errors
1 warning;;;","2021-07-19 04:17;prappo;Assigning to Jon for the time being.;;;","2021-07-19 07:46;hannesw;This looks suspiciously like a manifestation of JDK-8269706.;;;","2021-07-19 08:07;hannesw;Indeed my work-in-progress fix for JDK-8269706 solves the NPE in Lukas' reproducer above. I propose we change JDK-8269706 to P2 and retarget to 17 and close this as duplicate.;;;","2021-07-19 11:35;prappo;The reproducing code helped to bisect to this commit: b4d4884c03b03d3073ef137a899f3612993f5e65;;;","2021-07-23 07:41;hannesw;Fix Request

This fixes a NPE crash and regression in javadoc. The regression was caused by the removal of a null check in javadoc logging a few months ago that had masked some buggy code. The NPE occurred when a javadoc comment inherited from an overridden element caused an error or warning and the source position of that comment had to be looked up. 

The fix makes sure the correct source can always be retrieved. The pull request (https://github.com/openjdk/jdk17/pull/264) was reviewed by [~jjg]. During review, Jon and I discussed adding back the null checks that had previously masked the problem, but were confident it is safe to leave them out.

The risk is small as the fix is relatively simple and straightforward. It was tested by running jdk tiers 1-3 and by comparing the generated JDK documentation before and after the fix, which showed no differences. The test for the fix covers various modes of inheriting invalid documentation from an overridden method.;;;","2021-07-27 11:10;briangoetz;Fix request for JDK17 approved.  ;;;","2021-07-27 12:29;roboduke;Changeset: fbe28e4e
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2021-07-27 19:28:54 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/fbe28e4ee1f1ff7fb617c2e1f96c04f4b371fa2b
;;;","2021-08-09 03:45;hannesw;Test used for verification:
- test/langtools/jdk/javadoc/doclet/testInherited/TestInherited.java (as modified with the fix of this issue)
- reproducer code provided by the reporter of this issue
Platform: Mac OS X

JDK 17 build 35:
- test passes successfully
- reproducer code exits without throwing an exception

JDK 17 build 32:
- test fails because of NullPointerException
- reproducer code fails with NullPointerException

Result: The fix was successful.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem List  java/awt/Window/MultiWindowApp/MultiWindowAppTest.java on Linux,JDK-8270858,5054550,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,prr,prr,2021-07-16 12:26,2022-04-05 23:43,2023-10-01 09:57,2021-07-16 13:02,17,,,,,,,17,client-libs,,0,noreg-self,testbug,,,,,,,,,,,,,,,," java/awt/Window/MultiWindowApp/MultiWindowAppTest.java is failing far too often on the Ubuntu 21.04 systems. We need to problem list this test on Linux until we get to the bottom of it,",,,,,,,,,,,JDK-8270864,JDK-8270921,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2toln:",9223372036854775807,b32,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-07-16 13:02;roboduke;Changeset: 2dddcce2
Author:    Phil Race <prr@openjdk.org>
Date:      2021-07-16 20:02:08 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/2dddcce29bec5d16ba2b0580bbcb7cd65e7ea66e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Logic for attaching/detaching native threads could be improved,JDK-8270851,5054541,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-07-16 08:53,2022-03-29 03:05,2023-10-01 09:57,2022-03-29 03:05,17,repo-panama,,,,,,repo-panama,tools,,0,foreign-memaccess+abi,foreign-preview,,,,,,,,,,,,,,,,"Currently, we attach a native thread to VM before we jump into upcall code, and we later detach when we're done with the upcall.

In cases where the native library creates a thread pool, and keeps hitting upcalls with the same few threads, this scheme puts the VM under an enormous amount of pressure, as these threads are not recognized by the JVM, which will create a new Thread object each time (even though the underlying native thread is the same).

For instance, when experimenting with a Panama-based port of the Fuse library:

https://github.com/skymatic/fuse-panama

We noted that the VM was generating ~450G of memory in j.l.Thread instances which was obviously having a negative impact in terms of performance.

JNR does not suffer from this issue. JNR seem to feature an heuristics so that after a given thread has been attached enough times (1000) it is no longer detached. This works in the long run, although it does create a fair amount of garbage at the beginning of the application lifecycle.",,,,,,,,,,,,,,,,,,,,,,JDK-8282469,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tojn:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-12-07 16:30;mcimadamore;This is still under discussion with Hotspot team. Some concerns were expressed at usage of thread local storage in the patch under review.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Redundant unsafe opmask register allocation in some instruction patterns.,JDK-8270848,5054538,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbhateja,jbhateja,jbhateja,2021-07-16 08:07,2022-12-16 01:55,2023-10-01 09:57,2021-07-30 11:59,17,18,,,,,,18,hotspot,,0,c2,c2-matcher,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,performance,,,,,,,,,"- Some string compare/array equality patters in x86_[32/64].ad files accept the temporary opmark register operands, instructions using these registers are guarded by target feature checks.
- Even if control path leading to these instructions is not chosen, RA will still allocate physical registers to these temporary operands.
- Pulling out the feature checks upto the instruction level can save redundant allocations which may effect spilling decisions.
- Existing platform dependent routine Matcher::has_predicated_vector() check the existence of AVX512VL feature which is not required.",,,,,,,,,,,JDK-8293704,JDK-8298923,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2toiz:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-16 15:20;dlong;ILW = MLH = P4;;;","2021-07-16 15:21;dlong;[~jbhateja], does this affect 17 and earlier?;;;","2021-07-30 11:59;roboduke;Changeset: 71ca0c08
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2021-07-30 18:28:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/71ca0c08f09e87673f1cf3f918a0802961359166
;;;","2022-09-08 04:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/657
Date: 2022-09-08 11:21:38 +0000;;;","2022-09-16 04:39;bulasevich;Fix Request (17u):
(I'm doing it retroactively, sorry about that!)
This change checks for custom avx functions support instead of using the generic UseAVX flag which is important (performance and stability) on CPUs that supports a subset of avx512 features.
The change applies cleanly.
One of the reasons for the backport is to align the x86.ad files with jdk19 to simplify the further backports.
PR: https://github.com/openjdk/jdk17u-dev/pull/657
Testing: jtreg tier1-2, hotspot on AMD machines.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove deprecated implementation methods from Scene,JDK-8270839,5054527,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-07-16 05:59,2021-07-29 19:06,2023-10-01 09:57,2021-07-22 14:40,jfx18,,,,,,,jfx18,javafx,,0,sn_97,sn_98,,,,,,,,,,,,,,,,"The following implementation methods in Scene were deprecated for removal in JavaFX 17 by JDK-8270246:

    public void disposePeer()
    public void enableInputMethodEvents(boolean enable)
    public void processKeyEvent(KeyEvent e) 

They can now be removed from the API by making them package-scope.",,,,,,,,,,,,,,,,,,,,,,JDK-8270246,,JDK-8270850,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2togj:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2021-07-22 14:40;roboduke;Changeset: 97d70afb
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-07-22 21:39:26 +0000
URL:       https://git.openjdk.java.net/jfx/commit/97d70afb74c5a2599326796ccc9ce799d76e0b96
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove deprecated protected access members from DateTimeStringConverter,JDK-8270838,5054526,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,nlisker,kcr,kcr,2021-07-16 05:51,2023-01-16 05:22,2023-10-01 09:57,2021-07-20 09:21,jfx18,,,,,,,jfx18,javafx,,0,,,,,,,,,,,,,,,,,,"A few undocumented protected fields and one protected method in DateTimeStringConverter were deprecated for removal in JavaFX 17 by JDK-8260475. They can now be removed from the API by making them private or package-scope as needed.
",,,,,,,,,,,,,,,,,,,,,,JDK-8260475,JDK-8250802,JDK-8270855,,,,,,,,,,,,,JDK-8088604,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2togb:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2021-07-16 09:22;nlisker;Can I fix this as part of JDK-8250802 since it removes these fields anyway, or do you want a separate dedicated fix?;;;","2021-07-16 09:52;kcr;Because this removes public API, and needs a CSR, I'd prefer it be done first in its own fix.;;;","2021-07-20 09:21;roboduke;Changeset: b46f227b
Author:    Nir Lisker <nlisker@openjdk.org>
Date:      2021-07-20 16:19:54 +0000
URL:       https://git.openjdk.java.net/jfx/commit/b46f227bd11e2b925096e559cbe3e9da4f6c3541
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fix typos in test TestSigParse.java,JDK-8270837,5054525,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,hseigel,hseigel,2021-07-16 05:30,2022-03-10 05:38,2023-10-01 09:57,2021-07-16 07:03,18,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,"These errors were pointed out by Yichen Yin.

/*
  * @test
- * @bug 8129579
+ * @bug 8219579
  * @summary Test that signatures are properly parsed when verification of local
  *          classes is requested but verification of remote classes is not.
  * @compile BadSignatures.jcod
@@ -33,7 +33,7 @@
 public class TestSigParse {
 
     public static void main(String args[]) throws Throwable {
-        System.out.println(""Regression test for bug 819579"");
+        System.out.println(""Regression test for bug 8219579"");
 ",,,,,,,,,,,JDK-8281307,JDK-8282962,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8219579,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tog3:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-16 07:03;roboduke;Changeset: 67dc1c5b
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2021-07-16 14:02:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/67dc1c5bf34cfe987b672f34f0b2a6b36840382a
;;;","2022-03-09 06:35;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-03-09 06:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/216
Date: 2022-03-09 14:35:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
regression after JDK-8261006,JDK-8270835,5054523,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,vromero,dbessono,dbessono,2021-07-16 05:05,2022-02-10 14:28,2023-10-01 09:57,2021-08-17 13:48,18,,,,,,,18,tools,,0,conformance,regression,tck-red-18,,,,,,,,,,,,,,,"After integration of JDK-8261006 the following started to fail on compilation

===== A.java =============================
public class A extends B {
    A(int i) {}
    class IC extends B {
        class IIC extends S {
            IIC(float f) {
                IC.super.ref.super();
            }
        }
    }
}

class B {
    B ref;
    class S { }
}
==================================


./javac A.java
A.java:6: error: cannot reference super before supertype constructor has been called
                IC.super.ref.super();
                  ^
1 error

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7316526,,,JDK-8261006,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tofn:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2021-08-17 13:48;roboduke;Changeset: 14623cde
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-08-17 20:47:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/14623cde3a20962e902043b556c5058ac208711f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove unused stiFileTableIndex from SDE.c,JDK-8270820,5054505,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-07-16 00:13,2021-07-26 15:44,2023-10-01 09:57,2021-07-20 23:42,11,17,18,,,,,18,core-svc,,0,,,,,,,,,,,,,,,,,,"While checking compiler warnings of the type : ""function 'xyz' was declared but never referenced""  I came across stiFileTableIndex from SDE.c  that  generated such a warning and can be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tobn:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-07-20 23:42;roboduke;Changeset: cd8783c0
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-07-21 06:41:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cd8783c08ee18167f15df621e997015b971bfb01
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ShortECDSA.java test is not complete,JDK-8270797,5054479,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2021-07-15 14:12,2022-04-01 02:10,2023-10-01 09:57,2021-08-04 06:38,,,,,,,,18,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,This test only checks the XML signing using public APIs. There is another internal way which uses a separate implementation. It was also fixed in JDK-8259535 but the test hadn't cover it.,,,,,,,,,,,JDK-8283845,JDK-8283673,JDK-8284163,JDK-8284009,JDK-8283760,,,,,,,,,,,,,,,,,JDK-8259535,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2to5v:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ee0b2af,,,,,,,,,"2021-08-04 06:38;roboduke;Changeset: 221e4b9c
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-08-04 13:37:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/221e4b9c61cd1c9c3f4c037589ba639541532910
;;;","2022-03-25 04:56;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-25 05:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/285
Date: 2022-03-25 11:57:46 +0000;;;","2022-03-29 13:22;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only a test change.
Not clean. I had to replace a call to HexFormat that is not available in 11.
Test passes.
SAP nightly testing passed.;;;","2022-03-29 13:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/963
Date: 2022-03-29 20:21:12 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] java/awt/print/Dialog/DialogCopies.java does not show instruction ,JDK-8270609,5054286,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2021-07-15 10:11,2023-02-24 12:17,2023-10-01 09:57,2021-09-20 07:11,16,17,,,,,,18,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,"java/awt/print/Dialog/DialogCopies.java is a manual test case. When the test case is executed via jtreg instructions dialog is not seen after looking into the code found that the test does not have any instruction dialog code. When the test case is executed directly instructions are printed on the console .  Since manual test cases are executed using jtreg its always better to show instructions.

Since instructions are not seen by the user does not understand what he has to do or user has to read the code.  If user clicks on the cancel button the following exception is thrown . 

java.lang.RuntimeException: Copies not incremented
	at DialogCopies.main(DialogCopies.java:57)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,JDK-8292952,JDK-8293908,JDK-8297197,JDK-8297240,JDK-8303197,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tmyz:",9223372036854775807,b16,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-09-20 07:11;roboduke;Changeset: 4da45c43
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-09-20 14:07:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4da45c430139fe66fab020c2f96686dc9cf26a97
;;;","2022-09-15 06:52;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-09-15 07:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/680
Date: 2022-09-15 13:56:26 +0000;;;","2023-02-23 07:07;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
No risk, only a test change.
I had to adapt an """""" string.
Test passes. SAP nightly testing passed.;;;","2023-02-23 07:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1769
Date: 2023-02-23 15:06:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Tests should not use (real, in-use, routable) 1.1.1.1 as dummy IP value",JDK-8270553,5054221,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,jdowland,jdowland,2021-07-15 07:23,2021-09-20 12:54,2023-10-01 09:57,2021-09-14 10:42,,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,"Some tests, including test/jdk/java/net/HttpURLConnection/HttpURLConWithProxy.java , use the IP address ""1.1.1.1"" as a value. I think at the time the address was picked, the assumption was the address was not valid / not routable. Since April 2018 the address is part of CloudFlare's ""Free"" DNS product: <https://en.wikipedia.org/wiki/1.1.1.1>. (this test was originally written in 2016, before the service was launched)

I've verified using local packet captures that running the test does result in IP traffic being sent to 1.1.1.1.
 
An alternative value should be chosen (such as a reserved IP from RFC 6761) which will not result in runners of the test suit inadvertently sending IP packets to the CloudFlare service.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9,,,,,,"0|i2tmkj:",9223372036854775807,b15,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-07-15 07:27;sgehwolf;$ grep -rn '1\.1\.1\.1' test
test/jdk/java/security/BasicPermission/MixedBasicPermissions.java:32:            new java.net.NetPermission(""1.1.1.1"", ""connect"").newPermissionCollection().add(new java.util.PropertyPermission(""j"", ""read""));
test/jdk/java/net/InetSocketAddress/ToString.java:120:                    {InetAddress.getByAddress(new byte[]{1, 1, 1, 1}), 80, ""/1.1.1.1:80""},
test/jdk/java/net/HttpURLConnection/HttpURLConWithProxy.java:58:        System.setProperty(""http.proxyHost"", ""1.1.1.1"");
;;;","2021-07-15 07:36;jdowland;I checked those and the only one that caused outbound connections was HttpURLConWithProxy.;;;","2021-07-15 07:43;jdowland;Also in the same test (same problem)

{code}
 50         Proxy p1 = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(""2.2.2.2"", 2222));
 51         Proxy p2 = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(""3.3.3.3"", 3333));
{code}

Until/unless it gets re-allocated, addresses in 240.0.0.0/4 should be OK. I'm working on a patch.;;;","2021-07-15 08:07;jdowland;Replacing those addresses with ones from 240.0.0.0/4 works, but there could be a more robust approach. What we need is a host/port combination that the test can guarantee is not a valid HTTP proxy. The best way to do that, would be to bind a random listening port on localhost (or several) in the test itself, and configure localhost/those ports as the http proxy. This would be a more complicated patch though. I'd appreciate your advice on whether that would be worth the effort!

(There is an IPv6 range that is guaranteed to never be allocated, but I imagine we want to keep this as IPv4?);;;","2021-09-14 10:42;roboduke;Changeset: 394ebc86
Author:    Jonathan Dowland <jdowland@openjdk.org>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-09-14 17:12:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/394ebc8642366bc16aedde0d7f09fe4214f14cdd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: size_fits_all_mem_uses should return false if its output is a CAS,JDK-8270533,5054197,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,aph,aph,aph,2021-07-15 01:49,2022-12-16 02:01,2023-10-01 09:57,2021-09-08 03:10,11,16,17,18,9,openjdk8u,,18,hotspot,,0,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,jdk8u-critical-request,jdk8u-critical-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,redhat-interest,"size_fits_all_mem_uses(AddPNode) is used to determine if an add with shift expression can be used as an input to a MemNode. However, it is not correct when one of its outputs is a CAS.",,,,,,,,,,,JDK-8276888,JDK-8277256,JDK-8271505,JDK-8276855,JDK-8276856,JDK-8270976,JDK-8276857,JDK-8298928,,,,,,,,,,,,,,,,,,,JDK-8154826,JDK-8267689,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2tmf7:",9223372036854775807,b14,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-15 03:50;chagedorn;ILW = Potential crash in Matcher on aarch64, never observed?, no workaround = HLH = P2;;;","2021-07-15 05:50;andrew;Observed after backport to 8u where C2 is different.
Will include this fix with the CPU patches as 8u is currently frozen.;;;","2021-09-08 03:10;roboduke;Changeset: 6750c34c
Author:    Andrew Haley <aph@openjdk.org>
Date:      2021-09-08 10:08:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6750c34c92b5f28bba4a88ac798b800fce380d32
;;;","2021-11-08 02:00;yan;Fix request (17u):
on behalf of Alexey Pavlutkin -- 
(actually, it is stereotypical request for every 11+ release) 

The original patch prevents using an output of Shift-n-Add operation as input for CAS that takes only register operands for Aarch64.
The original patch applied cleanly.
Testing: the defect seems to be latent for JDK11+ and does not require additional verification tests, regression done with 'make test TEST=hotspot_all';;;","2021-11-08 06:14;yan;Fix request (11u):
on behalf of Alexey Pavlutkin --

The original patch prevents using an output of Shift-n-Add operation as input for CAS that takes only register operands for Aarch64.
The original patch applied cleanly.
Testing: the defect seems to be latent for JDK11+ and does not require additional verification tests, regression done with 'make test TEST=hotspot_all' ;;;","2021-11-09 05:39;yan;Fix request (13u, 15u):
on behalf of Alexey Pavlutkin --

The original patch prevents using an output of Shift-n-Add operation as input for CAS that takes only register operands for Aarch64.
The original patch applied cleanly.
Testing: the defect seems to be latent for JDK11+ and does not require additional verification tests, regression done with 'make test TEST=hotspot_all' ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SEGV at read_string_field(oopDesc*, char const*, JavaThread*)+0x54",JDK-8270491,5054153,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mgronlun,ecaspole,ecaspole,2021-07-14 15:05,2021-08-03 15:23,2023-10-01 09:57,2021-07-27 10:15,17,,,,,,,17,hotspot,,0,jdk17-fix-request,jdk17-fix-yes,noreg-hard,,,,,,,,,,,,,,,"Happened in a test app using Spring Boot. Happens from 17-b28, not with earlier versions.


Stack: [0x00007faea9947000,0x00007faea9a48000],  sp=0x00007faea9a449c0,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x819634]  read_string_field(oopDesc*, char const*, JavaThread*)+0x54
V  [libjvm.so+0x81b0ea]  JfrDCmd::argument_info_array() const+0x18a
V  [libjvm.so+0xb225f5]  jmm_GetDiagnosticCommandArgumentsInfo+0x2a5
C  [libmanagement_ext.so+0x1fd4]  getDiagnosticCommandArgumentInfoArray+0x54
C  [libmanagement_ext.so+0x23cf]  Java_com_sun_management_internal_DiagnosticCommandImpl_getDiagnosticCommandInfo+0x15f
j  com.sun.management.internal.DiagnosticCommandImpl.getDiagnosticCommandInfo([Ljava/lang/String;)[Lcom/sun/management/internal/DiagnosticCommandInfo;+0 jdk.management@17-ea
j  com.sun.management.internal.DiagnosticCommandImpl.getMBeanInfo()Ljavax/management/MBeanInfo;+36 jdk.management@17-ea
j  com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getNewMBeanClassName(Ljava/lang/Object;)Ljava/lang/String;+13 java.management@17-ea
j  com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(Ljava/lang/Object;Ljavax/management/ObjectName;)Ljavax/management/ObjectInstance;+10 java.management@17-ea
j  com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(Ljava/lang/Object;Ljavax/management/ObjectName;)Ljavax/management/ObjectInstance;+10 java.management@17-ea
j  java.lang.management.ManagementFactory.lambda$addMXBean$7(Ljava/lang/Object;Ljavax/management/MBeanServer;Ljavax/management/ObjectName;)Ljava/lang/Void;+60 java.management@17-ea
j  java.lang.management.ManagementFactory$$Lambda$211+0x8000000f4.run()Ljava/lang/Object;+12 java.management@17-ea
j  java.security.AccessController.executePrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;Ljava/lang/Class;)Ljava/lang/Object;+29 java.base@17-ea
j  java.security.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;+9 java.base@17-ea
j  java.lang.management.ManagementFactory.addMXBean(Ljavax/management/MBeanServer;Ljava/lang/String;Ljava/lang/Object;)V+13 java.management@17-ea
j  java.lang.management.ManagementFactory.lambda$getPlatformMBeanServer$1(Ljava/util/Map$Entry;)V+18 java.management@17-ea
j  java.lang.management.ManagementFactory$$Lambda$210+0x8000000f3.accept(Ljava/lang/Object;)V+4 java.management@17-ea
j  java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Ljava/lang/Object;)V+5 java.base@17-ea
j  java.util.Collections$2.tryAdvance(Ljava/util/function/Consumer;)Z+29 java.base@17-ea
j  java.util.Collections$2.forEachRemaining(Ljava/util/function/Consumer;)V+2 java.base@17-ea
j  java.util.stream.ReferencePipeline$Head.forEach(Ljava/util/function/Consumer;)V+12 java.base@17-ea
j  java.util.stream.ReferencePipeline$7$1.accept(Ljava/lang/Object;)V+41 java.base@17-ea
j  java.util.stream.ReferencePipeline$2$1.accept(Ljava/lang/Object;)V+21 java.base@17-ea
j  java.util.HashMap$ValueSpliterator.forEachRemaining(Ljava/util/function/Consumer;)V+145 java.base@17-ea
j  java.util.stream.AbstractPipeline.copyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)V+32 java.base@17-ea
j  java.util.stream.AbstractPipeline.wrapAndCopyInto(Ljava/util/stream/Sink;Ljava/util/Spliterator;)Ljava/util/stream/Sink;+13 java.base@17-ea
j  java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;)Ljava/lang/Void;+3 java.base@17-ea
j  java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;)Ljava/lang/Object;+3 java.base@17-ea
",,,,,,,,,,,JDK-8271664,JDK-8271358,JDK-8271801,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268702,,,,,,,,,,,,x86_64,,,,,,,b28,,,linux,,,,"0|i2tm5f:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-07-14 15:19;cjplummer;I did a quick scan of all JDK 17 b27 and b28 changes and nothing caught my attention. How sure are you that it doesn't reproduce with any version before 28 and does on versions after b28?;;;","2021-07-15 08:39;ecaspole;Yes, it never happens with b27. If they still exist I will try some builds between b27 and b28 from mdash.;;;","2021-07-15 12:48;cjplummer;Thanks for tracking it down. Looks like a jfr issue.;;;","2021-07-21 03:28;mgronlun;Fix Request:

We should fix this in JDK17 so the VM does not crash in case of an unhandled OOME.

The fix is low risk.

Review mail: https://mail.openjdk.java.net/pipermail/hotspot-jfr-dev/2021-July/002907.html

Change has been reviewed by: egahlin

Testing: regular jdk_jfr tests + perfstartup ;;;","2021-07-21 03:42;mgronlun;ILW = HMM = P2

Happens as part of MBeanServer initialization and is orthogonal to JFR being enabled.;;;","2021-07-21 16:50;kvn;I will wait PR reviews before approving it.;;;","2021-07-27 08:57;kvn;Fix request for JDK 17 is approved.
;;;","2021-07-27 10:15;roboduke;Changeset: f6621273
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-07-27 17:14:04 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/f662127390eac6d44581ffca444556d236983314
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebKit 612.1 build fails with Visual Studio 2017,JDK-8270479,5054140,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kcr,kcr,kcr,2021-07-14 09:14,2021-12-18 07:05,2023-10-01 09:57,2021-07-20 07:45,8,jfx11,jfx18,,,,,jfx18,javafx,,0,sn_97,sn_98,,,,,,,,,,,,,,,,"The latest version of WebKit, v612.1, no longer builds with VS 2017. There is one compilation error that is trivial to resolve, but after fixing that locally, it fails during linking.

Here is the compilation error:

$ gradle -PCOMPILE_WEBKIT=true sdk
../jfx/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp(1222): error C2398: Element '1': conversion from 'const int' to 'float' requires a narrowing conversion
../jfx/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp(1229): error C2398: Element '2': conversion from 'const int' to 'float' requires a narrowing conversion
../jfx/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp(1230): error C2398: Element '2': conversion from 'const int' to 'float' requires a narrowing conversion
../jfx/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp(1232): error C2398: Element '1': conversion from 'const int' to 'float' requires a narrowing conversion
../jfx/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp(1232): error C2398: Element '2': conversion from 'const int' to 'float' requires a narrowing conversion
../jfx/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp(1233): error C2398: Element '2': conversion from 'const int' to 'float' requires a narrowing conversion
../jfx/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp(1240): error C2398: Element '2': conversion from 'const int' to 'float' requires a narrowing conversion
../jfx/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp(1249): error C2398: Element '1': conversion from 'const int' to 'float' requires a narrowing conversion
../jfx/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp(1250): error C2398: Element '1': conversion from 'const int' to 'float' requires a narrowing conversion
../jfx/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp(1250): error C2398: Element '2': conversion from 'const int' to 'float' requires a narrowing conversion
../jfx/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp(1252): error C2398: Element '1': conversion from 'const int' to 'float' requires a narrowing conversion
../jfx/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp(1253): error C2398: Element '1': conversion from 'const int' to 'float' requires a narrowing conversion

The fix is simply the following:

--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorOverlay.cpp
@@ -1195,8 +1195,8 @@ void InspectorOverlay::drawLayoutLabel(GraphicsContext& context, String label, F
     FontCascade font(WTFMove(fontDescription), 0, 0);
     font.update(nullptr);

-    constexpr auto padding = 4;
-    constexpr auto arrowSize = 4;
+    constexpr auto padding = 4.0f;
+    constexpr auto arrowSize = 4.0f;
     float textHeight = font.fontMetrics().floatHeight();
     float textDescent = font.fontMetrics().floatDescent();

After applying that fix, here is the link error that we get:

[1967/1981] Linking CXX shared library bin/jfxwebkit.dll
FAILED: bin/jfxwebkit.dll lib/jfxwebkit.lib 
cmd.exe /C ""cd . && jfx/buildSrc/build/build-tools/cmake-3.13.3-win32-x86/cmake-3.13.3-win32-x86/bin/cmake.exe -E vs_link_dll --intdir=Source/WebKitLegacy/CMakeFiles/WebKitLegacy.dir --manifests  -- jfx/buildSrc/build/build-tools/devkit-windows_x64-VS2017-15.9.24+1.0.tar/VC/bin/x64/link.exe /nologo @CMakeFiles/WebKitLegacy.rsp  /out:bin/jfxwebkit.dll /implib:lib/jfxwebkit.lib /pdb:bin/jfxwebkit.pdb /dll /version:0.0 /machine:x64 /DEBUG /OPT:ICF /OPT:REF /INCREMENTAL:NO /INCREMENTAL:NO jfx/modules/javafx.web/build/win/Release/WebCore/obj/version.res   && cd .""
LINK: command ""jfx/buildSrc/build/build-tools/devkit-windows_x64-VS2017-15.9.24+1.0.tar/VC/bin/x64/link.exe /nologo @CMakeFiles/WebKitLegacy.rsp /out:bin/jfxwebkit.dll /implib:lib/jfxwebkit.lib /pdb:bin/jfxwebkit.pdb /dll /version:0.0 /machine:x64 /DEBUG /OPT:ICF /OPT:REF /INCREMENTAL:NO /INCREMENTAL:NO jfx/modules/javafx.web/build/win/Release/WebCore/obj/version.res /MANIFEST /MANIFESTFILE:bin/jfxwebkit.dll.manifest"" failed (exit code 1169) with the following output:
WebStorageNamespaceProvider.cpp.obj : error LNK2005: ""public: static class WebCore::PartialOrdering const WebCore::PartialOrdering::less"" (?less@PartialOrdering@WebCore@@2V12@B) already defined in StorageAreaImpl.cpp.obj
WebStorageNamespaceProvider.cpp.obj : error LNK2005: ""public: static class WebCore::PartialOrdering const WebCore::PartialOrdering::equivalent"" (?equivalent@PartialOrdering@WebCore@@2V12@B) already defined in StorageAreaImpl.cpp.obj
...
WebCoreTestSupport.lib(MockPageOverlay.cpp.obj) : error LNK2005: ""public: static class WebCore::PartialOrdering const WebCore::PartialOrdering::greater"" (?greater@PartialOrdering@WebCore@@2V12@B) already defined in StorageAreaImpl.cpp.obj
WebCoreTestSupport.lib(MockPageOverlay.cpp.obj) : error LNK2005: ""public: static class WebCore::PartialOrdering const WebCore::PartialOrdering::unordered"" (?unordered@PartialOrdering@WebCore@@2V12@B) already defined in StorageAreaImpl.cpp.obj
Creating library lib/jfxwebkit.lib and object lib/jfxwebkit.exp
bin/jfxwebkit.dll : fatal error LNK1169: one or more multiply defined symbols found
ninja: build stopped: subcommand failed.

See the attached log for the complete list of link errors.

It's possibly related to the following comment:

https://github.com/openjdk/jfx/blob/master/modules/javafx.web/src/main/native/Source/WebCore/dom/Node.h#L746

There are two possible solutions for jfx11u:

1. Find a solution to the VS 2017 link issue. We would then fix it in mainline (and 8u) and backport it to 11 along with the backport of WebKit 612.1.
2. Update jfx11u to use VS 2019. This will require solving a long-standing problem where we don't ship the microsoft DLLs in our jmod bundles to avoid the jlink error described in JDK-8207015. Basically our solution to that was to rely on the DLLs in the JDK, which only works if the JDK has the same or newer version of Visual Studio. This means if we update to VS 2019 a jlinked application using JDK 11.0.x and JavaFX 11.0.x will no longer run unless we ship the DLLs (in a separate directory to avoid reintroducing JDK-8207015).

Solution 1 will likely be the easiest, so is probably what we should do for October. We eventually need solution 2 anyway, since it will become increasingly difficult, to build newer WebKit libraries with VS 2017.
","Windows 10
Visual Studio 2017 15.9.24
",,,,,,,,,,JDK-8272641,JDK-8271138,JDK-8273854,,,,,,,,,,,,,,,,,,,JDK-8268849,,,,,JDK-8278983,,,,,,"2021-07-14 09:14;kcr;webkit-link-error.txt;https://bugs.openjdk.org/secure/attachment/95497/webkit-link-error.txt",,,,,,,,,,,,,,,,,,,,"0|i2tm2j:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-07-14 09:37;kcr;The following inline constant variables in Node.h are the ones that the VS 2017 linker is complaining about:

inline constexpr PartialOrdering PartialOrdering::less(Type::Less);
inline constexpr PartialOrdering PartialOrdering::equivalent(Type::Equivalent);
inline constexpr PartialOrdering PartialOrdering::greater(Type::Greater);
inline constexpr PartialOrdering PartialOrdering::unordered(Type::Unordered);
;;;","2021-07-14 11:32;kcr;It seems that VS 2017 doesn't fully support inline constants, even though it claims to support C++17 which is where they were introduced. They specifically claim that support for inline constant variables was added in VS2017 15.5 [1].

[1] https://docs.microsoft.com/en-us/cpp/overview/visual-cpp-language-conformance?view=msvc-160;;;","2021-07-14 16:06;kcr;I'm testing a trivial fix now, which is to move the definition of the 4 constant variables in question to Node.cpp as runtime constants.;;;","2021-07-20 07:45;roboduke;Changeset: 8aaacb5b
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-07-20 14:44:13 +0000
URL:       https://git.openjdk.java.net/jfx/commit/8aaacb5bd5368d544c4c468f85ce9ed4dbf26d07
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] bytecode testing API does not emit Q type descriptors,JDK-8270477,5054137,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dsimms,dsimms,dsimms,2021-07-14 08:35,2021-09-14 01:16,2023-10-01 09:57,2021-09-14 01:16,repo-valhalla,,,,,,,repo-valhalla,other-libs,,0,lw3,lworld,,,,,,,,,,,,,,,,"Bytecode testing needs updating to correctly emit Q type descriptors with the return to L/Q<type> descriptors (result of ""lqagain"" work)

Affected instructions when given ""<type>.val.class"":
* anewarray
* checkcast
* instanceof
* ldc

Test library in it's current form doesn't support ""ldc(Class<?>)"", and since the verification of the produced bytecode is pretty messy for a test library on still prototype JVMS changes, manual inspection can suffice for now",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tm1v:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@79d0c3d2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestRangeCheckEliminated fails because methods are not compiled,JDK-8270468,5054128,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-07-14 06:08,2022-03-09 02:08,2023-10-01 09:57,2021-07-15 12:54,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,testbug,,,,,,,,,,,,"The threshold at which methods are compiled varies between different platforms and different HotSpot variants. On certain platforms, no methods are compiled for this test case, which makes the test fail.

The test assumes that on every platform, the threshold is < 600.

On client VMs for ARM, the default threshold is 1500.",,,,,,,,,,,JDK-8282865,JDK-8282236,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263707,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tlzv:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-14 08:01;chagedorn;ILW = Wrong compile threshold causing the test to fail on some platforms, single test, no workaround = MLH = P4;;;","2021-07-15 12:54;roboduke;Changeset: bb82005a
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-07-15 19:53:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bb82005a8102dd5bb2fa2abc5c2f7255d6969e9e
;;;","2022-03-08 11:29;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-03-08 11:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/208
Date: 2022-03-08 19:31:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZGC: Invalid oop passed to ZBarrierSetRuntime::load_barrier_on_oop_array,JDK-8270461,5054121,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2021-07-14 05:36,2021-08-10 00:22,2023-10-01 09:57,2021-07-21 23:00,17,18,,,,,,17,hotspot,,0,c2,c2-intrinsic,hs-comp-triaged,jdk17-fix-request,jdk17-fix-yes,oracle-triage-11,oracle-triage-18,regression,zgc,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fb7fb168fde, pid=43855, tid=43856
#
# JRE version: Java(TM) SE Runtime Environment (17.0+27) (fastdebug build 17-ea+27-LTS-2476)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+27-LTS-2476, mixed mode, tiered, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a21fde]  unsigned long ZBarrier::mark<false, true, false, true>(unsigned long)+0x9e
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /oracle/valhalla2/open/JTwork/scratch/core.43855)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,Test::test -XX:CompileCommand=print,Test::test -XX:+UseZGC -XX:-UseCompressedClassPointers -Xbatch -Xmx128m Test

Host: prometheus, Intel(R) Core(TM) i7-9850H CPU @ 2.60GHz, 12 cores, 31G, Ubuntu 20.04.2 LTS
Time: Wed Jul 14 13:47:07 2021 CEST elapsed time: 0.228490 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007fb7f402b910):  JavaThread ""main"" [_thread_in_Java, id=43856, stack(0x00007fb7f94ec000,0x00007fb7f95ed000)]

Stack: [0x00007fb7f94ec000,0x00007fb7f95ed000],  sp=0x00007fb7f95eb740,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1a21fde]  unsigned long ZBarrier::mark<false, true, false, true>(unsigned long)+0x9e
V  [libjvm.so+0x1a4963b]  ZBarrierSetRuntime::load_barrier_on_oop_array(oop*, unsigned long)+0xdb
v  ~StubRoutines::oop_disjoint_arraycopy_uninit",,,,,,,,,,,JDK-8271638,JDK-8271176,JDK-8271782,,,,,,,,,,,,,,,,,,,JDK-8268125,,,,,JDK-8271925,,,,,,"2021-07-14 05:38;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/95495/Test.java",,,,,,,,,,,,,,,,,,,,"0|i2tlyb:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-07-14 05:37;thartmann;Found this while investigating ZGC crashes with project Valhalla. To reproduce, run attached regression test with:
java -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,Test::test -XX:+UseZGC -XX:-UseCompressedClassPointers -Xbatch -Xmx128m Test;;;","2021-07-14 05:39;thartmann;ILW = Crash in ZGC code due to invalid oop, easy to reproduce with -XX:-UseCompressedClassPointers, -XX:DisableIntrinsic=_clone or use different GC = HMM = P2;;;","2021-07-14 05:41;thartmann;Introduced/triggered by JDK-8268125 in JDK 17.;;;","2021-07-20 23:54;thartmann;Fix Request
This fixes a regression in JDK 17 introduced by JDK-8268125. The risk is low because the fix only affects an edge case with ZGC. The fix has been tested at tier1-5 + hs-precheckin-comp. The fix has been reviewed by Vladimir Kozlov.
https://git.openjdk.java.net/jdk17/pull/252;;;","2021-07-21 10:25;kvn;Fix request for JDK 17 is approved.;;;","2021-07-21 23:00;roboduke;Changeset: 4119a52c
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-07-22 05:59:12 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4119a52c4b3d30d7e02e6f987f61121a90758876
;;;","2021-08-05 15:18;epavlova;Regression test compiler/arraycopy/TestObjectArrayClone.java  passed jdk17 ATR.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[IR Framework] Add missing compilation level restriction when using FlipC1C2 stress option,JDK-8270447,5054101,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,chagedorn,chagedorn,2021-07-14 00:25,2023-09-20 00:18,2023-10-01 09:57,2021-07-26 00:56,17,18,repo-valhalla,,,,,18,hotspot,,0,c2,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,lw3,lworld,noreg-self,,,,,,,,,,,"The newly converted IR tests (JDK-8263024) are not yet stable when using various IR framework stress options like -DExcludeRandom or -DFlipC1C2. These tests needs to be fixed. There could also be a bug in the IR framework when using these options.

Edit: Turns out the FlipC1C2 option forgets to restrict the compilation level once a C1 compilation is replaced with a C2 compilation and vice verca. This results in an error when the test is run with -XX:-TieredCompilation or -XX:TieredStopAtLevel=1,2,3.",,,,,,,,,,,JDK-8313835,JDK-8316570,JDK-8313451,,,,,,,,,,,,,,,,,,,JDK-8263024,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tltv:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-22 00:34;chagedorn;ILW = Runtime exception when using FlipC1C2 stress option with restrictions to the compilation level, only with FlipC1C2 in combination with -XX:-TieredCompilation or -XX:TieredStopAtLevel=1,2,3, no workaround = MLH = P4;;;","2021-07-26 00:56;roboduke;Changeset: 36aefa35
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-07-26 07:54:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/36aefa351afeb5fd6b87060e06c1e8060afb87a0
;;;","2023-09-15 03:58;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport.
SAP nightly testing passed.;;;","2023-09-15 04:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1747
Date: 2023-09-15 11:05:22 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""Cores to use"" output in configure is misleading",JDK-8270438,5053441,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,webbuggrp,webbuggrp,2021-07-06 04:57,2021-09-01 18:48,2023-10-01 09:57,2021-08-30 06:42,11,17,,,,,,18,infrastructure,,0,build-infra,redhat-interest,webbug,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When building the JDK and running `configure` the output includes (example):
>Build performance summary:
>* Cores to use: 4
>* Memory limit: 32768 MB 

The ""Cores to use"" value is misleading; it is not actually the number of cores specified using `--with-num-cores`, but instead the number of jobs, which (unless explicitly specified), is calculated based on the available memory and the number of cores, see:
- https://github.com/openjdk/jdk/blob/e47803a84feb6d831c6c6158708d29b4fffc99c9/make/autoconf/help.m4#L277
- https://github.com/openjdk/jdk/blob/e47803a84feb6d831c6c6158708d29b4fffc99c9/make/autoconf/build-performance.m4#L141-L145

Requested change:
In the output replace the text ""Cores to use"" with ""Number of parallel jobs"" (or similar)


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2thr7:",9223372036854775807,b13,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-07-13 22:21;adev;While building JDK performance summary is produced.
As can be seen from https://github.com/openjdk/jdk/blob/e47803a84feb6d831c6c6158708d29b4fffc99c9/make/autoconf/build-performance.m4#L141-L145, the build performance summary should use ""number of jobs"" rather than ""number of cores"" as the number of jobs may not only depend upon number of cores but on memory size too.;;;","2021-08-30 06:42;roboduke;Changeset: fbffa54e
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-08-30 13:41:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fbffa54efe447a4c911af2be1d7774a8c60d6ede
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UT: MonitorUsedDeflationThresholdTest failed: did not find too_many string in output,JDK-8270435,5054080,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,mseledtsov,mseledtsov,2021-07-13 18:24,2022-12-12 14:12,2023-10-01 09:57,2021-11-24 20:29,17,,,,,,,18,hotspot,,0,atr,investigate-UT,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sync,,,,,,,,,,,,"This issue was discovered when running in JDK 17 ATR using ""common-usage-tracker"" task definition, running on a UT-enabled host. 
(UT = Usage Tracker)

Test that failed: runtime/Monitor/MonitorUsedDeflationThresholdTest.java",,,,,,,,,,,JDK-8283159,JDK-8280849,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298606,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tlp7:",9223372036854775807,b26,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-13 18:26;mseledtsov;[1.128s][info][monitorinflation ] begin deflating: in_use_list stats: ceiling=12, count=51, max=51
[1.128s][info][monitorinflation ] before handshaking: unlinked_count=16, in_use_list stats: ceiling=12, count=35, max=51
[1.128s][info][monitorinflation ] after handshaking: in_use_list stats: ceiling=12, count=35, max=51
[1.128s][info][monitorinflation ] deflated 16 monitors in 0.0000216 secs
[1.128s][info][monitorinflation ] end deflating: in_use_list stats: ceiling=12, count=35, max=51
[2.128s][info][safepoint,cleanup] updating inline caches, 0.0000456 secs
[2.128s][info][safepoint,cleanup] compilation policy safepoint handler, 0.0000001 secs
[2.128s][info][safepoint,cleanup] safepoint cleanup tasks, 0.0001329 secs
[2.128s][info][safepoint,stats  ] Cleanup                      [             11               0 ][            11802     140606       8596     161004 ]               0
Done delaying for 10 secs.
[10.447s][info][safepoint,cleanup] updating inline caches, 0.0000011 secs
[10.447s][info][safepoint,cleanup] compilation policy safepoint handler, 0.0000001 secs
[10.448s][info][safepoint,cleanup] safepoint cleanup tasks, 0.0000848 secs
[10.484s][info][monitorinflation ] begin deflating: in_use_list stats: ceiling=10, count=35, max=51
[10.484s][info][monitorinflation ] deflated 33 monitors in 0.0000343 secs
[10.484s][info][monitorinflation ] end deflating: in_use_list stats: ceiling=10, count=2, max=51
[10.484s][info][monitorinflation ] begin deflating: in_use_list stats: ceiling=10, count=2, max=51
[10.484s][info][monitorinflation ] end deflating: in_use_list stats: ceiling=10, count=2, max=51
[10.484s][info][monitorinflation ] Checking in_use_list:
[10.484s][info][monitorinflation ] count=2, max=51
[10.484s][info][monitorinflation ] in_use_count=2 equals ck_in_use_count=2
[10.484s][info][monitorinflation ] in_use_max=51 equals ck_in_use_max=51
[10.484s][info][monitorinflation ] No errors found in in_use_list checks.
[10.484s][info][monitorinflation ] In-use monitor info:
[10.484s][info][monitorinflation ] (B -> is_busy, H -> has hash code, L -> lock status)
[10.484s][info][monitorinflation ]            monitor  BHL              object         object type
[10.484s][info][monitorinflation ] ==================  ===  ==================  ==================
[10.484s][info][monitorinflation ] 0x00007f6124000c70  100  0x00000000ffd207b0  java.lang.ref.ReferenceQueue$Lock (is_busy: waiters=1, contentions=0owner=0x0000000000000000, cxq=0x0000000000000000, EntryList=0x0000000000000000)
[10.484s][info][monitorinflation ] 0x00007f6144001bb0  100  0x00000000ffd02f40  java.lang.ref.ReferenceQueue$Lock (is_busy: waiters=1, contentions=0owner=0x0000000000000000, cxq=0x0000000000000000, EntryList=0x0000000000000000)
[10.485s][info][safepoint,stats  ] None                                 1
[10.485s][info][safepoint,stats  ] Cleanup                              1
[10.485s][info][safepoint,stats  ] Verify                              18
[10.485s][info][safepoint,stats  ] Maximum sync time  4254643 ns
[10.485s][info][safepoint,stats  ] Maximum vm operation time (except for Exit VM operation)  22303520 ns
];
 stderr: []
 exitValue = 0

java.lang.RuntimeException: Did not find too_many string in output.

	at MonitorUsedDeflationThresholdTest.main(MonitorUsedDeflationThresholdTest.java:109)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test;;;","2021-07-20 11:17;mseledtsov;ILW = MLM = P4;;;","2021-11-22 14:22;dcubed;Here's a forced log output section from a passing run:

Exceeded inflate_count=33
Delaying for 10 secs.
[1.063s][info][safepoint,cleanup] updating inline caches, 0.0000221 secs
[1.063s][info][safepoint,cleanup] compilation policy safepoint handler, 0.0000002 secs
[1.063s][info][safepoint,cleanup] safepoint cleanup tasks, 0.0000932 secs
[1.063s][info][safepoint,stats  ] VM Operation                 [ threads: total initial_running ][ time:       sync    cleanup       vmop      total ] page_trap_count
[1.063s][info][safepoint,stats  ] Cleanup                      [             11               0 ][            27168     133387      11874     172429 ]               0
[1.089s][info][monitorinflation ] begin deflating: in_use_list stats: ceiling=12, count=37, max=37
[1.089s][info][monitorinflation ] before handshaking: unlinked_count=2, in_use_list stats: ceiling=12, count=35, max=37
[1.089s][info][monitorinflation ] after handshaking: in_use_list stats: ceiling=12, count=35, max=37
[1.089s][info][monitorinflation ] deflated 2 monitors in 0.0000154 secs
[1.089s][info][monitorinflation ] end deflating: in_use_list stats: ceiling=12, count=35, max=37
[2.093s][info][monitorinflation ] begin deflating: in_use_list stats: ceiling=12, count=35, max=37
[2.093s][info][monitorinflation ] end deflating: in_use_list stats: ceiling=12, count=35, max=37
[3.098s][info][monitorinflation ] begin deflating: in_use_list stats: ceiling=12, count=35, max=37
[3.098s][info][monitorinflation ] end deflating: in_use_list stats: ceiling=12, count=35, max=37
[4.103s][info][monitorinflation ] begin deflating: in_use_list stats: ceiling=12, count=35, max=37
[4.103s][info][monitorinflation ] end deflating: in_use_list stats: ceiling=12, count=35, max=37
[5.108s][info][monitorinflation ] Too many deflations without progress; bumping in_use_list_ceiling from 12 to 41
Done delaying for 10 secs.
[10.198s][info][safepoint,cleanup] updating inline caches, 0.0000010 secs

Here's the log output from the failing run:

Exceeded inflate_count=33
Delaying for 10 secs.
[1.128s][info][monitorinflation ] begin deflating: in_use_list stats: ceiling=12, count=51, max=51
[1.128s][info][monitorinflation ] before handshaking: unlinked_count=16, in_use_list stats: ceiling=12, count=35, max=51
[1.128s][info][monitorinflation ] after handshaking: in_use_list stats: ceiling=12, count=35, max=51
[1.128s][info][monitorinflation ] deflated 16 monitors in 0.0000216 secs
[1.128s][info][monitorinflation ] end deflating: in_use_list stats: ceiling=12, count=35, max=51
[2.128s][info][safepoint,cleanup] updating inline caches, 0.0000456 secs
[2.128s][info][safepoint,cleanup] compilation policy safepoint handler, 0.0000001 secs
[2.128s][info][safepoint,cleanup] safepoint cleanup tasks, 0.0001329 secs
[2.128s][info][safepoint,stats  ] Cleanup                      [             11               0 ][            11802     140606       8596     161004 ]               0
Done delaying for 10 secs.
[10.447s][info][safepoint,cleanup] updating inline caches, 0.0000011 secs

For some reason the failing run only did ONE deflation cycle instead of ONE every second
until ""Too many deflations without progress; bumping in_use_list_ceiling from 12 to 41""
happened.;;;","2021-11-22 14:31;dcubed;Hmmm... The test relies on there being enough deflation attempts that don't make
progress to trigger:

    ""Too many deflations without progress; bumping in_use_list_ceiling from 12 to 41"" 

but I don't think there's anything to force the deflation to actually happen if
the Monitor Deflation Thread gets starved (for example)...;;;","2021-11-23 10:49;dcubed;I checked the algorithm used by the Monitor Deflation Thread and I don't
think starvation is the issue. Here's the relevant policy:

src/hotspot/share/runtime/synchronizer.cpp:

// monitors_used_above_threshold() policy is as follows:
//
// The ratio of the current _in_use_list count to the ceiling is used
// to determine if we are above MonitorUsedDeflationThreshold and need
// to do an async monitor deflation cycle. The ceiling is increased by
// AvgMonitorsPerThreadEstimate when a thread is added to the system
// and is decreased by AvgMonitorsPerThreadEstimate when a thread is
// removed from the system.
//
// Note: If the _in_use_list max exceeds the ceiling, then
// monitors_used_above_threshold() will use the in_use_list max instead
// of the thread count derived ceiling because we have used more
// ObjectMonitors than the estimated average.
//
// Note: If deflate_idle_monitors() has NoAsyncDeflationProgressMax
// no-progress async monitor deflation cycles in a row, then the ceiling
// is adjusted upwards by monitors_used_above_threshold().
//
// Start the ceiling with the estimate for one thread in initialize()
// which is called after cmd line options are processed.

In the passing case, we have log lines that look like this:

 [2.093s][info][monitorinflation ] begin deflating: in_use_list stats: ceiling=12, count=35, max=37 

So the current count == 35 and the max that the list has seen is 37. Because max == 37,
the ceiling == 12 doesn't get used because max is greater than the ceiling. Here's the
snippet from the policy:

// Note: If the _in_use_list max exceeds the ceiling, then
// monitors_used_above_threshold() will use the in_use_list max instead
// of the thread count derived ceiling because we have used more
// ObjectMonitors than the estimated average.

So the math in this case is 35 / 37 => .9459 and that ratio (* 100) exceeds
MonitorUsedDeflationThreshold (default == 90) and we get our
once per second deflation attempts.

In the failing case, the log lines look like this:

[1.128s][info][monitorinflation ] begin deflating: in_use_list stats: ceiling=12, count=51, max=51
[1.128s][info][monitorinflation ] before handshaking: unlinked_count=16, in_use_list stats: ceiling=12, count=35, max=51
[1.128s][info][monitorinflation ] after handshaking: in_use_list stats: ceiling=12, count=35, max=51
[1.128s][info][monitorinflation ] deflated 16 monitors in 0.0000216 secs
[1.128s][info][monitorinflation ] end deflating: in_use_list stats: ceiling=12, count=35, max=51 

Again we have a ""max"" greater than our derived celiing == 12. And the ratio in
this case is 51 / 51 => 1 and that ratio (* 100) exceeds MonitorUsedDeflationThreshold
(default == 90) so we get our first deflation.

However, after that our ratio is 35 / 51 => .6862 and that ratio (* 100) DOES NOT
exceed MonitorUsedDeflationThreshold (default == 90) so we don't get a second
deflation cycle until after our delay has expired and we release the monitors that
we were holding.;;;","2021-11-23 14:08;dcubed;The test makes some assumptions about how many monitors are in
use by the test program and, in the non-UsageTracker case, those
assumptions are correct. However, when UsageTracker is in use,
it looks like 14 more inflated monitors get created (ouch!) and that's
enough of an increase to affect the monitors_used_above_threshold()
algorithm.

;;;","2021-11-24 09:32;dcubed;runtime/Monitor/MonitorUsedDeflationThresholdTest.java is executed in
Mach5 Tier[1678]. It looks like Tier7 is where tier7-common-usage-tracker
is executed on windows-x64 and macosx-x64. All of the other tasks are
non-UT tasks.

[~mseledtsov] - I'm not finding a tier7-common-usage-tracker on linux-x64
in the JDK18 CI. I did find it in the JDK17 ATR. The failure sightings are
all on linux-x64 in ATR runs.
;;;","2021-11-24 20:29;roboduke;Changeset: 21e302a0
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-11-25 04:27:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/21e302a0f4cbf3ace907c36d871a2f2cf6277188
;;;","2021-12-01 08:15;dcubed;[~mseledtsov] - The way I read that code snippet, we should be seeing
linux-x64 running tier7-common-usage-tracker in Tier7. However, I didn't
see that... what am I missing here?;;;","2022-03-14 05:34;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-03-14 05:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/250
Date: 2022-03-14 12:38:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
JDI+UT: Unexpected event in JDI tests,JDK-8270434,5054079,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,mseledtsov,mseledtsov,2021-07-13 18:13,2023-04-20 00:57,2023-10-01 09:57,2021-09-16 16:46,17,,,,,,,18,core-svc,,0,atr,investigate-UT,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,"Tests that failed:
  vmTestbase/nsk/jdi/EventIterator/nextEvent/nextevent001/TestDescription.java
  vmTestbase/nsk/jdi/EventRequestManager/methodEntryRequests/methentreq002/TestDescription.java

This issue was discovered when running in JDK 17 ATR using ""common-usage-tracker"" task definition, running on a UT-enabled host.
It is entirely possible that this test is incompatible with UT. ",,,,,,,,,,,JDK-8306202,JDK-8305232,JDK-8306495,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tloz:",9223372036854775807,b16,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-07-13 18:16;mseledtsov;# ERROR: ##> debugger: ERROR: new event is not ThreadStartEvent: ThreadDeathEvent in thread UsageTracker
The following stacktrace is for failure analysis.
nsk.share.TestFailure: ##> debugger: ERROR: new event is not ThreadStartEvent: ThreadDeathEvent in thread UsageTracker
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.JDIBase.log3(JDIBase.java:69)
	at nsk.jdi.EventIterator.nextEvent.nextevent001.testRun(nextevent001.java:351)
	at nsk.jdi.EventIterator.nextEvent.nextevent001.runTest(nextevent001.java:242)
	at nsk.jdi.EventIterator.nextEvent.nextevent001.runThis(nextevent001.java:178)
	at nsk.jdi.EventIterator.nextEvent.nextevent001.run(nextevent001.java:109)
	at nsk.jdi.EventIterator.nextEvent.nextevent001.main(nextevent001.java:102)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
--> debugger: waiting for VMDeathEvent
# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** EXCEPTION while waiting for event ** : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** TIMEOUT while waiting for event **
# ERROR: ##> debugger: test phase has not finished normally: debuggee is still alive
--> debugger: ......forcing: vm.exit();
TEST FAILED;;;","2021-07-13 18:16;mseledtsov;# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** event 'MethodEntryEvent@java.util.Collections$2:4840 in thread UsageTracker' IS NOT a breakpoint **
The following stacktrace is for failure analysis.
nsk.share.TestFailure: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** event 'MethodEntryEvent@java.util.Collections$2:4840 in thread UsageTracker' IS NOT a breakpoint **
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.JDIBase.log3(JDIBase.java:69)
	at nsk.jdi.EventRequestManager.methodEntryRequests.methentreq002.runTest(methentreq002.java:214)
	at nsk.jdi.EventRequestManager.methodEntryRequests.methentreq002.runThis(methentreq002.java:144)
	at nsk.jdi.EventRequestManager.methodEntryRequests.methentreq002.run(methentreq002.java:90)
	at nsk.jdi.EventRequestManager.methodEntryRequests.methentreq002.main(methentreq002.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
# ERROR: ##> debugger: test phase has not finished normally: debuggee is still alive
--> debugger: ......forcing: vm.exit();
TEST FAILED;;;","2021-09-16 16:46;roboduke;Changeset: 8c022e2c
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-09-16 23:45:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8c022e2c174cca2b03e8fdf4fadad42bc11c65f1
;;;","2023-04-19 06:46;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-04-19 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1276
Date: 2023-04-19 13:49:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test build/AbsPathsInImage.java fails after JDK-8259848,JDK-8270422,5054064,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,erikj,dholmes,dholmes,2021-07-13 15:34,2021-07-15 10:40,2023-10-01 09:57,2021-07-14 06:24,17,18,,,,,,17,infrastructure,,0,tier3,,,,,,,,,,,,,,,,,"java.lang.Exception: Test failed
	at AbsPathsInImage.main(AbsPathsInImage.java:115)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

I can't see any actual error messages of any kind.",,,,,,,,,,,JDK-8270766,JDK-8270514,,,,,,,,,,,,,,,,,,,,JDK-8259848,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,"0|i2tlln:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-07-13 21:07;dholmes;The output of this test is unparseable by human eye, it needs to be adjusted so that you can clearly see the patterns being looked for. It would also be useful if it could report which pattern unexpectedly matched.;;;","2021-07-13 22:55;erikj;I think the output is clear enough. The format is:

<filename in image>:
<strings that match patterns>

In this case the filename is the modules file in the image. After that the matched strings are all java command lines from the build. It looks like the .cmdline files from this build step are getting caught up in the image.;;;","2021-07-13 23:38;dholmes;So you're saying the output at the moment is itself an indication of the problem and normally it would be far more readable?;;;","2021-07-14 00:06;erikj;The matched strings are certainly much longer than I've ever encountered before. When I developed the test, the common failure was ""strings"" found in binaries, which were usually just a straight path to something, like a .debuginfo file or a header file. The line printed for each match tries to include the full ""string"", which is basically all the consecutive characters that can reasonably be considered characters (26 < c < 126). In this case that matches the full line in each cmdline file. I tried to keep the output of the test to the point, sensible and compact. Adding some explanations in the output could make it easier to interpret I suppose. ;;;","2021-07-14 00:31;erikj;The reason for the failure is that I introduced new marker files in the jdk/modules/jdk.javadoc dir. These new markers follow the new naming pattern we have established in the build (_*.marker). Since I'm using ExecuteWithLog, I'm also generating *.log and *.cmdline files in the same directory (basically _*.marker.log and _*.marker.cmdline). Previously, all marker and such log files in that directory (or any modules/<module> directory) followed an old standard (_the.*.log and _the.*.cmdline).

In CreateJmods.gmk, we have filters for various marker files to avoid letting them end up in the final image. These filters aren't currently handling the _*.marker.log or _*.marker.cmdline files. (But it does handle them for the old style with the longer '_the.*' prefix.

To fix this I propose we extend the current filter for maker files '_*.marker' to also catch any file with an arbitrary suffix after, so '_*.marker*'. I have verified through compare builds that no unintended files are matched by this.;;;","2021-07-14 06:24;roboduke;Changeset: 7b4d84c6
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-14 13:00:57 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/7b4d84c65487593cdbf841f7f2d359192476db99
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Finalize API for memory copy,JDK-8270376,5054015,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-07-13 09:53,2021-12-07 16:29,2023-10-01 09:57,2021-12-07 16:29,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,"When we introduced the MemoryCopy helper class, few issues were raised:

* the order of arguments diverges from that of other JDK APIs (although we acknowledged that there was no other API quite like this)

* the naming of parameters felt too heavy, as distinguishing between ""index"" and ""offset"" is probably good enough

* naming of the method seems too verbose as well, with copyFromArray and copyToArray - which can be inferred from position of arguments.

* it would probably be a good idea to add some limited support for complex memory segment copy in this class as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268743,JDK-8273905,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tlar:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,"2021-12-07 16:29;mcimadamore;This was addressed as part of JDK-8273905;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] GeneratedMethodAccessor contains incorrect cast,JDK-8270350,5053982,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,thartmann,thartmann,2021-07-13 00:47,2021-08-07 13:12,2023-10-01 09:57,2021-07-16 10:21,repo-valhalla,,,,,,,repo-valhalla,core-libs,,0,lw3,lworld,,,,,,,,,,,,,,,,"The GeneratedMethodAccessor for a reflective call to TestNewAcmp.testEq02_1 contains an incorrect cast to LMyValue1 instead of QMyValue1, leading to JIT crashes (JDK-8270352) because the generated bytecode is not verified:

45 checkcast 16 <compiler/valhalla/inlinetypes/MyValue1> 0
  256 bci: 45   ReceiverTypeData    count(0) nonprofiled_count(0) entries(1)
                                    'compiler/valhalla/inlinetypes/MyValue1'(5120 1,00)
48 invokevirtual 10 <compiler/valhalla/inlinetypes/TestNewAcmp.testEq02_1(Qcompiler/valhalla/inlinetypes/MyValue1;Qcompiler/valhalla/inlinetypes/MyValue1;)Z> 
  312 bci: 48   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'compiler/valhalla/inlinetypes/TestNewAcmp'(5120 1,00)
                argument types      0: stack(1) 'compiler/valhalla/inlinetypes/MyValue1'
                                    1: stack(2) 'compiler/valhalla/inlinetypes/MyValue1'
51 invokestatic 52 <java/lang/Boolean.valueOf(Z)Ljava/lang/Boolean;> 

The following change ""fixes"" the problem:

index 72bc6eb6e63..c34ce441441 100644
--- a/src/java.base/share/classes/jdk/internal/reflect/MethodAccessorGenerator.java
+++ b/src/java.base/share/classes/jdk/internal/reflect/MethodAccessorGenerator.java
@@ -341,7 +341,7 @@ class MethodAccessorGenerator extends AccessorGenerator {
         for (int i = 0; i < parameterTypes.length; i++) {
             Class<?> c = parameterTypes[i];
             if (!isPrimitive(c)) {
-                asm.emitConstantPoolUTF8(getClassName(c, false));
+                asm.emitConstantPoolUTF8(getClassName(c, true));
                 asm.emitConstantPoolClass(asm.cpi());
             }
         }


45 checkcast 16 <Qcompiler/valhalla/inlinetypes/MyValue1;> 1
  256 bci: 45   ReceiverTypeData    count(0) nonprofiled_count(0) entries(1)
                                    'compiler/valhalla/inlinetypes/MyValue1'(5120 1,00)
48 invokevirtual 10 <compiler/valhalla/inlinetypes/TestNewAcmp.testEq02_1(Qcompiler/valhalla/inlinetypes/MyValue1;Qcompiler/valhalla/inlinetypes/MyValue1;)Z> 
  312 bci: 48   VirtualCallData     count(0) nonprofiled_count(0) entries(1)
                                    'compiler/valhalla/inlinetypes/TestNewAcmp'(5120 1,00)
                argument types      0: stack(1) 'compiler/valhalla/inlinetypes/MyValue1'
                                    1: stack(2) 'compiler/valhalla/inlinetypes/MyValue1'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270352,,,JDK-8267948,,,,,JDK-8270852,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tl3f:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2021-07-13 11:47;mchung;The CONSTANT_Class_info pointed by `checkcast` in the generated bytecode for core reflection needs to be updated for primitive classes to use a valid ReferenceType descriptor [1].

In addition, the VM classFileParser needs to temporarily special cases for jdk/internal/reflect classes to allow the use of ReferenceType descriptor even the class file version is 49 until JDK-8266010 is fixed.

[1] http://cr.openjdk.java.net/~dlsmith/jep401/jep401-20210702/specs/primitive-objects-jvms.html#jvms-4.4.1
;;;","2021-07-13 17:49;mchung;Suggested temporary fix:

diff --git a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
index dc5564d13b9..2e92558139c 100644
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -5177,7 +5177,8 @@ void ClassFileParser::verify_legal_class_name(const Symbol* name, TRAPS) const {
         p = skip_over_field_name(bytes, true, length);
         legal = (p != NULL) && ((p - bytes) == (int)length);
       }
-    } else if (_major_version >= CONSTANT_CLASS_DESCRIPTORS && bytes[length - 1] == ';' ) {
+    } else if ((_major_version >= CONSTANT_CLASS_DESCRIPTORS || _class_name->starts_with(""jdk/internal/reflect/""))
+                   && bytes[length - 1] == ';' ) {
       // Support for L...; and Q...; descriptors
       legal = verify_unqualified_name(bytes + 1, length - 2, LegalClass);
     } else {
diff --git a/src/java.base/share/classes/jdk/internal/reflect/MethodAccessorGenerator.java b/src/java.base/share/classes/jdk/internal/reflect/MethodAccessorGenerator.java
index 72bc6eb6e63..c34ce441441 100644
--- a/src/java.base/share/classes/jdk/internal/reflect/MethodAccessorGenerator.java
+++ b/src/java.base/share/classes/jdk/internal/reflect/MethodAccessorGenerator.java
@@ -341,7 +341,7 @@ class MethodAccessorGenerator extends AccessorGenerator {
         for (int i = 0; i < parameterTypes.length; i++) {
             Class<?> c = parameterTypes[i];
             if (!isPrimitive(c)) {
-                asm.emitConstantPoolUTF8(getClassName(c, false));
+                asm.emitConstantPoolUTF8(getClassName(c, true));
                 asm.emitConstantPoolClass(asm.cpi());
             }
         };;;","2021-07-13 17:50;mchung;To reproduce the failure: run test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNewAcmp.java  with -XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0 -DVerifyIR=false -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbatch -XX:TypeProfileLevel=222 -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestNewAcmp::test* -XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestNewAcmp::cmp*;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Session resumption errors,JDK-8270344,5053974,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,coffeys,shadowbug,shadowbug,2021-07-12 22:48,2022-11-07 03:52,2023-10-01 09:57,2021-08-20 13:11,11,18,6u131,7,8,,,18,security-libs,,0,bugdb_33107647,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,licbug,sustaining,,,,"Summary of submitter's issue:

In a TLS session resumption scenario, the connection fails in following scenario if using JDK 7u/6u

Server started and configured to use TLSv1 only
Client started and sends ClientHello with TLSv1.2 request
Server responds with ServerHello using TLSv1
Connection succeeds and proceeds using TLSv1
Clients sleeps
Server restarted to use TLSv1.2 only.
Client attempts a session resumption
ClientHello contains TLSv1 protocol version request.
Server now rejects this request:

Exception in thread ""main"" javax.net.ssl.SSLHandshakeException: Client requested protocol TLSv1 not enabled or not supported
    at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)
    at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1897)
    at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:300)
    at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:290)
    at sun.security.ssl.ServerHandshaker.clientHello(ServerHandshaker.java:506)
    at sun.security.ssl.ServerHandshaker.processMessage(ServerHandshaker.java:222)
    at sun.security.ssl.Handshaker.processLoop(Handshaker.java:1009)
    at sun.security.ssl.Handshaker.process_record(Handshaker.java:930)
",,,,,,,,,,,JDK-8273035,JDK-8272845,JDK-8273208,JDK-8273252,JDK-8273990,JDK-8275741,JDK-8296464,JDK-8296123,JDK-8296121,,,,,,,,,,,,,,,,,,JDK-8272653,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tl1n:",9223372036854775807,b12,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,Verified,,"2021-07-14 04:48;coffeys;Legacy JDKs will resume a session using the known server protocol version level. I've found verbiage in the TLS spec that allows the behaviour of the current JDK6/7 releases. To clarify, 6u/7u currently re-use the KNOWN protocol version available to server when resuming a session. I guess it's very rare for a server to change supported protocol version during lifetime of a TLS session.

see https://datatracker.ietf.org/doc/html/rfc5246#appendix-E :

==

>    Whenever a client already knows the highest protocol version known to
>    a server (for example, when resuming a session), it SHOULD initiate
>    the connection in that native protocol.
==

As a result, I'm not sure if we this can be viewed as a JDK issue. In newer JDK 8u261 and later releases, there's a new extension field which can better communicate what versions are supported by the client[1]. That allows for TLSv1.2 to be used in the session resume attempt in above test scenario.

[1]

    ""supported_versions (43)"": {
      ""versions"": [TLSv1.2, TLSv1.1, TLSv1]
    };;;","2021-07-14 04:51;coffeys;Need more info from submitter around why this is perceived as a JDK issue.;;;","2021-07-27 02:17;coffeys;The JDK should ensure that the SSLSession is invalidated when a fatal alert is issued.;;;","2021-08-20 13:11;roboduke;Changeset: 04a806ec
Author:    Sean Coffey <coffeys@openjdk.org>
Date:      2021-08-20 20:10:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/04a806ec86a388b8de31d42f904c4321beb69e14
;;;","2021-08-23 08:38;coffeys;Fix Request
A patch to help TLS interoperability. Long standing issue but more so when dealing with TLS servers using old JDK family versions (e.g. JDK 7u)
I plan to port to 11u-oracle/8u-oracle/7u-oracle also.;;;","2021-09-17 05:32;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly except empty line removal in TransportContext.java. Review: https://github.com/openjdk/jdk11u-dev/pull/370;;;","2022-04-08 03:44;sqetools;verified;;;","2022-10-31 03:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/296
Date: 2022-10-31 10:31:03 +0000;;;","2022-10-31 03:40;yan;Fix request (13u,15u):
backporting for parity with LTS releases. Clean port for 15u; in 13u, dropped the change in TransportContext.java (removal of an empty line).;;;","2022-10-31 03:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/422
Date: 2022-10-31 10:38:12 +0000;;;","2022-10-31 06:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/151
Date: 2022-10-31 13:32:22 +0000;;;","2022-11-04 23:21;abakhtin;Fix request (8u):
backporting for parity with Oracle and other LTS releases.
It is an almost clean backport.
All related tests passed;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
Test serviceability/dcmd/gc/HeapDumpAllTest.java timed-out,JDK-8270341,5053972,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,dholmes,dholmes,2021-07-12 21:48,2021-08-05 10:22,2023-10-01 09:57,2021-07-29 17:58,17.0.2,18,,,,,,18,hotspot,,0,intermittent,noreg-self,tier1,tier3,tier5,,,,,,,,,,,,,"----------System.out:(24/3072)----------
Running DCMD 'GC.heap_dump -all=true /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S57031/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41ecc2d-f67c-4b25-a04e-2a38524bd72f/runs/fdbf71d6-b87c-4fa1-9fb2-3e46d8e53735/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/scratch/4/jcmd.gc.heap_dump.1626150322118.hprof' through 'PidJcmdExecutor'
Executing command '[/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+6-224/linux-x64-debug.jdk/jdk-18/fastdebug/bin/jcmd, 9161, GC.heap_dump -all=true /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S57031/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41ecc2d-f67c-4b25-a04e-2a38524bd72f/runs/fdbf71d6-b87c-4fa1-9fb2-3e46d8e53735/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/scratch/4/jcmd.gc.heap_dump.1626150322118.hprof]'
[2021-07-13T04:25:22.201008442Z] Gathering output for process 9787
[2021-07-13T04:25:25.043604686Z] Waiting for completion for process 9787
[2021-07-13T04:25:25.044397206Z] Waiting for completion finished for process 9787
Output and diagnostic info for process 9787 was saved into 'pid-9787-output.log'
[2021-07-13T04:25:25.058008685Z] Waiting for completion for process 9787
[2021-07-13T04:25:25.058168798Z] Waiting for completion finished for process 9787
Command returned with exit code 0
---------------- stdout ----------------
9161:
Dumping heap to /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S57031/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41ecc2d-f67c-4b25-a04e-2a38524bd72f/runs/fdbf71d6-b87c-4fa1-9fb2-3e46d8e53735/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/scratch/4/jcmd.gc.heap_dump.1626150322118.hprof ...
Heap dump file created [57745701 bytes in 2.089 secs]

---------------- stderr ----------------

----------------------------------------

test HeapDumpTest.pid(): success
Running DCMD 'GC.heap_dump -overwrite -all=true /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S57031/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41ecc2d-f67c-4b25-a04e-2a38524bd72f/runs/fdbf71d6-b87c-4fa1-9fb2-3e46d8e53735/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/scratch/4/jcmd.gc.heap_dump.1626150441581.hprof' through 'PidJcmdExecutor'
Executing command '[/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+6-224/linux-x64-debug.jdk/jdk-18/fastdebug/bin/jcmd, 9161, GC.heap_dump -overwrite -all=true /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S57031/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41ecc2d-f67c-4b25-a04e-2a38524bd72f/runs/fdbf71d6-b87c-4fa1-9fb2-3e46d8e53735/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_serviceability/scratch/4/jcmd.gc.heap_dump.1626150441581.hprof]'
[2021-07-13T04:27:21.584184853Z] Gathering output for process 19898
[2021-07-13T04:27:30.038506495Z] Waiting for completion for process 19898
[2021-07-13T04:27:30.038666
result: Error. Agent error: java.lang.Exception: Agent 24 timed out with a timeout of 600 seconds; check console log for any additional details
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267666,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tl17:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2021-07-27 11:56;cjplummer;The test appears to still be processing the hprof file when it times out:

""AgentVMThread"" #122 prio=5 os_prio=0 cpu=568924.04ms elapsed=632.91s allocated=1245M defined_classes=508 tid=0x00007fb1d0575c40 nid=956930 runnable  [0x00007fb1b45e1000]
   java.lang.Thread.State: RUNNABLE
Thread: 0x00007fb1d0575c40  [0xe9a02] State: _at_safepoint _at_poll_safepoint 0
   JavaThread state: _thread_blocked
	at java.lang.Object.hashCode(java.base@18-ea/Native Method)
	at java.util.HashMap.hash(java.base@18-ea/HashMap.java:337)
	at java.util.HashMap.getNode(java.base@18-ea/HashMap.java:567)
	at java.util.HashMap.get(java.base@18-ea/HashMap.java:555)
	at jdk.test.lib.hprof.model.JavaHeapObject.setupReferers(JavaHeapObject.java:91)
	at jdk.test.lib.hprof.model.Snapshot.resolve(Snapshot.java:298)
	at jdk.test.lib.hprof.HprofParser.parse(HprofParser.java:87)
	at jdk.test.lib.hprof.HprofParser.parse(HprofParser.java:54)
	at HeapDumpTest.verifyHeapDump(HeapDumpTest.java:71)
	at HeapDumpTest.run(HeapDumpTest.java:64)
	at HeapDumpTest.pidRewrite(HeapDumpTest.java:95)

It's not clear if it is stuck in some infinite loop due to a corrupt hprof file, or if it just needs more time.;;;","2021-07-27 11:58;cjplummer;Here's another stack, also still processing the hprof file. This seems to be the most common backtrace. It's odd that's it's always in the read0() frame. I would expect more variety of stack traces if it was still processing the hprof file and not actually stuck.

""AgentVMThread"" #23 prio=5 os_prio=31 cpu=471757.80ms elapsed=500.27s allocated=735M defined_classes=726 tid=0x00007fc6a6007a20 nid=25603 runnable  [0x000070000c333000]
   java.lang.Thread.State: RUNNABLE
Thread: 0x00007fc6a6007a20  [0x6403] State: _at_safepoint _at_poll_safepoint 0
   JavaThread state: _thread_blocked
	at java.io.RandomAccessFile.read0(java.base@18-ea/Native Method)
	at java.io.RandomAccessFile.read(java.base@18-ea/RandomAccessFile.java:365)
	at java.io.RandomAccessFile.readInt(java.base@18-ea/RandomAccessFile.java:837)
	at java.io.RandomAccessFile.readLong(java.base@18-ea/RandomAccessFile.java:875)
	at jdk.test.lib.hprof.parser.FileReadBuffer.getLong(FileReadBuffer.java:87)
	- locked <0x000000078031aac0> (a jdk.test.lib.hprof.parser.FileReadBuffer)
	at jdk.test.lib.hprof.model.JavaLazyReadObject.longAt(JavaLazyReadObject.java:156)
	at jdk.test.lib.hprof.model.JavaLazyReadObject.objectIdAt(JavaLazyReadObject.java:130)
	at jdk.test.lib.hprof.model.JavaObjectArray.readValue(JavaObjectArray.java:159)
	at jdk.test.lib.hprof.model.JavaLazyReadObject.getValue(JavaLazyReadObject.java:81)
	at jdk.test.lib.hprof.model.JavaObjectArray.getElements(JavaObjectArray.java:90)
	at jdk.test.lib.hprof.model.JavaObjectArray.visitReferencedObjects(JavaObjectArray.java:106)
	at jdk.test.lib.hprof.model.Snapshot.calculateReferencesToObjects(Snapshot.java:323)
	at jdk.test.lib.hprof.model.Snapshot.resolve(Snapshot.java:291)
	at jdk.test.lib.hprof.HprofParser.parse(HprofParser.java:87)
	at jdk.test.lib.hprof.HprofParser.parse(HprofParser.java:54)
	at HeapDumpTest.verifyHeapDump(HeapDumpTest.java:71)
	at HeapDumpTest.run(HeapDumpTest.java:64)
	at HeapDumpTest.pidRewrite(HeapDumpTest.java:95);;;","2021-07-27 12:11;cjplummer;1st failure was July 12th. Failed 1 to 4 times a day until July 22nd when it was problem listed. Note it was not problem listed on aarch64 and is now failing there also.

Seems to be happening on all platforms. Seems to happen with a variety of VM arguments.;;;","2021-07-27 12:40;cjplummer;The pidRewrite() test was introduced by JDK-8267666 on July 12th, so that seems to be the culprit.;;;","2021-07-27 12:43;cjplummer;This bug needs to be addressed in 18 since it is a regression and causes the test to be problem listed. We don't have much coverage for heap dump testing.;;;","2021-07-28 09:25;cjplummer;I wonder if the issue is related to having the test process create the hprof file, but then a separate process is writing to it. Maybe there is some delay in the creation that interferes with the process writing to the file.;;;","2021-07-28 12:05;akozlov;I also would not dump a hypothesis the timeout just needs to be increased do to e.g. fastdebug build. In the two stack traces CPU time approaches the total elapsed time. In the case of internal deadlocks I would expect much smaller CPU time.

""AgentVMThread"" #122 prio=5 os_prio=0 cpu=568924.04ms elapsed=632.91s allocated=1245M defined_classes=508 tid=0x00007fb1d0575c40 nid=956930 runnable [0x00007fb1b45e1000]
""AgentVMThread"" #23 prio=5 os_prio=31 cpu=471757.80ms elapsed=500.27s allocated=735M defined_classes=726 tid=0x00007fc6a6007a20 nid=25603 runnable [0x000070000c333000]

;;;","2021-07-28 12:35;cjplummer;My thinking was that the hprof file is corrupt and is resulting in some sort of infinite loop while verifying it, which would be consistent with your observation of the thread's CPU time being close to the total time. Also, we only see this issue when using -overwrite, even though the heap dumping is the same for both modes. However...

Looking at the history of this test before the -overwite test case was added, it usually took well under 1 minute, often just 10-20 seconds. However, I do see many cases of it taking a few minutes, and even over 6 minutes. There are a lot of runs taking more than 4 minutes. I'm not sure of the cause of the drastic difference in run times for this test, but since the test is now doing double the work, it does seem reasonable to assume this increases the chances of exceeding the 8 minutes timeout, so probably doubling the timeout is reasonable.

Note that the default jtreg timeout is 120 seconds, but we 4x it for most runs (and I believe 10x for -Xcomp runs). So 120 x 4 is why we are seeing the timeout after 480 seconds. Using /timeout=240 will double the timeout, effectively giving the test 960 (or more) seconds to run.;;;","2021-07-29 00:57;akozlov;Thank you for looking at the test history! On my local machine it indeed takes around the minute and there is nothing like that big distribution of results.

How can I test the increasing of the timeout? I can create a fix with the `/timeout=240` and the test removed from ProblemList, then wait for a few test cycles pass.;;;","2021-07-29 11:01;cjplummer;I'm going to see if I can reproduce it somewhat reliably, and if I can then I'll confirm that /timeout=240 fixes it.;;;","2021-07-29 12:05;cjplummer;I noticed many of the failures were with runs using -XX:+CheckUnhandledOops. Seems to timeout about 20% of the time.;;;","2021-07-29 12:43;cjplummer;timeout=240 seems to work. I'll just assign this to myself since I already have the changes in place.;;;","2021-07-29 17:58;roboduke;Changeset: 77fbd99f
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-07-30 00:57:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/77fbd99f792c42bb92a240d38f35e3af25500f99
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] Fix initialization in NonbranchyTree,JDK-8270336,5053966,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2021-07-12 18:58,2022-03-10 05:44,2023-10-01 09:57,2021-07-22 11:18,18,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,"The NonbranchyTree might call initTree() twice and incorrectly reports branchiness in the case of IllegalArgumentException(...).
",,,,,,,,,,,JDK-8281516,JDK-8282964,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tkzv:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-07-22 11:18;roboduke;Changeset: 3cadc360
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2021-07-22 18:17:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3cadc3606073f0efc2e97dda348ffb65c41dad0c
;;;","2022-03-09 06:46;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
SAP nightly testing passed.;;;","2022-03-09 06:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/218
Date: 2022-03-09 14:51:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] Error: Not a test or directory containing tests: java/awt/print/PrinterJob/InitToBlack.java,JDK-8270331,5053959,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2021-07-12 15:46,2023-08-15 22:06,2023-10-01 09:57,2022-03-23 19:56,17,,,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,"java/awt/print/PrinterJob/InitToBlack.java is a AWT manual test case. Running this test case fails with the below error. 
Error: Not a test or directory containing tests: java/awt/print/PrinterJob/InitToBlack.java 

After checking the test case found that this test case depends on the InitToBlack.html file. Also found that this class extends Applet. Since Applet is deprecated its better to remove Applet dependencies and remove html file dependencies. ",,,,,,,,,,,JDK-8290829,JDK-8313273,JDK-8310501,JDK-8313146,JDK-8313871,JDK-8314338,,,,,,,,,,,,,,,,JDK-8272166,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tkyb:",9223372036854775807,b16,,,,,,,,,,,,,"2021-07-12 15:47;landrews;This test case also misses @test ;;;","2022-03-17 15:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7860
Date: 2022-03-17 21:47:12 +0000;;;","2022-03-23 19:56;dukebot;Changeset: 2ef9767a
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-03-24 02:55:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2ef9767aae8e1798661fea615b096833bdb9d985
;;;","2023-07-16 20:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2042
Date: 2023-07-17 03:06:10 +0000;;;","2023-07-17 23:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1590
Date: 2023-07-18 06:03:47 +0000;;;","2023-07-25 02:06;andrewlu;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-07-25 02:08;andrewlu;Fix request [11u]

I backports this for parity with 11.0.21-oracle.
No risk, only a test change.
'String INSTRUCTION' is modified because of text block is not supported in 11.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Startup regressions in 18-b5 caused by JDK-8266310,JDK-8270321,5053946,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,avoitylov,ecaspole,ecaspole,2021-07-12 11:26,2022-04-28 03:49,2023-10-01 09:57,2021-07-30 09:11,18,,,,,,,18,core-libs,,0,perf-regression,,,,,,,,,,,,,,,,,Seems related to JDK-8266310,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266310,,,,,,,,,,,,,,,,,,,,,,,,b05,,,,,,,"0|i2tkvf:",9223372036854775807,b09,,,,,,,,,,,Verified,,"2021-07-16 14:52;mchung;Startup regression is due to the use of lambdas when loading the native libraries, jdk.internal.loader.NativeLibraries::loadLibrary that are called during startup.  This can be analyzed using bytestacks [1].   NativeLibraries::loadLibrary triggers the method handle machinery.

To reproduce, run a Noop program from a JAR file:

$ java -cp noop.jar Noop
 
[1] http://cr.openjdk.java.net/~redestad/bytestacks/bytecode-startup-analysis.html;;;","2021-07-16 14:59;mchung;Assign to Aleksei for further investigation.

The fix for JDK-8266310 relies on the atomicity guarantee by ConcurrentHashMap::computeIfPresent to remove the entry when no other thread is waiting to acquire the lock.  ;;;","2021-07-16 15:15;avoitylov;That's unexpected, sorry about that. To convince myself I reproduce it correctly, what is the % of regression you are witnessing with default JIT settings?;;;","2021-07-16 15:42;mchung;[~ecaspole] can provide details of the benchmarks and regression numbers and configuration.

To give you an idea the numbers I am seeing from the performance team report.   On Linux x64, the startup time regression is 30+% running G1 and ParGC and 3% running ZGC.  The footprint regression is 7-10% with different GCs.

We would need to avoid calling `computeIfPresent` and `computeIfAbsent` during early startup.  I did a quick prototype not to use lambda and confirm that the startup performance is comparable to before the fix for JDK-8266310.  ;;;","2021-07-19 11:55;avoitylov;My colleague, Sergey, has a fix using anonymous classes which fixes the startup regression, but it requires some more testing and care. He'll post it when testing is complete.;;;","2021-07-30 09:11;roboduke;Changeset: 5b3c4182
Author:    Sergey Chernyshev <serge.chernyshev@bell-sw.com>
Committer: Alexander Scherbatiy <alexsch@openjdk.org>
Date:      2021-07-30 16:10:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5b3c418249cfb53ae2ba530bcbbcdb5e509e4775
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8270110 committed invalid copyright headers,JDK-8270320,5053945,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,ihse,ihse,ihse,2021-07-12 11:24,2022-01-20 05:45,2023-10-01 09:57,2021-07-12 11:55,,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,The fix for JDK-8270110 added two new files with copyright headers that do not follow the prescribed format.,,,,,,,,,,,JDK-8273866,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tkv7:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-07-12 11:55;roboduke;Changeset: 353e9c86
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-07-12 18:54:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/353e9c8607e3a433aac786bd7b818d77ff75dd11
;;;","2021-07-13 09:47;sgehwolf;[~ihse] [~erikj] Could issues like this be checked with a bot?;;;","2021-07-13 12:46;ihse;[~sgehwolf] Sure. It could certainly fit well with Skara jcheck. Someone needs to write it, though... Do you happen to know any volunteers? ;-);;;","2021-07-13 19:39;dholmes;Adding such a check to jcheck has been discussed since jcheck was invented and the answer has always been that it isn't a straight-forward as you might think and is too hard/complex for jcheck to do.;;;","2022-01-19 17:39;roboduke;Changeset: 171e90cb
Author:    Fairoz Matte <fmatte@openjdk.org>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2021-09-16 05:33:08 +0000
URL:       https://git.openjdk.java.net/jdk17u/commit/171e90cbf5ad53296e7e7bca667e354e6f1cba02
;;;","2022-01-20 05:45;roboduke;Changeset: 171e90cb
Author:    Fairoz Matte <fmatte@openjdk.org>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2021-09-16 05:33:08 +0000
URL:       https://git.openjdk.java.net/jdk17u-dev/commit/171e90cbf5ad53296e7e7bca667e354e6f1cba02
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] enable -Xcomp run in test/jdk/valhalla/valuetypes/ObjectMethods.java,JDK-8270316,5053942,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2021-07-12 10:51,2021-07-12 11:00,2023-10-01 09:57,2021-07-12 11:00,repo-valhalla,,,,,,,repo-valhalla,core-libs,,0,lworld,testonly,,,,,,,,,,,,,,,,"diff --git a/test/jdk/valhalla/valuetypes/ObjectMethods.java b/test/jdk/valhalla/valuetypes/ObjectMethods.java
index b0a7f157251..1e1288f77a3 100644
--- a/test/jdk/valhalla/valuetypes/ObjectMethods.java
+++ b/test/jdk/valhalla/valuetypes/ObjectMethods.java
@@ -27,9 +27,6 @@
  * @summary test Object methods on primitive classes
  * @run testng/othervm -Xint -Dvalue.bsm.salt=1 ObjectMethods
  * @run testng/othervm -Dvalue.bsm.salt=1 -XX:InlineFieldMaxFlatSize=0 ObjectMethods
- */
-
-/* To be enabled by JDK-8267932
  * @run testng/othervm -Xcomp -Dvalue.bsm.salt=1 ObjectMethods
  */
 import java.lang.reflect.Modifier;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267932,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tkuj:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TreeTableCell: inconsistent naming for tableRow and tableColumn property methods,JDK-8270314,5053938,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-07-12 09:25,2021-12-08 06:19,2023-10-01 09:57,2021-07-20 13:53,8,jfx16,,,,,,jfx17,javafx,,0,sn_97,sn_98,,,,,,,,,,,,,,,,"In TreeTableCell there is a mismatch between name of the following property method vs the getter:

  tableRowProperty()
  getTreeTableRow()

the get method has ""Tree"" in the name while the property method does not.

Note that the corresponding methods for column are self-consistent, and are named without the ""tree"" in the name:

      tableColumnProperty()
      getTableColumn()

the docs are on a private field that *does* have tree in the name so there are no docs generated for the property.

Loosely related: the update methods for both row and column use ""TreeTable"" in the name:

    updateTreeTableColumn​()
    updateTreeTableRow​()

Once we figure out how to remedy this, we will need to deprecate the misnamed methods and add new methods with the correct name. We probably wouldn't deprecate the misnamed methods for removal (at least not right away), to give applications a better transition path.
",,,,,,,,,,,JDK-8271249,,,,,,,,,,,,,JDK-8270373,,,,,,,,,,,,,JDK-8278425,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tktn:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-07-12 10:07;kcr;Possible solutions:

1. Add Tree to all methods of the row and column properties

  tableRowProperty() --> treeTableRowProperty()

  tableColumnProperty() --> treeTableColumnProperty()
  getTableColumn() --> getTreeTableColumn()

This is the most consistent, but is slightly more intrusive in that changes 3 of the 4 public methods of the row and column properties.


2. Remove Tree from all methods of these properties

  getTreeTableRow() -> getTableRow()

This is a less intrusive change that only affects one method. While it makes the properties self-consistent and consistent with each other, the names are not what would be expected given the return type (TreeTableColumn and TreeTableRow), and are not consistent with the update methods. Also, for applications that don't use the property method, and only use the getter, it isn't any less change than the the first option.


I propose to go with option #1 for maximum consistency and further propose to deprecate *not for removal* the misnamed methods.

;;;","2021-07-13 05:25;kcr;In looking at this more closely, I am now convinced that option #2 is the better approach for the following reasons:

* TreeTablePosition extends TablePositionBase (which is also extended by TablePosition), and inherits a getTableColumn() method that is overridden with a covariant return type (using the type of the generic ""TC"" parameter) of TreeTableColumn.

* Although not public API, TreeTableCellBehavior extends TableCellBehaviorBase ( which is also extended by TableCellBehavior), and inherits inherits a getTableColumn() method that is overridden with a covariant return type of TreeTableColumn.

So option 2 is the one that will provide better consistency, in addition to being less intrusive.

Thus, the only change I am proposing to the public API is: getTreeTableRow() -> getTableRow() -- which I will do by deprecating (not for removal) the existing method and adding getTableRow() to match the property name.
;;;","2021-07-13 05:29;kcr;There are two more related inconsistencies in the property methods:

* The bean name of the tableColumn and tableRow properties is ""treeTableColumn"" and ""treeTableRow"", respectively, which does not match the property name. I will change these to match.

* The tableRowProperty() method returns the writable property by mistake rather than the read-only property. I will change it to return the read-only property.

I plan to add unit tests for the above problems.;;;","2021-07-20 13:53;roboduke;Changeset: 748f464a
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-07-20 20:52:44 +0000
URL:       https://git.openjdk.java.net/jfx/commit/748f464a7ada4ef1ae6ea3e81bfd592904451f8e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Error: Not a test or directory containing tests: java/awt/print/PrinterJob/XparColor.java,JDK-8270312,5053935,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2021-07-12 08:30,2022-08-01 01:44,2023-10-01 09:57,2021-08-17 00:45,,,,,,,,18,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,"java/awt/print/PrinterJob/XparColor.java is a AWT manual test case. Running this test case fails with the below error. 
Error: Not a test or directory containing tests: java/awt/print/PrinterJob/XparColor.java

After checking the test case found that this test case depends on the XparColor.html file. ",,,,,,,,,,,JDK-8290858,JDK-8291608,JDK-8291604,JDK-8290859,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tksz:",9223372036854775807,b11,,,,,,,,,,,,,"2021-08-17 00:45;roboduke;Changeset: c5c84b8f
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2021-08-17 07:44:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c5c84b8fdc0d52bc45ed7290011b39337f3bbe35
;;;","2022-07-28 07:24;goetz;Fix request [11u, 17u]

I backport this for parity with 11.0.17/17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test works. SAP nightly testing passed.;;;","2022-07-28 07:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/603
Date: 2022-07-28 14:25:09 +0000;;;","2022-07-28 07:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1280
Date: 2022-07-28 14:29:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: bad AD file after JDK-8267687,JDK-8270307,5053926,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,yyang,shade,shade,2021-07-12 06:39,2021-09-07 02:39,2023-10-01 09:57,2021-07-19 23:12,17,18,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk17-fix-request,jdk17-fix-yes,oracle-triage-11,oracle-triage-18,regression,,,,,,,,,,"Bisection shows that the attached Fuzzer test starts to fail after JDK-8267687. Note it reproduces even with JDK-8268883 that is both in JDK 17 and already merged to JDK 18 master. 

Unpack and run:
$ ../build/linux-x86_64-server-fastdebug/images/jdk/bin/java -Xmx512m -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test

Default case invoked for: 
   opcode  = 114, ""Con""
o1  Con  === o0  [[]]  #top

--N: o1  Con  === o0  [[]]  #top

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/matcher.cpp:1681
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/matcher.cpp:1681), pid=999395, tid=999408
#  assert(false) failed: bad AD file

",,,,,,,,,,,JDK-8270999,JDK-8271629,JDK-8271751,,,,,,,,,,,,,,,,,,,JDK-8267687,,,,,JDK-8252372,,,,,,"2021-07-12 06:39;shade;0006.zip;https://bugs.openjdk.org/secure/attachment/95463/0006.zip","2021-07-12 06:39;shade;hs_err_pid1006718.log;https://bugs.openjdk.org/secure/attachment/95465/hs_err_pid1006718.log","2021-07-12 06:39;shade;replay_pid1006718.log;https://bugs.openjdk.org/secure/attachment/95464/replay_pid1006718.log",,,,,,,,,,,,,,,,,,"0|i2tkqz:",9223372036854775807,b32,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-07-12 07:12;chagedorn;ILW = C2 assertion in matcher (recent regression in JDK 17 b26), with single Java Fuzzer test only, disable compilation of affected method = HMM = P2

[~yyang] can you take a look at it? Is this somehow related to JDK-8268883?;;;","2021-07-13 07:41;chagedorn;Hi [~yyang], I know it was only filed/assigned to you yesterday but do you already have an update about this bug? I just wanted to let you know that RDP 2 starts on Thursday. This means that you require an approval to fix it during that phase [1]. If you plan to defer it, it already requires an approval in the current RDP 1 phase since it's a P2 [2].

[1] https://openjdk.java.net/jeps/3#rdp-2
[2] https://openjdk.java.net/jeps/3#rdp-1
;;;","2021-07-13 07:57;yyang;Hi [~chagedorn], I've started it just now (I'm on vacation today). It seems that -XX:-SuperWordLoopUnrollAnalysis could suppress this crash, but it's a workaround.

I just give a quick investigation, it looks that one input of CMoveL(created(cloned) within PhaseIdealLoop::insert_post_loop) is transformed to Con#Top during IGVN after loop unrolling, which finally leads to a crash.;;;","2021-07-13 08:01;chagedorn;Okay, thanks for your quick response and the analysis! You still got time to fix it in RDP 2 with approval as it's a P2 (so you can enjoy your day off). Just wanted to give you a heads-up :-);;;","2021-07-16 02:53;yyang;Fix Request:

I think this is irrelevant to JDK-8267687, the following minimal test crashed in same assertion regardless of whether applying JDK-8267687 or not:


public class TestCMoveHasTopInput {
    public static boolean arr[] = new boolean[20];

    public void vMeth(long l) {
        for (int a = 2; a < 155; a++) {
            for (int b = 1; b < 10; ++b) {
                for (int c = 1; c < 2; c++) {
                    l += 3 * l;
                    arr[b - 1] = false;
                    switch (a) {
                        case 14:
                        case 17:
                            l -= b;
                            break;
                    }
                }
            }
        }
    }

    public static void main(String... args) {
        TestCMoveHasTopInput test = new TestCMoveHasTopInput();
        for (int i = 0; i < 10; i++) {
            test.vMeth(i);
        }
    }
} 

As [~chagedorn] evaluated, this is a P2 bug, which is somewhat important. We'd better fix it if we can.. As far as I see, the reason is that one input of ConvI2L becomes Top, which causes all nodes in the chain becoming Top, but this CMoveLNode does not change, only its input becomes Top. This CMoveLNode(CMove Binary(.. ..) (Binary .. Con#Top)) can not match any rules in the instruction selection phase and finally hits the assert. 

Proposed fix is:
diff --git a/src/hotspot/share/opto/movenode.cpp b/src/hotspot/share/opto/movenode.cpp
index f9b887c3173e..d7b445ea7687 100644
--- a/src/hotspot/share/opto/movenode.cpp
+++ b/src/hotspot/share/opto/movenode.cpp
@@ -155,6 +155,9 @@ const Type* CMoveNode::Value(PhaseGVN* phase) const {
   if (phase->type(in(Condition)) == Type::TOP) {
     return Type::TOP;
   }
+  if (phase->type(in(IfTrue)) == Type::TOP || phase->type(in(IfFalse)) == Type::TOP) {
+    return Type::TOP;
+  }
   const Type* t = phase->type(in(IfFalse))->meet_speculative(phase->type(in(IfTrue)));
   return t->filter(_type);
 }

This fix should not bring too much risk since it disables further optimizations if inputs of CMoveNode are type of Top.

Test passed under:
- test/hotspot/jtreg/compiler/c2
- github presubmit tests
- attached fuzzer test
- TestCMoveHasTopInput

I'm new to C2, not sure if it's a reasonable fix, looking forward to having more experts' comments about this.;;;","2021-07-16 06:26;chagedorn;Hi [~yyang], please also provide a risk estimate and what testing you performed. You also need to add the jdk17-fix-request label as stated in https://openjdk.java.net/jeps/3#Fix-Request-Process.;;;","2021-07-16 07:06;chagedorn;Attached test to the review starts to fail after JDK-8252372 but it seems to have just revealed a missing case.;;;","2021-07-18 19:18;yyang;Well, do you mean TestCMoveHasTopInput can not pass with JDK-8252372? I tested it locally and it passed w/o any problems after applying the proposed fix(linux_x64_slowdebug and linux_x64_release).

TestCMoveHasTopInput is extracted from generated fuzzer test, they behave the same, and hit the same assertions. So they should point to the same problem.
;;;","2021-07-18 22:06;kvn;[~yyang] You don't need to show fix in request. Instead, please file PR for JDK 17. Usually request is done after changes are reviewed already.
I added label with ""nmi” = “needs more information” to wait PR reviews.

Based on the fix the issue is old. And fix is simple and safe. I will approve it after PT for JDK 17 is filed and reviewed.
;;;","2021-07-18 22:53;yyang;I've created a PR that targeting to JDK 17. Thanks [~kvn] for the kind reminder.;;;","2021-07-19 00:28;chagedorn;[~yyang] My comment about JDK-8252372 was only for information purpose to where I could trace this bug back to (JDK-8252372) because you mentioned it fails even before JDK-8267687.;;;","2021-07-19 13:52;kvn;Fix request for JDK 17 is approved.;;;","2021-07-19 23:12;roboduke;Changeset: 0cec11d3
Author:    Yi Yang <yyang@openjdk.org>
Date:      2021-07-20 06:10:58 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/0cec11d3eb7393b76dbe1fbfe55a5f363824c1c4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,
NTLM authentication fails if HEAD request is used,JDK-8270290,5053899,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,akasko,akasko,akasko,2021-07-12 03:13,2022-09-01 14:15,2023-10-01 09:57,2021-09-30 08:24,11,17,18,8,,,,18,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,"When HEAD request to HTTPS resource is used with a proxy server that requires NTLM, authentication fails when server returns large (8kb+) body along with NTLMSSP_CHALLENGE response.

Failure example:

java.util.NoSuchElementException
	at java.base/java.util.StringTokenizer.nextToken(StringTokenizer.java:347)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.doTunneling0(HttpURLConnection.java:2191)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.doTunneling(HttpURLConnection.java:2136)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:181)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1665)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1589)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:224)

Problem happens because HttpURLConnection#reset() is called on NTLM stage 2 to consume (and discard) NTLMSSP_CHALLENGE response body. But reset() does not discard the body when the request method (of the initial client request) is HEAD. If HTTPS resource is requested (in this case CONNECT request is sent to proxy server to establish TLS tunnel) and NTLMSSP_CHALLENGE response size is larger than a buffer in BufferedInputStream, then status code of the following response (to NTLMSSP_AUTH request) cannot be read (because there is stale data in socket) and authentication fails.",,,,,,,,,,,JDK-8276710,JDK-8277898,JDK-8276867,JDK-8280033,JDK-8281145,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tkkz:",9223372036854775807,b18,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2021-09-30 08:24;roboduke;Changeset: 3e0d7c33
Author:    Alex Kasko <akasko@openjdk.org>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-09-30 15:21:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3e0d7c33d41a93496bfa6a47d1508e415930adf9
;;;","2021-11-03 14:41;akasko;Fix request (17u)

Clean backport of NTLM fix, test is included.;;;","2021-11-26 04:48;akasko;Fix request (11u)

Clean backport of NTLM fix, test is included. Backport to 11u is requested because this problem happens in the wild with some of the proxy servers.;;;","2022-01-11 09:29;akasko;Fix request (8u)

Backport to 8u is requested because this problem happens in the wild with some of the proxy servers.

Review approval: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2022-January/014494.html ;;;","2022-04-08 03:45;sqetools;verified;;;","2022-09-01 14:15;roboduke;Changeset: e613a3dc
Author:    Alex Kasko <akasko@openjdk.org>
Date:      2021-11-29 09:22:23 +0000
URL:       https://git.openjdk.org/shenandoah-jdk8u/commit/e613a3dc083fdcc1b2026f74facdc60b44efbf13
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com.sun.net.httpserver.spi.HttpServerProvider: remove use of deprecated API,JDK-8270286,5053895,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2021-07-12 02:37,2021-07-28 21:13,2023-10-01 09:57,2021-07-22 02:47,,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,The class uses the deprecated Class::newInstance() when loading the provider. This should be replaced with clazz.getDeclaredConstructor().newInstance().,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260539,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tkk3:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-07-22 02:47;roboduke;Changeset: 50bb7313
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-07-22 09:45:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/50bb7313a75e6e573549637763881ae3368b3ca0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
security/infra/java/security/cert/CertPathValidator/certification/LetsEncryptCA.java  OCSP response error,JDK-8270280,5053888,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rhalade,mbaesken,mbaesken,2021-07-12 00:14,2021-10-19 01:27,2023-10-01 09:57,2021-07-23 08:04,11,17,18,7,8,,,18,security-libs,,0,cac-issue,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,"For a few days, the test fails with :

Received exception: java.security.cert.CertPathValidatorException: OCSP response error: UNAUTHORIZED

exception is :

certpath: connecting to OCSP service at: http://r3.o.lencr.org
certpath: OCSP response status: UNAUTHORIZED
java.lang.RuntimeException: TEST FAILED: couldn't determine EE certificate status
	at ValidatePathWithParams.validate(ValidatePathWithParams.java:177)
	at LetsEncryptCA.main(LetsEncryptCA.java:179)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.security.cert.CertPathValidatorException: OCSP response error: UNAUTHORIZED
	at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:135)
	at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:224)
	at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:144)
	at java.base/sun.security.provider.certpath.PKIXCertPathValidator.engineValidate(PKIXCertPathValidator.java:83)
	at java.base/java.security.cert.CertPathValidator.validate(CertPathValidator.java:309)
	at ValidatePathWithParams.doCertPathValidate(ValidatePathWithParams.java:288)
	at ValidatePathWithParams.validate(ValidatePathWithParams.java:142)
	... 7 more
Caused by: java.security.cert.CertPathValidatorException: OCSP response error: UNAUTHORIZED
	at java.base/sun.security.provider.certpath.OCSPResponse.verify(OCSPResponse.java:389)
	at java.base/sun.security.provider.certpath.OCSP.check(OCSP.java:199)
	at java.base/sun.security.provider.certpath.RevocationChecker.checkOCSP(RevocationChecker.java:785)
	at java.base/sun.security.provider.certpath.RevocationChecker.check(RevocationChecker.java:369)
	at java.base/sun.security.provider.certpath.RevocationChecker.check(RevocationChecker.java:343)
	at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:125)
	... 13 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: TEST FAILED: couldn't determine EE certificate status
JavaTest Message: shutting down test

Should this be temporary excluded ?",,,,,,,,,,,JDK-8272830,JDK-8272624,JDK-8272711,JDK-8272947,JDK-8272690,JDK-8275491,,,,,,,,,,,,,,,,,,,,,JDK-8268678,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tkij:",9223372036854775807,b08,,,,,,,,,,,,,"2021-07-12 00:58;clanger;Maybe relates to this comment: https://bugs.openjdk.java.net/browse/JDK-8268678?focusedCommentId=14428573&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14428573 ?;;;","2021-07-15 16:46;rhalade;CA has updated the revoked test certificate so OCSP request on old one returns UNAUTHORIZED response.;;;","2021-07-23 08:04;roboduke;Changeset: f4b3ee5d
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2021-07-23 15:03:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f4b3ee5dca8cfdc2fbb8ee64a1e8cdb8894b0061
;;;","2021-08-18 00:48;tvoniadka;Fix request (17u):

Please approve backport to 17u. The test fails in 17u, and this would fix it. Patch applies clean, and test passes post fix.;;;","2021-10-18 07:53;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Fix applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deprecate for removal implementation methods in Scene,JDK-8270246,5053850,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kcr,kcr,kcr,2021-07-10 12:54,2021-07-19 11:53,2023-10-01 09:57,2021-07-16 04:32,9,jfx16,,,,,,jfx17,javafx,,0,regression,regression_8157295,sn_97,,,,,,,,,,,,,,,"The following methods in Scene were former ""impl_*"" method that were intended to be encapsulated as part of JDK-8157295 in JDK 9, but were mistakenly left as public:

    public void disposePeer()
    public void enableInputMethodEvents(boolean enable)
    public void processKeyEvent(KeyEvent e)

In the fix for JDK-8157295, the ""impl_"" prefix was removed, and the necessary accessors were added, but the ""public"" modifier was not removed.

We will deprecate these methods for removal with the intention to remove them from the public API in a future version of JavaFX.",,,,,,,,,,,JDK-8270843,,,,,,,,,,,,JDK-8270839,JDK-8270310,,,,,,,,JDK-8157295,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tka3:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2021-07-10 12:56;kcr;This will need a CSR.;;;","2021-07-16 04:32;roboduke;Changeset: 85014165
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-07-16 11:31:42 +0000
URL:       https://git.openjdk.java.net/jfx/commit/85014165a6e65c2357df2a26a873e6a25a9e1668
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macOS] Update named used for Java run loop mode,JDK-8270216,5053814,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,prr,prr,2021-07-09 16:12,2022-06-01 08:19,2023-10-01 09:57,2021-07-10 12:14,17,,,,,,,17,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jnf,noreg-hard,sn_97,,,,,,,,,"JDK 17 uses ""JavaRunLoopMode"" for the name of the NSRunLoop mode used when in a nested event loop.
Previously it used what JNF defined which was ""AWTRunLoopMode"".

Ideally we'd dispense with this special run mode entirely but that was out of scope for the JNF removal, and is out of scope for this stage of JDK 17.

So for now we can just switch it to use the same name as JNF used.

This is still considered internal implementation and it will just ""happen"" to work for applications which do the not very common thing of using native macOS code to jump on the Appkit main thread, using JNF, whilst AWT is in a nested event loop.

A follow-on bug to come up with a more supportable solution has been filed 
https://bugs.openjdk.java.net/browse/JDK-8270211",,,,,,,,,,,JDK-8273223,JDK-8270746,JDK-8270362,JDK-8273224,JDK-8273305,JDK-8287676,JDK-8270382,,,,,,,,,,,,,,,,,,,,JDK-8274596,JDK-8270211,JDK-8260616,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tk23:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-07-09 17:03;serb;Initially reported here:
https://mail.openjdk.java.net/pipermail/awt-dev/2021-June/018070.html;;;","2021-07-10 12:14;roboduke;Changeset: 25460065
Author:    Phil Race <prr@openjdk.org>
Date:      2021-07-10 19:12:59 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/254600658acbc5c40ae8f0de0d01c9906c67c46c
;;;","2021-08-31 13:24;vkempik;Fix Request(11u): Clean and simple backport. Applies cleanly. to be on par with oracle;;;","2021-08-31 13:24;vkempik;Fix Request(13u): Clean and simple backport. Applies cleanly. to be on par with jdk11u;;;","2021-08-31 13:24;vkempik;Fix Request(15u): Clean and simple backport. Applies cleanly. to be on par with jdk11u;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing build dependency between jdk.jfr-gendata and buildtools-hotspot,JDK-8270203,5053801,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,erikj,erikj,erikj,2021-07-09 12:43,2021-07-15 10:38,2023-10-01 09:57,2021-07-12 22:55,17,,,,,,,17,infrastructure,,0,,,,,,,,,,,,,,,,,,"When jdk.jfr was refactored a while back, new build logic for generating data files was added. The proper dependencies for this was never added to Main.gmk. A normal build usually succeeds anyway as make will run buildtools-hotspot very early anyway, but I ran into this while working on another bug where I wanted to build specific targets to save time.",,,,,,,,,,,JDK-8270427,JDK-8270751,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8246436,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tjz7:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-07-12 22:55;roboduke;Changeset: 0f329828
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2021-07-13 05:55:04 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/0f32982872eb1454e55390760b65beb5838afc55
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Most SA tests are skipped on macosx-aarch64 because all executables are signed,JDK-8270199,5053797,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2021-07-09 10:26,2023-09-04 02:43,2023-10-01 09:57,2022-01-26 11:25,17,18,,,,,,19,hotspot,,0,azul-interest,noreg-self,,,,,,,,,,,,,,,,"For any SA test that attaches to an OSX process (this would be all SA tests except for that test core file support), there is a check to make sure that the target jvm process is not a signed binary. If it is, SkippedException is thrown, and the test passes without doing anything. This is all we can do since being signed implied being notarized, and debuggers cannot attach to a notarized binary.

I recently just noticed that on macosx-aarch64, all our SA tests that attach to a process were being skipped because the binary was signed, even for debug builds. It turns out that for macosx-aarch64, the linker always ads what is known as ad-hoc signing. You can find some info on ad-hoc signing here:

https://eclecticlight.co/2020/08/22/apple-silicon-macs-will-require-signed-code/

The tests use the codesign tool to determine if the binary is signed. Normally the check just relies on getting an error code of 1 when not signed, but since all binaries are now signed on macosx-aarch64, we need to modify the check to ignore ad-hoc signing.

Using ""codesign --display"" on an an ad-hoc signed binary shows couple lines in the output that are of interest:

bash-3.2$ codesign --display --verbose=4 a.out
CodeDirectory v=20400 size=254 flags=0x20002(adhoc,linker-signed) hashes=5+0 location=embedded
Signature=adhoc

Whereas the output for a truly signed binary contains the following:

bash-3.2$ codesign --display --verbose=4 /Applications/Safari.app/
CodeDirectory v=20100 size=513 flags=0x2000(library-validation) hashes=9+5 location=embedded
Signature size=4442
Authority=Software Signing
Authority=Apple Code Signing Certification Authority
Authority=Apple Root CA
Signed Time=May 13, 2021 at 10:54:23 AM
Internal requirements count=1 size=64

I think looking for ""Signature=adhoc"" should be sufficient for detecting ad-hoc signed binaries. We should be able to do a debugger attach to these binaries since they can't be notarized.",,,,,,,,,,,JDK-8315403,JDK-8315628,,,,,,,,,,,,,,,,,,,,JDK-8269982,JDK-8254941,,,,JDK-8270326,JDK-8271512,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tjyb:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-07-09 14:59;vkempik;I believe this is wrong:

>I think looking for ""Signature=adhoc"" should be sufficient for detecting ad-hoc signed binaries. We should be able to do a debugger attach to these binaries since they can't be notarized.

looking for flags=0x10000(runtime) is the right approach ;;;","2021-07-10 14:28;cjplummer;In JDK-8269982 you said:

> ""notarization"" has not much to do with the issue. notarization is some process on Apple server which doesn't change you binaries.
> So you can have fully/properly signed JDK ( with hardened-runtime enabled) but not yet notarized, it will still fail to create core file.
> IMHO using word ""notarized"" here only leads to more confusion.
>The real ""enemy"" here is https://developer.apple.com/documentation/security/hardened_runtime which happen to be one of requirements for jdk to pass notrarization process 
;;;","2021-07-10 14:29;cjplummer;What really matters I believe is that the binary has the com.apple.security.get-task-allow entitlement, and a notarized binary cannot have this entitlement. I think this entitlement is added automatically by xcode, but at some point gets stripped out either before or during notarization.
;;;","2021-07-10 14:31;cjplummer;Regarding the flags, I'm looking at 4 different binaries and this is what I see:

-For the jdk debug binary I see flags=0x20002(adhoc,linker-signed) 
-For the jdk notarized product binary I see flags=0x10000(runtime)
-For Safari I see flags=0x2000(library-validation)
-For Garage Band I see flags=0x10200(kill,runtime)

So it looks like checking for flags=0x10000(runtime) makes sense since this is what our notarized binary has, but I wish understood the exact meaning of these flags a bit better. For example, why does ""runtime"" equate to having been notarized.
;;;","2021-07-12 10:51;cjplummer;I found the following, which describes the flags but does not give their values:

https://developer.apple.com/documentation/security/seccodesignatureflags

So ""runtime"" means that it is hardened.;;;","2021-07-12 10:57;vkempik;man codesign
...
OPTION FLAGS
....
 runtime  On macOS versions >= 10.14.0, opts signed processes into a hardened runtime environment which includes run-
              time code signing enforcement, library validation, hard, kill, and debugging restrictions.  These restric-
              tions can be selectively relaxed via entitlements. Note: macOS versions older than 10.14.0 ignore the pres-
              ence of this flag in the code signature.

then

https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution?language=objc
...
Prepare Your Software for Notarization
...
Enable the Hardened Runtime capability for your app and command line targets, as described in Enable hardened runtime.;;;","2022-01-18 15:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/6906
Date: 2021-12-21 06:17:25 +0000;;;","2022-01-26 11:25;roboduke;Changeset: 16e0ad0a
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-01-26 18:06:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/16e0ad0ad088af3ba1c9903ed8df60799a1ba651
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[11u] [JVMCI] JavaType.toJavaName() returns incorrect type name for lambdas,JDK-8270196,5053794,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2021-07-09 09:37,2021-08-05 05:02,2023-10-01 09:57,2021-07-13 03:23,11.0.12,,,,,,,11.0.13,hotspot,,0,15-na,17-na,18-na,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jvmci,oracle-triage-18,,,,,,,,,,"The implementation of JavaType.toJavaName() in JVMCI returns the wrong Java name for a lambda class. Example:

Supplier<Runnable> lambda = () -> () -> System.out.println(""run"");
ResolvedJavaType lambdaType = metaAccess.lookupJavaType(lambda.getClass());
lambdaType.toJavaName(); // returns wrong name here

This has been fixed in later JDKs with a JVMCI update via JDK-8225810 (JDK 14) which seems a lot more risky to backport than just the changes to MetaUtil.java which are only used internal to JVMCI.

Thus, I'm proposing to only backport MetaUtil.java changes from JDK-8225810 to OpenJDK 11u as it fixes a debuginfo generation issue in GraalVM/Mandrel.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8225810,,,,,JDK-8270184,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tjxn:",9223372036854775807,b01,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-09 11:08;sgehwolf;A regression test is being proposed for this via JDK-8270184. That test fails currently, passes after the patch.;;;","2021-07-09 12:16;dlong;ILW = MMH = P3;;;","2021-07-13 02:01;sgehwolf;Fix Request (OpenJDK 11u):

Please approve this OpenJDK 11u fix which is needed for proper debuginfo generation of Graal CE builds using plain OpenJDK 11u. This fixed functionality is covered by the regression test added via JDK-8270184 (which is also being applied for 11.0.13). Risk should be low since it's JVMCI-only and even there an internal change which shouldn't break anything else.

Review: https://git.openjdk.java.net/jdk11u-dev/pull/120;;;","2021-07-13 03:23;roboduke;Changeset: d4e48284
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-07-13 10:22:22 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/d4e48284954948c8b9ed667e2c7b69635362a1ae
;;;","2021-08-05 05:02;roboduke;Changeset: d4e48284
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-07-13 10:22:22 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/d4e48284954948c8b9ed667e2c7b69635362a1ae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] Add coverage for jvmci ResolvedJavaType.toJavaName() for lambdas,JDK-8270184,5053782,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2021-07-09 08:21,2021-07-19 14:17,2023-10-01 09:57,2021-07-12 01:26,11,15,17,18,,,,18,hotspot,,0,hgupdate-sync,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jvmci,noreg-self,oracle-triage-18,testbug,,,,,,,,,,"JDK-8225810 updated JVMCI. It also included a fix to MetaUtil.java so as to properly handle Java type names for generated lambda classes. However, whether or not that fix is present isn't covered in tests as far as I can see.

Let's add a test case so that this doesn't regress. The fix is actually needed to generate proper debuginfo for Graal VM CE builds for classes including lambda expressions.",,,,,,,,,,,JDK-8270371,JDK-8270311,JDK-8270546,JDK-8270757,,,,,,,,,,,,,,,,,,JDK-8270196,JDK-8225810,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tjuz:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-09 08:31;sgehwolf;Before JDK-8225810 toJavaName() on a lambda returned something like:

jdk.vm.ci.runtime.test.TestResolvedJavaType$$Lambda$34.0x00000008401cc440

instead of the expected:

jdk.vm.ci.runtime.test.TestResolvedJavaType$$Lambda$34/0x00000008401cc440;;;","2021-07-09 12:19;dlong;ILW = missing test = MML = P4;;;","2021-07-12 01:26;roboduke;Changeset: 6a9bc108
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-07-12 08:25:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6a9bc108736522897f03a75c83e90e2c2a183d27
;;;","2021-07-12 08:03;sgehwolf;Fix Request (OpenJDK 11u):

Please approve backporting this to OpenJDK 11u. The current code level in 11.0.13 exhibits the problem as shown above and a fix for it is on review see JDK-8270196 which partially backports the relevant fix from later JDKs. Risk should be low as it's just a test. Fails prior JDK-8270196 and passes after. If approved, I'll integrate both bugs together.;;;","2021-07-12 13:52;clanger;[~sgehwolf], can you push the test to JDK17 as well? Since JDK17 is LTS we should be more careful to have everything which goes into 11 in there as well. Under the RDP rules you can simply push this testfix as a backport to the jdk17 repository. Thanks.;;;","2021-07-13 06:15;sgehwolf;[~clanger] Where would I look this up that this P4 test-bug can be pushed to JDK 17 at this point? Either way, the JDK 17 pull request it there (see links), but I haven't integrated as I'm not sure what the process is.;;;","2021-07-13 06:53;clanger;You can look it up in JEP3 JDK Release Process: https://openjdk.java.net/jeps/3. Currently we are in RDP 1 and Thursday we'll move on to RDP2. But in both stages P1-P5 doc/test bugs are admitted. So you can just integrate the PR now.;;;","2021-07-13 07:03;sgehwolf;Thanks, Christoph! I now see it under ""Test and documentation bugs"" in the JEP 3 doc.;;;","2021-07-13 18:10;roboduke;Changeset: d32e42cd
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-07-13 14:34:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d32e42cdd461ee5793331ad237b072c16b096ef4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Incorrect reference discovery MT degree in concurrent marking,JDK-8270169,5053768,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,ayang,ayang,2021-07-09 06:10,2021-07-23 01:39,2023-10-01 09:57,2021-07-12 11:27,,,,,,,,18,hotspot,,0,gc-g1,,,,,,,,,,,,,,,,,"In `src/hotspot/share/gc/g1/g1CollectedHeap.cpp`:

```
_ref_processor_cm =
    new ReferenceProcessor(&_is_subject_to_discovery_cm,
                           ParallelGCThreads,                              // degree of mt processing
                           (ParallelGCThreads > 1) || (ConcGCThreads > 1), // mt discovery
                           MAX2(ParallelGCThreads, ConcGCThreads),         // degree of mt discovery
                           false,                                          // Reference discovery is not atomic
                           &_is_alive_closure_cm);                         // is alive closure
```

CM ref processor does ref discovery during concurrent marking, which use `ConcGCThreads` GC threads. Therefore, the MT degree is determined by `ConcGCThreads`; `ParallelGCThreads` should not be used.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271163,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tjrv:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-07-12 11:27;roboduke;Changeset: 7d2825e4
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2021-07-12 18:25:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7d2825e4219671bdaef6586864afecbca7b33e48
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IncompatibleClassChangeError on empty pattern switch statement case,JDK-8270151,5053695,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,webbuggrp,webbuggrp,2021-07-08 10:35,2021-07-15 10:36,2023-10-01 09:57,2021-07-09 04:04,17,18,,,,,,17,tools,,0,17ea,dcsad,regression,reproducer-yes,webbug,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When using a patterns (a la JEP 406) in a switch statement and a case is empty, it will compile without error, but at runtime, a IncompatibleClassChangeError is thrown upon encountering this line.

The same happens if the case only contains statements that don't happen to be executed when it is reached (e.g. ""if (false) return;"").

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
run

javac A.java --enable-preview --release 17 && java --enable-preview A

On the provided source code

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
either successful execution and empty output, or a compile-time error
ACTUAL -
Note: A.java uses preview features of Java SE 17.
Note: Recompile with -Xlint:preview for details.
Exception in thread ""main"" java.lang.IncompatibleClassChangeError
        at A.test(A.java:9)
        at A.main(A.java:5)

---------- BEGIN SOURCE ----------
sealed interface A permits A.B {
    record B() implements A {}

    public static void main(String[] args) {
        test(new B());
    }

    static void test(A a) {
        switch (a) {
            case B b:
        }
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Writing adding ""break;"" as last statement in the case

",,,,,,,,,,,JDK-8270743,JDK-8270222,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-09 00:33;adev;Test.java;https://bugs.openjdk.org/secure/attachment/95424/Test.java",,,,,,generic,,,,,,,b26,17,,generic,,,,"0|i2tjbn:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-09 00:39;adev;The issue is reproducible.
The issue begins with JDK 17 b26. It is a regression issue. Following is my observation:

JDK 17 b25: pass - Compilation error is shown
Test.java:10: error: : or -> expected
            case B b:
                  ^
Test.java:11: error: illegal start of statement
        }
        ^
2 errors

JDK 17 b26: fail - Compilation is successful but code execution throws: 
Exception in thread ""main"" java.lang.IncompatibleClassChangeError
        at Test.test(Test.java:9)
        at Test.main(Test.java:5)

;;;","2021-07-09 04:04;roboduke;Changeset: 1196b356
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-07-09 11:03:40 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/1196b3568459511df7534848ac42f13489c61be6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jshell InternalError crash for import of @Repeatable followed by unresolved ref,JDK-8270139,5053353,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,webbuggrp,webbuggrp,2021-07-05 00:49,2021-09-28 07:13,2023-10-01 09:57,2021-09-22 05:54,16,17,18,,,,,18,tools,,0,17ea,dcsad,regression,reproducer-yes,webbug,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
jshell crashes with an InternalError when an explicit import for `java.lang.annotation.Repeatable` is used followed by a usage of `@Repeatable` with a not yet declared container annotation class.

Without the explicit import for `java.lang.annotation.Repeatable` no crash occurs.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Open jshell
2. Copy the code provided below and execute it (either each line one by one, or all at once)

ACTUAL -
jshell crashes (stack trace for JDK 18-ea+3-63):
Exception in thread ""main"" java.lang.InternalError: Exception during analyze - java.lang.ClassCastException: class com.sun.tools.javac.code.Attribute$UnresolvedClass cannot be cast to class com.sun.tools.javac.code.Attribute$Class (com.sun.tools.javac.code.Attribute$UnresolvedClass and com.sun.tools.javac.code.Attribute$Class are in module jdk.compiler of loader 'app')
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:393)
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.<init>(TaskFactory.java:384)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$analyze$1(TaskFactory.java:177)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$runTask$4(TaskFactory.java:212)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskPool.getTask(JavacTaskPool.java:193)
        at jdk.jshell/jdk.jshell.TaskFactory.runTask(TaskFactory.java:205)
        at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:174)
        at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:160)
        at jdk.jshell/jdk.jshell.Eval.compileAndLoad(Eval.java:1010)
        at jdk.jshell/jdk.jshell.Eval.declare(Eval.java:890)
        at jdk.jshell/jdk.jshell.Eval.eval(Eval.java:137)
        at jdk.jshell/jdk.jshell.JShell.eval(JShell.java:493)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSource(JShellTool.java:3618)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSourceCatchingReset(JShellTool.java:1342)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processInput(JShellTool.java:1240)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.run(JShellTool.java:1211)
        at jdk.jshell/jdk.internal.jshell.tool.JShellTool.start(JShellTool.java:995)
        at jdk.jshell/jdk.internal.jshell.tool.JShellToolBuilder.start(JShellToolBuilder.java:261)
        at jdk.jshell/jdk.internal.jshell.tool.JShellToolProvider.main(JShellToolProvider.java:120)
Caused by: java.lang.IllegalStateException: java.lang.ClassCastException: class com.sun.tools.javac.code.Attribute$UnresolvedClass cannot be cast to class com.sun.tools.javac.code.Attribute$Class (com.sun.tools.javac.code.Attribute$UnresolvedClass and com.sun.tools.javac.code.Attribute$Class are in module jdk.compiler of loader 'app')
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:383)
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:390)
        ... 18 more
Caused by: java.lang.ClassCastException: class com.sun.tools.javac.code.Attribute$UnresolvedClass cannot be cast to class com.sun.tools.javac.code.Attribute$Class (com.sun.tools.javac.code.Attribute$UnresolvedClass and com.sun.tools.javac.code.Attribute$Class are in module jdk.compiler of loader 'app')
        at jdk.compiler/com.sun.tools.javac.comp.Check.validateRepeatable(Check.java:3102)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5442)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5369)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5200)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitClassDef(Attr.java:971)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:819)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:668)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:742)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5478)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5369)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5200)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5145)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1317)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1290)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:404)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$analyze$1(JavacTaskImpl.java:379)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:379)
        ... 19 more

---------- BEGIN SOURCE ----------
import java.lang.annotation.Repeatable;

@Repeatable(FooContainer.class)
@interface Foo { int value(); }
---------- END SOURCE ----------

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250217,,,,,,"2021-07-08 22:52;adev;Test.java;https://bugs.openjdk.org/secure/attachment/95423/Test.java",,,,,,generic,,,,,,,b15,16,,generic,,,,"0|i2th7n:",9223372036854775807,b16,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-07-08 22:38;adev;The issue is reproducible. 
The issue begins with JDK 16 b15. It is a regression issue. Following is my observation:

JDK 16 b14: pass
|  created annotation interface Foo, however, it cannot be referenced until class FooContainer is declared
JDK 16 b15 onwards: fail
Exception in thread ""main"" java.lang.InternalError: Exception during analyze - java.lang.ClassCastException: class com.sun.tools.javac.code.Attribute$UnresolvedClass cannot be cast to class com.sun.tools.javac.code.Attribute$Class (com.sun.tools.javac.code.Attribute$UnresolvedClass and com.sun.tools.javac.code.Attribute$Class are in module jdk.compiler of loader 'app')
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:392)
;;;","2021-09-22 05:54;roboduke;Changeset: ba7d550c
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-09-22 12:52:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ba7d550c6e6d84b36d81aafa1dfded0c99b5c248
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Kerberos Credential Retrieval from Cache not Working in Cross-Realm Setup,JDK-8270137,5053348,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mbalao,webbuggrp,webbuggrp,2021-07-05 00:16,2022-05-28 01:36,2023-10-01 09:57,2021-08-10 09:29,11.0.11,,,,,,,18,security-libs,,0,additional-information-received,dcsaw,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,reproducer-yes,webbug,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
We tried both:
openjdk version ""1.8.0_292""
OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_292-b10)
OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.292-b10, mixed mode)

and

openjdk version ""11.0.11"" 2021-04-20
OpenJDK Runtime Environment AdoptOpenJDK-11.0.11+9 (build 11.0.11+9)
OpenJDK 64-Bit Server VM AdoptOpenJDK-11.0.11+9 (build 11.0.11+9, mixed mode)

We encounter the same problem in both versions.


What is your operating system and platform?
Windows Server 2016 Datacenter

A DESCRIPTION OF THE PROBLEM :
We have the problem that with Kerberos constrained delegation in a cross-realm setup, the first request succeeds, while subsequent requests fail. We found that this is due to the usage of tickets retrieved from the referrals cache. We pasted a patch to the workaround field that fixes the problem for us by not retrieving tickets from the cache for Proxy requests. We successfully tested the patch in JDK 1.8.0_292.

Duplicate of:
https://github.com/adoptium/adoptium-support/issues/318

Related implementation:
https://bugs.openjdk.java.net/browse/JDK-8005819

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Setup:
Our setup is a double-hop consisting of:
client@REALM1
middleware@REALM1
backend@REALM2

The client requests our middleware where the problem occurs. The middleware is allowed to perform resource-based constrained delegation and requests the backend in the name of the client using S4U2PROXY.

The problem occurs when the backend is in another realm than the middleware. If both are in the same realm, everything works fine.

Steps to reproduce:
1. The client requests the middleware. The middleware receives a ticket for constrained delegation to the backend and requests it on behalf of the client. This step succeeds and the backend returns a proper response to the middleware.
2. The client requests the middleware for a second time. Now the middleware retrieves its credentials from the referrals cache, but does not get a valid Kerberos ticket.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Subsequent requests to the backend shall succeed like the first request does.
ACTUAL -
Instead it reports these error messages:


            KRBError:
            sTime is Tue Jun 01 14:03:37 CEST 2021 1622549017000
            suSec is 204909
            error code is 28
            error Message is null
            sname is HTTP/backend@REALM2
            msgType is 30

and

            KRBError:
            sTime is Tue Jun 01 14:03:37 CEST 2021 1622549017000
            suSec is 201727
            error code is 13
            error Message is KDC cannot accommodate requested option
            sname is HTTP/backend@REALM1
            eData provided.
            msgType is 30

When we look into the first error message with Wireshark, we found the error to be:
KRB5KRB_AP_PATH_NOT_ACCEPTED

When remote-debugging into the code of CredentialsUtil.java we see that on the first request Credentials of type Proxy are not stored but the ones with None are. A comment in the code explicitly states that Credentials for Proxy should not be cached. However, in the second search request, the Credentials for Proxy are retrieved from the Cache. We think this contradicts the warning in the comment, as this is basically a caching of Proxy credentials. Our patch that does not retrieve credentials from the cache for Proxy requests aligns with that comment.

CUSTOMER SUBMITTED WORKAROUND :
Index: jdk/src/share/classes/sun/security/krb5/internal/CredentialsUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/jdk/src/share/classes/sun/security/krb5/internal/CredentialsUtil.java b/jdk/src/share/classes/sun/security/krb5/internal/CredentialsUtil.java
--- a/jdk/src/share/classes/sun/security/krb5/internal/CredentialsUtil.java	(revision 64cc2bc73816f3e0a91776805482fee37fa37bbe)
+++ b/jdk/src/share/classes/sun/security/krb5/internal/CredentialsUtil.java	(revision 64d47cc41dd481115f45da407318a9516f68bb28)
@@ -362,6 +362,7 @@
         PrincipalName clientAlias = asCreds.getClientAlias();
         while (referrals.size() <= Config.MAX_REFERRALS) {
             ReferralsCache.ReferralCacheEntry ref =
+                    s4u2Type != S4U2Type.NONE ? null :
                     ReferralsCache.get(cname, sname, refSname.getRealmString());
             String toRealm = null;
             if (ref == null) {


FREQUENCY : always


",,,,,,,,,,,JDK-8277625,JDK-8272883,JDK-8277626,JDK-8272959,JDK-8272338,JDK-8272368,,,,,,,,,,,,,,,,,,,,,JDK-8005819,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2th6j:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a7b7e03,,,,,,,Not verified,,"2021-07-05 01:38;tongwan;Requested more details of the reproducer from the submitter.;;;","2021-07-05 22:22;tongwan;Additional information from the submitter:
Please find attached the class that handles the Kerberos authentication in our middleware server. It is a search service accessed per browser and it requests SharePoint which is the backend service.

;;;","2021-07-08 22:33;tongwan;Looks like this incident is different from JDK-8005819;;;","2021-08-10 09:29;roboduke;Changeset: 67869b49
Author:    Martin Balao <mbalao@openjdk.org>
Date:      2021-08-10 16:28:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/67869b491ae1eaf311dfb8c61a9e94329a822ffc
;;;","2021-08-10 13:33;mbalao;Fix request (11u):

I'd like to request an approval to have this fix in jdk11u. The reason is that jdk11u is affected by this bug. The patch from JDK main line applies cleanly to jdk11u: https://github.com/openjdk/jdk11u-dev/pull/221 All tests in jdk/sun/security/krb5 pass.;;;","2021-08-11 12:58;mbalao;Fix request (8u)

I'd like to request a 8u approval of this backport. The reason is that the fix is affected by the bug in the same way than 11u. The 11u patch applies cleanly (after paths replacement) and I observed no regressions in jdk/sun/security/krb5 tests.;;;","2021-08-22 23:37;clanger;[~mbalao] - now that we have JDK17 and it is a designated LTS, we should care for backporting things that we bring to older LTS releases to JDK 17 as well. In that sense I have opened a PR to JDK17u: https://github.com/openjdk/jdk17u/pull/33. Do you concur? (Maybe you want to review the PR, although it is clean...);;;","2021-08-22 23:37;clanger;Fix request (17u):

I'd like to request an approval to have this fix in jdk17u. The reason is that jdk17u is affected by this bug. The patch from JDK main line applies cleanly. All tests in jdk/sun/security/krb5 pass.;;;","2021-08-31 03:01;tongwan;Requested the submitter verify the fix by downloading the latest version of JDK from https://jdk.java.net/18/;;;","2021-09-01 00:18;tongwan;Unfortunately our application is not compatible with Java 18 and making it compatible is currently no priority, therefore we cannot test the fix. We validated the bug with Java 8 and 11, hence we can only offer to verify a fix in those versions.;;;","2022-03-29 03:07;pkumaraswamy;Assigned to myself accidentally and assigning back to original author;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Broken jtreg link in ""Building the JDK"" page",JDK-8270117,5053710,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,emcmanus,emcmanus,2021-07-08 13:38,2022-02-21 02:07,2023-10-01 09:57,2021-07-12 11:17,18,,,,,,,18,infrastructure,,0,build-infra,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"The ""Building the JDK"" page has this text at https://htmlpreview.github.io/?https://raw.githubusercontent.com/openjdk/jdk/master/doc/building.html#running-tests:

""""""
The Adoption Group provides recent builds of jtreg here.
""""""

The ""here"" link points to <https://ci.adoptopenjdk.net/view/Dependencies/job/jtreg/lastSuccessfulBuild/artifact> but that gets a 404. I believe the correct link is <https://ci.adoptopenjdk.net/view/work-in-progress/job/GetNode/lastSuccessfulBuild/artifact/> , which is not all that easy to find.",,,,,,,,,,,JDK-8282177,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tjez:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-07-08 14:25;erikj;This needs to be updated in doc/building.[md|html] in the jdk repo.;;;","2021-07-12 11:17;roboduke;Changeset: 41a5eb43
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-07-12 18:14:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/41a5eb437204a650d6cc271f41e1d186ee812a88
;;;","2022-02-04 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/146
Date: 2022-02-04 12:19:37 +0000;;;","2022-02-07 01:56;jdowland;Fix Request (17u)

Please consider approving this backport for 17u.

It's a very minor documentation fix, substituting a broken link for a working one.
I was briefly caught out by the broken link during 17u backport work.

Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Expand ButtonGroupLayoutTraversalTest.java to run in all LaFs, including Aqua on macOS",JDK-8270116,5053713,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rmahajan,aivanov,aivanov,2021-07-08 13:56,2021-10-25 01:30,2023-10-01 09:57,2021-08-05 10:42,11,17,8u311,,,,,18,client-libs,,0,11-bp,17-bp,7-bp,8-bp,cssn21_08_01,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,noreg-self,sustaining,testbug,,,,,"JDK-8172509 resolved the test failure by changing the Look and Feel to Metal if it's Aqua or Nimbus.

At that time, it made sense because the new focus behaviour for radio buttons that was implemented in JDK-8033699 wasn't provided in Aqua LaF. Later fixes JDK-8208640 and JDK-8249548 brought it to Aqua.

Now the test java/awt/Focus/FocusTraversalPolicy/ButtonGroupLayoutTraversal/ButtonGroupLayoutTraversalTest.java should be expanded so that it runs in all the available Look and Feels to make sure the focus traversal is consistent.",,,,,,,,,,,JDK-8275859,JDK-8274380,JDK-8274389,JDK-8274390,,,,,,,,,,,,,,,,,,JDK-8269931,JDK-8208640,JDK-8249548,JDK-8172509,,,,,,,,,,,,,,,,,,,,,,11,,,,,,"0|i2tjfn:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-08-05 10:42;roboduke;Changeset: cb368802
Author:    Rajat Mahajan <rajat.m.mahajan@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2021-08-05 17:41:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cb368802815c465f8eef7aa930d6cbb6540d0fa8
;;;","2021-09-23 03:14;aivanov;Fix request 17u:

This test bug improves test coverage of JRadioButton and JToggleButton focus handling in all Look-and-Feels without skipping Aqua and Nimbus LaFs.;;;","2021-10-21 03:12;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly. Test has passed on MacBook Pro M1 with Rosetta.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update JCov version to 3.0.9,JDK-8270108,5053701,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,shurailine,shurailine,shurailine,2021-07-08 11:55,2022-01-07 12:14,2023-10-01 09:57,2021-07-09 11:30,,,,,,,,18,infrastructure,,0,,,,,,,,,,,,,,,,,,This JCov version supports class version 62.,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279636,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tjcz:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-07-09 11:30;roboduke;Changeset: 7bfa39f5
Author:    Alexandre Iline <shurailine@openjdk.org>
Date:      2021-07-09 18:29:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7bfa39f59a745b562355436f9eb91992dbe243b2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix some inaccurate GC logging,JDK-8270100,5053683,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,simonis,simonis,simonis,2021-07-08 08:02,2021-07-21 17:53,2023-10-01 09:57,2021-07-14 10:39,,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,"If running with -Xlog:gc+heap*=trace the JVM will print the extra per thread amount which is added to the new generation on resize:

[0,105s][debug][gc,ergo,heap ] GC(0) New generation size 34112K->34176K [eden=27392K,survivor=3392K]
[0,105s][trace][gc,ergo,heap ] GC(0)   [allowed 0K extra for 0 threads]

Currently this will always print ""0K extra for 0 threads"" no matter how much extra space was added.

Also, the shrink factor will always be printed to be 0%, even if we run with -XX:-ShrinkHeapInSteps which pins the shrink factor at 100%:

[13,213s][trace][gc,heap      ] GC(34)     shrink_bytes: 463564,0K  current_shrink_factor: 0  new shrink factor: 0  _min_heap_delta_bytes: 192,0K
[13,239s][trace][gc,heap      ] GC(34) Shrinking tenured generation from 531852K to 68288K
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tj8z:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-07-14 10:39;roboduke;Changeset: fb86d13e
Author:    Volker Simonis <simonis@openjdk.org>
Date:      2021-07-14 17:39:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fb86d13ec44f4c8bb933fe16673dabce785d2e05
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ZGC: ZBarrierSetC2::clone_at_expansion fails with ""Guard against surprises"" assert",JDK-8270098,5053679,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2021-07-08 07:17,2022-02-03 09:23,2023-10-01 09:57,2021-08-09 22:39,17,18,,,,,,18,hotspot,,0,c2,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,oracle-triage-11,oracle-triage-18,regression,zgc,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (workspace/open/src/hotspot/share/gc/z/c2/zBarrierSetC2.cpp:278), pid=391777, tid=391820
#  assert(StressReflectiveCode) failed: Guard against surprises
#
# JRE version: Java(TM) SE Runtime Environment (18.0+6) (fastdebug build 18-ea+6-191)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+6-191, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a0eaec]  ZBarrierSetC2::clone_at_expansion(PhaseMacroExpand*, ArrayCopyNode*) const+0xa4c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /oracle/jdk/open/JTwork/scratch/core.391777)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

Current CompileTask:
C2:    871   21   !b  4       jdk.internal.reflect.GeneratedMethodAccessor1::invoke (61 bytes)

Stack: [0x00007f362d436000,0x00007f362d537000],  sp=0x00007f362d532350,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1a0eaec]  ZBarrierSetC2::clone_at_expansion(PhaseMacroExpand*, ArrayCopyNode*) const+0xa4c
V  [libjvm.so+0x13356a6]  PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*)+0x206
V  [libjvm.so+0x1325f3d]  PhaseMacroExpand::expand_macro_nodes()+0xe5d
V  [libjvm.so+0xa0d7b5]  Compile::Optimize()+0x16c5
V  [libjvm.so+0xa0f168]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1618
V  [libjvm.so+0x82c316]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa1fbe9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xef9
V  [libjvm.so+0xa20918]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x188af5c]  JavaThread::thread_main_inner()+0x27c
V  [libjvm.so+0x1891700]  Thread::call_run()+0x100
V  [libjvm.so+0x156f284]  thread_native_entry(Thread*)+0x104


This was introduced in JDK 17 by JDK-8268125.",,,,,,,,,,,JDK-8272678,JDK-8272644,,,,,,,,,,,,,,,,,,,,JDK-8268125,,,,,,,,,,,"2021-07-08 07:29;thartmann;TestObjectClone.java;https://bugs.openjdk.org/secure/attachment/95413/TestObjectClone.java","2021-08-09 01:57;thartmann;runtime_check.patch;https://bugs.openjdk.org/secure/attachment/95954/runtime_check.patch",,,,,,,,,,,,b27,17,,,,,,"0|i2tj83:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-07-08 07:31;thartmann;Attached TestObjectClone.java fails with -XX:+UseZGC.

ILW = Assert during C2 compilation due to missing array ptr type (harmless in product), rare but reproducible with test and ZGC, disable clone intrinsic or use different GC = MMM = P3;;;","2021-08-04 08:30;neliasso;If that assert is hit - the generated code that causes it should be unreachable. If it isn't - then the acopy nodes will need additional info on how they where created;;;","2021-08-09 02:01;thartmann;Turns out the generated code is *reachable*. Attached `runtime_check.patch` adds a check for an object array in the T_LONG case and it triggers.

Updated ILW = Oop array is copied without GC barriers, rare but reproducible with test and ZGC, disable clone intrinsic or use different GC = HMM = P2;;;","2021-08-09 22:39;roboduke;Changeset: 2384e128
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2021-08-10 05:37:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2384e128886ce8d60cb76e6cdae3a76ccebb9e89
;;;","2021-08-22 22:51;thartmann;I've already pushed the backport to JDK 17u and forgot to request approval. Doing this now:

Fix request (17u):
The bug leads to copying of an array without applying GC barriers and is therefore important to fix. The fix is low risk (slow call) and has been tested in the JDK 18 CI for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: LCM may prioritize CheckCastPP nodes over projections,JDK-8270090,5053667,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,marchof,marchof,2021-07-08 05:06,2022-07-03 11:54,2023-10-01 09:57,2022-04-10 23:40,11.0.13,17,18,19,,,,19,hotspot,,0,c2,hs-comp-triaged,jacoco-found,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-18,,,,,,,,,,"LCM should prioritize projections over other nodes when selecting among the ready list, to ensure that nodes are directly followed by their projections in local schedules.

Currently, LCM gives equal priority to projections, constants, CreateEx, and CheckCastPP nodes (see PhaseCFG::select()), effectively relying on the order in which these nodes appear in the ready list for tie-breaking.

In ARM32, this leads to the assertion failure reported below, where a CheckCastPP node is scheduled between a node and its projection. Even if this assertion failure has only showed up for ARM32, it could potentially happen for other platforms if the order of insertion in the ready list is altered.

An example subgraph for x86-64 that could potentially suffer from the same issue is attached. Depending on the node order within the ready list, the following local schedule could be produced:

461 membar_storestore
460 MachProj
504 checkCastPP
498 MachProj

This local schedule is problematic because all projections of 461 membar_storestore (460 MachProj, 498 MachProj) are not scheduled directly after 461.

ORIGINAL REPORT:

As we're part of the OpenJDK Quality Outreach program I recently started running the JaCoCo builds on a fastdebug build of OpenJDK 18-ea and observed the following crash during the execution of beanshell-maven-plugin task:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/src/hotspot/share/opto/block.cpp:1281), pid=7, tid=2051
#  assert(pred == parent || (pred->is_Proj() && pred->in(0) == parent)) failed: projections must follow their parents or other sibling projections
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc..workspace)
# Java VM: OpenJDK Server VM (fastdebug 18-internal+0-adhoc..workspace, mixed mode, sharing, g1 gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0x22e72a]  PhaseCFG::verify() const+0x4e9
#
# Core dump will be written. Default location: /workspace/core
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

The problem occures reproducible on our ARM32 build environment. 
The JDK is based on commit 4fbcce119b1736455cb74d0a585097eca617593c

",,,,,,,,,,,JDK-8286879,JDK-8286882,JDK-8288196,JDK-8289635,,,,,,,,,,,,,,,,,,JDK-8285820,,,,,JDK-8263227,,,,,,"2021-07-08 09:57;marchof;hs_err_pid6.log;https://bugs.openjdk.org/secure/attachment/95416/hs_err_pid6.log","2021-07-08 05:05;marchof;hs_err_pid7.log;https://bugs.openjdk.org/secure/attachment/95410/hs_err_pid7.log","2021-10-28 06:04;marchof;hs_err_pid9.log;https://bugs.openjdk.org/secure/attachment/96848/hs_err_pid9.log","2021-10-28 06:04;marchof;replay_pid9.log;https://bugs.openjdk.org/secure/attachment/96849/replay_pid9.log","2022-03-10 03:44;rcastanedalo;x64-example.pdf;https://bugs.openjdk.org/secure/attachment/98254/x64-example.pdf",,arm,,,,,,,,,,,,,,"0|i2tj5f:",9223372036854775807,b18,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-08 09:57;marchof;Same problem can be reproduced with Java 17-ea (based on commit 168af2e6b2343d6674fa053dcb09aca028e372bf):

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/src/hotspot/share/opto/block.cpp:1281), pid=6, tid=2157
#  assert(pred == parent || (pred->is_Proj() && pred->in(0) == parent)) failed: projections must follow their parents or other sibling projections
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc..workspace)
# Java VM: OpenJDK Server VM (fastdebug 17-internal+0-adhoc..workspace, mixed mode, sharing, g1 gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0x23b1ea]  PhaseCFG::verify() const+0x4e9
#
# Core dump will be written. Default location: /workspace/core
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#;;;","2021-07-08 10:44;marchof;With JDK release builds (17+18) my test builds succeed without any issues.;;;","2021-07-09 01:18;shade;That assert was added by JDK-8263227. It might not be a reason for failure, though.;;;","2021-07-09 01:50;shade;Marc, do you have a reproducer? E.g. what project do you build and which Maven invocation?;;;","2021-07-09 01:54;marchof;1) Clone https://github.com/jacoco/jacoco
2) mvn clean verify -B -Dbytecode.version=17
 ;;;","2021-07-09 06:21;shade;I was able to reproduce it, very very slowly. The ""parent"" and ""pred"" nodes in that assert are:

parent: 1167  safePoint_poll  ===  1171  0  2083  0  0  1168  112  0  134  227  1517  0  0  [[ 1169  1170  1164  2112 ]]  !jvms: String::charAt @ bci:1 (line 1511) StringTokenizer::setMaxDelimCodePoint @ bci:38 (line 150) StringTokenizer::<init> @ bci:48 (line 200) PathTokenizer::<init> @ bci:34 (line 67) Path::translatePath @ bci:22 (line 397)
pred: 2112  checkCastPP  ===  1167  227  [[ 1166  2129  2119 ]] org/apache/tools/ant/PathTokenizer:NotNull *  Oop:org/apache/tools/ant/PathTokenizer:NotNull * !jvms: StringTokenizer::<init> @ bci:39 (line 198) PathTokenizer::<init> @ bci:34 (line 67) Path::translatePath @ bci:22 (line 397)

[~rcastanedalo], any clues?;;;","2021-07-12 12:32;dlong;ILW = MMH = P3;;;","2021-07-15 04:20;marchof;As JDK-8263227 was backported to Java 11 I tried to reproduce it with a fastdebug build of jdk11u-dev (commit id 93f952c95b1db5b7226b5255b61caa539225f3e2) but was not able to reproduce the problem.;;;","2021-08-12 23:02;thartmann;[~shade], FYI, [~rcastanedalo] is on parental leave until the end of the year. Does this only reproduce on 32-bit ARM? Does it reproduce with replay compilation? And if so, could you please share the replay file?;;;","2021-08-12 23:09;marchof;I can try with with replay compilation. Do you have any pointers for me how to enable this? Thx.;;;","2021-08-12 23:39;thartmann;When the JVM crashes, it should print something like:

# An error report file with more information is saved as:
# [...]/hs_err_pid469621.log
[...]
#
# Compiler replay data is saved as:
# [...]/replay_pid469621.log

The replay_pid file can then be used to replay the compilation (and hopefully reproduce the crash):
java -XX:+ReplayIgnoreInitErrors -XX:+ReplayCompiles -XX:ReplayDataFile=replay_pid469621.log

You just need to make sure that all required classes are on the classpath.

If that does not reproduce the issue, you can try:
java -XX:+ReplayIgnoreInitErrors -XX:+ReplayCompiles -XX:ReplayDataFile=replay_pid469621.log -XX:RepeatCompilation=1000 -XX:+StressIGVN -XX:+StressGCM -XX:+StressLCM;;;","2021-08-13 08:08;marchof;> You just need to make sure that all required classes are on the classpath.

That will be tough, it is actually a Maven build which is crashing. I don't think I can construct a class path for this. ;;;","2021-08-15 22:45;thartmann;Usually, only the classes corresponding to the compiled method (in that case ""org.apache.tools.ant.types.Path::translatePath"") and the inlined methods are required. Please share the replay file if you have one and I can give it a try as well.;;;","2021-10-28 06:07;marchof;Sorry for not following this up sooner. Please find the replay log attached now.;;;","2021-11-16 05:14;thartmann;Unfortunately, I'm not able to reproduce this on x86, even with -XX:+OptoScheduling (which is default on ARM) and I don't have an 32-bit ARM system for testing.

I'm unassigning this and deferring for now. [~shade] and other 32-bit ARM testers/maintainers, feel free to pick this up and re-target.;;;","2022-03-01 04:31;rcastanedalo;Hi [~shade], based on the information you shared in your comment (2021-07-09 15:21), it seems that the assertion is failing because there is a ""wild"" projection node (""n"") that is not scheduled right after its parent node (""parent""). JDK-8263227 added this assertion and actually relies on projection nodes being scheduled right after their parent nodes.

I do not have access to an ARM32 system, so I cannot find out why ""n"" is not scheduled right after ""parent"". Looking at the source code in lcm.cpp, however, I realize now that CheckCastPP nodes (such as ""pred"" in this failure) might actually be selected for local scheduling earlier than projection nodes, and that *might* be the root cause of this failure. I was probably misled by the comment ""Projections always win"" and ""Projections take top priority for correctness reasons"" on lcm.cpp when I worked on JDK-8263227.

[~shade] (or anyone with access to an ARM32 system): if you are still able to reproduce the failure, could you please see if the (tentative, not thoroughly tested) fix in https://github.com/robcasloz/jdk/tree/JDK-8270090 prevents it?;;;","2022-03-01 23:41;marchof;As the original reporter I will test the branch on ARM32. Please give me till end of this week.;;;","2022-03-03 08:45;marchof;Hi [~rcastanedalo] I tried to build your branch (commit 38fdaa9) on ARM32. The JDK build itself fails with the following error:

* For target jdk__optimize_image_exec:
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/block.cpp:1236
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/workspace/src/hotspot/share/opto/block.cpp:1236), pid=16763, tid=16783
#  assert(j == 1 || block->get_node(j-1)->is_Phi()) failed: CreateEx must be first instruction in block
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc..workspace)
# Java VM: OpenJDK Server VM (fastdebug 19-internal-adhoc..workspace, mixed mode, g1 gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0x2652b2]  PhaseCFG::verify() const+0x631
#
# Core dump will be written. Default location: /workspace/make/core
#;;;","2022-03-03 09:48;marchof;Hi [~rcastanedalo], here is a ARM32 CI build for your branch if this helps: https://pici.beachhub.io/#/JDK-8270090;;;","2022-03-07 02:10;rcastanedalo;Hi [~marchof], thanks for trying out the branch and for setting up the CI build, I will investigate further.;;;","2022-03-08 04:48;rcastanedalo;Hi again, I pushed a new tentative fix to https://github.com/robcasloz/jdk/tree/JDK-8270090 (commit dd868a1). The JDK seems to build fine this time according to https://pici.beachhub.io/#/JDK-8270090/20220308-105241. [~marchof] could you please see if it addresses the original failure?;;;","2022-03-09 03:57;marchof;[~rcastanedalo] The original problem seems to be fixed, and I cannot see any JVM crashes.

But: the test subject (JaCoCo build) is *extremly* slow with the JDK built from your branch and the build fails at a later point in time (probably due to some race condition). Maybe due to the additional logging? Here are the CI builds:

JDK build: https://pici.beachhub.io/#/JDK-8270090
JaCoCo build: https://pici.beachhub.io/#/JDK-8270090-jacoco;;;","2022-03-09 04:21;rcastanedalo;[~marchof] Great, thanks for trying out the branch! The additional logging in the branch is only emitted if an assertion fails, which does not seem to happen here (unless I am missing something i the JaCoCo build output log). Couldn't the slowness be due to the fact that it is a JDK debug version running on relatively slow hardware? I will do some performance regression testing of the branch on other systems, but I do not expect major regressions.;;;","2022-03-09 04:58;marchof;[~rcastanedalo] You're right, the debug build on master crashes relatively early but still takes long time. So probably is is due to the debug build.;;;","2022-03-09 12:07;marchof;I kicked another build of my original scenario: It's green :)

Looks like your fix works. Thanks [~rcastanedalo]!;;;","2022-03-10 02:47;rcastanedalo;Great, thanks! I will assign this issue to myself and submit a PR with a more refined and better-tested version of the patch. This issue seems to only show up for ARM32 but it could potentially affect other platforms as well in the future, as LCM is currently relying on the node order within the ready list for correctness.;;;","2022-03-25 06:15;rcastanedalo;Hi again [~marchof], I have pushed a new version of the patch to https://github.com/robcasloz/jdk/tree/JDK-8270090, and the build on ARM32 seems to succeed according to https://pici.beachhub.io/#/JDK-8270090. I am unsure whether the JaCoCo build in https://pici.beachhub.io/#/JDK-8270090-jacoco is triggered automatically. If not, could you please try another run?;;;","2022-03-25 15:15;marchof;Yes, should be triggered automatically. Indeed you can see your latest commit id here: https://pici.beachhub.io/#/JDK-8270090-jacoco/20220325-131740;;;","2022-03-28 03:36;rcastanedalo;Thanks [~marchof], a patch is now submitted for review.;;;","2022-03-28 03:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7988
Date: 2022-03-28 10:18:31 +0000;;;","2022-03-28 03:39;rcastanedalo;It would be great if an ARM32 tester/maintainer could extract and contribute a small regression test case out of the original failure.;;;","2022-04-10 23:40;dukebot;Changeset: 8ebea443
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-04-11 06:37:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8ebea443f333ecf79d6b0fc725ededb231e83ed5
;;;","2022-06-08 03:20;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Needs a follow-up.
Clean backport.
SAP nightly testing passed.;;;","2022-06-08 03:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/441
Date: 2022-06-08 10:19:58 +0000;;;","2022-06-20 06:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/153
Date: 2022-06-20 13:40:23 +0000;;;","2022-06-21 01:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/167
Date: 2022-06-21 08:00:29 +0000;;;","2022-06-24 02:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1178
Date: 2022-06-24 09:40:32 +0000;;;","2022-06-24 02:58;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Typical risk of a C2 fix.
Needs follow-up 8285820.
Clean backport except for Copyright.
SAP nightly testing passed.;;;"
ARM32-softfp: Do not load CONSTANT_double using the condy helper methods in the interpreter,JDK-8270086,5053665,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-07-08 04:05,2022-11-25 02:51,2023-10-01 09:57,2021-07-28 06:20,11.0.1,17,18,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,redhat-interest,,,,,,,,,,,,,,"With the introduction of constant dynamics, the 32-bit arm softfp port started to load CONSTANT_double values from the CP using the condy helper methods. This is not required and should be avoided, since those helper methods might not be designed for loading primitive types.
https://git.openjdk.java.net/jdk/blob/07e90524576f159fc16523430f1db62327c89a3b/src/hotspot/cpu/arm/templateTable_arm.cpp#L474",,,,,,,,,,,JDK-8297621,,,,,,,,,,,,,,,,JDK-8230797,,,,,JDK-8201602,,,,,,,,,,,,,,,,,arm,,,,,,,,11.0.1,,linux,,,,"0|i2tj4z:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-28 06:19;roboduke;Changeset: a066c7be
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2021-07-28 13:18:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a066c7bed0f9aa45fb9384f75ae84943548cd859
;;;","2022-11-23 03:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/927
Date: 2022-11-23 11:47:28 +0000;;;","2022-11-23 04:25;shade;Fix Request (17u)

Fixes the ARM32 softfp problems introduced by condy integration. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Suspend during block transition may deadlock if lock held,JDK-8270085,5053664,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,pchilanomate,rehn,rehn,2021-07-08 03:38,2021-11-17 06:41,2023-10-01 09:57,2021-07-22 07:31,17,18,,,,,,17,hotspot,,0,jdk17-fix-request,jdk17-fix-yes,,,,,,,,,,,,,,,,"Some locks allow a JavaThread to enter a blocked state.
If the JavaThread owning the lock is suspended on the back edge when returning to the VM state,
it may cause a deadlock.

An example of this is a JavaThread having the Compile_lock and then grabbing the VMOperation_lock,
the JavaThread may transition to a blocked state due to contentions or if the JavaThread waits on the
VMOperation_lock.

The resumer might call a path which needs the Compile_lock before it resumes the suspended JavaThread.
But since the Compile_lock will not be unlocked until the suspended JavaThread is resumed, we deadlock.",,,,,,,,,,,JDK-8271177,JDK-8271784,JDK-8271643,,,,,,,,,,,,,,JDK-8260062,,,,,JDK-8260062,,,,,JDK-8271251,,,,,,,,,,,,,,,,,,,,17,,,,,,"0|i2tj4r:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2021-07-08 04:10;rehn;WIP/Testing: https://github.com/robehn/jdk/tree/suspend-block-trans;;;","2021-07-08 04:22;rehn;The added test (SuspendBlocked.java) timeouts as expected on jdk master.;;;","2021-07-08 06:12;dholmes;I think we are now checking for suspension in too many places. Suspension checks used to only occur in relation to acquisition of Java monitors, when returning to Java, or when entering the VM from native (IIRC). Checking for suspension on all thread-blocked situations is wrong - we must never suspend whilst holding a VM lock.;;;","2021-07-08 08:44;dcubed;Copied here from JDK-8260062:

Robbin Ehn added a comment - 1 week ago
We had one on Linux and got some data.
It seem like one JavaThread is suspended while holding Compile_lock.
The JavaThread that is suppose to resume the suspended thread is waiting for Compile_lock.

We use to avoid the suspend flag when in block_trans when leaving safepoint.

Since the Windows timeouts are older than suspend changes, I believe those were infra problems.
Linux one is the issue with suspend while holding Compile_lock.

Note: The comment about Windows is for the failures in JDK-8260062.;;;","2021-07-08 08:44;dcubed;Copied here from JDK-8260062: 

David Holmes added a comment - 6 days ago
> It seem like one JavaThread is suspended while holding Compile_lock.

Just to state the obvious we should never allow a thread to suspend whilst holding any internal VM resources. Is this a case of nested locks? ;;;","2021-07-08 08:45;dcubed;Copied here from JDK-8260062: 

 rehn Robbin Ehn added a comment - 6 days ago
We are calling deopt all marked with the Compile_lock held, thus asking the VM thread to handshake all threads.
While we wait for that in blocked state, the JavaThread gets suspended. ;;;","2021-07-21 16:46;kvn;Fix request for JDK 17 is approved.;;;","2021-07-22 07:31;roboduke;Changeset: e7f90093
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2021-07-22 14:30:19 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/e7f9009315f1fdf33d6539c413c224f925c9ffb0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
-Wnonnull errors happen with GCC 11.1.1,JDK-8270083,5053661,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2021-07-08 02:38,2022-08-03 06:40,2023-10-01 09:57,2021-07-09 22:02,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-18,,,,,,,,,,,,,,,"I attempted to build OpenJDK on Fedora 34 with gcc-11.1.1-3.fc34.x86_64, but I saw following errors:

```
In file included from /home/ysuenaga/github-forked/jdk/src/hotspot/share/runtime/frame.inline.hpp:42,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/cpu/x86/abstractInterpreter_x86.cpp:29:
/home/ysuenaga/github-forked/jdk/src/hotspot/cpu/x86/frame_x86.inline.hpp: In member function 'oop frame::saved_oop_result(RegisterMap*) const':
/home/ysuenaga/github-forked/jdk/src/hotspot/cpu/x86/frame_x86.inline.hpp:231:42: error: 'this' pointer is null [-Werror=nonnull]
  231 |   oop* result_adr = (oop *)map->location(rax->as_VMReg());
      |                                          ^~~
In file included from /home/ysuenaga/github-forked/jdk/src/hotspot/share/code/vmreg.inline.hpp:31,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/cpu/x86/macroAssembler_x86.hpp:29,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/share/asm/macroAssembler.hpp:31,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/share/interpreter/interp_masm.hpp:28,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/share/interpreter/interpreter.hpp:29,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/cpu/x86/abstractInterpreter_x86.cpp:27:
/home/ysuenaga/github-forked/jdk/src/hotspot/cpu/x86/vmreg_x86.inline.hpp:28:14: note: in a call to non-static member function 'VMRegImpl* RegisterImpl::as_VMReg()'
   28 | inline VMReg RegisterImpl::as_VMReg() {
      |              ^~~~~~~~~~~~
In file included from /home/ysuenaga/github-forked/jdk/src/hotspot/share/runtime/frame.inline.hpp:42,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/cpu/x86/abstractInterpreter_x86.cpp:29:
/home/ysuenaga/github-forked/jdk/src/hotspot/cpu/x86/frame_x86.inline.hpp: In member function 'void frame::set_saved_oop_result(RegisterMap*, oop)':
/home/ysuenaga/github-forked/jdk/src/hotspot/cpu/x86/frame_x86.inline.hpp:238:42: error: 'this' pointer is null [-Werror=nonnull]
  238 |   oop* result_adr = (oop *)map->location(rax->as_VMReg());
      |                                          ^~~
In file included from /home/ysuenaga/github-forked/jdk/src/hotspot/share/code/vmreg.inline.hpp:31,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/cpu/x86/macroAssembler_x86.hpp:29,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/share/asm/macroAssembler.hpp:31,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/share/interpreter/interp_masm.hpp:28,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/share/interpreter/interpreter.hpp:29,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/cpu/x86/abstractInterpreter_x86.cpp:27:
/home/ysuenaga/github-forked/jdk/src/hotspot/cpu/x86/vmreg_x86.inline.hpp:28:14: note: in a call to non-static member function 'VMRegImpl* RegisterImpl::as_VMReg()'
   28 | inline VMReg RegisterImpl::as_VMReg() {
      |              ^~~~~~~~~~~~
cc1plus: all warnings being treated as errors
```

`Register` ( `RegisterImpl` ) is defined as a class, but it is used like numerical value. For example `rax` and `xmm0` are assigned to `0`. It is the cause of this error.

Logically, the code is fine, so we can avoid them to disable `-Wnonnull`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271869,JDK-8269122,JDK-8291822,,,JDK-8270140,,,,,,,,,,,,x86,x86_64,,,,,,,,,linux,,,,"0|i2tj43:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-08 13:39;dlong;ILW = MML = P4;;;","2021-07-09 22:02;roboduke;Changeset: 68b6e11e
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2021-07-10 05:01:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/68b6e11e481349e40014aa4593a53ae2ea74aedc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SplittableRandom extends AbstractSplittableGenerator,JDK-8270075,5053651,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jlaskey,jlahoda,jlahoda,2021-07-08 01:28,2021-07-15 10:40,2023-10-01 09:57,2021-07-14 04:52,17,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,"The java.util.SplittableRandom class extends AbstractSplittableGenerator, which is in a non-exported package. Public exported classes should preferably not extend classes from non-exported packages.

As a small related issue, src/java.base/share/classes/java/util/Random.java still uses @SuppressWarnings(""exports""), although that is not necessary there.",,,,,,,,,,,JDK-8270512,JDK-8270764,,,,,,,,,,,,JDK-8270313,,,,,,,,,,,,,JDK-8270060,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tj1v:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2021-07-14 04:52;roboduke;Changeset: 3bbd2332
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-07-14 11:51:06 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/3bbd2332bd4876b5529ccdf90e5e5d6c515e9d58
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem list tools/jdeprscan/tests/jdk/jdeprscan/TestRelease.java due to JDK-8270060,JDK-8270064,5053640,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-07-07 22:44,2021-07-14 17:17,2023-10-01 09:57,2021-07-08 03:38,18,,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,Until JDK-8270060 is investigated.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270060,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tizf:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-08 03:38;roboduke;Changeset: 30bba54b
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-07-08 10:37:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/30bba54b97fc5d941f24f9155520b47d8fe4de23
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(jdeprscan) tools/jdeprscan/tests/jdk/jdeprscan/TestRelease.java failed with class file for jdk.internal.util.random.RandomSupport not found,JDK-8270060,5053635,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,dholmes,dholmes,2021-07-07 21:11,2022-02-10 14:28,2023-10-01 09:57,2021-07-30 01:00,18,,,,,,,18,tools,,0,tier1,,,,,,,,,,,,,,,,,"The test fails after the fix for JDK-8258421 was brought in from JDK 17 automatically. I suspect that was not the right thing to do.

@Deprecated java.lang.String java.security.Security.getAlgorithmProperty(java.lang.String,java.lang.String)
@Deprecated javax.crypto.SecretKey.serialVersionUID
test jdk.jdeprscan.TestRelease.testSuccess(): failure
java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertTrue(Assert.java:45)
	at org.testng.Assert.assertTrue(Assert.java:55)
	at jdk.jdeprscan.TestRelease.testSuccess(TestRelease.java:56)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

===============================================
tools/jdeprscan/tests/jdk/jdeprscan/TestRelease.java
Total tests run: 2, Passes: 1, Failures: 1, Skips: 0
===============================================

----------System.err:(58/2860)----------
>>> invoking Main.call with arguments: --list --release 5
Usage: jdeprscan [options] {dir|jar|class} ...

options:
        --class-path PATH
        --for-removal
        --full-version
  -? -h --help
  -l    --list
        --release 7|8|9|10|11|12|13|14|15|16|17|18
  -v    --verbose
        --version
>>> Main.call returned false
>>> invoking Main.call with arguments: --list --release 7
warning: unknown enum constant javax.jws.soap.SOAPBinding.Use.LITERAL
warning: unknown enum constant javax.annotation.Resource.AuthenticationType.CONTAINER
>>> Main.call returned true
>>> invoking Main.call with arguments: --list --release 8
warning: unknown enum constant javax.jws.soap.SOAPBinding.Use.LITERAL
>>> Main.call returned true
>>> invoking Main.call with arguments: --list --release 9
warning: unknown enum constant javax.jws.WebParam.Mode.IN
warning: unknown enum constant javax.annotation.Resource.AuthenticationType.CONTAINER
warning: unknown enum constant javax.jws.soap.SOAPBinding.ParameterStyle.WRAPPED
>>> Main.call returned true
>>> invoking Main.call with arguments: --list --release 10
warning: unknown enum constant javax.jws.WebParam.Mode.IN
warning: unknown enum constant javax.annotation.Resource.AuthenticationType.CONTAINER
warning: unknown enum constant javax.jws.soap.SOAPBinding.ParameterStyle.WRAPPED
>>> Main.call returned true
>>> invoking Main.call with arguments: --list --release 11
>>> Main.call returned true
>>> invoking Main.call with arguments: --list --release 12
>>> Main.call returned true
>>> invoking Main.call with arguments: --list --release 13
>>> Main.call returned true
>>> invoking Main.call with arguments: --list --release 14
>>> Main.call returned true
>>> invoking Main.call with arguments: --list --release 15
>>> Main.call returned true
>>> invoking Main.call with arguments: --list --release 16
>>> Main.call returned true
>>> invoking Main.call with arguments: --list --release 17
error: cannot access jdk.internal.util.random.RandomSupport
  class file for jdk.internal.util.random.RandomSupport not found
>>> Main.call returned false
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270075,JDK-8258421,JDK-8270064,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,"0|i2tiyb:",9223372036854775807,b09,,,,,,,,,,,Verified,,"2021-07-09 01:03;jlahoda;Should be possible to resolve after JDK-8270075 is solved.;;;","2021-07-30 01:00;roboduke;Changeset: b59418f4
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-07-30 07:58:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b59418f47d8e69f6aec3411b105e2512d19f6cd1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Generated lambda class can not access protected static method of target class,JDK-8270056,5053628,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,yyang,yyang,yyang,2021-07-07 19:24,2022-02-15 07:59,2023-10-01 09:57,2021-07-12 19:25,15,16,17,18,,,,18,core-libs,,0,alibaba-interest,hgupdate-sync,,,,,,,,,,,,,,,,"Create on behalf of NekoCaffeine <nekocaffeine@qq.com>
-----

Generated lambda class can not access protected static method of the target class. The following exception is thrown when executing the attached reproducible program:

Exception in thread ""main"" java.lang.IllegalAccessError: class AccessProtectedStaticMethodFromSuper$B$$Lambda$15/0x0000000800b8ea48 tried to access protected method 'void AccessProtectedStaticMethodFromSuper$A.func()' (AccessProtectedStaticMethodFromSuper$B$$Lambda$15/0x0000000800b8ea48 is in unnamed module of loader AccessProtectedStaticMethodFromSuper$1Loader @71dac704; AccessProtectedStaticMethodFromSuper$A is in unnamed module of loader AccessProtectedStaticMethodFromSuper$1Loader @39ed3c8d)
	at AccessProtectedStaticMethodFromSuper.main(AccessProtectedStaticMethodFromSuper.java:51)

This issue is similar to JDK-8254975 with slight differences: generated lambda proxy calls static protected method rather than protected member method.",,,,,,,,,,,JDK-8270759,JDK-8270425,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-07 19:19;yyang;AccessProtectedStaticMethodFromSuper.java;https://bugs.openjdk.org/secure/attachment/95402/AccessProtectedStaticMethodFromSuper.java",,,,,,,,,,,,,,,,,,,,"0|i2tiwr:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,Verified,,"2021-07-12 19:25;roboduke;Changeset: 07e90524
Author:    Yi Yang <yyang@openjdk.org>
Date:      2021-07-13 02:24:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/07e90524576f159fc16523430f1db62327c89a3b
;;;","2021-07-14 15:36;roboduke;Changeset: 0f547071
Author:    Yi Yang <yyang@openjdk.org>
Date:      2021-07-14 00:46:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0f5470715e98e222474f575abc95457682d5818a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DynamicCallSiteDesc::withArgs doesn't throw NPE,JDK-8270025,5053578,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,vromero,pgundarlahal,pgundarlahal,2021-07-07 06:10,2021-07-31 04:05,2023-10-01 09:57,2021-07-13 10:49,17,,,,,,,17,core-libs,,0,conformance,tck-red-17,,,,,,,,,,,,,,,,"As per the revised documentation for DynamicCallSiteDesc.withArgs:
""NullPointerException - if the argument or its contents are null""

Attached code doesn't throw NPE for argument array containing null:

public class t {
        public static boolean m() throws Throwable {
                DynamicCallSiteDesc desc = DynamicCallSiteDesc.of(ConstantDescs.ofCallsiteBootstrap(
                                                                        ClassDesc.of(""BootstrapAndTarget""),
                                                                        ""bootstrap2"",
                                                                        ClassDesc.of(""java.lang.invoke.CallSite"")
                                                                        ),
                                                ""getTarget"",
                                                MethodTypeDesc.ofDescriptor(""()I""));

                ConstantDesc[] cd = new ConstantDesc[1];
                cd[0] = null;

                desc.withArgs(cd);

                return true;
        }
        public static void main(String[] args) throws Throwable {
                System.out.println(""m: "" + m());
        }
}
",,,,,,,,,,,JDK-8270433,JDK-8270758,,,,,,,,,,,,JDK-8270209,,,,,,,,JCK-7316094,,,,,JDK-8224158,JDK-8210031,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tiln:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2021-07-13 10:49;roboduke;Changeset: 8583aab3
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-07-13 17:48:21 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/8583aab374c3c2ad94c88e7f649d81ce5f319a5f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect log decorators in gc/g1/plab/TestPLABEvacuationFailure.java,JDK-8270021,5053571,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,ayang,ayang,2021-07-07 03:07,2022-03-10 05:34,2023-10-01 09:57,2021-07-08 03:40,18,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,"This test ""Checks PLAB statistics on evacuation failure"", but the log decorators used are ""-Xlog:gc=debug,gc+phases=trace"". Therefore, the logs contain no PLAB related info. However, all checks in this test still pass.

The essense of all checks is the following, when `logItems` is empty, this method becomes a no-op, skipping all checks.

```
    private static void checkValues(Map<Long, PlabInfo> logItems, String errorMessage, boolean expectZero) {
        logItems.entrySet()
                .forEach(...);
    }
```",,,,,,,,,,,JDK-8282961,JDK-8281693,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tik3:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-07-08 03:40;roboduke;Changeset: 4a45d957
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2021-07-08 10:39:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4a45d95719bf68221e6843572511c2eb741ba69c
;;;","2022-03-09 06:32;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Test passes.
;;;","2022-03-09 06:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/215
Date: 2022-03-09 14:32:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Switches with 'case null:' should be exhaustive,JDK-8270006,5053556,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-07-07 01:03,2021-07-15 10:34,2023-10-01 09:57,2021-07-08 01:03,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,"As noted here:
https://mail.openjdk.java.net/pipermail/compiler-dev/2021-July/017505.html

For switches like:
void test(String s) {
  switch (s) {
    case null:
      break;
  }
}

javac should produce a compile-time error, as the switch is not exhaustive.",,,,,,,,,,,JDK-8270732,JDK-8270120,,,,,,,,,,,,,,,,,,,,JCK-7316496,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tigr:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-08 01:03;roboduke;Changeset: 4f707591
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-07-08 08:03:09 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4f707591754e5e7f747d1d0a47f78f49060771c2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Test]: java/net/httpclient/DigestEchoClientSSL.java contains redundant @run tags,JDK-8269993,5053538,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tvoniadka,tvoniadka,tvoniadka,2021-07-06 22:28,2021-09-07 06:39,2023-10-01 09:57,2021-07-07 23:55,11,17,18,,,,,18,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,"The test ""java/net/httpclient/DigestEchoClientSSL.java"" contains:

 * @run main/othervm/timeout=300
 *          DigestEchoClientSSL SSL
 * @run main/othervm/timeout=300
 *          DigestEchoClientSSL SSL
 * @run main/othervm/timeout=300
 *          -Djdk.http.auth.proxying.disabledSchemes=
 *          -Djdk.http.auth.tunneling.disabledSchemes=
 *          DigestEchoClientSSL SSL PROXY
 * @run main/othervm/timeout=300
 *          -Djdk.http.auth.proxying.disabledSchemes=
 *          -Djdk.http.auth.tunneling.disabledSchemes=
 *          DigestEchoClientSSL SSL PROXY

It appears the @run tags are duplicated. This seems to have started after JDK-8212695.",,,,,,,,,,,JDK-8273213,JDK-8273434,JDK-8270080,JDK-8273105,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ticr:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-07-07 23:55;roboduke;Changeset: 4e18ec26
Author:    Thejasvi Voniadka <tvoniadka@openjdk.org>
Committer: Abdul Kolarkunnu <akolarkunnu@openjdk.org>
Date:      2021-07-08 06:01:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4e18ec26ddfa0b44e8780ebd556a5e8aa2e90dc0
;;;","2021-08-27 14:26;clanger;Fix request (17u, 11u):
Please approve this clean backport of a test fix. It removes an unnecessary, redundant @run tag. It was already backported to 11.0.13-oracle.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] JTabbedPane title looks like  disabled,JDK-8269984,5053528,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,kizune,landrews,landrews,2021-07-06 17:05,2021-09-07 02:18,2023-10-01 09:57,2021-07-23 10:37,11.0.13-oracle,16,17,18,7u321,8u311,,17,client-libs,,0,CPU21_10-critical-approved,CPU21_10-critical-SQE-OK,jdk11u-fix-request,jdk11u-fix-yes,jdk17-fix-request,jdk17-fix-yes,macos,regression,regression_8251377,sn_97,sn_98,,,,,,,"JTabbedPane title looks like the frame does not have the focus or its title is disabled or blue. This works as expected in jdk 16 on the same host and configuration. 
This issue is seen on MacOS Big Sur 11.4 x84_64 . The same issue is seen when frame does not have the focus on macOS Catalina 10.15.7 
Please refer to the attached  screen shot of jdk16 and jdk17 

Step to reproduce
1) Run SwingSet2 when the Frame is seen observe the tabbed Pane title looks blur or disabled as shown in the attached image.
",,,,,,,,,,,JDK-8271238,JDK-8272270,JDK-8271256,JDK-8271275,JDK-8271658,JDK-8272284,JDK-8271795,JDK-8273415,JDK-8271274,,,,,,,,,,JDK-8270204,,,JDK-8270204,,,,,JDK-8271614,JDK-8251377,,,,,"2021-07-06 17:05;landrews;Screen Shot 2021-07-06 at 6.52.14 PM.png;https://bugs.openjdk.org/secure/attachment/95394/Screen+Shot+2021-07-06+at+6.52.14+PM.png",,,,,,x86,,,,,,,,,,os_x,,,,"0|i2tiaj:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2021-07-19 15:51;kizune;The problem here is that fix for DK-8251377 relies on method apple.laf.JRSUIUtils#isMacOSXBigSurOrAbove() which does not work correctly on latest builds of BigSur since it assumes that the os.version is reported as 10.16.xxx where in reality - at least on M1 Macs it is reported as 11.x.x. Method needs to be corrected.;;;","2021-07-20 05:12;kcr;[~landrews] The Description says that this bug is not present (i.e., the test case works as expected) in JDK 16. However, the affected version includes 16, and the evaluation says that this is a regression caused by JDK-8251377 (which first went into JDK 16). One of these two statements is wrong. Can you please clarify?;;;","2021-07-20 07:58;kizune;[~kcr] I have tried with latest jdk16u build - bug is reproducible there as well.;;;","2021-07-20 08:34;landrews;[~kcr],  Following is the jdk version that I tested and said that bug is not reproduced.
java version ""16"" 2021-03-16
Java(TM) SE Runtime Environment (build 16+36-2231)
Java HotSpot(TM) 64-Bit Server VM (build 16+36-2231, mixed mode, sharing)

Discussed with [~kizune] and asked him for jdk 16 version he tested and said that bug is reproduced . Tested with the latest jdk 16 build and I was able to reproduce the bug in JDK 16 too.
java version ""16.0.2"" 2021-07-20
Java(TM) SE Runtime Environment (build 16.0.2+7-67)
Java HotSpot(TM) 64-Bit Server VM (build 16.0.2+7-67, mixed mode, sharing);;;","2021-07-23 05:15;vdyakov;[~kizune] please make a JDK 17 fix request per process: https://openjdk.java.net/jeps/3#Fix-Request-Process;;;","2021-07-23 10:06;kizune;Asking for permission to push into JDK17. This is a regression that makes a tab component hard to use on the new Mac OS systems. Ran the fix trough the relevant automated regression test suites, fix does not introduce any new failures. Manually verified fix on different versions of Mac OS X.;;;","2021-07-23 10:09;kcr;Fix request approved for JDK 17.;;;","2021-07-23 10:37;roboduke;Changeset: 8adf008b
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2021-07-23 17:36:44 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/8adf008b150bfda783ae615965198edb4d196016
;;;","2021-09-03 03:36;mdoerr;Fix Request (11u):
Follow-up fix for JDK-8251377 which is also backported. Doesn't apply cleanly. Review: https://github.com/openjdk/jdk11u-dev/pull/310;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BootstrapMethodError with method reference and intersection type,JDK-8269983,5053527,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sadayapalam,cushon,cushon,2021-07-06 16:55,2022-10-12 23:08,2023-10-01 09:57,2022-10-06 21:23,11,17,,,,,,20,tools,,0,regression,,,,,,,,,,,,,,,,,"Under JDK 8, the following program compiles and runs successfully.

Under JDK 11 and newer, it fails at runtime with a BootstrapMethodError.

I'd expect it to either be rejected by javac at compile-time, or succeed at runtime, but not compile and then fail at runtime.

This may be related to JDK-8269020, although that issue can be worked around by expressing the intersection bounds consistent, which doesn't apply to the following repro.

public class Z {

  public static void main(String[] args) {
    f();
  }

  static <T extends Comparable<T> & G> C<T> f() {
    return new C<>(Q::g);
  }

  public interface G {}

  private interface E<T> {
    void g(Q g, T value);
  }

  static class C<T extends Comparable<?>> {
    C(E<T> g) {}
  }

  static class Q {
    void g(G g) {}
  }
}

Exception in thread ""main"" java.lang.BootstrapMethodError: bootstrap method initialization exception
	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:194)
	at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:307)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:258)
	at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:248)
	at Z.f(Z.java:9)
	at Z.main(Z.java:5)
Caused by: java.lang.invoke.LambdaConversionException: Type mismatch for lambda argument 1: interface java.lang.Comparable is not convertible to interface Z$G
	at java.base/java.lang.invoke.AbstractValidatingLambdaMetafactory.validateMetafactoryArgs(AbstractValidatingLambdaMetafactory.java:279)
	at java.base/java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:328)
	at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:127)
	... 5 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8213703,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tiab:",9223372036854775807,b19,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-06 17:04;cushon;The regression bisects to JDK-8213703;;;","2022-10-03 03:29;sadayapalam;I have a candidate fix for JDK-8292975 which also seems to address this. ;;;","2022-10-03 23:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10548
Date: 2022-10-04 06:09:10 +0000;;;","2022-10-06 21:23;dukebot;Changeset: cf84c8ea
Author:    Srikanth Adayapalam <sadayapalam@openjdk.org>
Date:      2022-10-07 04:20:40 +0000
URL:       https://git.openjdk.org/jdk/commit/cf84c8eaf265255b49293650b3919f22e26d48a3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] Bump minimum version of macOS for x64 to 10.12,JDK-8269968,5053510,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-07-06 15:59,2023-05-15 10:34,2023-10-01 09:57,2021-07-13 07:18,jfx17,,,,,,,jfx18,javafx,,0,noreg-build,sn_97,,,,,,,,,,,,,,,,"This is a follow-on fix to JDK-8266743.

The fix for JDK-8266743 was to partially revert JDK-8265031, and lower the minimum macOS version for x64 back to 10.10 in JavaFX 17. We should bump it back to 10.12 in JavaFX 18.

This will be done in connection with JDK-8269967, which will provide a fail-fast when attempting to run on an older version of macOS than the minimum.",,,,,,,,,,,,,,,,,,,,,,JDK-8269967,,,,,,,,,,,,,,,JDK-8266743,JDK-8265031,JDK-8308114,,,,,,,,,,,,,,,,,,,,os_x,,,,"0|i2ti6j:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2021-07-13 07:18;roboduke;Changeset: a34928fb
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-07-13 14:18:17 +0000
URL:       https://git.openjdk.java.net/jfx/commit/a34928fb8e0506b2d6e4834bb77f7b52c691660b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaFX should fail fast on macOS below minimum version,JDK-8269967,5053508,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2021-07-06 15:53,2023-05-15 09:58,2023-10-01 09:57,2021-07-13 04:53,jfx17,,,,,,,jfx18,javafx,,0,sn_97,,,,,,,,,,,,,,,,,"This is a follow-on fix to JDK-8266743.

The JavaFX build specifies the minimum version of macOS on which it will run. This allows using APIs from that minimum version without checking for their availability at runtime.

If there are any `@available` checks in the code less than or equal to that minimum, the clang compiler will elide these checks so that no checking is done at runtime. This would be fine if macOS failed to load a binary that targets a newer library, but in the case of dylibs, it loads it, which then leads to a runtime crash. This sort of accidental, deferred failure leads to a bad experience, and was the cause of JDK-8266743. Given where we were in the JavaFX release, we decided to revert the change to the minimum version back to 10.10.

Regardless of what the minimum version is, we should add a check to the platform initialization code to verify that version and ""fail fast"" on an attempt to run on any older version. Otherwise, we will continue to have the possibility of a similar crash on an older version of macOS.

Separately, we plan to bump the minimum version to 10.12 again for JavaFX 18 -- see JDK-8269968.",,,,,,,,,,,,,,,,,,,,,,,JDK-8269968,,,,,,,,,JDK-8266743,,,,,JDK-8265031,,,,,,,,,,,,,,,,,,,,,,os_x,,,,"0|i2ti63:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2021-07-13 04:53;roboduke;Changeset: 00b353e8
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-07-13 11:53:16 +0000
URL:       https://git.openjdk.java.net/jfx/commit/00b353e8f0afbe2b024b15463df867c6647d34be
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"SA has unused Hashtable, Dictionary classes",JDK-8269962,5053502,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2021-07-06 15:13,2021-07-14 17:17,2023-10-01 09:57,2021-07-08 07:29,18,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,"We are working on replacing the BasicHashtable and Hashtable implementations in the runtime.  The SA has these classes defined, and the function allEntriesDo (like the JVMTI function) but they are unused by the SA.

The only reason to use the Dictionary in the ClassLoaderData is to see which classes initiate loading for other classes.  This is viewable inside GDB if you really need it.  It's an implementation detail that is unlikely to be the cause of crash logs and core files in the field.

I think there used to be a caller for ClassLoaderDataGraph.allEntriesDo.  The hprof and useful class dump functionality uses classesDo, which uses the ClassLoaderData::_klasses field to iterate, not the dictionary.

",,,,,,,,,,,,,,,,,,,,,,,JDK-8269986,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ti4r:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-07-08 07:29;roboduke;Changeset: bca570c5
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-07-08 14:28:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bca570c56ee17cb4735a8360ec79a3ca22049d05
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/ErrorHandling/NestedThreadsList* fails in loom because thread section was changed.,JDK-8269959,5053495,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,lmesnik,lmesnik,2021-07-06 13:03,2022-02-23 12:35,2023-10-01 09:57,2022-02-23 12:35,repo-loom,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,"Thread section in hs_err has been changed from 

Current thread (0x00001475d4029500):  JavaThread ""main"" [_thread_in_vm, id=3564160, stack(0x00001475d9c1c000,0x00001475d9d1d000)] _threads_hazard_ptr=0x00001475d4242220, _nested_threads_hazard_ptr_cnt=1, _nested_threads_hazard_ptr=0x00001475d4242220

Stack: [0x00001475d9c1c000,0x00001475d9d1d000],  sp=0x00001475d9d1b930,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x197a560]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x1a0
V  [libjvm.so+0xa75c5b]  report_fatal(VMErrorType, char const*, int, char const*, ...)+0x12b
V  [libjvm.so+0x19751b0]  VMError::controlled_crash(int)+0x1d0
V  [libjvm.so+0xfa9695]  JNI_CreateJavaVM+0x5a5
C  [libjli.so+0x3b3f]  JavaMain+0x8f
C  [libjli.so+0x7d19]  ThreadJavaMain+0x9

to 


Current thread (0x00007f4874029730):  JavaThread ""main"" [_thread_in_vm, id=3560627, stack(0x00007f48793a7000,0x00007f48794a8000)] Locks owned:
Mutex: [0x00007f4874024100] Threads_lock - owner: 0x00007f4874029730 allow_vm_block safepoint_check_always
 _threads_hazard_ptr=0x00007f487424e720, _nested_threads_hazard_ptr_cnt=1, _nested_threads_hazard_ptr=0x00007f487424e720

Stack: [0x00007f48793a7000,0x00007f48794a8000],  sp=0x00007f48794a6920,  free space=1022k
Thread 0x00007f4874029730 [3560627]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1bb36c4]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x1a4
V  [libjvm.so+0xb00a53]  report_fatal(VMErrorType, char const*, int, char const*, ...)+0x133
V  [libjvm.so+0x1bae235]  VMError::controlled_crash(int)+0xd5
V  [libjvm.so+0x1064835]  JNI_CreateJavaVM+0x5b5
C  [libjli.so+0x4721]  JavaMain+0xa1
C  [libjli.so+0x81ad]  ThreadJavaMain+0xd

and doesn't match patterns in the tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ti37:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-02-23 12:35;coleenp;commit da84ae1d5e5051dc96854546303bdeb1f6e8830b (HEAD -> fibers)
Author: Coleen Phillimore <coleen.phillimore@oracle.com>
Date:   Wed Feb 23 19:58:07 2022 +0000

    I added print_owned_locks_on() for debugging something to print_on_error() but the tests are looking for a pattern that this broke, removed the code and unproblemlisted the tests.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
facilitate alternate impls of NameTable and Name,JDK-8269957,5053493,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,acobbs,jjg,jjg,2021-07-06 12:43,2023-09-18 08:01,2023-10-01 09:57,2023-08-28 07:51,17,,,,,,,22,tools,,0,,,,,,,,,,,,,,,,,,"There are a couple of issues that prevent ""friends of javac"" from being able to create alternate impls of NameTable and Name,  In addition, there are some static methods in Convert, to access parts of a Name, that would benefit from using abstract methods on Name, such as to access the part of a name before or after a delimiter character.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315138,JDK-8315248,JDK-8268622,,,JDK-8316024,JDK-8315116,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ti2r:",9223372036854775807,b13,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-04-04 12:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13282
Date: 2023-04-02 15:06:53 +0000;;;","2023-08-28 07:51;dukebot;Changeset: 11da15d1
Author:    Archie Cobbs <acobbs@openjdk.org>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-08-28 14:48:45 +0000
URL:       https://git.openjdk.org/jdk/commit/11da15d1429a7269a31667643365007c752b30e0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
config.log is not in build directory after 8u backport of JDK-8079891,JDK-8269953,5053489,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-07-06 11:35,2021-08-05 14:14,2023-10-01 09:57,2021-07-07 10:19,openjdk8u312,,,,,,,openjdk8u312,infrastructure,,0,11-na,16-na,17-na,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,"Configure, and see:

jdk8u-dev $ find | grep config.log
config.log

...while it should be here:

jdk8u-dev $ find | grep config.log
./build/linux-x86_64-normal-server-fastdebug/config.log

This block was accidentally dropped:
 http://hg.openjdk.java.net/jdk8u/jdk8u-dev/rev/7cf12efdd88d#l3.11",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8079891,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ti1v:",9223372036854775807,b01,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-07-06 11:43;shade;Fix Request (8u)

Fixes a minor regression after JDK-8079891 backport. 8u RFR (acked by sgehwolf): https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-July/014093.html;;;","2021-07-07 10:19;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/rev/4cfb48482d81
User:  shade
Date:  2021-07-07 17:17:46 +0000
;;;","2021-08-05 14:14;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/rev/4cfb48482d81
User:  andrew
Date:  2021-08-05 21:11:46 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/vectorapi/VectorCastShape*Test.java tests failed on avx2 machines,JDK-8269952,5053488,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhateja,kvn,kvn,2021-07-06 11:31,2021-07-15 10:36,2023-10-01 09:57,2021-07-08 20:22,17,,,,,,,17,hotspot,,0,c2-vector,hs-comp-triaged,oracle-triage-11,oracle-triage-17,tier2,tier3,vectorapi,,,,,,,,,,,"New tests added by JDK-8268966 changes failing when run with -XX:UseAVX=2 or =1.

compiler/vectorapi/VectorCastShape64Test.java
compiler/vectorapi/VectorCastShape128Test.java

test compiler.vectorapi.VectorCastShape128Test.testCastShape128(): failure
java.lang.AssertionError: expected [-9.297751E8] but found [-1.16216768E9]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEquals(Assert.java:774)
	at org.testng.Assert.assertEquals(Assert.java:785)
	at compiler.vectorapi.VectorCastShape128Test.testIntToFloat(VectorCastShape128Test.java:262)
	at compiler.vectorapi.VectorCastShape128Test.testCastShape128(VectorCastShape128Test.java:488)
",,,,,,,,,,,JDK-8270219,JDK-8270740,,,,,,,,,,,,,,,,,,,,JDK-8268966,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2ti1n:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-06 11:35;kvn;Run tests with next flags:

 -ea -esa -XX:CompileThreshold=100 -XX:UseAVX=2 (or 1)

Test fail with ""-XX:-TieredCompilation"" and -XX:+TieredCompilation -XX:TieredStopAtLevel=1"" so code generated by C1 is also affected.
;;;","2021-07-06 12:15;kvn;These tests also failed when run with JDK-8269825 changes:

""-XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:+UseKNLSetting""

#  Internal Error (t:\workspace\open\src\hotspot\cpu\x86\assembler_x86.cpp:2081), pid=33528, tid=30992
#  Error: assert(UseAVX > 2 && VM_Version::supports_avx512bw()) failed
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-LTS-2021-07-06-1713169.vladimir.kozlov.jdk17)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-LTS-2021-07-06-1713169.vladimir.kozlov.jdk17, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, windows-amd64)

Current CompileTask:
C2:   9611  522 %           compiler.vectorapi.VectorCastShape128Test::testShortToByte @ 50 (110 bytes)

Stack: [0x000000dfd4a00000,0x000000dfd4b00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xade561]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xd06885]  VMError::report+0x1005  (vmError.cpp:739)
V  [jvm.dll+0xd0820e]  VMError::report_and_die+0x7fe  (vmError.cpp:1549)
V  [jvm.dll+0xd08944]  VMError::report_and_die+0x64  (vmError.cpp:1330)
V  [jvm.dll+0x4c7df7]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0x24fba7]  Assembler::evpmovwb+0x67  (assembler_x86.cpp:2081)
V  [jvm.dll+0xb7a07]  vcastStoX_evexNode::emit+0x237  (ad_x86.cpp:33711)
V  [jvm.dll+0xaec5a8]  PhaseOutput::scratch_emit_size+0x268  (output.cpp:3334)
V  [jvm.dll+0xaecb55]  PhaseOutput::shorten_branches+0x445  (output.cpp:612)
V  [jvm.dll+0xae6344]  PhaseOutput::Output+0x8b4  (output.cpp:413)
V  [jvm.dll+0x47e940]  Compile::Code_Gen+0x380  (compile.cpp:2776)
V  [jvm.dll+0x47d64d]  Compile::Compile+0x161d  (compile.cpp:827)
;;;","2021-07-06 13:28;dlong;ILW = MMH = P3;;;","2021-07-08 20:22;roboduke;Changeset: 62ff55d3
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2021-07-09 03:20:59 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/62ff55d383c4763c3d17b7766a2a9649d75f9afc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Focus not painted in JButton when  setBorderPainted(false) is invoked,JDK-8269951,5053487,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,landrews,landrews,2021-07-06 11:05,2021-09-16 05:41,2023-10-01 09:57,2021-08-17 22:50,11,16,17,18,9,,,18,client-libs,,0,a11y,accessibility,bugdb_33099309,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,macos,sn_100,sn_98,sn_99,vpat,vpat-11u,vpat-17u,,,"Focus border is not seen on the JButton when setBorderPainted(false) is invoked. This works as expected on other look and feel expect on mac.

This can be reproduced with SwingSet2 with ButtonDemo by unsetting ""Paint Border"" checkbox and trying to navigate by pressing tab and + shift tab to move the focus from one button to another button.  In order to make sure that focus is moving from one button to another wrote a testcase to add the focus listener to buttons. Please see the attached testcase. 

Step to reproduce:
1) Run the attached testcase. You will see a checkbox representing ""Button Border Paint"" and three button to test focus traversal.
2) Press Tab key so that focus is moves from one button to another. Observe that focus border is seen.
3) Uncheck ""Button Border Painted"" checkbox and press tab key to move focus from one button to another. If you see that focus border is not seen but events are printed on the console then the bug is reproduced.

This works as expected on windows, ubuntu but fails on 11.2.1 Bug Sur arm64 & MacOS Big Sur 11.4 x84_64
",,,,,,,,,,,JDK-8273081,JDK-8273890,JDK-8273767,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-06 11:01;landrews;ButtonFocus.java;https://bugs.openjdk.org/secure/attachment/95392/ButtonFocus.java",,,,,,arm,x86,,,,,,,,,os_x,,,,"0|i2ti1f:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-08-17 22:50;roboduke;Changeset: 481c1f05
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2021-08-18 05:48:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/481c1f0549e361e8e83fcf0530acc4ebdb60104b
;;;","2021-08-25 09:37;kizune;Fix request (17u)
This bug is reported during the VPAT testing and affects general accessibility.
On Mac OS X keyboard focus on buttons is being displayed by the different style of border (added outer glow effect) so when border painting is switched off it is impossible to determine if Swing button has focus or not. Fix implements the glow effect painting in case when border painting turned off.
This fix is in the Mac OS X specific code and the risk is very low.
The patch applies cleanly to jdk17u
Client tests are passed
Review link: https://git.openjdk.java.net/jdk/pull/5082;;;","2021-09-14 03:38;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Applies cleanly except Copyright year update.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RunThese24H.java failed with EXCEPTION_ACCESS_VIOLATION in java_lang_Thread::get_thread_status,JDK-8269934,5053469,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dcubed,dcubed,2021-07-06 09:28,2021-08-31 16:15,2023-10-01 09:57,2021-08-03 19:09,11,13,15,17,18,8,,18,hotspot,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-hard,tier8,,,,,,"The following test failed in the JDK18 CI:

applications/runthese/RunThese24H.java

Here's a snippet from the log file:

[stress.process.out] testReplacementAfterExchange: Passed. OKAY
[stress.process.out] testTimedExchange_InterruptedException: Passed. OKAY
[stress.process.out] java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.dumpTestThreads(JSR166TestCase.java:659)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.threadRecordFailure(JSR166TestCase.java:320)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.threadFail(JSR166TestCase.java:399)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.awaitTermination(JSR166TestCase.java:1045)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.awaitTermination(JSR166TestCase.java:1056)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.ExchangerTest.testExchange(ExchangerTest.java:49)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[stress.process.out] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[stress.process.out] 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[stress.process.out] 	at javasoft.sqe.tests.api.junit.TestCase.invokeTestCase(TestCase.java:50)
[stress.process.out] 	at javasoft.sqe.javatest.lib.MultiTest.run(MultiTest.java:193)
[stress.process.out] 	at javasoft.sqe.javatest.lib.MultiTest.run(MultiTest.java:125)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.ExchangerTest.main(ExchangerTest.java:27)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[stress.process.out] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[stress.process.out] 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[stress.process.out] 	at applications.kitchensink.process.stress.modules.JckStressModule$TestRunner$1.run(JckStressModule.java:275)
[stress.process.out] testExchange: Failed. Test case throws exception: java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] testSpliterator_characteristics: Passed. OKAY
[stress.process.out] testSpliterator_getComparator: Passed. OKAY
[stress.process.out] testNanoTime: Failed. tearDown failed: java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] testCallable3: Passed. OKAY
[stress.process.out] testCallableNPE1: Passed. OKAY
[stress.process.out] testNewCachedThreadPool1: Passed. OKAY
[stress.process.out] testNewSingleThreadExecutor3: Passed. OKAY
[stress.process.out] testPrivilegedCallableWithPrivs: Passed. OKAY
[stress.process.out] testNewScheduledThreadPool: Passed. OKAY
[stress.process.out] testTimedCallable: Passed. OKAY
[stress.process.out] testCallable1: Passed. OKAY
[stress.process.out] testCallableNPE4: Passed. OKAY
[stress.process.out] testCallableNPE3: Passed. OKAY
[stress.process.out] testCallable4: Passed. OKAY
[stress.process.out] testCallable2: Passed. OKAY
[stress.process.out] testCallableNPE2: Passed. OKAY
[stress.process.out] testCreatePrivilegedCallableUsingCCLWithNoPrivs: Failed. tearDown failed: java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] testUnconfigurableScheduledExecutorServiceNPE: Failed. tearDown failed: java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] testNewFixedThreadPool4: Passed. OKAY
[stress.process.out] testNewSingleThreadScheduledExecutor: Passed. OKAY
[stress.process.out] testUnconfigurableExecutorServiceNPE: Passed. OKAY
[stress.process.out] testPrivilegedCallableUsingCCLWithPrivs: Passed. OKAY
[stress.process.out] java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.dumpTestThreads(JSR166TestCase.java:659)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.threadRecordFailure(JSR166TestCase.java:320)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.threadUnexpectedException(JSR166TestCase.java:510)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.await(JSR166TestCase.java:1217)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.await(JSR166TestCase.java:1222)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.ExecutorsTest.testDefaultThreadFactory(ExecutorsTest.java:332)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[stress.process.out] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[stress.process.out] 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[stress.process.out] 	at javasoft.sqe.tests.api.junit.TestCase.invokeTestCase(TestCase.java:50)
[stress.process.out] 	at javasoft.sqe.javatest.lib.MultiTest.run(MultiTest.java:193)
[stress.process.out] 	at javasoft.sqe.javatest.lib.MultiTest.run(MultiTest.java:125)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.ExecutorsTest.main(ExecutorsTest.java:38)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[stress.process.out] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[stress.process.out] 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[stress.process.out] 	at applications.kitchensink.process.stress.modules.JckStressModule$TestRunner$1.run(JckStressModule.java:275)
[stress.process.out] testTwoParties: Passed. OKAY
[stress.process.out] testResetAfterCommandException: Passed. OKAY
[stress.process.out] testMoreTasksThanParties: Passed. OKAY
[stress.process.out] testAwait5_Timeout_BrokenBarrier: Passed. OKAY
[stress.process.out] testReset_NoBrokenBarrier: Passed. OKAY
[stress.process.out] testConstructor2: Passed. OKAY
[stress.process.out] testConstructor1: Passed. OKAY
[stress.process.out] testAwait2_Interrupted_BrokenBarrier: Passed. OKAY
[stress.process.out] testAwait1_Interrupted_BrokenBarrier: Passed. OKAY
[stress.process.out] testReset_Leakage: Passed. OKAY
[stress.process.out] testGetParties: Passed. OKAY
[stress.process.out] testSingleParty: Passed. OKAY
[stress.process.out] testBarrierAction: Passed. OKAY
[stress.process.out] testResetAfterTimeout: Passed. OKAY
[stress.process.out] testAwait3_TimeoutException: Passed. OKAY
[stress.process.out] testAwait4_Timeout_BrokenBarrier: Passed. OKAY
[stress.process.out] testReset_BrokenBarrier: Passed. OKAY
[stress.process.out] testResetAfterInterrupt: Failed. tearDown failed: java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.dumpTestThreads(JSR166TestCase.java:659)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.threadRecordFailure(JSR166TestCase.java:320)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.threadFail(JSR166TestCase.java:399)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.awaitTermination(JSR166TestCase.java:1045)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.awaitTermination(JSR166TestCase.java:1056)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.CyclicBarrierTest.testResetWithoutBreakage(CyclicBarrierTest.java:382)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[stress.process.out] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[stress.process.out] 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[stress.process.out] 	at javasoft.sqe.tests.api.junit.TestCase.invokeTestCase(TestCase.java:50)
[stress.process.out] 	at javasoft.sqe.javatest.lib.MultiTest.run(MultiTest.java:193)
[stress.process.out] 	at javasoft.sqe.javatest.lib.MultiTest.run(MultiTest.java:125)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.CyclicBarrierTest.main(CyclicBarrierTest.java:33)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[stress.process.out] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[stress.process.out] 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[stress.process.out] 	at applications.kitchensink.process.stress.modules.JckStressModule$TestRunner$1.run(JckStressModule.java:275)
[stress.process.out] testResetWithoutBreakage: Failed. Test case throws exception: java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] testGetAndSetDefaultUncaughtExceptionHandler: Failed. tearDown failed: java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] testGetAndSetUncaughtExceptionHandler: Failed. tearDown failed: java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] testDefaultThreadFactory: Failed. Test case throws exception: java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.dumpTestThreads(JSR166TestCase.java:659)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.threadRecordFailure(JSR166TestCase.java:320)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.threadUnexpectedException(JSR166TestCase.java:510)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase$CheckedRunnable.run(JSR166TestCase.java:1068)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.runWithSecurityManagerWithPermissions(JSR166TestCase.java:816)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.runWithPermissions(JSR166TestCase.java:788)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.JSR166TestCase.runWithoutPermissions(JSR166TestCase.java:828)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.ExecutorsTest.testPrivilegedCallableWithNoPrivs(ExecutorsTest.java:455)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[stress.process.out] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[stress.process.out] 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[stress.process.out] 	at javasoft.sqe.tests.api.junit.TestCase.invokeTestCase(TestCase.java:50)
[stress.process.out] 	at javasoft.sqe.javatest.lib.MultiTest.run(MultiTest.java:193)
[stress.process.out] 	at javasoft.sqe.javatest.lib.MultiTest.run(MultiTest.java:125)
[stress.process.out] 	at javasoft.sqe.tests.api.java.util.concurrent.ExecutorsTest.main(ExecutorsTest.java:38)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[stress.process.out] 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[stress.process.out] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[stress.process.out] 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[stress.process.out] 	at applications.kitchensink.process.stress.modules.JckStressModule$TestRunner$1.run(JckStressModule.java:275)
[stress.process.out] #
[stress.process.out] # A fatal error has been detected by the Java Runtime Environment:
[stress.process.out] #
[stress.process.out] #  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffbc228d1d7, pid=49332, tid=9016
[stress.process.out] #
[stress.process.out] # JRE version: Java(TM) SE Runtime Environment (18.0+5) (build 18-ea+5-146)
[stress.process.out] # Java VM: Java HotSpot(TM) 64-Bit Server VM (18-ea+5-146, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
[stress.process.out] # Problematic frame:
[stress.process.out] # V  [jvm.dll+0x38d1d7]  java_lang_Thread::get_thread_status+0x7
[stress.process.out] #
[stress.process.out] # No core dump will be written. Minidumps are not enabled by default on client versions of Windows
[stress.process.out] #
[stress.process.out] # JFR recording file will be written. Location: T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese24H_java\\scratch\\0\\hs_err_pid49332.jfr
[stress.process.out] #
[stress.process.out] Unsupported internal testing APIs have been used.
[stress.process.out] 
[stress.process.out] # An error report file with more information is saved as:
[stress.process.out] # T:\\testoutput\\test-support\\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese24H_java\\scratch\\0\\hs_err_pid49332.log


Please note that the test was reporting NULL return values from
java.lang.management.ThreadInfo.getLockName() before the
EXCEPTION_ACCESS_VIOLATION crash. It is possible that the
code that is calling ThreadInfo.getLockName() is not properly coded
to handle NULL return values. ThreadInfo.getLockName()  is racy
with respect to thread exit so it is possible for the target thread to
exit while the ThreadInfo.getLockName()  query is running. In that
case, the API is supposed to return NULL.

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000001c75b74c810):  VMThread ""VM Thread"" [stack: 0x0000000f91400000,0x0000000f91500000] [id=9016]

Stack: [0x0000000f91400000,0x0000000f91500000],  sp=0x0000000f914ff0e8,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x38d1d7]  java_lang_Thread::get_thread_status+0x7  (javaClasses.cpp:1836)


siginfo: EXCEPTION_ACCESS_VIOLATION (0xc0000005), reading address 0x0000000000000028

It's the VM thread that's crashing here. I suspect a NULL ptr
has been passed in via some API. The VMThread usually
protects itself against such things so I'm not sure what
happened here.",,,,,,,,,,,JDK-8273210,JDK-8273003,JDK-8273036,JDK-8272782,JDK-8272912,JDK-8273180,,,,,,,,,,,,,JDK-8268533,,,,,,,,JDK-8273107,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,"0|i2thxf:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-06 11:17;mseledtsov;ILW = HLM = P3;;;","2021-07-06 21:34;dholmes;There were no changes in jdk-18+5-146-tier8 that seem obviously potentially linked to this issue.;;;","2021-07-06 21:49;dholmes;There is almost nothing to go on here:

---------------  T H R E A D  ---------------

Current thread (0x000001c75b74c810):  VMThread ""VM Thread"" [stack: 0x0000000f91400000,0x0000000f91500000] [id=9016]

Stack: [0x0000000f91400000,0x0000000f91500000],  sp=0x0000000f914ff0e8,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x38d1d7]  java_lang_Thread::get_thread_status+0x7  (javaClasses.cpp:1836)

VM_Operation (0x0000000fd81fe450): ThreadDump, mode: safepoint, requested by thread 0x000001c787a79880

Don't know why there is not more stack for the VMThread. 

There are 1033 threads in the current thread list, and 1030 of those are waiting to be deleted. The error does suggest a NULL threadObj was passed - but that should not be possible.

It is somewhat disturbing to see:

OutOfMemory and StackOverflow Exception counts:
OutOfMemoryError java_heap_errors=561
StackOverflowErrors=76
LinkageErrors=520098


;;;","2021-07-13 22:51;dholmes;> ThreadInfo.getLockName() is racy with respect to thread exit 

[~dcubed] I'm not sure what you mean by this. The ThreadInfo was put together in a snapshot, and once it has been collected the thread can have terminated before any of the info is then used. But that info is all stored at the Java level by then and doesn't require examining anything in the VM AFAICS.;;;","2021-07-19 16:59;dcubed;You can have a ThreadInfo that refers to a thread that is racing to exit.
At the point that you call ThreadInfo.getLockName(), it is possible that
the thread is no longer alive. In that case, ThreadInfo.getLockName()
is supposed to return NULL. We have specific logic in the VM that
handles this case.

However, if  the code that is calling ThreadInfo.getLockName() is not
coded properly to handle a NULL return, then we can crash.;;;","2021-07-19 17:56;dholmes;[~dcubed] This is Java code.

  public String getLockName() {
        return lockName;
    }

It makes no difference what state the thread is in when this called, the value was captured when the thread snapshot was taken. And if it returns null and the caller doesn't check then we will get a NPE not a crash.;;;","2021-07-20 07:54;dcubed;Sorry, I think I've confused the analysis of this failure. This error message:

[stress.process.out] java.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null 

made me think of a different failure mode that I've chased before. Just
to complete the history of what I was thinking about:

src/hotspot/share/services/threadService.cpp:

ThreadSnapshot::initialize() calls ObjectSynchronizer::get_lock_owner()
and has to handle the fact that the lock owner may be NULL because
the object may no longer be locked because the thread unlocked the
object or even that the thread unlocked the object AND exited.

Even if the information returned in the ThreadInfo is non-NULL at the time
that it is gathered, the situation may have changed by the time the caller of
the jmm_GetThreadInfo() API gets to the point of processing the info that
was returned. The thread that owned the monitor may have unlocked the
object or it may have unlocked the object and existed. It's just a race that's
permitted by the jmm_GetThreadInfo() API.

So that's what I was thinking about when I saw:

    the return value of ""java.lang.management.ThreadInfo.getLockName()"" is null

snippet.

Okay, what does that have to do with crashing in:

 V [jvm.dll+0x38d1d7] java_lang_Thread::get_thread_status+0x7 (javaClasses.cpp:1836)

Probably nothing.

For the java_lang_Thread::get_thread_status() crash, it's probably a case
of a stale/GC'ed threadObj value that may or may not be related to an M&M
API. Without a more proper stack, it's really hard to say what's doing on
here or how we got to java_lang_Thread::get_thread_status().

Again, sorry for confusing the analysis.;;;","2021-07-20 16:16;dholmes;Thanks for clarifying Dan.;;;","2021-07-26 06:59;dcubed;Here's the crashing thread's stack for the jdk-18+8-305-tier8 sighting: 

applications/runthese/RunThese24H.java 

---------------  T H R E A D  ---------------

Current thread (0x00007f34bc092e60):  VMThread ""VM Thread"" [stack: 0x00007f346846d000,0x00007f346856d000] [id=13874]

Stack: [0x00007f346846d000,0x00007f346856d000],  sp=0x00007f346856b888,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x7c7d77]  java_lang_Thread::get_thread_status(oopDesc*)+0x7
V  [libjvm.so+0xd4c459]  ThreadDumpResult::add_thread_snapshot(JavaThread*)+0x69
V  [libjvm.so+0xdbdb91]  VM_ThreadDump::doit()+0xf1
V  [libjvm.so+0xdbddfa]  VM_Operation::evaluate()+0xea
V  [libjvm.so+0xdbf6f8]  VMThread::evaluate_operation(VM_Operation*)+0xb8
V  [libjvm.so+0xdbfbd4]  VMThread::inner_execute(VM_Operation*)+0x1d4
V  [libjvm.so+0xdbfebf]  VMThread::run()+0xbf
V  [libjvm.so+0xd412ae]  Thread::call_run()+0xde
V  [libjvm.so+0xba8961]  thread_native_entry(Thread*)+0xe1


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000028

That stack should be much more helpful!;;;","2021-07-26 22:50;dholmes;That stack really just confirms what we already suspected: during a thread dump operation we find a thread that apparently has a NULL threadObj() - which should not be possible ... except now that I'm looking closely again I don't see where we filter out JNI attaching threads in this code ...;;;","2021-07-28 02:37;dholmes;I've trawled through the code now and as far as I can see we do not preclude threads that are in the process of attaching, and so may have a NULL threadObj when ThreadSnapshot::initialize calls get_thread_status. Code that uses the ThreadSnapshot does seem to guard again a NULL ts->threadObj(), but initialize itself does not. We can trivially add a check a report a thread status of NEW in that case.

I hacked the VM to put an attaching thread in infinite sleep, then hacked a test that attaches a native thread so that we use JMM dumpAllThreads whilst the native thread is still attaching. This produced the following SEGV crash:

---------------  T H R E A D  ---------------

Current thread (0x00007f35b81ac370):  VMThread ""VM Thread"" [stack: 0x00007f356d630000,0x00007f356d730000] [id=31125]

Stack: [0x00007f356d630000,0x00007f356d730000],  sp=0x00007f356d72e5e0,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x5908f8]  std::enable_if<HasDecorator<64ul, 64ul>::value, int>::type RawAccessBarrier<64ul>::load_internal<64ul, int>(void*)+0xc
V  [libjvm.so+0x590789]  int RawAccessBarrier<64ul>::load<int>(void*)+0x18
V  [libjvm.so+0x6f727c]  EnableIf<HasDecorator<272448ul, 2048ul>::value&&AccessInternal::PreRuntimeDispatch::CanHardwireRaw<272448ul>::value, int>::type AccessInternal::PreRuntimeDispatch::load<272448ul, int>(void*)+0x18
V  [libjvm.so+0x6f6fa0]  EnableIf<HasDecorator<272448ul, 2048ul>::value, int>::type AccessInternal::PreRuntimeDispatch::load_at<272448ul, int>(oopDesc*, long)+0x2b
V  [libjvm.so+0x6f6d07]  EnableIf<!HasDecorator<270400ul, 2048ul>::value, int>::type AccessInternal::PreRuntimeDispatch::load_at<270400ul, int>(oopDesc*, long)+0x34
V  [libjvm.so+0x6f6ad9]  int AccessInternal::load_at<262144ul, int>(oopDesc*, long)+0x30
V  [libjvm.so+0x6f68f5]  AccessInternal::LoadAtProxy<262144ul>::operator int<int>() const+0x27
V  [libjvm.so+0x6f6609]  oopDesc::int_field(int) const+0x43
V  [libjvm.so+0xaddb16]  java_lang_Thread::get_thread_status(oopDesc*)+0xac
V  [libjvm.so+0x1196025]  ThreadSnapshot::initialize(ThreadsList*, JavaThread*)+0xf5
V  [libjvm.so+0x1194a9f]  ThreadDumpResult::add_thread_snapshot(JavaThread*)+0x79
V  [libjvm.so+0x1220f09]  VM_ThreadDump::snapshot_thread(JavaThread*, ThreadConcurrentLocks*)+0x2b
V  [libjvm.so+0x1220d0b]  VM_ThreadDump::doit()+0x15b

;;;","2021-07-28 16:11;dholmes;That all said I can't actually find any evidence that the crashing test attaches any native threads this way.;;;","2021-08-03 19:09;roboduke;Changeset: 7e518f42
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-08-04 02:08:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7e518f42c9346abdf0c8059b45d3dfef95ed69bb
;;;","2021-08-20 07:46;vkempik;Fix Request (15u): a Rather simple sanitizing fix. No applying clean. full regression testing performed;;;","2021-08-24 05:55;dholmes;Fix Request (17u)

This is a clean backport in 17u. The fix is extremely simple and low risk and addresses a bug that can easily be encountered by applications. The fix has been tested in JDK 18. Thanks.;;;","2021-08-24 07:40;vkempik;Fix Request (13u): a Rather simple sanitizing fix. No applying clean. Testing: hs:tier1;;;","2021-08-26 05:43;vkempik;Fix Request (11u): a Rather simple sanitizing fix. Not applying clean. Testing: GHA: hs:tier1
;;;",,,,,,,,,,,,,,,,,,,,,
test/jdk/javax/net/ssl/compatibility/JdkInfo incorrect verification of protocol and cipher support,JDK-8269933,5053467,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fguallini,fguallini,fguallini,2021-07-06 08:58,2022-03-18 05:36,2023-10-01 09:57,2021-07-20 20:39,,,,,,,,18,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,"The JdkInfo test helper class is verifying whether a protocol or cipher is supported/enabled by looking at a String value:
'
...
    public final String supportedProtocols;
...
  public boolean supportsProtocol(Protocol protocol) {
        return supportedProtocols.contains(protocol.name);
    }
'
The approach of checking the existence of a substring is problematic. For instance, when supportedProtocols is equal to 'TLSv1.3,TLSv1.2', supportedProtocols.contains(""TLSv1"") will return true, given that 'TLSv1' is effectively a substring of 'TLSv1.3'
",,,,,,,,,,,JDK-8281720,JDK-8282963,JDK-8282037,JDK-8281721,JDK-8283372,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2thwz:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-07-20 20:39;roboduke;Changeset: 6346793c
Author:    Fernando Guallini <fguallini@openjdk.org>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2021-07-21 03:38:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6346793c6401b3758edf0a8912acb0fd8813957b
;;;","2022-03-09 06:42;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport. 
SAP testing passed.;;;","2022-03-09 06:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/217
Date: 2022-03-09 14:43:10 +0000;;;","2022-03-17 01:02;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only a test change.
Clean backport.
SAP nightly testing passed.;;;","2022-03-17 01:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/906
Date: 2022-03-17 08:05:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ButtonGroupLayoutTraversalTest.java fails on macOS,JDK-8269931,5053465,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,aivanov,aivanov,2021-07-06 08:29,2021-09-23 03:04,2023-10-01 09:57,2021-07-08 13:45,8u311,,,,,,,8u311,client-libs,,0,11-na,cssn21_07_01,sustaining,,,,,,,,,,,,,,,"java/awt/Focus/FocusTraversalPolicy/ButtonGroupLayoutTraversal/ButtonGroupLayoutTraversalTest.java fails on macOS

10 of 10:
java.lang.RuntimeException: Component 2 is not reachable in the forward focus cycle",,,,,,,,,,,JDK-8271432,,,,,,,,,,,,,,,,,,,,,JDK-8198619,,,,,JDK-8265043,JDK-8270116,JDK-8172509,,,,,,,,,,,,,,,,,,,,os_x,,,,"0|i2thwj:",9223372036854775807,b02,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-07-06 08:31;aivanov;This is similar to JDK-8198619 but the failure here refers to Component 2 whereas the test failed on Component 1 in that bug.;;;","2021-07-06 09:11;aivanov;This requires two test fixes: JDK-8172509 and JDK-8198619.
Additional fixes may be required.;;;","2021-07-14 12:50;aivanov;I backported two test fixes: JDK-8172509 and JDK-8198619.
Now the java/awt/Focus/FocusTraversalPolicy/ButtonGroupLayoutTraversal/ButtonGroupLayoutTraversalTest.java passes on macOS.

I submitted JDK-8270116 to run this test in all LAFs including Aqua LAF which is currently excluded.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"runtime/jni/checked/TestPrimitiveArrayCriticalWithBadParam.java failed with ""FATAL ERROR in native method: Primitive type array expected but not received for JNI array operation""",JDK-8269923,5053457,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,dcubed,dcubed,2021-07-06 08:11,2021-07-14 17:16,2023-10-01 09:57,2021-07-07 04:48,18,,,,,,,18,hotspot,,0,regression,tier1,tier3,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

runtime/jni/checked/TestPrimitiveArrayCriticalWithBadParam.java

This failure has occurred in three Tier1 job sets in a row.

Here's a snippet from the log file:

----------System.out:(6/1833)*----------
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-18+5-160\\windows-x64-debug.jdk\\jdk-18\\fastdebug\\bin\\java.exe -cp T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\classes\\2\\runtime\\jni\\checked\\TestPrimitiveArrayCriticalWithBadParam.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-18+5-160\\src.full\\open\\test\\hotspot\\jtreg\\runtime\\jni\\checked;T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\classes\\2\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\javatest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\jtreg.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\junit.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\hamcrest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\testng.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\jcommander.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\guice.jar -Xcheck:jni -Djava.library.path=c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-18+5-160\\windows-x64-debug.test\\hotspot\\jtreg\\native TestPrimitiveArrayCriticalWithBadParam test ]
[2021-07-06T13:03:47.790032500Z] Gathering output for process 84684
[2021-07-06T13:03:48.048256200Z] Waiting for completion for process 84684
[2021-07-06T13:03:48.053208800Z] Waiting for completion finished for process 84684
[2021-07-06T13:03:48.053208800Z] Waiting for completion for process 84684
[2021-07-06T13:03:48.053208800Z] Waiting for completion finished for process 84684
----------System.err:(23/1369)----------
 stdout: [FATAL ERROR in native method: Primitive type array expected but not received for JNI array operation
	at TestPrimitiveArrayCriticalWithBadParam.pin(Native Method)
	at TestPrimitiveArrayCriticalWithBadParam.test(TestPrimitiveArrayCriticalWithBadParam.java:79)
	at TestPrimitiveArrayCriticalWithBadParam.main(TestPrimitiveArrayCriticalWithBadParam.java:50)
];
 stderr: []
 exitValue = 1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269697,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,"0|i2thur:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-06 08:14;dcubed;jdk-18+5-160 only contains one changeset:

JDK-8269697 JNI_GetPrimitiveArrayCritical() should not accept object array

[~zgu] - Please take a look as soon as you can...;;;","2021-07-06 08:16;dcubed;Why is this test failure only happening on Windows?;;;","2021-07-06 11:21;mseledtsov;ILW = HLM = P3 (after problem listing this is no longer P1);;;","2021-07-06 11:22;zgu;Looks like inconsistent exit code on Windows.  Other platforms return 134 when jni check fails, but Windows return 1.;;;","2021-07-06 14:36;dholmes;Windows doesn't do exit codes like Linux or macOS. Sorry I missed the test was looking for a specific exit code rather than non-zero.;;;","2021-07-06 14:36;dholmes;That said this should have been tested on all platforms before integration. GitHub Actions can be used if no Windows available locally.;;;","2021-07-07 04:48;roboduke;Changeset: bffb1a71
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-07-07 11:47:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bffb1a7199800ee05bf5fe32b7a6867fdd7bfbbf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JRadioButton/8033699/bug8033699.java fails on macOS,JDK-8269920,5053453,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2021-07-06 07:29,2021-10-11 05:11,2023-10-01 09:57,2021-08-10 14:30,8u311,,,,,,,8u321,client-libs,,0,cssn21_07_01,cssn21_07_02,cssn21_08_01,mach5,noreg-self,sustaining,,,,,,,,,,,,"javax/swing/JRadioButton/8033699/bug8033699.java always fails on macOS

macOS:
Exception: java.lang.reflect.InvocationTargetException
Exception: java.lang.RuntimeException: Focus is not on Radio Button C as Expected",,,,,,,,,,,JDK-8273032,,,,,,,,,,,,,,,,,,,,,JDK-8233555,,,,,JDK-8265043,JDK-8272300,,,,,,,,,,,,,,,,,,,,,os_x,,,,"0|i2thtv:",9223372036854775807,b01,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-08-10 14:19;aivanov;I submitted a separate issue for the test failure on Linux: JDK-8272300;;;","2021-08-10 14:21;aivanov;This failure of JRadioButton/8033699/bug8033699.java on macOS is resolved by backporting JDK-8167160 + JDK-8208640 + JDK-8249548.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Insert missing commas in copyrights in java.net,JDK-8269917,5053450,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pconcannon,pconcannon,pconcannon,2021-07-06 07:08,2021-07-14 17:14,2023-10-01 09:57,2021-07-06 08:11,18,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,Insert missing commas in copyrights from files in java.net,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tht7:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-07-06 08:11;roboduke;Changeset: 1578979d
Author:    Patrick Concannon <pconcannon@openjdk.org>
Date:      2021-07-06 15:10:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1578979df706ae9f4324931e1fc0d58265762c79
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Shenandoah: Resolve UNKNOWN access strength, where possible",JDK-8269897,5053405,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rkennke,shade,shade,2021-07-06 00:04,2022-08-01 09:43,2023-10-01 09:57,2021-07-13 06:32,16,17,18,,,,,18,hotspot,,0,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,regression,,,,,,,,,,,,,,"Download the jcstress test bundle from here:
  https://builds.shipilev.net/jcstress/jcstress-tests-all-20210703.jar

Run it with release build:
 $ build/linux-x86_64-server-release/images/jdk/bin/java -jar jcstress-tests-all-20210703.jar --jvmArgs ""-XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:+UnlockExperimentalVMOptions -XX:ShenandoahGuaranteedGCInterval=10 -Xint"" -sc false -t atomicity.varHandles.arrays.CAETest.CompareAndExchangeString -m stress

                RESULT      SAMPLES     FREQ      EXPECT  DESCRIPTION
            2, null, 2  141,448,926   54.14%  Acceptable  actor2 update successfully
         null, null, 2          265   <0.01%   Forbidden  This won't happen because compareAndExchange is atomic
      null, null, null            0    0.00%   Forbidden  This won't happen because compareAndExchange is atomic
    null, null, object            0    0.00%   Forbidden  This won't happen because compareAndExchange is atomic
  null, object, object  119,824,409   45.86%  Acceptable  actor1 update successfully

The test is basically:

    @Actor
    public void actor1(LLL_Result r) {
        r.r1 = (String) vh.compareAndExchange(this, null, ""object"");
    }

    @Actor
    public void actor2(LLL_Result r) {
        r.r2 = (String) vh.compareAndExchange(this, null, ""2"");
    }

    @Arbiter
    public void arbiter1(LLL_Result r) {
        r.r3 = field;
    }

This ""null, null, 2"" outcome says that two compareAndExchanges returned ""null"" as the answer, and the final result was ""2"". Which probably implies that ""null"" was the GC-washed result.

Bisection shows it started with JDK-8256011, but I wonder if the real reason is something like JDK-8255991, where we return nulls from the CAS paths.

Note that the test fails in *interpreter* too. Reverting the shenandoahBarrierSet.inline.hpp hunk from JDK-8255991:
 https://github.com/openjdk/jdk/commit/d99e1f6c296c23b8714fc94fe4f3c7bece000f9c#diff-6db05938f86f624bd091e0092da9760ab46d8c18ec2654f97d4bb78f7ea52311

...makes the test pass.",,,,,,,,,,,JDK-8273207,JDK-8272942,,,,,,,,,,,,,,,,,,,,JDK-8255991,JDK-8256011,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2thj7:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-07-06 11:59;rkennke;We used to treat UNKNOWN reference accesses like weak accesses. UNKNOWN is used for Unsafe, reflection and JNI accesses, where it cannot be determined at compilation-time if we are accessing a regular field or a Reflection.referent field. The rationale for treating UNKNOWN as weak was that if the reference is a regular reference, then the value would be strongly reachable anyway, and only if it is a referent field would reachability matter. However, it turns out that this assumption is wrong: the test shows that a reference that is only weakly reachable can be legitimately written into a field, thus resurrecting the reference, and when that weakly reachable reference is loaded, it would be (wrongly) filtered as NULL.
A fix is to treat UNKNOWN accesses as strong. Accessing Reference.referent via reflection, JNI or Unsafe is  Bad Idea anyway.
This test shows the problem with CAS, but I believe it affects all accesses via reflection, JNI, etc.
;;;","2021-07-13 06:32;roboduke;Changeset: 7ac08161
Author:    Roman Kennke <rkennke@openjdk.org>
Date:      2021-07-13 13:30:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7ac08161a8b2080ed054bc00a30d6f694ece4df3
;;;","2021-08-24 03:00;shade;Fix Request (17u)

This fixes a serious Shenandoah bug. Patch applies cleanly, tests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
stack-use-after-scope in NewObjectA,JDK-8269882,5053385,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,vprovodin,vprovodin,2021-07-05 15:09,2021-08-16 11:04,2023-10-01 09:57,2021-07-05 19:20,,,,,,,,18,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,"Running tests (for example, jtreg:test/jdk/javax/imageio/plugins/bmp/Write3ByteBgrTest.java) with Address Sanitizer results in failures like this one:

SUMMARY: AddressSanitizer: stack-use-after-scope /.../jdk/src/hotspot/share/prims/jni.cpp:972 in DTraceReturnProbeMark_NewObjectA::~DTraceReturnProbeMark_NewObjectA()

In NewObjectA(), the return value of the function is passed to the probe-supporting macro by value instead of by reference:
  DT_RETURN_MARK(NewObjectA, jobject, (const jobject)obj);
(notice 'const jobject' instead of 'const jobject&')
Casting a variable to a non-reference type technically makes the resulting expression a prvalue, which then gets bound to a reference that is alive up until the end of the function. The prvalue is then touched in the destructor of DTraceReturnProbeMark_NewObjectA (a local class created by the DT_RETURN_MARK macro) and this is detected by Address Sanitizer as stack-use-after-scope when running certain tests.",,,,,,,,,,,JDK-8270462,JDK-8272540,JDK-8271204,JDK-8270367,JDK-8271699,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2ther:",9223372036854775807,b05,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-05 16:00;dholmes;This is a trivial fix, and the only case where the '&' is missing;;;","2021-07-05 19:20;roboduke;Changeset: 20eba355
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-07-06 02:20:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/20eba35515073c4daf1fa8ac78a37196ea196690
;;;","2021-07-13 11:32;zgu;Fix Request (11u)

I would like to backport this parity patch to openjdk11u. 

The original patch applies cleanly and javax/imageio/plugins/bmp/Write3ByteBgrTest.java test passed.;;;","2021-07-13 11:44;zgu;Fix Request (8u)

I would like to backport this patch to openjdk8u, as it has the same issue.

The original patch applies cleanly and javax/imageio/plugins/bmp/Write3ByteBgrTest.java test passed.;;;","2021-07-14 00:25;clanger;Fix Request (17u)

I'd like to bring this change to jdk17u as well, for parity with older update releases (11, 8). Change applies cleanly and seems no-risk.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PPC64] C2: Math.rint intrinsic uses wrong rounding mode,JDK-8269879,5053381,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mdoerr,mdoerr,mdoerr,2021-07-05 12:32,2021-07-15 10:34,2023-10-01 09:57,2021-07-07 05:53,16,17,18,,,,,17,hotspot,,0,c2,hs-comp-triaged,jck,oraclejdk-na,oracle-triage-18,,,,,,,,,,,,,"The test api/java_lang/Math/rintround is failing on PPC64 platforms when running with -Xcomp -XX:-TieredCompilation.
C2 uses frin and xvrdpi instructions which don't use the required rounding mode. Rounding mode ""RoundToDPIntegerNearEven"" needs to be used. See
https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#rint-double-
",,,,,,,,,,,JDK-8270728,JDK-8270052,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8231649,,,,,,,,,,,,ppc,,,,,,,,,,,,,,"0|i2thdv:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-06 03:44;chagedorn;ILW = JCK failure on PPC64, on PPC64 only with -Xcomp -XX:-TieredCompilation, disable RoundDoubleMode intrinsics = HMM = P2;;;","2021-07-07 05:53;roboduke;Changeset: 1f2bf1d1
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-07-07 12:52:18 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/1f2bf1d19482f9240ba494994b584d1cd7edf898
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/sa/Clhsdb tests are using a C2 specific VMStruct field,JDK-8269873,5053370,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-07-05 05:03,2022-10-10 01:40,2023-10-01 09:57,2021-07-12 04:24,17,18,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,testbug,,,,,,,,,,,,,,,"The two Clhsdb tests ""ClhsdbField.java"" and ""ClhsdbVmStructsDump.java"" are using the ""field JVMState _bci"" for testing. This field is C2 specific. Both tests are failing if C2 is not available:

java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'field JVMState _bci' missing from stdout/stderr 

	at ClhsdbField.main(ClhsdbField.java:69)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: 'field JVMState _bci' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
	at ClhsdbLauncher.runCmd(ClhsdbLauncher.java:166)
	at ClhsdbLauncher.run(ClhsdbLauncher.java:203)
	at ClhsdbField.main(ClhsdbField.java:65)
	... 6 more
",,,,,,,,,,,JDK-8270749,JDK-8270364,JDK-8294249,JDK-8295048,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2thbf:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-07-12 04:24;roboduke;Changeset: 999ced03
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Kevin Walls <kevinw@openjdk.org>
Date:      2021-07-12 11:23:38 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/999ced03ccd58b216adf9a7bfb2646e511219e6c
;;;","2022-10-08 08:16;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nighlty testing passed.;;;","2022-10-08 12:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1410
Date: 2022-10-08 17:13:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CellEditEvent: must not throw NPE in accessors,JDK-8269871,5053368,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fastegal,fastegal,fastegal,2021-07-05 05:00,2021-09-18 07:02,2023-10-01 09:57,2021-09-06 01:52,jfx16,,,,,,,jfx18,javafx,,0,CellEditEvent,TableColumn,TreeTableColumn,,,,,,,,,,,,,,,"Happens if instantiated with null tablePosition (stumbling over it triggered JDK-8187229, though the underlying reason of that is different - incorrect edit location). 

Misbehavior was introduced when fixing JDK-8120610 (by removing null guard of tablePosition without updating the accessors to cope with null pos). Also effects default onCommit handlers which went unnoticed because of .. unusual tests.  

example of failing tests (for TableColumn.CellEditEvent, similar for TreeTableColumn.CellEditEvent):

    /**
     * NPE with not-null table on accessing table.
     */
    @Test
    public void testNullTablePosition() {
        CellEditEvent<String, String> ev = new CellEditEvent<>(table, null, editAnyEvent(), null);
        ev.getTableView();
    }

----
  
Note: the part below was originally included in this issue, on further analysis moved to JDK-8271474

- throws NPE if instantiated with null table

might be considered a strengthening of precondition, because the table is passed as source to super. Arguably, though because that role is an implementation detail. At least, it should be specified as requiring not-null

  
    /**
     * Strengthened precondition: event must handle null source.
     */
    @Test
    public void testNullTable() {
        CellEditEvent<?, ?> ev = new CellEditEvent<Object, Object>(null, // null table
                new TablePosition<>(null, -1, null), editAnyEvent(), null);
    }
    
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8187229,,,,,JDK-8271484,JDK-8120610,JDK-8271474,,,,,,,,,,,,,,,,,,,,,,,,"0|i2thaz:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-08-20 03:48;fastegal;fixing by:

- changed implementation of accessores to check for null position
- changed implementation of default onCommit handler to cope with nulls from accessors

Note: the part below was originally included in this issue, on further analysis moved to JDK-8271474

- constructor does not throw on null table: null source is allowed in a general event, nothing special in cellEditEvents, that given tableView is never used later on, the event fired onto the column isn't dispatched anywhere else .. 

 ;;;","2021-09-06 01:52;roboduke;Changeset: 78ae4a81
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-09-06 08:50:55 +0000
URL:       https://git.openjdk.java.net/jfx/commit/78ae4a815b728f5a0dca8fa6de8ca68a27a1d189
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Async UL needs to handle ERANGE on exceeding SEM_VALUE_MAX,JDK-8269865,5053361,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xliu,stuefe,stuefe,2021-07-05 02:39,2021-07-21 17:53,2023-10-01 09:57,2021-07-14 15:36,17,18,,,,,,18,hotspot,,0,hgupdate-sync,logging,,,,,,,,,,,,,,,,"This happens on our AIX systems, which have a SEM_VALUE_MAX limit of 32k, during gtest execution. However, this is not a platform-dependent issue - the JVM should gracefully handle this case to be platform-neutral.

stdout:
```
[ RUN      ] LogConfigurationTest.reconfigure_decorators_MT_vm
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/semaphore_posix.cpp:57
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/sapmnt/sapjvm_work/openjdk/nb/rs6000_64/jdk17/src/hotspot/os/posix/semaphore_posix.cpp:57), pid=9961906, tid=5398
#  assert(ret == 0) failed: sem_post failed; error='Result too large' (errno=ERANGE)
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.openjdk.jdk17)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.openjdk.jdk17, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, aix-ppc64)
# Core dump will be written. Default location: /priv/jvmtests/output_openjdk17_stage_dbgU_rs6000_64/jtreg_hotspot_work/JTwork/gtest/AsyncLogGtest/core or core.9961906
#
# An error report file with more information is saved as:
# /priv/jvmtests/output_openjdk17_stage_dbgU_rs6000_64/jtreg_hotspot_work/JTwork/gtest/AsyncLogGtest/hs_err_pid9961906.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
assert failed: assert(ret == 0) failed: sem_post failed; error='Result too large' (errno=ERANGE)
```

stack:
```
------ current frame:
iar:  0x090000001629fdd4 libjvm.so::_ZN18AixNativeCallstack27print_callstack_for_contextEP12outputStreamPK10ucontext_tbPcm+0x934  (C++ saves_lr stores_bc gpr_saved:18 fixedparms:5 )
lr:   0x0000000116da1f20 (unknown module)::(unknown function)+?
sp:   0x0000000116da1c90 (base - 0x1BF8) 
rtoc: 0x08001000a04483e8 
|---stackaddr----|   |----lrsave------|:   <function name>
0x0000000116da23e0 - 0x0900000016368600 libjvm.so::_ZN2os27platform_print_native_stackEP12outputStreamPvPci+0x20  (C++ saves_lr stores_bc fixedparms:4 )
0x0000000116da2450 - 0x090000001627d414 libjvm.so::_ZN7VMError6reportEP12outputStreamb+0x28d4  (C++ saves_cr saves_lr stores_bc gpr_saved:15 fixedparms:2 )
0x0000000116da2840 - 0x09000000162803c4 libjvm.so::_ZN7VMError14report_and_dieEiPKcS1_PcP6ThreadPhPvS6_S1_im+0x1e4  (C++ saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:8 )
0x0000000116da2bb0 - 0x0900000016281888 libjvm.so::_ZN7VMError14report_and_dieEP6ThreadPvPKciS4_S4_Pc+0x48  (C++ saves_lr stores_bc fixedparms:7 )
0x0000000116da2c40 - 0x090000001601341c libjvm.so::_Z15report_vm_errorPKciS0_S0_z+0x17c  (C++ saves_lr stores_bc gpr_saved:6 fixedparms:8 parmsonstk:1)
0x0000000116da2df0 - 0x0900000016289f34 libjvm.so::_ZN14PosixSemaphore6signalEj@AF13_5+0xd4  (C++ saves_lr stores_bc gpr_saved:6 fixedparms:2 )
0x0000000116da2e90 - 0x0900000017c26a6c libjvm.so::_ZN14AsyncLogWriter14enqueue_lockedERK15AsyncLogMessage+0x2ec  (C++ saves_lr stores_bc gpr_saved:5 fixedparms:2 )
0x0000000116da2f30 - 0x0900000017c26be0 libjvm.so::_ZN14AsyncLogWriter7enqueueER13LogFileOutputRK14LogDecorationsPKc+0xc0  (C++ saves_lr stores_bc gpr_saved:4 fixedparms:4 )
0x0000000116da3010 - 0x0900000017c2dd1c libjvm.so::_ZN13LogFileOutput5writeERK14LogDecorationsPKc@AF36_20+0x13c  (C++ saves_lr stores_bc gpr_saved:3 fixedparms:3 )
0x0000000116da30a0 - 0x09000000161cdf80 libjvm.so::_ZN9LogTagSet6vwriteEN8LogLevel4typeEPKcPc+0x140  (C++ saves_cr saves_lr stores_bc gpr_saved:10 fixedparms:4 )
0x0000000116da33a0 - 0x0900000016782a24 libjvm.so::_ZN7LogImplILN6LogTag4typeE70ELS1_0ELS1_0ELS1_0ELS1_0ELS1_0EE5writeILN8LogLevel4typeE2EEEvPKcz+0x44  (C++ saves_lr stores_bc fixedparms:8 parmsonstk:1)
0x0000000116da3410 - 0x09000000167802d4 libjvm.so::_ZNK17ConcurrentLogsite11runUnitTestEv+0x34  (C++ saves_lr stores_bc fixedparms:1 )
0x0000000116da3480 - 0x0900000016780214 libjvm.so::_ZN14UnitTestThread8main_runEv+0x74  (C++ saves_lr stores_bc gpr_saved:3 fixedparms:1 )
0x0000000116da3510 - 0x0900000016345f4c libjvm.so::_ZN14JavaTestThread3runEv+0x2c  (C++ saves_lr stores_bc fixedparms:1 )
0x0000000116da3580 - 0x09000000160a09f8 libjvm.so::_ZN6Thread8call_runEv+0x318  (C++ saves_lr stores_bc gpr_saved:8 fixedparms:1 )
0x0000000116da36b0 - 0x090000001601fc10 libjvm.so::_ZL19thread_native_entryP6Thread+0x210  (C++ uses_alloca saves_lr stores_bc gpr_saved:12 fixedparms:1 )
0x0000000116da37a0 - 0x090000000054dfec libpthreads.a::_pthread_body+0xec  (C saves_lr stores_bc gpr_saved:1 fixedparms:1 )
0x0000000116da3820 - 0x0000000000000000 
*** end of backchain ***
```

---------------------",,,,,,,,,,,JDK-8270760,JDK-8270436,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-05 13:19;xliu;hs_err_pid54728.log;https://bugs.openjdk.org/secure/attachment/95369/hs_err_pid54728.log",,,,,,,,,,,,,,,,,,,,"0|i2th9f:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-05 06:08;dholmes;That seems strange ... it indicates the logging requests are being made far faster than the logging thread can handle them. For that to happen in a gtest seems quite surprising to me. If the semaphore ""overflows"" we have no real way to recover.;;;","2021-07-05 06:23;stuefe;I wondered too. Maybe there is a bug somewhere. If not, and if the logging thread is really too slow, should this not get handled gracefully the same way we handle a full async logging buffer? Asserting here seems not like the right answer to me.;;;","2021-07-05 13:52;dholmes;I agree asserting is not good, but I'm not clear that treating it as a ""drop the message"" situation is correct either. In fact we managed to actually enqueue the message before we signalled ... so really all we have to do is ignore the error, as the writer thread must see the enqueued message anyway. I was going to say add a warning but that would be a bit problematic from this code.

I'm curious how the semaphore max count relates to the maximum number of messages the default sizing is supposed to support?

This should be fixed in 17.;;;","2021-07-05 14:09;xliu;I saw the similar problem once(hs_err_pid54728.log) when I ran that test LogConfigurationTest.reconfigure_decorators_MT_vm  overnight(6+ hours). 
Its errno is EOVERFLOW but I guess it depends on libc version.  Mine is 'libc: glibc 2.26 NPTL 2.26'.  May I know your glibc version?

Here is my analysis.

The value of _sem is roughly the number of enqueued message. The reason I use word ""roughly"" because it's not exactly. 
Here is the loop which keeps consuming the buffer.  write() dequeues ALL messages but sem_wait()  decrements  the  semaphore _sem 1. I assume loop doesn't yield until _sem is zero.  

void AsyncLogWriter::run() {
  while (true) {
    // The value of a semphore cannot be negative. Therefore, the current thread falls asleep
    // when its value is zero. It will be waken up when new messages are enqueued.
    _sem.wait();
    write();
  }
}

but this assumption may be broken! In extreme case, the async log thread starves. After write(), which empty the buffer, it yields to other threads which will refill the buffer soon.  the value of _sem can't resume to the zero but keep increasing until overflow. ;;;","2021-07-05 14:39;dholmes;Posix doesn't allow for any errors from sem_post (other than EINVAL for a bad semaphore). So I think we should just ignore any error other than EINVAL (which should be checked in an assert.

I'm concerned that this shows that async logging may not be a very workable solution, if the writer simply cannot keep up with the log requests. I suspect the AsyncLogLocker also comes into play here as with so much activity it will be a serialization point and may cause the the writer thread to be queued up for a long time waiting to get access. We may need to look at a lock-free technique for that (not as part of this bug fix).;;;","2021-07-05 22:59;xliu;From above analysis, I think the semaphore was just over-post.  Even though it didn't atomically increment the value, It's still correct because async log thread can always see the enqueued value in while(true).  
Thus I believe it's correct to ignore the errno != 0. But! I don't think it's a good ideal because we loose the restriction for other clients of PosixSemaphore::signal(uint count) .  retval/errno assert is always good. It helps us ""fail-fast"".

I would like to propose a fix in this way. after write(), we correct the value of _sem using a loop of _sem.wait().  
In this way,  logging thread doesn't need to yield cpu too much, but each iteration correct the value of _sem.  if N messages dequeued, it will decrement N instead of just 1. according to my measurement, it doesn't have performance impact. 

$perf stat -r 300  ./build/linux-x86_64-server-release/images/jdk/bin/java -Xlog:async -Xlog:'all=trace:file=hotspot-async.log:uptime,tid,l,tg:filecount=0' --version > /dev/null
before:  0.066660 +- 0.000152 seconds time elapsed  ( +-  0.23% )
after:    0.066759 +- 0.000144 seconds time elapsed  ( +-  0.22% )

 void AsyncLogWriter::run() {
@@ -155,7 +158,11 @@ void AsyncLogWriter::run() {
     // The value of a semphore cannot be negative. Therefore, the current thread falls asleep
     // when its value is zero. It will be waken up when new messages are enqueued.
     _sem.wait();
-    write();
+
+    int n = write();
+    for (int i = n - 1; i > 0; --i) {
+      _sem.wait();
+    }
   }
 }

I don't worry about AsyncLogLocker. It's a conventional 0/1 semaphore. There's no overflow issue for it. The root cause isn't that async log thread can't catch up logsites. the buffer has a throttler called ""_buffer_max_size"". the root cause of this issue is that we have asymmetric p/v operations for the semaphore _sem. 
;;;","2021-07-06 00:24;dholmes;The problem _is_ that the async log thread can't keep up - that is what introduces the asymmetry between the P and V operations. If you have N loggers you get N signals and N messages. The writer thread will write all N messages at once and then loop another N-1 times (redundantly calling write()) before blocking. The fact the semaphore can overflow shows that the writer thread is not getting a chance to do the loop and consume all the semaphore tokens. The fix will try to address this by consuming the tokens more rapidly, but if the writer thread remains starved we will still overflow the semaphore.;;;","2021-07-06 11:31;mseledtsov;ILW = HLM = P3;;;","2021-07-06 11:31;xliu;I slept on it. now I flip. I think loosing semaphore::wait() check is better than value adjustment of the semaphore.  here is why. 

1. As David said, the root cause is asymmetric p/v operations and logging thread can't catch up logsites.  What I proposed(https://openjdk.github.io/cr/?repo=jdk17&pr=216&range=01) just mitigates the problem but not eradicates it.
2. _sem.wait() in a loop is unpredictable & dangerous.  We can't guarantee it won't yield CPU.  Further, it's too dangerous because once the value of semaphore overflown, it would stuck forever. 
It's okay to tolerate the failure of sem_post from logsites.  It's more robust than the refined code which try to balance p/v operations. 


 ;;;","2021-07-13 11:30;mseledtsov;RT Triage: since this is a P3, and RDP-2 deadline is 7/15, we have reset the fix version to 18.;;;","2021-07-13 13:16;xliu;I am working for the deadline.  here is the commit. https://github.com/openjdk/jdk17/pull/216
I didn't compromise its quality for the approaching deadline. I did test the patch as thorough as I can. 

;;;","2021-07-13 19:24;dholmes;Hopefully the bug updater will handle this once JDK 17 is re-sync'd up to JDK 18. There was no need to re-target this bug at this time.;;;","2021-07-13 19:25;dholmes;Just for the record the eventual fix was to replace two uses of Semaphore with one PlatformMonitor and so completely avoid any overflow issues.;;;","2021-07-13 20:03;mseledtsov;[~xliu] Thanks for letting us know about your plan. I have retargeted it back to JDK 17.;;;","2021-07-13 21:12;dholmes;[~mseledtsov] the fix was already pushed to 17 and a backport record created, so this issue has to stay at 18 now (reverted). Hopefully it will be closed properly by hgupdater when the fix is forward ported from 17.;;;","2021-07-14 15:36;roboduke;Changeset: 67273ae6
Author:    Xin Liu <xliu@openjdk.org>
Date:      2021-07-14 01:43:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/67273ae63c3dbebccf124929c13a363dea05a0da
;;;",,,,,,,,,,,,,,,,,,,,,,
BacktraceBuilder._cprefs needs to be accessed as unsigned short,JDK-8269859,5053354,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-07-05 01:28,2021-08-25 08:23,2023-10-01 09:57,2021-08-18 02:22,8,,,,,,,openjdk8u312,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,redhat-interest,sustaining,,,,,,,,,,,,,,"This is similar to the issue fixed (and hopefully backported to 8) with JDK-8194246. That one fixed the ""methods"" array that is declared as ""short[]"", handles ""u2"" elements, but mistakenly accessed as ""short"", not ""ushort"".

There is a similar trouble with ""cprefs"" array, that is declared as ""short[]"", handles ""u2"" elements, and yet again accessed as ""short"". Note that JDK-8140685 rewired this to short T_LONG/T_INT as the Symbol* address.

This means we have a problem in 8u, but not anywhere else.

This is fairly easy to reproduce on the test case from JDK-8194246, if we simulate redefinition by doing this:

   // The method can be NULL if the requested class version is gone
-  Symbol* sym = (method != NULL) ? method->name() : holder->constants()->symbol_at(cpref);
+  Symbol* sym = holder->constants()->symbol_at(cpref);

Then the same out-of-bounds assert fires, now at cpref-taking path.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8140685,JDK-8194246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2th7v:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-05 11:08;shade;8u variant: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-July/014074.html;;;","2021-08-08 23:20;shade;Fix Request (8u)

This is a symmetric follow-up for JDK-8194246. This is a 8u-specific patch, 8u RFR is acked by phh.;;;","2021-08-18 02:22;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/rev/21394894714b
User:  shade
Date:  2021-08-18 09:17:59 +0000
;;;","2021-08-25 08:23;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/21394894714b
User:  andrew
Date:  2021-08-25 15:19:26 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OperatingSystemMXBean getProcessCpuLoad reports incorrect process cpu usage in containers,JDK-8269851,5053345,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2021-07-04 18:23,2023-04-14 09:18,2023-10-01 09:57,2021-07-28 16:13,11.0.12,17,18,openjdk8u302,,,,18,hotspot,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,redhat-interest,release-note=yes,tencent-interest,,,,,,,,,"This is on behalf of bobpengxie@tencent.com

If JVM runs in a container which is limited CPU resource (quota, shares, cpu), 
getProcessCpuLoad is incorrect.
getCpuLoad is correct.


set  --cpu-quota=50000 --cpu-period=50000 to cgroup cpuset
my machine has 8 cores

cgexec -g cpu:cpuset   ${java_path} TestCgroup


process:12.338474364318467
system98.79130556666667

```
import com.sun.management.OperatingSystemMXBean;

import java.lang.management.ManagementFactory;

public class TestCgroup {
    private static OperatingSystemMXBean osBean = ManagementFactory.getPlatformMXBean(
            OperatingSystemMXBean.class);

    public static void main(String[] args) {
        new Thread(() -> {
            int i = 0;
            while (true) {
                i++;
                if (i > 10000) {
                    i = i - 1000;
                }
            }

        }).start();

        while (true) {


            System.out.println(""process:""+osBean.getProcessCpuLoad() * 100);

            System.out.println(""system""+osBean.getSystemCpuLoad() * 100);
            System.out.println(osBean.getAvailableProcessors());
            try {
                Thread.sleep(3000);

            } catch (Throwable e) {
                e.printStackTrace();
            }
        }

    }
}
```",,,,,,,,,,,JDK-8283666,JDK-8272379,JDK-8272204,JDK-8271608,JDK-8271955,JDK-8272380,,,,,,,,,,,,,,,,,,,,,JDK-8265836,,,,,,"2021-07-07 03:09;sgehwolf;TestLoad.java;https://bugs.openjdk.org/secure/attachment/95399/TestLoad.java",,,,,,,,,,,,,,,,,,,,"0|i2th5v:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-04 18:53;dholmes;There have been other bugs filed in this area in relation to containers. Have you verified this is not a duplicate of one of those? Thanks.;;;","2021-07-04 19:12;jiefu;I'm not sure.
But bobpengxie told me he didn't find a duplicated one.
Thanks.;;;","2021-07-04 21:16;dholmes;[~jiefu] please see JDK-8265836. Is this a different issue to what is reported there? If so please provide more information about the container environment, and the expected versus actual results - the description at present is too vague. Thanks.;;;","2021-07-04 22:00;jiefu;Hi [~dholmes], I've updated the JBS based on bob's description.
Let's wait for his PR for more info.
Thanks.;;;","2021-07-04 23:44;dholmes;Sorry but the issue remains unclear. What output is he expecting to see from this test?

;;;","2021-07-06 11:34;sgehwolf;I concur, please provide 'expected' versus 'actual' output of the test case.;;;","2021-07-06 11:41;sgehwolf;https://download.java.net/java/early_access/jdk17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getProcessCpuLoad() says:

""""""
Returns the ""recent cpu usage"" for the Java Virtual Machine process.
"""""";;;","2021-07-06 19:29;dholmes;The title of this bug (and the PR) needs to be updated to reflect the problem. At the moment the title is simply a statement of fact. I think the intent was to state that the reported usage is incorrect in a container environment - right?;;;","2021-07-07 03:26;sgehwolf;Running the attached test program in a container and restricting CPUs to 3 (out of a host value of 8) I get this:

$ sudo podman run --cpu-shares=$(expr 3 \* 1024) -v $(pwd)/build/linux-x86_64-server-release/images/jdk:/opt/jdk:z --rm -ti fedora:34
[root@7f47b61573bc /]# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv1
    Effective CPU Count: 3
    CPU Period: 100000us
    CPU Quota: -1
    CPU Shares: 3072us
    List of Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Effective Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Memory Nodes, 1 total: 
    0 
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: Unlimited
    Memory Soft Limit: Unlimited
    Memory & Swap Limit: Unlimited

openjdk version ""18-internal"" 2022-03-15
OpenJDK Runtime Environment (build 18-internal+0-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 18-internal+0-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
[root@7f47b61573bc /]# /opt/jdk/bin/java -cp /opt/jdk/os_cpu_repro/bin TestLoad
running test with 2 workers
OperatingSystemMXBean.getCpuLoad:        0.000014
OperatingSystemMXBean.getProcessCpuLoad: 0.500000
OperatingSystemMXBean.getCpuLoad:        0.673859
OperatingSystemMXBean.getProcessCpuLoad: 0.249688
OperatingSystemMXBean.getCpuLoad:        0.666021
OperatingSystemMXBean.getProcessCpuLoad: 0.250936
OperatingSystemMXBean.getCpuLoad:        0.665333
OperatingSystemMXBean.getProcessCpuLoad: 0.249377
OperatingSystemMXBean.getCpuLoad:        0.667695
OperatingSystemMXBean.getProcessCpuLoad: 0.250313
OperatingSystemMXBean.getCpuLoad:        0.665917
OperatingSystemMXBean.getProcessCpuLoad: 0.249688
OperatingSystemMXBean.getCpuLoad:        0.667713
OperatingSystemMXBean.getProcessCpuLoad: 0.250313
OperatingSystemMXBean.getCpuLoad:        0.667503
OperatingSystemMXBean.getProcessCpuLoad: 0.250313
OperatingSystemMXBean.getCpuLoad:        0.665822
OperatingSystemMXBean.getProcessCpuLoad: 0.248130
OperatingSystemMXBean.getCpuLoad:        0.667159
OperatingSystemMXBean.getProcessCpuLoad: 0.250936
OperatingSystemMXBean.getCpuLoad:        0.667429
OperatingSystemMXBean.getProcessCpuLoad: 0.250000
OperatingSystemMXBean.getCpuLoad:        0.666285
OperatingSystemMXBean.getProcessCpuLoad: 0.250000
OperatingSystemMXBean.getCpuLoad:        0.667117
OperatingSystemMXBean.getProcessCpuLoad: 0.250000
OperatingSystemMXBean.getCpuLoad:        0.665456
OperatingSystemMXBean.getProcessCpuLoad: 0.249688
OperatingSystemMXBean.getCpuLoad:        0.666354
OperatingSystemMXBean.getProcessCpuLoad: 0.249688
OperatingSystemMXBean.getCpuLoad:        0.669564
OperatingSystemMXBean.getProcessCpuLoad: 0.250627
OperatingSystemMXBean.getCpuLoad:        0.664709
OperatingSystemMXBean.getProcessCpuLoad: 0.249377

The system CPU load reaches ~0.66 as expected (2/3 of available CPUs). The process CPU load reports ~0.25 (2/8 of *host* CPUs), which is wrong. It should be ~0.66 as the system CPU load since the JVM process is the only process in that container.

Doing the same with CPU quota restrictions, I see the same issue. In fact, any CPU limits imposed on containers (with whatever means, quota, shares, cpuset cpus) is affected.

Thus, we have:

$ sudo podman run --cpu-quota=300000 --cpu-period=100000 [...] => affected
$ sudo podman run --cpuset-cpus=0-2 [...]  => affected (that's different to JDK-8265836)
$ sudo podman run --cpus 3 [...]  => affected (that's different to JDK-8265836)
$ sudo podman run --cpu-shares=$(expr 3 \* 1024) [...] => affected
;;;","2021-07-28 16:13;roboduke;Changeset: 25f00d78
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-07-28 23:12:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/25f00d787cf56f6cdca6949115d04e7d8e675554
;;;","2021-08-04 02:56;sgehwolf;Fix Request (OpenJDK 17u):

Please approve this backport for 17u as the issue is present in JDK 17 as well. It's a similar issue than JDK-8265836 but for process cpu load with system CPU limits via cgroups. The plan is to get it into 11u as well and we shouldn't regress for those users. Risk should be low as it's self-contained to the JDK internal OS bean and only affecting container users. A work-around to revert to old behaviour would be -XX:-UseContainerSupport.;;;","2021-08-04 03:17;sgehwolf;Fix Request (OpenJDK 11u):

Please approve getting this backported to OpenJDK 11u. JDK-8265836 got backported to fix system CPU load reporting (in 11.0.13). It would be good to have this fix in the same release for symmetry. This fix is an equivalent fix for process CPU load reporting (when the system limits are throttled via container CPU limits). The patch doesn't apply clean. The JDK 11u patch got reviewed by Christoph Langer. See manual testing before/after in the explicit backport bug. Risk should be low as the current reporting is broken and only affects containers. The original behaviour can get reverted to by specifying -XX:-UseContainerSupport.;;;","2021-09-08 12:21;phh;Fix Request (8u).

On behalf of Severin Gehwolf.

Review thread: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-August/014224.html
Review approval: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-August/014260.html;;;","2021-09-09 01:54;sgehwolf;[~phh] Paul, the fix request comment and label was done on JDK-8272379[1] an explicit backport bug. FYI. It's in 8u312. Is the above for your benefit?

[1] https://bugs.openjdk.java.net/browse/JDK-8272379?focusedCommentId=14444513&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14444513;;;","2021-09-09 06:35;phh;Nope, didn't see the explicit backport bug. Apologies.
;;;",,,,,,,,,,,,,,,,,,,,,,,
Most JDK releases report macOS version 12 as 10.16 instead of 12.0,JDK-8269850,5053341,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,rriggs,alans,alans,2021-07-04 14:40,2022-10-13 08:43,2023-10-01 09:57,2021-09-23 08:02,11,17,8-pool,,,,,18,core-libs,,0,azul-interest,jdk11u-critical-request,jdk11u-critical-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,macos12,,,,,"Here are the results of my testing:

10.16 1.8.0_152-b16
10.16 1.8.0_162-b12
10.16 9.0.4+11
10.16 10.0.1+10
10.16 10.0.2+13
10.16 11.0.2+9
10.16 12.0.2+10
10.16 13+33
10.16 13.0.2+8
10.16 14+36-1461
10.16 14.0.2+12-46
10.16 15+35-1559
10.16 15.0.2+7-27
10.16 16+36-2231
10.16 16.0.1+9-24
12.0 17-ea+25-2252
12.0 17-ea+29-2576

I understand that some changes have been backported, but I'm not sure if they have been released or if they are correct.

I know of two ways to get the right answer regardless of the linked SDK:

1. Run this program as follows:
        String[] cmd = { ""/usr/bin/sw_vers"", ""-productVersion"" };
        String[] env = { ""SYSTEM_VERSION_COMPAT=0"" };
2. Parse the file /System/Library/CoreServices/.SystemVersionPlatform.plist
  [note the leading dot in the name]
These steps would be needed only if the apparent system version is 10.16.

See https://gitmemory.com/issue/ziglang/zig/7569/756422179 for more information.
",,,,,,,,,,,JDK-8274908,JDK-8274545,JDK-8275733,JDK-8275734,JDK-8274354,JDK-8274377,JDK-8295281,,,,,,,,,,,,JDK-8274105,,,JDK-8273982,,,,,JDK-8253702,,,,,,,,,,,,,,,,,,,,,,os_x,,,,"0|i2th4z:",9223372036854775807,b17,,,,,,,,,,,Verified,,"2021-07-07 09:38;joehw;Seems to have been fixed by JDK-8253702.;;;","2021-09-23 08:02;roboduke;Changeset: 3b1b8fc6
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2021-09-23 15:01:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3b1b8fc646493eae5f4df828afe29abb75fa5e60
;;;","2021-09-23 08:12;rriggs;[~alans] Thank you for the suggestion/reminder about a more stable fix for all MacOS versions.
The improvement is in the main jdk development branch.
Backports to supported releases will need separate updates.
;;;","2021-09-23 08:57;clanger;Working on backports to 11 and 17 because this also fixes an issue with current MacOS Update 11.6 where the version detection without explicit env setting of SYSTEM_VERSION_COMPAT is broken (detects 11.5);;;","2021-09-23 22:22;clanger;Fix request (17u, 11u):
I request backporting this bug because it fixes the issue of correctly detecting the OS version on latest MacOS 11.6 and the soon to be released MacOS 12 when the executable is build with Xcode 11. I assume lots of downstream vendors still use this compiler, at least for JDK11. Ideally this should still go into the October 21 update, hence I'm requesting jdk11u-critical.
No regressions in testing (GHA and SAP testing) and OsVersionTest.java then passes on all MacOS and Xcode combinations that we tested. (Among them backlevel MacOS, MacOS 11.5 and 11.6);;;","2021-09-25 01:07;goetz;Makes sense to me. Approving although the 17u approval is not there yet because there is end of rampdown on Tuesday.;;;","2021-10-21 08:37;omikhaltcova;Fix request (13u, 15u) 

I'd like to backport this fix to jdk13u and jdk15u for parity with jdk11u. 
The original patch applied cleanly. Tested via a simple test printing System.getProperty(""os.version"") on macOS Monterey.;;;","2022-09-29 11:17;omikhaltcova;Fix request (8u) 

The same issue is observed on jdk8u. The patch applied manually.
Tested via a simple test printing System.getProperty(""os.version"") on macOS Monterey.;;;","2022-09-30 15:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/126
Date: 2022-09-30 20:45:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/gc/gctests/PhantomReference/phantom002/TestDescription.java failed with ""OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects""",JDK-8269849,5053325,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dcubed,dcubed,2021-07-03 19:58,2023-02-12 21:01,2023-10-01 09:57,2021-07-21 11:08,11,17,18,,,,,18,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,tier7,zgc,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

vmTestbase/gc/gctests/PhantomReference/phantom002/TestDescription.java

Here's a snippet from the log file:

Failures summary:
java.lang.OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects
----------System.err:(16/969)----------
nsk.share.TestFailure: Test exit code: 97
	at nsk.share.test.Tests$TestRunner.execute(Tests.java:90)
	at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
	at nsk.share.gc.GC.runTest(GC.java:114)
	at gc.gctests.PhantomReference.phantom001.phantom001.main(phantom001.java:93)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: nsk.share.TestFailure: Test exit code: 97
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: nsk.share.TestFailure: Test exit code: 97
----------rerun:(36/7636)*----------

The test task's JVM args are:

-XX:+CreateCoredumpOnCrash -XX:+UseZGC",,,,,,,,,,,JDK-8279908,JDK-8279966,,,,,,,,,,,,,,,,,,,,JDK-8289206,,,,,JDK-8260684,JDK-8227309,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,"0|i2th1f:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-07-03 22:06;kbarrett;This included the JDK-8260684 test timeout fix.;;;","2021-07-03 22:25;kbarrett;The kind of OOME thrown is from Deoptimization::realloc_objects.

I think this is a bug in the test framework, and not a GC bug. phantom001.The tests run() calls eatMemory, but also catches and discards OOME. But there are multiple threads running that. And the framework that does that doesn't seem to protect against OOME.  If the executing threads have brought things close to OOME when one of the invocations of phantom001.Test.run returns, and that return hits deopt for some reason (or does any other allocation), it could push things over the edge and trigger OOME in an unprotected context.
;;;","2021-07-04 06:27;dcubed;[~kbarrett] - Let's ask [~lmesnik] where this bug should go...
I suspect that it might stay in hotspot/gc since the OOME throwing
infrastructure is primarily used by GC tests, but I also wouldn't be
surprised to see it move to hotspot/test.;;;","2021-07-05 00:29;tschatzl;I think the problem with the VM unexpectedly exiting is is a known issue with C2: see JDK-8227309 . JDK-8226536 referenced there contains some more thoughts on this.;;;","2021-07-05 01:01;kbarrett;The description of JDK-8226536 sounds like a general problem, but the associated fix was just for a specific occurrence that was happening in the test framework.  This failure seems to be a different specific occurrence.  It seems like a more general fix for OOME in deopt would be desirable (assuming that's possible), which is what JDK-8227309 seems to be.  But even if we had that, the test framework could still OOME in unexpected places because of an allocation in an unprotected context while other threads are eating memory.
;;;","2021-07-21 11:08;roboduke;Changeset: b7245c61
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2021-07-21 18:07:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b7245c6164df3f01c34f4f3c94185a6b6d338551
;;;","2022-01-12 05:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/85
Date: 2022-01-12 13:31:40 +0000;;;","2022-01-12 05:45;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly testing passes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8269594 backport breaks 11u builds,JDK-8269847,5053316,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,zgu,zgu,zgu,2021-07-03 06:13,2021-08-05 04:59,2023-10-01 09:57,2021-07-03 13:59,11.0.13,,,,,,,11.0.13,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,"
.../jdk11u-dev/src/hotspot/share/runtime/safepoint.cpp:1195:19: error: 'self' was not declared in this scope
     HandleMark hm(self);
                   ^~~~",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269812,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tgzf:",9223372036854775807,b01,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-03 13:37;clanger;Approving to unbreak 11u builds.;;;","2021-07-03 13:58;roboduke;Changeset: 21345efe
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-07-03 20:57:34 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/21345efe4932a5af2482d9ffef17c2cad9c9e17d
;;;","2021-08-05 04:59;roboduke;Changeset: 21345efe
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-07-03 20:57:34 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/21345efe4932a5af2482d9ffef17c2cad9c9e17d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
typo in LinkedHashMap::removeEldestEntry spec,JDK-8269843,5052473,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smarks,webbuggrp,webbuggrp,2021-06-22 20:51,2023-04-12 23:22,2023-10-01 09:57,2023-04-05 23:36,11,16,8,,,,,21,core-libs,,0,dcsaw,noreg-doc,webbug,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Available in any OS and browser combinations.

A DESCRIPTION OF THE PROBLEM :
In the documentation [1], under Parameters: section, it says that ""This is the entry that will be removed it this method returns true."" It should be corrected as ""This is the entry that will be removed if this method returns true.""

[1] https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html#removeEldestEntry-java.util.Map.Entry-

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Just move to the LinkedHashMap, method removeEldestEntry in the documentation: https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html#removeEldestEntry-java.util.Map.Entry-

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Parameters:
eldest - The least recently inserted entry in the map, or if this is an access-ordered map, the least recently accessed entry. This is the entry that will be removed if this method returns true. If the map was empty prior to the put or putAll invocation resulting in this invocation, this will be the entry that was just inserted; in other words, if the map contains a single entry, the eldest entry is also the newest.
ACTUAL -
Parameters:
eldest - The least recently inserted entry in the map, or if this is an access-ordered map, the least recently accessed entry. This is the entry that will be removed it this method returns true. If the map was empty prior to the put or putAll invocation resulting in this invocation, this will be the entry that was just inserted; in other words, if the map contains a single entry, the eldest entry is also the newest.

CUSTOMER SUBMITTED WORKAROUND :
No workarounds, other than the end user recognizing it as a flaw and imagining the substitution which should be used.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267088,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbsj:",9223372036854775807,b18,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2021-07-02 20:00;tongwan;The same descriptions can also be found at:
https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html#removeEldestEntry(java.util.Map.Entry)
https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedHashMap.html#removeEldestEntry(java.util.Map.Entry);;;","2023-04-05 17:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13367
Date: 2023-04-06 00:49:33 +0000;;;","2023-04-05 23:36;dukebot;Changeset: b5ea140d
Author:    Tingjun Yuan <yuantj1999@outlook.com>
Committer: Julian Waters <jwaters@openjdk.org>
Date:      2023-04-06 06:35:19 +0000
URL:       https://git.openjdk.org/jdk/commit/b5ea140dff0ba0b1ce22063e2b4af10a3b2086f3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"BasicTypeDataBase.findDynamicTypeForAddress(addr, basetype) can be simplified",JDK-8269838,5053308,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2021-07-02 14:32,2022-01-03 14:35,2023-10-01 09:57,2021-12-15 09:09,18,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,"This is very much related to JDK-8269830 and how BasicTypeDataBase.addressTypeIsEqualToType(addr, type) looks at the end of the object to find vtableptrs, which is only necessary on Solaris, which is no longer supported. This could lead to matching on the wrong type, although unlike JDK-8269830 I don't know of any test failures as a result of this, so the fix is not being included with JDK-8269830.

All the loc2 and loc3 related code in BasicTypeDataBase.findDynamicTypeForAddress(addr, basetype) should be stripped out. This would make it much simpler, and get rid of the risk of matching on the wrong type.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8251852,JDK-8269830,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tgxn:",9223372036854775807,b03,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-12-15 09:09;roboduke;Changeset: 7517c85d
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-12-15 17:08:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7517c85da3236e5274580645d4c3cdecb1db25c5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SA's vm object vtable matching code sometimes matches on incorrect type,JDK-8269830,5053298,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2021-07-02 13:03,2023-07-13 01:40,2023-10-01 09:57,2021-07-06 19:33,15,16,17,18,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,"When SA instantiates a wrapper class for a vm object, it tries to determine the type of the vm object so the correct SA wrapper class is used. This is done by looking at the vtable of the vm object. Given the address of a vm object, SA looks for the vtableptr at various predetermined locations within the vm object. Given what it thinks is a vtableptr, it then gets the native symbol for the vtableptr, and from the vtable native symbol it parses out the name of vm type that the vtable represents. This is done is a somewhat controlled way (you can't just instantiate a wrapper for any vm object). There are certain groups of vm types with common ancestry, and when you think you have a pointer to a vm object that is of a type in that group, you use a special wrapper constructor. For example, for JavaThreads we have the following code:

        virtualConstructor = new VirtualConstructor(db);
        // Add mappings for all known thread types
        virtualConstructor.addMapping(""JavaThread"", JavaThread.class);
        virtualConstructor.addMapping(""CompilerThread"", CompilerThread.class);
        virtualConstructor.addMapping(""CodeCacheSweeperThread"", CodeCacheSweeperThread.class);
        virtualConstructor.addMapping(""JvmtiAgentThread"", JvmtiAgentThread.class);
        virtualConstructor.addMapping(""ServiceThread"", ServiceThread.class);
        virtualConstructor.addMapping(""MonitorDeflationThread"", MonitorDeflationThread.class);
        virtualConstructor.addMapping(""NotificationThread"", NotificationThread.class);

    public JavaThread createJavaThreadWrapper(Address threadAddr) {
...
            JavaThread thread = (JavaThread)virtualConstructor.instantiateWrapperFor(threadAddr);
...
            return thread;
...
    } 

VirtualConstructor.instantiateWrapperFor(addr) iterates through these mappings, trying to find the one whose vtable matches the vtable of the object at the specified address. BasicTypeDataBase.addressTypeIsEqualToType(addr, type) is called for each of these mappings until a match is found. The problem is the code in addressTypeIsEqualToType() tries to be platform independent and search all possible locations for the vtableptr, not just the first word of the object. This can lead it to match on the specified type when it finds the vtableptr for that type, but at a location that is not actually where the vtableptr of the vm object is stored, and possibly is a location not even in the vm object.

This is the search that VirtualConstructor.instantiateWrapperFor(addr) does:

     // 1. The first word of the object (should handle MSVC++ as
    // well as the solstudio compilers with compatibility set to
    // v5.0 or greater)
    // 2. and 3. The last two Address-aligned words of the part of
    // the object defined by its topmost polymorphic superclass.
    // This should handle the solstudio compilers, v4.2 or
    // earlier, as well as any other compilers which place the vptr
    // at the end of the user-defined fields of the first base
    // class with virtual functions.

So if the first word is not a vtableptr for the specified type, it then also looks at the last two words of the object. But the last two words aren't known with certainty since we don't know the actual type of the object yet (we are trying to figure out if it matches the specified type, so initially we assume the object is of that type). So the code starts with the size of the specified type (this is known from vmstructs), adds that to the specified address, and then looks at the two words before it. This could very well be beyond the end of the object if the object is not actually of the type we are trying to match it to, and could very well point to the address where the vtableptr of the next object in memory is stored.

So as an example (and relevant to all the related bugs failing due to this CR), if we have a pointer to a vm object of type JavaThread and check to see if it is CompilerThread before checking if it is a JavaThread, the check for the vtableptr at offset 0 will always fail, and we then look at the two words before addr + sizeof(CompilerThread). Since a CompilerThread is bigger than a JavaThread, we end up looking at words after the JavaThread, and could end up looking at the start of an CompilerThread that is right after the JavaThread. As a result a vtableptr match is found there, causing SA to think the JavaThread object is a CompilerThread object.

We also have the following Solaris specific code adding to the confusion (this comment is right after the above comment):

    // Unfortunately this algorithm did not work properly for the
    // specific case of the ThreadShadow/Thread inheritance situation,
    // because the Solaris compiler seems to cleverly eliminate the
    // vtbl for ThreadShadow since the only virtual is empty. (We
    // should get rid of the ThreadShadow and fix the include
    // databases, but need to postpone this for the present.) The
    // current solution performs the three-location check for this
    // class and all of its known superclasses rather than just the
    // topmost polymorphic one.

So if there is no match on the first pass, we then get the superclass type of the specified type, and use its size to determine where the two potential vtableptr fields are at the end of the object. Note the comment is a bit misleading in that we don't compare the potential vtableptrs to what is expected for the superclass type. We still only compare them to the vtableptr for the type passed in. This also means that the first check (looking at the address stored at the start of the object) is no different on these subsequent passes than what was already done on the first pass. In any case, this is all Solaris specific. No need to do it for other platforms.

Since Solaris isn't supported anymore, we can remove the support for looking at the 2 addresses at the end of the object and the support doing the superclass retries. We'll just always assume the vtableptr is at the first address of the vm object. This greatly simplifies the code and fixes the issue.",,,,,,,,,,,JDK-8270045,JDK-8270721,,,,,,,,,,,,,,,JDK-8248252,,JDK-8257998,JDK-8269522,JDK-8244980,JDK-8251852,JDK-8257998,JDK-8269522,JDK-8244980,,JDK-8269838,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tgvf:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-07-02 14:36;cjplummer;BasicTypeDataBase.findDynamicTypeForAddress(addr, basetype) has a similar issue with looking at the last 2 addresses of the object. I don't think it is causing any test failures. I filed JDK-8269838  to clean it up.;;;","2021-07-06 19:33;roboduke;Changeset: 2daf39a5
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-07-07 02:32:25 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/2daf39a59b2d51f25b03bb78edd677a1bab4433c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
corrections in some instruction patterns for KNL x86 platform,JDK-8269828,5053296,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jbhateja,kvn,kvn,2021-07-02 12:19,2021-08-05 18:02,2023-10-01 09:57,2021-07-08 05:20,17,18,,,,,,17,hotspot,,0,c2-vector,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,"Currently a temporary operand with register class regD is used in rep_stos_evex and rep_stos_large_evex instruction patterns, whose encoding blocks calls xmm_clear_mem routine which has a VEX encoded instruction in the control path.
Thus regD class should be changed to legRegD on AVX512 platforms so that operand is always allocated from lower register bank (0-15).

There is one more issue related to usage of regD operand which is a scalar operand in a vector instruction, usually such cases may result into problems during spilling/restoration since only a scalar value is dumped and restored back, but in current context its a temporary operand may never get spilled.
",,,,,,,,,,,JDK-8270122,JDK-8270734,,,,,,,,,,,,,,,,,,,,JDK-8269825,,,,,JDK-8269528,JDK-8262355,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2tguz:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-07-02 12:19;kvn;[~jbhateja] please look.;;;","2021-07-02 12:23;kvn;You need to apply next change (add 'UseNewCode || '):

src/hotspot/cpu/x86/vm_version_x86.hpp

-  static bool is_knights_family() { return ((cpu_family() == 0x06) && ((extended_cpu_model() == 0x57) || (extended_cpu_model() == 0x85))); } // Xeon Phi 3200/5200/7200 and Future Xeon Phi
+  static bool is_knights_family() { return UseNewCode || ((cpu_family() == 0x06) && ((extended_cpu_model() == 0x57) || (extended_cpu_model() == 0x85))); } // Xeon Phi 3200/5200/7200 and Future Xeon Phi

And run tests with flags '-XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:+ UseNewCode' on avx512 machine. Or on KNL if you have one.
;;;","2021-07-02 12:37;dlong;ILW = MMH = P3;;;","2021-07-02 15:24;kvn;Could be related to JDK-8269528 fix.;;;","2021-07-05 19:58;kvn; Hit the same failure with next tests

compiler/c2/cr6340864/TestLongVect.java
compiler/loopopts/superword/ReductionPerf.java
compiler/loopopts/superword/RedTest_long.java;;;","2021-07-05 20:02;kvn;Rising Priority because some compiler tests (not only incubator/vector) failed.
;;;","2021-07-06 10:25;jbhateja;While these bugs will get resolved by mimicking exact KNL features.

There is another issue in following instruction pattern

 // Small ClearArray AVX512 non-constant length.
-instruct rep_stos_evex(eCXRegI cnt, eDIRegP base, regD tmp, kReg ktmp, eAXRegI zero, Universe dummy, eFlagsReg cr) %{
+instruct rep_stos_evex(eCXRegI cnt, eDIRegP base, legRegD tmp, kReg ktmp, eAXRegI zero, Universe dummy, eFlagsReg cr) %{
   predicate(!((ClearArrayNode*)n)->is_large() && (UseAVX > 2));
   match(Set dummy (ClearArray cnt base));
   ins_cost(125);
@@ -11644,7 +11644,7 @@ instruct rep_stos_large(eCXRegI cnt, eDIRegP base, regD tmp, eAXRegI zero, Unive
 %}

 // Large ClearArray AVX512.
-instruct rep_stos_large_evex(eCXRegI cnt, eDIRegP base, regD tmp, kReg ktmp, eAXRegI zero, Universe dummy, eFlagsReg cr) %{
+instruct rep_stos_large_evex(eCXRegI cnt, eDIRegP base, legRegD tmp, kReg ktmp, eAXRegI zero, Universe dummy, eFlagsReg cr) %{

Problem: Usage of regD tmp operand.
In xmm_clear_mem routine following VEX encoded instruction is used 
  } else if (MaxVectorSize >= 32) {
    vpxor(xtmp, xtmp, xtmp, AVX_256bit);

Thus regD should be changed to legRegD on AVX512 platforms so that operand is always allocated from lower register bank (0-15).

There is one more issue related to usage of regD operand which is a scalar operand in a vector instruction, may result into spilling/restoration size issue for regD definition.  But this being a temporary operand may never get spilled so in a way it should not pose any issue.

If you suggest I can change the subject and use this JBS as an umbrella issue related to KNL bugs and post this fix for JDK-17.;;;","2021-07-06 12:32;kvn;[~jbhateja] Yes, you can take this bug. I don't see any more failures in these tests after I excluded AVX512DQ from KNL configuration in JDK-8269825 changes.

I do see failures in new tests compiler/vectorapi/VectorCastShape*Test.java. I filed separate bug JDK-8269952.
;;;","2021-07-08 05:20;roboduke;Changeset: 168af2e6
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2021-07-08 12:19:19 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/168af2e6b2343d6674fa053dcb09aca028e372bf
;;;","2021-08-05 18:02;epavlova;The tests mentioned in the bug passed in JDK17 ATR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH tests for AES/GCM byte[] and bytebuffers,JDK-8269827,5053295,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ascarpino,ascarpino,ascarpino,2021-07-02 12:07,2021-07-14 17:17,2023-10-01 09:57,2021-07-08 10:20,,,,,,,,18,security-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,"These performance tests runs AES/GCM encryption and decryption using byte[], heap bytebuffers, and direct bytebuffers as input and output buffers for single and multi-part testing.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tgur:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2021-07-08 10:20;roboduke;Changeset: 58328824
Author:    Anthony Scarpino <ascarpino@openjdk.org>
Date:      2021-07-08 17:19:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/58328824927292927a2c6329400cde816c383ecd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] Missing testing for x86 KNL platforms,JDK-8269825,5053292,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kvn,kvn,kvn,2021-07-02 10:01,2022-11-22 22:12,2023-10-01 09:57,2021-07-06 14:53,17,18,,,,,,17,hotspot,,0,hs-comp-triaged,oracle-triage-17,testbug,ursqe-triaged,,,,,,,,,,,,,,"In our testing environment we have x86 KVM virtualization with next CPUID features setting: 

CPU: total 8 (initial active 8) (4 cores per cpu, 2 threads per core) family 6 model 85 stepping 4 microcode 0x1, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, avx, avx2, aes, erms, clmul, bmi1, bmi2, rtm, adx, avx512f, avx512cd, fma, vzeroupper, clflush, hv 

It is similar to Knights family of X86 Intel CPU (KNL) which does not support some of avx512 features  (AVX512VL/BW) and have other restrictions.  We may not have such kind of machines in our testing environment and may miss bugs as JBS history shows (look recent fixes for KNL).

On other hand we have some Windows VM instances which have such configuration and limit avx512 instructions on CPU which supports full set. Recent bug JDK-8269775 shows such example.

I suggest to add -XX:+UseKNLSetting x86 diagnostic flag to emulate KNL CPU settings in HotSpot JVM to test such configuration.",,,,,,,,,,,JDK-8270719,JDK-8269975,,,,,,,,,,,,,,,,,,,,JDK-8269775,JDK-8269260,,,,JDK-8269828,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2tgu3:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-02 12:33;dlong;ILW = missing testing coverage = MLH = P4;;;","2021-07-02 12:37;kvn;Filed JDK-8269828 for failure I found during testing.
;;;","2021-07-06 08:07;kvn;Jatin wrote:

Since the idea is to test KNL settings on any latest X86 Server platform we should also turn off following options.
```
 if (is_intel()) { // Intel cpus specific settings
    if (is_knights_family()) {
      _features &= ~CPU_VZEROUPPER;
      _features &= ~CPU_AVX512BW;
      _features &= ~CPU_AVX512VL;
+      _features &= ~CPU_AVX512DQ;
+      _features &= ~CPU_AVX512_VNNI;
+      _features &= ~CPU_AVX512_VAES;
+      _features &= ~CPU_AVX512_VPOPCNTDQ;
+      _features &= ~CPU_AVX512_VPCLMULQDQ;
+      _features &= ~CPU_AVX512_VBMI;
+      _features &= ~CPU_AVX512_VBMI2;
    }
  }
```
--------------------------------------
Vladimir wrote:

I think I should be more clear here. What I want to emulate is VM instance we use in our testing:
```
KVM virtualization detected

CPU: total 8 (initial active 8) (4 cores per cpu, 2 threads per core) family 6 model 85 stepping 4 microcode 0x1, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, avx, avx2, aes, erms, clmul, bmi1, bmi2, rtm, adx, avx512f, avx512cd, fma, clflush, hv
```

And because current KNL flags setting is matching it I used it. I don't want to emulate exactly KNL CPU.

Tests listed in 8269828 passed with additional KNL CPU features switched off as Jatin suggested. But it does not solve our internal testing issue.

I will change bug's subject and flag name to be specific that it is VM emulation instead of KNL CPU.;;;","2021-07-06 14:32;kvn;Failures in tests compiler/vectorapi/VectorCastShape*Test.java are covered by JDK-8269952.
;;;","2021-07-06 14:53;roboduke;Changeset: 0d1cd3a7
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-07-06 21:52:23 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/0d1cd3a7452a83f198d5d6eab0d4fbbaf44a302b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 PhaseIdealLoop::do_unroll get wrong opaque node,JDK-8269820,5053286,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,hshi,hshi,2021-07-02 07:19,2023-02-07 22:47,2023-10-01 09:57,2022-12-07 06:18,11,15,16,17,18,20,21,20,hotspot,,0,c2,c2-loopopts,hs-comp-triaged,intermittent,jdk18-defer-request,jdk18-defer-yes,jdk19-defer-request,jdk19-defer-yes,oracle-triage-18,tencent-interest,tier3,,,,,,,"Following test crashes in release & debug build

    static void test() {
        int ina8[] = new int[1478];
        int in2 = 136;
        long lo3 = 0L;
        try {
            for (int i = 0; i < 34; i++) {
                Math.log1p(1);
            }
        } catch (Exception e) {
            in2 = 1;
        }

        for (int i = 0; i < in2; i++) {
            if (in2 > 10) {  // split if and create wrong opaque order
                for (int j = 0; j < in2; j++) {
                    lo3 -= 1L;
                }
            }
        }
    }



Release build
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00002afb35bd70bc, pid=5015, tid=5039
#
# JRE version: OpenJDK Runtime Environment (17.0) (build 17-internal+0-adhoc.shihui.jdk17)
# Java VM: OpenJDK 64-Bit Server VM (17-internal+0-adhoc.shihui.jdk17, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xc980bc]  Node::set_req_X(unsigned int, Node*, PhaseIterGVN*)+0x4c
Current CompileTask:
C2:     57    7   !b        compiler.loopopts.TestCanonicalLoopEntryOpaqueOrder::test (81 bytes)

Stack: [0x00002afb68404000,0x00002afb68505000],  sp=0x00002afb684ffca0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc980bc]  Node::set_req_X(unsigned int, Node*, PhaseIterGVN*)+0x4c
V  [libjvm.so+0xacabf3]  PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&, bool)+0x903
V  [libjvm.so+0xacf218]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x508
V  [libjvm.so+0xacf534]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x174
V  [libjvm.so+0xacf4a4]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0xe4
V  [libjvm.so+0xacf4a4]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0xe4
V  [libjvm.so+0xae3055]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x9e5
V  [libjvm.so+0x5e07c9]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x179
V  [libjvm.so+0x5df0d2]  Compile::Optimize()+0x13b2
V  [libjvm.so+0x5dff9e]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0xdde
V  [libjvm.so+0x5118da]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xba
V  [libjvm.so+0x5e9ff4]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xee4
V  [libjvm.so+0x5ead18]  CompileBroker::compiler_thread_loop()+0x4c8
V  [libjvm.so+0xf10980]  JavaThread::thread_main_inner()+0x180
V  [libjvm.so+0xf13ec2]  Thread::call_run()+0xe2
V  [libjvm.so+0xc4d181]  thread_native_entry(Thread*)+0xe1

debug build
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/data/shihui/codes/jdk17/src/hotspot/share/opto/loopTransform.cpp:1994), pid=16191, tid=16207
#  Error: assert(opaq->outcnt() == 1 && opaq->in(1) == limit) failed
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.shihui.jdk17)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.shihui.jdk17, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x114d301]  PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&, bool)+0xb41
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284301,JDK-8288486,JDK-8289852,JDK-8301944,JDK-8298353,JDK-8294540,JDK-8298520,,JDK-8269752,JDK-8298301,JDK-8288903,,,,"2022-10-25 09:44;kvn;TestCanonicalLoopEntryOpaqueOrder.java;https://bugs.openjdk.org/secure/attachment/101186/TestCanonicalLoopEntryOpaqueOrder.java","2021-07-02 07:18;hshi;hs_err_pid16191.log;https://bugs.openjdk.org/secure/attachment/95356/hs_err_pid16191.log","2021-07-02 07:18;hshi;hs_err_pid5015.log;https://bugs.openjdk.org/secure/attachment/95355/hs_err_pid5015.log","2021-07-19 07:05;hshi;hs_err_pid7632.log;https://bugs.openjdk.org/secure/attachment/95556/hs_err_pid7632.log",,,generic,,,,,,,,,,generic,,,,"0|i2tgsr:",9223372036854775807,b27,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-02 07:29;hshi;```
    if (!is_canonical_loop_entry(loop_head)) {
      return;
    }
    opaq = loop_head->skip_predicates()->in(0)->in(1)->in(1)->in(2);
```
In PhaseIdealLoop::is_canonical_loop_entry opaque node can be in any input of compare node, but when after is_canonical_loop_entry check, opaq node is getting only from compare node's in(2). This is conflict code.

Opque node is expected at compare node's in(2) because 
1. In PhaseIdealLoop::insert_pre_post_loops, when insert pre loop, Build a zero-trip guard for the main-loop.
   - create cmp, opaq holds limit at cmp's in(2) node.
2. In BoolNode::Ideal, it will not switch compare node's in(2) if its type is Op_Opaque1

But this assumption is broken with following transformation.
1. PhaseIdealLoop::split_if_with_blocks clone cmp/bool
 - cloned cmp's in(1) is con
 - cloned cmp's in(2) is phi (region, Opaque1, Opaque1)
2. In BoolNode::Ideal,  cmp's node is swapped as its firt is con and second is not Opaque1Node
3. After some transformation, phi node is transformed back to Opaque1Node, but now it's at compare node's in(1)

Possbile fix could be getting Opaque1Node from compare node's either input.

;;;","2021-07-02 12:42;dlong;ILW = HLH = P2;;;","2021-07-13 07:43;chagedorn;Hi [~hshi], just wanted to let you know that RDP 2 starts on Thursday. This means that you require an additional approval to fix it during that phase [1] if your review does not make it through by then.

[1] https://openjdk.java.net/jeps/3#rdp-2;;;","2021-07-19 07:02;hshi;JDK-8269752 fixes releated code. In PhaseIdealLoop::is_canonical_loop_entry(CountedLoopNode* cl), Opaque1 node is getting from fixed input according to if loop is main loop.;;;","2021-07-19 07:06;hshi;After JDK-8269752 , fastdebug still crash, hs_err_pid7632.log is attached.

#  Internal Error (/data/shihui/codes/jdk17/src/hotspot/share/opto/loopnode.cpp:4960), pid=7632, tid=7649
#  assert(found_opaque == res) failed: wrong pattern;;;","2021-07-23 09:14;kvn;Hi [~hshi] do you plan to continue work on it for JDK 17? Less than 2 weeks left.;;;","2021-08-03 09:07;kvn;I dived into the issue and it is complicated and requires time for more investigation.
I decided to fix it first in JDK 18 and then backport into 17u.
;;;","2021-08-07 01:35;hshi;Sure! Please gohead and fix it in JDK18.  Change assign to kvn.;;;","2022-01-20 07:47;kvn;Defer request.

Not new regression in JDK 18 - old releases affected too. No other reports seen. Will be backported later in JDK 18u.
;;;","2022-05-10 19:48;dholmes;This crash is showing up in the CI testing for JDK 19.

compiler/loopopts/superword/RedTest_long.java;;;","2022-08-02 09:04;kvn;Defer request. 

Not new regression in JDK 19 - old releases affected too. ;;;","2022-09-14 14:28;dcubed;Here's the failing stack trace from the jdk-20+15-1019-tier3 sighting:

compiler/loopopts/superword/ProdRed_Float.java

---------------  T H R E A D  ---------------

Current thread (0x000002b99e9298e0):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=64288, stack(0x000000f7ce500000,0x000000f7ce600000)]


Current CompileTask:
C2:    862  277             java.net.URI$Parser::parse (243 bytes)

Stack: [0x000000f7ce500000,0x000000f7ce600000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc0ef11]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe721fe]  VMError::report+0x10be  (vmError.cpp:841)
V  [jvm.dll+0xe73d0e]  VMError::report_and_die+0x65e  (vmError.cpp:1700)
V  [jvm.dll+0xe74494]  VMError::report_and_die+0x64  (vmError.cpp:1481)
V  [jvm.dll+0x582e37]  report_vm_error+0xb7  (debug.cpp:285)
V  [jvm.dll+0xa88190]  PhaseIdealLoop::do_unroll+0x4c0  (loopTransform.cpp:2226)
V  [jvm.dll+0xa8f321]  IdealLoopTree::iteration_split_impl+0x7c1  (loopTransform.cpp:3913)
V  [jvm.dll+0xa8ea20]  IdealLoopTree::iteration_split+0x160  (loopTransform.cpp:3937)
V  [jvm.dll+0xa8e8ef]  IdealLoopTree::iteration_split+0x2f  (loopTransform.cpp:3921)
V  [jvm.dll+0xa8eb40]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3953)
V  [jvm.dll+0xa8eb40]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3953)
V  [jvm.dll+0xa8eb40]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3953)
V  [jvm.dll+0xa8eb40]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3953)
V  [jvm.dll+0xa8eb40]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3953)
V  [jvm.dll+0xa8eb40]  IdealLoopTree::iteration_split+0x280  (loopTransform.cpp:3953)
V  [jvm.dll+0xa9cdf1]  PhaseIdealLoop::build_and_optimize+0x1131  (loopnode.cpp:4531)
V  [jvm.dll+0x5182da]  Compile::Optimize+0x10da  (compile.cpp:2407)
V  [jvm.dll+0x5150fd]  Compile::Compile+0x14ad  (compile.cpp:824)
V  [jvm.dll+0x43b045]  C2Compiler::compile_method+0x145  (c2compiler.cpp:116)
V  [jvm.dll+0x52ebe6]  CompileBroker::invoke_compiler_on_method+0x8a6  (compileBroker.cpp:2246)
V  [jvm.dll+0x52c33d]  CompileBroker::compiler_thread_loop+0x23d  (compileBroker.cpp:1918)
V  [jvm.dll+0x7f9f4b]  JavaThread::thread_main_inner+0x2ab  (javaThread.cpp:701)
V  [jvm.dll+0xdeb997]  Thread::call_run+0x257  (thread.cpp:229)
V  [jvm.dll+0xc0d858]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x1fb80]
C  [KERNEL32.DLL+0x84d4]
C  [ntdll.dll+0x51791];;;","2022-10-25 09:40;kvn;Still reproduced with latest JDK:
java -XX:-CreateCoredumpOnCrash -Xbatch -XX:-TieredCompilation -XX:CICompilerCount=1 -XX:+PrintCompilation -XX:+TraceLoopOpts -XX:+UseG1GC TestCanonicalLoopEntryOpaqueOrder

#  Internal Error /jdk_git/open/src/hotspot/share/opto/loopnode.cpp:5460), pid=1398714, tid=1398727
#  assert(found_opaque == res) failed: wrong pattern
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-10-25-1631070.vkozlov...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-10-25-1631070.vkozlov..., mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1494115]  CountedLoopNode::is_canonical_loop_entry()+0x1e5
#
;;;","2022-10-25 09:50;kvn;Note, this is related to StripMining. Before JDK-8281322 changes which always construct outer loop the test passed with Parallel GC which did not use StripMining.;;;","2022-11-14 00:48;thartmann;Roland agreed to take this over. He already proposed a fix in https://github.com/openjdk/jdk17/pull/208#issuecomment-878257990.;;;","2022-11-16 23:45;thartmann;Updated ILW = Crash/assert during compilation (old issue), reproducible with single test, disable split if or compilation of affected method = HLM = P3;;;","2022-11-28 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11391
Date: 2022-11-28 14:02:50 +0000;;;","2022-12-07 06:18;dukebot;Changeset: 86270e30
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-12-07 14:16:50 +0000
URL:       https://git.openjdk.org/jdk/commit/86270e3068d3b2e80710227ae2dc79719df35788
;;;",,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/DynamicCodeGenerated/DynamicCodeGeneratedTest.java timed out with -Xcomp,JDK-8269817,5053283,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dcubed,dcubed,2021-07-02 06:39,2022-11-28 14:59,2023-10-01 09:57,2022-11-19 12:33,18,19,20,,,,,20,hotspot,,0,intermittent,tier8,,,,,,,,,,,,,,,,"The following test timed out in the JDK18 CI:

serviceability/jvmti/DynamicCodeGenerated/DynamicCodeGeneratedTest.java

Here's a snippet from the log file:

#section:main
----------messages:(6/300)----------
command: main -agentlib:DynamicCodeGenerated DynamicCodeGeneratedTest
reason: User specified action: run main/othervm/native -agentlib:DynamicCodeGenerated DynamicCodeGeneratedTest 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 1295.744
----------configuration:(0/0)----------
----------System.out:(1/27)----------
Timeout refired 1200 times
----------System.err:(0/0)----------
----------rerun:(44/8056)*----------

<snip>

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+4-122/macosx-x64-debug.jdk/jdk-18/fastdebug/bin/java' timed out (timeout set to 1200000ms, elapsed time including timeout handling was 1295737ms).


The test task's JVM args are:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tgs3:",9223372036854775807,b25,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-07-06 17:01;sspitsyn;Temporarily assigned to Leonid.;;;","2021-11-22 10:05;lmesnik;I was able to reproduce failure once in 76200 runs.
See 
https://mach5.us.oracle.com/mdash/jobs/lmesnik-jdk-20211119-2005-26405178/results?search=status%3A*

However, timeout on the mac doesn't provide any useful information. ;;;","2022-01-30 06:42;dcubed;Here's a log file snippet from the jdk-19+8-375-tier8 sighting: 

serviceability/jvmti/DynamicCodeGenerated/DynamicCodeGeneratedTest.java

#section:main
----------messages:(6/300)----------
command: main -agentlib:DynamicCodeGenerated DynamicCodeGeneratedTest
reason: User specified action: run main/othervm/native -agentlib:DynamicCodeGenerated DynamicCodeGeneratedTest 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 1212.782
----------configuration:(0/0)----------
----------System.out:(1/27)----------
Timeout refired 1200 times
----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(45/8103)*----------

<snip>

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+8-375/macosx-x64-debug.jdk/jdk-19/fastdebug/bin/java' timed out (timeout set to 1200000ms, elapsed time including timeout handling was 1212760ms).

So the test PASSed while the timeout handler was running.;;;","2022-07-02 19:50;dcubed;Here's a log file snippet from the jdk-20+5-192-tier8 sighting: 

serviceability/jvmti/DynamicCodeGenerated/DynamicCodeGeneratedTest.java

#section:main
----------messages:(6/300)----------
command: main -agentlib:DynamicCodeGenerated DynamicCodeGeneratedTest
reason: User specified action: run main/othervm/native -agentlib:DynamicCodeGenerated DynamicCodeGeneratedTest 
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
elapsed time (seconds): 1272.684
----------configuration:(0/0)----------
----------System.out:(1/27)----------
Timeout refired 1200 times
----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(44/7941)*----------

<snip>

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+5-192/macosx-x64-debug.jdk/jdk-20/fastdebug/bin/java' timed out (timeout set to 1200000ms, elapsed time including timeout handling was 1272678ms).

So the test PASSed while the timeout handler was running.;;;","2022-11-16 22:19;cjplummer;The test uses the default timeout of 120 seconds, then 10x for the -Xcomp run for 1200 second. It looks like this test frequently takes a long time to run, and sometimes just barely goes over the 1200 second limit. I'd suggest using timeout=180.;;;","2022-11-16 22:44;lmesnik;I am trying to reproduce the failure with increased timeout and also see time distribution.

Another fix would be to don't start 2000 threads at once but start them in groups. It doesn't affect the test but might reduce load and execution time with Xcomp.

Another good question is if it makes sense to run this test with Xcomp? The test run code in the loop and compile it anyway.;;;","2022-11-17 17:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11228
Date: 2022-11-18 01:16:13 +0000;;;","2022-11-19 12:33;dukebot;Changeset: 3ea89711
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-11-19 20:31:37 +0000
URL:       https://git.openjdk.org/jdk/commit/3ea89711e34639fef36b6cc143e37b5133aa80f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[8u] Update generated_configure.sh after JDK-8250876 backport,JDK-8269810,5053274,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2021-07-02 05:25,2021-08-05 14:14,2023-10-01 09:57,2021-07-06 04:52,openjdk8u302,,,,,,,openjdk8u312,infrastructure,,0,11-na,17-na,18-na,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,The OpenJDK 8u backport of JDK-8250876 failed to include an update of generated_configure.sh. This is an OpenJDK 8u only bug.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8250876,JDK-8267850,,,,,,,,,,,,,,,,generic,,,,,,,,,,,,,,"0|i2tgq3:",9223372036854775807,b01,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-07-02 06:02;sgehwolf;Fix Request (OpenJDK 8u):

Please approve this follow-up for JDK-8250876 8u backport which didn't include generated_configure.sh changes. This patch rectifies that. Reviewed by Aleksey Shipilev.

webrev: https://cr.openjdk.java.net/~sgehwolf/webrevs/JDK-8269810/01/webrev/
RFR: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-July/014057.html;;;","2021-07-06 04:52;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u-dev/rev/9baf7f61d7fd
User:  sgehwolf
Date:  2021-07-06 11:50:58 +0000
;;;","2021-08-05 14:14;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/rev/9baf7f61d7fd
User:  andrew
Date:  2021-08-05 21:11:46 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac generates class with invalid stack map ,JDK-8269808,5053243,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,asotona,asotona,2021-07-02 04:05,2021-07-15 10:33,2023-10-01 09:57,2021-07-06 23:26,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,"Following class compiled with --enable-preview:
---
public class T {

    static void m(java.util.function.Consumer<Object> cons) {}

    public static void main(String[] args) {
        m(o -> {
            if (o instanceof CharSequence chs) {
                switch (chs) {
                    default -> {}
                }
            }
        });
    }
}

---
Fails to initialize due to invalid stack map:
---
Error: Unable to initialize main class T
Caused by: java.lang.VerifyError: Bad local variable type
Exception Details:
  Location:
    T.lambda$main$0(Ljava/lang/Object;)V @12: aload_2
  Reason:
    Type top (current frame, locals[2]) is not assignable to reference type
  Current Frame:
    bci: @12
    flags: { }
    locals: { 'java/lang/Object', 'java/lang/CharSequence' }
    stack: { }
  Bytecode:
    0000000: 2ac1 0011 9900 242a c000 114c 2c59 b800
    0000010: 1357 4d03 3e2c 1dba 0019 0000 ab00 0000
    0000020: 0000 000c 0000 0000 b1                 
  Stackmap Table:
    append_frame(@21,Object[#17],Object[#17],Integer)
    chop_frame(@40,3)

",,,,,,,,,,,JDK-8270047,JDK-8270723,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tgj7:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-06 23:26;roboduke;Changeset: 815e4af3
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-07-07 06:24:58 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/815e4af35d29d0d5606281d36d4ef72b756d38cc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Implement the fix for JDK-8269240 in the panama-foreign repo,JDK-8269807,5053242,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2021-07-02 04:04,2021-07-08 06:21,2023-10-01 09:57,2021-07-08 06:21,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,"The patch for JDK-8269240 fixes a bunch of issues with intrinsified upcalls.

It is currently under review for jdk17, but in the mean time we can get some extra testing done by integrating it into the panama-foreign repo as well (which is expected to be faster)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tgiz:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac fails to compile nested pattern matching switches,JDK-8269802,5053218,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-07-02 02:38,2021-07-15 10:33,2023-10-01 09:57,2021-07-06 23:26,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,"Consider the following code:
---
public class T {
    void t() {
       Object o = null;
        switch (o) {
            default -> {
                switch (o) {
                    case String s -> System.out.println(s);
                    default -> {}
                }
            }
        }
    }
}
---

This fails to compile:
---
$ javac --enable-preview -source 17 T.java
Note: T.java uses preview features of Java SE 17.
Note: Recompile with -Xlint:preview for details.
An exception has occurred in the compiler (17-internal). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
        at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.handleSwitch(Gen.java:1310)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitSwitch(Gen.java:1193)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitch.accept(JCTree.java:1294)
---",,,,,,,,,,,JDK-8270722,JDK-8270046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tgdn:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-06 23:26;roboduke;Changeset: 815e4af3
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-07-07 06:24:58 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/815e4af35d29d0d5606281d36d4ef72b756d38cc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Out of bounds array load floats above its range check in loop peeling resulting in SEGV,JDK-8269795,5053207,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,chagedorn,shade,shade,2021-07-02 00:44,2021-08-06 11:13,2023-10-01 09:57,2021-07-13 01:51,11,16,17,18,8,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-18,,,,,,,,,,,,"The attached fuzzer test starts to fail after JDK-8257498.

Unpack the attached fuzzer test, then run:

$ ../build/linux-x86_64-server-fastdebug/images/jdk/bin/java -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation Test

...

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fcb890764b2, pid=2545770, tid=2545771
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.shade.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.shade.jdk, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# J 5 c2 Test.vMeth(I)V (215 bytes) @ 0x00007fcb890764b2 [0x00007fcb89076340+0x0000000000000172]
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/shade/trunks/jdk/0024/core.2545770)


Note it crashes in the generated code (presumably the on unhandled null-ptr / range-check), and seems to only crash with -XX:+StressGCM.

Bisection shows it started with JDK-8257498, which implies JDK 17 regression.",,,,,,,,,,,JDK-8270544,JDK-8270428,JDK-8270752,JDK-8271393,,,,,,,,,,,,,,,,,,JDK-8257498,,,,,,,,,,,"2021-07-02 00:33;shade;0024.tar.gz;https://bugs.openjdk.org/secure/attachment/95352/0024.tar.gz",,,,,,,,,,,,,,,,,,,,"0|i2tgb7:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-07-02 02:07;chagedorn;ILW = Crash in C2 compiled method (regression in JDK 17), only fails with single Java Fuzzer test, use -XX:-StressGCM or don't use Xcomp = HML = P2
;;;","2021-07-13 01:51;roboduke;Changeset: 040c02b9
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-07-13 08:50:09 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/040c02b942a2829626b5bc4a63c3335cd3fe53f4
;;;","2021-07-27 09:45;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.13-oracle. Doesn't apply cleanly. Review: https://github.com/openjdk/jdk11u-dev/pull/166;;;","2021-08-06 11:12;epavlova;compiler/loopopts/TestPeelingRemoveDominatedTest.java was added after JDK17 ATR launched. Run the test in mach5 in all configurations it is supposed to run as part of ATR. Also checked there are no failures in CI.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Duplicate/redundant CONSTANT_Class_info entry in constant pool ,JDK-8269792,5053204,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-07-01 21:54,2021-07-01 22:35,2023-10-01 09:57,2021-07-01 22:35,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,"Given this program:

public primitive class X {
    Object o = new X.ref[0];
}

javac generates redundant Constant_Class_info entries as shown
by this extract of the constant pool:

Constant pool:
   #1 = Class              #2             // X
   #2 = Utf8               X
   #3 = Class              #2             // X
   #4 = Fieldref           #1.#5          // X.o:Ljava/lang/Object;
   #5 = NameAndType        #6:#7          // o:Ljava/lang/Object;
   #6 = Utf8               o

...

The entry at index is referred to by 

this_class: #1                          // X

while the entry at 3 is referenced by 

anewarray     #3                  // class X  

Basically, com.sun.tools.javac.jvm.PoolWriter#putClass(com.sun.tools.javac.code.Type) fails to recognize that there is no need to emit different
Constant_info entries for X.ref and X.val types - these entries are indistinguishable at the level of a Constant_info structure and so can be shared. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tgaj:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/codegen/ClearArrayTest.java failed with ""assert(false) failed: bad AD file""",JDK-8269775,5053185,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kvn,dcubed,dcubed,2021-07-01 14:53,2021-08-12 13:15,2023-10-01 09:57,2021-07-02 08:33,17,18,,,,,,17,hotspot,,0,c2,hs-comp-triaged,intermittent,oracle-triage-11,oracle-triage-17,regression,tier2,,,,,,,,,,,"The following test failed in the JDK17 CI:

compiler/codegen/ClearArrayTest.java

Here's a snippet from the log file:

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\matcher.cpp:1681
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\share\\opto\\matcher.cpp:1681), pid=25284, tid=13832
#  assert(false) failed: bad AD file
#
# JRE version: Java(TM) SE Runtime Environment (17.0+30) (fastdebug build 17-ea+30-LTS-2596)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+30-LTS-2596, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_vector_1\\scratch\\0\\hs_err_pid25284.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_vector_1\\scratch\\0\\hs_err_pid25284.log
#
# Compiler replay data is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_vector_1\\scratch\\0\\replay_pid25284.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(42/5036)*----------",,,,,,,,,,,JDK-8269835,JDK-8270705,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269825,JDK-8269580,JDK-8269789,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,"0|i2tg6b:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Not verified,,"2021-07-01 15:02;kvn;No, it can't be cause. The issue with code for ClearArray which may be caused by JDK-8269580 which was pushed today:

--N: o273  ClearArray  === o285 o266 o291 o272  [[o229  71 ]]   Memory: @rawptr:BotPTR, idx=Raw;
   --N: o291  ConL  === o0  [[o273 ]]  #long:4
   --N: o272  AddP  === _ o238 o238 o267  [[o273 ]] 
      --N: o238  LoadP  === o5 o7 o234  [[o239 o246 o249 o252 o255 o259 o261 o261 o265 o265 o272 o272 o231 ]]  @rawptr:BotPTR, idx=Raw; #rawptr:BotPTR (does not depend only on test)
      --N: o267  ConL  === o0  [[o272 ]]  #long:16
;;;","2021-07-01 15:03;kvn;[~jbhateja] Please, look. It is urgent.;;;","2021-07-01 15:11;kvn;Test ran on Windows with 8167M CPU and -XX:UseAVX=3 flag. It is weird VM which does not enable avx512bw and avx512vl: 

CPU: total 8 (initial active 8) (4 cores per cpu, 2 threads per core) family 6 model 85 stepping 4 microcode 0x1, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, lzcnt, tsc, avx, avx2, aes, erms, clmul, bmi1, bmi2, rtm, adx, avx512f, avx512cd, fma, vzeroupper, clflush, hv
;;;","2021-07-01 15:14;kvn;Full output from Matcher:

CompileCommand: compileonly *ClearArrayTest.test bool compileonly = true
o273  ClearArray  === o285 o266 o291 o272  [[o229  71 ]]   Memory: @rawptr:BotPTR, idx=Raw;

--N: o273  ClearArray  === o285 o266 o291 o272  [[o229  71 ]]   Memory: @rawptr:BotPTR, idx=Raw;

   --N: o291  ConL  === o0  [[o273 ]]  #long:4
   IMML  20  IMML
   IMML8  5  IMML8
   IMMUL32  10  IMMUL32
   IMML32  15  IMML32
   IMML_POW2  15  IMML_POW2
   IMML_127  10  IMML_127
   RREGL  70  loadConUL32
   NO_RAX_RDX_REGL  70  loadConUL32
   NO_RAX_REGL  70  loadConUL32
   RAX_REGL  70  loadConUL32
   RCX_REGL  70  loadConUL32
   RDX_REGL  70  loadConUL32
   STACKSLOTL  170  storeSSL

   --N: o272  AddP  === _ o238 o238 o267  [[o273 ]] 
   ANY_REGP  115  addP_rReg_imm
   RREGP  115  addP_rReg_imm
   NO_RAX_REGP  115  addP_rReg_imm
   NO_RBP_REGP  115  addP_rReg_imm
   NO_RAX_RBX_REGP  115  addP_rReg_imm
   RAX_REGP  115  addP_rReg_imm
   RBX_REGP  115  addP_rReg_imm
   RSI_REGP  115  addP_rReg_imm
   RBP_REGP  115  addP_rReg_imm
   RDI_REGP  115  addP_rReg_imm
   R15_REGP  115  addP_rReg_imm
   INDIRECT  115  addP_rReg_imm
   INDOFFSET8  5  INDOFFSET8
   INDOFFSET32  15  INDOFFSET32
   INDINDEX  80  INDINDEX
   STACKSLOTP  215  storeSSP
   MEMORY  5  INDOFFSET8
   _AddP_any_RegP_rRegL  70  _AddP_any_RegP_rRegL

      --N: o238  LoadP  === o5 o7 o234  [[o239 o246 o249 o252 o255 o259 o261 o261 o265 o265 o272 o272 o231 ]]  @rawptr:BotPTR, idx=Raw; #rawptr:BotPTR (does not depend only on test)
      ANY_REGP  0  ANY_REGP
      RREGP  0  RREGP
      NO_RAX_REGP  0  NO_RAX_REGP
      NO_RBP_REGP  0  NO_RBP_REGP
      NO_RAX_RBX_REGP  0  NO_RAX_RBX_REGP
      RAX_REGP  0  RAX_REGP
      RBX_REGP  0  RBX_REGP
      RSI_REGP  0  RSI_REGP
      RBP_REGP  0  RBP_REGP
      RDI_REGP  0  RDI_REGP
      R15_REGP  0  R15_REGP
      INDIRECT  0  INDIRECT
      STACKSLOTP  100  storeSSP
      MEMORY  0  INDIRECT

      --N: o267  ConL  === o0  [[o272 ]]  #long:16
      IMML  20  IMML
      IMML8  5  IMML8
      IMMUL32  10  IMMUL32
      IMML32  15  IMML32
      IMML_POW2  15  IMML_POW2
      IMML_127  10  IMML_127
      RREGL  70  loadConUL32
      NO_RAX_RDX_REGL  70  loadConUL32
      NO_RAX_REGL  70  loadConUL32
      RAX_REGL  70  loadConUL32
      RCX_REGL  70  loadConUL32
      RDX_REGL  70  loadConUL32
      STACKSLOTL  170  storeSSL
;;;","2021-07-01 15:18;kvn;I think the issue is additional condition in predicate in rep_stos_evex() instruction which prevents it from matching any AD instruction to ClearArray:
               !n->in(2)->bottom_type()->is_long()->is_con());

There is instruction for constant small count but it requires `supports_avx512vlbw` support:

// Small ClearArray AVX512 constant length.
instruct rep_stos_im(immL cnt, rRegP base, regD tmp, rRegI zero, kReg ktmp, Universe dummy, rFlagsReg cr)
%{
  predicate(!((ClearArrayNode*)n)->is_large() &&
              (UseAVX > 2 && VM_Version::supports_avx512vlbw() &&
               n->in(2)->bottom_type()->is_long()->is_con()));

Looks like JDK-8269580 missed it.
;;;","2021-07-01 15:55;kvn;I reproduced failure on local avx512 linux box with next hack:

src/hotspot/cpu/x86/vm_version_x86.cpp
@@ -770,6 +770,10 @@ void VM_Version::get_processor_features() {
       _features &= ~CPU_AVX512BW;
       _features &= ~CPU_AVX512VL;
     }
+    if (UseNewCode) {
+      _features &= ~CPU_AVX512BW;
+      _features &= ~CPU_AVX512VL;
+    }
   }
 
;;;","2021-07-01 16:06;dlong;I agree the use of is_con() in the predicate can be a problem.;;;","2021-07-01 16:07;dlong;ILW = HMM = P2;;;","2021-07-01 16:16;kvn;This is mess. Removing `supports_avx512vlbw` check from rep_stos_im() and MacroAssembler::clear_mem() does not help. I hit another assert:

#  Internal Error (/scratch/jdk17/open/src/hotspot/cpu/x86/assembler_x86.cpp:8889), pid=159934, tid=159950
#  assert(((!attributes->uses_vl()) || (attributes->get_vector_len() == AVX_512bit) || (!_legacy_mode_vl) || (attributes->is_legacy_mode()))) failed: XMM register should be 0-15
;;;","2021-07-01 16:19;dlong;It would be useful to have a command-line flag for turning off CPU features like CPU_AVX512BW.;;;","2021-07-01 16:29;dlong;Isn't the problem rep_stos_evex, which uses !n->in(2)->bottom_type()->is_long()->is_con().  This prevents the rule from matching with a constant --> register conversion.  I suggest removing !is_con() from rep_stos_evex and adding appropriate ""ins_cost"" to all ClearArray rules, so that in the case of multiple matches, we break the tie based on ins_cost.;;;","2021-07-01 16:35;kvn;[~jbhateja] and [~sviswanathan] I am open for suggestion.  currently as workaround fix I can only think of disabling rep_stos_im() instruction.;;;","2021-07-01 16:54;sviswanathan;[~kvn] and [~dlong] Adding ins_cost and removing is_con() check would be the right solution. I will test this and get back to you.;;;","2021-07-01 17:01;kvn;Thank you, Sandhya. Yes, it looks as correct solution.;;;","2021-07-01 17:42;sviswanathan;[~kvn] and [~dlong] Verified that Dean's suggestion did indeed fix the issue. 
Tested the compiler/codegen/ClearArrayTest.java with AVX=0,1,2,3 and also on no avx512vlbw platform.
Submitting a PR:
https://github.com/openjdk/jdk17/pull/199
;;;","2021-07-02 08:33;roboduke;Changeset: 6f0e8e79
Author:    Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2021-07-02 15:33:07 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/6f0e8e79aaebd54a587f206a2eb920fdfd4b891d
;;;","2021-07-02 08:52;dcubed;The fix for this bug is in jdk-17+30-2601.;;;","2021-08-12 13:15;enikitin;Unable to verify - the regression test (compiler.codegen.ClearArrayTest) doesn't fail against jdk-17+30-2600.  Closing as 'Not Verified';;;",,,,,,,,,,,,,,,,,,,,
doclint reports missing javadoc comments for JavaFX properties if the docs are on the property method,JDK-8269774,5053184,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,kcr,kcr,2021-07-01 14:52,2021-08-18 17:41,2023-10-01 09:57,2021-08-11 11:05,16,,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,"This is a follow-on to JDK-8249633. We noticed this recently when we switched to using JDK 16 as the boot JDK for building JavaFX 17.

Running doclint  on the JavaFX API classes reports missing javadoc comments for JavaFX properties where the docs are on the property method instead of the (private) property object.

If the docs are either on the private xxxxx property object or on the xxxxxProperty() method, the correct javadocs will be generated. For example:

case 1: docs on the property object (this is the more common case)

    /**
     * The foo property.
     */
    private DoubleProperty foo;

    public final DoubleProperty fooProperty();

    public final double getFoo();

    public final void setFoo(double foo);


case 2: docs on the property method

    private DoubleProperty bar;

    /**
     * The bar property.
     * @return the property object
     */
    public final DoubleProperty barProperty();

    public final double getBar();

    public final void setBar(double bar);


Both cases will generate the correct docs, but in the latter case, an incorrect ""missing comments"" warning is generated.

I can create a test case, or you can reproduce this by cloning https://github.com/openjdk/jfx.git and building the docs as follows:

$ bash gradlew --info javadoc

If I increase the max warnings we get a total of 528 warnings. Some of the warnings are very likely valid, but most of the ones I spot checked are because of this bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8090255,JDK-8271083,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tg63:",9223372036854775807,b11,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-07-08 17:38;jjg;OK. I have a test case.

The unwanted `no comment` message is being generated from the private field.  Here's the relevant trace:
play/demo/src/C.java:20: warning: no comment
    private DoubleProperty v3;
                           ^
java.lang.RuntimeException
	at jdk.compiler/com.sun.tools.javac.util.Log.writeDiagnostic(Log.java:738)
	at jdk.compiler/com.sun.tools.javac.util.Log$DefaultDiagnosticHandler.report(Log.java:690)
	at jdk.compiler/com.sun.tools.javac.util.Log.report(Log.java:660)
	at jdk.compiler/com.sun.tools.javac.util.AbstractLog.warning(AbstractLog.java:181)
	at jdk.compiler/com.sun.tools.javac.api.JavacTrees.printMessage(JavacTrees.java:1270)
	at jdk.compiler/com.sun.tools.javac.api.JavacTrees.printMessage(JavacTrees.java:1239)
	at jdk.javadoc/jdk.javadoc.internal.doclint.Messages.report(Messages.java:129)
	at jdk.javadoc/jdk.javadoc.internal.doclint.Checker.reportMissing(Checker.java:263)
	at jdk.javadoc/jdk.javadoc.internal.doclint.Checker.scan(Checker.java:188)
	at jdk.javadoc/jdk.javadoc.internal.doclint.DocLint.scan(DocLint.java:348)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.BaseConfiguration.runDocLint(BaseConfiguration.java:713)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.Utils.getDocCommentTree0(Utils.java:2664)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.Utils.getDocCommentTree(Utils.java:2734)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder$PropertyHelper.addToPropertiesMap(MemberSummaryBuilder.java:489)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder$PropertyHelper.computeProperties(MemberSummaryBuilder.java:481)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder$PropertyHelper.<init>(MemberSummaryBuilder.java:470)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder.<init>(MemberSummaryBuilder.java:89)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder$1.<init>(MemberSummaryBuilder.java:102)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MemberSummaryBuilder.getInstance(MemberSummaryBuilder.java:102)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.BuilderFactory.getMemberSummaryBuilder(BuilderFactory.java:212)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildMemberSummary(ClassBuilder.java:327)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildClassDoc(ClassBuilder.java:148)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.build(ClassBuilder.java:113)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:388)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.generateClassFiles(AbstractDoclet.java:286)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:199)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.startGeneration(AbstractDoclet.java:212)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.run(AbstractDoclet.java:115)
	at jdk.javadoc/jdk.javadoc.doclet.StandardDoclet.run(StandardDoclet.java:103)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.parseAndExecute(Start.java:556)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:393)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:342)
	at jdk.javadoc/jdk.javadoc.internal.tool.Main.execute(Main.java:63)
	at jdk.javadoc/jdk.javadoc.internal.tool.Main.main(Main.java:52)
;;;","2021-07-08 17:45;jjg;This is the relevant line in MemberSummaryBuilder that is triggering the message:

            if (field == null || builder.utils.getDocCommentTree(field) == null) {

The expression  
    builder.utils.getDocCommentTree(field) == null  
should be replaced with  
    builder.utils.hasDocCommentTree(field);;;","2021-08-11 11:05;roboduke;Changeset: 9ba8a12c
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-08-11 18:04:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9ba8a12cfbb3d7d17be454e29ee6ff476c8690c2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[macos-aarch64] test compilation failed with ""SocketException: No buffer space available""",JDK-8269772,5053178,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dcubed,dcubed,2021-07-01 12:57,2022-10-31 09:16,2023-10-01 09:57,2021-07-07 01:53,18,,,,,,,17,core-libs,,0,intermittent,jdk11u-fix-request,jdk11u-fix-yes,macos-aarch64-11u,noreg-self,tier2,ursqe-triaged,,,,,,,,,,,"The following test failed in the JDK18 CI:

java/net/httpclient/websocket/PendingPongBinaryClose.java

Here's a snippet from the log file:

#section:compile
----------messages:(6/332)----------
command: compile /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/src.full/open/test/jdk/java/net/httpclient/websocket/DummyWebSocketServer.java
reason: .class file out of date or does not exist
Additional options from @modules: --add-modules java.net.http
Mode: agentvm
Agent id: 1
elapsed time (seconds): 0.015
----------configuration:(14/1685)----------
Boot Layer (javac runtime environment)
  class path: /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar 
  patch:      java.base /System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S112136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/11a7d3b9-fee6-4df1-8ad8-fabf2a07a7d2/runs/8c5795e3-bf64-4301-b68e-7efd09025542/testoutput/test-support/jtreg_open_test_jdk_tier2_part3/patches/java.base

javac compilation environment
  add modules: java.net.http
  source path: /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/src.full/open/test/jdk/java/net/httpclient/websocket
  class path:  /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/src.full/open/test/jdk/java/net/httpclient/websocket
               /System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S112136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/11a7d3b9-fee6-4df1-8ad8-fabf2a07a7d2/runs/8c5795e3-bf64-4301-b68e-7efd09025542/testoutput/test-support/jtreg_open_test_jdk_tier2_part3/classes/3/java/net/httpclient/websocket/PendingPongBinaryClose.d
               /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/testng.jar
               /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jcommander.jar
               /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/guice.jar

----------rerun:(38/6490)*----------
cd /System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S112136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/11a7d3b9-fee6-4df1-8ad8-fabf2a07a7d2/runs/8c5795e3-bf64-4301-b68e-7efd09025542/testoutput/test-support/jtreg_open_test_jdk_tier2_part3/scratch/1 && \\
HOME=/var/folders/z6/vyrntc_x631cxw_bz68jxrzw0000gp/T/sparky-temp-home-5515201700821304705/user_home \\
JDK8_HOME=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk/17/24/bundles/macos-aarch64/jdk-17_macos-aarch64_bin.tar.gz/jdk-17.jdk/Contents/Home \\
JIB_DATA_DIR=/System/Volumes/Data/mesos/work_dir/jib-master \\
JIB_HOME=/System/Volumes/Data/mesos/work_dir/jib-master/install/com/oracle/java/jib/jib/3.0-SNAPSHOT/jib-3.0-20210618.184637-471-distribution.zip/jib-3.0-SNAPSHOT-distribution \\
JTREG_KEYWORDS=""!headful"" \\
JTREG_VERBOSE=fail,error,time \\
LC_ALL=C \\
PATH=/bin:/usr/bin:/usr/sbin \\
TEST_IMAGE_DIR=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/macosx-aarch64.test \\
    /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/macosx-aarch64.jdk/jdk-18.jdk/Contents/Home/bin/javac \\
        -J-Xmx768m \\
        -J-XX:MaxRAMPercentage=6.25 \\
        -J-Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S112136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/11a7d3b9-fee6-4df1-8ad8-fabf2a07a7d2/runs/8c5795e3-bf64-4301-b68e-7efd09025542/testoutput/test-support/jtreg_open_test_jdk_tier2_part3/tmp \\
        -J-ea \\
        -J-esa \\
        -J-Djava.library.path=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/macosx-aarch64.test/jdk/jtreg/native \\
        -J-Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=6.25 -Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S112136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/11a7d3b9-fee6-4df1-8ad8-fabf2a07a7d2/runs/8c5795e3-bf64-4301-b68e-7efd09025542/testoutput/test-support/jtreg_open_test_jdk_tier2_part3/tmp -ea -esa' \\
        -J-Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=6.25 -J-Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S112136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/11a7d3b9-fee6-4df1-8ad8-fabf2a07a7d2/runs/8c5795e3-bf64-4301-b68e-7efd09025542/testoutput/test-support/jtreg_open_test_jdk_tier2_part3/tmp -J-ea -J-esa' \\
        -J-Dtest.compiler.opts= \\
        -J-Dtest.java.opts= \\
        -J-Dtest.jdk=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/macosx-aarch64.jdk/jdk-18.jdk/Contents/Home \\
        -J-Dcompile.jdk=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/macosx-aarch64.jdk/jdk-18.jdk/Contents/Home \\
        -J-Dtest.timeout.factor=4.0 \\
        -J-Dtest.nativepath=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/macosx-aarch64.test/jdk/jtreg/native \\
        -J-Dtest.root=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/src.full/open/test/jdk \\
        -J-Dtest.name=java/net/httpclient/websocket/PendingPongBinaryClose.java \\
        -J-Dtest.file=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/src.full/open/test/jdk/java/net/httpclient/websocket/PendingPongBinaryClose.java \\
        -J-Dtest.src=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/src.full/open/test/jdk/java/net/httpclient/websocket \\
        -J-Dtest.src.path=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/src.full/open/test/jdk/java/net/httpclient/websocket \\
        -J-Dtest.classes=/System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S112136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/11a7d3b9-fee6-4df1-8ad8-fabf2a07a7d2/runs/8c5795e3-bf64-4301-b68e-7efd09025542/testoutput/test-support/jtreg_open_test_jdk_tier2_part3/classes/3/java/net/httpclient/websocket/PendingPongBinaryClose.d \\
        -J-Dtest.class.path=/System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S112136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/11a7d3b9-fee6-4df1-8ad8-fabf2a07a7d2/runs/8c5795e3-bf64-4301-b68e-7efd09025542/testoutput/test-support/jtreg_open_test_jdk_tier2_part3/classes/3/java/net/httpclient/websocket/PendingPongBinaryClose.d \\
        -J-Dtest.class.path.prefix=/System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S112136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/11a7d3b9-fee6-4df1-8ad8-fabf2a07a7d2/runs/8c5795e3-bf64-4301-b68e-7efd09025542/testoutput/test-support/jtreg_open_test_jdk_tier2_part3/classes/3/java/net/httpclient/websocket/PendingPongBinaryClose.d:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/src.full/open/test/jdk/java/net/httpclient/websocket \\
        -J-Dtest.modules=java.net.http \\
        --add-modules java.net.http \\
        -d /System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S112136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/11a7d3b9-fee6-4df1-8ad8-fabf2a07a7d2/runs/8c5795e3-bf64-4301-b68e-7efd09025542/testoutput/test-support/jtreg_open_test_jdk_tier2_part3/classes/3/java/net/httpclient/websocket/PendingPongBinaryClose.d \\
        -sourcepath /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/src.full/open/test/jdk/java/net/httpclient/websocket \\
        -classpath /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/src.full/open/test/jdk/java/net/httpclient/websocket:/System/Volumes/Data/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S112136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/11a7d3b9-fee6-4df1-8ad8-fabf2a07a7d2/runs/8c5795e3-bf64-4301-b68e-7efd09025542/testoutput/test-support/jtreg_open_test_jdk_tier2_part3/classes/3/java/net/httpclient/websocket/PendingPongBinaryClose.d:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/testng.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jcommander.jar:/System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/guice.jar /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-18+5-135/src.full/open/test/jdk/java/net/httpclient/websocket/DummyWebSocketServer.java
result: Error. Agent communication error: java.net.SocketException: No buffer space available; check console log for any additional details


test result: Error. Agent communication error: java.net.SocketException: No buffer space available; check console log for any additional details

Please note that this SocketException is thrown during the
compilation phase of the test so this failure has nothing to
do with the test we're trying to run.",,,,,,,,,,,JDK-8285908,JDK-8284865,JDK-8270725,JDK-8270049,,,,,,,,,,,,,,,JDK-8269994,,,JDK-8273158,JDK-8270330,JDK-8296131,,,JDK-8265367,JDK-8270189,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,"0|i2tg4r:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-07-01 12:59;dcubed;A similar bug was previously fixed:

    JDK-8265367 [macos-aarch64] 3 java/net/httpclient/websocket tests fail with ""IOException: No buffer space available""

The log file snippet for the PendingPongBinaryClose.java failure in that bug was:

result: Error. Agent communication error: java.net.SocketException: No buffer space available; check console log for any additional details ;;;","2021-07-07 01:53;roboduke;Changeset: a49b1dc7
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-07-07 07:50:45 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/a49b1dc7042d8893d9ff2cdaeae05203dd18bba4
;;;","2022-04-28 06:39;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
No risk, only a test change.  Test might get slightly slower.
Trivial resolve.
SAP nightly testing passed.;;;","2022-04-28 06:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1057
Date: 2022-04-28 13:38:38 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(tmp == _callprojs.fallthrough_catchproj) failed: allocation control projection,JDK-8269771,5053177,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,neliasso,neliasso,neliasso,2021-07-01 12:46,2021-07-15 10:29,2023-10-01 09:57,2021-07-02 00:18,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,"This the continuation of JDK-8269641.

The bug repros with JDK-17+26 and disappears with ""8268405: Several regressions 4-17% after CHA changes"" 
",,,,,,,,,,,JDK-8269832,JDK-8270702,,,,,,,,,,,,,,,,,JDK-8269641,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tg4j:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-01 13:42;dlong;ILW from JDK-8269641 = assert in JCK test with -Xcomp = MMH = P3 ;;;","2021-07-01 14:06;neliasso;ILW from original bug:

ILW = assert in JCK test with -Xcomp = MMH = P3;;;","2021-07-02 00:18;roboduke;Changeset: 7bc96dbc
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-07-02 07:17:55 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/7bc96dbc023d5c8b20d12b21986f84dc260acab6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR Terminology Refresh,JDK-8269768,5053165,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mikael,mikael,mikael,2021-07-01 09:57,2021-09-30 00:07,2023-10-01 09:57,2021-07-02 10:58,17,,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,"In the JFR code, replace archaic/non-inclusive words with more neutral terms.",,,,,,,,,,,JDK-8270706,JDK-8274539,JDK-8269981,JDK-8269836,,,,,,,,,JDK-8253315,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tg1v:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-07-02 10:58;roboduke;Changeset: 1c18f914
Author:    Mikael Vidstedt <mikael@openjdk.org>
Date:      2021-07-02 17:58:12 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/1c18f914386a7543a95984294c6d61004c0a7176
;;;","2021-09-28 06:13;goetz;Fix request [11u]

I downport this for parity with 11.0.13-oracle.
No risk, only a comment change.
Clean backport.
Testing pointless.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Add tests for invalid withfield operands,JDK-8269756,5053150,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,hseigel,hseigel,2021-07-01 07:01,2021-07-22 07:33,2023-10-01 09:57,2021-07-22 07:33,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lworld,noreg-self,testbug,,,,,,,,,,,,,,,"Add tests that check that the right exceptions get thrown for invalid withfield operands.  For example:

1. Test a stack operand that is null

2. Test a stack operand that is an identity type

3. Test that stack operand and field class are different inline types
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tfyj:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-07-01 10:30;fparain;Tests should also take into consideration that a single CONSTANT_Field_info entry
in the constant pool can be referenced by multiple bytecodes (getfield, putfield,
withfield). The result of a successful resolution is stored in the cpCache (up to
two different bytecodes can store their successful resolution state). Tests should
check that invalid bytecodes references to the entry doesn't prevent the valid ones
to be resolved successfully. Conversely, successfully resolved bytecodes references
must not prevent the detection of invalid references.

First scenario:
  - the CONSTANT_Field_info entry contains a reference to an identity class
  - a withfield referencing this entry is attempted and must fail
  - then, after the failure above, a putfield and a getfield referencing the
    same entry are attempted and must succeed

Second scenario:
  - the CONSTANT_Field_info entry contains a reference to an identity class
  - a putfield and a getfield referencing this entry are attempted and must succeed
  - then, after the two successful resolutions above, a withfield referencing
    the same entry is attempted and must fail

Third scenario:
  - the CONSTANT_Field_info entry contains a reference to a primitive class
  - a putfield referencing this entry is attempted and must fail
  - then, after the failure above, a withfield and a getfield referencing the
    same entry are attempted and must succeed

Fourth scenario:
  - the CONSTANT_Field_info entry contains a reference to a primitive class
  - a withfield and a getfield referencing hthis entry are attempted and must succeed
  - then, after the two successful resolutions above, a putfield referencing
    the same entry is attempted and must fail


;;;","2021-07-02 05:41;fparain;This CR depends on the resolution of JDK-8269408 (which implements the required checks in the resolution code).;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Misplaced caret in PatternSyntaxException's detail message,JDK-8269753,5053146,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,igraves,prappo,prappo,2021-07-01 05:54,2022-04-13 04:49,2023-10-01 09:57,2021-07-26 20:27,16,17,,,,,,18,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"If an erroneous regex pattern contains ""\t"" (horizontal tab HT), the ^ (diagnostic caret) symbol might be misplaced. For example:
```
jshell> Pattern.compile(""\t**"")
|  Exception java.util.regex.PatternSyntaxException: Dangling meta character '*' near index 2
	**
  ^
|        at Pattern.error (Pattern.java:2028)
|        at Pattern.sequence (Pattern.java:2203)
|        at Pattern.expr (Pattern.java:2069)
|        at Pattern.compile (Pattern.java:1783)
|        at Pattern.<init> (Pattern.java:1430)
|        at Pattern.compile (Pattern.java:1069)
|        at (#2:1)
```
Compare that with this:
```
jshell> Pattern.compile("" **"")
|  Exception java.util.regex.PatternSyntaxException: Dangling meta character '*' near index 2
 **
  ^
|        at Pattern.error (Pattern.java:2028)
|        at Pattern.sequence (Pattern.java:2203)
|        at Pattern.expr (Pattern.java:2069)
|        at Pattern.compile (Pattern.java:1783)
|        at Pattern.<init> (Pattern.java:1430)
|        at Pattern.compile (Pattern.java:1069)
|        at (#3:1)
```
This happens because when calculating required indentation, java.util.regex.PatternSyntaxException#getMessage translates ""\t"" into ""\s"" unlike, for example, com.sun.tools.javac.util.AbstractDiagnosticFormatter#formatSourceLine, which translates ""\t"" into ""\t"".",,,,,,,,,,,JDK-8282965,JDK-8281521,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tfxn:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,Not verified,,"2021-07-01 06:02;prappo;NOTE: JBS plaintext formatting is really deceiving. View the listings raw (press ""edit"" on the Description, if you can) to see how far away those ** actually are from that ^.;;;","2021-07-26 20:26;roboduke;Changeset: bb508e13
Author:    Ian Graves <igraves@openjdk.org>
Date:      2021-07-27 02:25:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bb508e13032c3571c48275391dfeb04c03bbf3a3
;;;","2022-03-09 06:59;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
Low risk, trivial change.
Clean backport.
Test passes.
;;;","2022-03-09 07:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/219
Date: 2022-03-09 15:01:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: Bad graph detected in build_loop_late,JDK-8269752,5053144,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,chagedorn,chagedorn,2021-07-01 04:42,2022-11-30 01:35,2023-10-01 09:57,2021-07-19 00:32,17,18,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk17-fix-request,jdk17-fix-yes,oracle-triage-11,oracle-triage-18,regression,,,,,,,,,,"The attached Java Fuzzer test starts to fail after JDK-8252372 with the following assertion:

To reproduce:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test.java
$  java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Reduced Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S57035/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/41fc080c-d2db-43a6-87b0-daa1149175bc/runs/ea6bcc43-d159-4998-ab37-df1970ab9b47/workspace/open/src/hotspot/share/opto/loopnode.cpp:5331), pid=19558, tid=19572
#  assert(false) failed: Bad graph detected in build_loop_late
#
# JRE version: Java(TM) SE Runtime Environment (17.0+28) (fastdebug build 17-ea+28-LTS-2534)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+28-LTS-2534, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1307677]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x307
............
Command Line: -Xmx1G -Xcomp -Xbatch -XX:-TieredCompilation -XX:CompileOnly=Test -XX:CompileCommand=quiet Test
............
Current thread (0x00007f440847fc40):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=19572, stack(0x00007f43ec8f8000,0x00007f43ec9f9000)]


Current CompileTask:
C2:    391    5    b        Test::vMeth (360 bytes)

Stack: [0x00007f43ec8f8000,0x00007f43ec9f9000],  sp=0x00007f43ec9f3310,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1307677]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x307
V  [libjvm.so+0x1307b1a]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0xba
V  [libjvm.so+0x1308487]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x507
V  [libjvm.so+0xa2a6aa]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x2da
V  [libjvm.so+0xa26fc5]  Compile::Optimize()+0x14f5
V  [libjvm.so+0xa28b48]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1618
V  [libjvm.so+0x849aa6]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa397a9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa3a518]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18b8251]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18bff70]  Thread::call_run()+0x100
V  [libjvm.so+0x158c7c4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8270923,JDK-8270922,,,,,,,,,,,,,,,,,JDK-8270296,JDK-8269797,,JDK-8252372,JDK-8269820,JDK-8297264,,,JDK-8274145,,,,,,"2021-07-01 04:40;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95345/FuzzerUtils.java","2021-07-01 04:40;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/95346/Reduced.java","2021-07-01 04:39;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95347/Test.java","2021-07-01 04:39;chagedorn;hs_err_pid19558.log;https://bugs.openjdk.org/secure/attachment/95348/hs_err_pid19558.log",,,,,,,,,,b24,17,,,,,,"0|i2tfx7:",9223372036854775807,b32,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-07-01 04:53;chagedorn;ILW = C2 assertion failure (recent regression in JDK 17 b24), only fails with single Java Fuzzer test, disable compilation of affected method = HMM = P2;;;","2021-07-01 04:54;chagedorn;Might be related to JDK-8269575.

[~roland] Can you take a look at it?;;;","2021-07-16 00:19;roland;17 Fix request:

This fixes a crash in c2 that's triggered by a few fuzzer tests. The fix itself is fairly low risk as it applies an existing transformation but only earlier and for a corner case. Testing included some CTW testing, jtreg tests with and without -Xcomp. Fix was reviewed by Vladimir and Christian.;;;","2021-07-16 14:31;mikael;Fix request approved
;;;","2021-07-19 00:32;roboduke;Changeset: c1304519
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-07-19 07:31:28 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/c1304519b56e44d1d4e380d0b9839a8b09385e6d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(!in->is_CFG()) failed: CFG Node with no controlling input?,JDK-8269746,5053138,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,chagedorn,chagedorn,2021-07-01 04:08,2023-06-16 05:37,2023-10-01 09:57,2021-07-08 00:25,11,17,18,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-18,,,,,,,,,,,"The attached Java Fuzzer test starts to fail after JDK-8264649 (but seems to just reveal an existing issue) with the following assertion failure:

To reproduce:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test.java
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Reduced Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S57035/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/41fc080c-d2db-43a6-87b0-daa1149175bc/runs/ea6bcc43-d159-4998-ab37-df1970ab9b47/workspace/open/src/hotspot/share/opto/loopnode.cpp:4763), pid=18026, tid=18040
#  assert(!in->is_CFG()) failed: CFG Node with no controlling input?
#
# JRE version: Java(TM) SE Runtime Environment (17.0+28) (fastdebug build 17-ea+28-LTS-2534)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+28-LTS-2534, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12fef24]  PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)+0x6d4
............
Command Line: -Xmx1G -Xcomp -Xbatch -XX:-TieredCompilation -XX:CompileOnly=Test -XX:CompileCommand=quiet Test
............
Current thread (0x00007fd65047fc40):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=18040, stack(0x00007fd6443cb000,0x00007fd6444cc000)]


Current CompileTask:
C2:    309    8 %  b        Test::mainTest @ 229 (669 bytes)

Stack: [0x00007fd6443cb000,0x00007fd6444cc000],  sp=0x00007fd6444c6320,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12fef24]  PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)+0x6d4
V  [libjvm.so+0x130841a]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x49a
V  [libjvm.so+0xa2b300]  PhaseIdealLoop::verify(PhaseIterGVN&)+0x2f0
V  [libjvm.so+0xa261a8]  Compile::Optimize()+0x6d8
V  [libjvm.so+0xa28b48]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1618
V  [libjvm.so+0x849aa6]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa397a9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa3a518]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18b8251]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18bff70]  Thread::call_run()+0x100
V  [libjvm.so+0x158c7c4]  thread_native_entry(Thread*)+0x104

",,,,,,,,,,,JDK-8270731,JDK-8270119,JDK-8305830,JDK-8309106,,,,,,,,,,,,,JDK-8305429,,,,,JDK-8264649,,,,,JDK-8269797,JDK-8271272,,,,,"2021-07-01 04:06;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95341/FuzzerUtils.java","2021-07-01 04:05;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/95344/Reduced.java","2021-07-01 04:06;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95342/Test.java","2021-07-01 04:06;chagedorn;hs_err_pid18026.log;https://bugs.openjdk.org/secure/attachment/95343/hs_err_pid18026.log",,,,,,,,,,b18,17,,,,,,"0|i2tfvv:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-01 04:09;chagedorn;ILW = C2 assertion failure, only fails with single Java Fuzzer test, disable compilation of affected method = HLM = P3;;;","2021-07-02 01:45;shade;I am seeing a similar assert failure in a fuzzer test, this time in normal, non-OSR compilation, and bisection points to another changeset: JDK-8269797. They still might be related. Linking up.;;;","2021-07-05 07:47;thartmann;Re-assigning to me to help Roland.

The test attached to this bug do not reproduce the failure anymore after JDK-8262017 but the test provided by [~shade] with JDK-8269797 still does.;;;","2021-07-08 00:25;roboduke;Changeset: 8f798b82
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-07-08 07:25:21 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/8f798b822235e3bdbaf7a94caaae400de3753a25
;;;","2023-05-25 02:50;lucy;Fix request [11u] 

This is a backport for parity with 11.0.20-oracle. 

Did not apply cleanly.
Test results successful but review pending.;;;","2023-05-25 02:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1900
Date: 2023-05-25 09:49:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] restore original qualified exports to Graal,JDK-8269745,5053137,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kvn,dnsimon,dnsimon,2021-07-01 02:57,2021-07-15 10:28,2023-10-01 09:57,2021-07-01 11:52,11.0.13-oracle,17,,,,,,17,hotspot,,0,graal,hs-comp-triaged,jdk11u-jvmci-defer,jvmci,oracle-triage-18,,,,,,,,,,,,,"The changes to src/jdk.internal.vm.ci/share/classes/module-info.java in JDK-8267112 broke the use case of running Graal-optimized Truffle on OracleJDK (https://www.graalvm.org/reference-manual/js/RunOnJDK/):

Exception in thread ""main"" java.lang.IllegalAccessError: class org.graalvm.libgraal.LibGraal (in module jdk.internal.vm.compiler) cannot access class jdk.vm.ci.hotspot.HotSpotJVMCIRuntime (in module jdk.internal.vm.ci) because module jdk.internal.vm.ci does not export jdk.vm.ci.hotspot to module jdk.internal.vm.compiler
        at jdk.internal.vm.compiler/org.graalvm.libgraal.LibGraal.<clinit>(LibGraal.java:49)
        at jdk.internal.vm.compiler/org.graalvm.compiler.truffle.runtime.hotspot.libgraal.LibGraalTruffleRuntimeAccess.getPriority(LibGraalTruffleRuntimeAccess.java:44)
        at org.graalvm.truffle/com.oracle.truffle.api.Truffle.selectTruffleRuntimeAccess(Truffle.java:89)

Restoring the qualified exports resolves this problem.",,,,,,,,,,,JDK-8270700,JDK-8269788,JDK-8269773,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-01 02:59;dnsimon;JDK-8269745.patch;https://bugs.openjdk.org/secure/attachment/95340/JDK-8269745.patch",,,,,,,,,,,,,,,,,,,,"0|i2tfvn:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-01 08:27;chagedorn;ILW = Missing qualified exports to run Graal-optimized Truffe, no workaround = HLM = P3;;;","2021-07-01 11:52;roboduke;Changeset: a4d2a9a7
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-07-01 18:51:15 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/a4d2a9a77fb4f9839d91de2bf2e80d3a00b5b866
;;;","2021-07-05 08:39;sgehwolf;Deferring backport to OpenJDK 11u until there is an actual need.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test/hotspot/jtreg/vmTestbase/vm/mlvm/meth/stress/jni/nativeAndMH/Test.java crash with small heap (-Xmx50m),JDK-8269743,5053135,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hshi,hshi,hshi,2021-07-01 02:33,2022-10-18 05:04,2023-10-01 09:57,2021-07-01 20:17,18,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,tencent-interest,,,,,,,,,,,,,,,"Submit this test bug on hehalf of miao zheng.

Correct expected behavior should be exit with OutOfMemory error message.

jtreg -othervm -nativepath:/data/tmp/jdk/test/hotspot/jtreg/vmTestbase/vm/mlvm/meth/stress/jni/nativeAndMH -jdk:/data/tmp/jdk/build/linux-x86_64-server-release/images/jdk/ -vmoptions:""-XX:+UnlockExperimentalVMOptions -XX:+UseZGC -Xmx50M"" ./test/hotspot/jtreg/vmTestbase/vm/mlvm/meth/stress/jni/nativeAndMH/Test.java

Current thread (0x00007f2f24158a00):  JavaThread ""Thread-164"" [_thread_in_vm, id=12083, stack(0x00007f2e786c7000,0x00007f2e787c8000)]

Stack: [0x00007f2e786c7000,0x00007f2e787c8000],  sp=0x00007f2e787c65e0,  free space=1021k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x293c04]  AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<548932ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 548932ul>::oop_access_barrier(void*)+0x14
V  [libjvm.so+0x8fbcc9]  jni_SetObjectArrayElement+0x3a9
C  [libnativeAndMH.so+0x3196]  JNIEnv_::SetObjectArrayElement(_jobjectArray*, int, _jobject*)+0x36
C  [libnativeAndMH.so+0x2c74]  Java_vm_mlvm_meth_stress_jni_nativeAndMH_Test_native01+0x29d
J 591  vm.mlvm.meth.stress.jni.nativeAndMH.Test.native01(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/invoke/MethodHandle;)Ljava/lang/Object; (0 bytes) @ 0x00007f3184fb3eb6 [0x00007f3184fb3d40+0x0000000000000176]
j  vm.mlvm.meth.stress.jni.nativeAndMH.Test.runThread(I)Z+83
j  vm.mlvm.share.MultiThreadedTest.lambda$run$1(Ljava/util/concurrent/CyclicBarrier;I)V+9
j  vm.mlvm.share.MultiThreadedTest$$Lambda$13+0x0000000800c0dc00.run()V+12
j  java.lang.Thread.run()V+11 java.base@18-internal
v  ~StubRoutines::call_stub
V  [libjvm.so+0x859c64]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x334
V  [libjvm.so+0x85b74c]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x20c
V  [libjvm.so+0x91ba30]  thread_entry(JavaThread*, JavaThread*)+0x70
V  [libjvm.so+0xf13ce0]  JavaThread::thread_main_inner()+0x180
V  [libjvm.so+0xf17222]  Thread::call_run()+0xe2
V  [libjvm.so+0xc51751]  thread_native_entry(Thread*)+0xe1",,,,,,,,,,,JDK-8295472,JDK-8295260,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-01 02:33;hshi;Test.jtr;https://bugs.openjdk.org/secure/attachment/95338/Test.jtr","2021-07-01 02:33;hshi;hs_err_pid11896.log;https://bugs.openjdk.org/secure/attachment/95339/hs_err_pid11896.log",,,,,generic,,,,,,,,,,generic,,,,"0|i2tfv7:",9223372036854775807,b05,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2021-07-01 20:16;roboduke;Changeset: 2baf498e
Author:    miao zheng <emoryzheng@tencent.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-07-02 03:15:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2baf498eb5bcdd12b2b969222414a43bdf5eb256
;;;","2022-10-14 05:13;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport. SAP nightly testing passes.;;;","2022-10-14 05:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/791
Date: 2022-10-14 12:23:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AssertionError when combining pattern matching and function closure,JDK-8269738,5053050,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gli,webbuggrp,webbuggrp,2021-06-30 05:20,2021-07-15 10:35,2023-10-01 09:57,2021-07-08 07:15,15,17,18,,,,,17,tools,,0,17ea,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The Java compiler crashes with an AssertionError when encountering a program that uses pattern matched variable on a closure.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
javac Test.java

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Compile successfully
ACTUAL -
java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
        at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
        at jdk.compiler/com.sun.tools.javac.jvm.Items$LocalItem.<init>(Items.java:392)
        at jdk.compiler/com.sun.tools.javac.jvm.Items.makeLocalItem(Items.java:133)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitIdent(Gen.java:2271)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIdent.accept(JCTree.java:2584)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitReturn(Gen.java:1838)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCReturn.accept(JCTree.java:1709)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1097)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:967)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:930)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2415)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:737)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1617)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1585)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)


---------- BEGIN SOURCE ----------
import java.util.function.Supplier;

class Test {
    static A x = null;

    static char tmp = (
        (Test.x instanceof B b) ? ((Supplier<B>) () -> b).get() : null
     ).field;
}


class A {}
class B extends A {
    char field = 'd';
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8270735,JDK-8270123,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-07-01 01:23;adev;Test.java;https://bugs.openjdk.org/secure/attachment/95337/Test.java",,,,,,generic,,,,,,,,,,generic,,,,"0|i2tfcb:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-01 01:34;adev;The issue is reproducible.
Compiler throws AssertionError with the given reproducer:
java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
        at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
        at jdk.compiler/com.sun.tools.javac.jvm.Items$LocalItem.<init>(Items.java:392)
        at jdk.compiler/com.sun.tools.javac.jvm.Items.makeLocalItem(Items.java:133)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitIdent(Gen.java:2271)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIdent.accept(JCTree.java:2584)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitReturn(Gen.java:1838)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCReturn.accept(JCTree.java:1709)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1097)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:967)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:930)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2415)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:737)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1617)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1585)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50) ;;;","2021-07-08 07:15;roboduke;Changeset: 9e75f922
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2021-07-08 14:15:07 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/9e75f922b17146ff78589555dfb20dd0783cffbd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE in HtmlDocletWriter,JDK-8269722,5053111,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-06-30 18:36,2021-07-15 10:36,2023-10-01 09:57,2021-07-08 13:23,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,"
error: An internal exception has occurred. 
   (java.lang.NullPointerException: Cannot invoke ""com.sun.source.util.DocTreePath.getTreePath()"" because ""path"" is null) 
Please file a bug against the javadoc tool via the Java bug reporting page 
(http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) 
for duplicates. Include error messages and the following diagnostic in your report. Thank you. 
java.lang.NullPointerException: Cannot invoke ""com.sun.source.util.DocTreePath.getTreePath()"" because ""path"" is null 
at jdk.javadoc/jdk.javadoc.internal.tool.Messager.getDiagnosticSource(Messager.java:574) 
at jdk.javadoc/jdk.javadoc.internal.tool.Messager.print(Messager.java:223) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.Messages.report(Messages.java:159) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.Messages.warning(Messages.java:120) 
at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitErroneous(HtmlDocletWriter.java:1523) 
at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitErroneous(HtmlDocletWriter.java:1419) 
at jdk.compiler/com.sun.tools.javac.tree.DCTree$DCErroneous.accept(DCTree.java:396) 
at jdk.compiler/com.sun.source.util.SimpleDocTreeVisitor.visit(SimpleDocTreeVisitor.java:79) 
at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1641) 
at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.TagletWriterImpl.paramTagOutput(TagletWriterImpl.java:300) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.ParamTaglet.processParamTag(ParamTaglet.java:302) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.ParamTaglet.getInheritedTagletOutput(ParamTaglet.java:211) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.ParamTaglet.getTagletOutput(ParamTaglet.java:179) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.ParamTaglet.getAllBlockTagOutput(ParamTaglet.java:142) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.TagletWriter.getBlockTagOutput(TagletWriter.java:288) 
at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.getBlockTagOutput(HtmlDocletWriter.java:369) 
at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.getBlockTagOutput(HtmlDocletWriter.java:355) 
at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addTagsInfo(HtmlDocletWriter.java:341) 
at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.MethodWriterImpl.addTags(MethodWriterImpl.java:175) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MethodBuilder.buildTagInfo(MethodBuilder.java:190) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MethodBuilder.buildMethodDoc(MethodBuilder.java:128) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MethodBuilder.build(MethodBuilder.java:106) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildMethodDetails(ClassBuilder.java:398) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildMemberDetails(ClassBuilder.java:346) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildClassDoc(ClassBuilder.java:149) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.build(ClassBuilder.java:113) 
at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:324) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.generateClassFiles(AbstractDoclet.java:286) 
at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:184) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.startGeneration(AbstractDoclet.java:212) 
at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.run(AbstractDoclet.java:115) 
at jdk.javadoc/jdk.javadoc.doclet.StandardDoclet.run(StandardDoclet.java:103) 
at jdk.javadoc/jdk.javadoc.internal.tool.Start.parseAndExecute(Start.java:556) 
at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:393) 
at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:342) 
at jdk.javadoc/jdk.javadoc.internal.tool.Main.execute(Main.java:88) 
at jdk.javadoc/jdk.javadoc.internal.tool.JavadocToolProvider.run(JavadocToolProvider.java:48) 
at java.base/java.util.spi.ToolProvider.run(ToolProvider.java:138) 
at oracle.micro.benchmarks.javac.hardcoded.JavadocJdk7Bench.execute(JavadocJdk7Bench.java:91) 
at oracle.micro.benchmarks.javac.hardcoded.generated.JavadocJdk7Bench_execute_jmhTest.execute_ss_jmhStub(JavadocJdk7Bench_execute_jmhTest.java:404) 
at oracle.micro.benchmarks.javac.hardcoded.generated.JavadocJdk7Bench_execute_jmhTest.execute_SingleShotTime(JavadocJdk7Bench_execute_jmhTest.java:360) 
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) 
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 
at java.base/java.lang.reflect.Method.invoke(Method.java:568) 
at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453) 
at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437) 
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) 
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) 
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) 
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135) 
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) 
at java.base/java.lang.Thread.run(Thread.java:831) ",,,,,,,,,,,JDK-8270738,JDK-8270126,,,,,,,,,,,,,,,JDK-8268395,,,,,,,,,,JDK-8269706,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tfpv:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-07-08 13:23;roboduke;Changeset: 64016338
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-07-08 20:23:02 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/6401633800daff1bb80ec7e134edbaa1dbcc8499
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HtmlDocletWriter.commentTagsToContent may use the wrong CommentHelper,JDK-8269706,5053094,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,jjg,jjg,2021-06-30 15:47,2022-06-24 06:32,2023-10-01 09:57,2021-09-21 03:29,,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,"When `HtmlDocletWriter.commentTagsToContent` is being used to process inherited content, it still uses the `CommentHelper` for the overriding class, not the one used when locating the inherited content.

See the extended analysis in the comments for JDK-8268395.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269722,,,,,JDK-8268395,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tfm3:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-09-21 03:29;hannesw;This issue has been fixed by JDK-8270866 in 17 and then more thoroughly by JDK-8272158 in 18.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in j.t.Normalizer.normalize(),JDK-8269704,5053089,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2021-06-30 14:29,2021-07-15 10:27,2023-10-01 09:57,2021-07-01 05:09,17,,,,,,,17,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"--- a/src/java.base/share/classes/java/text/Normalizer.java
+++ b/src/java.base/share/classes/java/text/Normalizer.java
@@ -144,7 +144,7 @@ public final class Normalizer {
     /**
      * Normalize a sequence of char values.
      * The sequence will be normalized according to the specified normalization
-     * from.
+     * form.
      * @param src        The sequence of char values to normalize.
      * @param form       The normalization form; one of
      *                   {@link java.text.Normalizer.Form#NFC},
",,,,,,,,,,,JDK-8269784,JDK-8270696,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tfkz:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2021-07-01 05:09;roboduke;Changeset: 54dd510b
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-07-01 12:08:21 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/54dd510bd5211dc440285dd53ca0e41c85e23552
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
source level for IntelliJ JDK project is set incorrectly,JDK-8269700,5053082,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-06-30 13:40,2021-07-07 17:22,2023-10-01 09:57,2021-07-05 02:11,18,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,"The source level for the JDK IntelliJ project is set at JDK_16 in the template. This sometimes causes spurious issues, with red squiggly lines appearing when a class references types from another module. Using JDK_X as a source level fixes these problems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tfjf:",9223372036854775807,b05,,,,,,,,,,,,,"2021-07-05 02:11;roboduke;Changeset: 371d996a
Author:    Sergei Ustimenko <fdesu@protonmail.com>
Committer: Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-07-05 09:09:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/371d996a892fc6fbf82110a1ca5b3d64a801b6fc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Specification for methods of java.awt.im.InputContext should mention that they do nothing,JDK-8269698,5053079,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,azvegint,dbessono,dbessono,2021-06-30 12:26,2021-10-20 17:32,2023-10-01 09:57,2021-10-15 07:05,18,,,,,,,18,client-libs,,0,conformance,sn_100,sn_102,sn_103,sn_97,sn_98,sn_99,,,,,,,,,,,"The specification for java.awt.im.InputContext 

  https://docs.oracle.com/en/java/javase/16/docs/api/java.desktop/java/awt/im/InputContext.html

doesn't seem to hint that the base (default) implementations of its methods are empty and don't comply to their specification.

For example spec for many of the methods asserts that NPE should be thrown if arg is null, however this is not correct for the default impls.

The spec (class level or of all the methods) needs to be clarified regarding behavior of the default implementations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7316381,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tfir:",9223372036854775807,b20,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@54799779,,,,,,,,,"2021-06-30 12:30;prr;Where did you get your InputContext that does nothing ?
Are you following the spec ? which says :
protected InputContext()
Constructs an InputContext. This method is protected so clients cannot instantiate InputContext directly. Input contexts are obtained by calling getInstance().;;;","2021-06-30 12:36;dbessono;yes, there's a protected constructor, which can be perfectly used:

        // this line below won't conform to the spec:  -  ""Throws: NullPointerException – if locale is null""
        new InputContext() {}.selectInputMethod(null);

If it is expected to produce broken instances that would violate the specification - this needs to be clarified.

UPD: so there is access to the original implementations - and they need to comply to their specs - or the spec should mention that the default impls are empty/do nothing etc.
UPD2: and there is such spec, but hidden inside the empty impls:

=== OpenJDK source code =========
    public void someMethod() {
        // real implementation is in sun.awt.im.InputContext
    }
==============================

This comment just needs to be moved up to the javadoc spec level with appropriate tag and wording.
;;;","2021-06-30 13:36;prr;The spec I cited is clear. Clients are required to call getInstance() and the constuctor is protected
so ""clients cannot instantiate InputContext directly"" but that is exactly what you are doing.
;;;","2021-09-22 17:01;prr;> It seems that [~prr] doesn't disagree that the problem is present

Yes i do (disagree). I don't know how you came to that conclusion. 

Then you wrote :

""This method is protected so clients cannot instantiate"" - is technically not correct as the provided example shows that clients can instantiate. ""

That quote neatly removes the word ""directly"" which I had in my quotation and is >>present in the spec<<





;;;","2021-10-01 10:11;dbessono;[~azvegint] Looks great. How about a slightly extended rewording that would cover all the methods:

  @implSpec the default implementations of methods either return false, null or do nothing and does not throw any exceptions ;;;","2021-10-01 10:44;azvegint;Sure.

https://github.com/azvegint/jdk/commit/9bf48ed6613831eecb2e60aa6ff949d806de0687

If there will be no other objections, I'll post a PR next week.;;;","2021-10-01 12:52;dbessono;Thank you very much [~azvegint] !;;;","2021-10-15 07:05;roboduke;Changeset: da8da3a1
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2021-10-15 14:03:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/da8da3a16148a750ce502f7b7281fe289acaef40
;;;","2021-10-15 07:07;azvegint;Resolved without touching the doc.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JNI_GetPrimitiveArrayCritical() should not accept object array,JDK-8269697,5053078,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2021-06-30 11:26,2022-03-27 16:09,2023-10-01 09:57,2021-07-06 05:26,18,,,,,,,18,hotspot,,0,redhat-interest,,,,,,,,,,,,,,,,,"GetPrimitiveArrayCritical() can only be used with primitive array types, but logic in JNI_GetPrimitiveArrayCritical() makes it looks like possible for object array.

BasicType type;
  if (a->is_objArray()) {
    type = T_OBJECT;
  } else {
    type = TypeArrayKlass::cast(a->klass())->element_type();
  }

and I can pass in object array to GetPrimitiveArrayCritical() without any complains. See attached test case for details.

",,,,,,,,,,,,,,,,,,,,,,,,JDK-8269790,,,,,,,,JDK-8269923,JDK-8269686,,,,JDK-8269650,JDK-8269661,,,,,"2021-06-30 12:32;zgu;TestPinnedGarbage.java;https://bugs.openjdk.org/secure/attachment/95324/TestPinnedGarbage.java","2021-06-30 12:32;zgu;libTestPinnedGarbage.c;https://bugs.openjdk.org/secure/attachment/95325/libTestPinnedGarbage.c",,,,,,,,,,,,,,,,,,,"0|i2tfij:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-30 16:02;coleenp;This is sort of borderline 'runtime' and 'gc' but the 'gc' component is working on related bugs.  Should we make this gc?;;;","2021-06-30 18:27;dholmes;I originally misunderstood the nature of the issue. We should not attempt to work ""correctly"" when passed a non-primitive array.  As per:

https://docs.oracle.com/en/java/javase/16/docs/specs/jni/design.html#reporting-programming-errors

Reporting Programming Errors

The JNI does not check for programming errors such as passing in NULL pointers or illegal argument types. Illegal argument types includes such things as using a normal Java object instead of a Java class object. The JNI does not check for these programming errors for the following reasons:

    Forcing JNI functions to check for all possible error conditions degrades the performance of normal (correct) native methods.
    In many cases, there is not enough runtime type information to perform such checking.

Most C library functions do not guard against programming errors. The printf() function, for example, usually causes a runtime error, rather than returning an error code, when it receives an invalid address. Forcing C library functions to check for all possible error conditions would likely result in such checks to be duplicated--once in the user code, and then again in the library.

The programmer must not pass illegal pointers or arguments of the wrong type to JNI functions. Doing so could result in arbitrary consequences, including a corrupted system state or VM crash.;;;","2021-07-01 06:07;dholmes;This is not a P2 bug. This is day one errant behaviour, not a regression. 

We can fix this going forward in 18, preferably with a spec adjustment so that we have documented behaviour of what to do for an incorrect array type (JNI does do some parameter checking though not much).

It is not something I would recommend for backporting.;;;","2021-07-06 05:26;roboduke;Changeset: 16aa8cbf
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-07-06 12:25:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/16aa8cbf8d6c0b89cd88cbe4f39c2bb76968c06e
;;;","2022-03-25 11:59;cwayne;[~darcy][~dholmes] Does this issue still require a Release Note?;;;","2022-03-27 16:09;dholmes;I see [~darcy] has removed the release-note label.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun.net.httpserver.ServerImpl::createContext should throw IAE,JDK-8269692,5053071,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2021-06-30 10:21,2021-07-14 17:14,2023-10-01 09:57,2021-07-06 06:30,,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,HttpServer::createContext specifies IllegalArgumentException to be thrown if a context already exists for the path provided. This is currently not the case for the implementation class sun.net.httpserver.ServerImpl. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tfgz:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-07-06 06:30;roboduke;Changeset: f485171c
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-07-06 13:29:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f485171ce8c7e9c9d7d2c24e1807efaa6ff137e8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pauth_aarch64.hpp include name is incorrect,JDK-8269687,5053066,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ahayward,phh,phh,2021-06-30 09:41,2021-09-14 00:53,2023-10-01 09:57,2021-08-22 18:42,11.0.13,17,18,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,starter,,,,,,,,,,,,,,"JDK-8266749 added a new file, src/hotspot/cpu/aarch64/pauth_aarch64.hpp. It uses CPU_AARCH64_PAUTH_AARCH64_INLINE_HPP to gate the include. It should use CPU_AARCH64_PAUTH_AARCH64_HPP.",,,,,,,,,,,JDK-8273706,,,,,,,,,,,,,,,,,,,,,JDK-8266749,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,generic,,,,"0|i2tffv:",9223372036854775807,b12,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-08-22 18:42;roboduke;Changeset: b690f296
Author:    Alan Hayward <alan.hayward@arm.com>
Committer: Nick Gasson <ngasson@openjdk.org>
Date:      2021-08-23 01:41:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b690f29699180149d33b6a83de10697790587a87
;;;","2021-08-23 01:08;shade;src/hotspot/os_cpu/windows_aarch64/pauth_windows_aarch64.inline.hpp is not in 11u yet, we might wait a bit for Windows AArch64 support to land first.;;;","2021-09-10 04:53;shade;Fix Request (17u)

Clean backport to get includes in order. Patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve testing of parenthesized patterns,JDK-8269674,5053048,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,jlahoda,jlahoda,2021-06-30 05:00,2022-07-18 12:28,2023-10-01 09:57,2022-07-11 04:15,17,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,"There were several issues with the parenthesized patterns. It would be ideal to add a combo test to test the parenthesized and other patterns more fully, if possible.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tfbv:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-30 04:27;abimpoudis;Started a combo test per the recommendation of [~jlahoda] 👍

Found one bug so far (`case (StringBox(String s1))`) that I am trying to also address as part of this regression test.

;;;","2022-07-01 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9344
Date: 2022-07-01 08:46:58 +0000;;;","2022-07-11 04:15;dukebot;Changeset: bba6be79
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-07-11 11:13:55 +0000
URL:       https://git.openjdk.org/jdk/commit/bba6be79e06b2b83b97e6def7b6a520e93f5737c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[aarch64] java.library.path not including /usr/lib64,JDK-8269668,5053041,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2021-06-30 03:19,2021-08-04 05:11,2023-10-01 09:57,2021-07-05 01:02,11.0.11,17,,,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,"Other 64bit architectures have a DEFAULT_LIBPATH that includes /usr/lib64 in addition to /usr/lib and /lib as shown by the output of -XshowSettings:properties. However, on aarch64 that is not the case, breaking some JNI library code that expects native libraries to be loaded via System.loadLibrary(""foo"") where ""foo"" is at path /usr/lib64/libfoo.so

Actual (on aarch64):
    java.library.path = /usr/java/packages/lib
        /lib
        /usr/lib

Expected (on aarch64):
    java.library.path = /usr/java/packages/lib
        /usr/lib64
        /lib64
        /lib
        /usr/lib",,,,,,,,,,,JDK-8269884,JDK-8271861,JDK-8270708,JDK-8270375,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,"0|i2tfab:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-30 23:32;dholmes;Seems to me this code:

#ifndef OVERRIDE_LIBPATH
  #if defined(AMD64) || (defined(_LP64) && defined(SPARC)) || defined(PPC64) || defined(S390)
    #define DEFAULT_LIBPATH ""/usr/lib64:/lib64:/lib:/usr/lib""
  #else
    #define DEFAULT_LIBPATH ""/lib:/usr/lib""
  #endif
#else
  #define DEFAULT_LIBPATH OVERRIDE_LIBPATH
#endif

should be looking for a 64-bit flag, not a CPU/ARCH flag.;;;","2021-07-01 01:43;sgehwolf;Yes. My patch in testing played it safe and added a '|| defined (AARCH64)'. For JDK head we can investigate what you suggest.;;;","2021-07-01 18:18;dholmes;Bumping priority to P3.

Impact: Medium (maybe High ) - code that should run won't without changing the way it is launched
Likelihood: Medium - no idea what proportion of applications might be impacted
Workaround: Medium - explicitly set LD_LIBRARY_PATH when launching;;;","2021-07-05 01:02;roboduke;Changeset: e14801cd
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2021-07-05 08:01:51 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/e14801cdd9b108aa4ca47d0bc1dc67fca575764c
;;;","2021-08-02 02:16;sgehwolf;Fix Request (OpenJDK 11u):

Please approve backporting this to OpenJDK 11u. The JDK 17 patch has been modified to be more conservative so as to not introduce a change in behaviour where the 64bit paths are earlier in the lookup path than 32 bit ones. So for JDK 11u they only get appended. The JDK 11 patch has been reviewed by Andrew Hughes. I've verified on that the lookup paths now include 64 bit paths manually on aarch64. Testing: tier1 on Linux x86_64.

Review: https://github.com/openjdk/jdk11u-dev/pull/133;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JNI_GetStringCritical does not lock char array,JDK-8269661,5053032,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kbarrett,tschatzl,tschatzl,2021-06-30 01:01,2021-08-25 07:57,2023-10-01 09:57,2021-07-06 00:42,11-pool,17,18,8-shenandoah,,,,17,hotspot,,0,gc-g1,gc-g1-pinned-regions,gc-pending-review,gc-shenandoah,jdk11u-fix-request,jdk11u-fix-yes,redhat-interest,zgc,,,,,,,,,,"The JNI_GetStringCritical method does not lock the char array in the !is_latin case, but returning it to the caller.

I think the string object can actually be unlocked at end of the method in this case as it is never returned to the C code (just the char array, but this one is not locked at all). 

May cause crashes with gcs supporting object pinning (that is Shenandoah).

Found after looking at the suggestion in JDK-8269650.",,,,,,,,,,,JDK-8270713,JDK-8269973,JDK-8271298,,,,,,,,,,,,,,,,,,,JDK-8269650,JDK-8270110,JDK-8269697,,,JDK-8269686,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tf8b:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-06-30 07:33;zgu;jni_GetPrimitiveArrayCritical has the same issue and worse, it has to pin all object elements in the array.;;;","2021-06-30 09:58;kbarrett;I don't see a problem with JNI_GetPrimitiveArrayCritical.  There is no indirection from the Java array to another Java object.  And it can only be used with primitive array types, not with arrays of objects.;;;","2021-06-30 10:18;kbarrett;But there is another problem with JNI_GetStringCritical, that will be uncovered by fixing it to pin the String's value array. Assume it is a non-latin1 String, so the value array doesn't get copied, and instead gets pinned. Then string deduplication comes along and changes the value array of the string. Then JNI_ReleaseStringCritical is called, and unpins the wrong value array. Oops!

One possible solution would be to have GetStringCritical mark the String as non-dedupable, using java_lang_String::set_deduplication_forbidden. That has the downside of rendering the String forever non-dedupable because of a transient critical section use.
;;;","2021-06-30 10:33;zgu;Right. Sorry for the noise.

This logic confused me.

  BasicType type;
  if (a->is_objArray()) {
    type = T_OBJECT;
  } else {
    type = TypeArrayKlass::cast(a->klass())->element_type();
  }
;;;","2021-06-30 12:47;zgu;@kbarrett Actually, nothing prevents JNI_GetPrimitiveArrayCritical from taking in object array, I filed JDK-8269697.;;;","2021-06-30 13:16;zgu;An alternative, if object pinning and string deduplication are both enabled, just return a copy of char array.
;;;","2021-06-30 16:39;kbarrett;Forcing the critical access to copy seems to me to probably be worse than preventing dedup for the string.
;;;","2021-06-30 16:41;kbarrett;This bug was introduced by the original pinning support: JDK-8199620 Support for JNI object pinning.  Before that only the GCLocker mechanism was available, and it didn't care which object was being critically accessed.
;;;","2021-06-30 17:21;zgu;This problem exists in Shenandoah from very beginning. I am worry about the backportibility if using new java_lang_String::set_deduplication_forbidden().;;;","2021-07-06 00:42;roboduke;Changeset: 0f4e07b7
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2021-07-06 07:40:56 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/0f4e07b7d9190dd44b2fd65eff58fb6ec983a467
;;;","2021-07-15 05:52;zgu;Fix Request (11u)

I would like to backport this patch to openjdk11u.

This bug only affects Shenandoah in openjdk11u, as it is the only GC that supports object pinning and string deduplication.

The original patch does not apply cleanly, as it uses new string deduplication API that only exists in 17+. The solution for openjdk11u, is to always make a copy of string value when object pinning and string deduplication is enabled.

openjdk11u patch has been reviewed by Aleksey.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
The test test/langtools/tools/javac/versions/Versions.java has duplicate test cycles,JDK-8269656,5053025,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tvoniadka,tvoniadka,tvoniadka,2021-06-29 22:25,2021-10-13 00:31,2023-10-01 09:57,2021-07-14 21:54,17,18,,,,,,18,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,"From the test output:

...
test: check_source_target 52.0 8 8
...
test: check_source_target 52.0 8 8
...
test: check_source_target 53.0 9 9
...
test: check_source_target 53.0 9 9


It appears the same test cycle is executed twice.

",,,,,,,,,,,JDK-8275200,JDK-8275189,JDK-8271559,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tf6r:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-14 21:54;roboduke;Changeset: 04b73bc4
Author:    Thejasvi Voniadka <tvoniadka@openjdk.org>
Committer: Abdul Kolarkunnu <akolarkunnu@openjdk.org>
Date:      2021-07-15 04:52:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/04b73bc4e022740122463ef70791ef276ac9b34d
;;;","2021-10-06 04:42;goetz;Fix request [17u]

This is in 11, so it should also be in 17.
No risk, only a test change.
Clean backport. Test passes.;;;","2021-10-11 23:51;goetz;Fix request [11u]

I backport this for parity with 11.0.14-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Calling stage.setY(0) twice causes wrong popups location,JDK-8269639,5053000,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2021-06-29 15:28,2022-04-22 04:46,2023-10-01 09:57,2021-07-19 08:00,8,jfx11,jfx16,,,,,jfx18,javafx,,0,,,,,,,,,,,,,,,,,,"On macOS, the task bar prevents placing a window on top of it. 

Therefore, if an app tries stage.setY(0) once, its window will be moved down below the task bar, setting the correct value: stage.getY() = 23.

However, calling stage.setY(0) once again (or any number of times for that matter), the app will be still rendered with origin at y = 23, but now stage.getY() will return 0.

This has some side effects. For instance, if there are popup controls, these will be misplaced, moved up 23 pixels precisely.

The attached test shows this case for a Menu: After clicking twice the button, the menu is shown on top of the MenuBar (see pic).

Also the test includes an stage.yProperty listener, that shows after the first click:

Stage.y at 0.0, was at 157.0
Stage.y at 23.0, was at 0.0 

(which confirms that the stage is moved down 23 pixels).

And after the second click:

Stage.y at 0.0, was at 23.0
 
(which confirms that at this point the stage y coordinate doesn't match the visible location).

This test fails for any JavaFX version from 11 to latest 17-ea.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285451,,,,,,,,,,,"2021-06-29 15:22;jpereda;StageTest.java;https://bugs.openjdk.org/secure/attachment/95304/StageTest.java","2021-06-29 15:21;jpereda;WrongMenuLocation.png;https://bugs.openjdk.org/secure/attachment/95305/WrongMenuLocation.png",,,,,x86_64,,,,,,,,,,os_x,,,,"0|i2tf17:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-07-08 16:26;kcr;I can (easily) reproduce this using the attached test program.;;;","2021-07-12 09:29;jpereda;The first click moves the window from center to top-left, and this is reported for Stage::Y:
 
Y stage = 0.0, was 157.0
Y stage = 23.0, was 0.0

The value 23 is the minY value for visualBounds, given by the Mac system menu bar height, so when the app is moved to the 0,0 coordinate, that is not allowed (no window can be because on top of the menu bar, and [self->nsWindow setFrame:frame] in GlassWindow+Java.m triggers a new relocation to 0,23, which is the correct Y value.

Nothing wrong so far. The Menu shows up at 23 (task bar) +22 (window title height) = 45.

With the second click (keeps at top-left) we only see:
 Y stage = 0.0, was 23.0

It might seem that we moved the app to 0,0 (but, of course, that is not what happens). This explains why the menu shows up at 22, while the app is still at 23 (but stage.y reports 0).

The issue is that while the stage stays at 0,23 all time, clicking the second time (0,0) changes the stage.y to 0.0, but there is no new native event as the window doesn’t really need to move (it is already at 23), so there is no callback to notify the stage to change to 23.0.

Therefore, there is mismatch between stage (0, 0) and presentableState (0, 23).

;;;","2021-07-12 09:32;kcr;[~jpereda] if you want to contribute a fix feel free to assign this bug to yourself.;;;","2021-07-16 09:27;jpereda;Yes, I believe I've got a simple fix;;;","2021-07-19 08:00;roboduke;Changeset: 1814991f
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2021-07-19 15:00:12 +0000
URL:       https://git.openjdk.java.net/jfx/commit/1814991f2dc919399d1abf0bb504986f6e84a46e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Property methods, setters, and getters in printing API should be final",JDK-8269638,5052999,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,kcr,kcr,2021-06-29 15:26,2021-07-20 10:09,2023-10-01 09:57,2021-07-16 08:48,jfx16,,,,,,,jfx18,javafx,,0,sn_97,,,,,,,,,,,,,,,,,"While reviewing JDK-8223717, I discovered that many of methods for the properties in (at least) JobSettings, PageRage, and PrinterJob are not final. In order to maintain the invariant that calling a setting is always the same as calling the set method of the property object, we make all property methods final, specifically, xxxxxProperty(), setXxxxx(), getXxxxx(), and isXxxxx(). Since the classes in question are all final, this isn't a problem in practice, but should be fixed nonetheless (e.g., to avoid copying that pattern to a class that isn't final or in case some day one of the affected classes is made non-final).

This change will need a CSR.
",,,,,,,,,,,,,,,,,,,,,,,,JDK-8270381,,,,,,,,JDK-8223717,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tf0z:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-06-29 15:27;kcr;I targeted it to openjfx18, but there might be time to fix it in 17.;;;","2021-06-30 09:53;prr;I don't think it is critical for 17 but we'll see. Certainly won't make RDP1
I was also going to look at over-riding toString on at least some of these properties in JobSettings.
If so maybe the bug synopsis should be different.;;;","2021-07-16 08:48;roboduke;Changeset: 8b8cea23
Author:    Phil Race <prr@openjdk.org>
Date:      2021-07-16 15:47:20 +0000
URL:       https://git.openjdk.java.net/jfx/commit/8b8cea23d1fd5c1c149e0143e2f6bf3312b5ab2e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/JFileChooser/FileSystemView/SystemIconTest.java fails on windows,JDK-8269637,5052998,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,kizune,kizune,2021-06-29 15:18,2023-07-17 13:05,2023-10-01 09:57,2021-07-14 11:27,17,,,,,,,18,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,sn_96,sn_97,,,,,,,,,,,,,,Test javax/swing/JFileChooser/FileSystemView/SystemIconTest.java fails on windows sometimes fails on Windows if at the time of test one of the files referred by the test does not exist or unaccessible.,,,,,,,,,,,JDK-8276871,JDK-8276716,,,,,,,,,,,,,,,,,JDK-8268280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tf0r:",9223372036854775807,b07,,,,,,,,,,,,,"2021-07-14 11:27;roboduke;Changeset: a033866d
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2021-07-14 18:25:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a033866d786507db69ab75643684e617fd1f4ba2
;;;","2021-11-03 14:36;akasko;Fix request (17u)

Clean backport of a Windows-specific fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stress test SEGV while emitting OldObjectSample,JDK-8269635,5052996,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,lmesnik,lmesnik,2021-06-29 14:44,2021-07-15 10:38,2023-10-01 09:57,2021-07-13 02:44,17,18,,,,,,17,hotspot,,0,atr,test-bigapps-Kitchensink,,,,,,,,,,,,,,,,"The hs_err:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007fff64a09204, pid=7556, tid=6384
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2439)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2439, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Problematic frame:
# V  [jvm.dll+0xab9204]  write_blobs+0x124
#
# Core dump will be written. Default location: T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java\scratch\0\hs_err_pid7556.mdmp
#
# JFR recording file will be written. Location: T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java\scratch\0\hs_err_pid7556.jfr
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xbootclasspath/a:T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java\scratch\0\wb.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djava.security.manager=allow -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=t:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java\tmp -XX:MaxRAMPercentage=50 -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -XX:+CrashOnOutOfMemoryError -Djava.net.preferIPv6Addresses=false -XX:+DisplayVMOutputToStderr -Xlog:gc*,gc+heap=debug:gc.log:uptime,timemillis,level,tags -XX:+DisableExplicitGC -XX:+StartAttachListener --add-modules=jdk.incubator.foreign --add-exports=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-exports=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED --add-exports=java.xml/com.sun.org.apache.xerces.internal.parsers=ALL-UNNAMED --add-exports=java.xml/com.sun.org.apache.xerces.internal.util=ALL-UNNAMED -Djava.io.tmpdir=T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java\scratch\0/java.io.tmpdir -Duser.home=T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java\scratch\0/user.home -agentpath:c:\ade\mesos\work_dir\jib-master\install\jdk-17+26-2439\windows-x64-debug.test\hotspot\jtreg\native\JvmtiStressModule.dll -XX:NativeMemoryTracking=detail -Djdk.test.lib.random.seed=8872877327547036430 applications.kitchensink.process.stress.Main T:\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_kitchensink_Kitchensink24HStress_java\scratch\0\kitchensink.final.properties

Host: win2019-x64-build-test-903805, AMD EPYC 7J13 64-Core Processor                , 12 cores, 47G,  Windows Server 2019 , 64 bit Build 17763 (10.0.17763.1879)
Time: Mon Jun 14 17:24:21 2021 /GM elapsed time: 52687.032098 seconds (0d 14h 38m 7s)

---------------  T H R E A D  ---------------

Current thread (0x000001f87b4ccf70):  JavaThread ""Attach Listener"" daemon [_thread_in_vm, id=6384, stack(0x0000006ebef00000,0x0000006ebf000000)]

Stack: [0x0000006ebef00000,0x0000006ebf000000],  sp=0x0000006ebeffe5d0,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xab9204]  write_blobs+0x124  (objectSampleCheckpoint.cpp:338)
V  [jvm.dll+0xab74b8]  iterate_samples<BlobWriter>+0xf8  (objectSampleCheckpoint.cpp:110)
V  [jvm.dll+0xab78a7]  ObjectSampleCheckpoint::_write+0x107  (objectSampleCheckpoint.cpp:376)
V  [jvm.dll+0x564cf2]  EventEmitter::write_events+0x2a2  (eventEmitter.cpp:98)
V  [jvm.dll+0x56427d]  EventEmitter::emit+0x22d  (eventEmitter.cpp:64)
V  [jvm.dll+0x8f6aa8]  LeakProfiler::emit_events+0x68  (leakProfiler.cpp:89)
V  [jvm.dll+0x6e0381]  jfr_emit_old_object_samples+0xb1  (jfrJniMethod.cpp:340)
C  0x000001f8483e5430

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  jdk.jfr.internal.JVM.emitOldObjectSamples(JZZ)V+0 jdk.jfr@17-ea
j  jdk.jfr.internal.OldObjectSample.emit(J)V+14 jdk.jfr@17-ea
j  jdk.jfr.internal.OldObjectSample.emit(Ljdk/jfr/internal/PlatformRecording;)V+31 jdk.jfr@17-ea
j  jdk.jfr.internal.PlatformRecorder.stop(Ljdk/jfr/internal/PlatformRecording;)V+142 jdk.jfr@17-ea
j  jdk.jfr.internal.PlatformRecording.stop(Ljava/lang/String;)Z+38 jdk.jfr@17-ea
j  jdk.jfr.Recording.stop()Z+6 jdk.jfr@17-ea
j  jdk.jfr.internal.dcmd.DCmdStop.execute(Ljdk/jfr/internal/dcmd/ArgumentParser;)V+100 jdk.jfr@17-ea
j  jdk.jfr.internal.dcmd.AbstractDCmd.execute(Ljava/lang/String;Ljava/lang/String;C)[Ljava/lang/String;+172 jdk.jfr@17-ea
v  ~StubRoutines::call_stub

siginfo: EXCEPTION_ACCESS_VIOLATION (0xc0000005), reading address 0x000001f81a246068",,,,,,,,,,,JDK-8270755,JDK-8270431,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tf0b:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-07-06 06:10;mgronlun;
 # RetAddr           : Args to Child                                                           : Call Site
00 (Inline Function) : --------`-------- --------`-------- --------`-------- --------`-------- : jvm!compare_traceid [t:\workspace\open\src\hotspot\share\jfr\utilities\jfrRelation.hpp @ 32] 
01 (Inline Function) : --------`-------- --------`-------- --------`-------- --------`-------- : jvm!GrowableArrayView<unsigned __int64>::find_sorted+0x4d [t:\workspace\open\src\hotspot\share\utilities\growableArray.hpp @ 288] 
02 (Inline Function) : --------`-------- --------`-------- --------`-------- --------`-------- : jvm!JfrPredicate<unsigned __int64,&compare_traceid>::test+0x4d [t:\workspace\open\src\hotspot\share\jfr\utilities\jfrPredicate.hpp @ 40] 
03 (Inline Function) : --------`-------- --------`-------- --------`-------- --------`-------- : jvm!has_thread_exited+0x85 [t:\workspace\open\src\hotspot\share\jfr\leakprofiler\checkpoint\objectSampleCheckpoint.cpp @ 72] 
04 (Inline Function) : --------`-------- --------`-------- --------`-------- --------`-------- : jvm!write_thread_blob+0xb4 [t:\workspace\open\src\hotspot\share\jfr\leakprofiler\checkpoint\objectSampleCheckpoint.cpp @ 324] 
05 00007fff`64a074b8 : 000001f8`8c9e61b0 0000006e`beffe6b0 000001f8`7b4ccf00 000001f8`8c9e61b0 : jvm!write_blobs+0x124 [t:\workspace\open\src\hotspot\share\jfr\leakprofiler\checkpoint\objectSampleCheckpoint.cpp @ 338] 
06 (Inline Function) : --------`-------- --------`-------- --------`-------- --------`-------- : jvm!BlobWriter::sample_do+0x38 [t:\workspace\open\src\hotspot\share\jfr\leakprofiler\checkpoint\objectSampleCheckpoint.cpp @ 353] 
07 (Inline Function) : --------`-------- --------`-------- --------`-------- --------`-------- : jvm!do_samples+0x71 [t:\workspace\open\src\hotspot\share\jfr\leakprofiler\checkpoint\objectSampleCheckpoint.cpp @ 99] 
08 00007fff`64a078a7 : 0000006e`beffe690 000001f8`7b4ccf01 000001f8`323d8410 00007fff`00000000 : jvm!iterate_samples<BlobWriter>+0xf8 [t:\workspace\open\src\hotspot\share\jfr\leakprofiler\checkpoint\objectSampleCheckpoint.cpp @ 110] 
09 (Inline Function) : --------`-------- --------`-------- --------`-------- --------`-------- : jvm!write_sample_blobs+0x5b [t:\workspace\open\src\hotspot\share\jfr\leakprofiler\checkpoint\objectSampleCheckpoint.cpp @ 366] 
0a 00007fff`644b4cf2 : 000001f8`323d8410 0000006e`beffe7d8 000001f8`808da600 000001f8`7b4ccf70 : jvm!ObjectSampleCheckpoint::_write+0x107 [t:\workspace\open\src\hotspot\share\jfr\leakprofiler\checkpoint\objectSampleCheckpoint.cpp @ 376] 
0b 00007fff`644b427d : 0000006e`beffe840 000001f8`323d8410 0000006e`beffe7d8 00007fff`64b8d200 : jvm!EventEmitter::write_events+0x2a2 [t:\workspace\open\src\hotspot\share\jfr\leakprofiler\checkpoint\eventEmitter.cpp @ 98] 
0c 00007fff`64846aa8 : 000001f8`323d8410 00000000`00000000 000001f8`7b4ccf00 00000002`11d42300 : jvm!EventEmitter::emit+0x22d [t:\workspace\open\src\hotspot\share\jfr\leakprofiler\checkpoint\eventEmitter.cpp @ 64] 
0d 00007fff`64630381 : 00000000`00000000 000001f8`7b4ccf00 000001f8`7b4ccf00 000001f8`48409b55 : jvm!LeakProfiler::emit_events+0x68 [t:\workspace\open\src\hotspot\share\jfr\leakprofiler\leakProfiler.cpp @ 89] 
0e 000001f8`483e5430 : 000001f8`7b4cd268 0000006e`beffea30 00000000`00000000 00000007`ff607700 : jvm!jfr_emit_old_object_samples+0xb1 [t:\workspace\open\src\hotspot\share\jfr\jni\jfrJniMethod.cpp @ 340] 
0f 000001f8`7b4cd268 : 0000006e`beffea30 00000000`00000000 00000007`ff607700 00000002`00000000 : 0x000001f8`483e5430
10 0000006e`beffea30 : 00000000`00000000 00000007`ff607700 00000002`00000000 4131bea3`00000000 : 0x000001f8`7b4cd268
11 00000000`00000000 : 00000007`ff607700 00000002`00000000 4131bea3`00000000 00000000`00000002 : 0x0000006e`beffea30

rax=000001f81a1c6070 rbx=000000000000ffff rcx=000001f87f5b0768
rdx=000001f8970bfc50 rsi=0000000000000000 rdi=000000000001ffff
rip=00007fff64a09204 rsp=0000006ebeffe5d0 rbp=000001f88c9e61b0
 r8=0000000000000041  r9=0000000000000060 r10=00007fff723e0000
r11=00007fff723e15c3 r12=000001f8323d8410 r13=000001f87b9717f0
r14=000001f87ce4b9c0 r15=0000000000000020

// crash point

00007fff`64a09200 498b4620        mov     rax,qword ptr [r14+20h]
00007fff`64a09204 4c3b3cd8        cmp     r15,qword ptr [rax+rbx*8]

// rax = 000001f81a1c6070 (growable array _data pointer. Old?)
// rbx = 65535 (index)

// unloaded_thread_id_set

dx -r1 ((jvm!GrowableArray<unsigned __int64> *)0x1f87ce4b9c0)
((jvm!GrowableArray<unsigned __int64> *)0x1f87ce4b9c0)                 : 0x1f87ce4b9c0 [Type: GrowableArray<unsigned __int64> *]
    [+0x008] _allocation_t    [Type: unsigned __int64 [2]]
    [+0x018] _len             : 131284 [Type: int]
    [+0x01c] _max             : 262144 [Type: int]
    [+0x020] _data            : 0x1f821a44070 : 0x29 [Type: unsigned __int64 *] // <<-- not the same as rax, indicating the _data field was updated with a new pointer (see below on growableArray grow())
    [+0x028] _metadata        [Type: GrowableArrayMetadata]

// growableArray.hpp

template <typename E, typename Derived>
void GrowableArrayWithAllocator<E, Derived>::grow(int j) {
  int old_max = this->_max;
  // grow the array by increasing _max to the first power of two larger than the size we need
  this->_max = next_power_of_2((uint32_t)j);
  // j < _max
  E* newData = static_cast<Derived*>(this)->allocate();
  int i = 0;
  for (     ; i < this->_len; i++) ::new ((void*)&newData[i]) E(this->_data[i]);
  for (     ; i < this->_max; i++) ::new ((void*)&newData[i]) E();
  for (i = 0; i < old_max; i++) this->_data[i].~E();
  if (this->_data != NULL) {
    static_cast<Derived*>(this)->deallocate(this->_data); // <<-- old _data pointer is deallocated
  }
  this->_data = newData; // <<-- new _data pointer set after deallocation of old
}


// unprotected access to unloaded_thread_id_set as part of serializing the blobs

static bool has_thread_exited(traceid tid) {
  assert(tid != 0, ""invariant"");
  return unloaded_thread_id_set != NULL && JfrPredicate<traceid, compare_traceid>::test(unloaded_thread_id_set, tid);
}

// protected access to add a thread to the unloaded thread id set (which can cause the set to grow)

static void add_to_unloaded_thread_set(traceid tid) {
  ThreadIdExclusiveAccess lock;
  if (unloaded_thread_id_set == NULL) {
    unloaded_thread_id_set = c_heap_allocate_array<traceid>();
  }
  add(unloaded_thread_id_set, tid);
}

// Summary: the crash happens because the serializer thread is consulting the set of unloaded thread ids ( a C_HEAP allocated GrowableArray) without mutual exclusion. At the same time, some thread exits and registers with the set, causing it to grow. Growing a GrowableArray implies the old _data pointer is deallocated after all existing entries have been migrated. The serializer thread is still holding onto the previous, now stale and deallocated _data pointer.

// Fix: Reads must also be mutually exclusive to prevent the set from growing in the middle of inspection.
;;;","2021-07-13 02:44;roboduke;Changeset: bd95c0c9
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-07-13 09:43:49 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/bd95c0c9e02946ae6a0d525b1425485b1de4add8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/dcmd/framework/VMVersionTest.java fails with Address already in use error,JDK-8269616,5052977,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,amenkov,amenkov,2021-06-29 12:00,2022-01-31 23:44,2023-10-01 09:57,2021-07-26 13:17,17,18,,,,,,18,core-svc,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier1,tier3,,,,,,,,,,,,,"test InvalidCommandTest.mainClass(): failure
nsk.share.Failure: Unable to bind for PipeIO Listener Thread connection to port 49169 for 120000ms timeout:
	java.net.BindException: Address already in use
	at nsk.share.jpda.BasicSocketConnection.bind(SocketConnection.java:126)
	at nsk.share.jpda.SocketIOPipe$ListenerThread.<init>(SocketIOPipe.java:215)
	at nsk.share.jpda.SocketIOPipe.startListening(SocketIOPipe.java:257)
	at nsk.share.jpda.IOPipe.startDebuggerPipe(IOPipe.java:94)
	at TestProcessLauncher.launch(TestProcessLauncher.java:64)
	at InvalidCommandTest.mainClass(InvalidCommandTest.java:59)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,JDK-8280512,JDK-8281017,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tew3:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2021-07-19 05:06;dholmes;Also serviceability/dcmd/framework/HelpTest.java;;;","2021-07-26 13:17;roboduke;Changeset: 8785737b
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-07-26 20:16:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8785737ba5f398888816ddd0f50adeea6a75bb0f
;;;","2022-01-28 07:56;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly testing passes.;;;","2022-01-28 08:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/127
Date: 2022-01-28 15:55:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix for 8263640 broke Windows build,JDK-8269615,5052976,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,ccheung,ccheung,ccheung,2021-06-29 11:59,2022-02-01 09:14,2023-10-01 09:57,2021-06-29 12:53,18,,,,,,,18,hotspot,,0,noreg-build,,,,,,,,,,,,,,,,,"[2021-06-29T18:08:04,949Z] * For target hotspot_variant-server_libjvm_objs_arguments.obj:
[2021-06-29T18:08:04,983Z] arguments.cpp
[2021-06-29T18:08:04,983Z] t:\workspace\open\src\hotspot\share\runtime\arguments.cpp(1119): error C2220: the following warning is treated as an error
[2021-06-29T18:08:04,983Z] t:\workspace\open\src\hotspot\share\runtime\arguments.cpp(1119): warning C4267: 'argument': conversion from 'size_t' to 'int', possible loss of data
[2021-06-29T18:08:05,017Z]    ... (rest of output omitted)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263640,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,"0|i2tevv:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-29 12:53;roboduke;Changeset: 1ac8deef
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2021-06-29 19:52:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1ac8deef4c0973eeeef2a34f6d0cee0c2efa82a9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[s390] Interpreter checks wrong bit for slow path instance allocation,JDK-8269614,5052975,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mdoerr,mdoerr,mdoerr,2021-06-29 11:58,2021-07-15 10:23,2023-10-01 09:57,2021-06-30 06:33,11,16,17,18,,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,oraclejdk-na,rt-other,,,,,,,,,,,,,,"JVM runs into an assertion when running e.g. java/lang/instrument/GetObjectSizeIntrinsicsTest_id3 test:
#  Internal Error (src/hotspot/share/utilities/copy.hpp:330)
#  assert(is_aligned(to, alignment)) failed: must be aligned: 0x00000000ffd0fc31
(called by MemAllocator::allocate_inside_tlab)

Reason is that the interpreter messed it up during execution of an earlier 'new' bytecode. It checks the wrong bit instead of Klass::_lh_instance_slow_path_bit.

",,,,,,,,,,,JDK-8270681,JDK-8269741,JDK-8269714,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,,,,,,"0|i2tevn:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-30 06:33;roboduke;Changeset: be0ac92e
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2021-06-30 13:32:19 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/be0ac92e186c7b2845e251ce56204a2378f76976
;;;","2021-06-30 06:52;mdoerr;Fix Request (11u)
11u is also affected. Interpreter may mess up the VM in rare cases. Fix is trivial and applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regressions up to 5% on aarch64 seems due to JDK-8268858,JDK-8269598,5052952,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,jzhu,ecaspole,ecaspole,2021-06-29 07:15,2022-02-08 05:22,2023-10-01 09:57,2021-07-14 18:58,18,,,,,,,18,hotspot,,0,c2,c2-regalloc,hs-comp-triaged,oracle-triage-11,oracle-triage-17,oracle-triage-18,perf-regression,,,,,,,,,,,Seen in 18-b3 retriage and by individual CI build experiments.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268858,,,,,,,,,,,,,,,,,aarch64,,,,,,,b03,18,,linux,,,,"0|i2teqj:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-06-29 20:39;dlong;ILW = performance regression, one platform = HMH = P1;;;","2021-06-30 13:21;ecaspole;[~jzhu] We have 2 ARM platforms with slightly different CPUs. We observed similar perf regressions on both with some SPECjvm2008  benchmarks:

SPECjvm2008-Compress-G1	: -5.23%			
SPECjvm2008-Compress-ParGC	: -5.56%			
SPECjvm2008-MPEG-G1 : -1.49%			
SPECjvm2008-XML.transform-ParGC	: -1.91%	

SPECjvm2008 is a free download from www.spec.org. I hope you can reproduce this result on your hardware.
;;;","2021-06-30 19:35;jzhu;Thanks Eric. I will firstly reproduce this regression.;;;","2021-07-02 02:20;jzhu;I can reproduce this issue.
It's caused by extra spilling for c2 version of function ""Compressor::compress"".
I'll try to figure out the root cause.;;;","2021-07-09 00:22;jzhu;I've found the root cause and will fix it next week.;;;","2021-07-14 18:58;roboduke;Changeset: 7c234919
Author:    Joshua Zhu <jzhu@openjdk.org>
Committer: Yi Yang <yyang@openjdk.org>
Date:      2021-07-15 01:57:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7c2349191893f07d133ff94a0be4472948f7920b
;;;","2021-07-15 13:40;dlong;[~jzhu] Please try SPECjvm2008 compress on x86/x64 with -XX:+PreserveFramePointer.  We are seeing a regression after JDK-8268858.;;;","2021-07-15 20:16;jzhu;[~dlong] Thanks for your information. Previously I already found performance degradation with -XX:+PreserveFramePointer in Alibaba Flink Nexmark benchmark. It's caused by inefficient codes generated by RA. That's why I begin working on register pressure. I already created JDK-8270808 [1] to track it. Meanwhile I will also track your mentioned regression issue together with it. Hope they're caused by the same reason.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(_handle_mark_nesting > 1) failed: memory leak: allocating handle outside HandleMark,JDK-8269594,5052948,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,zgu,zgu,zgu,2021-06-29 06:46,2021-08-16 11:19,2023-10-01 09:57,2021-06-30 04:37,11-pool,16-pool,17,18,8-pool,,,17,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,redhat-interest,,,,,,,,,,,,,"Caught in Shenandoah nightly test, hard to reproduce.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jenkins/workspace/nightly/jdk-jdk/src/hotspot/share/runtime/handles.cpp:35), pid=1595, tid=1970
#  assert(_handle_mark_nesting > 1) failed: memory leak: allocating handle outside HandleMark
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.jenkins.jdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.jenkins.jdk-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xc72244]  HandleArea::allocate_handle(oop)+0x1b4
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
",,,,,,,,,,,JDK-8269713,JDK-8272542,JDK-8270680,JDK-8269769,JDK-8269812,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-29 06:46;zgu;hs_err_pid1595.log;https://bugs.openjdk.org/secure/attachment/95296/hs_err_pid1595.log",,,,,,,,,,,,,,,,,,,,"0|i2tepn:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-29 11:31;hseigel;ILW = HLM = p3;;;","2021-06-30 04:37;roboduke;Changeset: 4b4bef4e
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2021-06-30 11:37:09 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4b4bef4e1e06c8efbfeb2c28e0658ce91ee9ad66
;;;","2021-07-01 10:21;zgu;Fix Request (11u)

I would like to backport this patch to openjdk11u for parity with Oracle 11.0.13.

This is a low risk patch that fixes potential memory leak. The jdk17 patch applies cleanly.;;;","2021-07-06 06:28;zgu;8u code review: https://mail.openjdk.java.net/pipermail/jdk8u-dev/2021-July/014082.html;;;","2021-08-06 10:43;zgu;Fix Request (8u)

I would like to backport this patch to openjdk8u to avoid potential memory leak, 8u patch has been reviewed by @phh.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(is_valid()) failed: invalid register (-1),JDK-8269580,5052934,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,jbhateja,jbhateja,jbhateja,2021-06-29 04:07,2021-08-13 10:53,2023-10-01 09:57,2021-07-01 08:10,17,18,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,- Assertion failure seen on target which lacks AVX512BW feature.,,,,,,,,,,,JDK-8270697,JDK-8269785,,,,,,,,,,,,,,,,,,,,JDK-8269775,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2temj:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Not verified,,"2021-06-29 21:18;dlong;ILW = assert or bad code in release build, specific hardware = HMH = P1;;;","2021-07-01 08:10;roboduke;Changeset: 4bbf11d4
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2021-07-01 15:08:43 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4bbf11d4a9d00c13149135de3a0e8138f58bcb52
;;;","2021-08-13 10:52;enikitin;Unable to verify - 40 runs of tier1 through tier3 with the pre-fix revision gave no failures. Therefore I can't find tests that would catch that reliably. Closing as 'Not verified';;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] fix AArch64 build after JDK-8267824,JDK-8269578,5052928,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ngasson,ngasson,ngasson,2021-06-29 01:35,2021-07-06 02:07,2023-10-01 09:57,2021-07-06 02:07,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,valhalla,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,"0|i2tel7:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: graph should be schedulable after JDK-8252372,JDK-8269575,5052925,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,shade,shade,2021-06-29 01:12,2021-09-28 13:18,2023-10-01 09:57,2021-07-06 00:04,17,18,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,oracle-triage-11,oracle-triage-17,regression,,,,,,,,,,,,"Attached Fuzzer test fails:

$ linux-x86_64-server-fastdebug/images/jdk/bin/java -Xcomp -XX:CompileOnly=Test Test

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/lcm.cpp:1190), pid=2187087, tid=2187100
#  assert(false) failed: graph should be schedulable

Current CompileTask:
C2:    235    6    b  4       Test::mainTest (745 bytes)

Stack: [0x00007f21c9e64000,0x00007f21c9f65000],  sp=0x00007f21c9f5fb70,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1229004]  PhaseCFG::schedule_local(Block*, GrowableArray<int>&, VectorSet&, long*)+0xe04
V  [libjvm.so+0xd2ead8]  PhaseCFG::global_code_motion()+0xc38
V  [libjvm.so+0xd320d1]  PhaseCFG::do_global_code_motion()+0x51
V  [libjvm.so+0xa1c44b]  Compile::Code_Gen()+0x2ab
V  [libjvm.so+0xa2948b]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x13bb
V  [libjvm.so+0x857106]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa3ae19]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf19
V  [libjvm.so+0xa3bae8]  CompileBroker::compiler_thread_loop()+0x598
V  [libjvm.so+0x19bf45c]  JavaThread::thread_main_inner()+0x28c
V  [libjvm.so+0x19c4f24]  Thread::call_run()+0x104
V  [libjvm.so+0x1556d2c]  thread_native_entry(Thread*)+0x10c
",,,,,,,,,,,JDK-8270712,JDK-8269971,,,,,,,,,,,,,,,,,,,,JDK-8273954,,,,,JDK-8252372,,,,,,"2021-06-29 01:12;shade;091122.tar.gz;https://bugs.openjdk.org/secure/attachment/95280/091122.tar.gz",,,,,,,,,,,,,,,,,,,,"0|i2tekj:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-06-29 02:36;shade;Bisected to JDK-8252372.;;;","2021-06-29 20:33;dlong;ILW = C2 assertion failure regression = HMM = P2 ;;;","2021-07-06 00:04;roboduke;Changeset: df1364b5
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-07-06 07:03:08 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/df1364b50870e05bbaa994a96bf86b6d284c334f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JVM crashes when running VectorMask query tests,JDK-8269568,5052917,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xgong,xgong,xgong,2021-06-28 22:35,2021-07-15 10:31,2023-10-01 09:57,2021-07-06 01:18,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-17,vectorapi,,,,,,,,,,,,,"1.  Jtreg tests for VectorMask query (trueCount, firstTrue, lastTrue) is not effective. The tests failure cannot be reported. 
     The main reason is that the methods are not hot enough to be compiled by C2 compiler.

Besides, after fixing the jtreg issue, the JVM  crashes with the following assertion failure:

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/vectornode.hpp:879
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/xiagon01/code/panama-vector/src/hotspot/share/opto/vectornode.hpp:879), pid=168241, tid=168257
#  Error: assert(mask->Opcode() == Op_VectorStoreMask) failed
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-git-d353bd9398)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-git-d353bd9398, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x1833be4]  VectorMaskOpNode::make(Node*, Type const*, int)+0x19c
The input of the mask might be ""LoadVector"", since there is the optimization: 

VectorStoreMask (VectorLoadMask value)   ==>   value",,,,,,,,,,,JDK-8270715,JDK-8269977,,,,,,,,,,,,,,,,,,,,JDK-8256973,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2teir:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-29 20:30;dlong;ILW = crashing using vector API = MMH = P3;;;","2021-07-06 01:18;roboduke;Changeset: 2b207782
Author:    Xiaohong Gong <xgong@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-07-06 08:17:27 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/2b20778225527a3ccd3ced2a4246c5943f467e06
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A fatal error has been detected by the Java Runtime Environment,JDK-8269566,5052663,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,webbuggrp,webbuggrp,webbuggrp,2021-06-24 22:57,2022-02-03 21:50,2023-10-01 09:57,2021-11-30 11:15,15,,,,,,,17,tools,,0,dcsaw,ji-crash,reproducer-no,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
# JRE version: OpenJDK Runtime Environment (15.0.2+7) (build 15.0.2+7)
# Java VM: OpenJDK 64-Bit Server VM (15.0.2+7, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# C  [libjimage.so+0x2fa3]

ERROR MESSAGES/STACK TRACES THAT OCCUR :
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fce38931fa3, pid=1674, tid=229938
#
# JRE version: OpenJDK Runtime Environment (15.0.2+7) (build 15.0.2+7)
# Java VM: OpenJDK 64-Bit Server VM (15.0.2+7, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# C  [libjimage.so+0x2fa3]
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /home/vks/core.1674)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xmx1024m /opt/xdman/xdman.jar -m

Host: Intel(R) Core(TM) i3-6006U CPU @ 2.00GHz, 4 cores, 3G, Garuda Linux
Time: Sat Jun 19 20:14:58 2021 IST elapsed time: 23831.746322 seconds (0d 6h 37m 11s)

---------------  T H R E A D  ---------------

Current thread (0x00007fcd9c04a350):  JavaThread ""StreamCloser"" [_thread_in_vm, id=229938, stack(0x00007fcdd0325000,0x00007fcdd0426000)]

Stack: [0x00007fcdd0325000,0x00007fcdd0426000],  sp=0x00007fcdd0422870,  free space=1014k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libjimage.so+0x2fa3]
C  [libjimage.so+0x3b2e]
C  [libjimage.so+0x4034]  JIMAGE_FindResource+0x104
V  [libjvm.so+0x509e01]
V  [libjvm.so+0x50e4a3]
V  [libjvm.so+0xd5a8f1]
V  [libjvm.so+0xd5976b]
V  [libjvm.so+0xd59cdc]
V  [libjvm.so+0x5067ce]
V  [libjvm.so+0x9c0ac5]
V  [libjvm.so+0x50e505]
V  [libjvm.so+0xd5a8f1]
V  [libjvm.so+0xd5976b]
V  [libjvm.so+0xd5b85e]
V  [libjvm.so+0x578e89]
V  [libjvm.so+0x78f233]
j  java.util.WeakHashMap$KeySet.iterator()Ljava/util/Iterator;+0 java.base@15.0.2
j  java.util.AbstractCollection.toArray([Ljava/lang/Object;)[Ljava/lang/Object;+31 java.base@15.0.2
j  com.sun.imageio.stream.StreamCloser$1.run()V+30 java.desktop@15.0.2
J 5373 c1 java.lang.Thread.run()V java.base@15.0.2 (17 bytes) @ 0x00007fce194e84d4 [0x00007fce194e83a0+0x0000000000000134]
v  ~StubRoutines::call_stub
V  [libjvm.so+0x796559]
V  [libjvm.so+0x797d9c]
V  [libjvm.so+0x854a9f]
V  [libjvm.so+0xda3f95]
V  [libjvm.so+0xda8f50]
V  [libjvm.so+0xb731ca]

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.util.WeakHashMap$KeySet.iterator()Ljava/util/Iterator;+0 java.base@15.0.2
j  java.util.AbstractCollection.toArray([Ljava/lang/Object;)[Ljava/lang/Object;+31 java.base@15.0.2
j  com.sun.imageio.stream.StreamCloser$1.run()V+30 java.desktop@15.0.2
J 5373 c1 java.lang.Thread.run()V java.base@15.0.2 (17 bytes) @ 0x00007fce194e84d4 [0x00007fce194e83a0+0x0000000000000134]
v  ~StubRoutines::call_stub

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x00007fce27bae054

Register to memory mapping:

RAX=0x00007fce38936b68: <offset 0x0000000000007b68> in /usr/lib/jvm/java-15-openjdk/lib/libjimage.so at 0x00007fce3892f000
RBX=0x00007fcdd0422921 is pointing into the stack for thread: 0x00007fcd9c04a350
RCX=0x00007fcdd042294b is pointing into the stack for thread: 0x00007fcd9c04a350
RDX=0x000000000000500e is an unknown value
RSP=0x00007fcdd0422870 is pointing into the stack for thread: 0x00007fcd9c04a350
RBP=0x00007fcdd0422890 is pointing into the stack for thread: 0x00007fcd9c04a350
RSI=0x00007fce27b9a01c is an unknown value
RDI=0x00007fce38937030: <offset 0x0000000000008030> in /usr/lib/jvm/java-15-openjdk/lib/libjimage.so at 0x00007fce3892f000
R8 =0x00007fcdd04239b8 is pointing into the stack for thread: 0x00007fcd9c04a350
R9 =0x00007fcdd0423730 is pointing into the stack for thread: 0x00007fcd9c04a350
R10=0x00007fce388d13e0: <offset 0x00000000001853e0> in /usr/lib/libc.so.6 at 0x00007fce3874c000
R11=0x0 is NULL
R12=0x0000000000007f35 is an unknown value
R13=0x00007fcdd0422920 is pointing into the stack for thread: 0x00007fcd9c04a350
R14=0x0 is NULL
R15=0x00007fcde47eba70 points into unknown readable memory: 0x6974752f6176616a | 6a 61 76 61 2f 75 74 69


Registers:
RAX=0x00007fce38936b68, RBX=0x00007fcdd0422921, RCX=0x00007fcdd042294b, RDX=0x000000000000500e
RSP=0x00007fcdd0422870, RBP=0x00007fcdd0422890, RSI=0x00007fce27b9a01c, RDI=0x00007fce38937030
R8 =0x00007fcdd04239b8, R9 =0x00007fcdd0423730, R10=0x00007fce388d13e0, R11=0x0000000000000000
R12=0x0000000000007f35, R13=0x00007fcdd0422920, R14=0x0000000000000000, R15=0x00007fcde47eba70
RIP=0x00007fce38931fa3, EFLAGS=0x0000000000010246, CSGSFS=0x002b000000000033, ERR=0x0000000000000004
  TRAPNO=0x000000000000000e

Top of Stack: (sp=0x00007fcdd0422870)
0x00007fcdd0422870:   00000a2e09aa2df8 00007fcdd04239b8
0x00007fcdd0422880:   00007fce300151b0 00007fcdd0422920
0x00007fcdd0422890:   00007fcdd0422900 00007fce38932b2e
0x00007fcdd04228a0:   00007fcdd04228b0 b822b526cbda2c00 

Instructions: (pc=0x00007fce38931fa3)
0x00007fce38931ea3:   00 00 48 8b 07 45 8d 6c 24 1c 45 01 ec ff 50 08
0x00007fce38931eb3:   bf 10 00 00 00 41 89 c0 48 8b 43 48 48 8d 50 1c
0x00007fce38931ec3:   49 01 c5 48 89 53 50 44 89 e2 48 01 c2 4c 89 6b
0x00007fce38931ed3:   58 48 89 53 60 43 8d 14 04 48 01 d0 48 89 43 68
0x00007fce38931ee3:   ff 15 7f 50 00 00 48 8b 53 10 48 85 c0 48 89 18
0x00007fce38931ef3:   48 89 50 08 48 89 43 70 0f 95 c0 e9 a8 fe ff ff
0x00007fce38931f03:   90 66 66 2e 0f 1f 84 00 00 00 00 00 90 0f b6 07
0x00007fce38931f13:   89 f2 48 8d 4f 01 84 c0 74 19 0f 1f 00 69 d2 93
0x00007fce38931f23:   01 00 01 48 83 c1 01 31 c2 0f b6 41 ff 84 c0 75
0x00007fce38931f33:   ec 89 d6 89 f0 25 ff ff ff 7f c3 66 90 48 85 d2
0x00007fce38931f43:   0f 84 d6 00 00 00 55 48 89 e5 41 55 41 54 41 89
0x00007fce38931f53:   cc 53 48 83 ec 08 85 c9 0f 84 b6 00 00 00 49 89
0x00007fce38931f63:   f5 48 89 d6 41 0f b6 55 00 49 8d 5d 01 84 d2 0f
0x00007fce38931f73:   84 98 00 00 00 48 89 d9 b8 93 01 00 01 69 c0 93
0x00007fce38931f83:   01 00 01 48 83 c1 01 31 d0 0f b6 51 ff 84 d2 75
0x00007fce38931f93:   ec 25 ff ff ff 7f 31 d2 41 f7 f4 48 8b 07 89 d2
0x00007fce38931fa3:   8b 34 96 ff 50 20 85 c0 7f 1b 74 68 f7 d0 41 89
0x00007fce38931fb3:   c0 48 83 c4 08 44 89 c0 5b 41 5c 41 5d 5d c3 66
0x00007fce38931fc3:   0f 1f 44 00 00 41 0f b6 4d 00 89 c6 84 c9 74 1b
0x00007fce38931fd3:   0f 1f 44 00 00 69 f6 93 01 00 01 48 83 c3 01 31
0x00007fce38931fe3:   ce 0f b6 4b ff 84 c9 75 ec 89 f0 25 ff ff ff 7f
0x00007fce38931ff3:   31 d2 48 83 c4 08 41 f7 f4 5b 41 5c 41 5d 5d 41
0x00007fce38932003:   89 d0 44 89 c0 c3 0f 1f 80 00 00 00 00 b8 93 01
0x00007fce38932013:   00 01 eb 82 41 b8 ff ff ff ff eb 95 41 83 c8 ff
0x00007fce38932023:   44 89 c0 c3 90 0f 1f 84 00 00 00 00 00 eb 19 66
0x00007fce38932033:   0f 1f 44 00 00 0f b6 16 84 d2 74 13 38 c2 75 1d
0x00007fce38932043:   48 83 c7 01 48 83 c6 01 0f b6 07 84 c0 75 e6 48
0x00007fce38932053:   89 f8 c3 66 2e 0f 1f 84 00 00 00 00 00 31 c0 c3
0x00007fce38932063:   90 66 66 2e 0f 1f 84 00 00 00 00 00 90 49 89 f9
0x00007fce38932073:   49 89 f2 48 85 f6 74 58 41 0f b6 02 84 c0 74 50
0x00007fce38932083:   0f 1f 44 00 00 89 c2 89 c7 83 e0 07 c0 ea 03 49
0x00007fce38932093:   8d 74 02 02 83 e7 07 31 c0 44 0f b6 c2 49 8d 52 


Stack slot to memory mapping:
stack at sp + 0 slots: 0x00000a2e09aa2df8 is an unknown value
stack at sp + 1 slots: 0x00007fcdd04239b8 is pointing into the stack for thread: 0x00007fcd9c04a350
stack at sp + 2 slots: 0x00007fce300151b0 points into unknown readable memory: 0x00000007fce30015 | 15 00 e3 fc 07 00 00 00
stack at sp + 3 slots: 0x00007fcdd0422920 is pointing into the stack for thread: 0x00007fcd9c04a350
stack at sp + 4 slots: 0x00007fcdd0422900 is pointing into the stack for thread: 0x00007fcd9c04a350
stack at sp + 5 slots: 0x00007fce38932b2e: <offset 0x0000000000003b2e> in /usr/lib/jvm/java-15-openjdk/lib/libjimage.so at 0x00007fce3892f000
stack at sp + 6 slots: 0x00007fcdd04228b0 is pointing into the stack for thread: 0x00007fcd9c04a350
stack at sp + 7 slots: 0xb822b526cbda2c00 is an unknown value


---------------  P R O C E S S  ---------------

Threads class SMR info:
_java_thread_list=0x00007fcd9c051f50, length=22, elements={
0x00007fce30154210, 0x00007fce3015bbb0, 0x00007fce30172a80, 0x00007fce30174190,
0x00007fce30175df0, 0x00007fce30177620, 0x00007fce30178cd0, 0x00007fce30204790,
0x00007fce3020fc80, 0x00007fce303933e0, 0x00007fce3039a890, 0x00007fce3041eaa0,
0x00007fce304bff20, 0x00007fce30015980, 0x00007fcdc80740e0, 0x00007fcdd4002460,
0x00007fcd9c015250, 0x00007fcd9c0159b0, 0x00007fcdec001b80, 0x00007fcdec002070,
0x00007fcd9c049e60, 0x00007fcd9c04a350
}

Java Threads: ( => current thread )
  0x00007fce30154210 JavaThread ""Reference Handler"" daemon [_thread_blocked, id=1739, stack(0x00007fce18373000,0x00007fce18474000)]
  0x00007fce3015bbb0 JavaThread ""Finalizer"" daemon [_thread_blocked, id=1741, stack(0x00007fce18272000,0x00007fce18373000)]
  0x00007fce30172a80 JavaThread ""Signal Dispatcher""

#-----------------------------------------------------------#
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,"0|i2tcyb:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2021-06-28 22:19;tongwan;The problem happened at:
Current thread (0x00007fcd9c04a350): JavaThread ""StreamCloser"" [_thread_in_vm, id=229938, stack(0x00007fcdd0325000,0x00007fcdd0426000)]

Stack: [0x00007fcdd0325000,0x00007fcdd0426000], sp=0x00007fcdd0422870, free space=1014k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
C [libjimage.so+0x2fa3]
C [libjimage.so+0x3b2e]
C [libjimage.so+0x4034] JIMAGE_FindResource+0x104 

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j java.util.WeakHashMap$KeySet.iterator()Ljava/util/Iterator;+0 java.base@15.0.2
j java.util.AbstractCollection.toArray([Ljava/lang/Object;)[Ljava/lang/Object;+31 java.base@15.0.2
j com.sun.imageio.stream.StreamCloser$1.run()V+30 java.desktop@15.0.2
J 5373 c1 java.lang.Thread.run()V java.base@15.0.2 (17 bytes) @ 0x00007fce194e84d4 ;;;","2021-06-30 10:08;prr;no .. this is crashing in
> # C [libjimage.so+0x2fa3] 


jimage is the tool library managing the Java Runtime ""Image"" - nothing to do with Image I/O although I do note it may be confusing that
an Image I/O shutdown hook was running higher up the stack but that is just Java code and could not cause this.

So this should be reassigned to some jimage category;;;","2021-07-27 11:25;jlaskey;May be a duplicate of https://bugs.openjdk.java.net/browse/JDK-8166727. Without symbols it's hard to tell. JIMAGE_FindResource sort of points there. That fix is in jdk17.
;;;","2021-11-30 11:15;jlaskey;Was fixed in 17. 

https://bugs.openjdk.java.net/browse/JDK-8166727;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fix of JDK-8252657 missed to update history at the end of JVM TI spec,JDK-8269558,5052910,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,sspitsyn,sspitsyn,2021-06-28 18:48,2021-07-15 10:37,2023-10-01 09:57,2021-07-11 04:05,17,,,,,,,17,hotspot,,0,doc,docbug,doc-only,,,,,,,,,,,,,,,"The fix of:
  8252657 JVMTI agent is not unloaded when Agent_OnAttach is failed
did not update the JVM TI spec history at the end of document.
So, some item like below has to be added:
Version & Date: 
  17.0.0    15 January 2021
Changes:
   Minor clarification in the section ""Agent Shutdown"" that says the implementation may choose to not call the Agent_OnUnload function if the Agent_OnAttach/ Agent_OnAttach_L function reported an error.",,,,,,,,,,,JDK-8270747,JDK-8270363,,,,,,,,,,,,,,,,,,,,JDK-8252657,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,"0|i2teh7:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2021-07-11 04:05;roboduke;Changeset: 3d82b0e6
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2021-07-11 11:03:35 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/3d82b0e634583f4bc01ceece9dd82fc00fd6f9c3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun/tools/jhsdb/JShellHeapDumpTest.java fails with RuntimeException 'JShellToolProvider' missing from stdout/stderr,JDK-8269556,5052908,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,lmesnik,lmesnik,2021-06-28 18:00,2022-08-01 01:49,2023-10-01 09:57,2021-12-13 11:03,17,18,19,,,,,19,hotspot,,0,atr,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,redhat-interest,testbug,,,,,,,,,,,,"Test sun/tools/jhsdb/JShellHeapDumpTest.java still fails with RuntimeException 'JShellToolProvider' missing from stdout/stderr

The log is:

Starting Jshell
[JShell]:c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\windows-x64-debug.jdk\\jdk-17\\fastdebug\\bin\\jshell.exe
[JShell] |  Welcome to JShell -- Version 17-ea
[JShell] |  For an introduction type: /help intro
Jshell Started in 6294ms
Starting jmap against 3536
[2021-06-22T04:05:55.686558Z] Gathering output for process 9220
[2021-06-22T04:07:41.159886400Z] Waiting for completion for process 9220
[2021-06-22T04:07:41.175476500Z] Waiting for completion finished for process 9220
Output and diagnostic info for process 9220 was saved into 'pid-9220-output.log'
jhsdb jmap stdout:
Attaching to process ID 3536, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 17-ea+26-LTS-2439
heap written to T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\scratch\\0\\jhsdb.jmap.heap.1624334741094.hprof

jhsdb jmap stderr:

###### End of all output:
[2021-06-22T04:07:41.894334400Z] Waiting for completion for process 9220
[2021-06-22T04:07:41.894334400Z] Waiting for completion finished for process 9220
Destroying jshell
Jshell destroyed
Dump file created Tue Jun 22 04:05:56 UTC 2021
SerialNo 14
  java.io.FileInputStream.read0()I (FileInputStream.java:(native method))
  java.io.FileInputStream.read()I (FileInputStream.java:228)
  jdk.internal.org.jline.utils.NonBlockingInputStreamImpl.run()V (NonBlockingInputStreamImpl.java:216)
  jdk.internal.org.jline.utils.NonBlockingInputStreamImpl$$Lambda$529+0x0000000801206b88.run()V (:(unknown))
  java.lang.Thread.run()V (Thread.java:833)
SerialNo 13
  jdk.internal.misc.Unsafe.park(ZJ)V (Unsafe.java:(native method))
  java.util.concurrent.locks.LockSupport.park()V (LockSupport.java:341)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block()Z (AbstractQueuedSynchronizer.java:506)
  java.util.concurrent.ForkJoinPool.unmanagedBlock(Ljava/util/concurrent/ForkJoinPool$ManagedBlocker;)V (ForkJoinPool.java:3463)
  java.util.concurrent.ForkJoinPool.managedBlock(Ljava/util/concurrent/ForkJoinPool$ManagedBlocker;)V (ForkJoinPool.java:3434)
  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await()V (AbstractQueuedSynchronizer.java:1623)
  java.util.concurrent.LinkedBlockingQueue.take()Ljava/lang/Object; (LinkedBlockingQueue.java:435)
  java.util.concurrent.ThreadPoolExecutor.getTask()Ljava/lang/Runnable; (ThreadPoolExecutor.java:1062)
  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V (ThreadPoolExecutor.java:1122)
  java.util.concurrent.ThreadPoolExecutor$Worker.run()V (ThreadPoolExecutor.java:635)
  java.lang.Thread.run()V (Thread.java:833)
SerialNo 12
  sun.nio.ch.SocketDispatcher.read0(Ljava/io/FileDescriptor;JI)I (SocketDispatcher.java:(native method))
  sun.nio.ch.SocketDispatcher.read(Ljava/io/FileDescriptor;JI)I (SocketDispatcher.java:46)
  sun.nio.ch.NioSocketImpl.tryRead(Ljava/io/FileDescriptor;[BII)I (NioSocketImpl.java:261)
  sun.nio.ch.NioSocketImpl.implRead([BII)I (NioSocketImpl.java:312)
  sun.nio.ch.NioSocketImpl.read([BII)I (NioSocketImpl.java:350)
  sun.nio.ch.NioSocketImpl$1.read([BII)I (NioSocketImpl.java:803)
  java.net.Socket$SocketInputStream.read([BII)I (Socket.java:966)
  java.net.Socket$SocketInputStream.read()I (Socket.java:961)
  java.io.FilterInputStream.read()I (FilterInputStream.java:82)
  jdk.jshell.execution.DemultiplexInput.run()V (DemultiplexInput.java:58)
SerialNo 11
  java.lang.Object.wait(J)V (Object.java:(native method))
  java.lang.Object.wait()V (Object.java:338)
  com.sun.tools.jdi.EventQueueImpl.removeUnfiltered(J)Lcom/sun/tools/jdi/EventSetImpl; (EventQueueImpl.java:190)
  com.sun.tools.jdi.EventQueueImpl.remove(J)Lcom/sun/jdi/event/EventSet; (EventQueueImpl.java:97)
  com.sun.tools.jdi.EventQueueImpl.remove()Lcom/sun/jdi/event/EventSet; (EventQueueImpl.java:83)
  jdk.jshell.execution.JdiEventHandler.run()V (JdiEventHandler.java:79)
  java.lang.Thread.run()V (Thread.java:833)
SerialNo 10
  sun.nio.ch.SocketDispatcher.read0(Ljava/io/FileDescriptor;JI)I (SocketDispatcher.java:(native method))
  sun.nio.ch.SocketDispatcher.read(Ljava/io/FileDescriptor;JI)I (SocketDispatcher.java:46)
  sun.nio.ch.NioSocketImpl.tryRead(Ljava/io/FileDescriptor;[BII)I (NioSocketImpl.java:261)
  sun.nio.ch.NioSocketImpl.implRead([BII)I (NioSocketImpl.java:312)
  sun.nio.ch.NioSocketImpl.read([BII)I (NioSocketImpl.java:350)
  sun.nio.ch.NioSocketImpl$1.read([BII)I (NioSocketImpl.java:803)
  java.net.Socket$SocketInputStream.read([BII)I (Socket.java:966)
  java.net.Socket$SocketInputStream.read()I (Socket.java:961)
  com.sun.tools.jdi.SocketConnection.readPacket()[B (SocketConnection.java:82)
  com.sun.tools.jdi.TargetVM.run()V (TargetVM.java:124)
  java.lang.Thread.run()V (Thread.java:833)
SerialNo 9
  java.lang.Object.wait(J)V (Object.java:(native method))
  java.lang.Object.wait()V (Object.java:338)
  com.sun.tools.jdi.EventQueueImpl.removeUnfiltered(J)Lcom/sun/tools/jdi/EventSetImpl; (EventQueueImpl.java:190)
  com.sun.tools.jdi.EventQueueImpl.removeInternal()Lcom/sun/jdi/event/EventSet; (EventQueueImpl.java:125)
  com.sun.tools.jdi.InternalEventHandler.run()V (InternalEventHandler.java:61)
  java.lang.Thread.run()V (Thread.java:833)
SerialNo 8
  java.lang.Object.wait(J)V (Object.java:(native method))
  java.lang.ref.ReferenceQueue.remove(J)Ljava/lang/ref/Reference; (ReferenceQueue.java:155)
  jdk.internal.ref.CleanerImpl.run()V (CleanerImpl.java:140)
  java.lang.Thread.run()V (Thread.java:833)
  jdk.internal.misc.InnocuousThread.run()V (InnocuousThread.java:162)
SerialNo 7
SerialNo 6
SerialNo 5
SerialNo 4
  java.lang.Object.wait(J)V (Object.java:(native method))
  java.lang.ref.ReferenceQueue.remove(J)Ljava/lang/ref/Reference; (ReferenceQueue.java:155)
  java.lang.ref.ReferenceQueue.remove()Ljava/lang/ref/Reference; (ReferenceQueue.java:176)
  java.lang.ref.Finalizer$FinalizerThread.run()V (Finalizer.java:172)
SerialNo 3
  java.lang.ref.Reference.waitForReferencePendingList()V (Reference.java:(native method))
  java.lang.ref.Reference.processPendingReferences()V (Reference.java:253)
  java.lang.ref.Reference$ReferenceHandler.run()V (Reference.java:215)
SerialNo 2
SerialNo 1

----------System.err:(18/1331)----------
java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'JShellToolProvider' missing from stdout/stderr
	at JShellHeapDumpTest.printStackTraces(JShellHeapDumpTest.java:110)
	at JShellHeapDumpTest.testHeapDump(JShellHeapDumpTest.java:127)
	at JShellHeapDumpTest.main(JShellHeapDumpTest.java:169)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.RuntimeException: 'JShellToolProvider' missing from stdout/stderr
	at JShellHeapDumpTest.printStackTraces(JShellHeapDumpTest.java:107)
	... 8 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'JShellToolProvider' missing from stdout/stderr
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'JShellToolProvider' missing from stdout/stderr
----------rerun:(49/5757)*----------
cd 'T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\scratch\\0' && \\
JDK8_HOME='c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk\\16\\36\\bundles\\windows-x64\\jdk-16_windows-x64_bin.zip\\jdk-16' \\
JIB_DATA_DIR=C:/ade/mesos/work_dir/jib-master \\
JIB_HOME='c:\\ade\\mesos\\work_dir\\jib-master\\install\\com\\oracle\\java\\jib\\jib\\3.0-SNAPSHOT\\jib-3.0-20210618.184637-471-distribution.zip\\jib-3.0-SNAPSHOT-distribution' \\
JTREG_EXTRA_PROBLEM_LISTS=ProblemList-Xcomp.txt \\
JTREG_KEYWORDS='""!jfr & !headful""' \\
JTREG_TIMEOUT_FACTOR=10 \\
JTREG_VERBOSE=fail,error,time \\
PATH='C:\\ade\\mesos\\work_dir\\jib-master\\install\\jpg\\infra\\builddeps\\wix\\3.11.1+1.0\\wix-3.11.1+1.0.zip;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\bin;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jpg\\infra\\builddeps\\gnumake-cygwin_x64\\4.0+1.0\\gnumake-cygwin_x64-4.0+1.0.tar.gz\\cygwin\\bin;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk\\16\\36\\bundles\\windows-x64\\jdk-16_windows-x64_bin.zip\\jdk-16\\bin;C:\\cygwin\\usr\\local\\bin;C:\\cygwin\\bin;C:\\cygwin\\bin;C:\\cygwin\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0;C:\\WINDOWS\\System32\\OpenSSH;C:\\cygwin\\bin;C:\\Users\\cyg_server\\AppData\\Local\\Microsoft\\WindowsApps' \\
SystemDrive=C: \\
SystemRoot='C:\\WINDOWS' \\
TEMP='C:\\cygwin\\tmp' \\
TEST_IMAGE_DIR='c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\windows-x64-debug.test' \\
TMP='C:\\cygwin\\tmp' \\
TZ=Etc/GMT \\
_NT_SYMBOL_PATH=' c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\windows-x64-debug.jdk_symbols\\jdk-17\\fastdebug\\bin;c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\windows-x64-debug.jdk_symbols\\jdk-17\\fastdebug\\bin\\server' \\
windir='C:\\WINDOWS' \\
CLASSPATH='T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\0\\sun\\tools\\jhsdb\\JShellHeapDumpTest.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\src.full\\open\\test\\jdk\\sun\\tools\\jhsdb;T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\0\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\src.full\\open\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\javatest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6\\1\\bundles\\jtreg-6+1.zip\\jtreg\\lib\\jtreg.jar' \\
    'c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\windows-x64-debug.jdk\\jdk-17\\fastdebug\\bin\\java' \\
        -Dtest.vm.opts='-Xmx768m -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=t:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\tmp -ea -esa' \\
        -Dtest.tool.vm.opts='-J-Xmx768m -J-XX:MaxRAMPercentage=4.16667 -J-Djava.io.tmpdir=t:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\tmp -J-ea -J-esa' \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts='-XX:+CreateCoredumpOnCrash -XX:+IgnoreUnrecognizedVMOptions -XX:+UseParallelGC -Xcomp -XX:-TieredCompilation' \\
        -Dtest.jdk='c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\windows-x64-debug.jdk\\jdk-17\\fastdebug' \\
        -Dcompile.jdk='c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\windows-x64-debug.jdk\\jdk-17\\fastdebug' \\
        -Dtest.timeout.factor=10.0 \\
        -Dtest.nativepath='c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\windows-x64-debug.test\\jdk\\jtreg\\native' \\
        -Dtest.root='C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\src.full\\open\\test\\jdk' \\
        -Dtest.name=sun/tools/jhsdb/JShellHeapDumpTest.java \\
        -Dtest.file='C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\src.full\\open\\test\\jdk\\sun\\tools\\jhsdb\\JShellHeapDumpTest.java' \\
        -Dtest.src='C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\src.full\\open\\test\\jdk\\sun\\tools\\jhsdb' \\
        -Dtest.src.path='C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\src.full\\open\\test\\jdk\\sun\\tools\\jhsdb;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\src.full\\open\\test\\lib' \\
        -Dtest.classes='T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\0\\sun\\tools\\jhsdb\\JShellHeapDumpTest.d' \\
        -Dtest.class.path='T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\0\\sun\\tools\\jhsdb\\JShellHeapDumpTest.d;T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\0\\test\\lib' \\
        -Dtest.class.path.prefix='T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\0\\sun\\tools\\jhsdb\\JShellHeapDumpTest.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\src.full\\open\\test\\jdk\\sun\\tools\\jhsdb;T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\classes\\0\\test\\lib' \\
        -Dtest.modules='jdk.hotspot.agent java.management' \\
        --add-modules jdk.hotspot.agent,java.management \\
        -Xmx768m \\
        -XX:MaxRAMPercentage=4.16667 \\
        '-Djava.io.tmpdir=t:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\tmp' \\
        -ea \\
        -esa \\
        -XX:+CreateCoredumpOnCrash \\
        -XX:+IgnoreUnrecognizedVMOptions \\
        -XX:+UseParallelGC \\
        -Xcomp \\
        -XX:-TieredCompilation \\
        '-Djava.library.path=c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-17+26-2439\\windows-x64-debug.test\\jdk\\jtreg\\native' \\
        com.sun.javatest.regtest.agent.MainWrapper 'T:\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_svc\\sun\\tools\\jhsdb\\JShellHeapDumpTest.d\\main.0.jta'
result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'JShellToolProvider' missing from stdout/stderr


test result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Test ERROR java.lang.RuntimeException: 'JShellToolProvider' missing from stdout/stderr",,,,,,,,,,,JDK-8291611,JDK-8291019,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8228625,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tegr:",9223372036854775807,b02,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-06-29 11:37;cjplummer;The main thread is missing from the stack dump. This is the same issue we saw with JDK-8228625. In that case the stack dump was being requested before the main thread could start up. It was fixed by first waiting for the jshell prompt, and then waiting another 2 seconds. I think the issue in this CR is that waiting 2 seconds isn't always enough to get the main thread fully started and blocked waiting for input. It is important that it is blocked, because on rare occasions SA cannot get the stack trace for an active thread. I looked at a few passing test cases. Most of them have the following stack trace for the main thread:

  java.lang.Object.wait(J)V (Object.java:(native method))
  jdk.internal.org.jline.utils.NonBlockingInputStreamImpl.read(JZ)I (NonBlockingInputStreamImpl.java:139)
  jdk.internal.org.jline.terminal.impl.DumbTerminal$1.read(JZ)I (DumbTerminal.java:49)
  jdk.internal.org.jline.utils.NonBlockingInputStream.read(J)I (NonBlockingInputStream.java:62)
  jdk.internal.org.jline.utils.NonBlocking$NonBlockingInputStreamReader.read(JZ)I (NonBlocking.java:168)
  jdk.internal.org.jline.utils.NonBlockingReader.read(J)I (NonBlockingReader.java:57)
  jdk.internal.org.jline.keymap.BindingReader.readCharacter()I (BindingReader.java:160)
  jdk.internal.org.jline.keymap.BindingReader.readBinding(Ljdk/internal/org/jline/keymap/KeyMap;Ljdk/internal/org/jline/keymap/KeyMap;Z)Ljava/lang/Object; (BindingReader.java:110)
  jdk.internal.org.jline.keymap.BindingReader.readBinding(Ljdk/internal/org/jline/keymap/KeyMap;Ljdk/internal/org/jline/keymap/KeyMap;)Ljava/lang/Object; (BindingReader.java:61)
  jdk.internal.org.jline.reader.impl.LineReaderImpl.doReadBinding(Ljdk/internal/org/jline/keymap/KeyMap;Ljdk/internal/org/jline/keymap/KeyMap;)Ljava/lang/Object; (LineReaderImpl.java:913)
  jdk.internal.org.jline.reader.impl.LineReaderImpl.readBinding(Ljdk/internal/org/jline/keymap/KeyMap;Ljdk/internal/org/jline/keymap/KeyMap;)Ljdk/internal/org/jline/reader/Binding; (LineReaderImpl.java:946)
  jdk.internal.jshell.tool.ConsoleIOContext$2.readBinding(Ljdk/internal/org/jline/keymap/KeyMap;Ljdk/internal/org/jline/keymap/KeyMap;)Ljdk/internal/org/jline/reader/Binding; (ConsoleIOContext.java:172)
  jdk.internal.org.jline.reader.impl.LineReaderImpl.readLine(Ljava/lang/String;Ljava/lang/String;Ljdk/internal/org/jline/reader/MaskingCallback;Ljava/lang/String;)Ljava/lang/String; (LineReaderImpl.java:637)
  jdk.internal.org.jline.reader.impl.LineReaderImpl.readLine(Ljava/lang/String;)Ljava/lang/String; (LineReaderImpl.java:454)
  jdk.internal.jshell.tool.ConsoleIOContext.readLine(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Ljava/lang/String; (ConsoleIOContext.java:248)
  jdk.internal.jshell.tool.JShellTool.getInput(Ljava/lang/String;)Ljava/lang/String; (JShellTool.java:1275)
  jdk.internal.jshell.tool.JShellTool.run(Ljdk/internal/jshell/tool/IOContext;)Z (JShellTool.java:1209)
  jdk.internal.jshell.tool.JShellTool.start([Ljava/lang/String;)I (JShellTool.java:995)
  jdk.internal.jshell.tool.JShellToolBuilder.start([Ljava/lang/String;)I (JShellToolBuilder.java:261)
  jdk.internal.jshell.tool.JShellToolProvider.main([Ljava/lang/String;)V (JShellToolProvider.java:120)

However, I did spot one that looked like:

  java.lang.invoke.LambdaProxyClassArchive.find(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;Z[Ljava/lang/Class;[Ljava/lang/invoke/MethodType;)Ljava/lang/Class; (LambdaProxyClassArchive.java:112)
  java.lang.invoke.InnerClassLambdaMetafactory.spinInnerClass()Ljava/lang/Class; (InnerClassLambdaMetafactory.java:304)
  java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite()Ljava/lang/invoke/CallSite; (InnerClassLambdaMetafactory.java:228)
  java.lang.invoke.LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; (LambdaMetafactory.java:341)
  java.lang.invoke.LambdaForm$DMH+0x0000000801108000.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; (LambdaForm$DMH:(unknown))
  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; (Invokers$Holder:(unknown))
  java.lang.invoke.BootstrapMethodInvoker.invoke(Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object; (BootstrapMethodInvoker.java:134)
  java.lang.invoke.CallSite.makeSite(Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/invoke/CallSite; (CallSite.java:315)
  java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName; (MethodHandleNatives.java:281)
  java.lang.invoke.MethodHandleNatives.linkCallSite(Ljava/lang/Object;ILjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName; (MethodHandleNatives.java:271)
  jdk.internal.jshell.tool.ConsoleIOContext.<init>(Ljdk/internal/jshell/tool/JShellTool;Ljava/io/InputStream;Ljava/io/PrintStream;Z)V (ConsoleIOContext.java:217)
  jdk.internal.jshell.tool.JShellTool.start([Ljava/lang/String;)I (JShellTool.java:982)
  jdk.internal.jshell.tool.JShellToolBuilder.start([Ljava/lang/String;)I (JShellToolBuilder.java:261)
  jdk.internal.jshell.tool.JShellToolProvider.main([Ljava/lang/String;)V (JShellToolProvider.java:120)

So in this case the main thread is still starting up. Since we got the stack trace, the test passed, but when getting the stack trace of an active method like this, sometimes SA will fail, and then this test will fail.

I think the fix is to just add a longer delay to the startup. While working on the fix, I'll temporarily add a check for NonBlockingInputStreamImpl.read just to make sure we are consistently waiting long enough.;;;","2021-12-06 08:20;cjplummer;In the previous comment I show how once the main thread has stabilized, it should be blocked on java.lang.Object.wait(). I thought this wait was untimed, but it is timed for 100ms. That means every 100ms this thread wakes up for a bit before waiting again. When a thread is awak, it's possible that there might be times where SA cannot get its stack trace (this is always true of active threads, especially when calling out to native). So that means no matter how long the test delays doing the heap dump (which is how the stack trace is produced), it still might not be able to get the stack trace of the main thread, thus reproducing this CR. I showed that it seems to be failing just as much when delaying 20 seconds as it does with the current delay of 2 seconds, although fails very rarely, and only when adding an extra check for NonBlockingInputStreamImpl.read.

I think the simplest fix here is to just retry the heap dump after one failure. This failure is so rare, that should be enough to make it extremely unlikely that we ever see it again.

;;;","2021-12-13 11:03;roboduke;Changeset: db502d30
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-12-13 19:02:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/db502d30a42847f69273f48378f230d9d55eb8d6
;;;","2022-07-29 08:10;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed. ;;;","2022-07-29 08:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/607
Date: 2022-07-29 15:14:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The warning for System::setSecurityManager should only appear once for each caller,JDK-8269543,5052894,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,weijun,weijun,2021-06-28 14:02,2021-07-15 10:29,2023-10-01 09:57,2021-07-02 07:33,,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,If a program calls System::setSecurityManager multiple times the exact same warning lines appear multiple times. This could easily flood the stderr.,,,,,,,,,,,JDK-8270704,JDK-8269834,,,,,,,,,,,,,,,,,,,,JDK-8268349,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tedn:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-07-02 07:33;roboduke;Changeset: c4ea13ed
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2021-07-02 14:31:50 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/c4ea13edd036bd6aeb213bb5391dd374d283d382
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDWP: EnableCollection support is no longer spec compliant after JDK-8255987 ,JDK-8269542,5052893,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2021-06-28 13:19,2022-08-12 15:59,2023-10-01 09:57,2022-01-25 11:29,16,17,18,,,,,19,core-svc,,0,jdwp,noreg-hard,,,,,,,,,,,,,,,,"The JDWP spec mentions nothing about DisableCollection and EnableCollection tracking the depth or nesting of the commands. This means that EnableCollection should enable collection no matter how many DisableCollection commands were done before it. This is how the debug agent used to work before JDK-8255987. Now the commands' nesting level is tracked, meaning that if there are two DisableCollection commands, you need two EnableCollection commands to re-enable collection. 

Another issue is that support for DisableCollection/EnableCollection nesting was intermixed with the support for having VM.Suspend disable collection on all objects (which was the main purpose of JDK-8255987). As a result, if you do a VM.Suspend and then do a DisableCollection on an ObjectReference, that object can now be collected, even though the spec says it should not be during a VM.Suspend.

To fix both of these issues, node->strongCount should go back to being a boolean (node->isStrong). Also, separate flags should be maintained to indicate if the reference is strong due to a DisableCollection and/or due to VM.Suspend. We need a flag for each, because it's possible that both can be true at the same time. When node->isStrong is true, if there is an EnableCollection it only gets set false if there is no current VM.Suspend. Likewise was if VM.Resume is done, it only gets set false if there is no outstanding DisableCollection.

There should be no need for maintaining a count anymore since we aren't suppose to for DisableCollection/EnableCollection, and there is no need to for VM.Suspend/Resume, since it only calls commonRef_pinAll() code when the suspendAllCount is changed to/from 0.

Please also note JDK-8269232, which is also introduced by this nesting level counting, but is being fixed in more direct manner to keep the changes simple. However, any fix for this CR will end up replacing the changes for JDK-8269232.

The fix for this issue will also fix JDK-8258071.",,,,,,,,,,,JDK-8292310,,,,,,,,,,,,,,,,,,,,,JDK-8258071,JDK-8255987,JDK-8269232,,,,,,,,,,,,,,,,,,,,,,,16,,,,,,"0|i2tedf:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-01-18 15:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7134
Date: 2022-01-18 20:25:41 +0000;;;","2022-01-25 11:29;roboduke;Changeset: 841eae6f
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-01-25 19:26:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/841eae6f527c00115e0455c4e04f042c28a014bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StackOverflowError when pressing F10 within SpinnerSkin,JDK-8269538,5052707,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aghaisas,webbuggrp,webbuggrp,2021-06-25 07:31,2021-10-22 00:44,2023-10-01 09:57,2021-09-23 04:13,8,,,,,,,8u321,javafx,,0,11-na,8bpr-critical-approved,additional-information-received,bugdb_33278682,dcspn,openjfx-na,reproducer-yes,sn_101,sn_102,Spinner,webbug,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Exception in thread ""JavaFX Application Thread"" java.lang.StackOverflowError
        at com.sun.javafx.event.EventHandlerManager.dispatchCapturingEvent(EventHandlerManager.java:217)
        at com.sun.javafx.event.EventHandlerManager.dispatchCapturingEvent(EventHandlerManager.java:180)
        at com.sun.javafx.event.CompositeEventDispatcher.dispatchCapturingEvent(CompositeEventDispatcher.java:43)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:52)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49)
        at javafx.event.Event.fireEvent(Event.java:198)
        at javafx.scene.Node.fireEvent(Node.java:8411)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.forwardToParent(TextInputControlBehavior.java:432)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.callAction(TextInputControlBehavior.java:185)
        at com.sun.javafx.scene.control.behavior.BehaviorBase.callActionForEvent(BehaviorBase.java:218)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.callActionForEvent(TextInputControlBehavior.java:127)
        at com.sun.javafx.scene.control.behavior.BehaviorBase.lambda$new$0(BehaviorBase.java:135)
        at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:218)
        at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)
        at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238)
        at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
        at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49)
        at javafx.event.Event.fireEvent(Event.java:198)
        at javafx.scene.Node.fireEvent(Node.java:8411)
        at com.sun.javafx.scene.control.skin.SpinnerSkin.lambda$new$6(SpinnerSkin.java:151)
        at com.sun.javafx.event.CompositeEventHandler$NormalEventFilterRecord.handleCapturingEvent(CompositeEventHandler.java:282)
        at com.sun.javafx.event.CompositeEventHandler.dispatchCapturingEvent(CompositeEventHandler.java:98)
        at com.sun.javafx.event.EventHandlerManager.dispatchCapturingEvent(EventHandlerManager.java:223)
        at com.sun.javafx.event.EventHandlerManager.dispatchCapturingEvent(EventHandlerManager.java:180)
        at com.sun.javafx.event.CompositeEventDispatcher.dispatchCapturingEvent(CompositeEventDispatcher.java:43)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:52)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49)
        at javafx.event.Event.fireEvent(Event.java:198)
        at javafx.scene.Node.fireEvent(Node.java:8411)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.forwardToParent(TextInputControlBehavior.java:432)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.callAction(TextInputControlBehavior.java:185)
        at com.sun.javafx.scene.control.behavior.BehaviorBase.callActionForEvent(BehaviorBase.java:218)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.callActionForEvent(TextInputControlBehavior.java:127)
        at com.sun.javafx.scene.control.behavior.BehaviorBase.lambda$new$0(BehaviorBase.java:135)
        at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:218)
        at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)
        at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238)
        at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
        at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49)
        at javafx.event.Event.fireEvent(Event.java:198)
        at javafx.scene.Node.fireEvent(Node.java:8411)
        at com.sun.javafx.scene.control.skin.SpinnerSkin.lambda$new$6(SpinnerSkin.java:151)
        at com.sun.javafx.event.CompositeEventHandler$NormalEventFilterRecord.handleCapturingEvent(CompositeEventHandler.java:282)
        at com.sun.javafx.event.CompositeEventHandler.dispatchCapturingEvent(CompositeEventHandler.java:98)
        at com.sun.javafx.event.EventHandlerManager.dispatchCapturingEvent(EventHandlerManager.java:223)
        at com.sun.javafx.event.EventHandlerManager.dispatchCapturingEvent(EventHandlerManager.java:180)
        at com.sun.javafx.event.CompositeEventDispatcher.dispatchCapturingEvent(CompositeEventDispatcher.java:43)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:52)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49)
        at javafx.event.Event.fireEvent(Event.java:198)
        at javafx.scene.Node.fireEvent(Node.java:8411)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.forwardToParent(TextInputControlBehavior.java:432)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.callAction(TextInputControlBehavior.java:185)
        at com.sun.javafx.scene.control.behavior.BehaviorBase.callActionForEvent(BehaviorBase.java:218)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.callActionForEvent(TextInputControlBehavior.java:127)
        at com.sun.javafx.scene.control.behavior.BehaviorBase.lambda$new$0(BehaviorBase.java:135)
        at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:218)
        at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)
        at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238)
        at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
        at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49)
        at javafx.event.Event.fireEvent(Event.java:198)
        at javafx.scene.Node.fireEvent(Node.java:8411)
        at com.sun.javafx.scene.control.skin.SpinnerSkin.lambda$new$6(SpinnerSkin.java:151)
        at com.sun.javafx.event.CompositeEventHandler$NormalEventFilterRecord.handleCapturingEvent(CompositeEventHandler.java:282)
        at com.sun.javafx.event.CompositeEventHandler.dispatchCapturingEvent(CompositeEventHandler.java:98)
        at com.sun.javafx.event.EventHandlerManager.dispatchCapturingEvent(EventHandlerManager.java:223)
        at com.sun.javafx.event.EventHandlerManager.dispatchCapturingEvent(EventHandlerManager.java:180)
        at com.sun.javafx.event.CompositeEventDispatcher.dispatchCapturingEvent(CompositeEventDispatcher.java:43)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:52)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49)
        at javafx.event.Event.fireEvent(Event.java:198)
        at javafx.scene.Node.fireEvent(Node.java:8411)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.forwardToParent(TextInputControlBehavior.java:432)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.callAction(TextInputControlBehavior.java:185)
        at com.sun.javafx.scene.control.behavior.BehaviorBase.callActionForEvent(BehaviorBase.java:218)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.callActionForEvent(TextInputControlBehavior.java:127)
        at com.sun.javafx.scene.control.behavior.BehaviorBase.lambda$new$0(BehaviorBase.java:135)
        at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:218)
        at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)
        at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238)
        at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
        at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49)
        at javafx.event.Event.fireEvent(Event.java:198)
        at javafx.scene.Node.fireEvent(Node.java:8411)
        at com.sun.javafx.scene.control.skin.SpinnerSkin.lambda$new$6(SpinnerSkin.java:151)
        at com.sun.javafx.event.CompositeEventHandler$NormalEventFilterRecord.handleCapturingEvent(CompositeEventHandler.java:282)
        at com.sun.javafx.event.CompositeEventHandler.dispatchCapturingEvent(CompositeEventHandler.java:98)
        at com.sun.javafx.event.EventHandlerManager.dispatchCapturingEvent(EventHandlerManager.java:223)
        at com.sun.javafx.event.EventHandlerManager.dispatchCapturingEvent(EventHandlerManager.java:180)
        at com.sun.javafx.event.CompositeEventDispatcher.dispatchCapturingEvent(CompositeEventDispatcher.java:43)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:52)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49)
        at javafx.event.Event.fireEvent(Event.java:198)
        at javafx.scene.Node.fireEvent(Node.java:8411)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.forwardToParent(TextInputControlBehavior.java:432)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.callAction(TextInputControlBehavior.java:185)
        at com.sun.javafx.scene.control.behavior.BehaviorBase.callActionForEvent(BehaviorBase.java:218)
        at com.sun.javafx.scene.control.behavior.TextInputControlBehavior.callActionForEvent(TextInputControlBehavior.java:127)
        at com.sun.javafx.scene.control.behavior.BehaviorBase.lambda$new$0(BehaviorBase.java:135)
        at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:218)
        at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)
        at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238)
        at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
        at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49)
        at javafx.event.Event.fireEvent(Event.java:198)
        at javafx.scene.Node.fireEvent(Node.java:8411)
        at com.sun.javafx.scene.control.skin.SpinnerSkin.lambda$new$6(SpinnerSkin.java:151)


FREQUENCY : always


",,,,,,,,,,,JDK-8274802,,,,,,,,,,,,,,,,,,JDK-8273008,,,,,,,,JDK-8274577,,,,,,"2021-07-05 20:51;pnarayanaswa;TestCase.zip;https://bugs.openjdk.org/secure/attachment/95371/TestCase.zip",,,,,,generic,,,,,,,,,,generic,,,,"0|i2td83:",9223372036854775807,b01,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-06-28 11:12;pnarayanaswa;There is not enough information including clear steps/ test case to evaluate.
Writing back to the submitter requesting additional information, testcase/reproducible steps/Scenario.;;;","2021-07-05 20:54;pnarayanaswa;Checked with attached test case in Windows 10, Issue is reproducible, only in 8 pool
Test Result:
=========
openjfx11: Pass
openjfx16: Pass
openjfx17ea: Pass
8u291: Fail
8u40: Fail;;;","2021-07-06 09:33;kcr;I can easily reproduce this bug on Windows with 8u291. I didn't try other platforms, but it looks to be platform-independent.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix verifier withfield test,JDK-8269536,5052887,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,hseigel,hseigel,2021-06-28 10:58,2021-07-12 10:35,2023-10-01 09:57,2021-07-01 05:24,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lworld,noreg-self,,,,,,,,,,,,,,,,Cleanup test runtime/valhalla/inlinetypes/verifier/VerifierInlineTypes.java by removing obsolete tests and getting relevant tests to pass.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tec3:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/ParallelLoad/ParallelSuperTest.java timeout,JDK-8269530,5052874,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pchilanomate,pchilanomate,pchilanomate,2021-06-28 08:47,2021-07-06 13:30,2023-10-01 09:57,2021-06-29 07:36,18,,,,,,,18,hotspot,,0,sync,,,,,,,,,,,,,,,,,"Seen in Github actions testing:

https://github.com/pchilano/jdk/runs/2876825042

STDOUT:
Loading Thread #1: Starting...
Loading Thread #1: ClassInLoader
Loading Thread #1: CP1.foo()
Loading Thread #1: loading A extends B
Loading Thread #1: t1 waits parallelCapable loader
Thread 1 was started...
MainThread: t2 waits
Timeout refired 480 times
STDERR:
rerun:
cd /Users/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/scratch/1 && \
HOME=/Users/runner \
JDK8_HOME=/Users/runner/bootjdk/16/Contents/Home \
JTREG_KEYWORDS=!headful \
JTREG_VERBOSE=fail,error,time \
LANG=en_US.UTF-8 \
LC_ALL=C \
LC_CTYPE=en_US.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TEST_IMAGE_DIR=/Users/runner/jdk-macos-x64-debug/jdk-18-internal+0_macos-x64_bin-tests-debug \
CLASSPATH=/Users/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/classes/0/runtime/ParallelLoad/ParallelSuperTest.d:/Users/runner/work/jdk/jdk/test/hotspot/jtreg/runtime/ParallelLoad:/Users/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/classes/0/test/lib:/Users/runner/work/jdk/jdk/test/lib:/Users/runner/jtreg/lib/javatest.jar:/Users/runner/jtreg/lib/jtreg.jar \
    /Users/runner/jdk-macos-x64-debug/jdk-18-internal+0_macos-x64_bin-debug/jdk-18/fastdebug/bin/java \
        -Dtest.vm.opts='-XX:MaxRAMPercentage=12.5 -Djava.io.tmpdir=/Users/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/tmp' \
        -Dtest.tool.vm.opts='-J-XX:MaxRAMPercentage=12.5 -J-Djava.io.tmpdir=/Users/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/tmp' \
        -Dtest.compiler.opts= \
        -Dtest.java.opts=-XX:-CreateCoredumpOnCrash \
        -Dtest.jdk=/Users/runner/jdk-macos-x64-debug/jdk-18-internal+0_macos-x64_bin-debug/jdk-18/fastdebug \
        -Dcompile.jdk=/Users/runner/jdk-macos-x64-debug/jdk-18-internal+0_macos-x64_bin-debug/jdk-18/fastdebug \
        -Dtest.timeout.factor=4.0 \
        -Dtest.nativepath=/Users/runner/jdk-macos-x64-debug/jdk-18-internal+0_macos-x64_bin-tests-debug/hotspot/jtreg/native \
        -Dtest.root=/Users/runner/work/jdk/jdk/test/hotspot/jtreg \
        -Dtest.name=runtime/ParallelLoad/ParallelSuperTest.java \
        -Dtest.file=/Users/runner/work/jdk/jdk/test/hotspot/jtreg/runtime/ParallelLoad/ParallelSuperTest.java \
        -Dtest.src=/Users/runner/work/jdk/jdk/test/hotspot/jtreg/runtime/ParallelLoad \
        -Dtest.src.path=/Users/runner/work/jdk/jdk/test/hotspot/jtreg/runtime/ParallelLoad:/Users/runner/work/jdk/jdk/test/lib \
        -Dtest.classes=/Users/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/classes/0/runtime/ParallelLoad/ParallelSuperTest.d \
        -Dtest.class.path=/Users/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/classes/0/runtime/ParallelLoad/ParallelSuperTest.d:/Users/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/classes/0/test/lib \
        -Dtest.class.path.prefix=/Users/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/classes/0/runtime/ParallelLoad/ParallelSuperTest.d:/Users/runner/work/jdk/jdk/test/hotspot/jtreg/runtime/ParallelLoad:/Users/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/classes/0/test/lib \
        -Dtest.modules='java.base/jdk.internal.org.objectweb.asm java.base/jdk.internal.misc' \
        --add-modules java.base \
        --add-exports java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED \
        --add-exports java.base/jdk.internal.misc=ALL-UNNAMED \
        -XX:MaxRAMPercentage=12.5 \
        -Djava.io.tmpdir=/Users/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/tmp \
        -XX:-CreateCoredumpOnCrash \
        -Djava.library.path=/Users/runner/jdk-macos-x64-debug/jdk-18-internal+0_macos-x64_bin-tests-debug/hotspot/jtreg/native \
        com.sun.javatest.regtest.agent.MainWrapper /Users/runner/work/jdk/jdk/build/run-test-prebuilt/test-support/jtreg_test_hotspot_jtreg_tier1_runtime/runtime/ParallelLoad/ParallelSuperTest.d/main.2.jta -parallel -parallelCapable

TEST RESULT: Error. Program `/Users/runner/jdk-macos-x64-debug/jdk-18-internal+0_macos-x64_bin-debug/jdk-18/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 537247ms).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2te97:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-28 09:00;pchilanomate;The first created ClassLoadingThread can notify the main thread before the latter actually synchronizes on that monitor. If that happens then the main thread will block forever. The issue can be easily reproduced by adding a delay in startLoading() before the main thread tries to synchronize on thread_sync.
Using a semaphore would be simpler to solve this ordering issue.;;;","2021-06-29 07:36;roboduke;Changeset: e238cbd5
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2021-06-29 14:35:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e238cbd596d29d10e45e4bad7a10708c4022097f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/reliability/HangDuringStaticInitialization.java fails in Windows debug build,JDK-8269529,5052873,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2021-06-28 08:13,2021-10-05 04:31,2023-10-01 09:57,2021-06-29 14:02,11,17,18,,,,,17,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,testbug,ursqe-triaged,,,,,,,,,,,,,,"The test javax/swing/reliability/HangDuringStaticInitialization.java fails on a debug build with the following error output:

*********************
AWT Assertion Failure
*********************
::GetDIBits(hBMDC, hBM, 0, 1, 0, gpBitmapInfo, 0)
File 'd:\\path\\jdk\\src\\java.desktop\\windows\\native\\libawt\\windows\\awt_Win32GraphicsDevice.cpp', at line 184
GetLastError() is 57 : The parameter is incorrect.

Do you want to break into the debugger?
*********************

I have found a similar issue, JDK-8266129, which was handled by excluding the test for debug builds.",,,,,,,,,,,JDK-8269647,JDK-8270672,JDK-8270358,JDK-8269739,,,,,,,,,,,,,,,,,,JDK-8270448,JDK-8185862,JDK-8266129,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,"0|i2te8z:",9223372036854775807,b29,,,,,,,,,,,,,"2021-06-29 14:02;roboduke;Changeset: d0420295
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2021-06-29 21:02:06 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/d042029509a8cbdb723f78e2cfee4e2885775814
;;;","2021-07-01 00:08;clanger;Fix request (11u):
Test issue occurs in 11u Windows debug builds as well. So requesting to backport. Patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VectorAPI Long512VectorTest fails on X86 KNL target,JDK-8269528,5052872,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,jbhateja,jbhateja,jbhateja,2021-06-28 08:05,2021-08-06 16:49,2023-10-01 09:57,2021-06-29 19:33,17,18,,,,,,17,hotspot,,0,c2-vector,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,"- Targets support restricted set of AVX512 features (no VL and BW extensions).
- Assertion fails with fast debug build and incorrectness issue with release build.",,,,,,,,,,,JDK-8270675,JDK-8269708,,,,,,,,,,,,,,,,,,,,JDK-8269828,,,,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2te8r:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-06-28 15:02;dlong;ILW = incorrect code, machines with restricted AVX512 features, no workaround = HMH = P1;;;","2021-06-29 19:33;roboduke;Changeset: 90eb1189
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2021-06-30 02:33:01 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/90eb1189aeebbf6a5a285ff88a504c162471d04c
;;;","2021-08-06 16:49;epavlova;vector/Long512VectorTests.java test passed in JDK17 ATR;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock during Volano with JFR,JDK-8269525,5052869,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,ecaspole,ecaspole,2021-06-28 07:29,2021-07-15 10:38,2023-10-01 09:57,2021-07-13 02:43,17,18,,,,,,17,hotspot,,0,deadlock,,,,,,,,,,,,,,,,,"We get a hang/deadlock about 3-4 times in 100 runs while beginning to set up testing for the BM.Standard.A1.160 Ampere Altra CPU shape.

I have been able to repro it both running through aurora and sometimes by hand from a bash shell.",,,,,,,,,,,JDK-8270430,JDK-8270754,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,"0|i2te83:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-06-28 07:30;ecaspole;What I scraped from a gdb session:

(gdb) info threads
8    Thread 0xfffdc539f1e0 (LWP 3463041) ""VM Thread""       0x0000fffe45011da0 in nanosleep () from /lib64/libpthread.so.0
18   Thread 0xfffda119f1e0 (LWP 3463054) ""JFR Recorder Th"" 0x0000fffe4500db04 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0
19   Thread 0xfffd5bfff1e0 (LWP 3463062) ""JFR Periodic Ta"" 0x0000fffe44f1ddf0 in syscall () from /lib64/libc.so.6
20   Thread 0xfffd5bdff1e0 (LWP 3463063) ""JFR Thread Samp"" 0x0000fffe450111b8 in __lll_lock_wait () from /lib64/libpthread.so.0
352  Thread 0xfff8563ff1e0 (LWP 3463793) ""Sender-135""      0x0000fffe4500db04 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0


Thread 8 (Thread 0xfffdc539f1e0 (LWP 3463041)):
#0  0x0000fffe45011da0 in nanosleep () from /lib64/libpthread.so.0
#1  0x0000fffe44787e2c in os::naked_short_sleep(long) () from /path/jdk/lib/server/libjvm.so
#2  0x0000fffe4481a770 in SafepointSynchronize::synchronize_threads(long, int, int*) () from /path/jdk/lib/server/libjvm.so
#3  0x0000fffe4481b75c in SafepointSynchronize::begin() () from /path/jdk/lib/server/libjvm.so
#4  0x0000fffe44982938 in VMThread::inner_execute(VM_Operation*) () from /path/jdk/lib/server/libjvm.so
#5  0x0000fffe44982cb8 in VMThread::run() () from /path/jdk/lib/server/libjvm.so
#6  0x0000fffe4490ac14 in Thread::call_run() () from /path/jdk/lib/server/libjvm.so
#7  0x0000fffe4477f3ec in thread_native_entry(Thread*) () from /path/jdk/lib/server/libjvm.so
#8  0x0000fffe45007868 in start_thread () from /lib64/libpthread.so.0
#9  0x0000fffe44f21bbc in thread_start () from /lib64/libc.so.6

Thread 18 (Thread 0xfffda119f1e0 (LWP 3463054)):
#0  0x0000fffe4500db04 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0
#1  0x0000fffe447897a0 in os::PlatformMonitor::wait(long) () from /path/jdk/lib/server/libjvm.so
#2  0x0000fffe4473f674 in Monitor::wait(long) () from /path/jdk/lib/server/libjvm.so
#3  0x0000fffe4445a2ec in recorderthread_entry(JavaThread*, JavaThread*) () from /path/jdk/lib/server/libjvm.so
#4  0x0000fffe44905e4c in JavaThread::thread_main_inner() () from /path/jdk/lib/server/libjvm.so
#5  0x0000fffe4490ac14 in Thread::call_run() () from /path/jdk/lib/server/libjvm.so
#6  0x0000fffe4477f3ec in thread_native_entry(Thread*) () from /path/jdk/lib/server/libjvm.so
#7  0x0000fffe45007868 in start_thread () from /lib64/libpthread.so.0
#8  0x0000fffe44f21bbc in thread_start () from /lib64/libc.so.6

Thread 17 (Thread 0xfffda243f1e0 (LWP 3463052)):
#0  0x0000fffe44f1ddf0 in syscall () from /lib64/libc.so.6
#1  0x0000fffe44988048 in LinuxWaitBarrier::wait(int) () from /path/jdk/lib/server/libjvm.so
#2  0x0000fffe44819e78 in SafepointSynchronize::block(JavaThread*) () from /path/jdk/lib/server/libjvm.so
#3  0x0000fffe44821110 in SafepointMechanism::process_if_requested_slow(JavaThread*) () from /path/jdk/lib/server/libjvm.so
#4  0x0000fffe4475dee8 in ObjectMonitor::wait(long, bool, JavaThread*) () from /path/jdk/lib/server/libjvm.so
#5  0x0000fffe448c581c in ObjectSynchronizer::wait(Handle, long, JavaThread*) () from /path/jdk/lib/server/libjvm.so
#6  0x0000fffe444ba790 in JVM_MonitorWait () from /path/jdk/lib/server/libjvm.so
#7  0x0000fffe2d34053c in ?? ()
Backtrace stopped: previous frame identical to this frame (corrupt stack?)

Thread 20 (Thread 0xfffd5bdff1e0 (LWP 3463063)):
#0  0x0000fffe450111b8 in __lll_lock_wait () from /lib64/libpthread.so.0
#1  0x0000fffe45009ee0 in pthread_mutex_lock () from /lib64/libpthread.so.0
#2  0x0000fffe4473f3b0 in Mutex::lock() () from /path/jdk/lib/server/libjvm.so
#3  0x0000fffe4446cfb0 in JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**) [clone .constprop.1] () from /path/jdk/lib/server/libjvm.so
#4  0x0000fffe4446f6a8 in JfrThreadSampler::run() () from /path/jdk/lib/server/libjvm.so
#5  0x0000fffe4490ac14 in Thread::call_run() () from /path/jdk/lib/server/libjvm.so
#6  0x0000fffe4477f3ec in thread_native_entry(Thread*) () from /path/jdk/lib/server/libjvm.so
#7  0x0000fffe45007868 in start_thread () from /lib64/libpthread.so.0
#8  0x0000fffe44f21bbc in thread_start () from /lib64/libc.so.6

Thread 352 (Thread 0xfff8563ff1e0 (LWP 3463793)):
#0  0x0000fffe4500db04 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0
#1  0x0000fffe447897a0 in os::PlatformMonitor::wait(long) () from /path/jdk/lib/server/libjvm.so
#2  0x0000fffe4473f5d8 in Monitor::wait_without_safepoint_check(long) () from /path/jdk/lib/server/libjvm.so
#3  0x0000fffe4446c8ac in JfrThreadSampling::on_javathread_suspend(JavaThread*) () from /path/jdk/lib/server/libjvm.so
#4  0x0000fffe44827d50 in SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) () from /path/jdk/lib/server/libjvm.so
#5  0x0000fffe256f3178 in ?? ()
Backtrace stopped: previous frame inner to this frame (corrupt stack?)

;;;","2021-06-29 09:14;ecaspole;I verified this happens in both 17-b28 and with 18-b2.;;;","2021-06-29 19:13;dholmes;What thread is running JfrThreadSampler::on_javathread_suspend?

If it is a JavaThread then that code should not be doing a Monitor::wait_without_safepoint_check with no safepoint check! Otherwise there is another thread of interest that has not been shown.;;;","2021-06-30 10:14;ecaspole;[~dholmes] Yes 

352 Thread 0xfff8563ff1e0 (LWP 3463793) ""Sender-135"" 0x0000fffe4500db04 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0

is a regular java worker thread in Volano.

PS - I can usually repro this in about 4 hours if you can think of other experiments.;;;","2021-06-30 23:44;dholmes;Okay then the JFR code is incorrect - on_javathread_suspend() must not block unless the JavaThread is safepoint safe.

The Java worker thread doing JfrThreadSampling::on_javathread_suspend() is blocked in wait_without_safepoint() check. But the VMThread has the Threads_lock and is trying to take the VM to a safepoint. The thread that will notify() the worker thread is blocked trying to acquire the Threads_lock in JfrThreadSampler::task_stacktrace. So we have a 3 party deadlock.

;;;","2021-06-30 23:53;dholmes;The JfrThreadSampler_lock needs to be _safepoint_check_always;;;","2021-07-05 10:05;mgronlun;Current sampling protocol:

Sampler Thread:

1. Acquire Threads_lock
2. Select thread
3. call thread->set_trace_flag();  // cas _trace_flag into _suspend_flags for the thread to be sampled. For intercepting the thread when it returns from the current safe state, e.g. returning from native to VM or VM to Java.
4. Do sampling
5. call thread->clear_trace_flag(); // clear the _trace_flag in suspend_flags, also via cas
6. if (tl->is_trace_block()) // tl is the JfrThreadLocal structure <<-- load with no synchronizes-with relation
6.1  Acquire JfrSamplerThread_lock
6.2  notify waiters
6.3  Release JfrSamplerThread_lock
7. Release Threads_lock

Samplee Thread:

1. transition from VM back to Java
2. checks _suspend flags, sees _trace_flag signalled
3. calls on_javathread_suspend();
4. call tl->set_trace_block() // tl is the JfrThreadLocal structure; <<-- store with no synchronizes-with relation
5. Acquire JfrSamplerThread_lock
6. check thread->is_trace_suspend()
7. wait for notification by sampler thread
8. calls clear_trace_block()
9. Release JfrSamplerThread_lock

// The protocol has an invariant that the samplee is considered safe from the safepoint perspective because the sampler thread holds the Threads_lock (no safepoint can be pending).

// There is a race here involving tl->is_trace_block(), causing the sampler thread to miss issuing the proper notification to release the samplee before it releases the Threads_lock. The safepoint mechanism then takes the Threads_lock, but the samplee is still in wait() (with no safepoint check), and the sampler thread will not be able to notify it until it re-acquires the Threads_lock. i.e. as part of the next sampling cycle after the pending safepoint (at the earliest, depending on the state of other threads). 

The protocol should be updated:

Sampler Thread:

1. Acquire Threads_lock
2. Select thread
3. call thread->set_trace_flag();  // cas _trace_flag into _suspend_flags for the thread to be sampled. To intercept the thread when it returns from the current safe state, e.g. returning from native to VM or VM to Java.
4. Do sampling
5. call thread->clear_trace_flag(); // clear the _trace_flag in suspend_flags, also via cas, or set it after taking the lock
6. Acquire JfrSamplerThread_lock
6.1. if (tl->is_trace_block()) // tl is JfrThreadLocal structure <<-- inside lock, implicit synchronizes-with relation
6.2  notify waiter // should only ever be one
7. Release JfrSamplerThread_lock
8. Release Threads_lock

Samplee Thread:

1. transition from VM back to Java
2. checks _suspend flags, sees _trace_flag signalled
3. calls on_javathread_suspend()
4. if (!check thread->is_trace_suspend() // _trace_flag
4.1. Acquire JfrSamplerThread_lock
4.2  call set_trace_block() in JfrThreadLocal structure; <<-- inside lock implicit synchronizes-with relation
4.3  wait for notification by sampler thread // a safepoint cannot happen because the sampler thread holds the Threads_lock (hence the thread is considered safe)
4.4  (implicit release of JfrSamplerThread_lock by wait())
4.5  (implicit acquisition of JfrSamplerThread_lock when notified)
4.6  call clear_trace_block()
4.7 Release JfrSamplerThread_lock;;;","2021-07-13 02:42;roboduke;Changeset: 00ef65f3
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-07-13 09:41:56 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/00ef65f34d35bf1a3fa6835cc16f19af40c3c325
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/Safepoint/TestAbortOnVMOperationTimeout.java failed when expecting 'VM operation took too long',JDK-8269523,5052864,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,enikitin,enikitin,2021-06-28 06:46,2022-01-11 04:43,2023-10-01 09:57,2021-07-29 21:04,11.0.4,17,,,,,,18,hotspot,,0,atr,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,redhat-interest,sync,,,,,,,,,,,"Test arguments: '-XX:-CreateCoredumpOnCrash -XX:-TieredCompilation';
Build profile: 'macosx-aarch64'.

The test failed with '-XX:AbortVMOnVMOperationTimeoutDelay=5', the largest value stipulated by the test. A testbug / unexpectedly good performance?

Unfortunately, there is no output file for the last process executed, only the test log is available:

...
Command line: [${WORKDIR}/jib-master/install/jdk-17+26-2439/macosx-aarch64.jdk/jdk-17.jdk/Contents/Home/bin/java -cp $WORKDIR/slaves/$SL1/frameworks/$FW1/executors/$EX1/runs/$RUN1/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/3/runtime/Safepoint/TestAbortOnVMOperationTimeout.d:$WORKDIR/jib-master/install/jdk-17+26-2439/src.full/open/test/hotspot/jtreg/runtime/Safepoint:$WORKDIR/slaves/$SL1/frameworks/$FW1/executors/$EX1/runs/$RUN1/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/3/test/lib:$WORKDIR/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar:$WORKDIR/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar:$WORKDIR/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/junit.jar:$WORKDIR/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/hamcrest.jar:$WORKDIR/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/testng.jar:$WORKDIR/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jcommander.jar:$WORKDIR/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/guice.jar -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnVMOperationTimeout -XX:AbortVMOnVMOperationTimeoutDelay=5 -Xmx256m -XX:+UseSerialGC -XX:-CreateCoredumpOnCrash TestAbortOnVMOperationTimeout foo ]
[2021-06-11T18:07:17.417343Z] Gathering output for process 43060
[2021-06-11T18:07:17.605063Z] Waiting for completion for process 43060
[2021-06-11T18:07:17.605109Z] Waiting for completion finished for process 43060
----------System.err:(19/977)----------
 stdout: [];
 stderr: []
 exitValue = 0

java.lang.RuntimeException: 'VM operation took too long' missing from stdout/stderr

        at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
        at TestAbortOnVMOperationTimeout.testWith(TestAbortOnVMOperationTimeout.java:77)
        at TestAbortOnVMOperationTimeout.main(TestAbortOnVMOperationTimeout.java:57)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,JDK-8279658,JDK-8279845,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271931,JDK-8270189,JDK-8181143,JDK-8271609,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,"0|i2te6z:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-29 11:10;hseigel;ILW = MLM = p4;;;","2021-07-25 15:57;dholmes;I think the analysis in this test about how fast/slow SerialGC may be needs some adjusting. If we call reportDiagnosticSummary so we can see the cases that do abort as expected we can see how long the GC VMOperation is taking, and while many are much much larger than the timeout e.g on macos-x64.

#  fatal error: VM operation took too long: 57 ms (timeout: 5 ms)

some are much shorter e.g on linux-x64.

#  fatal error: VM operation took too long: 2 ms (timeout: 0 ms)

Obviously if the above had been the 5ms timeout case then this test would have failed. It is interesting to see the result of the 1ms and 5ms cases:

#  fatal error: VM operation took too long: 11 ms (timeout: 1 ms)
#  fatal error: VM operation took too long: 12 ms (timeout: 5 ms)

there is obviously a massive variance in execution times possible for SerialGC.

I'm unsure how to try and fix the test - perhaps just delete the 5ms case as it isn't long enough.;;;","2021-07-25 16:41;dholmes;        // These should fail: Serial is not very fast. Traversing 10M objects in 5 ms
        // means less than 0.5 ns per object, which is not doable.
        for (int delay : new int[]{0, 1, 5}) {
            testWith(delay, false);
        }

But the logic does:

            Object[] arr = new Object[10_000_000];
            for (int i = 0; i < arr.length; i++) {
               arr[i] = new Object();
            }

so we will only traverse 10M objects if the GC happens as we near the end of the loop. The actual number of traversals will depend on how soon GC actually triggers. That said you would expect this to be fairly constant/predictable so the large variance in GC VMOp time is not  readily explainable.;;;","2021-07-27 03:12;ayang;> fatal error: VM operation took too long: 2 ms (timeout: 0 ms) 

This statement can be a bit misleading.

Some might interpret it as: the VM operation took 2ms to *complete* and its duration is greater than the timeout (0ms), so a fatal error is reported. However, the correct interpretation is: 2ms has passed since the VM operation started, but it's unknown if that operation is still running or has completed. Nonetheless, a fatal error is inevitable (2ms > 0ms).


Possibly, a preexisting problem regarding the timeout value though:

From `VMThread::create`:

```
    size_t interval = (size_t)AbortVMOnVMOperationTimeoutDelay / 10;
    interval = interval / PeriodicTask::interval_gran * PeriodicTask::interval_gran;
    interval = MAX2<size_t>(interval, PeriodicTask::min_interval);
    interval = MIN2<size_t>(interval, PeriodicTask::max_interval);

    _timeout_task = new VMOperationTimeoutTask(interval);
```

The minimal gap btw two timeout checks is `PeriodicTask::min_interval` (10ms), so it doesn't provide enough precision for timeout below 10ms. Therefore, a VM-op taking 9ms could still go undetected even with a 5ms timeout. (Ofc, this depends on the scheduling.);;;","2021-07-27 05:42;dholmes;[~ayang] yes your analysis is correct - thank you. The timeout mechanism is somewhat crude/inaccurate.

- The TimeoutTask will be executed (modulo scheduling) at most once every 10ms due to the PeriodicTask::min_interval.
- The Timeout task is armed once the VMThread has brought the VM to a safepoint - that takes a snapshot of the current time in nanos.
- The timeout task could execute at any point relative to that arming point, and it will evaluate the current elapsed time since the task was armed. If that is > timeout then we have the fatal error.
- The VMThread will disarm the task once the VMOperation evaluation has completed.

So the VMOp will timeout when two conditions are met:

1. The timeout task is released within the arming window; and
2. The elapsed time exceeds the timeout value.

So yes with a timeout < 10ms we can easily miss that because the task may not be released in the arming window, or may be release before the timeout has elapsed. And the reported time is simply how much time has elapsed since arming, which does not tell you whether the VMop is still running or not.

Perhaps the most interesting thing about this analysis is that when we see something like:

# fatal error: VM operation took too long: 57 ms (timeout: 5 ms)

then it shows the WatcherThread is not getting enough CPU time as the timeout task should have executed at least 5 times during this 57ms interval, but it didn't!
;;;","2021-07-27 06:14;ayang;> The timeout mechanism is somewhat crude/inaccurate. 

Maybe for small timeouts (<10ms), we can ask VM thread to check it instead; somewhere around `disarm()` is called.
 
> it shows the WatcherThread is not getting enough CPU time as the timeout task should have executed at least 5 times during this 57ms interval, but it didn't! 

Indeed; this instance of TimeoutTask misses its deadline by a significant margin (>4x its intended interval). Maybe it's good to have some kind of self-checking within TimeoutTask to detect&report this, as the system is not behaving properly.;;;","2021-07-27 16:31;dholmes;I'm not sure it is worthwhile expending time and effort trying to make the timeout mechanism more precise/accurate. Certainly not as part of this test adjustment.

Also the issue with the WatcherThread may be that its other tasks are taking far too long ...;;;","2021-07-28 02:26;ayang;> I'm not sure it is worthwhile expending time and effort trying to make the timeout mechanism more precise/accurate.

For values of `AbortVMOnVMOperationTimeoutDelay` <10, even if the VM-op takes more than the timeout, the abort can still be non-deterministic due to the low precision & scheduling. I think that's exactly the reason why this test fails from time to time.

> Also the issue with the WatcherThread may be that its other tasks are taking far too long ... 

True; regardless of the root cause, it's still beneficial to report when a task can't carry its work in a timely manner, IMO. Outside of the scope of this JBS ticket, ofc.;;;","2021-07-29 20:56;dholmes;The test is simply exercising the timeout mechanism to show that it is capable of working, it isn't trying to demonstrate that it is a precise or accurate mechanism. We could have defined a dummy VMOp for test purposes that would trigger a given (large) timeout, but instead we tried to use existing GC VMOps with a very short timeout and hope that the VMOp takes longer than that. Given the scheduling granularity this test strategy has been shown to be flawed, but I think restricting to the 0 and 1ms cases will suffice to re-stabilise the test. If necessary in the future we can try a different approach.;;;","2021-07-29 21:04;roboduke;Changeset: 4f42eb66
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-07-30 04:03:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4f42eb6601c3b6011d3c2b30af6b2be264ff7c0e
;;;","2022-01-10 02:27;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
No risk, only a test change.
Clean backport. SAP nightly tests passed.;;;","2022-01-10 02:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/69
Date: 2022-01-10 10:27:45 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/loopopts/TestPartialPeelingSinkNodes.java crashes with -XX:+VerifyGraphEdges,JDK-8269517,5052858,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-06-28 05:30,2022-06-10 02:55,2023-10-01 09:57,2021-06-29 04:19,11,17,18,,,,,17,hotspot,,0,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,tencent-interest,,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007ff0b1b1e806, pid=26531, tid=26547
#
# JRE version: OpenJDK Runtime Environment (18.0) (slowdebug build 18-internal+0-adhoc.jvm.jdk-0628)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 18-internal+0-adhoc.jvm.jdk-0628, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x5b2806]  Unique_Node_List::member(Node*)+0x1c
#

Current CompileTask:
C2:   1473    1    b        compiler.loopopts.TestPartialPeelingSinkNodes::test (172 bytes)

Stack: [0x00007ff03f3fc000,0x00007ff03f4fd000],  sp=0x00007ff03f4f7190,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x5b2806]  Unique_Node_List::member(Node*)+0x1c
V  [libjvm.so+0xf71d4f]  Node::verify_edges(Unique_Node_List&)+0x23
V  [libjvm.so+0x7d4330]  Compile::verify_graph_edges(bool)+0x5e
V  [libjvm.so+0xe14a3c]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x1462
V  [libjvm.so+0x7da0cd]  PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&, LoopOptsMode)+0xf5
V  [libjvm.so+0x7da2be]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x46
V  [libjvm.so+0x7cd2ed]  Compile::optimize_loops(PhaseIterGVN&, LoopOptsMode)+0xf7
V  [libjvm.so+0x7ce1f2]  Compile::Optimize()+0xd62
V  [libjvm.so+0x7c7333]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x13cd
V  [libjvm.so+0x6b7b1a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x144
V  [libjvm.so+0x7e47c7]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x97d
V  [libjvm.so+0x7e32fb]  CompileBroker::compiler_thread_loop()+0x3dd
V  [libjvm.so+0x803935]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x69
V  [libjvm.so+0x1284c83]  JavaThread::thread_main_inner()+0x18b
V  [libjvm.so+0x1284aeb]  JavaThread::run()+0x1e7
V  [libjvm.so+0x1282438]  Thread::call_run()+0x180
V  [libjvm.so+0xfbfc1d]  thread_native_entry(Thread*)+0x18f",,,,,,,,,,,JDK-8269643,JDK-8270667,JDK-8285884,JDK-8288197,,,,,,,,,,,,,,,,,,JDK-8256934,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2te5n:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-28 14:41;dlong;ILW = MMH = P3;;;","2021-06-29 04:19;roboduke;Changeset: 7010dfdf
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-06-29 11:18:23 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/7010dfdffab3582d7f5e935247735dff1b3152e6
;;;","2022-06-09 04:44;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Simple fix for C2, low risk.
Clean backport.
SAP nightly testing passed.;;;","2022-06-09 04:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1139
Date: 2022-06-09 11:45:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clarify the spec wrt `useOldISOCodes` system property,JDK-8269513,5052854,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,amadgundi,amadgundi,2021-06-28 05:15,2021-07-15 10:24,2023-10-01 09:57,2021-06-30 15:12,17,,,,,,,17,core-libs,,0,conformance,noreg-doc,,,,,,,,,,,,,,,,"Hebrew/Indonesian/Yiddish ISO 639 language codes failed to work in backward compatible manner even if system property java.locale.useOldISOCodes sets to true.

Code snippet:
import java.util.Locale;
public class Test1 {
    public static void main(String[] args) {
        System.setProperty(""java.locale.useOldISOCodes"",""true"");
        new Test1().test();
    }
    String languages[] = new String[]{""he"", ""yi"", ""id""};
    String excepted[] = new String[]{""iw"", ""ji"", ""in""};
    private void test() {
        Locale locale = null;
        for (int i = 0; i < languages.length; i++) {
            locale = new Locale(languages[i]);
            if (excepted[i] != null) {
                if (!locale.getLanguage().equals(excepted[i])) {
                    System.out.println(
                            ""getLanguage returned wrong value : ""
                                    + locale.getLanguage()
                                    + "" language = "" + excepted[i]
                    );
                }
            }
        }
    }
} ",,,,,,,,,,,JDK-8270686,JDK-8269719,,,,,,,,,,,,JDK-8269531,,,,,,,,JDK-8267069,JCK-7316162,,,,,,,,,,,,,,,,,,,,,,,b25,17,,,,,,"0|i2te4r:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2021-06-28 07:20;kganapureddy;As per updated spec :
======
""Locale's constructor has always converted three language codes to their earlier, obsoleted forms: he maps to iw, yi maps to ji, and id maps to in. Since Java SE 17, this is no longer the case. Each language maps to its new form; iw maps to he, ji maps to yi, and in maps to id.

For the backward compatible behavior, the system property java.locale.useOldISOCodes reverts the behavior back to prior to Java SE 17 one. If the system property is set to true, those three current language codes are mapped to their backward compatible forms.
=====

As understand, the earlier behavior ( behavior before this CSR) should be honored when the property java.locale.useOldISOCodes set to true.
But the observation is not as per this. 

[~naoto] Please comment on this.;;;","2021-06-28 09:03;naoto;The system property is read at the runtime startup, so later alteration with setProperty() won't work. Will need to clarify it in the spec.;;;","2021-06-30 15:12;roboduke;Changeset: 3e022247
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2021-06-30 22:11:58 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/3e022247d2e80c43393bfdb5888b03210c6975d3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CallerAccessTest fails for non server variant,JDK-8269486,5052826,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-06-28 03:25,2021-07-15 10:24,2023-10-01 09:57,2021-06-30 10:09,17,18,,,,,,17,core-libs,,0,noreg-self,testbug,ursqe-triaged,,,,,,,,,,,,,,,"The test case uses a custom launcher and before launching the JVM, it adds the ""lib"" and ""lib/server"" directories to the environment variable which controls the native library search path.
For non server variants, the second directory is not called ""lib/server"", but ""lib/client"", for instance. The VM fails to start with the following output:

/home/cgo/dev/openjdk/jdk/build/linux-x86_64-client-fastdebug/images/test/jdk/jtreg/native/CallerAccessTest: error while loading shared libraries: libjvm.so: cannot open shared object file: No such file or directory
",,,,,,,,,,,JDK-8270682,JDK-8269715,,,,,,,,,,,,,,,,,,,,JDK-8221530,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tdyj:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2021-06-30 10:09;roboduke;Changeset: 1da5d4bb
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2021-06-30 17:08:36 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/1da5d4bb780fc3ab02aa6cddc243fbf1b079851a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SctpMultiChannel never releases own file descriptor,JDK-8269481,5052819,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,myano,myano,2021-06-28 02:23,2022-04-08 03:44,2023-10-01 09:57,2021-07-07 08:51,17,,,,,,,18,core-libs,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,,,,,,,,,,,,,,,"SctpMultiChannel.open() creates own file descriptor, but it is not released even 
if close() is called. SctpChannel does not occur this problem.

To reproduce, compile and run attached test case.
This test case prints file descriptors using lsof.

Expected Result:
Number of unix socket is 1 or 2

Actual Result:
Number of unix socket is 200 over
",,,,,,,,,,,JDK-8277274,JDK-8277152,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-28 02:18;myano;ESctpMC.java;https://bugs.openjdk.org/secure/attachment/95266/ESctpMC.java",,,,,,generic,,,,,,,,,,linux,,,,"0|i2tdwz:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2021-07-07 08:51;roboduke;Changeset: d1cecaaa
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-07-07 15:49:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d1cecaaa22d551b93074c33209dac7354f4b6932
;;;","2021-11-11 08:24;akasko;Fix request (17u)

Clean backport of the SCTP fix.;;;","2022-04-08 03:44;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: gc/shenandoah/mxbeans tests should be more resilient,JDK-8269478,5052816,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-06-28 02:07,2021-08-24 15:56,2023-10-01 09:57,2021-06-30 06:23,11.0.10,17,18,8-shenandoah,,,,18,hotspot,,0,gc-shenandoah,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,redhat-interest,testbug,,,,,,,,,"After JDK-8259954, some mxbeans tests wait in the effectively infinite loop for the notifications to arrive. If notifications are broken, it would wait forever, and test would timeout. We need to make such failure mode more straightforward.

Plus, with recent improvements to Shenandoah code, on some platforms the pauses are consistently below 1ms, which fails the test that waits for non-zero-ms pauses.",,,,,,,,,,,JDK-8272822,JDK-8272951,JDK-8272895,,,,,,,,,,,,,,,,,,,JDK-8259954,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tdwb:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-30 06:23;roboduke;Changeset: 23d2996f
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-06-30 13:22:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/23d2996fee54afcc386a505a65d3236aab874e9e
;;;","2021-08-19 02:23;shade;Fix Request (17u)

Improves test reliability. Patch applies cleanly. Tests pass.;;;","2021-08-19 02:24;shade;Fix Request (11u)

Same reason as for 17u.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8269388 breaks the build on older GCCs,JDK-8269468,5052806,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,andrew,andrew,2021-06-27 23:23,2021-07-06 15:45,2023-10-01 09:57,2021-06-28 11:52,openjdk8u302,,,,,,,openjdk8u302,infrastructure,,0,jdk8u-critical-request,jdk8u-critical-yes,,,,,,,,,,,,,,,,"cc1plus: error: -Werror=format-overflow: no option -Wformat-overflow
gmake[6]: *** [os_linux.o] Error 1

-Wformat-overflow was not introduced until GCC 7 (https://gcc.gnu.org/gcc-7/changes.html), so we need to guard this flag usage with a version check.
",,,,,,,,,,,JDK-8269965,,,,,,,,,,,,,,,,,,,,,JDK-8269388,,,,,,,,,,,,,,,,,generic,,,,,,,b07,openjdk8u302,,linux,,,,"0|i2tdu3:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-06-28 07:52;andrew;Critical Request [8u]:

Needed to unbreak the build, following inclusion of JDK-8269388.;;;","2021-06-28 11:52;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/rev/26920b304bf9
User:  andrew
Date:  2021-06-28 18:48:21 +0000
;;;","2021-06-28 11:52;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/78dfe32cac58
User:  andrew
Date:  2021-06-28 18:48:38 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rename test/jdk/java/lang/invoke/t8150782 to accessClassAndFindClass,JDK-8269426,5052758,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2021-06-26 11:43,2021-09-30 04:56,2023-10-01 09:57,2021-06-28 12:53,17,,,,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,testbug,testonly,,,,,,,,,,,,,"test/jdk/java/lang/invoke/t8150782 is the only one using that convention.  There are several tests under <bugid> directory.   

The tests under test/jdk/java/lang/invoke/t8150782 are mostly unit tests for Lookup::accessClass and Lookup::findClass.   Suggest to rename the directory to a descriptive name such as accessClassAndFindClass",,,,,,,,,,,JDK-8274565,JDK-8269554,JDK-8269901,JDK-8270665,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tdjf:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2021-06-28 12:53;roboduke;Changeset: 56240690
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2021-06-28 19:52:27 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/56240690f62f9048a45a53525efccffdec235a8d
;;;","2021-09-28 04:10;goetz;Fix request [11u]

I downport this for parity with 11.0.13-oracle.
No risk, only a test change.
Not clean. 
Tests pass.  Nighttests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
2 jdk/jfr/api/consumer/streaming tests failed to attach,JDK-8269425,5052757,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,dcubed,dcubed,2021-06-26 06:41,2022-04-28 06:38,2023-10-01 09:57,2021-12-17 01:51,18,,,,,,,18,hotspot,,0,intermittent,noreg-self,testbug,tier5,,,,,,,,,,,,,,"The following tests failed in the JDK18 CI:

jdk/jfr/api/consumer/streaming/TestJVMExit.java
jdk/jfr/api/consumer/streaming/TestJVMCrash.java

Here's a snippet from the TestJVMExit.java log file:

#section:main
----------messages:(5/346)----------
command: main jdk.jfr.api.consumer.streaming.TestJVMExit
reason: User specified action: run main/othervm jdk.jfr.api.consumer.streaming.TestJVMExit 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,jdk.attach,java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 38.766
----------configuration:(4/112)----------
Boot Layer
  add modules: jdk.jfr jdk.attach java.base 
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(6/4104)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/linux-aarch64-debug.jdk/jdk-18/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/0/jdk/jfr/api/consumer/streaming/TestJVMExit.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/src.full/open/test/jdk/jdk/jfr/api/consumer/streaming:/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/0/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/src.full/open/test/lib:/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/0/test/jdk:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/src.full/open/test/jdk:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -XX:StartFlightRecording:settings=none jdk.jfr.api.consumer.streaming.TestProcess /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/scratch/1/action-1624683921923 ]
[exit-application]:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/linux-aarch64-debug.jdk/jdk-18/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/0/jdk/jfr/api/consumer/streaming/TestJVMExit.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/src.full/open/test/jdk/jdk/jfr/api/consumer/streaming:/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/0/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/src.full/open/test/lib:/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/0/test/jdk:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/src.full/open/test/jdk:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -XX:StartFlightRecording:settings=none jdk.jfr.api.consumer.streaming.TestProcess /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/scratch/1/action-1624683921923
Attach failed: Unable to open socket file /proc/404787/root/tmp/.java_pid404787: target process 404787 doesn't respond within 10500ms or HotSpot VM not loaded
Retrying...
Attach failed: No such process
Retrying...
----------System.err:(15/1105)----------
java.lang.RuntimeException: Process (pid = 404787) is no longer alive, exit value = 131
	at jdk.test.lib.jfr.StreamingUtils.getJfrRepository(StreamingUtils.java:48)
	at jdk.jfr.api.consumer.streaming.TestProcess.getRepository(TestProcess.java:94)
	at jdk.jfr.api.consumer.streaming.TestJVMExit.main(TestJVMExit.java:45)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Process (pid = 404787) is no longer alive, exit value = 131
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Process (pid = 404787) is no longer alive, exit value = 131
----------rerun:(38/7825)*----------

The ""ps"" output captured in the environment artifacts does not list PID 404787.


Here's a snippet from the TestJVMCrash.java log file:

#section:main
----------messages:(5/348)----------
command: main jdk.jfr.api.consumer.streaming.TestJVMCrash
reason: User specified action: run main/othervm jdk.jfr.api.consumer.streaming.TestJVMCrash 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,jdk.attach,java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 39.569
----------configuration:(4/112)----------
Boot Layer
  add modules: jdk.jfr jdk.attach java.base 
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(6/4109)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/linux-aarch64-debug.jdk/jdk-18/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/1/jdk/jfr/api/consumer/streaming/TestJVMCrash.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/src.full/open/test/jdk/jdk/jfr/api/consumer/streaming:/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/1/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/src.full/open/test/lib:/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/1/test/jdk:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/src.full/open/test/jdk:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -XX:StartFlightRecording:settings=none jdk.jfr.api.consumer.streaming.TestProcess /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/scratch/0/action-1624683923881 ]
[crash-application-1]:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/linux-aarch64-debug.jdk/jdk-18/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/1/jdk/jfr/api/consumer/streaming/TestJVMCrash.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/src.full/open/test/jdk/jdk/jfr/api/consumer/streaming:/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/1/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/src.full/open/test/lib:/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/classes/1/test/jdk:/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+4-91/src.full/open/test/jdk:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -XX:StartFlightRecording:settings=none jdk.jfr.api.consumer.streaming.TestProcess /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S108547/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b41d9c1d-2535-496b-bb8d-3be319d3fb4f/runs/6825721c-7855-4b08-8d08-f5f37fe23d33/testoutput/test-support/jtreg_open_test_jdk_jdk_jfr/scratch/0/action-1624683923881
Attach failed: Unable to open socket file /proc/404795/root/tmp/.java_pid404795: target process 404795 doesn't respond within 10500ms or HotSpot VM not loaded
Retrying...
Attach failed: No such process
Retrying...
----------System.err:(15/1107)----------
java.lang.RuntimeException: Process (pid = 404795) is no longer alive, exit value = 131
	at jdk.test.lib.jfr.StreamingUtils.getJfrRepository(StreamingUtils.java:48)
	at jdk.jfr.api.consumer.streaming.TestProcess.getRepository(TestProcess.java:94)
	at jdk.jfr.api.consumer.streaming.TestJVMCrash.main(TestJVMCrash.java:48)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Process (pid = 404795) is no longer alive, exit value = 131
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Process (pid = 404795) is no longer alive, exit value = 131
----------rerun:(38/7832)*----------

The ""ps"" output captured in the environment artifacts does not list PID 404795.",,,,,,,,,,,JDK-8279733,JDK-8279099,,,,,,,,,,,,,,,,,,,,JDK-8285249,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,"0|i2tdj7:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-12-17 01:51;roboduke;Changeset: fffa73c1
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-12-17 09:49:44 +0000
URL:       https://git.openjdk.java.net/jdk18/commit/fffa73c1ef377eb28371fc4094eea8725850de7d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some SuppressWarnings annotations can be more localized,JDK-8269424,5052756,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2021-06-26 05:15,2021-07-08 08:57,2023-10-01 09:57,2021-06-29 05:03,jfx17,,,,,,,jfx17,javafx,,0,noreg-cleanup,sn_96,,,,,,,,,,,,,,,,"This is a follow-up to JDK-8264139, which added `@SuppressWarning` annotations to usages of deprecated security manager methods. [~weijun] noticed that there was one pattern where the automated tool added the warning at a higher level than was needed.

Here are the two instances where the annotation can be more localized:

jfx/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/GlassScene.java:
245     public TKClipboard createDragboard(boolean isDragSource) {
246         ClipboardAssistance assistant = new ClipboardAssistance(Clipboard.DND) {
247             @Override
248             public void actionPerformed(final int performedAction) {
249                 super.actionPerformed(performedAction);
250                 AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
The annotation should be added on line 247 instead of 246.

jfx/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java:
 196     final PulseReceiver pulseReceiver = new PulseReceiver() {
 197         @Override public void timePulse(long now) {
 198             final long elapsedTime = now - startTime;
 199             if (elapsedTime < 0) {
 200                 return;
 201             }
 202             if (accessCtrlCtx == null) {
 203                 throw new IllegalStateException(""Error: AccessControlContext not captured"");
 204             }
 205
 206             AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
The annotation should be added on line 197 instead of 196.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264139,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tdiz:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-06-29 05:03;roboduke;Changeset: 50ed890f
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-06-29 12:02:47 +0000
URL:       https://git.openjdk.java.net/jfx/commit/50ed890f55e073ba1abe457dfaaba5cd7c84e8b9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/event/oldobject/TestObjectSize.java failed with ""RuntimeException: No events: expected false, was true""",JDK-8269418,5052750,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mgronlun,dcubed,dcubed,2021-06-25 20:04,2021-09-08 23:00,2023-10-01 09:57,2021-09-06 02:15,18,,,,,,,18,hotspot,,0,tier5,tier8,,,,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

jdk/jfr/event/oldobject/TestObjectSize.java

Here's a snippet from the log file:

#section:main
----------messages:(5/350)----------
command: main -XX:TLABSize=2k jdk.jfr.event.oldobject.TestObjectSize
reason: User specified action: run main/othervm -XX:TLABSize=2k jdk.jfr.event.oldobject.TestObjectSize 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr --add-exports jdk.jfr/jdk.jfr.internal.test=ALL-UNNAMED
elapsed time (seconds): 6.086
----------configuration:(4/115)----------
Boot Layer
  add modules: jdk.jfr                       
  add exports: jdk.jfr/jdk.jfr.internal.test ALL-UNNAMED

----------System.out:(0/0)----------
----------System.err:(19/1185)----------
type = [B, objectSize = 360
type = java.util.ArrayList$Itr, objectSize = 32
type = java.util.concurrent.CopyOnWriteArrayList$COWIterator, objectSize = 24
java.lang.RuntimeException: No events: expected false, was true
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertFalse(Asserts.java:461)
	at jdk.test.lib.jfr.Events.hasEvents(Events.java:161)
	at jdk.jfr.event.oldobject.TestObjectSize.main(TestObjectSize.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: No events: expected false, was true
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: No events: expected false, was true
----------rerun:(42/8256)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x_10.15,,,,"0|i2tdhn:",9223372036854775807,b14,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-09-06 02:15;roboduke;Changeset: 1bf5bda2
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-09-06 09:13:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1bf5bda2919b3236040bf12c51eba552c6309cf7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[11u] Remove ea from DEFAULT_PROMOTED_VERSION_PRE in OpenJDK 11u,JDK-8269415,5052743,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2021-06-25 15:05,2022-07-25 14:02,2023-10-01 09:57,2021-06-28 22:30,11,,,,,,,11.0.13,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,"When backporting JDK-8223464 to OpenJDK 11u, the value DEFAULT_PROMOTED_VERSION_PRE=ea was introduced in make/autoconf/version-numbers.
While the value itself is only used by Oracle builds at this point, it should be maintained the same way in all OpenJDK update releases. The value should only be 'ea' for major releases that are still in a pre-ga state.

Since OpenJDK 11 has already been released, the value should be empty there. This aligns with OpenJDK 16 where `ea` has been removed with JDK-8259794.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8223464,JDK-8283911,,,,,,,,,,,,,,,,,,,,,,,,11.0.7,,,,,,"0|i2tdg3:",9223372036854775807,b01,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-06-28 07:41;clanger;Fix request (11u):
This is an OpenJDK 11u only change, please approve as per bug description.;;;","2021-06-28 22:30;roboduke;Changeset: 52cbf2f6
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2021-06-29 05:29:26 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/52cbf2f653a9d36932f16ccbab7b61a1918cd18e
;;;","2021-08-05 04:57;roboduke;Changeset: 52cbf2f6
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2021-06-29 05:29:26 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/52cbf2f653a9d36932f16ccbab7b61a1918cd18e
;;;","2022-03-29 20:15;andrew;The value doesn't seem to be being maintained in 11u (e.g. JDK-8282501 does not update it to 'ea' for jdk-11.0.16 pre-releases). Why is this?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Withfield and field resolution update,JDK-8269408,5052733,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2021-06-25 12:48,2021-07-21 00:04,2023-10-01 09:57,2021-07-20 09:18,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,"With the L/Q model, the verifier cannot verify anymore that putfield and withfield are applied to, respectively, identity objects and primitive objects (see JDK-8269274). Those checks must now be performed during field resolution. The JVM must also performs null-checks on the receiver of a withfield bytecode.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271017,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tddv:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
default build of jdk8 fails on newer GCCs with warnings as errors on format-overflow,JDK-8269388,5052705,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jvanek,jvanek,jvanek,2021-06-25 07:06,2021-07-06 15:45,2023-10-01 09:57,2021-06-27 22:11,openjdk8u,,,,,,,openjdk8u302,hotspot,,0,11-na,16-na,17-na,9-na,jdk8u-critical-request,jdk8u-critical-yes,,,,,,,,,,,,"Compiling /home/jvanek/hg/jdk8u-dev/hotspot/src/share/vm/opto/parse3.cpp
/home/jvanek/hg/jdk8u-dev/hotspot/src/os/linux/vm/os_linux.cpp: In static member function ‘static void os::Linux::check_signal_handler(int)’:
/home/jvanek/hg/jdk8u-dev/hotspot/src/os/linux/vm/os_linux.cpp:4999:15: error: ‘%s’ directive argument is null [-Werror=format-overflow=]
 4999 |     tty->print(""Warning: %s handler "", exception_name(sig, buf, O_BUFLEN));
      |     ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Compiling /home/jvanek/hg/jdk8u-dev/hotspot/src/share/vm/opto/parseHelper.cpp
cc1plus: all warnings being treated as errors
gmake[6]: *** [/home/jvanek/hg/jdk8u-dev/hotspot/make/linux/makefiles/rules.make:151: os_linux.o] Error 1 


You need to build as
make  WARNINGS_ARE_ERRORS=""-Wno-error=format-overflow""

This is older issue, and is not present on jdk11,16 or 18
",,,,,,,,,,,JDK-8269966,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269468,,,,,,,,,,,,generic,,,,,,,,,,linux,,,,"0|i2td7n:",9223372036854775807,b07,,,,,,,,,,,,,"2021-06-25 07:07;jvanek;Possible fix:  http://cr.openjdk.java.net/~jvanek/format-overflow.webrev.01/webrev/;;;","2021-06-25 07:10;jvanek;Fixes build of 8u302 on newer GCCs;;;","2021-06-25 07:12;andrew;Approving this for 8u302 just ahead of freeze.
Will try and get a code fix into trunk and backport for a longer term fix.
;;;","2021-06-27 22:11;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/rev/c43e69afd9aa
User:  andrew
Date:  2021-06-28 05:06:58 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Menu inoperable after setting stage to second monitor,JDK-8269374,5052689,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jpereda,jpereda,jpereda,2021-06-25 04:47,2021-09-22 12:42,2023-10-01 09:57,2021-07-20 09:39,jfx11,jfx16,,,,,,jfx18,javafx,,0,,,,,,,,,,,,,,,,,,"On Windows, with two monitors, if the main monitor has DPI settings (+100%), and a second monitor without DPI settings (100%) is connected, when the app is translated from one monitor to the other, not by dragging but programmatically, via Stage::setX, Stage::setY, the fixed issue JDK-8169777 surfaces again: the menu's popup shows up in a wrong position and can't be clicked, and as soon as the mouse is released, the popup gets closed. Going back to the first monitor also fails.

The attached test reproduces the issue, with any JavaFX version from 11 to latest 17-ea.",,,,,,,,,,,JDK-8274165,JDK-8273204,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-25 04:46;jpereda;MenuTest.java;https://bugs.openjdk.org/secure/attachment/95251/MenuTest.java",,,,,,x86_64,,,,,,,,,,windows,,,,"0|i2td43:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2021-06-25 05:46;jpereda;If we add a listener to the Scene::yProperty of the given test:

var scene = new Scene(root, 600, 400); 
+ scene.yProperty().addListener((obs, ov, nv) -> System.out.println(""new Y = "" + nv + "", old Y = "" + ov)); 

and have for instance 150% DPI in the main monitor and then:

- run app (centered in the main screen 150% DPI), log shows:
new Y = 30.0, old Y = 0.0

- click button (top-left of the second screen 100% DPI), log shows:
new Y = 45.0, old Y = 30.0

- click button (top-left of the main screen 150% DPI), log shows:
new Y = 20.666, old Y = 45.0

And similar with 175%:
- new Y = 29.7143, old Y = 0.0
- new Y = 52.0, old Y = 29.7143
- new Y = 17.7143, old Y = 52.0

It can be concluded that the wrong scaling factor is applied to the scene itself, and that has some influence on the menus location and popup.

In fact, the wrong screen coordinates is the root cause of the menu popup that gets closed: the mouseEventHandler in MenuBarSkin<init>, calls unSelectMenus() because the click on the menubar is ""else where in the scene"":
https://github.com/openjdk/jfx/blob/master/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuBarSkin.java#L319

Update

The ViewEvent.MOVE notification that sets the location of the scene is called several times in the process, using the _old_ scene X,Y location and applying the new scale:

scene.sceneListener.changedLocation(view.getX() / pScaleX, view.getY() / pScaleY);

so for the case of 150% DPI, initially sceneY was 45, and main screen scale is 1.5, so new Y is set to 45/1.5=30 (first scene.getY() value). However the view location remains at 45 (SceneState::update).

First click: view location was 45, new scaleY is 1, new Y is set at 45/1.0=45. After a few SceneState::update calls, the view goes to 31.

Second click: view location was 31, main screen scale is 1.5, new Y is set to 31/1.5=20.6667

So the issue here is that the scene location takes the value from the _old_ location with the _new_ scale, and further updates don't reflect the new changes on that location.


;;;","2021-06-28 14:53;kcr;I suspect that this also happens in JDK 8u after the fix for JDK-8247839 (before that fix, multi-screen HiDPI was completely broken, so this bug would not have been evident).
;;;","2021-06-28 16:36;jpereda;Another interesting observation with the same test case:

I've logged the WinView origin and size while moving back and forth the app from main screen (150% DPI) to the external monitor (100% DPI), and while the origin remains constant:
- origin at (11, 45) at main screen
- origin at (8, 31) at external monitor 
(in line with the 45 and 31 y values from my previous comment)

the width and height of the app increase at a constant rate on every iteration:
- 900x600 main -> 600x400 external ->
- 900x600 main -> 606x417 external -> 
- 903x609 main -> 608x423 external -> 
- 906x618 main -> 610x429 external -> 
- 909x627 main -> 612x435 external -> 
- 912x636 main -> 614x441 external -> 
-... ->
- 1038x1014 -> ...

This can be seen too by monitoring the stage size or the scene size. Every iteration increases the size in 2x6 pixels (100%) or 3x9 pixels (150%).;;;","2021-07-08 03:00;jpereda;I've got a possible fix for the main issue (menu misalignment), I'm creating a PR for it. The increasing size issue should be investigated in a follow-up issue.;;;","2021-07-20 09:39;roboduke;Changeset: c490ddfd
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2021-07-20 16:38:58 +0000
URL:       https://git.openjdk.java.net/jfx/commit/c490ddfdb1255add00dd7b0f14fe03857c6946c5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
some tests in jdk/tools/launcher/ fails on localized Windows platform,JDK-8269373,5052688,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,myano,myano,myano,2021-06-25 04:38,2022-03-11 05:34,2023-10-01 09:57,2021-09-08 08:47,17,,,,,,,18,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,ursqe-triaged,,,,,,,,,,,,,,"The following test failed on localized Windows platform:

* tools/launcher/FXLauncherTest.java
* tools/launcher/HelpFlagsTest.java
* tools/launcher/MainClassAttributeTest.java
* tools/launcher/MainClassCantBeLoadedTest.java
* tools/launcher/SourceMode.java
* tools/launcher/TestSpecialArgs.java

The environment in which I ran tests is as follows:
OS: Windows 10
Locale: ja

Here's a snippet from the log file of FXLauncherTest.java:

test# 13: abort on missing Main-Class
JavaFX-Application-Class: helloworld.HelloWorld
renaming fxtest.jar to testMissingMC-13-fxtest.jar
FAIL: testMissingMC:13 : test with helloworld.HelloWorld
Test static void FXLauncherTest.testMissingMC() throws java.lang.Exception failed: java.lang.reflect.InvocationTargetException
----begin detailed exceptions----
java.lang.reflect.InvocationTargetException
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at TestHelper.run(TestHelper.java:200)
        at FXLauncherTest.main(FXLauncherTest.java:451)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.Exception: Failed: testMissingMC:13
        at FXLauncherTest.checkStatus(FXLauncherTest.java:201)
        at FXLauncherTest.testMissingMC(FXLauncherTest.java:380)
        ... 12 more
----end detailed exceptions----
",,,,,,,,,,,JDK-8283025,JDK-8281326,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,windows,,,,"0|i2td3v:",9223372036854775807,b14,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2021-09-08 08:47;roboduke;Changeset: cb112aff
Author:    Masanori Yano <myano@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2021-09-08 15:46:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cb112affd6061e8ace6dad4e92c7b394a413e37f
;;;","2022-03-10 05:30;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
SAP nightly testing passed.;;;","2022-03-10 05:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/227
Date: 2022-03-10 13:31:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac crashes when processing parenthesized pattern in instanceof,JDK-8269354,5052666,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-06-25 00:41,2022-01-18 21:35,2023-10-01 09:57,2021-07-01 03:11,17,,,,,,,17,tools,,0,conformance,tck-red-17,,,,,,,,,,,,,,,,"Consider this code:
---
public class PatternTest {
    public static void main(String[] args) {
        Object expr = ""a"";
        boolean b = expr instanceof (String a && a.equals(""a""));
    }
}
---

This crashes javac:
$ javac --enable-preview -source 17 PatternTest.java 
Note: PatternTest.java uses preview features of Java SE 17.
Note: Recompile with -Xlint:preview for details.
An exception has occurred in the compiler (17-internal). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot read field ""sym"" because ""this.lvar[3]"" is null
        at jdk.compiler/com.sun.tools.javac.jvm.Code.emitop0(Code.java:577)
        at jdk.compiler/com.sun.tools.javac.jvm.Items$LocalItem.load(Items.java:399)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitSelect(Gen.java:2339)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCFieldAccess.accept(JCTree.java:2450)
...
---",,,,,,,,,,,JDK-8270695,JDK-8269783,,,,,,,,,,,,,,,,,,,,JDK-8278834,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tcyz:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-01 03:11;roboduke;Changeset: a8385feb
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-07-01 10:10:03 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/a8385feb30bd7bd59bcc808de046fcd2e4fb92c1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Proxy::newProxyInstance and MethodHandleProxies::asInterfaceInstance should reject sealed interfaces,JDK-8269351,5052660,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mchung,alanb,alanb,2021-06-24 22:36,2021-07-30 07:54,2023-10-01 09:57,2021-06-26 09:47,17,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,"Creating as a P2 for now as this may need attention in Java 17.

Proxy.newProxyInstance doesn't specify how it deals with sealed interfaces. I suspect we may need to update the list of restrictions so that IllegalArgumentException is thrown if an interface is sealed.

As things stand, a confusing IncompatibleClassChangeError will be thrown when attempting to define the proxy class.

",,,,,,,,,,,JDK-8269463,JDK-8270657,,,,,,,,,,,,JDK-8269396,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tcxn:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,Verified,,"2021-06-26 09:47;roboduke;Changeset: 3d0d27ce
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2021-06-26 16:46:57 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/3d0d27ce57b4456b6fab86f05e105241ddf8471e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CICrashAt=1 does not always catch first Java method,JDK-8269342,5052650,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dlong,mchung,mchung,2021-06-24 19:03,2022-03-23 23:55,2023-10-01 09:57,2021-07-26 15:09,18,,,,,,,18,hotspot,,0,ci-replay,ci-replay-failed,hs-comp-triaged,oracle-triage-18,testbug,ursqe-triaged,,,,,,,,,,,,"The following tests fail with ""java.lang.RuntimeException: Crash JVM exits gracefully: expected 0 to not equal 0"" when running with the fix for JDK-6824466 [1] that replaces the core reflection implementation to use method handles.

compiler/ciReplay/TestVMNoCompLevel.java
compiler/ciReplay/TestServerVM.java

Need help from the VM compiler team to investigate if this is a JIT compiler issue or due to the core reflection change.  Thanks.
[1] https://github.com/mlchung/jdk/tree/reimplement-method-invoke",,,,,,,,,,,,,,,,,,,,,,,JDK-8254106,,,,,,,,,JDK-8271820,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tcvf:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-25 14:40;dlong;The ci replay feature has known problems with method handles and dynamic classes.;;;","2021-06-25 14:41;dlong;ILW = replay test failure when methodhandles used for reflection, no workaround = MMH = P3;;;","2021-07-07 17:46;dlong;[~mchung] Are you still seeing this failure?  I tried running these tests with your branch and passing -Djdk.reflect.useDirectMethodHandle=true but I'm not seeing the failure.;;;","2021-07-08 21:42;dlong;I can reproduce it with the -esa flag.;;;","2021-07-08 22:00;dlong;These tests use -XX:CICrashAt=1 to cause a crash, assuming the test method is the first method compiled.  However, that's not always the case:

     603    1     n 0       java.lang.invoke.MethodHandle::linkToStatic(LL)I (native)   (static)
   1366    2    b  3       compiler.ciReplay.CiReplayBase$TestMain::test (17 bytes);;;","2021-07-26 15:09;roboduke;Changeset: fcc7d59b
Author:    Dean Long <dlong@openjdk.org>
Date:      2021-07-26 22:09:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fcc7d59b9937a34c423e4532058668144b0ec1fb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Malformed jdk.serialFilter incorrectly handled,JDK-8269336,5052640,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jpai,rriggs,rriggs,2021-06-24 14:04,2022-01-04 15:47,2023-10-01 09:57,2021-10-20 08:12,17,,,,,,,18,core-libs,,0,,,,,,,,,,,,,,,,,,"When the java.io.ObjectInputFilter configuration is initialized and the jdk.serialFilter property is malformed, the log message is missing the message but instead logs the exception stack trace.
The exception is not propagated allowing the runtime to start without the filter.",,,,,,,,,,,JDK-8277111,,,,,,,,,,,,,,,,,,,,,JDK-8276610,,,,,JCK-7316943,JCK-7316939,,,,,,,,,,,,,,,,,,,9,,,,,,"0|i2tct7:",9223372036854775807,b21,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,,,"2021-10-18 06:26;rriggs;The exception passed to the log should either call toString() explicitly or be cast to (Object) so the logger calls toString.
The RuntimeException should be re-thrown resulting in an ExceptionInInitializerException.;;;","2021-10-20 08:12;roboduke;Changeset: 35e5bb5f
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2021-10-20 15:10:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/35e5bb5f59c01a1b07893780fa73f93c2abab653
;;;","2021-10-28 03:04;kganapureddy;[~rriggs] The spec mentions that - ""If the Java virtual machine is started with the system property jdk.serialFilter, its value is used to configure the filter.""  as class level description, But it does not talk about the handling of malformed serial filter [https://download.java.net/java/early_access/jdk18/docs/api/java.base/java/io/ObjectInputFilter.Config.html]

The last statement of the paragraph says - 
  ""The syntax for the property value is the same as for the createFilter method."" 

Does ""configure"" at class level description means it invokes - https://download.java.net/java/early_access/jdk18/docs/api/java.base/java/io/ObjectInputFilter.Config.html#createFilter(java.lang.String) ?
Which has correct mentioning of handling different kinds of inputs and exception cases.

IMO, It would be clear if we elaborate a bit at class level description, about ""configure"" context.



;;;","2021-11-06 22:34;kganapureddy;Thanks for filing the CSR, The proposed changes to the spec looks good commented on CSR.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to load svml library,JDK-8269335,5052638,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sviswanathan,sviswanathan,sviswanathan,2021-06-24 13:53,2021-07-15 10:18,2023-10-01 09:57,2021-06-25 11:32,17,,,,,,,17,hotspot,,0,c2,c2-vector,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,"The OpenJDK 17 early access build from jdk.java.net fails to load svml library. We need to give complete path for svml library to dll_load call for the load to succeed.
",,,,,,,,,,,JDK-8269458,JDK-8270645,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,17,,,,,,"0|i2tcsr:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-24 16:51;dlong;ILW = performance impact if intrinsics fail to be enabled, openjdk build, no workaround = MMH = P3;;;","2021-06-25 11:32;roboduke;Changeset: 1e3b418a
Author:    Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2021-06-25 18:31:18 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/1e3b418a53a080a53827989393362338b43dd363
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ProblemList javax/swing/JFileChooser/FileSystemView/SystemIconTest.java on Win-X64,JDK-8269315,5052613,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2021-06-24 12:14,2021-07-15 10:16,2023-10-01 09:57,2021-06-24 13:28,17,,,,,,,17,client-libs,,0,tier3,,,,,,,,,,,,,,,,,"In order to reduce the noise in the CIs, I'm ProblemListing
javax/swing/JFileChooser/FileSystemView/SystemIconTest.java
on Windows-X64.",,,,,,,,,,,JDK-8269452,JDK-8270639,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268280,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,"0|i2tcn7:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-06-24 12:17;dcubed;Here's the context diff for the proposed fix:

$ git diff
diff --git a/test/jdk/ProblemList.txt b/test/jdk/ProblemList.txt
index 0cc39dfc608..636233e5c97 100644
--- a/test/jdk/ProblemList.txt
+++ b/test/jdk/ProblemList.txt
@@ -742,6 +742,7 @@ javax/swing/Popup/TaskbarPositionTest.java 8065097 macosx-all,linux-all
 javax/swing/JEditorPane/6917744/bug6917744.java 8213124 macosx-all
 javax/swing/JRootPane/4670486/bug4670486.java 8042381 macosx-all
 javax/swing/JPopupMenu/4634626/bug4634626.java 8017175 macosx-all
+javax/swing/JFileChooser/FileSystemView/SystemIconTest.java 8268280 windows-x64
 
 sanity/client/SwingSet/src/ToolTipDemoTest.java 8225012 windows-all,macosx-all
 sanity/client/SwingSet/src/ScrollPaneDemoTest.java 8225013 linux-all;;;","2021-06-24 13:28;roboduke;Changeset: 22d86750
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-06-24 20:27:10 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/22d867508514d57faaaa5c515ed5bfc635eb63f6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression ~5% in spec2005 in b27,JDK-8269304,5052599,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kvn,ecaspole,ecaspole,2021-06-24 08:35,2021-09-28 09:35,2023-10-01 09:57,2021-06-28 08:53,11.0.13-oracle,17,18,8u311,,,,17,hotspot,,0,11bpr-critical-approved,c2,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-17,perf-regression,,,,,,,,,,,Seems to be related to JDK-8268347.,,,,,,,,,,,JDK-8269548,JDK-8270537,JDK-8269676,JDK-8269560,JDK-8269540,JDK-8270661,,,,,,,,,,,,,,,,JDK-8268347,JDK-8269013,,,,,,,,,,,,,,,,,,,,,,,b27,,,,,,,"0|i2tckb:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-24 12:54;dlong;ILW = benchmark regression, no workaround = MMH = P3;;;","2021-06-25 18:54;kvn;Yes, I see several recompilations introduced by JDK-8268347. I will investigate.

=== unbalanced coarsened locks ===
*********************************************************
** Bailout: Recompile without locks coarsening         **
*********************************************************
790s  spec.jbb.Orderline::validateAndProcess (63 bytes)
;;;","2021-06-25 19:00;kvn;Looks like I forgot to check when all coarsened lock/unlock in group were eliminated as normal case which does not require recompilation.
;;;","2021-06-25 19:16;kvn;Suggested fix:

src/hotspot/share/opto/compile.cpp
@@ -4514,7 +4514,9 @@ bool Compile::coarsened_locks_consistent() {
     bool modified = false; // track locks kind modifications
     Lock_List* locks_list = (Lock_List*)_coarsened_locks.at(i);
     uint size = locks_list->size();
-    if (size != locks_list->origin_cnt()) {
+    if (size == 0) {
+      unbalanced = false; // All locks were eliminated - good.
+    } else if (size != locks_list->origin_cnt()) {
       unbalanced = true; // Some locks were removed from list
     } else {
       for (uint j = 0; j < size; j++) {
;;;","2021-06-25 19:23;kvn;All Java versions which have JDK-8268347 fix  are affected.;;;","2021-06-28 08:53;roboduke;Changeset: 8d09596f
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-06-28 15:52:09 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/8d09596f270c822b867d38a5462ec62c613f1d0e
;;;","2021-07-15 00:52;roland;11u Fix Request
 
Backporting this patch fixes a regression introduced by JDK-8268347 for which I requested backport approval. Patch applies cleanly to 11u once JDK-8268347 is applied. tier1 tests pass with the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/dcmd/framework/InvalidCommandTest.java still fails after JDK-8268433,JDK-8269302,5052595,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,amenkov,dcubed,dcubed,2021-06-24 07:34,2021-07-15 10:18,2023-10-01 09:57,2021-06-25 15:11,17,18,,,,,,17,core-svc,,0,intermittent,noreg-self,testbug,tier3,tier5,,,,,,,,,,,,,"The following test failed in the JDK18 CI:

serviceability/dcmd/framework/InvalidCommandTest.java

Here's a snippet from the log file:

test InvalidCommandTest.mainClass(): failure
nsk.share.Failure: Unable to read object from not established PipeIO Listener Thread connection
	at nsk.share.jpda.SocketConnection.readObject(SocketConnection.java:514)
	at nsk.share.jpda.SocketIOPipe.readln(SocketIOPipe.java:190)
	at TestProcessLauncher.launch(TestProcessLauncher.java:71)
	at InvalidCommandTest.mainClass(InvalidCommandTest.java:59)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Running DCMD 'asdf' through 'PidJcmdExecutor'
Executing command '[c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-18+3-73\\windows-x64-debug.jdk\\jdk-18\\fastdebug\\bin\\jcmd.exe, 33092, asdf]'
[2021-06-24T12:05:35.287232400Z] Gathering output for process 6612
debugee.stdout> Test Java process started!
[2021-06-24T12:05:36.287572500Z] Waiting for completion for process 6612
[2021-06-24T12:05:36.287572500Z] Waiting for completion finished for process 6612
Output and diagnostic info for process 6612 was saved into 'pid-6612-output.log'
[2021-06-24T12:05:36.303186100Z] Waiting for completion for process 6612
[2021-06-24T12:05:36.303186100Z] Waiting for completion finished for process 6612
Command returned with exit code 1
---------------- stdout ----------------
33092:

---------------- stderr ----------------
java.lang.IllegalArgumentException: Unknown diagnostic command

----------------------------------------

test InvalidCommandTest.pid(): success

===============================================
serviceability/dcmd/framework/InvalidCommandTest.java
Total tests run: 4, Passes: 3, Failures: 1, Skips: 0
===============================================

debugee.stdout> Waiting for the quit command from the test ...
#>  
#>  WARNING: switching log to verbose mode,
#>      because error is complained
#>  
debugee.stdout> Test Java process started!
debugee.stdout> Waiting for the quit command from the test ...
# ERROR: binder> Debugee VM has not exited correctly: trying to kill it
The following stacktrace is for failure analysis.
nsk.share.TestFailure: binder> Debugee VM has not exited correctly: trying to kill it
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jpda.DebugeeProcess.complain(DebugeeProcess.java:417)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:397)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:426)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
------------ Try to print debuggee threads before killing process ------------
Can't print threads info because 'vm' is null
Killing debugee VM process


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: binder> Debugee VM has not exited correctly: trying to kill it
----------System.err:(14/872)----------
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
----------rerun:(45/7091)*----------

This looks like the same failure mode that the following bug tracks:

JDK-8268433 serviceability/dcmd/framework/VMVersionTest.java fails with Unable to send object throw not established PipeIO Listener Thread connection",,,,,,,,,,,JDK-8270655,JDK-8269462,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268433,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,"0|i2tcjf:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@22f3cc74,,,,,,,,,"2021-06-24 07:35;dcubed;The fix for JDK-8268433 is in jdk-18+3-73 and this latest sighting 
is in the same build-ID.;;;","2021-06-24 13:32;amenkov;With JDK-8268433 fix we see real error - the test fails trying to read ""ready"" notification from debuggee.
But I still don't see code flow to get the error.
;;;","2021-06-24 21:12;amenkov;The issue was introduced by JDK-8237388 fix - cycle condition in ListenerThread.getConnection() is incorrect:
                while (!connection.isConnected() && error != null) {
                    try {
                        wait();
                    } catch (InterruptedException e) {
                    }
                }
The cycle should wait while connection is established (connection.isConnected() == true) or error occurred (error != null)
So ""while"" condition should be (!connection.isConnected() && error == null)
;;;","2021-06-24 21:17;amenkov;This wrong condition causes the error if ListenerThread.getConnection() reaches ""synchronized (this)"" section earlier than ListenerThread.run();;;","2021-06-25 07:33;dcubed;Here's log file snippets for the jdk-18+4-86-tier3 sighting:

serviceability/dcmd/framework/VMVersionTest.java 

---------------- stderr ----------------

----------------------------------------

test VMVersionTest.jmx(): success
WARNING: IOPipe is not connected
test VMVersionTest.mainClass(): failure
nsk.share.Failure: Unable to read object from not established PipeIO Listener Thread connection
	at nsk.share.jpda.SocketConnection.readObject(SocketConnection.java:514)
	at nsk.share.jpda.SocketIOPipe.readln(SocketIOPipe.java:190)
	at TestProcessLauncher.launch(TestProcessLauncher.java:71)
	at VMVersionTest.mainClass(VMVersionTest.java:65)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
debugee.stdout> Test Java process started!
debugee.stdout> Waiting for the quit command from the test ...
debugee.stdout> Test Java process started!
debugee.stdout> Waiting for the quit command from the test ...
Running DCMD 'VM.version' through 'MainClassJcmdExecutor'
Executing command '[c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-18+4-86\\windows-x64-debug.jdk\\jdk-18\\fastdebug\\bin\\jcmd.exe, testprocess.jar, VM.version]'
[2021-06-25T13:09:01.747728500Z] Gathering output for process 29832
[2021-06-25T13:09:03.720280800Z] Waiting for completion for process 29832
[2021-06-25T13:09:03.720280800Z] Waiting for completion finished for process 29832
Output and diagnostic info for process 29832 was saved into 'pid-29832-output.log'
[2021-06-25T13:09:03.737174Z] Waiting for completion for process 29832
[2021-06-25T13:09:03.737174Z] Waiting for completion finished for process 29832
Command returned with exit code 0
---------------- stdout ----------------;;;","2021-06-25 08:31;dcubed;We're seeing these test failures in the JDK17 CI also.
Please integrate this test fix in the JDK17 repo first.
I've bumped the priority from P4 -> P3 since we have
Tier3 failures in the CI...;;;","2021-06-25 15:11;roboduke;Changeset: 1404e4bf
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2021-06-25 22:10:48 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/1404e4bf44e28cadda3949f9e398e664cb98a5e2
;;;","2021-06-26 06:25;dcubed;The fix for this bug is in jdk-17+29-2551.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Switch statement with a pattern, constant and default label elements crash javac",JDK-8269301,5052371,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,webbuggrp,webbuggrp,2021-06-22 02:20,2021-07-15 10:36,2023-10-01 09:57,2021-07-09 01:05,17,18,,,,,,17,tools,,0,17ea,dcsad,regression,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: Ubuntu 20.04.1 LTS 
JRE: OpenJDK 17 build 17-ea+27-2476
JVM parameters: --enable-preview --source 17

A DESCRIPTION OF THE PROBLEM :
Trying to compile the code containing a pattern, constant, and default label elements within one switch label leads to the javac compilation error.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Try to compile the code:

    public static void main(String[] args) {
        test(1);
    }

    static void test(Integer i) {
        switch (i) {
            case Integer o && o != null, 1, default:
                System.out.println(""s1"");
        }
    }


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
It's expected to see clear compilation errors according to the spec draft: http://cr.openjdk.java.net/~gbierman/jep406/jep406-20210527/specs/patterns-switch-jls.html#jls-14.30.1

ACTUAL -
Compilation error:

java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
        at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.handleSwitch(Gen.java:1310)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitSwitch(Gen.java:1193)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitch.accept(JCTree.java:1294)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1097)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1097)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:967)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:930)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
        at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2415)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:737)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1617)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1585)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:104)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.compile(Main.java:383)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:189)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
error: compilation failed

---------- BEGIN SOURCE ----------
public class Switch {

    public static void main(String[] args) {
        test(1);
    }

    static void test(Integer i) {
        switch (i) {
            case Integer o && o != null, 1, default:
                System.out.println(""s1"");
        }
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
'1' or 'default' removal fixes the issue.

FREQUENCY : always


",,,,,,,,,,,JDK-8270742,JDK-8270221,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-24 07:15;adev;Test.java;https://bugs.openjdk.org/secure/attachment/95244/Test.java",,,,,,generic,,,,,,,b26,17,,generic,,,,"0|i2tb5v:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-24 07:23;adev;The issue is reproducible. The compiler crashes with AssertionError
java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)

The issue is not reproducible before 17ea b26. This is a regression. Following are the observations:
JDK 17ea b24: pass
JDK 17ea b25: pass
JDK 17ea b26: fails with AssertionError
JDK 17ea b27: fails with AssertionError
JDK 18 ea : fails with AssertionError;;;","2021-07-06 03:03;mcimadamore;Seems to me that the JLS section introducing the restriction is, rather:

http://cr.openjdk.java.net/~gbierman/jep406/jep406-20210527/specs/patterns-switch-jls.html#jls-14.11.1
;;;","2021-07-09 01:05;roboduke;Changeset: 885f7b11
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-07-09 08:03:56 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/885f7b1141d1d8e6b560ebaf0c2d4878be0ea8ba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Verification time before/after young collection only covers parts of the verification,JDK-8269295,5052584,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2021-06-24 06:09,2021-07-20 14:04,2023-10-01 09:57,2021-07-12 01:43,18,,,,,,,18,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,,The verification time before/after young collection for some reason only covers parts of the verification before/after. Fix this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270991,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tcgz:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-07-12 01:43;roboduke;Changeset: 8973867f
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-07-12 08:41:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8973867fb9568a3a527b763c9ce10cebdfb306d0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ObjectMonitor thread id fields should be 64 bits.,JDK-8269293,5052582,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2021-06-24 05:55,2021-06-30 17:15,2023-10-01 09:57,2021-06-24 12:35,18,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,"I mistakenly changed _previous_owner_tid to uintptr_t because of a cast I found in JDK-8256306 but it should really be uint64_t.  This field is used for JFR, the other field _notifier_tid should be the same.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-5007074,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tcgj:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-24 12:35;roboduke;Changeset: 42968db1
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2021-06-24 19:34:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/42968db173b3caa53b6ad403f1891c41bcc6fb75
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash/miscompile in CallGenerator::for_method_handle_inline after JDK-8191998,JDK-8269285,5052570,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,shade,shade,shade,2021-06-24 03:00,2022-09-12 05:37,2023-10-01 09:57,2021-07-01 02:28,13,15,17,18,,,,17,hotspot,,0,c2,hs-comp-triaged,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,oracle-triage-11,oracle-triage-17,redhat-interest,regression,,,,,,,,"See the thread here: https://www.reddit.com/r/java/comments/o0w953/investigation_jdk15_jit_seems_to_have_bugs

There is a reproducer that fails on current JDK with:

$ build/linux-x86_64-server-slowdebug/images/jdk/bin/java -XX:OnError=""gdb - %p"" Replication
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:729
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/phaseX.cpp:729), pid=3785715, tid=3785728
#  assert(!t->empty() || t == Type::TOP) failed: must not be vacuous range

The gdb stack points to the code added by JDK-8191998. Reverting that patch makes the test pass. 

I think join_speculative returned an empty type here. This dirty patch also makes the test pass:

diff --git a/src/hotspot/share/opto/callGenerator.cpp b/src/hotspot/share/opto/callGenerator.cpp
index ab7f7897797..6f1c8df778a 100644
--- a/src/hotspot/share/opto/callGenerator.cpp
+++ b/src/hotspot/share/opto/callGenerator.cpp
@@ -1152,7 +1152,8 @@ CallGenerator* CallGenerator::for_method_handle_inline(JVMState* jvms, ciMethod*
           const Type*       sig_type = TypeOopPtr::make_from_klass(signature->accessing_klass());
           if (arg_type != NULL && !arg_type->higher_equal(sig_type)) {
             const Type* recv_type = arg_type->join_speculative(sig_type); // keep speculative part
-            Node* cast_obj = gvn.transform(new CheckCastPPNode(kit.control(), arg, recv_type));
+            const Type* cast_type = recv_type->empty() ? sig_type : recv_type;
+            Node* cast_obj = gvn.transform(new CheckCastPPNode(kit.control(), arg, cast_type));
             kit.set_argument(0, cast_obj);
           }
         }
@@ -1165,7 +1166,8 @@ CallGenerator* CallGenerator::for_method_handle_inline(JVMState* jvms, ciMethod*
             const Type*       sig_type = TypeOopPtr::make_from_klass(t->as_klass());
             if (arg_type != NULL && !arg_type->higher_equal(sig_type)) {
               const Type* narrowed_arg_type = arg_type->join_speculative(sig_type); // keep speculative part
-              Node* cast_obj = gvn.transform(new CheckCastPPNode(kit.control(), arg, narrowed_arg_type));
+              const Type* cast_type = narrowed_arg_type->empty() ? sig_type : narrowed_arg_type;
+              Node* cast_obj = gvn.transform(new CheckCastPPNode(kit.control(), arg, cast_type));
               kit.set_argument(receiver_skip + j, cast_obj);
             }
           }

Vladimir, please follow up?",,,,,,,,,,,JDK-8270694,JDK-8269782,JDK-8293645,JDK-8293644,,,,,,,,,,,,,,,,,,JDK-8191998,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tcdv:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-06-24 13:36;dlong;ILW = crash in compiler or bad code, observed with reproducer, no workaround = HLH = P2;;;","2021-06-29 02:01;shade;I have a fix and the targeted test, let me take a stab at it. See linked PR.;;;","2021-07-01 02:28;roboduke;Changeset: c16d1fc9
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-07-01 09:27:55 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/c16d1fc9810d5b2c112d35f3298513f86f84f66d
;;;","2021-07-02 00:43;shade;[~yan], ping in case you want to backport this fix to 13 and 15.;;;","2021-08-06 20:31;epavlova;Run compiler/types/TestMethodHandleSpeculation.java in mach5 in JDK17 ATR configurations. The test passed. Also checked there are no failures in JDK17 CI;;;","2022-08-31 04:02;yan;[~shade] oops, missed notification! Thank you! I think Ilarion would backport it if it's OK with you;;;","2022-08-31 04:16;shade;Sure, I don't mind.;;;","2022-09-02 09:25;inakonechnyy;Fix request (13u, 15u):
The patch applies cleanly, gets passed tier1 tests. ;;;","2022-09-02 09:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/398
Date: 2022-09-02 16:35:37 +0000;;;","2022-09-02 09:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/267
Date: 2022-09-02 16:28:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/foreign/Test{Down,Up}call.java time out",JDK-8269281,5052564,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,amrsahu,amrsahu,2021-06-24 01:26,2021-07-15 10:38,2023-10-01 09:57,2021-07-13 03:54,17,18,,,,,,17,core-libs,,0,noreg-self,tier1,tier4,,,,,,,,,,,,,,,"Test: open/test/jdk/java/foreign/TestUpcall.java
Product: jdk-18
OS/architecture:Ubuntu_20.04

Error: 
test result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-18+3-72/linux-x64-debug.jdk/jdk-18/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 549332ms).",,,,,,,,,,,JDK-8270756,JDK-8270432,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,"0|i2tccj:",9223372036854775807,b31,,,,,,,,,,,,,"2021-07-13 03:54;roboduke;Changeset: b2416b60
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-07-13 10:53:49 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/b2416b60fbe1117cc502d5ecdd8356d42d27fddb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] 8269231 causes build failures,JDK-8269279,5052562,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,dsimms,dsimms,dsimms,2021-06-24 00:58,2021-06-24 03:57,2023-10-01 09:57,2021-06-24 03:57,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,JDK-8269231 caused build failures for macosx-x64 and windows-x64 debug targets,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269231,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tcc3:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Additional tests for MessageDigest with different providers,JDK-8269276,5052559,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ssahoo,ssahoo,ssahoo,2021-06-23 23:31,2021-07-21 17:43,2023-10-01 09:57,2021-07-14 22:44,17,,,,,,,17,security-libs,,0,noreg-self,testbug,,,,,,,,,,,,,,,,"Add Test cases to compare MessageDigest instance attributes generated from different providers and with different algorithms.
We can choose SUN and SunPKCS11 providers and then compare the MessageDigest instances for some provider specific info and some common. Similar comparison can be done when MessageDigest instances generated for different algorithms.
For simplicity we can use existing Test to add these minor Test cases: open/test/jdk/sun/security/pkcs11/MessageDigest/ReinitDigest.java.",,,,,,,,,,,JDK-8270767,JDK-8270804,,,,,,,,,,,,,,,,,,,,JDK-8259065,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tcbf:",9223372036854775807,b32,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-07-14 22:44;roboduke;Changeset: a32d2eef
Author:    Sibabrata Sahoo <ssahoo@openjdk.org>
Date:      2021-07-15 05:42:55 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/a32d2eefea12771522b942b32985df0fe50119e8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lworld] Withfield instruction fails to verify when operand stack contains LPrimitiveClass;",JDK-8269274,5052556,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,sadayapalam,sadayapalam,2021-06-23 23:28,2021-06-29 10:12,2023-10-01 09:57,2021-06-28 05:49,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,"The following code (generated via wip javac)

static X$Point makePoint(int, int);
    descriptor: (II)QX$Point;
    flags: (0x0008) ACC_STATIC
    Code:
      stack=2, locals=3, args_size=2
         0: defaultvalue  #1                  // class X$Point
         3: checkcast     #3                  // class X$Point
         6: astore_2
         7: iload_0
         8: aload_2
         9: swap
        10: withfield     #4                  // Field x:I
        13: astore_2
        14: iload_1
        15: aload_2
        16: swap
        17: withfield     #8                  // Field y:I
        20: astore_2
        21: aload_2
        22: checkcast     #11                 // class ""QX$Point;""
        25: areturn
      LineNumberTable:
        line 5: 0
        line 6: 7
        line 7: 14
        line 8: 21
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      26     0     x   I
            0      26     1     y   I
            7      19     2     p   LX$Point;

fails to verify at @bci 10 : Type 'X$Point' (current frame, stack[0]) is not assignable to inline type

",,,,,,,,,,,,,,,,,,,,,,,JDK-8244231,,,,,,JDK-8269275,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tcar:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos11] SystemIconTest fails with ClassCastException,JDK-8269269,5052551,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,amrsahu,amrsahu,2021-06-23 22:04,2021-11-09 07:49,2023-10-01 09:57,2021-07-15 21:44,17,,,,,,,18,client-libs,,0,atr,jdk17u-fix-request,jdk17u-fix-yes,macos,macos11,noreg-self,sn_96,sn_97,sqebug,testbug,ursqe-triaged,,,,,,,"Testsuite: Regression
Test name: open/test/jdk/javax/swing/JFileChooser/FileSystemView/SystemIconTest.java
Product(s) tested: JDK 17 b26 
OS/architecture:MacOS 11.2.3 aarch 64 /MacOS 11 with Intel Processor

Error when test case executed with JDK17b26
java.lang.ClassCastException: class javax.swing.plaf.IconUIResource cannot be cast to class javax.swing.ImageIcon (javax.swing.plaf.IconUIResource and javax.swing.ImageIcon are in module java.desktop of loader 'bootstrap')
	at SystemIconTest.testSystemIcon(SystemIconTest.java:76)



",,,,,,,,,,,JDK-8276873,JDK-8276718,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,17,,os_x,,,,"0|i2tc9n:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2021-06-24 08:56;psadhukhan;Test introduced in JDK-8182043;;;","2021-06-24 09:27;prr;Is this a test issue or a product issue ?;;;","2021-06-24 09:27;vdyakov;[~kizune] we need to address it For JDK 17.;;;","2021-06-29 13:00;kizune;This is a test issue - in some cases on Mac the icon is being wrapped by the IconUIResource and it can not be casted to the ImageIcon - hence the class cast error.;;;","2021-07-15 00:29;jdv;This issue is not specific to Big Sur, it is happening in my Catalina system also.;;;","2021-07-15 21:44;roboduke;Changeset: eab959cb
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2021-07-16 04:43:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eab959cbfa9e781adac3bc4bc3e74af8b18a1fd5
;;;","2021-11-03 14:39;akasko;Fix request (17u)

Clean backport of the test-only Mac-specific fix.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDWP: Properly fix thread lookup assert in findThread(),JDK-8269268,5052550,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2021-06-23 21:59,2023-05-17 09:46,2023-10-01 09:57,2021-06-29 11:46,17,,,,,,,18,core-svc,,0,amazon-interest,jdwp,,,,,,,,,,,,,,,,"JDK-8265028 sped up threadNode lookups in the debug agent. It also added an assert that ended up getting triggered. The assert was in findThread(), where it was making sure that if a thread did not have a TLS, it would not be found in the runningThreads list.

JDK-8265683 was filed for this assert issue, and a quick fix was done that disabled the assert, but also required some extra thread lookup logic for correctness, which partly undid some of the speed ups introduced by JDK-8265028. The CR is for properly fixing JDK-8265683 without undoing any of the speedup introduced by JDK-8265028.

The root cause of JDK-8265683 is that during VM shutdown a VM_DEATH event is sent, and this causes the debug agent to disable all JVMTI callbacks, which means the agent no longer receives THREAD_END events. The THREAD_END event is important for triggering the removal of the thread from runningThreads. When the thread is in the process of exiting, JVMTI strips it of its TLS, and it's important that the debug agent gets the THREAD_END event before this happens, but since callbacks are disabled, the THREAD_END event is not received.

During VM_DEATH handling, the debugger was also doing a VM.resume(), which calls commonResumeList(), which first walks runningThreads to build a list of threads that need to be resumed. After resuming these threads, it then walks this list of resumed threads, calling findThread() on each so it can do some bookkeeping on the ThreadNode. This is when sometimes we run into a thread that is on the list but no longer has a TLS. It basically has exited without the debug agent seeing a THREAD_END.

The fix is when handling VM_DEATH, don't have findThread() do the assert that checks if a thread has no TLS but is on runningThreads. Instead, if the thread has no TLS, then also look it up on runningThreads. Note normally we want to avoid this lookup (this is part of what JDK-8265028 optimized), but in this rare case of dealing with VM_DEATH, it is ok to do without impacting performance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265683,JDK-8265028,JDK-8305209,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tc9f:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-06-29 11:46;roboduke;Changeset: 7ca753bf
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-06-29 18:45:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7ca753bf0cb58ff0f82a7e9baee177a6da9f56e7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add AVX512 and other SSE + AVX combinations testing for tests which generate vector instructions,JDK-8269260,5052542,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kvn,kvn,kvn,2021-06-23 15:23,2022-08-25 09:10,2023-10-01 09:57,2021-06-25 15:49,17,18,,,,,,17,hotspot,,0,c2-vector,hs-comp-triaged,noreg-self,oracle-triage-17,ursqe-triaged,vector,VectorTest,,,,,,,,,,,"JDK-8269179 example shows that we don't test enough wide vectors on x64.
I suggest to create new HotSpot test group for such tests and together with jdk_vector group run them with different SSE + AVX HotSpot flags combinations. For now it is:
-XX:UseAVX=3
-XX:UseAVX=2
-XX:UseAVX=1
-XX:UseAVX=0
-XX:UseAVX=0 -XX:UseSSE=3
-XX:UseAVX=0 -XX:UseSSE=2 (this is minimal setting for 64 bit)
",,,,,,,,,,,JDK-8269435,JDK-8270656,,,,,,,,,,,,,,,,,,,,JDK-8269179,,,,,JDK-8271349,JDK-8269825,,,,,,,,,,,x86,,,,,,,,,,,,,,"0|i2tc7n:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-23 15:35;kvn;jdk_vector (slow, will run in hs-tier3)
   jdk/incubator/vector

Have to split some tests which are too slow to run in tier1.

hotspot_vector_1 = \
  compiler/c2/cr6340864 \
  compiler/codegen \
  compiler/loopopts/superword \
  compiler/vectorapi \
  compiler/vectorization \
  -compiler/codegen/aes \
  -compiler/codegen/Test6875866.java \
  -compiler/codegen/Test6935535.java \
  -compiler/codegen/TestGCMStorePlacement.java \
  -compiler/codegen/TestTrichotomyExpressions.java \
  -compiler/loopopts/superword/Vec_MulAddS2I.java \
  -compiler/vectorapi/VectorRebracket128Test.java

hotspot_vector_2 = \
  compiler/intrinsics \
  compiler/codegen/aes \
  compiler/codegen/Test6875866.java \
  compiler/codegen/Test6935535.java \
  compiler/loopopts/superword/Vec_MulAddS2I.java \
  compiler/vectorapi/VectorRebracket128Test.java \
  - compiler/intrinsics/string/TestStringLatin1IndexOfChar.java
;;;","2021-06-23 21:25;kvn;I got internal comment that we can not run with flags in tier1. So here what I am suggesting to run internally:

hs-tier2:
  hotspot_vector_1 - run with all flags combinations listed in Description
  hotspot_vector_2 - run with `-XX:UseAVX=3` only

hs-tier3:
  jdk_vector  - run with all flags combinations listed in Description
  hotspot_vector_2 - run with all combinations except `-XX:UseAVX=3`;;;","2021-06-24 13:17;dlong;ILW = missing testing, no workaround = MMH = P3;;;","2021-06-25 15:49;roboduke;Changeset: 824a5169
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-06-25 22:48:56 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/824a51693e10afba834823efb38195ee0d692e5e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Remove obsolete apps, tests, and scripts",JDK-8269259,5052541,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,kcr,kcr,2021-06-23 15:18,2021-07-23 13:20,2023-10-01 09:57,2021-06-29 05:04,jfx17,,,,,,,jfx17,javafx,,0,noreg-cleanup,sn_96,,,,,,,,,,,,,,,,"I propose to delete the following applications, tests, and scripts that are either obsolete or unmaintained:

apps/performance/*

apps/tests/HelloTest

apps/toys/FXSlideShow
apps/toys/Industrial
apps/toys/Shape3DToy
apps/toys/StretchyGrid
apps/toys/TouchSuite

tests/functional/*

tests/performance/VMPerformance

tools/*

While some of them might be useful, they aren't in their current form, and it is likely not worth the effort to fix them. They will be in the repo history if anyone really needs them.",,,,,,,,,,,,,,,,,,,,,,,JDK-8212088,,,,,,,,,,,,,,JDK-8271230,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tc7f:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-06-29 05:04;roboduke;Changeset: 12fb4daa
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-06-29 12:03:29 +0000
URL:       https://git.openjdk.java.net/jfx/commit/12fb4daa36f6f3b13049d32c5a95317ed9a8168e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/ManyRequestsLegacy.java failed with connection timeout,JDK-8269258,5052539,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,msheppar,msheppar,2021-06-23 14:52,2022-04-25 10:58,2023-10-01 09:57,2021-12-08 07:32,18,,,,,,,18,core-libs,,0,intermittent,tier2,,,,,,,,,,,,,,,,"java/net/httpclient/ManyRequestsLegacy.java  failed with unexpected Exception


----------System.err:(59/4768)----------
Jun 15, 2021 7:40:53 PM ManyRequestsLegacy main
INFO: TEST
ClientImpl (async) elapsed 847 millis for POST to https://localhost:61682/foo/x7
ClientImpl (async) elapsed 946 millis for POST to https://localhost:61682/foo/x2
ClientImpl (async) elapsed 1029 millis for POST to https://localhost:61682/foo/x6
ClientImpl (async) elapsed 1121 millis for POST to https://localhost:61682/foo/x5
ClientImpl (async) elapsed 1118 millis for POST to https://localhost:61682/foo/x20
ClientImpl (async) elapsed 1154 millis for POST to https://localhost:61682/foo/x13
ClientImpl (async) elapsed 1202 millis for POST to https://localhost:61682/foo/x11
ClientImpl (async) elapsed 1217 millis for POST to https://localhost:61682/foo/x12
ClientImpl (async) elapsed 1237 millis for POST to https://localhost:61682/foo/x19
ClientImpl (async) elapsed 1263 millis for POST to https://localhost:61682/foo/x18
ClientImpl (async) elapsed 1318 millis for POST to https://localhost:61682/foo/x16
ClientImpl (async) elapsed 1387 millis for POST to https://localhost:61682/foo/x14
ClientImpl (async) elapsed 1492 millis for POST to https://localhost:61682/foo/x8
ClientImpl (async) elapsed 1553 millis for POST to https://localhost:61682/foo/x9
ClientImpl (async) elapsed 1575 millis for POST to https://localhost:61682/foo/x3
ClientImpl (async) elapsed 1630 millis for POST to https://localhost:61682/foo/x4
ClientImpl (async) elapsed 1681 millis for POST to https://localhost:61682/foo/x10
ClientImpl (async) elapsed 1680 millis for POST to https://localhost:61682/foo/x17
ClientImpl (async) elapsed 1814 millis for POST to https://localhost:61682/foo/x1
ClientImpl (async) elapsed 1788 millis for POST to https://localhost:61682/foo/x15
java.util.concurrent.CompletionException: java.net.ConnectException: Connection timed out: connect
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:332)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:347)
	at java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:874)
	at java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2162)
	at ManyRequestsLegacy$LegacyHttpClient.lambda$sendAsync$0(ManyRequestsLegacy.java:184)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:579)
	at java.base/sun.nio.ch.Net.connect(Net.java:568)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:588)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:633)
	at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:299)
	at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:174)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:498)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:603)
	at java.base/sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:266)
	at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:380)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:189)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1287)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1128)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:175)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1430)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1401)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java:220)
	at ManyRequestsLegacy$LegacyHttpClient.lambda$sendAsync$0(ManyRequestsLegacy.java:175)
	... 1 more

JavaTest Message: Test threw exception: java.util.concurrent.CompletionException: java.net.ConnectException: Connection timed out: connect
JavaTest Message: shutting down test",,,,,,,,,,,JDK-8278710,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tc6z:",9223372036854775807,b27,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2021-06-23 14:52;msheppar;investigation in progress;;;","2021-08-03 14:31;dcubed;Here's a snippet from the log file for the jdk-18+9-392-tier2 sighting:

java/net/httpclient/ManyRequestsLegacy.java 


----------System.err:(59/4769)----------
Aug 03, 2021 8:20:02 PM ManyRequestsLegacy main
INFO: TEST
ClientImpl (async) elapsed 981 millis for POST to https://localhost:52310/foo/x19
ClientImpl (async) elapsed 1080 millis for POST to https://localhost:52310/foo/x9
ClientImpl (async) elapsed 1097 millis for POST to https://localhost:52310/foo/x12
ClientImpl (async) elapsed 1093 millis for POST to https://localhost:52310/foo/x16
ClientImpl (async) elapsed 1221 millis for POST to https://localhost:52310/foo/x13
ClientImpl (async) elapsed 1798 millis for POST to https://localhost:52310/foo/x8
ClientImpl (async) elapsed 1790 millis for POST to https://localhost:52310/foo/x20
ClientImpl (async) elapsed 1883 millis for POST to https://localhost:52310/foo/x11
ClientImpl (async) elapsed 3382 millis for POST to https://localhost:52310/foo/x15
ClientImpl (async) elapsed 3403 millis for POST to https://localhost:52310/foo/x3
ClientImpl (async) elapsed 3458 millis for POST to https://localhost:52310/foo/x6
ClientImpl (async) elapsed 3525 millis for POST to https://localhost:52310/foo/x2
ClientImpl (async) elapsed 3562 millis for POST to https://localhost:52310/foo/x17
ClientImpl (async) elapsed 3620 millis for POST to https://localhost:52310/foo/x5
ClientImpl (async) elapsed 3699 millis for POST to https://localhost:52310/foo/x1
ClientImpl (async) elapsed 3728 millis for POST to https://localhost:52310/foo/x18
ClientImpl (async) elapsed 3789 millis for POST to https://localhost:52310/foo/x14
ClientImpl (async) elapsed 3843 millis for POST to https://localhost:52310/foo/x7
ClientImpl (async) elapsed 3905 millis for POST to https://localhost:52310/foo/x10
ClientImpl (async) elapsed 3960 millis for POST to https://localhost:52310/foo/x4
java.util.concurrent.CompletionException: java.net.ConnectException: Connection timed out: connect
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:332)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:347)
	at java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:874)
	at java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2162)
	at ManyRequestsLegacy$LegacyHttpClient.lambda$sendAsync$0(ManyRequestsLegacy.java:184)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:579)
	at java.base/sun.nio.ch.Net.connect(Net.java:568)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:585)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:633)
	at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:299)
	at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:174)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:498)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:603)
	at java.base/sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:264)
	at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:378)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:189)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1287)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1128)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:175)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1430)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1401)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java:220)
	at ManyRequestsLegacy$LegacyHttpClient.lambda$sendAsync$0(ManyRequestsLegacy.java:175)
	... 1 more

JavaTest Message: Test threw exception: java.util.concurrent.CompletionException: java.net.ConnectException: Connection timed out: connect
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.util.concurrent.CompletionException: java.net.ConnectException: Connection timed out: connect
----------rerun:(42/5361)*----------;;;","2021-08-04 04:03;dfuchs;There seem to be many sockets in TIME-WAIT - I wonder if the OS is running out of available ports in the ephemeral range: trying to send 20 concurrent requests with HTTP/1.1 requires at least 40 available local ports (since there will need to be 20 connections and both client & server will need 1 local port).;;;","2021-12-04 06:11;dcubed;Here's log file snippets from the jdk-18+27-1857-tier2 sighting of ManyRequests2.java:

----------System.err:(32/2388)----------
Dec 04, 2021 10:37:31 AM ManyRequests main
INFO: TEST
java.util.concurrent.CompletionException: java.net.ConnectException
	at java.base/java.util.concurrent.CompletableFuture.encodeRelay(CompletableFuture.java:368)
	at java.base/java.util.concurrent.CompletableFuture.completeRelay(CompletableFuture.java:377)
	at java.base/java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:1152)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1773)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.ConnectException
	at java.net.http/jdk.internal.net.http.common.Utils.toConnectException(Utils.java:1045)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.connectAsync(PlainHttpConnection.java:198)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.checkRetryConnect(PlainHttpConnection.java:230)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.lambda$connectAsync$1(PlainHttpConnection.java:206)
	at java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:934)
	at java.base/java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:911)
	... 5 more
Caused by: java.nio.channels.ClosedChannelException
	at java.base/sun.nio.ch.SocketChannelImpl.ensureOpen(SocketChannelImpl.java:195)
	at java.base/sun.nio.ch.SocketChannelImpl.beginConnect(SocketChannelImpl.java:760)
	at java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:848)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.lambda$connectAsync$0(PlainHttpConnection.java:183)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.connectAsync(PlainHttpConnection.java:185)
	... 9 more

JavaTest Message: Test threw exception: java.util.concurrent.CompletionException: java.net.ConnectException
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.util.concurrent.CompletionException: java.net.ConnectException
----------rerun:(43/5401)*----------


Here's log file snippet from the jdk-18+27-1857-tier2 sighting of ManyRequestsLegacy.java:

----------System.err:(59/4768)----------
Dec 04, 2021 10:37:31 AM ManyRequestsLegacy main
INFO: TEST
ClientImpl (async) elapsed 727 millis for POST to https://localhost:53437/foo/x11
ClientImpl (async) elapsed 877 millis for POST to https://localhost:53437/foo/x8
ClientImpl (async) elapsed 989 millis for POST to https://localhost:53437/foo/x12
ClientImpl (async) elapsed 1071 millis for POST to https://localhost:53437/foo/x4
ClientImpl (async) elapsed 1072 millis for POST to https://localhost:53437/foo/x3
ClientImpl (async) elapsed 1087 millis for POST to https://localhost:53437/foo/x13
ClientImpl (async) elapsed 1185 millis for POST to https://localhost:53437/foo/x1
ClientImpl (async) elapsed 1271 millis for POST to https://localhost:53437/foo/x6
ClientImpl (async) elapsed 1343 millis for POST to https://localhost:53437/foo/x17
ClientImpl (async) elapsed 2889 millis for POST to https://localhost:53437/foo/x15
ClientImpl (async) elapsed 2939 millis for POST to https://localhost:53437/foo/x20
ClientImpl (async) elapsed 3004 millis for POST to https://localhost:53437/foo/x2
ClientImpl (async) elapsed 3049 millis for POST to https://localhost:53437/foo/x7
ClientImpl (async) elapsed 3090 millis for POST to https://localhost:53437/foo/x19
ClientImpl (async) elapsed 3111 millis for POST to https://localhost:53437/foo/x5
ClientImpl (async) elapsed 3153 millis for POST to https://localhost:53437/foo/x18
ClientImpl (async) elapsed 3205 millis for POST to https://localhost:53437/foo/x14
ClientImpl (async) elapsed 3256 millis for POST to https://localhost:53437/foo/x16
ClientImpl (async) elapsed 3309 millis for POST to https://localhost:53437/foo/x9
ClientImpl (async) elapsed 3323 millis for POST to https://localhost:53437/foo/x10
java.util.concurrent.CompletionException: java.net.ConnectException: Connection timed out: connect
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:332)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:347)
	at java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:874)
	at java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:841)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2162)
	at ManyRequestsLegacy$LegacyHttpClient.lambda$sendAsync$0(ManyRequestsLegacy.java:184)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:579)
	at java.base/sun.nio.ch.Net.connect(Net.java:568)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:585)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:633)
	at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:299)
	at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:174)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:498)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:603)
	at java.base/sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:264)
	at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:378)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:189)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1287)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1128)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:175)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(HttpURLConnection.java:1430)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1401)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java:220)
	at ManyRequestsLegacy$LegacyHttpClient.lambda$sendAsync$0(ManyRequestsLegacy.java:175)
	... 1 more

JavaTest Message: Test threw exception: java.util.concurrent.CompletionException: java.net.ConnectException: Connection timed out: connect
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.util.concurrent.CompletionException: java.net.ConnectException: Connection timed out: connect
----------rerun:(42/5405)*----------;;;","2021-12-08 07:32;roboduke;Changeset: 37921e30
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-12-08 15:31:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/37921e30803449c06b4d542fdfeed9928cce8a7d
;;;","2022-04-25 10:58;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Scoped ByteBuffer vector access,JDK-8269246,5052518,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psandoz,psandoz,psandoz,2021-06-23 08:22,2021-07-15 10:16,2023-10-01 09:57,2021-06-24 09:03,17,,,,,,,17,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,,,,"The Foreign Memory API supports viewing a MemorySegment as a ByteBuffer, an instance of which can then be passed to the vector load/store access methods.

Such ByteBuffer access requires accesses are scoped (a method annotated with ScopedMemoryAccess.Scoped) and the ByteBuffer's scope (instance of ScopedMemoryAccess.Scope) checked for validity. Thereby ensuring exceptional failure if a shared buffer has been closed.",,,,,,,,,,,JDK-8270636,JDK-8269449,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tc2j:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-23 14:35;dlong;ILW = potential misbehavior if shared buffer closed, foreign memory API, no workaround = MMH = P3 ;;;","2021-06-24 09:03;roboduke;Changeset: 63bcd333
Author:    Paul Sandoz <psandoz@openjdk.org>
Date:      2021-06-24 16:02:22 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/63bcd3336ecf77a8d256b243c13165397fc8e5bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[IDE] Dependency verification of *-sources.jar fails when doing gradle sync,JDK-8269244,5052517,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mhanl,arapte,arapte,2021-06-23 07:53,2021-09-03 10:20,2023-10-01 09:57,2021-06-28 22:29,jfx16,,,,,,,jfx17,javafx,,0,gradle,ide,intellij,noreg-build,,,,,,,,,,,,,,"This issue was noticed during review of fix for JDK-8267418
PR: https://github.com/openjdk/jfx/pull/506

When importing OpenJFX project in IntelliJ IDE, IntelliJ downloads and tries to verifiy checksum of several *-sources.jar files. We do not have the checksums for the *-sources.jar files, hence the importing fails.

Gradle provides a way to skip the verification of these jar files: https://docs.gradle.org/current/userguide/dependency_verification.html#sec:skipping-javadocs

We need following change to fix this issue:
diff --git a/gradle/verification-metadata.xml b/gradle/verification-metadata.xml
index abacd0b05b..0a3d33726d 100644
--- a/gradle/verification-metadata.xml
+++ b/gradle/verification-metadata.xml
@@ -3,6 +3,9 @@
    <configuration>
       <verify-metadata>true</verify-metadata>
       <verify-signatures>false</verify-signatures>
+      <trusted-artifacts>
+         <trust file="".*-sources[.]jar"" regex=""true""/>
+      </trusted-artifacts>
    </configuration>
    <components>
       <component group="""" name=""ffmpeg-3.3.3"" version="""">

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267418,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tc2b:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2021-06-23 08:05;kcr;[~arapte] Thanks for filing this. I suspect that this could affect other IDEs as well, so I changed the title to be more generic.
;;;","2021-06-23 08:06;kcr;The `gradle/README.txt` file needs to be updated as part of this fix to explain the added entries.;;;","2021-06-28 22:29;roboduke;Changeset: 98e51669
Author:    Marius Hanl <mhanl@openjdk.org>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2021-06-29 05:28:23 +0000
URL:       https://git.openjdk.java.net/jfx/commit/98e516698f02bfd3484ca5721c014dae8ddf80c9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/foreign/stackwalk/TestAsyncStackWalk.java test failed with concurrent GC,JDK-8269240,5052510,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jvernee,zgu,zgu,2021-06-23 07:11,2021-08-19 00:17,2023-10-01 09:57,2021-07-20 06:11,17,18,,,,,,17,hotspot,,0,gc-shenandoah,hs-comp-triaged,jdk17-fix-request,jdk17-fix-yes,oracle-triage-11,oracle-triage-18,redhat-interest,zgc,,,,,,,,,,"The following crash can be easily reproduced with Shenandoah and ZGC.

make CONF=linux-x86_64-server-fastdebug TEST_VM_OPTS=""-XX:+UseShenandoahGC"" run-test TEST=java/foreign/stackwalk/TestAsyncStackWalk.java
or 
 make CONF=linux-x86_64-server-fastdebug TEST_VM_OPTS=""-XX:+UseZGC"" run-test TEST=java/foreign/stackwalk/TestAsyncStackWalk.java



# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/thread.cpp:1968
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/zgu/ws/jdk17/src/hotspot/share/runtime/thread.cpp:1968), pid=1704229, tid=1704245
#  assert((!has_last_Java_frame() && java_call_counter() == 0) || (has_last_Java_frame() && java_call_counter() > 0)) failed: wrong java_sp info!
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-adhoc.zgu.jdk17)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-adhoc.zgu.jdk17, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a6948c]  JavaThread::oops_do_no_frames(OopClosure*, CodeBlobClosure*)+0x1bc
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
",,,,,,,,,,,JDK-8271000,JDK-8271630,JDK-8271753,,,,,,,,,,,,,,,,,,,JDK-8268717,,,,,JDK-8264774,,,,,,"2021-06-23 07:02;zgu;hs_err_pid1706922.log;https://bugs.openjdk.org/secure/attachment/95234/hs_err_pid1706922.log","2021-06-23 07:03;zgu;hs_err_pid1710082.log;https://bugs.openjdk.org/secure/attachment/95233/hs_err_pid1710082.log",,,,,,,,,,,,,,,,,,,"0|i2tc0r:",9223372036854775807,b32,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-06-24 07:18;rehn;I had quick look, to me it looks the issue is that the up-calls was implemented by reversing the down-calls instead doing the same as JavaCallWrapper/~JavaCallWrapper.
This means we do not increment/decrement the java call counter and check_special_condition_for_native_trans is called.
check_special_condition_for_native_trans is written to be used on the back-edge of down calls, it is now used on front edge of up calls?

So instead of running (on back-edge):
  if (_thread->has_pending_exception() && _thread->has_last_Java_frame()) {
    StackWatermarkSet::after_unwind(_thread);
  }  

We are now executing (on front-edge):
StackWatermarkSet::before_unwind(thread);

?

And never incrementing/decrementing the counter.

You can reproduce without a concurrent GC by doing:
-XX:GuaranteedSafepointInterval=1 -XX:+HandshakeALot
The dummy handshake will do a sanity check on the JT and see the inconsistency between the call counter and last frame.;;;","2021-06-24 13:28;jvernee;[~rehn] Hi Robbin, I agree with your assessment. The original code for doing Panama upcalls was written several years ago, and recently ported into the new branch by me. While I did re-examine what some of the original code was doing against JavaCallWrapper & generate_upcall_stub, I had assumed most things were correct. It seems that because of this some things were missed, such as this StackWatermarkSet call, as well as the call counter, and this was never caught during our own testing, or during code review (looking now it seems so obvious...).

I think a re-write of some of the logic is warranted. The suspend check done by JavaCallWrapper is different to what the panama entry code does, and it seems there is no need to re-guard the stack as well. As far as the call to StackWatermarkSet on the back-edge in ~JavaCallWrapper is concerned, this is happening in an if-block guarded by `_thread->has_pending_exception()`, while Panama upcalls can never throw exceptions, so I think we are good there (but some confirmation of this would be nice).

I'm still a bit confused about the assert that is triggered because of the call counter though, since it says there is an active last Java frame, but the call counter is 0, which seems like a valid condition on the calling thread when it is in native code. Though, on the thread doing the upcall, there should never be an active frame anchor AFAICS. (however, adding the call counter increment solves this issue as well).;;;","2021-07-12 10:01;mcimadamore;Raising priority as the issue occurs regardless of which garbage collector is used (but with Shenandoah and ZGC the issue happens more frequently).

Also, even when there is no hard JVM crash, this issue can manifest itself with an upcall values being discarded, which then results in spurious issues when interacting with native code - e.g.

https://mail.openjdk.java.net/pipermail/panama-dev/2021-June/014150.html

;;;","2021-07-13 13:51;dlong;ILW = HLH = P2;;;","2021-07-20 06:11;roboduke;Changeset: 845c31dc
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2021-07-20 13:10:42 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/845c31dc4b49dfbed25238a398c80b8cdd0a3997
;;;","2021-07-20 07:24;jvernee;For the person porting this to the mainline (I think that's [~jwilhelm] ?), the patch adds a call to `current->as_Java_thread()` [1]. This should be changed to `JavaThread::cast(current)` for the mainline. As far as I know that is the only incompatibility.

[1] : https://github.com/openjdk/jdk17/commit/845c31dc4b49dfbed25238a398c80b8cdd0a3997#diff-abdc409967d04172ecc20e3747aa55a79e755584d570b57c4d58902a9813d188R1600;;;","2021-07-20 09:14;kvn;[~jvernee] The fix was integrated into JDK17 without approval which is required for current RDP2 phase:
http://openjdk.java.net/jeps/3#Fix-Request-Process

Please, add label and Fix request comment according to the process. And I will do my part.
;;;","2021-07-20 09:56;jvernee;Fix Request

The test failure uncovered a larger issue with how the Panama Linker API does upcalls. Particularly, the right suspension checks are not being done before entering Java, which besides the assertion failures likely has other unforeseen consequences. Without the fix, the return value of an upcall is also being corrupted in some cases. In other words: there's a risk of spurious crashes, as well as partial loss of function.

The fix simplifies the generated upcall stubs somewhat, since the suspension logic is replaced by 2 calls to C++ helper methods (switching out macro assembler code for C++ code), whose implementations are taken from existing code in JavaCallWrapper's constructor and destructor, which do the right thing. The corrupted return value issue is resolved by saving and restoring the return value, which is straightforward since the surrounding code is already doing this for other values.

The risk of this fix to other HotSpot code is minimal: the changed code is only run when using the Panama Linker API. This API is also still incubating.

Besides the added tests that are part of the fix, combinatorial/stress testing was also added when the same fix was integrated into the panama-foreign repo [1], and these tests have gone through several CI testing cycles without other issues.

The fix has been reviewed by Vladimir Ivanov, and David Holmes.

Link to the Pull Request: https://github.com/openjdk/panama-foreign/pull/565

[1] : https://github.com/openjdk/panama-foreign/pull/565;;;","2021-07-20 09:57;kvn;Fix request for JDK 17 is approved post fact.;;;","2021-07-20 10:51;jwilhelm;[~jvernee] Please review the forwardport of this fix here: https://github.com/openjdk/jdk/pull/4842;;;","2021-08-06 20:32;epavlova;Verified by running the test in mach5 with -XX:+UseZGC flag;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/sa/ClhsdbJstackXcompStress.java timed out,JDK-8269235,5052504,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,dcubed,dcubed,2021-06-23 06:34,2022-11-14 11:41,2023-10-01 09:57,2022-10-26 16:00,11,11.0.18-oracle,17,19,20,,,20,hotspot,,0,intermittent,tier1,tier3,,,,,,,,,,,,,,,"The following test timed out in the JDK17 CI:

serviceability/sa/ClhsdbJstackXcompStress.java

Here's a snippet from the log file:

#section:driver
----------messages:(8/243)----------
command: driver ClhsdbJstackXcompStress
reason: User specified action: run driver ClhsdbJstackXcompStress 
Mode: agentvm
Agent id: 32
Timeout refired 480 times
Timeout information:
--- Timeout information end.
elapsed time (seconds): 1189.855
----------configuration:(16/2073)----------
Boot Layer
  class path: /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/junit.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/hamcrest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/testng.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jcommander.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/guice.jar 
  patch:      java.base /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13247/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3c041654-3b4b-40e4-a31b-70b9690eae60/runs/a380b345-53cd-447e-ab5a-a0f6071ecfb0/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/patches/java.base

Test Layer
  class path: /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13247/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3c041654-3b4b-40e4-a31b-70b9690eae60/runs/a380b345-53cd-447e-ab5a-a0f6071ecfb0/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/1/serviceability/sa/ClhsdbJstackXcompStress.d
              /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+28-2530/src.full/open/test/hotspot/jtreg/serviceability/sa
              /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13247/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3c041654-3b4b-40e4-a31b-70b9690eae60/runs/a380b345-53cd-447e-ab5a-a0f6071ecfb0/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/1/test/lib
              /opt/mach5/mesos/work_dir/jib-master/install/jdk-17+28-2530/src.full/open/test/lib

----------rerun:(30/6070)*----------

<snip>

----------stderr:(4/483)----------
WARNING: A terminally deprecated method in java.lang.System has been called
WARNING: System::setSecurityManager has been called by com.sun.javatest.regtest.agent.RegressionSecurityManager (file:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar)
WARNING: Please consider reporting this to the maintainers of com.sun.javatest.regtest.agent.RegressionSecurityManager
WARNING: System::setSecurityManager will be removed in a future release
----------System.out:(31/3459)----------
Command line: ['/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+28-2530/linux-aarch64-debug.jdk/jdk-17/fastdebug/bin/java' '-XX:MaxRAMPercentage=6.25' '-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13247/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3c041654-3b4b-40e4-a31b-70b9690eae60/runs/a380b345-53cd-447e-ab5a-a0f6071ecfb0/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/tmp' '-XX:+CreateCoredumpOnCrash' '-XX:+UseZGC' '-Xcomp' '-XX:CompileCommand=dontinline,LingeredAppWithRecComputation.factorial' '-XX:CompileCommand=compileonly,LingeredAppWithRecComputation.testLoop' '-XX:CompileCommand=compileonly,LingeredAppWithRecComputation.factorial' '-cp' '/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13247/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3c041654-3b4b-40e4-a31b-70b9690eae60/runs/a380b345-53cd-447e-ab5a-a0f6071ecfb0/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/1/serviceability/sa/ClhsdbJstackXcompStress.d:/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13247/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3c041654-3b4b-40e4-a31b-70b9690eae60/runs/a380b345-53cd-447e-ab5a-a0f6071ecfb0/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/classes/1/test/lib' 'LingeredAppWithRecComputation' 'd1b20ac5-7b76-4663-b045-28243118be44.lck']
Started LingeredAppWithRecComputation with pid 109020
[2021-06-23T11:39:33.894327497Z] Gathering output for process 109091
DEBUG: [ - LingeredAppWithRecComputation.testLoop() @bci=30, line=48 (Compiled frame; information may be imprecise)]
[2021-06-23T11:40:19.169010130Z] Gathering output for process 109304
[2021-06-23T11:40:57.224949464Z] Gathering output for process 109511
[2021-06-23T11:41:20.604855992Z] Gathering output for process 109682
[2021-06-23T11:41:36.896392012Z] Gathering output for process 109780
[2021-06-23T11:42:13.436321330Z] Gathering output for process 109936
[2021-06-23T11:42:27.525046016Z] Gathering output for process 110066
[2021-06-23T11:42:55.384878869Z] Gathering output for process 110239
[2021-06-23T11:43:22.423861645Z] Gathering output for process 110322
[2021-06-23T11:43:43.045167432Z] Gathering output for process 110541
[2021-06-23T11:44:19.965053616Z] Gathering output for process 110730
[2021-06-23T11:44:50.381110847Z] Gathering output for process 110930
[2021-06-23T11:45:16.200984835Z] Gathering output for process 111122
[2021-06-23T11:45:43.236852683Z] Gathering output for process 111275
[2021-06-23T11:46:03.565399933Z] Gathering output for process 111444
[2021-06-23T11:46:32.820724715Z] Gathering output for process 111604
[2021-06-23T11:47:01.005050983Z] Gathering output for process 111741
[2021-06-23T11:47:54.616496298Z] Gathering output for process 111982
[2021-06-23T11:48:31.576407502Z] Gathering output for process 112237
[2021-06-23T11:49:13.346476495Z] Gathering output for process 112490
DEBUG: jhsdb jstack did not throw NPE, as expected.
Test Completed
 LingeredApp stdout: [CompileCommand: dontinline LingeredAppWithRecComputation.factorial bool dontinline = true
CompileCommand: compileonly LingeredAppWithRecComputation.testLoop bool compileonly = true
CompileCommand: compileonly LingeredAppWithRecComputation.factorial bool compileonly = true
];
 LingeredApp stderr: []
 LingeredApp exitValue = 0
----------System.err:(3/35)----------

JavaTest Message: Test complete.

result: Error. Agent error: java.lang.Exception: Agent 32 timed out with a timeout of 480 seconds; check console log for any additional details

Although the test is flagged as timing out, this part of System.out:

DEBUG: jhsdb jstack did not throw NPE, as expected.
Test Completed

Indicates that the test did complete while the timeout handler
was running. It's not clear (to me anyway) whether not throwing
NPE is a failing condition for the test.

This test run's JVM args are: -XX:+CreateCoredumpOnCrash -XX:+UseZGC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287117,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tbzf:",9223372036854775807,b22,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-06-23 11:08;cjplummer;The test timed out after 20 minutes, yet you can see from the timestamps that it completed all 20 iterations in about 10 minutes, and then printed the last message as the test exits:

   DEBUG: jhsdb jstack did not throw NPE, as expected.
   Test Completed 

So this looks more like an a problem with the agent. I see this same failure in two other recent ad hoc jobs, all on the same machine. Usually this test completes in about 1 minute or less on linux-aarch-64. The slowest passing case is about 5 minutes, also on this same machine. Note this machine also popped up in JDK-8241865.

This is where the agent seems to have gotten stuck:

""main"" #1 prio=5 os_prio=0 cpu=11596.90ms elapsed=1157.66s allocated=5900K defined_classes=1433 tid=0x0000fffda802a2f0 nid=0x1a991 runnable  [0x0000fffdad2fd000]
   java.lang.Thread.State: RUNNABLE
Thread: 0x0000fffda802a2f0  [0x1a991] State: _at_safepoint _at_poll_safepoint 0
   JavaThread state: _thread_in_native
	at sun.nio.ch.Net.poll(java.base@17-ea/Native Method)
	at sun.nio.ch.NioSocketImpl.park(java.base@17-ea/NioSocketImpl.java:181)
	at sun.nio.ch.NioSocketImpl.timedRead(java.base@17-ea/NioSocketImpl.java:285)
	at sun.nio.ch.NioSocketImpl.implRead(java.base@17-ea/NioSocketImpl.java:309)
	at sun.nio.ch.NioSocketImpl.read(java.base@17-ea/NioSocketImpl.java:350)
	at sun.nio.ch.NioSocketImpl$1.read(java.base@17-ea/NioSocketImpl.java:803)
	at java.net.Socket$SocketInputStream.read(java.base@17-ea/Socket.java:966)
	at java.io.BufferedInputStream.fill(java.base@17-ea/BufferedInputStream.java:244)
	at java.io.BufferedInputStream.read(java.base@17-ea/BufferedInputStream.java:263)
	- locked <0x00000004d8908658> (a java.io.BufferedInputStream)
	at java.io.FilterInputStream.read(java.base@17-ea/FilterInputStream.java:82)
	at com.sun.javatest.regtest.agent.AgentServer.run(AgentServer.java:227)
	at com.sun.javatest.regtest.agent.AgentServer.main(AgentServer.java:70)

So possibly this is due to an I/O issue with the host.;;;","2021-06-23 12:03;cjplummer;Removed ZGC references as 2 of the 3 failures are without ZGC.;;;","2021-06-29 10:36;mwthomps;host issue;;;","2021-12-17 11:42;dcubed;Here's log file snippets from the jdk-19+3-77-tier3 sighting:

serviceability/sa/ClhsdbJstackXcompStress.java

----------System.out:(32/2943)*----------
Command line: ['c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-19+3-77\\windows-x64-debug.jdk\\jdk-19\\fastdebug\\bin\\java.exe' '-XX:MaxRAMPercentage=4.16667' '-Djava.io.tmpdir=t:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\tmp' '-XX:+CreateCoredumpOnCrash' '-XX:+UseZGC' '-Xcomp' '-XX:CompileCommand=dontinline,LingeredAppWithRecComputation.factorial' '-XX:CompileCommand=compileonly,LingeredAppWithRecComputation.testLoop' '-XX:CompileCommand=compileonly,LingeredAppWithRecComputation.factorial' '-cp' 'T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\classes\\4\\serviceability\\sa\\ClhsdbJstackXcompStress.d;T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_serviceability\\classes\\4\\test\\lib' 'LingeredAppWithRecComputation' 'fedb3760-0b89-483b-a127-304fa22e5ba1.lck']
Started LingeredAppWithRecComputation with pid 65128
[2021-12-17T19:25:38.797577800Z] Gathering output for process 66876
DEBUG: [ - LingeredAppWithRecComputation.testLoop() @bci=36, line=51 (Compiled frame; information may be imprecise)]
[2021-12-17T19:26:03.535018600Z] Gathering output for process 3852
[2021-12-17T19:26:28.844661600Z] Gathering output for process 48476
[2021-12-17T19:26:51.726859600Z] Gathering output for process 29200
[2021-12-17T19:27:15.705614900Z] Gathering output for process 30956
[2021-12-17T19:27:41.874751300Z] Gathering output for process 43860
[2021-12-17T19:28:14.389705500Z] Gathering output for process 20144
[2021-12-17T19:28:27.721718Z] Gathering output for process 57436
[2021-12-17T19:28:52.130719200Z] Gathering output for process 1052
[2021-12-17T19:29:24.346706600Z] Gathering output for process 51896
[2021-12-17T19:29:56.936719300Z] Gathering output for process 66424
[2021-12-17T19:30:25.744739Z] Gathering output for process 55244
[2021-12-17T19:30:55.176733Z] Gathering output for process 24084
[2021-12-17T19:31:27.856716600Z] Gathering output for process 8452
[2021-12-17T19:32:00.744722700Z] Gathering output for process 55728
[2021-12-17T19:32:28.693757600Z] Gathering output for process 58576
[2021-12-17T19:33:01.216724Z] Gathering output for process 50320
[2021-12-17T19:33:13.656718700Z] Gathering output for process 66164
[2021-12-17T19:33:41.191720800Z] Gathering output for process 29532
[2021-12-17T19:34:03.223751700Z] Gathering output for process 8832
DEBUG: jhsdb jstack did not throw NPE, as expected.
Test Completed
 LingeredApp stdout: [CompileCommand: dontinline LingeredAppWithRecComputation.factorial bool dontinline = true
CompileCommand: compileonly LingeredAppWithRecComputation.testLoop bool compileonly = true
CompileCommand: compileonly LingeredAppWithRecComputation.factorial bool compileonly = true
[537.960s][error][attach] could not open (2) pipe \\\\.\\pipe\\javatool-118471756 to send result of operation jcmd
];
 LingeredApp stderr: []
 LingeredApp exitValue = 0
----------System.err:(3/38)----------

JavaTest Message: Test complete.

result: Error. Agent error: java.lang.Exception: Agent 24 timed out with a timeout of 480 seconds; check console log for any additional details;;;","2021-12-17 12:32;cjplummer;The test was written as part of the bug fix for JDK-8196969, whose symptom was an NPE. So the ""DEBUG: jhsdb jstack did not throw NPE, as expected."" message is expected when the test passes.

This failure is showing all the same signs as the original failure (which was linux-aarch64, not windows), including the agent being stuck here:

""main"" #1 prio=5 os_prio=0 cpu=1203.13ms elapsed=560.35s allocated=5668K defined_classes=1365 tid=0x0000016793d95960 nid=39792 runnable  [0x00000036c98fe000]
   java.lang.Thread.State: RUNNABLE
Thread: 0x0000016793d95960  [0x9b70] State: _at_safepoint _at_poll_safepoint 0
   JavaThread state: _thread_in_native
	at sun.nio.ch.Net.poll(java.base@19-ea/Native Method)
	at sun.nio.ch.NioSocketImpl.park(java.base@19-ea/NioSocketImpl.java:178)
	at sun.nio.ch.NioSocketImpl.timedRead(java.base@19-ea/NioSocketImpl.java:282)
	at sun.nio.ch.NioSocketImpl.implRead(java.base@19-ea/NioSocketImpl.java:306)
	at sun.nio.ch.NioSocketImpl.read(java.base@19-ea/NioSocketImpl.java:347)
	at sun.nio.ch.NioSocketImpl$1.read(java.base@19-ea/NioSocketImpl.java:800)
	at java.net.Socket$SocketInputStream.read(java.base@19-ea/Socket.java:966)
	at java.io.BufferedInputStream.fill(java.base@19-ea/BufferedInputStream.java:244)
	at java.io.BufferedInputStream.read(java.base@19-ea/BufferedInputStream.java:263)
	- locked <0x00000004c4032e98> (a java.io.BufferedInputStream)
	at java.io.FilterInputStream.read(java.base@19-ea/FilterInputStream.java:79)
	at com.sun.javatest.regtest.agent.AgentServer.run(AgentServer.java:227)
	at com.sun.javatest.regtest.agent.AgentServer.main(AgentServer.java:70)

So likely this is a host issue again.;;;","2022-05-20 17:03;cjplummer;It seems the original issue was just a one-off of a bad linux-aarch64 host that was resolved by rebooting it. However, we have seen a number of windows failures since then. The test seems to complete in about 10 minutes, but times out after 6 minutes. I've noticed that on most platforms this test always runs in under a minute, but slow run times seem frequent on Windows, although normally still completes in the allotted time without a timeout. So I think maybe all this is just a test bug and it needs a longer timeout to keep slower Windows hosts happy.;;;","2022-10-26 11:36;cjplummer;The test uses the default timeout, which is 2 minutes. The timeoutfactor being used ix 4x, so this gives 8 minutes or 480 seconds. This is why we see:

 Timeout refired 480 times 

When this happens, usually the test takes a little over 10 minutes to complete (and pass). However, the most recent failure above says:

 elapsed time (seconds): 764.054 

So this is nearly 13 minutes. I'm going to give the test 20 minutes (when timeoutfactor 4x is used), so this translate to specifying a timeout of 5 minutes (300 seconds).;;;","2022-10-26 13:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10876
Date: 2022-10-26 20:02:12 +0000;;;","2022-10-26 16:00;dukebot;Changeset: c2d7a35a
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-10-26 22:58:47 +0000
URL:       https://git.openjdk.org/jdk/commit/c2d7a35a4b3ec7d9c567cdd98c2db958c4b2e9d2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(!is_jweak(handle)) failed: wrong method for detroying jweak,JDK-8269232,5052499,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,stefank,stefank,2021-06-23 05:58,2023-01-16 00:30,2023-10-01 09:57,2021-06-29 11:42,16,17,18,,,,,17,core-svc,,0,jdwp,,,,,,,,,,,,,,,,,"#  Internal Error
(/tmp/jep2604_fastdebug_jdk16/jdk16/src/hotspot/share/runtime/jniHandles.cpp:148),
pid=81289, tid=56880
#  assert(!is_jweak(handle)) failed: wrong method for detroying jweak
#
# JRE version: OpenJDK Runtime Environment (16.0) (fastdebug build
16-internal+0-adhoc.sandreev.jdk16)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug
16-internal+0-adhoc.sandreev.jdk16, mixed mode, tiered, compressed oops, g1
gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1043cb4]  JNIHandles::destroy_global(_jobject*)+0x224
...
Stack: [0x00007ffe3c4f5000,0x00007ffe3c5f6000],  sp=0x00007ffe3c5f4be0,
 free space=1022k
Native frames: (J=compiled Java code, A=aot compiled Java code,
j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1043cb4]  JNIHandles::destroy_global(_jobject*)+0x224
V  [libjvm.so+0xfafd9f]  jni_DeleteGlobalRef+0x10f
C  [libjdwp.so+0xf11a]  deleteNode+0x7a
C  [libjdwp.so+0xf71f]  commonRef_reset+0x6f
C  [libjdwp.so+0x10dec]  debugInit_reset+0x6c
C  [libjdwp.so+0x270a2]  acceptThread+0xa2
V  [libjvm.so+0x127c054]  JvmtiAgentThread::call_start_function()+0x1d4
V  [libjvm.so+0x1a51e9a]  JavaThread::thread_main_inner()+0x5ba
V  [libjvm.so+0x1a589e0]  Thread::call_run()+0x100
V  [libjvm.so+0x15fbd26]  thread_native_entry(Thread*)+0x116

See mail:
https://mail.openjdk.java.net/pipermail/jdk-dev/2021-June/005708.html

Seems to be related to:
JDK-8255987

Maybe caused by unbalanced call to commonRef_unpin?",,,,,,,,,,,JDK-8270671,JDK-8269646,JDK-8292272,,,,,,,,,,,,,,,,JDK-8269469,,,,,,,,JDK-8269469,JDK-8255987,JDK-8269542,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbyb:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2021-06-23 06:46;stefank;I wonder if this could be caused by calling commonRef_unpin on a ref that is not ""pinned""? Specifically, look at the updated weakenNode:

static jweak
weakenNode(JNIEnv *env, RefNode *node)
{
    if (node->strongCount == 1) {
...
        return weakRef;
    } else {
        node->strongCount--;
        return node->ref;
    }
}

if strongCount is 0, this will underflow and then delete node will take the wrong path:

if (node->strongCount != 0) {
  JNI_FUNC_PTR(env,DeleteGlobalRef)(env, node->ref);
} else {
  JNI_FUNC_PTR(env,DeleteWeakGlobalRef)(env, node->ref);
}

The previous version of weakenNode looked like this:

static jweak
weakenNode(JNIEnv *env, RefNode *node)
{
    if (node->isStrong) {
...
        return weakRef;
    } else {
        return node->ref;
    }
}

so a unbalanced unpin call would previously not fail in the same way. ;;;","2021-06-23 11:29;cjplummer;There is nothing to guard against calling ObjectReference.enableCollection() more times than ObjectReference.disableCollection() has been called. The specs for JDI and JDWP do not say what to do if this happens. If this is indeed to result of Eclipse doing an extra ObjectReference.enableCollection(), then we need to figure out how to deal with it. In the debug agent you end up in enableCollection() in ObjectReferenceImpl.c, which calls commonRef_unpin(). I think a first step would be to add an assert if strongCount is already 0 to see if this is ever happening.

If the problem is strongCount going to -1, then probably the simplest fix is to keep it at 0 so DeleteWeakGlobalRef() ends up being called. I'm not sure how correct this actually is. If someone makes a call to ObjectReference.enableCollection() without first calling ObjectReference.disableCollection(), it essentially will be ignored. Do we want it to work this way? If the enableCollection() were followed by two disableCollection() calls and then another enabableCollection() call, do we want it collected or not? Ignoring the first enableCollection() means it will not be collected.

Eclipse might also want to look into why the extra ObjectReference.enableCollection() is being done (if indeed this is happening).;;;","2021-06-23 13:12;rkennke;I guess in doubt we should be conservative/defensive and behave similar to how we did before JDK-8255987. I agree, let's first see if strongCount is already 0 when we try to decrease it.;;;","2021-06-24 00:45;sgehwolf;Adding link to JDK-8255987 as the reporter says the problem doesn't happen if that bug is backed-out.;;;","2021-06-24 06:07;pliden;Note that a guard against an imbalanced ref count is already present on the Java-level, see https://github.com/openjdk/jdk/blob/e515873f887ce4071ab4878a4bafca8eea67afea/src/jdk.jdi/share/classes/com/sun/tools/jdi/ObjectReferenceImpl.java#L435

So calling disableCollection() followed by two calls to enableCollection() should not cause the strongCount to become negative, since that second enableCollection() call would see that gcDisableCoule != 0 here:

  public synchronized void enableCollection() {
        gcDisableCount--;

        if (gcDisableCount == 0) {

;;;","2021-06-24 06:43;stefank;Is that the only way to call commonRef_pin/unpin? We also have commonRef_pinAll/unpinAll are they also well-guarded? Could there be some bad interaction between the two?;;;","2021-06-24 08:35;cjplummer;Doing a JDI VM.suspend/resume() will result in calling commonRef_pinAll/unpinAll. JDI knows nothing of this pinAll/unpinAll. It's done by the debug agent implementation of the VM.Suspend/Resume commands, so the debug agent is pinning objects even though JDI is saying the gcDisableCount of all these objects is 0. In general this should not be a problem. This is just adhering to the spec saying ""Note that while the target VM is suspended, no garbage collection will occur because all threads are suspended."" 

If the debugger does a VM.suspend() followed by a ObjectReference().enableCollection(), it looks like JDI will not do a JDWP ObjectReference.EnableCollection because gcDisableCount will go from 0 to -1, so node->strongCount will remain at 1, which I think it what you want. Basically a JDI ObjectReference().enableCollection() is not able to override a JDI VM.suspend(). However, there is no protection at the JDWP level, and JDWP ObjectReference.EnableCollection will undo the strongCount increment done by JDI VM.Suspend. This seems to be a bug at the JDWP level, but we would not see it if JDI is used since it guards against this happening (I'm assuming Eclipse is using the OpenJDK JDI implemantation).

When VM.resume() is done, unpinAll is done and node->strongCount is decremented for all nodes, and they should all go to 0, which is again what we want. Note if ObjectReference.DisableCollection had been done on any object, its strongCount would be decremented from 2 to 1 and still remain pinned until the ObjectReference.EnableCollection is done. This also seems like correct behavior.

So in summary, given the gcDisableCount guards in JDI, I don't see how we are running into this problem, but please someone verify that Eclipse is indeed using the OpenJDK verson of JDI, or if not has the same gcDisableCount guards.;;;","2021-06-24 18:23;dholmes;I believe, from discussions around IDE support for virtual threads in Loom, that Eclipse uses a custom debugging implementation: JDT.;;;","2021-06-25 02:06;sgehwolf;Yes, David is correct. Eclipse seems to be using its own implementation of JDI:
https://github.com/eclipse/eclipse.jdt.debug/blob/master/org.eclipse.jdt.debug/jdi/org/eclipse/jdi/internal/ObjectReferenceImpl.java#L99..L108

Given that, the jdwp code needs to be more defensive. It's a regression from JDK-8255987.;;;","2021-06-25 03:34;sgehwolf;For sake of gathering some more evidence... with this patch:

diff --git a/src/jdk.jdwp.agent/share/native/libjdwp/commonRef.c b/src/jdk.jdwp.agent/share/native/libjdwp/commonRef.c
index 054b736e46b..c5fe4956b4a 100644
--- a/src/jdk.jdwp.agent/share/native/libjdwp/commonRef.c
+++ b/src/jdk.jdwp.agent/share/native/libjdwp/commonRef.c
@@ -27,6 +27,7 @@
 #include <stdint.h>                     /* for uintptr_t */
 #endif
 
+#include <assert.h>
 #include ""util.h""
 #include ""commonRef.h""
 
@@ -146,6 +147,7 @@ deleteNode(JNIEnv *env, RefNode *node)
         /* Clear tag */
         (void)JVMTI_FUNC_PTR(gdata->jvmti,SetTag)
                             (gdata->jvmti, node->ref, NULL_OBJECT_ID);
+        assert(node->strongCount >= 0);
         if (node->strongCount != 0) {
             JNI_FUNC_PTR(env,DeleteGlobalRef)(env, node->ref);
         } else {
@@ -160,6 +162,7 @@ deleteNode(JNIEnv *env, RefNode *node)
 static jobject
 strengthenNode(JNIEnv *env, RefNode *node)
 {
+    assert(node->strongCount >= 0);
     if (node->strongCount == 0) {
         jobject strongRef;
 
@@ -189,6 +192,7 @@ strengthenNode(JNIEnv *env, RefNode *node)
 static jweak
 weakenNode(JNIEnv *env, RefNode *node)
 {
+    assert(node->strongCount >= 0);
     if (node->strongCount == 1) {
         jweak weakRef;
 
@@ -205,6 +209,7 @@ weakenNode(JNIEnv *env, RefNode *node)
         }
         return weakRef;
     } else {
+        assert(node->strongCount != 0);
         node->strongCount--;
         return node->ref;
     }

The Eclipse-based reproducer asserts when calling the second 'instance.enableCollection();' call here:

java: [...]src/jdk.jdwp.agent/share/native/libjdwp/commonRef.c:212: weakenNode: Assertion `node->strongCount != 0' failed.

That is, we hit weakenNode with a node->strongCount of 0 when we try to decrease it's count.;;;","2021-06-25 07:11;sgehwolf;https://github.com/jerboaa/jdk/commit/0af059affaa060fa6dbaaca68082bdbb171aae49 is an attempt which reproduces said assertion. It's not really a working jtreg test, but it somewhat shows the problem by patching the jdk.jdi module's ObjectReferenceImpl.java to not keep track of enable/disableCollection() calls (as Eclipse's implementation does). Note: it depends on the assert for the test to actually fail. If somebody wants to run with it, be my guest.

Fails for me with:

----------System.out:(15/755)----------
vmOpts: '-Xmx20m'
javaOpts: ''
JVM version:18-internal
JDI version: 18.0
JVM description: Java Debug Interface (Reference Implementation) version 18.0
Java Debug Wire Protocol (Reference Implementation) version 18.0
JVM Debug Interface version 18.0
JVM version 18-internal (OpenJDK 64-Bit Server VM, mixed mode, sharing)
DEBUG: UnbalancedUnpinTestTarget.main
DEBUG: invoked constructor
DEBUG: ------------> Running doRunTest
DEBUG: invoked 'void InvokedFromDebugger.testMethod()'
DEBUG: Done invoking method via debugger.
java: /disk/openjdk/upstream-sources/git/jdk-jdk/src/jdk.jdwp.agent/share/native/libjdwp/commonRef.c:212: weakenNode: Assertion `node->strongCount != 0' failed.
DEBUG: Got exception for test run. com.sun.jdi.VMDisconnectedException
----------System.err:(31/2183)----------
[3ms] run args: [UnbalancedUnpinTestTarget, UnbalancedUnpinTestTarget]
com.sun.jdi.VMDisconnectedException
        at jdk.jdi/com.sun.tools.jdi.TargetVM.waitForReply(TargetVM.java:310)
        at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.waitForTargetReply(VirtualMachineImpl.java:1173)
        at jdk.jdi/com.sun.tools.jdi.PacketStream.waitForReply(PacketStream.java:87)
        at jdk.jdi/com.sun.tools.jdi.JDWP$ClassType$NewInstance.waitForReply(JDWP.java:3612)
        at jdk.jdi/com.sun.tools.jdi.ClassTypeImpl.newInstance(ClassTypeImpl.java:221)
        at UnbalancedUnpinTest.doRunTest(UnbalancedUnpinTest.java:165)
        at UnbalancedUnpinTest.runTests(UnbalancedUnpinTest.java:131)
        at TestScaffold.startTests(TestScaffold.java:431)
        at UnbalancedUnpinTest.main(UnbalancedUnpinTest.java:222)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:833)
java.lang.RuntimeException: Test failed! See above for details.
[...];;;","2021-06-25 09:40;cjplummer;I think we have 4 issues here, although only 3 come in to play with the Eclipse issue. Fixing any of the first 3 will resolve the Eclipse issue:

1. Eclipse has an unbalanced ObjectReference.enableCollection() call.
2. The implementation of JDI that comes with eclipse does not guard again unbalanced ObjectReference.enableCollection() calls like the OpenJDK version does.
3. The debug agent does not guard against unbalanced ObjectReference.EnableCollection commands.
4. The debug agent allows ObjectReference.EnableCollection to interfere with pinning done by VirtualMachine.Suspend. Note this can only show up if using JDWP directly, or using a JDI implementation that suffers from (2). To fix this in the debug agent, we really need to split node->strongCount into 2 fields; one for ObjectReference.Enable/DisableCollection and one for VirtualMachine.Suspend/Resume.;;;","2021-06-25 09:52;sgehwolf;> 1. Eclipse has an unbalanced ObjectReference.enableCollection() call.

Note that in the reported instance the source of this unbalance seems to be in an Eclipse-derived third-party application and the same unbalance was present before. JDK-8255987 merely exposed it.

Implementing 3. via this bug seems good defensive coding.;;;","2021-06-25 10:03;cjplummer;A couple more findings:

 - The old debug agent did not do counting of ObjectReference.Enable/DisableCollection commands. Once ObjectReference.DisableCollection was done, the object was pinned. If this ObjectReference.DisableCollection was repeated, it had no impact. ObjectReference.EnableCollection always unpinned the object no matter how many ObjectReference.DisableCollection was used before it. Reading the JDWP spec, this seems to be correct behavior. So it is a bug in the new implementation that node->isStrong was changed to node->strongCount. I think this should be addressed the same time as (4) that I mentioned above, since it was changed to a count to support pinning of all objects when VirtualMachine.Suspend is done. We need to track ""strengthening"" done by ObjectReference.DisableCollection separately from strengthening done by VirtualMachine.Suspend, and keep the object pinned if either strengthening is in effect. This also means that (3) above is not really a bug. When the debug agent no longer counts ObjectReference.Enable/DisableCollection commands, then (3) goes away.

 - Unlike JDWP, JDI says that calls to ObjectReference.enable/disableCollection are counted. Since JDI is doing the counting, there really is no need for JDWP to do so. However, as pointed out in (2) above, the Eclipse JDI is not honoring this part of the spec.
;;;","2021-06-25 10:14;cjplummer;Properly fixing (4) is a bit of a risk for 17. I'll file a separate CR for it.

I think the simplest fix to make Eclipse happy, but not really address the other issues mentioned in (4), it to simply guard against decrementing strongCount below 0. I'd feel comfortable with that fix going into 17. I think this proposed patch is doing that properly:

http://cr.openjdk.java.net/~rkennke/fixlibjdwp.patch

diff --git a/src/jdk.jdwp.agent/share/native/libjdwp/commonRef.c b/src/jdk.jdwp.agent/share/native/libjdwp/commonRef.c
index 054b736e46b..be52477e44c 100644
--- a/src/jdk.jdwp.agent/share/native/libjdwp/commonRef.c
+++ b/src/jdk.jdwp.agent/share/native/libjdwp/commonRef.c
@@ -205,7 +205,9 @@ weakenNode(JNIEnv *env, RefNode *node)
         }
         return weakRef;
     } else {
-        node->strongCount--;
+        if (node->strongCount > 0) {
+          node->strongCount--;
+        }
         return node->ref;
     }
 }
;;;","2021-06-25 10:41;rkennke;Does anyone here have an Eclipse account or is contributor there and could file a bug report?;;;","2021-06-25 11:17;cjplummer;BTW, do we have confirmation that the patch fixes the problem? I didn't see any mention on serviceability-dev.;;;","2021-06-28 01:48;sgehwolf;> Does anyone here have an Eclipse account or is contributor there and could file a bug report?

I have. What do you need filed exactly? The JDI spec issue or something else?;;;","2021-06-28 01:50;sgehwolf;> BTW, do we have confirmation that the patch fixes the problem? I didn't see any mention on serviceability-dev. 

[~cjplummer] Yes we have. See https://bugzilla.redhat.com/show_bug.cgi?id=1972529#c15;;;","2021-06-28 02:21;rkennke;>> Does anyone here have an Eclipse account or is contributor there and could file a bug report?

> I have. What do you need filed exactly? The JDI spec issue or something else? 

Yes, exactly.;;;","2021-06-28 05:23;sgehwolf;Eclipse bug: https://bugs.eclipse.org/bugs/show_bug.cgi?id=574500;;;","2021-06-28 13:20;cjplummer;I filed the following to eventually address this properly and fix other issues introduced by JDK-8255987

JDK-8269542: JDWP: EnableCollection support is no longer spec compliant after JDK-8255987

In the meantime I'll address this CR with the above mentioned simple fix:;;;","2021-06-29 11:42;roboduke;Changeset: 401cb0ad
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-06-29 18:41:19 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/401cb0ad5517f5962061c7155354380a4c342ddf
;;;","2022-01-19 10:20;cjplummer;[~sgehwolf] I have a fix for JDK-8269542 which is going to effectively replace the fix already done for this CR. Can you apply the patch and verify that this Eclipse issue does not come back? Thanks.

https://patch-diff.githubusercontent.com/raw/openjdk/jdk/pull/7134.diff;;;","2022-01-19 10:48;sgehwolf;[~cjplummer] OK. I'll test it tomorrow and will report back. Hopefully I still have the reproducer ;-);;;","2022-01-20 05:44;sgehwolf;[~cjplummer] Tested and it still seems to work fine (no crash observed).;;;",,,,,,,,,,,,
C2: main loop in micro benchmark never executed,JDK-8269230,5052497,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,mcimadamore,mcimadamore,2021-06-23 04:34,2021-08-12 07:30,2023-10-01 09:57,2021-07-01 00:42,17,18,repo-panama,,,,,17,hotspot,,0,c2,c2-loopopts,foreign-memaccess,hs-comp-triaged,oracle-triage-11,performance,,,,,,,,,,,,"The attached benchmark has interesting results:

```
Benchmark                               (size)  Mode  Cnt    Score   Error  Units
TestLoadBytes.arrayScalar                 1024  avgt   10  241.256 ? 1.028  ns/op
TestLoadBytes.arrayScalarConst            1024  avgt   10  244.251 ? 5.218  ns/op
TestLoadBytes.bufferNativeScalar          1024  avgt   10  262.128 ? 1.251  ns/op
TestLoadBytes.bufferNativeScalarConst     1024  avgt   10  250.552 ? 2.710  ns/op
TestLoadBytes.segmentNativeScalar         1024  avgt   10  722.670 ? 6.427  ns/op
TestLoadBytes.segmentNativeScalarConst    1024  avgt   10  253.419 ? 3.043  ns/op
```

Access using segment is almost 4x slower than using byte buffers. When investigating the generated compiled code, it seems like all the time is spent in the post-loop, and that the main loop (which seems to unroll correctly) is never executed.",,,,,,,,,,,JDK-8270692,JDK-8269780,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272372,,,,,,"2021-06-23 04:35;mcimadamore;TestLoadBytes.java;https://bugs.openjdk.org/secure/attachment/95232/TestLoadBytes.java",,,,,,,,,,,,,,,,,,,,"0|i2tbxv:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-23 14:21;dlong;[~roland], could you take a look at this?;;;","2021-06-23 14:22;dlong;ILW = suboptimal code, one benchmark, no workaround = MMH = P3;;;","2021-06-23 14:24;dlong;[~mcimadamore], this should affect 18 as well, correct?;;;","2021-06-29 09:26;kvn;This is performance issue for very very corner case:

for (int i = 0; i < limit; i++) {
  if (!(i < max_jint && i > min_jint)) {
    uncommon_trap();
  }
}

The suggested fix may affect other cases. And this is not a bug IMHO - it is RFE which we should spend more time to investigate. I would suggest to defer it to JDK 18.;;;","2021-06-29 09:35;psandoz;[~kvn] it's not so rare because it affects loops over memory segments of the foreign memory API, which underneath works around the current C2 code generation limitations for long loops. Perhaps there is another way to work around this in Java?;;;","2021-06-29 10:02;kvn;[~psandoz] Yes, if you can find a way to fix it in Java it would be nice. 
The pattern `(i < max_jint && i > min_jint)`, where `i` is Integer, is very confusing for RCE (Range check elimination) code and we may need time to investigate and fix it.
;;;","2021-06-29 14:39;mcimadamore;I can attempt a fix in Java, but I somewhat disagree that this is not a bug - in the sense that C2 is effectively generating dead code, which seems buggy behavior. As for this being a corner case, well, I can understand, except that, as [~psandoz] said, checks like these are the basis of workarounds we have all over the implementation of the Panama memory access API, which are required because we don't have full support for RCE over long loops [1] - so our API is kind of stuck between two bad places at the moment.

[1] - https://github.com/openjdk/jdk/pull/2045;;;","2021-06-29 16:35;kvn;Okay, I got it. Thank you for providing this information because without it it looks like corner case.
I will do review of the PR.;;;","2021-06-29 16:56;kvn;Paul or Maurizio can you point me to code in foreign memory API which produces this code pattern?
NM, you attached the test case.
;;;","2021-06-29 17:00;kvn;I don't see this test in test/micro/org/openjdk/bench/jdk/incubator/foreign/
I think we should add it as part of PR.
;;;","2021-06-30 04:04;mcimadamore;I agree that the micro benchmark should be added, possibly as part of the PR.;;;","2021-07-01 00:42;roboduke;Changeset: c67a7b03
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-07-01 07:41:22 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/c67a7b039de0dbb379123fb49780ae5b246dcf74
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
JFR.stop misses the written info when the filename is only specified by JFR.start,JDK-8269225,5052490,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ddong,ddong,ddong,2021-06-23 02:20,2021-06-30 17:15,2023-10-01 09:57,2021-06-25 01:17,,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,"```
$jcmd 87802 JFR.start name=test
87802:
Started recording 2. No limit specified, using maxsize=250MB as default.

Use jcmd 87802 JFR.dump name=test filename=FILEPATH to copy recording data to file.

$jcmd 87802 JFR.stop name=test filename=1.jfr
87802:
Stopped recording ""test"", 200.9 kB written to:

/home/denghui.ddh/my-jdk/1.jfr

$jcmd 87802 JFR.start name=test filename=2.jfr
87802:
Started recording 1. No limit specified, using maxsize=250MB as default.

Use jcmd 87802 JFR.dump name=test to copy recording data to file.

$jcmd 87802 JFR.stop name=test
87802:
Stopped recording ""test"".
```

The second 'JFR.stop' didn't print written info, but actually, 2.jfr was generated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbwb:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-06-25 01:17;roboduke;Changeset: fd43d9cb
Author:    Denghui Dong <ddong@openjdk.org>
Committer: Yi Yang <yyang@openjdk.org>
Date:      2021-06-25 08:15:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fd43d9cb40f7e4b0f5ebc490e0490a222b8f2770
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
-Xcheck:jni WARNINGs working with fonts on Linux,JDK-8269223,5052488,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vprovodin,vprovodin,vprovodin,2021-06-23 02:07,2021-11-09 07:42,2023-10-01 09:57,2021-08-23 13:30,11,16,17,7,8,,,18,client-libs,,0,redhat-interest,,,,,,,,,,,,,,,,,"Running Pycharm IDE with -Xcheck:jni on Linux with the latest OpenJDK resulted in a large number of warning messages following these two unique patterns:

WARNING in native method: JNI call made without checking exceptions when required to from CallIntMethod
at sun.font.FreetypeFontScaler.initNativeScaler(java.desktop@18-internal/Native Method)
at sun.font.FreetypeFontScaler.<init>(java.desktop@18-internal/FreetypeFontScaler.java:67)
at sun.font.FontScaler.getScaler(java.desktop@18-internal/FontScaler.java:102)
at sun.font.TrueTypeFont.getScaler(java.desktop@18-internal/TrueTypeFont.java:1249)
- locked <0x00000000db7b3f60> (a sun.font.TrueTypeFont)
at sun.font.FileFontStrike.<init>(java.desktop@18-internal/FileFontStrike.java:162)
...


WARNING in native method: JNI call made without checking exceptions when required to from CallIntMethod
at sun.font.FreetypeFontScaler.getGlyphImageNative(java.desktop@18-internal/Native Method)
at sun.font.FreetypeFontScaler.getGlyphImage(java.desktop@18-internal/FreetypeFontScaler.java:115)
- locked <0x00000000dce03b60> (a sun.font.FreetypeFontScaler)
at sun.font.FileFont.getGlyphImage(java.desktop@18-internal/FileFont.java:199)
...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276809,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,"0|i2tbvv:",9223372036854775807,b12,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2021-06-23 08:43;prr;Apart from ""bug fix"" tweaks I think the related JNI functionality here has been unchanged since the inception of OpenJDK in 2007,
so there's no real problem here, just theoretical JNI fussiness ...;;;","2021-08-23 13:30;roboduke;Changeset: 9bc02322
Author:    Maxim Kartashev <maxim.kartashev@jetbrains.com>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2021-08-23 20:28:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9bc023220fbbb0b6ea1ed1a0ca2aa3848764e8cd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect number of workers reported for reference processing,JDK-8269222,5052486,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,ayang,ayang,2021-06-23 01:45,2021-07-06 13:28,2023-10-01 09:57,2021-06-28 03:48,18,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,"With `gc+phases+ref=debug`, the following log is generated using Parallel GC. Note that the number of non-strong refs is <1000 (default value of `ReferencesPerThread`), so only 1 worker should be used. However, it prints ""Workers: 10"" (10 is the #Parallel Workers).

```
[3.284s][debug][gc,phases,ref] GC(0)   Reconsider SoftReferences: 0.0ms
[3.284s][debug][gc,phases,ref] GC(0)     SoftRef (ms):                  skipped
[3.284s][debug][gc,phases,ref] GC(0)   Notify Soft/WeakReferences: 0.1ms
[3.284s][debug][gc,phases,ref] GC(0)     SoftRef (ms):                  Min:  0.0, Avg:  0.0, Max:  0.0, Diff:  0.0, Sum:  0.0, Workers: 10
[3.284s][debug][gc,phases,ref] GC(0)     WeakRef (ms):                  Min:  0.0, Avg:  0.0, Max:  0.1, Diff:  0.1, Sum:  0.1, Workers: 10
[3.284s][debug][gc,phases,ref] GC(0)     FinalRef (ms):                 Min:  0.0, Avg:  0.0, Max:  0.0, Diff:  0.0, Sum:  0.0, Workers: 10
[3.284s][debug][gc,phases,ref] GC(0)     Total (ms):                    Min:  0.0, Avg:  0.0, Max:  0.1, Diff:  0.1, Sum:  0.1, Workers: 10
[3.284s][debug][gc,phases,ref] GC(0)   Notify and keep alive finalizable: 0.0ms
[3.284s][debug][gc,phases,ref] GC(0)     FinalRef (ms):                 skipped
[3.284s][debug][gc,phases,ref] GC(0)   Notify PhantomReferences: 0.0ms
[3.284s][debug][gc,phases,ref] GC(0)     PhantomRef (ms):               Min:  0.0, Avg:  0.0, Max:  0.0, Diff:  0.0, Sum:  0.0, Workers: 10
[3.284s][debug][gc,phases,ref] GC(0)   SoftReference:
[3.284s][debug][gc,phases,ref] GC(0)     Discovered: 0
[3.284s][debug][gc,phases,ref] GC(0)     Cleared: 0
[3.284s][debug][gc,phases,ref] GC(0)   WeakReference:
[3.284s][debug][gc,phases,ref] GC(0)     Discovered: 348
[3.284s][debug][gc,phases,ref] GC(0)     Cleared: 220
[3.284s][debug][gc,phases,ref] GC(0)   FinalReference:
[3.284s][debug][gc,phases,ref] GC(0)     Discovered: 3
[3.284s][debug][gc,phases,ref] GC(0)     Cleared: 3
[3.284s][debug][gc,phases,ref] GC(0)   PhantomReference:
[3.284s][debug][gc,phases,ref] GC(0)     Discovered: 157
[3.284s][debug][gc,phases,ref] GC(0)     Cleared: 68
```

Those lines are printed by `WorkerDataArray<T>::print_summary_on`, which has built-in logic for skipping ""inactive"" workers. However, when a single worker is used for ref processing, the ""worker id"", used by `WorkerDataArray` to decide which worker is active, is incorrect.

In `ReferenceProcessor::run_task`, the else branch is for ref processing using a single thread (sequential case):

```
  if (processing_is_mt()) {
    ...
  } else {
    for (unsigned i = 0; i < _max_num_queues; ++i) {
      proxy_task.work(i);          <--- here we are passing [0.._max_num_queues-1] as ""worker id""
    }
  }
```

This confuses WorkerDataArray to believe many workers are active in this subphase of ref-processing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbvf:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-28 03:47;roboduke;Changeset: 87ff2778
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2021-06-28 10:47:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/87ff27786b7310840aab00c391e2a7fa19a3c328
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GaloisCounterMode.overlapDetection misses the JDK-8263436 fix again,JDK-8269218,5052482,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-06-23 00:51,2021-07-15 10:16,2023-10-01 09:57,2021-06-23 23:38,17,,,,,,,17,security-libs,,0,noreg-cleanup,sonarcloud-found,,,,,,,,,,,,,,,,"SonarCloud again complains about GaloisCounterMode.overlapDetection, in the similar way JDK-8263436 did. I think JDK-8255557 accidentally reintroduced the old code. 

The tangential question if JDK-8255557 reverted anything else.",,,,,,,,,,,JDK-8270635,JDK-8269448,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263436,JDK-8255557,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbuj:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2021-06-23 23:38;roboduke;Changeset: 3fb28d30
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-06-24 06:37:21 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/3fb28d3074dfb33d8b7e489c9a55f52d4e0b954b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Useless initialization in com/sun/crypto/provider/PBES2Parameters.java,JDK-8269216,5052480,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-06-23 00:23,2021-11-09 07:49,2023-10-01 09:57,2021-06-23 23:37,11,17,18,8,,,,18,security-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-cleanup,,,,,,,,,,,,,,,"SonarCloud reports:
""Remove or correct this useless self-assignment.""

        if (cipherAlgo.equals(""AES"")) {
            this.keysize = keysize; // <---- here
            switch (keysize) {
            case 128:
                cipherAlgo_OID = aes128CBC_OID;

Seems to be here since initial addition in JDK-6383200.",,,,,,,,,,,JDK-8276868,JDK-8276712,,,,,,,,,,,,,,,,,,,,JDK-6383200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbu3:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2021-06-23 23:37;roboduke;Changeset: e515873f
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-06-24 06:36:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e515873f887ce4071ab4878a4bafca8eea67afea
;;;","2021-11-03 14:28;akasko;Fix request (17u)

This is a clean backport of a minor cleanup.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Directories in /opt/runtimepackagetest and /path/to/jdk-17 are different,JDK-8269185,5052448,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,efrenkel,efrenkel,2021-06-22 17:32,2022-08-23 09:58,2023-10-01 09:57,2021-07-07 09:58,17,,,,,,,17,tools,,0,jpackage,sn_96,sn_97,sqebug,,,,,,,,,,,,,,"Tested with JDK 17+26
Environment: OEL 8.3 x64

Steps to reproduce:
(1) Check preconditions:
    (a) VERIFY There are no JREs/JDKs installed.
(2) Open command line and navigate to location test artifacts can be found after running run_tests.sh
(3) Install artifact_name: sudo rpm -i runtimepackagetest-1.0-1.x86_64.rpm
(4) In terminal run: diff -r /opt/runtimepackagetest /path/to/jdk-17

Expected result:
Nothing is returned from command (meaning directories are identical).

Actual behavior:
The directories /opt/runtimepackagetest and /path/to/jdk-17 are different. Please see screenshot.

Affected Tests:
JPKG003-009: RuntimePackageTest

IMT Bug: 2158",,,,,,,,,,,JDK-8270053,JDK-8270729,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-29 10:47;efrenkel;OEL_8.3_JDK_17_b26.mp4;https://bugs.openjdk.org/secure/attachment/95298/OEL_8.3_JDK_17_b26.mp4","2021-06-22 17:29;efrenkel;image-2021-06-22-17-29-23-860.png;https://bugs.openjdk.org/secure/attachment/95222/image-2021-06-22-17-29-23-860.png","2021-06-28 12:59;efrenkel;java_differ.png;https://bugs.openjdk.org/secure/attachment/95276/java_differ.png",,,,,,,,,,,,,,linux,,,,"0|i2tbmz:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-06-22 18:02;asemenyuk;It is strange that binary files differ.;;;","2021-06-24 14:57;asemenyuk;Can't reproduce the problem. This is my action log:
---
[asemenyu@spacewalk ~]$ wget https://jpg-data.us.oracle.com/artifactory/re-release-local/jdk/17/26/bundles/linux-x64/jdk-17-ea+26_linux-x64_bin.tar.gz
Saving to: ‘jdk-17-ea+26_linux-x64_bin.tar.gz’
[asemenyu@spacewalk ~]$ tar -xzf jdk-17-ea+26_linux-x64_bin.tar.gz 
[asemenyu@spacewalk ~]$ JT_BUNDLE_URL=https://jpg-data.us.oracle.com/artifactory/re-release-local/jtreg/6/1/bundles/jtreg-6+1.zip /media/sf_jds/work/10new/jdk10/open/test/jdk/tools/jpackage/run_tests.sh -o /media/sf_jds/work/10new/jpackage_tests/linux -t jdk-17 -- test/jdk/tools/jpackage/share/RuntimePackageTest.java
JAVA_HOME environment variable not set, will use java from test JDK [jdk-17] to run jtreg
jtreg jar file: /tmp/jpackage_jtreg_testing/jtreg/lib/jtreg.jar
Directory ""/tmp/jpackage_jtreg_testing/run/support"" not found: creating
Passed: tools/jpackage/share/RuntimePackageTest.java#id1
Test results: passed: 1
Results written to /tmp/jpackage_jtreg_testing/run/support
[asemenyu@spacewalk ~]$ sudo rpm --install /media/sf_jds/work/10new/jpackage_tests/linux/runtimepackagetest-1.0-1.x86_64.rpm 
[sudo] password for asemenyu: 
[asemenyu@spacewalk ~]$ diff -f /opt/runtimepackagetest/ jdk-17
Common subdirectories: /opt/runtimepackagetest/bin and jdk-17/bin
Common subdirectories: /opt/runtimepackagetest/conf and jdk-17/conf
Common subdirectories: /opt/runtimepackagetest/include and jdk-17/include
Common subdirectories: /opt/runtimepackagetest/jmods and jdk-17/jmods
Common subdirectories: /opt/runtimepackagetest/legal and jdk-17/legal
Common subdirectories: /opt/runtimepackagetest/lib and jdk-17/lib
Common subdirectories: /opt/runtimepackagetest/man and jdk-17/man
[asemenyu@spacewalk ~]$ 
---

Seems like wrong directories were compared by accident. Please double check.;;;","2021-06-25 10:17;efrenkel;[~asemenyuk] I see that you ran the test using ""diff -f"", the instructions say to run with ""diff -r"". Can you try again with the correct command? You should then be able to reproduce the issue;;;","2021-06-25 11:14;asemenyuk;Oh, my bad, I messed the flag. But ""diff -r"" shows no differences:
---
[asemenyu@spacewalk ~]$ diff -r /opt/runtimepackagetest/ jdk-17
[asemenyu@spacewalk ~]$ echo $?
0
[asemenyu@spacewalk ~]$ 
---;;;","2021-06-28 12:57;efrenkel;I asked IMT to double check, they can reproduce this issue.

From IMT:
I rechecked on OEL 8.3 x64 and I can reproduce this problem with JDK_17_b26, JDK_17_b27, JDK_17_b28. This is my action log:
---
[root@localhost Desktop]# export JT_HOME='/root/Desktop/jpackage/jtreg'
[root@localhost Desktop]# bash '/root/Desktop/jpackage/open/test/jdk/tools/jpackage/run_tests.sh' -o '/root/Desktop/linux' -t '/root/Desktop/jpackage/jdk-17' -- '/root/Desktop/jpackage/open/test/jdk/tools/jpackage/share/RuntimePackageTest.java'
JAVA_HOME environment variable not set, will use java from test JDK [/root/Desktop/jpackage/jdk-17] to run jtreg
jtreg jar file: /root/Desktop/jpackage/jtreg/lib/jtreg.jar
Directory ""/tmp/jpackage_jtreg_testing/run/support"" not found: creating
Passed: tools/jpackage/share/RuntimePackageTest.java#id1
Test results: passed: 1
Results written to /tmp/jpackage_jtreg_testing/run/support
[root@localhost Desktop]# sudo rpm --install '/root/Desktop/linux/runtimepackagetest-1.0-1.x86_64.rpm'
package runtimepackagetest-1.0-1.x86_64 is already installed
[root@localhost Desktop]# diff -r '/opt/runtimepackagetest' '/root/Desktop/jpackage/jdk-17'
Binary files /opt/runtimepackagetest/bin/jar and /root/Desktop/jpackage/jdk-17/bin/jar differ
Binary files /opt/runtimepackagetest/bin/jarsigner and /root/Desktop/jpackage/jdk-17/bin/jarsigner differ
Binary files /opt/runtimepackagetest/bin/java and /root/Desktop/jpackage/jdk-17/bin/java differ
Binary files /opt/runtimepackagetest/bin/javac and /root/Desktop/jpackage/jdk-17/bin/javac differ
Binary files /opt/runtimepackagetest/bin/javadoc and /root/Desktop/jpackage/jdk-17/bin/javadoc differ
Binary files /opt/runtimepackagetest/bin/javap and /root/Desktop/jpackage/jdk-17/bin/javap differ
Binary files /opt/runtimepackagetest/bin/jcmd and /root/Desktop/jpackage/jdk-17/bin/jcmd differ
Binary files /opt/runtimepackagetest/bin/jconsole and /root/Desktop/jpackage/jdk-17/bin/jconsole differ
Binary files /opt/runtimepackagetest/bin/jdb and /root/Desktop/jpackage/jdk-17/bin/jdb differ
Binary files /opt/runtimepackagetest/bin/jdeprscan and /root/Desktop/jpackage/jdk-17/bin/jdeprscan differ
Binary files /opt/runtimepackagetest/bin/jdeps and /root/Desktop/jpackage/jdk-17/bin/jdeps differ
Binary files /opt/runtimepackagetest/bin/jfr and /root/Desktop/jpackage/jdk-17/bin/jfr differ
Binary files /opt/runtimepackagetest/bin/jhsdb and /root/Desktop/jpackage/jdk-17/bin/jhsdb differ
Binary files /opt/runtimepackagetest/bin/jimage and /root/Desktop/jpackage/jdk-17/bin/jimage differ
Binary files /opt/runtimepackagetest/bin/jinfo and /root/Desktop/jpackage/jdk-17/bin/jinfo differ
Binary files /opt/runtimepackagetest/bin/jlink and /root/Desktop/jpackage/jdk-17/bin/jlink differ
Binary files /opt/runtimepackagetest/bin/jmap and /root/Desktop/jpackage/jdk-17/bin/jmap differ
Binary files /opt/runtimepackagetest/bin/jmod and /root/Desktop/jpackage/jdk-17/bin/jmod differ
Binary files /opt/runtimepackagetest/bin/jpackage and /root/Desktop/jpackage/jdk-17/bin/jpackage differ
Binary files /opt/runtimepackagetest/bin/jps and /root/Desktop/jpackage/jdk-17/bin/jps differ
Binary files /opt/runtimepackagetest/bin/jrunscript and /root/Desktop/jpackage/jdk-17/bin/jrunscript differ
Binary files /opt/runtimepackagetest/bin/jshell and /root/Desktop/jpackage/jdk-17/bin/jshell differ
Binary files /opt/runtimepackagetest/bin/jstack and /root/Desktop/jpackage/jdk-17/bin/jstack differ
Binary files /opt/runtimepackagetest/bin/jstat and /root/Desktop/jpackage/jdk-17/bin/jstat differ
Binary files /opt/runtimepackagetest/bin/jstatd and /root/Desktop/jpackage/jdk-17/bin/jstatd differ
Binary files /opt/runtimepackagetest/bin/keytool and /root/Desktop/jpackage/jdk-17/bin/keytool differ
Binary files /opt/runtimepackagetest/bin/rmiregistry and /root/Desktop/jpackage/jdk-17/bin/rmiregistry differ
Binary files /opt/runtimepackagetest/bin/serialver and /root/Desktop/jpackage/jdk-17/bin/serialver differ
Binary files /opt/runtimepackagetest/lib/jexec and /root/Desktop/jpackage/jdk-17/lib/jexec differ
Binary files /opt/runtimepackagetest/lib/jspawnhelper and /root/Desktop/jpackage/jdk-17/lib/jspawnhelper differ
Binary files /opt/runtimepackagetest/lib/libattach.so and /root/Desktop/jpackage/jdk-17/lib/libattach.so differ
Binary files /opt/runtimepackagetest/lib/libawt_headless.so and /root/Desktop/jpackage/jdk-17/lib/libawt_headless.so differ
Binary files /opt/runtimepackagetest/lib/libawt.so and /root/Desktop/jpackage/jdk-17/lib/libawt.so differ
Binary files /opt/runtimepackagetest/lib/libawt_xawt.so and /root/Desktop/jpackage/jdk-17/lib/libawt_xawt.so differ
Binary files /opt/runtimepackagetest/lib/libdt_socket.so and /root/Desktop/jpackage/jdk-17/lib/libdt_socket.so differ
Binary files /opt/runtimepackagetest/lib/libextnet.so and /root/Desktop/jpackage/jdk-17/lib/libextnet.so differ
Binary files /opt/runtimepackagetest/lib/libfontmanager.so and /root/Desktop/jpackage/jdk-17/lib/libfontmanager.so differ
Binary files /opt/runtimepackagetest/lib/libinstrument.so and /root/Desktop/jpackage/jdk-17/lib/libinstrument.so differ
Binary files /opt/runtimepackagetest/lib/libj2gss.so and /root/Desktop/jpackage/jdk-17/lib/libj2gss.so differ
Binary files /opt/runtimepackagetest/lib/libj2pcsc.so and /root/Desktop/jpackage/jdk-17/lib/libj2pcsc.so differ
Binary files /opt/runtimepackagetest/lib/libj2pkcs11.so and /root/Desktop/jpackage/jdk-17/lib/libj2pkcs11.so differ
Binary files /opt/runtimepackagetest/lib/libjaas.so and /root/Desktop/jpackage/jdk-17/lib/libjaas.so differ
Binary files /opt/runtimepackagetest/lib/libjavajpeg.so and /root/Desktop/jpackage/jdk-17/lib/libjavajpeg.so differ
Binary files /opt/runtimepackagetest/lib/libjava.so and /root/Desktop/jpackage/jdk-17/lib/libjava.so differ
Binary files /opt/runtimepackagetest/lib/libjawt.so and /root/Desktop/jpackage/jdk-17/lib/libjawt.so differ
Binary files /opt/runtimepackagetest/lib/libjdwp.so and /root/Desktop/jpackage/jdk-17/lib/libjdwp.so differ
Binary files /opt/runtimepackagetest/lib/libjimage.so and /root/Desktop/jpackage/jdk-17/lib/libjimage.so differ
Binary files /opt/runtimepackagetest/lib/libjli.so and /root/Desktop/jpackage/jdk-17/lib/libjli.so differ
Binary files /opt/runtimepackagetest/lib/libjsig.so and /root/Desktop/jpackage/jdk-17/lib/libjsig.so differ
Binary files /opt/runtimepackagetest/lib/libjsound.so and /root/Desktop/jpackage/jdk-17/lib/libjsound.so differ
Binary files /opt/runtimepackagetest/lib/liblcms.so and /root/Desktop/jpackage/jdk-17/lib/liblcms.so differ
Binary files /opt/runtimepackagetest/lib/libmanagement_agent.so and /root/Desktop/jpackage/jdk-17/lib/libmanagement_agent.so differ
Binary files /opt/runtimepackagetest/lib/libmanagement_ext.so and /root/Desktop/jpackage/jdk-17/lib/libmanagement_ext.so differ
Binary files /opt/runtimepackagetest/lib/libmanagement.so and /root/Desktop/jpackage/jdk-17/lib/libmanagement.so differ
Binary files /opt/runtimepackagetest/lib/libmlib_image.so and /root/Desktop/jpackage/jdk-17/lib/libmlib_image.so differ
Binary files /opt/runtimepackagetest/lib/libnet.so and /root/Desktop/jpackage/jdk-17/lib/libnet.so differ
Binary files /opt/runtimepackagetest/lib/libnio.so and /root/Desktop/jpackage/jdk-17/lib/libnio.so differ
Binary files /opt/runtimepackagetest/lib/libprefs.so and /root/Desktop/jpackage/jdk-17/lib/libprefs.so differ
Binary files /opt/runtimepackagetest/lib/librmi.so and /root/Desktop/jpackage/jdk-17/lib/librmi.so differ
Binary files /opt/runtimepackagetest/lib/libsaproc.so and /root/Desktop/jpackage/jdk-17/lib/libsaproc.so differ
Binary files /opt/runtimepackagetest/lib/libsctp.so and /root/Desktop/jpackage/jdk-17/lib/libsctp.so differ
Binary files /opt/runtimepackagetest/lib/libsplashscreen.so and /root/Desktop/jpackage/jdk-17/lib/libsplashscreen.so differ
Binary files /opt/runtimepackagetest/lib/libsvml.so and /root/Desktop/jpackage/jdk-17/lib/libsvml.so differ
Binary files /opt/runtimepackagetest/lib/libsyslookup.so and /root/Desktop/jpackage/jdk-17/lib/libsyslookup.so differ
Binary files /opt/runtimepackagetest/lib/libverify.so and /root/Desktop/jpackage/jdk-17/lib/libverify.so differ
Binary files /opt/runtimepackagetest/lib/libzip.so and /root/Desktop/jpackage/jdk-17/lib/libzip.so differ
Binary files /opt/runtimepackagetest/lib/server/libjsig.so and /root/Desktop/jpackage/jdk-17/lib/server/libjsig.so differ
Binary files /opt/runtimepackagetest/lib/server/libjvm.so and /root/Desktop/jpackage/jdk-17/lib/server/libjvm.so differ
[root@localhost Desktop]#
---;;;","2021-06-28 13:19;asemenyuk;In the test log:
---
[root@localhost Desktop]# sudo rpm --install '/root/Desktop/linux/runtimepackagetest-1.0-1.x86_64.rpm'
package runtimepackagetest-1.0-1.x86_64 is already installed
---
The newly created /root/Desktop/linux/runtimepackagetest-1.0-1.x86_64.rpm was not installed. I don't see how this IMT response makes a difference.;;;","2021-06-28 15:43;asemenyuk;I've tried it on OL8.3 and can't reproduce the issue:
---
$ /cygdrive/c/HashiCorp/Vagrant/bin/vagrant.exe ssh

Welcome to Oracle Linux Server release 8.3 (GNU/Linux 5.4.17-2036.100.6.1.el8uek.x86_64)

[vagrant@localhost ~]$ uname -r
5.4.17-2036.100.6.1.el8uek.x86_64
[vagrant@localhost ~]$ wget https://jpg-data.us.oracle.com/artifactory/re-release-local/jdk/17/26/bundles/linux-x64/jdk-17-ea+26_linux-x64_bin.tar.gz
[vagrant@localhost ~]$ tar -xzf jdk-17-ea+26_linux-x64_bin.tar.gz
[vagrant@localhost ~]$  JT_BUNDLE_URL=https://jpg-data.us.oracle.com/artifactory/re-release-local/jtreg/6/1/bundles/jtreg-6+1.zip /media/sf_jds/work/10new/jdk10/open/test/jdk/tools/jpackage/run_tests.sh -o /media/sf_jds/work/10new/jpackage_tests/linux -t jdk-17 -- test/jdk/tools/jpackage/share/RuntimePackageTest.java
Directory ""/tmp/jpackage_jtreg_testing/run/support"" not found: creating
Passed: tools/jpackage/share/RuntimePackageTest.java#id1
Test results: passed: 1
Results written to /tmp/jpackage_jtreg_testing/run/support
[vagrant@localhost ~]$ sudo rpm --install /vagrant_jds/work/10new/jpackage_tests/linux/runtimepackagetest-1.0-1.x86_64.rpm
[vagrant@localhost ~]$ diff -r /opt/runtimepackagetest jdk-17
[vagrant@localhost ~]$ echo $?
0
---;;;","2021-06-29 10:48;efrenkel;IMT tried again on a new OEL 8.3 x64 virtual machine. Tested with JDK 17+26.
This is the action log:
---
[root@localhost Desktop]# '/root/Desktop/jpackage/jdk-17/bin/java' -version
java version ""17-ea"" 2021-09-14 LTS
Java(TM) SE Runtime Environment (build 17-ea+26-LTS-2439)
Java HotSpot(TM) 64-Bit Server VM (build 17-ea+26-LTS-2439, mixed mode, sharing)
[root@localhost Desktop]# uname -r
5.4.17-2011.7.4.el8uek.x86_64
[root@localhost Desktop]# echo $?
0
[root@localhost Desktop]# export JT_HOME='/root/Desktop/jpackage/jtreg'
[root@localhost Desktop]# bash '/root/Desktop/jpackage/open/test/jdk/tools/jpackage/run_tests.sh' -t '/root/Desktop/jpackage/jdk-17' -o '/root/Desktop/output' -- '/root/Desktop/jpackage/open/test/jdk/tools/jpackage/share/RuntimePackageTest.java'
JAVA_HOME environment variable not set, will use java from test JDK [/root/Desktop/jpackage/jdk-17] to run jtreg
jtreg jar file: /root/Desktop/jpackage/jtreg/lib/jtreg.jar
Directory ""/tmp/jpackage_jtreg_testing/run/support"" not found: creating
Passed: tools/jpackage/share/RuntimePackageTest.java#id1
Test results: passed: 1
Results written to /tmp/jpackage_jtreg_testing/run/support
[root@localhost Desktop]# sudo rpm -i '/root/Desktop/output/runtimepackagetest-1.0-1.x86_64.rpm'
[root@localhost Desktop]# diff -r '/opt/runtimepackagetest' '/root/Desktop/jpackage/jdk-17'
Binary files /opt/runtimepackagetest/bin/jar and /root/Desktop/jpackage/jdk-17/bin/jar differ
Binary files /opt/runtimepackagetest/bin/jarsigner and /root/Desktop/jpackage/jdk-17/bin/jarsigner differ
Binary files /opt/runtimepackagetest/bin/java and /root/Desktop/jpackage/jdk-17/bin/java differ
Binary files /opt/runtimepackagetest/bin/javac and /root/Desktop/jpackage/jdk-17/bin/javac differ
Binary files /opt/runtimepackagetest/bin/javadoc and /root/Desktop/jpackage/jdk-17/bin/javadoc differ
Binary files /opt/runtimepackagetest/bin/javap and /root/Desktop/jpackage/jdk-17/bin/javap differ
Binary files /opt/runtimepackagetest/bin/jcmd and /root/Desktop/jpackage/jdk-17/bin/jcmd differ
Binary files /opt/runtimepackagetest/bin/jconsole and /root/Desktop/jpackage/jdk-17/bin/jconsole differ
Binary files /opt/runtimepackagetest/bin/jdb and /root/Desktop/jpackage/jdk-17/bin/jdb differ
Binary files /opt/runtimepackagetest/bin/jdeprscan and /root/Desktop/jpackage/jdk-17/bin/jdeprscan differ
Binary files /opt/runtimepackagetest/bin/jdeps and /root/Desktop/jpackage/jdk-17/bin/jdeps differ
Binary files /opt/runtimepackagetest/bin/jfr and /root/Desktop/jpackage/jdk-17/bin/jfr differ
Binary files /opt/runtimepackagetest/bin/jhsdb and /root/Desktop/jpackage/jdk-17/bin/jhsdb differ
Binary files /opt/runtimepackagetest/bin/jimage and /root/Desktop/jpackage/jdk-17/bin/jimage differ
Binary files /opt/runtimepackagetest/bin/jinfo and /root/Desktop/jpackage/jdk-17/bin/jinfo differ
Binary files /opt/runtimepackagetest/bin/jlink and /root/Desktop/jpackage/jdk-17/bin/jlink differ
Binary files /opt/runtimepackagetest/bin/jmap and /root/Desktop/jpackage/jdk-17/bin/jmap differ
Binary files /opt/runtimepackagetest/bin/jmod and /root/Desktop/jpackage/jdk-17/bin/jmod differ
Binary files /opt/runtimepackagetest/bin/jpackage and /root/Desktop/jpackage/jdk-17/bin/jpackage differ
Binary files /opt/runtimepackagetest/bin/jps and /root/Desktop/jpackage/jdk-17/bin/jps differ
Binary files /opt/runtimepackagetest/bin/jrunscript and /root/Desktop/jpackage/jdk-17/bin/jrunscript differ
Binary files /opt/runtimepackagetest/bin/jshell and /root/Desktop/jpackage/jdk-17/bin/jshell differ
Binary files /opt/runtimepackagetest/bin/jstack and /root/Desktop/jpackage/jdk-17/bin/jstack differ
Binary files /opt/runtimepackagetest/bin/jstat and /root/Desktop/jpackage/jdk-17/bin/jstat differ
Binary files /opt/runtimepackagetest/bin/jstatd and /root/Desktop/jpackage/jdk-17/bin/jstatd differ
Binary files /opt/runtimepackagetest/bin/keytool and /root/Desktop/jpackage/jdk-17/bin/keytool differ
Binary files /opt/runtimepackagetest/bin/rmiregistry and /root/Desktop/jpackage/jdk-17/bin/rmiregistry differ
Binary files /opt/runtimepackagetest/bin/serialver and /root/Desktop/jpackage/jdk-17/bin/serialver differ
Binary files /opt/runtimepackagetest/lib/jexec and /root/Desktop/jpackage/jdk-17/lib/jexec differ
Binary files /opt/runtimepackagetest/lib/jspawnhelper and /root/Desktop/jpackage/jdk-17/lib/jspawnhelper differ
Binary files /opt/runtimepackagetest/lib/libattach.so and /root/Desktop/jpackage/jdk-17/lib/libattach.so differ
Binary files /opt/runtimepackagetest/lib/libawt_headless.so and /root/Desktop/jpackage/jdk-17/lib/libawt_headless.so differ
Binary files /opt/runtimepackagetest/lib/libawt.so and /root/Desktop/jpackage/jdk-17/lib/libawt.so differ
Binary files /opt/runtimepackagetest/lib/libawt_xawt.so and /root/Desktop/jpackage/jdk-17/lib/libawt_xawt.so differ
Binary files /opt/runtimepackagetest/lib/libdt_socket.so and /root/Desktop/jpackage/jdk-17/lib/libdt_socket.so differ
Binary files /opt/runtimepackagetest/lib/libextnet.so and /root/Desktop/jpackage/jdk-17/lib/libextnet.so differ
Binary files /opt/runtimepackagetest/lib/libfontmanager.so and /root/Desktop/jpackage/jdk-17/lib/libfontmanager.so differ
Binary files /opt/runtimepackagetest/lib/libinstrument.so and /root/Desktop/jpackage/jdk-17/lib/libinstrument.so differ
Binary files /opt/runtimepackagetest/lib/libj2gss.so and /root/Desktop/jpackage/jdk-17/lib/libj2gss.so differ
Binary files /opt/runtimepackagetest/lib/libj2pcsc.so and /root/Desktop/jpackage/jdk-17/lib/libj2pcsc.so differ
Binary files /opt/runtimepackagetest/lib/libj2pkcs11.so and /root/Desktop/jpackage/jdk-17/lib/libj2pkcs11.so differ
Binary files /opt/runtimepackagetest/lib/libjaas.so and /root/Desktop/jpackage/jdk-17/lib/libjaas.so differ
Binary files /opt/runtimepackagetest/lib/libjavajpeg.so and /root/Desktop/jpackage/jdk-17/lib/libjavajpeg.so differ
Binary files /opt/runtimepackagetest/lib/libjava.so and /root/Desktop/jpackage/jdk-17/lib/libjava.so differ
Binary files /opt/runtimepackagetest/lib/libjawt.so and /root/Desktop/jpackage/jdk-17/lib/libjawt.so differ
Binary files /opt/runtimepackagetest/lib/libjdwp.so and /root/Desktop/jpackage/jdk-17/lib/libjdwp.so differ
Binary files /opt/runtimepackagetest/lib/libjimage.so and /root/Desktop/jpackage/jdk-17/lib/libjimage.so differ
Binary files /opt/runtimepackagetest/lib/libjli.so and /root/Desktop/jpackage/jdk-17/lib/libjli.so differ
Binary files /opt/runtimepackagetest/lib/libjsig.so and /root/Desktop/jpackage/jdk-17/lib/libjsig.so differ
Binary files /opt/runtimepackagetest/lib/libjsound.so and /root/Desktop/jpackage/jdk-17/lib/libjsound.so differ
Binary files /opt/runtimepackagetest/lib/liblcms.so and /root/Desktop/jpackage/jdk-17/lib/liblcms.so differ
Binary files /opt/runtimepackagetest/lib/libmanagement_agent.so and /root/Desktop/jpackage/jdk-17/lib/libmanagement_agent.so differ
Binary files /opt/runtimepackagetest/lib/libmanagement_ext.so and /root/Desktop/jpackage/jdk-17/lib/libmanagement_ext.so differ
Binary files /opt/runtimepackagetest/lib/libmanagement.so and /root/Desktop/jpackage/jdk-17/lib/libmanagement.so differ
Binary files /opt/runtimepackagetest/lib/libmlib_image.so and /root/Desktop/jpackage/jdk-17/lib/libmlib_image.so differ
Binary files /opt/runtimepackagetest/lib/libnet.so and /root/Desktop/jpackage/jdk-17/lib/libnet.so differ
Binary files /opt/runtimepackagetest/lib/libnio.so and /root/Desktop/jpackage/jdk-17/lib/libnio.so differ
Binary files /opt/runtimepackagetest/lib/libprefs.so and /root/Desktop/jpackage/jdk-17/lib/libprefs.so differ
Binary files /opt/runtimepackagetest/lib/librmi.so and /root/Desktop/jpackage/jdk-17/lib/librmi.so differ
Binary files /opt/runtimepackagetest/lib/libsaproc.so and /root/Desktop/jpackage/jdk-17/lib/libsaproc.so differ
Binary files /opt/runtimepackagetest/lib/libsctp.so and /root/Desktop/jpackage/jdk-17/lib/libsctp.so differ
Binary files /opt/runtimepackagetest/lib/libsplashscreen.so and /root/Desktop/jpackage/jdk-17/lib/libsplashscreen.so differ
Binary files /opt/runtimepackagetest/lib/libsvml.so and /root/Desktop/jpackage/jdk-17/lib/libsvml.so differ
Binary files /opt/runtimepackagetest/lib/libsyslookup.so and /root/Desktop/jpackage/jdk-17/lib/libsyslookup.so differ
Binary files /opt/runtimepackagetest/lib/libverify.so and /root/Desktop/jpackage/jdk-17/lib/libverify.so differ
Binary files /opt/runtimepackagetest/lib/libzip.so and /root/Desktop/jpackage/jdk-17/lib/libzip.so differ
Binary files /opt/runtimepackagetest/lib/server/libjsig.so and /root/Desktop/jpackage/jdk-17/lib/server/libjsig.so differ
Binary files /opt/runtimepackagetest/lib/server/libjvm.so and /root/Desktop/jpackage/jdk-17/lib/server/libjvm.so differ
[root@localhost Desktop]#;;;","2021-07-02 12:29;asemenyuk;I can reproduce the issue on OL8.3 after fixing configuration issues.;;;","2021-07-02 13:58;asemenyuk;OL8.3 rpmbuild is increasing size of executable files by some reason.

Adding ""%global __os_install_post %{nil}"" to spec file fixed the issue.

rpmbuild log output without ""%global __os_install_post %{nil}"" in spec file:
---
+ /usr/lib/rpm/check-buildroot
+ /usr/lib/rpm/redhat/brp-ldconfig
/sbin/ldconfig: Warning: ignoring configuration file that cannot be opened: /etc/ld.so.conf: No such file or directory
+ /usr/lib/rpm/brp-compress
+ /usr/lib/rpm/brp-strip /usr/bin/strip
+ /usr/lib/rpm/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump
+ /usr/lib/rpm/brp-strip-static-archive /usr/bin/strip
+ /usr/lib/rpm/brp-python-bytecompile '' 1
+ /usr/lib/rpm/brp-python-hardlink
+ PYTHON3=/usr/libexec/platform-python
+ /usr/lib/rpm/redhat/brp-mangle-shebangs
Processing files:
---

rpmbuild log output with ""%global __os_install_post %{nil}"" in spec file:
---
+ /usr/lib/rpm/check-buildroot
Processing files:
---
;;;","2021-07-07 09:58;roboduke;Changeset: 6000950b
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2021-07-07 16:57:07 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/6000950b339e4346292b69079f16ce0d4c278246
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] Wrong icon displayed in FileAssociationTest for linux,JDK-8269181,5052444,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,efrenkel,efrenkel,efrenkel,2021-06-22 17:00,2021-06-24 13:57,2023-10-01 09:57,2021-06-24 13:57,17,,,,,,,17,tools,,0,jpackage,noreg-self,sqebug,testbug,,,,,,,,,,,,,,"Tested with JDK 17+26
Reproducible on Ubuntu 20.04 x64 and OEL 8.3 x64

Steps to reproduce:
(1) Check preconditions:
    (a) VERIFY There are no JREs/JDKs installed.
(2)  Create <test_file_2>: In terminal run command: echo > foo.jptest2
(3) Install artifact_name: sudo rpm -i fileassociationstest-1.0-1.x86_64.rpm
(4) In file explorer, navigate to location <test_file_2> was created in step 2

Expected result:
foo.jptest2 has java cup icon
Dev assessment: After JDK-8261826, all Default Icons are now java cup.

Actual behavior:
foo.jptest2 displays Duke icon.

Affected Tests:
JPKG003-006: FileAssociationsTest
JPKG004-006: FileAssociationsTest

IMT bug: 
2156

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261826,,,,,,"2021-06-22 16:59;efrenkel;image-2021-06-22-16-59-50-895.png;https://bugs.openjdk.org/secure/attachment/95221/image-2021-06-22-16-59-50-895.png",,,,,,,,,,,,,,,,linux,,,,"0|i2tbm3:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2021-06-24 13:50;asemenyuk;$JDK/test/jdk/tools/jpackage/resources/icon.png (https://github.com/openjdk/jdk/blob/master/test/jdk/tools/jpackage/resources/icon.png) is used in the test for file associations, not Java cup icon. Duke icon on the screenshot is as expected. Test spec should be updated accordingly: foo.jptest2 should have Duke icon that looks as https://github.com/openjdk/jdk/blob/master/test/jdk/tools/jpackage/resources/icon.png.;;;","2021-06-24 13:57;efrenkel;test spec has been updated accordingly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash in TestMacroLogicVector::testSubWordBoolean: assert(_base >= VectorMask && _base <= VectorZ) failed: Not a Vector,JDK-8269179,5052442,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,dholmes,dholmes,2021-06-22 16:37,2021-10-08 00:22,2023-10-01 09:57,2021-06-23 18:18,15.0.5,17,18,,,,,17,hotspot,,0,11-na,hs-comp-triaged,jdk15u-fix-request,jdk15u-fix-yes,oracle-triage-11,oracle-triage-17,tencent-interest,tier1,tier3,tier7,vectorapi,,,,,,,"TEST: compiler/vectorization/TestMacroLogicVector.java

new Vector node:  2084  StoreVector  ===  1571  1574  1470  2083  [[ 2077  337  1574 ]]  @bool[int:>=0]:NotNull:exact+any *, idx=6; mismatched  Memory: @bool[int:>=0]:NotNull:exact+any *, idx=6; !orig=[1465],[1207],[1041],[921],[765],[338],287 !jvms: TestMacroLogicVector::testSubWordBoolean @ bci:19 (line 48)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/type.hpp:1714
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/runner/work/jdk17/jdk17/jdk/src/hotspot/share/opto/type.hpp:1714), pid=55910, tid=55925
#  assert(_base >= VectorMask && _base <= VectorZ) failed: Not a Vector
#
# JRE version: OpenJDK Runtime Environment (17.0) (fastdebug build 17-internal+0-shipilev-9645acd269a69be95ce4abce1cb40b334975a8b3)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17-internal+0-shipilev-9645acd269a69be95ce4abce1cb40b334975a8b3, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb50964]  State::_sub_Op_MacroLogicV(Node const*)+0x1b4
#

Only seen in Github actions testing e.g.

https://github.com/shipilev/jdk17/runs/2887815196

https://pipelines.actions.githubusercontent.com/b7odfrG6rG7jT7gNK71L5uXQXQKFto0eNFHGlQjN4yyOVoHRdB/_apis/pipelines/1/runs/3/signedlogcontent/245?urlExpires=2021-06-22T23%3A37%3A22.7747906Z&urlSigningMethod=HMACV1&urlSignature=BZl2es5n1hMttgxhulcd4cqyj5osvDMTmqsDln3tk%2B4%3D",Github Actions environment,,,,,,,,,,JDK-8270632,JDK-8269445,JDK-8274948,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267652,JDK-8269260,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,"0|i2tbln:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-22 18:13;dholmes;This occurred when testing an update to gcc 10.3 (from 10.2) so that is possibly why we haven't seen this crash before.;;;","2021-06-22 18:45;jiefu;No.
It crashed after JDK-8267652 on avx512-only machines.
I'll fix it later.;;;","2021-06-22 19:01;dlong;ILW = assert in one test, observed in github testing, no workaround = MMH = P3;;;","2021-06-22 19:01;jiefu;diff --git a/src/hotspot/cpu/x86/x86.ad b/src/hotspot/cpu/x86/x86.ad
index 5c8fd48..ea50eeb 100644
--- a/src/hotspot/cpu/x86/x86.ad
+++ b/src/hotspot/cpu/x86/x86.ad
@@ -8074,7 +8074,7 @@ instruct vpternlog(vec dst, vec src2, vec src3, immU8 func) %{
 %}
 
 instruct vpternlog_mem(vec dst, vec src2, memory src3, immU8 func) %{
-  predicate(vector_length_in_bytes(n->in(1)) > 8);
+  predicate(vector_length_in_bytes(n->in(1)->in(1)) > 8);
   match(Set dst (MacroLogicV (Binary dst src2) (Binary (LoadVector src3) func)));
   effect(TEMP dst);
   format %{ ""vpternlogd $dst,$src2,$src3,$func\t! vector ternary logic"" %};;;","2021-06-22 19:02;kvn;[~jiefu] Thank you for taking it. Please, base fix and PR on JDK 17 repo - we need to fix it in JDK 17 (it will be ported into 18 late by gatekeeper).;;;","2021-06-22 19:06;kvn;JDK 18 is also affected because JDK-8267652 was forward ported into it.;;;","2021-06-23 18:18;roboduke;Changeset: a30141d6
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-06-24 01:17:56 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/a30141d636ff6cfe6a009a5f7422b732081cd2df
;;;","2021-06-24 07:52;dcubed;The fix for this bug is in jdk-17+29-2535.
It has not yet been synced to the jdk/jdk repo.;;;","2021-10-07 12:33;vkempik;Setting 11-na as there is a plan to backport 8267652 to openjdk11 and vpternlog_mem is missing in 11.;;;","2021-10-07 12:37;vkempik;Fix Request (15u):
Need to backport this to jdk15u-dev too, as it's affected after the backport of 8267652
Applies clean;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macosx-aarch64] wrong CPU speed in hs_err file,JDK-8269175,5052435,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gziemski,gziemski,gziemski,2021-06-22 13:49,2021-12-20 00:18,2023-10-01 09:57,2021-10-18 09:25,17,18,,,,,,18,hotspot,,0,azul-interest,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"I currently see:

Host: gerard-mac, ""Macmini9,1"" arm64 1 MHz, 8 cores, 16G, Darwin 20.5.0, macOS 11.4 (20F71)

in hs_err log file, but according to https://en.wikipedia.org/wiki/Apple_M1 it's rated at 3.2GHz",,,,,,,,,,,JDK-8278995,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,"0|i2tbk3:",9223372036854775807,b20,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-29 14:49;dcubed;I suspect that the hs_err_pid file gets some of its info from sysctl...

On my M1 MacMini I see this:

$ sysctl -a | grep machdep.cpu
machdep.cpu.brand_string: Apple M1
machdep.cpu.core_count: 8
machdep.cpu.cores_per_package: 8
machdep.cpu.logical_per_package: 8
machdep.cpu.thread_count: 8

and on my Intel based MBP13, I see:

$ sysctl -a | grep machdep.cpu
machdep.cpu.max_basic: 22
machdep.cpu.max_ext: 2147483656
machdep.cpu.vendor: GenuineIntel
machdep.cpu.brand_string: Intel(R) Core(TM) i7-8569U CPU @ 2.80GHz
machdep.cpu.family: 6
machdep.cpu.model: 142
machdep.cpu.extmodel: 8
machdep.cpu.extfamily: 0
machdep.cpu.stepping: 10
machdep.cpu.feature_bits: 9221959987971750911
machdep.cpu.leaf7_feature_bits: 43804591 0
machdep.cpu.leaf7_feature_bits_edx: 2617257472
machdep.cpu.extfeature_bits: 1241984796928
machdep.cpu.signature: 526058
machdep.cpu.brand: 0
machdep.cpu.features: FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE SSE3 PCLMULQDQ DTES64 MON DSCPL VMX EST TM2 SSSE3 FMA CX16 TPR PDCM SSE4.1 SSE4.2 x2APIC MOVBE POPCNT AES PCID XSAVE OSXSAVE SEGLIM64 TSCTMR AVX1.0 RDRAND F16C
machdep.cpu.leaf7_features: RDWRFSGS TSC_THREAD_OFFSET SGX BMI1 AVX2 SMEP BMI2 ERMS INVPCID FPU_CSDS MPX RDSEED ADX SMAP CLFSOPT IPT MDCLEAR TSXFA IBRS STIBP L1DF SSBD
machdep.cpu.extfeatures: SYSCALL XD 1GBPAGE EM64T LAHF LZCNT PREFETCHW RDTSCP TSCI
machdep.cpu.logical_per_package: 16
machdep.cpu.cores_per_package: 8
machdep.cpu.microcode_version: 234
machdep.cpu.processor_flag: 6
machdep.cpu.mwait.linesize_min: 64
machdep.cpu.mwait.linesize_max: 64
machdep.cpu.mwait.extensions: 3
machdep.cpu.mwait.sub_Cstates: 286531872
machdep.cpu.thermal.sensor: 1
machdep.cpu.thermal.dynamic_acceleration: 1
machdep.cpu.thermal.invariant_APIC_timer: 1
machdep.cpu.thermal.thresholds: 2
machdep.cpu.thermal.ACNT_MCNT: 1
machdep.cpu.thermal.core_power_limits: 1
machdep.cpu.thermal.fine_grain_clock_mod: 1
machdep.cpu.thermal.package_thermal_intr: 1
machdep.cpu.thermal.hardware_feedback: 0
machdep.cpu.thermal.energy_policy: 1
machdep.cpu.xsave.extended_state: 31 832 1088 0
machdep.cpu.xsave.extended_state1: 15 832 256 0
machdep.cpu.arch_perf.version: 4
machdep.cpu.arch_perf.number: 4
machdep.cpu.arch_perf.width: 48
machdep.cpu.arch_perf.events_number: 7
machdep.cpu.arch_perf.events: 0
machdep.cpu.arch_perf.fixed_number: 3
machdep.cpu.arch_perf.fixed_width: 48
machdep.cpu.cache.linesize: 64
machdep.cpu.cache.L2_associativity: 4
machdep.cpu.cache.size: 256
machdep.cpu.tlb.inst.large: 8
machdep.cpu.tlb.data.small: 64
machdep.cpu.tlb.data.small_level1: 64
machdep.cpu.address_bits.physical: 39
machdep.cpu.address_bits.virtual: 48
machdep.cpu.core_count: 4
machdep.cpu.thread_count: 8
machdep.cpu.tsc_ccc.numerator: 234
machdep.cpu.tsc_ccc.denominator: 2

There's a a huge difference between the amount of
info returned for the two platforms.

Update: Found more specific sysctl values:

From my Intel based MBP13:

$ sysctl -a | grep cpufreq
hw.cpufrequency: 2800000000
hw.cpufrequency_min: 2800000000
hw.cpufrequency_max: 2800000000

$ sysctl -a | grep hw.cpu
hw.cpu64bit_capable: 1
hw.cpufamily: 458787763
hw.cpusubfamily: 2
hw.cpusubtype: 2
hw.cputype: 16777228;;;","2021-06-29 14:57;dcubed;The one liner from the hs_err_pid file looks like this:

Host: <host>, ""Macmini9,1"" arm64 1 MHz, 8 cores, 16G, Darwin 20.5.0, macOS 11.4 (20F71)

and that one liner is generated by this code:

src/hotspot/share/runtime/os.cpp: os::print_summary_info()

// Print a one line string summarizing the cpu, number of cores, memory, and operating system version
void os::print_summary_info(outputStream* st, char* buf, size_t buflen) {
  st->print(""Host: "");
#ifndef PRODUCT
  if (get_host_name(buf, buflen)) {
    st->print(""%s, "", buf);
  }
#endif // PRODUCT
  get_summary_cpu_info(buf, buflen);
  st->print(""%s, "", buf);

src/hotspot/os/bsd/os_bsd.cpp: os::get_summary_cpu_info()

void os::get_summary_cpu_info(char* buf, size_t buflen) {
  unsigned int mhz;
  size_t size = sizeof(mhz);
  int mib[] = { CTL_HW, HW_CPU_FREQ };
  if (sysctl(mib, 2, &mhz, &size, NULL, 0) < 0) {
    mhz = 1;  // looks like an error but can be divided by
  } else {
    mhz /= 1000000;  // reported in millions
  }


Looks like the sysctl() call is returning an error for the value:

  int mib[] = { CTL_HW, HW_CPU_FREQ };;;;","2021-07-09 09:44;dcubed;I poked around Apple -> About This Mac:

- the Overview tab only shows:
      ""Chip  Apple M1""
  versus:
      ""Processor 2.8 GHz Quad-Core Intel Core i7""
  on my MBP13
- System Report -> Hardware Overview only shows:
     ""Chip:	Apple M1""
  versus:
    Processor Name:	Quad-Core Intel Core i7
    Processor Speed:	2.8 GHz
  on my MBP13.

It seems to me that Apple is definitely and intentionally restricting the availability
of processor info for the M1 MacMinis. It could be how things are done on Big Sur
since I haven't checked an X64 Big Sur machine.;;;","2021-07-12 17:50;dholmes;I checked an x64 Big Sur machine and it shows the same processor details for Intel.

Googling indicates Apple are not reporting speeds for Apple Silicon as it not a useful/meaningful measure of anything.;;;","2021-10-11 09:47;gziemski;It seems that the fix here is not to bother printing the CPU clock speed at all on aarch64 M1;;;","2021-10-12 09:37;gziemski;Current behavior:

#1 Crashing on native jdk running on M1 produces wrong CPU speed of 1MHz:
  Host: ""Macmini9,1"" arm64 1 MHz, 8 cores, 16G, Darwin 20.5.0, macOS 11.4 (20F71)

#2 Crashing on non-native jdk running on M1 in emulation mode produces synthetic CPU speed of 2400 MHz:
  Host: ""Macmini9,1"" x86_64 (EMULATED) 2400 MHz, 8 cores, 16G, Darwin 20.5.0, macOS 11.4 (20F71)

I am not sure how useful the CPU speed is in #2, but I think that we can leave that alone for now.

We should fix #1 by simply removing the CPU speed shown.;;;","2021-10-12 10:00;gziemski;Proposed fix:

#if defined(__APPLE__) && !defined(ZERO)
  if (VM_Version::is_cpu_emulated()) {
    snprintf(buf, buflen, ""\""%s\"" %s (EMULATED) %d MHz"", model, machine, mhz);
  } else {
    // M1 doesn't report CPU speed
    snprintf(buf, buflen, ""\""%s\"" %s"", model, machine);
  }
#else
  snprintf(buf, buflen, ""\""%s\"" %s %d MHz"", model, machine, mhz);
#endif

changes the output:

  Host: gerard-mac, ""Macmini9,1"" arm64 1 MHz, 8 cores, 16G, Darwin 20.5.0, macOS 11.4 (20F71) 

to:

  Host: gerard-mac, ""Macmini9,1"" arm64, 8 cores, 16G, Darwin 20.5.0, macOS 11.4 (20F71)
;;;","2021-10-12 13:27;gziemski;https://github.com/openjdk/jdk/pull/5916;;;","2021-10-18 09:25;roboduke;Changeset: bcbe3845
Author:    Gerard Ziemski <gziemski@openjdk.org>
Date:      2021-10-18 16:24:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bcbe3845d92e38ad0086cc337dc5957842eef056
;;;","2021-12-16 08:29;vkempik;Fix Request(17u): This fixes small issue with reporting cpu parameters on macos/m1 systems.
Applies clean.
Rebased on top of jdk17u-dev;;;","2021-12-17 01:00;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk17u-dev/pull/2
Date: 2021-12-17 08:55:07 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
UnicodeReader not translating \u005c\\u005d to \\],JDK-8269150,5052409,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlaskey,jlaskey,jlaskey,2021-06-22 11:07,2021-08-05 13:13,2023-10-01 09:57,2021-07-26 11:06,16,17,,,,,,17,tools,,0,jdk17-fix-request,jdk17-fix-yes,,,,,,,,,,,,,,,,"In the example 

public class T {
  public static void main(String[] args) {
    System.out.println(""\u005C\\u005D"");
  }
}

The leading \u005C, equivalent to a backslash, should escape the following backslash and the output should be ""\]"". This was broken by JDK-8254073 (and subsequent patches) in JDK 16. JDK 16 generates an 'invalid escape' error.




",,,,,,,,,,,JDK-8271312,JDK-8271662,JDK-8271799,,,,,,,,,,,JDK-8269290,,,,,,,,JDK-8254073,JDK-8271171,,,,JDK-8269406,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbeb:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2021-07-12 09:56;jlaskey;https://mail.openjdk.java.net/pipermail/compiler-dev/2021-July/017502.html;;;","2021-07-20 05:31;jlaskey;Previous Description (will be reviewed in a separate bug.)

Appropriate patch:

diff --git a/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/UnicodeReader.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/UnicodeReader.java
index c51be0fdf07..9603fa0da7b 100644
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/UnicodeReader.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/UnicodeReader.java
@@ -169,7 +169,7 @@ public class UnicodeReader {
             // May be an unicode escape.
             switch (unicodeEscape()) {
                 case BACKSLASH -> wasBackslash = true;
-                case VALID_ESCAPE -> wasBackslash = false;
+                case VALID_ESCAPE -> wasBackslash = character == '\\';
                 case BROKEN_ESCAPE -> nextUnicodeInputCharacter(); //skip broken unicode escapes
             }
         }


This is the correct behaviour based on JLS expert Alex Buckley's interpretation:

""For example, the input stream \u005cu005a results in the six characters \ u 0 0 5 a, because 005c is the Unicode value for \. It does not result in the character Z, which is Unicode character 005a, because the \ that resulted from the \u005c is not interpreted as the start of a further Unicode escape.

Note that \u005cu005a cannot be written in a string literal to denote the six characters \ u 0 0 5 a. This is because the first two characters resulting from translation, \ and u, are interpreted in a string literal as an illegal escape sequence (3.10.7).

Fortunately, the rule about contiguous \ characters helps programmers to craft input streams that denote Unicode escapes in a string literal. Denoting the six characters \ u 0 0 5 a in a string literal simply requires another \ to be written adjacent to the existing \, such as in ""Z is \\u005a"". This works because the second \ in the input stream \\u005a is not eligible, so the first \ and second \ are preserved as raw input characters; they are subsequently interpreted in a string literal as the escape sequence for a backslash, resulting in the desired six characters \ u 0 0 5 a. Without the rule, the input stream \\u005a would be translated as the raw input character \ followed by the Unicode escape \u005a (Z), but \Z is an illegal escape sequence in a string literal.

The rule also allows programmers to craft input streams that denote escape sequences in a string literal. For example, the input stream \\\u006e results in the three characters \ \ n because the third \ is eligible and thus \u006e is translated to n, while the first \ and second \ are preserved as raw input characters. The three characters \ \ n are subsequently interpreted in a string literal as \ n which denotes the escape sequence for a linefeed. (The input stream \\\u006e may also be written as \u005c\u005c\u006e.)""
;;;","2021-07-22 09:11;jlaskey;Fix Request

The fix is to replicate the pre-jdk16 behaviour for unicode \u005C handling and further clarify the handling in the JLS (https://bugs.openjdk.java.net/browse/JDK-8269406). It is felt that adhering to the JLS is fundamental to our stewardship.

The issue is a rarely used idiom, so risk is low.

The test added runs through all possible combinations of  \u005C and backslash and matching results against  pre-jdk 16 behaviour. Change and test were reviewed by Jan Lahoda, Jon Gibbons and Joe Darcy.

mach5 was run against tier 1-3 with no issues.

webrev: https://webrevs.openjdk.java.net/?repo=jdk17&pr=126&range=07

;;;","2021-07-26 11:06;roboduke;Changeset: b76a8388
Author:    Jim Laskey <jlaskey@openjdk.org>
Date:      2021-07-26 18:04:28 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/b76a83888b00faff602726f5409e1c902b91e908
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update minor GCC version in GitHub Actions pipeline,JDK-8269148,5052404,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,shade,shade,shade,2021-06-22 10:14,2022-04-12 11:53,2023-10-01 09:57,2021-06-23 00:58,17,18,,,,,,17,infrastructure,,0,,,,,,,,,,,,,,,,,,"It seems Ubuntu had bumped the version for GCC, so GHA started to fail with e.g.:

The following packages have unmet dependencies:
 g++-10-s390x-linux-gnu : Depends: gcc-10-s390x-linux-gnu-base (= 10.2.0-5ubuntu1~20.04cross1) but 10.3.0-1ubuntu1~20.04cross1 is to be installed
 gcc-10-s390x-linux-gnu : Depends: cpp-10-s390x-linux-gnu (= 10.2.0-5ubuntu1~20.04cross1) but 10.3.0-1ubuntu1~20.04cross1 is to be installed
                          Depends: gcc-10-s390x-linux-gnu-base (= 10.2.0-5ubuntu1~20.04cross1) but 10.3.0-1ubuntu1~20.04cross1 is to be installed
E: Unable to correct problems, you have held broken packages.
Error: Process completed with exit code 100.",,,,,,,,,,,JDK-8269437,JDK-8270624,,,,,,,,,,,,,,,,,,,,JDK-8266224,,,,,JDK-8284772,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbd7:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-06-23 00:54;roboduke;Changeset: ce917b23
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-06-23 07:39:09 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/ce917b23596415ab48f95f36c7d88adb1ec0df68
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
 Update GStreamer to version 1.18.4,JDK-8269147,5052402,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,almatvee,kcr,kcr,2021-06-22 09:09,2022-03-15 16:07,2023-10-01 09:57,2021-06-30 12:30,8u311,jfx17,,,,,,jfx17,javafx,,0,3rdparty,sn_96,,,,,,,,,,,,,,,,"We currently use GStreamer version 1.18.3. We should update to the latest stable release, which is version 1.18.4.
",,,,,,,,,,,JDK-8272634,JDK-8269701,,,,,,,,,,,JDK-8275178,,JDK-8283218,,,,JDK-8269164,,,JDK-8269163,,,,,JDK-8262365,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbcr:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2021-06-30 12:30;roboduke;Changeset: 098c0f39
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-06-30 19:30:07 +0000
URL:       https://git.openjdk.java.net/jfx/commit/098c0f393ef0849e140c9efd4d083f3282e1fa0e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing unreported constraints on pattern and other case label combination,JDK-8269146,5052401,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-06-22 09:06,2021-07-15 10:36,2023-10-01 09:57,2021-07-09 01:05,17,,,,,,,17,tools,,0,conformance,tck-red-17,,,,,,,,,,,,,,,,"Mostly based on:
https://mail.openjdk.java.net/pipermail/compiler-dev/2021-June/017343.html

The following should not compile:
---
void testInt(Integer i) {
  switch (i) {
    case Integer o && o != null, 1: //cannot combine type patterns and constants
      System.out.println(""s1"");
    default:
      System.out.println(""def"");
  }
}
---

---
void testInt(Integer i) {
  switch (i) {
    case null, Integer o && o != null: //must be a type pattern
      System.out.println(""s1"");
    default:
      System.out.println(""def"");
  }
}
---

---
    switch(selExpr) {
        case String s, null, default : //illegal combination of (type) pattern and default
    }
---",,,,,,,,,,,JDK-8270220,JDK-8270741,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbcj:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-09 01:05;roboduke;Changeset: 885f7b11
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-07-09 08:03:56 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/885f7b1141d1d8e6b560ebaf0c2d4878be0ea8ba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Switch statement containing pattern case label element gets in the loop during execution,JDK-8269141,5052394,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-06-22 08:17,2021-07-15 10:23,2023-10-01 09:57,2021-06-30 01:46,17,,,,,,,17,tools,,0,conformance,tck-red-17,,,,,,,,,,,,,,,,"As noted here:
https://mail.openjdk.java.net/pipermail/compiler-dev/2021-June/017339.html

The following code, when compiled and ran, runs in an infinite loop:
---
    static void test(Integer i) {
        switch (i) {
            case Integer o && o != null:
                System.out.println(""s1"");
            default:
                System.out.println(""def"");
        }
    }
---
",,,,,,,,,,,JDK-8270677,JDK-8269710,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tbaz:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-30 01:46;roboduke;Changeset: c3c91892
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-30 08:45:12 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/c3c918928cab49d970ddf74d53db1e57e91dc30c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tree/TablePosition: must not throw NPE on instantiating with null table,JDK-8269136,5052387,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fastegal,fastegal,fastegal,2021-06-22 06:48,2021-07-08 08:57,2023-10-01 09:57,2021-07-06 02:02,,,,,,,,jfx17,javafx,,0,TablePosition,TreeTablePosition,,,,,,,,,,,,,,,,"Failing test (same for TreeTablePosition):

    @Test
    public void testNullTable() {
        new TablePosition<>(null, 2, new TableColumn<>());
    }
    
As null handling is not spec'ed in the constructor's doc, options to fix would be 

- change the doc to explicitly disallow null
- fix the implementation to not throw 

My take is clearly the latter (in no particular order):

- a position might be used unrelated to a specific table: used to mark f.i. a particular cell in any table
- users are warned to expect a null (f.i. in doc of constructor and getColumn), so formally supporting it wouldn't make a difference to client code 
- the NPE (for TableView) is introduced in JDK-8093105, looks like it happend accidentally when supporting access to the underlying row object

blowing code:

    List<S> items = tableView.getItems();

fix to 

    List<S> items = tableView != null ? tableView.getItems() : null;
",,,,,,,,,,,,,,,,,,,,,,,JDK-8187229,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tb9f:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-07-02 02:07;fastegal;fixed along with JDK-8187229

Reason to include this in the other is that they are somehow mixed:

- fixing JDK-8187229 introduces failing tests in CellTest without also fixing this (because it seems to be allowed to switch a cell into editing state without it being attached to a control)
- fixing this without context (just the plain NPE) has no obvious relation to editing (which should be caught in the tests, because that's where it blows)

;;;","2021-07-06 02:02;roboduke;Changeset: 47c2ec3d
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-07-06 09:01:04 +0000
URL:       https://git.openjdk.java.net/jfx/commit/47c2ec3d01d9870134c664205d511d54d9c6e85d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TestDifferentProtectionDomains runs into timeout in client VM,JDK-8269135,5052386,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-06-22 06:29,2022-03-10 04:41,2023-10-01 09:57,2021-07-02 08:17,17,18,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,"The tier1 jtreg test runtime/Nestmates/protectionDomain/TestDifferentProtectionDomains.java times out if executed in a client VM, in both release and debug builds.

The test tries to compile a method using the WhiteBox with optimization level 4, which is not available in client VMs. The WhiteBox only prints out a warning on stderr, and the call to enqueueMethodForCompilation succeeds. After that, the test case goes into an endless loop to wait for the compilation to finish, which never happens, because the method is not enqueued for compilation.",,,,,,,,,,,JDK-8280858,JDK-8282957,,,,,,,,,,,,,,,,,,,,JDK-8261395,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,"0|i2tb97:",9223372036854775807,b05,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-22 07:12;dcubed;Moving the bug from hotspot/compiler -> hotspot/runtime
since the test is in  test/hotspot/jtreg/runtime/...;;;","2021-07-02 08:17;roboduke;Changeset: 53ad903a
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2021-07-02 15:16:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/53ad903a820b6892dbb273357defe7cf5c7e24ab
;;;","2022-03-09 06:26;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-03-09 06:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/213
Date: 2022-03-09 14:26:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update libxml2 to version 2.9.12,JDK-8269131,5052382,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,arapte,kcr,kcr,2021-06-22 05:36,2023-01-06 17:04,2023-10-01 09:57,2021-07-06 13:52,8,jfx17,,,,,,jfx17,javafx,,0,3rdparty,sn_96,sn_97,,,,,,,,,,,,,,,"We currently use libxml2 version 2.9.10. We should update to the latest stable release, which is version 2.9.12.
",,,,,,,,,,,JDK-8272635,JDK-8270065,,,,,,,,,,,JDK-8275181,,JDK-8283328,,,,,,,JDK-8269157,,,,,JDK-8237889,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tb8b:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-07-06 13:52;roboduke;Changeset: 52c076c5
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2021-07-06 20:51:00 +0000
URL:       https://git.openjdk.java.net/jfx/commit/52c076c50f3cab17628db4dd2b1b37cb2d6ce92a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple tier1 tests in hotspot/jtreg/compiler are failing for client VMs,JDK-8269129,5052380,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-06-22 05:09,2022-03-09 02:08,2023-10-01 09:57,2021-06-27 06:16,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-17,testbug,,,,,,,,,,,,,"The following tier1 jtreg tests are failing for client VMs because they are either C2 specific, or use C2 specific flags, which should be ignored using IgnoreUnrecognizedVMOptions:

* compiler/arraycopy/TestCloneAccess
* compiler/arraycopy/TestCloneAccessStressGCM
* compiler/c2/TestJumpTable
* compiler/c2/TestReplaceEquivPhis
* compiler/c2/TestShiftRightAndAccumulate
* compiler/codegen/ClearArrayTest",,,,,,,,,,,JDK-8282864,JDK-8282639,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tb7v:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-22 19:04;dlong;As this is a test bug, I believe we can still push a fix to 17.;;;","2021-06-22 19:07;dlong;ILW = test failures for client VMs = MML = P4;;;","2021-06-27 06:16;roboduke;Changeset: 561a3a50
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Igor Veresov <iveresov@openjdk.org>
Date:      2021-06-27 13:12:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/561a3a5077a573c88ba94cb7f7412dfc4c97aa91
;;;","2022-03-08 09:51;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Tests have passed.;;;","2022-03-08 09:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/207
Date: 2022-03-08 17:49:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Klass enqueue element size calculation wrong when traceid value cross compress limit,JDK-8269125,5052376,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mgronlun,mgronlun,mgronlun,2021-06-22 04:04,2021-07-27 16:04,2023-10-01 09:57,2021-06-23 04:50,17,18,,,,,,17,hotspot,,0,noreg-hard,,,,,,,,,,,,,,,,,"jvm!JfrArtifactCallbackHost<Klass const *,CompositeFunctor<Klass const *,JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const *,SerializePredicate<Klass const *>,&write__klass>,164>,KlassArtifactRegistrator> >::do_artifact:
00007ffc`4b2aaa70 48895c2408      mov     qword ptr [rsp+8],rbx
00007ffc`4b2aaa75 4889542410      mov     qword ptr [rsp+10h],rdx
00007ffc`4b2aaa7a 57              push    rdi
00007ffc`4b2aaa7b 4883ec20        sub     rsp,20h
00007ffc`4b2aaa7f 488b7910        mov     rdi,qword ptr [rcx+10h]
00007ffc`4b2aaa83 488bda          mov     rbx,rdx
00007ffc`4b2aaa86 488d542438      lea     rdx,[rsp+38h] // <<---- stack position lea to rdx
00007ffc`4b2aaa8b 488b0f          mov     rcx,qword ptr [rdi] 
00007ffc`4b2aaa8e e8ddf9ffff      call    jvm!JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const *,SerializePredicate<Klass const *>,&write__klass>,164>::operator() (00007ffc`4b2aa470)
00007ffc`4b2aaa93 84c0            test    al,al

jvm!JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const *,SerializePredicate<Klass const *>,&write__klass>,164>::operator():
00007ffc`4b2aa470 4053            push    rbx
00007ffc`4b2aa472 4883ec20        sub     rsp,20h
00007ffc`4b2aa476 80790800        cmp     byte ptr [rcx+8],0
00007ffc`4b2aa47a 488bd9          mov     rbx,rcx
00007ffc`4b2aa47d 488b12          mov     rdx,qword ptr [rdx] // read stack position 000000ea`866ff648 -- was set via  lea rdx,[rsp+38h] ; rdx == 00000000`40122ee2
0007ffc`4b2aa480 7510             jne     jvm!JfrTypeWriterHost<JfrPredicatedTypeWriterImplHost<Klass const *,SerializePredicate<Klass const *>,&write__klass>,164>::operator()+0x22 (00007ffc`4b2aa492)
00007ffc`4b2aa482 8b82a8000000    mov     eax,dword ptr [rdx+0A8h]  // <<--- expects rdx to be an uncompressed klass, the attempt to read the _traceid field traps (offset 0xa8 is _traceid field offset for the klass, in product builds)

dps @rsp
000000ea`866ff5e0  000000ea`866ff800   // <<-- sub 0x20
000000ea`866ff5e8  00000237`d88c9ea0
000000ea`866ff5f0  00000000`00000009
000000ea`866ff5f8  00000000`00000000
000000ea`866ff600  00000000`40122ee2 // <<-- push rbx
000000ea`866ff608  00007ffc`4b2aaa93 jvm!JfrArtifactCallbackHost,&write__klass>,164>,KlassArtifactRegistrator> >::do_artifact+0x23 [t:\workspace\open\src\hotspot\share\jfr\recorder\checkpoint\types\jfrTypeSetUtils.hpp @ 73]
000000ea`866ff610  00000008`001d6988 
000000ea`866ff618  00000000`00000000
000000ea`866ff620  00000000`00000000
000000ea`866ff628  00000000`00000000
000000ea`866ff630  00000000`40122ee2 // <<-- rdi pushed
000000ea`866ff638  00007ffc`4b2a66bd jvm!JfrLinkedList::iterate::ElementDispatch > >+0x10d [t:\workspace\open\src\hotspot\share\jfr\utilities\jfrLinkedList.inline.hpp @ 83]
000000ea`866ff640  00000237`d88c9df0  // <<-- rbx saved
000000ea`866ff648  00000000`40122ee2 // <<-- rdx saved ; lea rdx [rsp+0x38] == 000000ea`866ff648
000000ea`866ff650  00000000`00000000
000000ea`866ff658  00000000`00000000


// enqueued elements

dps 00000237d88c9df0 - 0x40
00000237`d88c9db0  010d02d8`000efd24  // <<-- compressed element
00000237`d88c9db8  010d02d8`000efd24  
00000237`d88c9dc0  010d02d8`000efd24
00000237`d88c9dc8  00050028`00000620
00000237`d88c9dd0  00050028`00000620
00000237`d88c9dd8  00050028`00000620
00000237`d88c9de0  001d6988`00001690
00000237`d88c9de8  001d6988`00001690
00000237`d88c9df0  00000000`40122eca  // <<--- next element pos in rbx == 00000237`d88c9df0 ;  00000000`40122eca & 2 == 2 => uncompressed entry -> uncompressed klass should be in next word / slot
00000237`d88c9df8  00000000`40122ee2  // <<--- expected the uncompressed klass here, but due to element size error, the traceid for the next element has overwritten the uncompressed klass slot for the previous element
00000237`d88c9e00  00000000`40122ea2
00000237`d88c9e08  0000fa38`00000574
00000237`d88c9e10  00c38080`000020e8
00000237`d88c9e18  0017a218`00001100
00000237`d88c9e20  00c0ec28`00001de0
00000237`d88c9e28  00c0ec28`00001de0


// the element size is a function of the traceid value, but in the EpochQueue form, element_size is declared ""static"" -> will not recalculate for uncompressed entries, i.e. compressed == 8 bytes, uncompressed == 16 bytes

// jfrEpochQueue.inline.hpp

template <template <typename> class ElementPolicy>
void JfrEpochQueue<ElementPolicy>::enqueue(JfrEpochQueue<ElementPolicy>::TypePtr t) {
  assert(t != NULL, ""invariant"");
  static size_t element_size = _policy.element_size(t); // <<---- element_size ""static""
  BufferPtr buffer = storage_for_element(t, element_size);
  assert(buffer != NULL, ""invariant"");
  _policy.store_element(t, buffer);
  buffer->set_pos(element_size); // <<----- sets next position to point at the uncompressed klass, which is then overwritten with the traceid for the next store
}

// In addition, this is not correct:

// jfrTraceIdKlassQueue.cpp:

static void store_element(const Klass* klass, u1* pos) {
  assert(pos != NULL, ""invariant"");
  assert(klass != NULL, ""invariant"");
  traceid id = JfrTraceId::load_raw(klass);
#ifdef VM_LITTLE_ENDIAN
  id <<= METADATA_SHIFT;
#endif
  if (can_compress_element(id)) { <<--- the id is evaluated for compression _after_ shift; this means that size calculations could have reported the size to accommodate a compressed entry (evaluated before shift), but as part of actually encoding the element, it could evaluate to an uncompressed element (evaluated after shift), hence overwriting allocated storage space.
    store_compressed_element(id, klass, pos);
  } else {
    store_uncompressed_element(id, klass, pos);
  }
}

// To reach this problem the system would have needed to load ~256 million classes.",,,,,,,,,,,JDK-8269442,JDK-8270629,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tb6z:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,Not verified,,"2021-06-23 04:50;roboduke;Changeset: 1b2147a2
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-06-23 11:49:25 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/1b2147a23f1bdc2ed4a91ddbb4ac70b26e5cfb2d
;;;","2021-07-15 10:55;mseledtsov;No regression test was supplied with the fix. I presume this is because it was hard to create such a test; assigning noreg-hard label.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"The use of ""extern const"" for Register definitions generates poor code",JDK-8269122,5052373,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aph,aph,aph,2021-06-22 03:05,2022-02-17 23:36,2023-10-01 09:57,2021-06-28 02:16,11-pool,17,18,8-pool,,,,18,hotspot,,0,footprint,hs-comp-triaged,oracle-triage-11,oracle-triage-18,performance,,,,,,,,,,,,,"Register definitions in HotSpot are declared as ""extern const""
for ancient-historical reasons. We should stop doing that: it would
make the assembler significantly faster and smaller, improving both
bootstrap time and compilation speed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271869,,,,,JDK-8282085,JDK-8270140,JDK-8270083,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tb6b:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-22 03:10;aph;register.hpp contains these definitions:

  #define CONSTANT_REGISTER_DECLARATION(type, name, value)        \
  extern const type name;                                         \
  enum { name##_##type##EnumValue = (value) };

  #define REGISTER_DEFINITION(type, name)                 \
  const type name = ((type)name##_##type##EnumValue)

a register declaration like this

  CONSTANT_REGISTER_DECLARATION(Register, r0,    (0));

expands to this in the header file:

  extern const Register r0; \
  enum { r0_RegisterEnumValue = ((0)) };;

and this in the register_aarch64.cpp file:

  const Register r0 = ((Register)r0_RegisterEnumValue);

So, the constants which define each register appear only in one
compilation unit (register_aarch64.o) and every user loads the
constants from there.

The result (at least on AArch64) is tragic. Every reference to r0 has
to do a load from the slot in memory that contains the constant r0,
and what's worse all of those loads have to go via the PLT.

So the simple constant r0 requires two loads from memory, once to get
the PLT entry and once to load the constant. This results in GCC
generating awful code, 142 instructions to generate

  add(r0, r0, zr);

(A lot of this generated code is because we check that every assembler
operand is in range, even in product builds. This has saved our
backsides several times now, so it's not something I want to change.)

If I change the way register definitions are done to the obvious

  #define CONSTANT_REGISTER_DECLARATION(type, name, value)        \
  const type name = ((type)value)

  #define REGISTER_DEFINITION(type, name)

I get this for  add(r0, r0, zr)  :

    ldr     x1, [x0, #8]
    mov     w2, #0x8b1f0000
    ldr     x0, [x1, #16]
    str     w2, [x0], #4
    str     x0, [x1, #16]
    ret

which is near-enough optimal. GCC can do constant- and copy-
propagation to remove all the range checks for the operands.

A comment in register.hpp explains why all this ""extern const"" stuff
was done:

// We'd like to be able to simply define const instances of the
// RegisterImpl* for each of the registers needed on a system in a
// header file.  However many compilers don't handle this very well
// and end up producing a private definition in every file which
// includes the header file.  Along with the static constructors
// necessary for initialization it can consume a significant amount of
// space in the result library.

I believe that this is probably ancient history, way back when in
early HotSpot days, and we probably don't need to do it any more. I
could simply fix this in the AArch64 back end after checking that it
works on Windows, which it almost certainly does: it's fine on Linux
and MacOS, and we don't care about ancient compilers any more because
we've moved to C++14.

Getting rid of ""extern const"" is better on x86 too, although the
improvement isn't as dramatic as on AArch64, reducing 20 instructions
to generate

   addl(rdx, 0);

to 8:

    mov 0x8(%rdi),%rdx
    mov $0xffffc283,%ecx
    mov 0x10(%rdx),%rax
    mov %cx,(%rax)
    add $0x3,%rax
    movb $0x0,-0x1(%rax)
    mov %rax,0x10(%rdx)
    retq
;;;","2021-06-22 03:28;aph;This change shaves 2% off the size of the text section of libjvm.so on AArch64.;;;","2021-06-22 19:12;dlong;ILW = poor code and footprint, verified for gcc, no workaround = MMH = P3;;;","2021-06-28 02:16;roboduke;Changeset: 4d2412ef
Author:    Andrew Haley <aph@openjdk.org>
Date:      2021-06-28 09:14:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4d2412ef3e1068063acc954a00b4db0fa4b5affb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure with GCC 6.3.0 after JDK-8017163,JDK-8269120,5052370,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,shade,shade,shade,2021-06-22 02:18,2022-02-10 14:26,2023-10-01 09:57,2021-06-23 02:22,18,,,,,,,18,hotspot,,0,gc-g1,,,,,,,,,,,,,,,,,"One of my CI servers fails after JDK-8017163 with:

In file included from /home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/gc/g1/g1CardSetFreeMemoryTask.hpp:29:0,
                 from /home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/gc/g1/g1CollectedHeap.hpp:31,
                 from /home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/gc/g1/g1CollectedHeap.inline.hpp:28,
                 from /home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/gc/g1/heapRegion.inline.hpp:31,
                 from /home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/gc/g1/g1AllocRegion.inline.hpp:30,
                 from /home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/gc/g1/g1AllocRegion.cpp:26:
/home/buildbot/worker/build-jdkX-linux/build/src/hotspot/share/gc/g1/g1CardSetMemory.hpp:203:54: error: template argument 2 is invalid
   typedef LockFreeStack<G1CardSetContainer, &next_ptr> NodeStack;
                                                      ^

I believe the cause is that next_ptr is the member of template<class Elem> class G1CardSetAllocator, so this confuses the compiler.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8017163,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tb5n:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-06-23 02:14;roboduke;Changeset: 62376306
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2021-06-23 07:03:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6237630664fd956aa6025a181e9cb874806dcecf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebView paste event contains old data,JDK-8269115,5052140,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbhaskar,webbuggrp,webbuggrp,2021-06-17 13:14,2022-05-02 04:41,2023-10-01 09:57,2022-03-07 00:52,jfx16,,,,,,,jfx19,javafx,,0,reproducer-yes,sn_111,sn_112,sn_113,webbug,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When using copy & paste within the JavaFX WebView, the list in e.clipboardData.types gets longet with every paste.
If a earlier copy-event contains ""text/plain"" and ""text/html"" data flavors and a following copy onle ""text/plain"", the next paste-event still contains the ""text/html"" flavor with data from the first copy-event.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Select some text of the example page within the JavaFX WebView and press Ctrl+C
2. Press Ctrl+V - the webview displays that the pase-event contains ""text/plain"" and ""text/html"" data flavors with your selected text.
3. Select and copy text from an application, which only delivers text/plain, for example notepad.
4. Press Ctrl+V  - the webview now displays some duplicate ""text/plain"" data flavors in the paste-event. The ""text/html"" still contains data from the first copy-event.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
After step 4 the example page should only display one ""text/plane"" data flavor with the content of the last copy-event.
ACTUAL -
After step 4 the example page displays multiple ""text/plane"" data flavors and an old ""text/html"" data flavor, which contains old data.

---------- BEGIN SOURCE ----------
Load this html into a JavaFX WebView:
<html>
<head>
    <script>
        document.addEventListener('paste', e => {
            let messages = [];
            if (e.clipboardData.types) {
                e.clipboardData.types.forEach(type => {
                    messages.push( type +  "": "" + e.clipboardData.getData(type));
                });
            }
                            
	        document.getElementById(""clipboardData"").innerHTML = messages.join(""<br />"");
        });
    </script>
</head>
<body>
<b>This is a test of the clipboard. The content of the clipboard will be displayed below after pressing ctrl+v:</b>
<div id=""clipboardData""></div>
<br/>
<a href=""https://evercoder.github.io/clipboard-inspector/"">click here to get a better clipboard inspector</a>
</body>
</html>
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8283054,JDK-8285992,JDK-8285856,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2t9qj:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-12-09 05:53;kcr;I reproduced this on a local build from the latest jfx repo (18-ea) as follows:

1. Select The first five words of the second sentence of the displayed web page.
2. Copy with ^C and paste with ^V

This is the result: Note that there are three copies of the text/plain content, which already shows a problem:

text/plain: The content of the clipboard
text/html: The content of the clipboard
text/plain: The content of the clipboard
text/plain: The content of the clipboard


3. Select some text from an external notepad or terminal window.
4. Copy with ^C
5. Paste in the JavaFX WebView with ^V

This is the result:

text/plain: some text from notepad
text/html: The content of the clipboard
text/plain: some text from notepad
text/plain: some text from notepad
text/plain: some text from notepad
text/plain: some text from notepad
;;;","2022-02-08 03:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/729
Date: 2022-02-08 11:13:20 +0000;;;","2022-02-18 19:54;jbhaskar;in PR;;;","2022-03-07 00:51;dukebot;Changeset: 2338821b
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Committer: Ambarish Rapte <arapte@openjdk.org>
Date:      2022-03-07 08:49:08 +0000
URL:       https://git.openjdk.java.net/jfx/commit/2338821bdbb7db929a89aa89903271dcff333a5c
;;;","2022-04-28 10:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/89
Date: 2022-04-28 17:48:23 +0000;;;","2022-04-29 10:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/46
Date: 2022-04-29 17:08:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javac throws when compiling switch (null),JDK-8269113,5052350,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gli,webbuggrp,webbuggrp,2021-06-21 17:43,2021-10-07 05:55,2023-10-01 09:57,2021-10-01 01:54,17,18,,,,,,18,tools,,0,17ea,azul-interest,dcsad,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
openjdk 17-ea 2021-09-14
OpenJDK Runtime Environment (build 17-ea+27-2476)
OpenJDK 64-Bit Server VM (build 17-ea+27-2476, mixed mode, sharing)


A DESCRIPTION OF THE PROBLEM :
Currently, it is not compiling source code with ""switch(null)"" and with `--enable-preview --release 17`

ACTUAL -
An exception has occurred in the compiler (17-ea). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError: unexpected type: <nulltype>
        at jdk.compiler/com.sun.tools.javac.tree.TreeMaker.Type(TreeMaker.java:860)
        at jdk.compiler/com.sun.tools.javac.tree.TreeMaker.VarDef(TreeMaker.java:882)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.handleSwitch(TransPatterns.java:383)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitSwitchExpression(TransPatterns.java:263)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitchExpression.accept(JCTree.java:1380)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitVarDef(TransPatterns.java:729)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:1027)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitBlock(TransPatterns.java:684)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitMethodDef(TreeTranslator.java:150)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitMethodDef(TransPatterns.java:631)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:70)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitClassDef(TreeTranslator.java:139)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitClassDef(TransPatterns.java:711)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:819)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.translateTopLevelClass(TransPatterns.java:740)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.desugar(JavaCompiler.java:1535)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.desugar(JavaCompiler.java:1408)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)


---------- BEGIN SOURCE ----------
public class Foo{
        public static void main(String[] args){
                switch (null){default:}
        }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,JDK-8274906,,,,,,,,,,,,,,,,,,JDK-8270153,,,,,,,,,,,,,,"2021-06-21 21:56;adev;Foo.java;https://bugs.openjdk.org/secure/attachment/95209/Foo.java",,,,,,generic,,,,,,,b26,17,,generic,,,,"0|i2tb17:",9223372036854775807,b18,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-21 22:23;adev;The issue is reproducible. It is a regression.
Using javac --enable-preview --release 17 with different builds:
JDK 17 b24: pass
JDK 17 b25: pass
JDK 17 b26: fail
JDK 17 b27: fail

Using javac --enable-preview --release 18 with JDK 18:
JDK 18 b1: fail

Fails with:
 java.lang.AssertionError: unexpected type: <nulltype>
        at jdk.compiler/com.sun.tools.javac.tree.TreeMaker.Type(TreeMaker.java:860)
        at jdk.compiler/com.sun.tools.javac.tree.TreeMaker.VarDef(TreeMaker.java:882)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.handleSwitch(TransPatterns.java:383)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitSwitch(TransPatterns.java:258)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitch.accept(JCTree.java:1294)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitBlock(TransPatterns.java:681)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitMethodDef(TreeTranslator.java:150)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitMethodDef(TransPatterns.java:628)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:70)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitClassDef(TreeTranslator.java:139)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitClassDef(TransPatterns.java:708)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:819)
        at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.translateTopLevelClass(TransPatterns.java:737)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.desugar(JavaCompiler.java:1535)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.desugar(JavaCompiler.java:1408)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)
;;;","2021-07-09 05:07;jlahoda;Even though javac should not crash (and this is a valid code), it seems proper solution may take some time (and, unlikely but possibly, a spec tweak), and the code is not really useful. We'll fix for 18, and possibly backport if the fix would apply to 17 as well.;;;","2021-09-02 06:29;forax;I hit that bug just today :)
I disagree with the analysis of Jan, switch(null) should be allowed the same way switch(3) is allowed.

Being able to do a switch(null) in jshell to see how the switch on type works is a valid use case.;;;","2021-10-01 01:54;roboduke;Changeset: 18870284
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-10-01 08:53:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/18870284084aaaf729640de0105ce21e253546b9
;;;","2021-10-06 08:38;evergizova;Fix Request (17u)
I'd like to backport this fix to 17u. It prevents AssertionError in javac.
The patch applies cleanly.
Tested with langtools tests, updated tests pass after applying the patch.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix Valhalla Zero build failures,JDK-8269095,5052327,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2021-06-21 10:20,2021-06-23 01:08,2023-10-01 09:57,2021-06-23 01:08,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,,,,,,,,,,,,,,,,,,"This should make Zero buildable again in Valhalla workspace. Zero would not work with primitive classes just yet, failing with ""unimplemented bytecode"" when reaching the Valhalla code, but at least it would not fail the builds.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2taw3:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/sound/sampled/Clip/SetPositionHang.java failed with ArrayIndexOutOfBoundsException: Array index out of range: -4,JDK-8269091,5052319,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,dcubed,dcubed,2021-06-21 08:27,2023-08-16 04:28,2023-10-01 09:57,2022-02-14 15:32,17,18,19,,,,,19,client-libs,,0,aarch64,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,macos,sn_112,tier3,,,,,,,,,"The following test failed in the JDK17 CI:

javax/sound/sampled/Clip/SetPositionHang.java

Here's a snippet from the log file:

#section:main
----------messages:(5/205)----------
command: main SetPositionHang
reason: Assumed action based on file name: run main SetPositionHang 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 30.979
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(15/230)----------
Thread 2 Start
Thread 5 Start
Thread 4 Start
Thread 1 Start
Thread 3 Start
Thread 2 Finish
Thread 3 Finish
Thread 5 Finish
Thread 1 Finish
Thread 4 Finish
Thread 1 Start
Thread 2 Start
Thread 3 Start
Thread 4 Start
Thread 5 Start
----------System.err:(5/429)----------
java.lang.ArrayIndexOutOfBoundsException: Array index out of range: -4
	at java.desktop/com.sun.media.sound.DirectAudioDevice$DirectDL.write(DirectAudioDevice.java:696)
	at java.desktop/com.sun.media.sound.DirectAudioDevice$DirectClip.run(DirectAudioDevice.java:1314)
	at java.base/java.lang.Thread.run(Thread.java:833)
STATUS:Failed.`main' threw exception: java.lang.ArrayIndexOutOfBoundsException: Array index out of range: -4
----------rerun:(36/5536)*----------",,,,,,,,,,,JDK-8313952,JDK-8309901,JDK-8311384,JDK-8312709,JDK-8314273,JDK-8312176,,,,,,,,,,,,,JDK-8269089,JDK-8309724,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,,os_x,,,,"0|i2taub:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7d98911c,,,,,,,,,"2021-07-06 10:42;serb;Looks like some rare intermittent issue, happened twice in two weeks, both on arm.;;;","2021-07-06 11:45;dcubed;Here's a log file snippet for the jdk-18+5-163-tier3 sightingt: 

javax/sound/sampled/Clip/SetPositionHang.java

#section:main
----------messages:(5/205)----------
command: main SetPositionHang
reason: Assumed action based on file name: run main SetPositionHang 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 33.609
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(15/230)----------
Thread 3 Start
Thread 4 Start
Thread 5 Start
Thread 2 Start
Thread 1 Start
Thread 4 Finish
Thread 1 Finish
Thread 3 Finish
Thread 2 Finish
Thread 5 Finish
Thread 1 Start
Thread 4 Start
Thread 2 Start
Thread 3 Start
Thread 5 Start
----------System.err:(5/429)----------
java.lang.ArrayIndexOutOfBoundsException: Array index out of range: -4
	at java.desktop/com.sun.media.sound.DirectAudioDevice$DirectDL.write(DirectAudioDevice.java:696)
	at java.desktop/com.sun.media.sound.DirectAudioDevice$DirectClip.run(DirectAudioDevice.java:1314)
	at java.base/java.lang.Thread.run(Thread.java:833)
STATUS:Failed.`main' threw exception: java.lang.ArrayIndexOutOfBoundsException: Array index out of range: -4
----------rerun:(36/5521)*----------;;;","2021-11-01 20:31;prr;Every single one of the approximately 10 occurrences of this to date from June through (the most recent now) 1st November have been on macOS aarch64 ... ;;;","2021-11-09 06:58;dcubed;[~prr] - The universe has answered and now you have a recent macosx-x64 sighting.;;;","2021-11-09 09:22;prr;Ok .. so a late 2018 core i7 mac mini running 11.6 .. that at least rules out some aarch64-specific VM issue.

Log : 
----------System.out:(15/230)----------
Thread 4 Start
Thread 5 Start
Thread 3 Start
Thread 2 Start
Thread 1 Start
Thread 5 Finish
Thread 4 Finish
Thread 3 Finish
Thread 1 Finish
Thread 2 Finish
Thread 1 Start
Thread 2 Start
Thread 3 Start
Thread 4 Start
Thread 5 Start
----------System.err:(5/429)----------
java.lang.ArrayIndexOutOfBoundsException: Array index out of range: -4
	at java.desktop/com.sun.media.sound.DirectAudioDevice$DirectDL.write(DirectAudioDevice.java:696)
	at java.desktop/com.sun.media.sound.DirectAudioDevice$DirectClip.run(DirectAudioDevice.java:1314)
	at java.base/java.lang.Thread.run(Thread.java:833)
STATUS:Failed.`main' threw exception: java.lang.ArrayIndexOutOfBoundsException: Array index out of range: -4
;;;","2021-12-17 19:13;dcubed;Here's a log file snippet for the jdk-19+3-79-tier3 sighting: 

javax/sound/sampled/Clip/SetPositionHang.java 

#section:main
----------messages:(5/204)----------
command: main SetPositionHang
reason: Assumed action based on file name: run main SetPositionHang 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 49.55
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(15/230)----------
Thread 5 Start
Thread 1 Start
Thread 3 Start
Thread 4 Start
Thread 2 Start
Thread 1 Finish
Thread 3 Finish
Thread 2 Finish
Thread 4 Finish
Thread 5 Finish
Thread 1 Start
Thread 2 Start
Thread 3 Start
Thread 4 Start
Thread 5 Start
----------System.err:(5/429)----------
java.lang.ArrayIndexOutOfBoundsException: Array index out of range: -4
	at java.desktop/com.sun.media.sound.DirectAudioDevice$DirectDL.write(DirectAudioDevice.java:696)
	at java.desktop/com.sun.media.sound.DirectAudioDevice$DirectClip.run(DirectAudioDevice.java:1314)
	at java.base/java.lang.Thread.run(Thread.java:833)
STATUS:Failed.`main' threw exception: java.lang.ArrayIndexOutOfBoundsException: Array index out of range: -4
----------rerun:(36/5519)*----------;;;","2022-01-11 09:45;prr;https://mach5.us.oracle.com/mdash/jobs/mach5-one-jdk-19+5-191-tier3-20220111-1712-28029066/results?search=status%3Afailed+AND+-state%3Ainvalid

jpg-mac-arm-70.oraclecorp.com

Thread 5 Start
Thread 1 Start
Thread 4 Start
Thread 2 Start
Thread 3 Start
Thread 1 Finish
Thread 5 Finish
Thread 4 Finish
Thread 2 Finish
Thread 3 Finish
Thread 1 Start
Thread 4 Start
Thread 2 Start
Thread 5 Start
Thread 3 Start
----------System.err:(5/429)----------
java.lang.ArrayIndexOutOfBoundsException: Array index out of range: -4
	at java.desktop/com.sun.media.sound.DirectAudioDevice$DirectDL.write(DirectAudioDevice.java:696)
	at java.desktop/com.sun.media.sound.DirectAudioDevice$DirectClip.run(DirectAudioDevice.java:1314)
	at java.base/java.lang.Thread.run(Thread.java:833)
STATUS:Failed.`main' threw exception: java.lang.ArrayIndexOutOfBoundsException: Array index out of range: -4;;;","2022-01-11 09:55;prr;Looking at the code in DirectAudioDevice.java -4 is the value of clipBytePosition which is updated here
                    if (newFramePosition >= 0) {
                        clipBytePosition = newFramePosition * frameSize;
                        newFramePosition = -1;
                    }

I don't think frameSize is likely to be negative so the only thing I can see is that if > 1 thread is using this instance
 newFramePosition could be set to -1 after the test but before the usage .. and on some architectures it might
be more likely to happen than others.;;;","2022-01-27 14:28;prr;This test fails too often. The problematic code in the sound implementation should be fixed.;;;","2022-02-10 16:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7436
Date: 2022-02-10 23:57:29 +0000;;;","2022-02-14 15:32;roboduke;Changeset: 1a7b70a8
Author:    Phil Race <prr@openjdk.org>
Date:      2022-02-14 23:31:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1a7b70a8be0a236b98925a8320d25d88a405d595
;;;","2023-06-12 07:50;mbaesken;jdk17 backport request
Similar failures were noticed in jdk17, see https://bugs.openjdk.org/browse/JDK-8309724 . This patch might help to fix these failures.
So I want the patch in jdk17u-dev as well, to fix these issues.  The backport is clean and low-to-medium risk.;;;","2023-06-12 07:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1420
Date: 2023-06-12 14:46:14 +0000;;;","2023-08-07 01:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2069
Date: 2023-08-07 08:13:58 +0000;;;","2023-08-07 06:21;clanger;Fix request (11u):
Similar reasons as for 17u. We see occasional test errors in our CI. Risk is low, the usual risk for minor patches in java.desktop code. Testing: GHA and SAP nightlies.;;;",,,,,,,,,,,,,,,,,,,,,,,
C2 fails with assert(!n->is_Store() && !n->is_LoadStore()) failed: no node with a side effect,JDK-8269088,5052314,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,shade,shade,2021-06-21 07:30,2022-05-12 02:52,2023-10-01 09:57,2021-07-01 01:13,17,,,,,,,17,hotspot,,0,c2,c2-loopopts,hs-comp-triaged,javafuzzer,oracle-triage-11,oracle-triage-17,,,,,,,,,,,,"Unpack the Fuzzer testcase from here:
  https://cr.openjdk.java.net/~shade/8269088/09634.tar.gz

Run:

$ linux-x86_64-server-fastdebug/images/jdk/bin/java -Xcomp -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:+UseSerialGC -Xmx256m Test
...

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/loopopts.cpp:1443), pid=792969, tid=792991
#  assert(!n->is_Store() && !n->is_LoadStore()) failed: no node with a side effect
#
# JRE version: OpenJDK Runtime Environment (18.0) (fastdebug build 18-internal+0-adhoc.shade.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 18-internal+0-adhoc.shade.jdk, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12fd8a9]  PhaseIdealLoop::try_sink_out_of_loop(Node*)+0xa69
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/shade/trunks/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_applications_fuzzer/scratch/22/core.792969)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxRAMPercentage=0.78125 -Djava.io.tmpdir=/home/shade/trunks/jdk/build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_applications_fuzzer/tmp -Xcomp -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:+UseSerialGC -Xmx256m Test

Host: shade-desktop, AMD Ryzen Threadripper 3970X 32-Core Processor, 64 cores, 125G, Ubuntu 20.04.2 LTS
Time: Mon Jun 21 15:27:08 2021 CEST elapsed time: 0.559349 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007f3b181248e0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=792991, stack(0x00007f3b1c133000,0x00007f3b1c234000)]


Current CompileTask:
C2:    559   20   !b  4       Test::mainTest (911 bytes)

Stack: [0x00007f3b1c133000,0x00007f3b1c234000],  sp=0x00007f3b1c22e150,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12fd8a9]  PhaseIdealLoop::try_sink_out_of_loop(Node*)+0xa69
V  [libjvm.so+0x12fda5b]  PhaseIdealLoop::split_if_with_blocks_post(Node*)+0x6b
V  [libjvm.so+0x12fe891]  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)+0x201
V  [libjvm.so+0x12f0d4a]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x12ca
V  [libjvm.so+0xa40b95]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x2d5
V  [libjvm.so+0xa3de9f]  Compile::Optimize()+0x101f
V  [libjvm.so+0xa3f760]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x12f0
V  [libjvm.so+0x872a56]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x646
V  [libjvm.so+0xa511c9]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xf19
V  [libjvm.so+0xa51f58]  CompileBroker::compiler_thread_loop()+0x658
V  [libjvm.so+0x19e7e51]  JavaThread::thread_main_inner()+0x281
V  [libjvm.so+0x19ef5c4]  Thread::call_run()+0x104
V  [libjvm.so+0x15698fc]  thread_native_entry(Thread*)+0x10c

The assert seems to be added by JDK-8252372.",,,,,,,,,,,JDK-8270693,JDK-8269781,,,,,,,,,,,,,,,,,,,,JDK-8252372,JDK-8286625,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tat7:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-06-21 17:19;dlong;ILW = new assert fails, observed only with fuzzer test, no workaround = HLH = P2;;;","2021-07-01 01:13;roboduke;Changeset: ad27d9b3
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-07-01 08:11:59 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/ad27d9b3eca0ebaa5d920af0d3d4c43b3fa6c5f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CheckSegmentedCodeCache test fails in an emulated-client VM,JDK-8269087,5052313,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-06-21 07:25,2022-01-13 05:49,2023-10-01 09:57,2021-06-24 09:50,17,18,,,,,,18,hotspot,,0,hs-comp-triaged,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-18,testbug,,,,,,,,,,,,,"If the VM is an emulated-client, providing the flag -XX:+TieredCompilation does not print a warning or an error and the test case does no longer detect that it is executed in a client VM. Hence some of its assertions are wrong and the test fails with:

java.lang.RuntimeException: No code cache segmentation.
	at compiler.codecache.CheckSegmentedCodeCache.verifySegmentedCodeCache(CheckSegmentedCodeCache.java:64)
	at compiler.codecache.CheckSegmentedCodeCache.main(CheckSegmentedCodeCache.java:109)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)",,,,,,,,,,,JDK-8279915,JDK-8279964,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tasz:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-21 15:05;dlong;ILW = one test fails with emulated-client VM = MLM = P4;;;","2021-06-21 15:10;dlong;[~cgo] Does this affect 17?;;;","2021-06-22 00:06;cgo;Yes it does. It might also affect earlier versions, which have an emulated client, and not a real client VM. JDK-8166002 is implemented for JDK-9, but only for 32-bit windows, if I understand it correctly, so maybe an 11 emulated-client VM for 32-bit windows fails the test as well? I don't have a setup to test that.

The root cause is, that the emulated-client VM accepts the TieredCompilation flag and silently drops it. Some tests use the warning, previously printed by a ""real"" client VM, to check in which VM class it is executed and then disables certain assertions.

I also found the test case ""compiler/arguments/CheckCICompilerCount.java"" does the same thing, and needs adjustment as well.;;;","2021-06-24 09:50;roboduke;Changeset: 595446bf
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Igor Veresov <iveresov@openjdk.org>
Date:      2021-06-24 16:49:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/595446bff4af65a30fc88470f20baec2199cd139
;;;","2022-01-12 04:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/84
Date: 2022-01-12 12:04:40 +0000;;;","2022-01-12 05:02;goetz;Fix request [17u]

I backport this for parity with 17.0.3-oracle.
No risk, only a test change.
Clean backport. 
SAP nightly testing passed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] runtime/cds tests need to be migrated to the unified class file scheme,JDK-8269084,5052310,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-06-21 06:41,2021-06-21 07:14,2023-10-01 09:57,2021-06-21 07:12,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lworld,,,,,,,,,,,,,,,,,"A bunch of tests are expecting that the compiler will generate V$ref.class files for a primitive class V.

These need to be massaged.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tasb:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tree/ListViewSkin: must remove flow on dispose,JDK-8269081,5052303,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fastegal,fastegal,fastegal,2021-06-21 04:34,2021-09-03 15:24,2023-10-01 09:57,2021-09-02 04:34,jfx16,,,,,,,jfx18,javafx,,0,ListViewSkin,memory-leak,TreeViewSkin,,,,,,,,,,,,,,,"first cleanup rounds (JDK-8256821 for TreeViewSkin, JDK-8246195 for ListViewSkin) only removed references from the flow to the skin: this seemed to fix memory leaks (and side-effects) for both - but not completely for TreeView, still failing when skin is replaced while the tree is in a scene:

    @Test
    public void testMemoryLeakShowAlternativeSkin() {
        showControl();
        Skin<?> replacedSkin = replaceSkin(control);
        WeakReference<?> weakRef = new WeakReference<>(replacedSkin);
        replacedSkin = null;
        // beware: this is important - we might get false leaks without!
        Toolkit.getToolkit().firePulse();
        attemptGC(weakRef);
        assertEquals(""Skin must be gc'ed"", null, weakRef.get());
    }
    
Since then, we learned a bit - in particular to remove all direct children that the skin has added, here that would be the flow. Doing so lets the test pass.

Aside: the same test for ListViewSkin passes. Which was puzzling, given everything else related to the flow is the exact same - or so it looks: the difference is the default cellFactory - in listViewSkin it's a static method, in treeViewSkin it's an instance method (keeping an implicit reference to the skin?).



",,,,,,,,,,,,,,,,,,,,,,,JDK-8241364,,,,,,,,,JDK-8256821,JDK-8246195,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2taqr:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-09-02 04:34;roboduke;Changeset: e9315014
Author:    Jeanette Winzenburg <fastegal@openjdk.org>
Date:      2021-09-02 11:30:58 +0000
URL:       https://git.openjdk.java.net/jfx/commit/e9315014f4accd97d757689d5ff212dd536a6e61
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"TestSystemGC uses ""require vm.gc.G1"" for large pages subtest",JDK-8269077,5052299,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stefank,stefank,stefank,2021-06-21 03:14,2022-08-25 01:42,2023-10-01 09:57,2021-06-22 00:46,,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"The invocation that runs with large pages are guarded with @requires vm.gc.G1 and doesn't explicitly state that G1 should be used.

This means two things:
1) We are not running the large pages subtest when other GCs are specified
2) Under some circumstances another GC is ergonomically selected and we run the test with that GC even though the test was guarded by @require vm.gc.G1.

I propose that we move the subtest to its own run section, without any requirement about the used GC.",,,,,,,,,,,JDK-8283108,JDK-8292907,,,,,,,,,,,,,,,,,,,,JDK-8276796,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tapv:",9223372036854775807,b03,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-22 00:46;roboduke;Changeset: 1a818154
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2021-06-22 07:44:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1a818154cfe852a680070c5c07f2df33109e5b54
;;;","2022-03-10 08:45;goetz;Fix request [17u]

I backport this as prerequisite for a 17.0.4-oracle backport.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlyt tests pass.;;;","2022-03-10 08:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/238
Date: 2022-03-10 16:47:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Files.copy fails to copy from /proc on some linux kernel versions,JDK-8269074,5052296,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bpb,cgo,cgo,2021-06-21 03:04,2021-07-15 10:18,2023-10-01 09:57,2021-06-25 12:07,18,,,,,,,17,core-libs,,0,noreg-hard,regression,,,,,,,,,,,,,,,,"This has been initially observed with the test case runtime/os/TestTracePageSizes on a debian testing.
$ uname -srv
Linux 5.10.0-6-amd64 #1 SMP Debian 5.10.28-1 (2021-04-09)

Tests is test/jdk/java/nio are all passing.

java.nio.file.FileSystemException: /proc/self/smaps -> smaps-copy-31084-0.txt: Invalid argument
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:100)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixCopyFile.copyFile(UnixCopyFile.java:256)
	at java.base/sun.nio.fs.UnixCopyFile.copy(UnixCopyFile.java:603)
	at java.base/sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:258)
	at java.base/java.nio.file.Files.copy(Files.java:1305)
	at TestTracePageSizes.copySmaps(TestTracePageSizes.java:122)
	at TestTracePageSizes.parseSmaps(TestTracePageSizes.java:134)
	at TestTracePageSizes.main(TestTracePageSizes.java:258)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

The man page says:

EINVAL Descriptor  is  not valid or locked, or an mmap(2)-like operation is not available for in_fd, or count is negative.

Probably, an fd pointing to a file in /proc does not support mmap like operations on all kernel versions.",,,,,,,,,,,JDK-8269460,JDK-8270653,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265175,,,,,,,,,,,,,,,,,,,,17,,linux,,,,"0|i2tap7:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2021-06-21 03:11;alanb;Files.copy is supposed to fallback to transfer via user-spec buffers when sendfile not supported so there may be an issue there.;;;","2021-06-21 09:20;bpb;The original proposal for using sendfile fell back to user-space buffers but that was removed in the course of the review [1]. Probably it should do this on both Linux and macOS.

[1] https://github.com/openjdk/jdk/pull/3476;;;","2021-06-21 13:41;bpb;Concerning the noreg-hard label, it would be difficult to create a test to provoke this failure without having available a Linux version for which the problem occurs. The Hotspot test mentioned in the description [1] did however catch the failure when run on the reporter's own system.

[1] test/hotspot/jtreg/runtime/os/TestTracePageSizes.java;;;","2021-06-22 00:34;cgo;I think the important part is to test if the fallback routine is used or not. Maybe using a another type of special file as the source FD for sendfile also returns EINVAL?

I tested /dev/null and sendfile returns EINVAL for that one as well. No sure if Files.copy should work with it, but I guess before the sendfile implementation, it did. I am also not sure if this is again something special for my kernel version or not.;;;","2021-06-22 09:39;bpb;On Ubuntu 20.04 setting /dev/null as the source does not provoke EINVAL.;;;","2021-06-25 12:07;roboduke;Changeset: 5ebed06e
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2021-06-25 19:06:42 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/5ebed06e8ae27ca73433497b4e4aa559d06ed8ec
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(ZAddress::is_marked(addr)) failed: Should be marked ,JDK-8269066,5052273,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,pliden,kbarrett,kbarrett,2021-06-20 04:27,2021-12-13 04:04,2023-10-01 09:57,2021-06-23 03:14,17,,,,,,,17,hotspot,,0,zgc,,,,,,,,,,,,,,,,,"While investigating JDK-8260684 I've been repeatedly running a modified version of vmTestbase/gc/gctests/PhantomReference/phantom002/TestDescription.java.  (I don't think the modifications have anything to do with these failures, but I haven't tried an unmodified version.)

This is using jdk17 through JDK-8268316 (so HEAD as I write this).

Occasionally (1-2 times per thousand) it fails with the assert below on Windows with -XX:+UseZGC. I've not tried on other platforms.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\workspace\open\src\hotspot\share\gc\z\zBarrier.cpp:41), pid=44060, tid=10996
#  assert(ZAddress::is_marked(addr)) failed: Should be marked
#
# JRE version: Java(TM) SE Runtime Environment (17.0) (fastdebug build 17-internal+0-LTS-2021-06-20-0926154.kim.barrett.jdk)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-internal+0-LTS-2021-06-20-0926154.kim.barrett.jdk, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)
# Core dump will be written. Default location: T:\testoutput\test-support\jtreg_open_test_hotspot_jtreg_vmTestbase_gc_gctests_PhantomReference_phantom002\scratch\0\hs_err_pid44060.mdmp

Current thread (0x000001371efd8760):  JavaThread ""gc.gctests.PhantomReference.phantom001.phantom001$Test@4cc92486"" [_thread_in_Java, id=10996, stack(0x0000002db6d00000,0x0000002db6e00000)]

Stack: [0x0000002db6d00000,0x0000002db6e00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xadd001]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xd05395]  VMError::report+0x1005  (vmError.cpp:739)
V  [jvm.dll+0xd06d1e]  VMError::report_and_die+0x7fe  (vmError.cpp:1549)
V  [jvm.dll+0xd07454]  VMError::report_and_die+0x64  (vmError.cpp:1330)
V  [jvm.dll+0x4c7937]  report_vm_error+0xb7  (debug.cpp:282)
V  [jvm.dll+0xd4f734]  ZBarrier::should_mark_through<0>+0x44  (zBarrier.cpp:41)
V  [jvm.dll+0xd502b7]  ZBarrier::load_barrier_on_oop_slow_path+0x67  (zBarrier.cpp:130)
V  [jvm.dll+0xd580b6]  ZBarrierSetRuntime::load_barrier_on_oop_field_preloaded+0x46  (zBarrierSetRuntime.cpp:31)
C  0x0000013514ca9b8b

",,,,,,,,,,,JDK-8270626,JDK-8269439,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tak3:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-21 10:01;kbarrett;Just in case there's something about my modifications to the test that are triggering the failures, here's what I'm running today.

https://github.com/kimbarrett/openjdk-jdk17/blob/9519e99e0c2dd814df5c63aa3704d4b3584d2bd7/test/hotspot/jtreg/vmTestbase/gc/gctests/PhantomReference/phantom001/phantom001.java

I'm seeing about a 2% failure rate with zgc on Windows with that version, and an earlier (unpublished and not easily recoverable) version was similar.
;;;","2021-06-21 13:37;stefank;Ahh, you changed the code to use refersTo. When looking at this test today, [~eosterlund] was concerned that maybe the refersTo intrinsic was somehow broken. But we couldn't see any usage of that, so we dismissed that.;;;","2021-06-21 14:05;stefank;I ran the original test the entire day without reproducing the problem. With the linked test I could get this to reproduce after 4 iterations.;;;","2021-06-21 15:10;eosterlund;Bingo!;;;","2021-06-21 15:59;kbarrett;I tried this variant, and it seems to not crash:

https://github.com/kimbarrett/openjdk-jdk17/blob/ed122c19a30b7944e7e6944133274b5086f8cdc7/test/hotspot/jtreg/vmTestbase/gc/gctests/PhantomReference/phantom001/phantom001.java

The main difference is the crashing version uses Reference.refersTo, while neither the original nor this latest one uses that.
;;;","2021-06-22 01:54;pliden;Problem found. set_barrier_data() in zBarrierSetC2.cpp only checks for ON_WEAK_OOP_REF and otherwise defaults to ON_STRONG_OOP_REF. It should also check for ON_PHANTOM_OOP_REF and AS_NO_KEEPALIVE. Like this:

diff --git a/src/hotspot/share/gc/z/c2/zBarrierSetC2.cpp b/src/hotspot/share/gc/z/c2/zBarrierSetC2.cpp
index 86ed4ae2e8d..918bdbc27a1 100644
--- a/src/hotspot/share/gc/z/c2/zBarrierSetC2.cpp
+++ b/src/hotspot/share/gc/z/c2/zBarrierSetC2.cpp
@@ -194,11 +194,21 @@ int ZBarrierSetC2::estimate_stub_size() const {
 
 static void set_barrier_data(C2Access& access) {
   if (ZBarrierSet::barrier_needed(access.decorators(), access.type())) {
-    if (access.decorators() & ON_WEAK_OOP_REF) {
-      access.set_barrier_data(ZLoadBarrierWeak);
+    uint8_t barrier_data = 0;
+
+    if (access.decorators() & ON_PHANTOM_OOP_REF) {
+      barrier_data |= ZLoadBarrierPhantom;
+    } else if (access.decorators() & ON_WEAK_OOP_REF) {
+      barrier_data |= ZLoadBarrierWeak;
     } else {
-      access.set_barrier_data(ZLoadBarrierStrong);
+      barrier_data |= ZLoadBarrierStrong;
+    }
+
+    if (access.decorators() & AS_NO_KEEPALIVE) {
+      barrier_data |= ZLoadBarrierNoKeepalive;
     }
+
+    access.set_barrier_data(barrier_data);
   }
 }
 ;;;","2021-06-23 03:14;roboduke;Changeset: 8128ca13
Author:    Per Liden <pliden@openjdk.org>
Date:      2021-06-23 10:14:38 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/8128ca1381a058cb5ed3775bafa2bc681f8fe2c1
;;;","2021-12-13 00:30;mbaesken;Still getting the mentioned assertion in current jdk/jdk (but on macOS darwinaarch64); stack seems to be a little different this time. Appeared in test  runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#custom-cl-zgc  

#  Internal Error (/openjdk/nb/darwinaarch64/jdk-dev/src/hotspot/share/gc/z/zBarrier.cpp:41), pid=84433, tid=42755
#  assert(ZAddress::is_marked(addr)) failed: Should be marked

Current thread (0x0000000125efafd0):  VMThread ""VM Thread"" [stack: 0x000000016f3f4000,0x000000016f5f7000] [id=42755]

Stack: [0x000000016f3f4000,0x000000016f5f7000],  sp=0x000000016f5f6520,  free space=2057k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x115135c]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d4
V  [libjvm.dylib+0x1151a9c]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x5a245c]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0x11aa71c]  unsigned long ZBarrier::mark<false, true, false, true>(unsigned long)+0x98
V  [libjvm.dylib+0x81fac0]  oop ZBarrier::barrier<&(ZBarrier::is_good_or_null_fast_path(unsigned long)), &(ZBarrier::load_barrier_on_oop_slow_path(unsigned long))>(oop volatile*, oop)+0xa0
V  [libjvm.dylib+0x996eb4]  AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<548932ull, ZBarrierSet>, (AccessInternal::BarrierType)2, 548932ull>::oop_access_barrier(void*)+0x94
V  [libjvm.dylib+0x84fb2c]  InstanceKlass::signers() const+0x34
V  [libjvm.dylib+0x1073b0c]  SystemDictionaryShared::check_for_exclusion_impl(InstanceKlass*)+0x28c
V  [libjvm.dylib+0x1073834]  SystemDictionaryShared::check_for_exclusion(InstanceKlass*, DumpTimeClassInfo*)+0x188
V  [libjvm.dylib+0x1075b8c]  SystemDictionaryShared::check_excluded_classes()+0x250
V  [libjvm.dylib+0x668bd0]  DynamicArchiveBuilder::doit()+0xd8
V  [libjvm.dylib+0x668a64]  VM_PopulateDynamicDumpSharedSpace::doit()+0xac
V  [libjvm.dylib+0x1157b40]  VM_Operation::evaluate()+0x104
V  [libjvm.dylib+0x1173880]  VMThread::evaluate_operation(VM_Operation*)+0x12c
V  [libjvm.dylib+0x1174440]  VMThread::inner_execute(VM_Operation*)+0x33c
V  [libjvm.dylib+0x1173558]  VMThread::loop()+0xb4
V  [libjvm.dylib+0x1173340]  VMThread::run()+0xc0
V  [libjvm.dylib+0x10a5fd0]  Thread::call_run()+0x21c
V  [libjvm.dylib+0xdaa074]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x7878]  _pthread_start+0x140;;;","2021-12-13 00:54;stefank;[~mbaesken] The stack trace you pasted does not match this bug. I think this is a more relevant bug: JDK-8277998. That one was fixed four days ago, but it seems like you still are getting a crash. Could you open a new Bug for that issue and put it in the Runtime sub-component?;;;","2021-12-13 03:25;mbaesken;I created https://bugs.openjdk.java.net/browse/JDK-8278602 .;;;","2021-12-13 04:04;stefank;Thanks!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] vmTestbase/vm/mlvm/anonloader/stress/oome/metaspace/Test.java failed with OutOfMemoryError,JDK-8269065,5052270,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-06-20 02:03,2021-07-15 10:22,2023-10-01 09:57,2021-06-29 18:26,17,18,,,,,,17,hotspot,,0,tencent-interest,testbug,,,,,,,,,,,,,,,,"Revert changes of vmTestbase/vm/mlvm/anonloader/stress/oome/metaspace/Test.java in JDK-8267404.
And fix it with -XX:MaxRAMPercentage=25.",,,,,,,,,,,JDK-8269707,JDK-8270674,,,,,,,,,,,,,,,,,,,,JDK-8267404,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tajf:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-20 03:13;jiefu;PR: https://github.com/openjdk/jdk17/pull/104;;;","2021-06-29 18:26;roboduke;Changeset: a661686e
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-06-30 01:25:28 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/a661686e1e709143438a37c761a9c12e0b98eaa5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dropped messages of AsyncLogWriter cause memleak,JDK-8269064,5052257,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xliu,xliu,xliu,2021-06-18 23:46,2021-07-15 10:14,2023-10-01 09:57,2021-06-23 02:10,17,,,,,,,17,hotspot,,0,logging,,,,,,,,,,,,,,,,,"The obvious problem is the following code.  msg contains a new string  from os::strdup(msg). when we decide to drop the message, we need to call os::free for the string, or memory leaks. 

void AsyncLogWriter::enqueue_locked(const AsyncLogMessage& msg) {
  if (_buffer.size() >= _buffer_max_size)  {
    bool p_created;
    uint32_t* counter = _stats.add_if_absent(msg.output(), 0, &p_created);
    *counter = *counter + 1;

    // drop the enqueueing message.
    return;
  }


There's another not so obvious memleak issue. In AsyncLogMapIterator, we clear counters to zero. If the LogOutput has deleted by LogConfiguration::delete_output(), we should delete the corresponding entry of AsyncLogWriter::_stats.  It's because user can delete/add logOutput instances via jcmd. hotspot gradually leaks memory if we don't drop deleted LogOutputs. 
",,,,,,,,,,,JDK-8270625,JDK-8269438,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8229517,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2tagj:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-22 10:28;xliu;There are 2 places. the 1st one is severe and definitely need to be fix asap. 

The second one is not so terrible because glibc/malloc can reuse the same addresses if you malloc/free in a loop. 
Further, it depends on JDK-8267752 which is P4.  let me split it and fix the second one later. ;;;","2021-06-22 11:15;mwthomps;ILW=HLM=P3;;;","2021-06-23 02:00;roboduke;Changeset: 1323be54
Author:    Xin Liu <xliu@openjdk.org>
Committer: Volker Simonis <simonis@openjdk.org>
Date:      2021-06-23 08:45:49 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/1323be54d26833d261ef5b53ae0ee9b58a96aabb
;;;","2021-06-23 02:04;roboduke;Changeset: 1323be54
Author:    Xin Liu <xliu@openjdk.org>
Committer: Volker Simonis <simonis@openjdk.org>
Date:      2021-06-23 08:45:49 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/1323be54d26833d261ef5b53ae0ee9b58a96aabb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure due to VerifyReceiverTypes was not declared after JDK-8268405,JDK-8269063,5052255,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2021-06-18 18:40,2021-07-15 10:10,2023-10-01 09:57,2021-06-20 15:56,17,18,,,,,,17,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-17,tencent-interest,,,,,,,,,,,,,,"* Reproduce:
```
  bash configure --with-jvm-features=-compiler2 ...
  make images
```

* Symptom
```
/home/jdk17/src/hotspot/share/runtime/deoptimization.cpp: In static member function 'static void Deoptimization::uncommon_trap_inner(JavaThread*, jint)':
/home/jdk17/src/hotspot/share/runtime/deoptimization.cpp:1960:43: error: 'VerifyReceiverTypes' was not declared in this scope
     bool is_receiver_constraint_failure = VerifyReceiverTypes && (reason == Deoptimization::Reason_receiver_constraint);
                                           ^~~~~~~~~~~~~~~~~~~
/home/jdk17/src/hotspot/share/runtime/deoptimization.cpp:1960:43: note: suggested alternative: 'VerifyRememberedSets'
     bool is_receiver_constraint_failure = VerifyReceiverTypes && (reason == Deoptimization::Reason_receiver_constraint);
                                           ^~~~~~~~~~~~~~~~~~~
                                           VerifyRememberedSets
```",,,,,,,,,,,JDK-8270603,JDK-8269102,,,,,,,,,,,,,,,,,JDK-8269140,,,JDK-8268405,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tag3:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-20 15:56;roboduke;Changeset: b358b54c
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2021-06-20 22:55:49 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/b358b54c4fb515be519ad631c0ae7c58f49fdc5b
;;;","2021-06-21 15:03;dlong;ILW = build failure with c2 excluded (uncommon) = HLM = P3;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"tools/jpackage/share/AppImagePackageTest.java failed with ""hdiutil: create failed - Resource busy""",JDK-8269036,5052219,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,dcubed,dcubed,2021-06-18 10:01,2021-07-15 10:18,2023-10-01 09:57,2021-06-25 14:28,17,,,,,,,17,tools,,0,intermittent,macos,sn_95,sn_96,tier2,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

tools/jpackage/share/AppImagePackageTest.java

Here's a snippet from the log file:

[16:18:04.437] [ RUN      ] AppImagePackageTest.testEmpty(false)
[16:18:04.439] TRACE: Create [/opt/mesos/slaves/35546316-ed70-4084-8244-d672e7734fd1-S64440/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a7871ef6-b5f7-40b7-8a29-f009dacb3b8f/runs/ec87761c-6251-4b9d-b69b-3fb11812854a/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/1/testEmpty.3cdfa783/4594589340496780854/EmptyAppImagePackageTest.app/lib/README] text file...
[16:18:04.441] TRACE: This is some arbitrary text for the README file

[16:18:04.442] TRACE: Done
[16:18:04.444] TRACE: Actions: [[initialize], [create], [unpack], [finalize]]
[16:18:04.445] TRACE: exec: Execute [/opt/mesos/jib-master/install/jdk-17+28-2505/macosx-x64.jdk/jdk-17.jdk/Contents/Home/bin/jpackage --dest ./testEmpty.3cdfa783/output --name EmptyAppImagePackageTest --type pkg --app-image ./testEmpty.3cdfa783/4594589340496780854/EmptyAppImagePackageTest.app --mac-package-identifier EmptyAppImagePackageTest --verbose](12); inherit I/O...
[16:18:04.740] Warning: app-image dir (./testEmpty.3cdfa783/4594589340496780854/EmptyAppImagePackageTest.app) not generated by jpackage.
[16:18:04.805] Building PKG package for EmptyAppImagePackageTest.
[16:18:04.812] Using default package resource background_pkg.png [pkg background image] (add EmptyAppImagePackageTest-background.png to the resource-dir to customize).
[16:18:04.821] Using default package resource background_pkg.png [pkg background image] (add EmptyAppImagePackageTest-background-darkAqua.png to the resource-dir to customize).
[16:18:04.822] Using default package resource product-def.plist [project definition file] (add product-def.plist to the resource-dir to customize).
[16:18:04.823] Preparing distribution.dist: /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage16556543527694851785/config/distribution.dist.
[16:18:04.860] Running /usr/bin/pkgbuild
[16:18:04.902] Command [PID: 70935]:
    /usr/bin/pkgbuild --root ./testEmpty.3cdfa783/4594589340496780854 --install-location /Applications --analyze /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage16556543527694851785/config/cpl.plist
[16:18:04.902] Output:
    pkgbuild: Inferring bundle components from contents of ./testEmpty.3cdfa783/4594589340496780854
    pkgbuild: Writing new component property list to /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage16556543527694851785/config/cpl.plist
[16:18:04.907] Returned: 0

[16:18:04.954] Preparing package scripts.
[16:18:04.955] Using default package resource preinstall.template [PKG preinstall script] (add preinstall to the resource-dir to customize).
[16:18:04.958] Using default package resource postinstall.template [PKG postinstall script] (add postinstall to the resource-dir to customize).
[16:18:04.960] Running /usr/bin/pkgbuild
[16:18:05.008] Command [PID: 70936]:
    /usr/bin/pkgbuild --root ./testEmpty.3cdfa783/4594589340496780854 --install-location /Applications --component-plist /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage16556543527694851785/config/cpl.plist --scripts /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage16556543527694851785/config/scripts --identifier EmptyAppImagePackageTest /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage16556543527694851785/packages/EmptyAppImagePackageTest-app.pkg
[16:18:05.008] Output:
    pkgbuild: Reading components from /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage16556543527694851785/config/cpl.plist
    pkgbuild: Adding top-level preinstall script
    pkgbuild: Adding top-level postinstall script
    pkgbuild: Wrote package to /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage16556543527694851785/packages/EmptyAppImagePackageTest-app.pkg
[16:18:05.008] Returned: 0

[16:18:05.094] Running /usr/bin/productbuild
[16:18:05.144] Command [PID: 70937]:
    /usr/bin/productbuild --resources /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage16556543527694851785/config --distribution /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage16556543527694851785/config/distribution.dist --package-path /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage16556543527694851785/packages /opt/mesos/slaves/35546316-ed70-4084-8244-d672e7734fd1-S64440/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a7871ef6-b5f7-40b7-8a29-f009dacb3b8f/runs/ec87761c-6251-4b9d-b69b-3fb11812854a/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/1/./testEmpty.3cdfa783/output/EmptyAppImagePackageTest-1.0.pkg
[16:18:05.144] Output:
    productbuild: Wrote product to /opt/mesos/slaves/35546316-ed70-4084-8244-d672e7734fd1-S64440/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a7871ef6-b5f7-40b7-8a29-f009dacb3b8f/runs/ec87761c-6251-4b9d-b69b-3fb11812854a/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/1/./testEmpty.3cdfa783/output/EmptyAppImagePackageTest-1.0.pkg
[16:18:05.144] Returned: 0

[16:18:05.144] Succeeded in building Mac PKG Package package
[16:18:05.165] TRACE: exec: Done. Exit code: 0
[16:18:05.166] TRACE: assertEquals(0): Check command [/opt/mesos/jib-master/install/jdk-17+28-2505/macosx-x64.jdk/jdk-17.jdk/Contents/Home/bin/jpackage --dest ./testEmpty.3cdfa783/output --name EmptyAppImagePackageTest --type pkg --app-image ./testEmpty.3cdfa783/4594589340496780854/EmptyAppImagePackageTest.app --mac-package-identifier EmptyAppImagePackageTest --verbose](12) exited with 0 code
[16:18:05.166] TRACE: assertTrue(): Check [./testEmpty.3cdfa783/output/EmptyAppImagePackageTest-1.0.pkg] path exists
[16:18:05.166] TRACE: assertTrue(): Check [./testEmpty.3cdfa783/output/EmptyAppImagePackageTest-1.0.pkg] is a file
[16:18:05.167] TRACE: exec: Execute [pkgutil --expand ./testEmpty.3cdfa783/output/EmptyAppImagePackageTest-1.0.pkg ./testEmpty.3cdfa783/unpacked-pkg/data](4); discard I/O...
[16:18:05.187] TRACE: exec: Done. Exit code: 0
[16:18:05.188] TRACE: assertEquals(0): Check command [pkgutil --expand ./testEmpty.3cdfa783/output/EmptyAppImagePackageTest-1.0.pkg ./testEmpty.3cdfa783/unpacked-pkg/data](4) exited with 0 code
[16:18:05.197] TRACE: exec: Execute [tar -C ./testEmpty.3cdfa783/unpacked-pkg/unpacked/Applications -xvf ./testEmpty.3cdfa783/unpacked-pkg/data/EmptyAppImagePackageTest-app.pkg/Payload](5); discard I/O...
[16:18:05.280] TRACE: exec: Done. Exit code: 0
[16:18:05.281] TRACE: assertEquals(0): Check command [tar -C ./testEmpty.3cdfa783/unpacked-pkg/unpacked/Applications -xvf ./testEmpty.3cdfa783/unpacked-pkg/data/EmptyAppImagePackageTest-app.pkg/Payload](5) exited with 0 code
[16:18:05.282] TRACE: exec: Execute [/opt/mesos/jib-master/install/jdk-17+28-2505/macosx-x64.jdk/jdk-17.jdk/Contents/Home/bin/jpackage --dest ./testEmpty.3cdfa783/output --name EmptyAppImagePackageTest --type dmg --app-image ./testEmpty.3cdfa783/4594589340496780854/EmptyAppImagePackageTest.app --mac-package-identifier EmptyAppImagePackageTest --verbose](12); inherit I/O...
[16:18:05.670] Warning: app-image dir (./testEmpty.3cdfa783/4594589340496780854/EmptyAppImagePackageTest.app) not generated by jpackage.
[16:18:05.729] Building DMG package for EmptyAppImagePackageTest.
[16:18:05.735] Using default package resource background_dmg.tiff [dmg background] (add EmptyAppImagePackageTest-background.tiff to the resource-dir to customize).
[16:18:05.858] Using default package resource JavaApp.icns [volume icon] (add EmptyAppImagePackageTest-volume.icns to the resource-dir to customize).
[16:18:05.973] Preparing dmg setup: /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage18383574082866507682/config/EmptyAppImagePackageTest-dmg-setup.scpt.
[16:18:05.974] Using default package resource DMGsetup.scpt [DMG setup script] (add EmptyAppImagePackageTest-dmg-setup.scpt to the resource-dir to customize).
[16:18:06.105] Creating DMG file: /opt/mesos/slaves/35546316-ed70-4084-8244-d672e7734fd1-S64440/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a7871ef6-b5f7-40b7-8a29-f009dacb3b8f/runs/ec87761c-6251-4b9d-b69b-3fb11812854a/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/1/./testEmpty.3cdfa783/output/EmptyAppImagePackageTest-1.0.dmg.
[16:18:06.109] Running /usr/bin/hdiutil
[16:18:27.071] Command [PID: 70944]:
    /usr/bin/hdiutil create -verbose -srcfolder /opt/mesos/slaves/35546316-ed70-4084-8244-d672e7734fd1-S64440/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a7871ef6-b5f7-40b7-8a29-f009dacb3b8f/runs/ec87761c-6251-4b9d-b69b-3fb11812854a/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/1/./testEmpty.3cdfa783/4594589340496780854/EmptyAppImagePackageTest.app -volname EmptyAppImagePackageTest -ov /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage18383574082866507682/images/EmptyAppImagePackageTest-tmp.dmg -fs HFS+ -format UDRW
[16:18:27.071] Output:
    2021-06-18 16:18:06.539 diskimages-helper[70946:80268131] *useEffectiveIDs**** euid/egid changed to 10668,20 (uid/gid is 10668,20)
    2021-06-18 16:18:06.539 diskimages-helper[70946:80268131] *useRealIDs******** euid/egid changed to 10668,20 (uid/gid is 10668,20)
    Initializing?
    2021-06-18 16:18:06.540 diskimages-helper[70946:80268131] *useEffectiveIDs**** euid/egid changed to 10668,20 (uid/gid is 10668,20)
    2021-06-18 16:18:06.548 copy-helper[70947:80268141] estimating /opt/mesos/slaves/35546316-ed70-4084-8244-d672e7734fd1-S64440/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a7871ef6-b5f7-40b7-8a29-f009dacb3b8f/runs/ec87761c-6251-4b9d-b69b-3fb11812854a/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/1/testEmpty.3cdfa783/4594589340496780854/EmptyAppImagePackageTest.app
    2021-06-18 16:18:07.706 diskimages-helper[70946:80268131] *useRealIDs******** euid/egid changed to 10668,20 (uid/gid is 10668,20)
    Creating?
    DIDiskImageCreatorProbe: interface  1, score    -1000, CSparseBundleDiskImage
    DIDiskImageCreatorProbe: interface  2, score    -1000, CSparseDiskImage
    DIDiskImageCreatorProbe: interface  3, score     1000, CRawDiskImage
    DIDiskImageCreatorProbe: interface  7, score    -1000, CWOUDIFDiskImage
    DIDiskImageCreateWithCFURL: CRawDiskImage
    DIFileEncodingCreatorProbe: interface  2, score    -1000, CEncryptedEncoding
    DIBackingStoreCreatorProbe: interface  0, score      100, CBSDBackingStore
    DIBackingStoreCreatorProbe: interface  1, score    -1000, CBundleBackingStore
    DIBackingStoreCreatorProbe: interface  2, score        0, CRAMBackingStore
    DIBackingStoreCreatorProbe: interface  3, score      300, CCarbonBackingStore
    DIBackingStoreCreatorProbe: interface  5, score     -100, CCURLBackingStore
    DIBackingStoreCreateWithCFURL: CCarbonBackingStore
    DIBackingStoreCreateWithCFURL: creator returned 0
    DIDiskImageCreateWithCFURL: creator returned 0
    DI_kextWaitQuiet: about to call IOServiceWaitQuiet...
    DI_kextWaitQuiet: IOServiceWaitQuiet took 0.000007 seconds
    Finishing?
    2021-06-18 16:18:26.586 diskimages-helper[70946:80268131] *useEffectiveIDs**** euid/egid changed to 10668,20 (uid/gid is 10668,20)
    DIHLDiskImageCreate() returned 49168
    hdiutil: create: returning 49168
    hdiutil: create failed - Resource busy
[16:18:27.077] Returned: 1

[16:18:27.077] java.io.IOException: Command [/usr/bin/hdiutil, create, -verbose, -srcfolder, /opt/mesos/slaves/35546316-ed70-4084-8244-d672e7734fd1-S64440/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a7871ef6-b5f7-40b7-8a29-f009dacb3b8f/runs/ec87761c-6251-4b9d-b69b-3fb11812854a/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/1/./testEmpty.3cdfa783/4594589340496780854/EmptyAppImagePackageTest.app, -volname, EmptyAppImagePackageTest, -ov, /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage18383574082866507682/images/EmptyAppImagePackageTest-tmp.dmg, -fs, HFS+, -format, UDRW] exited with 1 code
	at jdk.jpackage/jdk.jpackage.internal.Executor.executeExpectSuccess(Executor.java:90)
	at jdk.jpackage/jdk.jpackage.internal.IOUtils.exec(IOUtils.java:205)
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.buildDMG(MacDmgBundler.java:328)
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.bundle(MacDmgBundler.java:88)
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.execute(MacDmgBundler.java:567)
	at jdk.jpackage/jdk.jpackage.internal.Arguments.generateBundle(Arguments.java:676)
	at jdk.jpackage/jdk.jpackage.internal.Arguments.processArguments(Arguments.java:550)
	at jdk.jpackage/jdk.jpackage.main.Main.execute(Main.java:91)
	at jdk.jpackage/jdk.jpackage.main.Main.main(Main.java:52)
[16:18:27.088] Running /usr/bin/hdiutil
[16:18:46.642] Command [PID: 70974]:
    /usr/bin/hdiutil create -verbose -size 52428849 -volname EmptyAppImagePackageTest -ov /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage18383574082866507682/images/EmptyAppImagePackageTest-tmp.dmg -fs HFS+
[16:18:46.642] Output:
    Initializing?
    Creating?
    DIDiskImageCreatorProbe: interface  1, score        1, CSparseBundleDiskImage
    DIDiskImageCreatorProbe: interface  2, score        1, CSparseDiskImage
    DIDiskImageCreatorProbe: interface  3, score     1000, CRawDiskImage
    DIDiskImageCreatorProbe: interface  7, score    -1000, CWOUDIFDiskImage
    DIDiskImageCreateWithCFURL: CRawDiskImage
    DIFileEncodingCreatorProbe: interface  2, score    -1000, CEncryptedEncoding
    DIBackingStoreCreatorProbe: interface  0, score      100, CBSDBackingStore
    DIBackingStoreCreatorProbe: interface  1, score    -1000, CBundleBackingStore
    DIBackingStoreCreatorProbe: interface  2, score        0, CRAMBackingStore
    DIBackingStoreCreatorProbe: interface  3, score      300, CCarbonBackingStore
    DIBackingStoreCreatorProbe: interface  5, score     -100, CCURLBackingStore
    DIBackingStoreCreateWithCFURL: CCarbonBackingStore
    DIBackingStoreCreateWithCFURL: creator returned 0
    DIDiskImageCreateWithCFURL: creator returned 0
    DI_kextWaitQuiet: about to call IOServiceWaitQuiet...
    DI_kextWaitQuiet: IOServiceWaitQuiet took 0.000006 seconds
    Formatting?
    Finishing?
    DIHLDiskImageCreate() returned 49168
    hdiutil: create: returning 49168
    hdiutil: create failed - Resource busy
[16:18:46.642] Returned: 1

[16:18:46.643] java.io.IOException: Command [/usr/bin/hdiutil, create, -verbose, -size, 52428849, -volname, EmptyAppImagePackageTest, -ov, /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage18383574082866507682/images/EmptyAppImagePackageTest-tmp.dmg, -fs, HFS+] exited with 1 code
	at jdk.jpackage/jdk.jpackage.internal.Executor.executeExpectSuccess(Executor.java:90)
	at jdk.jpackage/jdk.jpackage.internal.IOUtils.exec(IOUtils.java:205)
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.buildDMG(MacDmgBundler.java:349)
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.bundle(MacDmgBundler.java:88)
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.execute(MacDmgBundler.java:567)
	at jdk.jpackage/jdk.jpackage.internal.Arguments.generateBundle(Arguments.java:676)
	at jdk.jpackage/jdk.jpackage.internal.Arguments.processArguments(Arguments.java:550)
	at jdk.jpackage/jdk.jpackage.main.Main.execute(Main.java:91)
	at jdk.jpackage/jdk.jpackage.main.Main.main(Main.java:52)
[16:18:46.646] jdk.jpackage.internal.PackagerException: java.io.IOException: Command [/usr/bin/hdiutil, create, -verbose, -size, 52428849, -volname, EmptyAppImagePackageTest, -ov, /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage18383574082866507682/images/EmptyAppImagePackageTest-tmp.dmg, -fs, HFS+] exited with 1 code
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.bundle(MacDmgBundler.java:93)
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.execute(MacDmgBundler.java:567)
	at jdk.jpackage/jdk.jpackage.internal.Arguments.generateBundle(Arguments.java:676)
	at jdk.jpackage/jdk.jpackage.internal.Arguments.processArguments(Arguments.java:550)
	at jdk.jpackage/jdk.jpackage.main.Main.execute(Main.java:91)
	at jdk.jpackage/jdk.jpackage.main.Main.main(Main.java:52)
Caused by: java.io.IOException: Command [/usr/bin/hdiutil, create, -verbose, -size, 52428849, -volname, EmptyAppImagePackageTest, -ov, /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage18383574082866507682/images/EmptyAppImagePackageTest-tmp.dmg, -fs, HFS+] exited with 1 code
	at jdk.jpackage/jdk.jpackage.internal.Executor.executeExpectSuccess(Executor.java:90)
	at jdk.jpackage/jdk.jpackage.internal.IOUtils.exec(IOUtils.java:205)
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.buildDMG(MacDmgBundler.java:349)
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.bundle(MacDmgBundler.java:88)
	... 5 more
[16:18:46.658] TRACE: exec: Done. Exit code: 1
[16:18:46.659] ERROR: Expected [0]. Actual [1]: Check command [/opt/mesos/jib-master/install/jdk-17+28-2505/macosx-x64.jdk/jdk-17.jdk/Contents/Home/bin/jpackage --dest ./testEmpty.3cdfa783/output --name EmptyAppImagePackageTest --type dmg --app-image ./testEmpty.3cdfa783/4594589340496780854/EmptyAppImagePackageTest.app --mac-package-identifier EmptyAppImagePackageTest --verbose](12) exited with 0 code
[16:18:46.660] [  FAILED  ] AppImagePackageTest.testEmpty(false); checks=6


There is a LOT of output for the failing test case. The first error I spotted:

[16:18:06.109] Running /usr/bin/hdiutil
[16:18:27.071] Command [PID: 70944]:
    /usr/bin/hdiutil create -verbose -srcfolder /opt/mesos/slaves/35546316-ed70-4084-8244-d672e7734fd1-S64440/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a7871ef6-b5f7-40b7-8a29-f009dacb3b8f/runs/ec87761c-6251-4b9d-b69b-3fb11812854a/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/1/./testEmpty.3cdfa783/4594589340496780854/EmptyAppImagePackageTest.app -volname EmptyAppImagePackageTest -ov /var/folders/lb/vf9rpybx5mn4nr513gkqyn4h000_dc/T/jdk.jpackage18383574082866507682/images/EmptyAppImagePackageTest-tmp.dmg -fs HFS+ -format UDRW
[16:18:27.071] Output:
    2021-06-18 16:18:06.539 diskimages-helper[70946:80268131] *useEffectiveIDs**** euid/egid changed to 10668,20 (uid/gid is 10668,20)
    2021-06-18 16:18:06.539 diskimages-helper[70946:80268131] *useRealIDs******** euid/egid changed to 10668,20 (uid/gid is 10668,20)
    Initializing?
    2021-06-18 16:18:06.540 diskimages-helper[70946:80268131] *useEffectiveIDs**** euid/egid changed to 10668,20 (uid/gid is 10668,20)
    2021-06-18 16:18:06.548 copy-helper[70947:80268141] estimating /opt/mesos/slaves/35546316-ed70-4084-8244-d672e7734fd1-S64440/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/a7871ef6-b5f7-40b7-8a29-f009dacb3b8f/runs/ec87761c-6251-4b9d-b69b-3fb11812854a/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/1/testEmpty.3cdfa783/4594589340496780854/EmptyAppImagePackageTest.app
    2021-06-18 16:18:07.706 diskimages-helper[70946:80268131] *useRealIDs******** euid/egid changed to 10668,20 (uid/gid is 10668,20)
    Creating?
    DIDiskImageCreatorProbe: interface  1, score    -1000, CSparseBundleDiskImage
    DIDiskImageCreatorProbe: interface  2, score    -1000, CSparseDiskImage
    DIDiskImageCreatorProbe: interface  3, score     1000, CRawDiskImage
    DIDiskImageCreatorProbe: interface  7, score    -1000, CWOUDIFDiskImage
    DIDiskImageCreateWithCFURL: CRawDiskImage
    DIFileEncodingCreatorProbe: interface  2, score    -1000, CEncryptedEncoding
    DIBackingStoreCreatorProbe: interface  0, score      100, CBSDBackingStore
    DIBackingStoreCreatorProbe: interface  1, score    -1000, CBundleBackingStore
    DIBackingStoreCreatorProbe: interface  2, score        0, CRAMBackingStore
    DIBackingStoreCreatorProbe: interface  3, score      300, CCarbonBackingStore
    DIBackingStoreCreatorProbe: interface  5, score     -100, CCURLBackingStore
    DIBackingStoreCreateWithCFURL: CCarbonBackingStore
    DIBackingStoreCreateWithCFURL: creator returned 0
    DIDiskImageCreateWithCFURL: creator returned 0
    DI_kextWaitQuiet: about to call IOServiceWaitQuiet...
    DI_kextWaitQuiet: IOServiceWaitQuiet took 0.000007 seconds
    Finishing?
    2021-06-18 16:18:26.586 diskimages-helper[70946:80268131] *useEffectiveIDs**** euid/egid changed to 10668,20 (uid/gid is 10668,20)
    DIHLDiskImageCreate() returned 49168
    hdiutil: create: returning 49168
    hdiutil: create failed - Resource busy
[16:18:27.077] Returned: 1",,,,,,,,,,,JDK-8269461,JDK-8270654,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x_10.15,,,,"0|i2ta83:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2021-06-25 14:28;roboduke;Changeset: fb0a95fe
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-06-25 21:27:35 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/fb0a95fed46a04475697204de576c57f98d5b55a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AccessControlException for SunPKCS11 daemon threads,JDK-8269034,5052215,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coffeys,coffeys,coffeys,2021-06-18 08:54,2021-12-24 15:09,2023-10-01 09:57,2021-06-29 15:53,17,,,,,,,17,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,regression,,,,,,,,,,,,,,,"New resource cleaner thread introduced via JDK-8240256 is lacking sufficient privilege when security manager is present.  

Exception in thread ""main"" java.security.ProviderException: Initialization failed
        at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:386)
        at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:117)
        at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:114)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
        at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.configure(SunPKCS11.java:114)
        at java.base/sun.security.jca.ProviderConfig$3.run(ProviderConfig.java:257)
        at java.base/sun.security.jca.ProviderConfig$3.run(ProviderConfig.java:248)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
        at java.base/sun.security.jca.ProviderConfig.doLoadProvider(ProviderConfig.java:248)
        at java.base/sun.security.jca.ProviderConfig.getProvider(ProviderConfig.java:226)
        at java.base/sun.security.jca.ProviderList.loadAll(ProviderList.java:317)
        at java.base/sun.security.jca.ProviderList.removeInvalid(ProviderList.java:334)
        at java.base/sun.security.jca.Providers.getFullProviderList(Providers.java:175)
        at java.base/java.security.Security.getProviders(Security.java:458)
        at DefaultPKCS11.main(DefaultPKCS11.java:13)
Caused by: java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""setContextClassLoader"")
        at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:485)
        at java.base/java.security.AccessController.checkPermission(AccessController.java:1068)
        at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:416)
        at java.base/java.lang.Thread.setContextClassLoader(Thread.java:1525)
        at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$NativeResourceCleaner.<init>(SunPKCS11.java:982)
        at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.initToken(SunPKCS11.java:1193)
		",,,,,,,,,,,JDK-8269648,JDK-8272899,JDK-8279272,JDK-8273932,JDK-8274284,JDK-8274990,JDK-8274964,JDK-8273481,JDK-8270673,,,,,,,,,,,,,,,,,,JDK-8240256,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ta77:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2021-06-18 08:55;coffeys;Thread should be reworked to use InnocuousThread;;;","2021-06-22 03:17;coffeys;Turns out that the poller thread has always had this issue in SunPKCS11 also: 

Exception in thread ""main"" java.security.ProviderException: Initialization failed
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:386)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:117)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:114)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.configure(SunPKCS11.java:114)
	at MultipleLogins.main(MultipleLogins.java:66)
Caused by: java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""setContextClassLoader"")
	at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:485)
	at java.base/java.security.AccessController.checkPermission(AccessController.java:1068)
	at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:416)
	at java.base/java.lang.Thread.setContextClassLoader(Thread.java:1525)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.createPoller(SunPKCS11.java:947)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.initToken(SunPKCS11.java:1074)
	at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:377)
	... 5 more

I reverted back the JDK-8240256 changes in TokenPoller and coaxed the thread to start via minor src edit (issue above seen)
;;;","2021-06-29 15:53;roboduke;Changeset: 0d745ae8
Author:    Sean Coffey <coffeys@openjdk.org>
Date:      2021-06-29 22:52:45 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/0d745ae8fde5cab290dc8c695d2906f9a98c491c
;;;","2021-09-16 06:32;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Follow-up for JDK-8269034. Doesn't apply cleanly. Review: https://github.com/openjdk/jdk11u-dev/pull/358;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stringdedup tests are failing if the ergonomically select GC does not support it,JDK-8269032,5052211,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kbarrett,cgo,cgo,2021-06-18 07:54,2022-02-08 02:53,2023-10-01 09:57,2021-07-19 06:46,18,,,,,,,18,hotspot,,0,gc,gc-pending-review,jdk17u-fix-request,jdk17u-fix-yes,testbug,,,,,,,,,,,,,"If the ergonomically selected GC doesn't support string deduplication, all tests in gc/stringdedup are failing. This is the case for client VMs.

I think the problem is that the requires ""vm.gc == ""null"""" basically means, that the test case should be executed if a GC has been selected ergonomically, but ""gc.gc == ""G1"""" only means that, the G1 gc is present and can be selected. So the test case is executed (and fails) if, for instance, the ergo GC is Serial, and G1 is compiled into the JVM.

https://git.openjdk.java.net/jdk/blob/master/test/hotspot/jtreg/gc/stringdedup/TestStringDeduplicationAgeThreshold.java

Since certain GCs are required. I think the test case should be executed in othervm mode with the specific GC enabled, if the GC is available.",,,,,,,,,,,JDK-8281446,JDK-8280285,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271834,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ta6b:",9223372036854775807,b07,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-21 03:00;stefank;The way we usually write test like this is to specify @require vm.gc.G1 and then explicitly add -XX:+UseG1GC to the process running the test. The dedup tests are run in ""driver"" mode and needs to pass down -XX:+UseG1GC to the ProcessTool line that spawns the tested process.
;;;","2021-07-19 06:46;roboduke;Changeset: 3fc761d9
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2021-07-19 13:43:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3fc761d97d43429d3fdc0646835c462e0fe1bd3e
;;;","2022-01-19 00:24;goetz;Fix request [17u]

I backport this test-only fix to simplify follow up backports.
The fix is also nice to have.
No risk, only a test change.
Clean backport. 
SAP nightly testing passed.;;;","2022-01-19 00:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/105
Date: 2022-01-19 08:23:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
linux x86_64 check for binutils 2.25 or higher after 8265783,JDK-8269031,5052209,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2021-06-18 07:03,2023-03-02 09:16,2023-10-01 09:57,2021-06-22 06:29,18,,,,,,,18,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,,,,,,,,,,,,,,,"After 8265783: Create a separate library for x86 Intel SVML assembly intrinsics
we run into build errors when older (than 2.25) binutils are used on linux x86_64 .
See  https://bugs.openjdk.java.net/browse/JDK-8265783
On an old Ubuntu Linux with binutils 2.24 and gcc-7.3 we noticed this build error :
* For target support_native_jdk.incubator.vector_libsvml_svml_d_acos_linux_x86.o:
svml_d_acos.c: Assembler messages:
svml_d_acos.c:1137: Error: operand type mismatch for `vorpd'
svml_d_acos.c:1138: Error: operand type mismatch for `vandpd'
svml_d_acos.c:1149: Error: operand type mismatch for `vxorpd'
svml_d_acos.c:1155: Error: operand type mismatch for `vorpd'
svml_d_acos.c:1166: Error: operand type mismatch for `vxorpd'
svml_d_acos.c:1191: Error: operand type mismatch for `vorpd'
svml_d_acos.c:1196: Error: operand type mismatch for `vxorpd'
svml_d_acos.c:1199: Error: operand type mismatch for `vorpd'
svml_d_acos.c:1201: Error: operand type mismatch for `vxorpd'
svml_d_acos.c:1205: Error: operand type mismatch for `vxorpd'

No issue has been seen however with gcc-7/gcc-8 and later binutils (e.g. 2.29).
Is there some minimum binutils requirement for this to compile ?
If so, should we check for the binutils version in configure (or is it something else
and not related to binutils) ?

Answer:
Yes this is due to binutils. Minimum required would be binutils 2.25 where AVX512 support was added for Skylake.

So some check for the binutils version might be beneficial (there is already a linker version check in place that could be reused).",,,,,,,,,,,JDK-8273524,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265783,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,"0|i2ta5v:",9223372036854775807,b03,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-06-22 06:29;roboduke;Changeset: 18a1dd26
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2021-06-22 13:28:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/18a1dd261cec6fa1c5820dce2df47d488417afff
;;;","2021-08-31 03:41;mbaesken;jdk17u backport request
I would like to have the change in jdk17u as well, because the issue (caused by 8265783) is present there too.  The patch applies cleanly.
Backport PR : https://github.com/openjdk/jdk17u/pull/46;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/codegen/TestCharVect2.java fails for client VMs,JDK-8269029,5052206,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cgo,cgo,cgo,2021-06-18 06:31,2022-09-16 00:25,2023-10-01 09:57,2021-06-21 04:09,18,,,,,,,18,hotspot,,0,c1,hs-comp-triaged,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-18,testbug,,,,,,,,,"The change done for JDK-8258647 removes the requires tags, hence the test is executed for a client VM with the VM flags MaxVectorSize which is unrecognized:

Unrecognized VM option 'MaxVectorSize=8'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.",,,,,,,,,,,JDK-8293904,JDK-8291055,JDK-8293913,,,,,,,,,,,,,,,,,,,JDK-8258647,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2ta57:",9223372036854775807,b03,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-18 13:11;dlong;ILW = one failed test, client VM only, no workaround = MLH = P4;;;","2021-06-21 04:09;roboduke;Changeset: cbec37d4
Author:    Christoph Göttschkes <cgo@openjdk.org>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2021-06-21 11:08:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cbec37d45d77533081c27b3fc649098dfcca0425
;;;","2022-09-15 06:13;goetz;Fix request [17u,11u]

I backport this for parity with 17.0.6-oracle.  As I'm on it, I take it to 11, too.
No risk, only a test change.
Clean backport to 17, trivial resolve for 11.
Test passes.;;;","2022-09-15 06:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1357
Date: 2022-09-15 13:20:18 +0000;;;","2022-09-15 06:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/676
Date: 2022-09-15 13:22:23 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PasswordField doesn't render bullet character on Android,JDK-8269026,5052200,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2021-06-18 05:00,2021-06-23 06:20,2023-10-01 09:57,2021-06-18 09:35,8u60,jfx11,jfx16,,,,,jfx17,javafx,,0,,,,,,,,,,,,,,,,,,"JDK-8095314 changed the bullet character from \u2022 to \u25cf. This works fine on Desktop, but the current unicode is not supported on Android with most of the typical fonts, like Roboto (see https://www.htmlsymbols.xyz/unicode/U+25CF).

Since there is a custom TextFieldSkinAndroid, it should be possible to revert the unicode, just for Android, to the original symbol, which is fully supported (https://www.htmlsymbols.xyz/unicode/U+2022).",Android,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,other,,,,"0|i2ta3v:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-06-18 09:35;roboduke;Changeset: 13cffbaa
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2021-06-18 16:34:11 +0000
URL:       https://git.openjdk.java.net/jfx/commit/13cffbaad4068177d2d3239fa297302c3f94c217
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jsig/Testjsig.java doesn't check exit code,JDK-8269025,5052196,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iignatyev,iignatyev,iignatyev,2021-06-18 03:59,2021-07-15 10:09,2023-10-01 09:57,2021-06-18 08:26,17,,,,,,,17,hotspot,,0,noreg-self,,,,,,,,,,,,,,,,,`jsig/Testjsig.java` test spawns a new JVM but doesn't check its exit code which might lead to both type-I and type-II errors,,,,,,,,,,,JDK-8270598,JDK-8269059,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ta2z:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-18 08:26;roboduke;Changeset: 60389eed
Author:    Igor Ignatyev <iignatyev@openjdk.org>
Date:      2021-06-18 15:25:25 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/60389eedb3c9932de57aca740a8116db83302ffa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update the java manpage for JDK 18,JDK-8269003,5052173,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,dholmes,dholmes,2021-06-17 22:37,2021-06-30 17:14,2023-10-01 09:57,2021-06-27 19:24,18,,,,,,,18,hotspot,,0,17-na,manpage,,,,,,,,,,,,,,,,"There are some start of release changes needed to the manpage that were overlooked:
- update list of previous releases
-  updated ""removed option"" section to get rid of things removed in 17",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257038,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t9xv:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-27 19:24;roboduke;Changeset: f45be151
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-06-28 02:23:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f45be1519e84dd0562a841ceb23bcec4dec1437f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] UnifiedPrimitiveClassNestHostTest.java should test with the primary mirror,JDK-8268981,5052149,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,mchung,mchung,2021-06-17 15:15,2021-06-17 15:49,2023-10-01 09:57,2021-06-17 15:49,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lworld,testbug,,,,,,,,,,,,,,,,"test/langtools/tools/javac/valhalla/lworld-values/UnifiedPrimitiveClassNestHostTest.java fails because it verifies the nest host with a secondary mirror but the core reflection API returns the primary mirror.

It's a test bug.

diff --git a/test/langtools/tools/javac/valhalla/lworld-values/UnifiedPrimitiveClassNestHostTest.java b/test/langtools/tools/javac/valhalla/lworld-values/UnifiedPrimitiveClassNestHostTest.java
index 7ff37eccdb6..59c1b84b6a3 100644
--- a/test/langtools/tools/javac/valhalla/lworld-values/UnifiedPrimitiveClassNestHostTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/UnifiedPrimitiveClassNestHostTest.java
@@ -65,7 +65,7 @@ public primitive class UnifiedPrimitiveClassNestHostTest implements java.io.Seri
         if (!members[0].equals(nestHost))
             throw new AssertionError(""Wrong initial member: "" + members[0]);
 
-        if (!members[1].equals(Inner.class))
+        if (!members[1].equals(Inner.class.asPrimaryType()))
             throw new AssertionError(""Wrong initial member: "" + members[1]);
 
         if (!members[1].getNestHost().equals(nestHost))",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t9sj:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lword] Fix Class::descriptorString to return L-descriptor for primitive ref type,JDK-8268980,5052145,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,mchung,mchung,2021-06-17 15:01,2021-06-17 15:23,2023-10-01 09:57,2021-06-17 15:23,repo-valhalla,,,,,,,repo-valhalla,core-libs,,0,lworld,,,,,,,,,,,,,,,,,"--- a/src/java.base/share/classes/java/lang/Class.java
+++ b/src/java.base/share/classes/java/lang/Class.java
@@ -4518,7 +4518,7 @@ public final class Class<T> implements java.io.Serializable,
         if (isArray()) {
             return ""["" + componentType.descriptorString();
         }
-        char typeDesc = isPrimitiveClass() ? 'Q' : 'L';
+        char typeDesc = isValueType() ? 'Q' : 'L';
         if (isHidden()) {
             String name = getName();
             int index = name.indexOf('/');",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t9rn:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Document the javadoc software stack,JDK-8268978,5052143,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-06-17 13:35,2022-02-02 17:29,2023-10-01 09:57,2022-01-26 09:12,18,,,,,,,19,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,"It would be good to document the javadoc software stack, including

* the Standard (HTML) doclet (formats.html, formats.html.markup)
* the toolkit layer
* the Doclet API
* the tool
* javac

This could be done by expanding the comment in the jdk.javadoc.internal package-info.java file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t9r7:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-12-21 16:52;roboduke;A pull request was submitted for review.

URL: https://git.openjdk.java.net/jdk/pull/6914
Date: 2021-12-22 00:48:08 +0000
;;;","2022-01-26 09:12;roboduke;Changeset: b8365aa4
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-01-26 17:10:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b8365aa48599a318c426c2ec4ffb3f296ffdbd73
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GetJREPath() JLI function fails to locate libjava.so if not standard Java launcher is used,JDK-8268974,5052135,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,mcimadamore,mcimadamore,2021-06-17 11:01,2021-07-28 21:14,2023-10-01 09:57,2021-07-22 12:37,17,,,,,,,18,tools,,0,sn_96,sn_97,sn_98,,,,,,,,,,,,,,,"I have put together an hello world application, with a jarfile. If I jpackage it with the following command line:

```
$ jpackage --type app-image --name HelloWorld --input out/artifacts/jpackage_test_jar --main-jar jpackage-test.jar --dest output
```

Everything works correctly, and launching the generated app prints ""Hello world"":

```
$ output/HelloWorld/bin/HelloWorld
Hello world!
```

However, if the destination directory contains ""bin"" (even as a nested subfolder), there are issues. Here's the jextract command line:

```
$ jpackage --type app-image --name HelloWorld --input out/artifacts/jpackage_test_jar --main-jar jpackage-test.jar --dest bin
```

(the only thihng that changed is the --dest parameter)

And here's what I get:

```
$ bin/HelloWorld/bin/HelloWorld
Error: could not find libjava.so
Error: Could not find Java SE Runtime Environment.
```

I use Ubuntu 20.04. A colleague of mine using MacOS does not seem to have the same issue, so it seems to be system specific.

I'm using the latest jpackage from jdk/jdk. 

See:
https://mail.openjdk.java.net/pipermail/core-libs-dev/2021-June/079041.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux_ubuntu,,,,"0|i2t9pf:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2021-06-18 08:26;asemenyuk;I can reproduce the problem on Ubuntu.
If the output ""bin"" directory is  renamed to ""out"" the app launches without issues.;;;","2021-06-18 15:06;asemenyuk;Error: could not find libjava.so comes from GetJREPath() function (https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/unix/native/libjli/java_md.c#L529) if both GetApplicationHome() and GetApplicationHomeFromDll() fail to detect location of libjava.so.
GetApplicationHome() fails as expected as it works only for the standard Java launcher.
GetApplicationHomeFromDll() should not fail and this is the case of app launcher created by jpackage because GetApplicationHomeFromDll() implementation (https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/unix/native/libjli/java_md_common.c#L91) detects Java home from the path to libjli.so.
However TruncatePath() (https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/unix/native/libjli/java_md_common.c#L52) called from GetApplicationHomeFromDll() get confused with ""bin"" in the path to libjli.so which is /tmp/bin/HelloWorld/lib/runtime/lib/libjli.so. TruncatePath() looks for ""/bin/"" first in ""/tmp/bin/HelloWorld/lib/runtime/lib/libjli.so"" string and then it looks for ""/lib/"". But this is wrong order as it should look for ""/lib/"" first. I.e. TruncatePath() should look for ""/bin/"" and then for ""/lib/"" if called from GetApplicationHome() and for ""/lib/"" first and then for ""/bin/"" if called from GetApplicationHomeFromDll(). 
Fixed version of TruncatePath() solves the problem.

This is not jpackage issue, btw. jpackage launcher uncovered a bug in JLI implementation.
;;;","2021-07-22 12:37;roboduke;Changeset: 984003d5
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2021-07-22 18:53:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/984003d5c969443abae2d889e92cba30da26e55f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add default impl for recent new Reporter.print method,JDK-8268972,5052132,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-06-17 09:40,2021-08-03 09:53,2023-10-01 09:57,2021-06-24 18:06,17,,,,,,,17,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,"JDK-8267204 added new API to the Reporter class. One of the new methods added to the interface was not declared with a default implementation. Although not strictly required in normal usage with javadoc, it is the prevailing convention to provide some sort of default implementation.

The method in question is
void print(Diagnostic.Kind kind, FileObject file, int start, int pos, int end, String message);

There is no reasonable default behavior other than to throw UnsupportedOperationException.",,,,,,,,,,,JDK-8269456,JDK-8270643,,,,,,,,,,,,JDK-8268973,,,,,,,,JDK-8267127,JDK-8269689,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t9or:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-06-24 18:06;roboduke;Changeset: 44691cc3
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-06-25 01:05:23 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/44691cc3b003ee6769249b481fb9bf9c5afa6182
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: 'bad AD file' in some vector conversion tests,JDK-8268966,5052123,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,eliu,enikitin,enikitin,2021-06-17 06:14,2021-08-17 02:50,2023-10-01 09:57,2021-07-06 09:00,17,,,,,,,17,hotspot,,0,atr,c2,c2-vector,hs-comp-triaged,intermittent,oracle-triage-11,oracle-triage-17,,,,,,,,,,,"The test was run with the following arguments:

-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -Xcomp -server -XX:-TieredCompilation

Some info from hs_err file:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error ($WORK_DIR/slaves/$SL_2/frameworks/$FW_ID/executors/$EXEC_2/runs/$RUN_2/workspace/open/src/hotspot/share/opto/matcher.cpp:1681), pid=48585, tid=22787
#  assert(false) failed: bad AD file
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2439)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2439, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Core dump will be written. Default location: core.48585
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
...
---------------  T H R E A D  ---------------

Current thread (0x000000012580c820):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=22787, stack(0x000000016f260000,0x000000016f463000)]


Current CompileTask:
C2:  25683 7907    b        jdk.incubator.vector.Float128Vector::selectFrom (6 bytes)

Stack: [0x000000016f260000,0x000000016f463000],  sp=0x000000016f45ee10,  free space=2043k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xfa4a38]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d8
V  [libjvm.dylib+0xfa5100]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x5154d8]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0xbf0b74]  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0x930
V  [libjvm.dylib+0xbeaef8]  Matcher::match_tree(Node const*)+0x250
V  [libjvm.dylib+0xbea4d8]  Matcher::xform(Node*, int)+0x918
V  [libjvm.dylib+0xbe8d20]  Matcher::match()+0x9c0
V  [libjvm.dylib+0x4c29d4]  Compile::Code_Gen()+0xd0
V  [libjvm.dylib+0x4c06d8]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1484
V  [libjvm.dylib+0x3ca9a4]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xf8
V  [libjvm.dylib+0x4da5a4]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x604
V  [libjvm.dylib+0x4d9da0]  CompileBroker::compiler_thread_loop()+0x2c0
V  [libjvm.dylib+0xf09b90]  JavaThread::thread_main_inner()+0x284
V  [libjvm.dylib+0xf06f60]  Thread::call_run()+0x21c
V  [libjvm.dylib+0xcdda7c]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x706c]  _pthread_start+0x140",,,,,,,,,,,JDK-8269979,JDK-8270717,,,,,,,,,,,,,,,,,JDK-8265244,JDK-8259948,,JDK-8272413,JDK-8269866,,,,JDK-8269952,,,,,,"2021-06-23 21:26;eliu;Float128VectorTests-1.jtr;https://bugs.openjdk.org/secure/attachment/95237/Float128VectorTests-1.jtr","2021-06-17 06:14;enikitin;Float128VectorTests.jtr;https://bugs.openjdk.org/secure/attachment/95182/Float128VectorTests.jtr","2021-06-17 06:14;enikitin;hs_err_pid48585.log;https://bugs.openjdk.org/secure/attachment/95184/hs_err_pid48585.log","2021-06-17 06:14;enikitin;replay_pid48585.log;https://bugs.openjdk.org/secure/attachment/95183/replay_pid48585.log",,,aarch64,,,,,,,,,,,,,,"0|i2t9mr:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-18 01:37;enikitin;jdk/incubator/vector/FloatMaxVectorTests.java seems also to be failing due to this.;;;","2021-06-18 13:02;dlong;ILW = new vector tests cause c2 crash, aarch64 only, intermittent, Xcomp only, workaround: don't use Xcomp = HLM = P3;;;","2021-06-27 21:22;njian;Floating point to integer type casting rules are missing for aarch64. We need to either add codegen support for those rules, or at least mark them as unsupported in match_rule_supported_vector and add those rules in next release.;;;","2021-06-29 09:57;kvn;[~njian] For JDK 17 mark them as unsupported and file a separate Enhancement for future JDK to implement them. I think it is the best way.;;;","2021-06-29 18:46;eliu;Agree.

At this moment, I find that not only the VectorCastF2X has not been supported, but some other conversion of vector would crash JVM as well. I'm now marking them and testing.;;;","2021-07-01 07:58;chagedorn;[~eliu] Are JDK-8259948 and JDK-8265244 a subset of this? They both mention missing rules for aarch64 for conversions which result in bad AD file failures.;;;","2021-07-01 19:09;eliu;[~chagedorn] Yes, I think they are related, but I don't know the status of those two bugs. Since it's close to end of RDP 1, I will do as [~kvn] suggested for jdk17. If [~whuang] is not going to work on JDK-8259948 and JDK-8265244, I am happy to take them and fix them at jdk mainline.;;;","2021-07-02 03:04;chagedorn;Okay, I'm not sure about the state either. Maybe [~whuang] can jump in here. 

So, with the fix suggested by [~kvn], JDK-8259948 and JDK-8265244 would be fixed for now and could be closed as duplicates and then be linked to the new RFE for JDK 18 if I understand that correctly. Then you can still split/merge the work on the new RFE if [~whuang] already has part of the implementations or take it over completely if that's fine with him.;;;","2021-07-02 03:33;eliu;[~chagedorn] Thanks, I changed the JBS tittle and the patch will come soon. I think it could catch up the RDP 1.;;;","2021-07-02 03:37;chagedorn;Great, thanks!;;;","2021-07-06 09:00;roboduke;Changeset: 1166ef25
Author:    Eric Liu <eliu@openjdk.org>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2021-07-06 15:59:04 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/1166ef25e9a119b1801f036eaea1d97fc2bb9329
;;;","2021-07-06 14:38;kvn;New tested exposed an issue on x86. I filed JDK-8269952.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,
TCP Connection Reset when connecting simple socket to SSL server,JDK-8268965,5052120,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,abakhtin,abakhtin,abakhtin,2021-06-17 05:55,2022-04-08 03:44,2023-10-01 09:57,2022-02-22 20:09,11,13,15,17,18,8,,18,security-libs,,0,8bpr-critical-approved,azul-interest,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,regression,,,,,,"Simple socket connection fails with  TCP Connection Reset in case of connecting to the SSL Server.
SSL Server fails as expected: ""javax.net.ssl.SSLException: Unsupported or unrecognized SSL message""
The client connection fails with:
ACTUAL BEHAVIOUR: 
java.net.SocketException: ""Connection reset"" 
EXPECTED BEHAVIOUR: 
java.io.EOFException

It happens because of SSL server does not clean the input stream before closing the underlying socket. As result, it causes TCP connection resets on some platforms.

JDK8 TLSv1.2 implementation did not have such an issue because of it explicitly clean the input stream before closing the socket : https://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/file/fde7fd2a2fd2/src/share/classes/sun/security/ssl/SSLSocketImpl.java#l1932
Suggest doing the same in the TLSv1.3 implementation.

Please note: issue reproduced with the PlainSocketImpl only. JDK13 and higher should be run with -Djdk.net.usePlainSocketImpl=true option. JDK8 and JDK11 reproduce this issue in the default configuration.",,,,,,,,,,,JDK-8270748,JDK-8272848,JDK-8276270,JDK-8274923,JDK-8270288,JDK-8270289,JDK-8271200,JDK-8270291,JDK-8273689,JDK-8271617,JDK-8271712,,,,,,,,,,,JDK-8271117,JDK-8271853,JDK-8274524,,,JDK-8284192,JDK-8272761,JDK-8272643,,,,"2021-06-17 05:58;abakhtin;SSLSocketReset.java;https://bugs.openjdk.org/secure/attachment/95181/SSLSocketReset.java",,,,,,,,,,,,,,11,,,,,,"0|i2t9m3:",9223372036854775807,b06,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,Verified,,"2021-07-08 09:45;roboduke;Changeset: 6f171b9f
Author:    Alexey Bakhtin <abakhtin@openjdk.org>
Committer: Vladimir Kempik <vkempik@openjdk.org>
Date:      2021-07-08 16:44:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6f171b9f0d28ad17b31a54bad894f38d19df6f73
;;;","2021-07-08 14:21;abakhtin;Fix request [17]
The original patch applies cleanly.
The new test passed successfully.;;;","2021-07-12 00:54;abakhtin;Fix request [15]
The original patch applies almost clean except of instanceof pattern matching not available in jdk15
sun/security/ssl and new test are passed;;;","2021-07-12 00:55;abakhtin;Fix request [13]
15u patch applies clean
sun/security/ssl and new test are passed ;;;","2021-07-13 03:52;roboduke;Changeset: e1d3e73d
Author:    Alexey Bakhtin <abakhtin@openjdk.org>
Committer: Vladimir Kempik <vkempik@openjdk.org>
Date:      2021-07-12 10:24:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e1d3e73d4ee32fac7e5b6b2666221717270d4814
;;;","2021-07-22 06:33;abakhtin;Fix request [11]
13u patch applies clean
sun/security/ssl and new test are passed ;;;","2021-07-23 04:13;abakhtin;Fix request [8u]
11u patch applies cleanly after updating files location
sun/security/ssl and new test are passed ;;;","2022-04-08 03:44;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[IR Framework] Some default regexes matching on PrintOptoAssembly in IRNode.java do not work on all platforms,JDK-8268963,5052118,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,enikitin,enikitin,2021-06-17 05:24,2021-08-23 11:30,2023-10-01 09:57,2021-07-30 05:29,17,18,,,,,,18,hotspot,,0,atr,hs-comp-triaged,ir-framework,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,noreg-self,oracle-triage-11,oracle-triage-17,,,,,,,,,"Have been seen only in aarch64 so far.

Please find workdir and .jtr files attached. The stacktrace (though it looks not very informative):

java.lang.RuntimeException: Method fail6(), Rule 1 with ""failOn"" should have failed at Regex 2: expected true, was false
        at jdk.test.lib.Asserts.fail(Asserts.java:594)
        at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
        at ir_framework.tests.RegexConstraint.checkIRRule(TestIRMatching.java:1535)
        at ir_framework.tests.Constraint.checkConstraint(TestIRMatching.java:1399)
        at ir_framework.tests.TestIRMatching.checkConstraints(TestIRMatching.java:279)
        at ir_framework.tests.TestIRMatching.runCheck(TestIRMatching.java:271)
        at ir_framework.tests.TestIRMatching.main(TestIRMatching.java:59)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Method fail6(), Rule 1 with ""failOn"" should have failed at Regex 2: expected true, was false",,,,,,,,,,,JDK-8272647,JDK-8272681,,,,,,,,,,,,,,,,,,,,JDK-8271528,,,,,,,,,,,"2021-06-17 05:23;enikitin;TestIRMatching.jtr;https://bugs.openjdk.org/secure/attachment/95180/TestIRMatching.jtr","2021-06-17 05:23;enikitin;workdir.zip;https://bugs.openjdk.org/secure/attachment/95179/workdir.zip",,,,,aarch64,ppc,s390x,,,,,,,,,,,,"0|i2t9ln:",9223372036854775807,b09,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-18 13:18;dlong;ILW = one testing failing, one platform, no workaround = MLH = P4;;;","2021-07-09 02:11;chagedorn;Some default regexes in IRNode.java matching on PrintOptoAssembly only work for x64. Other platform have different rules/formats. I will update the default regexes to support all platforms.;;;","2021-07-30 05:29;roboduke;Changeset: 9856ace8
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2021-07-30 12:28:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9856ace828617d3f2f9a6282e650009d3af65749
;;;","2021-08-22 22:51;thartmann;I've already pushed the backport to JDK 17u and forgot to request approval. Doing this now:

Fix request (17u):
This is a fix for the IR testing framework that is required to support the corresponding tests in JDK 17u. It does not affect product. The fix is low risk and has been tested in the JDK 18 CI for a while and with tier1-3 in JDK 17u. The patch applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parenthesized pattern with guards does not work,JDK-8268961,5052116,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-06-17 05:05,2021-07-15 10:14,2023-10-01 09:57,2021-06-23 03:17,17,,,,,,,17,tools,,0,conformance,tck-red-17,,,,,,,,,,,,,,,,"Consider code like:
```
case (String s) && !s.isEmpty():
```

This is a guarded pattern, where the nested pattern is parenthesized. But javac won't parse this code:

$ javac Test.java 
Test.java:4: error: : or -> expected
            case (String s) && !s.isEmpty():
                           ^
...errors continue....
",,,,,,,,,,,JDK-8269440,JDK-8270627,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t9l7:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-23 03:17;roboduke;Changeset: bf706207
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-23 10:16:42 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/bf706207454d8aea57049189befdf2a08e6d1291
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/net/httpserver/Headers.java: Ensure mutators normalize keys and disallow null for keys and values,JDK-8268960,5052115,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2021-06-17 05:01,2022-04-08 03:45,2023-10-01 09:57,2021-07-01 02:56,,,,,,,,18,core-libs,,0,release-note=yes,,,,,,,,,,,,,,,,,"The Headers class normalizes its keys to adhere to the following format: First character uppercase, all other characters lowercase, for example ""foo"" -> ""Foo"". This behaviour is not consistent across the mutator methods of the class, in particular putAll() and replaceAll() do not apply normalization.  

Suggested fix:
- change the implementation of putAll()
- add adequate override of the java.util.Map default method replaceAll()

Additionally, update Headers to disallow null values for keys and values.",,,,,,,,,,,,,,,,,,,,,,,,JDK-8269296,,,,,,,,,,,,,JDK-8270007,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t9kz:",9223372036854775807,b05,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2021-07-01 02:56;roboduke;Changeset: 82bfc5d4
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-07-01 09:56:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/82bfc5d45c54fb37dc021bc91fa17efe34f77f44
;;;","2022-04-08 03:45;sqetools;verified;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Re-implement JDK-8266015 after the merge,JDK-8268946,5052098,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,dsimms,dsimms,2021-06-17 00:39,2021-07-20 05:07,2023-10-01 09:57,2021-07-20 05:07,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,"To expedite merging from JDK, JDK-8266015 was dropped as it was entangled with Valhalla calling convention changes",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8266015,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t9h7:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-07-08 05:45;thartmann;I've disabled adapter sharing verification because test/hotspot/jtreg/compiler/debug/VerifyAdapterSharing.java currently fails. Should be fixed with this bug as well.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Re-implement JDK-8267151 after merge,JDK-8268945,5052097,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,dsimms,dsimms,2021-06-17 00:36,2021-07-19 06:30,2023-10-01 09:57,2021-07-19 06:30,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw3,lworld,,,,,,,,,,,,,,,"To expedite merging from JDK,  JDK-8267151 was dropped.

Needs reexamination and reimplementation if necessary.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267151,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t9gz:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Windows: link error: unresolved external symbol ""int __cdecl convert_to_unicode(char const *,wchar_t * *)""",JDK-8268927,5052075,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2021-06-16 18:13,2021-11-16 12:18,2023-10-01 09:57,2021-06-17 00:04,18,,,,,,,18,hotspot,,0,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,,,,,,,,,,,,,,,"After the changes in JDK-8238649 some users are experience a build error:

On 17/06/2021 9:47 am, Vitaly Provodin wrote:
> Hi all,
> 
> Building OpenJDK on Windows I am faced with the following error
> 
> ---------------------------8<---------------------------
> os_windows.obj : error LNK2019: unresolved external symbol ""int __cdecl convert_to_unicode(char const *,wchar_t * *)"" (?convert_to_unicode@@YAHPEBDPEAPEA_W@Z) referenced in function ""public: static void __cdecl os::set_native_thread_name(char const *)"" (?set_native_thread_name@os@@SAXPEBD@Z)
> c:\buildagent\work\d0555747f6bd5c6\build\windows-x86_64-server-release\support\modules_libs\java.base\server\jvm.dll : fatal error LNK1120: 1 unresolved externals

This is not seen by all users. 

convert_to_unicode is a static function in os_windows.cpp and was used prior to this recent change with set_native_thread_name(). The only difference is that we declared a function prototype for it, as a forward declaration, as it is defined later in the file. It seems the prototype and the definition are subtly different, leading to the linker thinking this is an external reference.",Visual Studio 2019 Developer Command Prompt v16.8.5 is used for building,,,,,,,,,,JDK-8277271,JDK-8277064,,,,,,,,,,,,,,,,,,,,JDK-8238649,,,,,,,,,,,,,,,,,x86,,,,,,,b02,18,,windows,,,,"0|i2t9c3:",9223372036854775807,b03,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-16 18:18;dholmes;We don't seem to have a problem using VS 16.9.3 but it does seem that the prototype should have the static storage class modifier to match the definition, otherwise it is assumed to be ""extern"".;;;","2021-06-16 22:45;dholmes;g++/gcc confirm this is an error. I have no idea why later VS permits it, when earlier versions did not. I can't find any changelog for VS that relates to this as a known change. Anyway adding the missing static should be fine.;;;","2021-06-17 00:04;roboduke;Changeset: e8446107
Author:    David Holmes <dholmes@openjdk.org>
Date:      2021-06-17 07:02:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e84461072af9cdb2ee83f5c0747ea5881a0ae805
;;;","2021-11-03 14:48;akasko;Fix request (17u)

Clean backport of a Windows-specific enhancement.

Note, there is a follow-up fix: JDK-8268927 to this backport.;;;","2021-11-04 18:31;dbuck;[~akasko] Can you please clarify what the follow-up fix is? I think you accidently linked the wrong bug ID above.;;;","2021-11-05 04:59;akasko;Apologies, the fix request was incorrectly added to this issue, it was intended to be added to:

JDK-8238649: Call new Win32 API SetThreadDescription in os::set_native_thread_name

I've removed the ""jdk17u-fix-request"" label from this issue and will add it to  JDK-8238649.;;;","2021-11-10 03:05;akasko;Fix request (17u)

Clean backport of the follow-up fix to JDK-8238649.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebKit build fails with Xcode 12.5,JDK-8268915,5052062,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kcr,jgneff,jgneff,2021-06-16 14:12,2021-08-18 04:43,2023-10-01 09:57,2021-06-23 04:48,8,jfx11,jfx17,,,,,jfx17,javafx,,0,noreg-build,sn_95,sn_96,,,,,,,,,,,,,,,"The production build of JavaFX fails on macOS 11.4 using the latest Command Line Tools for Xcode 12.5. The previous version 12.4 of the Command Line Tools for Xcode works fine.

I ran Gradle with the following options:

$ gradle --info -PCONF=Release -PPROMOTED_BUILD_NUMBER=12 -PHUDSON_BUILD_NUMBER=101 -PHUDSON_JOB_NAME=jfx -PCOMPILE_WEBKIT=true -PCOMPILE_MEDIA=true -PBUILD_LIBAV_STUBS=true sdk jmods javadoc test > info.log 2>&1

The build log file 'info.log' is attached to this report.
","Created by sourcing the following Bash script:

{code:bash}
#!/bin/bash
# Sets up the environment for building JavaFX
syspath=/usr/sbin:/usr/bin:/sbin:/bin

export CMAKE_HOME=$HOME/opt/cmake-3.13.3-Darwin-x86_64/CMake.app/Contents
export JAVA_HOME=$HOME/opt/jdk-16.0.1.jdk/Contents/Home
export ANT_HOME=$HOME/opt/apache-ant-1.10.5
export GRADLE_HOME=$HOME/opt/gradle-7.0.1

SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)
export SOURCE_DATE_EPOCH

# JDK_HOME and PATH are required by the build
export JDK_HOME=$JAVA_HOME
export PATH=$GRADLE_HOME/bin:$ANT_HOME/bin:$JAVA_HOME/bin:$CMAKE_HOME/bin:$syspath
{code}
",,,,,,,,,,JDK-8269233,JDK-8272633,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-16 14:06;jgneff;info.log;https://bugs.openjdk.org/secure/attachment/95169/info.log","2021-06-16 21:12;jgneff;master-cltools-12.4-works.txt.gz;https://bugs.openjdk.org/secure/attachment/95171/master-cltools-12.4-works.txt.gz","2021-06-16 21:12;jgneff;master-cltools-12.5-fails.txt.gz;https://bugs.openjdk.org/secure/attachment/95172/master-cltools-12.5-fails.txt.gz","2021-06-16 21:13;jgneff;master-cltools-12.5-fixed.txt.gz;https://bugs.openjdk.org/secure/attachment/95173/master-cltools-12.5-fixed.txt.gz",,,x86_64,,,,,,,,,,os_x,,,,"0|i2t997:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-06-16 14:41;kcr;I see this in the log file:

xcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance
*************************************************************
Xcode 7.0 or later is required to build WebKit.
You have an earlier version of Xcode, thus the build will
most likely fail. The latest Xcode is available from the App Store.
*************************************************************

This suggests something wrong with your installation, although I can't be certain.;;;","2021-06-16 14:52;jgneff;The Xcode 7.0 message is there even when it works with CLTools 12.4, and I also see it in older log files of working builds using CLTools 11.3 back in April. I just assumed it's some version parsing error. Let me know if you're not getting that message. I'll double check a working build now.

The other 'xcode-select' error is due to the implementation of Pull Request #13 (https://github.com/openjdk/jfx/pull/13) that I mentioned on the mailing list as a red herring:

https://mail.openjdk.java.net/pipermail/openjfx-dev/2021-June/030810.html
;;;","2021-06-16 16:30;kcr;I see. Yes, that does seem to be a red herring then.

I did a bit of poking around, and it looks like others are having problems with this as well. It seems that Xcode 12.5 (or possibly the associated MacOS 11.3 sdk) has ""#include <version>"" in some system header files, and since macOS is a case insensitive system, it matches a file called VERSION in the source tree.

[~jgneff] to test this theory, can you locally remove the following files from your repo and try to build again?

modules/javafx.web/src/main/native/Source/ThirdParty/sqlite/VERSION
modules/javafx.web/src/main/native/Source/cmake/tools/scripts/VERSION

UPDATE: I would initially try just removing the first of these, since it looks like it's causing the error (the second might actually be needed by the build);;;","2021-06-16 16:41;jgneff;The case-insensitive file system was my first thought when I saw it tripping over the ""3.32.3"" SQLite version string, but it seemed too easy. I'll give your suggestion a try.

But first I'm currently testing this on the 'master' branch. (!) All this time I've been building on my SOURCE_DATE_EPOCH pull request #446 branch, which, although still interesting, would drastically limit the scope of this error if it doesn't also occur on the 'master' branch. I've been building for so long now on that pull-request branch that I forgot where I was.

So two more builds this evening should give us some answers.
;;;","2021-06-16 21:23;jgneff;Well that was simple! The Command Line Tools for Xcode 12.5 works after making the following change:

$ mv modules/javafx.web/src/main/native/Source/ThirdParty/sqlite/VERSION \
  modules/javafx.web/src/main/native/Source/ThirdParty/sqlite/VERSION.hide

I attached three new log files created by running the same Gradle build command shown in the description on the latest 'master' branch:

master-cltools-12.4-works.txt.gz - CLTools 12.4 working
master-cltools-12.5-fails.txt.gz - CLTools 12.5 failing
master-cltools-12.5-fixed.txt.gz - CLTools 12.5 working with hidden VERSION file
;;;","2021-06-17 05:09;kcr;Great. In that case, I propose to fix this by renaming that file to VERSION.txt. It doesn't seem to be used anywhere (that is, there is no build script that reads it), so the rename should be completely harmless. I'll do a full test build on our CI system on all three platforms to be sure.
;;;","2021-06-23 04:48;roboduke;Changeset: 8e11b94f
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2021-06-23 11:47:41 +0000
URL:       https://git.openjdk.java.net/jfx/commit/8e11b94ff90d6640c8e7a1dc0da83599b9d16b84
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gc/g1/mixedgc/TestOldGenCollectionUsage.java assumes that GCs take 1ms minimum,JDK-8268906,5052048,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,dcubed,dcubed,2021-06-16 11:53,2023-07-31 01:46,2023-10-01 09:57,2021-06-30 02:15,18,,,,,,,18,hotspot,,0,gc-g1,gc-pending-review,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,tier1,,,,,,,,,,"The following test failed in the JDK18 CI:

gc/g1/mixedgc/TestOldGenCollectionUsage.java

Here's a snippet from the log file:

#section:main
----------messages:(5/1128)----------
command: main -Xbootclasspath/a:. -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -verbose:gc -XX:NewSize=2m -XX:MaxNewSize=2m -Xmx14m -Xms14m -XX:+AlwaysTenure -XX:InitiatingHeapOccupancyPercent=100 -XX:-G1UseAdaptiveIHOP -XX:G1MixedGCCountTarget=4 -XX:MaxGCPauseMillis=30000 -XX:G1HeapRegionSize=1m -XX:G1HeapWastePercent=0 -XX:G1MixedGCLiveThresholdPercent=100 gc.g1.mixedgc.TestOldGenCollectionUsage
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -verbose:gc -XX:NewSize=2m -XX:MaxNewSize=2m -Xmx14m -Xms14m -XX:+AlwaysTenure -XX:InitiatingHeapOccupancyPercent=100 -XX:-G1UseAdaptiveIHOP -XX:G1MixedGCCountTarget=4 -XX:MaxGCPauseMillis=30000 -XX:G1HeapRegionSize=1m -XX:G1HeapWastePercent=0 -XX:G1MixedGCLiveThresholdPercent=100 gc.g1.mixedgc.TestOldGenCollectionUsage 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.management --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
elapsed time (seconds): 0.424
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base java.management   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(21/1277)----------
[0.007s][info][gc] Using G1
Monitor G1 Old Gen pool with G1 Young Generation collector.
Found pool: G1 Old Gen
Found collector: G1 Young Generation
[0.298s][info][gc] GC(0) Pause Young (Normal) (G1 Evacuation Pause) 2M->1M(16M) 2.067ms
[0.312s][info][gc] GC(1) Pause Full (WhiteBox Initiated Full GC) 1M->1M(16M) 9.335ms
[0.318s][info][gc] GC(2) Pause Young (Normal) (G1 Evacuation Pause) 3M->3M(16M) 1.416ms
[0.318s][info][gc] GC(3) Pause Young (Normal) (WhiteBox Initiated Young GC) 3M->3M(16M) 0.628ms
G1 Old Gen: usage after GC = 1786184
G1 Young Generation: collection count = 3
G1 Young Generation: collection time  = 4
[0.333s][info][gc] GC(4) Pause Young (Concurrent Start) (WhiteBox Initiated Concurrent Mark) 3M->3M(16M) 0.470ms
[0.333s][info][gc] GC(5) Concurrent Mark Cycle
[0.339s][info][gc] GC(5) Pause Remark 3M->3M(16M) 2.340ms
[0.340s][info][gc] GC(5) Pause Cleanup 3M->3M(16M) 0.019ms
[0.340s][info][gc] GC(5) Concurrent Mark Cycle 6.666ms
[0.381s][info][gc] GC(6) Pause Young (Prepare Mixed) (WhiteBox Initiated Young GC) 3M->3M(16M) 0.268ms
[0.381s][info][gc] GC(7) Pause Young (Mixed) (WhiteBox Initiated Young GC) 3M->3M(16M) 0.241ms
G1 Old Gen: usage after GC = 3358024
G1 Young Generation: collection count = 6
G1 Young Generation: collection time  = 4
----------System.err:(14/957)----------
java.lang.RuntimeException: Collector has not run some more
	at gc.g1.mixedgc.TestOldGenCollectionUsage.run(TestOldGenCollectionUsage.java:143)
	at gc.g1.mixedgc.TestOldGenCollectionUsage.main(TestOldGenCollectionUsage.java:62)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Collector has not run some more
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Collector has not run some more
----------rerun:(53/8901)*----------",,,,,,,,,,,JDK-8282956,JDK-8281426,,,,,,,,,,,,,,,,,,,,JDK-8293891,,,,,JDK-8227037,,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,"0|i2t963:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2021-06-17 02:21;fmatte;In this case we have collectionTime and newCollectionTime both returning 4, which is causing below condition to get into Runtime exception

if (newCollectionTime <= collectionTime) {
            throw new RuntimeException(""Collector has not run some more"");
 };;;","2021-06-18 10:33;tschatzl;The test assumes that two gcs take at least 1ms. This is not true as shown in the output. Tagging as testbug.

From the documentation of the getCollectionTime() method:

Returns the approximate accumulated collection elapsed time in milliseconds. This method returns -1 if the collection elapsed time is undefined for this collector.

The Java virtual machine implementation may use a high resolution timer to measure the elapsed time. **This method may return the same value even if the collection count has been incremented if the collection elapsed time is very short.**;;;","2021-06-30 02:15;roboduke;Changeset: a0f32cb1
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2021-06-30 09:14:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a0f32cb1406e4957e84befd9b68444adb662bd13
;;;","2022-03-09 06:21;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
No risk, only a test change.
Clean backport.
Test passes.;;;","2022-03-09 06:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/212
Date: 2022-03-09 14:21:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Docs for -XX:StartFlightRecording is incorrect,JDK-8268904,5052042,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2021-06-16 09:14,2021-08-03 15:06,2023-10-01 09:57,2021-07-23 12:18,,,,,,,,17,hotspot,,0,noreg-doc,,,,,,,,,,,,,,,,,The man page for command line is incorrect for -XX:StartFlightRecording ,,,,,,,,,,,JDK-8271688,JDK-8271772,JDK-8271239,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t94r:",9223372036854775807,b33,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: RecordingStream::dump is missing @since ,JDK-8268903,5052041,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2021-06-16 09:13,2021-07-15 10:08,2023-10-01 09:57,2021-06-18 06:52,,,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,"Javadoc for RecordingStream and RemoteRecordingStream should have ""@since 17"" for the new dump methods.",,,,,,,,,,,JDK-8270596,JDK-8269057,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t94j:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-06-18 06:52;roboduke;Changeset: f9c8c1c3
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2021-06-18 13:51:57 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/f9c8c1c38612abf0f3286c9f353f11788f58ac70
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8268768 missed removing two files,JDK-8268901,5052038,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wetmore,wetmore,wetmore,2021-06-16 08:56,2021-07-15 10:02,2023-10-01 09:57,2021-06-16 10:00,17,18,,,,,,17,infrastructure,,0,,,,,,,,,,,,,,,,,,"JDK-8268768 reverted a couple putbacks that changed the way the idea projects are generated.  

Two new template files from JDK-8267706 were missed, and will be removed in this fix.

    make/ide/idea/jdk/template/module.iml
    make/ide/idea/jdk/template/test.iml

Two other file changes from JDK-8268083 will remain, as the changes were deemed useful by [~mcimadamore].  

    test/make/common/Utils.gmk
    test/test/make/TestMakeBase.gmk
",,,,,,,,,,,JDK-8270560,JDK-8268934,,,,,,,,,,,,,,,,,,,,JDK-8268768,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,"0|i2t93v:",9223372036854775807,b28,,,,,,,,,,,,,"2021-06-16 10:00;roboduke;Changeset: 38dbe05e
Author:    Bradford Wetmore <wetmore@openjdk.org>
Date:      2021-06-16 16:59:02 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/38dbe05e004a018c810e3acaae4660c69dd982da
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/net/httpserver/Headers.java: Fix indentation and whitespace,JDK-8268900,5052037,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jboes,jboes,jboes,2021-06-16 08:41,2021-06-23 17:51,2023-10-01 09:57,2021-06-18 02:37,,,,,,,,18,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t93n:",9223372036854775807,b03,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-06-18 02:37;roboduke;Changeset: f4d20b21
Author:    Julia Boes <jboes@openjdk.org>
Date:      2021-06-18 09:35:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f4d20b215eb3c90ca28bf973e7614486226692b5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TESTBUG] compiler/compilercontrol/mixed/RandomCommandsTest.java must not fail on Command.quiet,JDK-8268897,5052034,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,neliasso,dcubed,dcubed,2021-06-16 07:50,2021-07-15 10:24,2023-10-01 09:57,2021-06-30 14:05,17,,,,,,,17,hotspot,,0,hs-comp-triaged,intermittent,oracle-triage-17,testbug,tier6,,,,,,,,,,,,,"The following test failed in the JDK17 CI:

compiler/compilercontrol/mixed/RandomCommandsTest.java

Here's a snippet from the log file:

----------System.out:(12/4420)----------
For random generator using seed: 5539858874383256187
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=5539858874383256187"" to command line.
(CompileCommand QUIET Type: FILE Compiler: C1 MethodDescriptor: */nonexistent, IsValid: false)
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+27-2463/linux-x64-open.jdk/jdk-17/bin/java -cp /opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79020/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/de2507c3-e217-4094-9fe6-9a1187959b3f/runs/65436544-bc39-443e-8b93-06fa61ebb764/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/classes/2/compiler/compilercontrol/mixed/RandomCommandsTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+27-2463/src.full/open/test/hotspot/jtreg/compiler/compilercontrol/mixed:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79020/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/de2507c3-e217-4094-9fe6-9a1187959b3f/runs/65436544-bc39-443e-8b93-06fa61ebb764/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/classes/2/test/lib:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79020/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/de2507c3-e217-4094-9fe6-9a1187959b3f/runs/65436544-bc39-443e-8b93-06fa61ebb764/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/classes/2:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/junit.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/hamcrest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/testng.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/jcommander.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6/1/bundles/jtreg-6+1.zip/jtreg/lib/guice.jar -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79020/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/de2507c3-e217-4094-9fe6-9a1187959b3f/runs/65436544-bc39-443e-8b93-06fa61ebb764/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/tmp -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79020/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/de2507c3-e217-4094-9fe6-9a1187959b3f/runs/65436544-bc39-443e-8b93-06fa61ebb764/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/tmp -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-17+27-2463/linux-x64-open.test/hotspot/jtreg/native --patch-module=java.base=/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79020/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/de2507c3-e217-4094-9fe6-9a1187959b3f/runs/65436544-bc39-443e-8b93-06fa61ebb764/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/patches/java.base -Djava.security.policy=file:/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79020/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/de2507c3-e217-4094-9fe6-9a1187959b3f/runs/65436544-bc39-443e-8b93-06fa61ebb764/./testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/jtreg.policy -Xmixed -XX:+UnlockDiagnosticVMOptions -XX:CompilerDirectivesLimit=101 -Xbootclasspath/a:. -XX:+WhiteBoxAPI -XX:CompileCommandFile=command_file compiler.compilercontrol.share.actions.BaseAction 33889 states ]
[2021-06-16T12:30:13.262493821Z] Gathering output for process 27089
[2021-06-16T12:30:18.928380693Z] Waiting for completion for process 27089
[2021-06-16T12:30:18.928530245Z] Waiting for completion finished for process 27089
Output and diagnostic info for process 27089 was saved into 'pid-27089-output.log'
[2021-06-16T12:30:18.929826895Z] Waiting for completion for process 27089
[2021-06-16T12:30:18.930259602Z] Waiting for completion finished for process 27089
[2021-06-16T12:30:18.930405738Z] Waiting for completion for process 27089
[2021-06-16T12:30:18.930472014Z] Waiting for completion finished for process 27089
----------System.err:(273/11499)----------
 stdout: [INFO: Client connection port = 33889
Checking expected compilation state: {
  method: public void compiler.compilercontrol.share.pool.sub.Klass.method(int,java.lang.String[],java.lang.Integer,byte[],double[][])
  compile [Optional.empty, Optional.empty]
  force_inline [Optional.empty, Optional.empty]
  dont_inline [Optional.empty, Optional.empty]
  log Optional.empty
  print_assembly Optional.empty
  print_inline Optional.empty
}

<snip>

 stderr: []
 exitValue = 0

java.lang.RuntimeException: 'CompileCommand: An error occurred during parsing' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at compiler.compilercontrol.share.scenario.Scenario.execute(Scenario.java:137)
	at compiler.compilercontrol.share.MultiCommand.test(MultiCommand.java:101)
	at compiler.compilercontrol.mixed.RandomCommandsTest.main(RandomCommandsTest.java:43)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'CompileCommand: An error occurred during parsing' missing from stdout/stderr


Based on the log file, it looks like the test never ran into an error
in this run. I'm guessing that the test expects there to be at least
one randomly generated CompileCommand that results in an error.",,,,,,,,,,,JDK-8270685,JDK-8269718,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8258799,JDK-8158641,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2t92z:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-16 12:26;dlong;Previous problems with this test have all been test bugs.  [~neliasso] could you take a look at this?;;;","2021-06-30 04:18;neliasso;This is a testbug too. The test seed generates a command file with a single command - 'quiet' with a malformed method pattern, and it expects the VM to print ""CompileCommand: An error occurred during parsing""

However, Quiet-command is special and will discard any method pattern. The test doesn't take this into account. The test fails on JDK 11 too.;;;","2021-06-30 14:05;roboduke;Changeset: 0dc65d3c
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-06-30 21:05:15 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/0dc65d3c741f1b7e1bcb622eb21262a6e67a9abf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parenthesized pattern is not guarded by source level check,JDK-8268896,5052033,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-06-16 07:23,2021-07-15 10:14,2023-10-01 09:57,2021-06-23 03:17,17,,,,,,,17,tools,,0,conformance,tck-red-17,,,,,,,,,,,,,,,,"Consider code like:
---
public class Test {
    public void test(Integer i) {
        switch (i) {
            case (Integer ii): break;
        }
    }
}
---

Compiling it leads to:
---
$ javac Test.java 
An exception has occurred in the compiler (17-internal). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
        at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.handleSwitch(TransPatterns.java:275)
        at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitSwitch(TransPatterns.java:258)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitch.accept(JCTree.java:1294)
---

The cause is that the source level/preview check is not being done on the parenthesized pattern in this case.
",,,,,,,,,,,JDK-8269441,JDK-8270628,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t92r:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-23 03:17;roboduke;Changeset: bf706207
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-23 10:16:42 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/bf706207454d8aea57049189befdf2a08e6d1291
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
forged ASTs can provoke an AIOOBE at com.sun.tools.javac.jvm.ClassWriter::writePosition,JDK-8268894,5051850,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gli,webbuggrp,webbuggrp,2021-06-15 03:58,2022-07-29 05:21,2023-10-01 09:57,2021-08-29 00:29,16,17,18,,,,,18,tools,,0,dcsad,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,redhat-interest,regression,reproducer-yes,webbug,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10 x64 / AdoptOpenJDK-16.0.1+9
Alpine edge / OpenJDK 16.0.1+9-alpine-r0
Windows 10 x64 (Oracle JDK 15.0.2+7-27)

A DESCRIPTION OF THE PROBLEM :
Compiling a lombok annotated class results in a compiler crash. The class itself generates a builder for an Array-Field which has a TYPE_USE annotation. Removing that annotation fixes the build.

REGRESSION : Last worked in version 11

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile the class

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No crash, successful compile
ACTUAL -
12:49:23: Executing task 'build'...

> Task :generateLombokConfig UP-TO-DATE

> Task :compileJava FAILED
2 actionable tasks: 1 executed, 1 up-to-date
An exception has occurred in the compiler (16.0.1). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
	at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writePosition(ClassWriter.java:671)
	at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeTypeAnnotation(ClassWriter.java:648)
	at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeTypeAnnotations(ClassWriter.java:561)
	at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeCode(ClassWriter.java:1119)
	at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeMethod(ClassWriter.java:987)
	at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeMethods(ClassWriter.java:1478)
	at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeClassFile(ClassWriter.java:1583)
	at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeClass(ClassWriter.java:1504)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:757)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1644)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1612)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:973)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:104)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)
	at org.gradle.internal.compiler.java.IncrementalCompileTask.call(IncrementalCompileTask.java:77)
	at org.gradle.api.internal.tasks.compile.AnnotationProcessingCompileTask.call(AnnotationProcessingCompileTask.java:94)
	at org.gradle.api.internal.tasks.compile.ResourceCleaningCompilationTask.call(ResourceCleaningCompilationTask.java:57)
	at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute(JdkJavaCompiler.java:55)
	at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute(JdkJavaCompiler.java:40)
	at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.delegateAndHandleErrors(NormalizingJavaCompiler.java:97)
	at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute(NormalizingJavaCompiler.java:51)
	at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute(NormalizingJavaCompiler.java:37)
	at org.gradle.api.internal.tasks.compile.AnnotationProcessorDiscoveringCompiler.execute(AnnotationProcessorDiscoveringCompiler.java:51)
	at org.gradle.api.internal.tasks.compile.AnnotationProcessorDiscoveringCompiler.execute(AnnotationProcessorDiscoveringCompiler.java:37)
	at org.gradle.api.internal.tasks.compile.ModuleApplicationNameWritingCompiler.execute(ModuleApplicationNameWritingCompiler.java:46)
	at org.gradle.api.internal.tasks.compile.ModuleApplicationNameWritingCompiler.execute(ModuleApplicationNameWritingCompiler.java:36)
	at org.gradle.jvm.toolchain.internal.DefaultToolchainJavaCompiler.execute(DefaultToolchainJavaCompiler.java:57)
	at org.gradle.api.tasks.compile.JavaCompile.lambda$createToolchainCompiler$1(JavaCompile.java:251)
	at org.gradle.api.internal.tasks.compile.CleaningJavaCompiler.execute(CleaningJavaCompiler.java:53)
	at org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilerFactory.lambda$createRebuildAllCompiler$0(IncrementalCompilerFactory.java:98)
	at org.gradle.api.internal.tasks.compile.incremental.IncrementalResultStoringCompiler.execute(IncrementalResultStoringCompiler.java:61)
	at org.gradle.api.internal.tasks.compile.incremental.IncrementalResultStoringCompiler.execute(IncrementalResultStoringCompiler.java:45)
	at org.gradle.api.internal.tasks.compile.CompileJavaBuildOperationReportingCompiler$2.call(CompileJavaBuildOperationReportingCompiler.java:59)
	at org.gradle.api.internal.tasks.compile.CompileJavaBuildOperationReportingCompiler$2.call(CompileJavaBuildOperationReportingCompiler.java:51)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:200)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:195)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:75)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:68)
	at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:153)
	at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:68)
	at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:62)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.lambda$call$2(DefaultBuildOperationExecutor.java:76)
	at org.gradle.internal.operations.UnmanagedBuildOperationWrapper.callWithUnmanagedSupport(UnmanagedBuildOperationWrapper.java:54)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:76)
	at org.gradle.api.internal.tasks.compile.CompileJavaBuildOperationReportingCompiler.execute(CompileJavaBuildOperationReportingCompiler.java:51)
	at org.gradle.api.tasks.compile.JavaCompile.performCompilation(JavaCompile.java:300)
	at org.gradle.api.tasks.compile.JavaCompile.performIncrementalCompilation(JavaCompile.java:179)
	at org.gradle.api.tasks.compile.JavaCompile.compile(JavaCompile.java:152)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:104)
	at org.gradle.api.internal.project.taskfactory.IncrementalInputsTaskAction.doExecute(IncrementalInputsTaskAction.java:32)
	at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:51)
	at org.gradle.api.internal.project.taskfactory.AbstractIncrementalTaskAction.execute(AbstractIncrementalTaskAction.java:25)
	at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:29)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$2.run(ExecuteActionsTaskExecuter.java:498)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:75)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:68)
	at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:153)
	at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:68)
	at org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:56)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.lambda$run$1(DefaultBuildOperationExecutor.java:71)
	at org.gradle.internal.operations.UnmanagedBuildOperationWrapper.runWithUnmanagedSupport(UnmanagedBuildOperationWrapper.java:45)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:71)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:483)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:466)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.access$300(ExecuteActionsTaskExecuter.java:105)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.executeWithPreviousOutputFiles(ExecuteActionsTaskExecuter.java:270)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.execute(ExecuteActionsTaskExecuter.java:248)
	at org.gradle.internal.execution.steps.ExecuteStep.executeInternal(ExecuteStep.java:83)
	at org.gradle.internal.execution.steps.ExecuteStep.access$000(ExecuteStep.java:37)
	at org.gradle.internal.execution.steps.ExecuteStep$1.call(ExecuteStep.java:50)
	at org.gradle.internal.execution.steps.ExecuteStep$1.call(ExecuteStep.java:47)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:200)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:195)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:75)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:68)
	at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:153)
	at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:68)
	at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:62)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.lambda$call$2(DefaultBuildOperationExecutor.java:76)
	at org.gradle.internal.operations.UnmanagedBuildOperationWrapper.callWithUnmanagedSupport(UnmanagedBuildOperationWrapper.java:54)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:76)
	at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:47)
	at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:37)
	at org.gradle.internal.execution.steps.RemovePreviousOutputsStep.execute(RemovePreviousOutputsStep.java:68)
	at org.gradle.internal.execution.steps.RemovePreviousOutputsStep.execute(RemovePreviousOutputsStep.java:38)
	at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:50)
	at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:36)
	at org.gradle.internal.execution.steps.CancelExecutionStep.execute(CancelExecutionStep.java:41)
	at org.gradle.internal.execution.steps.TimeoutStep.executeWithoutTimeout(TimeoutStep.java:74)
	at org.gradle.internal.execution.steps.TimeoutStep.execute(TimeoutStep.java:55)
	at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:51)
	at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:29)
	at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.execute(CaptureStateAfterExecutionStep.java:54)
	at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.execute(CaptureStateAfterExecutionStep.java:35)
	at org.gradle.internal.execution.steps.BroadcastChangingOutputsStep.execute(BroadcastChangingOutputsStep.java:60)
	at org.gradle.internal.execution.steps.BroadcastChangingOutputsStep.execute(BroadcastChangingOutputsStep.java:27)
	at org.gradle.internal.execution.steps.BuildCacheStep.executeWithoutCache(BuildCacheStep.java:174)
	at org.gradle.internal.execution.steps.BuildCacheStep.execute(BuildCacheStep.java:74)
	at org.gradle.internal.execution.steps.BuildCacheStep.execute(BuildCacheStep.java:45)
	at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:40)
	at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:29)
	at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:36)
	at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:22)
	at org.gradle.internal.execution.steps.SkipUpToDateStep.executeBecause(SkipUpToDateStep.java:99)
	at org.gradle.internal.execution.steps.SkipUpToDateStep.lambda$execute$0(SkipUpToDateStep.java:92)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:52)
	at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:36)
	at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:84)
	at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:41)
	at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:37)
	at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:27)
	at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:91)
	at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:49)
	at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:78)
	at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:49)
	at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:105)
	at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:50)
	at org.gradle.internal.execution.steps.SkipEmptyWorkStep.lambda$execute$2(SkipEmptyWorkStep.java:86)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:86)
	at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:32)
	at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsStartedStep.execute(MarkSnapshottingInputsStartedStep.java:38)
	at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute(LoadExecutionStateStep.java:43)
	at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute(LoadExecutionStateStep.java:31)
	at org.gradle.internal.execution.steps.AssignWorkspaceStep.lambda$execute$0(AssignWorkspaceStep.java:40)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution$2.withWorkspace(ExecuteActionsTaskExecuter.java:283)
	at org.gradle.internal.execution.steps.AssignWorkspaceStep.execute(AssignWorkspaceStep.java:40)
	at org.gradle.internal.execution.steps.AssignWorkspaceStep.execute(AssignWorkspaceStep.java:30)
	at org.gradle.internal.execution.steps.IdentityCacheStep.execute(IdentityCacheStep.java:37)
	at org.gradle.internal.execution.steps.IdentityCacheStep.execute(IdentityCacheStep.java:27)
	at org.gradle.internal.execution.steps.IdentifyStep.execute(IdentifyStep.java:49)
	at org.gradle.internal.execution.steps.IdentifyStep.execute(IdentifyStep.java:35)
	at org.gradle.internal.execution.impl.DefaultExecutionEngine$1.execute(DefaultExecutionEngine.java:76)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:184)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:173)
	at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:109)
	at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)
	at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:51)
	at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)
	at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:56)
	at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)
	at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:77)
	at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:55)
	at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:200)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:195)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:75)
	at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:68)
	at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:153)
	at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:68)
	at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:62)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.lambda$call$2(DefaultBuildOperationExecutor.java:76)
	at org.gradle.internal.operations.UnmanagedBuildOperationWrapper.callWithUnmanagedSupport(UnmanagedBuildOperationWrapper.java:54)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:76)
	at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:52)
	at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:74)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:408)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:395)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:388)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:374)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.lambda$run$0(DefaultPlanExecutor.java:127)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:191)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.executeNextNode(DefaultPlanExecutor.java:182)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:124)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)
	at java.base/java.lang.Thread.run(Thread.java:831)

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':compileJava'.
> Compilation failed; see the compiler error output for details.

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 503ms
12:49:24: Task execution finished 'build'.


---------- BEGIN SOURCE ----------
Class:
-----
import lombok.Builder;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

@Builder(toBuilder = true)
public class Foo {
    @Builder.Default
    char @MyTest [] bar = new char[0];

    @Target({ElementType.TYPE_USE})
    @interface MyTest {
    }
}
-----

Buildscript (gradle):
-----
plugins {
    id 'java'
    id ""io.freefair.lombok"" version ""5.3.3.3""
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}
-----
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Delombok the code and compile that code which actually works fine

FREQUENCY : always


",,,,,,,,,,,JDK-8274439,JDK-8291557,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-16 05:48;adev;test.zip;https://bugs.openjdk.org/secure/attachment/95164/test.zip",,,,,,generic,,,,,,,,14,,generic,,,,"0|i2t7y3:",9223372036854775807,b13,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-16 05:48;adev;The issue is reproducible with JDK 14 onwards using ""gradle build"":
JDK 11: pass
=========================
JDK 14: fail
JDK 15: fail
JDK 16: fail
with following error:
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writePosition(ClassWriter.java:671) 
==========================
JDK 17: fail
JDK 18 ea: fail
with following error:
Execution failed for task ':compileJava'.
> java.lang.IllegalAccessError: class org.gradle.internal.compiler.java.ClassNameCollector (in unnamed module @0x352ac518) cannot access class com.sun.tools.javac.code.Symbol$TypeSymbol (in module jdk.compiler) because module jdk.compiler does not export com.sun.tools.javac.code to unnamed module @0x352ac518;;;","2021-06-16 06:02;adev;The issue is being discussed here as well:
https://github.com/projectlombok/lombok/issues/2434

javac creates three arrays lvarOffset,lvarLength and lvarIndex and assumes that they always have the same length. At the same time it offers a method that only sets one of them and a method that always appends to all three.
https://github.com/openjdk/jdk/commit/229e0d16313b10932b9ce7506d84096696983699#diff-f3a303a12a61c99e953052638e511517;;;","2021-06-16 06:05;adev;Latest lombok can be downloaded from https://projectlombok.org/download.
Invocation with javac -cp lombok.jar Foo.java (Tested with 17ea b26)

An exception has occurred in the compiler (17-ea). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writePosition(ClassWriter.java:672)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeTypeAnnotation(ClassWriter.java:649)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeTypeAnnotations(ClassWriter.java:562)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeCode(ClassWriter.java:1120)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeMethod(ClassWriter.java:988)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeMethods(ClassWriter.java:1479)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeClassFile(ClassWriter.java:1584)
        at jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeClass(ClassWriter.java:1505)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:738)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1617)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1585)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)
printing javac parameters to: C:\test\src\main\java\javac.20210616_182940.args;;;","2021-08-29 00:29;roboduke;Changeset: a9188f23
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2021-08-29 07:26:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a9188f237ec23d4ca2a172e9a7897cb6e2b69857
;;;","2021-09-27 04:25;pnarayanaswa;Additional Information from submitter:
===========================
I saw that the fix was integrated into JDK 18 only, can you please backport it to the latest LTS version, JDK 17?

Thanks!;;;","2021-09-27 22:00;gli;Fix Request(17u)

I would like to backport this trivial change to jdk17u. The patch applies cleanly.

Thanks!;;;","2022-07-29 05:03;yan;Fix request (15u)

the problem exists in 15, too, and should be fixed. Test and reproducer behave as expected, all non-ignored relevant tests do pass.;;;","2022-07-29 05:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/247
Date: 2022-07-29 12:04:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upstream 8268230: Foreign Linker API & Windows user32/kernel32: String conversion seems broken,JDK-8268888,5052024,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jvernee,jvernee,jvernee,2021-06-16 05:07,2021-08-10 06:55,2023-10-01 09:57,2021-06-22 08:28,17,,,,,,,17,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,Upstream the fix for 8268230 to the mainline jdk (17),,,,,,,,,,,JDK-8270619,JDK-8269198,,,,,,,,,,,,JDK-8268890,,,,,,,,JDK-8268637,,,,,JDK-8268230,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t90r:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,Verified,,"2021-06-16 05:12;jvernee;ILW = HML = P2

The issue can lead to out of bounds memory reads which can lead to crashes = H.
Problem occurs when translating strings with wide charsets = M.
Workaround is to not use the APIs with the particular charsets = L;;;","2021-06-22 08:28;roboduke;Changeset: 8fa25208
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2021-06-22 15:27:43 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/8fa2520803c9b9be41b26b4b34b7d2040a7b1dfb
;;;","2021-08-10 00:36;sundar;I ran all jdk_foreign category tests with the lasted build of jdk/jdk repo. All tests including test associated with the current bug pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
duplicate checkcast when destination type is not first type of intersection type,JDK-8268885,5051957,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,webbuggrp,webbuggrp,2021-06-15 12:39,2021-10-07 05:50,2023-10-01 09:57,2021-09-09 12:40,14,15,16,17,18,,,18,tools,,0,azul-interest,dcsad,jdk17u-fix-request,jdk17u-fix-SQE-ok-next,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Relates to JDK-8263642, possibly introduced by JDK-8209022

When an intersection type cast, e.g. `I1 & I2`, is used and the result of it is then used in a way where the expected type is one of the intersection type supertypes other then the first, e.g. `I2`, a duplicate `checkcast` is emitted for this type.

However, maybe this is a rare corner case which never actually occurs in reality because such Java source code makes no sense. And care must be taken to not reintroduce JDK-8209022.

REGRESSION : Last worked in version 11.0.11

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create a source file `IntersectionTypeTest.java` with the code provided below
2. Compile it
3. Inspect the bytecode, e.g. using `javap -v`

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No duplicate `checkcast`
ACTUAL -
There are duplicate checkcasts e.g. here for `I2`:
void testSecond();
    descriptor: ()V
    flags: (0x0000)
    Code:
      stack=2, locals=2, args_size=1
         0: new           #7                  // class IntersectionTypeTest$C
         3: dup
         4: invokespecial #9                  // Method IntersectionTypeTest$C.""<init>"":()V
         7: checkcast     #10                 // class IntersectionTypeTest$I2
        10: checkcast     #12                 // class IntersectionTypeTest$I3
        13: checkcast     #14                 // class IntersectionTypeTest$I1
        16: checkcast     #10                 // class IntersectionTypeTest$I2

---------- BEGIN SOURCE ----------
class IntersectionTypeTest {
    interface I1 { }
    interface I2 { }
    interface I3 { }
    static class C { }
   
    void testFirst() {
        // No duplicate checkcast; first intersection type supertype is same as variable type
        I1 i = (I1 & I2 & I3) new C();
    }
    
    void testSecond() {
        // Duplicate checkcast for `I2`
        I2 i = (I1 & I2 & I3) new C();
    }
    
    I3 testThirdReturn() {
        // Also affects for example `return` statement; duplicate `checkcast` for `I3`
        return (I1 & I2 & I3) new C();
    }
}
---------- END SOURCE ----------

",,,,,,,,,,,JDK-8274905,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263642,JDK-8209022,,,,,,,,,,,generic,,,,,,,,14,,generic,,,,"0|i2t8lv:",9223372036854775807,b15,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-16 04:06;adev;The issue is reproducible with JDK 14 onwards: Following is my observation.
JDK 11: Pass
JDK 14: Fail
JDK 15: Fail
JDK 16: Fail
JDK 17: Fail
JDK 18 ea: Fail

This is a regression.;;;","2021-09-09 12:40;roboduke;Changeset: dd1209e4
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2021-09-09 18:36:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dd1209e4ae3c8e42d121329639ec4bd359d0a456
;;;","2021-10-06 08:33;evergizova;Fix Request (17u)
I'd like to backport JDK-8268885 to 17u. It fixes duplicate checkcasts in javac.
The patch applies cleanly.
Tested with langtools tests, updated test fails without the fix, passes with it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: Compile::remove_speculative_types must iterate top-down,JDK-8268884,5052020,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,neliasso,chagedorn,chagedorn,2021-06-16 03:48,2021-07-15 10:22,2023-10-01 09:57,2021-06-29 11:38,17,,,,,,,17,hotspot,,0,c2,hs-comp-triaged,oracle-triage-11,oracle-triage-18,,,,,,,,,,,,,,"While working reducing a failing testcase of another bug I stumbled across this bug which starts to fail in JDK 17 b11. Before that it fails with a different assertion in b08, b09 and b10: 

assert(t == t_no_spec) failed: dead node in hash table or missed node during speculative cleanup

The testcase works fine in JDK 17 b07. The assertion from b08 is the same as in JDK-8260653 and might be related.

To reproduce:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79067/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/be546687-12db-4ded-a96b-86062b189919/runs/56ca4e2d-638a-4f38-8b25-3d968f5f0d09/workspace/open/src/hotspot/share/opto/phaseX.cpp:1743), pid=751428, tid=751445
#  assert(t->meet(t0) == t) failed: Not monotonic
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2439)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2439, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x160e65e]  PhaseCCP::analyze()+0x2be
...........
Command Line: -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test --add-modules=ALL-DEFAULT jdk.compiler/com.sun.tools.javac.launcher.Main Test.java
...........

Current thread (0x00007fec3c237b80):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=751445, stack(0x00007fec2808c000,0x00007fec2818d000)]


Current CompileTask:
C2:   4756   85    b        Test::infiniteLoop (12 bytes)

Stack: [0x00007fec2808c000,0x00007fec2818d000],  sp=0x00007fec281882f0,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x160e65e]  PhaseCCP::analyze()+0x2be
V  [libjvm.so+0xa257ff]  Compile::Optimize()+0x70f
V  [libjvm.so+0xa280c5]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1585
V  [libjvm.so+0x84959a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa38a89]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa397f8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18b2e91]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18baa90]  Thread::call_run()+0x100
V  [libjvm.so+0x15872b4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8269645,JDK-8270670,,,,,,,,,,,,,,,,,,,,JDK-8260653,,,,,,,,,,,"2021-06-16 03:40;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95157/Test.java","2021-06-16 03:40;chagedorn;hs_err_pid751428.log;https://bugs.openjdk.org/secure/attachment/95158/hs_err_pid751428.log",,,,,,,,,,,,b08,17,,,,,,"0|i2t8zv:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-16 04:04;chagedorn;ILW = C2 assertion failure in CCP, only fails with single test containing an infinite loop, disable compilation of affected method = HLM = P3;;;","2021-06-16 04:06;chagedorn;Might be related to JDK-8260653. [~neliasso] can you take a look at it?;;;","2021-06-29 11:38;roboduke;Changeset: b8a16e93
Author:    Nils Eliasson <neliasso@openjdk.org>
Date:      2021-06-29 18:38:25 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/b8a16e931b1dc77dbe537fc5d2127a94ef71c801
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(false) failed: unscheduable graph,JDK-8268883,5052019,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,chagedorn,chagedorn,2021-06-16 03:48,2021-11-12 00:07,2023-10-01 09:57,2021-07-05 23:49,17,18,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,oracle-triage-11,oracle-triage-18,,,,,,,,,,,,,"The attached Java Fuzzer tests starts to fail after JDK-8267687 with the following assertion failure:

To reproduce:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test.java
$ java -Xcomp -XX:-TieredCompilation - XX:CompileOnly=Reduced -XX:CompileCommand=dontinline,Reduced::vMeth Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79067/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/be546687-12db-4ded-a96b-86062b189919/runs/56ca4e2d-638a-4f38-8b25-3d968f5f0d09/workspace/open/src/hotspot/share/opto/gcm.cpp:276), pid=21370, tid=21386
#  assert(false) failed: unscheduable graph
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2439)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2439, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd2ccc2]  assert_dom(Block*, Block*, Node*, PhaseCFG const*)+0x1b2
............
Command Line: -Xmx1G -Xcomp -Xbatch -XX:-TieredCompilation -XX:CompileOnly=Test -XX:CompileCommand=quiet Test
............
Current thread (0x00007f799047fc30):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=21386, stack(0x00007f79720f8000,0x00007f79721f9000)]


Current CompileTask:
C2:   7475   64   !b        Test::mainTest (910 bytes)

Stack: [0x00007f79720f8000,0x00007f79721f9000],  sp=0x00007f79721f3cf0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd2ccc2]  assert_dom(Block*, Block*, Node*, PhaseCFG const*)+0x1b2
V  [libjvm.so+0xd2e448]  PhaseCFG::schedule_early(VectorSet&, Node_Stack&)+0x598
V  [libjvm.so+0xd374c5]  PhaseCFG::global_code_motion()+0x295
V  [libjvm.so+0xd3b551]  PhaseCFG::do_global_code_motion()+0x51
V  [libjvm.so+0xa1cbf3]  Compile::Code_Gen()+0x293
V  [libjvm.so+0xa2818f]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x164f
V  [libjvm.so+0x84959a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa38a89]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa397f8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18b2e91]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18baa90]  Thread::call_run()+0x100
V  [libjvm.so+0x15872b4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8270711,JDK-8269970,,,,,,,,,,,,,,,,,,,,JDK-8267687,JDK-8271056,JDK-8273954,,,,,,,,,"2021-06-16 03:49;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95159/FuzzerUtils.java","2021-06-16 03:50;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/95162/Reduced.java","2021-06-16 03:50;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95160/Test.java","2021-06-16 03:50;chagedorn;hs_err_pid21370.log;https://bugs.openjdk.org/secure/attachment/95161/hs_err_pid21370.log",,,,,,,,,,b26,17,,,,,,"0|i2t8zn:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-06-16 04:01;chagedorn;ILW = C2 assertion failure in global code motion (recent regression in JDK 17 b26), with single (so far) Java Fuzzer test, disable compilation of affected method = HMM = P2
;;;","2021-06-16 04:03;chagedorn;Starts to fail after JDK-8267687. [~yyang] can you take a look at it?;;;","2021-06-27 19:29;yyang;I'd like to give a detailed analysis in PR, but before that, I want to make sure this is a reasonable fix... It seems that a ConvL2I node is incorrectly transformed to 1#Con(Top) unreachable node during IGVN, and finally leads to unscheduable graph in GCM phase.

@roland, do you have any comments on why you change bottom_type() to ti->filter(_type) in https://github.com/openjdk/jdk/commit/3d460bd2?

I don't see any guarantees to ensure that type of in(1) contains ConvL2I->_type in common cases. In this case, ConvL2I->_type is int:1..54 and its in(1) is type of long:0, so ConvL2I::Value gets a Type::TOP:

ConvL2I->_type  => int:1..54
ConvL2I->in(1)  => long:0
ti              => int:0
ti->dual()      => int:0
_type->dual()   => int:54..1

ti->filter(_type) => ti->dual()->meet(_type->dual())->dual() => int:1..0 => hi<lo, gets Type::Top

Restoring original code in ConvL2INode::Value solves this problem, but I'm not sure if you have other concerns about it.

---
IGVN process:

At first, in(1) of 4434#ConvL2I is 4433#RShiftL,

 Pop  4434  ConvL2I  === _  4433  [[ 4441  4440 ]]   Type:int:1..54

During IGVN, its input is transformed to 705#ConL,

  Pop  4433  RShiftL  === _  705  2106  [[ 4434 ]]   Type:long
< long:0..715827882:www	< 4433  RShiftL  === _ _ _  [[]]   [324204433]
> long:0	 705  ConL  ===  0  [[ 3871  2297  2294  712  4451  4434 ]]   Type:long:0

So in(1) of 4434#ConvL2I becomes 705#ConL, finally 4434#ConvL2I is transformed to 1#Con(Top), that's not what we expect.

  Pop  4434  ConvL2I  === _  705  [[ 4441  4440 ]]   Type:int:1..54
< int:1..54:www	< 4434  ConvL2I  === _ _  [[]]   [324204434] !orig=[4437],[4436],[4427]
> top		 1  Con  ===  0  [[]]   Type:top
;;;","2021-06-28 07:48;dtherkel;Bringing in [~roland] here, for above question.;;;","2021-06-28 08:01;roland;[~yyang] to mirror ConvI2LNode::Value() that does that. Why would they not behave the same?

In any case, the resulting type of ConvL2I is the intersection of _type and the its input's type. That's the whole point of having a _type field. So the type of the result of the ConvL2I can be narrowed further.;;;","2021-06-28 20:04;yyang;[~roland] Thanks for the explanation. The problem is, ConvL2I is initially a type of int, then its type is narrowed(raise_bottom_type) to int:1..54 immediately. But later, its input is transformed to a different node 705#ConL(long:0). When we compute ConvL2I::Value then, a Type::TOP is returned.

----
Detail:
  
 4434  ConvL2I  === _  4433  [[]]   Type:int
 4434  ConvL2I  === _  4433  [[]]   Type:int:1..54

  Pop  4434  ConvL2I  === _  4433  [[ 4441  4440 ]]   Type:int:1..54
  
  ...

  Pop  4433  RShiftL  === _  705  2106  [[ 4434 ]]   Type:long
< long:0..715827882:www	< 4433  RShiftL  === _ _ _  [[]]
> long:0	 705  ConL  ===  0  [[ 3871  2297  2294  712  4451  4434 ]]   Type:long:0
  
  ...
  
  Pop  4434  ConvL2I  === _  705  [[ 4441  4440 ]]   Type:int:1..54 
< int:1..54:www	< 4434  ConvL2I  === _ _  [[]]
> top		 1  Con  ===  0  [[]]   Type:top;;;","2021-06-29 04:19;roland;[~yyang] I've started to investigate it. I'm not sure what's going on at this point. Would you like me to take it over?;;;","2021-06-29 19:36;yyang;[~roland] Thanks, please go ahead.;;;","2021-07-05 23:49;roboduke;Changeset: 6d8fc724
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-07-06 06:47:45 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/6d8fc7249a3a1a2350c462f9c4fe38377856392f
;;;","2021-08-09 14:09;epavlova;Verified by launching compiler/c2/TestCondAddDeadBranch.java in mach5 in JDK17 ATR configuration. Also checked there are no failures in CI;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: assert(n->outcnt() != 0 || C->top() == n || n->is_Proj()) failed: No dead instructions after post-alloc",JDK-8268882,5052018,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rbackman,chagedorn,chagedorn,2021-06-16 03:48,2021-11-30 14:43,2023-10-01 09:57,2021-11-09 13:40,11,16,17,18,,,,18,hotspot,,0,c2,c2-regalloc,hs-comp-triaged,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-18,,,,,,"The attached Java Fuzzer test starts to fail after JDK-8264649 (but seems to just reveal an existing issue) with the following assertion failure:

To reproduce:
$ java -Xmx1G -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:StressSeed=568109485 Test.java 
$ java -Xmx1G -Xcomp -XX:CompileOnly=Reduced -XX:-TieredCompilation -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:StressSeed=568109485 Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79067/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/be546687-12db-4ded-a96b-86062b189919/runs/56ca4e2d-638a-4f38-8b25-3d968f5f0d09/workspace/open/src/hotspot/share/opto/chaitin.cpp:1670), pid=32679, tid=32692
#  assert(n->outcnt() != 0 || C->top() == n || n->is_Proj()) failed: No dead instructions after post-alloc
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2439)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2439, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8b17b3]  PhaseChaitin::fixup_spills()+0x133
...........
Command Line: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:StressSeed=568109485 Test
...........
Current thread (0x00007fda10480150):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=32692, stack(0x00007fda001c7000,0x00007fda002c8000)]


Current CompileTask:
C2:    407    3   !b        Test::mainTest (682 bytes)

Stack: [0x00007fda001c7000,0x00007fda002c8000],  sp=0x00007fda002c2eb0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8b17b3]  PhaseChaitin::fixup_spills()+0x133
V  [libjvm.so+0x8bca86]  PhaseChaitin::Register_Allocate()+0xa66
V  [libjvm.so+0xa1cc77]  Compile::Code_Gen()+0x317
V  [libjvm.so+0xa2818f]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x164f
V  [libjvm.so+0x84959a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa38a89]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa397f8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18b2e91]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18baa90]  Thread::call_run()+0x100
V  [libjvm.so+0x15872b4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8277332,JDK-8277053,JDK-8278026,JDK-8277682,,,,,,,,,,,,,,,JDK-8275328,,,JDK-8264649,,,,,,,,,,,"2021-06-16 03:48;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95154/FuzzerUtils.java","2021-06-16 06:11;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/95165/Reduced.java","2021-06-16 03:47;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95155/Test.java","2021-06-16 03:47;chagedorn;hs_err_pid32679.log;https://bugs.openjdk.org/secure/attachment/95156/hs_err_pid32679.log",,,,,,,,,,,,,,,,,"0|i2t8zf:",9223372036854775807,b23,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-16 03:54;chagedorn;ILW = C2 assertion failure in register allocator, only fails with single Java Fuzzer test, disable compilation of affected method = HLM = P3;;;","2021-06-16 03:54;chagedorn;Targeting it to JDK 17 for now as it is not clear, yet, if this issue was introduced in JDK 17 or not without further analysis.;;;","2021-06-29 05:05;rbackman;This no longer reproduces after JDK-8268405 was fixed.;;;","2021-07-09 06:30;thartmann;I can still reproduce this with latest JDK 18:
java -Xcomp -XX:CompileOnly=Reduced -XX:-TieredCompilation -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:RepeatCompilation=1000 Reduced.java

CompileCommand: compileonly Reduced.* bool compileonly = true
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/chaitin.cpp:1670
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (...workspace/open/src/hotspot/share/opto/chaitin.cpp:1670), pid=580304, tid=580317
#  assert(n->outcnt() != 0 || C->top() == n || n->is_Proj()) failed: No dead instructions after post-alloc
#
# JRE version: Java(TM) SE Runtime Environment (18.0+6) (fastdebug build 18-ea+6-203)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+6-203, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x898dc3]  PhaseChaitin::fixup_spills()+0x133

Also reproduces with JDK 16 and 17.;;;","2021-07-12 00:44;thartmann;Couldn't help but do some quick debugging when reproducing this on Friday. I think the problem is a dead loadConUL32 that in turn creates dead Phis during spilling in the register allocator. The loadConUL32 dies because the dead ""Kill cr"" MachProj is removed by PhaseChaitin::remove_node_if_not_used:

 222  loadConUL32  ===  1  [[ 221  965 ]] #4/0x0000000000000004
 221  subL_rReg  === _  222  224  [[ 223  220  963  964  969 ]] 
 223  MachProj  ===  221  [[]] #1

Hope that helps.;;;","2021-07-15 07:00;chagedorn;Deferring to JDK 18 as this bug is a P3 and RDP 2 is starting today.;;;","2021-10-15 05:19;chagedorn;Hi [~rbackman], JDK-8275328 found the same assertion failure. I closed it as a dup of this one. Can you verify if it is indeed the same issue before integration? If it's unrelated, please reopen it again, thanks! ;;;","2021-11-09 13:39;roboduke;Changeset: 06992208
Author:    Rickard Bäckman <rbackman@openjdk.org>
Date:      2021-11-09 21:38:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0699220830a457959b784b35af125b70f43fa3b0
;;;","2021-11-10 00:51;chagedorn;Hi [~rbackman], I assume the test case could not be transformed into a JTreg test to reliably trigger this bug without fix. If so, please add a ""noreg-*"" label accordingly to this bug, thanks!;;;","2021-11-15 02:44;mdoerr;Fix Request (11u):
11u is affected. Not yanking out dead nodes may confuse C2. Fix is trivial and applies cleanly.;;;","2021-11-15 11:06;clanger;Hi, [~mdoerr], before approving this for 11u, it needs to be backported to 17u.;;;","2021-11-15 12:54;mdoerr;Fix Request (17u): 
17u is affected, too. Not yanking out dead nodes may confuse C2. Fix is trivial and applies cleanly.;;;","2021-11-17 02:35;goetz;11u notice
Hi Martin,
I am not sure whether we should bring this to 11.0.14, I think 11.0.15 would be better. The change is new in head, and the bug is not new in 11 as I understand, so that there should not be a hurry.  We had to backout an 11.0.15 change just last week.  What do you think?;;;","2021-11-17 05:48;mdoerr;Many tests were already executed in 18, 17u and 11u and we still have a lot of testing time until January Update shipment. I think this is sufficient for such a tiny fix. Not yanking dead nodes is a bigger risk than doing it IMHO. So, I don't see any good reason for delaying it.;;;",,,,,,,,,,,,,,,,,,,,,,,,
TextInputControlSkin: incorrect inputMethod event handler after switching skin,JDK-8268877,5052013,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,fastegal,fastegal,2021-06-16 02:40,2023-02-06 05:23,2023-10-01 09:57,2022-11-14 10:25,jfx16,,,,,,,jfx20,javafx,,1,InputMethodEvent,sn_131,TextInputControlSkin,,,,,,,,,,,,,,,"turned up while fixing JDK-8240506, failing test:

    @Test
    public void testOnInputMethodTextChangedNPE() {
        String initialText = ""some text"";
        String prefix = ""from input event"";
        TextField field = new TextField(initialText);
        installDefaultSkin(field);
        InputMethodEvent event = new InputMethodEvent(InputMethodEvent.INPUT_METHOD_TEXT_CHANGED, 
                List.of(), prefix, 0);
        Event.fireEvent(field, event);
        assertEquals(""sanity: prefix must be committed"", prefix + initialText, field.getText());
        replaceSkin(field);
        Event.fireEvent(field, event);
        assertEquals("" prefix must be committed again"", prefix + prefix + initialText, field.getText());
    }  
    
This throws an NPE before the fix because the handler installed by the skin _is not_ removed, and fails the assertion because the handler installed by the skin _is_ removed ;)

The problem is the installation pattern which sets its own singleton handler if there is none on the control:

        if (control.getOnInputMethodTextChanged() == null) {
            control.setOnInputMethodTextChanged(event -> {
                handleInputMethodEvent(event);
            });
        }

When replacing the skin, the new skin's constructor is run while the control is still attached to the old skin - at that time, the field's handler is not null (because set by the old skin), so the new skin doesn't replace it. In dispose, the handler is either removed (after the fix) leaving the control without handler or not removed (before the fix) leading to the NPE.

This pattern is copied to ComboBoxPopupControl to fix JDK-8096136 - in its discussion Jonathan proposed to add a handler (vs. setting the singleton), but with this here in place it was agreed to use the same everywhere. Don't know when/why it was done as it is (skins moved into public scope disrupted history)



",,,,,,,,,,,,,,,,,,,,,,JDK-8290844,JDK-8241364,,,,,,,,,JDK-8240506,JDK-8096136,JDK-8290844,JDK-8301832,JDK-8301219,JDK-8093590,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t8yb:",9223372036854775807,b08,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2021-06-16 02:59;fastegal;notes, just to not forget:

- TextInputControlSkin and ComboBoxPopupControl seem to be the only skins that set a singleton eventHandler on its control
- adding (and removing) a handler might be an option
- in swing there's in interface UIResource denoting something as installed by the LookAndFeel, when sticking to the singleton handler, might do something similar here
;;;","2022-07-15 11:34;angorya;I think we might have a design problem here.  

The issue is caused by the fact that the control is being mutated in the skin's constructor, at the moment when the old skin is still attached.  A better design is to have explicit methods, similar to Swing's installUI(JComponent) and uninstallUI(JComponent).  In javafx, we seem to have dispose() but not a corresponding install().

https://github.com/openjdk/jdk/blob/0184f46bdfe4441ea6ef28c658c6677c4c736ee9/src/java.desktop/share/classes/javax/swing/plaf/basic/BasicTextUI.java#L793
https://github.com/openjdk/jdk/blob/0184f46bdfe4441ea6ef28c658c6677c4c736ee9/src/java.desktop/share/classes/javax/swing/plaf/basic/BasicTextUI.java#L858;;;","2022-07-15 12:05;angorya;In TextInputControlSkin, the constructor mutates two properties in the control:

onInputMethodTextChangedProperty
inputMethodRequestsProperty;;;","2022-07-18 09:30;angorya;[~fastegal]:

Could you please refer me to the requirements that ""skin must not replace handler"", and also ""skin dispose must not remove handler that was installed by control"" in  SkinCleanupTest.testTextInputOnInputMethodTextChangedWithHandler()?  Perhaps if I know the source of these requirements, or the problem we are trying to solve, I could address this scenario - right now it makes no sense.

I understand the general sentiment not to add new APIs, and try to work around the problem in the implementation (basically, option 3 in your last comment in JDK-8241364).  In this case, I am afraid the requirements SkinCleanupTest.testTextInputOnInputMethodTextChangedWithHandler() tests for make it impossible.

Specifically, when the new skin constructor tries to set its handler on the control, it does not know whether existing handler is from an old skin (in which case it's ok to overwrite the handler), or from the user's custom code, in which case it should leave it as is, at least according to my interpretation of the above mentioned test case.;;;","2022-08-15 05:22;fastegal;honestly don't understand what ""makes no sense"" ;) Application code rules, if it explicitly sets whatever - either before or during showing the node - the skin should keep its hands from that custom setting.

Actually, we have two separate problems with text skins:

A - setting a singleton event handler: doing so by a skin turns out to be plain wrong (see JDK-8093590). The fix to that seems to have overlooked the inputMethodTextChanged ;). Also see a code comment to ContextMenuContent which explains why setting the singleton handler (for keyPressed) on the content (no public api)

The fix for this part is to follow the lead of  JDK-8093590 and replace setting the singleton handler with adding one (and remove that in dispose)
 
B - the on-the-fly setting of the inputMethodsRequests (well spotted - I overlooked it when fixing side-effects of replacing text skins ;) The fix to that part is apply the the same pattern as always in dispose: don't-replace-what-we-didn't-install.

So .. I disagree with the evaluation of JDK-8290844 as blocking this: both parts can be solved without api changes;;;","2022-08-15 09:42;angorya;There is one more case:
C: setting a singleton based on some condition (for instance, != null).  
we cannot distinguish between the user having set it from the previous skin having set it (since the previous skin is still attached)

;;;","2022-08-16 02:53;fastegal;Hmm .. I would say C is the same as A: it's a singleton event handler which should not be set by a skin - doesn't matter whether it's set un/conditionally, see the fixes in  JDK-8093590 (MenuButtonSkin had such a conditionally set handler, has been replaced by a conditionally added handler).

The only difference I see is the event type: Action is a semantic event, all others are low-level input type events. Personally, I don't think that makes a difference, though - but naturally open to good reasons :);;;","2022-08-16 11:47;angorya;You do bring a good point, [~fastegal].

We won't need a new install() method if, and only if we can replace setting of singletons with add/remove.  The problem is, I don't always know how - perhaps there is a solution I do not see.  For example, in MenuButtonSkin:108, the code conditionally sets a singleton handler on onAction (onAction is a publicly writeable property, see ButtonBase:123).  How can we replace this code with commutative operations (add/remove)?

One can argue that instead of adding the install() method, we ought to forbid setting singletons - but how to enforce that?

So I disagree with you - we can't fix these issues without the API changes.  We have a ""bad"" design and we must fix it, or face the endless series of bugs.;;;","2022-08-17 03:29;fastegal;hmm .. I honestly don't see the problem: actually, we _do_ forbid (== it's a bug doing so) skins to set singleton event handlers on its skinnable, that's decided in JDK-8093590 (which I unfortunately didn't see when stumbling across this).  Most of those that did were fixed by replacing the singleton handler with an added handler, f.i. a conditional variant in MenuButtonSkinBase:

     if (control.getOnMousePressed() == null) {

-            control.setOnMousePressed(e -> {

+            control.addEventHandler(MouseEvent.MOUSE_PRESSED, e -> {

                 getBehavior().mousePressed(e, behaveLikeButton);

             });

         }

Doing the same to the onAction singleton in MenuButtonSkin:

        myHandler = e -> control.show();
        if (control.getOnAction() == null) {
-            control.setOnAction(e -> control.show());
+             control.addEventHandler(ActionEvent.ACTION, myHandler); 
        }

        // in dispose
       getSkinnable().removeEventHandler(ActionEvent.ACTION, myHandler);

 Why do you think we can't use this pattern (the same as applied in fixing the old JDK-8093590)? What do I miss? 
       ;;;","2022-08-17 08:01;angorya;You are right, it looks like we can add listeners.

The remaining question is - how do we enforce that rule in user-developed skins?  Apart from adding a rule to javadoc, there is no way to block this pattern programmatically, right?;;;","2022-08-17 10:01;angorya;event handlers: yes
listeners: yes
properties: NO (or at least not trivially)

TextInputControlSkin:334

control.setInputMethodRequests(...) - new skin sets this property, which is then gets destroyed (set to null) when Control.setSkin() invokes dispose() on the old skin.  

we could try checking if the current property corresponds to our value in dispose(), I suppose, though it will leave the Skinnable in an inconsistent state if the customer creates a new skin and *discards* it for whatever reason, and result in a memory leak.  I suppose that's the price we have to pay for backward compatibility.;;;","2022-08-17 11:43;angorya;So, [~fastegal], we cannot have the cake and eat it too.

We do have singleton properties (TextInputControlskin.inputMethodRequests for example).  We cannot satisfy all these requirements without Skin.install:

1. new skin must install its property, unless the value was initially set by the user
2. skin must uninstall own value, if set in step 1
3. user-set value must be preserved after the skin is uninstalled

Specifically,  the constructor cannot decide whether to keep or overwrite the existing value for #1 because at this point, the value might come either from the user or from the old skin that is attached.
;;;","2022-08-18 03:33;fastegal;
Bullet 1:

_new skin must install its property, unless the value was initially set by the user_ 

agreed - but that's not the story of inputMethodRequests: they are set unconditionally. So it's fine to follow the general pattern, which is: a skin must remove everthing it installed and not touch anything it didn't - so in the case of inputMethodRequests

     // constructor
     myInputMethodRequests = ...
     control.setInputMethodRequests(myInputMethodRequests)

     // dispose: if it's ours, remove otherwise do nothing
     if (control.getInputMethodRequests() == myInputMethodRequests) {
             control.setInputMethodRequests(null);
     } 

I don't see any problem in this particular case. 


    ;;;","2022-08-18 08:15;angorya;the problem with the code you provided is
3. user-set value must be preserved after the skin is uninstalled

the constructor overwrites the value set by the user.  and it will fail SkinCleanupTest.testTextInputOnInputMethodTextChangedHandler : 1289

the problem is - the constructor does not know if the current value is from the user and must be kept, or from the old skin and must be overwritten.;;;","2022-11-03 09:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/903
Date: 2022-09-27 19:36:46 +0000;;;","2022-11-14 10:25;dukebot;Changeset: a13630fb
Author:    Andy Goryachev <angorya@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-11-14 18:23:05 +0000
URL:       https://git.openjdk.org/jfx/commit/a13630fba8854b84516a089ff67e4c0c4c01ff79
;;;",,,,,,,,,,,,,,,,,,,,,,
Adjust javac to updated exhaustiveness specification,JDK-8268871,5052006,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-06-16 01:04,2021-07-15 10:18,2023-10-01 09:57,2021-06-25 02:53,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,"The definition of switch exhaustiveness has been updated in the specification for the pattern matching for switch. javac needs to be adjusted to the new definition.
",,,,,,,,,,,JDK-8270644,JDK-8269457,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t8wr:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-25 02:53;roboduke;Changeset: 4eb32129
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-25 09:52:06 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4eb321298a1abf6b24bd9515c5c0c3580b2f31f7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java in source-file mode suggests javac-only Xlint flags,JDK-8268869,5051834,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,webbuggrp,webbuggrp,2021-06-15 02:38,2021-10-11 15:45,2023-10-01 09:57,2021-10-04 08:49,17,,,,,,,18,tools,,0,17ea,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Follow-up for JDK-8248843

When using `java` in source-file mode (see JEP 330 / JDK-8192920), it displays Xlint compiler notes which suggest using options which are only available for `javac`.
This can be quite confusing because it causes an error and it is not directly clear how to use these options correctly. 

Unlike with JDK-8248843, it might not desirable to simply enable and show all Xlint warnings by default (new users for whom `java` source-file mode is intended might be overwhelmed).
So maybe in this case the best way would be to allow usage of `-Xlint` command line arguments for `java` in source-file mode?

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create a file called 'Test.java' containing the source code provided below
2. Run `java ./Test.java`
(i) It suggests using the `-Xlint:deprecation` option
3. Run `java` with that option: `java -Xlint:deprecation ./Test.java`


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The compiler should show more detailed warnings.
ACTUAL -
Starting the JVM fails:
Unrecognized option: -Xlint:deprecation
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.

---------- BEGIN SOURCE ----------
class Test {
    <T> void test(T t, Object o) {
        T t1 = (T) o;
    }
    
    static class Generic<T> {
        T t;
        
        void raw(Generic raw) {
            raw.t = """";
        }
    }
    
    void deprecation() {
        Thread.currentThread().stop();
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Run `javac` with that flag; though might not be obvious for new users (for whom the source-file mode is intended)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248843,,,,,,"2021-06-15 23:18;adev;Test.java;https://bugs.openjdk.org/secure/attachment/95153/Test.java",,,,,,generic,,,,,,,,,,generic,,,,"0|i2t7uj:",9223372036854775807,b18,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2021-06-16 00:21;adev;The issue may be related to https://bugs.openjdk.java.net/browse/JDK-8248843

When using -Xlint:deprecation - 
PS C:\test> java Foo.java
Note: Foo.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Foo.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
error: can't find main(String[]) method in class: Test

PS C:\test> java -Xlint:deprecation Foo.java
Unrecognized option: -Xlint:deprecation
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.

-Xlint should be enabled for source-file mode;;;","2021-06-24 17:08;jjg;>> So maybe in this case the best way would be to allow usage of `-Xlint` command line arguments for `java` in source-file mode? 

That's not a reasonable possibility, since it would be adding `javac` options to the `java` command line, and that is way too slippery a slope.

I imagine various possibilities:
1. Remove/suppress the reference to the -Xlint option in source-file mode.  We are still (probably) required to generate the notes about using deprecated API or unchecked code
2. Change the ""Recompile with ..."" message to suggest using javac
3. Enable -Xlint:deprecation and -Xlint:unchecked by default in the internal invocation of javac. This would be the equivalent of the solution for JDK-8248843;;;","2021-06-24 17:14;jjg;It would be good for a fix to include a test for both this bug and JDK-8248843 that verifies the words ""Recompile with"" do not appear in the output for selected input files.;;;","2021-10-04 08:49;roboduke;Changeset: 139a8334
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2021-10-04 15:48:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/139a8334cbc0c8e1a7a708efe18bd488d28292fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javascript when used in an iframe cannot display search results,JDK-8268866,5051796,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,webbuggrp,webbuggrp,2021-06-14 09:15,2022-03-16 18:09,2023-10-01 09:57,2022-03-14 13:30,16,,,,,,,19,tools,,0,dcsad,noreg-hard,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
All browsers tested have this problem (Chrome, Safari, Edge, Firefox)

A DESCRIPTION OF THE PROBLEM :
If a Javadoc URL is presented in an iframe it works well except for the search box. The search box will find matches, but if any of these are selected nothing happens. In the search.js code, line 346, one of two errors are presented. The most important case is when the javadoc is being generated locally so the frame and javadoc content have the same origin. In this case the error generated is 'undefined is not an object (evaluating 'parent.classFrame'). If instead one embeds an Oracle Javadoc page, once gets a security error.

There are many use cases for displaying Javadoc in an iframe. For example, we generate javadoc from https://try.umple.org to help people understand their generated code.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Put the following code in an html file and open it, then search for something using the search box. Nothing will happen (this is the security error case). Substitute the oracle javadoc page for one generated locally from your own Java, and the same thing happens (this is the undefined (not an object) case.

```
<html>
<body>
<h1>Test</h1>
<iframe width=1000 height=1000 src=""https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/IntStream.html""/>
</body>
</html>
```

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The expected result is that on clicking on a search result the relevant page will appear.
ACTUAL -
Nothing happens

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-15 22:59;adev;SearchResult_Iframe.png;https://bugs.openjdk.org/secure/attachment/95151/SearchResult_Iframe.png","2021-06-15 22:59;adev;test.html;https://bugs.openjdk.org/secure/attachment/95152/test.html",,,,,generic,,,,,,,,,,generic,,,,"0|i2t7m3:",9223372036854775807,b14,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-06-15 22:59;adev;The issue is reproducible. Clicking on one of the search results from the search box does not open the relevant link when the javadoc link is placed in an iframe. The reproducer is attached.;;;","2021-07-29 10:40;hannesw;Error message in the browser's javascript console (Firefox 89 on MacOSX): 

Uncaught DOMException: Permission denied to access property ""classFrame"" on cross-origin object search.js:346
    select https://docs.oracle.com/en/java/javase/16/docs/api/search.js:346
    jQuery 37
    _create https://docs.oracle.com/en/java/javase/16/docs/api/search.js:124
    jQuery 7
    <anonymous> https://docs.oracle.com/en/java/javase/16/docs/api/search.js:294
    jQuery 11
    <anonymous> https://docs.oracle.com/en/java/javase/16/docs/api/search.js:293;;;","2022-02-23 08:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7594
Date: 2022-02-23 16:23:04 +0000;;;","2022-03-14 13:30;dukebot;Changeset: 6013d09e
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2022-03-14 20:29:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6013d09e82693a1c07cf0bf6daffd95114b3cbfa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Windows-Aarch64 build is failing in GitHub actions,JDK-8268860,5051997,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,dholmes,dholmes,2021-06-15 21:16,2022-11-25 03:52,2023-10-01 09:57,2021-07-05 17:29,17,18,,,,,,18,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-SQE-ok,jdk17u-fix-yes,,,,,,,,,,,,,"The Windows Aarch64 debug build in Github actions has been failing for quite some time now e.g. [1]

LINK : fatal error LNK1104: cannot open file 'libcpmt.lib'
make[3]: *** [gensrc/GensrcAdlc.gmk:63: /cygdrive/d/a/jdk17/jdk17/jdk/build/windows-aarch64/hotspot/variant-server/tools/adlc/adlc.exe] Error 1

I suspect this is an issue with the cross-compilation setup as adlc.exe has to be native binary for the build machine, not the target. Someone who actually builds Windows-Aarch64 needs to check a valid configure setup with what is seen in GHA and try to discern what the problem may be.

I tried to file an issue with GitHub [2] but now suspect this is a configure problem at our end that should be fixed. 

[1] https://github.com/dholmes-ora/jdk17/runs/2825339313?check_suite_focus=true

[2] https://github.com/actions/virtual-environments/issues/3567",,,,,,,,,,,JDK-8277278,JDK-8277177,JDK-8297635,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,windows,,,,"0|i2t8ur:",9223372036854775807,b05,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2021-06-16 21:33;dholmes;See discussion in:

https://github.com/actions/virtual-environments/issues/3567

Seemingly a simple fix, but I don't know what caused things to break in the first place.;;;","2021-07-05 17:29;roboduke;Changeset: acc3d995
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2021-07-06 00:28:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/acc3d995355b646c581623b0df5facbcdbfa4721
;;;","2021-11-10 01:48;shade;Fix Request (17u)

This restores Windows AArch64 build test in GHA workflow. Applies cleanly, does not affect product code. GHA testing is clean. Unblocks clean backport of JDK-8276854 for 17u.;;;","2022-11-21 05:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1538
Date: 2022-11-21 13:08:08 +0000;;;","2022-11-24 09:23;gdams;Fix Request (11u)

This restores Windows AArch64 build test in GHA workflow. Applies cleanly, and does not affect product code. GHA testing is clean.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jshell throws exception while parsing illegal ""case true""",JDK-8268859,5051776,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,webbuggrp,webbuggrp,2021-06-14 07:32,2021-07-15 10:33,2023-10-01 09:57,2021-07-07 00:27,17,,,,,,,17,tools,,0,17ea,dcsad,regression,reproducer-yes,webbug,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Using an illegal ""case true"" source code in JShell throws an Exception, while Javac does not.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
➜  Downloads jshell --enable-preview /tmp/Foo.java
Exception in thread ""main"" java.lang.InternalError: Exception during analyze - java.lang.AssertionError: Unexpected tree: true with kind: BOOLEAN_LITERAL within: true with kind: BOOLEAN_LITERAL
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:393)
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.<init>(TaskFactory.java:384)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$analyze$1(TaskFactory.java:177)
        at jdk.jshell/jdk.jshell.TaskFactory.lambda$runTask$4(TaskFactory.java:212)
        at jdk.compiler/com.sun.tools.javac.api.JavacTaskPool.getTask(JavacTaskPool.java:193)
        at jdk.jshell/jdk.jshell.TaskFactory.runTask(TaskFactory.java:205)
        at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:174)
        at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:160)
        at jdk.jshell/jdk.jshell.Eval.compileAndLoad(Eval.java:1010)
        at jdk.jshell/jdk.jshell.Eval.declare(Eval.java:890)
        at jdk.jshell/jdk.jshell.Eval.eval(Eval.java:137)
        at jdk.jshell/jdk.jshell.JShell.eval(JShell.java:493)
        

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
/tmp/Foo.java:5: error: unexpected type
                        case true t -> 1;
                             ^
  required: class
  found:    value
/tmp/Foo.java:6: error: unexpected type
                        case false f -> 2;
                             ^
  required: class
  found:    value


---------- BEGIN SOURCE ----------
public class Foo {
    public static void main(String[] args) {
        boolean value = true;
        var result = switch(value){
            case true t -> 1;
            case false f -> 2;
        };
    }
}
---------- END SOURCE ----------

FREQUENCY : often


",,,,,,,,,,,JDK-8270048,JDK-8270724,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2021-06-15 21:14;adev;Foo.java;https://bugs.openjdk.org/secure/attachment/95150/Foo.java",,,,,,generic,,,,,,,b26,17,,generic,,,,"0|i2t7hn:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-06-15 21:11;adev;The issue is reproducible with JDK 17 ea b26. Following is my observation:
JDK 17 ea 24 - no NPE
JDK 17 ea 25 - no NPE
JDK 17 ea 26 - 
Exception in thread ""main"" java.lang.InternalError: Exception during analyze - java.lang.AssertionError: Unexpected tree: true with kind: BOOLEAN_LITERAL within: true with kind: BOOLEAN_LITERAL
        at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:393)

This is a regression.;;;","2021-07-07 00:27;roboduke;Changeset: 820f2900
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-07-07 07:26:41 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/820f2900d8650609d737d83141e91adc93daadf7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AsyncLogWriter should not overide is_Named_thread(),JDK-8268852,5051991,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xliu,xliu,xliu,2021-06-15 17:14,2023-07-06 03:01,2023-10-01 09:57,2021-06-16 16:55,17,18,,,,,,18,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,logging,,,,,,,,,,,,,,"Comments from David Holmes: 
""
BTW: I noticed a separate bug in the crash log. You've defined:

bool is_Named_thread() const override { return true; }

for the AsyncLogWriter, but as you pointed out when I asked, this thread
can't be a NamedThread because that is a special kind of GC thread. So
that method should not be there.
""

I misunderstood is_Named_thread(). I thought it should return true as long as it has a name.  It's incorrect!  Only NamedThread and its subclasses return true. 

Code like this is undefined for AsyncLogWriter.  Its vtable doesn't have the entry for gc_id().

uint GCId::current_or_undefined() {
  return Thread::current()->is_Named_thread() ? currentNamedthread()->gc_id() : undefined();
}

",,,,,,,,,,,JDK-8311568,,,,,,,,,,,,,,,,,,,,,JDK-8229517,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2t8tf:",9223372036854775807,b03,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-16 16:55;roboduke;Changeset: 02c9bf08
Author:    Xin Liu <xliu@openjdk.org>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2021-06-16 23:54:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/02c9bf087e50885bbc8028415c4e674947ee7a16
;;;","2023-07-05 02:46;shade;Fix Request (17u)

Fixes a minor problem in async logging implementation. Applies cleanly.;;;","2023-07-05 02:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1544
Date: 2023-07-05 09:41:20 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update to 612.1 version of WebKit,JDK-8268849,5051988,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,arapte,kcr,kcr,2021-06-15 15:49,2021-12-18 06:35,2023-10-01 09:57,2021-07-14 06:13,8u311,jfx18,,,,,,jfx18,javafx,,0,3rdparty,sn_96,sn_97,,,,,,,,,,,,,,,"This will update JavaFX WebKit to 612.1, based on GTK WebKit 2.32.x

[1] https://trac.webkit.org/wiki/WebKitGTK/2.32.x
[2] https://trac.webkit.org/log/webkit/releases/WebKitGTK/webkit-2.32/
",,,,,,,,,,,JDK-8272640,JDK-8270284,JDK-8273852,,,,,,,,,JDK-8266292,,,,,,,,,,JDK-8272329,JDK-8274104,JDK-8274378,JDK-8275225,,JDK-8270867,JDK-8269912,JDK-8278980,JDK-8259635,JDK-8274107,JDK-8270479,,,,,,,,,,,,,,,,,,,,,"0|i2t8sr:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2021-07-14 06:13;roboduke;Changeset: 948df324
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2021-07-14 13:12:30 +0000
URL:       https://git.openjdk.java.net/jfx/commit/948df32448b71c4d6c10ccc4c125170dc68b0786
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup Override in Context-Specific Deserialization Filters ,JDK-8268826,5051958,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rriggs,rriggs,rriggs,2021-06-15 13:03,2021-07-15 10:37,2023-10-01 09:57,2021-07-09 07:35,17,,,,,,,17,core-libs,,0,,,,,,,,,,,,,,,,,,"Remove ""OVERRIDE"" special handling of `jdk.serialFilterFactory` 
in JEP 415: Context-specific Deserialization Filters.

See the CSR JDK-8268827 for rationale",,,,,,,,,,,JDK-8270226,JDK-8270745,,,,,,,,,,,,JDK-8268827,,,,,,,,JDK-8268615,JDK-8264859,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t8m3:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7e74daa7,,,,,,,,,"2021-07-06 06:42;rriggs;PR https://git.openjdk.java.net/jdk17/pull/85;;;","2021-07-09 07:35;roboduke;Changeset: 6889a39a
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2021-07-09 14:33:56 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/6889a39a3f124d2442584cb7646b2d6a18745e78
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unused jdk.accessibility APIs deprecated for removal in JDK 9,JDK-8268824,5051955,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2021-06-15 12:21,2021-08-11 21:36,2023-10-01 09:57,2021-08-09 11:16,10,18,,,,,,18,client-libs,,0,sn_96,,,,,,,,,,,,,,,,,"https://bugs.openjdk.java.net/browse/JDK-8167182
deprecated for removal some fields in the jdk.accessibility module
which were un-used and deprecated in JDK 8 and further deprecated for removal in JDK 9

At that time it was stated that they would be removed in the JDK 10 time frame

https://mail.openjdk.java.net/pipermail/swing-dev/2016-November/006963.html
"" They were deprecated in 8, but this signals a clear intention to remove these in JDK 10.""

Clearly we've given more than enough notice by now.
",,,,,,,,,,,,,,,,,,,,,,,,JDK-8270918,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t8lf:",9223372036854775807,b10,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-08-09 11:16;roboduke;Changeset: 4548677e
Author:    Phil Race <prr@openjdk.org>
Date:      2021-08-09 18:15:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4548677e89fb7807639602d29b87dcaabe7b6d8d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use 'print_cr' instead of 'print' for the message 'eliminated <owner is scalar replaced>',JDK-8268780,5051906,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ddong,ddong,ddong,2021-06-15 10:11,2021-06-21 12:32,2023-10-01 09:57,2021-06-15 19:09,,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t8aj:",9223372036854775807,b02,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-15 19:09;roboduke;Changeset: 48d45628
Author:    Denghui Dong <ddong@openjdk.org>
Committer: Yi Yang <yyang@openjdk.org>
Date:      2021-06-16 02:08:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/48d456281ea73e22eaaae6a082bb43610647d660
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ZGC: runtime/InternalApi/ThreadCpuTimesDeadlock.java#id1 failed with ""OutOfMemoryError: Java heap space""",JDK-8268779,5051904,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,pliden,dcubed,dcubed,2021-06-15 09:45,2023-07-31 23:23,2023-10-01 09:57,2021-11-04 06:48,17,,,,,,,18,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,threads,tier3,zgc,,,,,,,,,,,,"The following test failed in the JDK17 CI:

runtime/InternalApi/ThreadCpuTimesDeadlock.java#id1

Here's a snippet from the log file:

#section:main
----------messages:(5/379)----------
command: main -XX:-UseTLAB -XX:+UsePerfData -Xmx128m ThreadCpuTimesDeadlock
reason: User specified action: run main/othervm -XX:-UseTLAB -XX:+UsePerfData -Xmx128m ThreadCpuTimesDeadlock 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.management --add-exports java.management/sun.management=ALL-UNNAMED
elapsed time (seconds): 12.115
----------configuration:(4/121)----------
Boot Layer
  add modules: java.management                
  add exports: java.management/sun.management ALL-UNNAMED

----------System.out:(7/189)----------
Successful iterations: 10000
Successful iterations: 20000
Successful iterations: 30000
Successful iterations: 40000
Successful iterations: 50000
Successful iterations: 60000
PASSED.
----------System.err:(4/210)----------
STATUS:Passed.
java.lang.OutOfMemoryError: Java heap space
	at ThreadCpuTimesDeadlock$1.run(ThreadCpuTimesDeadlock.java:75)
STATUS:Failed.`main' threw exception: java.lang.OutOfMemoryError: Java heap space
----------rerun:(46/5467)*----------",,,,,,,,,,,JDK-8288388,JDK-8293465,JDK-8294019,,,,,,,,,,,,,,JDK-8266235,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,,,,,"0|i2t8a3:",9223372036854775807,b23,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2021-06-15 11:04;mseledtsov;ILW = MLM = P4;;;","2021-07-25 21:39;dholmes;The test has failed twice only, both times on Windows and both times with ZGC.

The test has a garbage producing thread which does:

         public void run() {
            while (true) {
              dummy = new byte[4096];
            }
          }

where dummy is declared as:

  public static byte[] dummy;

So we constantly allocate a 4K array and then make the previously allocated array garbage. So the GC should have no problem reclaiming memory here and so we should never be throwing OOME.

Moving this to the GC team for evaluation.;;;","2021-07-28 07:04;kbarrett;This might be a testbug.  The test has a daemon thread that just spins allocating byte buffers and writing them to the same member.  The thread is left running.  Perhaps the test should explicitly manage the thread, shutting it down when the test is complete.

But maybe there is some interaction between daemon threads, shutdown, and ZGC that should be looked at more carefully.  Treating as a non-testbug for now, pending further investigation.
;;;","2021-08-23 03:27;dholmes;Failure now seen on Linux too.;;;","2021-11-03 09:29;pliden;This is indeed a ZGC shutdown issue. I managed to write a small reproduced, which provokes this problem within a minute or so. The root of the problem is this scenario:

1) Some Java thread stalls on an allocation.
2) GC cycle starts.
3) JVM gets signal to shutdown.
4) GC cycle is aborted.
5) Even though the GC aborted, we still make a call to ZHeap::check_out_of_memory(). This is incorrect, since it will cause pre-mature OOME to be thrown. If a GC cycle is aborted, stalled Java threads should remain stalled and we should not call ZHeap::check_out_of_memory().;;;","2021-11-04 06:48;roboduke;Changeset: a6fa6ed1
Author:    Per Liden <pliden@openjdk.org>
Date:      2021-11-04 13:47:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a6fa6ed1edc6f473a7fea1fa00edd467ab778983
;;;","2021-11-04 07:43;dcubed;This fix is in jdk-18+23-1443.;;;","2022-09-16 03:51;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Low risk, trivial change. Concerns only zGC.
Clean backport.
SAP nighltly testing passed.;;;","2022-09-16 03:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/684
Date: 2022-09-16 10:51:12 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS check_excluded_classes needs DumpTimeTable_lock,JDK-8268778,5051903,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,iklam,iklam,2021-06-15 09:33,2021-07-15 10:32,2023-10-01 09:57,2021-06-16 09:07,,,,,,,,18,hotspot,,0,cds,hgupdate-sync,,,,,,,,,,,,,,,,"Today we call SystemDictionaryShared::check_excluded_classes() before holding the DumpTimeTable_lock:

https://github.com/openjdk/jdk/blob/0b09129faefb945c2f2c35dab2731961216d054e/src/hotspot/share/cds/metaspaceShared.cpp#L490

  SystemDictionaryShared::check_excluded_classes();
  MutexLocker ml(DumpTimeTable_lock, Mutex::_no_safepoint_check_flag);

It's possible for concurrent class unloading to modify the dumptime table where SystemDictionaryShared::remove_dumptime_info is called from here:

 0 InstanceKlass::unload_class 
 1 ClassLoaderData::classes_do 
 2 ClassLoaderData::unload 
 3 ClassLoaderDataGraph::do_unloading 
 4 SystemDictionary::do_unloading 
 5 ZUnload::unlink 
 6 ZHeap::process_non_strong_references 
 7 ZDriver::concurrent_process_non_strong_references 
 8 ZDriver::gc 
 9 ZDriver::run_service 
10 ConcurrentGCThread::run 

Fix: the above two source lines should be swapped.",,,,,,,,,,,JDK-8270720,JDK-8269963,,,,,,,,,,,,,,,,,,,,JDK-8268139,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t89v:",9223372036854775807,b03,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-15 09:34;iklam;We should fix in 18 first, make sure it works, and then backport to 17.;;;","2021-06-16 09:07;roboduke;Changeset: e4908a43
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-06-16 16:05:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e4908a439a235ee437c0e6e39341e1d67904f49e
;;;","2021-07-07 18:00;roboduke;Changeset: 0ebf8aa9
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2021-07-06 22:21:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0ebf8aa9d7835ef46394fb6536882b8eac65ea2c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test `ADatagramSocket.java` missing /othervm from @run tag,JDK-8268776,5051900,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pconcannon,pconcannon,pconcannon,2021-06-15 08:45,2021-08-13 00:18,2023-10-01 09:57,2021-06-17 02:35,11,15,16,17,,,,17,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,redhat-interest,testbug,,,,,,,,,,,,,"The test `test/jdk/java/net/DatagramSocket/SetDatagramSocketImplFactory/ADatagramSocket.java` is missing /othervm from its @run jtreg test tag, which risks polluting other tests that runs in that VM.

Currently, any test that runs without `/othervm` after this test would find the `DatagramSocketImpl` factory created by this test, and therefore any call made to new `DatagramSocket()` would return/use a `NetMulticastSocket` instead of `DatagramSocketAdaptor`. This could make tests that create `DatagramSocket/MulticastSocket` fail intermittently in unexplainable ways. Adding in /othervm to the @run tag will avoid this problem.",,,,,,,,,,,JDK-8269903,JDK-8270570,JDK-8268987,JDK-8269902,JDK-8272430,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t897:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-06-15 08:55;dfuchs;On JDK 11 and before the issue is maybe less severe as the DatagramSocketImplFactory installed by the test is a simple wrapper around the DefaultDatagramSocketImplFactory but it could still hamper other tests that might run in the VM.;;;","2021-06-17 02:35;roboduke;Changeset: 7d7bdbe1
Author:    Patrick Concannon <pconcannon@openjdk.org>
Date:      2021-06-17 09:35:08 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/7d7bdbe135018f1452fa133b294575014e3e871b
;;;","2021-08-11 00:32;shade;Fix Request (11u)

Stabilizes the test and keeps 11.0.13-oracle parity. Clean backport, affected test still passes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Password is being converted to String in AccessibleJPasswordField,JDK-8268775,5051899,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,kizune,kizune,2021-06-15 08:31,2021-07-30 08:15,2023-10-01 09:57,2021-07-02 12:38,11,16,17,8,,,,17,client-libs,,0,a11y,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,noreg-hard,sn_96,,,,,,,,,"In AccessibleJPasswordField.getAtIndex(int, int) under some conditions password is being stored in an internal String variable in unencrypted form - that is undesirable since it can under some circumstances lead to password appearance in unencrypted form in the memory dump.",,,,,,,,,,,JDK-8271554,JDK-8269883,JDK-8270707,JDK-8271540,JDK-8271563,JDK-8271259,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t88z:",9223372036854775807,b30,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2021-07-02 12:38;roboduke;Changeset: 97e0e9e7
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2021-07-02 19:37:15 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/97e0e9e73d12c2b8e58ca2540d5153c10984731d
;;;","2021-07-28 07:01;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.13-oracle. Doesn't apply cleanly. Review: https://github.com/openjdk/jdk11u-dev/pull/170;;;","2021-07-30 04:37;yan;Fix request (15u):
I'd like to backport it here, too. Applies cleanly.;;;","2021-07-30 07:59;yan;Fix request (13u):
I'd like to backport it here, too. Applies cleanly. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Residual logging output written to STDOUT, not STDERR",JDK-8268774,5051896,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-06-15 08:14,2022-01-18 15:12,2023-10-01 09:57,2021-06-16 11:06,17,,,,,,,17,tools,,0,17ea,apache-ant-found,apache-maven-interest,javadoc-streams,,,,,,,,,,,,,,"In https://mail.openjdk.java.net/pipermail/javadoc-dev/2021-June/003075.html
it is noted that a couple of lines are written to STDOUT instead of STDERR.

From the message:
Now in JDK 17 EA, the same command generates the following STDOUT:

Loading source file Foo.java...
Constructing Javadoc information...",,,,,,,,,,,JDK-8270562,JDK-8268936,,,,,,,,,,,,,,,,,,,,JDK-8268831,JDK-8270831,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t88b:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2021-06-15 11:34;jjg;While not an excuse for the oversight, the explanation is that these messages come from the javadoc tool, not the standard doclet.

The messages are generated by ""inappropriate"" of ToolEnvironment.notice, which maps down onto JavadocLog.noticeUisngKey, which is (also) used for writing command-line help, and so writes to STDOUT.;;;","2021-06-16 11:06;roboduke;Changeset: 2c7e47e1
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2021-06-16 18:03:48 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/2c7e47e12b8a772bcebcdf0b15d6a4d3f92e2267
;;;","2021-07-13 15:19;rfscholte;This change is currently causing issues for the maven-javadoc-plugin.
The plugin consumes the output of stderr to detect if there are issues.
That mechanism won't work anymore with this change.
To me this change looks more like abusing the stderr for something that is actually debug logging.
Please advice what to do.;;;","2021-07-16 10:36;jjg;>> To me this change looks more like abusing the stderr for something that is actually debug logging. 

javadoc has always generated these messages, so no, they're not ""actually debug logging"".  You can suppress the messages with `-quiet`.

You can check the tail of the stderr output for lines reporting the number of errors and warnings that were reported. That has not been changed in this release, and is a standard that goes back many releases.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
idea.sh has been updated in surprising and incompatible ways,JDK-8268768,5051889,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-06-15 06:57,2021-06-17 07:36,2023-10-01 09:57,2021-06-15 13:38,,,,,,,,17,infrastructure,,0,,,,,,,,,,,,,,,,,,"As part of JDK-8267706 and related changes, the behavior of idea.sh has changed significantly from the past. The major changes are:

* support for ant file build has been dropped - as a result it is no longer possible to build using IDE actions, or to link jtreg tests to build actions. Additionally, any errors generated during the build are not rendered by the IDE in a way that allow the user to ""click"" on them and jump at the line at which the error was detected.

* The new project is modularized - that is, it uses IDE modules to mimic JDK modules. I have seen several instances of the IDE complaining of ""too many modules"", and other similar spurious errors.

Since the original problem which JDK-8267706 aimed to fix was to make path calculation more friendly to environments such as cygwin, I propose to roll back the IDE support to a previously ""working"" state. If a focussed fix targeted at path problems is submitted on top of that, it's ok, but sweeping changes to the IDE support should at least be discussed in ide-support-dev.",,,,,,,,,,,JDK-8268848,,,,,,,,,,,,,,,,,,,,,JDK-8268423,,,,,JDK-8268901,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t86r:",9223372036854775807,b27,,,,,,,,,,,,,"2021-06-15 13:38;roboduke;Changeset: 788b3095
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2021-06-15 20:37:20 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/788b309563610b690306211790af17954f7556cb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Desugaring of pattern matching enum switch should be improved,JDK-8268766,5051887,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-06-15 06:09,2021-07-15 10:35,2023-10-01 09:57,2021-07-08 04:58,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,"Currently, the pattern matching switches over enums desugaring is based on the standard switch enum implementation, but the generated code is not very good, and the javac code that implements the desugaring can be difficult to maintain. Would be better to use the indy bootstrap for pattern matching switches over enums.",,,,,,,,,,,JDK-8270733,JDK-8270121,,,,,,,,,,,,JDK-8269518,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t86b:",9223372036854775807,b31,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-07-08 04:58;roboduke;Changeset: fa08cc62
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-07-08 11:56:53 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/fa08cc62df10e4b6e3cbc45d4e889191d67048c4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javac generates uncorrect bytecodes when using nested pattern variables,JDK-8268748,5051843,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gli,gli,gli,2021-06-15 03:19,2021-07-15 10:17,2023-10-01 09:57,2021-06-24 16:08,17,,,,,,,17,tools,,0,,,,,,,,,,,,,,,,,,"I try the following code when solving the JDK-8267610.

```
class Main {    
    String test(Object o) {
        if (o instanceof (CharSequence cs && cs instanceof String s)){
            return s;
        }
        return null;
    }
}
```

The javac compiles successfully and generates the following bytecode.

```
  java.lang.String test(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Ljava/lang/String;
    flags: (0x0000)
    Code:
      stack=1, locals=4, args_size=2
         0: aload_1
         1: instanceof    #7                  // class java/lang/CharSequence
         4: ifeq          26
         7: aload_1
         8: checkcast     #7                  // class java/lang/CharSequence
        11: astore_2
        12: aload_1            // <---------- should be `aload_2`
        13: instanceof    #9                  // class java/lang/String
        16: ifeq          26
        19: aload_1            // <---------- should be `aload_2`
        20: checkcast     #9                  // class java/lang/String
        23: astore_3
        24: aload_3
        25: areturn
        26: aconst_null
        27: areturn
```

There are two wrong places where I mark ""// <---------- should be `aload_2`"".

After fixing JDK-8267610 locally, javac generates the following byte code:

```
  java.lang.String test(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Ljava/lang/String;
    flags: (0x0000)
    Code:
      stack=1, locals=4, args_size=2
         0: aload_1
         1: instanceof    #7                  // class java/lang/CharSequence
         4: ifeq          26
         7: aload_1
         8: checkcast     #7                  // class java/lang/CharSequence
        11: astore_2
        12: aload_2
        13: instanceof    #9                  // class java/lang/String
        16: ifeq          26
        19: aload_1           // <---------- should be `aload_2`
        20: checkcast     #9                  // class java/lang/String
        23: astore_3
        24: aload_3
        25: areturn
        26: aconst_null
        27: areturn
```

One wrong byte code is also generated.

Both JDK-8267610 and this issue are caused by the BindingPattern and BindingSymbol.
During desugar, especially TransPatterns, we shouldn't make a tree which contains JCBindingPattern or BindingSymbol. So after desugar, the whole AST shouldn't contain JCBindingPattern or BindingSymbol anymore.
If not, the tree is wrong and the javac may crash or generate wrong bytecode unexpectedly.
",,,,,,,,,,,JDK-8269455,JDK-8270642,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267610,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2t7wj:",9223372036854775807,b29,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-24 16:08;roboduke;Changeset: 7ab12856
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2021-06-24 23:07:43 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/7ab12856c4b914a2f7b7de3cd4963598aab0f330
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: Build failure after JDK-8267663,JDK-8268739,5051820,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,eliu,eliu,eliu,2021-06-14 23:28,2021-07-15 10:04,2023-10-01 09:57,2021-06-16 19:47,17,,,,,,,17,hotspot,,0,hs-comp-triaged,noreg-build,oracle-triage-11,oracle-triage-18,,,,,,,,,,,,,,"04:41:21 using configure arguments '--with-boot-jdk=/mnt/share/openjdk/packages/boot-jdk/aarch64/master --disable-precompiled-headers --with-debug-level=release --with-version-opt=git-e59acd986 --with-jvm-variants=client --with-gtest=/mnt/share/openjdk/tools/googletest'.
04:41:21 
04:41:21 Configuration summary:
04:41:21 * Name:           /home/ent-user/ci-scripts/build-release
04:41:21 * Debug level:    release
04:41:21 * HS debug level: product
04:41:21 * JVM variants:   client
04:41:21 * JVM features:   client: 'cds compiler1 dtrace epsilongc g1gc jfr jni-check jvmti management nmt parallelgc serialgc services shenandoahgc vm-structs zgc' 
04:41:21 * OpenJDK target: OS: linux, CPU architecture: aarch64, address length: 64
04:41:21 * Version string: 18-internal+0-git-e59acd986 (18-internal)
04:41:21 
04:41:21 Tools summary:
04:41:21 * Boot JDK:       openjdk version ""17-internal"" 2021-09-14 OpenJDK Runtime Environment (build 17-internal+0-adhoc.alahay01.gerritjdk) OpenJDK 64-Bit Server VM (build 17-internal+0-adhoc.alahay01.gerritjdk, mixed mode, sharing) (at /mnt/share/openjdk/packages/boot-jdk/aarch64/master)
04:41:21 * Toolchain:      gcc (GNU Compiler Collection)
04:41:21 * C Compiler:     Version 10.2.0 (at /usr/bin/gcc)
04:41:21 * C++ Compiler:   Version 10.2.0 (at /usr/bin/g++)
04:41:21 
04:41:21 Build performance summary:
04:41:21 * Cores to use:   30
04:41:21 * Memory limit:   31483 MB
04:41:21 
04:41:21 The following warnings were produced. Repeated here for convenience:
04:41:21 WARNING: Ignoring jtreg from path since a valid jtreg home cannot be found
04:41:21 
04:41:21 [06-14 20:40:23 UTC]ent-arm-13-ubuntu-openjdk-build:DBG: Running : make images JOBS=45
04:41:21 Building target 'images' in configuration '/home/ent-user/ci-scripts/build-release'
04:41:21 Compiling 1 files for BUILD_TOOLS_HOTSPOT
04:41:21 Compiling 8 files for BUILD_TOOLS_LANGTOOLS
04:41:21 Compiling 2 files for BUILD_JVMTI_TOOLS
04:41:21 Parsing 2 properties into enum-like class for jdk.compiler
04:41:21 Compiling 7 properties into resource bundles for jdk.jshell
04:41:21 Compiling 13 properties into resource bundles for jdk.javadoc
04:41:21 Compiling 16 properties into resource bundles for jdk.compiler
04:41:21 Compiling 12 properties into resource bundles for jdk.jdeps
04:41:21 Compiling 127 files for BUILD_java.compiler.interim
04:41:21 Compiling 402 files for BUILD_jdk.compiler.interim
04:41:21 Compiling 229 files for BUILD_jdk.javadoc.interim
04:41:21 Creating support/modules_libs/java.base/client/libjvm.so from 941 file(s)
04:41:21 Creating hotspot/variant-client/libjvm/libgtest/libgtest.a from 2 file(s)
04:41:21 Creating hotspot/variant-client/libjvm/gtest/libjvm.so from 162 file(s)
04:41:21 Creating hotspot/variant-client/libjvm/gtest/gtestLauncher from 1 file(s)
04:41:21 Compiling 31 files for BUILD_JRTFS
04:41:21 Compiling 185 files for BUILD_TOOLS_JDK
04:41:21 Compiling 2 files for COMPILE_DEPEND
04:41:21 Creating support/modules_libs/java.base/jrt-fs.jar
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp: In member function 'void MacroAssembler::neon_compare(FloatRegister, BasicType, FloatRegister, FloatRegister, int, bool)':
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5347:12: error: 'BoolTest' has not been declared
04:41:26  5347 |       case BoolTest::eq: fcmeq(dst, size, src1, src2); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5348:12: error: 'BoolTest' has not been declared
04:41:26  5348 |       case BoolTest::ne: {
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5353:12: error: 'BoolTest' has not been declared
04:41:26  5353 |       case BoolTest::ge: fcmge(dst, size, src1, src2); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5354:12: error: 'BoolTest' has not been declared
04:41:26  5354 |       case BoolTest::gt: fcmgt(dst, size, src1, src2); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5355:12: error: 'BoolTest' has not been declared
04:41:26  5355 |       case BoolTest::le: fcmge(dst, size, src2, src1); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5356:12: error: 'BoolTest' has not been declared
04:41:26  5356 |       case BoolTest::lt: fcmgt(dst, size, src2, src1); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5363:12: error: 'BoolTest' has not been declared
04:41:26  5363 |       case BoolTest::eq: cmeq(dst, size, src1, src2); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5364:12: error: 'BoolTest' has not been declared
04:41:26  5364 |       case BoolTest::ne: {
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5369:12: error: 'BoolTest' has not been declared
04:41:26  5369 |       case BoolTest::ge: cmge(dst, size, src1, src2); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5370:12: error: 'BoolTest' has not been declared
04:41:26  5370 |       case BoolTest::gt: cmgt(dst, size, src1, src2); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5371:12: error: 'BoolTest' has not been declared
04:41:26  5371 |       case BoolTest::le: cmge(dst, size, src2, src1); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5372:12: error: 'BoolTest' has not been declared
04:41:26  5372 |       case BoolTest::lt: cmgt(dst, size, src2, src1); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5373:12: error: 'BoolTest' has not been declared
04:41:26  5373 |       case BoolTest::uge: cmhs(dst, size, src1, src2); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5374:12: error: 'BoolTest' has not been declared
04:41:26  5374 |       case BoolTest::ugt: cmhi(dst, size, src1, src2); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5375:12: error: 'BoolTest' has not been declared
04:41:26  5375 |       case BoolTest::ult: cmhi(dst, size, src2, src1); break;
04:41:26       |            ^~~~~~~~
04:41:26 /home/ent-user/ci-scripts/jdk_src/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:5376:12: error: 'BoolTest' has not been declared
04:41:26  5376 |       case BoolTest::ule: cmhs(dst, size, src2, src1); break;
04:41:26       |            ^~~~~~~~
04:41:27 make[3]: *** [lib/CompileJvm.gmk:143: /home/ent-user/ci-scripts/build-release/hotspot/variant-client/libjvm/objs/macroAssembler_aarch64.o] Error 1",,,,,,,,,,,JDK-8268985,JDK-8270568,,,,,,,,,,,,,,,,,,,,JDK-8267663,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,generic,,,,"0|i2t7rf:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2021-06-14 23:30;eliu;This failure could be reproduced only with ""--with-jvm-variants=client"".;;;","2021-06-15 00:12;chagedorn;ILW = Build failure, with --with-jvm-variants=client"", no workaround = HLH = P2
;;;","2021-06-16 19:47;roboduke;Changeset: 4c9aefdb
Author:    Eric Liu <eliu@openjdk.org>
Committer: Pengfei Li <pli@openjdk.org>
Date:      2021-06-17 02:47:00 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/4c9aefdb6193f754bfac3ae022f08a76b0cae718
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use apiNote in AutoCloseable.close javadoc,JDK-8268736,5051817,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2021-06-14 22:53,2021-06-17 07:35,2023-10-01 09:57,2021-06-15 11:53,17,,,,,,,17,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,"The javadoc of  AutoCloseable.close is from JDK 7 and thus predates tags like @apiNote. However, some of the discussion contained in  AutoCloseable.close is more appropriate as an apiNote that normal text.",,,,,,,,,,,JDK-8268845,,,,,,,,,,,,,JDK-8268820,,,,,,,,JDK-7027362,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t7qr:",9223372036854775807,b27,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2021-06-15 11:53;roboduke;Changeset: 31a055e6
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2021-06-15 18:52:54 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/31a055e67a9a579a6b6ab26519271202da53a295
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jshell does not support the --enable-native-access option,JDK-8268725,5051808,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jrose,jrose,2021-06-14 17:38,2021-12-01 17:43,2023-10-01 09:57,2021-11-23 08:47,17,,,,,,,18,tools,,0,,,,,,,,,,,,,,,,,,"Java 17 supports the option `--enable-native-access` which allows modules to use certain new APIs from Project Panama.  In order to use jshell interactively with these modules, the classes defined by jshell need this permission.

I suggest that both the /env comment and the jshell command line accept --enable-native-access (with no argument) to unlock native access.

Workaround:  Use `-R--enable-native-access=ALL-UNNAMED` on the jshell command line.

For an example, please see http://cr.openjdk.java.net/~jrose/panama/argv-example.jshell",,,,,,,,,,,,,,,,,,,,,,,,JDK-8273281,,,,,,,,JDK-8219481,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t7or:",9223372036854775807,b26,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2021-11-23 08:47;roboduke;Changeset: 8a44e093
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-11-23 16:46:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8a44e093dc3e192990fde8ab37ab08c737f06b39
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem list SA core file tests on OSX when using ZGC,JDK-8268723,5051806,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2021-06-14 16:40,2021-06-17 07:36,2023-10-01 09:57,2021-06-15 11:59,17,,,,,,,17,hotspot,,0,testbug,,,,,,,,,,,,,,,,,"ZGC core files are very large on OSX (see JDK-8268722), and this is causing a problem for SA core file testing. On most of our 10.x machines, the host simply runs out of memory and the test task fails. On 11.x, we are seeing hosts frequently get into a bad state, and suspect these large core files might have something to do with that. See JDK-8267433 and JDK-8265037.",,,,,,,,,,,JDK-8268846,,,,,,,,,,,,,,,,,,,,,JDK-8268722,JDK-8267433,JDK-8265037,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x,,,,"0|i2t7ob:",9223372036854775807,b27,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2021-06-15 11:59;roboduke;Changeset: fe7a44de
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2021-06-15 18:59:04 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/fe7a44de63f19921e373ff336be26f9165ac6977
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unspecified checks on NameAndType constants should not be performed,JDK-8268720,5051802,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,hseigel,hseigel,2021-06-14 12:40,2022-01-24 11:19,2023-10-01 09:57,2021-06-23 05:11,18,,,,,,,18,hotspot,,0,,,,,,,,,,,,,,,,,,"The JVM should not perform unspecified checks on NameAndType constants.  For example, the NameAndType constant <init>:()D is legal, per the specification, and should not cause a ClassFormatError unless and until it is referenced by a Methodref constant.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7316544,JCK-7316305,JDK-8280480,,,JDK-8271536,JDK-8267650,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t7nf:",9223372036854775807,b04,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2021-06-15 11:06;mseledtsov;ILW = MLM = P4;;;","2021-06-23 05:12;roboduke;Changeset: f2e690e0
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2021-06-23 12:11:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f2e690e0ee503794cb50740170912697640d70ff
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[macos] Video stops, but audio continues to play when stopTime is reached",JDK-8268718,5051800,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,almatvee,almatvee,2021-06-14 11:02,2021-09-15 13:53,2023-10-01 09:57,2021-07-08 15:12,jfx17,,,,,,,jfx18,javafx,,0,sn_96,sn_97,,,,,,,,,,,,,,,,"This issue is reproducible on macOS and only with OSXPlatform. When stopTime is set and it is less than media duration, video will stop at stop time, but audio continues to play to the end. To reproduce set -Djfxmedia.platforms=OSXPlatform to force OSXPlatform. GStreamer platform does not have such behavior and both video and audio stops at stopTime.",,,,,,,,,,,JDK-8273847,JDK-8272731,JDK-8270128,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270200,,,,,,,,,,,,,,,,,,,,,,os_x,,,,"0|i2t7mz:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@712e7ab7,,,,,,,,,"2021-07-08 11:12;kcr;We have forked jfx17, so I'm setting fixversion to tbd. Once the fix is integrated to either `jfx17` or `master (for 18), the bot will update the version as appropriate.;;;","2021-07-08 15:12;roboduke;Changeset: 0c98d960
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2021-07-08 22:12:30 +0000
URL:       https://git.openjdk.java.net/jfx/commit/0c98d9608611aa2378b38604e2528935c94e84ae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Upstream: 8268673: Stack walk across optimized entry frame on fresh native thread fails,JDK-8268717,5051798,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jvernee,jvernee,jvernee,2021-06-14 10:47,2021-08-10 06:55,2023-10-01 09:57,2021-06-21 05:07,17,repo-panama,,,,,,17,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,Upstream the fix JDK-8268673 to the mainline JDK repo.,,,,,,,,,,,JDK-8269105,JDK-8270607,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269240,JDK-8268673,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t7mj:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,Verified,,"2021-06-14 10:48;jvernee;ILW = HMM = P2

VM crash = H
Encountered when native thread calls up into Java and any exception occurs = M
Workaround is to not create any exceptions, which is hard to control = M;;;","2021-06-21 05:07;roboduke;Changeset: f25e7197
Author:    Jorn Vernee <jvernee@openjdk.org>
Date:      2021-06-21 12:06:51 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/f25e7197fef76cc87a15da7cc96a42b84d69bbfe
;;;","2021-08-10 00:37;sundar;I ran all jdk_foreign category tests with the lasted build of jdk/jdk repo. All tests including test associated with the current bug pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos-aarch64] 7 java/net/httpclient/websocket tests failed,JDK-8268714,5051794,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dcubed,dcubed,2021-06-14 09:12,2023-03-17 04:33,2023-10-01 09:57,2021-06-16 10:24,17,,,,,,,17,core-libs,,0,intermittent,jdk11u-todo,noreg-self,testbug,tier2,,,,,,,,,,,,,"The following tests failed in the JDK17 CI:

java/net/httpclient/websocket/WSHandshakeExceptionTest.java
java/net/httpclient/websocket/PendingTextPongClose.java
java/net/httpclient/websocket/PendingTextPingClose.java
java/net/httpclient/websocket/PendingPongBinaryClose.java
java/net/httpclient/websocket/PendingPongTextClose.java
java/net/httpclient/websocket/PendingPingTextClose.java
java/net/httpclient/websocket/PendingBinaryPongClose.java


Here's a snippet from the WSHandshakeExceptionTest.java log file:

Response is <h1>404 Not Found</h1>No context found for request
test WSHandshakeExceptionTest.test(""ws://localhost:59319/"", false): success
iteration 0
test WSHandshakeExceptionTest.test(""wss://localhost:59320/"", false): failure
java.lang.AssertionError: Unexpected exception
	at WSHandshakeExceptionTest.test(WSHandshakeExceptionTest.java:123)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.net.ssl.SSLHandshakeException: Remote host terminated the handshake
	at java.net.http/jdk.internal.net.http.common.SSLTube.checkForHandshake(SSLTube.java:595)
	at java.net.http/jdk.internal.net.http.common.SSLTube$SSLTubeFlowDelegate.checkForHandshake(SSLTube.java:156)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Reader.errorCommon(SSLFlowDelegate.java:365)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.onError(SubscriberWrapper.java:410)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadSubscription.signalCompletion(SocketTube.java:637)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.read(SocketTube.java:821)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowTask.run(SocketTube.java:181)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable(SocketTube.java:774)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadEvent.signalEvent(SocketTube.java:957)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowEvent.handle(SocketTube.java:253)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.handleEvent(HttpClientImpl.java:979)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.lambda$run$3(HttpClientImpl.java:934)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:934)
Caused by: java.net.SocketException: Connection reset
	at java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)
	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)
	at java.net.http/jdk.internal.net.http.SocketTube.readAvailable(SocketTube.java:1170)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.read(SocketTube.java:833)
	... 11 more

<snip>

iteration 8
Status code is 404
Response is <h1>404 Not Found</h1>No context found for request
iteration 9
test WSHandshakeExceptionTest.test(""wss://localhost:59320/"", true): failure
java.lang.AssertionError: Unexpected exception
	at WSHandshakeExceptionTest.test(WSHandshakeExceptionTest.java:123)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.net.ssl.SSLHandshakeException: Remote host terminated the handshake
	at java.net.http/jdk.internal.net.http.common.SSLTube.checkForHandshake(SSLTube.java:595)
	at java.net.http/jdk.internal.net.http.common.SSLTube$SSLTubeFlowDelegate.checkForHandshake(SSLTube.java:156)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Reader.errorCommon(SSLFlowDelegate.java:365)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.onError(SubscriberWrapper.java:410)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadSubscription.signalCompletion(SocketTube.java:637)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.read(SocketTube.java:821)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowTask.run(SocketTube.java:181)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.handleError(SocketTube.java:757)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher.signalError(SocketTube.java:590)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalWriteSubscriber.signalError(SocketTube.java:433)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalWriteSubscriber.tryFlushCurrent(SocketTube.java:370)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalWriteSubscriber.onNext(SocketTube.java:317)
	at java.net.http/jdk.internal.net.http.SocketTube.onNext(SocketTube.java:135)
	at java.net.http/jdk.internal.net.http.SocketTube.onNext(SocketTube.java:58)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper$DownstreamPusher.run1(SubscriberWrapper.java:316)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper$DownstreamPusher.run(SubscriberWrapper.java:259)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.outgoing(SubscriberWrapper.java:232)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.outgoing(SubscriberWrapper.java:198)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Writer.sendResultBytes(SSLFlowDelegate.java:934)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Writer.processData(SSLFlowDelegate.java:817)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Writer$WriterDownstreamPusher.run(SSLFlowDelegate.java:694)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Writer.incoming(SSLFlowDelegate.java:718)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.incomingCaller(SubscriberWrapper.java:436)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.addData(SubscriberWrapper.java:456)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Writer.onSubscribe(SSLFlowDelegate.java:727)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.onSubscribe(SubscriberWrapper.java:369)
	at java.net.http/jdk.internal.net.http.common.SSLTube$SSLTubeFlowDelegate.connect(SSLTube.java:149)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate.<init>(SSLFlowDelegate.java:160)
	at java.net.http/jdk.internal.net.http.common.SSLTube$SSLTubeFlowDelegate.<init>(SSLTube.java:106)
	at java.net.http/jdk.internal.net.http.common.SSLTube.<init>(SSLTube.java:94)
	at java.net.http/jdk.internal.net.http.AsyncSSLConnection.lambda$connectAsync$0(AsyncSSLConnection.java:62)
	at java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:646)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1773)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	... 1 more
Caused by: java.io.IOException: No buffer space available
	at java.base/sun.nio.ch.FileDispatcherImpl.writev0(Native Method)
	at java.base/sun.nio.ch.SocketDispatcher.writev(SocketDispatcher.java:66)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:217)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:153)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:563)
	at java.base/java.nio.channels.SocketChannel.write(SocketChannel.java:642)
	at java.net.http/jdk.internal.net.http.SocketTube.writeAvailable(SocketTube.java:1236)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalWriteSubscriber.tryFlushCurrent(SocketTube.java:350)
	... 35 more",,,,,,,,,,,JDK-8269904,JDK-8268935,JDK-8270561,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265367,JDK-8270189,JDK-8269994,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,"0|i2t7ln:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2021-06-14 09:18;dcubed;Similar failure mode was fixed in jdk-17+25:

JDK-8265367 [macos-aarch64] 3 java/net/httpclient/websocket tests fail with ""IOException: No buffer space available"";;;","2021-06-16 10:24;roboduke;Changeset: 8ea0606a
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2021-06-16 17:24:06 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/8ea0606aba15911f5bfe2c81a83b42288d97095f
;;;","2021-07-06 22:26;dholmes;We are seeing the same failures again on macOS-aarch64;;;","2021-10-06 07:09;goetz;11u notice

I had a look at backporting this to 11u.
This change requires the changes to  DummyWebSocketServer.java from JDK-8265367 to compile.
So I had a look at backporting  JDK-8265367 first. That adds about 50 lines of debug coding to runtime code in src/java.net.http/share/classes/jdk/internal/net/http/HttpClientImpl.java+PlainHttpConnection.java. We want to avoid unnecessary changes to runtime coding in 11u, an argument against backporting this change. Actually, the test modifications do not depend on the change to the runtime, so JDK-8265367 could be brought to 11u without the runtime changes.

This change though could be ported to 11u by including the changes to DummyWebSocketServer.java from JDK-8265367.

But looking at JDK-8269772 shows that both above mentioned changes hunted the wrong problem, the error is thrown by javac when compiling the test. So the remaining purpose of these changes is that they manage system resources of the tests more explicitly. As this seems not a problem in 11u, lets omit both of these for now.
;;;","2021-10-08 02:18;dfuchs;[~goetz] My analysis at the time was that the test consumed too much socket buffer spaces, leading to failure to allocate socket buffers when several such tests were run in parallel. These websocket tests attempt to fill out the socket buffers to reach the point where writing is paused because the buffers are full, and then test several conditions when this point is reached. The changes to the runtime was to make it possible to configure both the send buffer and receive buffer of the HttpClient SocketChannel - which the tests could then use (by passing the appropriate system property on the @run command line) in order to reduce the size of the buffers - and avoid sockets in TIMED_WAIT holding on big system buffers.
This was only partly successful. We ended up having to put the websocket tests in exclusive-dir mode so that jtreg would run only one of them at a given time.;;;","2021-10-08 03:03;goetz;Yes, I understand. So omitting the runtime part does not cause errors, but then the test changes are pointless without it.

But why was this change backported to 11.0.14-oracle?  First, it requires JDK-8265367 which was not backported. Second, JDK-8269772 would have been completely sufficient.

;;;","2021-10-08 03:23;dfuchs;I believe the changes from JDK-8265367 were subsumed into our backport of JDK-8268714;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR diagnostic commands lack argument descriptors when viewed using Platform MBean Server,JDK-8268702,5051780,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,mgronlun,mgronlun,2021-06-14 07:47,2022-03-22 08:23,2023-10-01 09:57,2021-06-21 04:17,17,18,,,,,,17,hotspot,,0,,,,,,,,,,,,,,,,,,"After JDK-8265271, when inspecting via the Platform MBean Server, the descriptors for the JFR diagnostic commands are missing.",,,,,,,,,,,JDK-8270605,JDK-8269103,,,,,,,,,,,,,,,,,,,,JDK-8270491,JDK-8265271,,,,JDK-8283520,,,,,,"2021-06-14 07:48;mgronlun;fix.jpg;https://bugs.openjdk.org/secure/attachment/95128/fix.jpg","2021-06-14 07:48;mgronlun;problem.jpg;https://bugs.openjdk.org/secure/attachment/95127/problem.jpg",,,,,,,,,,,,,,,,,,,"0|i2t7ij:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2021-06-21 04:17;roboduke;Changeset: f8df953e
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2021-06-21 11:16:41 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/f8df953e61372b396f351403ff6ba165720881bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LetsEncryptCA.java test fails as Let’s Encrypt Authority X3 is retired,JDK-8268678,5051753,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rhalade,tvoniadka,tvoniadka,2021-06-14 06:17,2021-07-15 10:06,2023-10-01 09:57,2021-06-17 17:50,11,18,8,,,,,18,security-libs,,0,cac-issue,hgupdate-sync,jdk11u-critical-request,jdk11u-critical-yes,jdk11u-fix-request,jdk11u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,"The test ""test/jdk/security/infra/java/security/cert/CertPathValidator/certification/LetsEncryptCA.java"" fails with the following exception:

==================================

certpath: OCSP response validity interval is from Tue Jun 09 22:00:00 UTC 2020 until Wed Jun 09 00:00:00 UTC 2021
certpath: Checking validity of OCSP response on Mon Jun 14 12:58:58 UTC 2021 with allowed interval between Mon Jun 14 12:43:58 UTC 2021 and Mon Jun 14 13:13:58 UTC 2021
certpath: X509CertSelector.match(SN: 9b7e0649a33e62b9d5ee90487129ef57
  Issuer: CN=VeriSign Class 3 Public Primary Certification Authority - G3, OU=""(c) 1999 VeriSign, Inc. - For authorized use only"", OU=VeriSign Trust Network, O=""VeriSign, Inc."", C=US
  Subject: CN=VeriSign Class 3 Public Primary Certification Authority - G3, OU=""(c) 1999 VeriSign, Inc. - For authorized use only"", OU=VeriSign Trust Network, O=""VeriSign, Inc."", C=US)
certpath: X509CertSelector.match: subject DNs don't match
certpath: X509CertSelector.match(SN: 10020
  Issuer: CN=Certum CA, O=Unizeto Sp. z o.o., C=PL
  Subject: CN=Certum CA, O=Unizeto Sp. z o.o., C=PL)
certpath: X509CertSelector.match: subject DNs don't match
java.lang.RuntimeException: TEST FAILED: couldn't determine EE certificate status
	at ValidatePathWithParams.validate(ValidatePathWithParams.java:177)
	at LetsEncryptCA.main(LetsEncryptCA.java:172)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.security.cert.CertPathValidatorException: Response is unreliable: its validity interval is out-of-date
	at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:135)
	at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:224)
	at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:144)
	at java.base/sun.security.provider.certpath.PKIXCertPathValidator.engineValidate(PKIXCertPathValidator.java:83)
	at java.base/java.security.cert.CertPathValidator.validate(CertPathValidator.java:309)
	at ValidatePathWithParams.doCertPathValidate(ValidatePathWithParams.java:288)
	at ValidatePathWithParams.validate(ValidatePathWithParams.java:142)
	... 7 more
Caused by: java.security.cert.CertPathValidatorException: Response is unreliable: its validity interval is out-of-date
	at java.base/sun.security.provider.certpath.OCSPResponse.verify(OCSPResponse.java:617)
	at java.base/sun.security.provider.certpath.OCSP.check(OCSP.java:199)
	at java.base/sun.security.provider.certpath.RevocationChecker.checkOCSP(RevocationChecker.java:785)
	at java.base/sun.security.provider.certpath.RevocationChecker.check(RevocationChecker.java:369)
	at java.base/sun.security.provider.certpath.RevocationChecker.check(RevocationChecker.java:343)
	at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:125)
	... 13 more

JavaTest Message: Test threw exception: java.lang.RuntimeException: TEST FAILED: couldn't determine EE certificate status
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: TEST FAILED: couldn't determine EE certificate status

==================================

",,,,,,,,,,,JDK-8269174,JDK-8269291,JDK-8270582,JDK-8269000,JDK-8269002,JDK-8269173,,,,,,,,,,,,,JDK-8269267,,,JDK-8270280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t7cj:",9223372036854775807,b03,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2021-06-16 23:36;mbaesken;Hi  Rajan,  the mentioned test fails for a couple of days in our  jdk18  test infrastructure.  Can we set it on the exclude list for now ? Or do you plan to have a fix in the next couple of days ?;;;","2021-06-17 08:14;rhalade;Let me try to fix it today otherwise I will add to problemList.;;;","2021-06-17 15:19;rhalade;OCSP response is out of date - 

certpath: RevocationChecker.check: checking cert
  SN:     d3b17226 342332dc f4052851 2aec9c6a
  Subject: CN=Let's Encrypt Authority X3, O=Let's Encrypt, C=US
  Issuer: CN=ISRG Root X1, O=Internet Security Research Group, C=US
certpath: connecting to OCSP service at: http://ocsp.root-x1.letsencrypt.org/
certpath: OCSP response status: SUCCESSFUL
certpath: OCSP response type: basic
certpath: Responder ID: byName: CN=ISRG Root OCSP X1, O=Internet Security Research Group, C=US
certpath: OCSP response produced at: Tue Jun 09 15:20:00 PDT 2020
certpath: OCSP number of SingleResponses: 1
certpath: thisUpdate: Tue Jun 09 15:00:00 PDT 2020
certpath: nextUpdate: Tue Jun 08 17:00:00 PDT 2021

""Let’s Encrypt Authority X3"" intermediate is retired.;;;","2021-06-17 16:06;rhalade;New test artifacts are available but revoked expires on July 7th, 2021 and valid on August 31st, 2021. We need to do another round of update to test when CA publishes new test certificates.;;;","2021-06-17 17:50;roboduke;Changeset: 58e6e6d9
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2021-06-18 00:49:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/58e6e6d919cb15559a61a67805da263be3c9d693
;;;","2021-06-18 16:06;roboduke;Changeset: 483f1ee2
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2021-06-18 00:59:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/483f1ee211bc0e37b486eb9d38d283ff02f0bdcc
;;;","2021-06-22 14:29;clanger;Fix request (11u)
Requesting this clean backport to get rid of the test failure in 11u. I see 11.0.13-oracle as well. Since the issue is time based, it affects 11.0.12 as well. It's a test fix only, so I request it to be included in 11.0.12.;;;","2021-06-30 01:52;roboduke;Changeset: bb5b2cb9
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2021-06-18 00:49:40 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/bb5b2cb9d3a1cfcd040d295ab6f6b54eaf88483f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(!ik->is_interface() && !ik->has_subklass()) failed: inconsistent klass hierarchy,JDK-8268676,5051751,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,vlivanov,dholmes,dholmes,2021-06-14 06:05,2021-12-09 12:27,2023-10-01 09:57,2021-06-17 14:18,17,18,,,,,,17,hotspot,,0,hs-comp-triaged,oracle-triage-11,oracle-triage-18,tier2,,,,,,,,,,,,,,"Test: applications/ctw/modules/jdk_jdi.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13258/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b3c7cce6-0a16-4df3-b2c3-8ad758c8e7da/runs/31f02daf-e073-40dd-94a3-3980598c9dd4/workspace/open/src/hotspot/share/opto/arraycopynode.cpp:199), pid=1692035, tid=1692052
#  assert(!ik->is_interface() && !ik->has_subklass()) failed: inconsistent klass hierarchy
#
# JRE version: Java(TM) SE Runtime Environment (18.0+2) (fastdebug build 18-ea+2-16)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18-ea+2-16, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x5eb8fc]  ArrayCopyNode::try_clone_instance(PhaseGVN*, bool, int)+0xcac
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13237/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/825f5b1a-809d-4c6f-a0e2-5c6ba44ebbb4/runs/f3c58233-329a-462a-b148-e87cd3893830/testoutput/test-support/jtreg_open_test_hotspot_jtreg_ctw_1/scratch/2/core.1692035)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxRAMPercentage=6.25 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/35546316-ed70-4084-8244-d672e7734fd1-S13237/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/825f5b1a-809d-4c6f-a0e2-5c6ba44ebbb4/runs/f3c58233-329a-462a-b148-e87cd3893830/testoutput/test-support/jtreg_open_test_hotspot_jtreg_ctw_1/tmp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:-TieredCompilation -Djava.awt.headless=true -Xbatch -XX:-UseCounterDecay -XX:-ShowMessageBoxOnError -XX:+UnlockDiagnosticVMOptions -XX:+DisplayVMOutputToStderr -DCompileTheWorldStartAt=0 -DCompileTheWorldStopAt=542 -XX:+WhiteBoxAPI -Xbootclasspath/a:. --add-exports=java.base/jdk.internal.jimage=ALL-UNNAMED --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED --add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED --add-exports=java.base/jdk.internal.access=ALL-UNNAMED -XX:+LogCompilation -XX:LogFile=hotspot_modules_jdk_jdi_0_%p.log -XX:ErrorFile=hs_err_modules_jdk_jdi_0_%p.log -XX:ReplayDataFile=replay_modules_jdk_jdi_0_%p.log -XX:CompileCommand=exclude,java/lang/invoke/MethodHandle.* -XX:+IgnoreUnrecognizedVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:+StressCCP -XX:StressSeed=5894536079750725134 sun.hotspot.tools.ctw.CompileTheWorld modules:jdk.jdi

Host: AArch64, 8 cores, 46G, Oracle Linux Server release 8.3
Time: Mon Jun 14 12:47:25 2021 UTC elapsed time: 12.943449 seconds (0d 0h 0m 12s)

---------------  T H R E A D  ---------------

Current thread (0x0000fffbc43f7d40):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=1692052, stack(0x0000fffbb0000000,0x0000fffbb0200000)]


Current CompileTask:
C2:  12943 1820   !b        com.sun.tools.jdi.ConnectorImpl$ArgumentImpl::clone (14 bytes)

Stack: [0x0000fffbb0000000,0x0000fffbb0200000],  sp=0x0000fffbb01fba60,  free space=2030k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x5eb8fc]  ArrayCopyNode::try_clone_instance(PhaseGVN*, bool, int)+0xcac
V  [libjvm.so+0x5ec0ec]  ArrayCopyNode::Ideal(PhaseGVN*, bool)+0x4f8
V  [libjvm.so+0x14a8884]  PhaseGVN::transform_no_reclaim(Node*)+0x70
V  [libjvm.so+0x61a774]  BarrierSetC2::clone(GraphKit*, Node*, Node*, Node*, bool) const+0x314
V  [libjvm.so+0x7e79b0]  CardTableBarrierSetC2::clone(GraphKit*, Node*, Node*, Node*, bool) const+0x2c
V  [libjvm.so+0x118363c]  LibraryCallKit::copy_to_clone(Node*, Node*, Node*, bool)+0x18c
V  [libjvm.so+0x119a510]  LibraryCallKit::inline_native_clone(bool)+0x7bc
V  [libjvm.so+0x119e36c]  LibraryIntrinsic::generate(JVMState*)+0x338
V  [libjvm.so+0xae5468]  Parse::do_call()+0x344
V  [libjvm.so+0x147bc60]  Parse::do_one_bytecode()+0x34c
V  [libjvm.so+0x146a6d4]  Parse::do_one_block()+0x824
V  [libjvm.so+0x146b688]  Parse::do_all_blocks()+0x148
V  [libjvm.so+0x146f774]  Parse::Parse(JVMState*, ciMethod*, float)+0xa74
V  [libjvm.so+0x7b9ae0]  ParseGenerator::generate(JVMState*)+0x110
V  [libjvm.so+0x985658]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0xdc4
V  [libjvm.so+0x7b701c]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x178
V  [libjvm.so+0x99553c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb0c
V  [libjvm.so+0x996144]  CompileBroker::compiler_thread_loop()+0x324
V  [libjvm.so+0x16ff7ec]  JavaThread::thread_main_inner()+0x28c
V  [libjvm.so+0x1709a28]  Thread::call_run()+0xf8
V  [libjvm.so+0x1426064]  thread_native_entry(Thread*)+0x104
C  [libpthread.so.0+0x7738]  start_thread+0x198
",,,,,,,,,,,JDK-8270579,JDK-8268998,,,,,,,,,,,,,,,,,,,,JDK-8261192,,,,,JDK-8267947,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t7c3:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2021-06-14 15:43;dlong;[~vlivanov] Could you take a look at this one?;;;","2021-06-14 15:46;dlong;ILW = assert, aarch64 debug build only, one test only, no workaround = HLH = P2;;;","2021-06-14 15:47;dlong;[~vaivanov] If this affects 18 then it is likely to affect 17 as well.  Do you agree?;;;","2021-06-15 11:54;vlivanov;[~dlong] yes, I don't think 17 & 18 diverged that much, so most likely 17 is also affected.
;;;","2021-06-15 12:18;vlivanov;My working theory: the failure is caused by concurrent class loading.

JDK-8267947 disabled the caching for ""has_subklass() == false"" and it became more likely to observe the change  when concurrent class loading happens.

It makes the bug assertion-only problem. The compilation will fail during dependency validation since the class is not a leaf type anymore.;;;","2021-06-17 14:18;roboduke;Changeset: 85452692
Author:    Vladimir Ivanov <vlivanov@openjdk.org>
Date:      2021-06-17 21:17:48 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/8545269268ff34a5c6b8a8cc6aff69fff2a7b507
;;;","2021-12-09 12:27;drwhite;cleaning up :-);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stack walk across optimized entry frame on fresh native thread fails,JDK-8268673,5051748,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvernee,jvernee,jvernee,2021-06-14 04:45,2021-06-16 05:08,2023-10-01 09:57,2021-06-14 08:06,repo-panama,,,,,,,,tools,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,,,"When native code creates a new thread and calls a Panama upcall, and during that upcall a stack walk is triggered, getting the sender frame for the entry frame is not possible, and should not be attempted.

For JNI this case is handled already, but for Panama upcalls it is not, and the VM will either hit an assert or crash.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268717,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t7bf:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2251e2f8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(!loop->is_member(u_loop)) failed: can be in outer loop or out of both loops only,JDK-8268672,5051747,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,chagedorn,chagedorn,2021-06-14 04:17,2021-09-15 01:41,2023-10-01 09:57,2021-06-21 07:18,11,17,,,,,,17,hotspot,,0,c2,hs-comp-triaged,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-11,oracle-triage-18,,,,,,,,,,,"The attached fuzzer test starts to fail after JDK-8263303 withi the following assertion:

To reproduce:
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Test Test.java
$ java -Xcomp -XX:-TieredCompilation -XX:CompileOnly=Reduced Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/3c846bae-ce30-4a97-93ee-9fef4497ccb6-S79067/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/be546687-12db-4ded-a96b-86062b189919/runs/56ca4e2d-638a-4f38-8b25-3d968f5f0d09/workspace/open/src/hotspot/share/opto/loopopts.cpp:1982), pid=27153, tid=27166
#  assert(!loop->is_member(u_loop)) failed: can be in outer loop or out of both loops only
#
# JRE version: Java(TM) SE Runtime Environment (17.0+26) (fastdebug build 17-ea+26-LTS-2439)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 17-ea+26-LTS-2439, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x130772c]  clone_outer_loop_helper(Node*, IdealLoopTree const*, IdealLoopTree const*, Node_List const&, Unique_Node_List&, PhaseIdealLoop*, bool) [clone .constprop.0]+0x28c
............
Command Line: -Xmx1G -Xcomp -Xbatch -XX:-TieredCompilation -XX:CompileOnly=Test -XX:CompileCommand=quiet Test
............
Current thread (0x00007f817847fc30):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=27166, stack(0x00007f814bbfc000,0x00007f814bcfd000)]


Current CompileTask:
C2:   2977   10 %  b        Test::mainTest @ 167 (714 bytes)

Stack: [0x00007f814bbfc000,0x00007f814bcfd000],  sp=0x00007f814bcf6cb0,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x130772c]  clone_outer_loop_helper(Node*, IdealLoopTree const*, IdealLoopTree const*, Node_List const&, Unique_Node_List&, PhaseIdealLoop*, bool) [clone .constprop.0]+0x28c
V  [libjvm.so+0x1308a3f]  PhaseIdealLoop::clone_outer_loop(LoopNode*, PhaseIdealLoop::CloneLoopMode, IdealLoopTree*, IdealLoopTree*, int, Node_List&, Node_List&) [clone .part.0]+0x73f
V  [libjvm.so+0x1314318]  PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&, int, PhaseIdealLoop::CloneLoopMode, Node*)+0x4d8
V  [libjvm.so+0x12d44f9]  PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&)+0xe9
V  [libjvm.so+0x12d5350]  PhaseIdealLoop::insert_vector_post_loop(IdealLoopTree*, Node_List&)+0x180
V  [libjvm.so+0x12d77cf]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&) [clone .part.0]+0x8af
V  [libjvm.so+0x12d799b]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x13b
V  [libjvm.so+0x12d7895]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x35
V  [libjvm.so+0x1303e65]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0xd55
V  [libjvm.so+0xa29c2a]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x2da
V  [libjvm.so+0xa265d2]  Compile::Optimize()+0x14e2
V  [libjvm.so+0xa280c5]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x1585
V  [libjvm.so+0x84959a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1ea
V  [libjvm.so+0xa38a89]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xfb9
V  [libjvm.so+0xa397f8]  CompileBroker::compiler_thread_loop()+0x5a8
V  [libjvm.so+0x18b2e91]  JavaThread::thread_main_inner()+0x271
V  [libjvm.so+0x18baa90]  Thread::call_run()+0x100
V  [libjvm.so+0x15872b4]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,JDK-8269106,JDK-8273796,JDK-8270608,JDK-8272751,,,,,,,,,,,,,,,,,,JDK-8263303,,,,,,,,,,,"2021-06-14 04:17;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/95123/FuzzerUtils.java","2021-06-14 04:17;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/95122/Reduced.java","2021-06-14 04:17;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/95125/Test.java","2021-06-14 04:17;chagedorn;hs_err_pid27153.log;https://bugs.openjdk.org/secure/attachment/95124/hs_err_pid27153.log",,,,,,,,,,b26,17,,,,,,"0|i2t7b7:",9223372036854775807,b28,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Not verified,,"2021-06-14 04:20;chagedorn;ILW = Assert during C2 compilation (recent regression in JDK 17 b26), with JavaFuzzer generated tests, no known workaround but disable C2 compilation of affected method = HMM = P2

[~roland] Can you take a look at it?;;;","2021-06-21 07:18;roboduke;Changeset: d3ad8cd3
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2021-06-21 14:16:54 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/d3ad8cd344681fe8442f821f97f05996bb972abe
;;;","2021-08-06 08:35;iignatyev;[~roland], FYI test/hotspot/jtreg/compiler/loopstripmining/TestPinnedNodeInInnerLoop.java didn't fail in my fix verification run w/ jdk-17+27;;;","2021-09-14 01:43;mdoerr;Fix Request (11u):
Should get backported for parity with 11.0.14-oracle. Follow-up fix for JDK-8263303. Applies cleanly.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] Wrong code generated for PrimitiveClass.ref.default,JDK-8268671,5051744,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-06-14 03:10,2021-06-15 00:43,2023-10-01 09:57,2021-06-15 00:43,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lworld,,,,,,,,,,,,,,,,,"The following program should print null, but instead ends up with a primitive class instance due to incorrect code generation.

public primitive class X {

    public static void main(String [] args) {
        Object o = X.ref.default;
        System.out.println(o);
    }
}


JEP401 states: ""Every type has a default value, used to populate newly-allocated fields and array components of that type. "" which affirms that 

X.ref.default should actually be null since that is the default value
of primitive reference types.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2t7aj:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash when guards contain boolean expression,JDK-8268663,5051737,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2021-06-14 01:25,2021-06-18 07:07,2023-10-01 09:57,2021-06-15 02:05,17,,,,,,,17,tools,,0,conformance,tck-red-17,,,,,,,,,,,,,,,,"Consider code like:
---
class Test {

    public void testMethod(Object o) {
        String r;

        switch (o) {
            case String s && s.length() > 0 && s.charAt(0) != ' ' -> r = s;
            default -> r = null;
        }
    }

}
---

This crashes javac:
---
$ javac --enable-preview -source 17 Test.java
Note: Test.java uses preview features of Java SE 17.
Note: Recompile with -Xlint:preview for details.
An exception has occurred in the compiler (17-internal). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
        at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
        at jdk.compiler/com.sun.tools.javac.util.Bits.isMember(Bits.java:231)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.checkInit(Flow.java:1896)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.checkInit(Flow.java:1890)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.visitIdent(Flow.java:2776)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIdent.accept(JCTree.java:2584)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:445)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scan(Flow.java:1682)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scanExpr(Flow.java:1939)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.visitAssign(Flow.java:2705)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCAssign.accept(JCTree.java:2041)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:445)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scan(Flow.java:1682)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitExec(TreeScanner.java:219)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1584)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:445)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scan(Flow.java:1682)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:57)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.handleSwitch(Flow.java:2409)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.visitSwitch(Flow.java:2374)
[snip]
---
",,,,,,,,,,,JDK-8268843,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t78z:",9223372036854775807,b27,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2021-06-15 02:05;roboduke;Changeset: 35d867df
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2021-06-15 09:04:35 +0000
URL:       https://git.openjdk.java.net/jdk17/commit/35d867df1f2064e867dcf1030c498bfa23568054
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lqagain] A few code chunks dealing with dual class scheme still left in ,JDK-8268656,5051730,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2021-06-13 22:57,2021-06-14 01:13,2023-10-01 09:57,2021-06-14 01:13,repo-valhalla,,,,,,,repo-valhalla,tools,,0,lw3,lworld,,,,,,,,,,,,,,,,"ClassReader, Lower and LambdaToMethod still have some vestigial code references to the dual class file scheme and need to be cleaned up. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,"0|i2t77f:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Delete obsolete build-all.sh and README-v5 files,CODETOOLS-7903010,5056290,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-08-09 14:40,2021-08-11 08:43,2023-10-01 09:57,2021-08-11 08:43,jtreg6.1,,,,,,,jtreg6.1,tools,,0,,,,,,,,,,,,,,,,,,"The old `make/build-all.sh` file and corresponding `README_v5` are obsolete and should be removed.

They have been superseded by `make/build.sh` and `README.md`. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tz2b:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Set streams when RegressionSecurityManager not used,CODETOOLS-7903009,5056196,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-08-06 18:55,2021-08-11 09:47,2023-10-01 09:57,2021-08-11 09:47,jtreg6.1,,,,,,,jtreg6.1,tools,,0,,,,,,,,,,,,,,,,,,"In ActionHelper, redirectOutput only works if the SM is RegressionSecurityManager.

If it is not, it should still set the streams.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902990,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tyhf:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2021-08-11 09:47;jjg;Commit: 
https://github.com/openjdk/jtreg/commit/e194fbffefcdb967772e052980bb0df654b9bf06
https://github.com/openjdk/jtreg/commit/2182a7fbb5d5680212384e690b0debec469cb660
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jtreg plugin does not work with intellij 2021.2,CODETOOLS-7903005,5055715,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2021-08-03 04:44,2022-06-24 06:59,2023-10-01 09:57,2021-08-04 09:38,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,The generated plugin XML file does not seem to support newer IDE versions.,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903006,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tviz:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH: StrictFP tests fail with JDK 17+ due to new warnings,CODETOOLS-7903002,5055490,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-07-30 01:21,2021-07-30 02:18,2023-10-01 09:57,2021-07-30 02:18,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"Fails like this:

@BenchmarkMode(Mode.All)
public strictfp class StrictFPClassTest {

    @Benchmark
    public void test() {
        // intentionally blank
    }

    @Test
    public void compileTest() {
        CompileTest.assertOK(this.getClass());
    }

}
WARNING at line 34: as of release 17, all floating-point expressions are evaluated strictly and 'strictfp' is not required
WARNING at line 34: as of release 17, all floating-point expressions are evaluated strictly and 'strictfp' is not required
WARNING at line 34: as of release 17, all floating-point expressions are evaluated strictly and 'strictfp' is not required
WARNING at line 34: as of release 17, all floating-point expressions are evaluated strictly and 'strictfp' is not required
ERROR at line -1: warnings found and -Werror specified
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tu57:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2021-07-30 02:18;shade;https://github.com/openjdk/jmh/commit/0d2a82094d91a782c5d2f2d594987be5c88e956f;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH: The interrupt to time-outing benchmark can be delivered to warmdown latches,CODETOOLS-7903001,5055484,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,shade,shade,shade,2021-07-30 00:01,2023-06-08 00:45,2023-10-01 09:57,2021-08-01 23:34,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"First sighted here:
  https://mail.openjdk.java.net/pipermail/jmh-dev/2021-July/003325.html

This whole thing is guaranteed to fail if a long-running @Benchmark does not check interrupt status at all. Then the first thing that would check it and throw IE would be the control.preTearDown in warmdown loop. 

Then it fails: the method runs for too long, so JMH starts to deliver interrupts, but method does not react and eventually exits on its own accord, at which point JMH infra catches IE and fails hard.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903490,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tu3v:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JMH: Fix error message for @Setup helpers on a class missing @State,CODETOOLS-7903000,5055475,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-07-29 22:16,2021-09-01 00:24,2023-10-01 09:57,2021-09-01 00:24,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,Submitted for PR: https://github.com/openjdk/jmh/pull/44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tu1v:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Command line error: Incorrect output JCov datafile - can't write,CODETOOLS-7902997,5054645,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P1,Fixed,lkuskov,shurailine,shurailine,2021-07-19 17:51,2021-07-20 11:34,2023-10-01 09:57,2021-07-20 11:33,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"JCov is not generating output file with ""can't write"" message.

/Users/shura/tmp/jcov_case$ ls -ld `pwd`
drwxr-xr-x  5 shura  staff  160 Jul 19 17:40 /Users/shura/tmp/jcov_case
/Users/shura/tmp/jcov_case$ whoami
shura
/Users/shura/tmp/jcov_case$ java -version
java version ""11.0.8"" 2020-07-14 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.8+10-LTS)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.8+10-LTS, mixed mode)
/Users/shura/tmp/jcov_case$ java -Xms64m -Xmx4g -cp jcov.jar:ArtifactoryCCMerge.jar com.sun.tdk.jcov.Filter -filter com.oracle.jdk.infra.JigsawPAPIFilter merged.xml public.xml
Command line error: Incorrect output JCov datafile (public.xml) - can't write

Use ""java -jar jcov.jar Filter -h"" for command-line help or ""java -jar jcov.jar Filter -hv"" for wider description
/Users/shura/tmp/jcov_case$ ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tp6r:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@33767a5b,,,,,,,,,"2021-07-19 17:53;shurailine;Setting the priority as P1 because multiple projects currently depend on this.;;;","2021-07-19 18:23;shurailine;If it helps, which it probably does not, the same call passes while executed from under an IDE. The difference seems to be the ""-javaagent"" option which is added to the command line by the IDE. With the ""-javaagent"" option, output file is generated successfully. Same command without the ""-javaagent"" option fails.;;;","2021-07-20 11:33;roboduke;Changeset: 9376b299
Author:    Leonid Kuskov <lkuskov@openjdk.org>
Date:      2021-07-20 18:33:14 +0000
URL:       https://git.openjdk.java.net/jcov/commit/9376b29956e1c660c9c3ab0969c6f2fb2a1110d3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update/Improve jcheck settings for jtreg repo,CODETOOLS-7902995,5054011,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-07-13 08:21,2021-07-13 14:40,2023-10-01 09:57,2021-07-13 14:40,jtreg6.1,,,,,,,jtreg6.1,tools,,0,,,,,,,,,,,,,,,,,,"Currently, the jtreg repo has minimal jcheck settings.

It would be good to bring it more in line with the settings for JDK.

Expected differences include:

[checks] error
[reviewers]
[problemlists
[repository] tags
[general] jbs",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tl9v:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
clean up `make sanity` target,CODETOOLS-7902994,5053949,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-07-12 13:54,2021-07-12 21:51,2023-10-01 09:57,2021-07-12 21:51,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"The jtreg makefiles have a `make sanity` target to display the names of important variables.

The list of JDK*HOME variables is inconsistent with the actual set that are used.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tkw3:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fix deprecation warnings generated when compiling with JDK 16.,CODETOOLS-7902991,5053632,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2021-07-07 20:28,2022-10-18 11:49,2023-10-01 09:57,2021-07-13 11:40,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"Although the default build platform is still JDK 8, it is reasonable to try and fix deprecation warnings generated by more recent versions of the platform.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tixn:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jtreg should not set a security manager for JDK 18,CODETOOLS-7902990,5053606,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2021-07-07 12:58,2021-08-17 15:02,2023-10-01 09:57,2021-08-17 15:02,,,,,,,,jtreg6.1,tools,,0,,,,,,,,,,,,,,,,,,"In 18, the security manager is deprecated and gives a warning if used.

jtreg should not set a security manager if the test JDK is JDK 18.",,,,,,,,,,,,,,,,,,,,,,,JDK-8270380,,,,,,,,,CODETOOLS-7903009,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tirv:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Git build should record the actual tag, not the latest one",CODETOOLS-7902987,5052814,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-06-28 01:23,2021-07-07 23:55,2023-10-01 09:57,2021-07-07 23:55,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"Try to build older jtreg5.1-b01 from the current workspace, like this:

$ git checkout jtreg5.1-b01
$ rm -rf build; sh make/build-all.sh ~/Install/jdk8u252-ea/
...

$ build/images/jtreg/bin/jtreg -version
jtreg, version jtreg6 dev jtreg6

$ cat build/images/jtreg/release 
JTREG_VERSION=jtreg6 jtreg6
BUILD_DATE=June 28, 2021

Note it reports jtreg6! This would then fail when JDK tries to poll the JTReg version for internal checks.

This happens because the build polls last Git tag, regardless of whether the current HEAD is at previous changeset. I think we are better off using ""git describe"".

diff --git a/make/build-all.sh b/make/build-all.sh
index 150e58d..46c4ace 100644
--- a/make/build-all.sh
+++ b/make/build-all.sh
@@ -84,7 +84,7 @@ get_root() {
 get_tag_info() {
    case $SCM_TYPE in
        HG)  hg tags | grep jtreg | head -1 ;;
-       GIT) git tag | grep jtreg | tail -1 ;;
+       GIT) git describe ;;
        *) echo ""Error: unknown SCM"" >&2 ; exit 1 ;;
    esac
 }

After this:

$ cat build/images/jtreg/release 
JTREG_VERSION=5.1 b01
BUILD_DATE=June 28, 2021

$ build/images/jtreg/bin/jtreg -version
jtreg, version 5.1 dev b01

While this patch would not help building the older JTRegs without rewriting the repository history, it would be good to get in fixed for future JTRegs. This patch can be used separately to build older JTRegs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tdvv:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Sigtest should better handle permitted classes,CODETOOLS-7902986,5052746,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,vrudomet,vrudomet,vrudomet,2021-06-25 16:31,2021-08-26 17:28,2023-10-01 09:57,2021-08-26 17:28,,,,,,,,st4.0,tools,,0,,,,,,,,,,,,,,,,,,During runtime Sigtest fails to load permitted classes information for sealed classes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tdgr:",9223372036854775807,master,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@757b9e1e,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: Scheduler fails on irregular architectures,CODETOOLS-7902980,5052306,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-06-21 05:23,2021-06-21 10:56,2023-10-01 09:57,2021-06-21 10:56,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"Example log:

Detecting CPU topology and computing scheduling classes:
  Linux, using /sys/devices/system/cpu
  2 packages, 1 core per package, 1 thread per core

  CPU lists:
    Package #0, Core #0, Threads: 0
    Package #1, Core #1, Threads: 1, 2, 3, 4, 5, 6, 7

  Scheduling classes for matching tests:
    2 actors:
      (PG 0, CG 0), (PG 1, CG 1)

  Hardware CPUs in use: 8, using plain hard busywait.
  Test preset mode: ""default""
  Writing the test results to ""jcstress-results-2021-06-19-00-31-24.bin.gz""
  Parsing results to ""results/""
  Running each test matching "".*"" for 1 forks, 5 iterations, 1000 ms each
  Solo stride size will be autobalanced within [10, 10000] elements, but taking no more than 128 Mb.

  Attached the non-interactive output stream.
  Printing the progress line at most every 15000 milliseconds.

Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: 2
	at org.openjdk.jcstress.os.Scheduler.scheduleLocal(Scheduler.java:170)
	at org.openjdk.jcstress.os.Scheduler.tryAcquire(Scheduler.java:75)
	at org.openjdk.jcstress.TestExecutor.runAll(TestExecutor.java:151)
	at org.openjdk.jcstress.JCStress.run(JCStress.java:97)
	at org.openjdk.jcstress.Main.main(Main.java:60)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2tarf:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-06-21 10:56;shade;https://github.com/openjdk/jcstress/commit/b3ccefc0080039c3402a1380bc3820110bff759e;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: JDK 17 cannot cleanly compile due to SecurityManager deprecation,CODETOOLS-7902975,5051736,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-06-14 00:46,2021-06-14 01:08,2023-10-01 09:57,2021-06-14 01:08,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"[INFO] -------------------------------------------------------------
[WARNING] COMPILATION WARNING : 
[INFO] -------------------------------------------------------------
[WARNING] /home/shade/trunks/shipilev-jcstress/jcstress-core/src/main/java/org/openjdk/jcstress/util/UnsafeHolder.java:[52,37] java.security.AccessController in java.security has been deprecated and marked for removal
[INFO] 1 warning
[INFO] -------------------------------------------------------------
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /home/shade/trunks/shipilev-jcstress/jcstress-core/src/main/java/org/openjdk/jcstress/util/UnsafeHolder.java: warnings found and -Werror specified
[INFO] 1 error
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t78r:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-06-14 01:08;shade;https://github.com/openjdk/jcstress/commit/325535abf1afff8daf917b64b00b348bff771bd7;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jcstress: Footprint estimator should balance both stride count and stride size,CODETOOLS-7902974,5051733,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-06-13 23:47,2021-06-14 01:49,2023-10-01 09:57,2021-06-14 01:49,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"Current ""arrays.large"" are failing with OOM because estimator only balances the stride count, while leaving stride size at 256. This is a recent regression.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7902964,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t783:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-06-14 01:49;shade;https://github.com/openjdk/jcstress/commit/9d2f8a41e917e0efa0398351aa3c5d740cc76edb;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jcstress: Compiler directives should include binary, not qualified class names",CODETOOLS-7902973,5051719,Bug,Closed,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2021-06-13 11:12,2021-06-13 11:50,2023-10-01 09:57,2021-06-13 11:50,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,"This seems to cause issues for nested classes. Annotation processor normally answers the ""qualified name"", which concatenates the nested class name with ""."". Compiler directives expect nested class names to be concatenated with ""$"", that is, expect the binary class name.

Currently, requested-to-run-in-interpreter nested class methods would mismatch and be compiled.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2t74z:",9223372036854775807,,,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2021-06-13 11:50;shade;https://github.com/openjdk/jcstress/commit/ea6a0faacd43b59d01e382c7debf036978e777f9;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
