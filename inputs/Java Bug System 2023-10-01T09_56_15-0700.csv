Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Inward issue link (Blocks),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Update to Gradle 7.4.2,SKARA-1470,5076496,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,ehelin,ehelin,ehelin,2022-06-08 06:15,2022-06-14 05:35,2023-10-01 09:56,2022-06-14 05:35,,,,,,,,,,,,1.0,cli,,0,,,,,,,,,,,,,,,,,,,,,Update to Gradle 7.4.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xe3f:",9223372036854775807,,,,,,,,,,,,"2022-06-13 09:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1336
Date: 2022-06-13 16:35:39 +0000;;;","2022-06-14 05:35;roboduke;Changeset: 2a6f536b
Author:    Erik Helin <ehelin@openjdk.org>
Date:      2022-06-14 12:34:58 +0000
URL:       https://git.openjdk.org/skara/commit/2a6f536bab7f5ae3c7c17d72c7b7c9c93d913ce1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara does not build on macOS arm64,SKARA-1469,5076495,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,ehelin,ehelin,ehelin,2022-06-08 06:11,2022-06-13 09:32,2023-10-01 09:56,2022-06-13 09:32,,,,,,,,,,,,1.0,cli,,0,,,,,,,,,,,,,,,,,,,,,The Skara does project does not build out-of-the-box on macOS arm64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xe37:",9223372036854775807,,,,,,,,,,,,"2022-06-08 10:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1333
Date: 2022-06-08 17:29:31 +0000;;;","2022-06-13 09:32;roboduke;Changeset: a705ccdc
Author:    Erik Helin <ehelin@openjdk.org>
Date:      2022-06-13 16:31:51 +0000
URL:       https://git.openjdk.org/skara/commit/a705ccdc24035c1b8e4f665f6d3fe85e3c69544c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update JBS URL in Skara src,SKARA-1467,5076325,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2022-06-07 02:12,2022-06-07 09:10,2023-10-01 09:56,2022-06-07 09:10,,,,,,,,,,,,1.0,cli,,0,,,,,,,,,,,,,,,,,,,,,The JBS URL appears in multiple places throughout the Skara source code. We need to update all those references to the new bugs.openjdk.org URL.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xd1f:",9223372036854775807,,,,,,,,,,,,"2022-06-07 06:18;erikj;While doing this, I should also handle the git.openjdk.java.net -> git.openjdk.org change.;;;","2022-06-07 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1332
Date: 2022-06-07 14:30:50 +0000;;;","2022-06-07 09:10;roboduke;Changeset: f10879db
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-06-07 16:09:26 +0000
URL:       https://git.openjdk.java.net/skara/commit/f10879db0401558e9136564a54d21a663e7f2f19
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Empty backport causes endless retries of command,SKARA-1466,5076238,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-06-03 15:38,2022-06-07 11:34,2023-10-01 09:56,2022-06-07 06:08,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"If a user tries to /backport a commit that results in an empty change, the BackportCommand fails to realize this and just errors out. It will then endlessly retry the command. After a while, the failure mode will change as the repo in the scratch area already contains a branch with the backportBranchName, so the error message will be about the branch already existing.

The BackportCommand needs to detect an empty change and report it to the user.

This happened with this commit:
https://github.com/openjdk/jdk11u-dev/commit/bf3438c5dc993b96d089cabb5318bfc64a6904a3

This is the stacktrace from the first failure:

java.io.UncheckedIOException: java.io.IOException: Unexpected exit code
'git commit --message=Backport bf3438c5dc993b96d089cabb5318bfc64a6904a3' exited with status: 1
[stdout]
> On branch gnu-andrew-backport-bf3438c5
> nothing to commit, working tree clean
[stderr]
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.BackportCommand.handle(BackportCommand.java:237)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.processCommand(CommitCommandWorkItem.java:133)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CommitCommandWorkItem.run(CommitCommandWorkItem.java:173)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.runMeasured(BotRunner.java:190)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:146)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.io.IOException: Unexpected exit code
'git commit --message=Backport bf3438c5dc993b96d089cabb5318bfc64a6904a3' exited with status: 1
[stdout]
> On branch gnu-andrew-backport-bf3438c5
> nothing to commit, working tree clean
[stderr]
	at org.openjdk.skara.vcs/org.openjdk.skara.vcs.git.GitRepository.await(GitRepository.java:116)
	at org.openjdk.skara.vcs/org.openjdk.skara.vcs.git.GitRepository.commit(GitRepository.java:792)
	at org.openjdk.skara.vcs/org.openjdk.skara.vcs.git.GitRepository.commit(GitRepository.java:756)
	at org.openjdk.skara.vcs/org.openjdk.skara.vcs.git.GitRepository.commit(GitRepository.java:751)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.BackportCommand.handle(BackportCommand.java:161)
	... 10 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xcir:",9223372036854775807,,,,,,,,,,,,"2022-06-03 16:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1329
Date: 2022-06-03 23:21:59 +0000;;;","2022-06-07 06:07;roboduke;Changeset: cc87e695
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-06-07 13:06:41 +0000
URL:       https://git.openjdk.java.net/skara/commit/cc87e695e424f505582189c102d4fef4478cd061
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using altfixversions prevents commit comments,SKARA-1465,5076226,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-06-03 11:22,2022-06-07 06:07,2023-10-01 09:56,2022-06-07 06:07,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,The altfixversions feature introduced in SKARA-1213 has the unfortunate side effect of also blocking additional commit comments from being added to existing backports. I think this needs to be fixed as those additional commit comments help integrators track where and when changes move between different repos.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1213,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xcg3:",9223372036854775807,,,,,,,,,,,,"2022-06-06 02:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1330
Date: 2022-06-06 09:56:30 +0000;;;","2022-06-07 06:07;roboduke;Changeset: 58e51ca6
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-06-07 13:06:18 +0000
URL:       https://git.openjdk.java.net/skara/commit/58e51ca6fe6a3143096f9d62f7287ba65d1ee998
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user tobiasholenstein,SKARA-1459,5076069,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,tholenstein,tholenstein,2022-06-02 01:04,2022-06-02 05:41,2023-10-01 09:56,2022-06-02 05:41,,,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,I recently became Committer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xbh7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user eme64,SKARA-1458,5076017,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,epeter,epeter,2022-06-01 07:44,2022-06-01 09:42,2023-10-01 09:56,2022-06-01 09:42,,,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,"I recently became Committer ;)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xb5n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user TejeshR13,SKARA-1457,5075970,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,tr,tr,2022-05-31 23:22,2022-06-01 05:48,2023-10-01 09:56,2022-06-01 05:48,,,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,Associate the github account with openJDK username.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xav7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
hgupdate-sync labeling ignores suffix on 8u releases,SKARA-1456,5075805,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-05-27 13:57,2022-05-31 13:09,2023-10-01 09:56,2022-05-31 13:09,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"If a fix is backported to 8u333-foo, the backport in 8u341 gets labeled. This is wrong as the suffix is meant to signify a separate release train.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x9uj:",9223372036854775807,,,,,,,,,,,,"2022-05-27 14:39;erikj;Looking closer at this, we only ever treat opt string ""-oracle"" as a special release stream, and that only happens for jdk 9+. I believe we should have a general treatment for opt strings, where any such string defines its own stream, orthogonal to any other parts of the version string.;;;","2022-05-27 14:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1324
Date: 2022-05-27 21:47:00 +0000;;;","2022-05-31 13:09;roboduke;Changeset: 81bf44d0
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-31 20:09:09 +0000
URL:       https://git.openjdk.java.net/skara/commit/81bf44d031a3c465c639d97cfd2ece1c9bbf6b21
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Github closed action may not contain an actor,SKARA-1455,5075768,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2022-05-27 09:55,2022-05-27 10:56,2023-10-01 09:56,2022-05-27 10:56,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"The mlbridge bot can end up in an endless retry loop when trying to construct a closed notice for a PR, if it was closed without a user associated with it in Github. In ArchiveItem.java we have this line:

var closedBy = pr.closedBy().orElseThrow(() -> new RuntimeException(""PR is not closed by anyone: "" + pr.id()));

This PR was recently closed in such a way:

https://github.com/openjdk/aarch32-port-jdk8u/pull/1

This causes the bot to fail with exception and then retry endlessly.

I'm not sure in what situation the closed action ends up without an actor in Github, but since it can happen, we need to handle it. That logic was introduced in this PR https://github.com/openjdk/skara/pull/983. Prior to that, we just used the pr author for this value. I think that will serve as a reasonable fallback.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x9mb:",9223372036854775807,,,,,,,,,,,,"2022-05-27 10:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1323
Date: 2022-05-27 17:18:46 +0000;;;","2022-05-27 10:56;roboduke;Changeset: 40314e56
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-27 17:55:47 +0000
URL:       https://git.openjdk.java.net/skara/commit/40314e5614d7ab88438deaeb986b7b3df3bbd20a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JEPBot does not remove the `jep` label automatically when the JEP issue has been targeted,SKARA-1454,5075735,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,gli,gli,2022-05-27 01:12,2022-05-27 11:16,2023-10-01 09:56,2022-05-27 11:16,,,,,,,,,,,,,bots,,0,,,,,,,,,,,,,,,,,,,,,"The PR of the JEP-424 [1] has the `JEP` progress by using the command `/jep JEP-424`. But when the JEP issue has been targeted, the JEPBot doesn't remove the `jep` label automatically so that the PR bot doesn't select the checkbox of the `JEP` progress and the integration of the PR is blocked.

I confirm the bug is in the JEPBot instead of PRBot. I re-read the code of the JEPBot but can't find the cause.

Maybe it needs @erik or other people in oracle to read the log(if it exists) and configuration to get more information to solve this issue.

Some comments about this issue are posted in skara-dev list.[2]

[1] https://github.com/openjdk/jdk/pull/7888
[2] https://mail.openjdk.java.net/pipermail/skara-dev/2022-May/006058.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x9ez:",9223372036854775807,,,,,,,,,,,,"2022-05-27 06:44;erikj;I've found the reason this isn't working. The new JEPBot was never started. When adding a new bot, we need to make a change to an Oracle internal Gradle build script, otherwise the new module will not actually be included in the jlink image we deploy. It would be nice if this Gradle script could be fixed so that the module list was based on data from the open Skara gradle build, but that's unfortunately not how it works today.

While looking into this, I also noted that JEPBot is missing a toString() method. This makes searching for it in logs much harder as it won't identify itself in the standard way.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can never notify on first commit,SKARA-1452,5075686,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,erikj,erikj,2022-05-26 11:49,2022-10-08 03:30,2023-10-01 09:56,2022-10-08 03:30,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"When setting up a completely fresh repo for Skara, it's not possible to get issue or mail notifications on the very first commit (which is usually adding .jcheck/conf). 

The first commit is what's creating the first branch, so NotifyBot finds a new branch. The only commit on that branch does not have any parents, which causes the bot to bail out and not notify about the new branch. Even editing the notify history file isn't possible, as there is no valid value to put there that will cause the bot to find the single commit and notify for it. The logic always assumes there is a parent.

The complicating factor here is that we often configure Skara bots for existing repositories with an existing (potentially long) history. When doing that we do not want the bot to notify on every existing commit. The current behavior is actually tailored for this case, where we would rather want the bot to start notifying on any new commits only. Maybe we could check if the repository has exactly one (or maybe a few?) commits and in that case, start notification from the beginning, but otherwise keep the current behavior.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1237,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x943:",9223372036854775807,,,,,,,,,,,,"2022-06-03 15:53;erikj;Perhaps this could be worked around using the magic initial git hash for empty repos: 4b825dc642cb6eb9a060e54bf8d69288fbee4904;;;","2022-09-29 11:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1385
Date: 2022-09-29 18:37:09 +0000;;;","2022-10-08 03:30;roboduke;Changeset: a9997ca4
Author:    Zhao Song <zsong@openjdk.org>
Committer: Guoxiong Li <gli@openjdk.org>
Date:      2022-10-08 10:30:19 +0000
URL:       https://git.openjdk.org/skara/commit/a9997ca4daff538c46f4d25f0c7048191b0b5e1d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jcheck status message can be too big for Gitlab,SKARA-1450,5075666,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,erikj,erikj,2022-05-26 05:51,2022-11-02 13:00,2023-10-01 09:56,2022-11-02 13:00,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"If a Gitlab MR contains a lot of whitespace problems, the generated status message can get too big for a Gitlab comment. We have just seen this happen with this message:

{""message"":""400 Bad request - Failed to save note {:note=\u003e[\""is too long (maximum is 1000000 characters)\""]}""}

The MR in question contained Windows line endings in every touched file, which can easily become a very big chunk of text.

We need to make sure we limit the size of this message before trying to post it to Gitlab.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x8zn:",9223372036854775807,,,,,,,,,,,,"2022-10-26 16:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1403
Date: 2022-10-26 23:03:56 +0000;;;","2022-11-02 13:00;roboduke;Changeset: 804b7e95
Author:    Zhao Song <zsong@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-11-02 20:00:07 +0000
URL:       https://git.openjdk.org/skara/commit/804b7e95f8e623b43192d87476f38fa4a3c156ee
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Changing the original hash in a backport PR doesn't work,SKARA-1449,5075624,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-05-25 08:02,2022-10-04 10:35,2023-10-01 09:56,2022-05-25 09:31,,,,,,,,,,,,1.0,bots,,1,,,,,,,,,,,,,,,,,,,,,"If a user tries to change the original hash for a backport PR, by changing the title to ""Backport HASH"", it appears to work, but in reality, several things behind the scenes do not. The logic for finding the original commit will always just return the first hash that was set and ignores any updates/changes. This affects the clean evaluation and the commit message.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x8qb:",9223372036854775807,,,,,,,,,,,,"2022-05-25 09:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1321
Date: 2022-05-25 16:06:10 +0000;;;","2022-05-25 09:31;roboduke;Changeset: f5261711
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-25 16:30:48 +0000
URL:       https://git.openjdk.java.net/skara/commit/f5261711acde22fc470f8a5ef29b824eb766941b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user miaozhuojun,SKARA-1444,5075469,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,zmiao,zmiao,2022-05-23 20:37,2022-05-24 04:35,2023-10-01 09:56,2022-05-24 04:35,,,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,"Please add GitHub user 'miaozhuojun' [1] and map to me (OpenJDK username - 'zmiao') [2]. Thanks!

[1]https://github.com/miaozhuojun
[2]https://openjdk.java.net/census#zmiao",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x7rv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user DamonGuy,SKARA-1442,5075291,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,dnguyen,dnguyen,2022-05-19 13:43,2022-05-19 13:48,2023-10-01 09:56,2022-05-19 13:48,,,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x6ob:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user honkar-jdk,SKARA-1441,5075284,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,kcr,honkar,honkar,2022-05-19 11:34,2022-05-19 11:44,2023-10-01 09:56,2022-05-19 11:44,,,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x6mr:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix the OpenJDK official role name and pluralization,SKARA-1437,5074708,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,gli,gli,2022-05-11 05:53,2022-05-18 05:52,2023-10-01 09:56,2022-05-18 05:52,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"Reported by Magnus at https://github.com/openjdk/skara/pull/1305#discussion_r870240534

However, I think this was incorrect. The code here makes the text appears as:

Change must be properly reviewed (1 review required, with at least 1 reviewer)

when it should have been:

Change must be properly reviewed (1 review required, with at least 1 Reviewer)

(Note the capitalization of Reviewer).

Traditionally, the (not very clear, I admit) distinction has been made in OpenJDK between ""reviewer"" (anyone who offers a review) and a ""Reviewer"" (a member with the official status as Reviewer for a project). This text is about the latter, so changing the ""r"" to a ""R"" in the message made a significant difference.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-282,SKARA-1428,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x32z:",9223372036854775807,,,,,,,,,,,,"2022-05-11 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1319
Date: 2022-05-11 15:22:58 +0000;;;","2022-05-18 05:51;roboduke;Changeset: 9261f9b6
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-05-18 12:51:40 +0000
URL:       https://git.openjdk.java.net/skara/commit/9261f9b6ec9b3a83b427b19fd27c6709d0996982
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Testissue#addLink doesn't generate the right relationship for the reversed link,SKARA-1434,5074433,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,gli,gli,2022-05-08 18:52,2022-06-01 01:18,2023-10-01 09:56,2022-06-01 01:18,,,,,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,,"When the method `Testissue#addLink` adds a link with relationship `backport by`, it also adds a link with the same relationship to the reversed issue. It is wrong because the relationship of the reversed link should be `backport of` instead of the `backport by`.

This problem also occurs at many other relations which don't have the same name. What I know is shown below:

- `backported by` and `backport of`
- `csr for` and `csr of`
- `blocks` and `is blocked by`
- `clones` and `is cloned by`

---
I find this bug when I read the code of the test `BackportsTests#mainIssue`. Fixing this bug may influence many test cases so it needs more investigation before solving it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x1dv:",9223372036854775807,,,,,,,,,,,,"2022-05-28 00:47;gli;When using the link type `duplicates`, the JBS will create a `duplicates` link in both two issues, such as JDK-8282282 and 
JDK-8282599. It is good to add a new link type `duplicated by` corresponding to `duplicates`. Unfortunately, we don't have such relationship now.;;;","2022-05-28 01:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1325
Date: 2022-05-28 08:33:36 +0000;;;","2022-06-01 01:18;roboduke;Changeset: 925bd2b8
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2022-06-01 08:18:16 +0000
URL:       https://git.openjdk.java.net/skara/commit/925bd2b8de1ea4a86d6b1e1815f7fd194ee13624
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The command `/csr unneeded` doesn't correctly handle an approved CSR,SKARA-1432,5074423,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,gli,gli,2022-05-08 06:58,2022-06-07 08:29,2023-10-01 09:56,2022-06-07 08:29,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"When solving SKARA-1385, I found the following issue:

If the PR has an approved CSR and then someone types `/csr unneeded`, the bot currently replies `determined that a CSR request is not needed for this pull request.` But it is wrong, the bot should reply `The CSR requirement cannot be removed as there is already a CSR associated with the main issue...`.

It is because the following code which judges whether the PR has `csr` label, doesn't distinguish these two situations: 1. the CSR has been approved, 2. no csr request before.

```
// file CSRCommand.java
        if (cmd.equals(""unneeded"") || cmd.equals(""uneeded"")) {
            // ignore some code
            if (!labels.contains(CSR_LABEL)) {
                // FIXME here, the PR may have an approved CSR. We should distinguishing the situations
                // about having no csr request and (having csr request && the CSR has been approved).
                reply.println(""determined that a [CSR](https://wiki.openjdk.java.net/display/csr/Main) request "" +
                        ""is not needed for this pull request."");
                return;
            }
            // ignore some code
        }
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1385,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x1bn:",9223372036854775807,,,,,,,,,,,,"2022-06-07 04:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1331
Date: 2022-06-07 11:26:16 +0000;;;","2022-06-07 08:29;roboduke;Changeset: 46b0e597
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2022-06-07 15:28:30 +0000
URL:       https://git.openjdk.java.net/skara/commit/46b0e597c478d28c3c8eec2baf7bc5c91d0e1bba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The method TestPullRequest#diff sometimes returns wrong information,SKARA-1431,5074422,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,gli,gli,2022-05-08 06:37,2022-08-22 19:06,2023-10-01 09:56,2022-08-22 19:06,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"Considering the following steps:

1. create a commit A at the source branch
2. create a PR from source branch to target branch (assume the head commit of the target branch is B)
3. create a new commit C at the target branch

Ideally, we want the diff files of the PR to be the diff files of commit A.
But the method TestPullRequest#diff returns the diff files of both A and reversed C.

I found this issue when writing the test case for SKARA-1385. As a workaround, I always create a new PR when a new commit is pushed to the target branch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1385,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x1bf:",9223372036854775807,,,,,,,,,,,,"2022-08-20 00:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1360
Date: 2022-08-20 07:53:23 +0000;;;","2022-08-22 19:06;roboduke;Changeset: cd765e93
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2022-08-23 02:05:38 +0000
URL:       https://git.openjdk.org/skara/commit/cd765e9302076b87c31d744b833c97c0cd2b80da
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user backwaterred,SKARA-1430,5074336,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,tsteele,tsteele,2022-05-06 08:36,2022-05-06 09:44,2023-10-01 09:56,2022-05-06 09:44,,,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,"I am following the steps here:
https://wiki.openjdk.java.net/display/SKARA#Skara-AssociatingyourGitHubaccountandyourOpenJDKusername

The bots on GitHub do not seem to fully recognize my account. I don't encounter the /signed or /covered message typically seen by new contributors, but I do encounter the following issues:

- When reviewing a user's PR I get flagged with a ""no known github.com user name / role"" message. See (https://github.com/openjdk/jdk/pull/8318#issue-1209861914).

- I am unable to create backports by commenting on a commit. See: (https://github.com/openjdk/jdk/commit/fe547eacd71b4eb8119ecc7ca2d0bbe8e757f854#commitcomment-72703168).

I suspect being added to the OpenJDK organization will solve these issues. Many thanks for your help :-)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x0sb:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user mkartashev,SKARA-1429,5074223,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,mkartashev,mkartashev,2022-05-05 09:30,2022-05-05 09:45,2023-10-01 09:56,2022-05-05 09:45,,,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x037:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New reviews message always adds plural 's',SKARA-1428,5074171,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2022-05-04 15:00,2022-05-11 06:59,2023-10-01 09:56,2022-05-05 11:32,,,,,,,,,,,,1.0,admin,,0,,,,,,,,,,,,,,,,,,,,,The new message for listing review requirements in the progress list always adds a plural 's' regardless of the number of reviews required. We should change this so that it's only added when there are 2 or more reviews required. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1437,,,,,,,SKARA-282,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wzrn:",9223372036854775807,,,,,,,,,,,,"2022-05-04 15:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1317
Date: 2022-05-04 22:02:15 +0000;;;","2022-05-05 11:32;roboduke;Changeset: 88294cb8
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-05 18:31:48 +0000
URL:       https://git.openjdk.java.net/skara/commit/88294cb8b58c2e50d9a47dea951f77a0f7d303f0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unnecessary warning log message,SKARA-1427,5074169,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2022-05-04 14:53,2022-05-05 11:32,2023-10-01 09:56,2022-05-05 11:32,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,The PR bot currently logs a warning about not finding a CSR for every PR. This seems unnecessary.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wzr7:",9223372036854775807,,,,,,,,,,,,"2022-05-04 14:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1316
Date: 2022-05-04 21:55:32 +0000;;;","2022-05-05 11:32;roboduke;Changeset: 7010b622
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-05 18:31:25 +0000
URL:       https://git.openjdk.java.net/skara/commit/7010b62250863233c2f2689a1b1d313d8b967e35
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IssueNotifier fails to update Resolved In Build for fixVersion with openjdk prefix,SKARA-1426,5074157,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,erikj,erikj,erikj,2022-05-04 11:09,2022-05-05 11:31,2023-10-01 09:56,2022-05-05 11:31,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"The IssueNotifier is supposed to update the Resolved In Build field of issues when a new build tag is added to a repo. It does this by finding all commits present in the new tag, but not present in the previous one. It also verifies that the fixversion for those commits match the tag. This latter verification fails if the fixVersion has an openjdk prefix as the tags do not. Specifically issues with fixVersion openjdk8u342 did not get updated when the tag jdk8u342-b01 was added to https://github.com/openjdk/jdk8u.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1306,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wzoj:",9223372036854775807,,,,,,,,,,,,"2022-05-04 14:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1315
Date: 2022-05-04 21:13:47 +0000;;;","2022-05-05 11:31;roboduke;Changeset: 383283e8
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-05 18:31:04 +0000
URL:       https://git.openjdk.java.net/skara/commit/383283e85ac1b5c5b4d340ec9864f044baa34d34
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CheckRun fails to evaluate jol#24,SKARA-1424,5074055,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-05-03 06:31,2022-05-03 14:54,2023-10-01 09:56,2022-05-03 14:54,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"The CheckRun in the PR bot is currently failing to process https://github.com/openjdk/jol/pull/24. This is the stacktrace:

java.lang.RuntimeException: Exception during jcheck
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CheckRun.checkStatus(CheckRun.java:1157)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CheckRun.execute(CheckRun.java:98)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CheckWorkItem.run(CheckWorkItem.java:353)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.runMeasured(BotRunner.java:190)
	at org.openjdk.skara.bot/org.openjdk.skara.bot.BotRunner$RunnableWorkItem.run(BotRunner.java:146)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.io.IOException: Unexpected exit code
'git merge-base 1b6d9fbaf4401281c2449b9c47778d5a34842fcd 385500e3bc17b8c0b3f3fd44ba31fddd16600a14' exited with status: 1
[stdout]
[stderr]
	at org.openjdk.skara.vcs/org.openjdk.skara.vcs.git.GitRepository.await(GitRepository.java:116)
	at org.openjdk.skara.vcs/org.openjdk.skara.vcs.git.GitRepository.mergeBase(GitRepository.java:924)
	at org.openjdk.skara.forge/org.openjdk.skara.forge.PullRequestUtils.containsForeignMerge(PullRequestUtils.java:222)
	at org.openjdk.skara.bots.pr/org.openjdk.skara.bots.pr.CheckRun.checkStatus(CheckRun.java:1113)
	... 10 more

I believe this is happening because there are commits in the PR branch that do not have a merge-base with the master branch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wz1v:",9223372036854775807,,,,,,,,,,,,"2022-05-03 11:30;erikj;My suspicion was correct. The problem is that GitRepository::mergeBase doesn't differentiate between the git command failing with an error and when it just can't find a merge-base. In this particular check, PullRequestUtils::containsForeignMerge, we are looking for merges in the PR branch which bring in commits that aren't descendants of the main merge parent. For this check, a non existent merge-base should qualify for a positive test.

I'm refactoring Repository::mergeBase into two methods, one that returns an Optional, which will be empty when a merge-base can't be found. I'm also going through all callers to identify when the new method should be used to properly tell this situation apart.;;;","2022-05-03 11:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1312
Date: 2022-05-03 18:34:39 +0000;;;","2022-05-03 14:54;roboduke;Changeset: 15aea104
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-03 21:54:04 +0000
URL:       https://git.openjdk.java.net/skara/commit/15aea1047876d7bd42e7fc3f421800d801075444
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dependent pull requests: inacurrate bot comment,SKARA-1418,5073844,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,gli,gli,2022-04-29 01:43,2022-05-02 09:10,2023-10-01 09:56,2022-05-02 09:10,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"Reported by Roland Westrelin at https://mail.openjdk.java.net/pipermail/skara-dev/2022-April/005948.html :

I have this dependent pull request:

https://github.com/openjdk/jdk11u-dev/pull/1049

I already integrated the PR that it depended on. The bot added this
message as a result:

https://github.com/openjdk/jdk11u-dev/pull/1049#issuecomment-1112959031

It says:

git checkout backport-8280799

which is the branch of the already integrated PR. Shouldn't it be:

git checkout backport-8281811

that is the branch of PR#1049 that needs to be updated?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxqz:",9223372036854775807,,,,,,,,,,,,"2022-04-29 01:49;gli;To solve this issue, the code `formatted(pr.sourceRef(), pr.repository().webUrl(), pr.targetRef(), pr.targetRef())` in method `PullRequestBranchNotifier#onStateChange` should be changed to `formatted(retargeted.sourceRef(), pr.repository().webUrl(), pr.targetRef(), pr.targetRef())`. Note: `pr.sourceRef()` --> `retargeted.sourceRef()`.;;;","2022-04-29 08:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1309
Date: 2022-04-29 15:21:05 +0000;;;","2022-05-02 09:10;roboduke;Changeset: 6d139318
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-02 16:09:50 +0000
URL:       https://git.openjdk.java.net/skara/commit/6d139318bb0d5fc1be218cd1221e3177e6a740f9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Configure bots for jtreg repo, to show GitHub Actions",SKARA-1416,5073810,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,jjg,jjg,2022-04-28 14:35,2022-04-28 15:09,2023-10-01 09:56,2022-04-28 15:09,,,,,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,Please configure the Skara bots to show the result of GitHub Actions on a user's fork.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1132,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxjf:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The JEP link warns that the issue isn't open,SKARA-1411,5073520,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,gli,gli,gli,2022-04-26 04:20,2022-04-26 11:15,2023-10-01 09:56,2022-04-26 11:15,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,This issue is similar to SKARA-1265 which is about the CSR link. The new JEP link should obey the convention.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1265,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wvqz:",9223372036854775807,,,,,,,,,,,,"2022-04-26 04:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1307
Date: 2022-04-26 11:27:38 +0000;;;","2022-04-26 11:15;roboduke;Changeset: 555b4461
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-04-26 18:15:02 +0000
URL:       https://git.openjdk.java.net/skara/commit/555b4461c739e1b0a61c22b14d6c599d6426571a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The GitLab 'list-users' api doesn't return 'email' field for normal users,SKARA-1409,5073395,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,gli,gli,2022-04-25 01:57,2022-05-02 09:53,2023-10-01 09:56,2022-05-02 09:53,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"The GitLab ""list-users"" rest api[1] only return less information for normal users. It is not an issue if you use the admins permission. But when developers want to run the tests locally, they may get NPE or other exceptions at some tests.

I found this issue when I want to write a test for SKARA-1408 and run it locally.

[1] https://docs.gitlab.com/ee/api/users.html#list-users",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1408,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wuz7:",9223372036854775807,,,,,,,,,,,,"2022-04-25 02:11;gli;The GitHub related api returns 'email' field with 'null' value without permission, it is ok because no exception occurs.;;;","2022-04-25 02:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1306
Date: 2022-04-25 09:37:04 +0000;;;","2022-05-02 09:53;roboduke;Changeset: 079d2092
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-02 16:52:41 +0000
URL:       https://git.openjdk.java.net/skara/commit/079d20928990a0a1fbaf969341b7a3210a33bd18
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GitLabMergeRequest#reviews sometimes finds the wrong commit HASH,SKARA-1408,5073393,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,gli,gli,2022-04-25 00:02,2022-05-02 09:53,2023-10-01 09:56,2022-05-02 09:53,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"Please consider the following steps:

- the author creates ""commit 1"" locally
- the author pushes it and creates a merge request, the Gitlab creates ""version 1"" (its hash is the hash of ""commit 1"") which has ""commit 1""
- the author creates ""commit 2"" locally
- a reviewer approves the MR with the ""version 1""
- the author create ""commit 3"" locally
- the author pushes the commits and the gitlab create ""version 2"" (its hash is the hash of ""commit 3"") which has ""commit 1-3""

When we use the method `GitLabMergeRequest#reviews` to get the reviews list, we can see the review hash is the hash of the ""commit 2"". But actually, the reviewer only approved ""version 1"" with ""commit 1"".

We should use the `versions` instead of the `commits` to search the hash of the approval.

The wrong code is shown below for convenience.

```
// GitLabMergeRequest#reviews
        var commits = request.get(""commits"").execute().stream()
                             .map(JSONValue::asObject)
                             .map(obj -> {
                                 var ret = new CommitDate();
                                 ret.hash = new Hash(obj.get(""id"").asString());
                                 ret.date = ZonedDateTime.parse(obj.get(""created_at"").asString());
                                 return ret;
                             })
                             .collect(Collectors.toCollection(ArrayList::new));
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1409,,,,,,,SKARA-1407,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wuyr:",9223372036854775807,,,,,,,,,,,,"2022-04-25 02:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1306
Date: 2022-04-25 09:37:04 +0000;;;","2022-05-02 09:53;roboduke;Changeset: 079d2092
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-02 16:52:41 +0000
URL:       https://git.openjdk.java.net/skara/commit/079d20928990a0a1fbaf969341b7a3210a33bd18
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GitLabMergeRequest#filesUrl returns wrong result,SKARA-1407,5073368,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,gli,gli,gli,2022-04-23 07:14,2022-05-02 09:06,2023-10-01 09:56,2022-05-02 09:06,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"When solving SKARA-1395 [1], I find the method `GitLabMergeRequest#filesUrl` returns wrong result.

**GitHub** uses the following first url to get the changed files **from the first commit to the commit HASH** and uses the second url to get the changed files of **the current commit HASH**.

https://github.com/ORG/REPO/pull/PR_NUM/files/HASH
https://github.com/ORG/REPO/pull/PR_NUM/commits/HASH

**GitLab** uses the following first url to get the changed files **from the first commit to the commit HASH** and uses the second url to get the changed files of **the current commit HASH**.

https://gitlab.com/ORG/REPO/-/merge_requests/PR_NUM/diffs?diff_id=DIFF_ID
https://gitlab.com/ORG/REPO/-/merge_requests/PR_NUM/diffs?commit_id=HASH

The method `GitHubPullRequest#filesUrl` uses the first class url which is right. But in GitLabMergeRequest, it uses the second class url (diffs?commit_id=HASH) which only return the changed files of the current commit. The method `GitLabMergeRequest#filesUrl` needs to be adjusted to use `diff_id=DIFF_ID`. But we don't have the `DIFF_ID` now and need more investigation.

The related code is listed below for convenience.
```
// file GitHubPullRequest
    public URI filesUrl(Hash hash) {
        var endpoint = ""/"" + repository.name() + ""/pull/"" + id() + ""/files/"" + hash.hex();
        return host.getWebURI(endpoint);
    }

// file GitLabMergeRequest
    public URI filesUrl(Hash hash) {
        var endpoint = ""/"" + repository.name() + ""/-/merge_requests/"" + id() + ""/diffs?commit_id="" + hash.hex();
        return host.getWebUri(endpoint);
    }
```

[1] https://bugs.openjdk.java.net/browse/SKARA-1395",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1408,,,,,,,SKARA-1395,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wut7:",9223372036854775807,,,,,,,,,,,,"2022-04-23 14:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1304
Date: 2022-04-23 21:22:34 +0000;;;","2022-05-02 09:06;roboduke;Changeset: 3d3e4d9d
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-02 16:06:11 +0000
URL:       https://git.openjdk.java.net/skara/commit/3d3e4d9dc5567652d84fea4a1cfc4aeacac63d00
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Two GitHub APIs don't return `patch` field when `per_page` argument exceeds 70,SKARA-1406,5073332,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,gli,gli,gli,2022-04-22 08:08,2022-04-22 10:53,2023-10-01 09:56,2022-04-22 10:53,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"The GitHub rest api `get-a-commit` [1] and `list-pull-requests-files` [2] don't return the `patch` field when the `per_page` argument exceeds 70.

The original issue is SKARA-1332 [3]. And a detailed analysis is at
PR-1302 [4].

[1] https://docs.github.com/en/rest/commits/commits#get-a-commit
[2] https://docs.github.com/en/rest/pulls/pulls#list-pull-requests-files
[3] https://bugs.openjdk.java.net/browse/SKARA-1332
[4] https://github.com/openjdk/skara/pull/1302#issue-1211945938
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1332,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wul7:",9223372036854775807,,,,,,,,,,,,"2022-04-22 08:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1302
Date: 2022-04-22 07:38:59 +0000;;;","2022-04-22 10:53;roboduke;Changeset: 528895bf
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-04-22 17:53:10 +0000
URL:       https://git.openjdk.java.net/skara/commit/528895bf34aa737017c18ced7aa776ef2f5596e3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GitlabMergeRequest sometimes associates reviews with the wrong commit,SKARA-1400,5072755,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-04-18 11:34,2022-04-18 15:29,2023-10-01 09:56,2022-04-18 15:29,,,,,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,,"GitlabMergeRequset::reviews can sometimes associate a review with the wrong commit. This can happen if multiple commits have the same ""created_at"" date (the date the commit was pushed to gitlab). In this case, sorting on date will leave the older commit last. When later comparing the date of each commit with the date of a review note, the older commit gets picked.

The consequence of this is that a review can end up stuck with ""Re-review required"" if the repository requires new reviews for new commits. 

Gitlab returns commits in reverse chronological order which I assume is based on author date, but the loop later wants them in chronological order based on committer date. The stream sorted method is stable, so I think we should be set by just reversing the order of the commits before sorting.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wr0z:",9223372036854775807,,,,,,,,,,,,"2022-04-18 13:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1300
Date: 2022-04-18 20:59:01 +0000;;;","2022-04-18 15:29;roboduke;Changeset: 3a889291
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-04-18 22:29:24 +0000
URL:       https://git.openjdk.java.net/skara/commit/3a889291b80d8ac52a780ebfc7e08cfd2a46a4c8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara doesn't handle tags with more than 4 digits in version number,SKARA-1397,5072530,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-04-13 13:32,2022-04-14 06:07,2023-10-01 09:56,2022-04-14 06:07,,,,,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,,,,,,"To be able to react to new tags, Skara needs to know how to parse our tag formats. For this we have the OpenJDKTag class. The current pattern for Verona based versions in this class is limited to tags with 4 digit version numbers. This becomes a problem when a JDK release uses more of the up to 7 possible version digits currently allowed in mainline since JDK-8207849. We need to update the regex patterns used to parse tags.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wq2z:",9223372036854775807,,,,,,,,,,,,"2022-04-13 14:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1299
Date: 2022-04-13 21:15:19 +0000;;;","2022-04-14 06:07;roboduke;Changeset: 4714cae0
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-04-14 13:07:14 +0000
URL:       https://git.openjdk.java.net/skara/commit/4714cae0521a93be8fb5760917c892893c042a5e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Gitlab MR merged outside of Skara causes NPE in mlbridge,SKARA-1396,5072414,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2022-04-12 11:34,2022-04-12 13:02,2023-10-01 09:56,2022-04-12 13:02,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"If a merge request in Gitlab is merged manually by someone using the Gitlab ""merge"" button instead of through Skara, the mlbridge bot will get stuck in a retry loop hitting NPE.

The mlbridge wants to send a notice about the MR having been closed, but Gitlab doesn't think the MR was closed, it regards it as integrated. Mlbridge tries to lookup the field ""closed_by"", which is null in this case, and causes the NPE.

The retry will continue until the MR gets old enough to no longer be included in the query (currently 14 days since last being touched).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wpd7:",9223372036854775807,,,,,,,,,,,,"2022-04-12 11:59;erikj;I'm going to fix the NPE by adding a fallback when looking for the ""closed_by"" field in the GitlabMergeRequest. In the case where the MR was actually integrated directly in Gitlab, the user data is stored in ""merged_by"" instead. While not strictly the same thing, I think it's the best fallback we can offer.;;;","2022-04-12 12:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1298
Date: 2022-04-12 19:06:02 +0000;;;","2022-04-12 13:02;roboduke;Changeset: fe8bd087
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-04-12 20:02:20 +0000
URL:       https://git.openjdk.java.net/skara/commit/fe8bd087abf6921a02ce8dde5bdfa4aeb63cc02f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"The ""Review applies to <commit>"" link is misleading",SKARA-1395,5072344,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,gli,dholmes,dholmes,2022-04-11 17:54,2022-05-02 09:07,2023-10-01 09:56,2022-05-02 09:07,,,,,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,,,,,,"When a person reviews a PR and subsequent commits are made to the PR, the Reviewer section is updated to show that the review applies to an earlier commit e.g.

Reviewers

    Joe Smith (@jsmith - Reviewer) ⚠️ Review applies to 77edb59

The commit hash is a link to the commit, but it is a link directly to that commit alone - as [~kcr] put it:

""it lists the HEAD of the PR branch at that time.""

but what they actually reviewed was all commits up to and including the named commit.

By clicking the link you get an incorrect view of what was actually reviewed and may think that significant changes have not been approved by a reviewer.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1407,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2woxn:",9223372036854775807,,,,,,,,,,,,"2022-04-12 02:59;ihse;The link currently points to the specific commit, as in https://github.com/openjdk/jdk/commit/HASH

It should be made to point to the review view for that commit, as in https://github.com/openjdk/jdk/pull/PR_NUM/files/HASH.

Except for the part of getting PR_NUM, this is a trivial fix.;;;","2022-04-12 03:00;ihse;I think it would be sweet if we could also list the number of new commits, so you'd have an idea if it is 1 or 20... Like:

Duke (@duke - Reviewer) ⚠️ Review applies to 7ddb773 (2 new commits)
;;;","2022-04-20 02:49;gli;It is good to add a link to direct to the new commits, like:

Duke (@duke - Reviewer) ⚠️ Review applies to [7ddb773](link) ([2 new commits](link));;;","2022-04-22 01:39;gli;At second thought, I think the link `[2 new commits](link)` is not needed. Because when the reviewers read the comment `2 new commits`, they can just click the link `Files changed` to review again. Such a link I suggested seems make no sense.;;;","2022-04-23 07:48;gli;Currently, SKARA doesn't have the code to get the number of the commits between two HASH. So the suggestion ` (2 new commits)` is hard to implement now.

A feasible way is using the api `list-commits-on-a-pull-request` [1] to get the commit lists and then iterating them to get the needed number. But it needs to add a new interface method to PullRequest and revise the test framework to contain the commit list. I don't think it worth adding so much code to implement such a trivial enhancement.

[1] https://docs.github.com/en/rest/pulls/pulls#list-commits-on-a-pull-request;;;","2022-04-23 08:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/skara/pull/1303
Date: 2022-04-23 15:48:52 +0000;;;","2022-05-02 09:07;roboduke;Changeset: c5459cd6
Author:    Guoxiong Li <gli@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-02 16:06:58 +0000
URL:       https://git.openjdk.java.net/skara/commit/c5459cd64fe13e20f8422e382c7ca507a5c589ea
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to open Help page in macOS M1 when JMC started with JDK11,JMC-7813,5076077,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,vpurnam,bbanathur,bbanathur,2022-06-02 02:51,2023-01-11 02:36,2023-10-01 09:56,2022-09-25 03:06,8.2.1,,,,,,,,,,,8.3.0,Mission Control Client,,0,sqe-8.2.1,,,,,,,,,,,,,,,,,,,,"We have a known issue with respect to the Help page if JMC is booted up with JDK 17 or higher ( JMC-7321 )

But on all other platforms, the JMC Help page is accessible if it's started with JDK 11.

But the help page is inaccessible with the following error on macOS M1 when JMC is run on JDK 11.0.16

 
{code:java}
HTTP ERROR 500 org.apache.jasper.JasperException: PWC6344: Unable to create output writer for file /Users/jmcsqe/Documents/JMC/8.2.1/jmc-8.2.1_aarch64/JDK Mission Control.app/Contents/Eclipse/configuration/org.eclipse.osgi/189/data/jettywork/pid_2070971114/proxytemp/org_eclipse_equinox_http_registry_internal_DefaultRegistryHttpContext-0/hc_1264647964/org/apache/jsp/index_jsp.javaURI:	/help/index.jsp
STATUS:	500
MESSAGE:	org.apache.jasper.JasperException: PWC6344: Unable to create output writer for file /Users/jmcsqe/Documents/JMC/8.2.1/jmc-8.2.1_aarch64/JDK Mission Control.app/Contents/Eclipse/configuration/org.eclipse.osgi/189/data/jettywork/pid_2070971114/proxytemp/org_eclipse_equinox_http_registry_internal_DefaultRegistryHttpContext-0/hc_1264647964/org/apache/jsp/index_jsp.java
SERVLET:	org.eclipse.equinox.http.jetty.internal.HttpServerManager$InternalHttpServiceServlet-1b22ed9
CAUSED BY:	org.apache.jasper.JasperException: PWC6344: Unable to create output writer for file /Users/jmcsqe/Documents/JMC/8.2.1/jmc-8.2.1_aarch64/JDK Mission Control.app/Contents/Eclipse/configuration/org.eclipse.osgi/189/data/jettywork/pid_2070971114/proxytemp/org_eclipse_equinox_http_registry_internal_DefaultRegistryHttpContext-0/hc_1264647964/org/apache/jsp/index_jsp.java
CAUSED BY:	java.io.FileNotFoundException: /Users/jmcsqe/Documents/JMC/8.2.1/jmc-8.2.1_aarch64/JDK Mission Control.app/Contents/Eclipse/configuration/org.eclipse.osgi/189/data/jettywork/pid_2070971114/proxytemp/org_eclipse_equinox_http_registry_internal_DefaultRegistryHttpContext-0/hc_1264647964/org/apache/jsp/index_jsp.java (No such file or directory)
Caused by:org.apache.jasper.JasperException: PWC6344: Unable to create output writer for file /Users/jmcsqe/Documents/JMC/8.2.1/jmc-8.2.1_aarch64/JDK Mission Control.app/Contents/Eclipse/configuration/org.eclipse.osgi/189/data/jettywork/pid_2070971114/proxytemp/org_eclipse_equinox_http_registry_internal_DefaultRegistryHttpContext-0/hc_1264647964/org/apache/jsp/index_jsp.java
	at org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:92)
	at org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:378)
	at org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:229)
	at org.apache.jasper.compiler.JDTJavaCompiler.getJavaWriter(JDTJavaCompiler.java:146)
	at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:201)
	at org.apache.jasper.compiler.Compiler.compile(Compiler.java:451)
	at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:625)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:492)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:378)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:584)
	at org.eclipse.equinox.jsp.jasper.JspServlet.service(JspServlet.java:164)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:584)
	at org.eclipse.equinox.http.registry.internal.ServletManager$ServletWrapper.service(ServletManager.java:183)
	at org.eclipse.equinox.http.servlet.internal.HttpServiceRuntimeImpl$LegacyServlet.service(HttpServiceRuntimeImpl.java:1457)
	at org.eclipse.equinox.http.servlet.internal.registration.EndpointRegistration.service(EndpointRegistration.java:159)
	at org.eclipse.equinox.http.servlet.internal.servlet.ResponseStateHandler.processRequest(ResponseStateHandler.java:67)
	at org.eclipse.equinox.http.servlet.internal.context.DispatchTargets.doDispatch(DispatchTargets.java:118)
	at org.eclipse.equinox.http.servlet.internal.servlet.ProxyServlet.dispatch(ProxyServlet.java:147)
	at org.eclipse.equinox.http.servlet.internal.servlet.ProxyServlet.preprocess(ProxyServlet.java:115)
	at org.eclipse.equinox.http.servlet.internal.servlet.ProxyServlet.service(ProxyServlet.java:104)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:584)
	at org.eclipse.equinox.http.jetty.internal.HttpServerManager$InternalHttpServiceServlet.service(HttpServerManager.java:308)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:764)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:508)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:221)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1571)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:221)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1378)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:176)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:463)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1544)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:174)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1300)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:129)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:122)
	at org.eclipse.jetty.server.Server.handle(Server.java:562)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$0(HttpChannel.java:418)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:675)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:410)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:282)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:319)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:100)
	at org.eclipse.jetty.io.SocketChannelEndPoint$1.run(SocketChannelEndPoint.java:101)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:894)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1038)
	at java.base/java.lang.Thread.run(Thread.java:1585)
Caused by: java.io.FileNotFoundException: /Users/jmcsqe/Documents/JMC/8.2.1/jmc-8.2.1_aarch64/JDK Mission Control.app/Contents/Eclipse/configuration/org.eclipse.osgi/189/data/jettywork/pid_2070971114/proxytemp/org_eclipse_equinox_http_registry_internal_DefaultRegistryHttpContext-0/hc_1264647964/org/apache/jsp/index_jsp.java (No such file or directory)
	at java.base/java.io.FileOutputStream.open0(Native Method)
	at java.base/java.io.FileOutputStream.open(FileOutputStream.java:295)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:236)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:124)
	at org.apache.jasper.compiler.JDTJavaCompiler.getJavaWriter(JDTJavaCompiler.java:140)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7321,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xbiz:",9223372036854775807,,,,,,,,,,,,"2022-09-22 00:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/428
Date: 2022-09-22 07:35:04 +0000;;;","2022-09-25 03:06;roboduke;Changeset: e6778b19
Author:    vpurnam <vpurnam@VPURNAM-7420.in.oracle.com>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2022-09-25 10:04:27 +0000
URL:       https://git.openjdk.org/jmc/commit/e6778b191878c68d7c72af93a1a99ee49e0e7caa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to open links from Automated Result analysis page,JMC-7812,5076075,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,vpurnam,bbanathur,bbanathur,2022-06-02 02:29,2023-01-11 02:36,2023-10-01 09:56,2022-09-16 10:19,8.2.1,,,,,,,,,,,8.3.0,Mission Control Client,,0,regression,sqe-8.2.1,,,,,,,,,,,,,,,,,,,"Found this issue while verifying JMC-7381 ([33159742|https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=]).

There are some hyperlinked texts in Automated Analysis page, for example 
 * String Deduplication
 * Command-Line Option Check
 * DebugNoSafepoints 

!image-2022-06-02-14-56-53-390.png|width=167,height=137!   !image-2022-06-02-14-57-23-674.png|width=157,height=137!   !image-2022-06-02-14-57-55-560.png|width=242,height=85!

The link is not opening in JMC v8.2.1 for macOS and Linux machines whereas the link is opened on Windows machine.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-06-02 02:27;bbanathur;image-2022-06-02-14-56-53-390.png;https://bugs.openjdk.org/secure/attachment/99201/image-2022-06-02-14-56-53-390.png","2022-06-02 02:27;bbanathur;image-2022-06-02-14-57-23-674.png;https://bugs.openjdk.org/secure/attachment/99200/image-2022-06-02-14-57-23-674.png","2022-06-02 02:27;bbanathur;image-2022-06-02-14-57-55-560.png;https://bugs.openjdk.org/secure/attachment/99199/image-2022-06-02-14-57-55-560.png",,,,,,,,,,,,,,,,,,,,,,,,"0|i2xbij:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1c80c3d6,,,,,,,,,"2022-06-26 22:23;rradhakrishn;Defer to 8.3 release.;;;","2022-09-16 02:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/425
Date: 2022-09-16 09:19:57 +0000;;;","2022-09-16 10:19;roboduke;Changeset: 9b8e0449
Author:    vpurnam <vpurnam@VPURNAM-7420.in.oracle.com>
Committer: Suchita Chaturvedi <schaturvedi@openjdk.org>
Date:      2022-09-16 17:15:44 +0000
URL:       https://git.openjdk.org/jmc/commit/9b8e04494384400a902ad6e4a22587764576e5a7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix GHA that is broken due to OpenJDK Update 11.0.15,JMC-7801,5075222,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P3,Fixed,clanger,clanger,clanger,2022-05-18 23:18,2023-01-11 02:35,2023-10-01 09:56,2022-05-19 08:43,,,,,,,,,,,,8.3.0,Infrastructure,,0,,,,,,,,,,,,,,,,,,,,,"It seems that [JDK-8278356 which came with OpenJDK 11.0.15|https://github.com/openjdk/jdk11u/commit/ab8d162abb4f2ebb6e5e234cc7eb15bf96ef8afe] introduces a regression that breaks the JMC build on Windows. The regression is fixed in OpenJDK with JDK-8285445 which will only be part of 11.0.16. For now we can workaround the problem by pinning to OpenJDK 11.0.14 in the GHA workflow which should be fine from a security perspective.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x68z:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@312b13a5,,,,,,,,,"2022-05-18 23:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/402
Date: 2022-05-19 06:25:12 +0000;;;","2022-05-19 08:43;roboduke;Changeset: 64aa2ae9
Author:    Christoph Langer <clanger@openjdk.org>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2022-05-19 15:41:41 +0000
URL:       https://git.openjdk.java.net/jmc/commit/64aa2ae9797d893df70ce5b92d36e9558573203f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup pom and project files for JMC core,JMC-7769,5072536,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2022-04-13 16:34,2023-01-11 02:34,2023-10-01 09:56,2022-05-04 01:21,,,,,,,,,,,,8.3.0,Infrastructure,,0,,,,,,,,,,,,,,,,,,,,,"There is a lot of redundancy, whitespace errors, inconsistencies, obsolete stuff, errors, outdated plugin versions etc. in JMC core pom and project files.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JMC-7856,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wq4b:",9223372036854775807,,,,,,,,,,,,"2022-04-13 16:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/398
Date: 2022-04-13 23:36:58 +0000;;;","2022-05-04 01:21;roboduke;Changeset: 6aeee137
Author:    Christoph Langer <clanger@openjdk.org>
Committer: Jean-Philippe Bempel <jpbempel@openjdk.org>
Date:      2022-05-04 08:20:43 +0000
URL:       https://git.openjdk.java.net/jmc/commit/6aeee1375d8ea5739ba2a85675fb5e00f1eea9af
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix handling of version qualifier in core plugins,JMC-7767,5072426,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2022-04-12 16:28,2023-01-11 02:34,2023-10-01 09:56,2022-04-27 05:55,,,,,,,,,,,,8.3.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,"The P2 versioning of JMC core modules has an element .qualifier. However, as JMC core modules are not built with Tycho this is not handled correctly. The element '.qualifier' should be replaced with a current timestamp in -SNAPSHOT builds and removed in release builds.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wpfv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5dc4c445,,,,,,,,,"2022-04-12 16:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/396
Date: 2022-04-12 23:30:45 +0000;;;","2022-04-27 05:55;roboduke;Changeset: 4a7f20f2
Author:    Christoph Langer <clanger@openjdk.org>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2022-04-27 12:55:18 +0000
URL:       https://git.openjdk.java.net/jmc/commit/4a7f20f2424104e5f008846ebfb0717778632ad1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bump some Maven plugins,JMC-7765,5072394,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,clanger,clanger,clanger,2022-04-12 06:50,2023-01-11 02:34,2023-10-01 09:56,2022-04-13 01:12,,,,,,,,,,,,8.3.0,Release Engineering,,0,,,,,,,,,,,,,,,,,,,,,"junit 4.13.1 -> 4.13.2 (minor update)

maven javadoc 3.2.0 -> 3.3.2 (bugfixes, e.g. support javadoc generation with modular JDKs)

mockito 3.7.7 -> 3.12.4 (bugfixes to support newer JDKs, e.g. 17)

tycho 2.5.0 -> 2.7.1 (bugfixes, prepare JDK17 support)

jetty maven plugin 9.4.43.v20210629 -> 9.4.46.v20220331 (minor updates, only used for p2 server during build)

p2-maven-plugin 1.5.0 -> 2.0.0 (prepare JDK 17 support)

{color:#24292f}build-helper-maven-plugin 3.2.0 -> 3.3.0 (minor update){color}

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wp8r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4bcb9d9e,,,,,,,,,"2022-04-12 07:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jmc/pull/395
Date: 2022-04-12 13:56:27 +0000;;;","2022-04-13 01:12;roboduke;Changeset: 97403f7d
Author:    Christoph Langer <clanger@openjdk.org>
Committer: Jean-Philippe Bempel <jpbempel@openjdk.org>
Date:      2022-04-13 08:11:56 +0000
URL:       https://git.openjdk.java.net/jmc/commit/97403f7d40fae9dcea6e1aa66307f0d1c87108ce
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VerifyError with JEP 405 pattern match,JDK-8288120,5076513,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,webbuggrp,webbuggrp,2022-06-08 07:20,2022-07-27 05:49,2023-10-01 09:56,2022-06-24 01:16,19,,,,,,,,,,,19,tools,,0,19ea,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubuntu 20.04
OpenJDK Runtime Environment (build 19-ea+25-1892)

A DESCRIPTION OF THE PROBLEM :
A method that uses instanceof pattern matching for records fails with a verify error. Rewriting it with classic instanceof succeeds.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the program below with Java 19. 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The program runs and prints 3660.0 s
ACTUAL -
Error: Unable to initialize main class Test3
Caused by: java.lang.VerifyError: Bad return type
Exception Details:
  Location:
    Test3.$proxy$unit(LLength;)LLengthUnit; @4: areturn
  Reason:
    Type 'QuantityUnit' (current frame, stack[0]) is not assignable to 'LengthUnit' (from method signature)
  Current Frame:
    bci: @4
    flags: { }
    locals: { 'Length' }
    stack: { 'QuantityUnit' }
  Bytecode:
    0000000: 2ab6 001a b04c bb00 0959 2bb6 000b 2bb7
    0000010: 000f bf                                
  Exception Handler Table:
    bci [0, 4] => handler: 5
  Stackmap Table:
    same_locals_1_stack_item_frame(@5,Object[#7])

---------- BEGIN SOURCE ----------
interface QuantityUnit {
   double factor();
}

enum LengthUnit implements QuantityUnit {
   m(1), cm(0.01), in(0.01 / 2.54);

   private final double factor;

   public double factor() {
      return factor;
   }
   LengthUnit(double factor) {
      this.factor = factor;
   }

   public static final LengthUnit PREFERRED = m;   
}

enum TimeUnit implements QuantityUnit {
   s(1), min(60), h(60 * 60);
   private final double factor;
   public double factor() {
      return factor;
   }
   TimeUnit(double factor) {
      this.factor = factor;
   }

   public static final TimeUnit PREFERRED = s;
}

sealed interface Quantity {
   double value();
   QuantityUnit unit();
}

record Length(double value, LengthUnit unit) implements Quantity {
   public String toString() {
      return value() + "" "" + unit();
   }
}

record Time(double value, TimeUnit unit) implements Quantity {
   public String toString() {
      return value() + "" "" + unit();
   }
}


public class Test3 {
   public static <T extends Quantity> T add1(T first, T second) {
      if (first instanceof Time && second instanceof Time) {
         var v1 = first.value();
         var u1 = ((Time) first).unit();
         var v2 = second.value();
         var u2 = second.unit();
         if (u1 == u2)
            return (T) new Time(v1 + v2, u1);
         else
            return (T) new Time(v1 * u1.factor() + v2 * u2.factor(),
                  TimeUnit.PREFERRED);
      }
      else if (first instanceof Length && second instanceof Length) {
         var v1 = first.value();
         var u1 = ((Length) first).unit();
         var v2 = second.value();
         var u2 = second.unit();
         if (u1 == u2)
            return (T) new Length(v1 + v2, u1);
         else
            return (T) new Length(v1 * u1.factor() + v2 * u2.factor(),
                  LengthUnit.PREFERRED);
      }
      else
         return null; // cannot happen      
   }

   public static <T extends Quantity> T add2(T first, T second) {
      if (first instanceof Time(var v1, var u1) && second instanceof Time(var v2, var u2)) {
         if (u1 == u2) return (T) new Time(v1 + v2, u1);
         else return (T) new Time(v1 * u1.factor() + v2 * u2.factor(), TimeUnit.PREFERRED);
      } else if (first instanceof Length(var v1, var u1) && second instanceof Length(var v2, var u2)) {
         if (u1 == u2) return (T) new Length(v1 + v2, u1);
         else return (T) new Length(v1 * u1.factor() + v2 * u2.factor(), LengthUnit.PREFERRED);
      }
      else return null; // cannot happen      
   }
   
   public static void main(String[] args) {
      System.out.println(add1(new Time(1, TimeUnit.h), new Time(1, TimeUnit.min)));
   }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Don't use pattern matching.

FREQUENCY : always


",,,,,,,,,,JDK-8291320,JDK-8291148,JDK-8289242,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-06-09 08:25;lancea;Test3.java;https://bugs.openjdk.org/secure/attachment/99459/Test3.java",,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xe77:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-09 01:32;tongwan;The reproducer can not be compiled.  Requested more details from the submitter.
;;;","2022-06-09 07:04;tongwan;The observations on Windows 10:
javac --enable-preview --release 19 Test3.java
java --enable-preview Test3
JDK 19ea+25: Failed, Error: Unable to initialize main class Test3 ;;;","2022-06-09 08:29;lancea;I think what is attached was what was intended to be tested which results in:

  %javac  --enable-preview --release 19  Test3.java
Note: Test3.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
Note: Test3.java uses preview features of Java SE 19.
Note: Recompile with -Xlint:preview for details.
%java  --enable-preview  Test3                   
Error: Unable to initialize main class Test3
Caused by: java.lang.VerifyError: Bad return type
Exception Details:
  Location:
    Test3.$proxy$unit(LLength;)LLengthUnit; @4: areturn
  Reason:
    Type 'QuantityUnit' (current frame, stack[0]) is not assignable to 'LengthUnit' (from method signature)
  Current Frame:
    bci: @4
    flags: { }
    locals: { 'Length' }
    stack: { 'QuantityUnit' }
  Bytecode:
    0000000: 2ab6 001a b04c bb00 0959 2bb6 000b 2bb7
    0000010: 000f bf                                
  Exception Handler Table:
    bci [0, 4] => handler: 5
  Stackmap Table:
    same_locals_1_stack_item_frame(@5,Object[#7])

;;;","2022-06-17 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/34
Date: 2022-06-17 13:50:39 +0000;;;","2022-06-24 01:16;dukebot;Changeset: bdf9902f
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-06-24 08:13:28 +0000
URL:       https://git.openjdk.org/jdk19/commit/bdf9902f753b71f30be8e1634fc361a5c7d8d8ec
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(dc) DatagramChannel.disconnect uses disconnectx which is not supported on macOS 10.8.3,JDK-8288033,5076511,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lpinto,lpinto,lpinto,2022-06-08 07:18,2022-07-08 01:24,2023-10-01 09:56,2022-06-08 12:50,8,,,,,,,,,,,8u351,core-libs,,0,CPU22_07-critical-approved,CPU22_07-critical-SQE-OK,hgupdate-sync,,,,,,,,,,,,,,,,,,"The backport for JDK-8285515 on jdk8u has passed tests in mach5 and so it was integrated into the main branch but while backporting this fix into jdk7u, which runs older mac OS X hardware (v10.7.5), it was noticed that the changes from the backport do not support the latest advertised OS X version.

As per https://www.oracle.com/java/technologies/javase/products-doc-jdk8-jre8-certconfig.html the latest version supported is v10.8.3 and so we need to use `connect` instead of `disconnectx` since this function has only been available for OS X v10.11.0+.",,,,,,,,,,JDK-8288103,JDK-8288319,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285515,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,,os_x,,,,,,"0|i2xe6r:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: disable PAC-RET when preview is enabled,JDK-8288023,5076494,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ngasson,ngasson,ngasson,2022-06-08 06:10,2022-08-04 07:21,2023-10-01 09:56,2022-06-09 04:53,19,,,,,,,,,,,19,hotspot,,0,aarch64-related,loom,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,,"PAC-RET is not compatible with virtual threads: see JDK-8287325 and the discussion in the PR below.

https://github.com/openjdk/jdk/pull/9067",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287325,,,,,,,JDK-8277204,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,,"0|i2xe2z:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Not verified,,"2022-06-08 17:03;dlong;ILW = potential crash with -XX:UseBranchProtection=pac-ret and preview enabled; only on platforms with pac-ret enabled; turn off pac-ret = HMM = P2;;;","2022-06-09 01:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9102
Date: 2022-06-09 08:26:38 +0000;;;","2022-06-09 04:53;dukebot;Changeset: 4285e3d6
Author:    Nick Gasson <ngasson@openjdk.org>
Date:      2022-06-09 11:48:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4285e3d6db487d85138486d1f7853c7c067c59cd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HotSpot build with disabled PCH fails for Windows AArch64,JDK-8288005,5076475,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alexsch,alexsch,alexsch,2022-06-08 02:15,2022-12-22 02:21,2023-10-01 09:41,2022-06-16 01:17,,,,,,,,,,,,20,hotspot,,0,include,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"When cross-compiling OpenJDK for AArch64 architecture on Windows x86_64 machine, AND using the flag to disable Pre-Compiled Headers, the build fails.
Here is the partial output from 'configure' command:

====================================================
A new configuration has been successfully created in
/home/user/projects/openjdk/jdk/build/windows-aarch64-server-release
using configure arguments '--disable-precompiled-headers --disable-warnings-as-errors --with-boot-jdk=/home/User/.sdkman/candidates/java/18.0.1.fx-librca --with-jtreg=/home/User/Projects/OpenJDK/JTReg/build/images/jtreg --enable-option-checking=fatal --with-jvm-features=shenandoahgc --openjdk-target=aarch64-unknown-cygwin'.

Configuration summary:
* Name:           windows-aarch64-server-release
* Debug level:    release
* HS debug level: product
* JVM variants:   server
* JVM features:   server: 'cds compiler1 compiler2 epsilongc g1gc jfr jni-check jvmci jvmti management parallelgc serialgc services shenandoahgc vm-structs zgc'
* OpenJDK target: OS: windows, CPU architecture: aarch64, address length: 64
* Version string: 19-internal-adhoc.User.jdk (19-internal)
* Source date:    Determined at build time

Tools summary:
* Environment:    cygwin version 3.3.5(0.341/5/3), 2022-05-13 12:27; windows version 10.0.19044.1706; prefix ""/cygdrive""; root ""C:\CYGWIN""
* Boot JDK:       openjdk version ""18.0.1"" 2022-04-19 OpenJDK Runtime Environment (build 18.0.1+12) OpenJDK 64-Bit Server VM (build 18.0.1+12, mixed mode, sharing) (at /home/User/.sdkman/candidates/java/18.0.1.fx-librca)
* Toolchain:      microsoft (Microsoft Visual Studio 2019)
* C Compiler:     Version 19.29.30138 (at /cygdrive/c/progra~2/micros~2/2019/enterp~1/vc/tools/msvc/1429~1.301/bin/hostx64/arm64/cl.exe)
* C++ Compiler:   Version 19.29.30138 (at /cygdrive/c/progra~2/micros~2/2019/enterp~1/vc/tools/msvc/1429~1.301/bin/hostx64/arm64/cl.exe)
====================================================

And here is the partial output from 'make images' command at the moment of failure:

====================================================
* For target hotspot_variant-server_libjvm_objs_vm_version_windows_aarch64.obj:
vm_version_windows_aarch64.cpp
C:\CYGWIN\home\user\projects\openjdk\jdk\src\hotspot\os_cpu\windows_aarch64\vm_version_windows_aarch64.cpp(88): error C2275: 'os': illegal use of this type as an expression
C:\CYGWIN\home\user\projects\openjdk\jdk\src\hotspot\share\runtime/os.hpp(94): note: see declaration of 'os'
C:\CYGWIN\home\user\projects\openjdk\jdk\src\hotspot\os_cpu\windows_aarch64\vm_version_windows_aarch64.cpp(88): error C3861: 'log_info': identifier not found
C:\CYGWIN\home\user\projects\openjdk\jdk\src\hotspot\os_cpu\windows_aarch64\vm_version_windows_aarch64.cpp(88): error C2065: 'log_info': undeclared identifier
   ... (rest of output omitted)
==================================================== ",,,,,,,,,,JDK-8299264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,windows,,,,,,"0|i2xdyr:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,"2022-06-15 23:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9178
Date: 2022-06-16 06:50:15 +0000;;;","2022-06-16 01:17;dukebot;Changeset: b2a58bec
Author:    Dmitry Kulikov <dmitry.kulikov@bell-sw.com>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2022-06-16 08:12:30 +0000
URL:       https://git.openjdk.org/jdk/commit/b2a58bec4a4f70a06b23013cc4c351b36a413521
;;;","2022-12-20 06:29;avoitylov;Reqesting backport to 17u-dev to improve reproducibility on Windows AArch64 with VS2019+ (requires non-PCH builds). Clean backport.;;;","2022-12-20 06:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/956
Date: 2022-12-20 14:17:24 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/loopopts/TestOverUnrolling2.java fails with release VMs,JDK-8288000,5076470,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2022-06-08 00:29,2022-08-18 17:54,2023-10-01 09:56,2022-06-08 01:17,19,,,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-19,tencent-interest,tier6,,,,,,,,,,,,,,,"
STDERR:
Error: VM option 'StressIGVN' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.
Error: The unlock option must precede 'StressIGVN'.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
",,,,,,,,,,JDK-8288811,JDK-8292644,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286625,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xdxn:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-08 00:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9080
Date: 2022-06-08 07:33:11 +0000;;;","2022-06-08 01:13;dukebot;Changeset: d959c22a
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-06-08 08:08:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d959c22a9574359e2d5134ac8365e8a9df4f7cef
;;;","2022-06-08 01:24;rcastanedalo;ILW = test failure; fails on every test run in release mode; run the test in debug mode only = MHL = P3;;;","2022-08-18 10:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/638
Date: 2022-08-18 17:18:33 +0000;;;","2022-08-18 10:58;phh;Fix Request (17u)

On behalf of Josh Cao <joshcao@amazon.com>.

Clean test-only backport for Oracle parity, very low risk.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Concurrent implicit attach from native threads crashes VM,JDK-8287982,5075609,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,alanb,webbuggrp,webbuggrp,2022-05-25 05:19,2022-08-24 04:44,2023-10-01 09:56,2022-06-22 00:49,19,,,,,,,,,,,19,core-libs,,0,dcsswa,loom,regression,reproducer-tp,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Linux, JDK 19-ea+23-1706

A DESCRIPTION OF THE PROBLEM :
Using the Foreign Function & Memory API to call a native C++ function which calls back into the JVM concurrently (at least two C++ threads) causes the JVM to crash. The same program (modulo some changes to make it compilable with JDK 19) worked on JVM 18.

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fec8d25e842, pid=7636, tid=7655
#
# JRE version: OpenJDK Runtime Environment (19.0+23) (build 19-ea+23-1706)
# Java VM: OpenJDK 64-Bit Server VM (19-ea+23-1706, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x85e842]  java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)+0x22

---------------  S U M M A R Y ------------

Command Line: --enable-preview --enable-native-access=ALL-UNNAMED JavaClass

Host: Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz, 8 cores, 7G, Manjaro Linux
Time: Wed May 25 13:58:14 2022 CEST elapsed time: 0.110217 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007fec18000bf0):  JavaThread ""<no-name - thread is attaching>""
[error occurred during error reporting (printing current thread), id 0xb, SIGSEGV (0xb) at pc=0x00007fec8d25e78c]

Stack: [0x00007fec23801000,0x00007fec24000000],  sp=0x00007fec23ffe160,  free space=8180k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x85e842]  java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)+0x22
V  [libjvm.so+0xc4132b]  ObjectMonitor::INotify(JavaThread*)+0x13b
V  [libjvm.so+0xc4275f]  ObjectMonitor::notifyAll(JavaThread*)+0x8f
V  [libjvm.so+0x82dbee]  InstanceKlass::set_initialization_state_and_notify(InstanceKlass::ClassState, JavaThread*)+0xae
V  [libjvm.so+0x836ea8]  InstanceKlass::initialize_impl(JavaThread*)+0x738
V  [libjvm.so+0xad5a9a]  LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, JavaThread*)+0x16a
V  [libjvm.so+0xad64cb]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x2bb
V  [libjvm.so+0x8538b7]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x177
V  [libjvm.so+0x853e37]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x37
j  java.lang.Thread.genThreadName()Ljava/lang/String;+13 java.base@19-ea
j  java.lang.Thread.<init>(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V+2 java.base@19-ea
v  ~StubRoutines::call_stub 0x00007fec78537cc6
V  [libjvm.so+0x8589f5]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x315
V  [libjvm.so+0x85a01a]  JavaCalls::call_special(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Handle, Handle, JavaThread*)+0x1aa
V  [libjvm.so+0xe11612]  JavaThread::allocate_threadObj(Handle, char const*, bool, JavaThread*)+0xc2
V  [libjvm.so+0x9042aa]  attach_current_thread.part.0+0x19a
V  [libjvm.so+0xe3e02b]  ProgrammableUpcallHandler::on_entry(OptimizedEntryBlob::FrameData*)+0x15b
v  blob 0x00007fec78661b91
C  [libffm.so+0x3514]  f(char const* (*)())+0x1b
C  [libffm.so+0x3eb8]  void std::__invoke_impl<void, void (*)(char const* (*)()), char const* (*)()>(std::__invoke_other, void (*&&)(char const* (*)()), char const* (*&&)())+0x34
C  [libffm.so+0x3e2d]  std::__invoke_result<void (*)(char const* (*)()), char const* (*)()>::type std::__invoke<void (*)(char const* (*)()), char const* (*)()>(void (*&&)(char const* (*)()), char const* (*&&)())+0x37
C  [libffm.so+0x3d9d]  void std::thread::_Invoker<std::tuple<void (*)(char const* (*)()), char const* (*)()> >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>)+0x43
C  [libffm.so+0x3d56]  std::thread::_Invoker<std::tuple<void (*)(char const* (*)()), char const* (*)()> >::operator()()+0x18
C  [libffm.so+0x3d3a]  std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(char const* (*)()), char const* (*)()> > >::_M_run()+0x1c

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.Thread.genThreadName()Ljava/lang/String;+13 java.base@19-ea
j  java.lang.Thread.<init>(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V+2 java.base@19-ea
v  ~StubRoutines::call_stub 0x00007fec78537cc6

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000018

[abridged -- see hs_err.txt in attachment]

REGRESSION : Last worked in version 18.0.1
FREQUENCY : often
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
$ g++ -fPIC -shared -o libffm.so  nativemethod.cpp
$ javac --enable-preview -source 19 JavaClass.java
$ LD_LIBRARY_PATH=. java --enable-preview --enable-native-access=ALL-UNNAMED JavaClass

---------- BEGIN SOURCE ----------
nativemethod.cpp:

#include <iostream>
#include <thread>

using namespace std;

extern ""C"" {
void nativeMethod(const char* (*) ());
}

void f(const char* getMessage()) {
  for (auto i = 0; i < 100; ++i)
    cout << getMessage() << endl;
};

void nativeMethod(const char* getMessage()) {
  auto t1 = thread{f, getMessage};
  auto t2 = thread{f, getMessage};
  t1.join();
  t2.join();
}

JavaClass.java:

import java.lang.foreign.Addressable;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.Linker;
import java.lang.foreign.MemorySession;
import java.lang.foreign.SymbolLookup;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

import static java.lang.foreign.SegmentAllocator.implicitAllocator;

public class JavaClass {

  static {
    System.loadLibrary(""ffm"");
  }

  public static Addressable getMessage() {
    return implicitAllocator().allocateUtf8String(""Hello World!"").address();
  }

  public static void main(String... args) {
    try {
      var linker = Linker.nativeLinker();
      var symbolLookup = SymbolLookup.loaderLookup();
      var symbol = symbolLookup.lookup(""nativeMethod"").orElseThrow();
      var functionDesc = FunctionDescriptor.ofVoid(ValueLayout.ADDRESS);
      var methodHandle = linker.downcallHandle(symbol, functionDesc);
      var upcallMethodType = MethodType.methodType(Addressable.class);
      var upcallFunctionDesc = FunctionDescriptor.of(ValueLayout.ADDRESS);
      var upcallMethodHandle = MethodHandles.lookup().findStatic(JavaClass.class, ""getMessage"", upcallMethodType);
      var upcallSymbol = linker.upcallStub(upcallMethodHandle, upcallFunctionDesc, MemorySession.openImplicit());
      methodHandle.invoke(upcallSymbol);
    } catch (Throwable e) {
      System.out.println(e);
    }
  }
}",,,,,,,,,,JDK-8291135,JDK-8291285,JDK-8289016,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289079,,,,,,,JDK-8288064,JDK-6412693,,,,,,,"2022-06-07 23:14;iklam;hs_err.txt;https://bugs.openjdk.org/secure/attachment/99420/hs_err.txt",,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i2x8mz:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-06-07 23:18;iklam;I moved the hs_err file to bug attachment to make it easier to navigate this bug report.;;;","2022-06-07 23:26;iklam;I am able to reproduce the crash on latest jdk19 build. [~sswsharm] you need to set ""LD_LIBRARY_PATH=."" in the environment.

In fastdebug build, the hs_err is similar to the one in the bug report. The cause is this:

#  Internal Error (/jdk2/zoo/open/src/hotspot/share/classfile/javaClasses.cpp:1949), pid=3881588, tid=3881622
#  assert(holder != __null) failed: Java Thread not initialized
;;;","2022-06-08 00:13;dholmes;I suspect Loom has caused this. The thread status was moved to a FieldHolder class but we seem to be trying to update that status in the context of the Thread constructor, before FieldHolder has been initialized.;;;","2022-06-08 00:18;dholmes;Here is the problem:

   public Thread() {
        this(null, genThreadName(), 0, null, 0, null);
    }

During construction we call genThreadName which can trigger the classloading and initialization of the ThreadNumbering helper class. If this happens concurrently from two threads one will have to block, but blocking causes the VM to change the thread status, but the thread status is stored in the FieldHolder instance and that has not yet been initialized.

The classloading and initialization will happen when the first auto-named thread is created - which in the test case happens to be by JNI attaching threads from the ""foreign"" API.

Moving this to core-libs.;;;","2022-06-08 00:32;dholmes;However it is not clear to me why we are changing the thread status on a notifyAll call:

V [libjvm.so+0x85e842] java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)+0x22
V [libjvm.so+0xc4132b] ObjectMonitor::INotify(JavaThread*)+0x13b 

Which thread is it being invoked upon? The current thread shouldn't be changing status. The notified thread will change status but it must have already set a ""blocking"" status in the first place - so why didn't we crash then?

Update: I think we have something subtle going on in relation to thread state changes. Most of the changes are predicated on the target being ""alive"" and at this point for the attaching thread it is not clear this is seen to be the case. Then we have one state change:

static void wait_reenter_end(JavaThread *java_thread, bool active) {
    if (active) {
      java_thread->get_thread_stat()->contended_enter_end();
    }
    set_thread_status(java_thread, JavaThreadStatus::RUNNABLE);
  }

which is unconditional. So that could explain the actual crash. It doesn't change the fact we shouldn't be doing this kind of synchronization whilst the thread is still in the process of attaching.
;;;","2022-06-08 01:46;alanb;I moved the generating of the thread name to the end of Thread constructor so if there is any class loading/init generating the name is done when the fields are set. This avoids the crash with the test case.

Note that the crash that I observed initially isn't the same as reported, instead, it's the monitor enter where JavaThreadBlockedOnMonitorEnterState changes the thread state. It might be that it happens on t1 sometimes, t2 other times.

Stack: [0x00007fead451e000,0x00007fead4d1d000],  sp=0x00007fead4d1b120,  free space=8180k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8886f2]  java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)+0x22
V  [libjvm.so+0xc6ef03]  ObjectMonitor::enter(JavaThread*)+0x5a3
V  [libjvm.so+0xdee4ac]  ObjectSynchronizer::enter(Handle, BasicLock*, JavaThread*)+0xdc
V  [libjvm.so+0x85bd4c]  InstanceKlass::link_class_impl(JavaThread*)+0x26c
V  [libjvm.so+0x85ec2b]  InstanceKlass::initialize_impl(JavaThread*)+0x16b
V  [libjvm.so+0xb0046a]  LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, JavaThread*)+0x16a
V  [libjvm.so+0xb00e9b]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x2bb
V  [libjvm.so+0x87bc27]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x177
V  [libjvm.so+0x87c1a7]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x37
j  java.lang.Thread.genThreadName()Ljava/lang/String;+13 java.base@19-internal
j  java.lang.Thread.<init>(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V+2 java.base@19-internal
v  ~StubRoutines::call_stub 0x00007feb4c40acc6
V  [libjvm.so+0x8828c5]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x315
V  [libjvm.so+0x883eea]  JavaCalls::call_special(JavaValue*, Handle, Klass*, Symbol*, Symbol*, Handle, Handle, JavaThread*)+0x1aa
V  [libjvm.so+0xe3c422]  JavaThread::allocate_threadObj(Handle, char const*, bool, JavaThread*)+0xc2
V  [libjvm.so+0x92e18a]  attach_current_thread.part.0+0x19a
V  [libjvm.so+0xe7552b]  UpcallLinker::on_entry(UpcallStub::FrameData*)+0x15b
v  blob 0x00007feb4c533511
C  [libffm.so+0x8b52]  f(char const* (*)())+0x1b
C  [libffm.so+0xa1b2]  void std::_Bind_simple<void (*(char const* (*)()))(char const* (*)())>::_M_invoke<0ul>(std::_Index_tuple<0ul>)+0x40
C  [libffm.so+0xa0bd]  std::_Bind_simple<void (*(char const* (*)()))(char const* (*)())>::operator()()+0x1b
C  [libffm.so+0xa056]  std::thread::_Impl<std::_Bind_simple<void (*(char const* (*)()))(char const* (*)())> >::_M_run()+0x1c;;;","2022-06-08 14:33;dholmes;> I moved the generating of the thread name to the end of Thread constructor so if there is any class loading/init generating the name is done when the fields are set. 

We should check that any code in the VM that accesses the thread name also has a null check as logically we always expect a thread name to be set. This could include JVMTI code if the thread still blocks due to the ThreadNumbering class initialization - though in the JNI attach case it may be the thread will be ignored due to the fact it is still marked as attaching.

The ability to have a partially constructed thread block due to synchronization like this makes things more fragile than I would like. It may be better to preload/init those classes so that this cannot happen. ??;;;","2022-06-08 17:17;dholmes;Or we re-open JDK-6412693 and use the ServiceThread to do the construction on the attaching threads behalf. This partial construction problem has bitten us a few ways in the past.;;;","2022-06-09 08:16;coleenp;Taking out the Java lock to synchronize during linking and initialization helps this dependency.;;;","2022-06-09 08:54;alanb;[~coleenp] Yes, that would fix this too but I assume too late for JDK 19.  The Thread constructor for platform threads need to handle the primordial thread case, the JNI attach case, plus the normal case where the parent creates a child. The former cases have always been somewhat fragile in that SM permission checks, instrumentation, and more can lead to executing code in the context of a partly initialized thread (JDK-8274668 is a recent one, David has linked to others). The re-implementation of Thread tries to minimise the code executed when a Thread initialises itself but I missed the case where several threads may JNI attach at the same time and naming them requires that ThreadNumbering be loaded/initialized. There are several ways to fix that and I will have a PR soon. There is still the issue of static or dynamic instrumentation where the Thread initialization is modified to call into arbitrary code but I don't think we can solve that completely.;;;","2022-06-12 19:04;dholmes;I don't see how the linking/initialization locking has any relevance here? The async exception could happen anywhere in the Java code. The locking code is native. Or did virtual threads also introduce changes here?

Update: the locking changes mean there is no longer a Java thread state change as we don't expose VM locking/blocking states at the Java level.;;;","2022-06-20 23:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/28
Date: 2022-06-16 13:34:18 +0000;;;","2022-06-22 00:49;dukebot;Changeset: 7cf71bc2
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-06-22 07:48:14 +0000
URL:       https://git.openjdk.org/jdk19/commit/7cf71bc2d3ae3d84552f06358e70204dc65552fc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build is broken due to SuperWordMaxVectorSize when C2 is disabled after JDK-8287697,JDK-8287980,5076446,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jiefu,jiefu,jiefu,2022-06-07 22:04,2022-06-23 10:39,2023-10-01 09:56,2022-06-07 23:59,19,,,,,,,,,,,19,hotspot,,0,noreg-build,oracle-triage-11,oracle-triage-17,oracle-triage-19,tencent-interest,,,,,,,,,,,,,,,,"Rerpoduce:
 configure --with-jvm-features=-compiler2 ..
 make images

```
* For target hotspot_variant-server_libjvm_objs_vm_version_x86.o:
In file included from /root/df/jdk/src/hotspot/cpu/x86/vm_version_x86.cpp:34:
/root/df/jdk/src/hotspot/cpu/x86/vm_version_x86.cpp: In static member function 'static void VM_Version::get_processor_features()':
/root/df/jdk/src/hotspot/share/runtime/globals_extension.hpp:35:32: error: 'Flag_SuperWordMaxVectorSize_enum' was not declared in this scope; did you mean 'Flag_MaxVectorSize_enum'?
   35 | #define FLAG_MEMBER_ENUM(name) Flag_##name##_enum
      |                                ^~~~~
/root/df/jdk/src/hotspot/share/runtime/globals_extension.hpp:70:60: note: in expansion of macro 'FLAG_MEMBER_ENUM'
   70 | #define FLAG_IS_DEFAULT(name)         (JVMFlag::is_default(FLAG_MEMBER_ENUM(name)))
      |                                                            ^~~~~~~~~~~~~~~~
/root/df/jdk/src/hotspot/cpu/x86/vm_version_x86.cpp:1298:7: note: in expansion of macro 'FLAG_IS_DEFAULT'
 1298 |   if (FLAG_IS_DEFAULT(SuperWordMaxVectorSize)) {
      |       ^~~~~~~~~~~~~~~
/root/df/jdk/src/hotspot/cpu/x86/vm_version_x86.cpp:1302:24: error: 'SuperWordMaxVectorSize' was not declared in this scope
 1302 |       FLAG_SET_DEFAULT(SuperWordMaxVectorSize, MIN2(MaxVectorSize, (intx)32));
      |                        ^~~~~~~~~~~~~~~~~~~~~~
/root/df/jdk/src/hotspot/share/runtime/globals_extension.hpp:75:41: note: in definition of macro 'FLAG_SET_DEFAULT'
   ... (rest of output omitted)
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287697,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xdsb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-07 22:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9078
Date: 2022-06-08 05:07:14 +0000;;;","2022-06-07 23:59;dukebot;Changeset: 47d3c2a1
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-06-08 06:55:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/47d3c2a175a839add63d5453910e109923c41161
;;;","2022-06-08 01:26;rcastanedalo;ILW = build breakage; non-standard configuration (C2 disabled); build with C2 enabled = HMM = P2;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Throw exception for missing values in .jpackage.xml,JDK-8287971,5076437,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,almatvee,almatvee,2022-06-07 19:16,2022-07-27 03:47,2023-10-01 09:56,2022-06-21 14:16,18,19,,,,,,,,,,19,tools,,0,sn_120,sn_121,,,,,,,,,,,,,,,,,,,"Currently when we loading .jpackage.xml we will use default values for missing xml elements such as <app-store>. This might be fine in some cases, but in some cases it will break things. For example JDK 18 does not have <app-store> element and if such image is used with JDK 19 to sign it we will use false for <app-store> which will result in incorrect signing if app image was generated with --mac-app-store.",,,,,,,,,,JDK-8288924,JDK-8291132,JDK-8291283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286850,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xdqb:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-06-08 18:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9098
Date: 2022-06-09 01:21:30 +0000;;;","2022-06-13 10:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/9
Date: 2022-06-13 17:01:48 +0000;;;","2022-06-21 14:16;dukebot;Changeset: 70008da6
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-06-21 21:12:21 +0000
URL:       https://git.openjdk.org/jdk19/commit/70008da6b47c371c4d15162ca38e1521cd09acf9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: jdk/incubator/vector/*VectorTests failing,JDK-8287970,5076435,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fjiang,fjiang,fjiang,2022-06-07 19:12,2023-07-09 19:12,2023-10-01 09:56,2022-06-08 05:43,19,,,,,,,,,,,19,hotspot,,0,c2,oraclejdk-na,oracle-triage-19,vectorapi,,,,,,,,,,,,,,,,,"JDK-8284960 added a new vector operation VectorOperations.BIT_COUNT, which needs the support of PopCountV*. The following tests failed when enabling UseRVV:

jdk/incubator/vector/Byte256VectorTests.java
jdk/incubator/vector/ByteMaxVectorTests.java
jdk/incubator/vector/Int256VectorTests.java
jdk/incubator/vector/IntMaxVectorTests.java
jdk/incubator/vector/Short256VectorTests.java
jdk/incubator/vector/ShortMaxVectorTests.java

Tests are failing with ""assert(n_type->isa_vect() == __null || lrg._is_vector || ireg == Op_RegD || ireg == Op_RegL || ireg == Op_RegVectMask) failed: vector must be in vector registers"" because C2 instruct ""vpopcountI"" stores the result into a general-purpose register (GPR) instead of a vector register.

Currently, riscv vector extension vpopc.m instruction counts the number of mask elements of the active elements of the vector source mask register that has the value 1 and writes the result to a scalar x register. [1] PopCountV* needs to write back the pop counting results to vector registers, there is no single instruction in rvv that can satisfy the requirement. So we decide to remove the vpopcountI instruct for now.

[1]: https://github.com/riscv/riscv-v-spec/releases/download/v1.0/riscv-v-spec-1.0.pdf",,,,,,,,,,JDK-8311707,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284960,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,19,,linux,,,,,,"0|i2xdpv:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-07 23:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9079
Date: 2022-06-08 06:06:08 +0000;;;","2022-06-08 01:32;rcastanedalo;ILW = missing riscv support for vector operation; test failures when enaling UseRVV; disable UseRVV = MMM = P3;;;","2022-06-08 05:43;dukebot;Changeset: 5ad6286b
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-06-08 12:38:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5ad6286b73889e47f40d0051a96ef91137faa25c
;;;","2023-03-09 22:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/11
Date: 2023-03-10 06:10:20 +0000;;;","2023-06-19 20:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
System.loadLibrary does not work on Big Sur if JDK is built with macOS SDK 10.15 and earlier,JDK-8287917,5076362,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,ysatowse,mchung,mchung,2022-06-07 10:11,2023-02-01 07:41,2023-10-01 09:56,2022-06-14 17:15,17,,,,,,,,,,,20,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,,,,,,,,,,,,,,"For backward compatility, applications built with macOS SDK 10.15 and earlier running on Big Sur will get the OS version 10.16.

For applications built with a new release of Xcode which features the macOS 11 SDK,  the major version of Big Sur will return 11.

The current implementation of System.loadLibrary supports the dynamic library cache on macOS version >= 11 which won't work if JDK is built with macOS SDK 10.15 and earlier.   As a reference, Xcode 12.1 is on SDK 10.15.6.  ",,,,,,,,,,JDK-8288162,JDK-8291894,JDK-8292148,JDK-8289685,JDK-8288159,JDK-8293506,JDK-8288161,JDK-8288160,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286874,,,,,JDK-8275703,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2xd9n:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ae6d091,,,,,,,Verified,,"2022-06-09 18:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9077
Date: 2022-06-08 04:59:07 +0000;;;","2022-06-14 17:15;dukebot;Changeset: fe807217
Author:    Yoshiki Sato <ysatowse@openjdk.org>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2022-06-15 00:12:53 +0000
URL:       https://git.openjdk.org/jdk/commit/fe807217a79753f84c00432e7451c17baa6645c5
;;;","2022-06-24 12:18;jdowland;Fix Request (17u)

Please consider this for 17u for Oracle parity. It's a clean backport. The modified test passes for me on a macOS Big Sur system with local SDK version 10.14.

Thanks;;;","2022-06-24 12:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/506
Date: 2022-06-24 19:17:31 +0000;;;","2022-08-02 04:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1298
Date: 2022-08-02 10:12:51 +0000;;;","2022-08-03 18:19;ysatowse;Fix request to backport to jdk19u: 
On macOS 11.x, system libraries are loaded from dynamic linker cache and the libraries are no longer present on the filesystem.  JDK-8275703 changed the existing code to load a native library using dlopen.  But the fix doesn't work if the JDK is built with macOS SDK 10.15 and earlier since it returns 10.16 as the os version.  This clean backport fixes this issue.;;;","2022-08-03 19:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/9
Date: 2022-08-04 01:03:12 +0000;;;","2022-09-07 04:26;jdowland;Fix Request (11u)

Please consider this for 11u-dev for Oracle parity. It's a clean backport. The modified test passes for me on a macOS Big Sur system, although I have been limited in terms of reproducing the failure pre-patch (details in the GitHub PR comments)

Thanks ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GTK L&F : Background of tree icons are red ,JDK-8287912,5076356,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,landrews,landrews,2022-06-07 08:56,2022-09-22 23:33,2023-10-01 09:56,2022-09-06 03:58,17,18,19,8,,,,,,,,20,client-libs,,0,gtk,gtk-laf,sn_126,,,,,,,,,,,,,,,,,,"Step to reproduce
---------------------------
1) Run Bug4196987.java with GTK Look and feel also without GTK look and feel. If the background of tree icons are red the test passes, else test fails.

This is seen on Ubuntu 22.04 , Ubuntu 20.04.
Attached the screen shot of the same.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8078498,,,,,,,,,,,,,,,,,"2022-06-07 08:54;landrews;Bug4196987.java;https://bugs.openjdk.org/secure/attachment/99414/Bug4196987.java","2022-06-07 08:56;landrews;Screen Shot 2022-06-07 at 10.18.00 AM.png;https://bugs.openjdk.org/secure/attachment/99413/Screen+Shot+2022-06-07+at+10.18.00+AM.png","2022-06-07 08:56;landrews;Screen Shot 2022-06-07 at 10.18.42 AM.png;https://bugs.openjdk.org/secure/attachment/99412/Screen+Shot+2022-06-07+at+10.18.42+AM.png",,,,,,,,,,,,,,,,,,linux_ubuntu,,,,,,"0|i2xd8b:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-09-01 09:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10112
Date: 2022-09-01 06:27:17 +0000;;;","2022-09-06 03:58;dukebot;Changeset: a92c1ff7
Author:    Abhishek Kumar <abhishek.cx.kumar@oracle.com>
Committer: Jayathirth D V <jdv@openjdk.org>
Date:      2022-09-06 10:55:06 +0000
URL:       https://git.openjdk.org/jdk/commit/a92c1ff700925b400ee92057ae3dc3030487a886
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UnreadableRB case in MissingResourceCauseTest is not working reliably on Windows,JDK-8287902,5076336,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-06-07 05:13,2022-11-22 02:37,2023-10-01 09:56,2022-06-10 03:10,19,,,,,,,,,,,20,core-libs,,0,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,"The test  `test/jdk/java/util/ResourceBundle/Control/MissingResourceCauseTest.java` verifies different failure modes of resource bundles. One of the failures is that the runner class, `MissingResourceCauseTestRun.java`, creates a file `UnreadableRB`, and runs `chmod 000` on it, to make it unreadable by the test. Then MissingResourceCauseTest is called, and the `UnreadableRB` file is removed.

This does not work reliably on Windows. On msys2, `chmod` is essentially a no-op, so the file is not made unreadable, and hence the test fails. In my personal cygwin test environment, the chmod command does have some effect, but it is still not enough to make the file unreadable, and so the test fails.

The test was originally a shell script test that got converted to Java in JDK-4354216. The original shell script code explicitly excluded Windows from testing. This was changed in the rewrite, for reasons I cannot determine.

What suprises me, though, is the ""how can this ever has worked???"" factor. Apparently the test passes on the current Cygwin setup on GHA. I have failed to reproduce the working conditions that makes a file actually unreadable for the owner on Windows. I've searched the web to figure out how to properly set file permissions on Windows to make the file unreadable, using Windows native tools, to no avail. I've even asked a Stack Overflow question[1]; which as of yet is still unanswered.

Since I feel I've spent far more time than reasonable trying to get this to work properly, I suggest we instead skip the unreadable test on Windows. It is clearly unstable and highly depending on the Windows environment, the test was never originally supported or intended for Windows, and at the of the day, testing file unreadability is not an important regression test for JDK-4354216.

[1] https://stackoverflow.com/questions/72528318/what-file-permissions-make-a-file-unreadable-by-owner-in-windows",,,,,,,,,,JDK-8291413,JDK-8297407,JDK-8290118,JDK-8290152,JDK-8291290,JDK-8288349,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xd3v:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-06-07 05:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9061
Date: 2022-06-07 12:19:29 +0000;;;","2022-06-10 03:10;dukebot;Changeset: 975316e3
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-06-10 10:07:10 +0000
URL:       https://git.openjdk.org/jdk/commit/975316e3e5f1208e4e15eadc2493d25c15554647
;;;","2022-07-11 08:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/134
Date: 2022-07-11 15:07:28 +0000;;;","2022-07-11 13:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/546
Date: 2022-07-11 19:58:31 +0000;;;","2022-07-12 00:17;clanger;Fix Request (17u) on behalf of George Adams:
Requesting backport of this test fix support integration of updated GHA. Risk is low, only a test fix. Applies clean, GHA is green.;;;","2022-07-12 09:24;dukebot;Changeset: 39715f3d
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-07-11 17:46:22 +0000
URL:       https://git.openjdk.org/jdk/commit/39715f3da7e8749bf477b818ae06f4dd99c223c4
;;;","2022-11-21 15:09;gdams;Fix Request (11u):
Requesting backport of this test fix support integration of updated GHA. Risk is low, only a test fix. Applies clean, GHA is green.;;;","2022-11-21 15:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1542
Date: 2022-11-21 23:05:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loom: Failures with -XX:+VerifyStack,JDK-8287901,5076335,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rpressler,shade,shade,2022-06-07 04:25,2022-06-09 22:39,2023-10-01 09:56,2022-06-08 12:54,19,,,,,,,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,"Found this oddity when debugging x86_32 port, but x86_64 seems to suffer from a similar issue. Run, for example:

$ CONF=linux-x86_64-server-fastdebug make images run-test TEST=jdk/internal/vm/Continuation/Basic.java TEST_VM_OPTS=""-XX:+VerifyStack""

```
test Basic.test1(): success
test Basic.testException1(): success
overlapping storage
 0x00007fcbc5d07400: 0x00000000d070eb88 param 60 object for #2
 0x00007fcbc5d07400: 0x00000000d070eb88 saved fp for #3
```

See how ""param 60"" and ""saved fp"" are at the same stack slot.

```
 0x00007fcbc5d07460: 0x00007fcbe8b63204 #3 nmethod 0x00007fcbe8cbef10 for method J jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V
                                        unextended_sp for #4
                                        sp for #4
 0x00007fcbc5d07458: 0x00007fcbe8b63204 return address for #4
 0x00007fcbc5d07450: 0x00007fcbc5d074c8 saved fp for #4
 0x00007fcbc5d07448: 0x00007fcbe8cc55e3
 0x00007fcbc5d07440: 0x0000000000000000 parent held monitor count
 0x00007fcbc5d07444: 0xe8cc55e300000000 pin_count
 0x00007fcbc5d07438: 0x00007fcbc5d07568 parent fastpath
 0x00007fcbc5d07434: 0xc5d075680000002f argsize
 0x00007fcbc5d07430: 0x0000002f00000000 flags
 0x00007fcbc5d07428: 0x0000000000000000 chunk
 0x00007fcbc5d07420: 0x00000000d01baa38 continuation
 0x00007fcbc5d07418: 0x0000000000000000 parent
 0x00007fcbc5d07410: 0x00007fcb00001234 continuation entry
                                        unextended_sp for #3
                                        sp for #3
 0x00007fcbc5d07408: 0x0000000000000001 return address for #3
 0x00007fcbc5d07400: 0x00000000d070eb88 param 60 object for #2
                                        saved fp for #3
 0x00007fcbc5d073f8: 0x00000000d070eb78 param 59 object for #2
 0x00007fcbc5d073f0: 0x00000000d070eb68 param 58 object for #2
 0x00007fcbc5d073e8: 0x00000000d070eb58 param 57 object for #2
 0x00007fcbc5d073e0: 0x00000000d070eb48 param 56 object for #2
 0x00007fcbc5d073d8: 0x00000000d070eb38 param 55 object for #2
 0x00007fcbc5d073d0: 0x00000000d070eb28 param 54 object for #2
 0x00007fcbc5d073c8: 0x00000000d070eb18 param 53 object for #2
 0x00007fcbc5d073c0: 0x00000000d070eb08 param 52 object for #2
 0x00007fcbc5d073b8: 0x00000000d070eaf8 param 51 object for #2
 0x00007fcbc5d073b0: 0x00000000d070eae8 param 50 object for #2
 0x00007fcbc5d073a8: 0x00000000d070ead8 param 49 object for #2
 0x00007fcbc5d073a0: 0x00000000d070eac8 param 48 object for #2
 0x00007fcbc5d07398: 0x00000000d070eab8 param 47 object for #2
 0x00007fcbc5d07390: 0x00000000d070eaa8 param 46 object for #2
 0x00007fcbc5d07388: 0x00000000d070ea98 param 45 object for #2
 0x00007fcbc5d07380: 0x00000000d070ea88 param 44 object for #2
 0x00007fcbc5d07378: 0x00000000d070ea78 param 43 object for #2
 0x00007fcbc5d07370: 0x00000000d070ea68 param 42 object for #2
 0x00007fcbc5d07368: 0x00000000d070ea58 param 41 object for #2
 0x00007fcbc5d07360: 0x4034000000000000 param 40 double for #2
 0x00007fcbc5d07358: 0x4033000000000000 param 39 double for #2
 0x00007fcbc5d07350: 0x4032000000000000 param 38 double for #2
 0x00007fcbc5d07348: 0x4031000000000000 param 37 double for #2
 0x00007fcbc5d07340: 0x0000000041800000 param 36 float for #2
 0x00007fcbc5d07338: 0x0000000041700000 param 35 float for #2
 0x00007fcbc5d07330: 0x0000000041600000 param 34 float for #2
 0x00007fcbc5d07328: 0x402a000000000000 param 33 double for #2
 0x00007fcbc5d07320: 0x4028000000000000 param 32 double for #2
 0x00007fcbc5d07318: 0x4026000000000000 param 31 double for #2
 0x00007fcbc5d07310: 0x4024000000000000 param 30 double for #2
 0x00007fcbc5d07308: 0x4022000000000000 param 29 double for #2
 0x00007fcbc5d07300: 0x0000000000000014 param 20 int for #2
 0x00007fcbc5d072f8: 0x0000000000000013 param 19 int for #2
 0x00007fcbc5d072f0: 0x0000000000000012 param 18 int for #2
 0x00007fcbc5d072e8: 0x0000000000000011 param 17 int for #2
 0x00007fcbc5d072e0: 0x0000000000000010 param 16 int for #2
 0x00007fcbc5d072d8: 0x000000000000000f param 15 int for #2
 0x00007fcbc5d072d0: 0x000000000000000e param 14 int for #2
 0x00007fcbc5d072c8: 0x000000000000000d param 13 int for #2
 0x00007fcbc5d072c0: 0x000000000000000c param 12 int for #2
 0x00007fcbc5d072b8: 0x000000000000000b param 11 int for #2
 0x00007fcbc5d072b0: 0x000000000000000a param 10 int for #2
 0x00007fcbc5d072a8: 0x0000000000000009 param 9 int for #2
 0x00007fcbc5d072a0: 0x0000000000000008 param 8 int for #2
 0x00007fcbc5d07298: 0x0000000000000007 param 7 int for #2
 0x00007fcbc5d07290: 0x0000000000000002 #2 nmethod 0x00007fcbe8ccce10 for method J Basic.barMany(JIIIIIIIIIIIIIIIIIIIIDDDDDFFDDDDDDFFFDDDDLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;
```

The failure comes from the stack rooted at `UncommonTrapBlob`, which points to something going haywire after deopt?

```
...
 0x00007f8bbaeaab40: 0x00007f8bb0709ea8 #1 <UncommonTrapBlob>
                                        unextended_sp for #2
                                        sp for #2
 0x00007f8bbaeaab38: 0x00007f8bd85005a4 return address for #2
 0x00007f8bbaeaab30: 0x00000000ffba04d8 stack 1 for #2 (scope 0)
                                        saved fp for #2
                                        narrow oop for #2
                                        sp for #1
 0x00007f8bbaeaab28: 0x00007f8bd7da3241 return address for #1
 0x00007f8bbaeaab20: 0x00000000ffba04d8 saved fp for #1
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286642,,,,,,,,,,JDK-8284161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xd3n:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-07 07:45;rpressler;This is a problem in Frame::describe, which is used for both printing stack layout and validating it. The ""saved fp"" isn't actually there.;;;","2022-06-07 11:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9066
Date: 2022-06-07 15:56:47 +0000;;;","2022-06-08 12:54;dukebot;Changeset: b6233985
Author:    Ron Pressler <rpressler@openjdk.org>
Committer: Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2022-06-08 19:50:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b62339855571b234979e2cf250c9251d1d063a06
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lw4] test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/VerifierInlineTypes.java fails,JDK-8287898,5076331,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-06-07 03:50,2022-06-07 04:18,2023-10-01 09:56,2022-06-07 04:18,repo-valhalla,,,,,,,,,,,repo-valhalla,tools,,0,lw4,,,,,,,,,,,,,,,,,,,,"With a message: class format error - invalid modifiers 0x118 in class withfieldL

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xd2r:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-07 03:55;sadayapalam;As commented in https://github.com/openjdk/valhalla/pull/688 for JDK-8286491:

Changes necessary to rip out PERMITS_VALUE flag bit are not included - I have simply redefined the value of the flag bit to ""get it out of the way"" 

(This is referring to VM changes I made)

The redefining of the value of the flag bit to ""get it out of the way"" - didn't fully get it out of the way and was causing this test failure.;;;","2022-06-07 04:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/706
Date: 2022-06-07 11:09:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Augment src/jdk.internal.le/share/legal/jline.md with information on 4th party dependencies,JDK-8287897,5076329,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-06-07 03:21,2023-08-04 11:27,2023-10-01 09:56,2022-06-09 00:17,19,,,,,,,,,,,19,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-doc,,,,,,,,,,,,,,,,Several 4th party dependencies need entries in src/jdk.internal.le/share/legal/jline.md.,,,,,,,,,,JDK-8307592,JDK-8307333,JDK-8310246,JDK-8310245,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313792,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xd2b:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-06-07 07:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9065
Date: 2022-06-07 14:34:30 +0000;;;","2022-06-09 00:17;dukebot;Changeset: bc28baeb
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-06-09 07:11:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bc28baeba9360991e9b7575e1fbe178d873ccfc1
;;;","2023-04-28 05:39;goetz;Fix request [11U,17u]

I backport this to fix the license and simplify further jline backports.
No risk, only a license text change.
Clean backport.
SAP nightly testing passed.;;;","2023-04-28 05:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1312
Date: 2023-04-28 12:40:22 +0000;;;","2023-05-05 06:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1858
Date: 2023-05-05 13:19:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PropertiesTest.sh fail on msys2,JDK-8287896,5076328,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-06-07 03:12,2022-11-22 04:19,2023-10-01 09:56,2022-06-07 04:54,19,,,,,,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,"The test `test/jdk/java/util/Currency/PropertiesTest.sh` fails on msys2, since it does not properly detect this environment.
",,,,,,,,,,JDK-8290109,JDK-8297420,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xd23:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-06-07 03:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9057
Date: 2022-06-07 10:14:47 +0000;;;","2022-06-07 04:53;dukebot;Changeset: f1dd559e
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-06-07 11:53:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f1dd559e20342b892d0c1ed0314e5bba451bc5d3
;;;","2022-07-09 05:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/542
Date: 2022-07-09 11:59:50 +0000;;;","2022-07-11 08:48;clanger;Fix request (17u) on behalf of George Adams:
Small test fix for support of MSYS2 that will help with the new GHA workflow. Applies clean, no risk as test only.;;;","2022-11-21 15:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1541
Date: 2022-11-21 23:00:34 +0000;;;","2022-11-22 03:17;gdams;Fix request (11u):
Small test fix for support of MSYS2 that will help with the new GHA workflow. Applies clean, no risk as test only.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some langtools tests fail on msys2,JDK-8287895,5076327,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-06-07 03:07,2023-01-25 03:32,2023-10-01 09:56,2022-06-08 07:11,19,,,,,,,,,,,19,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,"A bunch of langtools tests, which all rely on `test/langtools/tools/javac/Paths/Util.sh`, fails when run on Windows with msys2, since this environment is not properly detected.
",,,,,,,,,,JDK-8297419,JDK-8291659,JDK-8292965,JDK-8297776,JDK-8290099,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xd1v:",9223372036854775807,b26,,,,,,,,,,,"2022-06-07 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9056
Date: 2022-06-07 10:09:46 +0000;;;","2022-06-08 07:11;dukebot;Changeset: f7791ad0
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-06-08 14:04:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f7791ad0ea984d49ff26e6f30233d8dcee4305b8
;;;","2022-07-09 05:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/543
Date: 2022-07-09 12:01:11 +0000;;;","2022-07-11 08:49;clanger;Fix request (17u) on behalf of George Adams:
Small test fix for support of MSYS2 that will help with the new GHA workflow. Applies clean, no risk as test only. ;;;","2022-11-21 15:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1540
Date: 2022-11-21 22:57:28 +0000;;;","2022-11-22 03:18;gdams;Fix request (11u):
Small test fix for support of MSYS2 that will help with the new GHA workflow. Applies clean, no risk as test only.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Files.copy description of REPLACE_EXISTING is hard to read,JDK-8287889,5076167,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,bpb,webbuggrp,webbuggrp,2022-06-03 03:34,2022-06-23 00:00,2023-10-01 09:56,2022-06-14 11:01,18,7,,,,,,,,,,19,core-libs,,0,additional-information-received,dcsaw,noreg-doc,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Documentation for Files.copy with REPLACE_EXISTING flag says that replacement happens if target is not empty directory. It should be when it's empty instead since DirectoryNotEmptyException is raised otherwise.


",,,,,,,,,,JDK-8288579,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288326,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xc2z:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-06-06 23:04;tongwan;From the javadoc:
https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/nio/file/Files.html#copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption...)

The descriptions look fine.;;;","2022-06-06 23:45;alanb;I've changed the bug description as the issue isn't that the description of REPLACE_EXISTING is wrong, it's just that it's hard to read. It might be clearer if we re-worded it to

""Replace an existing file. A non-empty directory cannot be replaced. If the target file exists and is a symbolic link, then the symbolic link itself, not the target of the link, is replaced."";;;","2022-06-09 23:06;pnarayanaswa;Additional Information from submitter:
============================
ok, I missed the ""not"" for some reason. Still I agree, it'd be best to rewrite if possible. Thanks

It affects move() as well.
To me, saying ""the target file is replaced if it is not a non-empty directory."" means exactly that, i.e. when the directory is not empty and the option REPLACE_EXISTING is set, then it gets replaced which is incorrect. But maybe it's just me...;;;","2022-06-13 11:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9142
Date: 2022-06-13 18:40:05 +0000;;;","2022-06-14 10:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/16
Date: 2022-06-14 17:44:35 +0000;;;","2022-06-14 11:01;dukebot;Changeset: 5a8e1e43
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-14 17:59:06 +0000
URL:       https://git.openjdk.org/jdk19/commit/5a8e1e43a4436e6537fc96cfea4ea47d4a958c35
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect documentation for OutOfMemoryError: Requested array size exceeds VM limit,JDK-8287883,5076317,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgallard,smarks,smarks,2022-06-06 20:38,2022-07-19 01:02,2023-10-01 09:56,2022-06-28 10:00,17,18,,,,,,,,,,19,docs,,0,jdk17u-na,,,,,,,,,,,,,,,,,,,,"In the Troubleshooting Guide, the documentation for OOME contained errors. These were fixed in JDK 16 by JDK-8254804. The JDK 16 version of the ""Understand the OutOfMemoryError Exception"" section has the following, correct text:

https://docs.oracle.com/en/java/javase/16/troubleshoot/troubleshoot-memory-leaks.html#GUID-19F6D28E-75A1-4480-9879-D0932B2F305B

==========
Exception in thread thread_name: java.lang.OutOfMemoryError: Requested array size exceeds VM limit

    Cause: The detail message ""Requested array size exceeds VM limit"" indicates that the application (or APIs used by that application) attempted to allocate an array with a size larger than the VM implementation limit, irrespective of how much heap size is available.

    Action: Ensure that your application (or APIs used by that application) allocates an array with a size less than the VM implementation limit.
==========

However, in the JDK 17 and JDK 18 versions of this chapter, the incorrect text from the releases previous to JDK 16 has reappeared. This incorrect text now appears in the ""The java.lang.OutOfMemoryError Error"" section:

https://docs.oracle.com/en/java/javase/18/troubleshoot/troubleshooting-memory-leaks.html#GUID-19F6D28E-75A1-4480-9879-D0932B2F305B

==========
Detail Message: Requested array size exceeds VM limit

    Cause: The detail message Requested array size exceeds VM limit indicates that the application (or APIs used by that application) attempted to allocate an array with a size larger than the heap size (the virtual machine (VM) limit). For example, if an application attempts to allocate an array of 512 MB, but the maximum heap size is 256 MB, then a java.lang.OutOfMemoryError error will be thrown with the detail message Requested array size exceeds VM limit.

    Action: Usually the problem is either a configuration issue (heap size too small) or a bug that results from an application attempting to create a huge array (for example, when the number of elements in the array is computed using an algorithm that produces in an incorrect size).
==========

Corrections made to this material in JDK 16 need to be re-applied to the current version.",,,,,,,,,,JDK-8288233,JDK-8288213,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254804,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xczn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1c18c2e4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add MacOS 13 sanity testing in HS ATR task definitions,JDK-8287880,5076313,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-06-06 18:35,2022-09-04 22:49,2023-10-01 09:56,2022-06-07 13:48,19,,,,,,,,,,,19,hotspot,,0,ursqe-triaged,,,,,,,,,,,,,,,,,,,,Add  MacOS 13 SANITY testing ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xcyr:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The recently de-problemlisted TestTitledBorderLeak test is unstable,JDK-8287876,5076310,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-06-06 17:38,2023-05-30 06:53,2023-10-01 09:56,2022-06-07 16:13,19,,,,,,,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"The test failes time to time.The log:

After 30000: 8256936 free
After 31000: 8158496 free
After 32000: 8245376 free
After 33000: 8162696 free
After 34000: 8239000 free
After 35000: 8194512 free
After 36000: 8209040 free
After 37000: 8190480 free
After 38000: 8256936 free
After 39000: 8166896 free
After 40000: 8198464 free
After 41000: 8202424 free
After 42000: 8125232 free
After 43000: 8213976 free
After 44000: 8225648 free
After 45000: 8243224 free
After 46000: 8163184 free
After 47000: 8240280 free
After 48000: 8201176 free
After 49000: 8260928 free
After 50000: 8200264 free
After 51000: 8125736 free
After 52000: 8052456 free
After 53000: 8069560 free
After 54000: 8226776 free
After 55000: 8244632 free
After 56000: 8122992 free
After 57000: 8204824 free
After 58000: 8238568 free
After 59000: 8208960 free
After 60000: 8110976 free
After 61000: 8127256 free
After 62000: 8173824 free
After 63000: 8196192 free
After 64000: 8124488 free
After 65000: 8243000 free
After 66000: 8125056 free
After 67000: 8192824 free
After 68000: 8235752 free
After 69000: 8160360 free
After 70000: 8250688 free
After 71000: 8126880 free
After 72000: 8090112 free
After 73000: 8212376 free
After 74000: 8250824 free
After 75000: 8170568 free
After 76000: 8116440 free
After 77000: 8246048 free
After 78000: 8206712 free
After 79000: 8113784 free
After 80000: 8205008 free
After 81000: 8239248 free
After 82000: 8121320 free
After 83000: 8240104 free
After 84000: 8056904 free
After 85000: 8172544 free
After 86000: 8201336 free
After 87000: 3999112 free
----------System.err:(11/657)----------
java.lang.RuntimeException: Memory halved: there's a leak
        at TestTitledBorderLeak.main(TestTitledBorderLeak.java:46)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:1596)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Memory halved: there's a leak
",,,,,,,,,,JDK-8308068,JDK-8307992,JDK-8307993,JDK-8309115,JDK-8309116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306713,,,JDK-8287813,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xcy3:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-06-06 22:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9051
Date: 2022-06-07 04:15:49 +0000;;;","2022-06-07 16:13;dukebot;Changeset: bf439f8c
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-06-07 23:10:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bf439f8c93157a7f0e6489db2ccc56c5f7210402
;;;","2023-05-29 23:25;goetz;Fix request [11u,17u]

I backport this to fix an issue we regularly see in our nighlty tests.
No risk, only a test change.
Clean backport.
Test passes.;;;","2023-05-29 23:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1407
Date: 2023-05-30 06:27:10 +0000;;;","2023-05-29 23:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1912
Date: 2023-05-30 06:29:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
-XX:+AutoCreateSharedArchive doesn't work when JDK build is switched,JDK-8287869,5076302,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,iklam,iklam,2022-06-06 15:07,2022-06-09 22:33,2023-10-01 09:56,2022-06-07 16:18,19,,,,,,,,,,,19,hotspot,,0,cds,,,,,,,,,,,,,,,,,,,,"Expected: When you switch to a different JDK build, -XX:+AutoCreateSharedArchive should automatically update the specified dynamic CDS archive to match the new JDK.

Actual: the new JDK fails to load the base archive, and thus is unable to generate the dynamic archive.

=================================
$ rm -f /tmp/foo.jsa
$ /mybld/java/images/jdk/bin/java -Xlog:cds -Xlog:cds+map=debug:file=cds.map:none:filesize=0 -XX:+AutoCreateSharedArchive -cp ~/tmp/HelloWorld.jar -XX:SharedArchiveFile=/tmp/foo.jsa HelloWorld
[0.001s][info][cds] UseSharedSpaces: Specified shared archive not found (/tmp/foo.jsa)
[0.008s][info][cds] trying to map /mybld/java/images/jdk/lib/server/classes.jsa
[0.008s][info][cds] Opened archive /mybld/java/images/jdk/lib/server/classes.jsa.
[0.008s][info][cds] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
[0.008s][info][cds] Core region alignment: 4096
[0.008s][info][cds] Reserved archive_space_rs [0x0000000800000000 - 0x0000000801000000] (16777216) bytes
[0.008s][info][cds] Reserved class_space_rs   [0x0000000801000000 - 0x0000000841000000] (1073741824) bytes
[0.008s][info][cds] Mapped static  region #0 at base 0x0000000800000000 top 0x000000080046f000 (ReadWrite)
[0.008s][info][cds] Mapped static  region #1 at base 0x000000080046f000 top 0x0000000800c42000 (ReadOnly)
[0.008s][info][cds] CDS archive was created with max heap size = 128M, and the following configuration:
[0.008s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0
[0.008s][info][cds]     narrow_oop_mode = 0, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 0
[0.008s][info][cds]     heap range = [0x00000000f8000000 - 0x0000000100000000]
[0.008s][info][cds] The current max heap size = 16088M, HeapRegion::GrainBytes = 8388608
[0.008s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0
[0.008s][info][cds]     narrow_oop_mode = 1, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 3
[0.008s][info][cds]     heap range = [0x0000000412800000 - 0x0000000800000000]
[0.008s][info][cds] CDS heap data needs to be relocated because the archive was created with an incompatible oop encoding mode.
[0.008s][info][cds] CDS heap data relocation delta = 30064771072 bytes
[0.008s][info][cds] CDS heap data needs to be relocated lower by a further 7340032 bytes to 30057431040 to be aligned with HeapRegion::GrainBytes
[0.008s][info][cds] Mapped static  region #2 at base 0x00007f3a24080000 top 0x00007f3a240b9000 (Bitmap)
[0.008s][info][cds] Trying to map heap data: region[3] at 0x00000007ff800000, size =   528384 bytes
[0.008s][info][cds] Trying to map heap data: region[5] at 0x00000007ff700000, size =   487424 bytes
[0.008s][info][cds] optimized module handling: enabled
[0.008s][info][cds] full module graph: enabled
[0.008s][info][cds] use_full_module_graph = true; java.base = 0x0000000800469208
[0.008s][info][cds] patching heap embedded pointers
[0.010s][info][cds] Unmapping region #2 at base 0x00007f3a24080000 (Bitmap)
Hello World
[0.042s][info][cds] Regenerate MethodHandle Holder classes...
[.....]
[0.176s][info][cds] Dumping shared data to file: 
[0.176s][info][cds]    /tmp/foo.jsa
[0.176s][info][cds] Shared file region (rw )  0:    45936 bytes, addr 0x0000000800c42000 file offset 0x00001000 crc 0xabcded7d
[0.176s][info][cds] Shared file region (ro )  1:    57616 bytes, addr 0x0000000800c4e000 file offset 0x0000d000 crc 0xbc845f02
[0.176s][info][cds] Shared file region (bm )  2:     1672 bytes, addr 0x0000000000000000 file offset 0x0001c000 crc 0xa045a902

$ /mybld/java-fastdebug/images/jdk/bin/java -Xlog:cds -XX:+AutoCreateSharedArchive -cp ~/tmp/HelloWorld.jar -XX:SharedArchiveFile=/tmp/foo.jsa HelloWorld
[0.046s][info][cds] trying to map /mybld/java/images/jdk/lib/server/classes.jsa
[0.046s][info][cds] Opened archive /mybld/java/images/jdk/lib/server/classes.jsa.
[0.046s][info][cds] _jvm_ident expected: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal-adhoc.iklam.src) for linux-amd64 JRE (19-internal-adhoc.iklam.src), built on Jun  6 2022 20:46:08 by ""iklam"" with gcc 10.3.0
[0.046s][info][cds]              actual: Java HotSpot(TM) 64-Bit Server VM (19-internal-adhoc.iklam.src) for linux-amd64 JRE (19-internal-adhoc.iklam.src), built on Jun  6 2022 20:38:06 by ""iklam"" with gcc 10.3.0
[0.046s][info][cds] UseSharedSpaces: The shared archive file was created by a different version or build of HotSpot
[0.046s][info][cds] UseSharedSpaces: Initialize static archive failed.
[0.046s][info][cds] UseSharedSpaces: Unable to map shared spaces
Hello World

=================================
The problem is here: 

$ head -8 cds.map
Dynamic CDS archive map for /tmp/foo.jsa
[header             0x0000000000000000 - 0x00000000000003f8      1016 bytes]
- magic:                          0xf00baba8
- crc:                            0x0ac363f5
- version:                        14
- header_size:                    1016
- base_archive_name_offset:       968
- base_archive_name_size:         48

According to https://github.com/openjdk/jdk/blob/master/src/hotspot/share/include/cds.h#L72

base_archive_name_offset and base_archive_name_size should both be zero to indicate that /tmp/foo.jsa is generated using the default CDS archive.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261455,,,,,,,JDK-8287873,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xcwb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-06 15:22;iklam;With the fix, the archive is automatically regenerated after we switch the JVM.

$ head -8 cds.map
Dynamic CDS archive map for /tmp/foo.jsa
[header             0x0000000000000000 - 0x00000000000003c8       968 bytes]
- magic:                          0xf00baba8
- crc:                            0x9f849d02
- version:                        0xe
- header_size:                    968
- base_archive_name_offset:       0
- base_archive_name_size:         0

$ /mybld/java-fastdebug/images/jdk/bin/java -Xlog:cds -Xlog:cds+map=debug:file=cds.map:none:filesize=0 -XX:+AutoCreateSharedArchive -cp ~/tmp/HelloWorld.jar -XX:SharedArchiveFile=/tmp/foo.jsa HelloWorld
[0.044s][info][cds] trying to map /mybld/java-fastdebug/images/jdk/lib/server/classes.jsa
[0.044s][info][cds] Opened archive /mybld/java-fastdebug/images/jdk/lib/server/classes.jsa.
[0.044s][info][cds] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
[0.044s][info][cds] Core region alignment: 4096
[0.044s][info][cds] trying to map /tmp/foo.jsa
[0.044s][info][cds] Opened archive /tmp/foo.jsa.
[0.044s][info][cds] _jvm_ident expected: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal-adhoc.iklam.zoo) for linux-amd64 JRE (19-internal-adhoc.iklam.zoo), built on Jun  6 2022 20:46:08 by ""iklam"" with gcc 10.3.0
[0.044s][info][cds]              actual: Java HotSpot(TM) 64-Bit Server VM (19-internal-adhoc.iklam.zoo) for linux-amd64 JRE (19-internal-adhoc.iklam.zoo), built on Jun  6 2022 22:08:16 by ""iklam"" with gcc 10.3.0
[0.044s][info][cds] UseSharedSpaces: The shared archive file was created by a different version or build of HotSpot
[0.044s][info][cds] UseSharedSpaces: Initialize dynamic archive failed.
[0.044s][info][cds] Reserved archive_space_rs [0x0000000800000000 - 0x0000000801000000] (16777216) bytes
[0.044s][info][cds] Reserved class_space_rs   [0x0000000801000000 - 0x0000000841000000] (1073741824) bytes
[0.044s][info][cds] Mapped static  region #0 at base 0x0000000800000000 top 0x00000008004f0000 (ReadWrite)
[0.044s][info][cds] Mapped static  region #1 at base 0x00000008004f0000 top 0x0000000800cc6000 (ReadOnly)
[0.044s][info][cds] CDS archive was created with max heap size = 2022M, and the following configuration:
[0.044s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0
[0.044s][info][cds]     narrow_oop_mode = 0, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 0
[0.044s][info][cds]     heap range = [0x0000000081a00000 - 0x0000000100000000]
[0.044s][info][cds] The current max heap size = 16088M, HeapRegion::GrainBytes = 8388608
[0.044s][info][cds]     narrow_klass_base = 0x0000000800000000, narrow_klass_shift = 0
[0.044s][info][cds]     narrow_oop_mode = 1, narrow_oop_base = 0x0000000000000000, narrow_oop_shift = 3
[0.044s][info][cds]     heap range = [0x0000000412800000 - 0x0000000800000000]
[0.044s][info][cds] CDS heap data needs to be relocated because the archive was created with an incompatible oop encoding mode.
[0.044s][info][cds] CDS heap data relocation delta = 30064771072 bytes
[0.044s][info][cds] CDS heap data needs to be relocated lower by a further 7340032 bytes to 30057431040 to be aligned with HeapRegion::GrainBytes
[0.044s][info][cds] Mapped static  region #2 at base 0x00007f78c802f000 top 0x00007f78c806a000 (Bitmap)
[0.044s][info][cds] Trying to map heap data: region[3] at 0x00000007ff800000, size =   528384 bytes
[0.044s][info][cds] Trying to map heap data: region[5] at 0x00000007ff700000, size =   487424 bytes
[0.044s][info][cds] optimized module handling: enabled
[0.044s][info][cds] full module graph: enabled
[0.045s][info][cds] use_full_module_graph = true; java.base = 0x00000008004ea0d0
[0.045s][info][cds] patching heap embedded pointers
[0.050s][info][cds] Unmapping region #2 at base 0x00007f78c802f000 (Bitmap)
Hello World
[0.158s][info][cds] Regenerate MethodHandle Holder classes...
[0.464s][info][cds] Checking class java/lang/invoke/DelegatingMethodHandle$Holder
[0.466s][info][cds] Checking class java/lang/invoke/DirectMethodHandle$Holder
[0.467s][info][cds] Checking class java/lang/invoke/Invokers$Holder
[0.468s][info][cds] Checking class java/lang/invoke/LambdaForm$Holder
[0.468s][info][cds] Regenerate MethodHandle Holder classes...done
[0.496s][info][cds] Verify Before CDS dynamic dump
[0.603s][info][cds] Gathering all archivable objects ... 
[0.604s][info][cds] Gathering classes and symbols ... 
[0.607s][info][cds] _estimated_hashtable_bytes = 1592 + 600 = 2192
[0.607s][info][cds] _estimated_metaspaceobj_bytes = 104088
[0.607s][info][cds] total estimate bytes = 114472
[0.607s][info][cds] Reserved output buffer space at 0x00007f7884022000 [114688 bytes]
[0.607s][info][cds] Allocating RW objects ... 
[0.607s][info][cds] done (381 objects)
[0.607s][info][cds] Allocating RO objects ... 
[0.607s][info][cds] done (721 objects)
[0.607s][info][cds] Relocating embedded pointers in core regions ... 
[0.607s][info][cds] Relocating external roots ... 
[0.607s][info][cds] done
[0.607s][info][cds] MetaspaceObjs estimate = 104088 used = 104088; diff = 0 bytes
[0.608s][info][cds] Hashtables estimate = 2192 used = 816; diff = 1376 bytes
[0.608s][info][cds] Make classes shareable
[0.608s][info][cds] Number of classes 8
[0.608s][info][cds]     instance classes   =     8
[0.608s][info][cds]       boot             =     7
[0.608s][info][cds]       app              =     1
[0.608s][info][cds]       platform         =     0
[0.608s][info][cds]       unregistered     =     0
[0.608s][info][cds]       (hidden)         =     3
[0.608s][info][cds]       (unlinked)       =     0
[0.608s][info][cds]     obj array classes  =     0
[0.608s][info][cds]     type array classes =     0
[0.608s][info][cds]                symbols =     9
[0.608s][info][cds] Adjust lambda proxy class dictionary
[0.608s][info][cds] Dumping shared data to file: 
[0.608s][info][cds]    /tmp/foo.jsa
[0.608s][info][cds] Shared file region (rw )  0:    51368 bytes, addr 0x0000000800cc6000 file offset 0x00001000 crc 0xdc946884
[0.609s][info][cds] Shared file region (ro )  1:    53536 bytes, addr 0x0000000800cd3000 file offset 0x0000e000 crc 0xde25e9ff
[0.609s][info][cds] Shared file region (bm )  2:     1672 bytes, addr 0x0000000000000000 file offset 0x0001c000 crc 0xadd1d064
[0.618s][info][cds] Verify After CDS dynamic dump


;;;","2022-06-06 15:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9046
Date: 2022-06-06 22:30:13 +0000;;;","2022-06-07 16:18;dukebot;Changeset: 68c5957b
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-06-07 23:11:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/68c5957b9e2306d96bec2d655ec743f13f250dae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Localized names update in COMPAT locale provider,JDK-8287868,5076301,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2022-06-06 15:04,2022-06-29 23:08,2023-10-01 09:56,2022-06-22 08:50,,,,,,,,,,,,20,globalization,,0,l10n,,,,,,,,,,,,,,,,,,,,"Although correct names for `Locale.ROOT` are up-to-date with JDK-8255086, their localized names are not in COMPAT provider. (CLDR, which is the default is OK). Not only locale names but also currency names are updated. TimeZoneNames are not, because they are used for parsing, which would break the compatibility.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255086,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xcw3:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ce26ce,,,,,,,,,"2022-06-10 14:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9134
Date: 2022-06-10 20:58:03 +0000;;;","2022-06-22 08:50;dukebot;Changeset: d4de4757
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-06-22 15:47:07 +0000
URL:       https://git.openjdk.org/jdk/commit/d4de4757471d9f21c2a059f91504ecbc4781566e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bad merge of jdk/test/lib/util/ForceGC.java causing test compilation error,JDK-8287867,5076300,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,mchung,mchung,mchung,2022-06-06 14:56,2022-08-24 05:01,2023-10-01 09:56,2022-06-06 15:38,19,,,,,,,,,,,19,core-libs,,0,testonly,tier1,,,,,,,,,,,,,,,,,,,"diff --git a/test/lib/jdk/test/lib/util/ForceGC.java b/test/lib/jdk/test/lib/util/ForceGC.java
index 6db98220f58..1a71dd229d1 100644
--- a/test/lib/jdk/test/lib/util/ForceGC.java
+++ b/test/lib/jdk/test/lib/util/ForceGC.java
@@ -76,7 +76,7 @@ public class ForceGC {
                 return true;
             }
 
-            doIt(i);
+            doit(i);
             try {
                 Thread.sleep(100);
             } catch (InterruptedException e) {",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xcvv:",9223372036854775807,b26,,,,,,,,,Verified,,"2022-06-06 15:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9043
Date: 2022-06-06 21:58:20 +0000;;;","2022-06-06 15:05;dcubed;Bumping from P2 -> P1 since this is build breakage in Tier1.;;;","2022-06-06 15:38;dukebot;Changeset: a50b06e8
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2022-06-06 22:33:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a50b06e85124f61b5133189a2a2e461753d5d9e7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dangling reference in ClassVerifier::verify_class,JDK-8287854,5076282,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hseigel,shade,shade,2022-06-06 04:10,2023-05-28 22:06,2023-10-01 09:56,2022-06-09 05:04,17,19,,,,,,,,,,19,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,sonarcloud-found,verifier,,,,,,,,,,,,,,,,"SonarCloud reports:

Address of stack memory associated with local variable 'method_signatures_table' is still referred to by the stack variable 'split_verifier' upon returning to the caller. This will be a dangling reference

See:

```
void ClassVerifier::verify_class(TRAPS) {
  ...
 
  // Create hash table containing method signatures.
  method_signatures_table_type method_signatures_table; // <--- stack-alloc
  set_method_signatures_table(&method_signatures_table); // <--- pointer assignment

...
  for (int index = 0; index < num_methods; index++) {
    // Check for recursive re-verification before each method.
    if (was_recursively_verified())  return; // <--- early return

",,,,,,,,,,JDK-8308882,JDK-8308650,JDK-8309011,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xcsb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-07 11:10;mseledtsov;RT Triage: this could potentially lead to a crash, which makes this a P3 issue. 
ILW = HLM = P3
;;;","2022-06-07 17:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9075
Date: 2022-06-07 23:52:52 +0000;;;","2022-06-09 05:04;dukebot;Changeset: 3fa99844
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2022-06-09 12:03:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3fa99844a69401f84677e7d512ffd937f7f16898
;;;","2023-05-22 02:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1384
Date: 2023-05-22 09:27:03 +0000;;;","2023-05-22 07:08;shade;Fix Request (17u)

This avoids a potential crash in verifier. Patch is simple, applies cleanly, testing passes.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 crash:  assert(t->meet(t0) == t) failed: Not monotonic,JDK-8287851,5076279,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhateja,dholmes,dholmes,2022-06-06 03:34,2022-09-08 00:37,2023-10-01 09:56,2022-07-04 04:33,19,,,,,,,,,,,19,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-19,problemlist,regression,tier4,tier5,tier6,tier8,,,,,,,,,,,"Test: java/lang/CompressExpandTest.java🎲

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S67136/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/773331be-64c1-481f-954d-74fc36042879/runs/8d35a6c8-425c-411b-a870-816c78e5c42e/workspace/open/src/hotspot/share/opto/phaseX.cpp:1741), pid=13050, tid=13067
#  assert(t->meet(t0) == t) failed: Not monotonic
#
# JRE version: Java(TM) SE Runtime Environment (19.0+26) (fastdebug build 19-ea+26-1963)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+26-1963, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x17effde]  PhaseCCP::analyze()+0x27e

---------------  T H R E A D  ---------------

Current thread (0x00007fb2fc507f30):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=13067, stack(0x00007fb2e0a9c000,0x00007fb2e0b9d000)]


Current CompileTask:
C2:   5680 1092       4       AbstractCompressExpandTest::testContiguousMasksInt (125 bytes)

Stack: [0x00007fb2e0a9c000,0x00007fb2e0b9d000],  sp=0x00007fb2e0b97f60,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x17effde]  PhaseCCP::analyze()+0x27e
V  [libjvm.so+0xb01f3f]  Compile::Optimize()+0x96f
V  [libjvm.so+0xb04780]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1520
V  [libjvm.so+0x91b92a]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x62a
V  [libjvm.so+0xb132e8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xbb8
V  [libjvm.so+0xb142d8]  CompileBroker::compiler_thread_loop()+0x6f8
V  [libjvm.so+0x1a9de9c]  JavaThread::thread_main_inner()+0x23c
V  [libjvm.so+0x1aa93e0]  Thread::call_run()+0x100
V  [libjvm.so+0x175b574]  thread_native_entry(Thread*)+0x104",,,,,,,,,,JDK-8289863,JDK-8291218,JDK-8291381,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256540,,,,,,,,JDK-8287855,JDK-8288194,JDK-8279062,JDK-8293531,,,,,,JDK-8283894,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i2xcrn:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-06 08:23;dcubed;[~jbhateja] - Please take a look at this failure.

The Tier6 failure occurred in jdk-19+26-1962 which contains the fix for:

JDK-8283894 Intrinsify compress and expand bits on x86

and that changeset modified  java/lang/CompressExpandTest.java.;;;","2022-06-06 16:12;dlong;ILW = assert in debug build, unknown impact on product builds; intermittent; no workaround = MMH = P3;;;","2022-06-07 01:41;thartmann;Looks like a regression in JDK 19, therefore re-targeting to JDK 19.;;;","2022-06-07 04:21;thartmann;[~jbhateja] you might want to fix JDK-8287855 as well with this.;;;","2022-06-07 09:32;kvn;[~jbhateja] and [~sviswanathan] please look on this. It is regression from recent push and should be fixed for JDK 19.;;;","2022-06-10 03:09;epeter;I just filed this JDK-8288194, hits the same assert. Might this be a duplicate?
But it only crashes with -XX:TypeProfileLevel=222. and in different test files.
;;;","2022-06-10 07:11;jbhateja;Thanks for notification; will analyse and update.;;;","2022-07-02 11:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/104
Date: 2022-07-02 18:51:13 +0000;;;","2022-07-04 04:33;dukebot;Changeset: 1a271645
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2022-07-04 11:31:32 +0000
URL:       https://git.openjdk.org/jdk19/commit/1a271645a84ac4d7d6570e739d42c05cc328891d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fatal Error when suspending virtual thread after it has terminated,JDK-8287847,5076274,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,mjayan,mjayan,2022-06-06 00:13,2022-07-27 12:30,2023-10-01 09:56,2022-07-05 10:47,19,,,,,,,,,,,19,core-svc,,0,loom,,,,,,,,,,,,,,,,,,,,"Below Fatal error is observed when stepping over through virtual threads while debugging :


JDWP exit error JVMTI_ERROR_THREAD_NOT_ALIVE(15): cannot set thread local storage [s\open\src\jdk.jdwp.agent\share\native\libjdwp\threadControl.c:191]
FATAL ERROR in native method: JDWP cannot set thread local storage, jvmtiError=JVMTI_ERROR_THREAD_NOT_ALIVE(15)
C:\Users\mjayan\May10_LATEST\netbeans\nbbuild\testuserdir\var\cache\executor-snippets\debug.xml:150: The following error occurred while executing this line:
C:\Users\mjayan\May10_LATEST\netbeans\nbbuild\testuserdir\var\cache\executor-snippets\debug.xml:129: The following error occurred while executing this line:
C:\Users\mjayan\May10_LATEST\netbeans\nbbuild\testuserdir\var\cache\executor-snippets\debug.xml:77: Java returned: 1",,,,,,,,,,JDK-8289865,JDK-8291384,JDK-8291221,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288703,,,,,,,,,,,,,,,"2022-06-19 00:05;alanb;SuspendAfterDeath.java;https://bugs.openjdk.org/secure/attachment/99607/SuspendAfterDeath.java","2022-06-09 02:26;mjayan;Test.java;https://bugs.openjdk.org/secure/attachment/99446/Test.java","2022-06-06 01:00;mjayan;screenshot-1.png;https://bugs.openjdk.org/secure/attachment/99225/screenshot-1.png",,,,,,,,x86_64,,,,,,,,,,windows_10,,,,,,"0|i2xcqr:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-06-07 10:21;mwthomps;[~mjayan] Please provide steps to reproduce;;;","2022-06-09 02:31;mjayan;Attached the test sample. Add breakpoint at the sysout line. Debug the pgm, step over the code for ~10 times , execution stops after this with the above error.;;;","2022-06-09 08:11;cjplummer;I'm not seeing issues with jdb. Can you let me know what version of netbeans you are using, and any special instructions for getting the test project setup and running. Also, is there an hs_err file produced?;;;","2022-06-13 02:23;mjayan;I have taken the netbeans code(from github, ~May 1) and built it. Launching it with openjdk-19-ea+22. I could not find any hs_err file generated. Apart from the steps mentioned above, there is no other special steps to reproduce the issue. ;;;","2022-06-17 01:11;alanb;I duplicated this with NB 14.

In Project Properties > Build > Compiling 
- Uncheck ""Compile on Save"", otherwise you get 62.65535 rather than 63.65535 class files
- Additional compiler options: --enable-preview -source 19

In Project Properties > Build > Compiling 
- VM Options: --enable-preview

Per Meghna's instructions, press ""Step Over"" several times and the target VM will exit with

FATAL ERROR in native method: JDWP cannot set thread local storage, jvmtiError=JVMTI_ERROR_THREAD_NOT_ALIVE(15)
JDWP exit error JVMTI_ERROR_THREAD_NOT_ALIVE(15): cannot set thread local storage [src/jdk.jdwp.agent/share/native/libjdwp/threadControl.c:191

Note that there is other weirdness in that the ""Step Over"" seems to step into the j.l.VirtualThread.run so the user sees the code that executes before the thread terminates. I think we need to understand if this is a NB issue or something else.

;;;","2022-06-17 14:38;cjplummer;I downloaded NB 14 and setup as you described, but could not reproduce the issue. I'll try some more, but might have to wait until next week.

Regarding the stepover eventually landing in VirtualThread.run(), I think this is because NB is not doing library filtering when single stepping. I see this same behavior with IntelliJ if I tell it NOT to filter out java.* when single stepping. See File -> Settings -> Build, Execution, Deployment -> Debugger -> Stepping.

Update: In NB you can add a new step filter from Tools -> Options -> Java -> Java Debugger -> Step Filters. Add java.* and you will no longer step into VirtualThread.run().

I've since updated my JDK source to the latest, so it's now JDK 20. Also tried a product build (was using a debug build before). Still am unable to reproduce. Perhaps I need to use the EA binary...Nope, doesn't reproduce with the latest EA either.;;;","2022-06-18 09:14;alanb;The issue seems to be that NB is sending a ThreadReference/Suspend command to suspend a virtual thread that has already terminated. This leads to commonSuspend attempting to add a node to the thread list and attempting to set a thread local for a thread that has terminated. Debugging further, I think part of the issue is that JVM TI GetThreadState doesn't return a thread state for a virtual thread that has terminated. I've created JDK-8288703 to track that issue (it's a serious issue and will need to be fixed for 19). With a temporary fix to JDK-8288703, I can no longer create the conditions where NB tries to suspend a terminated thread.;;;","2022-06-18 12:58;cjplummer;I was able to reproduce this in jdb with a simpler example that just created one virtual thread and joined on it. I set a breakpoint after the join returned, did a ""suspend"" on the virtual thread, and got the JVMTI_ERROR_THREAD_NOT_ALIVE error. However, in order to do this I first had to hack jdb to not forget about threads when it gets a ThreadDeath event for them. Otherwise jdb wouldn't recognize the threadID of the virtual thread, and as a result would just complain about the thread being unknown. So probably a test case that uses JDI will be needed since we can't really write one using jdb.;;;","2022-06-19 00:09;alanb;I hacked up a small JDI test based on TestScaffold that may be useful and attached it as SuspendAfterDeath.java. It needs to be placed in test/jdk/com/sun/jdi. The test captures a reference to a virtual thread when it terminates, then attempts to suspend at a breakpoint after the join. ;;;","2022-06-22 01:14;alanb;I've set the fixVersion to 19 for now, assuming this issue will need at least a short term fix for 19.;;;","2022-06-22 10:10;cjplummer;[~alanb] It seems the only issue here is JDK-8288703. Is there a reason not to close this CR as a dup of JDK-8288703?;;;","2022-06-22 10:46;alanb;[~cjplummer] I think we have to keep the issues separate because the JDWP bug will still duplicate when JDK-8288703 is fixed. By duplicate I mean with the targeted test rather than the steps using NB.;;;","2022-06-28 15:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/88
Date: 2022-06-28 22:33:07 +0000;;;","2022-07-05 10:47;dukebot;Changeset: 29ea6429
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-07-05 17:46:59 +0000
URL:       https://git.openjdk.org/jdk19/commit/29ea6429d2f906a61331aab1aef172d0d854fb6f
;;;","2022-07-07 23:24;mjayan;Verified in jdk 19, build 30. Issue not observed.;;;","2022-07-07 23:58;alanb;[~mjayan] Thanks for confirming. JDK 19 goes into RampDown Phase 2 on July 21 so it would be good to do as much testing as possible in the next week or so, just in case you run into another issue that needs to be fixed for JDK 19.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jdk/jfr/event/runtime/TestActiveSettingEvent.java failed with ""Expected two batches of Active Setting events""",JDK-8287832,5076248,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,dcubed,dcubed,2022-06-04 06:33,2022-10-17 13:53,2023-10-01 09:56,2022-10-10 05:43,19,20,,,,,,,,,,20,hotspot,,0,intermittent,problemlist,tier3,tier5,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

jdk/jfr/event/runtime/TestActiveSettingEvent.java

Here's a snippet from the log file:

#section:main
----------messages:(5/295)----------
command: main jdk.jfr.event.runtime.TestActiveSettingEvent
reason: User specified action: run main/othervm jdk.jfr.event.runtime.TestActiveSettingEvent 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,java.management
elapsed time (seconds): 1.436
----------configuration:(3/54)----------
Boot Layer
  add modules: jdk.jfr java.management

----------System.out:(2/62)----------
Testing configuration default
Testing configuration profile
----------System.err:(12/1000)----------
java.lang.Exception: Expected two batches of Active Setting events, at Recording.start() and during Recording.setSetting(...)
	at jdk.jfr.event.runtime.TestActiveSettingEvent.testChangedSetting(TestActiveSettingEvent.java:213)
	at jdk.jfr.event.runtime.TestActiveSettingEvent.main(TestActiveSettingEvent.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1596)

JavaTest Message: Test threw exception: java.lang.Exception: Expected two batches of Active Setting events, at Recording.start() and during Recording.setSetting(...)
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Expected two batches of Active Setting events, at Recording.start() and during Recording.setSetting(...)
----------rerun:(41/5363)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288663,,JDK-8295274,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xckz:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-06-17 05:11;mgronlun;jdk.NativeMethodSample {
  startTime = 09:47:33.035 (2022-06-04)
  sampledThread = ""MainThread"" (javaThreadId = 23)
  state = ""STATE_RUNNABLE""
  stackTrace = [
    jdk.jfr.internal.JVM.counterTime()
    jdk.jfr.internal.SettingsManager.setSettings(List, boolean) line: 145
    jdk.jfr.internal.MetadataRepository.setSettings(List, boolean) line: 229
    jdk.jfr.internal.PlatformRecorder.updateSettingsButIgnoreRecording(PlatformRecording, boolean) line: 396
    jdk.jfr.internal.PlatformRecorder.updateSettings(boolean) line: 385
    jdk.jfr.internal.PlatformRecorder.start(PlatformRecording) line: 257
    jdk.jfr.internal.PlatformRecording.start() line: 120
    jdk.jfr.Recording.start() line: 177
    jdk.jfr.event.runtime.TestActiveSettingEvent.testChangedSetting() line: 197
    jdk.jfr.event.runtime.TestActiveSettingEvent.main(String[]) line: 69
  ]
}

jdk.ActiveSetting {
  startTime = 09:47:33.035 (2022-06-04)
  id = 7
  name = ""stackTrace""
  value = ""true""
  eventThread = ""MainThread"" (javaThreadId = 23)
}

The recording contains an unrelated event of type jdk.NativeMethodSample, an event type that is currently disabled and should not have been generated.;;;","2022-06-24 08:12;dcubed;Here's a log file snippet for the jdk-19+29-2118-tier3 sighting: 

jdk/jfr/event/runtime/TestActiveSettingEvent.java

#section:main
----------messages:(5/290)----------
command: main jdk.jfr.event.runtime.TestActiveSettingEvent
reason: User specified action: run main/othervm jdk.jfr.event.runtime.TestActiveSettingEvent 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,java.management
elapsed time (seconds): 1.517
----------configuration:(3/51)----------
Boot Layer
  add modules: jdk.jfr java.management

----------System.out:(2/60)----------
Testing configuration default
Testing configuration profile
----------System.err:(12/988)----------
java.lang.Exception: Expected two batches of Active Setting events, at Recording.start() and during Recording.setSetting(...)
	at jdk.jfr.event.runtime.TestActiveSettingEvent.testChangedSetting(TestActiveSettingEvent.java:213)
	at jdk.jfr.event.runtime.TestActiveSettingEvent.main(TestActiveSettingEvent.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.Exception: Expected two batches of Active Setting events, at Recording.start() and during Recording.setSetting(...)
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Expected two batches of Active Setting events, at Recording.start() and during Recording.setSetting(...)
----------rerun:(36/6498)*----------


This failure occurred in jdk-19+29-2118-tier3. The fix for the following bug:

JDK-8288663 JFR: Disabling the JfrThreadSampler commits only a partially disabled state

was integrated in jdk-19+28-2094 so that fix is in place. This bug (JDK-8287832) was
originally closed as a duplicate of JDK-8288663 so I have reopened this bug.;;;","2022-06-27 02:06;mgronlun;This is strange, the same testcase, testChangedSetting() failed again, this time the file looks like this:

jdk.Compilation {
  startTime = 10:53:09.727 (2022-06-24)
  duration = 90,0 ms
  compileId = 2008
  compiler = ""c2""
  method = jdk.jfr.internal.consumer.ConstantMap.get(long)
  compileLevel = 4
  succeded = true
  isOsr = false
  codeSize = 12,8 kB
  inlinedBytes = 1,6 kB
  eventThread = ""C2 CompilerThread2"" (javaThreadId = 15)
}

jdk.ActiveSetting {
  startTime = 10:53:09.824 (2022-06-24)
  id = 7
  name = ""stackTrace""
  value = ""true""
  eventThread = ""MainThread"" (javaThreadId = 22)
}

jdk.ActiveSetting {
  startTime = 10:53:09.824 (2022-06-24)
  id = 7
  name = ""enabled""
  value = ""false""
  eventThread = ""MainThread"" (javaThreadId = 22)
}

jdk.ActiveSetting {
  startTime = 10:53:09.824 (2022-06-24)
  id = 8
  name = ""enabled""
  value = ""false""
  eventThread = ""MainThread"" (javaThreadId = 22)
}

This time, instead of containing an unrelated event of type jdk.NativeMethodSample, which was fixed as of JDK-8288663, an event of type jdk.Compilation is included, an event type that should also be disabled and not have been generated.

[~egahlin] Can you take a look at how the enable/disable mechanism for testChangedSetting() is implemented? Is there at first a default enabling and then disabling that could account for this?

I will try to to see if there is a race in how the buffers are cleared,  jdk.jfr.internal.consumer.ConstantMap.get(long) is likely a method compliled when parsing the results from the preceding testcase, which could indicate stale data is included in the next recording.;;;","2022-07-06 08:03;dcubed;Here's a log file snippet from the jdk-20+5-225-tier3 sighting: 

jdk/jfr/event/runtime/TestActiveSettingEvent.java

#section:main
----------messages:(5/290)----------
command: main jdk.jfr.event.runtime.TestActiveSettingEvent
reason: User specified action: run main/othervm jdk.jfr.event.runtime.TestActiveSettingEvent 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,java.management
elapsed time (seconds): 1.405
----------configuration:(3/51)----------
Boot Layer
  add modules: jdk.jfr java.management

----------System.out:(2/60)----------
Testing configuration default
Testing configuration profile
----------System.err:(12/988)----------
java.lang.Exception: Expected two batches of Active Setting events, at Recording.start() and during Recording.setSetting(...)
	at jdk.jfr.event.runtime.TestActiveSettingEvent.testChangedSetting(TestActiveSettingEvent.java:213)
	at jdk.jfr.event.runtime.TestActiveSettingEvent.main(TestActiveSettingEvent.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.Exception: Expected two batches of Active Setting events, at Recording.start() and during Recording.setSetting(...)
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Expected two batches of Active Setting events, at Recording.start() and during Recording.setSetting(...)
----------rerun:(36/6471)*----------;;;","2022-10-05 05:06;mgronlun;The test fails because of an unexpected event in the event stream. The recording does not explicitly enable any events, yet, occasionally, there are some. From where do these events originate? The JfrEvent C++ classes check enabled state in the constructor, and some event instances have extent across a potential safepoint. A safepoint could result from JFR rotating and stopping to record. As a result, an event can still be enabled after JFR stops and then restarts, resulting in unexpected events in the event stream of the newly started recording.

Most common unexpected events seen are:

jdk.JavaMonitorWait
jdk.Compilation
jdk.NativeMethodSample

A solution to this problem is to move the event-enabled check from the constructor to the shouldCommit() and commit() functions. For durational events, it requires two is_enabled() tests, as one will still be needed in the constructor, for decision about starttime. No tangible performance impact is expected.;;;","2022-10-05 05:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10575
Date: 2022-10-05 12:26:08 +0000;;;","2022-10-10 05:43;dukebot;Changeset: 4df4a1f8
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-10-10 12:40:58 +0000
URL:       https://git.openjdk.org/jdk/commit/4df4a1f8e238ebf49d4b0e1e102ccdc3cdb82de9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gtest fails to compile after JDK-8287661,JDK-8287830,5076245,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-06-03 21:44,2022-06-09 22:23,2023-10-01 09:56,2022-06-03 23:50,19,,,,,,,,,,,19,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,"Reproduce:
 configure --with-jvm-variants=server  --with-debug-level=optimized ...


```
* For target hotspot_variant-server_libjvm_gtest_objs_test_bitMap.o:
In file included from /root/df/jdk/src/hotspot/share/logging/logPrefix.hpp:28,
                 from /root/df/jdk/src/hotspot/share/logging/log.hpp:28,
                 from /root/df/jdk/src/hotspot/share/logging/logStream.hpp:28,
                 from /root/df/jdk/test/hotspot/gtest/utilities/test_bitMap.cpp:25:
/root/df/jdk/test/hotspot/gtest/utilities/test_bitMap.cpp: In static member function 'static void BitMapTest::testPrintOn(BitMap::idx_t)':
/root/df/jdk/src/hotspot/share/logging/logTag.hpp:207:36: error: '_test' is not a member of 'LogTag'
  207 | #define PREFIX_LOG_TAG(T) (LogTag::_##T)
      |                                    ^
/root/df/jdk/src/hotspot/share/logging/logTag.hpp:215:27: note: in definition of macro 'EXPAND_VARARGS'
  215 | #define EXPAND_VARARGS(x) x
      |                           ^
/root/df/jdk/src/hotspot/share/logging/logTag.hpp:212:57: note: in expansion of macro 'PREFIX_LOG_TAG'
  212 | #define LOG_TAGS_EXPANDED(T0, T1, T2, T3, T4, T5, ...)  PREFIX_LOG_TAG(T0), PREFIX_LOG_TAG(T1), PREFIX_LOG_TAG(T2), \
      |                                                         ^~~~~~~~~~~~~~
/root/df/jdk/src/hotspot/share/logging/logTag.hpp:216:38: note: in expansion of macro 'LOG_TAGS_EXPANDED'
   ... (rest of output omitted)

* All command lines available in /root/df/jdk/build/linux-x86_64-server-release/make-support/failure-logs.
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287661,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xckb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-03 21:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9029
Date: 2022-06-04 04:54:14 +0000;;;","2022-06-03 23:50;dukebot;Changeset: a113e166
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-06-04 06:47:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a113e166e91b9b3d3f74a284888a5135b48dad44
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix so that one can select jtreg test case by ID from make  ,JDK-8287828,5076243,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lkorinth,lkorinth,lkorinth,2022-06-03 18:40,2022-12-07 14:24,2023-10-01 09:56,2022-08-22 05:58,19,,,,,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,"One can select a testcase by ID when running a jtreg test case directly from jtreg (using the testcase.java#testID syntax). However, this has not been possible to do when launching jtreg indirectly from make.

This fix attempts to address this issue. I have not tested this thoroughly yet, I wanted to show the code to get feedback first. The idea is to *not* emulated destructive imperative assignments through the use of eval. I instead try to handle it in a functional style without reassigning variables. I have tried to make the change as small as possible.

I am not used to change the build system, so I would appreciate thorough review.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298324,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xcjv:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-06-03 18:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9028
Date: 2022-06-04 01:51:20 +0000;;;","2022-08-22 05:58;dukebot;Changeset: c59f9b37
Author:    Leo Korinth <lkorinth@openjdk.org>
Date:      2022-08-22 12:52:31 +0000
URL:       https://git.openjdk.org/jdk/commit/c59f9b374b4497ab385675b0019c3647e6cddbbb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/accessibility/4702233/AccessiblePropertiesTest.java fails to compile,JDK-8287826,5076241,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jiefu,jiefu,jiefu,2022-06-03 17:35,2023-04-05 01:57,2023-10-01 09:56,2022-06-03 19:51,19,,,,,,,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,tencent-interest,tier3,,,,,,,,,,,,,,,"STDERR:
/jdk/test/jdk/javax/accessibility/4702233/AccessiblePropertiesTest.java:84: error: cannot access AccessibleRoleConstants
        checkFields(AccessibleRoleConstants.CLASS_NAME,
                    ^
  bad source file: /home/jiefu/workspace/github/jdk/test/jdk/javax/accessibility/4702233/AccessibleRoleConstants.java
    file does not contain class AccessibleRoleConstants
    Please remove or make sure it appears in the correct subdirectory of the sourcepath.
1 error

TEST RESULT: Failed. Compilation failed: Compilation failed",,,,,,,,,,JDK-8305466,JDK-8294504,JDK-8296184,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285373,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xcjf:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-06-03 17:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9027
Date: 2022-06-04 00:40:19 +0000;;;","2022-06-03 19:51;dukebot;Changeset: 005a3303
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-06-04 02:49:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/005a330387b8ee1179d1be31b53ea2c5d49c32f8
;;;","2022-06-04 09:23;prr;
Looks to me like the 2nd commit and final in the PR which added the test  was just to
add the missing legal notice to one file but also brought in the problematic package statement
that caused the compilation failure

https://github.com/openjdk/jdk/pull/8342/commits/7715eb8359394f46687079adb448f263cbc71e8e
;;;","2022-09-26 02:09;goetz;Fix request [17u]

I backport this as follow up to 8285373
No risk, only a test change.
Clean backport.
Tests pass with the fix. SAP nighlty testing passed.;;;","2022-09-26 02:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/733
Date: 2022-09-26 09:08:16 +0000;;;","2022-10-26 16:54;vrudomet;Fix request [11u] 

Clean backport, trivial, low risk - new test.
This backport fixes the test that fails to compile.
tests pass during manual run;;;","2022-10-27 15:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1485
Date: 2022-10-27 22:06:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The MTPerLineTransformValidation tests has a typo in the @run tag,JDK-8287824,5076237,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-06-03 15:04,2022-06-27 06:14,2023-10-01 09:56,2022-06-06 16:21,17,19,,,,,,,,,,19,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,"See the test description:

/**
 * @test
 * @bug 8273972
 * @summary Verifies that ColorConvertOp works fine if shared between threads
 * @run main/othervm/timeout=600 MTTransformValidation
 */
public final class MTPerLineTransformValidation {",,,,,,,,,,JDK-8288066,JDK-8288496,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273972,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xcij:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-06-04 13:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9030
Date: 2022-06-04 07:59:59 +0000;;;","2022-06-06 16:21;dukebot;Changeset: 645be42f
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-06-06 23:17:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/645be42f76b8983a9096ed90caa70b5c59dd822c
;;;","2022-06-06 17:22;serb;Fix request (17u)

The clean backport.
- Justification: The typo in the test.
- Risk Analysis: Low
https://github.com/openjdk/jdk17u-dev/pull/432;;;","2022-06-06 17:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/432
Date: 2022-06-06 23:44:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup JDWP agent GetEnv initialization,JDK-8287812,5076200,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,alanb,alanb,2022-06-03 08:26,2022-12-21 17:16,2023-10-01 09:56,2022-12-14 11:39,19,,,,,,,,,,,21,core-svc,,0,,,,,,,,,,,,,,,,,,,,,"3 things to cleanup in this area:

(1)  The JDWP agent uses JNI GetEnv(JVMTI_VERSION_1) to get a JVMTI environment. If GetEnv fails the JDWP agent prints this:

ERROR: JDWP unable to access JVMTI Version 1 (0x30010000), is your J2SE a 1.5 or newer version? JNIEnv's GetEnv() returned -3

The text ""is your J2SE a 1.5 or newer version?"" dates from JDK 5 when JVMTI was introduced and doesn't make sense now.

(2) JVMTI_VERSION_1 suggests that the JDWP agent is looking for a JVMTI v1 environment when it really wants the latest. GetEnv should request JVMTI_VERSION so that it always requests the current version.

(3) There is some outdated compatibility checking between runtime and compile time versions of JVMTI that date back to the 1.0, 1.1, and 1.2 era, and are no longer needed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xcab:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-11-29 09:50;cjplummer;The debug agent is tied to the release it ships with, so always using the latest JVMTI (JVMTI_VERSION) should be reasonable.

However, what's not clear to me is why -3 (JNI_EVERSION) is being returned in the first place. Do we have an explanation for this?;;;","2022-11-29 10:30;alanb;I suspect it may be x86_32 where a jshell test is running with --enable-preview. There is no JVMTI support in that configuration as the VM continuations port is done yet. At least, I think this is what is going on and the error message is confusing.;;;","2022-11-29 10:39;cjplummer;In that case I don't think simply replacing JVMTI_VERSION_1 with JVMTI_VERSION is going to help with the confusing message or make it go away. What is needed is to get rid of ""is your J2SE a 1.5 or newer version?"" part of the message. We can switch to using JVMTI_VERSION also, but that really isn't the issue here.
;;;","2022-11-29 10:50;alanb;Indeed, this issue is about remove the confusing """"is your J2SE a 1.5 or newer version"" text. ;;;","2022-12-01 20:52;cjplummer;There what I believe is very bit rotted code in this area. See compatible_versions(). It seems to do a lot of special compatibility checks related to 1.1 (maybe earlier) and 1.2. If those don't apply then it just makes sure that the runtime major version is the same as the compile time major version, and that that runtime minor version is >=  the compile time minor version.

I get the feeling this might be there to support dropping the debug agent into other JDK distros that maybe don't build the debug agent. I don't think we support this any more. Possibly we can get rid of most of this version checking. It seems that if we always pass JVMTI_VERSION into GetEnv(), then we can just assert that JVMTI GetVersionNumber() returns JVMTI_VERSION.;;;","2022-12-01 23:49;alanb;The JDWP agent used JVMDI to JDK 1.4 and was re-implemented to use JVMTI in JDK 1.5. It might be that some of this dates from there too but I haven't checked the history to be sure. Also theory is that it dates back to the JDK vs. JRE where someone might want to debug with a JRE. In any case, I think it's all history and we just have two scenarios right now: One is the minimal VM which does not have JVMTI. The other is  -XX:-VMContinuations --enable-preview, which on JDK 19/20 at least. In both cases we get the confusing error if there is an attempt to start the debugger agent.;;;","2022-12-08 15:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11602
Date: 2022-12-08 22:40:57 +0000;;;","2022-12-14 11:39;dukebot;Changeset: ccb94acc
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-12-14 19:37:20 +0000
URL:       https://git.openjdk.org/jdk/commit/ccb94acc442767a7047756806c8dc7ecacd8bae9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: jfr configure error message should not print stack trace,JDK-8287811,5076199,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,egahlin,egahlin,2022-06-03 08:08,2022-06-09 22:31,2023-10-01 09:56,2022-06-07 09:46,,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"Reproducer:

 $ jfr configure --ouput a.jfc
 $ jfr configure --ouput b.jfc
 $ jfr configure --input a.jfc,b.jfc --output combined.jfc

Expected:

jfr configure: parsing error: Control with 'gc' is declared in multiple files

Was:
Control with 'gc' is declared in multiple files
	at jdk.jfr/jdk.jfr.internal.jfc.model.JFCModel.<init>(JFCModel.java:69)
	at jdk.jfr/jdk.jfr.internal.tool.Configure.configure(Configure.java:198)
	at jdk.jfr/jdk.jfr.internal.tool.Configure.execute(Configure.java:180)
	at jdk.jfr/jdk.jfr.internal.tool.Main.main(Main.java:87)
jfr configure: parsing error: Control with 'gc' is declared in multiple files",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xca3:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-06-03 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9018
Date: 2022-06-03 15:54:47 +0000;;;","2022-06-07 09:46;dukebot;Changeset: 41d5809c
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-06-07 16:42:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/41d5809caff0a219c2153fe88d0c61c4b5eba62c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revisit implementation of memory session,JDK-8287809,5076193,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-06-03 07:20,2022-07-27 13:31,2023-10-01 09:56,2022-07-11 07:34,19,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"The addition of a new exception kind in the liveness check (WrongThreadException) has introduced some asymmetry in the code, as we try not to allocate exceptions in the fast path, but we currently only do that for IllegalStateException.

Furthermore, with the addition of non closeable views, the implementation of memory sessions has not aged well - some mechanism has been added (Scoped::sessionImpl) to obtain the ""true"" session hidden behind a view (as we need this session for the liveness check in ScopedMemoryAccess). A better implementation is possible, by factoring stateful parts into a common State class that can be used by all sessions (including views).

",,,,,,,,,,JDK-8291255,JDK-8291412,JDK-8290182,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xc8r:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-06-03 08:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9017
Date: 2022-06-03 15:47:21 +0000;;;","2022-06-15 11:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/22
Date: 2022-06-15 18:06:44 +0000;;;","2022-07-11 07:34;dukebot;Changeset: fed3af8a
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-07-11 14:30:19 +0000
URL:       https://git.openjdk.org/jdk19/commit/fed3af8ae069fc760a24e750292acbb468b14ce5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac generates illegal class file for pattern matching switch with records,JDK-8287808,5076192,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,sundar,sundar,2022-06-03 07:16,2023-01-18 06:46,2023-10-01 09:56,2022-06-07 06:45,19,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"File: Expr.java

sealed interface Expr
    permits Expr.Add, Expr.Sub, Expr.Mul, Expr.Div, Expr.Const {

    record Add(Expr left, Expr right) implements Expr {
        public double eval() {
            return left.eval() + right.eval();
        }
    }

    record Sub(Expr left, Expr right) implements Expr {
        public double eval() {
            return left.eval() - right.eval();
        }
    }

    record Mul(Expr left, Expr right) implements Expr {
        public double eval() {
            return left.eval() * right.eval();
        }
    }

    record Div(Expr left, Expr right) implements Expr {
        public double eval() {
            return left.eval() / right.eval();
        }
    }

    record Const(double value) implements Expr {
        public double eval() {
            return value;
        }
    }

    double eval();

    default String str() {
         return switch(this) {
            case Add(Expr l, Expr r) ->
                String.format(""(%s + %s)"", l.str(), r.str());
            case Sub(Expr l, Expr r) ->
                String.format(""(%s - %s)"", l.str(), r.str());
            case Mul(Expr l, Expr r) ->
                String.format(""(%s * %s)"", l.str(), r.str());
            case Div(Expr l, Expr r) ->
                String.format(""(%s / %s)"", l.str(), r.str());
            case Const(double value) ->
                String.format(""(%f)"", value);
        };
    }

    public static void main(String[] a) {
        var expr = new Add(
            new Mul(new Const(23.44), new Const(Math.PI)),
            new Div(new Const(3.9), new Const(11.33)));
        System.out.printf(""%s = %f\n"", expr.str(), expr.eval());
    }
}


$ ./javac --enable-preview --source 19 Expr.java
Note: Expr.java uses preview features of Java SE 19.
Note: Recompile with -Xlint:preview for details.
$ ./java --enable-preview Expr                  
Error: LinkageError occurred while loading main class Expr
	java.lang.ClassFormatError: Method $proxy$left in class Expr has illegal modifiers: 0x1008",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287888,,,JDK-8288119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xc8j:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-03 07:27;sundar;Used a local build with the following tip:

commit 34bb0a5e6e9c91e037fbbe87382e8275b2435a3f (HEAD -> master, origin/master, origin/HEAD)
Author: Zhengyu Gu <zgu@openjdk.org>
Date:   Fri Jun 3 12:32:04 2022 +0000

    8287734: Shenandoah: Consolidate marking closures
    
    Reviewed-by: shade
;;;","2022-06-06 03:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9039
Date: 2022-06-06 10:39:26 +0000;;;","2022-06-07 06:45;dukebot;Changeset: 2f62f15b
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-06-07 13:41:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2f62f15b09dcfa4bed556dc7778cb1a6bb31d9ba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix test-bugs related to stress flags,JDK-8287801,5076185,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,epeter,epeter,2022-06-03 06:13,2022-06-23 00:07,2023-10-01 09:56,2022-06-20 07:30,19,,,,,,,,,,,20,hotspot,,0,noreg-self,oracle-triage-19,,,,,,,,,,,,,,,,,,,"I am currently running the test suite with more stress flags.
Next to some real bugs, I encounter many test-bugs.
Here, I collect them, and provide fixes.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8256540,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xc6z:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-03 06:19;epeter;1)
test/hotspot/jtreg/compiler/uncommontrap/Decompile.java

Needs additional Flags:
-XX:+UnlockExperimentalVMOptions -XX:PerMethodTrapLimit=100 -XX:PerBytecodeTrapLimit=4

If Limit is 0, then we do not use traps for second class, but virtual call - no deoptimization - against expectation.

Reproduce with:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0 -XX:PerBytecodeTrapLimit=0"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/uncommontrap/Decompile.java;;;","2022-06-03 06:21;chagedorn;ILW = Various test failures due to flags with non-default values that change the IR (trap limit, profiling etc.), only with stress flags, no workaround = MLH = P4;;;","2022-06-03 06:28;epeter;2)
test/hotspot/jtreg/compiler/uncommontrap/Decompile.java

Solution:
Fix -XX:TypeProfileLevel=0 in test

Reproduce with:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:TypeProfileLevel=222"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/uncommontrap/Decompile.java;;;","2022-06-03 06:35;epeter;3)
test/hotspot/jtreg/compiler/c2/irTests/blackhole/BlackholeStoreStoreEATest.java

MemBarStoreStore missing in IR
No TLAB: no thread-local object allocation
changes in IR because allocation done differently. Fix -XX:+UseTLAB in test.

Reproduce with:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:-UseTLAB"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/c2/irTests/blackhole/BlackholeStoreStoreEATest.java;;;","2022-06-03 07:02;epeter;4)
test/hotspot/jtreg/compiler/uncommontrap/TestUnstableIfTrap.java

Needs additional Flags, on all runs except the verifier:
-XX:+UnlockExperimentalVMOptions -XX:PerMethodTrapLimit=100

If limit is zero, we compile without using traps, but we expect traps in the verifier - we check output for traps.

Reproduce with:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:"" -XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/uncommontrap/TestUnstableIfTrap.java;;;","2022-06-07 02:45;epeter;5)
test/hotspot/jtreg/compiler/c2/cr7200264/TestSSE2IntVect.java
test/hotspot/jtreg/compiler/c2/cr7200264/TestSSE4IntVect.java

Problem with flags:
-XX:StressLongCountedLoop=2000000
-XX:StressLongCountedLoop=200000000
The int loops are converted to long loops. This changes the ops used. The tests count the ops used and set expectations. This flag changes the counts.

Solution:
Fix -XX:StressLongCountedLoop=0 (off, default)
in tests:
@run main/othervm -XX:StressLongCountedLoop=0 compiler.c2.cr7200264...
in TestDriver.java
add it to argument list

Reproduce with:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:StressLongCountedLoop=2000000"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/c2/cr7200264/TestSSE2IntVect.java

or:
 ~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:StressLongCountedLoop=200000000"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/c2/cr7200264/TestSSE4IntVect.java;;;","2022-06-07 03:08;epeter;6)
test/hotspot/jtreg/compiler/loopopts/TestRemoveMainPostLoops.java

Problem with OSR stress flags:
-XX:Tier0BackedgeNotifyFreqLog=0 -XX:Tier2BackedgeNotifyFreqLog=0 -XX:Tier3BackedgeNotifyFreqLog=0 -XX:Tier2BackEdgeThreshold=1 -XX:Tier3BackEdgeThreshold=1 -XX:Tier4BackEdgeThreshold=1 -Xbatch

Main problem flag:
-XX:Tier0BackedgeNotifyFreqLog=0

The regular execution takes about 0.3 seconds.
But with these flags it times out after 120 seconds.

Excessive OSR leads to much longer runtime. Put OSR stress testing in much higer tier with larger timeout.

Reproduces with:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:Tier0BackedgeNotifyFreqLog=0 -XX:Tier2BackedgeNotifyFreqLog=0 -XX:Tier3BackedgeNotifyFreqLog=0 -XX:Tier2BackEdgeThreshold=1 -XX:Tier3BackEdgeThreshold=1 -XX:Tier4BackEdgeThreshold=1 -Xbatch"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/loopopts/TestRemoveMainPostLoops.java;;;","2022-06-07 04:38;epeter;7)
test/hotspot/jtreg/compiler/jvmci/compilerToVM/ReprofileTest.java

Problem Flag:
-XX:TypeProfileLevel=222

Test gets profile twice, and expects it to be different:
java.lang.RuntimeException: public int compiler.jvmci.compilerToVM.DummyClass.dummyInstanceFunction() : profiling info didn't change after reprofile: expected HotSpotProfilingInfo<exceptionSeen@0: FALSE; exceptionSeen@1: FALSE; exceptionSeen@2: FALSE; exceptionSeen@3: FALSE; exceptionSeen@4: FALSE; exceptionSeen@5: FALSE; exceptionSeen@6: FALSE; exceptionSeen@7: FALSE; exceptionSeen@8: FALSE; exceptionSeen@9: FALSE; exceptionSeen@10: FALSE; exceptionSeen@11: FALSE; exceptionSeen@12: FALSE; exceptionSeen@13: FALSE; exceptionSeen@14: FALSE; exceptionSeen@15: FALSE; exceptionSeen@16: FALSE; exceptionSeen@17: FALSE; exceptionSeen@18: FALSE> to not equal HotSpotProfilingInfo<exceptionSeen@0: FALSE; exceptionSeen@1: FALSE; exceptionSeen@2: FALSE; exceptionSeen@3: FALSE; exceptionSeen@4: FALSE; exceptionSeen@5: FALSE; exceptionSeen@6: FALSE; exceptionSeen@7: FALSE; exceptionSeen@8: FALSE; exceptionSeen@9: FALSE; exceptionSeen@10: FALSE; exceptionSeen@11: FALSE; exceptionSeen@12: FALSE; exceptionSeen@13: FALSE; exceptionSeen@14: FALSE; exceptionSeen@15: FALSE; exceptionSeen@16: FALSE; exceptionSeen@17: FALSE; exceptionSeen@18: FALSE>

Solution:
Fix -XX:TypeProfileLevel=0 in test

Reproduced with:
 ~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:TypeProfileLevel=222"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/jvmci/compilerToVM/ReprofileTest.java;;;","2022-06-07 05:07;epeter;8)
test/hotspot/jtreg/compiler/jvmci/compilerToVM/IsMatureVsReprofileTest.java

Flags
-XX:Tier0BackedgeNotifyFreqLog=0 -XX:Tier2BackedgeNotifyFreqLog=0 -XX:Tier3BackedgeNotifyFreqLog=0 -XX:Tier2BackEdgeThreshold=1 -XX:Tier3BackEdgeThreshold=1 -XX:Tier4BackEdgeThreshold=1 -Xbatch -XX:-TieredCompilation

Sufficient for reproducing:
-XX:Tier4BackEdgeThreshold=1 -Xbatch -XX:-TieredCompilation

 java.lang.RuntimeException: Method should be compiled: expected true, was false
I suspect that the loop around the method in question was OSR compiled, and then the method inlined - thus never compiled itself.
Adding compileonly directive fixes the problem:
-XX:CompileCommand=dontinline,compiler.jvmci.common.testcases.SimpleClass::testMethod

Reproduces with:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:Tier0BackedgeNotifyFreqLog=0 -XX:Tier2BackedgeNotifyFreqLog=0 -XX:Tier3BackedgeNotifyFreqLog=0 -XX:Tier2BackEdgeThreshold=1 -XX:Tier3BackEdgeThreshold=1 -XX:Tier4BackEdgeThreshold=1 -Xbatch -XX:-TieredCompilation"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/jvmci/compilerToVM/IsMatureVsReprofileTest.java;;;","2022-06-07 06:26;epeter;9a)
test/hotspot/jtreg/compiler/intrinsics/klass/CastNullCheckDroppingsTest.java

Flags:
-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0

java.lang.AssertionError: compilation must got deoptimized
Guess: no traps used, so compiles in a way that does not trap (handles the otherwise trapped case), and therefore does not get deoptimized.

Solution: we need traps, so set to default:
-XX:+UnlockExperimentalVMOptions -XX:PerMethodTrapLimit=100

Reproduce:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/intrinsics/klass/CastNullCheckDroppingsTest.java

;;;","2022-06-07 06:27;epeter;9b)
test/hotspot/jtreg/compiler/intrinsics/klass/CastNullCheckDroppingsTest.java

Flag:
-XX:TypeProfileLevel=222

java.lang.AssertionError: no deoptimizations due to null_check found
Seems profiling messes with optimizations.

Solution:
-XX:TypeProfileLevel=0

Reproduce:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:TypeProfileLevel=222"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/intrinsics/klass/CastNullCheckDroppingsTest.java;;;","2022-06-07 06:28;epeter;9c)
test/hotspot/jtreg/compiler/intrinsics/klass/CastNullCheckDroppingsTest.java

Flags:
-XX:-TieredCompilation -XX:+StressReflectiveCode -XX:-ReduceInitialCardMarks -XX:-ReduceBulkZeroing -XX:-ReduceFieldZeroing -XX:+UnlockDiagnosticVMOptions -XX:+ExpandSubTypeCheckAtParseTime

Relevant Flag:
-XX:+StressReflectiveCode

java.lang.AssertionError: compilation must not got deoptimized
This flag messes with types at allocation - somehow messes with types?
But this could of course be a real but too. If we know it is not a bug, and that it messes with types unexpected to test: we can just set -XX:-StressReflectiveCode in test;;;","2022-06-07 06:29;epeter;9d)
test/hotspot/jtreg/compiler/intrinsics/klass/CastNullCheckDroppingsTest.java

Flags:
-XX:-MonomorphicArrayCheck -XX:-UncommonNullCast

Relevant Flag:
-XX:-UncommonNullCast
""track occurrences of null in casts; adjust compiler tactics""

java.lang.AssertionError: compilation must got deoptimized
messes with null check and the traps. ok to just turn on by default - all platforms have it on true.;;;","2022-06-07 06:31;epeter;9e)
test/hotspot/jtreg/compiler/intrinsics/klass/CastNullCheckDroppingsTest.java

Flags:
-XX:+UnlockDiagnosticVMOptions -XX:-TieredCompilation -XX:+StressArrayCopyMacroNode -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:+StressCCP -XX:+StressMethodHandleLinkerInlining -XX:+StressCompiledExceptionHandlers

Relevant Flag:
-XX:+StressMethodHandleLinkerInlining
""Stress inlining through method handle linkers""
disallows inlining of method handles?

java.lang.AssertionError: compilation must not got deoptimized
method handles in test would not get optimized, and not deoptimized.

Solution: add in test:
-XX:-StressMethodHandleLinkerInlining;;;","2022-06-07 06:44;epeter;10) [accept higher timeout]
test/hotspot/jtreg/compiler/intrinsics/TestLongUnsignedDivMod.java

Flag:
-XX:-UseTLAB
No TLAB: no thread-local object allocation

timeout
Without flags takes about 42 sec on my machine.
with flag times out after 120 sec

For now, just accept higher timeout, No TLAB makes things slower.

Reproduces:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:-UseTLAB"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/intrinsics/TestLongUnsignedDivMod.java;;;","2022-06-07 06:55;epeter;11) [accept higher timeout]
test/hotspot/jtreg/compiler/c2/TestUnsignedByteCompare1.java

Flags:
-XX:-UseTLAB


timeout
linux only failure?
with flag times out after 120sec on my machine
without flag takes only 13 sec

For now, just accept higher timeout, No TLAB makes things slower.

Reproduces:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:-UseTLAB"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/c2/TestUnsignedByteCompare1.java;;;","2022-06-07 07:03;epeter;12)
test/hotspot/jtreg/compiler/arraycopy/TestArrayCopyNoInitDeopt.java

Flags:
-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0

Sufficient:
-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0
java.lang.RuntimeException: m2 not deoptimized
-XX:+UnlockExperimentalVMOptions -XX:PerMethodTrapLimit=0
java.lang.RuntimeException: m1 not deoptimized

We need traps for this test, it assumes them. Set flags to default:
-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=5000 -XX:PerMethodTrapLimit=100

Reproduces:
~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/arraycopy/TestArrayCopyNoInitDeopt.java;;;","2022-06-10 02:20;epeter;13) ok?
test/hotspot/jtreg/compiler/rangechecks/TestLongRangeCheck.java

java.lang.RuntimeException: should have been deoptimized
need traps to trigger deoptimization

Solution: fix in test:
-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=5000 -XX:PerMethodTrapLimit=100

~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/rangechecks/TestLongRangeCheck.java;;;","2022-06-10 02:21;epeter;14) ok?
test/hotspot/jtreg/compiler/rangechecks/TestExplicitRangeChecks.java

java.lang.RuntimeException: some tests failed
need traps, as stated in comments in test

Solution: fix in test:
-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=5000 -XX:PerMethodTrapLimit=100

~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/rangechecks/TestExplicitRangeChecks.java;;;","2022-06-10 02:23;epeter;15) ok?
test/hotspot/jtreg/compiler/profiling/TestTypeProfiling.java

java.lang.RuntimeException: mRetTypeCheck is not deoptimized
need traps, as stated in comments in test

Solution: fix in test:
-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=5000 -XX:PerMethodTrapLimit=100

~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:+UnlockExperimentalVMOptions -XX:PerMethodSpecTrapLimit=0 -XX:PerMethodTrapLimit=0"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/profiling/TestTypeProfiling.java
;;;","2022-06-10 02:27;epeter;16) ok?
test/hotspot/jtreg/compiler/cha/AbstractRootMethod.java

Extra Flag:
-XX:+StressMethodHandleLinkerInlining

we see that the method is the same as the previous.
assertNotCompiled fails
assertTrue(curNM == null || prevNM.compile_id != curNM.compile_id); // either no nmethod present or recompiled
flag can mess with recompilation - so just disable it

Solution: fix in test:
-XX:-StressMethodHandleLinkerInlining

~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:+StressMethodHandleLinkerInlining"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/cha/AbstractRootMethod.java;;;","2022-06-10 02:28;epeter;17) ok?
test/hotspot/jtreg/compiler/cha/DefaultRootMethod.java

extra flag:
-XX:+StressMethodHandleLinkerInlining

we see that the method is the same as the previous.
assertNotCompiled fails
assertTrue(curNM == null || prevNM.compile_id != curNM.compile_id); // either no nmethod present or recompiled
flag can mess with recompilation - so just disable it

Solution: fix in test:
-XX:-StressMethodHandleLinkerInlining

~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:+StressMethodHandleLinkerInlining"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/cha/DefaultRootMethod.java;;;","2022-06-10 02:33;epeter;18) ok?
test/hotspot/jtreg/compiler/rangechecks/TestRangeCheckSmearing.java

java.lang.RuntimeException: static int compiler.rangechecks.TestRangeCheckSmearing.m7(int[],int,boolean) deoptimized on valid array access

~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:TieredStopAtLevel=3 -XX:+StressLoopInvariantCodeMotion"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/rangechecks/TestRangeCheckSmearing.java

-----
And a different assert for:
java.lang.RuntimeException: static int compiler.rangechecks.TestRangeCheckSmearing.m1(int[],int,boolean) deoptimized on valid array access

~/Documents/jtreg/build/images/jtreg/bin/jtreg -va -s -jdk:/home/emanuel/Documents/fork3-jdk/build/linux-x64-debug/jdk/ -javaoptions:""-XX:+UnlockDiagnosticVMOptions -XX:TieredStopAtLevel=3 -XX:+StressLoopInvariantCodeMotion -XX:+StressRangeCheckElimination -XX:+StressLinearScan"" /home/emanuel/Documents/fork3-jdk/open/test/hotspot/jtreg/compiler/rangechecks/TestRangeCheckSmearing.java

------
Well, as the test states, this is a C2 test. Adding this:
 * @requires vm.flavor == ""server"" & (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 4)
;;;","2022-06-16 23:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9186
Date: 2022-06-16 14:44:19 +0000;;;","2022-06-20 07:30;dukebot;Changeset: 302a6c06
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-06-20 14:29:06 +0000
URL:       https://git.openjdk.org/jdk/commit/302a6c068dcbb176381b1535baf25547079c9b06
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Incorrect error message when starting recording with missing .jfc file,JDK-8287800,5076184,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,egahlin,egahlin,egahlin,2022-06-03 06:11,2023-05-19 01:05,2023-10-01 09:56,2022-06-20 05:25,17,19,,,,,,,,,,19,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,,,,"If a missing settings file (.jfc) is specified to JFR.start, XX:StartFlightRecording or jfr configure, the error message sometimes says the file can't be parsed. This is very confusing, especially if the filename is a typo.

The message should say the file can't be found, which was always the case in releases prior to JDK 17.
",,,,,,,,,,JDK-8288777,JDK-8291269,JDK-8291102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xc6r:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-06-19 20:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/43
Date: 2022-06-20 01:40:59 +0000;;;","2022-06-20 05:25;dukebot;Changeset: 1cf83a40
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-06-20 12:23:33 +0000
URL:       https://git.openjdk.org/jdk19/commit/1cf83a403f15067fb5a64cff68dc5706f533ebd7
;;;","2023-05-19 01:05;shade;This issue affects JDK 17 too, is it not? Added the relevant affected versions.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stop auto-inheriting documentation for subclasses of exceptions whose documentation is inherited,JDK-8287796,5076177,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-06-03 05:25,2022-11-28 14:45,2023-10-01 09:56,2022-11-16 01:45,19,,,,,,,,,,,20,tools,,0,javadoc-inheritance,,,,,,,,,,,,,,,,,,,,"Assess risk of changing that behavior, which the documentation author cannot opt out of. Consider alternatives. Provide a migration plan, if required.

If implemented, this would effectively revert what's been introduced by JDK-4947455.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291803,,,,,,,,,,,,,JDK-4947455,,,,,,,JDK-8294377,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xc57:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-09-28 04:36;prappo;FYI: https://bugs.openjdk.org/browse/JDK-4947455?focusedCommentId=14526702&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14526702;;;","2022-10-18 10:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10746
Date: 2022-10-18 15:05:16 +0000;;;","2022-11-16 01:45;dukebot;Changeset: 499406c7
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-11-16 09:43:21 +0000
URL:       https://git.openjdk.org/jdk/commit/499406c764ba0ce57079b1f612297be5b148e5bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reverse*VNode::Identity problem,JDK-8287794,5076175,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbhateja,shade,shade,2022-06-03 05:04,2022-08-03 20:07,2023-10-01 09:56,2022-07-28 04:12,19,20,,,,,,,,,,20,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-19,sonarcloud-found,,,,,,,,,,,,,,,,"(synopsis is provisional, feel free to change as you see fit)

SonarCloud reports that the if-else-branch in Reverse*VNode::Identity has the same code:

Node* ReverseBytesVNode::Identity(PhaseGVN* phase) {
  if (is_predicated_using_blend()) {
    return this;
  }
  // ReverseBytesV (ReverseBytesV X , MASK) , MASK =>  X
  if (in(1)->Opcode() == Op_ReverseBytesV) {
    if (is_predicated_vector() && in(1)->is_predicated_vector() && in(2) == in(1)->in(2)) {
      return in(1)->in(1);
    } else {
      // ReverseBytesV (ReverseBytesV X) =>  X
      return in(1)->in(1);
    }
  }
  return this;
}

Seems to me the first condition checks that MASKs are the same in both nodes. But if they are not, we are falling to ""else"" branch, where we do the same transformation anyway. So, there might be a bug lurking there when MASKs are different.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284960,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xc4r:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-03 06:54;chagedorn;ILW = Possible wrong Identity transformation in ReverseBytesVNode, no known cases, no workaround = MLH = P4;;;","2022-06-04 01:14;dlong;[~jbhateja], please take a look.;;;","2022-06-07 01:48;chagedorn;Hi [~jbhateja], just a quick reminder, as this is a P4 bug, it will be deferred to JDK 20 after the fork.;;;","2022-07-22 10:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/153
Date: 2022-07-22 17:24:04 +0000;;;","2022-07-24 05:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9623
Date: 2022-07-23 17:39:27 +0000;;;","2022-07-28 04:12;dukebot;Changeset: 471a427d
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2022-07-28 11:08:38 +0000
URL:       https://git.openjdk.org/jdk/commit/471a427d1023ee5948d9e58ba04ecabaa7a4db97
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lw4] Javac tolerates synchronizing on an instance of a value interface,JDK-8287770,5076135,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-06-03 00:27,2022-06-03 01:58,2023-10-01 09:56,2022-06-03 01:58,repo-valhalla,,,,,,,,,,,repo-valhalla,tools,,0,lw4,,,,,,,,,,,,,,,,,,,,"http://cr.openjdk.java.net/~dlsmith/jep8277163/jep8277163-20220519/specs/value-objects-jls.html

A synchronized statement acquires a mutual-exclusion lock (17.1) on behalf of the executing thread, executes a block, then releases the lock. While the executing thread owns the lock, no other thread may acquire the lock.

SynchronizedStatement:
synchronized ( Expression ) Block
The type of Expression must be a reference type, and must not be a value class or interface type, or a type variable or intersection type bounded by a value class or interface type, or a compile-time error occurs.

But javac tolerates this:

value interface VI {}

class X {
    void foo(VI vi) {
        synchronized (vi) {
        }
    }
}


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xbvv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-03 01:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/703
Date: 2022-06-03 08:49:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lw4] Record component may not have the name isValueObject,JDK-8287768,5076133,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,sadayapalam,sadayapalam,2022-06-03 00:14,2022-08-15 19:55,2023-10-01 09:56,2022-08-15 19:55,repo-valhalla,,,,,,,,,,,repo-valhalla,tools,,0,lw4,,,,,,,,,,,,,,,,,,,,"http://cr.openjdk.java.net/~dlsmith/jep8277163/jep8277163-20220519/specs/value-objects-jls.html

8.10.1 Record Components
...

It is a compile-time error for a record declaration to declare a record component with the name clone, finalize, getClass, hashCode, isValueObject, notify, notifyAll, toString, or wait.

ATM, javac does not enforce the restriction for isValueObject, so

record R(int finalize, int hashCode, int isValueObject) {}

produces two errors rather than three.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xbvf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-08-15 16:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/722
Date: 2022-08-15 23:21:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lw4] Javac tolerates mutually incompatible super types.,JDK-8287767,5076130,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-06-02 23:59,2022-06-07 01:32,2023-10-01 09:56,2022-06-07 01:32,repo-valhalla,,,,,,,,,,,repo-valhalla,tools,,0,lw4,,,,,,,,,,,,,,,,,,,,"http://cr.openjdk.java.net/~dlsmith/jep8277163/jep8277163-20220519/specs/value-objects-jls.html

8.1.5 Superinterfaces

...

It is a compile-time error if an identity class (8.1.1.5) has a superinterface that is a value interface, or if a value class has a superinterface that is an identity interface, or if any class has both an identity superclass or superinterface and a value superclass or superinterface.

But javac tolerates this code:

identity interface II {}
value interface VI {}

abstract class X implements II, VI {}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xbur:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-07 01:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/705
Date: 2022-06-07 08:20:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/serviceability/ReplaceCriticalClasses failed on localized Windows,JDK-8287764,5076126,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tkiriyama,tkiriyama,tkiriyama,2022-06-02 23:48,2022-06-09 22:25,2023-10-01 09:56,2022-06-06 14:13,19,,,,,,,,,,,19,hotspot,,0,cds,i18n,,,,,,,,,,,,,,,,,,,"environment:
Windows 10 with Japanese locale

runtime/cds/serviceability/ReplaceCriticalClasses failed due to the following reason:

Exception in thread ""main"" java.lang.RuntimeException: interface java.lang.Readable should not be shared but actually is.
	at ReplaceCriticalClasses.testInChild(ReplaceCriticalClasses.java:213)
	at ReplaceCriticalClasses.process(ReplaceCriticalClasses.java:68)
	at ReplaceCriticalClasses.main(ReplaceCriticalClasses.java:46)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xbtv:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-03 00:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9009
Date: 2022-06-03 06:58:24 +0000;;;","2022-06-06 14:13;dukebot;Changeset: c328f8fa
Author:    KIRIYAMA Takuya <kiriyama.takuya@fujitsu.com>
Committer: Ioi Lam <iklam@openjdk.org>
Date:      2022-06-06 21:08:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c328f8fa2a166ead49d23138e0d7e507c3ebba53
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lw4] Javac does not implement the spec for non-trivial constructors in toto ,JDK-8287763,5076124,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-06-02 22:54,2022-06-09 03:40,2023-10-01 09:56,2022-06-09 03:40,repo-valhalla,,,,,,,,,,,repo-valhalla,tools,,0,[lw4],,,,,,,,,,,,,,,,,,,,"http://cr.openjdk.java.net/~dlsmith/jep8277163/jep8277163-20220519/specs/value-objects-jls.html says:

A class with neither the modifier identity nor value is implicitly an identity class if it ...

... is abstract and declares a nontrivial constructor (8.8) or an instance initializer (8.6). A constructor is considered ""nontrivial"" for the purpose of this rule if its level of access is more restrictive than the class (8.8.3), it declares formal parameters (8.8.1) or type parameters (8.8.4), it has a throws clause (8.8.5), or its body contains something other than an explicit constructor invocation of the form super(); (8.8.7).

Given 
abstract class I0 {
    public I0() { // trivial ctor.
        super();
    }  
}

abstract class I1 {
    private I1() {} // non-trivial, more restrictive access than the class.
}

abstract class I2 {
    public I2(int x) {} // non-trivial ctor as it declares formal parameters.
}

abstract class I3 {
    <T> I3() {} // non trivial as it declares type parameters.
}


abstract class I4 {
    I4() throws Exception {} // non-trivial as it throws
}

abstract class I5 {
    I5() {
        System.out.println("""");
    } // non-trivial as it has a body.
}

javac marks I2 and I5 as having identity but fails in the case of I1, I3 and I4

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xbtf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-09 03:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/708
Date: 2022-06-09 10:27:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make the logging of J2DBench stable,JDK-8287761,5076122,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,serb,serb,serb,2022-06-02 22:19,2022-06-09 22:26,2023-10-01 09:56,2022-06-06 14:30,17,19,,,,,,,,,,19,client-libs,,0,noreg-demo,,,,,,,,,,,,,,,,,,,,"Currently, the logging of the J2DBench differs from run to run. Each time the order of the parameters is different.

For example:
First run:
with to Default Frame, bounce, 1x1, SrcOver, ident, !extraalpha, !xormode, !clip, Default, from transvolimg translucent, !touchsrc, Nearest neighbor
Next run:
with SrcOver, bounce, Nearest neighbor, ident, !touchsrc, to CompatImage(Opaque), Default, 1x1, !xormode, !clip, from bmcompatimg bitmask, !extraalpha

The root cause is that the options are stored in the Hashtable and printed in the ""random"" order.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xbsz:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2a9c6101,,,,,,,,,"2022-06-02 22:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9008
Date: 2022-06-03 05:30:10 +0000;;;","2022-06-06 14:30;dukebot;Changeset: a277590c
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-06-06 21:25:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a277590c89b173fd9bc028c715564f18fe62f722
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
--do-not-resolve-by-default gets overwritten if --warn-if-resolved flags is used,JDK-8287760,5075830,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lancea,webbuggrp,webbuggrp,2022-05-29 19:35,2022-06-29 23:08,2023-10-01 09:56,2022-06-23 02:43,17,19,,,,,,,,,,20,tools,,0,19ea,additional-information-received,dcsad,reproducer-no,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
When creating an incubator Modular Jar using the --do-not-resolve-by-default and --warn-if-resolved, I've found out that the first flag gets overwritten when specifying the --warn-if-resolved.




FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-06-03 08:09;adev;incubator-module-example-master.zip;https://bugs.openjdk.org/secure/attachment/99216/incubator-module-example-master.zip",,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xa03:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@189ffaae,,,,,,,,,"2022-05-31 22:43;adev;Requested the submitter for a simple reproducer.;;;","2022-06-02 22:07;adev;Information received from the submitter
==================================
You can check out this project: https://github.com/Thihup/incubator-module-example

In the pom.xml, the file includes the --warn-if-resolved and then --do-no-resolve-by-default.
Inverting the order, the first flag is ignored.

The bug is in this file: https://github.com/openjdk/jdk/blob/master/src/jdk.jartool/share/classes/sun/tools/jar/GNUStyleOptions.java#L181
The code should be 
    mres = mres.withDoNotResolveByDefault();


You can check out the difference by using:

    javap -v jar:file://path/to/incubator-module-example/target/incubator-module-example-1.0-SNAPSHOT.jar!/module-info.class

The code in the current example return the following
    ModuleResolution:
      9                                       //  DO_NOT_RESOLVE_BY_DEFAULT WARN_INCUBATING

However, inverting the order,
    ModuleResolution:
      8                                       //  WARN_INCUBATING
;;;","2022-06-02 22:08;adev;I am getting 404 on https://github.com/Thihup/incubator-module-example.
Re - requested the submitter for a reproducer.;;;","2022-06-03 08:05;adev;When using the arguments in this order:
<arg>--warn-if-resolved=incubating</arg>
<arg>--do-not-resolve-by-default</arg>

javap -v jar:file://pathtojar.jar!/module.class gives:
SourceFile: ""module-info.java""
Module:
  #5,0                                    // ""dev.thihup.my.incubator.module""
  #6                                      // 1.0-SNAPSHOT
  1                                       // requires
    #12,8000                                // ""java.base"" ACC_MANDATED
    #13                                     // 17.0.2
  1                                       // exports
    #8,0                                    // dev/thihup/my/incubator/module/api
  0                                       // opens
  0                                       // uses
  0                                       // provides
ModulePackages:
  #8                                      // dev.thihup.my.incubator.module.api
  #10                                     // dev.thihup.my.incubator.module.internal
ModuleResolution:
  9                                       //  DO_NOT_RESOLVE_BY_DEFAULT WARN_INCUBATING
=========================================================================
While using the arguments in this order:
<arg>--do-not-resolve-by-default</arg>
<arg>--warn-if-resolved=incubating</arg>
javap -v jar:file://pathtojar.jar!/module.class gives:
SourceFile: ""module-info.java""
Module:
  #5,0                                    // ""dev.thihup.my.incubator.module""
  #6                                      // 1.0-SNAPSHOT
  1                                       // requires
    #12,8000                                // ""java.base"" ACC_MANDATED
    #13                                     // 17.0.2
  1                                       // exports
    #8,0                                    // dev/thihup/my/incubator/module/api
  0                                       // opens
  0                                       // uses
  0                                       // provides
ModulePackages:
  #8                                      // dev.thihup.my.incubator.module.api
  #10                                     // dev.thihup.my.incubator.module.internal
ModuleResolution:
  8                                       //  WARN_INCUBATING

;;;","2022-06-06 17:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9049
Date: 2022-06-07 00:45:17 +0000;;;","2022-06-23 02:43;dukebot;Changeset: a802b981
Author:    Thiago Henrique Hüpner <thihup@gmail.com>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2022-06-23 09:41:06 +0000
URL:       https://git.openjdk.org/jdk/commit/a802b9816ac5c0cb0fd236cc7f25ed4fdb1349ef
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update jib GNU make dependency on Windows to latest cygwin build,JDK-8287754,5076114,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,erikj,erikj,erikj,2022-06-02 15:37,2023-01-23 08:40,2023-10-01 09:56,2022-10-25 05:47,,,,,,,,,,,,20,infrastructure,,0,build-infra,jdk11u-na,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"It seems like our issues with make crashing when building OpenJDK in Cygwin may have been fixed. Using the latest Cygwin dll (3.3.5-1) and the latest GNU make (4.3-1), the build works.

We are still validating this on more systems, but if this is indeed stable, we need to bump the jib dependency used for Oracle builds of the JDK to the latest GNU make 4.3.",,,,,,,,,,JDK-8299919,JDK-8300146,JDK-8300145,JDK-8300860,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2xbr7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-10-20 14:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10805
Date: 2022-10-20 21:49:41 +0000;;;","2022-10-25 05:47;dukebot;Changeset: af2de975
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-10-25 12:44:23 +0000
URL:       https://git.openjdk.org/jdk/commit/af2de975cbc46ad91c736b110a2212cd32ba60a7
;;;","2023-01-17 01:25;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle, just for completeness.
No risk, only a build change, jib not used in openjdk to my knowledge.
Clean backport.
SAP nightly testing passed.;;;","2023-01-17 01:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1074
Date: 2023-01-17 09:32:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[spelling] close well-established compounds,JDK-8287753,5076113,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-06-02 15:28,2022-06-09 22:23,2023-10-01 09:56,2022-06-04 08:57,19,,,,,,,,,,,19,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,"Some compounds created with ""sub"" and ""super"" prefixes need to be closed (i.e. should use neither whitespace nor hyphen) as those compounds are well established.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287606,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xbqz:",9223372036854775807,b26,,,,,,,,,,,"2022-06-02 15:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9007
Date: 2022-06-02 22:48:56 +0000;;;","2022-06-04 08:57;dukebot;Changeset: a6fc485a
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-06-04 15:55:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a6fc485a22484b70daf170e981432c0856b9d93d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix issues in java.lang.foreign package javadoc,JDK-8287748,5076105,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-06-02 13:33,2022-06-09 22:17,2023-10-01 09:56,2022-06-02 17:19,19,,,,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,"There are a couple of issues in the code samples in the java.lang.foreign package javadoc.

Also, some of the samples use `var`. While the usages are ok, it would perhaps better to use explicit types at this stages, so that developers could better understand the abstractions involved.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xbp7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-06-02 13:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9005
Date: 2022-06-02 20:41:39 +0000;;;","2022-06-02 17:19;dukebot;Changeset: ba9ee8cb
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-06-03 00:17:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ba9ee8cb286268f1d6a2820508334aaaf3131e15
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jni/nullCaller/NullCallerTest.java fails with ""exitValue = 1""",JDK-8287745,5076101,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tprinzing,dcubed,dcubed,2022-06-02 11:45,2022-07-27 04:05,2023-10-01 09:56,2022-06-07 09:03,19,,,,,,,,,,,19,core-libs,,0,problemlist,tier1,tier4,,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

jni/nullCaller/NullCallerTest.java

Here's a snippet from the log file:

----------System.err:(21/1850)----------
/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-1921/linux-x64-open.test/jdk/jtreg/native/NullCallerTest: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-1921/linux-x64-open.test/jdk/jtreg/native/NullCallerTest)
/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-1921/linux-x64-open.test/jdk/jtreg/native/NullCallerTest: /lib64/libstdc++.so.6: version `CXXABI_1.3.9' not found (required by /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-1921/linux-x64-open.test/jdk/jtreg/native/NullCallerTest)

 stdout: [];
 stderr: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-1921/linux-x64-open.test/jdk/jtreg/native/NullCallerTest: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-1921/linux-x64-open.test/jdk/jtreg/native/NullCallerTest)
/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-1921/linux-x64-open.test/jdk/jtreg/native/NullCallerTest: /lib64/libstdc++.so.6: version `CXXABI_1.3.9' not found (required by /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-1921/linux-x64-open.test/jdk/jtreg/native/NullCallerTest)
]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0]

	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:489)
	at NullCallerTest.main(NullCallerTest.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1596)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

----------System.out:(7/709)----------
Launching: /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-1921/linux-x64-open.test/jdk/jtreg/native/NullCallerTest shared library path: /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-1921/linux-x64-open.jdk/jdk-19/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+26-1921/linux-x64-open.jdk/jdk-19/lib/server
[2022-06-02T17:33:25.798960865Z] Gathering output for process 8347

[2022-06-02T17:33:25.818247643Z] Waiting for completion for process 8347
[2022-06-02T17:33:25.818363732Z] Waiting for completion finished for process 8347
[2022-06-02T17:33:25.818445518Z] Waiting for completion for process 8347
[2022-06-02T17:33:25.818542231Z] Waiting for completion finished for process 8347
result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0]


test result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0]

The failure first shows up in Tier1 with the following changeset:

2022-06-02 16:45
tprinzing: e51ca1 - OpenJDK
8287171  Refactor null caller tests to a single directory

These failures are happening in Tier1 so I'm starting this bug off as a P1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287171,JDK-8287746,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i2xbob:",9223372036854775807,b26,,,,,,,,,Verified,,"2022-06-02 18:02;dcubed;Lowering from P1 -> P2 since the test has been ProblemListed.;;;","2022-06-03 00:51;tprinzing;Fixed make/test/JtregNativeJdk.gmk to include c++ libs for NullCallerTest;;;","2022-06-03 01:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9010
Date: 2022-06-03 07:56:38 +0000;;;","2022-06-07 09:03;dukebot;Changeset: 96641c0c
Author:    Tim Prinzing <tprinzing@openjdk.org>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2022-06-07 16:02:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/96641c0c42ff79d809db1314407d451eb7d494b4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/text/CSSBorder/6796710/bug6796710.java failed,JDK-8287743,5076099,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,dcubed,dcubed,2022-06-02 10:29,2022-06-15 23:41,2023-10-01 09:56,2022-06-10 06:38,19,,,,,,,,,,,20,client-libs,,0,intermittent,macos,sn_119,sn_120,tier4,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

javax/swing/text/CSSBorder/6796710/bug6796710.java

Here's a snippet from the log file:

#section:main
----------messages:(5/257)----------
command: main -Dsun.java2d.uiScale=1 bug6796710
reason: User specified action: run main/othervm -Dsun.java2d.uiScale=1 bug6796710 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 4.416
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(11/596)----------
java.lang.RuntimeException: The test failed
	at bug6796710.main(bug6796710.java:132)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)

JavaTest Message: Test threw exception: java.lang.RuntimeException: The test failed
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: The test failed
----------rerun:(42/6568)*----------",,,,,,,,,,JDK-8288352,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-06-02 20:51;psadhukhan;bufferedImage.png;https://bugs.openjdk.org/secure/attachment/99213/bufferedImage.png","2022-06-02 20:51;psadhukhan;pnBottomImage.png;https://bugs.openjdk.org/secure/attachment/99214/pnBottomImage.png",,,,,,,,,aarch64,,,,,,,,,,os_x,,,,,,"0|i2xbnv:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-06-02 20:52;psadhukhan;The test will fail if the bufferedimages bufferedImage.png and pnBottomImage.png differs but the attached png artifacts from the failed case doesn't show any visible difference.;;;","2022-06-02 22:24;psadhukhan;ANother case in iMac where color comparision differed by 1

x 0 y 0 rgb1: fff0f0f0 rgb2: fff0eff0;;;","2022-06-03 02:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9011
Date: 2022-06-03 09:46:11 +0000;;;","2022-06-10 06:38;dukebot;Changeset: fcb35ed4
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-06-10 13:37:24 +0000
URL:       https://git.openjdk.org/jdk/commit/fcb35ed40e46759f52d5c86a09e4a4f973edd58d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix of JDK-8287107 (unused cgv1 freezer controller) was incomplete,JDK-8287741,5076097,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-06-02 10:06,2023-02-21 00:22,2023-10-01 09:56,2022-06-07 05:33,,,,,,,,,,,,19,hotspot,,0,cgroupsv2,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,redhat-interest,,,,,,,,,,,,"The change of JDK-8287107 failed to fix the hotspot code :( There, the cgroup path would happily set all controllers to the path of a cgroups v1 controller if it so happens that it is being listed *after* the cgroups v2 one.

Example:

$ cat /proc/self/cgroup
0::/foobar
11:freezer:/cg1

The cgroup path would end up being '/cg1' instead of '/foobar'. This can be fairly easy to reproduce with this patch:

diff --git a/src/hotspot/os/linux/cgroupSubsystem_linux.cpp b/src/hotspot/os/linux/cgroupSubsystem_linux.cpp
index 1346cf8915f..7b93e0d5721 100644
--- a/src/hotspot/os/linux/cgroupSubsystem_linux.cpp
+++ b/src/hotspot/os/linux/cgroupSubsystem_linux.cpp
@@ -261,6 +261,8 @@ bool CgroupSubsystemFactory::determine_type(CgroupInfo* cg_infos,
     }
     if (is_cgroupsV2) {
       for (int i = 0; i < CG_INFO_LENGTH; i++) {
+        assert(hierarchy_id == cg_infos[i]._hierarchy_id, ""/proc/cgroups (%d) and /proc/self/cgroup (%d) hierarchy mismatch"",
+                                                                 cg_infos[i]._hierarchy_id, hierarchy_id);
         cg_infos[i]._cgroup_path = os::strdup(cgroup_path);
       }
     }

And running on a fastdebug build:
$ make  LOG=debug  test TEST=""jtreg:test/hotspot/jtreg/containers/cgroup/CgroupSubsystemFactory.java""

It asserts with:

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/cgroupSubsystem_linux.cpp:264
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/disk/openjdk/upstream-sources/git/jdk-jdk/src/hotspot/os/linux/cgroupSubsystem_linux.cpp:264), pid=134644, tid=134666
#  assert(hierarchy_id == cg_infos[i]._hierarchy_id) failed: /proc/cgroups (0) and /proc/self/cgroup (11) hierarchy mismatch
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.sgehwolf.jdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x95a67c]  CgroupSubsystemFactory::determine_type(CgroupInfo*, char const*, char const*, char const*, unsigned char*)+0xd4c",,,,,,,,,,JDK-8298595,JDK-8288102,JDK-8302729,JDK-8288434,JDK-8292966,JDK-8302959,JDK-8301372,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287107,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,linux,,,,,,"0|i2xbnf:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-02 11:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9001
Date: 2022-06-02 18:30:38 +0000;;;","2022-06-07 05:33;dukebot;Changeset: 8d28734e
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-06-07 12:28:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8d28734ede0ed3922c92451a172d1fa676e484e9
;;;","2022-06-08 06:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/444
Date: 2022-06-08 13:38:44 +0000;;;","2022-06-08 07:09;sgehwolf;Fix Request (OpenJDK 17u):

This isssue is present in 17u codeline too and can have the effect of using a wrong cgroup path which yields to wrong cpu/memory sizing of the JDK when run in a container. Risk should be low as it's a Linux-only change and should be fully backwards compatible. Container tests didn't show any issues with this. I'll push this together with the Java fixes of JDK-8287107 (if approved). ;;;","2022-08-25 10:26;sgehwolf;Fix Request (OpenJDK 11u):

This isssue is present in 11u codeline too and can have the effect of using a wrong cgroup path which yields to wrong cpu/memory sizing of the JDK when run in a container. Risk should be low as it's a Linux-only change and should be fully backwards compatible. Container tests didn't show any issues with this. I'll push this together with the Java fixes of JDK-8287107 (if approved). The assert added with this patch fires when run without the product fix in this patch from JDK-8287107 (containers/cgroup/CgroupSubsystemFactory.java). Affects cg v2 only.;;;","2022-08-25 10:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1345
Date: 2022-08-25 17:29:23 +0000;;;","2022-12-20 10:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/219
Date: 2022-12-20 18:20:47 +0000;;;","2023-01-27 01:44;sgehwolf;Fix Request (OpenJDK 8u):

This isssue is present in 8u-dev (8u372) codeline too and can have the effect of using a wrong cgroup path which yields to wrong cpu/memory sizing of the JDK when run in a container. Risk should be low as it's a Linux-only change and should be fully backwards compatible. Container tests didn't show any issues with this. I'll push this together with the Java fixes of JDK-8287107 (if approved). The assert added with this patch fires when run without the product fix in this patch from JDK-8287107 (containers/cgroup/CgroupSubsystemFactory.java). Affects cg v2 only. Clean patch after JDK-8287107.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NSAccessibilityShowMenuAction not working for text editors,JDK-8287740,5076096,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenov,asemenov,asemenov,2022-06-02 08:54,2023-05-05 03:44,2023-10-01 09:56,2022-06-03 14:35,18,19,,,,,,,,,,19,client-libs,,0,a11y,accessibility,cssn22_07_01,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-yes,macos,vpat,,,,,,,,,,,,,"The NSAccessibilityShouMinuAction action does not show the menu for the text element.
Steps to reproduce:
1. redefine the accessible context with the addition of the toggle popup action;
2. run on macOS with VoiceOver enabled;
3. try to call the context menu in the editor by pressing vo+shift+m.",,,,,,,,,,JDK-8288829,JDK-8288837,JDK-8296259,JDK-8289750,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2xbn7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-06-02 09:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8997
Date: 2022-06-02 16:07:37 +0000;;;","2022-06-03 14:34;dukebot;Changeset: b6cdfd68
Author:    Artem Semenov <asemenov@openjdk.org>
Date:      2022-06-03 21:29:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b6cdfd685d0cea308b15558e2dc607a680c89dc0
;;;","2022-11-01 13:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/830
Date: 2022-10-25 03:31:14 +0000;;;","2022-11-01 15:49;phh;Fix Request (17u).

On behalf of Rui Li ruiamzn@amazon.com

Clean Oracle parity backport, minimal risk, updated test passes.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PPC64] jdk/incubator/vector/*VectorTests failing,JDK-8287738,5076094,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,mdoerr,mdoerr,2022-06-02 08:39,2022-06-09 22:41,2023-10-01 09:56,2022-06-09 03:18,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-19,,,,,,,,,,,,,,,,,,,,"The following tests are failing with ""bad AD file"" because ""PopCountVI"" was not matched:
jdk/incubator/vector/Byte128VectorTests.java
jdk/incubator/vector/ByteMaxVectorTests.java
jdk/incubator/vector/Short128VectorTests.java
jdk/incubator/vector/ShortMaxVectorTests.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284960,,,,,,,JDK-8284960,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,,"0|i2xbmr:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-02 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8998
Date: 2022-06-02 16:08:11 +0000;;;","2022-06-02 17:45;dlong;ILW = incubator tests failing; ppc64 only; no workaround = MMH = P3;;;","2022-06-09 03:18;dukebot;Changeset: 560e2927
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-06-09 10:14:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/560e2927e380a372effdfe4a7260c3606bf74c8b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GHA: Capture failures without hs_err better,JDK-8287733,5076088,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,ihse,shade,shade,2022-06-02 07:48,2022-11-07 05:06,2023-10-01 09:56,2022-11-07 05:06,19,,,,,,,,,,,,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,"See here:
  https://github.com/shipilev/jdk/runs/6707038402

The test did not crash, so no hs_errs were produced. But the GHA workflow hiccuped on ""Generate test failure summary"" step:

Run #
cat: 'build/run-test-prebuilt/test-support/jtreg_test_langtools_tier1/jdk/jshell/ToolEnablePreviewTest/hs_err*.log': No such file or directory
Error: Process completed with exit code 1.

I think JDK-8287366 is a bit incomplete in this regard.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287366,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xblf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-06-08 07:12;ihse;You are absolutely correct, that implementation was not complete. I have fixed this (and other issues) in JDK-8287906.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jshell/ToolEnablePreviewTest.java fails on x86_32 after JDK-8287496,JDK-8287732,5076087,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-06-02 07:43,2022-06-09 22:25,2023-10-01 09:56,2022-06-05 22:33,19,,,,,,,,,,,19,tools,,0,regression,,,,,,,,,,,,,,,,,,,,"Manifests right now in x86_32 tier1 tests and GHA. The test tries to launch the tool via JDI/JVMTI, which does not work with --enable-preview when the VM doesn't have continuations support.

FailOverExecutionControlProvider: FAILED: 1:jdi:launch(true) --
  Exception: java.lang.InternalError: Failed remote launch: java.util.concurrent.ExecutionException: com.sun.jdi.connect.VMStartException: VM initialization failed for: /home/shade/trunks/jdk/build/linux-x86-server-fastdebug/images/jdk/bin/java --enable-preview -Xdebug -Xrunjdwp:transport=dt_socket,address=localhost:51453,suspend=y,enumeratevthreads=n jdk.jshell.execution.RemoteExecutionControl 43679 @ com.sun.jdi.CommandLineLaunch (defaults: home=/home/shade/trunks/jdk/build/linux-x86-server-fastdebug/images/jdk, options=, main=, suspend=true, quote="", vmexec=java, enumeratevthreads=n) -- {home=home=/home/shade/trunks/jdk/build/linux-x86-server-fastdebug/images/jdk, options=options=--enable-preview, main=main=jdk.jshell.execution.RemoteExecutionControl 43679, suspend=suspend=true, quote=quote="", vmexec=vmexec=java, enumeratevthreads=enumeratevthreads=n}
                  jdk.jshell/jdk.jshell.execution.JdiInitiator.reportLaunchFail(JdiInitiator.java:300)
                  jdk.jshell/jdk.jshell.execution.JdiInitiator.launchTarget(JdiInitiator.java:141)
                  jdk.jshell/jdk.jshell.execution.JdiInitiator.<init>(JdiInitiator.java:110)
                  jdk.jshell/jdk.jshell.execution.JdiDefaultExecutionControl.create(JdiDefaultExecutionControl.java:103)
                  jdk.jshell/jdk.jshell.execution.JdiExecutionControlProvider.generate(JdiExecutionControlProvider.java:152)
      cause: java.util.concurrent.ExecutionException: com.sun.jdi.connect.VMStartException: VM initialization failed for: /home/shade/trunks/jdk/build/linux-x86-server-fastdebug/images/jdk/bin/java --enable-preview -Xdebug -Xrunjdwp:transport=dt_socket,address=localhost:51453,suspend=y,enumeratevthreads=n jdk.jshell.execution.RemoteExecutionControl 43679
FailOverExecutionControlProvider: FAILED: 2:jdi --
  Exception: java.lang.IllegalArgumentException: ERROR: JDWP unable to access JVMTI Version 1 (0x30010000), is your J2SE a 1.5 or newer version? JNIEnv's GetEnv() returned -3

                  jdk.jshell/jdk.jshell.execution.JdiInitiator.listenTarget(JdiInitiator.java:201)
                  jdk.jshell/jdk.jshell.execution.JdiInitiator.<init>(JdiInitiator.java:111)
                  jdk.jshell/jdk.jshell.execution.JdiDefaultExecutionControl.create(JdiDefaultExecutionControl.java:103)
                  jdk.jshell/jdk.jshell.execution.JdiExecutionControlProvider.generate(JdiExecutionControlProvider.java:152)
                  jdk.jshell/jdk.jshell.spi.ExecutionControl.generate(ExecutionControl.java:179)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287729,,,,,,,,,,JDK-8287496,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xbl7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-06-02 07:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8995
Date: 2022-06-02 14:50:22 +0000;;;","2022-06-02 07:58;alanb;This is a jshell test using --enable-preview so needs to be skipped when the VM doesn't have continuations support. So it needs ""@requires vm.continuations"", which means langtools/TEST.group needs the configuration to use jtreg-ext/requires/VMProps.java and requires.properties set to include vm.continuations.;;;","2022-06-05 22:33;dukebot;Changeset: 0d1a3053
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-06-06 05:29:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0d1a3053cd25dc666981c5aedfa5efc2dc95bd0e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix various issues with msys2,JDK-8287724,5076073,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-06-02 02:14,2022-11-25 03:52,2023-10-01 09:56,2022-06-02 05:54,19,,,,,,,,,,,19,infrastructure,,0,build-infra,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"I encountered a bunch of issues when running with msys2 on Windows (but one of them could have happened on cygwin as well).

* fixpath must set MSYS2_ARG_CONV_EXCL=""*"" before running cmd.exe to figure out the temp directory, or msys might interfere with the command line to cmd.

* Paths like ""/c/s/source/jdk"", meaning to point to ""c:\s\source\jdk"", would be interpreted by fixpath as ""/cs:\source\jdk"", since the leading ""/c"" would be considered a prefix. This is not a problem on cygwin, where the /cygpath prefix makes paths unambiguous. I countered this by checking if the file exists (as written, or just the basepath, or the first 3 parts of the path). If so, I treat it as a filename, rather than a prefix.

* Configure is supposed to handle windows-style input paths, but `--with-bootjdk=c:\java\jdk-17` or similar would break, since we started to look for files in that directory without having to normalized the path first.

* Finally, configure.guess sometimes reports msys as `mingw` and sometimes as `msys`, depending on the value of MSYSTEM. (And for some values, the old autoconf-configure.guess breaks -- I did not bother fixing this.)",,,,,,,,,,JDK-8297634,JDK-8290107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xbi3:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-06-02 02:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8989
Date: 2022-06-02 09:17:59 +0000;;;","2022-06-02 05:53;dukebot;Changeset: bddef715
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-06-02 12:49:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bddef7151849a213926ffdd86a7e228db66606b1
;;;","2022-07-09 05:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/541
Date: 2022-07-09 11:58:14 +0000;;;","2022-07-11 08:46;clanger;Fix request (17u) on behalf of George Adams:
This backport is required as prerequisite to the new GHA workflow. It touches a few places in the build system but the risk should be fairly low. Applies clean, (old) GHA tests pass.;;;","2022-11-21 05:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1539
Date: 2022-11-21 13:21:30 +0000;;;","2022-11-24 09:21;gdams;Fix request (11u):
This backport is required as a prerequisite to the new GHA workflow. It touches a few places in the build system but the risk should be fairly low. Applies clean, (old) GHA tests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lw4] Javac incorrectly flags subclasses as being ACC_IDENTITY classes.,JDK-8287713,5076061,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-06-01 23:14,2022-06-02 03:45,2023-10-01 09:56,2022-06-02 03:45,repo-valhalla,,,,,,,,,,,repo-valhalla,tools,,0,lw4,,,,,,,,,,,,,,,,,,,,"In this concrete example:

class A {
    abstract class D {}
}

abstract class B {
    int f;
}

abstract class C extends B {}

javac at the moment marks every class with ACC_IDENTITY and also the inner class attribute flag of class B as inner of A mentions ACC_IDENTITY. 

As seen in the context of JDK-8286692:

The identity and value restrictions are inherited: it is an error for a value class to implement an identity interface, or vice versa, or for an abstract class or interface to extend both kinds of superinterfaces.

The restrictions are ""inherited"" (in an informal sense that we haven't explicitly defined anywhere—this is just an intuition). The modifiers themselves are not. All the checks in JLS/JVMS do a full search of the supertypes, don't depend on anything being propagated from a super type to a subtype and appearing in the subtype.

Dan further clarified that :

Java language has a concept of ""implicitly declared"" modifiers. So just like an implicitly final class has ACC_FINAL set, an implicitly identity class has ACC_IDENTITY set.

This is different from the case in which an abstract class extends an identity class, but has no particular constraints itself. In that case, ACC_IDENTITY would not be set on the subclass that extends the identity class.

In the concrete example above, A, B, and D would be ACC_IDENTITY, while C would not. 

(A because it's concrete, B because it has an instance field, D because it's an inner class.) 

In particular, if B were modified to no longer be an identity class, C should be able to function as a supertype of a value class without recompilation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xbff:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-02 03:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/701
Date: 2022-06-02 10:05:48 +0000;;;","2022-06-02 03:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/702
Date: 2022-06-02 10:36:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 Crash running eclipse benchmark from Dacapo,JDK-8287700,5076048,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,roland,wkemper,wkemper,2022-06-01 15:19,2022-07-11 16:24,2023-10-01 09:56,2022-06-07 23:43,19,,,,,,,,,,,19,hotspot,,0,c2-ea,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,,,,,,,,,,,,,,,,"To reproduce:
```
java -XX:+UseShenandoahGC -jar dacapo-evaluation-git+309e1fa.jar --scratch-directory dacapo/shenandoah --no-validation --variance 5 --no-pre-iteration-gc --iterations 10 --size small avrora batik eclipse h2 jython luindex lusearch pmd sunflow xalan tomcat
```
The dacapo jar can be downloaded from here: https://sourceforge.net/projects/dacapobench/files/evaluation/dacapo-evaluation-git%2B309e1fa.jar/download

Part way through the execution of the eclipse benchmark, there is a crash:
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/codebuild/output/src896/src/s3/00/src/hotspot/share/opto/escape.cpp:3333), pid=1246, tid=1258
#  assert(tn_type == TypePtr::NULL_PTR || tn_t != __null && !tinst->is_java_subtype_of(tn_t)) failed: unexpected type
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-root-mainline-x86.ef2009)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-root-mainline-x86.ef2009, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb40a7f]  ConnectionGraph::split_unique_types(GrowableArray<Node*>&, GrowableArray<ArrayCopyNode*>&, GrowableArray<MergeMemNode*>&)+0x139f
#
# Core dump will be written. Default location: /codebuild/output/src050/src/s3/00/jtreg/results/core.1246.%i
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

```
This happens reliably. The crash has occurred on x86_64 machines, but we have not seen it on aarch64. We have seen the crash with G1 and Shenandoah.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287662,,,,,,,,,JDK-8275201,,,,,,,,"2022-06-01 15:24;wkemper;hs_err_pid1246.log;https://bugs.openjdk.org/secure/attachment/99191/hs_err_pid1246.log","2022-06-01 15:37;wkemper;hs_err_pid1269.log;https://bugs.openjdk.org/secure/attachment/99193/hs_err_pid1269.log","2022-06-01 15:25;wkemper;replay_pid1246.log;https://bugs.openjdk.org/secure/attachment/99192/replay_pid1246.log","2022-06-01 15:37;wkemper;replay_pid1269.log;https://bugs.openjdk.org/secure/attachment/99194/replay_pid1269.log",,,,,,,x86,,,,,,,,19,,linux,,,,,,"0|i2xbcj:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-06-01 17:33;kvn;We already have bug JDK-8287662 filed today;;;","2022-06-01 17:34;kvn;Thank you for hs_err and replay files.;;;","2022-06-01 17:56;kvn;The assert was modified by JDK-8275201. Assigning to Roland to look.;;;","2022-06-01 23:12;chagedorn;ILW = C2 assertion in EA, with Dacapo and recently changed assert, disable EA or disable compilation of affected method = HMM = P2;;;","2022-06-02 14:04;xliu;Dacapo jar is a launcher.  once it ever executed benchmark 'eclipse', you can find the complete dependencies in scratch directory. in this case, it's 'dacapo/shenandoah'

here is the command to replay the compilation. 

$java -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors '-XX:ReplayDataFile=replay_pid1269.log' -cp ./dacapo/shenandoah/eclipse/plugins/org.eclipse.equinox.registry_3.8.100.v20180827-1235.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.equinox.app_1.3.600.v20180827-1235.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.core.resources_3.13.100.v20180828-0158.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.debug.core_3.13.0.v20180821-1744.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.jdt.debug_3.12.0.v20180827-1040/jdimodel.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.jdt.debug_3.12.0.v20180827-1040/jdi.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.core.contenttype_3.7.100.v20180817-1401.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.equinox.common_3.10.100.v20180827-1235.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.jdt.core_3.15.0.v20180905-0317.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.osgi_3.13.100.v20180827-1536.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.core.commands_3.9.200.v20180827-1727.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.core.variables_3.4.200.v20180821-1744.jar:./dacapo/shenandoah/eclipse/plugins/com.ibm.icu_62.1.0.v20180727-1652.jar:./dacapo/shenandoah/eclipse/plugins/org.dacapo.eclipse_1.0.0.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.jdt.launching_3.11.0.v20180827-1040.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.text_3.7.0.v20180822-1511.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.core.filesystem_1.7.200.v20180828-0158.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.equinox.simpleconfigurator_1.3.100.v20180827-1122.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.core.expressions_3.6.200.v20180817-1401.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.equinox.preferences_3.7.200.v20180827-1235.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.core.jobs_3.10.100.v20180817-1215.jar:./dacapo/shenandoah/eclipse/plugins/org.eclipse.core.runtime_3.15.0.v20180817-1401.jar;;;","2022-06-02 16:31;xliu;C2 EA has difficulty handling node 801, whose type is sun/nio/fs/UnixFileAttributeViews$Basic:NotNull:exact *.
The type of java object(51) is sun/nio/fs/UnixFileAttributeViews$Posix:NotNull:exact *, iiid=1242.   UnixFileAttributeViews$Posix is subclass of UnixFileAttributeViews$Base.

JavaObject(51) NoEscape(NoEscape) [ 3083F 3544F 3296F 3291F 3088F 2597F [ 1992 1388 796 799 2983 801 ]]   1242  Allocate  ===  1681  772  1812  125  1 ( 1237  1813  285  1  1  1  1  283  158  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  283  285 ) [[ 2421  1332  656  3082  794  1992 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, top, bool ) UnixFileAttributeViews::createPosixView @ bci:0 (line 411) UnixFileSystemProvider::getFileAttributeView @ bci:36 (line 124) LinuxFileSystemProvider::getFileAttributeView @ bci:48 (line 68) UnixFileSystemProvider::readAttributes @ bci:51 (line 148) LinuxFileSystemProvider::readAttributes @ bci:31 (line 99) Files::readAttributes @ bci:7 (line 1851) PosixHandler::fetchFileInfo @ bci:59 (line 53) !jvms: FileInfo::setName @ bci:14 (line 256) PosixHandler::fetchFileInfo @ bci:43 (line 50)
LocalVar(243) [ 1242P [ 1388 ]]   1992  Proj  ===  1242  [[ 2589  1388 ]] #5 !jvms: UnixFileSystemProvider::readAttributes @ bci:57 (line 148) LinuxFileSystemProvider::readAttributes @ bci:31 (line 99) Files::readAttributes @ bci:7 (line 1851) PosixHandler::fetchFileInfo @ bci:59 (line 53)
LocalVar(405) [ 1992 1242P [ 796 3083b ]]   1388  CheckCastPP  ===  1990  1992  [[ 796  1387  3083  3083 ]]  #sun/nio/fs/UnixFileAttributeViews$Posix:NotNull:exact *  Oop:sun/nio/fs/UnixFileAttributeViews$Posix:NotNull:exact *
LocalVar(521) [ 1388 1242P [ 799 ]]   796  CheckCastPP  === _  1388  [[ 799  2588  403 ]]  #java/nio/file/attribute/FileAttributeView:NotNull *  Interface:java/nio/file/attribute/FileAttributeView:NotNull * !jvms: PosixHandler::fetchFileInfo @ bci:38 (line 50)
LocalVar(594) [ 796 1242P [ 2983 801 3544b ]]   799  CheckCastPP  ===  1390  796  [[ 404  801  3544  3544  2983 ]]  #java/nio/file/attribute/BasicFileAttributeView:NotNull *  Interface:java/nio/file/attribute/BasicFileAttributeView:NotNull * !jvms: PosixHandler::fetchFileInfo @ bci:38 (line 50)
LocalVar(607) [ 799 1242P [ 3296b 3291b ]]   2983  CheckCastPP  ===  2980  799  [[ 3296  2442  2441  2440  3291  3291  3296 ]]  #sun/nio/fs/UnixFileAttributeViews$Posix:NotNull:exact *  Oop:sun/nio/fs/UnixFileAttributeViews$Posix:NotNull:exact * !orig=[2545] !jvms: Object::<init> @ bci:0 (line 45) FileTime::<init> @ bci:1 (line 77) FileTime::from @ bci:14 (line 97) UnixFileAttributes::toFileTime @ bci:32 (line 115) UnixFileAttributes::lastModifiedTime @ bci:8 (line 137) PosixHandler::fetchFileInfo @ bci:122 (line 62)
LocalVar(608) [ 799 1242P [ 3088b 2597b ]]   801  CheckCastPP  ===  1392  799  [[ 405  1815  406  1814  1394  2597  2597  3088  3088 ]]  #sun/nio/fs/UnixFileAttributeViews$Basic:NotNull:exact *  Oop:sun/nio/fs/UnixFileAttributeViews$Basic:NotNull:exact * !orig=[2191] !jvms: PosixHandler::fetchFileInfo @ bci:38 (line 50)

for use 801, it comes from eclipse platform. 
https://github.com/eclipse-platform/eclipse.platform.resources/blob/3a09e2afbd6abfc7d17376c8151506fa769f1f03/bundles/org.eclipse.core.filesystem/src/org/eclipse/core/internal/filesystem/local/nio/PosixHandler.java#L50;;;","2022-06-02 18:39;xliu;@~roland, 
I guess where is wrong.  Can I assign this to me? 

This chunk is suspicious of JDK-8275201. 

@@ -3310,11 +3314,11 @@
         if (tn_type->isa_narrowoop()) {
           tn_t = tn_type->make_ptr()->isa_oopptr();
         } else {
           tn_t = tn_type->isa_oopptr();
         }
-        if (tn_t != NULL && tinst->klass()->is_subtype_of(tn_t->klass())) {
+        if (tn_t != NULL && tn_t->maybe_java_subtype_of(tinst)) {
           if (tn_type->isa_narrowoop()) {
             tn_type = tinst->make_narrowoop();
           } else {
             tn_type = tinst;
           }

It flips order. In this case, tinst is subclass of tn_t. they are both exact klasses. order matters here.  tn_t->maybe_java_subtype_of(tinst) return false. 


;;;","2022-06-02 23:56;roland;[~xliu] I already started working on it. I wrote a simple test case. That line you point to is maybe problematic but given both types are exact and different, we're hitting a dead path and the correct execution is to take the else branch.;;;","2022-06-03 12:23;xliu;Sure. sounds good. 

I am still trying to understand this code snippet.  Why do you say it's in dead path? 
Like C++, Java also supports covariant return type for virtual functions. It seems to me that it creates a UnixFileAttributeViews$Posix object but returns a pointer sun/nio/fs/UnixFileAttributeViews$Basic*. that's typical pattern.

class A {
 virtual A* foo() {return new A; }
};

class B : public A {
   B* foo() {return new B; } 
};

void main() {
B b; 
A* p= &b; 
A* p2 = p->foo();
}

The previous logic seems to accept it.  tinst->klass()->is_subtype_of(tn_t->klass()) is true, it casts tn's type to 'tinst'. In this case, it casts 801's type to  UnixFileAttributeViews$Posix*.
in the end, c2 manages to eliminated JO(51). ;;;","2022-06-07 01:51;roland;I think it's a dead path because the CheckCastPP casts the result of an allocation to a different, exact type. This said you're right that the previous didn't detect it as a dead path. I think it's likely harmless that it's not detected as a dead path anyway.;;;","2022-06-07 07:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9054
Date: 2022-06-07 07:48:42 +0000;;;","2022-06-07 18:03;xliu;Hi, Roland, 

Thank you for fixing this issue. Your PR looks good to me. 

>  ""I think it's a dead path because the CheckCastPP casts the result of an allocation to a different, exact type. ""

You are right, but I still don't understand where it comes from.  I studied your testcase TestEACheckCastPP. I think the point of interest is this method. 
    private static void test(boolean flag) {
        I i = test_helper();
        test_helper2(i, flag);
    }

If we call test(false), we get 145 CheckCastPP and 217 EncodeP and their types are both ""exact""!!!

JavaObject(5) NoEscape(NoEscape) [ 137F [ 47 52 111 145 217 220 ]]   35  Allocate  ===  5  6  7  8  1 ( 33  31  32  1  1  10  1  1 ) [[ 36  37  38  45  46  47 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, top, bool ) TestEACheckCastPP::test_helper @ bci:0 (line 56) TestEACheckCastPP::test @ bci:0 (line 42) !jvms: TestEACheckCastPP::test_helper @ bci:0 (line 56) TestEACheckCastPP::test @ bci:0 (line 42)
LocalVar(10) [ 35P [ 52 ]]   47  Proj  ===  35  [[ 48  52 ]] #5 !jvms: TestEACheckCastPP::test_helper @ bci:0 (line 56) TestEACheckCastPP::test @ bci:0 (line 42)
LocalVar(13) [ 47 35P [ 111 ]]   52  CheckCastPP  ===  49  47  [[ 111 ]]  #TestEACheckCastPP$B:NotNull:exact *  Oop:TestEACheckCastPP$B:NotNull:exact * !jvms: TestEACheckCastPP::test_helper @ bci:0 (line 56) TestEACheckCastPP::test @ bci:0 (line 42)
LocalVar(15) [ 52 35P [ 145 137b ]]   111  CheckCastPP  === _  52  [[ 145  137  137  149 ]]  #TestEACheckCastPP$I:NotNull *  Interface:TestEACheckCastPP$I:NotNull * !jvms: TestEACheckCastPP::test_helper @ bci:9 (line 57) TestEACheckCastPP::test @ bci:0 (line 42)
LocalVar(16) [ 111 35P [ 217 ]]   145  CheckCastPP  ===  252  111  [[ 217  156 ]]  #TestEACheckCastPP$A:NotNull:exact *  Oop:TestEACheckCastPP$A:NotNull:exact * !jvms: TestEACheckCastPP::test_helper2 @ bci:5 (line 49) TestEACheckCastPP::test @ bci:6 (line 43)
LocalVar(17) [ 145 35P [ 220 ]]   217  EncodeP  === _  145  [[ 219 ]]  #narrowoop: TestEACheckCastPP$A:NotNull:exact * !jvms: TestEACheckCastPP::test_helper2 @ bci:19 (line 51) TestEACheckCastPP::test @ bci:6 (line 43)

I think that's why you call it ""dead path"".  this code block is never evaluated.  I think c2 gets all types from ciTypeFlow. 
        if (flag) {
            // branch never taken when called from test()
            A a = (A)i;
            C c = new C();
            c.a = a;
        }


By contrast, if we call test(true) long enough, we will get types without ""exact"" qualifiers. see 158 and 230. 

JavaObject(5) NoEscape(NoEscape) [ [ 47 52 111 158 230 233 ]]   35  Allocate  ===  5  6  7  8  1 ( 33  31  32  1  1  10  1  1 ) [[ 36  37  38  45  46  47 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, top, bool ) TestEACheckCastPP::test_helper @ bci:0 (line 57) TestEACheckCastPP::test @ bci:0 (line 43) !jvms: TestEACheckCastPP::test_helper @ bci:0 (line 57) TestEACheckCastPP::test @ bci:0 (line 43)
LocalVar(9) [ 35P [ 52 ]]   47  Proj  ===  35  [[ 48  52 ]] #5 !jvms: TestEACheckCastPP::test_helper @ bci:0 (line 57) TestEACheckCastPP::test @ bci:0 (line 43)
LocalVar(11) [ 47 35P [ 111 ]]   52  CheckCastPP  ===  49  47  [[ 111 ]]  #TestEACheckCastPP$B:NotNull:exact *  Oop:TestEACheckCastPP$B:NotNull:exact * !jvms: TestEACheckCastPP::test_helper @ bci:0 (line 57) TestEACheckCastPP::test @ bci:0 (line 43)
LocalVar(13) [ 52 35P [ 158 ]]   111  CheckCastPP  === _  52  [[ 158  141  132  162 ]]  #TestEACheckCastPP$I:NotNull *  Interface:TestEACheckCastPP$I:NotNull * !jvms: TestEACheckCastPP::test_helper @ bci:9 (line 58) TestEACheckCastPP::test @ bci:0 (line 43)
LocalVar(14) [ 111 35P [ 230 ]]   158  CheckCastPP  ===  257  111  [[ 230  169 ]]  #TestEACheckCastPP$A:NotNull *  Oop:TestEACheckCastPP$A:NotNull * !jvms: TestEACheckCastPP::test_helper2 @ bci:5 (line 50) TestEACheckCastPP::test @ bci:6 (line 44)
LocalVar(15) [ 158 35P [ 233 ]]   230  EncodeP  === _  158  [[ 232 ]]  #narrowoop: TestEACheckCastPP$A:NotNull * !jvms: TestEACheckCastPP::test_helper2 @ bci:19 (line 52) TestEACheckCastPP::test @ bci:6 (line 44)


How come we get even more vague types after we evaluate them?  I think those types are still from ciTypeFlow, why they don't have ""exact"" qualifier this time?
Instead of calling those code ""dead path"", should we call it dry path?  technically speaking,  it's not dead code. we just haven't got chance to execute it. 
;;;","2022-06-07 23:43;dukebot;Changeset: 0960ecc4
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-06-08 06:36:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0960ecc407f8049903e3d183ac75c6a85dcc5b5f
;;;","2022-07-11 16:24;epavlova;New created compiler/types/TestEACheckCastPP.java test passed in JDK 19 ATR.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk/jfr/api/consumer/TestRecordingFileWrite.java fails with exception: java.lang.Exception: Found event that should not be there. ,JDK-8287699,5076047,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,achung,achung,2022-06-01 15:02,2023-01-26 10:24,2023-10-01 09:56,2022-12-16 02:48,19,20,,,,,,,,,,20,hotspot,,0,intermittent,problemlist,sbr,tier3,,,,,,,,,,,,,,,,,"jdk/jfr/api/consumer/TestRecordingFileWrite.java fails with exception:
java.lang.Exception: Found event that should not be there. See log
	at jdk.jfr.api.consumer.TestRecordingFileWrite.verify(TestRecordingFileWrite.java:79)
	at jdk.jfr.api.consumer.TestRecordingFileWrite.main(TestRecordingFileWrite.java:66)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)

JavaTest Message: Test threw exception: java.lang.Exception: Found event that should not be there. See log
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Found event that should not be there. See log",,,,,,,,,,JDK-8298964,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293864,,,,,,,JDK-8289692,JDK-8288482,JDK-8277131,,,,,,"2022-09-27 07:58;mgronlun;original-1.jfr;https://bugs.openjdk.org/secure/attachment/100874/original-1.jfr","2022-06-02 08:04;egahlin;original.jfr;https://bugs.openjdk.org/secure/attachment/99211/original.jfr","2022-09-27 07:58;mgronlun;scrubbed-1.jfr;https://bugs.openjdk.org/secure/attachment/100873/scrubbed-1.jfr","2022-06-02 08:04;egahlin;scrubbed.jfr;https://bugs.openjdk.org/secure/attachment/99212/scrubbed.jfr",,,,,,,,,,,,,,,,,linux,os_x,windows,,,,"0|i2xbcb:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-06-01 18:14;dholmes;Found:
jdk.ThreadCPULoad {
  startTime = 21:13:52.889 (2022-06-01)
  user = 1.95%
  system = 0.17%
}


Expected:
jdk.ThreadCPULoad {
  startTime = 21:13:52.889 (2022-06-01)
  user = 1.95%
  system = 0.17%
  eventThread = ""C2 CompilerThread2"" (javaThreadId = 15, virtual = false)
};;;","2022-06-02 08:08;egahlin;Looks like the parser is not able to resolve the compiler thread (becomes null) after the file has been scrubbed.

With the original and scrubbed recording file attached, it should not be too hard to see where things go wrong. This is a product bug. ;;;","2022-06-15 05:05;egahlin;While debugging this, incorrect recording data were found before scrubbing even happens. See JDK-8288482. As of today, it looks like a separate issue, but it makes debugging harder if the original recording is incorrect.;;;","2022-12-08 04:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11588
Date: 2022-12-08 12:21:40 +0000;;;","2022-12-15 05:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11692
Date: 2022-12-15 12:58:11 +0000;;;","2022-12-15 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/41
Date: 2022-12-15 14:48:17 +0000;;;","2022-12-16 02:48;dukebot;Changeset: 0ba47348
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-12-16 10:46:37 +0000
URL:       https://git.openjdk.org/jdk20/commit/0ba473489151d74c8a15b75ff4964ac480fecb28
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jtreg test com/sun/jndi/ldap/LdapPoolTimeoutTest.java fails intermittently in nightly run,JDK-8287672,5076021,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,robm,robm,robm,2022-06-01 07:59,2023-02-02 08:13,2023-10-01 09:56,2022-06-20 17:27,,,,,,,,,,,,20,core-libs,,0,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-yes,,,,,,,,,,"LdapPoolTimeoutTest.java which was added as part of JDK-8277795 changes is failing intermittently on 8u nightly runs (Aurora) on Linux platform(both x86 & x64).
 
From the log, I can see the test is failing at the following assertTrue statement.
Here RuntimeException thrown has a  different message – “javax.naming.CommunicationException: example.com:1234 [Root exception is java.net.NoRouteToHostException: No route to host (Host unreachable)]”

This particular exception msg seems to be not handled in the current test code.
----------
catch (RuntimeException e) {
            String msg = e.getCause() == null ? e.getMessage() : e.getCause().getMessage();
            System.err.println(""MSG RTE: "" + msg);
            // assertCompletion may wrap a CommunicationException in an RTE
            assertTrue(msg != null && msg.contains(""Network is unreachable""));
}
------

I have attached the complete log for the same.
Also pasting the relevant snippet here:
 
[TestNG] Running:
  com/sun/jndi/ldap/LdapPoolTimeoutTest.java
 
java.lang.AssertionError: expected [true] but found [false]
        at org.testng.Assert.fail(Assert.java:94)
        at org.testng.Assert.failNotEquals(Assert.java:496)
        at org.testng.Assert.assertTrue(Assert.java:42)
        at org.testng.Assert.assertTrue(Assert.java:52)
        at LdapPoolTimeoutTest.attemptConnect(LdapPoolTimeoutTest.java:124)
        at LdapPoolTimeoutTest.lambda$test$5(LdapPoolTimeoutTest.java:96)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:750)
java.lang.AssertionError: expected [true] but found [false]
        at org.testng.Assert.fail(Assert.java:94)
        at org.testng.Assert.failNotEquals(Assert.java:496)
        at org.testng.Assert.assertTrue(Assert.java:42)
        at org.testng.Assert.assertTrue(Assert.java:52)
        at LdapPoolTimeoutTest.attemptConnect(LdapPoolTimeoutTest.java:124)
        at LdapPoolTimeoutTest.lambda$test$6(LdapPoolTimeoutTest.java:97)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:750)
test LdapPoolTimeoutTest.test(): failure
java.lang.RuntimeException: 2 (sub)tests failed
        at LdapPoolTimeoutTest.test(LdapPoolTimeoutTest.java:112)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
        at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
        at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
        at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
        at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
        at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
        at org.testng.TestRunner.privateRun(TestRunner.java:773)
        at org.testng.TestRunner.run(TestRunner.java:623)
        at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
        at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
        at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
        at org.testng.SuiteRunner.run(SuiteRunner.java:259)
        at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
        at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
        at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
        at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
        at org.testng.TestNG.run(TestNG.java:1018)
        at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
        at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.lang.Thread.run(Thread.java:750)
 
===============================================
com/sun/jndi/ldap/LdapPoolTimeoutTest.java
Total tests run: 1, Failures: 1, Skips: 0
===============================================
 
----------System.err:(22/1268)----------
MSG RTE: javax.naming.CommunicationException: example.com:1234 [Root exception is java.net.NoRouteToHostException: No route to host (Host unreachable)]
MSG RTE: javax.naming.CommunicationException: example.com:1234 [Root exception is java.net.NoRouteToHostException: No route to host (Host unreachable)]
MSG: Timed out waiting for lock
MSG: Timed out waiting for lock
MSG: Timed out waiting for lock
MSG: Timed out waiting for lock
MSG: Timed out waiting for lock
MSG: connect timed out
java.lang.Exception: failures: 1",,,,,,,,,,JDK-8288929,JDK-8288998,JDK-8289663,JDK-8288987,JDK-8289135,JDK-8291256,JDK-8288986,JDK-8289640,JDK-8291632,JDK-8291631,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281695,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xb6j:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,Not verified,,"2022-06-01 08:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8974
Date: 2022-06-01 15:41:57 +0000;;;","2022-06-20 17:27;dukebot;Changeset: 7e211d7d
Author:    Rob McKenna <robm@openjdk.org>
Date:      2022-06-21 00:23:12 +0000
URL:       https://git.openjdk.org/jdk/commit/7e211d7daac32dca8f26f408d1a3b2c7805b5a2e
;;;","2022-06-21 18:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/2
Date: 2022-06-22 00:53:36 +0000;;;","2022-06-23 06:52;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly testing passed.;;;","2022-06-23 07:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/504
Date: 2022-06-23 13:53:13 +0000;;;","2022-06-30 08:55;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly testing passed.;;;","2022-06-30 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1192
Date: 2022-06-30 15:58:13 +0000;;;","2022-07-01 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/97
Date: 2022-07-01 09:10:07 +0000;;;","2022-07-06 14:06;dukebot;Changeset: 5b5bc6c2
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-07-04 07:52:38 +0000
URL:       https://git.openjdk.org/jdk/commit/5b5bc6c26e9843e16f241b89853a3a1fa5ae61f0
;;;","2022-08-01 01:57;yan;Fix request (13u, 15u):
clean backport of a rather visible test fix. The test pass OK now.;;;","2022-08-01 06:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/385
Date: 2022-08-01 08:53:52 +0000;;;","2022-08-01 06:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/249
Date: 2022-08-01 08:53:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adjust ForceGC to invoke System::gc fewer times for negative case,JDK-8287671,5076016,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mchung,dholmes,dholmes,2022-06-01 06:46,2022-06-09 22:25,2023-10-01 09:56,2022-06-06 14:13,19,,,,,,,,,,,19,core-libs,,0,regression,testonly,tier3,tier4,tier5,tier6,tier8,,,,,,,,,,,,,,"Just started in the CI on Windows and macOS, and then Linux-aarch64.

java/lang/invoke/defineHiddenClass/UnloadingTest.java fails with fastdebug build.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287596,,,,,,,,,JDK-8287384,JDK-8287685,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xb5f:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2022-06-01 10:08;mchung;This is a regression caused by JDK-8287384.  The test fails in the fastdebug build and passes if it runs with the previous version of ForceGC.  Assign this to [~xuelei];;;","2022-06-02 15:00;mchung;JDK-8287384 causes more frequent GCs.  For tests that use ForceGC to verify that a reference is GC'ed, it may take 1 GC cycle.   This change will speed up the use of ForceGC for these test cases.   For tests that use ForceGC to verify a strong reference will not be GC'ed, it used to force 10 GC cycles typically but now 1000 GCs after JDK-8287384.  It may timeout because it spends more time on garbage collection.  I think we should avoid invoking many GCs for verifying strong reference case.

A suggested fix:

diff --git a/test/lib/jdk/test/lib/util/ForceGC.java b/test/lib/jdk/test/lib/util/ForceGC.java
index eea5b1e0393..2baac7e5883 100644
--- a/test/lib/jdk/test/lib/util/ForceGC.java
+++ b/test/lib/jdk/test/lib/util/ForceGC.java
@@ -36,6 +36,7 @@ public class ForceGC {
 
     private final CountDownLatch cleanerInvoked;
     private Object o;
+    private int gcCount = 0;
 
     public ForceGC() {
         this.o = new Object();
@@ -45,9 +46,9 @@ public class ForceGC {
 
     private void doIt(int iter) {
         try {
-            for (int i = 0; i < 100; i++) {
+            for (int i = 0; i < 10; i++) {
                 System.gc();
-                System.out.println(""doIt() iter: "" + iter + "", gc "" + i);
+                gcCount++;
                 if (cleanerInvoked.await(100L, TimeUnit.MILLISECONDS)) {
                     return;
                 }
@@ -68,19 +69,21 @@ public class ForceGC {
     public boolean await(BooleanSupplier s) {
         o = null; // Keep reference to Object until now, to ensure the Cleaner
                   // doesn't count down the latch before await() is called.
-        for (int i = 0; i < 1000; i++) {
+        for (int i = 0; i < 10; i++) {
             if (s.getAsBoolean()) {
+                System.out.println(""ForceGC condition met after System.gc() "" + gcCount + "" times"");
                 return true;
             }
 
             doIt(i);
             try {
-                Thread.sleep(10);
+                Thread.sleep(100);
             } catch (InterruptedException e) {
                 throw new AssertionError(""unexpected interrupted sleep"", e);
             }
         }
 
+        System.out.println(""ForceGC condition not met after System.gc() "" + gcCount + "" times"");
         return false;
     }
 };;;","2022-06-02 23:01;xuelei;It sounds reasonable to me that there is too many GCs.  I will backout JDK-8287384 so that the issue does not impact the testing before this update integrated, and close JDK-8287596 out.;;;","2022-06-03 08:43;dcubed;[~xuelei] - Thanks for proceeding with the [BACKOUT]. This failure is rather noisy and I'd
rather not go into the weekend with that test still failing.;;;","2022-06-03 11:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9021
Date: 2022-06-03 18:05:52 +0000;;;","2022-06-06 14:13;dukebot;Changeset: 2e332c27
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2022-06-06 21:11:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2e332c276052554540da0998316a5a99bc350cd6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a regression test for JDK-8287073,JDK-8287663,5076007,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-06-01 02:59,2023-08-14 00:25,2023-10-01 09:56,2022-06-07 01:43,11.0.16,17.0.3,19,,,,,,,,,19,core-libs,,0,cgroupsv2,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,"While the issue of JDK-8287073 wasn't reproducible on a real system, we can synthetically reproduce this with a test that doesn't list the memory controller in /proc/cgroups file. That should be sufficient to provoke the NPE on an unpatched system.",,,,,,,,,,JDK-8292973,JDK-8305219,JDK-8314200,JDK-8305218,JDK-8288322,JDK-8305378,JDK-8306175,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287073,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,linux,,,,,,"0|i2xb3f:",9223372036854775807,b26,,,,,,,,,Verified,,"2022-06-02 07:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8993
Date: 2022-06-02 14:32:28 +0000;;;","2022-06-07 01:43;dukebot;Changeset: 2d8c6490
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-06-07 08:40:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2d8c6490540e3ccea23b81129b2e4073915071e0
;;;","2022-06-09 05:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/457
Date: 2022-06-09 12:25:38 +0000;;;","2022-06-10 05:15;sgehwolf;Fix Request (OpenJDK 17u):

Please approve this low-risk regression test for JDK-8287073. The code change in product code is a no-op in terms of functionality and should be low risk. Container tests continue to pass for me on x86_64 on cg1 and cg2. Also: The new regression test fails without the product code change in JDK-8287073 and passes after as expected.;;;","2022-08-24 07:25;dboyle;Verified b36;;;","2022-08-24 10:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1341
Date: 2022-08-24 17:48:13 +0000;;;","2022-08-25 07:37;sgehwolf;Fix Request (OpenJDK 11u):

Please approve this low-risk regression test for JDK-8287073. Patch applies clean. The code change in product code is a no-op in terms of functionality and should be low risk. Container tests continue to pass for me on x86_64 on cg1 and cg2. Also: The new regression test fails without the product code change in JDK-8287073 and passes after as expected. For clean patch, depends on JDK-8287107 which is a good (low risk fix to have as well).;;;","2023-05-26 07:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/323
Date: 2023-05-26 14:44:12 +0000;;;","2023-05-26 09:29;sgehwolf;Fix Request (OpenJDK 8u):

Please approve this low-risk regression test for JDK-8287073. Patch does not apply clean. Minor test adaptations. Reviewed by Paul Hohensee. The code change in product code is a no-op in terms of functionality and should be low risk. Container tests continue to pass for me on x86_64 on cg1 and cg2. Also: The new regression test fails without the product code change in JDK-8287073 and passes after as expected.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix and improve BitMap::print_on(outputStream*),JDK-8287661,5076004,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-06-01 02:44,2022-06-09 22:18,2023-10-01 09:56,2022-06-03 00:27,11,17,18,19,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"Found these inconvenient during debugging using the `BitMap::print_on`. We pass the `outputStream*` to the method, but do not use it. Also, the output is hard to read for large bitmaps.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287830,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xb2r:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-01 03:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8970
Date: 2022-06-01 10:04:05 +0000;;;","2022-06-03 00:27;dukebot;Changeset: 625821da
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-06-03 07:24:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/625821dae7589b510de00ffd506a592ddb606318
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[18u] Backport of JDK-8240903 causes test errors,JDK-8287644,5075987,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-06-01 01:43,2022-09-26 04:02,2023-10-01 09:56,2022-06-02 02:21,,,,,,,,,,,,18.0.2,tools,,0,jdk11u-na,jdk17u-na,jdk18u-fix-request,jdk18u-fix-yes,noreg-self,,,,,,,,,,,,,,,,"The backport of JDK-8240903 to 18u causes failures in the newly added test test/jdk/tools/jmod/hashes/HashesOrderTest.java. The reason is that JDK-8276766, which adds jmod option --date, was not backported to 18u.

The test can be fixed to not making use of this option.",,,,,,,,,,JDK-8292231,JDK-8287959,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8240903,,,,,,,JDK-8276766,,,,,,,,,,,,,,,,,,,,,,,,,,18.0.2,,,,,,,,"0|i2xayz:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2022-06-01 01:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/145
Date: 2022-06-01 08:47:04 +0000;;;","2022-06-01 02:01;clanger;Fix request (18u):
This fixes the test error introduced with JDK-8287530, the backport of JDK-8240903. No risk, testfix only. I tested manually that the test now succeeds.;;;","2022-06-01 08:04;robm;Thanks [~clanger] !;;;","2022-06-02 02:21;dukebot;Changeset: c08f40e7
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-06-02 09:16:41 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/c08f40e722a2e99210c0afdaaa7d0b38d9a75de8
;;;","2022-09-26 04:02;goetz;[11u-na, 17u-na] 
The test was backported so that it passes. This change is not needed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loom: Mismatched VirtualThread::state accessor,JDK-8287637,5075980,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-06-01 00:55,2022-06-09 22:21,2023-10-01 09:56,2022-06-03 09:46,19,,,,,,,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,"Found this by reading the code, no test failure detected yet.

The field is defined as:

```
    // virtual thread state, accessed by VM
    private volatile int state;
```

The field is defined on VM side as:

```
  macro(_state_offset,                     k, ""state"",              int_signature,               false)
```

And yet, it is accessed as `short`:

```
u2 java_lang_VirtualThread::state(oop vthread) {
  return vthread->short_field_acquire(_state_offset);
}
```

I think this is just asking for trouble on different endianness: the partial `u2` read from `int` field can read the ""higher"" two bytes, not the ""lower"" two bytes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xaxf:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-01 01:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8967
Date: 2022-06-01 07:57:34 +0000;;;","2022-06-03 09:46;dukebot;Changeset: ce5ae517
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-06-03 16:43:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ce5ae51773974dfc324b5fff52accbe14a0c032e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
macOS: SIGSEGV at [CoreFoundation] CFArrayGetCount / sun.font.CFont.getTableBytesNative,JDK-8287609,5075952,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ngubarkov,ngubarkov,ngubarkov,2022-05-31 16:18,2023-04-18 00:40,2023-10-01 09:56,2022-06-05 08:37,11,17,18,,,,,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"Glyph vector layout crashes JVM with some fonts:
```
C  [CoreFoundation+0x1fee8]  CFArrayGetCount+0x6
j  sun.font.CFont.getTableBytesNative(JI)[B+0 java.desktop@11.0.12
```
Originally this issue was reported for JetBrains Runtime: https://youtrack.jetbrains.com/issue/JBR-4031
But tests shown that OpenJDK has the same problem.

Steps to reproduce:
1. Install ProFont: https://tobiasjung.name/profont/ -> https://tobiasjung.name/downloadfile.php?file=ProFont_Distribution_2.2_with_license.dmg -> ProFont 2.2 -> ATM Version -> ProFont Bitmaps
2. `new Font(""ProFont"", Font.PLAIN, 13).layoutGlyphVector(new FontRenderContext(new AffineTransform(), true, true), new char[] {' '}, 0, 1, 0);`",,,,,,,,,,JDK-8305643,JDK-8305467,JDK-8306221,JDK-8295349,JDK-8295348,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296854,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2xar7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-05-31 16:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8962
Date: 2022-05-31 23:39:09 +0000;;;","2022-06-03 13:51;prr;The font above is one designed for macOS 6 or macOS 7.
It isn't even TrueType. It is an Adobe Type 1 ATM font and I really surprised it can still be installed on macOS 11
That certainly explains why a request for the tables returns NULL - there are none. This API isn't designed for this font format.;;;","2022-06-05 08:37;dukebot;Changeset: 8c460b04
Author:    Nikita Gubarkov <nikita.gubarkov@jetbrains.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-06-05 15:34:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8c460b043e1cbaf1f2d74958033bb24dea66a390
;;;","2022-06-25 09:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/177
Date: 2022-06-25 16:41:02 +0000;;;","2022-07-07 05:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/534
Date: 2022-07-07 11:52:45 +0000;;;","2022-07-07 05:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1203
Date: 2022-07-07 11:56:49 +0000;;;","2022-09-21 04:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/707
Date: 2022-09-21 11:09:31 +0000;;;","2022-09-21 04:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1366
Date: 2022-09-21 11:09:01 +0000;;;","2022-09-26 05:06;ngubarkov;Fix Request (11u)
- Issue affects 11 version as well
- Should be no risk as it only fixes the SIGSEGV without changing any real logic, see the discussion: https://github.com/openjdk/jdk/pull/8962#issuecomment-1145878329
- Backports cleanly
- Tested by the same reproducer from ticket description;;;","2022-09-26 05:06;ngubarkov;Fix Request (17u)
- Issue affects 17 version as well
- Should be no risk as it only fixes the SIGSEGV without changing any real logic, see the discussion: https://github.com/openjdk/jdk/pull/8962#issuecomment-1145878329
- Backports cleanly
- Tested by the same reproducer from ticket description;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AA Ovals not rendered under metal,JDK-8287600,5075942,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,avu,avu,avu,2022-05-31 11:56,2022-07-27 03:11,2023-10-01 09:56,2022-06-02 16:54,17,18,19,,,,,,,,,19,client-libs,,0,lanai,macos,,,,,,,,,,,,,,,,,,,"The attached test reveals the problem in rendering AA ovals in metal pipeline.

/Library/Java/JavaVirtualMachines/jdk-17.0.3.1.jdk/Contents/Home/bin/java -Dsun.java2d.metal=true FillOvalTest.java

See metal.png

/Library/Java/JavaVirtualMachines/jdk-17.0.3.1.jdk/Contents/Home/bin/java -Dsun.java2d.metal=false FillOvalTest.java

See ogl.png
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287453,,,,,,,JDK-8291266,,,,,,,,"2022-05-31 11:53;avu;FillOvalTest.java;https://bugs.openjdk.org/secure/attachment/99166/FillOvalTest.java","2022-06-01 13:05;avu;mask_fix.patch;https://bugs.openjdk.org/secure/attachment/99181/mask_fix.patch","2022-05-31 11:55;avu;metal.png;https://bugs.openjdk.org/secure/attachment/99165/metal.png","2022-05-31 11:55;avu;ogl.png;https://bugs.openjdk.org/secure/attachment/99164/ogl.png","2022-06-01 13:14;avu;rp_m1_metal_maskfix.txt;https://bugs.openjdk.org/secure/attachment/99185/rp_m1_metal_maskfix.txt","2022-06-01 13:14;avu;rp_m1_metal_wo_maskfix.txt;https://bugs.openjdk.org/secure/attachment/99186/rp_m1_metal_wo_maskfix.txt","2022-06-01 13:09;avu;rp_x64_mask_fix.txt;https://bugs.openjdk.org/secure/attachment/99182/rp_x64_mask_fix.txt","2022-06-01 13:09;avu;rp_x64_wo_mask_fix.txt;https://bugs.openjdk.org/secure/attachment/99183/rp_x64_wo_mask_fix.txt",,,,,,,,,,,17,,os_x,,,,,,"0|i2xaoz:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-06-01 13:09;avu;The problem can be resolved by committing a command buffer after all mask blit operations. The fix does not have a noticeable performance impact according to the new RenderPerfTest.;;;","2022-06-01 13:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8981
Date: 2022-06-01 20:21:40 +0000;;;","2022-06-02 16:54;dukebot;Changeset: cbaeb00f
Author:    Alexey Ushakov <avu@openjdk.org>
Date:      2022-06-02 23:51:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cbaeb00fcea7fb8942838610c2d68e27d290fb58
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ShortResponseBody could be made more resilient to rogue connections,JDK-8287593,5075935,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rjernst,dfuchs,dfuchs,2022-05-31 10:04,2023-02-02 12:04,2023-10-01 09:56,2022-07-04 09:12,,,,,,,,,,,,20,core-libs,,0,httpclient,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,"ShortResponseBody$ReplyingServer could simply ignore requests that don't target the expected URI (or reply with 500), instead of simply asserting:

=======================================================

                    String query = uriPath.getRawQuery();
                    if (query == null) {
                        out.println(""Request headers: ["" + headers + ""]"");
+                      continue;
                    }
                    assert query != null : ""null query for uriPath: "" + uriPath;

=======================================================

SSLVariableLengthServer: got connection PlainVariableLengthServer: got connection PRI *
Request headers: [HTTP/2.0

]
Unexpected exception in server: java.lang.AssertionError: null query for uriPath: *
java.lang.AssertionError: null query for uriPath: *
	at ShortResponseBody$ReplyingServer.run(ShortResponseBody.java:507)
",,,,,,,,,,JDK-8301705,JDK-8299591,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xanf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-06-29 12:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9329
Date: 2022-06-29 19:26:21 +0000;;;","2022-07-04 09:12;dukebot;Changeset: 9ccae707
Author:    Ryan Ernst <ryan@iernst.net>
Committer: Chris Hegarty <chegar@openjdk.org>
Date:      2022-07-04 16:09:40 +0000
URL:       https://git.openjdk.org/jdk/commit/9ccae7078e22c27a8f84152f005c628534c9af53
;;;","2023-01-31 07:34;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Related tests pass. SAP nightly testing passed.;;;","2023-01-31 07:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1133
Date: 2023-01-31 15:37:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(se) CancelledKeyException during channel registration,JDK-8287580,5075921,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,simonis,simonis,2022-05-31 08:46,2022-06-29 23:09,2023-10-01 09:56,2022-06-23 08:44,11,17,,,,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"Opening this issue on behalf of Oli Gillespie (see https://mail.openjdk.java.net/pipermail/nio-dev/2022-May/011331.html ).

When registering a SocketChannel with a Selector for the first time,
it's possible to get a CancelledKeyException even though this is the
first register call.

Exception in thread ""main"" java.nio.channels.CancelledKeyException
    at java.base/sun.nio.ch.SelectionKeyImpl.ensureValid(SelectionKeyImpl.java:75)
    at java.base/sun.nio.ch.SelectionKeyImpl.interestOps(SelectionKeyImpl.java:104)
    at java.base/sun.nio.ch.SelectorImpl.register(SelectorImpl.java:222)
    at java.base/java.nio.channels.spi.AbstractSelectableChannel.register(AbstractSelectableChannel.java:236)
    at java.base/java.nio.channels.SelectableChannel.register(SelectableChannel.java:260)
    at KeyCancelled.main(KeyCancelled.java:20)

The javadoc states:

@throws  CancelledKeyException
    If this channel is currently registered with the given selector
      but the corresponding key has already been cancelled

However in this case the channel is apparently _not_ registered, as shown by
SocketChannel.isRegistered() returning false.

This following sequence triggers this issue:

1. Thread 1 starts SelectableChannel.register
2. A new SelectionKey becomes visible via Selector.keys()
3. Thread 2 iterates Selector.keys() and calls SelectorKey.cancel()
4. Thread 1 (still in the register() invocation) finds that the key is
cancelled and throws CancelledKeyException

Below is a small reproducer which usually exhibits this issue:

import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;

public class KeyCancelled {
    public static void main(String[] args) throws Exception {
        Selector s = Selector.open();

        new Thread(() -> {
            for (int i = 0; i < 100_000; i++) {
                s.keys().forEach(SelectionKey::cancel);
            }
        }).start();

        for (int i = 0; i < 10_000; i++) {
            SocketChannel c = s.provider().openSocketChannel();
            c.configureBlocking(false);
            // Sometimes this throws CancelledKeyException, because
the key is cancelled by
            // the other thread part-way through the register call.
            c.register(s, SelectionKey.OP_READ);
            // c.isRegistered() is false here after the exceptional case
        }
    }
}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xakb:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-05-31 23:46;alanb;I suspect this issue goes back to JDK 1.4 and it is indeed a bug that register throws CKE. When fixed, it just means register will return a cancelled key for cases like this test that are asynchronously cancelling all registered keys. The next usage of the cancelled key will throw CKE.;;;","2022-06-01 11:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8978
Date: 2022-06-01 18:32:28 +0000;;;","2022-06-23 08:44;dukebot;Changeset: 72f286a9
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-23 15:39:32 +0000
URL:       https://git.openjdk.org/jdk/commit/72f286a9baecd914b77e3436b999ae432025e992
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Fix comment typo in li64,JDK-8287552,5075889,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,fjiang,fjiang,fjiang,2022-05-31 00:50,2023-07-09 19:12,2023-10-01 09:56,2022-06-01 02:31,19,,,,,,,,,,,19,hotspot,,0,cleanup,oracle-triage-19,,,,,,,,,,,,,,,,,,,"On behalf of Dingli Zhang (dingli@iscas.ac.cn)

 In riscv, 'imm[31:28]’ should be 'imm[31:20]' for '0x7ff' in the following two places:

src/hotspot/cpu/riscv/assembler_riscv.cpp:

```
void Assembler::li64(Register Rd, int64_t imm) {
// Load upper 32 bits. upper = imm[63:32], but if imm[31] == 1 or
// (imm[31:28] == 0x7ff && imm[19] == 1), upper = imm[63:32] + 1.
int64_t lower = imm & 0xffffffff;
```

src/hotspot/cpu/riscv/macroAssembler_riscv.cpp:

```
  // Load upper 32 bits. Upper = target[63:32], but if target[31] = 1 or (target[31:28] == 0x7ff && target[19] == 1),
  // upper = target[63:32] + 1.
```
",,,,,,,,,,JDK-8311706,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,19,,linux,,,,,,"0|i2xad7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-31 01:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8950
Date: 2022-05-31 07:59:21 +0000;;;","2022-05-31 06:21;chagedorn;ILW = Typo in comments = LLL = P5;;;","2022-06-01 02:31;dukebot;Changeset: 0ef3d855
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-06-01 09:29:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0ef3d8551d85c9004087464d656074dac753acfd
;;;","2023-03-06 23:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/7
Date: 2023-03-07 07:46:02 +0000;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Files.writeString fails to throw IOException for charset ""windows-1252""",JDK-8287541,5075841,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,naoto,webbuggrp,webbuggrp,2022-05-30 01:47,2023-05-28 22:06,2023-10-01 09:56,2022-06-08 08:56,11,17,18,19,,,,,,,,19,core-libs,,0,dcsaw,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Files.writeString is specified to throw IOException when a character cannot be encoded. Instead it uses replacement char ""?"" when used with sun.nio.cs.ArrayEncoder like Charset.forName(""windows-1252""):
probably an error in sun.nio.cs.SingleByte.Encoder.encode(char)

=> Illegal content written on western Windows Systems


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
UnmappableCharacterException
ACTUAL -
JDK uses replacement character

---------- BEGIN SOURCE ----------

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;

public class EncodingBug {
	public static void main(String[] args) throws IOException {
		test(""\u00f6\u00fc\u20ac""); // OK, chars of windows-1252
		// fails:
		test(""\u041e"");
		test(""\u0080"");
		test(""\u0080\u041e"");
	}

	private static void test(String s) throws IOException {
		Path file = Files.createTempFile(""prefix"", ""suffix"");
		Charset charset = Charset.forName(""windows-1252"");
//		Charset charset = StandardCharsets.ISO_8859_1; -> UnmappableCharacterException
		Files.writeString(file, s, charset); // should throw IOException (UnmappableCharacterException)!!
		String s2 = Files.readString(file, charset);
		if (!s.equals(s2))
			throw new IllegalStateException(s2); // JDK used replacement character :-(
	}
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8305153,JDK-8308800,JDK-8309012,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-30 23:01;tongwan;EncodingBug.java;https://bugs.openjdk.org/secure/attachment/99147/EncodingBug.java",,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2xa2j:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-05-30 23:00;tongwan;The observations on Windows 10:
JDK 11: Failed, UnmappableCharacterException observed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+19: Failed.;;;","2022-05-31 14:19;naoto;There's a fast path in `String.encodeWithEncoder()` method using `ArrayEncoder`. `ArrayEncoder` implies doing `replace` operation on unmappable characters. Should not use `ArrayEncoder` path in this case.;;;","2022-06-03 09:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9019
Date: 2022-06-03 16:48:46 +0000;;;","2022-06-08 08:56;dukebot;Changeset: 6fb84e2c
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-06-08 15:50:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6fb84e2c9119bdb9c66dd49422bcab637bbd4008
;;;","2023-03-28 05:13;goetz;Fix request [17u]

I am backporting a row of 17.0.8-oracle changes and ran into this one. 
It applies to 17, as well so I want to include this.
Medium risk, small change but important component.
Clean backport.
Test passes and fails without the fix. SAP nighlty testing passed;;;","2023-03-28 05:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1222
Date: 2023-03-28 12:15:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8u JDK-8284620 backport broke AArch64 build,JDK-8287537,5075873,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,andrew,andrew,2022-05-30 18:29,2022-07-20 19:33,2023-10-01 09:56,2022-06-03 09:55,openjdk8u342,,,,,,,,,,,openjdk8u342,hotspot,,0,jdk8u-critical-request,jdk8u-critical-yes,noreg-build,oraclejdk-na,oracle-triage-19,,,,,,,,,,,,,,,,"Reproducible crash during build with:

> # A fatal error has been detected by the Java Runtime Environment:
> #
> #  SIGSEGV (0xb) at pc=0x0000ffffbd337390, pid=4091, tid=0x0000ffffac36f200
> #
> # JRE version: OpenJDK Runtime Environment (8.0_342-b04) (build 1.8.0_342-ea-debug-b04)
> # Java VM: OpenJDK 64-Bit Server VM (25.342-b04-debug mixed mode linux-aarch64 compressed oops)
> # Problematic frame:
> # V  [libjvm.so+0x327390]  Chunk::next() const+0xc

Backing out JDK-8284620 makes the build succeed.",,,,,,,,,,JDK-8290751,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284620,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,b04,openjdk8u342,,linux,,,,,,"0|i2xa9n:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-31 01:18;sgehwolf;[~zgu] Please take a look at this as you've worked on the 8u backport.;;;","2022-05-31 07:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/69
Date: 2022-05-31 13:53:37 +0000;;;","2022-06-03 09:28;zgu;Fix Request (8u)

This patch fixes a bad backport that can result fatal crashes.

;;;","2022-06-03 09:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u/pull/12
Date: 2022-06-03 16:42:53 +0000;;;","2022-06-03 09:55;dukebot;Changeset: 95962f14
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-06-03 16:51:25 +0000
URL:       https://git.openjdk.java.net/jdk8u/commit/95962f141c996834e9f12cd8780a2f6e0c56d782
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/channels/FileChannel/LargeMapTest.java fails on 32-bit systems,JDK-8287526,5075860,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-05-30 07:24,2023-07-29 02:55,2023-10-01 09:56,2022-05-31 06:52,19,,,,,,,,,,,19,core-libs,,0,noreg-self,testbug,ursqe-triaged,,,,,,,,,,,,,,,,,,"```
$ CONF=linux-x86-server-fastdebug make images run-test TEST=java/nio/channels/FileChannel/LargeMapTest.java

STDOUT:
32
i386
19-internal
STDERR:
java.io.IOException: Map failed
	at java.base/sun.nio.ch.FileChannelImpl.mapInternal(FileChannelImpl.java:1322)
	at java.base/sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:1221)
	at LargeMapTest.main(LargeMapTest.java:66)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)
Caused by: java.lang.OutOfMemoryError: Map failed
	at java.base/sun.nio.ch.FileChannelImpl.map0(Native Method)
	at java.base/sun.nio.ch.FileChannelImpl.mapInternal(FileChannelImpl.java:1319)
	... 6 more
```

I think we cannot assume we would be able to map >4G on 32-bit system.

Currently obscured by JDK-8287137, would manifest again after JDK-8287520.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286637,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xa6r:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-05-30 07:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8948
Date: 2022-05-30 14:30:44 +0000;;;","2022-05-31 06:52;dukebot;Changeset: 1b44f6c4
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-05-31 13:48:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1b44f6c483cfb2c8c2f304281654b56fda967719
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(vlen_in_bytes == 64) failed: 2,JDK-8287517,5075850,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sviswanathan,chagedorn,chagedorn,2022-05-30 04:47,2022-06-20 03:47,2023-10-01 09:56,2022-06-03 11:02,19,,,,,,,,,,,19,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,,,,,,,,,,,,,,,"The attached Java Fuzzer test starts to fail after JDK-8286972:

To reproduce:
$ java -Xcomp -XX:CompileOnly=Test Test.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S66914/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f438564a-997a-4f93-8215-28dc0c0bef6d/runs/f41da18c-9f23-49a7-ab67-ad61fa19003a/workspace/open/src/hotspot/cpu/x86/c2_MacroAssembler_x86.cpp:1513), pid=18922, tid=18935
#  assert(vlen_in_bytes == 64) failed: 2
#
# JRE version: Java(TM) SE Runtime Environment (19.0+24) (fastdebug build 19-ea+24-1832)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+24-1832, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x8bb323]  C2_MacroAssembler::load_iota_indices(XMMRegisterImpl*, RegisterImpl*, int)+0xa3
.........
Command Line: -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet Test
.........
Current CompileTask:
C2:    308    8    b  4       Test::mainTest (688 bytes)

Stack: [0x00007ffa31002000,0x00007ffa31103000],  sp=0x00007ffa310fd8f0,  free space=1006k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8bb323]  C2_MacroAssembler::load_iota_indices(XMMRegisterImpl*, RegisterImpl*, int)+0xa3
V  [libjvm.so+0x454eee]  VectorPopulateIndexNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x21e
V  [libjvm.so+0x172b8e2]  PhaseOutput::scratch_emit_size(Node const*)+0x452
V  [libjvm.so+0x1721f98]  PhaseOutput::shorten_branches(unsigned int*)+0x2d8
V  [libjvm.so+0x173481a]  PhaseOutput::Output()+0xcfa
V  [libjvm.so+0xabe79b]  Compile::Code_Gen()+0x42b
V  [libjvm.so+0xac4009]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15f9
V  [libjvm.so+0x8dadda]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x62a
V  [libjvm.so+0xad2a08]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb98
V  [libjvm.so+0xad39c8]  CompileBroker::compiler_thread_loop()+0x6c8
V  [libjvm.so+0x1a4a47a]  JavaThread::thread_main_inner()+0x21a
V  [libjvm.so+0x1a57d30]  Thread::call_run()+0x100
V  [libjvm.so+0x170a244]  thread_native_entry(Thread*)+0x104",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286972,,,,,,,,"2022-05-30 04:47;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/99139/FuzzerUtils.java","2022-06-01 02:18;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/99175/Reduced.java","2022-05-30 04:46;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/99140/Test.java","2022-05-30 04:46;chagedorn;hs_err_pid18922.log;https://bugs.openjdk.org/secure/attachment/99138/hs_err_pid18922.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2xa4j:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-30 04:51;chagedorn;ILW = Crash in C2 code generation, single Java Fuzzer test, disable compilation of affected method = HLM = P3;;;","2022-05-30 04:51;chagedorn;[~sviswanathan] can you have a look?;;;","2022-05-31 16:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8961
Date: 2022-05-31 23:02:18 +0000;;;","2022-06-01 02:19;chagedorn;[~sviswanathan] I've attached a simpler reproducer (Reduced.java) that you could convert into a JTreg test.

$ java -Xcomp -XX:CompileOnly=Reduced Reduced.java;;;","2022-06-03 11:02;dukebot;Changeset: a0219da9
Author:    Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2022-06-03 17:59:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a0219da966f3a1cd12d402a816bdd79be778085e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
continuationEntry.hpp has incomplete definitions,JDK-8287512,5075842,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rpressler,rpressler,rpressler,2022-05-30 01:57,2022-06-09 22:10,2023-10-01 09:56,2022-06-01 07:14,19,,,,,,,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,"Some inline definitions call methods defined in continuationEntry.inline.hpp.
Also the continuation_enter field is unused.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xa2r:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-30 04:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8944
Date: 2022-05-30 10:34:34 +0000;;;","2022-06-01 07:14;dukebot;Changeset: f8eb7a89
Author:    Ron Pressler <rpressler@openjdk.org>
Committer: Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2022-06-01 14:11:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f8eb7a892f2fe78671d2211e35369c7ff2ed24fa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Include macosx 12 aarch and macosx 12 x64 in corelibs atr files,JDK-8287511,5075839,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rgangadhar,rgangadhar,rgangadhar,2022-05-30 00:55,2022-05-30 21:32,2023-10-01 09:56,2022-05-30 21:32,18.0.2,,,,,,,,,,,18u-cpu,infrastructure,,0,testbug,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2xa23:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
32-bit Windows build failure in codeBlob.cpp after JDK-8283689,JDK-8287493,5075813,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,alanb,alanb,2022-05-28 09:06,2022-06-20 04:05,2023-10-01 09:56,2022-06-08 23:02,19,,,,,,,,,,,19,hotspot,,0,noreg-build,oraclejdk-na,oracle-triage-11,oracle-triage-17,oracle-triage-19,starter,,,,,,,,,,,,,,,"Windows 32-bit, Visual Studio 2022, build issue since the integration of JEP 424 + follow other changes.

[2022-05-28T14:46:39,915Z] t:\workspace\open\src\hotspot\share\code\codeBlob.cpp(753): error C2956: usual deallocation function 'void operator delete(void *,size_t) throw()' would be chosen as placement deallocation function.
[2022-05-28T14:46:39,915Z] predefined C++ types (compiler internal)(44): note: see declaration of 'operator delete'
[2022-05-28T14:46:39,931Z] lib/CompileJvm.gmk:146: recipe for target '/cygdrive/t/workspace/build/windows-x86/hotspot/variant-server/libjvm/objs/codeBlob.obj' failed
[2022-05-28T14:46:39,931Z] make[3]: *** [/cygdrive/t/workspace/build/windows-x86/hotspot/variant-server/libjvm/objs/codeBlob.obj] Error 1
[2022-05-28T14:46:39,931Z] make[3]: *** Waiting for unfinished jobs....


Several blobs already use this workaround:

diff --git a/src/hotspot/share/code/codeBlob.hpp b/src/hotspot/share/code/codeBlob.hpp
index 38051bf325b..16a44ac49f1 100644
--- a/src/hotspot/share/code/codeBlob.hpp
+++ b/src/hotspot/share/code/codeBlob.hpp
@@ -767,6 +767,7 @@ class UpcallStub: public RuntimeBlob {
                      intptr_t exception_handler_offset,
                      jobject receiver, ByteSize frame_data_offset);

+  void operator delete(void* p);
   void* operator new(size_t s, unsigned size) throw();

   struct FrameData {
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288049,,,,,,,,,JDK-8283689,JDK-8210803,JDK-8196880,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x9wb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-02 17:44;dlong;ILW = build failure, Windows 32-bit only?, no workaround = MMH = P3;;;","2022-06-08 09:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9088
Date: 2022-06-08 16:50:22 +0000;;;","2022-06-08 22:59;dukebot;Changeset: aa2fc54b
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-06-09 05:49:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/aa2fc54b61ad84cc6faa80efa3bd3097adbbc422
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/jvmci/errors/TestInvalidDebugInfo.java fails new assert:  assert((uint)t < T_CONFLICT + 1) failed: invalid type #,JDK-8287491,5075810,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ysuenaga,dholmes,dholmes,2022-05-27 22:43,2023-08-07 14:14,2023-10-01 09:56,2022-06-01 07:43,17,19,,,,,,,,,,19,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,jvmci,oracle-triage-11,oracle-triage-17,oracle-triage-19,ProblemList,tier1,tier2,tier3,,,,,,,,,,"JDK-8286562 added a new assertion in src/hotspot/share/utilities/globalDefinitions.hpp

inline const char* type2name(BasicType t) {
  assert((uint)t < T_CONFLICT + 1, ""invalid type"");
  return type2name_tab[t];
}

which is failing with test

compiler/jvmci/errors/TestInvalidDebugInfo.java


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S22603/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e7f496e2-6bc7-427d-bf09-99efa3070561/runs/a80eec9d-dc25-4365-af92-a17adf8c94f5/workspace/open/src/hotspot/share/utilities/globalDefinitions.hpp:735), pid=21774, tid=25603
#  assert((uint)t < T_CONFLICT + 1) failed: invalid type

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S22603/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/e7f496e2-6bc7-427d-bf09-99efa3070561/runs/a80eec9d-dc25-4365-af92-a17adf8c94f5/workspace/open/src/hotspot/share/utilities/globalDefinitions.hpp:735), pid=21774, tid=25603
#  assert((uint)t < T_CONFLICT + 1) failed: invalid type",,,,,,,,,,JDK-8301104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286562,,,,,,,JDK-8293691,,,,,,,,"2022-05-31 05:44;ysuenaga;hs_err_pid2619.log;https://bugs.openjdk.org/secure/attachment/99153/hs_err_pid2619.log",,,,,,,,,,,,,,,,,,19,,,,,,,,"0|i2x9vn:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-05-28 00:06;kbarrett;I suggest changing type2name to something like

const char* type2name(BasicType t) {
  if (t < (T_CONFLICT + 1)) {
    return type2name_tab[t];
  } else if (t == T_ILLEGAL) {
    return ""*illegal*"";
  } else {
    fatal(""invalid type %d"", t);
    return ""invalid type"";
  }
}

and moving it into the .cpp file.  There's no reason for this to be inline.

There also doesn't seem to be a good reason for type2char to be inline, or for
type2char_tab to be extern (rather than file scoped in the .cpp file).

And type2name_tab should also be file scoped in the .cpp, rather than extern.
There are references to it, but they should just be using type2name().
;;;","2022-05-28 00:50;ysuenaga;I want to know what is expected in TestInvalidDebugInfo before fixing type2name.

I got following backtrace on GDB when I got an error at assertion. This happend subsequently after code installation from JVMCI.

```
#7  0x00007f20321eb6fd in report_vm_error (
    file=file@entry=0x7f2033438678 ""/home/ysuenaga/github-forked/jdk/src/hotspot/share/utilities/globalDefinitions.hpp"", line=line@entry=735,
    error_msg=error_msg@entry=0x7f2033441120 ""assert((uint)t < T_CONFLICT + 1) failed"",
    detail_fmt=detail_fmt@entry=0x7f2033439c3d ""invalid type"")
    at /home/ysuenaga/github-forked/jdk/src/hotspot/share/utilities/debug.cpp:283
#8  0x00007f203206acae in type2name (t=T_ILLEGAL)
    at /home/ysuenaga/github-forked/jdk/src/hotspot/share/utilities/globalDefinitions.hpp:735
#9  basictype_to_str (t=t@entry=T_ILLEGAL)
    at /home/ysuenaga/github-forked/jdk/src/hotspot/share/ci/ciUtilities.cpp:38
#10 0x00007f2032813c7b in CodeInstaller::get_scope_value (this=this@entry=0x7f2010bfcb20, value=...,
    type=type@entry=T_ILLEGAL, objects=objects@entry=0x0, second=@0x7f2010bfc408: 0x0,
    __jvmci_env__=<optimized out>)
    at /home/ysuenaga/github-forked/jdk/src/hotspot/share/jvmci/jvmciCodeInstaller.cpp:253
#11 0x00007f2032817191 in CodeInstaller::record_scope (this=this@entry=0x7f2010bfcb20,
    pc_offset=pc_offset@entry=0, position=..., scope_mode=scope_mode@entry=CodeInstaller::FullFrame,
    objects=objects@entry=0x0, is_mh_invoke=<optimized out>, return_oop=<optimized out>,
    __jvmci_env__=<optimized out>)
    at /home/ysuenaga/github-forked/jdk/src/hotspot/share/jvmci/jvmciCodeInstaller.cpp:1035
#12 0x00007f2032817b64 in CodeInstaller::record_scope (__jvmci_env__=0x7f2010bfcad0,
    return_oop=false, is_mh_invoke=false, scope_mode=CodeInstaller::FullFrame, debug_info=...,
    pc_offset=0, this=0x7f2010bfcb20)
    at /home/ysuenaga/github-forked/jdk/src/hotspot/share/jvmci/jvmciCodeInstaller.cpp:938
#13 CodeInstaller::record_scope (__jvmci_env__=0x7f2010bfcad0, scope_mode=CodeInstaller::FullFrame,
    debug_info=..., pc_offset=0, this=0x7f2010bfcb20)
    at /home/ysuenaga/github-forked/jdk/src/hotspot/share/jvmci/jvmciCodeInstaller.hpp:257
#14 CodeInstaller::site_Safepoint (this=this@entry=0x7f2010bfcb20, buffer=...,
--Type <RET> for more, q to quit, c to continue without paging--
    pc_offset=pc_offset@entry=0, site=..., __jvmci_env__=__jvmci_env__@entry=0x7f2010bfcad0)
    at /home/ysuenaga/github-forked/jdk/src/hotspot/share/jvmci/jvmciCodeInstaller.cpp:1084
#15 0x00007f2032819342 in CodeInstaller::initialize_buffer (this=this@entry=0x7f2010bfcb20,
    buffer=..., check_size=check_size@entry=true, __jvmci_env__=__jvmci_env__@entry=0x7f2010bfcad0)
    at /home/ysuenaga/github-forked/jdk/src/hotspot/share/jvmci/jvmciCodeInstaller.cpp:760
#16 0x00007f2032819fd0 in CodeInstaller::install (this=0x7f2010bfcb20, compiler=0x7f202c1180c0,
    target=..., compiled_code=..., cb=<optimized out>, nmethod_handle=..., installed_code=...,
    failed_speculations=<optimized out>, speculations=<optimized out>,
    speculations_len=<optimized out>, __jvmci_env__=<optimized out>)
    at /home/ysuenaga/github-forked/jdk/src/hotspot/share/jvmci/jvmciCodeInstaller.cpp:499
#17 0x00007f20328408c2 in c2v_installCode (env=<optimized out>, target=<optimized out>,
    compiled_code=<optimized out>, installed_code=<optimized out>,
    failed_speculations_address=<optimized out>, speculations_obj=0x7f2010bfce88)
    at /home/ysuenaga/github-forked/jdk/src/hotspot/share/jvmci/jvmciCompilerToVM.cpp:931
```

T_ILLEGAL was set to `type` - it is the cause of this internal error, however it came from JVMCI code as following.

jvmciCodeInstaller.cpp
```
1034         BasicType type = jvmci_env()->kindToBasicType(JVMCIENV->get_object_at(slotKinds, i), JVMC     I_CHECK);
1035         ScopeValue* first = get_scope_value(value, type, objects, second, JVMCI_CHECK);
```

It seems to be natural that JVMCIEnv::kindToBasicType() returns T_ILLEGAL, but it should imply ""illegal"" value - so it shouldn't be happen.
On the other hand, the test is named to Test ""Invalid"" DebugInfo. Is it expect to handle T_ILLEGAL from JVMCI?

If not so, we should fix TestInvalidDebugInfo.java or JVMCI code rather than type2name().;;;","2022-05-30 03:36;chagedorn;ILW = Type assertion due to illegal type, single test in tier1, no workaround = HMM = P2;;;","2022-05-31 05:53;ysuenaga;I found following stack in hs_err log:

```
j  compiler.jvmci.errors.TestInvalidDebugInfo.test([Ljdk/vm/ci/meta/JavaValue;[Ljdk/vm/ci/meta/JavaKind;III)V+9
j  compiler.jvmci.errors.TestInvalidDebugInfo.testUnexpectedTypeInCPURegister()V+41
```

Then the error was caused by passing JavaKind.Illegal as slot kind in below:

```
     @Test(expected = JVMCIError.class)
     public void testUnexpectedTypeInFloatRegister() {
         Register reg = getRegister(arch.getPlatformKind(JavaKind.Float), 0);
         test(new JavaValue[]{reg.asValue()}, new JavaKind[]{JavaKind.Illegal}, 1, 0, 0);
     }
```

The test expects to throw JVMCIError, however CodeInstaller::get_scope_value() in HotSpot attempts to contain type name in its message. It triggered the crash.

```
      if (type == T_OBJECT) {
        locationType = get_oop_type(value);
      } else if (type == T_LONG) {
        locationType = Location::lng;
      } else if (type == T_INT || type == T_FLOAT || type == T_SHORT || type == T_CHAR || type == T_BYTE || type == T_BOOLEAN) {
        locationType = Location::int_in_long;
      } else {
        JVMCI_ERROR_NULL(""unexpected type %s in cpu register"", basictype_to_str(type));
      }
```

We should not use JavaKind.Illegal in the test, and the test should reach JVMCI_ERROR_NULL. We can use JavaKind.Void at here.
It works fine on my Linux x64. I will send PR on GitHub.;;;","2022-05-31 08:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8954
Date: 2022-05-31 13:00:57 +0000;;;","2022-06-01 07:43;dukebot;Changeset: e3791ecf
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2022-06-01 14:41:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e3791ecfe42ccb34548dd23d159087a86b669a46
;;;","2022-07-11 16:29;epavlova;The compiler/jvmci/errors/TestInvalidDebugInfo.java test passed in JDK 19 ATR.;;;","2022-08-30 06:17;dnsimon;Unfortunately there is a Graal test that mirrors TestInvalidDebugInfo (https://github.com/oracle/graal/blob/89e4cfc7aeea69970b60c64cd075ceb2a104e864/compiler/src/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/JVMCIInfopointErrorTest.java#L241). It's now crashing in a non-debug VM with:

Stack: [0x00007f41cb434000,0x00007f41cb535000],  sp=0x00007f41cb531dd0,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xa3d194]  basictype_to_str(BasicType)+0x54
V  [libjvm.so+0x11d7960]  CodeInstaller::get_scope_value(HotSpotCompiledCodeStream*, unsigned char, BasicType, ScopeValue*&, JVMCIEnv*)+0x960
V  [libjvm.so+0x11d8fa5]  CodeInstaller::read_local_or_stack_values(HotSpotCompiledCodeStream*, unsigned char, bool, JVMCIEnv*)+0x1f5
V  [libjvm.so+0x11d9259]  CodeInstaller::record_scope(int, HotSpotCompiledCodeStream*, unsigned char, bool, bool, bool, JVMCIEnv*)+0x109

In retrospect, I think the better fix would have been the one suggested by [~kbarrett] above (https://bugs.openjdk.org/browse/JDK-8287491?focusedCommentId=14498870&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14498870). It reflects the fact that type2name should really be able handle any valie BasicType argument, including T_ILLEGAL.;;;","2022-08-30 18:17;ysuenaga;[~dnsimon] As I said in before, I think we should treat T_ILLEGAL as an invalid value. T_ILLEGAL implies ""illegal"" value, so we should use another type (e.g. Void) even though in test cases.;;;","2022-08-31 00:06;dnsimon;I agree that T_ILLEGAL *models* an invalid value and it should not show up in certain contexts. The JVMCI and Graal tests in question are checking precisely this and ensuring that an appropriate exception is thrown.

In any case, converting a defined BasicType value to a string should not crash the VM. That is, in the context of type2name, T_ILLEGAL is a valid value.;;;","2023-01-19 21:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1090
Date: 2023-01-20 05:00:26 +0000;;;","2023-01-23 11:56;phh;Fix Request (17u).

On behalf of Dan Lutker lutkerd@amazon.com

Test-only fix followup to JDK-8286562 17u backport, modified test passes, no risk. Will be pushed as second of a 3 backport bundle including JDK-8286562 and JDK-8293691.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Disable TestDevNull.java on Windows,JDK-8287463,5075779,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-05-27 11:32,2023-02-15 09:19,2023-10-01 09:56,2022-05-27 14:03,,,,,,,,,,,,19,hotspot,,0,azul-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,,,,,JDK-8302597,JDK-8293132,JDK-8293091,JDK-8293133,JDK-8293092,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282947,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x9or:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-05-27 14:03;dukebot;Changeset: 0df47482
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-05-27 21:02:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0df4748216ab71937cfcfb86a2d66f3568bced1e
;;;","2022-05-27 14:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8929
Date: 2022-05-27 19:26:35 +0000;;;","2022-08-29 09:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/396
Date: 2022-08-29 16:18:33 +0000;;;","2022-08-29 09:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/649
Date: 2022-08-29 16:17:20 +0000;;;","2022-08-30 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/264
Date: 2022-08-30 10:09:57 +0000;;;","2022-08-30 03:19;evergizova;Fix Request (17u, 15u, 13u, 11u)
This test-only fix disables jdk/jfr/api/recording/dump/TestDumpDevNull.java test on Windows.
Without this fix the test fails with ""java.nio.file.NoSuchFileException: \dev\null"".
The test is added by JDK-8282947 which is already backported to 17u, 15u, 13u and 11u.
The patch applies cleanly.;;;","2022-08-30 05:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1347
Date: 2022-08-30 12:14:40 +0000;;;","2023-01-31 08:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/255
Date: 2023-01-31 16:40:26 +0000;;;","2023-02-15 07:20;sgehwolf;[~jvanek] Next time please add a 'Fix Request' comment with some rationale why this should be backported, etc.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RenderPerfTest incorrectly measures performance,JDK-8287453,5075769,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,avu,avu,avu,2022-05-27 10:51,2022-06-24 00:20,2023-10-01 09:56,2022-06-01 02:51,17,,,,,,,,,,,19,client-libs,,0,testbug,ursqe-triaged,,,,,,,,,,,,,,,,,,,"The test (test/jdk/performance/client/RenderPerfTest) has some flaws in detection of the marker frames and uses Swing timer to periodically check the color of the marker. The timer is not reliable because it could swallow some updates if there are unprocessed ones on the EDT. Also, there is no protection from missing frames, so the test could hang till the end timeout if some updates were not rendered.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287694,JDK-8287600,,,,,,,"2022-05-31 07:55;avu;rp_m1_metal_after.txt;https://bugs.openjdk.org/secure/attachment/99156/rp_m1_metal_after.txt","2022-05-31 07:55;avu;rp_m1_metal_before.txt;https://bugs.openjdk.org/secure/attachment/99154/rp_m1_metal_before.txt","2022-05-31 07:55;avu;rp_m1_ogl_after.txt;https://bugs.openjdk.org/secure/attachment/99157/rp_m1_ogl_after.txt","2022-05-31 07:55;avu;rp_m1_ogl_before.txt;https://bugs.openjdk.org/secure/attachment/99155/rp_m1_ogl_before.txt","2022-05-31 11:31;avu;rp_x64_metal_after.txt;https://bugs.openjdk.org/secure/attachment/99162/rp_x64_metal_after.txt","2022-05-31 11:31;avu;rp_x64_metal_before.txt;https://bugs.openjdk.org/secure/attachment/99160/rp_x64_metal_before.txt","2022-05-31 11:32;avu;rp_x64_ogl_after.txt;https://bugs.openjdk.org/secure/attachment/99163/rp_x64_ogl_after.txt","2022-05-31 11:31;avu;rp_x64_ogl_before.txt;https://bugs.openjdk.org/secure/attachment/99161/rp_x64_ogl_before.txt",,,,,,,,,,,17.0.1,,,,,,,,"0|i2x9mj:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-05-27 12:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8928
Date: 2022-05-27 18:58:12 +0000;;;","2022-05-31 08:11;avu;I've attached results from 2 MBP(13-inch M1 2020, and 16-inch x64 2019) before/after the test improvement. The new results reveal 2 problems with metal pipeline:
 - The frame rate (measured using the time between paint start and marker frame appearance) is lower in many cases compared with OGL
 - There are missing frames (paint content does not appear at all)   ;;;","2022-06-01 02:51;dukebot;Changeset: 48f19e43
Author:    Alexey Ushakov <avu@openjdk.org>
Date:      2022-06-01 09:48:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/48f19e43c5ceeed6b8f714fc921566f9260c78db
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in package-info.java of java.util.random,JDK-8287440,5075755,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-05-27 06:09,2022-06-01 23:27,2023-10-01 09:56,2022-05-29 07:28,,,,,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,"The current javadoc in java.util.random package-info states:
....
<p> A more recent category of ""splittable"" pseudorandom generator algorithms
 * uses a large family of state cycles and makes some attempt to ensure that
 * distinct instances use different state cycles; but even if two instances
 * ""accidentally"" use the same state cycle, they are highly likely to traverse
 * different regions parts of that shared state cycle.

That last part of the sentence, I think, shouldn't have the word ""parts"" in it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x9jf:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-05-27 06:18;jpai;There's a PR open from a contributor for this change https://github.com/openjdk/jdk/pull/8766;;;","2022-05-27 12:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8766
Date: 2022-05-18 11:45:46 +0000;;;","2022-05-29 07:28;dukebot;Changeset: 3d2d0395
Author:    Anthony Vanelverdinghe <dev@anthonyv.be>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2022-05-29 14:26:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3d2d039538b906cedd9188ed94b7ba55c275ff7f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: scheduling crashes on non-block-start Region with multiple predecessors,JDK-8287438,5075752,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2022-05-27 04:57,2022-08-16 23:47,2023-10-01 09:56,2022-05-31 01:40,19,,,,,,,,,,,19,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,,,"IGV scheduling crashes when breaking critical edges that target Region nodes not marked with the 'is_block_start' property (such as node 137 in the attached image, where 108 -> 137 is a critical edge). In this case, ServerCompilerScheduler.buildBlocks() fails to create a dedicated block for breaking the critical edge, which leads to ServerCompilerScheduler.scheduleBlock() failing to schedule the ill-formed Region nodes and, finally, to an assertion failure.

HOW TO REPRODUCE

Unzip and open failure.zip (attached) in IGV. The following failure is printed to .igv.log:

[INFO] java.lang.AssertionError
[INFO] 	at com.sun.hotspot.igv.servercompiler.ServerCompilerScheduler.scheduleBlock(ServerCompilerScheduler.java:448)
[INFO] 	at com.sun.hotspot.igv.servercompiler.ServerCompilerScheduler.scheduleLocal(ServerCompilerScheduler.java:389)
[INFO] 	at com.sun.hotspot.igv.servercompiler.ServerCompilerScheduler.schedule(ServerCompilerScheduler.java:350)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280568,JDK-8282547,,,,,,,,,,,,,,"2022-05-27 04:54;rcastanedalo;example.pdf;https://bugs.openjdk.org/secure/attachment/99126/example.pdf","2022-05-27 04:56;rcastanedalo;failure.zip;https://bugs.openjdk.org/secure/attachment/99125/failure.zip",,,,,,,,,,,,,,,,,19,,,,,,,,"0|i2x9ir:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-27 05:01;rcastanedalo;ILW = crash in debug tool; low frequency; annotate region nodes manually with ""is_block_start=true"" in graph file = MLM = P4;;;","2022-05-27 05:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8921
Date: 2022-05-27 12:28:53 +0000;;;","2022-05-31 01:40;dukebot;Changeset: 6e55a72f
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-05-31 08:38:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6e55a72f25f7273e3a8a19e0b9a97669b84808e9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Temporarily disable Continuations::enabled() for platforms which don't have an implementation, yet",JDK-8287437,5075751,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2022-05-27 04:45,2023-01-26 09:32,2023-10-01 09:56,2022-05-30 02:04,19,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"""--enable-preview"" enables both, Loom and Panama, at the same time. When trying to work on Panama, we run into Loom assertions. This should better be avoided in order to be able to work on both preview features simultaneously.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287439,,,,,,,,,,,,JDK-8284161,JDK-8287520,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x9ij:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-27 05:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8919
Date: 2022-05-27 11:56:52 +0000;;;","2022-05-30 02:04;dukebot;Changeset: b1b96746
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-05-30 09:00:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b1b96746633487901cbc504ccd074cb856ed5327
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PPC64] g1_write_barrier_pre needs extension for Loom,JDK-8287433,5075748,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,mdoerr,mdoerr,2022-05-27 04:02,2022-06-02 00:16,2023-10-01 09:56,2022-05-30 02:01,19,,,,,,,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,"Loom requires the c2i_entry_barrier which is currently not supported with G1 on PPC64. (nmethod entry barriers were not needed for G1 before.)

We run into the following assertion when trying to start the VM with Loom enabled:
assert(preservation_level <= MacroAssembler::PRESERVATION_FRAME_LR) failed: g1_write_barrier_pre doesn't support preservation levels higher than PRESERVATION_FRAME_LR

The following frames are on stack:
G1BarrierSetAssembler::g1_write_barrier_pre
G1BarrierSetAssembler::load_at
MacroAssembler::resolve_weak_handle
BarrierSetAssembler::c2i_entry_barrier
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286302,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,,"0|i2x9hv:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-27 04:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8918
Date: 2022-05-27 11:10:28 +0000;;;","2022-05-30 02:01;dukebot;Changeset: eb8d067b
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-05-30 08:57:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eb8d067b56287a201ca102299e6b756417e5cf1b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(tn->in(0) != __null) failed: must have live top node,JDK-8287432,5075747,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,chagedorn,karianna,karianna,2022-05-27 03:50,2022-09-13 06:22,2023-10-01 09:56,2022-06-08 07:17,11.0.15,17.0.3,18.0.1,19,,,,,,,,19,hotspot,,0,c2,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-19,,,,,,,,,,,,,,"Running a specific test of the Deephaven project leads to the following segmentation fault: 

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f9d10dc3d8a, pid=39978, tid=39998
#
# JRE version: Java(TM) SE Runtime Environment (19.0+24) (build 19-ea+24-1832)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19-ea+24-1832, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x593d8a]  PhaseAggressiveCoalesce::coalesce(Block*)+0x6a

HOW TO REPRODUCE ON JDK 19 (RELEASE BUILD)

(Note: these instructions run gradle itself on JDK 11. This can be achieved setting the JAVA_HOME environment variable and/or passing the option -Dorg.gradle.java.home=$JAVA_HOME to all ./gradlew commands.)

1. git clone --depth 1 --branch nightly/phase-aggressive-sigsegv git@github.com:deephaven/deephaven-core.git
2. cd deephaven-core
3. printf 'org.gradle.java.installations.paths=$JDK19_RELEASE_HOME\n' >> gradle.properties
(optionally, run $ ./gradlew -q javaToolchains to verify that the JDK 19 build is recognized by gradle)
4. ./gradlew -PtestRuntimeVersion=18 -PforceTest=true engine-table:testOutOfBand --tests io.deephaven.engine.table.impl.QueryTableAggregationTest.testMedianByIncremental
(..)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f9d10dc3d8a, pid=39978, tid=39998
#
# JRE version: Java(TM) SE Runtime Environment (19.0+24) (build 19-ea+24-1832)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19-ea+24-1832, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x593d8a]  PhaseAggressiveCoalesce::coalesce(Block*)+0x6a
(..)
(if step 4 succeeds, re-run it a few times until the crash is triggered)

The error log and replay files are attached (hs_err_pid21380.log, replay_pid21380.log).

HOW TO REPLAY IT ON JDK 19 (DEBUG BUILD)

The issue seems to be hard to reproduce directly on a debug JDK build. Luckily, it can be replayed on a debug build from the replay file generated from the release build crash:

1. run steps 1-3 above
2. download the attached replay file (replay_pid21380.log)
3. build the classpath required to replay the crash, e.g. by extracting it from the gradle debug information:
3.1. ./gradlew --info --debug -PtestRuntimeVersion=18 -PforceTest=true engine-table:testOutOfBand --tests io.deephaven.engine.table.impl.QueryTableAggregationTest.testMedianByIncremental | grep ""Using application classpath"" | tail -1 > tmp
3.2. REPLAY_CLASSPATH=$(cat tmp | cut -d ""["" -f 4- | cut -d ""]"" -f 1 | sed 's/, /:/g')
4. $JDK19_DEBUG_HOME/bin/java -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=replay_pid21380.log -cp ""$REPLAY_CLASSPATH""
(..)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/compile.cpp:1214
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S66914/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f438564a-997a-4f93-8215-28dc0c0bef6d/runs/f41da18c-9f23-49a7-ab67-ad61fa19003a/workspace/open/src/hotspot/share/opto/compile.cpp:1214), pid=42338, tid=42351
#  assert(tn->in(0) != __null) failed: must have live top node
#
# JRE version: Java(TM) SE Runtime Environment (19.0+24) (fastdebug build 19-ea+24-1832)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+24-1832, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xaa884c]  Compile::verify_top(Node*) const+0x17c

The error log file is attached (hs_err_pid36556.log).

ORIGINAL REPORT

Originally posted at: https://github.com/adoptium/adoptium-support/issues/516

The issue is exhibited from multiple methods, potentially involving array / vectorization optimizations. We've so far worked around it by setting up a compiler directives file with excludes, but that's rather fragile and we are finding more places that eventually hit this error.

Steps to reproduce
Currently, we are only able to reproduce using our junit test suite. We've also seen it in our running application, but we don't currently have a framework to easily reproduce that setup. I'm working on creating a more minimal reproduction. Some of our developers are able to reproduce the issue frequently, some are able to reproduce it infrequently, and others appear to not be able to reproduce it. I'm guessing there may be hardware or environmental issues at play. The issue is reproducible within the standard Github Actions runner environment.

Here's the branch that is meant to reproduce the issue - https://github.com/deephaven/deephaven-core/tree/nightly/phase-aggressive-sigsegv.

./gradlew -PtestRuntimeVersion=17 -PtestRuntimeVendor=adoptopenjdk -PforceTest=true engine-table:testOutOfBand --tests io.deephaven.engine.table.impl.QueryTableAggregationTest.testMedianByIncremental
The above command may need to be run multiple times (10+) to get the SIGSEGV. By default, it's set to run against a Java 11 (specific version depends on OS and gradle) by default. On my local machine, I can reproduce much more consistently w/ java 17 by setting -PtestRuntimeVersion=17. The nightly/phase-aggressive-sigsegv branch is also setup to run a GH workflow to run these specific tests.

Triaging info
The issue is reproducible on the latest versions of OpenJDK 11 and 17 (and have also been reproduced on earlier versions of 11 and 17).

# JRE version: OpenJDK Runtime Environment Temurin-11.0.15+10 (11.0.15+10) (build 11.0.15+10)
# Java VM: OpenJDK 64-Bit Server VM Temurin-11.0.15+10 (11.0.15+10, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x62619c]  PhaseAggressiveCoalesce::coalesce(Block*)+0x50c

# JRE version: OpenJDK Runtime Environment Temurin-17.0.3+7 (17.0.3+7) (build 17.0.3+7)
# Java VM: OpenJDK 64-Bit Server VM Temurin-17.0.3+7 (17.0.3+7, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x597885]  PhaseAggressiveCoalesce::coalesce(Block*)+0x65
In GH CI, the environment seen so far:

Intel(R) Xeon(R) CPU E5-2673 v3 @ 2.40GHz, 2 cores, 6G, Ubuntu 20.04.4 LTS
Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz, 2 cores, 6G, Ubuntu 20.04.4 LTS
Intel(R) Xeon(R) CPU E5-2673 v4 @ 2.30GHz, 2 cores, 6G, Ubuntu 20.04.4 LTS
Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz, 2 cores, 6G, Ubuntu 20.04.4 LTS
Intel(R) Xeon(R) CPU E5-2673 v3 @ 2.40GHz, 2 cores, 6G, Ubuntu 20.04.3 LTS
Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz, 2 cores, 6G, Ubuntu 20.04.3 LTS
Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz, 2 cores, 6G, Ubuntu 20.04.3 LTS
I'm currently in the process of collecting more detailed information on our developers' machines.

Cross-posting our issue: deephaven/deephaven-core#2038
","Intel(R) Xeon(R) CPU E5-2673 v3 @ 2.40GHz, 2 cores, 6G, Ubuntu 20.04.4 LTS
Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz, 2 cores, 6G, Ubuntu 20.04.4 LTS
Intel(R) Xeon(R) CPU E5-2673 v4 @ 2.30GHz, 2 cores, 6G, Ubuntu 20.04.4 LTS
Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz, 2 cores, 6G, Ubuntu 20.04.4 LTS
Intel(R) Xeon(R) CPU E5-2673 v3 @ 2.40GHz, 2 cores, 6G, Ubuntu 20.04.3 LTS
Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz, 2 cores, 6G, Ubuntu 20.04.3 LTS
Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz, 2 cores, 6G, Ubuntu 20.04.3 LTS",,,,,,,,,JDK-8291717,JDK-8288802,JDK-8289637,JDK-8288805,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293638,JDK-8293637,,,,,,,,JDK-8210389,,,,,,,,"2022-05-31 01:14;rcastanedalo;hs_err_pid21380.log;https://bugs.openjdk.org/secure/attachment/99151/hs_err_pid21380.log","2022-05-31 02:17;rcastanedalo;hs_err_pid36556.log;https://bugs.openjdk.org/secure/attachment/99152/hs_err_pid36556.log","2022-05-31 01:14;rcastanedalo;replay_pid21380.log;https://bugs.openjdk.org/secure/attachment/99150/replay_pid21380.log",,,,,,,,x86,,,,,,,,,,linux_ubuntu,,,,,,"0|i2x9hn:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-05-31 00:12;chagedorn;ILW = Crash in C2 code generation, medium?, disable compilation of affected methods = HMM = P2;;;","2022-06-01 11:32;dlong;C->top() is getting disconnected from the graph by final_graph_reshaping(), which has a comment that says “A method with only infinite loops has no edges entering loops from root”, so maybe the problem is an infinite loop?;;;","2022-06-07 05:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9060
Date: 2022-06-07 12:16:00 +0000;;;","2022-06-08 07:17;dukebot;Changeset: 78d37126
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-06-08 14:12:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/78d371266ae8a629db8176ced4d48e9521702cce
;;;","2022-06-21 01:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/165
Date: 2022-06-21 07:53:17 +0000;;;","2022-06-28 12:56;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Tiny change, some of the typical C2 fix risk, we should fix it.
Clean backport.
Test passes and fails without the fix.  SAP nightly testing passed.;;;","2022-06-28 13:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/515
Date: 2022-06-28 20:01:52 +0000;;;","2022-06-30 07:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1190
Date: 2022-06-30 14:35:36 +0000;;;","2022-07-11 16:55;epavlova;New developed compiler/c2/TestRemoveMemBarPrecEdge.java test passed in JDK 19 ATR and CI (on Ubuntu as well);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Fix correctness issue of MacroAssembler::movptr,JDK-8287418,5075726,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-05-26 21:20,2023-07-09 19:10,2023-10-01 09:56,2022-05-30 00:49,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-19,,,,,,,,,,,,,,,,,,,,"MacroAssembler::movptr() is designed to load a 47-bit (unsigned) address constant, ranging [0x0, 0x7FFF_FFFF_FFFF], and a special case -1 (the Universe::non_oop_word() as we know, which is 0xFFFF_FFFF_FFFF_FFFF). The former ones are inside a sv48 address space range[1]. Please note that under sv48 a valid address has the bit 47 equal to 0 in user space, so that MacroAssembler::movptr() could handle all cases under sv48. However, when loading an immediate value ranging [0x7FFF_8000_0000, 0x7FFF_FFFF_FFFF] using it, the results would wrongly become [0xFFFF_7FFF_8000_0000, 0xFFFF_7FFF_FFFF_FFFF], which indicates the MSB has polluted high bits in rare cases.

MacroAssembler::movptr() is a composition of `lui+addi+slli+addi+slli+addi`, and all of them are signed operations, MIPS alike.
Precisely, the first `lui+addi` aims to load the first 32-bit; then the `slli+addi` would load the 11-bit; finally the last `slli+addi` is going to load the remaining 5-bit.

To deal with this, there are two approaches:

(a) Using an addiw to replace the first addi. addiw has nearly the same semantics as addi, but after the operation the result would be sign-extended according to the bit 31. Due to this feature, we could use this to clean up the dirty high bits at all times. This could also handle the (-1) case. However, Assembler::li32(), which is composed of `lui+addiw`, will conflict with the new implementation, needing further adaptations. (Personally I a bit dislike of that)

(b) Alike V8's implementation [2], the trick here is it loads only the first 31-bit using `lui+addi`, with a leading 0 as the bit 31. So this one could prevent this issue at the beginning. As a trade-off, we need to shift one another bit because the leading 0 occupies one bit. Also this one could also handle the (-1) case as well after minor adaptations. (I like this one)

This problem could be reproduced using `-XX:CompressedClassSpaceBaseAddress=0x7FFFF8000000 -XX:CompressedClassSpaceSize=40M -Xshare:off` with fastdebug build, and on Qemu only, for currently I have no access to hardware that supports sv48, and the kernel Ubuntu[3] relies on is Linux 5.15. The kernel (TIP) would first check if hardware sponsors sv57, if not then fall back to sv48, and so on. It is not until Linux 5.17 that sv48 is supported[4]. So this issue could never be reproduced on my boards. But fortunately Qemu could sponsor this, because one could mmap an address in 48-bit address space even in a user-level Qemu.

Tested with `-XX:CompressedClassSpaceBaseAddress=0x7FFFF8000000 -XX:CompressedClassSpaceSize=40M -Xshare:off` (reproducible) on Qemu with hotspot tier1 (we should ignore OOM caused the compressed class space), and other tiers are on the way.
Testing sanity hotspot tier1~tier4 (could not reproduce). Tier1 is finished without new failures.

[1] https://github.com/riscv/riscv-isa-manual/blob/9ec8c0105dbf1492b57f6cafdb90a268628f476a/src/supervisor.tex#L1999-L2006
[2] https://github.com/v8/v8/blob/main/src/codegen/riscv64/assembler-riscv64.cc#L3479-L3495
[3] https://cdimage.ubuntu.com/releases/22.04/release/
[4] https://www.phoronix.com/scan.php?page=news_item&px=Linux-5.17-RISC-V-sv48
",,,,,,,,,,JDK-8311699,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,19,,linux,,,,,,"0|i2x9cz:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-26 21:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8913
Date: 2022-05-27 04:37:01 +0000;;;","2022-05-27 00:11;rcastanedalo;ILW = correctness issue; reproducible with non-default combination of JVM options; use default JVM options = HLM = P3;;;","2022-05-30 00:49;dukebot;Changeset: 447ae006
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-05-30 07:45:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/447ae006163b00cc46cac1c7ebe201de311bf1a1
;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jpackage tests failing on Windows due to powershell issue,JDK-8287401,5075708,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,dholmes,dholmes,2022-05-26 19:34,2022-07-27 03:02,2023-10-01 09:56,2022-06-16 15:08,19,20,,,,,,,,,,19,tools,,0,intermittent,regression,regression_8281682,sn_120,tier2,,,,,,,,,,,,,,,,"Typical error:

java.lang.AssertionError: Expected [0]. Actual [1]: Check command [powershell -NoLogo -NoProfile -File T:\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\scratch\\3\\bug8230933\\icons\\default_icon.exe\\expected.ps1](5) exited with 0 code
	at jdk.jpackage.test.TKit.error(TKit.java:275)
	at jdk.jpackage.test.TKit.assertEquals(TKit.java:578)
	at jdk.jpackage.test.Executor$Result.assertExitCodeIs(Executor.java:185)
	at jdk.jpackage.test.Executor.execute(Executor.java:223)
	at jdk.jpackage.test.Executor.execute(Executor.java:227)
	at jdk.jpackage.test.LauncherIconVerifier$WinIconVerifier.extractIconFromExecutable(LauncherIconVerifier.java:150)
	at jdk.jpackage.test.LauncherIconVerifier$WinIconVerifier.lambda$verifyLauncherIcon$0(LauncherIconVerifier.java:99)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.TKit.withTempDirectory(TKit.java:343)
	at jdk.jpackage.test.LauncherIconVerifier$WinIconVerifier.verifyLauncherIcon(LauncherIconVerifier.java:88)
	at jdk.jpackage.test.LauncherIconVerifier.applyTo(LauncherIconVerifier.java:69)
	at jdk.jpackage.test.AdditionalLauncher.verifyIcon(AdditionalLauncher.java:286)
	at jdk.jpackage.test.AdditionalLauncher.verify(AdditionalLauncher.java:322)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.PackageTest$Handler.lambda$verifyPackageInstalled$5(PackageTest.java:611)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest$Handler.verifyPackageInstalled(PackageTest.java:611)
	at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:545)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:467)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:399)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at jdk.jpackage.test.PackageTest.lambda$runActions$22(PackageTest.java:369)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.lambda$runActions$23(PackageTest.java:368)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:367)
	at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:57)
	at AddLauncherTest.bug8230933(AddLauncherTest.java:128)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
	at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
	at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:139)
	at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:124)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:121)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.TKit.runTests(TKit.java:120)
	at jdk.jpackage.test.Main.runTests(Main.java:79)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:107)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)


Failing tests so far:

tools/jpackage/share/MultiLauncherTwoPhaseTest.java
tools/jpackage/share/IconTest.java
tools/jpackage/share/AddLShortcutTest.java
tools/jpackage/share/AddLauncherTest.java#id1",,,,,,,,,,JDK-8288679,JDK-8291261,JDK-8291090,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281682,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2x98z:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-05-27 08:12;asemenyuk;Regression from JDK-8281682;;;","2022-06-13 08:22;dcubed;Here's a log file snippet from one of the jdk-20+2-27-tier2 sightings: 

tools/jpackage/share/MultiLauncherTwoPhaseTest.java

[09:58:53.288] TRACE: exec: Execute [powershell -NoLogo -NoProfile -File C:\\sb\\prod\\1655112799\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\scratch\\2\\test\\icons\\bar.exe\\expected.ps1](5); discard I/O...
[09:58:53.585] TRACE: exec: Done. Exit code: 1
[09:58:53.585] ERROR: Expected [0]. Actual [1]: Check command [powershell -NoLogo -NoProfile -File C:\\sb\\prod\\1655112799\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\scratch\\2\\test\\icons\\bar.exe\\expected.ps1](5) exited with 0 code
[09:58:53.585] [  FAILED  ] MultiLauncherTwoPhaseTest.test; checks=8
[09:58:53.601] [==========] 1 tests ran
[09:58:53.601] [  PASSED  ] 0 tests
[09:58:53.601] [  FAILED  ] 1 test, listed below
[09:58:53.601] [  FAILED  ] MultiLauncherTwoPhaseTest.test; workDir=[.\\test]
[09:58:53.601] 1 FAILED TEST
----------System.err:(78/5733)*----------
java.lang.AssertionError: Expected [0]. Actual [1]: Check command [powershell -NoLogo -NoProfile -File C:\\sb\\prod\\1655112799\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\scratch\\2\\test\\icons\\bar.exe\\expected.ps1](5) exited with 0 code
	at jdk.jpackage.test.TKit.error(TKit.java:277)
	at jdk.jpackage.test.TKit.assertEquals(TKit.java:580)
	at jdk.jpackage.test.Executor$Result.assertExitCodeIs(Executor.java:185)
	at jdk.jpackage.test.Executor.execute(Executor.java:223)
	at jdk.jpackage.test.Executor.execute(Executor.java:227)
	at jdk.jpackage.test.LauncherIconVerifier$WinIconVerifier.extractIconFromExecutable(LauncherIconVerifier.java:150)
	at jdk.jpackage.test.LauncherIconVerifier$WinIconVerifier.lambda$verifyLauncherIcon$0(LauncherIconVerifier.java:99)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.TKit.withTempDirectory(TKit.java:345)
	at jdk.jpackage.test.LauncherIconVerifier$WinIconVerifier.verifyLauncherIcon(LauncherIconVerifier.java:88)
	at jdk.jpackage.test.LauncherIconVerifier.applyTo(LauncherIconVerifier.java:69)
	at jdk.jpackage.test.AdditionalLauncher.verifyIcon(AdditionalLauncher.java:286)
	at jdk.jpackage.test.AdditionalLauncher.verify(AdditionalLauncher.java:322)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.JPackageCommand$Actions$1.accept(JPackageCommand.java:992)
	at jdk.jpackage.test.JPackageCommand$Actions$1.accept(JPackageCommand.java:987)
	at jdk.jpackage.test.JPackageCommand$Actions.lambda$run$0(JPackageCommand.java:1002)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.JPackageCommand$Actions.run(JPackageCommand.java:1002)
	at jdk.jpackage.test.JPackageCommand.executeVerifyActions(JPackageCommand.java:678)
	at jdk.jpackage.test.JPackageCommand.execute(JPackageCommand.java:740)
	at jdk.jpackage.test.JPackageCommand.execute(JPackageCommand.java:700)
	at MultiLauncherTwoPhaseTest.lambda$test$0(MultiLauncherTwoPhaseTest.java:74)
	at jdk.jpackage.test.PackageTest$1.accept(PackageTest.java:149)
	at jdk.jpackage.test.PackageTest$1.accept(PackageTest.java:144)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.PackageTest$Handler.lambda$accept$0(PackageTest.java:526)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:526)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:467)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:399)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at jdk.jpackage.test.PackageTest.lambda$runActions$22(PackageTest.java:369)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.lambda$runActions$23(PackageTest.java:368)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:367)
	at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:57)
	at MultiLauncherTwoPhaseTest.test(MultiLauncherTwoPhaseTest.java:90)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
	at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
	at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
	at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.TKit.runTests(TKit.java:122)
	at jdk.jpackage.test.Main.runTests(Main.java:79)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1596)
java.lang.RuntimeException: 1 FAILED TEST
	at jdk.jpackage.test.Main.reportSummary(Main.java:130)
	at jdk.jpackage.test.Main.runTests(Main.java:90)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1596)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 1 FAILED TEST
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 1 FAILED TEST
----------rerun:(44/6176)*----------;;;","2022-06-13 08:53;dcubed;[~tbell] and/or [~ctornqvi] - According to [~asemenyuk]'s comment above
some Mach5 windows nodes allow powershell script execution and some
don't. Is this something that should be fixed in ansible? Should a MACH5
bug be filed and this bug closed as ""External"" in favor of such a MACH64 bug?;;;","2022-06-14 09:01;vdyakov;need to be fixed in 19;;;","2022-06-15 06:15;dcubed;Spotted in the jdk-19+27-2076-tier2 CI job setL

https://mach5.us.oracle.com/mdash/jobs/mach5-one-jdk-19+27-2076-tier2-20220615-1003-33477756/tasks/mach5-one-jdk-19+27-2076-tier2-20220615-1003-33477756-open_test_jdk_tier2_part2-windows-x64-173/results?search=status%3Afailed%20AND%20-state%3Ainvalid

windows-x64: win10-x64-956584.s4.javaplatfo1iad.oraclevcn.com

4 more sightings:

tools/jpackage/share/MultiLauncherTwoPhaseTest.java
tools/jpackage/share/IconTest.java
tools/jpackage/share/AddLShortcutTest.java
tools/jpackage/share/AddLauncherTest.java#id1;;;","2022-06-15 22:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/26
Date: 2022-06-16 05:15:27 +0000;;;","2022-06-16 15:08;dukebot;Changeset: c254c9d0
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-06-16 22:04:17 +0000
URL:       https://git.openjdk.org/jdk19/commit/c254c9d095d0473282ad74e66239a790912a3d76
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LIR_Opr::vreg_number() and data() can return negative number,JDK-8287396,5075703,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dlong,dlong,dlong,2022-05-26 15:59,2022-06-29 05:35,2023-10-01 09:56,2022-06-01 11:30,11,17,19,,,,,,,,,19,hotspot,,0,c1,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,"This code seems wrong:

uintptr_t data() const                         { return value() >> data_shift; }

It's doing a signed shift, so the sign bit is going to be extended into the unsigned result, giving a value that is too large.

In JDK-8261235, non_data_bits was changed to work around this problem, but the real problem is the sign bit.  non_data_bits should not count pointer_bits because pointer_bits is actually included in kind_bits (see JDK-8287288).",,,,,,,,,,JDK-8288830,JDK-8289453,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287288,JDK-8261235,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x97v:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-26 16:02;dlong;This shows up after reverting part of JDK-8261235:

-    , non_data_bits  = pointer_bits + kind_bits + type_bits + size_bits + destroys_bits + virtual_bits
+    , non_data_bits  = kind_bits + type_bits + size_bits + destroys_bits + virtual_bits
;;;","2022-05-26 20:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8912
Date: 2022-05-27 03:23:47 +0000;;;","2022-05-27 00:03;rcastanedalo;ILW = potential overflow; no actual failure reported; disable C1 = HLM = P3;;;","2022-06-01 11:29;dukebot;Changeset: cdb47688
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-06-01 18:28:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cdb476888a65b8ee2538f08b4b1dbb245874a262
;;;","2022-06-23 05:15;goetz;
Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A C1 fix we should take. Small, low risk.
SAP nighlty testing passed.;;;","2022-06-23 23:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/502
Date: 2022-06-23 12:13:38 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Using @inheritDoc in an inapplicable context shouldn't crash javadoc,JDK-8287379,5075677,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prappo,prappo,prappo,2022-05-26 09:47,2022-07-26 23:55,2023-10-01 09:56,2022-07-11 08:48,19,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"1. Although it is unspecified and shouldn't work, it shouldn't crash either:

/** @param <T> {@inheritDoc} */
public class A<T> { }

$ ./build/macosx-x64/images/jdk/bin/javadoc A.java
Loading source file A.java...
Constructing Javadoc information...
Building index for all the packages and classes...
Standard Doclet version 19-internal-2022-05-25-2010101.pavelrappo...
Building tree for all the packages and classes...
A.java:1: warning: no main description
/** @param <T> {@inheritDoc} */
    ^
Generating ./A.html...
error: An internal exception has occurred.
  	(java.lang.ClassCastException: class com.sun.tools.javac.code.Symbol$ClassSymbol cannot be cast to class javax.lang.model.element.ExecutableElement (com.sun.tools.javac.code.Symbol$ClassSymbol is in module jdk.compiler of loader 'app'; javax.lang.model.element.ExecutableElement is in module java.compiler of loader 'platform'))
Please file a bug against the javadoc tool via the Java bug reporting page
(http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com)
for duplicates. Include error messages and the following diagnostic in your report. Thank you.
java.lang.ClassCastException: class com.sun.tools.javac.code.Symbol$ClassSymbol cannot be cast to class javax.lang.model.element.ExecutableElement (com.sun.tools.javac.code.Symbol$ClassSymbol is in module jdk.compiler of loader 'app'; javax.lang.model.element.ExecutableElement is in module java.compiler of loader 'platform')
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.ParamTaglet.inherit(ParamTaglet.java:92)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.DocFinder.search(DocFinder.java:230)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.DocFinder.search(DocFinder.java:266)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.InheritDocTaglet.retrieveInheritedDocumentation(InheritDocTaglet.java:92)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.InheritDocTaglet.getInlineTagOutput(InheritDocTaglet.java:118)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.TagletWriter.getInlineTagOutput(TagletWriter.java:346)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.getInlineTagOutput(HtmlDocletWriter.java:371)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitInheritDoc(HtmlDocletWriter.java:1616)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitInheritDoc(HtmlDocletWriter.java:1499)
	at jdk.compiler/com.sun.tools.javac.tree.DCTree$DCInheritDoc.accept(DCTree.java:724)
	at jdk.compiler/com.sun.source.util.SimpleDocTreeVisitor.visit(SimpleDocTreeVisitor.java:79)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1729)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.TagletWriterImpl.paramTagOutput(TagletWriterImpl.java:302)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.ParamTaglet.processParamTag(ParamTaglet.java:291)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.ParamTaglet.processParamTags(ParamTaglet.java:248)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.ParamTaglet.getTagletOutput(ParamTaglet.java:166)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.ParamTaglet.getAllBlockTagOutput(ParamTaglet.java:141)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.ClassWriterImpl.addParamInfo(ClassWriterImpl.java:272)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildParamInfo(ClassBuilder.java:169)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildClassInfo(ClassBuilder.java:147)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildClassDoc(ClassBuilder.java:120)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.build(ClassBuilder.java:98)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:378)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.generateClassFiles(AbstractDoclet.java:281)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:192)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.startGeneration(AbstractDoclet.java:207)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.run(AbstractDoclet.java:110)
	at jdk.javadoc/jdk.javadoc.doclet.StandardDoclet.run(StandardDoclet.java:103)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.parseAndExecute(Start.java:574)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:397)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:346)
	at jdk.javadoc/jdk.javadoc.internal.tool.Main.execute(Main.java:57)
	at jdk.javadoc/jdk.javadoc.internal.tool.Main.main(Main.java:46)
1 error
1 warning

2. This is a nonsensical use case, but again, it shouldn't crash:

% cat p/doc-files/doc.html                                                                                                              
<HTML lang=""EN"">
<HEAD>
    <TITLE>EXAMPLE</TITLE>
</HEAD>
<BODY>
{@inheritDoc}
</BODY>
</HTML>

Generating /tmp/whatever/p/doc-files/doc.html...
./p/doc-files/doc.html:6: warning: Tag @inheritDoc cannot be used in overview documentation.  It can only be used in the following types of documentation: method.
{@inheritDoc}
^
error: An internal exception has occurred.
  	(javax.lang.model.element.UnknownElementException: Unknown element: ""jdk.javadoc.internal.doclets.toolkit.DocFileElement@5b247367"")
Please file a bug against the javadoc tool via the Java bug reporting page
(http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com)
for duplicates. Include error messages and the following diagnostic in your report. Thank you.
javax.lang.model.element.UnknownElementException: Unknown element: ""jdk.javadoc.internal.doclets.toolkit.DocFileElement@5b247367""
	at java.compiler/javax.lang.model.util.AbstractElementVisitor6.visitUnknown(AbstractElementVisitor6.java:125)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.DocletElement.accept(DocletElement.java:85)
	at java.compiler/javax.lang.model.util.AbstractElementVisitor6.visit(AbstractElementVisitor6.java:106)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.Utils.getSimpleName0(Utils.java:2003)
	at java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1228)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.util.Utils.getSimpleName(Utils.java:1964)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.InheritDocTaglet.retrieveInheritedDocumentation(InheritDocTaglet.java:96)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.InheritDocTaglet.getInlineTagOutput(InheritDocTaglet.java:107)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.TagletWriter.getInlineTagOutput(TagletWriter.java:346)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.getInlineTagOutput(HtmlDocletWriter.java:371)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitInheritDoc(HtmlDocletWriter.java:1622)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitInheritDoc(HtmlDocletWriter.java:1503)
	at jdk.compiler/com.sun.tools.javac.tree.DCTree$DCInheritDoc.accept(DCTree.java:724)
	at jdk.compiler/com.sun.source.util.SimpleDocTreeVisitor.visit(SimpleDocTreeVisitor.java:79)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1735)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1449)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1430)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.DocFilesHandlerImpl.handleHtmlFile(DocFilesHandlerImpl.java:202)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.DocFilesHandlerImpl.copyDirectory(DocFilesHandlerImpl.java:158)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.DocFilesHandlerImpl.copyDocFiles(DocFilesHandlerImpl.java:118)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.PackageSummaryBuilder.buildPackageDoc(PackageSummaryBuilder.java:111)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.PackageSummaryBuilder.build(PackageSummaryBuilder.java:93)
	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generatePackageFiles(HtmlDoclet.java:406)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.startGeneration(AbstractDoclet.java:210)
	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.run(AbstractDoclet.java:110)
	at jdk.javadoc/jdk.javadoc.doclet.StandardDoclet.run(StandardDoclet.java:103)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.parseAndExecute(Start.java:574)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:397)
	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:346)
	at jdk.javadoc/jdk.javadoc.internal.tool.Main.execute(Main.java:57)
	at jdk.javadoc/jdk.javadoc.internal.tool.Main.main(Main.java:46)
1 error
3 warnings
",,,,,,,,,,JDK-8291088,JDK-8290183,JDK-8291180,,,,,,,,,,,,,,,,,,,,,,,JDK-8288524,,,JDK-8289335,,JDK-8288841,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x923:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-06-16 07:36;prappo;Added another case where javadoc crashes and updated the summary accordingly.;;;","2022-06-21 09:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/54
Date: 2022-06-21 16:12:44 +0000;;;","2022-07-11 08:48;dukebot;Changeset: 62fbc3f8
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-07-11 15:43:20 +0000
URL:       https://git.openjdk.org/jdk19/commit/62fbc3f883f06324abe8635efc48f9fc20f79f69
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GHA: Update cygwin to fix issues in langtools tests on Windows,JDK-8287378,5075676,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,clanger,clanger,clanger,2022-05-26 09:03,2022-06-08 00:18,2023-10-01 09:56,2022-05-30 08:02,11,17,18,19,,,,,,,,19,infrastructure,,0,jdk11u-critical-request,jdk11u-critical-yes,jdk17u-critical-request,jdk17u-critical-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,,,,,,,,,,,,,,"Lately, from one day to the other, the Windows GHA runs show testfailures in langtools testing in these two tests:

tools/javac/Paths/MineField.sh 
tools/javac/Paths/wcMineField.sh 

For instance here: https://github.com/RealCLanger/jdk/runs/6598399845

I've debugged it and it comes down to calls to javac/java in the test through env are failing with RC 127 at for instance this place:
https://github.com/openjdk/jdk/blob/e44465d4d6eaddebfc5a1b149223aa8332affa8b/test/langtools/tools/javac/Paths/MineField.sh#L218

The test failure goes away with current cygwin.

It should be ok to update cygwin because the bug that made JDK-8276854 necessary seems to be fixed in cygwin now.",,,,,,,,,,JDK-8287719,JDK-8287601,JDK-8287787,JDK-8287994,JDK-8287987,JDK-8287950,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8276854,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x91v:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-05-26 09:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8903
Date: 2022-05-26 16:07:56 +0000;;;","2022-05-30 08:02;dukebot;Changeset: f086d945
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-05-30 14:59:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f086d945c31d3673e0a49017e3d4e99b189253fe
;;;","2022-05-30 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/144
Date: 2022-05-30 15:14:48 +0000;;;","2022-05-30 08:46;clanger;Fix request (18u, 17u, 11u):
Request to backport this GHA update to get Github PR tests greener. No risk. Patch applies cleanly in 18u, 17u. In 11u it's a trivial resolve. Requesting 11u-critical and 17u-critical because tests should have less noise also in rampdown.;;;","2022-05-30 09:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/425
Date: 2022-05-30 15:59:12 +0000;;;","2022-05-30 13:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1119
Date: 2022-05-30 20:09:23 +0000;;;","2022-05-31 01:38;cstein;According to https://github.com/actions/virtual-environments#available-environments all Windows environments are Windows Server images: 2016, 2019, and 2022

Upgrading from Cygwin 3.2.0-1 to 3.3.5-1 on Windows 10 and Windows 11 lead to same errors (""read jobs pipe: Permission denied."" sometimes followed by ""23175 Segmentation fault (core dumped)"") as described in https://bugs.openjdk.java.net/browse/JDK-8276854;;;","2022-05-31 01:48;clanger;OK, that means for GHA this patch is ok but users of Windows 10 and Windows 11 should be careful to update?

PS: I'm using Windows 10 on a local workstation but did not run into the segfaults, after I upgraded cygwin and also before. Did you?
;;;","2022-05-31 01:54;cstein;Yes, Windows 10 and 11 users should downgrade to (""keep"") cygwin base 3.2.0-1 when running make fails early with aforementioned errors.;;;","2022-06-01 09:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u/pull/39
Date: 2022-06-01 16:03:29 +0000;;;","2022-06-01 09:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u/pull/343
Date: 2022-06-01 16:01:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
null pointer should use NULL instead of 0,JDK-8287363,5075660,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2022-05-26 03:48,2022-06-01 23:27,2023-10-01 09:56,2022-05-30 00:03,19,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"We found using ""0"" as NULL in java_md_common.c . ""0"" is not a pointer, so we should use NULL where we want to handle it.

https://github.com/openjdk/jdk/pull/8646#discussion_r882294076",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x8yb:",9223372036854775807,b25,,,,,,,,,,,"2022-05-28 00:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8931
Date: 2022-05-28 03:31:30 +0000;;;","2022-05-30 00:03;dukebot;Changeset: a27ba1a3
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2022-05-30 07:02:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a27ba1a3db5f0b4eb75b6cca94f33398e7b695cc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FieldAccessWatch testcase failed on AIX platform,JDK-8287362,5075659,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,itakiguchi,itakiguchi,itakiguchi,2022-05-26 03:24,2022-06-01 23:27,2023-10-01 09:56,2022-05-27 22:37,19,,,,,,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"On AIX platform, test/hotspot/jtreg/serviceability/jvmti/FieldAccessWatch/FieldAccessWatch.java testcase failed by single testcase execution.

On 11.0.16, AIX's compiler is changed from XL C++ 13.1.3 (xlc/xlC) to XL C++ 16.1 (xlclang/xlclang++).
FieldAccessWatch testcase was failed during compiler migration on jtreg tier1.
By single testcase execution, It worked fine with xlc compiler, but it did not work as expected with xlclang.
I did not see this issue jtreg tier1 testcases execution on jdk17u-dev/jdk, but I could recreate this issue on jdk17u-dev/jdk by single testcae execution.

Failure message is:
===============
Error occurred during initialization of VM
agent library failed to init: FieldAccessWatch
Failed to set capabilities, error: 98
===============

It seems following initialization code affects this issue
===============
jvmtiCapabilities caps = {0};
===============",,,,,,,,,,JDK-8287535,JDK-8287500,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,aix,,,,,,"0|i2x8y3:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-05-26 10:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8904
Date: 2022-05-26 17:26:25 +0000;;;","2022-05-27 22:37;dukebot;Changeset: 66340372
Author:    Ichiroh Takiguchi <itakiguchi@openjdk.org>
Date:      2022-05-28 05:33:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/66340372d595aeb4b3dfd9169a8448f363097256
;;;","2022-05-29 05:54;itakiguchi;Fix request [17u]

Still I could recreate this issue on jdk-17.0.3+7.
openjdk version ""17.0.3"" 2022-04-19
OpenJDK Runtime Environment Temurin-17.0.3+7 (build 17.0.3+7)
OpenJDK 64-Bit Server VM Temurin-17.0.3+7 (build 17.0.3+7, mixed mode, sharing)

Clean backport.;;;","2022-05-29 06:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/420
Date: 2022-05-29 12:57:45 +0000;;;","2022-05-29 06:03;itakiguchi;Fix request [11u]

Still I could recreate this issue on jdk-11.0.15+10.
openjdk version ""11.0.15"" 2022-04-19
OpenJDK Runtime Environment Temurin-11.0.15+10 (build 11.0.15+10)
OpenJDK 64-Bit Server VM Temurin-11.0.15+10 (build 11.0.15+10, mixed mode)

Backport is not clean.
I applied following changes:
* Remove following files, they are not in jdk11u
  * test/hotspot/jtreg/serviceability/jvmti/GetClassMethods/libOverpassMethods.cpp
  * test/hotspot/jtreg/runtime/jni/FastGetField/libFastGetField.c
* Modify following file, just Copyright year
  * test/hotspot/jtreg/serviceability/jvmti/FieldAccessWatch/libFieldAccessWatch.c;;;","2022-05-29 06:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1112
Date: 2022-05-29 13:05:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ACC_IDENTITY bit not consistently set in Inner class flags,JDK-8287359,5075656,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-05-26 02:35,2022-05-27 00:43,2023-10-01 09:56,2022-05-27 00:43,repo-valhalla,,,,,,,,,,,repo-valhalla,tools,,0,lw4,,,,,,,,,,,,,,,,,,,,"Reported by Frederic:

During the build process, the class /build/tools/classlist/HelloClasslist is compiled, but its inner class doesn’t have any of the three required flags:
Classfile /home.local/fred/WORK/Valhalla/GitRepos/valhalla/build/new_super_rules_debug/buildtools/classlist_classes/build/tools/classlist/HelloClasslist.class
  Last modified May 24, 2022; size 8694 bytes
  SHA-256 checksum cddb2e0b1d560a2e2f138a6fc494978325996a9e53ca551fbd802174c3ad7b3c
  Compiled from ""HelloClasslist.java""
public identity class build.tools.classlist.HelloClasslist
  minor version: 0
  major version: 63
  flags: (0x0021) ACC_PUBLIC, ACC_IDENTITY
  this_class: #202                        // build/tools/classlist/HelloClasslist
  super_class: #176                       // java/lang/Object
  interfaces: 0, fields: 2, methods: 8, attributes: 3
[...]
InnerClasses:
  public static final #471= #308 of #248; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x8xf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-05-27 00:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/699
Date: 2022-05-27 07:09:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DockerTestUtils::execute shows incorrect elapsed time,JDK-8287352,5075649,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,iklam,iklam,2022-05-25 21:29,2022-06-01 23:26,2023-10-01 09:56,2022-05-26 21:34,19,,,,,,,,,,,19,hotspot,,0,containers,docker,noreg-self,,,,,,,,,,,,,,,,,,"DockerTestUtils::execute calculates the elapsed time without waiting for the child process to finish execution:

https://github.com/openjdk/jdk/blob/704b9a66bba0dc8adb62be80fd62864b9c687c3f/test/lib/jdk/test/lib/containers/docker/DockerTestUtils.java#L282

The fix is to call output.getStdout() first, which waits for the child process to finish execution.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x8vv:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-25 22:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8897
Date: 2022-05-26 04:55:00 +0000;;;","2022-05-26 21:34;dukebot;Changeset: ec97da93
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-05-27 04:32:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ec97da93c1d5bfcb80c19c15169f41926e59517b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refactor old code using StringTokenizer in locale related code,JDK-8287340,5075637,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2022-05-25 14:36,2022-06-09 22:16,2023-10-01 09:56,2022-06-02 11:38,,,,,,,,,,,,19,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,Found in the PR: https://github.com/openjdk/jdk/pull/8302#issuecomment-1137861353,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x8t7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-05-27 09:38;smarks;Yes, this code could be updated to use newer APIs. Note carefully that Set::of will throw on duplicates. Use Set::copyOf to deduplicate instead. Since StringTokenizer can be replaced with a call to String::split, which returns an array, something like the following would work:

    Set<String> tagset = Set.copyOf(Arrays.asList(supportedLocaleString.split(""[ \t\n\r\f]+"")));

In passing I note that the example for String::split in the StringTokenizer class doc is wrong! The regex should probably be ""\\s+"" instead of ""\\s"".
;;;","2022-05-27 10:18;naoto;Thanks, Stuart. In this case, `supportedLocaleString` should not contain duplicates, so Set.of() may detect the underlying bug if any. And yes, my PoC is using ""\s+"" :-);;;","2022-05-31 10:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8960
Date: 2022-05-31 17:46:18 +0000;;;","2022-06-02 11:38;dukebot;Changeset: 26d24263
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-06-02 18:35:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/26d24263c7db6d8f722afefc975b03cb575fa6ee
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tools/javac/api/snippets/TestJavaxToolsSnippets.java failing tier1 on all platforms,JDK-8287338,5075633,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,prappo,prappo,prappo,2022-05-25 11:23,2022-05-25 23:16,2023-10-01 09:56,2022-05-25 12:47,19,,,,,,,,,,,19,tools,,0,noreg-self,,,,,,,,,,,,,,,,,,,,"test/langtools/tools/javac/api/snippets/TestJavaxToolsSnippets.java:64: error: unreported exception ConfigurationException; must be caught or declared to be thrown
    SnippetUtils snippets = new SnippetUtils(""java.compiler"");
                            ^
1 error
result: Failed. Compilation failed: Compilation failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287337,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x8sb:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-05-25 11:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8890
Date: 2022-05-25 18:43:21 +0000;;;","2022-05-25 12:47;dukebot;Changeset: 3d6d7b7e
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-05-25 19:44:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3d6d7b7e7371dad3bd0983a9e26c39261783dcb4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GHA: Workflows break on patch versions,JDK-8287336,5075630,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-05-25 10:12,2022-06-03 06:14,2023-10-01 09:56,2022-05-26 08:58,11,17,18,19,,,,,,,,19,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-yes,,,,,,,,,,,,,,,"JDK-8283017 introduced logic to detect the JDK version from the source tree. It takes into account ${FEATURE}, ${INTERIM} and ${UPDATE} but misses ${PATCH}. So, if there's a patch version for an update, GHA is broken - as is now with 18.0.1.1.

See: https://github.com/openjdk-bots/jdk18u/actions/runs/2385040187",,,,,,,,,,JDK-8287498,JDK-8287486,JDK-8287585,JDK-8287803,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283017,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x8rn:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-05-25 10:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8888
Date: 2022-05-25 17:17:12 +0000;;;","2022-05-26 08:57;dukebot;Changeset: e44465d4
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-05-26 15:54:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e44465d4d6eaddebfc5a1b149223aa8332affa8b
;;;","2022-05-26 09:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/138
Date: 2022-05-26 16:40:43 +0000;;;","2022-05-27 02:56;clanger;Fix request (18u):
This unbreaks GHA which is currently failing due to version 18.0.1.1. No risk for the product.;;;","2022-05-27 02:59;clanger;Fix request (11u, 17u):
This backport is a follow up to JDK-8283017. It is not urgently necessary but should there be a patch release again in the future, it would make sure GHA doesn't break then.;;;","2022-05-27 03:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/418
Date: 2022-05-27 09:57:32 +0000;;;","2022-06-02 04:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1123
Date: 2022-06-02 11:03:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up ParamTaglet and ThrowsTaglet,JDK-8287333,5075626,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-05-25 08:28,2022-06-09 22:39,2023-10-01 09:56,2022-06-08 10:41,19,,,,,,,,,,,19,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,This should better be done before fixing issues like JDK-6509045.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288046,JDK-8288045,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x8qr:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-05-25 08:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8886
Date: 2022-05-25 15:39:10 +0000;;;","2022-06-08 10:41;dukebot;Changeset: 024a240e
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-06-08 17:37:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/024a240e1b938504a0e8ac2acdee78d89b5a3cec
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: fix virtual threads with -XX:UseBranchProtection=pac-ret,JDK-8287325,5075614,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,haosun,ngasson,ngasson,2022-05-25 06:31,2023-09-27 18:20,2023-10-01 09:56,2023-09-24 22:40,19,21,,,,,,,,,,22,hotspot,,0,aarch64-related,amazon-interest,loom,oracle-triage-21,,,,,,,,,,,,,,,,,"The continuation freeze/thaw mechanism introduced with Loom moves the thread stack in memory. However when PAC is enabled on supported AArch64 CPUs, the saved LR on the stack contains a pointer authentication code signed with the stack pointer at the time the frame was created. After relocating a frame, we need to re-sign the LR with the new stack pointer. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308503,,,,,,,JDK-8288023,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,,"0|i2x8o3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-06-07 09:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9067
Date: 2022-06-07 16:42:14 +0000;;;","2022-06-08 06:07;ngasson;For now we will just disable PAC-RET when --enable-preview is passed.;;;","2022-12-18 03:13;alanb;[~ngasson] We are starting to think about virtual threads as a permanent feature. An early step may be to enable VMContinuations by default, which means PAC-RET would have to be disabled completely until it is changed to sign with something other than the stack pointer. Is this still on your radar to re-examine?;;;","2022-12-19 02:21;ngasson;One workaround is to use the ZR register instead of SP (PACIAZ instruction).;;;","2023-04-04 01:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13322
Date: 2023-04-04 08:00:20 +0000;;;","2023-05-09 07:12;lfoltan;[RT Triage]: ILW = HMM = P2;;;","2023-05-11 08:27;aph;It makes no sense at all for this to be a P2 bug.

Making PAC/RET work with virtual threads is an enhancement, and PAC/RET is a non-default build-time option. I don't know that any distribution of OpenJDK builds with it enabled.
;;;","2023-05-11 15:41;coleenp;If it's a build-time option, that's different. The likelihood and workaround are LL, making it HLL?  impact high because it crashes (?);;;","2023-05-11 21:15;dlong;https://github.com/openjdk/jdk/blob/73491fa452e73cf7c02c577f4e3f1a34c02bea6d/src/hotspot/cpu/aarch64/vm_version_aarch64.cpp#LL464C1-L478C1

It looks like there is a bug when the feature is disable at build time.  The #else part for __ARM_FEATURE_PAC_DEFAULT gives a warning but doesn't set _rop_protection back to false.  Maybe the ""_rop_protection = true"" should be inside the #ifdef __ARM_FEATURE_PAC_DEFAULT.;;;","2023-05-12 01:20;haosun;** My test

I built jvm and tried ""java --version"" with the following matrix {Config X VM_option X Machine}.

  Config = {--enable-branch-protection, null}
  VM_option = {-XX:UseBranchProtection=pac-ret, -XX:UseBranchProtection=standard}
  Machine = {with-PAC, without-PAC}

1) JVM builds: all passed
2) JVM execution with ""java --version"": Only ""Config=null, VM_option=pac-ret, Machine=without-PAC"" crashed.

** UseBranchProtection flag

In my understanding, the code (https://github.com/openjdk/jdk/blob/73491fa452e73cf7c02c577f4e3f1a34c02bea6d/src/hotspot/cpu/aarch64/vm_version_aarch64.cpp#LL464C1-L478C1) implements Alan's definition of ""UseBranchProtection=pac-ret"", i.e. ""pac-ret - PAC support, regardless if the system supports it or the java binary was compiled with PAC."". See the comment in the initial PAC-RET patch(https://github.com/openjdk/jdk/pull/6334#discussion_r767685235)

However, from the document https://github.com/openjdk/jdk/blob/master/doc/building.md#branch-protection, ""In order to use Branch Protection features in the VM, --enable-branch-protection must be used."" Hence, for the failed case, where Config=null, we should disable ""_rop_protection"", which is also what Dean suggested.

I personally agree with Dean, i.e. for both ""pac-ret"" and ""standard"", PAC should be only enabled if the hardware supports it and the java binary is compiled with PAC already.

[~ahayward] [~aph], May I have your opinions? Thanks;;;","2023-05-12 11:08;lfoltan;[RT Triage]: moving to Compiler for their evaluation and triage.;;;","2023-05-15 03:54;thartmann;I think the _rop_protection bug should be fixed separately.

Updated ILW for this bug = Virtual threads don't work with PAC-RET, non-default AArch64 build with PAC/RET, UseBranchProtection = ""none"" = HLL = P4;;;","2023-05-22 01:38;haosun;[~thartmann] Agree. Will fix it in https://bugs.openjdk.org/browse/JDK-8308503 separately. Thanks.;;;","2023-09-24 22:40;dukebot;Changeset: 481cfc79
Author:    Hao Sun <haosun@openjdk.org>
Date:      2023-09-25 05:38:51 +0000
URL:       https://git.openjdk.org/jdk/commit/481cfc798533f5b3adae7cc4a076a98b0b3f9737
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ConcurrentModificationException in sun.net.httpserver.ServerImpl$Dispatcher,JDK-8287318,5075605,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-05-25 04:44,2023-05-17 12:27,2023-10-01 09:56,2022-05-31 20:57,17,19,,,,,,,,,,19,core-libs,,0,amazon-interest,noreg-hard,,,,,,,,,,,,,,,,,,,"The following intermittent exception was observed in the sun.net.httpserver.ServerImpl class when using the HttpServer:

java.util.ConcurrentModificationException
	at java.base/java.util.HashMap$HashIterator.nextNode(HashMap.java:1605)
	at java.base/java.util.HashMap$KeyIterator.next(HashMap.java:1628)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:379)
	at java.base/java.lang.Thread.run(Thread.java:1585)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278398,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x8m3:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-05-26 00:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8898
Date: 2022-05-26 07:17:12 +0000;;;","2022-05-31 20:57;dukebot;Changeset: 3deb58a8
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-06-01 03:55:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3deb58a89a79fd562fe0736e753e6a677234c8c7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
adjust guarantee in Handshake::execute for the case of target thread being current ,JDK-8287281,5075567,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jsjolen,sspitsyn,sspitsyn,2022-05-24 23:46,2022-06-29 23:10,2023-10-01 09:56,2022-06-24 09:09,19,,,,,,,,,,,20,hotspot,,0,sync,,,,,,,,,,,,,,,,,,,,"The following guarantee in Handshake::execute has to be adjusted for the case of target thread being current:
void Handshake::execute(HandshakeClosure* hs_cl, ThreadsListHandle* tlh, JavaThread* target) {
  . . .
  if (tlh == nullptr) {
    guarantee(Thread::is_JavaThread_protected_by_TLH(target),
              ""missing ThreadsListHandle in calling context.""); 

It has to be similar to the following async Handshake::execute version:

void Handshake::execute(AsyncHandshakeClosure* hs_cl, JavaThread* target) {
  jlong start_time_ns = os::javaTimeNanos();
  AsyncHandshakeOperation* op = new AsyncHandshakeOperation(hs_cl, target, start_time_ns);

  guarantee(target != nullptr, ""must be"");

  Thread* current = Thread::current();
  if (current != target) {
    // Another thread is handling the request and it must be protecting
    // the target.
    guarantee(Thread::is_JavaThread_protected_by_TLH(target),
              ""missing ThreadsListHandle in calling context."");
  } 

Also, please, refer to the comments from David on the related bug JDK-8286960",,,,,,,,,,JDK-8289109,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286960,JDK-8289129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,"0|i2x8dn:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Fix failed,,"2022-05-31 11:15;mseledtsov;ILW = HLM = P3;;;","2022-06-02 06:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8992
Date: 2022-06-02 13:47:23 +0000;;;","2022-06-24 02:49;shade;This change causes massive test breakages, see JDK-8289129. I think we should back it out from JDK 20.;;;","2022-06-24 09:08;dcubed; dukebot Dukebot added a comment - 11 hours ago
Changeset: 9dc9a64f
Author: Johan Sjölén <johan.sjolen@oracle.com>
Committer: David Holmes <dholmes@openjdk.org>
Date: 2022-06-24 05:00:53 +0000
URL: https://git.openjdk.org/jdk/commit/9dc9a64fa453d8afc90871e9663a0ccc46212f64;;;","2022-06-24 09:09;dcubed;Fix was pushed while main bug was targeted to '19'. Reset the main bug to fixed in '20' and copied the Robo Duke entry here.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/channels/FileChannel/LargeMapTest.java times out on Windows,JDK-8287263,5075548,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-05-24 14:25,2023-07-29 02:52,2023-10-01 09:56,2022-05-24 19:15,19,,,,,,,,,,,19,core-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,,,"If removed from the problem list, this test times out. It appears actually to pass with the timeout occurring after the test main ends.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286980,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,,"0|i2x89f:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-05-24 14:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8875
Date: 2022-05-24 21:29:51 +0000;;;","2022-05-24 19:15;dukebot;Changeset: 742644e2
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-05-25 02:10:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/742644e291039e4f2f30cf80718669c06da5809c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up Xcode sysroot logic,JDK-8287254,5075536,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-05-24 10:03,2022-05-25 23:05,2023-10-01 09:56,2022-05-25 01:10,19,,,,,,,,,,,19,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,The logic in BASIC_SETUP_DEVKIT for setting a correct sysroot for Xcode is hard to follow. This should be straightened out. We also expose variables that are no longer used. So there's a bit of related cleanup.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x86r:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-05-24 10:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8872
Date: 2022-05-24 17:09:10 +0000;;;","2022-05-25 01:10;dukebot;Changeset: d889319a
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-05-25 08:06:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d889319a86101e944aefd4ad7f300505abbe5b30
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Zero: Missing BarrierSetNMethod::arm() method,JDK-8287249,5075529,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-05-24 08:52,2022-05-25 23:14,2023-10-01 09:56,2022-05-24 11:14,19,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,Zero,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x857:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-24 10:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8873
Date: 2022-05-24 17:25:58 +0000;;;","2022-05-24 11:14;dukebot;Changeset: 194bc08a
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-05-24 18:12:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/194bc08a899d699b34d3d896001af8c642758b1d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DSAKeyValue should check for missing params instead of relying on KeyFactory provider,JDK-8287246,5075526,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mullan,mullan,mullan,2022-05-24 08:00,2023-05-25 05:56,2023-10-01 09:56,2022-05-26 05:39,,,,,,,,,,,,19,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"The DSA KeyFactory implementation in the SUN and SunPKCS11 providers handle missing (i.e. null) DSA parameters differently. The SUN provider throws ProviderException if at least one, but not all of the P, Q, and G params are  null and the SunPKCS11 provider throws NullPointerException if any are null. Both are similar in that they are treated as RuntimeExceptions which typically indicates an error in the application.

P, Q, and G are optional according to the XML Signature Recommendation as they might be known from application context, but the JDK implementation does not provide a mechanism or API for an application to supply the missing parameters, so they are required to be specified in the DSAKeyValue element of a KeyInfo element.

Thus, it seems a more robust fix is to have the XML Signature implementation check for null or missing parameters and throw a MarshalException before trying to create a DSA public key from its XML encoding. This will allow the code to fail earlier and not depend on the provider to detect illegal or missing parameters.",,,,,,,,,,JDK-8306274,JDK-8304540,JDK-8308868,JDK-8304942,JDK-8304935,JDK-8304259,JDK-8304595,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8232274,,,,,JDK-8232274,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x84j:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ee0b2af,,,,,,,,,"2022-05-24 09:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8870
Date: 2022-05-24 16:29:02 +0000;;;","2022-05-26 05:39;dukebot;Changeset: f235955e
Author:    Sean Mullan <mullan@openjdk.org>
Date:      2022-05-26 12:36:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f235955eefb1141a2e72116dfcf345e40416f059
;;;","2023-04-16 07:33;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Medium risk. Simple change, but in crypto code and not test.
Clean backport.
SAP nightly testing passed.;;;","2023-04-16 07:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1244
Date: 2023-04-16 14:33:07 +0000;;;","2023-05-24 08:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1895
Date: 2023-05-24 15:16:04 +0000;;;","2023-05-24 08:47;lucy;Fix request [11u] 

This is a backport for parity with 11.0.20-oracle. 

Applies cleanly. Tests passed (GHA and SAP internal).
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Files.probeContentType returns null if filename contains hash mark on Linux,JDK-8287237,5075475,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2022-05-23 23:21,2022-08-09 09:02,2023-10-01 09:56,2022-06-01 08:18,11,17,18,19,8,,,,,,,19,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Java 11 (on CentOS Linux release 7.9.2009 (Core) with openjdk 11.0.14.1 2022-02-08 LTS). 
Also occurs in Java 18.0.1.1 (JShell Version 18.0.1.1 on Docker openjdk:18.0.1).

A DESCRIPTION OF THE PROBLEM :
Disclaimer: https://bugs.openjdk.java.net/browse/JDK-8283622 was closed as ""Cannot Reproduce"" without properly investigating the issue, so I have to file a new bug.

On Linux, the java.nio.file.Files.probeContentType method unexpectedly returns null if the filename contains a hash mark ""#"". 
The problem is caused by sun.net.www.MimeTable.findByFileName(String), which is used by the default file type detector (sun.nio.fs.DefaultFileTypeDetector) as fallback, and which tries to determine the extension for filenames and URLs alike and omits characters after a supposed fragment identifier ""#"". 
However, the implementation neglects that ""#"" is a valid character for most file systems (especially under Linux). 

Consequently, the content type for a file named ""b.png"" yields ""image/png"", but for ""a#b.png"" yields null.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Reproduction of the bug might depend on the Linux distribution and which capabilities for content-type probing are available. 

It can be reproduced via the Docker by running ""docker run -it openjdk:18.0.1"": 
PS C:\test> docker run -it openjdk:18.0.1
Unable to find image 'openjdk:18.0.1' locally
18.0.1: Pulling from library/openjdk
90a00d516db1: Pull complete
06fc60984518: Pull complete
f4f239d0320f: Pull complete
Digest: sha256:aeea19efe712520a7e58d24bc608b2a8470406a238d2a8168838b4677ca7f651
Status: Downloaded newer image for openjdk:18.0.1
May 24, 2022 5:37:21 AM java.util.prefs.FileSystemPreferences$1 run
INFO: Created user preferences directory.
|  Welcome to JShell -- Version 18.0.1.1
|  For an introduction type: /help intro

jshell>

jshell> java.nio.file.Files.probeContentType(java.nio.file.Paths.get(""b.png""))
$1 ==> ""image/png""

jshell> java.nio.file.Files.probeContentType(java.nio.file.Paths.get(""a#b.png""))
$2 ==> null

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Content type based on filename extension (e.g., ""image/png"")

---------- BEGIN SOURCE ----------
Assert.assertEquals(""image/png"", Files.probeContentType(Paths.get(""b.png""))); // Passes
Assert.assertEquals(""image/png"", Files.probeContentType(Paths.get(""a#b.png""))); // Fails
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Install a custom FileTypeDetector.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283622,,,,,,,,"2022-05-24 06:16;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/99080/Main.java",,,,,,,,,,generic,,,,,,,,,,linux_oracle_8,,,,,,"0|i2x7t7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2022-05-24 06:19;tongwan;The observations on Oracle Linux by running podman run --rm -it openjdk:18.0.1 sh:
NAME=""Oracle Linux Server""
VERSION=""8.6""
JDK 8: Failed, Files.probeContentType(Paths.get(""a#b.png"")) returned null 
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+11: Failed.;;;","2022-05-26 15:52;bpb;ASSIGNEE SUBMITTED WORKAROUND :
Install a proper /etc/mime.types file on the system.;;;","2022-05-26 15:57;bpb;This problem has not been able to be reproduced on our Linux systems as they all appear to be properly configured with a valid /etc/mime.types file. As noted in the description, in the absence of this mime.types file on Linux, file type detection falls back to a detector which expects the file extension to be before the optional fragment, that part of the name beginning with a hash ('#'). If the extension is actually within the optional fragment then type detection fails.;;;","2022-05-26 16:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8909
Date: 2022-05-26 23:03:05 +0000;;;","2022-06-01 08:18;dukebot;Changeset: 8071b231
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-01 15:15:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8071b2311caaacd714d74f12aee6cb7c2fe700fa
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reorganize AST related to pattern matching for switch,JDK-8287236,5075515,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-05-24 06:21,2023-01-26 09:57,2023-10-01 09:56,2022-06-07 03:33,19,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"Under JEP 427, case label elements may be: a) expressions; b) patterns; c) the default. Currently, this is modeled in the AST in a way where all expressions and patterns extend CaseLabelTree.

When guarded patterns were removed in favor of guards on pattern case label element, it was necessary to augment all patterns with a guard, which is only used when the pattern is used as a case label element. This feels somewhat odd.

It might be better to use a layer of indirection - the CaseLabelTree would only have three subtypes: ExpressionCaseLabelTree, which would contain ExpressionTree as a subnode; PatternCaseLabelTree, which would contain PatternTree and a guard (ExpressionTree) as subnodes; and the DefaultCaseLabelTree for the default clause.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287579,,,JDK-8269869,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x823:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-05-31 09:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8959
Date: 2022-05-31 16:13:54 +0000;;;","2022-06-07 03:33;dukebot;Changeset: bde7a7ae
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-06-07 10:31:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bde7a7ae03f51360227c9757b2ab3ddbff4df908
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crash in Continuation.enterSpecial:  stop: tried to execute native method as non-native,JDK-8287233,5075512,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,rpressler,dholmes,dholmes,2022-05-24 05:56,2022-06-15 15:06,2023-10-01 09:56,2022-06-01 07:11,19,,,,,,,,,,,19,hotspot,,0,intermittent,loom,tier1,,,,,,,,,,,,,,,,,,"Test: serviceability/jvmti/vthread/RawMonitorTest/RawMonitorTest.java


# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (0xe0000000), pid=31869, tid=41219
#  stop: tried to execute native method as non-native
#
# JRE version: Java(TM) SE Runtime Environment (19.0+24) (fastdebug build 19-ea+24-1795)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+24-1795, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# j  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V+0 java.base@19-ea
#
# Core dump will be written. Default location: core.31869
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  T H R E A D  ---------------

Current thread (0x000000013d809010):  JavaThread ""ForkJoinPool-1-worker-2"" daemon [_thread_in_Java, id=41219, stack(0x0000000170354000,0x0000000170557000)]

Stack: [0x0000000170354000,0x0000000170557000],  sp=0x00000001705564a0,  free space=2057k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
j  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V+0 java.base@19-ea
j  jdk.internal.vm.Continuation.run()V+122 java.base@19-ea
j  java.lang.VirtualThread.runContinuation()V+81 java.base@19-ea
j  java.lang.VirtualThread$$Lambda$8+0x000000080104a498.run()V+4 java.base@19-ea
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@19-ea
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@19-ea
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@19-ea
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+203 java.base@19-ea
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@19-ea
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@19-ea
v  ~StubRoutines::call_stub 0x00000001151941bc
V  [libjvm.dylib+0x92f200]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x4cc
V  [libjvm.dylib+0x92e0e8]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x1f8
V  [libjvm.dylib+0x92e2ac]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x70
V  [libjvm.dylib+0xa87038]  thread_entry(JavaThread*, JavaThread*)+0x16c
V  [libjvm.dylib+0x1123a28]  JavaThread::thread_main_inner()+0x264
V  [libjvm.dylib+0x11208c0]  Thread::call_run()+0x220
V  [libjvm.dylib+0xeab7a8]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x726c]  _pthread_start+0x94
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-27 08:49;rpressler;8287233-reproduce.diff;https://bugs.openjdk.org/secure/attachment/99129/8287233-reproduce.diff",,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,,,"0|i2x81f:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-05-24 06:18;rehn;Relevant:

  // make sure method is not native & not abstract
#ifdef ASSERT
  __ ldrw(r0, access_flags);
  {
    Label L;
    __ tst(r0, JVM_ACC_NATIVE);
    __ br(Assembler::EQ, L);
    __ stop(""tried to execute native method as non-native"");
;;;","2022-05-24 11:06;mseledtsov;ILW = HLH = P2;;;","2022-05-26 03:46;rpressler;There could be a race between `if (!resolved_method->has_compiled_code())` in `LinkResolver::resolve_static_call` and the call to `Method::set_code` in `AdapterHandlerLibrary::create_native_wrapper`. `has_compiled_code` is not called under a lock, and it returns true if the `_code` field has been set, but the interpreter entry points in `set_code` haven’t been set yet. Normally, we'd miss the compiled code (???) but in the case of enterSpecial, there is no interpreted version.;;;","2022-05-27 08:56;rpressler;Easily reproduces with the attached patch from [~pchilanomate] that adds sleeps in appropriate locations.;;;","2022-05-30 04:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8926
Date: 2022-05-27 15:53:25 +0000;;;","2022-06-01 07:11;dukebot;Changeset: b2b4ee21
Author:    Ron Pressler <rpressler@openjdk.org>
Committer: Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2022-06-01 14:10:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b2b4ee212f06c606fc51e03ff33642035f4a4328
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: A couple of virtual thread tests failed with iu mode even without Loom enabled.,JDK-8287227,5075505,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,zgu,zgu,2022-05-24 05:39,2023-06-23 23:48,2023-10-01 09:56,2022-06-27 05:46,19,,,,,,,,,,,20,hotspot,,0,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"serviceability/jvmti/vthread/SuspendResume1/SuspendResume1.java
serviceability/jvmti/vthread/VThreadTest/VThreadTest.java

Failed without Loom enabled.

To reproduce:
make CONF=linux-x86_64-server-fastdebug TEST_VM_OPTS=""-XX:+UseShenandoahGC -XX:+UnlockExperimentalVMOptions -XX:ShenandoahGCMode=iu"" run-test TEST=hotspot_loom

#
#  Internal Error (/home/zgu/ws/jdk/src/hotspot/share/gc/shenandoah/c2/shenandoahSupport.cpp:2666), pid=717559, tid=717606
#  Error: assert(new_mem->outcnt() > 0) failed
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.zgu.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.zgu.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a17564]  MemoryGraphFixer::fix_mem(Node*, Node*, Node*, Node*, Node*, Unique_Node_List&)+0xc14







",,,,,,,,,,JDK-8310842,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288129,,,,,,,,,,,,,,,,,JDK-8277654,,,,,,,,"2022-05-24 05:39;zgu;hs_err_pid717459.log;https://bugs.openjdk.org/secure/attachment/99076/hs_err_pid717459.log","2022-05-24 05:39;zgu;hs_err_pid717559.log;https://bugs.openjdk.org/secure/attachment/99075/hs_err_pid717559.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x7zv:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-31 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8958
Date: 2022-05-31 14:46:58 +0000;;;","2022-06-27 05:46;dukebot;Changeset: 210a06a2
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-06-27 12:42:41 +0000
URL:       https://git.openjdk.org/jdk/commit/210a06a287521a554316a9052bd9fdf616c7b884
;;;","2022-06-27 05:50;alanb;The description says ""without Loom enabled"" but these tests run with --enable-preview as they are test with virtual threads.;;;","2023-06-20 11:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1479
Date: 2023-06-20 18:11:33 +0000;;;","2023-06-21 10:14;wkemper;jdk17u-fix-request

This is a follow on request for JDK-8277654. Although the defect was found by Loom tests and these tests do not exist in 17, the defect still needs to be patched. The backport targeted https://github.com/openjdk/jdk17u-dev/pull/1448 and was clean.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C1: Inlining attempt through MH::invokeBasic() with null receiver ,JDK-8287223,5075346,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vlivanov,webbuggrp,webbuggrp,2022-05-20 09:18,2022-07-15 03:49,2023-10-01 09:56,2022-06-07 08:22,11.0.15,17,18,19,,,,,,,,19,hotspot,,0,c1,dcsswa,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-19,reproducer-yes,webbug,,,,,,,,,,,,"Running the attached test case on JDK 19 b23 as follows:

$ java -XX:TieredStopAtLevel=1 Test.java

leads to a segmentation fault in product builds:

#  SIGSEGV (0xb) at pc=0x00007f65fd5e6c40, pid=21145, tid=21158
#
# JRE version: Java(TM) SE Runtime Environment (19.0+23) (build 19-ea+23-1706)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19-ea+23-1706, mixed mode, emulated-client, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x28dc40]  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ul>::oop_access_barrier(void*)+0x0

and to an assertion failure in debug builds (log and replay files *_pid21435.log attached):

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/ciObject.hpp:144
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error[thread 21183 also had an error] (open/src/hotspot/share/ci/ciObject.hpp:144)
, pid=21182, tid=21195
#  assert(is_method_handle()) failed: bad cast
#
# JRE version: Java(TM) SE Runtime Environment (19.0+23) (fastdebug build 19-ea+23-1706)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+23-1706, mixed mode, emulated-client, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7b7214]  GraphBuilder::try_method_handle_inline(ciMethod*, bool)+0x454


ORIGINAL REPORT:

ADDITIONAL SYSTEM INFORMATION :
Arch: x86_64
OS: Ubuntu 20.04.4 LTS
HotSpot
- openjdk version ""11.0.15"" 2022-04-19
- OpenJDK Runtime Environment (build 11.0.15+10-Ubuntu-0ubuntu0.20.04.1)
- OpenJDK 64-Bit Server VM (build 11.0.15+10-Ubuntu-0ubuntu0.20.04.1, mixed mode, sharing)
javac: javac 11.0.15

A DESCRIPTION OF THE PROBLEM :
The problem was firstly found in the repo https://github.com/openjdk/jdk11u-dev (commit 9cb3797f). Unfortunately, it can still be reproduced on openjdk 11.0.15 with the following log:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f1e92c6d944, pid=3242972, tid=3242987
#
# JRE version: OpenJDK Runtime Environment (11.0.15+10) (build 11.0.15+10-Ubuntu-0ubuntu0.20.04.1)
# Java VM: OpenJDK 64-Bit Server VM (11.0.15+10-Ubuntu-0ubuntu0.20.04.1, mixed mode, sharing, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x573944]
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /tmp/hs_err_pid3242972.log
#
# Compiler replay data is saved as:
# /tmp/replay_pid3242972.log
#
# If you would like to submit a bug report, please visit:
#   Unknown
#
Aborted

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. type: javac Test.java
2. type: java -Xbatch Test

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
HotSpot does NOT crash
ACTUAL -
HotSpot DID crash

---------- BEGIN SOURCE ----------
class Test {
  boolean bFld;

  void mainTest(String[] strArr1) {
    double d = 2.61331;
    int i, i30, i32;
    for (i30 = 830; i30 > 51; --i30) bFld = bFld;
    i32 = 1;
    while (++i32 < 908)
      for (int ax$2 = -3230; ax$2 < 9840; ax$2 += 2)
        try {
          java.lang.invoke.MethodHandle ax$0 = null;
          ax$0.invokeExact();
        } catch (Throwable ax$1) {
        } finally {
        }
    System.out.println(""d i i30 = "" + d);
  }

  public static void main(String[] strArr) {
    Test _instance = new Test();
    for (; ; ) _instance.mainTest(strArr);
  }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8287488,JDK-8289134,JDK-8290364,JDK-8288799,JDK-8288832,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-24 02:55;sswsharm;Test.java;https://bugs.openjdk.org/secure/attachment/99069/Test.java","2022-05-24 02:54;sswsharm;hs_err_pid16500.log;https://bugs.openjdk.org/secure/attachment/99068/hs_err_pid16500.log","2022-05-24 04:49;rcastanedalo;hs_err_pid21435.log;https://bugs.openjdk.org/secure/attachment/99071/hs_err_pid21435.log","2022-05-24 04:49;rcastanedalo;replay_pid21435.log;https://bugs.openjdk.org/secure/attachment/99072/replay_pid21435.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2x70j:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-24 03:00;sswsharm;Issue is reproduced, crash is observed.

OS: Windows 10
JDK 11.0.15.1: Fail
JDK 17.0.2: Fail
JDK 18: Fail

Moving it to Dev team for further analysis;;;","2022-05-24 04:54;rcastanedalo;ILW = crash in product and debug build; randomly-generated Java program; disable C1 (e.g. using -XX:-TieredCompilation) = HLM = P3;;;","2022-05-24 07:06;chagedorn;Can also be reproduced with JDK 12. As this is not a recent regression, I'm moving this to JDK 20.;;;","2022-05-25 15:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8894
Date: 2022-05-25 21:58:01 +0000;;;","2022-06-03 14:56;vlivanov;Fixed in 19.;;;","2022-06-07 00:32;rcastanedalo;Changing from 'Resolved' to 'Closed' since the issue is not associated with a changeset that has been integrated.;;;","2022-06-07 08:17;thartmann;The incorrect backport creation needs to be fixed as described here:
https://openjdk.java.net/guide/#how-to-fix-an-incorrect-backport-creation-in-jbs;;;","2022-06-07 08:21;thartmann;Changeset: d3e781de
Author: Vladimir Ivanov <vlivanov@openjdk.org>
Date: 2022-05-27 21:23:52 +0000
URL: https://git.openjdk.java.net/jdk/commit/d3e781de086d557a88105da965ff8a7f9126019c;;;","2022-06-07 08:22;thartmann;Fix was pushed while main bug was targeted to JDK 20. Reset the main bug to fixed in 19 and copied the Robo Duke entry here.;;;","2022-06-21 01:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/164
Date: 2022-06-21 07:51:29 +0000;;;","2022-06-23 06:44;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Typical risk of  a C1 change, but we should fix this anyways.
Clean backport.
Test passes and fails without the fix.  SAP nighlty testing passed.;;;","2022-06-23 06:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/503
Date: 2022-06-23 13:50:36 +0000;;;","2022-06-30 08:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1191
Date: 2022-06-30 15:50:40 +0000;;;","2022-07-14 02:53;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Typical risk of a C1 change, but we should fix this anyways.
Clean backport.
SAP nighlty testing passed. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: PhaseCCP: remove not visited nodes, prevent type inconsistency",JDK-8287217,5075347,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,epeter,webbuggrp,webbuggrp,2022-05-20 09:48,2022-12-29 01:39,2023-10-01 09:56,2022-09-21 00:25,11,17,18,19,20,8,,,,,,20,hotspot,,0,c2,dcsswa,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,oracle-triage-19,reproducer-yes,webbug,,,,,,,,,,,"Running the attached test case on a debug build of JDK 19 b23 as follows:

$ java Test.java

triggers the following assertion failure:

(...)
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:1162
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (src/hotspot/share/opto/phaseX.cpp:1162), pid=22625, tid=22644
#  assert(false) failed: infinite loop in PhaseIterGVN::optimize
#
# JRE version: Java(TM) SE Runtime Environment (19.0+23) (fastdebug build 19-ea+23-1706)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+23-1706, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x178df37]  PhaseIterGVN::optimize()+0x6b7


ORIGINAL REPORT:

ADDITIONAL SYSTEM INFORMATION :
Arch: x86_64
OS: Ubuntu 20.04 LTS
HotSpot:
- openjdk version ""11.0.16-internal"" 2022-07-19
- OpenJDK Runtime Environment (fastdebug build 11.0.16-internal+0-adhoc.my.my-jdk11u)
- OpenJDK 64-Bit Server VM (fastdebug build 11.0.16-internal+0-adhoc.my.my-jdk11u, mixed mode)
javac: javac 11.0.16-internal

A DESCRIPTION OF THE PROBLEM :
This bug is found in https://github.com/openjdk/jdk11u-dev repo (commit 9cb3797f) with the following log

```
 416    DecodeN === _  417  [[ 442 ]]  #java/lang/Byte:NotNull:exact *  Oop:java/lang/Byte:NotNull:exact * !orig=[313] !jvms: Byte::valueOf @ bci:12 Test::iMeth @ bci:56
 437    Region  ===  437  451  448  [[ 437  438  442  446 ]]  !orig=262,321 !jvms: Test::iMeth @ bci:61
 608    DecodeN === _  606  [[ 397  522 ]]  #java/lang/Byte:NotNull:exact *  Oop:java/lang/Byte:NotNull:exact * !orig=[318],592 !jvms: Test::iMeth @ bci:61
 631    DecodeN === _  629  [[ 522 ]]  #java/lang/Byte:NotNull:exact *  Oop:java/lang/Byte:NotNull:exact * !orig=[501],[318],592 !jvms: Test::iMeth @ bci:61
 516    Region  ===  516  512  460  [[ 516  464  519  521  522  523 ]] 
 439    IfTrue  ===  438  [[ 440 ]] #1 !orig=330 !jvms: Test::iMeth @ bci:28
 465    IfTrue  ===  464  [[ 440  466 ]] #1
 442    Phi     ===  437  416  441  [[ 441 ]]  #java/lang/Byte:exact *  Oop:java/lang/Byte:exact * !orig=[318],592 !jvms: Test::iMeth @ bci:61
 522    Phi     ===  516  631  608  [[ 441 ]]  #java/lang/Byte:exact *  Oop:java/lang/Byte:exact *
 440    CountedLoop     ===  440  465  439  [[ 440  441  443  445  447  452 ]] inner stride: 1 post of N396 !orig=[396],[386],[182] !jvms: Test::iMeth @ bci:31
 26     ConL    ===  0  [[ 28  228  286  415  423  474  482  545  553 ]]  #long:12
 441    Phi     ===  440  522  442  [[ 442  423  423 ]]  #java/lang/Byte:exact *  Oop:java/lang/Byte:exact * !orig=189 !jvms: Test::iMeth @ bci:31
 3      Start   ===  3  0  [[ 3  5  6  7  8  9  10 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:Test:NotNull *, 6:int, 7:long, 8:half, 9:int}
 423    AddP    === _  441  441  26  [[ 422 ]]   Oop:java/lang/Byte:exact+12 * !orig=286 !jvms: Byte::byteValue @ bci:1 Test::iMeth @ bci:53
 7      Parm    ===  3  [[ 163  150  137  332  29  118  58  351  74  97  322  312  552  287  547  229  256  409  414  417  422  468  473  476  481  539  544 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !orig=[174],[184] !jvms: Test::iMeth @ bci:-1
 422    LoadB   === _  7  423  [[ 421 ]]  @java/lang/Byte:exact+12 *, name=value, idx=9; #byte !orig=287 !jvms: Byte::byteValue @ bci:1 Test::iMeth @ bci:53
    0-->  414   LoadB   === _  7  415  [[ 413 ]]  @java/lang/Byte:exact+12 *, name=value, idx=9; #byte !orig=229 !jvms: Byte::byteValue @ bci:1 Test::iMeth @ bci:40
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/phaseX.cpp:1193
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/my/my-jdk11u/src/hotspot/share/opto/phaseX.cpp:1193), pid=3952425, tid=3952567
#  assert(false) failed: infinite loop in PhaseIterGVN::optimize
#
# JRE version: OpenJDK Runtime Environment (11.0.16) (fastdebug build 11.0.16-internal+0-adhoc.my.my-jdk11u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 11.0.16-internal+0-adhoc.my.my-jdk11u, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /tmp/hs_err_pid3952425.log
#
# Compiler replay data is saved as:
# /tmp/replay_pid3952425.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Current thread is 3952567
Dumping core ...
Aborted
```

Note, We CANNOT reproduce it in HotSpot 11.0.15.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. type: javac Test.java
2. type: java -Xbatch Test

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
HotSpot does NOT crash
ACTUAL -
HotSpot DID crash

---------- BEGIN SOURCE ----------
class Test {
  int N;
  long instanceCount;

  int iMeth(int i, long l, short s1) {
    float fArr[] = new float[N];
    Byte ax$1 = 0xFFFFFFFF;
    Byte ax$0 = 1;
    for (int ax$2 = 0; ax$2 < 10000; ax$2++)
      if ((ax$2 & 1) == 0) ax$0 = (byte) ax$0;
      else ax$1 = (byte) ax$1;
    long meth_res = Double.doubleToLongBits(checkSum(fArr));
    return (int) meth_res;
  }

  void mainTest(String[] strArr1) {
    short s = 21753;
    int i21 = 97;
    s = (short) iMeth(i21, instanceCount, s);
  }

  public static void main(String[] strArr) {
    Test _instance = new Test();
    for (; ;  ) _instance.mainTest(strArr);
  }

  public static double checkSum(float[] a) {
    double sum = 0;
    for (int j = 0; j < a.length; j++) {
      sum += (a[j] / (j + 1) + a[j] % (j + 1));
    }
    return sum;
  }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8296282,JDK-8299405,JDK-8297509,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284879,JDK-8290711,,,,,,,"2022-05-24 02:35;sswsharm;Test.java;https://bugs.openjdk.org/secure/attachment/99065/Test.java","2022-09-09 07:02;epeter;Test2.java;https://bugs.openjdk.org/secure/attachment/100715/Test2.java","2022-05-24 02:36;sswsharm;hs_err_pid13616.log;https://bugs.openjdk.org/secure/attachment/99066/hs_err_pid13616.log","2022-05-24 02:36;sswsharm;replay_pid13616.log;https://bugs.openjdk.org/secure/attachment/99067/replay_pid13616.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2x70r:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-24 02:38;sswsharm;Issue is reproduced in the fastdebug build.but not in the GA builds

OS: Windows 10
JDK 11.0.16 (fastdebug) : Fail
JDK 11.0.15.1: Pass
JDK 17.0.1: Pass
JDK 18: Pass
Moving it to the dev team for further analysis;;;","2022-05-24 05:32;rcastanedalo;The issue is reproducible in JDK 8-19 (debug builds). Updating its priority in light of this.

ILW = assertion failure with graceful degradation in product build; randomly-generated program; ignore assertion or disable compilation of affected method = MLM = P4;;;","2022-05-24 07:08;chagedorn;As this is not a recent regression and not high prio, I'm moving this to JDK 20 for now.;;;","2022-09-09 07:02;epeter;Test2.java is a reduced reproducer, that I got from [~chagedorn]. Thanks :);;;","2022-09-15 00:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10250
Date: 2022-09-13 14:33:14 +0000;;;","2022-09-21 00:25;dukebot;Changeset: 379f3094
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2022-09-21 07:22:28 +0000
URL:       https://git.openjdk.org/jdk/commit/379f3094db0b8afe90ed6b7a341164222744085f
;;;","2022-11-22 08:13;thartmann;Fix Request (JDK 19u)
Fixes an infinite loop during C2 compilation. The fix is medium risk and does not apply cleanly due to unrelated changes to surrounding code. Already tested and backported to Oracle JDK 17u.;;;","2022-11-22 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/87
Date: 2022-11-22 16:11:57 +0000;;;","2022-12-22 07:48;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
A C2 fix with the typical chance of breaking the compiler. We should take it to keep C2 up to date.
I needed to resolve one chunk.
Test passes. SAP nightly testing passed.;;;","2022-12-22 07:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/976
Date: 2022-12-22 15:47:45 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
generate_cont_thaw generates dead code after jump to exception handler,JDK-8287205,5075479,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rrich,rrich,rrich,2022-05-24 00:12,2022-06-09 22:23,2023-10-01 09:56,2022-06-05 12:31,19,,,,,,,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,The stub that is used to thaw continuation stack frames in order to dispatch an exception has not reachable instructions after control is transferred to the exception handler. `generate_cont_thaw()` is the generator of that stub.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x7u3:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-25 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8863
Date: 2022-05-24 07:33:02 +0000;;;","2022-06-05 12:31;dukebot;Changeset: ebc012ec
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2022-06-05 19:30:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ebc012ece28ea731c4756cab2374ebecfa5ac1a3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Synthetic concrete classes generated by javac are lacking the ACC_IDENTITY bit.,JDK-8287203,5075477,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-05-23 23:44,2022-05-24 02:34,2023-10-01 09:56,2022-05-24 02:34,repo-valhalla,,,,,,,,,,,repo-valhalla,tools,,0,lw4,,,,,,,,,,,,,,,,,,,,"Reported by Frederic: (Thanks!)

When javac compiles jdk/tools/jmod/JmodTask.java, it creates a class file declaring a class that doesn’t have any of the ACC_ABSTRACT , ACC_IDENTITY , or ACC_VALUE flags:


$ ./build/new_super_rules/images/jdk/bin/javap -v build/new_super_rules/jdk/modules/jdk.jlink/jdk/tools/jmod/JmodTask\$1.class
Classfile /home.local/fred/WORK/Valhalla/GitRepos/valhalla/build/new_super_rules/jdk/modules/jdk.jlink/jdk/tools/jmod/JmodTask$1.class
  Last modified May 18, 2022; size 858 bytes
  SHA-256 checksum bac15d777ddcc82e263064a09672b695ac399c18b706e0724b5f579ca5332471
  Compiled from ""JmodTask.java""
class jdk.tools.jmod.JmodTask$1
  minor version: 0
  major version: 63
  flags: (0x1000) ACC_SYNTHETIC
  this_class: #8                          // jdk/tools/jmod/JmodTask$1
  super_class: #35                        // java/lang/Object
  interfaces: 0, fields: 1, methods: 1, attributes: 4

Which seems to be illegal regarding JVMS 4.1:

If a class other than java/lang/Object has neither its ACC_IDENTITY flag nor its ACC_VALUE flag set, then its ACC_ABSTRACT flag must be set.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x7tn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-05-24 02:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/695
Date: 2022-05-24 09:27:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GHA: Add macOS aarch64 to the list of default platforms for workflow_dispatch event,JDK-8287202,5075476,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-05-23 23:39,2022-06-02 00:58,2023-10-01 09:56,2022-05-25 01:20,,,,,,,,,,,,19,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,,,,,,,,,,,,,,"OpenJDK's GitHub Actions template defines a workflow_dispatch event to allow for manual triggering of test workflows. When adding a workflow for macOS aarch64, it seems that it was forgotten to add this platform to the default platforms of workflow_dispatch.",,,,,,,,,,JDK-8287465,JDK-8287720,JDK-8287583,JDK-8287721,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x7tf:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-05-23 23:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8861
Date: 2022-05-24 06:41:52 +0000;;;","2022-05-25 01:20;dukebot;Changeset: f7a37f58
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-05-25 08:15:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f7a37f58862d08adbf8fb141bf43c362bda7fd16
;;;","2022-05-25 01:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/135
Date: 2022-05-25 08:43:00 +0000;;;","2022-05-25 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/412
Date: 2022-05-25 09:10:57 +0000;;;","2022-05-25 02:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1107
Date: 2022-05-25 09:36:38 +0000;;;","2022-05-25 06:45;clanger;Fix request (11u, 17u, 18u):
Backport this minor configuration tweak for GHA. No risk. Applies cleanly in 18u and 17u, needed minimal resolve in 11u.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test java/lang/management/ThreadMXBean/VirtualThreadDeadlocks.java timed out after  JDK-8287103,JDK-8287200,5075473,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dholmes,dholmes,2022-05-23 23:13,2022-06-01 23:26,2023-10-01 09:56,2022-05-26 22:31,19,,,,,,,,,,,19,core-svc,,0,tier5,,,,,,,,,,,,,,,,,,,,"In the first tier5 run with JDK-8287103 fixed, this test timed out:

----------System.out:(4/152)----------
thread1 => VirtualThread[#23]/runnable
thread2 => VirtualThread[#25]/runnable
Waiting for thread1 and thread2 to deadlock ...
Timeout refired 480 times
----------System.err:(0/0)----------
----------rerun:(38/5769)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287103,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i2x7sr:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-05-24 06:40;kevinw;
Virtual thread has terminated.

Possibly if thread 2 happens to run first, it will do everything it wants before thread 1 runs.
Blocking/sleeping forever with lock1 held should fix that.

MainThread stuck:
	at java.lang.Thread.sleep(java.base@19-ea/Thread.java:462)
	at VirtualThreadDeadlocks.awaitBlocked(VirtualThreadDeadlocks.java:100)
	at VirtualThreadDeadlocks.main(VirtualThreadDeadlocks.java:80)
	at java.lang.invoke.LambdaForm$DMH/0x0000000801002000.invokeStatic(java.base@19-ea/LambdaForm$DMH)
	
Line 80 means waiting for thread 1 to become BLOCKED, and it never happens.

 79         System.out.println(""Waiting for thread1 and thread2 to deadlock ..."");
 80         awaitBlocked(thread1);
 81         awaitBlocked(thread2);
 
test repeat 50 in mach5, so 200 tests across 4 platform types I got one failure (with a bit of println in awaitBlocked()):

https://mach5.us.oracle.com:10060/api/v1/results/kwalls-jdk-20220524-1308-32699122-open_test_jdk_java_lang_management_ThreadMXBean_VirtualThreadDeadlocks_java-linux-aarch64-47-1653399344-1/log
----------System.out:(510/24449)----------
thread1 => VirtualThread[#23]/runnable
thread2 => VirtualThread[#25]/runnable
Waiting for thread1 and thread2 to deadlock ...
XXXX awaitBlocked VirtualThread[#23]/runnable = RUNNABLE
XXXX VirtualThread[#23]/terminated = TERMINATED
XXXX VirtualThread[#23]/terminated = TERMINATED
XXXX VirtualThread[#23]/terminated = TERMINATED

..etc...
;;;","2022-05-24 12:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8874
Date: 2022-05-24 19:52:57 +0000;;;","2022-05-26 22:31;dukebot;Changeset: 176bb23d
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-05-27 05:29:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/176bb23de18d9ab448e77e85a9c965a7c02f2c50
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: Client VM build failure after JDK-8283689,JDK-8287195,5075468,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ngasson,haosun,haosun,2022-05-23 20:13,2022-08-24 07:33,2023-10-01 09:56,2022-05-30 01:13,19,,,,,,,,,,,19,core-libs,,0,oracle-triage-19,regression,,,,,,,,,,,,,,,,,,,"====================================================
 A new configuration has been successfully created in
 ~/build-release
 using configure arguments '--with-boot-jdk=~/aarch64/jdk18 --with-debug-level=release --with-version-opt=git-81e4bdbe1 --with-jvm-variants=client --with-gtest=~/tools/googletest'.
 
 Configuration summary:
 * Name:           ~/build-release
 * Debug level:    release
 * HS debug level: product
 * JVM variants:   client
 * JVM features:   client: 'cds compiler1 dtrace epsilongc g1gc jfr jni-check jvmti management parallelgc serialgc services shenandoahgc vm-structs zgc' 
 * OpenJDK target: OS: linux, CPU architecture: aarch64, address length: 64
 * Version string: 19-internal-git-81e4bdbe1 (19-internal)
 * Source date:    Determined at build time
 
 Tools summary:
 * Boot JDK:       openjdk version ""18-internal"" 2022-03-22 OpenJDK Runtime Environment (build 18-internal+0-git-0f2113cee) OpenJDK 64-Bit Server VM (build 18-internal+0-git-0f2113cee, mixed mode, sharing) (at /mnt/share/openjdk/packages/boot-jdk/aarch64/jdk18)
 * Toolchain:      gcc (GNU Compiler Collection)
 * C Compiler:     Version 10.3.0 (at /usr/bin/gcc)
 * C++ Compiler:   Version 10.3.0 (at /usr/bin/g++)
 
 Build performance summary:
 * Build jobs:     46
 * Memory limit:   94458 MB
 
 The following warnings were produced. Repeated here for convenience:
 WARNING: Ignoring jtreg from path since a valid jtreg home cannot be found
 


 === Output from failing command(s) repeated here ===
 * For target hotspot_variant-client_libjvm_objs_foreign_globals_aarch64.o:
 In file included from ~/jdk_src/src/hotspot/share/opto/regmask.hpp:29,
                  from ~/jdk_src/src/hotspot/share/opto/compile.hpp:42,
                  from ~/jdk_src/src/hotspot/share/opto/node.hpp:29,
                  from ~/jdk_src/src/hotspot/share/opto/matcher.hpp:31,
                  from ~/jdk_src/src/hotspot/cpu/aarch64/foreign_globals_aarch64.cpp:31:
 ~/jdk_src/src/hotspot/share/opto/optoreg.hpp:32:1: fatal error: adfiles/adGlobals_aarch64.hpp: No such file or directory
    32 | #include CPU_HEADER(adfiles/adGlobals)
       | ^~~~~~~~~~~~~~~~~
 compilation terminated.
 
 * All command lines available in ~/build-release/make-support/failure-logs.
 === End of repeated output ===",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,,"0|i2x7rn:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-05-24 04:02;rcastanedalo;ILW = build breakage; using non-default JVM variant; use default variant = HMM = P2;;;","2022-05-24 04:04;rcastanedalo;[~jvernee] JDK-8283689 broke the linux-aarch64 build when using ""--with-jvm-variants=client"", could you have a look?;;;","2022-05-24 09:40;jvernee;This seems to be because of the dependency on Matcher - namely Matcher::supports_scalable_vector and Matcher::scalable_vector_reg_size, which depends on the ad files being there, which are not included in the client builds AFAICT.

[~ngasson] You are more familiar with this code I think. These functions seem like simple helper functions. Would it be possible to move the needed functions from Matcher to e.g. (Macro)Assembler? (which has a platform specific API as well) That way the dependency on Matcher could be remove from foreignGlobals_aarch64.cpp I think.;;;","2022-05-24 10:31;ngasson;[~jvernee] Sure, I'll take a look.;;;","2022-05-24 10:45;jvernee;[~ngasson] Thanks!;;;","2022-05-25 02:15;ngasson;I think there's actually a bug here: in various other places (e.g. DowncallStubGenerator::generate() and AArch64Architecture.VECTOR_REG_SIZE) we assume the register spiller will always save 16 bytes for a vector register, but that won't be the case on a machine with SVE support and where the SVE vector size is greater than 128-bit. The fix should probably be to remove the Matcher dependency and always save a 128b vector, like x86 does.;;;","2022-05-25 04:43;jvernee;You're right. RegSpiller is used for saving values that are also supported by the Java API, and currently we don't support vectors, but only float and double. Saving 16 bytes would be (more than) good enough.

The 16 bytes assumption is for the return buffer though, and RegSpiller doesn't interact with that directly. It will only needs to re-spill the registers around the calls on the return path for both down and upcalls, and would spill too much in the case of vectors -> 128-bit. It's wasteful, but I don't see it creating an immediate problem.

Only preserve_callee_saved_registers in upcallLinker_aarch64.cpp might need to save more if the high-order-bits are callee saved in the caller's ABI. Right now we don't have a way to distinguish between the sizes of vector registers that need to be saved, so on x86_64 we conservatively save the whole register. It looks like aarch64 only saves 8 bytes there, which I'm guessing is good enough for C, which is currently the only ABI that is supported. (I wouldn't worry about that too much for now).

For now, to get rid of the Matcher dependency, I think what you suggest is a good way forward: i.e. only save/restore 16 bytes in RegSpiller.;;;","2022-05-26 12:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8908
Date: 2022-05-26 19:39:42 +0000;;;","2022-05-30 01:13;dukebot;Changeset: 19fb8ab8
Author:    Nick Gasson <ngasson@openjdk.org>
Date:      2022-05-30 08:09:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/19fb8ab8b9a3366850ed224c35f3cd163c0511e5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
build failure on riscv after JDK-8286825,JDK-8287194,5075467,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,fjiang,fjiang,fjiang,2022-05-23 19:05,2023-04-27 04:29,2023-10-01 09:56,2022-05-24 00:14,19,,,,,,,,,,,19,hotspot,,0,oraclejdk-na,oracle-triage-19,,,,,,,,,,,,,,,,,,,"JDK-8286825 made some renaming of hotspot file and method, the following renaming was missing in riscv:
- universalNativeInvoker*--> downcallLinker*
- 'native invoker' -> 'downcall stub'

build errors:

```
/home/jiangfeilong/workspace/jdk/src/hotspot/cpu/riscv/downcallLinker_riscv.cpp:27:10: fatal error: prims/universalNativeInvoker.hpp: No such file or directory
 #include ""prims/universalNativeInvoker.hpp""
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

```
/home/jiangfeilong/workspace/jdk/src/hotspot/cpu/riscv/downcallLinker_riscv.cpp:36:74: error: no 'RuntimeStub* DowncallLinker::make_native_invoker(BasicType*, int, BasicType, const ABIDescriptor&, const GrowableArray<VMRegImpl*>&, const GrowableArray<VMRegImpl*>&, bool)' member function declared in class 'DowncallLinker'
                                                  bool needs_return_buffer) {
                                                                          ^
cc1plus: error: unrecognized command line option '-Wno-cast-function-type' [-Werror]
cc1plus: all warnings being treated as errors
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286825,,,,,,,,,,,,,,,,,,riscv,,,,,,,,19,,linux,,,,,,"0|i2x7rf:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-23 19:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8859
Date: 2022-05-24 02:32:04 +0000;;;","2022-05-24 00:14;dukebot;Changeset: 1cd7850f
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Aleksey Shipilev <shade@openjdk.org>
Date:      2022-05-24 07:12:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1cd7850f8745dc92d78e46f11856dd74dd8a66d1
;;;","2022-05-24 04:15;rcastanedalo;ILW = build failure; always; no know workaround = HHH = P1;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Utilize HashMap.newHashMap() in CLDRConverter,JDK-8287187,5075459,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2022-05-23 15:55,2022-06-01 23:25,2023-10-01 09:56,2022-05-26 08:54,,,,,,,,,,,,19,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,There are locations in CLDRConverter where the new method can be used.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x7pn:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-05-25 09:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8887
Date: 2022-05-25 16:43:59 +0000;;;","2022-05-26 08:54;dukebot;Changeset: c10749a6
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-05-26 15:51:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c10749a6a70977fbd6cd33b298410d212276fcf1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK modules participating in preview,JDK-8287186,5075458,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psandoz,psandoz,psandoz,2022-05-23 15:35,2022-07-25 07:35,2023-10-01 09:56,2022-07-05 09:34,,,,,,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,,,,,,"Allow JDK modules that use preview features (language features, or API features from dependent modules) to participate without the need to compile with --enable-preview.

",,,,,,,,,,JDK-8288432,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284960,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-23 15:36;psandoz;preview-participating.diff;https://bugs.openjdk.org/secure/attachment/99059/preview-participating.diff",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x7pf:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-08 08:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9087
Date: 2022-06-08 15:46:24 +0000;;;","2022-07-05 09:33;psandoz;Changeset: fb297705
Author: Paul Sandoz <psandoz@openjdk.org>
Date: 2022-06-14 16:22:59 +0000
URL: https://git.openjdk.org/jdk/commit/fb297705f6dc668bea0257efb9c46b90b5eab2e9;;;","2022-07-05 09:34;psandoz;Fix was pushed while main bug was targeted to 19. Reset the main bug to fixed in 20 and copied the Robo Duke entry here.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IntegerModuloP::multiplicativeInverse returns 0 for 0,JDK-8287178,5075450,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-05-23 12:34,2022-06-15 23:45,2023-10-01 09:56,2022-06-10 15:27,,,,,,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288362,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x7nn:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-06-09 14:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9115
Date: 2022-06-09 21:34:56 +0000;;;","2022-06-10 15:27;dukebot;Changeset: d4b473d8
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-06-10 22:25:18 +0000
URL:       https://git.openjdk.org/jdk/commit/d4b473d89046874f25aa6f65f3ae96f7d8397d50
;;;","2022-06-10 15:55;martin;Consider using pure ASCII in source files

=== Output from failing command(s) repeated here ===
* For target jdk_modules_java.base__the.java.base_batch:
/home/martin/ws/jdk/src/java.base/share/classes/sun/security/util/math/IntegerModuloP.java:164: error: unmappable character (0xE2) for encoding ascii
        //    is represented as (0, 0) in 2D, it???s OK returning 0 as
                                                ^
/home/martin/ws/jdk/src/java.base/share/classes/sun/security/util/math/IntegerModuloP.java:164: error: unmappable character (0x80) for encoding ascii
        //    is represented as (0, 0) in 2D, it???s OK returning 0 as
                                                 ^
/home/martin/ws/jdk/src/java.base/share/classes/sun/security/util/math/IntegerModuloP.java:164: error: unmappable character (0x99) for encoding ascii
        //    is represented as (0, 0) in 2D, it???s OK returning 0 as
                                                  ^
3 errors
;;;","2022-06-10 19:27;weijun;[~martin] I should have, as it triggered a P1 build failure. I thought this is just a comment change so haven't done any build at all. Maybe some sort of local CI is needed.;;;","2022-06-10 22:04;martin;[~weijun] I agree the system should protect the developers from ever accidentally regressing openjdk.

---

I recall breaking a build in the 90s by making a comment longer - gcc had a limit of 128 newlines in a single comment!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refactor null caller tests to a single directory,JDK-8287171,5075442,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tprinzing,tprinzing,tprinzing,2022-05-23 09:44,2022-06-09 22:15,2023-10-01 09:56,2022-06-02 09:49,,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,The various test for caller sensitive api where there is no caller stack frame are spread out to the area for the api being tested.  There is redundant code that could be avoided if they were all placed in a single directory (perhaps test/jdk/jdk/nullCaller).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287745,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x7lv:",9223372036854775807,b26,,,,,,,,,,,"2022-05-28 04:21;tprinzing;Created a test at test/jdk/jdk/nullCaller called NullCallerTest that creates a test module with some resources in it for the actual tests that occur at the native level.  The native part was switched to c++ instead of c to make it easier to create helper objects that reduce the redundant code performing error checking.  The two helper classes InstanceCall and StaticCall were placed in an include file called CallHelper.hpp.  The main part of the tests are in exeNullCallerTest.cpp, and there is a separate function for each of the bug reports.;;;","2022-05-28 04:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8934
Date: 2022-05-28 11:50:19 +0000;;;","2022-06-01 06:07;tprinzing;location is test/jdk/jni/nullCaller;;;","2022-06-02 09:49;dukebot;Changeset: e51ca1de
Author:    Tim Prinzing <tprinzing@openjdk.org>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2022-06-02 16:45:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e51ca1dee33d69c74f7f1dc2292db2f04c4ccf4c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/arguments/TestCompileThresholdScaling.java fails on x86_32 after JDK-8287052,JDK-8287169,5075440,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-05-23 09:33,2022-06-20 03:37,2023-10-01 09:56,2022-05-24 09:33,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,,,,,,,,,,,,,,,,,"$ CONF=linux-x86-server-fastdebug make images run-test TEST=compiler/arguments/TestCompileThresholdScaling.java

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/utilities/powerOfTwo.hpp:54), pid=1661416, tid=1661419
#  assert(value > T(0)) failed: value must be > 0
#
# JRE version:  (19.0) (fastdebug build )
# Java VM: OpenJDK Server VM (fastdebug 19-internal-adhoc.shade.jdk, mixed mode, sharing, tiered, g1 gc, linux-x86)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/shade/trunks/jdk/build/linux-x86-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_compiler_arguments_TestCompileThresholdScaling_java/scratch/0/hs_err_pid1661416.log
#
#
];
 stderr: [CompileThreshold (-2147483648) must be between 0 and 1073741823
]
 exitValue = 134

Bisect points to JDK-8287052.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287052,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x7lf:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-23 10:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8851
Date: 2022-05-23 17:03:38 +0000;;;","2022-05-23 13:40;dlong;ILW = overflow causes assert; test always fails; no workaround = MMH = P3;;;","2022-05-24 09:33;dukebot;Changeset: fdece9ac
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-05-24 16:31:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fdece9ac71e865371ef7e348c54bca21235efdb3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(zipfs) Performance regression related to support for POSIX file permissions,JDK-8287162,5075432,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lancea,mtrudeau,mtrudeau,2022-05-23 06:45,2023-02-21 00:19,2023-10-01 09:56,2022-05-24 08:57,14,15,16,17,18,19,,,,,,19,core-libs,,0,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-critical-request,jdk17u-critical-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,noreg-other,performance,regression,,,,,,,,,,,"The enhancement to add support for POSIX file permissions (JDK-8213031) caused significant performance regression in some situation.

Compiler an empty class using Javac on a server with LDAP / NIS with weblogic.jar on the classpath, cause the compilation to jump from 2s to 16s.

weblogic.jar pulls in 600+ jar files and retrieving the ownership for each of the jar files amount for 13.5 seconds of the 14 seconds regression mentioned above.",,,,,,,,,,JDK-8287179,JDK-8287587,JDK-8287802,JDK-8287531,JDK-8287993,JDK-8293158,JDK-8302947,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8213031,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b09,14,,,,,,,,"0|i2x7jn:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-05-23 11:34;clanger;Maybe javac could turn off the Posix Permission feature? But, other than that, it would be interesting to see some profiling data...;;;","2022-05-23 11:41;alanb;I don't think javac enables it. The issue seems to the initialization of defaultOwner, it should only call initOwner when enabled.;;;","2022-05-23 11:47;lancea;I have a fix which I will push out the PR once my Mach5 run completes which restores the performance when enablePosixFileAttributes is not set(or false);;;","2022-05-23 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8854
Date: 2022-05-23 19:47:33 +0000;;;","2022-05-24 08:57;dukebot;Changeset: a10c5597
Author:    Lance Andersen <lancea@openjdk.org>
Date:      2022-05-24 15:54:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a10c5597d93c4402bafdbb570437aac052b10027
;;;","2022-05-25 13:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/137
Date: 2022-05-25 19:58:17 +0000;;;","2022-05-25 13:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/417
Date: 2022-05-25 19:58:51 +0000;;;","2022-05-27 03:07;clanger;Fix request (18u, 17u):
This fixes a performance regression in zipfs. Backport applies cleanly, tested in SAP nightlies.

Update, 17u-critical: Unfortunately the backport request in jdk17u-dev was not approved in time to reach 17.0.4, yet I still request to get it included for July. Seems like a performance regression that just needs a very trivial fix.;;;","2022-06-01 09:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u/pull/342
Date: 2022-06-01 15:55:21 +0000;;;","2022-08-31 01:11;yan;Fix request (15u):
this fix should be ported here, too, to be on par with later releases.
All test/jdk/java/util/zip test/jdk/jdk/nio/zipfs tests pass but one: jdk/java/util/zip/ZipFile/TestZipFile.java should be updated with 8207936;;;","2022-08-31 01:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/265
Date: 2022-08-31 08:13:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[spec] Improve @throws and @exception,JDK-8287161,5075429,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-05-23 06:14,2022-05-25 23:05,2023-10-01 09:56,2022-05-23 10:48,19,,,,,,,,,,,19,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,This is to clarify and clean up specification for the those tags.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x7iz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Additional make typos,JDK-8287155,5075417,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-05-23 03:03,2022-05-25 23:11,2023-10-01 09:56,2022-05-23 13:59,19,,,,,,,,,,,19,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,"Testing ispell + shell magic to locate typos. It worked, but is not scalable to the entire JDK. :-( Keep the fixes for the problems found in the make directory, though.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x7gb:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-05-23 03:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8837
Date: 2022-05-23 10:04:14 +0000;;;","2022-05-23 13:59;dukebot;Changeset: 02fec1e6
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-05-23 20:56:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/02fec1e6e5b6728c13763718c98cf5db68b1cce3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/channels/FileChannel/LargeMapTest.java does not compile,JDK-8287154,5075416,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,tschatzl,tschatzl,2022-05-23 03:00,2023-07-29 02:50,2023-10-01 09:56,2022-05-23 03:22,19,,,,,,,,,,,19,core-libs,,0,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,,,"open/test/jdk/java/nio/channels/FileChannel/LargeMapTest.java:64: error: cannot find symbol
            MemorySegment mbb = MemorySegment.ofByteBuffer(bb);
                                             ^
  symbol:   method ofByteBuffer(ByteBuffer)
  location: interface MemorySegment
Note: /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+24-1761/src.full/open/test/jdk/java/nio/channels/FileChannel/LargeMapTest.java uses preview features of Java SE 19.
Note: Recompile with -Xlint:preview for details.
1 error
result: Failed. Compilation failed: Compilation failed
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286637,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x7g3:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-05-23 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8839
Date: 2022-05-23 10:10:15 +0000;;;","2022-05-23 03:22;dukebot;Changeset: 81f128b9
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-05-23 10:19:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/81f128b9031e2c04859d323378b64e3f2625bf20
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problemlist failing x86_32 tests after Loom integration,JDK-8287137,5075399,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-05-23 00:09,2022-05-30 05:34,2023-10-01 09:56,2022-05-24 07:12,19,,,,,,,,,,,19,hotspot,,0,loom,testbug,,,,,,,,,,,,,,,,,,,"JDK-8284161 did not include a port to x86_32. The x86_32 porting is done under JDK-8286642. Meanwhile, we can problemlist the failing tests to get cleaner runs for other patches. This should also make GHA runs cleaner.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286642,,,,,,,JDK-8287520,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x7cb:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-05-23 08:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8843
Date: 2022-05-23 12:28:30 +0000;;;","2022-05-24 07:12;dukebot;Changeset: 0a82c4eb
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-05-24 14:10:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0a82c4ebc3748f6dfbbcd72e4421fbe0ea89e0b0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lw4] Javac tolerates abstract value classes that violate constraints for qualifying to be value super classes,JDK-8287136,5075398,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-05-22 23:24,2022-06-02 03:45,2023-10-01 09:56,2022-06-02 03:45,repo-valhalla,,,,,,,,,,,repo-valhalla,tools,,0,lw4,,,,,,,,,,,,,,,,,,,,"Reported by Frederic through Dan:

Fred noticed an error not being caught in abstract value classes. I went back to the spec, and realized there were a few cases that I'd missed: abstract value classes shouldn't allow enclosing instances, instance initializers, or nontrivial constructors.

public value class AbstractTest {
    public abstract class NAbstract {}
    public abstract value class VAbstract {}
    public abstract identity class IAbstract {}
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x7c3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-06-02 03:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/702
Date: 2022-06-02 10:36:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpURLConnection chunked streaming mode doesn't enforce specified size,JDK-8287134,5075374,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,ccleary,webbuggrp,webbuggrp,2022-05-21 08:58,2023-08-08 14:38,2023-10-01 09:56,2023-01-26 00:36,11,17,18,19,8,,,,,,,21,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
java 17
windows 10

A DESCRIPTION OF THE PROBLEM :
[chunkedStreamingMode](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/net/HttpURLConnection.html#setChunkedStreamingMode(int)) simply enables chunk streaming but it doesn't enforce the specified size on the chunks transmitted. It allows chunks of any size to be transmitted regardless of this value and it doesn't divide the data into multiple chunks if it exceeds this value. We have to do it manually

This method should divide the data in an write() call into chunks automatically without the user manually calculating the size of each chunk but it doesn't.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1) Create an simple server to print the chunks received from the client

2) Create an HttpURLConnection to transfer chunks of size greater than the specified value

3)Observe output on server end. chunk sizes can be of any length irrespective of the length specified in the client method



EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Upon transmitting 15 bytes of data and with setChunkedStreamingMode(5) the URL connection should transmit 3 chunks each of size 5 bytes and the last 0 chunk as follows. Output is viewed on the server side

POST /Test.txt HTTP/1.1
User-Agent: Java/17.0.2
Host: localhost:3000
Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
Connection: keep-alive
Content-type: application/x-www-form-urlencoded
Transfer-Encoding: chunked



=========
5
01234

=========
5
56789

=========
5
ABCDE

=========
0




ACTUAL -
Full 20 bytes is transmitted as one chunk

POST /Test.txt HTTP/1.1
User-Agent: Java/17.0.2
Host: localhost:3000
Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
Connection: keep-alive
Content-type: application/x-www-form-urlencoded
Transfer-Encoding: chunked


=========
f
0123456789ABCDE

==========
0

---------- BEGIN SOURCE ----------
Run server in an seperate JVM

class Server
{
 public static void main(String[] args)throws Exception
 {
  try(ServerSocket server=new ServerSocket(3000))
  {
   try(Socket client=server.accept())
   {
    try(InputStream input=client.getInputStream())
    {
     int length;
     byte[] data=new byte[6000];
     
     while((length=input.read(data))>0)
     {
      System.out.println(new String(data,0,length));
      System.out.println(""========="");
     } 
    } 
   } 
  } 
 }
}

Run client in an seperate JVM

public class Chunked
{
 public static void main(String[] args) throws Exception
 {
  HttpURLConnection con=(HttpURLConnection)new URL(""http://localhost:3000/Test.txt"")
                        .openConnection();
  
  con.setChunkedStreamingMode(5);
  
  con.setDoOutput(true);
  try(OutputStream output=con.getOutputStream())
  {
   output.write(""0123456789ABCDE"".getBytes());
   output.flush();
  } 
 }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
in the client we need to manually divide the data our self into equal sized chunks.  

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300848,,,JDK-6960404,,,,,,,,,,,,JDK-6720866,,,,,,,,"2022-05-22 23:20;tongwan;Chunked.java;https://bugs.openjdk.org/secure/attachment/99043/Chunked.java","2022-05-22 23:20;tongwan;Server.java;https://bugs.openjdk.org/secure/attachment/99044/Server.java",,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x76r:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-05-22 23:19;tongwan;The observations on Windows 10:
JDK 8: Failed, full 20 bytes is transmitted as one chunk
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+19: Failed.;;;","2022-05-23 02:36;dfuchs;This is related to JDK-6720866. The implementation of ChunkedOutputStream will use a default chunk size if the chunkLength specified is less than the number of bytes needed to encode the chunk header (two CRLF + the chunk size in hexa). This seems wrong. However the crux of the issue seems to be about misaligned  buffering of chunks which can lead to performance issues.

Understanding the issue reported by JDK-6720866 and the corresponding fix is a pre-requisite to fixing JDK-8287134.;;;","2022-12-02 03:22;djelinski;The problem is that the behavior of setChunkedStreamingMode does not match its documentation. It treats the chunklen parameter as the number of bytes sent over the socket in a single write. If you want to send 5 byte chunks, you need to use setChunkedStreamingMode(10).

The documentation states that:
chunklen - The number of bytes to write in each chunk. If chunklen is less than or equal to zero, a default value will be used.

In fact the method is using the default chunk size when chunklen is less than or equal to 5. A minimal HTTP chunk of one byte takes up 6 bytes (1 byte for chunk size, 4 bytes for 2 newlines, 1 byte payload), and values lower than 6 are not usable.;;;","2022-12-02 03:42;dfuchs;Good analysis [~djelinski] - in that case I would advocate for changing the API documentation to document the actual behavior. This would require a CSR.;;;","2023-01-17 07:33;ccleary;Digging up old bugs assigned to me. Will review this presently and create a CSR as needed. Thanks for the previous analysis [~djelinski]. Will update here when required;;;","2023-01-18 02:48;ccleary;So from my understanding and through a little bit of experimentation with submitter code, what Daniel and Daniel have said is correct. When the submitter specifies 5 for the chunk size, that 5 is concerned with the number of bytes sent over the socket in a single write as [~djelinski] pointed out. Seeing as a minimal HTTP chunk also takes up 6 bytes, a value lower than 6 is not usable as previously mentioned. This results in the behavior reported by the submitter. Passing a value of 10 for the chunk length to setChunkedStreamingMode results in the expected behaviour of 5 byte payload lengths.

When setChunkedstreamingMode is set to 5, a new ChunkedOutputStream is created where there is logic to use the deafult chunk size value of 4096 instead. So, in conclusion, this comment is just to supplement the explanations previously given. I will update the API documentation accordingly and create a CSR for that when required.

Thanks to all for pointing me down the right path!;;;","2023-01-18 02:55;ccleary;Possible update to the documentation could be...

""The number of bytes to be written on the wire in each chunk. This includes a chunk size header (1 byte), two CRLF's (4 bytes) and a minimum payload length of 1 byte. If chunklen is less than or equal to 5, a default value will be used."";;;","2023-01-23 01:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12137
Date: 2023-01-23 09:04:58 +0000;;;","2023-01-26 00:36;dukebot;Changeset: 48152ef6
Author:    Conor Cleary <ccleary@openjdk.org>
Date:      2023-01-26 08:35:07 +0000
URL:       https://git.openjdk.org/jdk/commit/48152ef66f2466f8c80499325a716de0cb45d8ef
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Multiple jpackage tests fail/timeout on same host,JDK-8287125,5075385,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,dholmes,dholmes,2022-05-22 14:59,2022-07-21 03:52,2023-10-01 09:56,2022-06-02 14:46,19,,,,,,,,,,,19,tools,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,macos,noreg-self,sn_119,tier2,,,,,,,,,,,,,,"tools/jpackage/share/MultiNameTwoPhaseTest.java
tools/jpackage/share/ArgumentsTest.java
tools/jpackage/share/jdk/jpackage/tests/MainClassTest.java

test result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+24-1743/macosx-x64.jdk/jdk-19.jdk/Contents/Home/bin/java' timed out (timeout set to 1440000ms, elapsed time including timeout handling was 1687974ms).

test result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+24-1743/macosx-x64.jdk/jdk-19.jdk/Contents/Home/bin/java' timed out (timeout set to 1440000ms, elapsed time including timeout handling was 1552980ms).

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+24-1743/macosx-x64.jdk/jdk-19.jdk/Contents/Home/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 525635ms).

",,,,,,,,,,JDK-8290803,JDK-8289972,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277493,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x,,,,,,"0|i2x797:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-05-26 14:34;almatvee;Most likely related to JDK-8277493. JDK-8277493 changed the way we sign application by completely un-signing it before signing it again. Based on tests log it adds 2-3 minutes to runtime. So, fix is increase timeout or maybe split tests.;;;","2022-05-26 20:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8911
Date: 2022-05-27 03:12:39 +0000;;;","2022-06-02 14:46;dukebot;Changeset: 409157d2
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-06-02 21:44:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/409157d2af0e124756bf8c0d996ba8658a9714b7
;;;","2022-07-20 02:12;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
SAP nightly testing passed.;;;","2022-07-20 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/569
Date: 2022-07-20 09:11:40 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RenaissanceStressTest.java failed,JDK-8287124,5075384,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dholmes,dholmes,2022-05-22 14:39,2022-09-27 09:32,2023-10-01 09:56,2022-06-15 08:48,19,,,,,,,,,,,20,hotspot,,0,intermittent,jdk11u-na,jdk17u-na,tier5,tier8,,,,,,,,,,,,,,,,"Unclear which is the actual fatal error:

[stress.process.err] Benchmark 'dotty' failed with exception:
[stress.process.err] java.lang.IncompatibleClassChangeError
[stress.process.err] 	at scala.collection.mutable.HashTable.initialCapacity(HashTable.scala:75)
[stress.process.err] 	at scala.collection.mutable.HashTable.$init$(HashTable.scala:49)
[stress.process.err] 	at scala.collection.mutable.LinkedHashSet.<init>(LinkedHashSet.scala:44)
[stress.process.err] 	at scala.collection.mutable.LinkedHashSet$.empty(LinkedHashSet.scala:139)
[stress.process.err] 	at scala.collection.mutable.LinkedHashSet$.empty(LinkedHashSet.scala:137)
[stress.process.err] 	at scala.collection.generic.GenericCompanion.apply(GenericCompanion.scala:50)
[stress.process.err] 	at dotty.tools.dotc.core.CheckRealizable.<init>(CheckRealizable.scala:60)
[stress.process.err] 	at dotty.tools.dotc.core.CheckRealizable$.realizability(CheckRealizable.scala:45)
[stress.process.err] 	at dotty.tools.dotc.typer.Checking$.checkRealizable(Checking.scala:140)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.typedImport(Typer.scala:1746)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:1953)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:1996)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2027)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2039)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.traverse$1(Typer.scala:2050)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.typedStats(Typer.scala:2089)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.typedPackageDef(Typer.scala:1757)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:1974)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:1996)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2027)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2039)
[stress.process.err] 	at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2100)
[stress.process.err] 	at dotty.tools.dotc.typer.FrontEnd.typeCheck$$anonfun$1(FrontEnd.scala:61)
[stress.process.err] 	at scala.compat.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
[stress.process.err] 	at dotty.tools.dotc.typer.FrontEnd.monitor(FrontEnd.scala:35)
[stress.process.err] 	at dotty.tools.dotc.typer.FrontEnd.typeCheck(FrontEnd.scala:65)
[stress.process.err] 	at dotty.tools.dotc.typer.FrontEnd.runOn$$anonfun$2(FrontEnd.scala:89)
[stress.process.err] 	at scala.compat.java8.JProcedure1.apply(JProcedure1.java:18)
[stress.process.err] 	at scala.compat.java8.JProcedure1.apply(JProcedure1.java:10)
[stress.process.err] 	at scala.collection.immutable.List.foreach(List.scala:392)
[stress.process.err] 	at dotty.tools.dotc.typer.FrontEnd.runOn(FrontEnd.scala:89)
[stress.process.err] 	at dotty.tools.dotc.Run.runPhases$4$$anonfun$4(Run.scala:172)
[stress.process.err] 	at scala.compat.java8.JProcedure1.apply(JProcedure1.java:18)
[stress.process.err] 	at scala.compat.java8.JProcedure1.apply(JProcedure1.java:10)
[stress.process.err] 	at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:36)
[stress.process.err] 	at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:33)
[stress.process.err] 	at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.scala:198)
[stress.process.err] 	at dotty.tools.dotc.Run.runPhases$5(Run.scala:184)
[stress.process.err] 	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:192)
[stress.process.err] 	at scala.compat.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
[stress.process.err] 	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:90)
[stress.process.err] 	at dotty.tools.dotc.Run.compileUnits(Run.scala:199)
[stress.process.err] 	at dotty.tools.dotc.Run.compileSources(Run.scala:134)
[stress.process.err] 	at dotty.tools.dotc.Run.compile(Run.scala:118)
[stress.process.err] 	at dotty.tools.dotc.Driver.doCompile(Driver.scala:33)
[stress.process.err] 	at dotty.tools.dotc.Driver.process(Driver.scala:166)
[stress.process.err] 	at dotty.tools.dotc.Driver.process(Driver.scala:135)
[stress.process.err] 	at dotty.tools.dotc.Driver.process(Driver.scala:147)
[stress.process.err] 	at dotty.tools.dotc.Main.process(Main.scala)
[stress.process.err] 	at org.renaissance.scala.dotty.Dotty.$anonfun$run$3(Dotty.scala:118)
[stress.process.err] 	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
[stress.process.err] 	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
[stress.process.err] 	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
[stress.process.err] 	at org.renaissance.scala.dotty.Dotty.run(Dotty.scala:118)
[stress.process.err] 	at org.renaissance.harness.ExecutionDriver.executeOperation(ExecutionDriver.java:86)
[stress.process.err] 	at org.renaissance.harness.ExecutionDriver.executeBenchmark(ExecutionDriver.java:48)
[stress.process.err] 	at org.renaissance.harness.RenaissanceSuite$.$anonfun$runBenchmarks$1(RenaissanceSuite.scala:102)
[stress.process.err] 	at org.renaissance.harness.RenaissanceSuite$.$anonfun$runBenchmarks$1$adapted(RenaissanceSuite.scala:97)
[stress.process.err] 	at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)
[stress.process.err] 	at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)
[stress.process.err] 	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)
[stress.process.err] 	at org.renaissance.harness.RenaissanceSuite$.runBenchmarks(RenaissanceSuite.scala:97)
[stress.process.err] 	at org.renaissance.harness.RenaissanceSuite$.main(RenaissanceSuite.scala:80)
[stress.process.err] 	at org.renaissance.harness.RenaissanceSuite.main(RenaissanceSuite.scala)
[stress.process.err] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
[stress.process.err] 	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
[stress.process.err] 	at org.renaissance.core.Launcher.launchHarnessClass(Launcher.java:37)
[stress.process.err] 	at org.renaissance.core.Launcher.main(Launcher.java:25)
[stress.process.err] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
[stress.process.err] 	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.RenaissanceStressModule.execute(RenaissanceStressModule.java:91)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1585)
[stress.process.err] 22/05/21 18:04:51 ERROR main: Harness failed with exception: java.lang.SecurityException: NoSystemExitSecurityManager: System.exit() is not allowed.
[stress.process.err] 	at applications.kitchensink.utils.NoSystemExitSecurityManager.checkExit(NoSystemExitSecurityManager.java:28)
[stress.process.err] 	at java.base/java.lang.Runtime.exit(Runtime.java:113)
[stress.process.err] 	at java.base/java.lang.System.exit(System.java:1906)
[stress.process.err] 	at scala.sys.package$.exit(package.scala:43)
[stress.process.err] 	at org.renaissance.harness.RenaissanceSuite$.runBenchmarks(RenaissanceSuite.scala:130)
[stress.process.err] 	at org.renaissance.harness.RenaissanceSuite$.main(RenaissanceSuite.scala:80)
[stress.process.err] 	at org.renaissance.harness.RenaissanceSuite.main(RenaissanceSuite.scala)
[stress.process.err] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
[stress.process.err] 	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
[stress.process.err] 	at org.renaissance.core.Launcher.launchHarnessClass(Launcher.java:37)
[stress.process.err] 	at org.renaissance.core.Launcher.main(Launcher.java:25)
[stress.process.err] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
[stress.process.err] 	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.RenaissanceStressModule.execute(RenaissanceStressModule.java:91)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1585)
[stress.process.err] 
[stress.process.err] --------------------------------------------------------------------------------
[stress.process.err] Iteration start: ThreadDumper at Sat May 21 18:04:51 GMT 2022
[stress.process.err] RenaissanceStressModule got uncaught exception in execute at Sat May 21 18:04:51 GMT 2022 (1653156291402)
[stress.process.err] java.lang.reflect.InvocationTargetException
[stress.process.err] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
[stress.process.err] 	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.RenaissanceStressModule.execute(RenaissanceStressModule.java:91)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1585)
[stress.process.err] Caused by: java.lang.SecurityException: NoSystemExitSecurityManager: System.exit() is not allowed.
[stress.process.err] 	at applications.kitchensink.utils.NoSystemExitSecurityManager.checkExit(NoSystemExitSecurityManager.java:28)
[stress.process.err] 	at java.base/java.lang.Runtime.exit(Runtime.java:113)
[stress.process.err] 	at java.base/java.lang.System.exit(System.java:1906)
[stress.process.err] 	at org.renaissance.core.Launcher.launchHarnessClass(Launcher.java:45)
[stress.process.err] 	at org.renaissance.core.Launcher.main(Launcher.java:25)
[stress.process.err] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
[stress.process.err] 	... 4 more
[stress.process.err] --------------------------------------------------------------------------------
[stress.process.err] Unexpected Exception in thread RenaissanceStressModule.
[stress.process.err] java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:112)
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1585)
[stress.process.err] Caused by: java.lang.reflect.InvocationTargetException
[stress.process.err] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
[stress.process.err] 	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.RenaissanceStressModule.execute(RenaissanceStressModule.java:91)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)
[stress.process.err] 	... 1 more
[stress.process.err] Caused by: java.lang.SecurityException: NoSystemExitSecurityManager: System.exit() is not allowed.
[stress.process.err] 	at applications.kitchensink.utils.NoSystemExitSecurityManager.checkExit(NoSystemExitSecurityManager.java:28)
[stress.process.err] 	at java.base/java.lang.Runtime.exit(Runtime.java:113)
[stress.process.err] 	at java.base/java.lang.System.exit(System.java:1906)
[stress.process.err] 	at org.renaissance.core.Launcher.launchHarnessClass(Launcher.java:45)
[stress.process.err] 	at org.renaissance.core.Launcher.main(Launcher.java:25)
[stress.process.err] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
[stress.process.err] 	... 4 more
[stress.process.err] May 21, 2022 6:04:51 PM org.renaissance.core.Launcher launchHarnessClass
[stress.process.err] SEVERE: Harness failed with exception: java.lang.SecurityException: NoSystemExitSecurityManager: System.exit() is not allowed.
[stress.process.err] 	at applications.kitchensink.utils.NoSystemExitSecurityManager.checkExit(NoSystemExitSecurityManager.java:28)
[stress.process.err] 	at java.base/java.lang.Runtime.exit(Runtime.java:113)
[stress.process.err] 	at java.base/java.lang.System.exit(System.java:1906)
[stress.process.err] 	at scala.sys.package$.exit(package.scala:43)
[stress.process.err] 	at org.renaissance.harness.RenaissanceSuite$.runBenchmarks(RenaissanceSuite.scala:130)
[stress.process.err] 	at org.renaissance.harness.RenaissanceSuite$.main(RenaissanceSuite.scala:80)
[stress.process.err] 	at org.renaissance.harness.RenaissanceSuite.main(RenaissanceSuite.scala)
[stress.process.err] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
[stress.process.err] 	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
[stress.process.err] 	at org.renaissance.core.Launcher.launchHarnessClass(Launcher.java:37)
[stress.process.err] 	at org.renaissance.core.Launcher.main(Launcher.java:25)
[stress.process.err] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
[stress.process.err] 	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.RenaissanceStressModule.execute(RenaissanceStressModule.java:91)
[stress.process.err] 	at applications.kitchensink.process.stress.modules.StressModule.run(StressModule.java:99)
[stress.process.err] 	at java.base/java.lang.Thread.run(Thread.java:1585)
[stress.process.err] 
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
	at java.base/java.util.Arrays$ArrayList.get(Arrays.java:4165)
	at applications.kitchensink.process.picker.modules.Toolkit$OSXToolkit.setMetrics(MonitorPickerModule.java:172)
	at applications.kitchensink.process.picker.modules.Toolkit.getSystemMetrics(MonitorPickerModule.java:123)
	at applications.kitchensink.process.picker.modules.MonitorPickerModule.execute(MonitorPickerModule.java:64)
	at applications.kitchensink.process.picker.modules.PickerModule.run(PickerModule.java:140)
	at java.base/java.lang.Thread.run(Thread.java:1585)",,,,,,,,,,JDK-8293297,JDK-8293296,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,,linux,os_x,,,,,"0|i2x78z:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-09-27 09:32;goetz;[11u-na, 17u-na]
Assumably change in Oracle-internal tests.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Periodic task thread uses period for method sampling events,JDK-8287113,5075363,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-05-20 14:56,2022-06-21 07:35,2023-10-01 09:56,2022-05-23 08:13,,,,,,,,,,,,19,hotspot,,0,datadog-interest,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"The period used by the native method sampling event should not determine the interval used by the ""JFR: Period tasks"" thread. Sampling is done by a separate thread in native. 

This leads to noise and larger recordings. ",,,,,,,,,,JDK-8288884,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x74b:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-05-21 08:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8824
Date: 2022-05-21 14:22:52 +0000;;;","2022-05-23 08:13;dukebot;Changeset: 8122466f
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-05-23 15:12:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8122466fbb8e3f3450131895551ec5b832845938
;;;","2022-05-25 08:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/414
Date: 2022-05-25 15:10:49 +0000;;;","2022-05-26 02:43;jbachorik;[17u] Fix Request

I would like to ask for approval to backport this fix to JDK 17u.
The fix addresses an obvious omission and is improving the resource usage when running with JFR.
The changes are very isolated and can be potentially affecting only the JFR ExecutionSample event.

The fix applies cleanly with no additional changes required.

The backport PR is opened as https://git.openjdk.java.net/jdk17u-dev/pull/414;;;","2022-05-26 05:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1110
Date: 2022-05-26 12:41:34 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Distrust.java failed with CertificateExpiredException,JDK-8287109,5075359,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rhalade,ccheung,ccheung,2022-05-20 14:01,2023-07-31 20:30,2023-10-01 09:56,2022-05-23 13:34,11,17,19,8,,,,,,,,19,security-libs,,0,CPU22_07-critical-approved,CPU22_07-critical-SQE-OK,jdk11u-critical-request,jdk11u-critical-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-critical-request,jdk17u-critical-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,"java.lang.Exception: Unexpected exception: java.security.cert.CertificateExpiredException: NotAfter: Fri May 20 15:42:02 UTC 2022
	at Distrust.testTM(Distrust.java:193)
	at Distrust.main(Distrust.java:139)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)",,,,,,,,,,JDK-8287212,JDK-8287213,JDK-8287211,JDK-8287575,JDK-8287595,JDK-8287210,JDK-8287570,JDK-8287571,JDK-8287214,JDK-8288310,JDK-8288089,JDK-8288031,JDK-8288090,JDK-8288030,JDK-8288464,JDK-8302054,JDK-8304906,JDK-8288462,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277247,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x73f:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-05-20 17:01;rhalade;""CN=GeoTrust SSL CA - G3, O=GeoTrust Inc., C=US"" certificate inside geotrustglobalca-chain.pem expired on ""Fri May 20 14:36:50 PDT 2022"".;;;","2022-05-20 17:08;rhalade;Checked other certificates in test. Another expired certificate is ""Owner: CN=GeoTrust Global CA, O=GeoTrust Inc., C=US"" inside appleistca2g1-chain.pem chain, expiry Fri May 20 21:00:00 PDT 2022.;;;","2022-05-20 17:13;rhalade;Per JDK-8277247, we have not removed ""GeoTrust Global CA"" expired CA as code signing certificates are issued from it.;;;","2022-05-20 17:16;rhalade;""GeoTrust SSL CA - G3"" is intermedicate CA issued from ""GeoTrust Global CA"".;;;","2022-05-23 13:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8856
Date: 2022-05-23 20:14:37 +0000;;;","2022-05-23 13:34;dukebot;Changeset: 5b7d066c
Author:    Rajan Halade <rhalade@openjdk.org>
Date:      2022-05-23 20:32:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5b7d066ca5cb68e07a704d3ce13283761c1cf3ad
;;;","2022-06-07 02:33;goetz;Critical fix request [11u/17u]

I backport this for parity with 11.0.16/17.0.4-oracle.
As Oracle decided this late to bring this to 11.0.16/17.0.4, I want to go along.
Especially as there is no risk, it is only a test change.
Clean backport.
Test passes.  SAP nightly testing passed.
;;;","2022-06-07 02:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u/pull/345
Date: 2022-06-07 09:32:29 +0000;;;","2022-06-07 02:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u/pull/45
Date: 2022-06-07 09:37:47 +0000;;;","2022-06-08 07:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/357
Date: 2022-06-08 14:27:13 +0000;;;","2022-06-08 07:42;yan;Fix request (13u, 15u)

backporting this change to be on par with all major releases.
A hunk with ProblemList is not needed, the rest is clean.;;;","2022-06-08 07:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/217
Date: 2022-06-08 14:36:59 +0000;;;","2023-01-31 20:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/258
Date: 2023-02-01 04:08:16 +0000;;;","2023-01-31 20:39;aoqi;Fix request [8u]

I request the backport for parity with Oracle JDK 8. The update of ProblemList is not needed, the rest is clean (with path adjustment). This backport is only a test change, so the risk is low. The backport fixes the test failure. Reviewed by Severin Gehwolf.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CgroupSubsystemFactory.setCgroupV2Path asserts with freezer controller,JDK-8287107,5075357,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,mseledtsov,mseledtsov,2022-05-20 13:50,2023-02-21 00:21,2023-10-01 09:56,2022-05-25 21:19,17,19,,,,,,,,,,19,hotspot,,0,cgroupsv2,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,redhat-interest,,,,,,,,,,,,"A number of tests fail with Assertion Error on Ubuntu 22.04 (which uses cgroups v2 by default), in the HotSpot cgroups code. This occurs in a specific configuration where the host has mixed cgroup configuration similar to:
-------------
cat /proc/self/cgroup
1:freezer:/
0::/user.slice/user-1001.slice/session-85.scope
-------------

(See comments below for setting up such an environment).

Reproducible: always (or almost always)
Tests that fail: a variety of tests in tier1 (details below)
Failure type: Assertion

---------------- sample call stack
Caused by: java.lang.AssertionError
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.setCgroupV2Path(CgroupSubsystemFactory.java:226)
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.lambda$determineType$1(CgroupSubsystemFactory.java:195)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1921)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.determineType(CgroupSubsystemFactory.java:200)
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.create(CgroupSubsystemFactory.java:84)
	at java.base/jdk.internal.platform.CgroupMetrics.getInstance(CgroupMetrics.java:177)
	at java.base/jdk.internal.platform.SystemMetrics.instance(SystemMetrics.java:29)
	at java.base/jdk.internal.platform.Metrics.systemMetrics(Metrics.java:58)
	at java.base/jdk.internal.platform.Container.metrics(Container.java:43)
	at jdk.management/com.sun.management.internal.OperatingSystemImpl.<init>(OperatingSystemImpl.java:183)
	at jdk.management/com.sun.management.internal.PlatformMBeanProviderImpl.getOperatingSystemMXBean(PlatformMBeanProviderImpl.java:280)
...

==========================================
Simple reproducer:

$ cat ManagementFactoryTest.java
public class ManagementFactoryTest {
    public static void main(String args[]) {
        System.out.println(java.lang.management.ManagementFactory.getOperatingSystemMXBean());
    }
}

$ ./jdk/bin/java -esa ManagementFactoryTest.java
 ",,,,,,,,,,JDK-8288100,JDK-8302718,JDK-8292963,JDK-8302957,JDK-8299117,JDK-8301362,JDK-8287999,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299004,JDK-8301754,,,,JDK-8299004,JDK-8298254,,,,,,JDK-8287741,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux_ubuntu,,,,,,"0|i2x72z:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-22 11:00;iklam;Here's a simple reproducer:

$ cat /proc/self/cgroup
1:freezer:/
0::/user.slice/user-1001.slice/session-85.scope

$ cat ManagementFactoryTest.java
public class ManagementFactoryTest {
    public static void main(String args[]) {
        System.out.println(java.lang.management.ManagementFactory.getOperatingSystemMXBean());
    }
}

$ ./jdk/bin/java -esa ManagementFactoryTest.java
Exception in thread ""main"" java.lang.AssertionError
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.setCgroupV2Path(CgroupSubsystemFactory.java:226)
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.lambda$determineType$1(CgroupSubsystemFactory.java:195)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1921)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.determineType(CgroupSubsystemFactory.java:200)
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.create(CgroupSubsystemFactory.java:84)
	at java.base/jdk.internal.platform.CgroupMetrics.getInstance(CgroupMetrics.java:177)
	at java.base/jdk.internal.platform.SystemMetrics.instance(SystemMetrics.java:29)
	at java.base/jdk.internal.platform.Metrics.systemMetrics(Metrics.java:58)
	at java.base/jdk.internal.platform.Container.metrics(Container.java:43)
	at jdk.management/com.sun.management.internal.OperatingSystemImpl.<init>(OperatingSystemImpl.java:183)
	at jdk.management/com.sun.management.internal.PlatformMBeanProviderImpl.getOperatingSystemMXBean(PlatformMBeanProviderImpl.java:280)
	at jdk.management/com.sun.management.internal.PlatformMBeanProviderImpl$3.nameToMBeanMap(PlatformMBeanProviderImpl.java:199)
	at java.management/sun.management.spi.PlatformMBeanProvider$PlatformComponent.getMBeans(PlatformMBeanProvider.java:195)
	at java.management/java.lang.management.ManagementFactory.getPlatformMXBean(ManagementFactory.java:690)
	at java.management/java.lang.management.ManagementFactory.getOperatingSystemMXBean(ManagementFactory.java:390)
	at ManagementFactoryTest.main(ManagementFactoryTest.java:3);;;","2022-05-22 11:02;iklam;A JDK patch to show what's going on (on top of https://github.com/openjdk/jdk/commit/a31130fd4056907edcb420761722c629a33273eb)

diff --git a/src/java.base/linux/classes/jdk/internal/platform/CgroupSubsystemFactory.java b/src/java.base/linux/classes/jdk/internal/platform/CgroupSubsystemFactory.java
index a97328dee75..26c46feec92 100644
--- a/src/java.base/linux/classes/jdk/internal/platform/CgroupSubsystemFactory.java
+++ b/src/java.base/linux/classes/jdk/internal/platform/CgroupSubsystemFactory.java
@@ -220,9 +220,18 @@ public class CgroupSubsystemFactory {
      */
     private static void setCgroupV2Path(Map<String, CgroupInfo> infos,
                                         String[] tokens) {
+        System.out.print(""========================================\ntokens[] = "");
+        for (String s : tokens) {
+            System.out.print("" "" + s);
+        }
+        System.out.println();
         int hierarchyId = Integer.parseInt(tokens[0]);
         String cgroupPath = tokens[2];
         for (CgroupInfo info: infos.values()) {
+            System.out.println(""info = "" + info);
+            System.out.println(""   hierarchyId = "" + hierarchyId);
+            System.out.println(""   info.getHierarchyId() = "" + info.getHierarchyId());
+            System.out.println(""   cgroupPath = "" + cgroupPath);
             assert hierarchyId == info.getHierarchyId() && hierarchyId == 0;
             info.setCgroupPath(cgroupPath);
         }


$ ./jdk/bin/java -esa ManagementFactoryTest.java
========================================tokens[] =  1 freezer /
info = jdk.internal.platform.CgroupInfo@145f66e3
   hierarchyId = 1
   info.getHierarchyId() = 0
   cgroupPath = /
Exception in thread ""main"" java.lang.AssertionError
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.setCgroupV2Path(CgroupSubsystemFactory.java:235)
        [....]


;;;","2022-05-22 11:07;iklam;JDK 17:
$ ./jdk-17/bin/java -showversion -esa ManagementFactoryTest.java
java version ""17"" 2021-09-14 LTS
Java(TM) SE Runtime Environment (build 17+35-LTS-2724)
Java HotSpot(TM) 64-Bit Server VM (build 17+35-LTS-2724, mixed mode, sharing)
Exception in thread ""main"" java.lang.AssertionError
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.setCgroupV2Path(CgroupSubsystemFactory.java:225)
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.lambda$determineType$1(CgroupSubsystemFactory.java:195)
        ...;;;","2022-05-22 23:28;iklam;One workaround is to disable cgroupv2 by adding ""systemd.unified_cgroup_hierarchy=0"" to the kernel command line:

[1] Edit /etc/default/grub
-GRUB_CMDLINE_LINUX_DEFAULT=""quiet splash""
+GRUB_CMDLINE_LINUX_DEFAULT=""quiet splash systemd.unified_cgroup_hierarchy=0""
[2] sudo update-grub
[3] Reboot

# You should see something like this:
$ cat /proc/self/cgroup 
13:memory:/user.slice/user-1000.slice/session-141.scope
12:pids:/user.slice/user-1000.slice/session-141.scope
11:freezer:/
10:blkio:/
9:misc:/
8:cpuset:/
7:hugetlb:/
6:net_cls,net_prio:/
5:perf_event:/
4:devices:/user.slice
3:cpu,cpuacct:/
2:rdma:/
1:name=systemd:/user.slice/user-1000.slice/session-141.scope
0::/user.slice/user-1000.slice/session-141.scope

# I tried the following *without* mesos, but the JVM seems to be
# able to handle this situation. [~mseledtsov] could you try with mesos?

$ ./jdk-19/bin/java -showversion -esa ManagementFactoryTest.java  
java version ""19-ea"" 2022-09-20
Java(TM) SE Runtime Environment (build 19-ea+23-1706)
Java HotSpot(TM) 64-Bit Server VM (build 19-ea+23-1706, mixed mode, sharing)
com.sun.management.internal.OperatingSystemImpl@5f71c76a

;;;","2022-05-23 11:30;mseledtsov;I also had to add this to /etc/default/grub for cgroups v1 setup to take effect:
GRUB_CMDLINE_LINUX=""systemd.unified_cgroup_hierarchy=0"";;;","2022-05-23 11:31;mseledtsov;After reboot, I can see both hierarchy types: V2 and V1:

13:pids:/user.slice/user-1001.slice/session-1.scope
12:memory:/user.slice/user-1001.slice/session-1.scope
11:misc:/
...
3:net_cls,net_prio:/
2:rdma:/
1:name=systemd:/user.slice/user-1001.slice/session-1.scope
0::/user.slice/user-1001.slice/session-1.scope      // <<<------- V2
;;;","2022-05-23 12:15;iklam;To prepare a Ubuntu 22.04 to reproduce the bug:

[1] Start with a clean installation of Ubuntu 22.04 

[2] Verify you have only cgroupv2 installed:
$ cat /proc/self/cgroup
0::/user.slice/user-529964.slice/session-1685.scope
$ cat /proc/cgroups
#subsys_name	hierarchy	num_cgroups	enabled
cpuset	0	580	1
cpu	0	580	1
cpuacct	0	580	1
blkio	0	580	1
memory	0	580	1
devices	0	580	1
freezer	0	580	1
net_cls	0	580	1
perf_event	0	580	1
net_prio	0	580	1
hugetlb	0	580	1
pids	0	580	1
rdma	0	580	1
misc	0	580	1

[3] Run the following as root
$ mkdir /sys/fs/cgroup/freezer
$ mount -t cgroup -ofreezer freezer /sys/fs/cgroup/freezer

[4] Verify that freezer is mounted from cgroupv1:
$ cat /proc/self/cgroup
1:freezer:/
0::/user.slice/user-1000.slice/session-4.scope
$ cat /proc/cgroups
#subsys_name	hierarchy	num_cgroups	enabled
cpuset	0	168	1
cpu	0	168	1
cpuacct	0	168	1
blkio	0	168	1
memory	0	168	1
devices	0	168	1
freezer	1	1	1
net_cls	0	168	1
perf_event	0	168	1
net_prio	0	168	1
hugetlb	0	168	1
pids	0	168	1
rdma	0	168	1
misc	0	168	1;;;","2022-05-23 15:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8858
Date: 2022-05-23 22:11:47 +0000;;;","2022-05-25 21:19;dukebot;Changeset: 704b9a66
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-05-26 04:16:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/704b9a66bba0dc8adb62be80fd62864b9c687c3f
;;;","2022-06-08 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/443
Date: 2022-06-08 12:35:03 +0000;;;","2022-06-08 07:06;sgehwolf;Fix Request (OpenJDK 17u):

This issue is present in 17u codeline too and can have the effect of using a wrong cgroup path which yields to wrong cpu/memory sizing of the JDK when run in a container. Risk should be low as it's a Linux-only change and should be fully backwards compatible. Container tests didn't show any issues with this. I'll push this together with the follow-up fix JDK-8287741 (if approved).;;;","2022-08-24 10:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1340
Date: 2022-08-24 17:37:09 +0000;;;","2022-08-25 10:31;sgehwolf;Fix Request (OpenJDK 11u):

This issue is present in 11u codeline too and can have the effect of using a wrong cgroup path which yields to wrong cpu/memory sizing of the JDK when run in a container. Risk should be low as it's a Linux-only change and should be fully backwards compatible. Container tests didn't show any issues with this. I'll push this together with the follow-up fix JDK-8287741 (if approved).;;;","2022-12-20 10:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/218
Date: 2022-12-20 18:01:35 +0000;;;","2023-01-27 01:42;sgehwolf;Fix Request (OpenJDK 8u):

This issue is present in 8u-dev codeline (8u372) too and can have the effect of using a wrong cgroup path which yields to wrong cpu/memory sizing of the JDK when run in a container. Risk should be low as it's a Linux-only change and should be fully backwards compatible. Container tests didn't show any issues with this. I'll push this together with the follow-up fix JDK-8287741 (if approved). Patch wasn't clean. Only minor differences/conflicts in tests where adjusted so that they work with 8u code base. Reviewed by Paul Hohensee.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AddressChangeListener thread inherits CCL and can cause memory leak for webapp-servers,JDK-8287104,5075261,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,webbuggrp,webbuggrp,2022-05-19 07:40,2022-05-25 23:16,2023-10-01 09:56,2022-05-25 07:37,11,17,18,19,8,,,,,,,19,core-libs,,0,additional-information-received,dcsaw,noreg-hard,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Java 17
Windows 2019 and Win 10 (but should be independent of OS)

A DESCRIPTION OF THE PROBLEM :
We are using Tomcat 10 with Java 17 and when redeploying our web-application, a memory leak is reported.

Cause:
The class sun.net.dns.ResolverConfigurationImpl spawns a threads of the internal class AddressChangeListener.
This thread is connected to the classloader of the web-application.
During undeployment the classloader is removed by tomcat and should be garbage collected. The spawned thread however still has a reference to the web-app classloader and thus won't get garbage-collected

Tomcat issues a warning on undeployment:
WARNING: The web application [test] appears to have started a thread named [Thread-3] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 sun.net.dns.ResolverConfigurationImpl.notifyAddrChange0(Native Method)
 sun.net.dns.ResolverConfigurationImpl$AddressChangeListener.run(ResolverConfigurationImpl.java:144)
...
A very similar bug was fixed recently: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8273831 
The solution should also work for this problem. The setContextClassLoader was called to remove the reference to the web-app-classloader.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Insert the followint lines into a web-application, call the jsp and then undeploy the app / war-file:
    Hashtable<String, String> env = new Hashtable();
    env.put( ""java.naming.factory.initial"", ""com.sun.jndi.dns.DnsContextFactory"" );
    DirContext dns = new InitialDirContext( env );

These 3 lines will trigger the creation of the AddressChangeListener-Thread.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The thread should run without a reference to the web-app classloader.
ACTUAL -
The spawned thread holds a reference to the web-app-classloader (as the context-classloader)

CUSTOMER SUBMITTED WORKAROUND :
A possible workaround is to change the context-classloader before doing DNS-stuff:
Classloader cl = Thread.currentThread().getContextClassLoader();
Thread.currentThread().setContextClassLoader(cl.getParent());
// do dns stuff and then set old classloader

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-20 12:05;tongwan;AddrListenerTest.java;https://bugs.openjdk.org/secure/attachment/99034/AddrListenerTest.java",,,,,,,,,,generic,,,,,,,,,,windows,,,,,,"0|i2x6hn:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-05-19 21:11;tongwan;Requested a minimal reproducible testcase to reproduce the issue, like https://bugs.openjdk.java.net/browse/JDK-8273831?focusedCommentId=14450701&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14450701 from the submitter.;;;","2022-05-20 11:40;tongwan;Additional information from the submitter:
A sample class, which triggers the AddressChangeListener Thread is:

package test.com

import java.util.Hashtable;

import javax.naming.NamingException;
import javax.naming.directory.DirContext;
import javax.naming.directory.InitialDirContext;

public class AddrListenerTest
{
    public static void main(String[] args) throws NamingException
    {
        Hashtable<String, String> env = new Hashtable<String, String>();
        env.put( ""java.naming.factory.initial"", ""com.sun.jndi.dns.DnsContextFactory"" );
        DirContext dns = new InitialDirContext( env );
    }
}

The problem with the memory leak is only relevant for web-applications.
This jsp triggers the AddressChangeListener Thread:

<%@ page import=""java.util.*"" %>
<%@ page import=""javax.naming.*"" %>
<%@ page import=""javax.naming.directory.*"" %>

<%
        Hashtable<String, String> env = new Hashtable<String, String>();
        env.put( ""java.naming.factory.initial"", ""com.sun.jndi.dns.DnsContextFactory"" );
        DirContext dns = new InitialDirContext( env );
%>

If this jsp is deployed via a web-application and called via Browser, the Thread is spawned.
Undeploying the web-application should free thee corresponding classloader but the AddressChangeListener is still holding a reference
to the classloader of the web-application (via the ContextClassloader-field of the thread)
;;;","2022-05-20 12:07;tongwan;The observations on Windows 10:
JDK 8: Failed,  AddressChangeListener spawned.
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+19: Failed.;;;","2022-05-20 22:34;alanb;AddressChangeListener can use InnocuousThread.;;;","2022-05-21 00:46;jpai;Looking at the code in question, the AddressChangeListener thread class is only available/created in the Windows implementation of ResolverConfigurationImpl. I changed the affected OS of this issue accordingly.;;;","2022-05-22 01:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8827
Date: 2022-05-22 08:20:21 +0000;;;","2022-05-25 07:37;dukebot;Changeset: 81d7eafd
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-05-25 14:32:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/81d7eafd913d28e0c83ddb29f9436b207da5f21c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/lang/management/ThreadMXBean/VirtualThreadDeadlocks.java fails with Xcomp,JDK-8287103,5075353,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-05-20 11:10,2022-05-25 23:11,2023-10-01 09:56,2022-05-23 07:52,19,,,,,,,,,,,19,core-svc,,0,,,,,,,,,,,,,,,,,,,,,"Test
java/lang/management/ThreadMXBean/VirtualThreadDeadlocks.java
fails with Xcomp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x723:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-05-20 15:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8821
Date: 2022-05-20 22:27:29 +0000;;;","2022-05-23 07:52;dukebot;Changeset: 110d9064
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-05-23 14:49:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/110d906432761482acd2899be1314e075bc21bec
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ImageReaderSpi.canDecodeInput() for standard plugins should return false if a stream is too short,JDK-8287102,5075352,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2022-05-20 10:59,2022-06-09 22:22,2023-10-01 09:56,2022-06-03 14:20,11,17,19,8,,,,,,,,19,client-libs,,0,,,,,,,,,,,,,,,,,,,,,"Currently most of the built-in standard javax.imageio plugins throw an IOException from
ImageReaderSpi.canDecodeInput(Object) if it is an ImageInputStream and the available bytes
are fewer than the plugin needs to identify the image type.

It has been proposed that in this case they should return false instead as a matter of
quality of implementation.

See discussion thread here : https://mail.openjdk.java.net/pipermail/client-libs-dev/2022-May/004428.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x71v:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@377c353d,,,,,,,,,"2022-05-22 10:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8700
Date: 2022-05-13 12:23:24 +0000;;;","2022-06-03 14:19;dukebot;Changeset: a7e07fdb
Author:    Martin Desruisseaux <martin.desruisseaux@geomatys.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-06-03 21:16:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a7e07fdbc104f668a03d88330e30dbaeb7b43719
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS should check for file truncation for all regions,JDK-8287101,5075351,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,ccheung,ccheung,2022-05-20 10:48,2022-06-09 22:26,2023-10-01 09:56,2022-06-06 14:57,19,,,,,,,,,,,19,hotspot,,0,cds,,,,,,,,,,,,,,,,,,,,"CDS checks for file truncation with this in filemap.cpp: 
  if (is_static()) { 
    // just checking the last region is sufficient since the archive is written 
    // in sequential order 
    size_t len = os::lseek(fd, 0, SEEK_END); 
    FileMapRegion* si = space_at(MetaspaceShared::last_valid_region); 
    // The last space might be empty 
    if (si->file_offset() > len || len - si->file_offset() < si->used()) { 
      fail_continue(""The shared archive file has been truncated.""); 
      return false; 
    } 
  } 

but when -XX:+UseSerialGC is used, the last_valid_region is empty so si->file_offset() == 0 and we didn't detect truncation. We should check all the regions instead. Also, this should be done for dynamic archive as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286978,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x71n:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-30 23:06;iklam;This is the underlying cause of the crash in  JDK-8286978;;;","2022-06-02 13:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9004
Date: 2022-06-02 20:41:15 +0000;;;","2022-06-06 14:57;dukebot;Changeset: 124ba45f
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-06-06 21:56:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/124ba45fb83985676136ecb3c55a781382fdbfd7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[spec] Clean up terminology regarding doc comment descriptions.,JDK-8287100,5075349,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-05-20 10:21,2023-01-26 09:25,2023-10-01 09:56,2022-05-20 13:50,,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"javadoc and doclint are inconsistent in their use of the term ""description"", as regards to parts of a documentation comment. This can be confusing. We should define such terms and use them consistently.

It would help to reorganize the ""General Syntax"" section of the Doc Comment Spec, to better define the parts of a doc comment, including the introduction of a paragraph defining ""Main Description"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287099,,,,,,JDK-8301181,,,,,,,JDK-8285368,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x717:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-05-20 13:43;prappo;This cleanup is triggered by JDK-8285368.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clean up terminology regarding doc comment descriptions.,JDK-8287099,5075348,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,jjg,jjg,2022-05-20 10:19,2022-05-25 23:11,2023-10-01 09:56,2022-05-21 01:49,,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"javadoc and doclint are inconsistent in their use of the term ""description"", as regards to parts of a documentation comment. This can be confusing. We should define such terms and use them consistently.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287100,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x70z:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-05-20 13:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8818
Date: 2022-05-20 20:55:02 +0000;;;","2022-05-21 01:49;dukebot;Changeset: 7c086475
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-05-21 08:48:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7c0864752aa6301ec5a2123a5a96eb71bc0a83af
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Files::copy requires an undocumented permission when copying from the default file system to a non-default file system,JDK-8287097,5075343,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,bpb,chegar,chegar,2022-05-20 08:35,2022-08-17 13:00,2023-10-01 09:56,2022-06-02 10:40,19,,,,,,,,,,,19,core-libs,,0,regression,,,,,,,,,,,,,,,,,,,,"Files::copy requires an undocumented permission when copying from the default file system to a non-default file system. This is a change in behaviour from JDK 18 to JDK 19-ea, introduced by JDK-8267820.

Example reproducer:

$ cat FileCopyToZip.java 
import java.io.*;
import java.nio.file.*;
import java.util.*;

public class FileCopyToZip {

    public static void main(String... args) throws IOException {
        Path source = Path.of(args[0]);
        Path zip = Path.of(""out.zip"");
        Map<String,String> env = Map.of(""create"", String.valueOf(Files.notExists(zip)));
        
        try (FileSystem fileSystem = FileSystems.newFileSystem(zip, env, FileCopyToZip.class.getClassLoader())) {
            Path p = fileSystem.getPath(source.getFileName().toString());
            Files.copy(source, p);
        }
    }
}

$ /Users/chegar/binaries/jdk-18.jdk/Contents/Home/bin/javac FileCopyToZip.java 

$ cat java.policy 
grant {
    permission java.io.FilePermission ""<<ALL FILES>>"", ""read,write"";
};

$ /Users/chegar/binaries/jdk-18.jdk/Contents/Home/bin/java -Djava.security.manager  -Djava.security.policy=java.policy FileCopyToZip FileCopyToZip.class 
WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a future release


$ /Users/chegar/binaries/jdk-19.jdk/Contents/Home/bin/java -Djava.security.manager  -Djava.security.policy=java.policy FileCopyToZip FileCopyToZip.class
WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a future release
Exception in thread ""main"" java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""accessUserInformation"")
	at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:485)
	at java.base/java.security.AccessController.checkPermission(AccessController.java:1068)
	at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:411)
	at java.base/sun.nio.fs.UnixFileAttributeViews$Posix.checkReadExtended(UnixFileAttributeViews.java:186)
	at java.base/sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:253)
	at java.base/sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:168)
	at java.base/sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:148)
	at java.base/java.nio.file.Files.readAttributes(Files.java:1851)
	at java.base/java.nio.file.CopyMoveHelper.copyToForeignTarget(CopyMoveHelper.java:114)
	at java.base/java.nio.file.Files.copy(Files.java:1308)
	at FileCopyToZip.main(FileCopyToZip.java:14)
 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267820,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,"0|i2x6zv:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2022-05-20 09:06;alanb;Files.copy specifies the permissions that are checked when copying to/from the default file system. When copying to or from a custom file system then it would be possible to document the permissions that are required when the source file is in the default file system or the target is in the file system. It wouldn't be complete in that the access to the custom file system may require additional permissions but it could at least specify ""at least"". In the case of the POSIX file permissions then it is important that accessUserPermission is checked when copying to a custom file system. There are a number of choice here but it could be possible to skip/ignore copying POSIX file permissions when reading them from the default file system is denied. That would be compatible with long standing behavior but it may be surprising to have the security manager execution mode behave different to when not running with a security manager.;;;","2022-05-22 06:51;chegar;Note, this is affecting (propagating through) ModuleFinder, when the given paths are from a non-default file system. For example:

  at java.base/sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:253)	
        at java.base/sun.nio.fs.UnixFileAttributeViews$Posix.readAttributes(UnixFileAttributeViews.java:168)	
        at java.base/sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:148)	
        at java.base/sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)	
        at org.apache.lucene.tests.mockfile.FilterFileSystemProvider.readAttributes(FilterFileSystemProvider.java:176)	
        at org.apache.lucene.tests.mockfile.FilterFileSystemProvider.readAttributes(FilterFileSystemProvider.java:176)	
        at org.apache.lucene.tests.mockfile.FilterFileSystemProvider.readAttributes(FilterFileSystemProvider.java:176)	
        at org.apache.lucene.tests.mockfile.FilterFileSystemProvider.readAttributes(FilterFileSystemProvider.java:176)	
        at org.apache.lucene.tests.mockfile.FilterFileSystemProvider.readAttributes(FilterFileSystemProvider.java:176)	
        at java.base/java.nio.file.Files.readAttributes(Files.java:1851)	
        at java.base/java.nio.file.CopyMoveHelper.copyToForeignTarget(CopyMoveHelper.java:114)	
        at java.base/java.nio.file.Files.copy(Files.java:1308)	
        at java.base/jdk.internal.module.ModulePath.readModule(ModulePath.java:336)	
        at java.base/jdk.internal.module.ModulePath.scan(ModulePath.java:237)	
        at java.base/jdk.internal.module.ModulePath.scanNextEntry(ModulePath.java:190)	
        at java.base/jdk.internal.module.ModulePath.find(ModulePath.java:154)	
        at org.elasticsearch.module.BasicServerModuleTests.getServerDescriptor(BasicServerModuleTests.java:65)	
        at org.elasticsearch.module.BasicServerModuleTests.testEnsureNoUnqualifiedOpens(BasicServerModuleTests.java:50);;;","2022-05-26 14:49;bpb;[~chegar] The reproducer failed for me when attempting to create the ZipFilesystem instance unless this permission was added to the policy file:

    permission java.lang.RuntimePermission ""fileSystemProvider"";

How was it able to run in your environment?;;;","2022-05-27 04:23;chegar;Thanks for looking at this Brian.

I did cut'n'paste the exact set of commands that I ran, and output produced, when putting together the reproducer. I ran against an EA of JDK 19, and since the zip filesystem provider is an ""installed"" provider, the fileSystemProvider permission should not be required by user code.

Not sure why it is different for you, but here is one theory - did you run against an exploded build? For example:

$ /Users/chegar/git/jdk/build/macosx-aarch64-server-release/jdk/bin/java -Djava.security.manager  -Djava.security.policy=java.policy FileCopyToZip FileCopyToZip.class
WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a future release
Exception in thread ""main"" java.util.ServiceConfigurationError: java.nio.file.spi.FileSystemProvider: Provider jdk.nio.zipfs.ZipFileSystemProvider could not be instantiated
	at java.base/java.util.ServiceLoader.fail(ServiceLoader.java:586)
	at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:813)
	at java.base/java.util.ServiceLoader$ProviderImpl.get(ServiceLoader.java:729)
	at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1403)
	at java.base/java.nio.file.spi.FileSystemProvider.loadInstalledProviders(FileSystemProvider.java:156)
	at java.base/java.nio.file.spi.FileSystemProvider$1.run(FileSystemProvider.java:207)
	at java.base/java.nio.file.spi.FileSystemProvider$1.run(FileSystemProvider.java:204)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
	at java.base/java.nio.file.spi.FileSystemProvider.installedProviders(FileSystemProvider.java:204)
	at java.base/java.nio.file.FileSystems.newFileSystem(FileSystems.java:526)
	at FileCopyToZip.main(FileCopyToZip.java:12)
Caused by: java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""fileSystemProvider"")
	at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:485)
	at java.base/java.security.AccessController.checkPermission(AccessController.java:1068)
	at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:411)
	at java.base/java.nio.file.spi.FileSystemProvider.checkPermission(FileSystemProvider.java:127)
	at java.base/java.nio.file.spi.FileSystemProvider.<init>(FileSystemProvider.java:145)
	at jdk.zipfs/jdk.nio.zipfs.ZipFileSystemProvider.<init>(ZipFileSystemProvider.java:57)
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:484)
	at java.base/java.util.ServiceLoader$ProviderImpl$2.run(ServiceLoader.java:797)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/java.util.ServiceLoader$ProviderImpl.newInstance(ServiceLoader.java:802)
	... 9 more

I think that there is an orthogonal, preexisting, issue / limitation here with the exploded build.

;;;","2022-05-27 08:36;bpb;That was it, Chris, using the exploded build. I should know better. Thanks.;;;","2022-05-31 17:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8963
Date: 2022-06-01 00:27:26 +0000;;;","2022-06-02 10:40;dukebot;Changeset: 13596cdf
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-02 17:36:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/13596cdf695e67819aadcc08c6d9f05b1eb18442
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
aarch64 : guarantee(val < (1ULL << nbits)) failed: Field too big for insn,JDK-8287091,5075338,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,aph,mbaesken,mbaesken,2022-05-20 06:27,2022-10-12 02:43,2023-10-01 09:56,2022-05-25 00:28,11,17.0.5-oracle,19,,,,,,,,,19,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-19,regression,,,,,,,,,,,,,"Since ~ 11th May / 12th May,  our JCK19 simple API suite  tests crash on Linux aarch64 . They run into the following guarantee .
Issue can be seen in the opt / product build results (seems Darwin aarch64 has similar issues); fastdebug shows an assertion instead.

Suite is executed with -Xcomp -Xbatch -XX:ReservedCodeCacheSize=512M -XX:-TieredCompilation , this has most likely an influence on the issue.
We run into the guarantee in  test  api/java_time/test/java/time/TestInstant.html  (see Current CompileTask:  output)


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (assembler_aarch64.hpp:251), pid=1910, tid=2068
#  guarantee(val < (1ULL << nbits)) failed: Field too big for insn
#
# JRE version: OpenJDK Runtime Environment (19.0) (build 19-internal-adhoc..jdk-dev)
# Java VM: OpenJDK 64-Bit Server VM (19-internal-adhoc..jdk-dev, compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xb06f14]  Instruction_aarch64::f(unsigned int, int, int) [clone .isra.29]+0x5c
#
# Core dump will be written. Default location: /output_openjdk19_dev_optU_linuxaarch64/jck_simple_api_c2_work/core
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Djava.awt.headless=true -Xms128m -Xmx288m -XX:MaxJavaStackTraceDepth=512 -Xverify:all -XX:NativeMemoryTracking=summary -XX:+UnlockDiagnosticVMOptions -XX:+PrintNMTStatistics -Xverify:all --enable-preview -Djdk.includeInExceptions=hostInfo,jar -Djdk.xml.xpathExprGrpLimit=20 -Dsun.net.maxDatagramSockets=50 -Xss4M -Xcomp -Xbatch -XX:ReservedCodeCacheSize=512M -XX:-TieredCompilation -XX:+PrintCodeCache -Djdk.xml.maxXMLNameLimit=4000 -Djava.net.preferIPv4Stack=true -Djava.security.auth.policy=/jck/jck19/JCK-runtime-19/lib/jck.auth.policy -Djava.security.auth.login.config=/jck/jck19/JCK-runtime-19/lib/jck.auth.login.config -Djava.security.policy=/jck/jck19/JCK-runtime-19/lib/jck.policy -Djava.io.tmpdir=/output_openjdk19_dev_optU_linuxaarch64/jck_simple_api_c2_work/tempdir -Djavatest.security.allowPropertiesAccess=true -Djava.util.prefs.userRoot=/priv/jvmtests/output_openjdk19_dev_optU_linuxaarch64/jck_simple_api_c2_work/tempdir -Djava.util.prefs.systemRoot=/output_openjdk19_dev_optU_linuxaarch64/jck_simple_api_c2_work/tempdir -Djava.rmi.activation.port=6284 com.sun.javatest.agent.AgentMain -active -activeHost localhost -activePort 6584

Host: AArch64, 8 cores, 62G, Ubuntu 18.04.5 LTS
Time: Thu May 19 21:59:55 2022 CEST elapsed time: 6485.271405 seconds (0d 1h 48m 5s)

---------------  T H R E A D  ---------------

Current thread (0x0000ffff8c246190):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=2068, stack(0x0000ffff601cb000,0x0000ffff603cb000)]


Current CompileTask:
C2:6485271 134927    b        test.java.time.TestInstant::test_millisUntil (47 bytes)

Stack: [0x0000ffff601cb000,0x0000ffff603cb000],  sp=0x0000ffff603c6380,  free space=2028k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xb06f14]  Instruction_aarch64::f(unsigned int, int, int) [clone .isra.29]+0x5c
V  [libjvm.so+0xb09238]  MacroAssembler::mov_immediate64(RegisterImpl const*, unsigned long)+0x1f0
V  [libjvm.so+0xb0ce28]  MacroAssembler::wrap_adds_subs_imm_insn(RegisterImpl const*, RegisterImpl const*, unsigned long, void (MacroAssembler::*)(RegisterImpl const*, RegisterImpl const*, unsigned int), void (MacroAssembler::*)(RegisterImpl const*, RegisterImpl const*, RegisterImpl const*, Assembler::shift_kind, unsigned int), bool)+0xa0
V  [libjvm.so+0x3534d0]  overflowAddL_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0xc8
V  [libjvm.so+0xc20ef8]  PhaseOutput::scratch_emit_size(Node const*)+0x1a0
V  [libjvm.so+0xc1d4fc]  PhaseOutput::shorten_branches(unsigned int*)+0x23c
V  [libjvm.so+0xc25898]  PhaseOutput::Output()+0x458
V  [libjvm.so+0x5e4014]  Compile::Code_Gen()+0x344
V  [libjvm.so+0x5e83cc]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xa24
V  [libjvm.so+0x5229ac]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xbc
V  [libjvm.so+0x5f05a0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x6e0
V  [libjvm.so+0x5f140c]  CompileBroker::compiler_thread_loop()+0x494
V  [libjvm.so+0xe704e4]  JavaThread::thread_main_inner()+0xbc
V  [libjvm.so+0xe75ebc]  Thread::call_run()+0x6c
V  [libjvm.so+0xc0ad04]  thread_native_entry(Thread*)+0xdc
C  [libpthread.so.0+0x7088]  start_thread+0xb0",,,,,,,,,,JDK-8295204,JDK-8289131,JDK-8288795,JDK-8291663,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285923,JDK-8286163,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,,,"0|i2x6yr:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-05-23 00:29;mbaesken;With fastdebug binaries we get a crash too in api/java_time/test/java/time/TestInstant.html (this time on mac aarch64).
But this time an assertion (porbably because it is fastdenug) with a bit different backtrace.
We again run with -Xcomp -Xbatch -XX:-TieredCompilation .

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/darwinaarch64/jdk/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp:2297), pid=51651, tid=41475
#  assert(Rd != zr) failed: overflow in immediate operand
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.openjdk.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.openjdk.jdk, compiled mode, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Core dump will be written. Default location: /cores/core.51651
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Djava.awt.headless=true -Xms128m -Xmx288m -XX:MaxJavaStackTraceDepth=512 -Xverify:all -XX:NativeMemoryTracking=summary -XX:+UnlockDiagnosticVMOptions -XX:+PrintNMTStatistics -Xverify:all 
-Djdk.includeInExceptions=hostInfo,jar -Djdk.xml.xpathExprGrpLimit=20 -Dsun.net.maxDatagramSockets=50 -Xss4M -Xcomp -Xbatch -XX:ReservedCodeCacheSize=512M -XX:-TieredCompilation -XX:+PrintCodeCache 
-Djdk.xml.maxXMLNameLimit=4000 -Djava.net.preferIPv4Stack=true -Djava.security.auth.policy=/jck/jck19/JCK-runtime-19/lib/jck.auth.policy -Djava.security.auth.login.config=/jck/jck19/JCK-runtime-19/lib/jck.auth.login.config 
-Djava.security.policy=/jck/jck19/JCK-runtime-19/lib/jck.policy -Djava.io.tmpdir=/output_openjdk19_stage_dbgU_darwinaarch64/jck_simple_api_c2_work/tempdir -Djavatest.security.allowPropertiesAccess=true 
-Djava.util.prefs.userRoot=/output_openjdk19_stage_dbgU_darwinaarch64/jck_simple_api_c2_work/tempdir -Djava.util.prefs.systemRoot=/output_openjdk19_stage_dbgU_darwinaarch64/jck_simple_api_c2_work/tempdir 
-Djava.rmi.activation.port=6286 com.sun.javatest.agent.AgentMain -active -activeHost localhost -activePort 6586

Host: mymac, ""Macmini9,1"" arm64, 8 cores, 16G, Darwin 20.6.0, macOS 11.6.1 (20G224)
Time: Mon May 23 04:52:11 2022 CEST elapsed time: 8263.794773 seconds (0d 2h 17m 43s)

---------------  T H R E A D  ---------------

Current thread (0x0000000131018810):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=41475, stack(0x000000016fd78000,0x000000016ff7b000)]


Current CompileTask:
C2:8263794 134913    b        test.java.time.TestInstant::test_millisUntil (47 bytes)

Stack: [0x000000016fd78000,0x000000016ff7b000],  sp=0x000000016ff76a20,  free space=2042k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12b8b80]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5d4
V  [libjvm.dylib+0x12b92c0]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x607660]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0xd5b0a4]  MacroAssembler::wrap_adds_subs_imm_insn(RegisterImpl const*, RegisterImpl const*, unsigned long long, void (MacroAssembler::*)(RegisterImpl const*, RegisterImpl const*, unsigned int), void (MacroAssembler::*)(RegisterImpl const*, RegisterImpl const*, RegisterImpl const*, Assembler::shift_kind, unsigned int), bool)+0xc8
V  [libjvm.dylib+0x6a530]  overflowAddL_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x150
V  [libjvm.dylib+0xed3ea8]  PhaseOutput::scratch_emit_size(Node const*)+0x2d0
V  [libjvm.dylib+0xec9304]  PhaseOutput::shorten_branches(unsigned int*)+0x458
V  [libjvm.dylib+0xec8af8]  PhaseOutput::Output()+0xb38
V  [libjvm.dylib+0x57048c]  Compile::Code_Gen()+0x3c4
V  [libjvm.dylib+0x56def8]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1410
V  [libjvm.dylib+0x465ff8]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x180
V  [libjvm.dylib+0x589788]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x85c
V  [libjvm.dylib+0x588d5c]  CompileBroker::compiler_thread_loop()+0x298
V  [libjvm.dylib+0x1208f8c]  JavaThread::thread_main_inner()+0x26c
V  [libjvm.dylib+0x1208d00]  JavaThread::run()+0x3c4
V  [libjvm.dylib+0x1205b38]  Thread::call_run()+0x220
V  [libjvm.dylib+0xeb9064]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x7878]  _pthread_start+0x140

;;;","2022-05-23 02:21;rcastanedalo;ILW = crash in product build; in JCK test using non-standard configuration; use default configuration = HML = P2;;;","2022-05-23 02:24;rcastanedalo;JDK-8285923 is suspected of causing these failures: it was integrated just two days before the failure observations, touched code around the failing assertion in macroAssembler_aarch64.cpp, and is a redo of JDK-8285802 which caused similar ""Field too big for insn"" failures. [~aph] could you have a look?;;;","2022-05-23 03:28;mbaesken;Our tests on the 10th May (JDK-8285923 has been pushed on the 9th)  were still good, did not show this issue.;;;","2022-05-23 06:46;rcastanedalo;OK, thanks for the additional info [~mbaesken]. I did a more detailed analysis and the bug is uncovered (but not necessarily caused) by JDK-8286163, which makes sense since it modifies java.time.Instant.;;;","2022-05-23 08:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8845
Date: 2022-05-23 14:55:34 +0000;;;","2022-05-25 00:28;dukebot;Changeset: 593d2b7d
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-05-25 07:26:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/593d2b7dab934875527249be6840f328147b72b3
;;;","2022-06-22 05:39;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A C2 fix we should backport before 8285923
Clean backport.
SAP nightly testing passed.;;;","2022-06-22 05:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/498
Date: 2022-06-22 12:38:09 +0000;;;","2022-07-11 17:16;epavlova;Checked that failed api/java_time/test/java/time/TestInstant.html jck test passed in JDK 19 ATR.;;;","2022-10-11 23:08;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
A C2 fix we should backport.
Clean backport.
SAP nightly testing passed. ;;;","2022-10-11 23:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1446
Date: 2022-10-12 06:09:40 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Document.normalizeDocument() produces different results,JDK-8287076,5075305,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,joehw,webbuggrp,webbuggrp,2022-05-19 19:12,2022-12-09 00:23,2023-10-01 09:56,2022-06-23 10:14,10,11,17,18,19,,,,,,,19,xml,,0,dcsaw,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
JDK 9.0.4 - works
JDK 10.0 onwards (including 18) - cloneMap returns empty list

A DESCRIPTION OF THE PROBLEM :
I was upgrading from Java 8 (works fine) to 11 calculating a digest value on an XML snippet. I was getting different result. Document.normalizeDocument returns different results when crossing over fro 9.0.4 to 10.0 onwards.

To pin point the bug. observer the call: 
DOMNormalizer.namespaceFixUp()
  Line 888: attributes.cloneMap(fAttributeList);

cloneMap does NOT work. NOTE this does not use the return value and replies on fAttributeList being passed by reference.

The implementation of clone map NamedNodeMapImpl.cloneMap():578 has changed. 
Line 580: list = new ArrayList<>(nodes);
This news the method parameter which leaves the reference passed in by DOMNormalizer empty. This worked fine on JDK 9.0.4.

Really the code should be:
fAttributeList = attributes.cloneMap(fAttributeList);
OR the implementation change back

REGRESSION : Last worked in version 8u331

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the source code provider under JDK 9.0.4 and a more recent JDK 10+. Different namespace attribute ordering because NamedNodeMapImpl.cloneMap is not working as intended.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
I expected consistent results and the fAttributeList to be populated from cloneMap.
ACTUAL -
cloneMap is not populating variable fAttributeList 

---------- BEGIN SOURCE ----------
package test;

import java.io.StringWriter;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.bootstrap.DOMImplementationRegistry;
import org.w3c.dom.ls.DOMImplementationLS;
import org.w3c.dom.ls.LSInput;
import org.w3c.dom.ls.LSOutput;
import org.w3c.dom.ls.LSParser;
import org.w3c.dom.ls.LSSerializer;

public class main {

  public static void main(final String[] args) {
    try
    {

      final DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();

      final DOMImplementationLS impl = (DOMImplementationLS) registry.getDOMImplementation(""LS"");

      final LSParser builder = impl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);

      final LSInput input = impl.createLSInput();
      input.setStringData(""<xml/>"");

      final Document document = builder.parse(input);
      final Element root = document.getDocumentElement();

      // Generate a single element
      final Element element = document.createElement(""token"");

      final Attr attr = element.getOwnerDocument().createAttributeNS(""http://blah.xsd"", ""wsu"");
      attr.setValue(""Id"");
      element.setAttributeNodeNS(attr);

      final Attr attr2 = element.getOwnerDocument().createAttributeNS(""http://blah2.xsd"", ""wsu2"");
      element.setAttributeNodeNS(attr2);

      final Attr attr3 = element.getOwnerDocument().createAttribute(""aa"");
      element.setAttributeNodeNS(attr3);

      final Attr attr4 = element.getOwnerDocument().createAttribute(""zz"");
      element.setAttributeNodeNS(attr4);

      final Attr attr5 = element.getOwnerDocument().createAttribute(""tt"");
      element.setAttributeNodeNS(attr5);

      root.appendChild(element);

      for ( int i = 0; i < element.getAttributes().getLength(); i++ )
      {
        System.out.println(element.getAttributes().item(i).getNodeName());
      }

      //final String originalXML = prettyPrintFromDocument(document);
      System.out.println(""PRE normalise "" + prettyPrintFromDocument(document));
      document.normalizeDocument();
      System.out.println(""POST normalise "" + prettyPrintFromDocument(document));

      for ( int i = 0; i < element.getAttributes().getLength(); i++ )
      {
        System.out.println(element.getAttributes().item(i).getNodeName());
      }
    }
    catch ( final Exception ex )
    {
      ex.printStackTrace();
    }
}

/**
 * Pretty prints a DOM document to a String.
 *
 * @param message the DOM document to serialise.
 * @return a string representation of the DOM message parameter.
 */
private static String prettyPrintFromDocument(final Document message) {
  try {
    final DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();

    final DOMImplementationLS impl = (DOMImplementationLS) registry.getDOMImplementation(""LS"");

    final LSSerializer writer = impl.createLSSerializer();
    final LSOutput output = impl.createLSOutput();

    final StringWriter sw = new StringWriter();

    output.setEncoding(""UTF-8"");
    output.setCharacterStream(sw);

    try {
      writer.getDomConfig().setParameter(""format-pretty-print"", Boolean.TRUE);
    } catch (final Exception ignore) {
    }

    writer.write(message, output);

    return sw.toString();
  } catch (final RuntimeException e) {
    throw e;
  } catch (final Exception e) {
    throw new RuntimeException(e);
  }
}
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None at the moment.

Happy to provide more info. Using Eclipse as debugger.

FREQUENCY : always


",,,,,,,,,,JDK-8291314,JDK-8298453,JDK-8289239,JDK-8291145,JDK-8298452,JDK-8293147,JDK-8294614,JDK-8293145,JDK-8294613,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8181150,,,,,,,,"2022-05-20 03:02;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/99025/Main.java",,,,,,,,,,generic,,,,,,,b28,10,,generic,,,,,,"0|i2x6rf:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@13d55830,,,,,,,Verified,,"2022-05-20 02:58;tongwan;The observations on Windows 10:
JDK 10ea+27 ,JDK 9 and JDK 8:  The outputs are:
aa
tt
wsu
wsu2
zz
PRE normalise <?xml version=""1.0"" encoding=""UTF-8""?><xml>
    <token aa="""" tt="""" xmlns:NS1=""http://blah.xsd"" NS1:wsu=""Id"" xmlns:NS2=""http://blah2.xsd"" NS2:wsu2="""" zz=""""/>
</xml>

POST normalise <?xml version=""1.0"" encoding=""UTF-8""?><xml>
    <token aa="""" tt="""" NS1:wsu=""Id"" NS2:wsu2="""" xmlns:NS1=""http://blah.xsd"" xmlns:NS2=""http://blah2.xsd"" zz=""""/>
</xml>

aa
tt
NS1:wsu
NS2:wsu2
xmlns:NS1
xmlns:NS2
zz
JDK 10ea+28, JDK 11, JDK 17, JDK 18, and JDK 19ea+19: The outputs are changed as the following:
aa
tt
wsu
wsu2
zz
PRE normalise <?xml version=""1.0"" encoding=""UTF-8""?><xml>
    <token aa="""" tt="""" xmlns:NS1=""http://blah.xsd"" NS1:wsu=""Id"" xmlns:NS2=""http://blah2.xsd"" NS2:wsu2="""" zz=""""/>
</xml>

POST normalise <?xml version=""1.0"" encoding=""UTF-8""?><xml>
    <token aa="""" tt="""" xmlns:NS1=""http://blah.xsd"" NS1:wsu=""Id"" xmlns:NS2=""http://blah2.xsd"" NS2:wsu2="""" zz=""""/>
</xml>

aa
tt
wsu
wsu2
zz;;;","2022-06-22 13:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/59
Date: 2022-06-22 20:01:58 +0000;;;","2022-06-23 10:14;dukebot;Changeset: 1f9521e6
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-06-23 17:12:31 +0000
URL:       https://git.openjdk.org/jdk19/commit/1f9521e6cb2f701f8712b4ec941ff1dbb45dad4e
;;;","2022-09-26 20:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/738
Date: 2022-09-27 03:43:54 +0000;;;","2022-09-26 20:53;vrudomet;Fix request [17u]

Backport for parity with 17.0.6-oracle.
Clean backport.
Tests pass. 

Update: 
How it was tested: 
* manually run test from description to verify
* run jtreg tier1, tier2, jck runtime to make sure the change did not break anything
Risk of the backport to break the VM: very low;;;","2022-09-26 21:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/739
Date: 2022-09-27 04:11:57 +0000;;;","2022-09-26 21:21;vrudomet;Fix request [11u]

Backport for parity with 11.0.18-oracle.
Clean backport.
Tests pass. 

Update: 
How it was tested: 
* manually run test from description to verify
* run jtreg tier1, tier2, jck runtime to make sure the change did not break anything
Risk of the backport to break the VM: very low;;;","2022-09-26 21:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1372
Date: 2022-09-27 04:20:46 +0000;;;","2022-12-08 23:12;yan;Fix request (13u, 15u):
backporting for parity with LTS releases.
Clean backport with only copyright difference. jaxp and jdk/java/xml tests run OK.;;;","2022-12-08 23:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/440
Date: 2022-12-09 07:12:36 +0000;;;","2022-12-08 23:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/313
Date: 2022-12-09 07:28:01 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE from CgroupV2Subsystem.getInstance(),JDK-8287073,5075315,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mkartashev,mkartashev,mkartashev,2022-05-20 01:14,2023-08-11 02:01,2023-10-01 09:56,2022-05-29 23:22,11.0.16,17.0.3,18.0.2,19,,,,,,,,19,core-libs,,0,cgroupsv2,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,"The following is an error reported by a customer of the Toolbox app:

Cannot invoke ""jdk.internal.platform.CgroupInfo.getMountPoint()"" because ""<parameter1>"" is null: java.lang.NullPointerException: Cannot invoke ""jdk.internal.platform.CgroupInfo.getMountPoint()"" because ""<parameter1>"" is null
	at java.base/jdk.internal.platform.cgroupv2.CgroupV2Subsystem.getInstance(Unknown Source)
	at java.base/jdk.internal.platform.CgroupSubsystemFactory.create(Unknown Source)
	at java.base/jdk.internal.platform.CgroupMetrics.getInstance(Unknown Source)
	at java.base/jdk.internal.platform.SystemMetrics.instance(Unknown Source)
	at java.base/jdk.internal.platform.Metrics.systemMetrics(Unknown Source)
	at java.base/jdk.internal.platform.Container.metrics(Unknown Source)
	at jdk.management/com.sun.management.internal.OperatingSystemImpl.<init>(Unknown Source)
	at jdk.management/com.sun.management.internal.PlatformMBeanProviderImpl.getOperatingSystemMXBean(Unknown Source)
	at jdk.management/com.sun.management.internal.PlatformMBeanProviderImpl$3.nameToMBeanMap(Unknown Source)
	at java.management/sun.management.spi.PlatformMBeanProvider$PlatformComponent.getMBeans(Unknown Source)
	at java.management/java.lang.management.ManagementFactory.getPlatformMXBean(Unknown Source)
	at java.management/java.lang.management.ManagementFactory.getOperatingSystemMXBean(Unknown Source)
	at com.jetbrains.toolbox.PerformanceMetricsImpl.<init>(PerformanceMetrics.kt:19)
	at com.jetbrains.toolbox.interop.cef.NativeGUIProcessKt.createToolboxServices(NativeGUIProcess.kt:177)
	at com.jetbrains.toolbox.entry.ToolboxEntry.startToolbox(toolbox-process-entry.kt:73)
",,,,,,,,,,JDK-8304951,JDK-8292964,JDK-8305198,JDK-8305019,JDK-8288308,JDK-8314156,JDK-8304950,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287663,JDK-8286212,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2x6tn:",9223372036854775807,b25,,,,,,,,,Verified,,"2022-05-20 01:21;mkartashev;The only reason for this to occur that I can see from reading the code is the absence of the ""memory"" cgroup that is being used as a ""sample"" cgroup in CgroupSubsystemFactory.create() around here:
        Map<String, CgroupInfo> infos = result.getInfos();
        if (result.isCgroupV2()) {
            // For unified it doesn't matter which controller we pick.
            CgroupInfo anyController = infos.get(MEMORY_CTRL); // <<<< this controller may not be there
            CgroupSubsystem subsystem = CgroupV2Subsystem.getInstance(anyController);
            return subsystem != null ? new CgroupMetrics(subsystem) : null;

I was unable to reproduce the error (tried switching off the memory controller with a kernel option, building a customer kernel without the memory controller support, booting Ubuntu 22.04 in WSL2). ;;;","2022-05-20 01:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8803
Date: 2022-05-20 08:34:58 +0000;;;","2022-05-29 23:22;dukebot;Changeset: 744b822a
Author:    Maxim Kartashev <mkartashev@openjdk.org>
Committer: Ioi Lam <iklam@openjdk.org>
Date:      2022-05-30 06:18:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/744b822ab194a0f7ef4e7a4053be32c6a0889efc
;;;","2022-06-09 05:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/456
Date: 2022-06-09 11:54:27 +0000;;;","2022-06-10 05:10;sgehwolf;Fix Request (OpenJDK 17u):

Please approve this low-risk bugfix in the JDK's init routine for the container detection code. It's usually called when the OSMXBean is being used which is container aware. The change is to use any one of the controllers (instead of hard-coding it to the memory controller). That's more resilient than the current status. I intend to also backport the regression test for this via JDK-8287663. Container tests continue to pass for me on x86_64 on cg1 and cg2.;;;","2022-08-24 08:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1339
Date: 2022-08-24 14:59:26 +0000;;;","2022-08-25 07:33;sgehwolf;Fix Request (OpenJDK 11u):

Please approve this low-risk bugfix in the JDK's init routine for the container detection code. Code is affected as well. It's usually called when the OSMXBean is being used which is container aware. The change is to use any one of the controllers (instead of hard-coding it to the memory controller). That's more resilient than the current status. I intend to also backport the regression test for this via JDK-8287663. Container tests continue to pass for me on x86_64 on cg1 and cg2. ;;;","2023-05-26 07:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/324
Date: 2023-05-26 14:46:38 +0000;;;","2023-05-26 09:27;sgehwolf;Fix Request (OpenJDK 8u):

Please approve this low-risk bugfix in the JDK's init routine for the container detection code. Patch is clean modulo path shuffeling. 8u code is affected as well. It's usually called when the OSMXBean is being used which is container aware. The change is to use any one of the controllers (instead of hard-coding it to the memory controller). That's more resilient than the current status. A backport of the regression test for this via JDK-8287663 in in the approval queue as well. Container tests continue to pass for me on x86_64 on cg1 and cg2.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
comparing double to max_intx gives unexpected results,JDK-8287052,5075293,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,dlong,dlong,2022-05-19 14:06,2022-06-20 03:31,2023-10-01 09:56,2022-05-20 13:25,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,,,,"% java -XX:CompileThresholdScaling=922337203685477.5808 -version
CompileThreshold (-9223372036854775808) must be between 0 and 1073741823
intx Tier0InvokeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier0BackedgeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier3InvocationThreshold=184467440737095520 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier3MinInvocationThreshold=92233720368547760 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier3CompileThreshold=1844674407370955264 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier3BackEdgeThreshold=9223372036854775807 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier2InvokeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier2BackedgeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier3InvokeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier3BackedgeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier23InlineeNotifyFreqLog=32 is outside the allowed range [ 0 ... 30 ]
intx Tier4InvocationThreshold=4611686018427387904 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier4MinInvocationThreshold=553402322211286592 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier4CompileThreshold=9223372036854775807 is outside the allowed range [ 0 ... 2147483647 ]
intx Tier4BackEdgeThreshold=9223372036854775807 is outside the allowed range [ 0 ... 2147483647 ]
java version ""19-internal"" 2022-09-20
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283641,JDK-8259288,JDK-8287169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x6or:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-19 14:15;dlong;The warning given by clang-12 shows the problem:

compilerDefinitions.cpp:134:13: error: implicit conversion from 'const intx' (aka 'const long') to 'double' changes value from 9223372036854775807 to 9223372036854775808 [-Werror,-Wimplicit-const-int-float-conversion]
    if (v > max_intx) {
          ~ ^~~~~~~~
1 error generated.

The value max_intx cannot be represented exactly by a double.  For the above logic to work, we need to round towards zero/truncate when converting, while rounding to the nearest value causes problems.  Doing an explicit cast gets rid of the warning but not the problem.;;;","2022-05-19 18:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8798
Date: 2022-05-20 01:03:02 +0000;;;","2022-05-20 00:44;chagedorn;ILW = Wrong compile threshold due to conversion error, only with huge CompileThresholdScaling values, use smaller values = MLM = P4;;;","2022-05-20 13:25;dukebot;Changeset: ba23f140
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-05-20 20:24:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ba23f14025f42bdb3bc831782b2f11443d1c572c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove JCK task definitions from client-atr,JDK-8287050,5075289,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-05-19 12:32,2022-06-01 23:24,2023-10-01 09:56,2022-05-31 12:11,19,,,,,,,,,,,19,client-libs,,0,,,,,,,,,,,,,,,,,,,,,It was found that JCK is tested twice once by jck-atr.js and once byclient-atr.js during ATR. So it was decided that we remove the jck execution from client.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x6nv:",9223372036854775807,b25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4.4.2: Relax checking of some constant pool entries that name a class/interface,JDK-8287047,5075285,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlsmith,abuckley,abuckley,2022-05-19 11:46,2023-06-29 14:46,2023-10-01 09:56,2022-06-07 13:10,18,,,,,,,,,,,19,specification,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,"A constant pool entry of kind CONSTANT_Methodref should refer to a method in a class type, while a constant pool entry of kind CONSTANT_InterfaceMethodref should refer to a method in an interface type. Historically, the spec of these two constant pool kinds was strict about this. Notice the two ""must be"" clauses in the following:

-----
class_index

    The value of the class_index item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a CONSTANT_Class_info structure (§4.4.1) representing a class or interface type that has the field or method as a member.

    In a CONSTANT_Fieldref_info structure, the class_index item may be either a class type or an interface type.

    In a CONSTANT_Methodref_info structure, the class_index item *****must be***** a class type, not an interface type.

    In a CONSTANT_InterfaceMethodref_info structure, the class_index item *****must be***** an interface type, not a class type.
-----

Checking that the class_index item of a constant pool entry actually refers to a class type rather than an interface type (or vice versa) requires eager loading of the referenced type, in particular during format checking of the class which contains the constant pool entry.

This eagerness is at odds with the laziness of resolution for symbolic references derived from constant pool entries. In addition, the rules of resolution already take ownership of the class-versus-interface question, in 5.4.3.3 (""If C is an interface, method resolution throws an IncompatibleClassChangeError."") and 5.4.3.4 (""If C is not an interface, interface method resolution throws an IncompatibleClassChangeError."").

Accordingly, the 4.4.2 text for class_index should be relaxed so that, during format checking, no ClassFormatError is due if the wrong kind of class/interface type is referenced:

-----
    In a CONSTANT_Methodref_info structure, the class_index item *****should be***** a class type, not an interface type.

    In a CONSTANT_InterfaceMethodref_info structure, the class_index item *****should be***** an interface type, not a class type.
-----",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261832,,,,,JDK-8267650,,,,,,,JDK-8261831,JCK-7319471,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x6mz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c76b3dd,,,,,,,,,"2022-05-19 14:25;dlsmith;I'll add that I think it's reasonable in the context of the entire specification to understand that ""must be a class type"" was a poor choice of words here, but was not intended to suggest that the JVM actually go and load some additional class files to validate it. (Actual triggers for class loading are pretty explicitly spelled out elsewhere.)

This phrase is just one of many cases in which JVMS Chapter 4 is not careful with words like ""must"", and it will not be productive to try to identify and apply spot fixes for all of those. Instead, a more comprehensive review and revision will be provided by JDK-8267650.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Loom: Incorrect StackChunk::pc accessors,JDK-8287044,5075281,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-05-19 10:46,2022-05-25 23:11,2023-10-01 09:56,2022-05-22 22:42,19,,,,,,,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,"The injected field is defined as:

```
  macro(jdk_internal_vm_StackChunk, pc,             intptr_signature, false)        \
```

...yet it is read and written as ""long"", which silently overwrites adjacent fields in StackChunk on 32-bit platforms. This is a blocker for any 32-bit support. There are plenty of other `intptr` injected fields in other classes (e.g. `Class::array_klass`), and they are properly accessed by ""address"" accessors.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x6m3:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-19 10:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8792
Date: 2022-05-19 17:53:12 +0000;;;","2022-05-22 22:42;dukebot;Changeset: 9008cfad
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-05-23 05:40:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9008cfad45346af570a765335846b0b4fe9af4b6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld][lw4] Remove abstract Object class support from HotSpot,JDK-8287040,5075276,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fparain,fparain,fparain,2022-05-19 09:50,2022-05-20 07:08,2023-10-01 09:56,2022-05-20 07:08,repo-valhalla,,,,,,,,,,,,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,,,,,,"Remove all support that was introduced to support an abstract Object class and the java.lang.Identity class, as per the JEP Draft Value Objects (Preview).

Changes include modifications made in the runtime, the interpreter, C1, C2 as well as some tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x6kz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-19 11:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/693
Date: 2022-05-19 18:03:50 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove references to Objects.newIdentity,JDK-8287030,5075262,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rriggs,rriggs,rriggs,2022-05-19 08:14,2022-05-20 09:37,2023-10-01 09:56,2022-05-20 09:37,,,,,,,,,,,,repo-valhalla,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"Object.newIdentity is no longer needed.  
Existing uses can revert to using `new Object()`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x6hv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-05-19 09:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/692
Date: 2022-05-19 15:53:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InputStreamReader::read() can return zero despite writing a char in the buffer,JDK-8287003,5075177,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2022-05-18 05:01,2023-05-17 12:17,2023-10-01 09:56,2022-05-27 08:24,11,17,18,19,8,,,,,,,19,core-libs,,0,amazon-interest,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Reproduced with 11.0.14, 17.0.3 and 19-ea+22 on Ubuntu 18.04.

A DESCRIPTION OF THE PROBLEM :
In some circumstances (see the reproducer) InputStreamReader::read(char[], int, int) can return zero while actually consuming a decoded character and writing it into the destination buffer. It happens because StreamDecoder.lockedRead() appears to assume that it's correct to always return ""n + implRead(cbuf, off, off + len)"" at [1], but it's not so if n == 1 and implRead() returns -1.

Note that the reproducer below is just one of the ways to trigger the bug. Another potential case is when implReady() returns true at [2], but the stream is actually at EOF (which typically doesn't happen, but is not forbidden by the contract of ready()).

[1] https://github.com/openjdk/jdk/blob/69ff86a32088d9664e5e0dae12edddc0643e3fd3/src/java.base/share/classes/sun/nio/cs/StreamDecoder.java#L218
[2] https://github.com/openjdk/jdk/blob/69ff86a32088d9664e5e0dae12edddc0643e3fd3/src/java.base/share/classes/sun/nio/cs/StreamDecoder.java#L204

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile and run the following code.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
a
1
-1

ACTUAL -
a
0
-1


---------- BEGIN SOURCE ----------
import java.io.*;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.StandardCharsets;

class Test {
    public static void main(String[] args) throws Exception {
        var r = new InputStreamReader(
                new ByteArrayInputStream(new byte[] {'a', 'b', (byte) 0xC2}),
                StandardCharsets.UTF_8.newDecoder().onMalformedInput(CodingErrorAction.IGNORE));
        System.out.println((char)r.read());
        System.out.println(r.read(new char[3], 0, 3));
        System.out.println(r.read());
    }
}
---------- END SOURCE ----------

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-19 00:00;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/98994/Test.java",,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x5yz:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,Verified,,"2022-05-18 23:57;tongwan;The observations on Windows 10:
JDK 8: Failed, the outputs are a, 0, -1 
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+19: Failed.;;;","2022-05-25 16:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8895
Date: 2022-05-25 23:08:38 +0000;;;","2022-05-27 08:24;dukebot;Changeset: 6520843f
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-05-27 15:23:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6520843f86f638fe4d1e5b3358fab5799daca654
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure on macOS after 8281814,JDK-8286989,5075214,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,dongbohe,dongbohe,2022-05-18 20:45,2022-05-31 08:06,2023-10-01 09:56,2022-05-24 06:31,,,,,,,,,,,,openjdk8u342,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,,,,,,,"$ bash configure
$ make images

gmake[2]: *** [lib/CoreLibraries.gmk:109: /Users/runner/work/jdk8u-dev/jdk8u-dev/jdk/build/macos-x64/jdk/objs/libverify/libverify.diz] Error 12
zip error: Nothing to do! (/Users/runner/work/jdk8u-dev/jdk8u-dev/jdk/build/macos-x64/jdk/objs/libverify/libverify.diz)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281814,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b01,openjdk8u342,,,,,,,,"0|i2x677:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-05-19 04:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/61
Date: 2022-05-18 17:48:08 +0000;;;","2022-05-19 08:49;zzambers;Fix request (8u)

Fixes build failure on macos introduced by JDK-8281814, low risk, test in this case means performing build, passes on all OSes in github actions (macos, linux, windows)
;;;","2022-05-24 06:31;dukebot;Changeset: c5f96be5
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-05-24 13:27:42 +0000
URL:       https://git.openjdk.java.net/jdk8u-dev/commit/c5f96be5e370f01fbb8677049e2feeeeb3b3012d
;;;","2022-05-31 08:06;dukebot;Changeset: c5f96be5
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-05-24 13:27:42 +0000
URL:       https://git.openjdk.java.net/jdk8u/commit/c5f96be5e370f01fbb8677049e2feeeeb3b3012d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(ch) Problem list java/nio/channels/FileChannel/LargeMapTest.java on Windows,JDK-8286984,5075209,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-05-18 17:46,2022-05-25 23:07,2023-10-01 09:56,2022-05-18 18:28,19,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,See JDK-8286980.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286980,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2x663:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-05-18 17:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8781
Date: 2022-05-19 00:49:44 +0000;;;","2022-05-18 18:28;dukebot;Changeset: 2a2d54e8
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-05-19 01:25:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2a2d54e8a6e24da49d57c0648a2af41c98b78ea4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"rename jdb -trackvthreads and debug agent enumeratevthreads options and clarify ""Preview Feature"" nature of these options",JDK-8286983,5075208,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-05-18 16:47,2022-06-25 02:12,2023-10-01 09:56,2022-06-07 13:34,19,,,,,,,,,,,19,core-svc,,0,loom,,,,,,,,,,,,,,,,,,,,"As part of the loom integration, jdb added -trackvthreads and the debug agent added ""enumeratevthreads"". The help text for these options should call out that they are Preview Features.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287591,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x65v:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-05-18 17:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8780
Date: 2022-05-19 00:10:15 +0000;;;","2022-05-25 11:39;abuckley;1. JPG has never referred to ""virtual threads"" as ""vthreads"", and we should not start now. The words we use matter because every other tool and library in the Java ecosystem follows our lead. It would be unfortunate to see ""vthread"" in, say, an IDE's dialog box or Maven's command-line help.

2. In jdb, by ""tracking virtual threads"", the user is really tracking _all_ threads, whether virtual or platform. It is not possible to track _only_ virtual threads, so `-trackvirtualthreads` would be misleading. I recommend `-trackallthreads` -- all of them! even if there are millions! Recommendation:

  -trackallthreads    Track all threads, including virtual threads.
                      See \f[B]Working with virtual threads\f[R] below.
                      Virtual threads are a preview feature of the Java platform.

3. In principle, jdb should only allow `-trackallthreads` to be used when `--enable-preview` is also supplied. Requiring `--enable-preview` makes it crystal clear to the user that the facility to track virtual threads alongside platform threads is not a final and permanent feature of the JDK. However, it may be unwieldy to add `--enable-preview` to jdb at this time, so the description of `-trackallthreads` will be a sufficient warning for people running `jdb -h`. For people reading the man page, please start the section ""Working with Virtual Threads"" as follows: (this fact + implication wording is similar to what appears in javadoc)

    *Virtual threads are a preview feature of the Java platform.*
    *Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.*

    Often virtual theads are created ...

4. Debug agent: I think `-enumeratevthreads` would be better as `-listvirtualthreads` or `-includevirtualthreads`. ""thread list includes virtual threads as well as platform threads""  I am OK if you don't highlight preview status here.;;;","2022-05-25 11:59;cjplummer;[~abuckley] I'm ok with the suggested changes. However, I still have the goal of wanting to make it clear that these two flags themselves should be considered preview features, and could be removed, renamed, or change behavior as long as virtual threads are still considered preview. You seem to have indicated that the suggested wording for `-trackallthreads` should be sufficient to get this point across to the reader, but `-listvirtualthreads` doesn't lead to any help output that indicates the preview nature of the flag. Is that ok?;;;","2022-05-25 12:23;abuckley;jdb's ""track all threads"" feature, and the debug agent's ""include virtual threads"" feature, are not themselves preview features; they are features of the JDK that support the preview feature ""Virtual Threads"". A preview feature is defined by the Java SE Platform.

(Don't worry that JEP 425 characterizes ""Virtual Threads"" as a ""preview API"" -- that's just to clarify that it's neither a preview language feature in the Java Language Spec, nor a preview VM feature in the JVM Spec. The first-class appearance of virtual threads in the Java SE Platform is through the Thread API.)

For `-listvirtualtheads` in the debug agent, I had trouble understanding the whole display context. Ideally, tool output should say ""Virtual threads are a preview feature of the Java platform."" as part of an option's description. The jdb option did that, and also pointed to a new man page section with room for a longer, two-line message, great. If the debug agent option isn't pointing to a new man page section, then ideally the two-line message would appear as part of the option's description.;;;","2022-05-25 13:14;cjplummer;[~abuckley] One other things that needs clarifying. Your above help output for jdb `trackallthreads` is from the man page. There is no existing reference to ""See \f[B]Working with virtual threads\f[R] below"" in the help output. Do you suggest I add it? This is what the current help output looks like (before any of your recommended changes):

$ jdb -help
Usage: jdb <options> <class> <arguments>

where options include:
    -? -h --help -help print this help message and exit
    -sourcepath <directories separated by "":"">
                      directories in which to look for source files
    -attach <address>
                      attach to a running VM at the specified address using standard connector
    -listen <address>
                      wait for a running VM to connect at the specified address using standard connector
    -listenany
                      wait for a running VM to connect at any available address using standard connector
    -launch
                      launch VM immediately instead of waiting for 'run' command
    -listconnectors   list the connectors available in this VM
    -connect <connector-name>:<name1>=<value1>,...
                      connect to target VM using named connector with listed argument values
    -dbgtrace [flags] print info for debugging jdb
    -trackvthreads    (Preview Feature) track virtual threads as they are created
    -tclient          run the application in the HotSpot(TM) Client Compiler
    -tserver          run the application in the HotSpot(TM) Server Compiler
    -R<option>        forward <option> to debuggee process if launched by jdb, otherwise ignored

options forwarded to debuggee process if launched by jdb (shorthand instead of using -R):
    -v -verbose[:class|gc|jni]
                      turn on verbose mode
    -D<name>=<value>  set a system property
    -classpath <directories separated by "":"">
                      list directories in which to look for classes
    -X<option>        non-standard target VM option

<class> is the name of the class to begin debugging
<arguments> are the arguments passed to the main() method of <class>

For command help type 'help' at jdb prompt;;;","2022-05-25 13:59;abuckley;Right, I was focused initially on jdb's man page. For jdb's `-help` output, I recommend this one line addition, recognizing that space is at more of a premium than, say, the javadoc of a preview method (e.g., the *three* line message in https://download.java.net/java/early_access/jdk19/docs/api/java.base/java/lang/Thread.html#isVirtual() )

  -trackallthreads    Track all threads, including virtual threads.
                      Virtual threads are a preview feature of the Java platform.

The concluding line about ""...of the Java platform"" is the same concluding line as in the man page, simplifying removal when virtual threads become a final feature:

  -trackallthreads Track all threads, including virtual threads.
                      See \f[B]Working with virtual threads\f[R] below.
                      Virtual threads are a preview feature of the Java platform.;;;","2022-05-31 10:19;cjplummer;I created CSR JDK-8287591;;;","2022-06-07 12:36;dukebot;Changeset: 74be2d9e
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-06-07 19:07:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/74be2d9ef6d5a8c27257c86cf73decf440a4b292
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SIGBUS in libz during CDS initialization,JDK-8286978,5075203,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,dholmes,dholmes,2022-05-18 14:52,2022-05-30 23:07,2023-10-01 09:56,2022-05-20 10:55,19,,,,,,,,,,,19,hotspot,,0,cds,intermittent,noreg-self,tier3,,,,,,,,,,,,,,,,,"Test: runtime/cds/appcds/SharedArchiveConsistency.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0x7) at pc=0x0000fffe6e782a98, pid=3631323, tid=3631326
#
# JRE version:  (19.0+23) (fastdebug build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+23-1706, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-aarch64)
# Problematic frame:
# C  [libz.so.1+0x2a98]
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11695/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7271537d-9ec9-4c3f-a3ff-efb6ab628fe3/runs/1e5ba9c7-7c65-4bdc-ae08-a1cfa24125b1/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/1/core.3631323)
#
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxRAMPercentage=6.25 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11695/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7271537d-9ec9-4c3f-a3ff-efb6ab628fe3/runs/1e5ba9c7-7c65-4bdc-ae08-a1cfa24125b1/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/tmp -XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA -Xshare:on -XX:SharedArchiveFile=/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11695/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7271537d-9ec9-4c3f-a3ff-efb6ab628fe3/runs/1e5ba9c7-7c65-4bdc-ae08-a1cfa24125b1/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/1/15-delete-bytes-20h11m28s866.jsa -Dtest.timeout.factor=4.0 -XX:+UnlockDiagnosticVMOptions -XX:VerifyArchivedFields=1 -Xlog:cds -XX:+VerifySharedSpaces Hello

Host: AArch64, 8 cores, 46G, Oracle Linux Server release 8.4
Time: Wed May 18 20:11:28 2022 UTC elapsed time: 0.089824 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x0000fffe6802a6a0):  JavaThread ""Unknown thread"" [_thread_in_vm, id=3631326, stack(0x0000fffe6c020000,0x0000fffe6c220000)]

Stack: [0x0000fffe6c020000,0x0000fffe6c220000],  sp=0x0000fffe6c21e030,  free space=2040k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libz.so.1+0x2a98]
V  [libjvm.so+0xc81628]  FileMapInfo::verify_region_checksum(int)+0x88
V  [libjvm.so+0xc83140]  FileMapInfo::map_region(int, long, char*, ReservedSpace)+0x1bc
V  [libjvm.so+0xc85ee0]  FileMapInfo::map_regions(int*, int, char*, ReservedSpace)+0x1a0
V  [libjvm.so+0x14c35ec]  MetaspaceShared::map_archive(FileMapInfo*, char*, ReservedSpace)+0xac
V  [libjvm.so+0x14c64c0]  MetaspaceShared::map_archives(FileMapInfo*, FileMapInfo*, bool)+0x220
V  [libjvm.so+0x14c6b48]  MetaspaceShared::initialize_runtime_shared_and_meta_spaces()+0xb8
V  [libjvm.so+0x14b9454]  Metaspace::global_initialize()+0x3b4
V  [libjvm.so+0x1937e5c]  universe_init()+0xec
V  [libjvm.so+0xefd0a0]  init_globals()+0x30
V  [libjvm.so+0x18e0fc4]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x2c4
V  [libjvm.so+0x108671c]  JNI_CreateJavaVM+0xbc
C  [libjli.so+0x3c10]  JavaMain+0x7c
C  [libjli.so+0x750c]  ThreadJavaMain+0xc
C  [libpthread.so.0+0x7868]  start_thread+0x188

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286763,JDK-8287101,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,,,"0|i2x64r:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-18 21:40;iklam;I looked at a few log files,

They all have this random seed:

For random generator using seed: -9165986038469264792
To re-run test with same seed value please add ""-Djdk.test.lib.random.seed=-9165986038469264792"" to command line.

and fail in this sub-test:

6. Delete bytes at beginning of data section, should fail

I tried running on x64 with ""jtreg -vmoptions:-Djdk.test.lib.random.seed=-9165986038469264792 ..."" but couldn't reproduce the failure.;;;","2022-05-18 21:49;iklam;The hs_err files show the same failure address:

siginfo: si_signo: 7 (SIGBUS), si_code: 2 (BUS_ADRERR), si_addr: 0x0000000800000000

C  [libz.so.1+0x2a98]
V  [libjvm.so+0xc816a8]  FileMapInfo::verify_region_checksum(int)+0x88
V  [libjvm.so+0xc831c0]  FileMapInfo::map_region(int, long, char*, ReservedSpace)+0x1bc
V  [libjvm.so+0xc85f60]  FileMapInfo::map_regions(int*, int, char*, ReservedSpace)+0x1a0
V  [libjvm.so+0x14c366c]  MetaspaceShared::map_archive(FileMapInfo*, char*, ReservedSpace)+0xac
V  [libjvm.so+0x14c6540]  MetaspaceShared::map_archives(FileMapInfo*, FileMapInfo*, bool)+0x220
V  [libjvm.so+0x14c6bc8]  MetaspaceShared::initialize_runtime_shared_and_meta_spaces()+0xb8
V  [libjvm.so+0x14b94d4]  Metaspace::global_initialize()+0x3b4
V  [libjvm.so+0x1937edc]  universe_init()+0xec

At this point, we should have already mapped the first region in the heap (the RW region) at 0x800000000. This is confirmed by the hs_err file:

800000000-8004e0000 rw-p 00010000 fc:00 105107041 /opt/mach5/mesos/work_dir/..../scratch/2/15-delete-bytes-22h58m03s131.jsa

However, for some reason, the CRC calculation code in libz.so seems to have crashed when reading the very first byte of this region.
============================
The strange thing is
- Many subtests were executed before ""6. Delete bytes at beginning of data section"" with -XX:+VerifySharedSpaces, so we were able to verify the RW region in those subtests.
- In this subtest, we have called the CRC computation code once already (to compute checksum of the CDS archive header). The failure happens on the second invocation of the CRC computation  code.

;;;","2022-05-18 21:55;iklam;More strange -- the failure happens only in mach5 tier3. But this test is also executed on linux-aarch64 in tier2 and never failed??;;;","2022-05-19 08:42;iklam;Thanks to [~jpai] and [~alanb] for helping to diagnose the crash. It turns out that in the failing case, the CDS archive is exactly 4096 bytes long. 


To reproduce on linux/x64:

test/lib/jdk/test/lib/cds/CDSArchiveUtils.java:

     public static File deleteBytesAtRandomPositionAfterHeader(File orgFile, String newFileName, int nBytes) throws Exception {
         long offset = fileHeaderSize(orgFile) + getRandomBetween(0L, 4096L);
         File dstFile = new File(newFileName);
         try (FileChannel inputChannel = new FileInputStream(orgFile).getChannel();
              FileChannel outputChannel = new FileOutputStream(dstFile).getChannel()) {
             long orgSize = inputChannel.size();
-            outputChannel.transferFrom(inputChannel, 0, offset);
-            inputChannel.position(offset + nBytes);
-            outputChannel.transferFrom(inputChannel, offset, orgSize - nBytes);
+            outputChannel.transferFrom(inputChannel, 0, 4096);
+            //inputChannel.position(offset + nBytes);
+            //outputChannel.transferFrom(inputChannel, offset, orgSize - nBytes);
         }
         return dstFile;

Run with

jtreg -vmoptions:-XX:+UseSerialGC ./appcds/SharedArchiveConsistency.java

There are two bugs:

[1] The bug with outputChannel.transferFrom where exactly 4KB was written into the output.

     We should call transferFrom in a loop until all requested bytes are transferred.

https://docs.oracle.com/javase/7/docs/api/java/nio/channels/FileChannel.html#transferFrom(java.nio.channels.ReadableByteChannel,%20long,%20long)

[2] CDS checks for file truncation with this in filemap.cpp:
  if (is_static()) {
    // just checking the last region is sufficient since the archive is written
    // in sequential order
    size_t len = os::lseek(fd, 0, SEEK_END);
    FileMapRegion* si = space_at(MetaspaceShared::last_valid_region);
    // The last space might be empty
    if (si->file_offset() > len || len - si->file_offset() < si->used()) {
      fail_continue(""The shared archive file has been truncated."");
      return false;
    }
  }

but when -XX:+UseSerialGC is used, the last_valid_region is empty so si->file_offset() == 0 and we didn't detect truncation. We should check all the regions instead. Also, this should be done for dynamic archive as well.;;;","2022-05-19 08:43;iklam;The reason for the SIGBUS:

The VM calls mmap() to map a region that starts at 4096, just past the end of the file. For some reason, mmap succeeds -- it gives the VM a reserved region without backing memory. So when ZIP_CRC32 reads the first word on this region it gets a SIGBUS.;;;","2022-05-19 16:39;ccheung;This crash didn't happen in tier2 because there's no VM options specified for the test.

With VM options in tier3 such as: 
-XX:+CreateCoredumpOnCrash -XX:+UseSerialGC
or
-XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -XX:+UseNUMA

The crash happened about 13 out of 30 times on linux-aarch64.;;;","2022-05-19 18:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8799
Date: 2022-05-20 01:05:18 +0000;;;","2022-05-20 10:55;dukebot;Changeset: 087bccfe
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-05-20 17:51:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/087bccfe28c03cb714d46b307e276efca11a4315
;;;","2022-05-20 19:25;jpai;Hello Ioi,

> The VM calls mmap() to map a region that starts at 4096, just past the end of the file. For some reason, mmap succeeds -- it gives the VM a reserved region without backing memory.

Do you think this is a genuine issue and would require a separate JBS to investigate and fix?;;;","2022-05-30 23:07;iklam;[~jpai] yes it's a genuine issue and should be fixed in JDK-8287101;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/ServerCloseTest.java failed once with ConnectException ,JDK-8286962,5075184,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccleary,dfuchs,dfuchs,2022-05-18 06:09,2023-02-08 08:10,2023-10-01 09:56,2022-06-15 08:44,17,,,,,,,,,,,20,core-libs,,0,httpclient,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,"The log reveals that the server has exited with an assertion error:

                    assert method.equalsIgnoreCase(""POST"")
                            || method.equalsIgnoreCase(""GET"");

Most probably this indicates that something else than our test is connecting to our server. The server should be made reliable and just close the accepted connection and go back to accept in that case.

----------System.err:(16/961)----------
java.lang.AssertionError
	at ServerCloseTest$DummyServer.run(ServerCloseTest.java:305)
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

",,,,,,,,,,JDK-8302075,JDK-8298932,JDK-8302077,JDK-8300492,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2x60j:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-06-14 03:36;ccleary;Working on improving the test by validating that the Client Socket which is accepted is indeed the relevant test case and not some other unrelated connection. Doing this by validating that the request method and path is correct for each client connection. Otherwise, the Socket is closed and we go back to accept as suggested above by [~dfuchs].

In addition, I think removing the asserts and replacing them with a method that validates the request with some more valuable logging would make it clearer what is happening if a similar failure occurs again in the future.;;;","2022-06-14 08:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9155
Date: 2022-06-14 15:20:28 +0000;;;","2022-06-15 08:43;dukebot;Changeset: 13d4ddc3
Author:    Conor Cleary <ccleary@openjdk.org>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-06-15 15:41:18 +0000
URL:       https://git.openjdk.org/jdk/commit/13d4ddc35b1a64e2d882c7dcd554b5aee2720c53
;;;","2023-01-30 09:42;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.19-oracle,17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes (on linux). SAP nightly testing passed including the win test.;;;","2023-01-30 09:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1126
Date: 2023-01-30 17:44:08 +0000;;;","2023-01-30 10:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1698
Date: 2023-01-30 17:52:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test serviceability/jvmti/vthread/SuspendResume2 crashed: missing ThreadsListHandle in calling context,JDK-8286960,5075182,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,dholmes,dholmes,2022-05-18 06:01,2022-06-01 23:24,2023-10-01 09:56,2022-05-25 17:32,19,,,,,,,,,,,19,hotspot,,0,loom,tier3,,,,,,,,,,,,,,,,,,,"#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14646/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/20db3270-b3ad-40e8-91d1-f400c7c9d9f4/runs/bc9f51ae-c2f3-4ef8-add7-b17f271d1cb7/workspace/open/src/hotspot/share/runtime/thread.cpp:1781), pid=15926, tid=17419
#  guarantee(Thread::is_JavaThread_protected_by_TLH( this)) failed: missing ThreadsListHandle in calling context.
#
# JRE version: Java(TM) SE Runtime Environment (19.0+23) (fastdebug build 19-ea+23-1700)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+23-1700, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a5b5f4]  JavaThread::java_suspend()+0xa4

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14646/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/20db3270-b3ad-40e8-91d1-f400c7c9d9f4/runs/bc9f51ae-c2f3-4ef8-add7-b17f271d1cb7/workspace/open/src/hotspot/share/runtime/thread.cpp:1781), pid=15926, tid=17419
#  guarantee(Thread::is_JavaThread_protected_by_TLH( this)) failed: missing ThreadsListHandle in calling context.
#
# JRE version: Java(TM) SE Runtime Environment (19.0+23) (fastdebug build 19-ea+23-1700)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+23-1700, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a5b5f4]  JavaThread::java_suspend()+0xa4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287281,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x603:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-05-19 01:31;sspitsyn;I think that this bug was introduced with the following changeset:

commit ea23e7333e03abb4aca3e9f3854bab418a4b70e2
Author: Daniel D. Daugherty <dcubed@openjdk.org>
Date:   Mon Nov 8 14:45:04 2021 +0000

    8249004: Reduce ThreadsListHandle overhead in relation to direct handshakes
    
    Reviewed-by: coleenp, sspitsyn, dholmes, rehn

The following change in src/hotspot/share/runtime/thread.cpp introduced new assert:

bool JavaThread::java_suspend() {
-   ThreadsListHandle tlh;
-    if (!tlh.includes(this)) {
-      log_trace(thread, suspend)(""JavaThread:"" INTPTR_FORMAT "" not on ThreadsList, no suspension"", p2i(this));
-     return false;
-   }
+  guarantee(Thread::is_JavaThread_protected(this, /* checkTLHOnly */ true),
 +           ""missing ThreadsListHandle in calling context."");
  return this->handshake_state()->suspend();
}

This new assert misses a check for target thread as being current JavaThread.

There can be one similar issue in src/hotspot/share/runtime/handshake.cpp:

+ void Handshake::execute(HandshakeClosure* hs_cl, ThreadsListHandle* tlh, JavaThread* target) {
  JavaThread* self = JavaThread::current();
  HandshakeOperation op(hs_cl, target, Thread::current());

  jlong start_time_ns = os::javaTimeNanos();

-   ThreadsListHandle tlh;
-   if (tlh.includes(target)) {
+  guarantee(target != nullptr, ""must be"");
+  if (tlh == nullptr) {
+    guarantee(Thread::is_JavaThread_protected(target, /* checkTLHOnly */ true),
+              ""missing ThreadsListHandle in calling context."");
+    target->handshake_state()->add_operation(&op);
+  } else if (tlh->includes(target)) {
    target->handshake_state()->add_operation(&op);
  } else {

Also, please, see this rfe:
  https://bugs.openjdk.java.net/browse/JDK-8249004;;;","2022-05-19 04:29;dholmes;The current code is:

 guarantee(Thread::is_JavaThread_protected_by_TLH(/* target */ this),
            ""missing ThreadsListHandle in calling context."");

We need to check whether this really intended to be is_JavaThread_protected_by_TLH (because a current thread check is supposed to happen at a higher level), or whether this should be changed to is_JavaThread_protected().;;;","2022-05-19 07:28;sspitsyn;My initial conclusion is not fully correct.
This is code of the SuspendThread:

jvmtiError
JvmtiEnv::SuspendThread(jthread thread) {
  JavaThread* current = JavaThread::current();
  ThreadsListHandle tlh(current);

  jvmtiError err;
  JavaThread* java_thread = NULL;
  oop thread_oop = NULL;
  {
    JvmtiVTMSTransitionDisabler disabler(true);

    err = get_threadOop_and_JavaThread(tlh.list(), thread, &java_thread, &thread_oop);
    if (err != JVMTI_ERROR_NONE) {
      return err;
    }

    // Do not use JvmtiVTMSTransitionDisabler in context of self suspend to avoid deadlocks.
    if (java_thread != current) {
      err = suspend_thread(thread_oop, java_thread, /* single_suspend */ true, NULL);
      return err;
    }
  }
  // Do self suspend for current JavaThread.
  err = suspend_thread(thread_oop, current, /* single_suspend */ true, NULL);
  return err;
} /* end SuspendThread */

The suspend_thread is executed in the context of ThreadsListHandle in both cases:
   for current and non-current target JavaThread

However, the get_threadOop_and_JavaThread() does not always register the target thread in the TLH. There are two different cases when target thread is not registered.
One is the case of current thread which was initially mentioned. It is always safe.
Another is the case of a mounted virtual thread. The JavaThread is not registered in TLH in such a case. But it is safe because the target thread is protected from VTMS transitions (and so, exiting) with a jvmtiVTMSTransitionDisabler.
I'm still thinking about the best way to resolve this issue.;;;","2022-05-19 23:58;dholmes;JavaThreads should _always_ be registered by a TLH else it defeats the whole purpose of the TLH. Why would you not allow the JavaThread to register?;;;","2022-05-23 02:30;sspitsyn;Sorry, I forgot that the TLH constructor creates a safe thread list.
In fact, the SuspendThread has to be always protected with TLH. Please, see this:
JvmtiEnv::SuspendThread(jthread thread) {
  JavaThread* current = JavaThread::current();
  ThreadsListHandle tlh(current);                          <= SuspendThread has a TLS defined !!!

Then I'm puzzled why this guarantee was fired:

# Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14646/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/20db3270-b3ad-40e8-91d1-f400c7c9d9f4/runs/bc9f51ae-c2f3-4ef8-add7-b17f271d1cb7/workspace/open/src/hotspot/share/runtime/thread.cpp:1781), pid=15926, tid=17419
# guarantee(Thread::is_JavaThread_protected_by_TLH( this)) failed: missing ThreadsListHandle in calling context.

Apparently, I'm missing something in this context.;;;","2022-05-23 08:40;sspitsyn;I think, I understand what is going on with the TLH in the context of JVMTI SuspendThread.
It is possible that a JavaThread for new carrier thread is created after the TLH is set.
Then the target virtual thread can be mounted on this thread before the JvmtiVTMSTransitionDisabler is set.
This situation is rare of course.
A fix for this would be to set the TLS after the JvmtiVTMSTransitionDisabler.
In this particular case, we do not want JvmtiVTMSTransitionDisabler for current JavaThread to avoid possible deadlock.;;;","2022-05-23 11:19;sspitsyn;The suggested fix is:

diff --git a/src/hotspot/share/prims/jvmtiEnv.cpp b/src/hotspot/share/prims/jvmtiEnv.cpp
index 36baccaa950..1221fc5403d 100644
--- a/src/hotspot/share/prims/jvmtiEnv.cpp
+++ b/src/hotspot/share/prims/jvmtiEnv.cpp
@@ -936,6 +936,9 @@ JvmtiEnv::SuspendThread(jthread thread) {
   oop thread_oop = NULL;
   {
     JvmtiVTMSTransitionDisabler disabler(true);
+    // Target virtual thread can be mounted on newily created carrier thread after the TLH above was set.
+    // Then the JavaThread associated with new carrier thread has to be protected with new TLH.
+    ThreadsListHandle tlh2(current);
 
     err = get_threadOop_and_JavaThread(tlh.list(), thread, &java_thread, &thread_oop);
     if (err != JVMTI_ERROR_NONE) {
@@ -967,6 +970,10 @@ JvmtiEnv::SuspendThreadList(jint request_count, const jthread* request_list, jvm
 
   {
     JvmtiVTMSTransitionDisabler disabler(true);
+    // Some virtual threads from request_list can be mounted on newly created carrier threads
+    // after the TLH above was set. Then the JavaThread's associated with new carrier threads
+    // have to be protected with new TLH.
+    ThreadsListHandle tlh2(current);
 
     for (int i = 0; i < request_count; i++) {
       JavaThread *java_thread = NULL;
@@ -1024,6 +1031,10 @@ JvmtiEnv::SuspendAllVirtualThreads(jint except_count, const jthread* except_list
   {
     ResourceMark rm(current);
     JvmtiVTMSTransitionDisabler disabler(true);
+    // Some virtual threads can be mounted on newly created carrier threads after the TLH 
+    // above was set. Then the JavaThread's associated with new carrier threads have to be
+    // protected with new TLH.
+    ThreadsListHandle tlh2(current);
     GrowableArray<jthread>* elist = new GrowableArray<jthread>(except_count);
 
     // Collect threads from except_list for which resumed status must be restored.
;;;","2022-05-23 22:58;dholmes;This shows an interesting problem that virtual threads have now introduced to the VM. Anywhere before VT that we would operate on a JavaThread, and we now operate initially on a VT and extract the JavaThread from it, then that JavaThread can escape an existing TLH if it has been newly created. I do not expect this issue is limited to the suspension operations!;;;","2022-05-24 00:16;sspitsyn;Yes, it is interesting problem related to virtual threads.
The JvmtiVTMSTransitionDisabler is a solution to it. However, it is getting tricky sometimes.
I've only found one more area in JVMTI which has similar issue. It is GetLocalXXX/SetLocalXXX functions. My current plan is to limit the fix of this bug to the Suspend functions and address potential problem in the GetLocalXXX/SetLocalXXX functions separately.
BTW, setting first TLH just to cover current thread case looks ugly.
I wonder if the rule to set TLH in this case can be relaxed.;;;","2022-05-24 00:50;dholmes;You never need a TLH to protect the current thread.;;;","2022-05-24 02:48;sspitsyn;Then this guarantee needs a check for current thread:

bool JavaThread::java_suspend() {
.  . .
  guarantee(Thread::is_JavaThread_protected_by_TLH(/* target */ this),
            ""missing ThreadsListHandle in calling context."");
  return this->handshake_state()->suspend();
}

I'm not sure yet but this guarantee can be another one to adjust for current thread (it is not in the code path of the JVMTI Suspend* functions though):

void Handshake::execute(HandshakeClosure* hs_cl, ThreadsListHandle* tlh, JavaThread* target) {
  . . .
  if (tlh == nullptr) {
    guarantee(Thread::is_JavaThread_protected_by_TLH(target),
              ""missing ThreadsListHandle in calling context."");
;;;","2022-05-24 02:58;dholmes;If you call Thread::is_JavaThread_protected_by_TLH then you don't expect to be dealing with the current thread. That should be being determined at a higher-level as I said earlier. I need to look at the broader context of both of those call sites.;;;","2022-05-24 03:39;sspitsyn;> If you call Thread::is_JavaThread_protected_by_TLH then you don't expect to be dealing
> with the current thread. That should be being determined at a higher-level as I said earlier.
Not sure, I understand it as needed.

What do you think about the following updated suggested fix? :

diff --git a/src/hotspot/share/prims/jvmtiEnv.cpp b/src/hotspot/share/prims/jvmtiEnv.cpp
index 36baccaa950..c83b0794a73 100644
--- a/src/hotspot/share/prims/jvmtiEnv.cpp
+++ b/src/hotspot/share/prims/jvmtiEnv.cpp
@@ -929,13 +929,13 @@ JvmtiEnv::GetAllThreads(jint* threads_count_ptr, jthread** threads_ptr) {
 jvmtiError
 JvmtiEnv::SuspendThread(jthread thread) {
   JavaThread* current = JavaThread::current();
-  ThreadsListHandle tlh(current);
 
   jvmtiError err;
   JavaThread* java_thread = NULL;
   oop thread_oop = NULL;
   {
     JvmtiVTMSTransitionDisabler disabler(true);
+    ThreadsListHandle tlh(current);
 
     err = get_threadOop_and_JavaThread(tlh.list(), thread, &java_thread, &thread_oop);
     if (err != JVMTI_ERROR_NONE) {
@@ -960,13 +960,13 @@ JvmtiEnv::SuspendThread(jthread thread) {
 jvmtiError
 JvmtiEnv::SuspendThreadList(jint request_count, const jthread* request_list, jvmtiError* results) {
   JavaThread* current = JavaThread::current();
-  ThreadsListHandle tlh(current);
   HandleMark hm(current);
   Handle self_tobj = Handle(current, NULL);
   int self_idx = -1;
 
   {
     JvmtiVTMSTransitionDisabler disabler(true);
+    ThreadsListHandle tlh(current);
 
     for (int i = 0; i < request_count; i++) {
       JavaThread *java_thread = NULL;
@@ -1013,19 +1013,20 @@ JvmtiEnv::SuspendAllVirtualThreads(jint except_count, const jthread* except_list
     return JVMTI_ERROR_NONE; // Nothing to do when there are no virtual threads;
   }
   JavaThread* current = JavaThread::current();
-  ThreadsListHandle tlh(current);
-  jvmtiError err = JvmtiEnvBase::check_thread_list(except_count, except_list);
-  if (err != JVMTI_ERROR_NONE) {
-    return err;
-  }
   HandleMark hm(current);
   Handle self_tobj = Handle(current, NULL);
 
   {
     ResourceMark rm(current);
     JvmtiVTMSTransitionDisabler disabler(true);
+    ThreadsListHandle tlh(current);
     GrowableArray<jthread>* elist = new GrowableArray<jthread>(except_count);
 
+    jvmtiError err = JvmtiEnvBase::check_thread_list(except_count, except_list);
+    if (err != JVMTI_ERROR_NONE) {
+      return err;
+    }
+
     // Collect threads from except_list for which resumed status must be restored.
     for (int idx = 0; idx < except_count; idx++) {
       jthread thread = except_list[idx];

diff --git a/src/hotspot/share/runtime/thread.cpp b/src/hotspot/share/runtime/thread.cpp
index e48102883af..768cf93ef6c 100644
--- a/src/hotspot/share/runtime/thread.cpp
+++ b/src/hotspot/share/runtime/thread.cpp
@@ -1778,8 +1778,8 @@ bool JavaThread::java_suspend() {
   assert(!is_VTMS_transition_disabler(), ""no suspend allowed for VTMS transition disablers"");
 #endif
 
-  guarantee(Thread::is_JavaThread_protected_by_TLH(/* target */ this),
-            ""missing ThreadsListHandle in calling context."");
+  guarantee(Thread::is_JavaThread_protected(/* target */ this),
+            ""target JavaThread is not protected in calling context."");
   return this->handshake_state()->suspend();
 };;;","2022-05-24 22:46;dholmes;Moving the TLH to after JvmtiVTMSTransitionDisabler seems okay as long as java_thread won't be accessed outside the scope of the TLH. (I can't tell from the diff).

I've looked at JavaThread::java_suspend() and it seems to me that it is wrong to use Thread::is_JavaThread_protected_by_TLH as there is nothing to prevent the target thread from being the current thread. So that should be changed to Thread::is_JavaThread_protected.

I've also looked at Handshake::execute and it seems wrong too. The async version has an explicit check:

void Handshake::execute(AsyncHandshakeClosure* hs_cl, JavaThread* target) {
  jlong start_time_ns = os::javaTimeNanos();
  AsyncHandshakeOperation* op = new AsyncHandshakeOperation(hs_cl, target, start_time_ns);

  guarantee(target != nullptr, ""must be"");

  Thread* current = Thread::current();
  if (current != target) {
    // Another thread is handling the request and it must be protecting
    // the target.
    guarantee(Thread::is_JavaThread_protected_by_TLH(target),
              ""missing ThreadsListHandle in calling context."");
  }

so I think a bug should be filed for that.;;;","2022-05-24 23:15;sspitsyn;David, thank you for checking and confirming!
I'll post a PR shortly and file a bug on the guarantee in Handshake::execute.
My test results in the repo-loom are good.;;;","2022-05-24 23:47;sspitsyn;Filed related bug on the guarantee in Handshake::execute:
 JDK-8287281 adjust guarantee in Handshake::execute for the case of target thread being current ;;;","2022-05-25 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8878
Date: 2022-05-25 07:23:36 +0000;;;","2022-05-25 17:32;dukebot;Changeset: 94811c0d
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-05-26 00:29:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/94811c0dc7c20b0e7cb2649fe8da5061ce3d6246
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Held monitor count,JDK-8286957,5075178,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rehn,rehn,rehn,2022-05-18 05:03,2022-07-13 23:41,2023-10-01 09:56,2022-07-08 00:15,19,,,,,,,,,,,20,hotspot,,0,loom,sync,,,,,,,,,,,,,,,,,,,"The implementation counts high in the abstraction, which makes it needing to add counting in multiple places and some locking is not counted.

Today the missed locking count works due to we only mount continuations in controlled environment. In an uncontrolled environment it can create some issue.

Third, since the counting is not counting every held monitor it cannot be used for other purposes.

For these reason we should push down the counting near the actual locking/unlocking and make sure it is exact.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x5z7:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-06-19 23:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/8945
Date: 2022-05-30 11:04:11 +0000;;;","2022-07-08 00:15;dukebot;Changeset: ac399e97
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2022-07-08 07:12:19 +0000
URL:       https://git.openjdk.org/jdk/commit/ac399e9777731e7a9cbc2ad3396acfa5358b1c76
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"G1: With virtualized remembered sets, maximum number of cards configured is wrong",JDK-8286943,5075162,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tschatzl,tschatzl,tschatzl,2022-05-18 01:45,2022-05-25 23:09,2023-10-01 09:56,2022-05-20 00:40,18,19,,,,,,,,,,19,hotspot,,0,gc-g1,gc-g1-remset,gc-pending-review,,,,,,,,,,,,,,,,,," https://github.com/openjdk/jdk/blob/master/src/hotspot/share/gc/g1/g1CardSet.cpp#L58

The max #cards in a heap region is passed to max_cards_in_card_set, but the heap range covered by a cardset container is not necessary a region. If the #cards_in_region is too large, multiple cardset containers are required to fully cover that heap range.


* This prevents upgrading a Howl container to Full with virtualized remembered sets (Heap regions >= 64M) as the (default) threshold for coarsening from Howl to Full is max_cards_in_cardset * 0.9, which is always higher than the value tested against (65k, max card set container element number).
* This also unnecessarily increases the bits used for inline ptrs


g1CardSet.cpp:58

                         (uint)HeapRegion::CardsPerRegion,                          /* max_cards_in_cardset */

(found by ayang)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275056,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x5vn:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-18 10:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8773
Date: 2022-05-18 15:22:03 +0000;;;","2022-05-20 00:40;dukebot;Changeset: 6569666b
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-05-20 07:39:26 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6569666b050e8b6f3a0aae7d14d96007a1e429b3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
InternalError: Exception during analyze,JDK-8286895,5075093,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,smarks,smarks,2022-05-17 08:53,2022-06-01 23:31,2023-10-01 09:56,2022-05-31 08:03,18,19,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"The following simple code causes jshell to emit a stack trace and exit. (Yes, the instanceof expression is actually illegal.)

jshell> Number n = 17
jshell> if (! n instanceof Integer i) {
   ...>     System.out.println(""not Integer"");
   ...> }

Exception in thread ""main"" java.lang.InternalError: Exception during analyze - java.lang.AssertionError
	at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:415)
	at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.<init>(TaskFactory.java:406)
	at jdk.jshell/jdk.jshell.TaskFactory.lambda$analyze$1(TaskFactory.java:178)
	at jdk.jshell/jdk.jshell.TaskFactory.lambda$runTask$4(TaskFactory.java:213)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskPool.getTask(JavacTaskPool.java:193)
	at jdk.jshell/jdk.jshell.TaskFactory.runTask(TaskFactory.java:206)
	at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:175)
	at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:161)
	at jdk.jshell/jdk.jshell.TaskFactory.analyze(TaskFactory.java:150)
	at jdk.jshell/jdk.jshell.Eval.trialCompile(Eval.java:738)
	at jdk.jshell/jdk.jshell.Eval.processStatement(Eval.java:713)
	at jdk.jshell/jdk.jshell.Eval.lambda$sourceToSnippets$1(Eval.java:237)
	at jdk.jshell/jdk.jshell.TaskFactory.lambda$parse$6(TaskFactory.java:255)
	at jdk.jshell/jdk.jshell.TaskFactory.lambda$runTask$4(TaskFactory.java:213)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskPool.getTask(JavacTaskPool.java:193)
	at jdk.jshell/jdk.jshell.TaskFactory.runTask(TaskFactory.java:206)
	at jdk.jshell/jdk.jshell.TaskFactory.parse(TaskFactory.java:140)
	at jdk.jshell/jdk.jshell.TaskFactory.parse(TaskFactory.java:240)
	at jdk.jshell/jdk.jshell.Eval.sourceToSnippets(Eval.java:197)
	at jdk.jshell/jdk.jshell.Eval.eval(Eval.java:133)
	at jdk.jshell/jdk.jshell.JShell.eval(JShell.java:493)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSource(JShellTool.java:3624)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processSourceCatchingReset(JShellTool.java:1348)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.processInput(JShellTool.java:1246)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.run(JShellTool.java:1217)
	at jdk.jshell/jdk.internal.jshell.tool.JShellTool.start(JShellTool.java:1001)
	at jdk.jshell/jdk.internal.jshell.tool.JShellToolBuilder.start(JShellToolBuilder.java:261)
	at jdk.jshell/jdk.internal.jshell.tool.JShellToolProvider.main(JShellToolProvider.java:120)
Caused by: java.lang.IllegalStateException: java.lang.AssertionError
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:383)
	at jdk.jshell/jdk.jshell.TaskFactory$AnalyzeTask.analyze(TaskFactory.java:412)
	... 27 more
Caused by: java.lang.AssertionError
	at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
	at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
	at jdk.compiler/com.sun.tools.javac.util.Bits.excl(Bits.java:220)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.newVar(Flow.java:1883)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.visitVarDef(Flow.java:2261)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:1027)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:444)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scan(Flow.java:1743)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitBindingPattern(TreeScanner.java:307)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.visitBindingPattern(Flow.java:2848)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBindingPattern.accept(JCTree.java:2270)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:444)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scan(Flow.java:1743)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitTypeTest(TreeScanner.java:303)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCInstanceOf.accept(JCTree.java:2214)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:444)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scan(Flow.java:1743)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.visitParens(TreeScanner.java:274)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCParens.accept(JCTree.java:2014)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:444)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scan(Flow.java:1743)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scanCond(Flow.java:2036)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.visitIf(Flow.java:2635)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIf.accept(JCTree.java:1553)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:444)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scan(Flow.java:1743)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:57)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.visitBlock(Flow.java:2276)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:444)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scan(Flow.java:1743)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.visitMethodDef(Flow.java:2179)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:444)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scan(Flow.java:1743)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.visitClassDef(Flow.java:2117)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:819)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:444)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.scan(Flow.java:1743)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.analyzeTree(Flow.java:2890)
	at jdk.compiler/com.sun.tools.javac.comp.Flow$AssignAnalyzer.analyzeTree(Flow.java:2872)
	at jdk.compiler/com.sun.tools.javac.comp.Flow.analyzeTree(Flow.java:221)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.flow(JavaCompiler.java:1377)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.flow(JavaCompiler.java:1341)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:404)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$analyze$1(JavacTaskImpl.java:379)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
	at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.analyze(JavacTaskImpl.java:379)
	... 28 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x5gb:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-05-24 04:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8866
Date: 2022-05-24 11:25:10 +0000;;;","2022-05-31 08:03;dukebot;Changeset: 171a7cdd
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-05-31 15:01:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/171a7cdd5d44265b17541e17304e9ebed376a9fd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Recent card set coarsening statistics wrong,JDK-8286893,5075090,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2022-05-17 08:39,2022-05-25 23:10,2023-10-01 09:56,2022-05-20 01:06,18,19,,,,,,,,,,19,hotspot,,0,gc-g1,gc-g1-remset,gc-pending-review,,,,,,,,,,,,,,,,,,"Running BigRamTester with a 20GB heap for a couple minutes, observing the coarsening statistics logs, the the data displayed after ""Coarsening (recent)"" seems a little bit abnormal:


GC(54) Coarsening (recent): Inline->AoC 2119482 (3188) [...]
GC(54) Coarsening (all): Inline->AoC 5064850 (6148) [...]
GC(55) Coarsening (recent): Inline->AoC 3012918 (3101) [...]
GC(55) Coarsening (all): Inline->AoC 5132400 (6289) [...]

I.e. GC(55) Coarsening (recent): Inline->AoC should be something like

GC(55) Coarsening (recent): Inline->AoC 67559 (41) [...]

After looking at G1CardSet::print_coarsen_stats() the recent coarsening stats are calculated by:

current total coarsening - coarsening happened in previous (the one before the latest) GC cycle

but should be

current total coarsening - previous total coarsening

(reported in https://mail.openjdk.java.net/pipermail/hotspot-gc-dev/2022-May/039346.html )",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x5fn:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-19 02:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8785
Date: 2022-05-19 09:41:27 +0000;;;","2022-05-20 01:06;dukebot;Changeset: 828dc89a
Author:    tqxia <txiadev@gmail.com>
Committer: Hui Shi <hshi@openjdk.org>
Date:      2022-05-20 08:04:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/828dc89ab83682b0e08f056b6ca557967d5b3ee5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
thread_local causes undefined symbol error with XL C,JDK-8286891,5075088,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsteele,tsteele,tsteele,2022-05-17 08:37,2022-05-25 23:13,2023-10-01 09:56,2022-05-24 09:27,,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"After JDK-8282191, the following error is encountered when building with xlc on AIX while linking libjvm.so:

ld: 0711-317 ERROR: Undefined symbol: ._ZTH13threadContext
ld: 0711-344 See the loadmap file /build_aix/hotspot/variant-server/libjvm/objs/libjvm.loadmap for more information.
gmake[3]: *** [lib/CompileJvm.gmk:149:  /build_aix/support/modules_libs/java.base/server/libjvm.so] Error 8
 
gmake[2]: *** [make/Main.gmk:252: hotspot-server-libs] Error 2

I believe this to be a bug in xlc that surfaces when using 'thread_local' with a struct containing a dtor.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282469,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,"0|i2x5f7:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-18 00:22;dholmes;When allowing use of C++ thread_local was proposed and discussed no issues were raised about any support problems on any platform, or with any compiler.

The code in question needs the destructor support.;;;","2022-05-18 00:27;dholmes;I found this, but nothing else of relevance:

https://stackoverflow.com/questions/56326039/aix-xlclang-thread-local-variables-give-linker-error-undefined-symbols
;;;","2022-05-18 08:33;tsteele;Hi David,

Thanks for your comments.

> When allowing use of C++ thread_local was proposed and discussed no issues were raised about any support problems on any platform, or with any compiler.

The change seems reasonable. I think it unearthed a new bug, so it makes sense no one saw it coming :-P. Thread_local is supported on AIX/XL C, and in my testing this issue only occurred when using thread_local with a struct/class that has a destructor but no user-defined constructor. I've also opened an issue with the xlc team, so we may see changes soon.

> https://stackoverflow.com/questions/56326039/aix-xlclang-thread-local-variables-give-linker-error-undefined-symbols

A good find. That is the issue to a 'T'. Unfortunately, because of the destructor, using __thread as the the OP did is not feasible (I tried it when I found that issue last week).

Tyler;;;","2022-05-19 07:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8754
Date: 2022-05-17 15:56:28 +0000;;;","2022-05-24 09:27;dukebot;Changeset: 25080e0c
Author:    Tyler Steele <tsteele@openjdk.org>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2022-05-24 16:24:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/25080e0c3ac75ea2b9f04fcbca37b96c46ea3473
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove logging from search.js,JDK-8286887,5075081,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,hannesw,hannesw,hannesw,2022-05-17 06:59,2022-05-25 23:11,2023-10-01 09:56,2022-05-23 13:02,,,,,,,,,,,,19,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,With JDK-8248863 a call to `console.log()` was inadvertently added to search.js which should be removed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x5dn:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-05-17 07:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8752
Date: 2022-05-17 14:13:38 +0000;;;","2022-05-23 13:02;dukebot;Changeset: 9df93a18
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2022-05-23 20:01:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9df93a180c8b6e390bdecd13f7abbc98be9c8ce6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] remove interface injection tests runtime/valhalla/inlinetypes/identityObject/TestIdentityObject.java & runtime/valhalla/inlinetypes/primitiveObject/TestPrimitiveObject.java	,JDK-8286877,5075071,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dsimms,dsimms,dsimms,2022-05-17 06:11,2022-05-17 22:10,2023-10-01 09:56,2022-05-17 22:10,repo-valhalla,,,,,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,"[lworld] remove interface injection tests;

runtime/valhalla/inlinetypes/identityObject/TestIdentityObject.java
runtime/valhalla/inlinetypes/primitiveObject/TestPrimitiveObject.java	

No longer required since JDK-8286491",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286491,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x5bf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-17 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/690
Date: 2022-05-17 13:17:21 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NMT.test_unaliged_block_address_vm_assert fails if using clang toolchain,JDK-8286876,5075070,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jsjolen,ayang,ayang,2022-05-17 05:57,2023-02-08 23:36,2023-10-01 09:56,2023-02-02 02:16,19,,,,,,,,,,,21,hotspot,,0,nmt,,,,,,,,,,,,,,,,,,,,"`make CONF=debug test TEST=""gtest:NMT.test_unaliged_block_address_vm_assert""` fails if using the clang toolchain (`--with-toolchain-type=clang`) to build openjdk.

ENV: Clang 14",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x5b7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-17 05:58;ayang;I narrowed it down to `is_aligned(this, sizeof(uint64_t))` in `MallocHeader::check_block_integrity`. In the generated assembly, this call is essentially optimized to be `true`.

A minimal C++ snippet reproducer:

```
#include <cstdint>

struct A {
  const uint64_t _size;
  const uint32_t _mst_marker;
  const uint8_t _flags;
  const uint8_t _unused;
  uint16_t _canary;
  bool f();
};

bool A::f() {
 return ((uintptr_t)this & 7) == 0;
};
```

```
$ clang++ -c -O tmp.cc; objdump -M intel --source tmp.o > tmp.s
```

The generated assembly looks sth like:

```
0000000000000000 <_ZN1A1fEv>:
   0:	b0 01                	mov    al,0x1  ; <---- here 
   2:	c3                   	ret    
```

According to https://eel.is/c++draft/expr.static.cast:
""""""
A prvalue of type “pointer to cv1 void” can be converted to a prvalue of type “pointer to cv2 T”, where T is an object type and cv2 is the same cv-qualification as, or greater cv-qualification than, cv1.
If the original pointer value represents the address A of a byte in memory and A does not satisfy the alignment requirement of T, then the resulting pointer value is unspecified.
""""""

I believe `(MallocHeader*)((char*)memblock - sizeof(MallocHeader));` in `MallocTracker::malloc_header` can be problematic.;;;","2022-11-28 06:02;jsjolen;Switching to reinterpret_cast<> produces the same code on x64 for the reproduction given, quoting https://eel.is/c++draft/expr.reinterpret.cast :

""A pointer can be explicitly converted to any integral type large enough to hold all values of its type. The mapping function is implementation-defined.""

Doesn't the reproduction depend on alignment? Clang knows that A must be aligned, and therefore it knows the lowest 3 bits are 0, and therefore it will always = to true.;;;","2022-11-30 04:41;jsjolen;Wisdom of Robbin: You shall not cast a pointer to one with a different alignment. So MallocTracker::malloc_header's code ought to be problematic in itself.;;;","2022-12-01 11:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11465
Date: 2022-12-01 19:47:16 +0000;;;","2023-02-02 02:16;dukebot;Changeset: 7b6ac41a
Author:    Johan Sjölen <jsjolen@openjdk.org>
Date:      2023-02-02 10:14:26 +0000
URL:       https://git.openjdk.org/jdk/commit/7b6ac41ab115f0fb715d32b19bec184ed53d0cd7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refactor add/modify notification icon (TrayIcon),JDK-8286872,5075065,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-05-17 05:27,2022-11-15 07:19,2023-10-01 09:56,2022-05-19 13:05,19,7,,,,,,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-cleanup,refactoring,sustaining,,,,,,,,,,,,,,"AwtTrayIcon::WmTaskbarCreated [1] and AwtTrayIcon::_UpdateIcon [2] have duplicate code:

    BOOL result = trayIcon->SendTrayMessage(jupdate == JNI_TRUE ? NIM_MODIFY : NIM_ADD);
    // 6270114: Instructs the taskbar to behave according to the Shell version 5.0
    if (result && jupdate == JNI_FALSE) {
        trayIcon->SendTrayMessage(NIM_SETVERSION);
    }

The only difference is the usage of jupdate which controls whether the icon is to be added or modified.

These could be refactored into separate methods to avoid code duplication, especially in the case of adding where another method must be called.

[1] https://github.com/openjdk/jdk/blob/7b988b31c661c6e3e58cf8ced81732e40a79d4f5/src/java.desktop/windows/native/libawt/windows/awt_TrayIcon.cpp#L477
[2] https://github.com/openjdk/jdk/blob/7b988b31c661c6e3e58cf8ced81732e40a79d4f5/src/java.desktop/windows/native/libawt/windows/awt_TrayIcon.cpp#L796",,,,,,,,,,JDK-8291498,JDK-8297048,JDK-8291500,JDK-8296864,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286838,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2x5a3:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-05-17 06:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8749
Date: 2022-05-17 13:02:49 +0000;;;","2022-05-19 13:05;dukebot;Changeset: 9f562ef7
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-05-19 20:04:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9f562ef7546c80e6ddce7b932f3f5ca17c741d21
;;;","2022-11-10 03:12;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Risk: follow up to 8255439 which we should take.
Clean backport.
Test of 8255439 passes. SAP nighlty testing passes (on win and others).;;;","2022-11-10 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/871
Date: 2022-11-10 11:10:59 +0000;;;","2022-11-11 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1513
Date: 2022-11-11 10:21:15 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak with RepeatCompilation,JDK-8286870,5075064,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2022-05-17 04:21,2022-06-24 01:09,2023-10-01 09:56,2022-05-18 04:16,17,18,19,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,memory-leak,noreg-hard,oracle-triage-11,oracle-triage-19,,,,,,,,,,,,,,,"The diagnostic RepeatCompilation option added by JDK-8248398 does not free memory between compilations, leading to a (temporary) memory leak and OOMEs when repeating memory intensive compilations.",,,,,,,,,,JDK-8288798,JDK-8289122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248398,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x59v:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-17 04:23;thartmann;ILW = Memory leak leading to OOMEs during compilation, with diagnostic VM option that is only used for debugging purposes, no workaround = MLH = P4;;;","2022-05-17 04:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8744
Date: 2022-05-17 11:50:38 +0000;;;","2022-05-18 04:16;dukebot;Changeset: 69ff86a3
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-05-18 11:12:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/69ff86a32088d9664e5e0dae12edddc0643e3fd3
;;;","2022-06-21 00:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/160
Date: 2022-06-21 07:38:57 +0000;;;","2022-06-21 10:53;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Very tirivial fix, low risk.
Clean backport.
 SAP nightly testing passed.;;;","2022-06-21 11:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/488
Date: 2022-06-21 18:02:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] runtime/valhalla/inlinetypes/testSupers/TestSuperClasses.java refers to IdentityObject interface,JDK-8286864,5075060,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dsimms,dsimms,dsimms,2022-05-17 02:37,2022-05-17 22:10,2023-10-01 09:56,2022-05-17 22:10,repo-valhalla,,,,,,,,,,,repo-valhalla,hotspot,,0,lw3,lworld,,,,,,,,,,,,,,,,,,,"Test refers to IdentityObject interface, which was removed by JDK-8286491",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286491,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x58z:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-17 03:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/689
Date: 2022-05-17 10:12:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException on extent-local variables,JDK-8286859,5074998,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aph,webbuggrp,webbuggrp,2022-05-16 05:38,2022-05-24 05:45,2023-10-01 09:56,2022-05-24 05:45,repo-loom,,,,,,,,,,,repo-loom,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
The problem arises in various environments:

1) Windows 11 Pro: Version 21H2, OS build 22000.675
PROCESSOR_IDENTIFIER: Intel64 Family 6 Model 142 Stepping 11, GenuineIntel
openjdk version ""19-loom"" 2022-09-20
OpenJDK Runtime Environment (build 19-loom+6-625)
OpenJDK 64-Bit Server VM (build 19-loom+6-625, mixed mode, sharing)

2) Linux VOG 5.10.16.3-microsoft-standard-WSL2 #1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
/proc/cpuinfo:
vendor_id       : GenuineIntel
cpu family      : 6
model           : 142
model name      : Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz
stepping        : 11
microcode       : 0xffffffff
cpu MHz         : 1992.007
cache size      : 8192 KB
physical id     : 0
siblings        : 8
core id         : 0
cpu cores       : 4
apicid          : 0
initial apicid  : 0
fpu             : yes
fpu_exception   : yes
cpuid level     : 22
wp              : yes
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology cpuid pni pclmulqdq vmx ssse3 fma cx16 pcid sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single ssbd ibrs ibpb stibp tpr_shadow vnmi ept vpid ept_ad fsgsbase bmi1 avx2 smep bmi2 erms invpcid rdseed adx smap clflushopt xsaveopt xsavec xgetbv1 xsaves flush_l1d arch_capabilities
vmx flags       : vnmi invvpid ept_x_only ept_ad ept_1gb tsc_offset vtpr ept vpid unrestricted_guest ept_mode_based_exec
bugs            : spectre_v1 spectre_v2 spec_store_bypass mds swapgs itlb_multihit srbds
bogomips        : 3984.01
clflush size    : 64
cache_alignment : 64
address sizes   : 39 bits physical, 48 bits virtual
openjdk 19-loom 2022-09-20
OpenJDK Runtime Environment (build 19-loom+6-625)
OpenJDK 64-Bit Server VM (build 19-loom+6-625, mixed mode, sharing)

3) Linux fe3cbf72a8c1 5.4.188+ #1 SMP Sun Apr 24 10:03:06 PDT 2022 x86_64 x86_64 x86_64 GNU/Linux
/proc/cpuinfo:
vendor_id	: GenuineIntel
cpu family	: 6
model		: 79
model name	: Intel(R) Xeon(R) CPU @ 2.20GHz
stepping	: 0
microcode	: 0x1
cpu MHz		: 2199.998
cache size	: 56320 KB
physical id	: 0
siblings	: 2
core id		: 0
cpu cores	: 1
apicid		: 0
initial apicid	: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single ssbd ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx smap xsaveopt arat md_clear arch_capabilities
bugs		: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa
bogomips	: 4399.99
clflush size	: 64
cache_alignment	: 64
address sizes	: 46 bits physical, 48 bits virtual
power management:
openjdk 19-loom 2022-09-20
OpenJDK Runtime Environment (build 19-loom+6-625)
OpenJDK 64-Bit Server VM (build 19-loom+6-625, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
I am exploring capabilites of the Loom project, in particular the StructuredTaskScope and ExtentLocal (JEP 425, JDK-8286666). I wrote a piece of code which is pretty similar to the example in JavaDocs on StructuredTaskScope. The code raises the following exception:

java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.setKeyAndObjectAt(ExtentLocal.java:672)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.put(ExtentLocal.java:636)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.slowGet(ExtentLocal.java:446)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.get(ExtentLocal.java:437)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:65)
	at ExtentLocalBreakingDemo.lambda$doFill$1(ExtentLocalBreakingDemo.java:53)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:326)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:319)
	
Since the number of iterations before the error varies from launch to launch and depends on the N variable, I think that it could be a kind of data race on the extentLocalCache, or the actual value is lost during the context switch. If blocks (1) and (2) are swapped, the result is the same.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
java --source 19 --enable-preview --add-modules jdk.incubator.concurrent ExtentLocalBreakingDemo.java

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Iteration 0
OK
Iteration 1
OK
...
Iteration 999
OK
ACTUAL -
Iteration 0
OK
Iteration 1
OK
Iteration 2
OK
Iteration 3
OK
Iteration 4
OK
Iteration 5
OK
Iteration 6
OK
Iteration 7
OK
Iteration 8
OK
Iteration 9
OK
Iteration 10
OK
Iteration 11
OK
Iteration 12
OK
Iteration 13
OK
Iteration 14
OK
Iteration 15
OK
Iteration 16
OK
Iteration 17
OK
Iteration 18
OK
Iteration 19
OK
Iteration 20
OK
Iteration 21
OK
Iteration 22
OK
Iteration 23
OK
Iteration 24
OK
Iteration 25
OK
Iteration 26
OK
Iteration 27
OK
Iteration 28
OK
Iteration 29
OK
Iteration 30
OK
Iteration 31
OK
Iteration 32
OK
Iteration 33
OK
Iteration 34
OK
Iteration 35
OK
Iteration 36
OK
Iteration 37
OK
Iteration 38
OK
Iteration 39
OK
Iteration 40
OK
Iteration 41
VirtualThread[#83972]/runnable@ForkJoinPool-1-worker-2
java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.setKeyAndObjectAt(ExtentLocal.java:672)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.put(ExtentLocal.java:636)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.slowGet(ExtentLocal.java:446)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.get(ExtentLocal.java:437)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:64)
	at ExtentLocalBreakingDemo.lambda$doFill$1(ExtentLocalBreakingDemo.java:52)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:326)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:319)
VirtualThread[#84000]/runnable@ForkJoinPool-1-worker-2
java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.setKeyAndObjectAt(ExtentLocal.java:672)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.put(ExtentLocal.java:636)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.slowGet(ExtentLocal.java:446)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.get(ExtentLocal.java:437)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:64)
	at ExtentLocalBreakingDemo.lambda$doFill$1(ExtentLocalBreakingDemo.java:52)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:326)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:319)
VirtualThread[#84021]/runnable@ForkJoinPool-1-worker-2
java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.setKeyAndObjectAt(ExtentLocal.java:672)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.put(ExtentLocal.java:636)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.slowGet(ExtentLocal.java:446)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.get(ExtentLocal.java:437)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:64)
	at ExtentLocalBreakingDemo.lambda$doFill$2(ExtentLocalBreakingDemo.java:53)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:326)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:319)
VirtualThread[#84037]/runnable@ForkJoinPool-1-worker-2
java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.setKeyAndObjectAt(ExtentLocal.java:672)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.put(ExtentLocal.java:636)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.slowGet(ExtentLocal.java:446)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.get(ExtentLocal.java:437)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:64)
	at ExtentLocalBreakingDemo.lambda$doFill$2(ExtentLocalBreakingDemo.java:53)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:326)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:319)
VirtualThread[#83981]/runnable@ForkJoinPool-1-worker-2
java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.setKeyAndObjectAt(ExtentLocal.java:672)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.put(ExtentLocal.java:636)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.slowGet(ExtentLocal.java:446)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.get(ExtentLocal.java:437)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:64)
	at ExtentLocalBreakingDemo.lambda$doFill$2(ExtentLocalBreakingDemo.java:53)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:326)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:319)
VirtualThread[#84008]/runnable@ForkJoinPool-1-worker-2
java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.setKeyAndObjectAt(ExtentLocal.java:672)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.put(ExtentLocal.java:636)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.slowGet(ExtentLocal.java:446)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.get(ExtentLocal.java:437)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:64)
	at ExtentLocalBreakingDemo.lambda$doFill$1(ExtentLocalBreakingDemo.java:52)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:326)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:319)
Exception in thread ""main"" java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:74)
	at ExtentLocalBreakingDemo.lambda$fill$0(ExtentLocalBreakingDemo.java:34)
	at java.base/jdk.internal.vm.ExtentLocalContainer.runWithoutScope(ExtentLocalContainer.java:114)
	at java.base/jdk.internal.vm.ExtentLocalContainer.run(ExtentLocalContainer.java:100)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Carrier.run(ExtentLocal.java:327)
	at ExtentLocalBreakingDemo.fill(ExtentLocalBreakingDemo.java:34)
	at ExtentLocalBreakingDemo.main(ExtentLocalBreakingDemo.java:18)
Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.StructuredTaskScope$ShutdownOnFailure.throwIfFailed(StructuredTaskScope.java:1159)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:57)
	at ExtentLocalBreakingDemo.lambda$fill$0(ExtentLocalBreakingDemo.java:34)
	at java.base/jdk.internal.vm.ExtentLocalContainer.runWithoutScope(ExtentLocalContainer.java:114)
	at java.base/jdk.internal.vm.ExtentLocalContainer.run(ExtentLocalContainer.java:100)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Carrier.run(ExtentLocal.java:327)
	at ExtentLocalBreakingDemo.fill(ExtentLocalBreakingDemo.java:34)
	at ExtentLocalBreakingDemo.main(ExtentLocalBreakingDemo.java:18)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:434)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:205)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
Caused by: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:74)
	at ExtentLocalBreakingDemo.lambda$doFill$2(ExtentLocalBreakingDemo.java:53)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:326)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:319)
Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.StructuredTaskScope$ShutdownOnFailure.throwIfFailed(StructuredTaskScope.java:1159)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:57)
	... 6 more
Caused by: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:74)
	... 6 more
Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.StructuredTaskScope$ShutdownOnFailure.throwIfFailed(StructuredTaskScope.java:1159)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:57)
	... 6 more
Caused by: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:74)
	... 6 more
Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.StructuredTaskScope$ShutdownOnFailure.throwIfFailed(StructuredTaskScope.java:1159)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:57)
	... 6 more
Caused by: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:74)
	... 6 more
Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.StructuredTaskScope$ShutdownOnFailure.throwIfFailed(StructuredTaskScope.java:1159)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:57)
	... 6 more
Caused by: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:74)
	... 6 more
Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.StructuredTaskScope$ShutdownOnFailure.throwIfFailed(StructuredTaskScope.java:1159)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:57)
	... 6 more
Caused by: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:74)
	... 6 more
Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.StructuredTaskScope$ShutdownOnFailure.throwIfFailed(StructuredTaskScope.java:1159)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:57)
	... 6 more
Caused by: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:74)
	at ExtentLocalBreakingDemo.lambda$doFill$1(ExtentLocalBreakingDemo.java:52)
	... 5 more
Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.StructuredTaskScope$ShutdownOnFailure.throwIfFailed(StructuredTaskScope.java:1159)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:57)
	... 6 more
Caused by: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:74)
	at ExtentLocalBreakingDemo.lambda$doFill$2(ExtentLocalBreakingDemo.java:53)
	... 5 more
Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.StructuredTaskScope$ShutdownOnFailure.throwIfFailed(StructuredTaskScope.java:1159)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:57)
	... 6 more
Caused by: java.lang.RuntimeException: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:74)
	at ExtentLocalBreakingDemo.lambda$doFill$1(ExtentLocalBreakingDemo.java:52)
	... 5 more
Caused by: java.lang.NullPointerException: Cannot store to object array because ""cache"" is null
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.setKeyAndObjectAt(ExtentLocal.java:672)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal$Cache.put(ExtentLocal.java:636)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.slowGet(ExtentLocal.java:446)
	at jdk.incubator.concurrent/jdk.incubator.concurrent.ExtentLocal.get(ExtentLocal.java:437)
	at ExtentLocalBreakingDemo.doFill(ExtentLocalBreakingDemo.java:64)
	... 6 more

---------- BEGIN SOURCE ----------
import java.util.concurrent.Future;
import jdk.incubator.concurrent.ExtentLocal;
import jdk.incubator.concurrent.StructuredTaskScope;

public class ExtentLocalBreakingDemo {

  private static final int ITERATIONS = 10_000;
  private static final int THRESHOLD = 64;
  private static final int N = 50_000;
  private static final ExtentLocal<int[]> DATA = ExtentLocal.newInstance();

  public static void main(String[] args) throws Exception {

    for (int i = 0; i < ITERATIONS; ++i) {
      System.out.println(""Iteration "" + i);
      int[] data = new int[N];

      fill(data, 42);

      for (int j = 0; j < N; ++j) {
        if (data[j] != 42) {
          System.out.println(""data["" + j + ""] != 42"");
          System.exit(1);
        }
      }

      System.out.println(""OK"");
    }
  }

  private static void fill(int[] arr, int value) {
    ExtentLocal
        .where(DATA, arr)
        .run(() -> doFill(value, 0, arr.length));
  }

  private static Void doFill(int value, int begin, int end) {
    if (end <= begin) {
      return null;
    }

    if (end - begin <= THRESHOLD) {
      for (int i = begin; i != end; ++i) {
        DATA.get()[i] = value;
      }
      return null;
    }

    try (var scope = new StructuredTaskScope.ShutdownOnFailure()) {
      int middle = begin + (end - begin) / 2;

      Future<Void> left = scope.fork(() -> doFill(value, begin, middle));
      Future<Void> right = scope.fork(() -> doFill(value, middle, end));
      
      // (1) BEGIN
      scope.join();
      scope.throwIfFailed();
      // (1) END

      // (2) BEGIN
      try {
        left.get();
        right.get();
        DATA.get();
      } catch (NullPointerException e) {
        synchronized (ExtentLocalBreakingDemo.class) {
          System.err.println(Thread.currentThread());
          e.printStackTrace();
        }
        throw e;
      }
      // (2) END
    } catch (Exception e) {
      throw new RuntimeException(e);
    }

    return null;
  }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-17 01:10;tongwan;ExtentLocalBreakingDemo.java;https://bugs.openjdk.org/secure/attachment/98963/ExtentLocalBreakingDemo.java",,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x4v7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-05-17 01:25;tongwan;The observations on Windows 10:
JDK 19 Loom+6: Failed, NullPointerException thrown.;;;","2022-05-19 10:15;aph;Well, that's extremely odd. Thank you.

Seems that a virtual thread most have been unmounted and remounted without restoring the extent-local cache. It's going to take me some time to figure out that one.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javac error on invalid jar should only print filename,JDK-8286855,5075051,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,clanger,clanger,clanger,2022-05-17 00:11,2022-08-31 01:21,2023-10-01 09:56,2022-05-30 08:02,19,,,,,,,,,,,19,tools,,0,jdk11u-critical-request,jdk11u-critical-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-critical-request,jdk17u-critical-yes,jdk18u-fix-request,jdk18u-fix-yes,,,,,,,,,,,"With the change for JDK-8286444, javac prints the path of an invalid jar when it is encountered. This happens to be the filename only if the path is relative but could also be a full path. This should be unified to always print the jar name only.",,,,,,,,,,JDK-8287687,JDK-8287929,JDK-8289821,JDK-8287995,JDK-8291856,JDK-8291855,JDK-8287940,JDK-8287998,JDK-8289820,JDK-8287957,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286444,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b18,19,,,,,,,,"0|i2x56z:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-05-26 03:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8900
Date: 2022-05-26 09:58:12 +0000;;;","2022-05-30 08:02;dukebot;Changeset: 1606d554
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-05-30 15:01:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1606d5545b8daad840575b7cfd97b94fd8a3d41d
;;;","2022-06-01 02:15;clanger;Fix request (18u, 17u, 11u):
This is a follow up backport for JDK-8286444. Applies cleanly. Trivial, no regressions spotted. 17u-critical and 11u-critical are requested because JDK-8286444 has been amended to 11.0.16 and 17.0.4.;;;","2022-06-01 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/146
Date: 2022-06-01 09:12:23 +0000;;;","2022-06-03 22:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u/pull/344
Date: 2022-06-04 05:07:39 +0000;;;","2022-06-03 22:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u/pull/44
Date: 2022-06-04 05:12:47 +0000;;;","2022-07-06 02:34;yan;Fix request (15u, 13u):
should backport the necessary follow-up. Clean backport. All relevant tests (all run) run OK.;;;","2022-07-06 02:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/366
Date: 2022-07-06 09:37:22 +0000;;;","2022-07-06 02:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/227
Date: 2022-07-06 09:37:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rotate vectors don't support byte or short,JDK-8286847,5075042,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wanghaomin,wanghaomin,wanghaomin,2022-05-16 19:53,2022-06-21 10:52,2023-10-01 09:56,2022-06-08 21:06,18,19,,,,,,,,,,19,hotspot,,0,c2,c2-superword,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,,,,,,,,,,,,,,,"  static void test_fun(byte[] a0, int[] b0, byte[] c0) {
    for (int i=0; i<ARRLEN; i++) {
      c0[i] = (byte)(a0[i] << (7) | a0[i] >>> (-7));
    }   
  }

when I implement RotateLeftV in loongarch.ad, I found this executed by c2 vector and executed by interpreter are not equal.

It's executed on x86 would create an assert error.

#
#  Internal Error (/home/wanghaomin/jdk/src/hotspot/share/opto/vectornode.cpp:347), pid=26469, tid=26485
#  assert(false) failed: not supported: byte
#",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271366,,,,,,,,,,,,,,,,,,generic,,,,,,,b11,18,,generic,,,,,,"0|i2x54z:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-16 20:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8740
Date: 2022-05-17 03:09:12 +0000;;;","2022-05-17 00:30;chagedorn;ILW = C2 assertion in Superword due to unsupported vector rotate opcode, only affects debug builds (bailout in product), use -XX:-UseSuperWord or disable compilation of affected method =  MLM = P4;;;","2022-05-17 00:39;chagedorn;Starts to fail with JDK-8271366 which changed `VectorNode::opcode()`.;;;","2022-06-07 01:47;chagedorn;Hi [~wanghaomin], do you think that the review will be completed by Thursday? Since this is a P4 bug, it will be deferred to JDK 20 after the fork on Thursday.;;;","2022-06-08 20:07;wanghaomin;I'm sorry to reply you so late. Maybe can be completed this day.;;;","2022-06-08 21:06;dukebot;Changeset: 3419beec
Author:    wanghaomin <wanghaomin@loongson.cn>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2022-06-09 04:00:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3419beec7fa646ab30f55ac27fdb47c4c1e1e764
;;;","2022-06-08 23:50;chagedorn;Great, thanks for your answer and getting this in before the fork!;;;","2022-06-21 02:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/169
Date: 2022-06-21 08:57:15 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test/jdk/javax/swing/plaf/aqua/CustomComboBoxFocusTest.java fails on mac aarch64,JDK-8286846,5075040,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,landrews,landrews,2022-05-16 19:40,2022-06-09 22:12,2023-10-01 09:56,2022-06-01 20:43,18,19,,,,,,,,,,19,client-libs,,0,aarch64,macos,sn_118,sn_119,tier4,,,,,,,,,,,,,,,,"test/jdk/javax/swing/plaf/aqua/CustomComboBoxFocusTest.java fails on 
Mac OS X 11.6.5 (aarch64) with following exception

----------System.out:(11/375)----------
Wait for screenshots...
Request focus on reference
Capture sceeenshot of reference
Target bounds: java.awt.Rectangle[x=0,y=46,width=80,height=26]
Target location: java.awt.Point[x=0,y=99]
Request focus on custom
Capture sceeenshot of custom
Target bounds: java.awt.Rectangle[x=0,y=92,width=80,height=26]
Target location: java.awt.Point[x=0,y=145]
Done
Compare screenshots...
----------System.err:(11/612)----------
java.lang.RuntimeException: Test failed.
	at CustomComboBoxFocusTest.main(CustomComboBoxFocusTest.java:90)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,,,"0|i2x54j:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-05-24 01:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8864
Date: 2022-05-24 08:28:57 +0000;;;","2022-06-01 20:43;dukebot;Changeset: d7341ae4
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-06-02 03:40:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d7341ae42e11fd08508c5f9c67c09c44b62da59b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
com/sun/jdi/RedefineCrossEvent.java failed with 1 threads completed while VM suspended,JDK-8286844,5075038,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dholmes,dholmes,2022-05-16 19:04,2023-02-02 12:08,2023-10-01 09:56,2022-07-21 11:17,19,,,,,,,,,,,20,core-svc,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier5,,,,,,,,,,,,,,,,,"Test: com/sun/jdi/RedefineCrossEvent.java

----------System.out:(25/1841)----------
vmOpts: '-Xmx768m -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14522/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5114ed3f-2bce-4ad0-946e-c12f797f0138/runs/45da6125-ea33-480c-bd2a-bc72e2320e34/testoutput/test-support/jtreg_open_test_jdk_jdk_svc/tmp -ea -esa'
javaOpts: '-ea -esa -XX:-UseNotificationThread'
JVM version:19-ea
JDI version: 19.0
JVM description: Java Debug Interface (Reference Implementation) version 19.0 
Java Debug Wire Protocol (Reference Implementation) version 19.0
JVM Debug Interface version 19.0
JVM version 19-ea (Java HotSpot(TM) 64-Bit Server VM, mixed mode, sharing)
Howdy!
Thread [0] group = 'main' name = 'main' daemon = false
Thread [1] group = 'system' name = 'Reference Handler' daemon = true
Thread [2] group = 'system' name = 'Finalizer' daemon = true
Thread [3] group = 'system' name = 'Signal Dispatcher' daemon = true
Thread [4] group = 'InnocuousThreadGroup' name = 'Common-Cleaner' daemon = true
Thread [5] group = 'system' name = 'Notification Thread' daemon = true
Thread [6] group = 'main' name = 'pool-1-thread-1' daemon = true
Thread [7] group = 'InnocuousThreadGroup' name = 'process reaper (pid 4419)' daemon = true
Thread [8] group = '<completed>' name = 'process reaper' daemon = true
Thread [9] group = 'AgentVMThreadGroup' name = 'AgentVMThread' daemon = false
Thread [10] group = 'JDI [301407389]' name = 'JDI Internal Event Handler' daemon = true
Thread [11] group = 'JDI [301407389]' name = 'JDI Target VM Interface' daemon = true
Thread [12] group = 'AgentVMThreadGroup' name = 'output reader' daemon = false
Thread [13] group = 'AgentVMThreadGroup' name = 'output reader' daemon = false
Thread [14] group = 'AgentVMThreadGroup' name = 'Thread-121' daemon = true
Goodbye from DebuggerThreadTarg!
----------System.err:(16/999)----------
[0ms] run args: [-redefstart, -redefevent, DebuggerThreadTarg]
[158ms] Redefining class DebuggerThreadTarg (loaded by instance of jdk.internal.loader.ClassLoaders$AppClassLoader(id=56))
[161ms] Redefining class DebuggerThreadTarg (loaded by instance of jdk.internal.loader.ClassLoaders$AppClassLoader(id=56))
[225ms] FAIL: 1 threads completed while VM suspended.
java.lang.Exception: DebuggerThreadTest: failed
	at DebuggerThreadTest.runTests(DebuggerThreadTest.java:126)
	at TestScaffold.startTests(TestScaffold.java:432)
	at DebuggerThreadTest.main(DebuggerThreadTest.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1585)
",,,,,,,,,,JDK-8301706,JDK-8298362,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x543:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-05-17 14:19;cjplummer;During triage there was a question as to whether or not this is a dup of an existing CR. I did some research and found JDK-8232839. This does not appear to be a dup. The failure mode is different. Also in this CR DebuggerThreadTest is failing, whereas in JDK-8232839 it is AfterThreadDeathTest that is failing.;;;","2022-05-17 14:30;cjplummer;The test description says:

 * @summary Test for JDI: Internal JDI helper threads should setDaemon(true)

However, the test seems to do a bit more than that. Specifically, if any thread seems to have completed during its execution, the test will fail. You can see the one completed thread in the test output:

 Thread [8] group = '<completed>' name = 'process reaper' daemon = true

I'm not sure why this thread sometimes completes, but it seems to be a test bug that it assumes no thread will complete.

I see two other instances of failures in the mach5 history, both in the loom repo. One failure was a month ago and the log shows the same process completing. The other is from Jan 25th. The log no longer exists for that failure.

Note that virtual threads are not involved in any of the failures. Possibly other changes in loom have triggered this test to start failing jdk. One that comes to mind is the code cache sweeper triggering GC's, although I thought after the loom merge into JDK, that did not happen unless virtual threads were enabled with --enable-preview.
;;;","2022-05-17 14:57;cjplummer;One additional thing to note. The failure message is misleading:

 [225ms] FAIL: 1 threads completed while VM suspended. 

The test does indeed do a debugger suspend, but that is done on the debugee. While the debugee is suspended the test is looking at test threads, not debugee threads. It uses ThreadGroup to iterate over all of the test threads, and expects any test Thread created by JDI to be a daemon thread:

 Thread [10] group = 'JDI [301407389]' name = 'JDI Internal Event Handler' daemon = true
 Thread [11] group = 'JDI [301407389]' name = 'JDI Target VM Interface' daemon = true 

So this part is all working fine, but the assumption that no test Thread should be completed while the test is running is presumptive. The test cannot possibly know about all Threads that might be created (and completed) while the test is running. Also, the test is not even doing a before and after check of all the threads. It just iterates over all the threads once. It determines that the thread has completed because its ThreadGroup is null.

I also noticed a change in the ThreadGroup for process reaper threads (and a slight change in the name of the threads). We used to have:

 Thread [4] group = 'system' name = 'process reaper' daemon = true
 Thread [5] group = 'system' name = 'process reaper' daemon = true

Now we have:

 Thread [7] group = 'InnocuousThreadGroup' name = 'process reaper (pid 4419)' daemon = true
 Thread [8] group = '<completed>' name = 'process reaper' daemon = true 

So the threadgroup has been changed to InnocuousThreadGroup. This might have something to do with why the threads are completing. I also noticed that currently when the test does pass, there is only one process reaper thread still alive (the first in the list above). So possibly normally this test passes because not only has the 2nd process reaper thread completed, but has also been freed.;;;","2022-05-23 10:14;cjplummer;There were a few changes recent changes related to the ""process reaper"" thread that may be impacting this test, but I still think it is a test bug to assume that there will be threads completing while the test is run.

JDK-8279488: ProcessBuilder inherits contextClassLoader when spawning a process reaper thread
JDK-8284165: Add pid to process reaper thread name 
<unknown>: change the process reaper ThreadGroup from ""system"" to ""InnocuousThreadGroup"" ;;;","2022-07-18 16:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9547
Date: 2022-07-18 23:13:14 +0000;;;","2022-07-21 11:17;dukebot;Changeset: 7ec0132a
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-07-21 18:14:40 +0000
URL:       https://git.openjdk.org/jdk/commit/7ec0132ad3129b805664c85351fe6d55041066fa
;;;","2023-01-31 07:38;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-01-31 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1134
Date: 2023-01-31 15:41:01 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaDoc pages call browser history API too often,JDK-8286832,5075022,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hannesw,hannesw,hannesw,2022-05-16 12:39,2022-05-25 23:11,2023-10-01 09:56,2022-05-23 13:12,16,17,18,,,,,,,,,19,tools,,0,noreg-hard,,,,,,,,,,,,,,,,,,,,"The workaround for JDK-8249133 causes problems when scrolling because it calls history.replaceState() too often. 

Firefox shows the following error message in the console: Too many calls to Location or History APIs within a short timeframe.

On Android's Chrome browser this causes scrolling to be sluggish.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x50j:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-05-17 06:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8751
Date: 2022-05-17 13:48:25 +0000;;;","2022-05-23 13:12;dukebot;Changeset: 6a192206
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2022-05-23 20:10:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6a192206b820bc22a2f143fa4631e3d707d6fa7c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
~HandshakeState should not touch oops,JDK-8286830,5075021,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,pchilanomate,zgu,zgu,2022-05-16 11:37,2023-01-26 09:36,2023-10-01 09:56,2022-06-02 06:34,19,,,,,,,,,,,19,hotspot,,0,redhat-interest,sync,threads,,,,,,,,,,,,,,,,,,"
#
#  Internal Error (/home/zhengyu/ws/jdk/src/hotspot/share/gc/shared/ptrQueue.cpp:38), pid=3890859, tid=3893922
#  assert(_buf == __null) failed: queue must be flushed before delete

and

#  Internal Error (/home/zhengyu/ws/jdk/src/hotspot/share/gc/shared/satbMarkQueue.cpp:230), pid=319590, tid=686903
#  assert(queue.is_active()) failed: precondition
#

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286333,,,,,JDK-8288497,JDK-8283898,,,,,,JDK-8283044,JDK-8284632,JDK-8288532,,,,,,"2022-05-16 11:37;zgu;hs_err_pid319590.log;https://bugs.openjdk.org/secure/attachment/98954/hs_err_pid319590.log","2022-05-16 12:11;zgu;hs_err_pid3890859.log;https://bugs.openjdk.org/secure/attachment/98958/hs_err_pid3890859.log",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x50b:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-05-16 13:58;zgu;Although I can only reproduce with Shenandoah, I believe it is an upstream bug introduced by JDK-8283044.

BarrierSet::on_thread_detach() is called from Threads::remove(), before destruction of the actual JavaThread. 

After JDK-8283044, JavaThread's HandshakeState can hold AsyncExceptionHandshake, when JavaThread's destructor is called, it triggers destruction of AsyncExceptionHandshake via destruction of JavaThread's HandshakeState, but AsyncExceptionHandshake's destructor releases exception handle, which can triggers GC barrier.

I don't think any oop operation should be allowed after a JavaThread is detached.

@kbarrett @tschatzl @stefank and @rkennke could you please comment?

;;;","2022-05-17 05:23;zgu;I am convinced that JDK-8283044 has fatal fault. It manipulates oop after JavaThread is removed from threads list, that means it no longer participants safepoints and its destructor can run through GC safepoints, where GCs do not anticipate any other threads to mutate heap.

 ;;;","2022-05-17 10:17;pchilanomate;The addition of ~HandshakeState to delete any remaining AsyncExceptionHandshake operations was added in the JDK-8284632 later fix, so changing the title.
If somebody from GC team can confirm we cannot do _exception.release(Universe::vm_global()), where _exception is an OopHandle, after BarrierSet::on_thread_detach() then we will have to redo that fix. The actual initial version of that fix posted by Dan (plus adding also a check in install_async_exception() to avoid installing an async exception after the JT moved to _thread_exiting) should work.;;;","2022-05-17 11:16;hseigel;ILW=HMM=P2;;;","2022-05-17 12:02;kbarrett;[~zgu] is correct - a Thread must not touch oops before on_thread_attach or after on_thread_detach.;;;","2022-05-17 13:52;pchilanomate;Testing patch based on Dan's original version where cleanup is done before executing BarrierSet::on_thread_detach().;;;","2022-05-18 04:02;dholmes;I think we need to carefully rethink this one. Dan's initial patch was specific to async-exceptions; the final patch was intended to be generic.

There is a point in thread termination where it stops being responsive to handshake requests. I'm not sure exactly where that is in relation to on_thread_detach() but it may be we can explicitly call the HandshakeState destructor prior to on_thread_detach().;;;","2022-05-18 04:03;dholmes;BTW I thought we had logic to detect touching an oop/oop-storage after on_thread_detach() is called ??;;;","2022-05-18 14:25;pchilanomate;[~dholmes], regarding your question about when a thread stops being responsive to handshake requests:
Once the exiting thread sets itself as _thread_terminated in Threads::remove() no more handshake closures will be executed against it, either by itself or the handshaker. Since the two async handshakes we have(suspend and async exceptions) are set inside a synchronous handshake that means no more of those two operations will be added to the queue anymore(for the suspend case is even before that, once the thread moves to _thread_exiting). We could do the cleanup of the async exceptions there before the detach() call, but we cannot guarantee anything about synchronous handshakes in the queue. There could still be synchronous handshakes in the queue, or even new ones added, it's just that the closures won't be executed. Even async handshakes could be added in theory, although that doesn't happen today.

I think a straightforward way to fix this is clean up async exceptions before the on_thread_detach() call as Dan had it initially. Then add a is_exiting() check in install_async_exception() to avoid adding new async operations after that cleanup (same check that SuspendThreadHandshake has). We could still keep the ~HandshakeState() code as it is but at least today it won't find any operation. Note: Currently we don't set _thread_exiting when JavaThread::exit() is called with destroy_vm=true but we should.

Another way to solve this could be to change ~AsyncExceptionHandshake to identify if it is the current thread exiting and handle the release to the ServiceThread as we do in ~JavaThread() with _threadObj for example. But I'm not convinced on that.;;;","2022-05-18 15:34;dholmes;[~pchilanomate] I thought we already had an is_exiting check to prevent any handshake operation from occurring with a target thread? That is the point where the initiator of the handshake should simply be told ""sorry the target has terminated"". I don't see how synchronous handshakes can be in the queue at that point. ??;;;","2022-05-18 15:57;pchilanomate;In HandshakeOperation::do_handshake() we check !is_terminated(), which basically means we execute the handshake if the state is _not_terminated or _thread_exiting. Only when the status is _thread_terminated or _vm_exited then we don't execute it. The HandshakeState::suspend_with_handshake() closure has its own check for _thread_exiting. 
I actually never understood why in do_handshake() we allow executing the closure for the _thread_exiting case. Maybe we should change that.

A handshaker could already be in Handshake::execute() with a valid reference to the target while the target is in Thread::remove() removing itself from the list. Depending on timing it could be that the operation was not added to the queue yet, or the handshaker already added the operation and is just looping waiting to find the target in a safe state.;;;","2022-05-19 12:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8795
Date: 2022-05-19 19:17:09 +0000;;;","2022-06-02 06:34;dukebot;Changeset: 5acac223
Author:    Patricio Chilano Mateo <pchilanomate@openjdk.org>
Date:      2022-06-02 13:32:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5acac2238fdc4ffe6ef290456e01cc559d811557
;;;","2022-06-15 11:54;dcubed;[~pchilanomate] I continued to stress test this fix. It's been bothering me that we
couldn't reproduce this failure mode without Shenandoah. While chasing this other
barrier bug:

    JDK-8288139 JavaThread touches oop after GC barrier is detached

I developed some code to help diagnose these types of issues and extracted
that code into the following subtask:

    JDK-8288497 add support for JavaThread::is_gc_barrier_detached()

I added the code from JDK-8288497 to my repo for stressing this bug (JDK-8286830)
and I optionally disabled the two key fixes from JDK-8286830:

diff --git a/src/hotspot/share/runtime/thread.cpp b/src/hotspot/share/runtime/thread.cpp
index 0c24f595cc0..6dee7844d68 100644
--- a/src/hotspot/share/runtime/thread.cpp
+++ b/src/hotspot/share/runtime/thread.cpp
@@ -1431,11 +1431,13 @@ void JavaThread::exit(bool destroy_vm, ExitType exit_type) {
     // before_exit() has already posted JVMTI THREAD_END events
   }
 
+if (UseNewCode2) {
   // Cleanup any pending async exception now since we cannot access oops after
   // BarrierSet::barrier_set()->on_thread_detach() has been executed.
   if (has_async_exception_condition()) {
     handshake_state()->clean_async_exception_operation();
   }
+}
 
   // The careful dance between thread suspension and exit is handled here.
   // Since we are in thread_in_vm state and suspension is done with handshakes,
@@ -1708,7 +1710,7 @@ void JavaThread::handle_async_exception(oop java_throwable) {
 void JavaThread::install_async_exception(AsyncExceptionHandshake* aeh) {
   // Do not throw asynchronous exceptions against the compiler thread
   // or if the thread is already exiting.
-  if (!can_call_java() || is_exiting()) {
+  if (!can_call_java() || (UseNewCode3 && is_exiting())) {
     delete aeh;
     return;
   }

-XX:+UseNewCode2 enables the call to clean_async_exception_operation() and
-XX:+UseNewCode3 enables the detection of an is_exiting() thread and deletes
the AsyncExceptionHandshake object.

I also added code to the AsyncExceptionHandshake destructor:

 AsyncExceptionHandshake::~AsyncExceptionHandshake() {
+  Thread* current = Thread::current();
+  if (current->is_Java_thread()) {
+    guarantee(!JavaThread::cast(current)->is_gc_barrier_detached(),
+              ""JavaThread cannot touch oops after its GC barrier is detached."");
+  }
   assert(!_exception.is_empty(), ""invariant"");
   _exception.release(Universe::vm_global());
 }

As I was hoping, disabling both main parts to your fix in this bug (JDK-8286830)
was nice enough to trigger the new check. Here's the results of my experimenting
with -XX:+UseNewCode2 and -XX:+UseNewCode3:

Code2..Code3..build-cfg..Run Duration
=====..=====..=========..============
false..false..release....crash 1.12m
false..false..fastdebug..crash 1.00m
false..false..slowdebug..crash 1.42m
false..true...release....crash 1.05m
false..true...fastdebug..crash 0.99m
false..true...slowdebug..crash 1.45m
true...false..release....crash 11.70m
true...false..fastdebug..crash 8.23m
true...false..slowdebug..crash 73.85m
true...true...release....pass 240.22m
true...true...fastdebug..pass 240.49m
true...true...slowdebug..pass 241.30m

For the three passing runs:

release bits:
About to execute for 7200 seconds.
Executed 37973860 loops in 7200 seconds.
About to execute for 7200 seconds.
Executed 15700828 loops in 7200 seconds.
vm_exit: dcubed_async_global_alloc_cnt=118815345
vm_exit: dcubed_async_global_release_cnt=118815345

fastdebug bits:
About to execute for 7200 seconds.
Executed 18276326 loops in 7200 seconds.
About to execute for 7200 seconds.
Executed 8869218 loops in 7200 seconds.
vm_exit: dcubed_async_global_alloc_cnt=30788882
vm_exit: dcubed_async_global_release_cnt=30788882

slowdebug bits:
About to execute for 7200 seconds.
Executed 7402912 loops in 7200 seconds.
About to execute for 7200 seconds.
Executed 3149075 loops in 7200 seconds.
vm_exit: dcubed_async_global_alloc_cnt=10395932
vm_exit: dcubed_async_global_release_cnt=10395932

No leaks detected and no crashes.;;;","2022-06-15 12:21;pchilanomate;Great. Yes, I would have expected the crashes with any of those changes removed. Thanks for the extra testing Dan!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: fix Shenandoah Loom support,JDK-8286829,5075020,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-05-16 11:33,2022-06-09 22:11,2023-10-01 09:56,2022-06-01 10:05,19,,,,,,,,,,,19,hotspot,,0,gc-shenandoah,loom,redhat-interest,,,,,,,,,,,,,,,,,,"java/lang/Thread/virtual/stress/Skynet.java test failed with loom.

To reproduce: 
 make CONF=linux-x86_64-server-fastdebug TEST_VM_OPTS=""--enable-preview -XX:+UseShenandoahGC"" run-test TEST=java/lang/Thread/virtual/stress/Skynet.java


#  Internal Error (/home/zgu/ws/jdk/src/hotspot/share/oops/compressedOops.inline.hpp:135), pid=3328186, tid=3328207
#  assert(check_alignment(result)) failed: address not aligned: 0x00000008baadbabe
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.zgu.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.zgu.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x190f877][thread 3328211 also had an error]
  ShenandoahAsserts::assert_correct(void*, oop, char const*, int)+0x987

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,,,,,,,,"2022-05-18 06:02;zgu;hs_err_pid3332428.log;https://bugs.openjdk.org/secure/attachment/98982/hs_err_pid3332428.log",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x503:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-18 05:56;zgu;After JDK-8286814, the tests no longer crash as early reported. Only java/lang/Thread/virtual/stress/Skynet.java still crash in unrelated area.

I update the synopsis to reflect new problem.
;;;","2022-05-18 07:39;zgu;Looks like there is an oop on loom stack (StackChunk) that points to an EC region.
;;;","2022-05-18 08:55;zgu;It turns out to be more serious issue, apparently, loom totally messed up Shenandoah marking, so that loom stacks do not seem to be marked at all.
;;;","2022-05-25 06:38;zgu;Changed synopsis  to ""fix Shenandoah Loom support"", as problem goes beyond marking.;;;","2022-05-27 16:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8924
Date: 2022-05-27 14:52:19 +0000;;;","2022-06-01 10:05;dukebot;Changeset: 239ac2a5
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-06-01 17:01:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/239ac2a5d4c9a13e10e8c75324cd51f5f825337d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lworld] WeakHashMap for value classes,JDK-8286824,5075015,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rriggs,rriggs,rriggs,2022-05-16 09:04,2022-11-30 14:26,2023-10-01 09:56,2022-11-30 14:26,repo-valhalla,,,,,,,,,,,repo-valhalla,core-libs,,0,lw5,lworld,,,,,,,,,,,,,,,,,,,"WeakHashMap uses WeakReference for keys, allowing it to retain only keys and values that are strongly referenced elsewhere.

The behavior of WeakReference (or any Reference class) is not defined for value objects.

WeakHashMap could benefit from one or modes to determine how value objects as keys should be allowed or retained.

Four (4) behaviors are proposed for WeakHashMap to give the developer a choice:
 - SOFT - Keys that are value objects are retained until memory pressure clears soft references; then the keys that are value objects are removed automatically
 - STRONG - Keys are value objects are retained until they are explicitly removed
 - THROW - Keys that are value objects can not be put into the map; UnsupportedOperationException is thrown
 - DISCARD - Keys that are value objects are silently discarded; as if they were removed immediately without being visible

The default is SOFT - key/values are removed when there is memory pressure.
Entries will be removed automatically at some point, though less deterministically than with Weak references.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8244968,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4yz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2022-06-30 07:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/718
Date: 2022-06-30 14:03:31 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in JavaDoc guide,JDK-8286818,5075006,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,schetan,rgallard,rgallard,2022-05-16 07:19,2022-07-10 23:34,2023-10-01 09:56,2022-07-10 23:34,18,,,,,,,,,,,,docs,,0,,,,,,,,,,,,,,,,,,,,,"There's a typo in the JavaDoc Guide

https://docs.oracle.com/en/java/javase/18/javadoc/javadoc.html#GUID-9E6AB571-AB0F-4279-9BBF-C0AF83345BF0

Look for ""basted"" under the Summary heading.

The Standard Doclet may generate various additional summary pages basted on detailed descriptions of individual declarations contained in the API.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4wz:",9223372036854775807,,,,,,,,,,,,"2022-05-16 22:55;schetan;Hi Raymond,
I corrected the typo.
https://docs-uat.us.oracle.com/en/java/javase/19/javadoc/javadoc.html#GUID-9E6AB571-AB0F-4279-9BBF-C0AF83345BF0
Request you to review and confirm is changes looks OK.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Shenandoah: RedefineRunningMethods.java test failed with Loom,JDK-8286814,5075002,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-05-16 06:38,2022-06-04 06:29,2023-10-01 09:56,2022-05-18 11:30,19,,,,,,,,,,,19,hotspot,,0,gc-shenandoah,loom,redhat-interest,,,,,,,,,,,,,,,,,,"To reproduce:

make CONF=linux-x86_64-server-fastdebug TEST_VM_OPTS=""--enable-preview -XX:+UseShenandoahGC"" run-test TEST=serviceability/jvmti/vthread/RedefineClasses/RedefineRunningMethods.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/zgu/ws/jdk/src/hotspot/share/runtime/continuationFreezeThaw.cpp:1202), pid=2694285, tid=2694306
#  assert(!UseShenandoahGC) failed: Shenandoah can not deal with allocating chunks visible to marking
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.zgu.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.zgu.jdk, interpreted mode, sharing, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb5f277]  FreezeBase::finish_freeze(frame const&, frame const&)+0xa87
#
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-16 06:37;zgu;hs_err_pid2698180.log;https://bugs.openjdk.org/secure/attachment/98950/hs_err_pid2698180.log",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4w3:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-17 12:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8757
Date: 2022-05-17 19:02:54 +0000;;;","2022-05-18 11:30;dukebot;Changeset: cd5bfe7b
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-05-18 18:26:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cd5bfe7b97d581a7c7fdb39df72bb22bfaed4f50
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Revert experimental special treatment given to new Object() instantiation.,JDK-8286807,5074991,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-05-16 03:21,2022-05-17 22:46,2023-10-01 09:56,2022-05-17 22:46,repo-valhalla,,,,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,,"From https://openjdk.java.net/jeps/8277163:

The class Object is special. Despite being a concrete class, it is not an identity class and supports both identity and value subclasses. However, calls to new Object() continue to create direct identity object instances of the class (suitable, e.g., as synchronization locks).

This calls for:

Reverting the special treatment for 'new Object()'

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x4tn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-05-17 07:45;sadayapalam;This calls for reverting the following fixes:

JDK-8237073 - Need special handling of jlO constructor invocation
JDK-8281026 - Allow for compiler.note.cant.instantiate.object.directly to be suppressed via an option
JDK-8280456  - javac should allow compilation with abstract java.lang.Object class

;;;","2022-05-17 22:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/691
Date: 2022-05-18 05:38:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assert in PhaseIdealLoop::dump_real_LCA is too strong,JDK-8286800,5074976,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,chagedorn,thartmann,thartmann,2022-05-15 23:59,2023-02-03 02:17,2023-10-01 09:56,2022-11-15 06:45,11,16,17,18,19,20,,,,,,20,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-19,starter,,,,,,,,,,,,,,"JDK-8249607 added code to PhaseIdealLoop::dump_bad_graph to print the real LCA including an ""must always find an LCA"" assert that now triggered in some cases. We should investigate why that is and adapt the code accordingly.",,,,,,,,,,JDK-8298827,JDK-8301751,JDK-8299587,JDK-8298845,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249607,JDK-8298736,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4qj:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-16 00:00;thartmann;See JDK-8278413 and JDK-8283386.;;;","2022-05-16 00:02;thartmann;ILW = Assert in debug code (that is only executed when asserting due to a bad graph), rare, no workaround = LLH = P5;;;","2022-09-27 23:55;chagedorn;Hi [~bstafford], I'm currently working on JDK-8285835 which is a bad graph assert and dumps additional information with `dump_real_LCA`. I also hit this ""must always find an LCA"" assert. On top of that, I'm not satisfied with the provided information and its format - it's too noisy to make use of it. So, I've started cleaning the method `dump_real_LCA` up. I've now realized that there is already a bug for that assigned to you. If you have not already started with that, could I take this one over?;;;","2022-09-28 09:17;bstafford;Hi Christian - one of our team members is planning to open up a PR for this today.;;;","2022-09-28 23:27;chagedorn;Okay, that's no problem. Then I'll consider adding the improved format of the idom dumps (if that was not touched in the upcoming PR) in a separate RFE.;;;","2022-09-30 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10472
Date: 2022-09-28 19:04:07 +0000;;;","2022-11-07 03:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11015
Date: 2022-11-07 11:21:36 +0000;;;","2022-11-15 06:45;dukebot;Changeset: decb1b79
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-11-15 14:44:26 +0000
URL:       https://git.openjdk.org/jdk/commit/decb1b79bc475f024a02135fa3394ff97098e758
;;;","2023-01-03 06:06;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Typical risk of a C2 change. The change is not trivial. Related issues are not needed. We should take it to avoid the bug and stay on par.
Clean backport.
SAP nightly testing passed.;;;","2023-01-03 06:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1026
Date: 2023-01-03 14:19:04 +0000;;;","2023-01-16 02:56;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Typical risk of a C2 change. The change is not trivial. Related issues are not needed. We should take it to avoid the bug and stay on par.
Clean backport. SAP nightly testing passed;;;","2023-01-16 03:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1656
Date: 2023-01-16 11:02:54 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Guards of constant value false are not permitted,JDK-8286797,5074973,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abimpoudis,jlahoda,jlahoda,2022-05-15 23:39,2022-05-26 12:45,2023-10-01 09:56,2022-05-19 09:13,19,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"javac should produce a compile-time error for code like:
---
    switch (Object o) {
        case String s when false -> {}
        default -> {}
    }
--
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JCK-7317750,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4pv:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-05-17 05:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8745
Date: 2022-05-17 12:25:41 +0000;;;","2022-05-19 09:13;dukebot;Changeset: fd36f373
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2022-05-19 16:11:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fd36f3730ec92d39f81f9d6d4d2b976938ed44bd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Only guards of boolean type and value true should be considered to be unguarded,JDK-8286796,5074972,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-05-15 23:35,2022-05-16 08:19,2023-10-01 09:56,2022-05-16 08:19,19,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"Consider:
---
sealed interface Intf permits A, B {}
final static class A implements Intf {}
final static class B implements Intf {}
private int test(Intf selectorParam, Boolean b) {
    return switch (selectorParam) {
            case A a when b ->  2;
            case B b ->  1; 
        };
}
---

This used to compile as exhaustive, although it should not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4pn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-05-16 08:19;jlahoda;Was fixed as part of:
https://github.com/openjdk/jdk/commit/0155e4b76bb0889e516811647aede500a7812db1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test forceEarlyReturn002.java timed out,JDK-8286789,5074960,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dholmes,dholmes,2022-05-15 14:59,2023-09-12 11:17,2023-10-01 09:56,2023-08-30 11:29,19,20,,,,,,,,,,22,core-svc,,0,intermittent,loom,noreg-self,problemlist,tier5,,,,,,,,,,,,,,,,"Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 36 80 00 00                  .......6...
Packet end
Checking reply packet header
Parsing reply packet:
Received signal from debugee: ready
Sending signal to debugee: quit
Waiting for debugee exits
Timeout refired 480 times",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315486,,,,,,,,"2022-08-07 07:45;dcubed;jdk-20+9_macosx-aarch64.8286789.zip;https://bugs.openjdk.org/secure/attachment/100334/jdk-20%2B9_macosx-aarch64.8286789.zip",,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,,"0|i2x4mz:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-05-16 13:12;cjplummer;The test seems to have run to near completion, and is sending the ""quit"" command to the debugee as part of the cleanup and termination process. This is when it times out.

The debugee is a vthread and seems to have some trouble exiting. Unfortunately jcmd attaches are not working, but jhsdb jstack is. You can see the following thread:

""old-m-a-i-n"" #1 prio=5 tid=0x0000023b04c45560 nid=26572 waiting on condition [0x000000f1d0eff000]
   java.lang.Thread.State: WAITING (parking)
   JavaThread state: _thread_blocked
 - jdk.internal.misc.Unsafe.park(boolean, long) @bci=0 (Interpreted frame)
	- parking to wait for <0x00000000afeff920> (a java/util/concurrent/CountDownLatch$Sync)
 - java.util.concurrent.locks.LockSupport.park(java.lang.Object) @bci=27, line=221 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long) @bci=347, line=715 (Interpreted frame)
 - java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(int) @bci=21, line=1047 (Interpreted frame)
 - java.util.concurrent.CountDownLatch.await() @bci=5, line=230 (Interpreted frame)
 - java.lang.VirtualThread.joinNanos(long) @bci=34, line=764 (Interpreted frame)
 - java.lang.Thread.join(long) @bci=52, line=2130 (Interpreted frame)
 - java.lang.Thread.join() @bci=2, line=2223 (Interpreted frame)
 - nsk.share.MainWrapper.main(java.lang.String[]) @bci=109, line=74 (Interpreted frame)

This is the main debugee thread, which wraps the test in a vthread and is waiting for it to exit. This appears to be the vthread is waiting on:

""ForkJoinPool-1-worker-1"" #27 daemon prio=5 tid=0x0000023b28b92620 nid=59184 runnable [0x000000f1d24fe000]
   java.lang.Thread.State: RUNNABLE
   JavaThread state: _thread_blocked
 - java.io.ObjectInputStream$PeekInputStream.read(byte[], int, int) @bci=6, line=2917 (Interpreted frame)
 - java.io.ObjectInputStream$PeekInputStream.readFully(byte[], int, int) @bci=19, line=2934 (Interpreted frame)
 - java.io.ObjectInputStream$BlockDataInputStream.readUnsignedShort() @bci=22, line=3443 (Interpreted frame)
 - java.io.ObjectInputStream$BlockDataInputStream.readUTF() @bci=2, line=3501 (Interpreted frame)
 - java.io.ObjectInputStream.readString(boolean) @bci=40, line=2114 (Interpreted frame)
 - java.io.ObjectInputStream.readObject0(java.lang.Class, boolean) @bci=344, line=1738 (Interpreted frame)
 - java.io.ObjectInputStream.readObject(java.lang.Class) @bci=42, line=538 (Interpreted frame)
 - java.io.ObjectInputStream.readObject() @bci=3, line=496 (Interpreted frame)
 - nsk.share.jpda.SocketConnection.doReadObject() @bci=25, line=581 (Interpreted frame)
	- locked <0x00000000afb93980> (a java.lang.Object)
 - nsk.share.jpda.SocketConnection.readObject() @bci=25, line=518 (Interpreted frame)
 - nsk.share.jpda.SocketIOPipe.readln() @bci=15, line=190 (Interpreted frame)
 - nsk.share.jpda.AbstractDebuggeeTest.doTest() @bci=33, line=309 (Interpreted frame)
Error occurred during stack walking:
sun.jvm.hotspot.debugger.UnalignedAddressException: 1

I left off the stack trace of the exception since it's not relevant. SA just had issues seeing the frames above doTest(). I'm not sure why.

In any case, the debugee is reading from the input pipe, but is not getting the ""quit"" command. It's unclear why (it has been sent as you can see in the output). Seems we've seen something like this before in other tests, but I can't recall the CR ATM.;;;","2022-06-28 14:48;dcubed;Here's a log file snippet for the jdk-20+4-150-tier5 sighting:

vmTestbase/nsk/jdwp/ThreadReference/ForceEarlyReturn/forceEarlyReturn002/forceEarlyReturn002.java

Expected error: 31
Waiting for reply packet
debugee.stderr> Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Reply packet received:
Packet header (11 bytes):
    0000 (length) : 0x0000000b (11)
    0004 (id)     : 0x00000034 (52)
    0008 (flags)  : 0x80 (-128)
    000a (error)  : 0x0000 (0)
Entire packet (11 bytes): 
    0000: 00 00 00 0b 00 00 00 34 80 00 00                  .......4...
Packet end
Checking reply packet header
Parsing reply packet:
Received signal from debugee: ready
Sending signal to debugee: quit
Waiting for debugee exits
Timeout refired 480 times
# ERROR: Debugee FAILED with exit code: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Debugee FAILED with exit code: 134
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdwp.TestDebuggerType1.quitDebugee(TestDebuggerType1.java:191)
	at nsk.share.jdwp.TestDebuggerType1.runIt(TestDebuggerType1.java:131)
	at nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002.run(forceEarlyReturn002.java:103)
	at nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002.main(forceEarlyReturn002.java:99)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)
TEST FAILED


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: Debugee FAILED with exit code: 134
----------System.err:(0/0)----------
----------rerun:(35/10241)*----------;;;","2022-06-28 15:19;cjplummer;I looked at the stack trace generated off the hung debuggee process. It's in the same state described in the 2nd comment in this CR. The debuggee is block waiting for the ""quit"" command, which was sent, but for some reason the debuggee is not receiving it.;;;","2022-08-07 07:45;dcubed;Here's the log file for a sighting in my stress testing of jdk-20+9:

$ unzip -l jdk-20+9_macosx-aarch64.8286789.zip
Archive:  jdk-20+9_macosx-aarch64.8286789.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    27561  08-05-2022 12:12   jdk-20+9_2/failures.macosx-aarch64/forceEarlyReturn002.jtr.slowdebug
---------                     -------
    27561                     1 file;;;","2023-08-10 18:03;amenkov;I was not able to reproduce the issue with 1000+ runs.
As we don't observe this ""debugger sent, debugee didn't receive the command"" failures with other tests, it looks like this is test issue.
The only suspicious thing I see the test creates native thread with tight infinite loop (the thread does not exist, no sleeps in the loop).;;;","2023-08-15 16:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15301
Date: 2023-08-15 23:03:31 +0000;;;","2023-08-30 11:29;dukebot;Changeset: c90cd2c0
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2023-08-30 18:28:43 +0000
URL:       https://git.openjdk.org/jdk/commit/c90cd2c0608d250434bff7013360b8388d9854b3
;;;","2023-08-31 16:51;cjplummer;This issue still reproduces. I think I have an explanation. See JDK-8315486.

[~amenkov] Did you run with JTREG_TEST_THREAD_FACTORY=Virtual when you were trying to reproduce this failure?;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test java/lang/Thread/virtual/ThreadAPI.testGetStackTrace3 fails,JDK-8286788,5074959,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,dholmes,dholmes,2022-05-15 14:41,2022-05-18 23:20,2023-10-01 09:56,2022-05-17 10:12,19,,,,,,,,,,,19,core-libs,,0,loom,noreg-self,testbug,tier5,,,,,,,,,,,,,,,,,"java/lang/Thread/virtual/ThreadAPI.java:

test ThreadAPI.testGetStackTrace3(): failure
java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertTrue(Assert.java:45)
	at org.testng.Assert.assertTrue(Assert.java:55)
	at ThreadAPI.testGetStackTrace3(ThreadAPI.java:1904)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)
test ThreadAPI.testGetStackTrace4(): success",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4mr:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-05-15 23:21;alanb;testGetStackTrace3 is fragile as it only gives the virtual thread 200ms to block in the selection operation.;;;","2022-05-17 08:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8743
Date: 2022-05-17 11:15:19 +0000;;;","2022-05-17 10:12;dukebot;Changeset: 8535d51d
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-05-17 17:10:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8535d51db7e1c33218c4254e774de4ca4ca60023
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] javax/swing/JInternalFrame/8146321/JInternalFrameIconTest.java still fails,JDK-8286786,5074957,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,prr,prr,2022-05-15 14:00,2022-05-25 23:12,2023-10-01 09:56,2022-05-23 21:35,,,,,,,,,,,,19,client-libs,,0,sn_119,,,,,,,,,,,,,,,,,,,,"This test was updated and de-problem listed 
https://bugs.openjdk.java.net/browse/JDK-8284888
https://git.openjdk.java.net/jdk/pull/8380
However it still can fail - failure seen on an M1 24"" imac running macOS 11.5.2


----------System.out:(9/653)----------
imageicon captureRect java.awt.Rectangle[x=875,y=381,width=16,height=16]
icon captureRect java.awt.Rectangle[x=875,y=381,width=16,height=16]
[javax.swing.plaf.metal.MetalLookAndFeel] : SUCCESS: icon and imageIcon same.
imageicon captureRect java.awt.Rectangle[x=876,y=377,width=16,height=16]
icon captureRect java.awt.Rectangle[x=876,y=377,width=16,height=16]
[javax.swing.plaf.nimbus.NimbusLookAndFeel] : ERROR: icon and imageIcon not same.
imageicon captureRect java.awt.Rectangle[x=882,y=403,width=476,height=27]
icon captureRect java.awt.Rectangle[x=882,y=403,width=476,height=27]
[com.apple.laf.AquaLookAndFeel] : SUCCESS: icon and imageIcon same.
----------System.err:(13/850)----------
java.lang.RuntimeException: Error Log:
[javax.swing.plaf.nimbus.NimbusLookAndFeel] : ERROR: icon and imageIcon not same.
	at JInternalFrameIconTest.main(JInternalFrameIconTest.java:70)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Error Log:
[javax.swing.plaf.nimbus.NimbusLookAndFeel] : ERROR: icon and imageIcon not same.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Error Log: [javax.swing.plaf.nimbus.NimbusLookAndFeel] : ERROR: icon and imageIcon not same.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284888,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4mb:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-05-19 22:23;psadhukhan;In  JDK-8284888, https://github.com/openjdk/jdk/pull/8380
initial iteration handled this Nimbus L&F failure issue where color inaccuracy of ""1"" is causing test to fail

x 0 y 0 red1 171 red2 171 green1 174 green2 175 blue1 184 blue2 184
x 0 y 1 red1 172 red2 173 green1 177 green2 177 blue1 185 blue2 185
x 0 y 2 red1 173 red2 174 green1 177 green2 178 blue1 187 blue2 187
x 0 y 6 red1 0 red2 0 green1 1 green2 0 blue1 0 blue2 0
x 0 y 15 red1 1 red2 0 green1 0 green2 0 blue1 0 blue2 0
....
This check in the test 
269             if (mismatchCounter > mismatchTolerance) {
270                 flag = false;
271             }
checks how many times the color is not exactly equal and if it is more than tolerance it fails.

However, the PR went off-track in Aqua L&F direction where it was found that Aqua is not at all checking the icon pixels correctly so Aqua L&F fix actually inadvertently overwrote the Nimbus fix, although the test was not failing for Aqua last time also.

I guess we can remove the above check OR this one which was done last time
    if (red1 != red2 || green1 != green2 || blue1 != blue2) {
                   ++mismatchCounter;
;;;","2022-05-20 02:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8804
Date: 2022-05-20 09:07:29 +0000;;;","2022-05-23 21:35;dukebot;Changeset: a5caffd4
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-05-24 04:32:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a5caffd4a5dfac44a925f783bc1f72e0a7b85869
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax.crypto.CryptoPolicyParser#isConsistent always returns 'true',JDK-8286779,5074950,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hchao,aturbanov,aturbanov,2022-05-15 05:48,2022-08-30 03:12,2023-10-01 09:56,2022-06-13 08:34,,,,,,,,,,,,20,security-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,,"I found a suspicious code in CryptoPolicyParser method calls.

Method 'isConsistent' is called only from a method
'parsePermissionEntry'. It accepts the 'processedPermissions'
parameter from 'parsePermissionEntry'.
Method 'parsePermissionEntry' is called only from a method
'parseGrantEntry'. It accepts the 'processedPermissions' parameter
from 'parseGrantEntry'.
Method 'parseGrantEntry' is called only from a method 'read' and
always with null value of parameter 'processedPermissions'.

So, it seems in method 'isConsistent' value of parameter
'processedPermissions' will always be 'null'. And the method will
always return true.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4kr:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2022-05-19 14:37;hchao;There is a parsing loop in CryptoPolicyParser::read(). The loop is executed once for each entry in the policy file. The Hashtable `processedPermissions` is null at the first time. It might be added with a hashtable entry after a call to the `parseGrantEntry()` method in the loop. So the method `isConsistent()` will not always return true.;;;","2022-05-19 14:45;aturbanov;But  'processedPermissions' is a local variable inside 'read' method. And it is not assigned in the loop.
Java always passes parameters ""by value"". It means that 'processedPermissions' will be always null.;;;","2022-05-19 14:52;hchao;Sorry that makes sense.;;;","2022-06-01 18:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8985
Date: 2022-06-02 01:53:25 +0000;;;","2022-06-13 08:34;dukebot;Changeset: 8f400b9a
Author:    Hai-May Chao <hchao@openjdk.org>
Date:      2022-06-13 15:31:58 +0000
URL:       https://git.openjdk.org/jdk/commit/8f400b9aab57d0639721add2ba511bfc0459bd89
;;;","2022-08-30 03:12;coffeys;just stumbled across the test associated with this fix. It failed in local env since I'd forgotten to specify auto option for jtreg. I wonder if this test should be automated. We can copy the JDK install and configure security conf settings as required.

recent example at https://github.com/openjdk/jdk/commit/9d7c13eb14c525485e7739fcfacd044aa3bbc12d;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replace openjdk.java.net with openjdk.org,JDK-8286774,5074942,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-05-14 06:45,2022-10-24 07:22,2023-10-01 09:56,2022-06-27 06:20,8,jfx11,jfx17,jfx19,,,,,,,,jfx19,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,"The Internet domain openjdk.java.net is moving to openjdk.org [1]. Once the transition is complete, we should change all references to refer to the new domain name.

As part of the transition, openjdk.java.net will redirect to openjdk.org, so the timing of this fix isn't crucial.

As part of this fix, we should also update the (very few) openjdk.java.net URLs that use ""http"" to ""https""

[1] https://mail.openjdk.java.net/pipermail/discuss/2022-May/006089.html",,,,,,,,,,JDK-8292842,JDK-8292690,JDK-8290129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4iz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-06-24 06:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/803
Date: 2022-06-24 13:16:40 +0000;;;","2022-06-27 06:20;dukebot;Changeset: c7592865
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-06-27 13:16:53 +0000
URL:       https://git.openjdk.org/jfx/commit/c75928654581920867b5d6c655fb7917d43d1093
;;;","2022-08-19 07:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/80
Date: 2022-08-19 14:34:19 +0000;;;","2022-08-23 10:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/110
Date: 2022-08-23 17:36:24 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cleanup @returns in sun.security classes,JDK-8286773,5074941,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2022-05-14 05:50,2022-05-18 23:17,2023-10-01 09:56,2022-05-14 14:55,,,,,,,,,,,,19,security-libs,,0,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,,,,"The below sun.security classes should use @return rather than @returns.
sun/security/tools/keytool/Main.java
sun/security/util/DerValue.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4ir:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2022-05-14 06:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8714
Date: 2022-05-14 13:41:38 +0000;;;","2022-05-14 14:55;dukebot;Changeset: 63bd3b77
Author:    John Jiang <jjiang@openjdk.org>
Date:      2022-05-14 21:52:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/63bd3b7728e0e717e6b4a45a519ff03002cbdb66
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/awt/dnd/DropTargetInInternalFrameTest/DropTargetInInternalFrameTest.html times out and fails in Windows,JDK-8286772,5074940,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mvs,mvs,mvs,2022-05-14 05:34,2022-10-14 08:55,2023-10-01 09:56,2022-06-03 20:05,11,17,19,8,,,,,,,,19,client-libs,,0,colocation,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,,"Closed test java/awt/dnd/DropTargetInInternalFrameTest/DropTargetInInternalFrameTest.html times out and fails in Windows intermittently. Noticed only in Windows 11 machines.

Log:
java.lang.RuntimeException: DropTargetListener.dragEnter() not called.
	at DropTargetInInternalFrameTest.start(DropTargetInInternalFrameTest.java:133)
	at com.sun.javatest.regtest.agent.AppletWrapper$AppletRunnable.run(AppletWrapper.java:157)
	at java.base/java.lang.Thread.run(Thread.java:833)
java.lang.RuntimeException: The test failed.
	at DropTargetInInternalFrameTest.start(DropTargetInInternalFrameTest.java:143)
	at com.sun.javatest.regtest.agent.AppletWrapper$AppletRunnable.run(AppletWrapper.java:157)
	at java.base/java.lang.Thread.run(Thread.java:833)
STATUS:Failed.Applet thread threw exception: java.lang.RuntimeException: The test failed.

Fix:
This test verifies that dragging from one InternalFrame and a drop target in another InternalFrame functions properly.
This test fix converts an unstable applet based test to java main based test. It also updates the test to be more comprehensive with some stabilisation improvements. This test was creating noise in CI as it often fails in Windows platform, especially in Windows 11.
Testing:

Tested using mach5 20 times per platform and got all Pass.
Tested using mach5 5 times specifically on Windows 11 and got all Pass.",Windows 11 x64,,,,,,,,,JDK-8290158,JDK-8290153,JDK-8295363,JDK-8290166,JDK-8294507,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286822,,,,,JDK-8286822,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,windows,,,,,,"0|i2x4ij:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-06-02 01:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8753
Date: 2022-05-17 15:52:03 +0000;;;","2022-06-03 20:05;dukebot;Changeset: d76c1089
Author:    Manukumar V S <mvs@openjdk.org>
Committer: Abdul Kolarkunnu <akolarkunnu@openjdk.org>
Date:      2022-06-04 03:00:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d76c1089efc8816c6f804b78371e62e697fc62c5
;;;","2022-09-26 01:51;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-09-26 01:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/731
Date: 2022-09-26 08:52:47 +0000;;;","2022-10-12 00:07;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-10-12 00:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1447
Date: 2022-10-12 07:11:00 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
workaround implemented for JDK-8282607 is incomplete,JDK-8286771,5074938,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2022-05-14 03:49,2022-05-18 23:17,2023-10-01 09:56,2022-05-14 08:31,19,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,The workaround I merged for JDK-8282607 was incomplete in that it did not actually change the test behavior when hs-err truncation was detected.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282607,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4i3:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-14 03:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8713
Date: 2022-05-14 10:54:07 +0000;;;","2022-05-14 08:31;dukebot;Changeset: af24d2d1
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-05-14 15:28:53 +0000
URL:       https://git.openjdk.java.net/jdk/commit/af24d2d1d6a6679b5e0f74ada0a5e3956b58e300
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] (fc) Tune FileChannel.transferFrom(),JDK-8286763,5074930,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-05-13 16:46,2022-08-17 13:00,2023-10-01 09:56,2022-05-18 08:57,19,,,,,,,,,,,19,core-libs,,0,release-note=yes,,,,,,,,,,,,,,,,,,,,Redo the backed out patch for JDK-8274113 with a fix for the failure encountered in CI testing.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274113,JDK-8286978,,,,,,,,,,,,,,,,,,,,,,,,aarch64,generic,x86_64,,,,,,,,generic,linux,,,,,"0|i2x4gb:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2022-05-16 13:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8733
Date: 2022-05-16 20:14:07 +0000;;;","2022-05-18 08:57;dukebot;Changeset: d8b0b32f
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-05-18 15:55:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d8b0b32f9f4049aa678809aa068978e3a4e29457
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
adlc tries to build with /pathmap but without /experimental:deterministic,JDK-8286757,5074916,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,erikj,ihse,ihse,2022-05-13 08:51,2023-09-25 11:27,2023-10-01 09:56,2023-09-20 05:51,19,,,,,,,,,,,22,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,"We pass $FILE_MACRO_CFLAGS to the adlc build, but not $REPRODUCIBLE_CFLAGS. 

The best solution is to fix the broken handling of adlc flags. The next best solution is to add REPRODUCIBLE_CFLAGS to adlc as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4d7:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-12-18 16:54;dholmes;Are these warnings all related to adlc build:

[2022-12-16T07:37:28,172Z] Compiling up to 2 files for BUILD_JVMTI_TOOLS
[2022-12-16T07:37:28,631Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored
[2022-12-16T07:37:28,662Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored
[2022-12-16T07:37:28,709Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored
[2022-12-16T07:37:28,724Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored
[2022-12-16T07:37:28,724Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored
[2022-12-16T07:37:28,850Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored
[2022-12-16T07:37:28,881Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored
[2022-12-16T07:37:28,896Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored
[2022-12-16T07:37:28,912Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored
[2022-12-16T07:37:29,162Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored
[2022-12-16T07:37:29,584Z] Compiling up to 127 files for BUILD_java.compiler.interim
[2022-12-16T07:37:29,850Z] Compiling up to 349 files for BUILD_jdk.compiler.interim
[2022-12-16T07:37:30,326Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored
[2022-12-16T07:37:30,576Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored
[2022-12-16T07:37:30,591Z] cl : Command line warning D9007 : '/pathmap:' requires '/experimental:deterministic'; option ignored

The log doesn't make it clear what produced the warnings.;;;","2023-09-01 14:01;erikj;I will fix this the simple way by exporting REPRODUCIBLE_CFLAGS in spec and adding it to ADLC_CFLAGS. Cleaning up ADLC flags would be nice, but can be done separately.;;;","2023-09-01 14:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15545
Date: 2023-09-01 21:08:53 +0000;;;","2023-09-20 05:51;dukebot;Changeset: 242eeaea
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-09-20 12:48:19 +0000
URL:       https://git.openjdk.org/jdk/commit/242eeaea47a259cab4ad2d4f0e055959e9870b8d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
failure_handler: dmesg command on macos fails to collect data due to permission issues,JDK-8286744,5074898,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-05-13 07:11,2022-07-19 07:34,2023-10-01 09:56,2022-05-16 17:12,19,,,,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,"One of the commands we run as part of test failure handlers is the ""dmesg"" command. This command fails on macOS with permission error:

[/sbin/dmesg] timeout=20000
----------------------------------------
Unable to obtain kernel buffer: Operation not permitted
usage: sudo dmesg


As noted in that error message as well as the man pages of the dmesg command which states:

""Dmesg displays the contents of the system message buffer.  This command needs to be  run as root.""

The failure handler command should be changed to use sudo.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284614,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2x497:",9223372036854775807,b23,,,,,,,,,,,"2022-05-13 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8703
Date: 2022-05-13 14:17:44 +0000;;;","2022-05-16 17:12;dukebot;Changeset: 125efe6c
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-05-17 00:09:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/125efe6cbaf1e2c263d74a4ada395ac30c479faa
;;;","2022-06-03 14:10;cjplummer;spindump has the same issue. See JDK-8284614. Would have been nice if it was fixed at the same time.;;;","2022-07-10 09:45;dnsimon;I was wondering why running jtreg tests started showing a ""password:"" prompt. It would be nice if a little more informative text could be displayed with the prompt indicating at least that dmesg is being run. Even better would be to make clear that it is being run to add more detail to the failure message.;;;","2022-07-19 07:31;jpai;Another report, which I suspect is related to this, where the password is being prompted for without additional context and thus making it difficult to understand what the password is for https://mail.openjdk.org/pipermail/jdk-dev/2022-July/006799.html.

I think we need to either document this in the testing/building documentation or find some other way to either make it easier to understand the context or completely skip such commands in certain cases. I'll open a separate discussion/issue for that.;;;","2022-07-19 07:34;jpai;Hello [~cjplummer],

> spindump has the same issue. See JDK-8284614. Would have been nice if it was fixed at the same time. 

I missed this comment previously. You are right this would need to be addressed too, but I think we need a general agreement on how we deal with jtreg failure handler commands which require a password.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Active Setting event emitted incorrectly,JDK-8286740,5074894,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-05-13 06:49,2023-05-19 01:11,2023-10-01 09:56,2022-05-16 12:11,17,19,,,,,,,,,,19,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,,,,,,"The timestamp for the jdk.ActiveSetting event is cached so it always the same during the lifetime of the JVM. This also leads to the event getting a duration, i.e 0.190 ms, instead 0 s. 

The event is also emitted twice when a new recording is started.

This bug fix should be considered for a backport. It was introduced in JDK 14 with Event Streaming.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286688,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x48b:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-05-16 06:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8709
Date: 2022-05-13 22:34:03 +0000;;;","2022-05-16 12:11;dukebot;Changeset: 24cab0af
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-05-16 19:09:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/24cab0af32a1eaa4c594fb2a144386a6b7062981
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test vmTestbase/gc/gctests/WeakReference/weak006/weak006.java fails: Last soft reference has not been cleared,JDK-8286737,5074891,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dholmes,dholmes,2022-05-13 05:55,2022-06-01 23:26,2023-10-01 09:56,2022-05-26 15:38,19,,,,,,,,,,,19,hotspot,,0,tier5,,,,,,,,,,,,,,,,,,,,"This test has suddenly started failing on all platforms

Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 1860698112
Sleep time: 500
Iterations: 0
Number of threads: 1
Run GC thread: false
Run mem diag thread: false
Run forever: false
Array size: 9624299
Starting Thread[#19,gc.gctests.WeakReference.weak006.weak006$Worker@68c54797,5,MainThreadGroup]
Exception in 
gc.gctests.WeakReference.weak006.weak006$Worker@68c54797
nsk.share.TestFailure: Last soft reference has not been cleared
	at gc.gctests.WeakReference.weak006.weak006$Worker.run(weak006.java:143)
	at nsk.share.runner.ThreadsRunner$ManagedThread.run(ThreadsRunner.java:128)
	at java.base/java.lang.Thread.run(Thread.java:1585)
Failures summary:
nsk.share.TestFailure: Last soft reference has not been cleared
	at gc.gctests.WeakReference.weak006.weak006$Worker.run(weak006.java:143)
	at nsk.share.runner.ThreadsRunner$ManagedThread.run(ThreadsRunner.java:128)
	at java.base/java.lang.Thread.run(Thread.java:1585)
----------System.err:(14/772)----------
nsk.share.TestFailure: Test exit code: 97
	at nsk.share.test.Tests$TestRunner.execute(Tests.java:90)
	at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
	at nsk.share.gc.GC.runTest(GC.java:114)
	at gc.gctests.WeakReference.weak006.weak006.main(weak006.java:160)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)

JavaTest Message: Test threw exception: nsk.share.TestFailure: Test exit code: 97
JavaTest Message: shutting down test",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285951,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x47n:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-13 06:09;dholmes;Looks like this was caused by JDK-8285951;;;","2022-05-15 09:57;lmesnik;The test always fails with ParallelGC. Need to check why WB.fullGC doesn't collect soft references.;;;","2022-05-16 01:10;tschatzl;The whitebox full gc ends up in VM_ParallelGCSystemGC; there parallel gc full gc is not told to do clear soft refs unconditionally:

void VM_ParallelGCSystemGC::doit() {
  SvcGCMarker sgcm(SvcGCMarker::FULL);

  ParallelScavengeHeap* heap = ParallelScavengeHeap::heap();

  GCCauseSetter gccs(heap, _gc_cause);
  if (!_full) {
    // If (and only if) the scavenge fails, this will invoke a full gc.
    heap->invoke_scavenge();
  } else {
    heap->do_full_collection(false);   // <---------------
  }
}
;;;","2022-05-22 15:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8829
Date: 2022-05-22 22:14:45 +0000;;;","2022-05-24 15:45;lmesnik;Comment from albertnetymk ""Albert Yang"":

It was unclear to me why a Full GC cycle with the correct soft-ref policy couldn't discover/clear that soft ref, so I took a deeper look. My conclusion is that if a non-strong ref, A, is discovered in the Young GC cycle, it becomes live/reachable and its enclosing non-strong refs (if any) becomes non-discoverable in the Full GC cycle in the same pause. In contrast, that non-strong ref A is actually unreachable at the Java level, so the Full GC cycle can discover its enclosing non-strong refs. IOW, a pause including both Young and Full GC cycles can result in less reclaimed mem (or more kept objs) than a pause with only Full GC. Such behavior, IMO, is a bit counterintuitive.

The fix of adding soft-ref policy to the Young GC doesn't resolve the general problem, because the young/old-gen and obj size could affect which generation various objs lie, which affects what non-strong refs will be discovered and treated as live. (The Weak ref case in the same test can also be triggered due to the same reason.)

I believe one reliable solution here is to disable Full-GC-initiated Young GC using -XX:-ScavengeBeforeFullGC. (On my box I can confirm it fixes the failing test.);;;","2022-05-26 15:38;dukebot;Changeset: 6a33974a
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-05-26 22:36:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6a33974a6b8a629744c6d76c3b4fa1f772e52ac8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Calculation to fit in optional region in remaining pause time wrong,JDK-8286729,5074882,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tschatzl,tschatzl,tschatzl,2022-05-13 04:36,2022-05-18 23:19,2023-10-01 09:56,2022-05-17 07:41,17,19,,,,,,,,,,19,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,,,,,"In G1Policy::calculate_optional_collection_set_regions there is this code:

  double prediction_ms = 0;
  [...]
  while (num_optional_regions < max_optional_regions) {
    [...]
    prediction_ms += predict_region_total_time_ms(r, false);   // note the +=

    if (prediction_ms > time_remaining_ms) {
      [...]
      break;
    }
    // This region will be included in the next optional evacuation.

    time_remaining_ms -= prediction_ms;                        // and then we subtract that sum of sum...
    [...]
  }

As you can see, the code subtracts the prediction from the remaining time that in itself is accumulated over all times the recently added optional regions take.

This causes too few optional regions to be taken in optional evacuation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x45n:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-16 00:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8722
Date: 2022-05-16 07:12:49 +0000;;;","2022-05-17 07:41;dukebot;Changeset: af07919e
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-05-17 14:38:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/af07919ef1a14fc01295b118f027e246f3d80ffd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: serviceability agent tests fail with PAC enabled,JDK-8286711,5074864,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ngasson,ngasson,ngasson,2022-05-13 03:30,2022-06-01 23:28,2023-10-01 09:56,2022-05-30 01:13,18,19,,,,,,,,,,19,hotspot,,0,aarch64-related,,,,,,,,,,,,,,,,,,,,"To reproduce, run the tests under serviceability/sa with -XX:UseBranchProtection=pac-ret on a machine that supports PAC:

java.lang.NullPointerException: Cannot invoke ""sun.jvm.hotspot.debugger.Address.addOffsetTo(long)"" because the return value of ""sun.jvm.hotspot.runtime.Frame.getFP()"" is null                 
        at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Frame.addressOfStackSlot(Frame.java:237)                                                                                                  
        at jdk.hotspot.agent/sun.jvm.hotspot.runtime.aarch64.AARCH64Frame.getSenderSP(AARCH64Frame.java:455)                                                                                   
        at jdk.hotspot.agent/sun.jvm.hotspot.runtime.aarch64.AARCH64Frame.sender(AARCH64Frame.java:294)                                                                                        
        at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Frame.sender(Frame.java:207)
        at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Frame.realSender(Frame.java:212)
        at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VFrame.sender(VFrame.java:119)
        at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VFrame.javaSender(VFrame.java:148)
        at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:81)
        at jdk.hotspot.agent/sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:45)
        at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.run(JStack.java:67)
        at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)
        at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)
        at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)
        at jdk.hotspot.agent/sun.jvm.hotspot.tools.JStack.runWithArgs(JStack.java:90)
        at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJSTACK(SALauncher.java:302)
        at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,,,"0|i2x41n:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-05-13 03:32;ngasson;The accessors in AARCH64Frame that read the saved LR from the stack need to strip the PAC code before using.;;;","2022-05-20 08:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8814
Date: 2022-05-20 15:52:04 +0000;;;","2022-05-30 01:13;dukebot;Changeset: d8331737
Author:    Nick Gasson <ngasson@openjdk.org>
Date:      2022-05-30 08:12:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d8331737ad09fb989c492bdfe3868a7ae66e32af
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fc) FileChannel/FileChannelImpl cleanup,JDK-8286709,5074859,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,alanb,alanb,2022-05-13 02:59,2022-06-01 23:25,2023-10-01 09:56,2022-05-26 11:08,19,,,,,,,,,,,19,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,"A few small formatting/style nits noticed with the JEP 424 updates to FileChannel and FileChannelImpl:

FileChannel.map - the alignment of the param/returns in the javadoc is inconsistent with the existing methods. The indentation of the MemorySession parameter is messed up.

FileChannelImpl.map introduces a 100+ line that will make all future side-by-side diffs hard to read. The formatting/line-breaks seem to have got messed up too. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x40j:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-05-25 11:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8889
Date: 2022-05-25 18:01:00 +0000;;;","2022-05-26 11:08;dukebot;Changeset: 7cb368b3
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-05-26 18:02:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7cb368b34df97614f0d208b8b0b93aa714a49282
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Don't commit JFR internal jdk.JavaMonitorWait events,JDK-8286707,5074857,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jnordstrom,jnordstrom,jnordstrom,2022-05-13 02:38,2023-02-21 01:33,2023-10-01 09:56,2022-10-20 10:04,11,17,19,,,,,,,,,20,hotspot,,0,bugdb_34869410,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,"When creating JFR recordings, the ""JFR Periodic Tasks"" thread produces a lot of Object.wait events in the recording, which are of little to no use when analyzing applications. In an idle system these JFR internal events could make up as much as half of the recording.",,,,,,,,,,JDK-8302970,JDK-8299723,JDK-8300043,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-16 00:42;jnordstrom;jfr-object-wait.png;https://bugs.openjdk.org/secure/attachment/98945/jfr-object-wait.png",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x403:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-05-14 04:57;egahlin;In JDK 14, we introduced an exclusion mechanism so events for a particular thread is not committed. It could be used to exclude the ""JFR Period Tasks"" as well. That said, the thread is used to emit periodic events, so it has to be flipped back and forth. 

I believe the Object.wait for the JFR periodic tasks is by default only called once per second, so for it to take up half a recording a custom configuration must be in place. Correct?;;;","2022-05-16 00:41;jnordstrom;I haven't used any custom configuration when experimenting. Half of a recording might be an extreme, but looking at an idle example application, the Java Monitor Wait event has 13826 events, of which 13819 are the JFR Periodic Tasks event.
See attached screenshot.;;;","2022-05-16 00:44;jnordstrom;My suggested fix consist of changing the lock object, the Monitor Class, to an internal object, and filtering based on that.;;;","2022-05-20 15:04;egahlin;Looks like the period for method sampling is included when calculating the minimum time to wait for periodic events. This is incorrect, method sampling events are not emitted by the period task thread. 

I filed a separate issue for this JDK-8287113.

It may make sense to hide internal Object.wait events as well, even thought they are only emitted once per second (with default configuration).;;;","2022-05-24 17:37;egahlin;I discussed this with Markus and jdk.jfr.internal.JVM::exclude(Thread) method is a cheap operation In JDK 19, but not in earlier release, so it should be avoided. 

It's probably better to check the oop for a lock specific classic, i.e. jdk.jfr.internal.Lock, in native after should_commit() has retured true, like you suggest. The lock class could be used in other places as well in the JFR implementation and if Valhalla deprecates the new Object() constructor we should have a dedicated class anyway. ;;;","2022-05-25 05:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8883
Date: 2022-05-25 12:24:03 +0000;;;","2022-10-20 10:04;dukebot;Changeset: fc889577
Author:    Joakim Nordström <jnordstrom@openjdk.org>
Committer: Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-10-19 10:34:17 +0000
URL:       https://git.openjdk.org/jdk/commit/fc889577eaf3f564d896818c1d9b1eb6fa5a8758
;;;","2023-01-09 13:14;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Limited risk because it changes jfr and no core functionality.
SAP nighlty testing passed.;;;","2023-01-09 13:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1044
Date: 2023-01-09 21:12:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GCC 12 reports use-after-free potential bugs,JDK-8286705,5074855,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2022-05-13 02:06,2023-08-07 14:11,2023-10-01 09:56,2022-05-14 18:35,17,19,,,,,,,,,,19,core-libs,,0,amazon-interest,gcc12,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"GCC 12 reports use-after-free potential bugs in below:

```
In function 'find_positions',
    inlined from 'find_file' at /home/ysuenaga/github-forked/jdk/src/java.base/share/native/libjli/parse_manifest.c:364:9:
/home/ysuenaga/github-forked/jdk/src/java.base/share/native/libjli/parse_manifest.c:292:34: warning: pointer 'endpos' used after 'free' [-Wuse-after-free]
  292 |             pos = flen - (endpos - cp);
      |                          ~~~~~~~~^~~~~
/home/ysuenaga/github-forked/jdk/src/java.base/share/native/libjli/parse_manifest.c:291:13: note: call to 'free' here
  291 |             free(buffer);
      |             ^~~~~~~~~~~~
Updating jdk/modules/jdk.jpackage/jdk/jpackage/internal/resources/jpackageapplauncher due to 1 file(s)
/home/ysuenaga/github-forked/jdk/src/jdk.jpackage/linux/native/applauncher/LinuxPackage.c: In function 'popenCommand':
/home/ysuenaga/github-forked/jdk/src/jdk.jpackage/linux/native/applauncher/LinuxPackage.c:180:63: warning: pointer 'strBufBegin' may be used after 'realloc' [-Wuse-after-free]
  180 |             strBufNextChar = strNewBufBegin + (strBufNextChar - strBufBegin);
      |                                               ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
/home/ysuenaga/github-forked/jdk/src/jdk.jpackage/linux/native/applauncher/LinuxPackage.c:174:30: note: call to 'realloc' here
  174 |             strNewBufBegin = realloc(strBufBegin, strBufCapacity);
      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```",,,,,,,,,,JDK-8300936,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286562,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3zn:",9223372036854775807,b23,,,,,,,,,,,"2022-05-13 07:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8696
Date: 2022-05-13 09:14:28 +0000;;;","2022-05-14 18:35;dukebot;Changeset: 0e4bece5
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2022-05-15 01:32:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0e4bece5b5143b8505496ea7430bbfa11e151aff
;;;","2023-01-19 13:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1088
Date: 2023-01-19 21:25:33 +0000;;;","2023-01-19 19:16;dlutker;Fix request [17u]

Clean backport to fix some issues detected by GCC 12. Low risk changes, tier1/2 tests still passing after running on Linux x64 with the other required backports to get it building with GCC 12.2.0;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect argument processing in java launcher,JDK-8286694,5074844,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2022-05-13 01:42,2023-08-07 14:19,2023-10-01 09:56,2022-05-18 22:55,17,19,,,,,,,,,,19,core-libs,,0,amazon-interest,gcc12,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"GCC 12 reports as following:

```
/home/ysuenaga/github-forked/jdk/src/java.base/share/native/libjli/java.c:1629:35: error: the comparison will always evaluate as 'false' for the pointer operand in 'arg + 2' must not be NULL [-Werror=address]
 1629 | *nargv++ = ((arg + 2) == NULL) ? NULL : JLI_StringDup(arg + 2);
      |
```

The code is here:

```
1625     /* Copy the VM arguments (i.e. prefixed with -J) */
1626     for (i = 0; i < jargc; i++) {
1627         const char *arg = jargv[i];
1628         if (arg[0] == '-' && arg[1] == 'J') {
1629             *nargv++ = ((arg + 2) == NULL) ? NULL : JLI_StringDup(a     rg + 2);
1630         }
1631     }
```

It seems to be expected that `NULL` is set to new array for arguments if invalid parameter ( `-J` only) is passed.
However `NULL` in new array for arguments (`nargv`) means stop condition for argument processing in below:

```
1214     while ((arg = *argv) != 0 && *arg == '-') {
```

`jargv` in L1627 means builtin arguments which is defined by `JAVA_ARGS` or `EXTRA_JAVA_ARGS` macro. So it should be ignored and reported it in laucher trace log.",,,,,,,,,,JDK-8303258,JDK-8301253,JDK-8303711,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286562,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3x7:",9223372036854775807,b24,,,,,,,,,,,"2022-05-13 07:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8694
Date: 2022-05-13 08:56:59 +0000;;;","2022-05-18 22:55;dukebot;Changeset: 26c7c92b
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2022-05-19 05:53:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/26c7c92bc93f3eecf7ce69c69f1999ba879d1d60
;;;","2023-01-26 11:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1117
Date: 2023-01-26 19:04:53 +0000;;;","2023-01-26 11:16;dlutker;Fix Request [17u]
Clean trivial backport to resolve a GCC 12 warning. This is low risk and passes local builds with GCC 12.2.0 and tier1/2 tests passing.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(se) Adjusting to select timeout after EINTR messed up after JDK-8286378,JDK-8286689,5074836,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jpai,alanb,alanb,2022-05-12 23:39,2022-07-27 06:26,2023-10-01 09:56,2022-05-13 04:10,19,,,,,,,,,,,19,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,,,,,,"JDK-8286378 has a small transposition error that changes the code the adjust the selection operation timeout after EINTR.

In src/java.base/linux/classes/sun/nio/ch/EPollSelectorImpl.java and src/java.base/unix/classes/sun/nio/ch/PollSelectorImpl, the use of ""to -="" change ""to =-"" in error. Note that the macOS  KQueuePollSelectorImpl.doSelect method was not changed JDK-8286378.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286378,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3vf:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2022-05-13 01:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8693
Date: 2022-05-13 08:13:35 +0000;;;","2022-05-13 04:10;dukebot;Changeset: 0be1f3e1
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-05-13 11:08:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0be1f3e1b0f4ac515a86e9f8e1999dc090b1bdd2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ShenandoahControlThread::request_gc misses the case of GCCause::_codecache_GC_threshold,JDK-8286681,5074828,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-05-12 19:20,2023-05-26 09:41,2023-10-01 09:56,2022-05-14 03:16,19,,,,,,,,,,,19,hotspot,,0,gc-shenandoah,tencent-interest,,,,,,,,,,,,,,,,,,,"This bug was exposed after JDK-8282191.

Reproduce:
 run java/foreign/TestIntrinsics.java fails with -XX:+UseShenandoahGC

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jvm/jdk/src/hotspot/share/gc/shenandoah/shenandoahControlThread.cpp:485), pid=42328, tid=42345
#  assert(GCCause::is_user_requested_gc(cause) || GCCause::is_serviceability_requested_gc(cause) || cause == GCCause::_metadata_GC_clear_soft_refs || cause == GCCause::_full_gc_alot || cause == GCCause::_wb_full_gc || cause == GCCause::_wb_breakpoint || cause == GCCause::_scavenge_alot) failed: only requested GCs here
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.jvm.jdk513)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.jvm.jdk513, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x16f3724]  ShenandoahControlThread::request_gc(GCCause::Cause)+0x224
#



Current thread (0x00007f852427d060):  JavaThread ""Sweeper thread"" daemon [_thread_in_vm, id=101859, stack(0x00007f84fe6ff000,0x00007f84fe800000)]

Stack: [0x00007f84fe6ff000,0x00007f84fe800000],  sp=0x00007f84fe7fec20,  free space=1023k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x126f367]  ShenandoahControlThread::request_gc(GCCause::Cause)+0x69
V  [libjvm.so+0x1283911]  ShenandoahHeap::collect(GCCause::Cause)+0x2b
V  [libjvm.so+0x13a0709]  NMethodSweeper::do_stack_scanning()+0x79
V  [libjvm.so+0x13a0b5f]  NMethodSweeper::sweep()+0x109
V  [libjvm.so+0x13a082a]  NMethodSweeper::sweeper_loop()+0xb0
V  [libjvm.so+0x8dcf5b]  CodeCacheSweeperThread::thread_entry(JavaThread*, JavaThread*)+0x15
V  [libjvm.so+0x13fd2e5]  JavaThread::thread_main_inner()+0x18b
V  [libjvm.so+0x13fd14e]  JavaThread::run()+0x234
V  [libjvm.so+0x13fa6d8]  Thread::call_run()+0x180
V  [libjvm.so+0x1132af5]  thread_native_entry(Thread*)+0x18f",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282191,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3tn:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-12 19:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8691
Date: 2022-05-13 02:43:55 +0000;;;","2022-05-14 03:16;dukebot;Changeset: 9eb15c9b
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-05-14 10:13:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9eb15c9b100b87e332c572bbc24a818e1cceb180
;;;","2023-05-26 09:41;shade;Added by JDK-8284161, does not apply to JDK 17.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix mistakes in FX API docs,JDK-8286678,5074825,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,nlisker,kcr,kcr,2022-05-12 15:12,2022-08-23 16:39,2023-10-01 09:56,2022-08-23 10:02,jfx19,,,,,,,,,,,jfx19,javafx,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,"Issue for collecting API doc fixes for OpenJFX19:

1. Typo in TextFormatter class docs: intial -> initial
2. javafx/concurrent/package.html: ""javafx.task"" -> ""javafx.concurrent""
3. https://openjfx.io/javadoc/18/javafx.graphics/javafx/concurrent/Service.html: ""Service which read -> ""Service that reads""
4. https://openjfx.io/javadoc/18/javafx.graphics/javafx/concurrent/ScheduledService.html: ""an backoff"" -> ""a backoff""
5. ObservableSetWrapper#retainAll: ""Keeps only elements that are included the specified collection"" -> missing ""in""
6. https://openjfx.io/javadoc/18/javafx.base/javafx/beans/binding/ObjectBinding.html#onInvalidating(): weird phrasing, needs a soft rewrite
7. Property.java L103: ""property1.bindBirectional(property2)"" -> ""property1.bindBidirectional(property2)""",,,,,,,,,,JDK-8292806,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3sz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-05-12 15:12;kcr;[~nlisker] Do you want to take this one again for JavaFX 19?;;;","2022-05-13 11:20;nlisker;Sure.;;;","2022-05-31 12:43;mhanl;Not a typo, but there are 2 semicolons in line 55 in ObjectPropertyBase (and the other ...PropertyBase classes). Not sure if we may also want to cleanup then with this ticket?;;;","2022-05-31 14:00;kcr;I'd prefer to do it as a separate cleanup bug (not as part of a doc bug).;;;","2022-06-01 12:40;mhanl;Agree, I filed https://bugs.openjdk.java.net/browse/JDK-8287690;;;","2022-08-18 14:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/877
Date: 2022-08-18 19:08:19 +0000;;;","2022-08-18 17:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/880
Date: 2022-08-18 23:52:48 +0000;;;","2022-08-23 10:02;dukebot;Changeset: 8b967765
Author:    Nir Lisker <nlisker@openjdk.org>
Date:      2022-08-23 17:00:17 +0000
URL:       https://git.openjdk.org/jfx/commit/8b96776510908c14a860680ad99404c339faa48f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[BACKOUT] (fc) Tune FileChannel.transferFrom(),JDK-8286677,5074824,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-05-12 15:07,2022-05-18 23:16,2023-10-01 09:56,2022-05-12 15:39,,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,Revert the PR for JDK-8274113 as there are many unexpected and unexplained failures in JFR on linux-aarch64.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3sr:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-05-12 15:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8688
Date: 2022-05-12 22:13:39 +0000;;;","2022-05-12 15:39;dukebot;Changeset: 369611ea
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-05-12 22:37:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/369611ea3484d33707f89e306437405ce19ce328
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fc) Modify sun.nio.ch.FileChannelImpl.map0() to accept a FileDescriptor parameter,JDK-8286671,5074811,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-05-12 10:46,2022-05-18 23:17,2023-10-01 09:56,2022-05-13 10:49,19,,,,,,,,,,,19,core-libs,,0,noreg-other,,,,,,,,,,,,,,,,,,,,Currently the Java_sun_nio_ch_FileChannelImpl_map0() function obtains the FileDescriptor from the 'fd' Object field of the sun.nio.ch.FileChannelImpl instance. It would be better simply to pass the FileDescriptor object as a parameter to map0(). This will also dispense with the native global variable 'chan_fd'.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274113,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x3pv:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-05-12 10:47;bpb;noreg-other label as this area is covered by existing tests.;;;","2022-05-12 16:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8689
Date: 2022-05-12 23:34:35 +0000;;;","2022-05-13 10:49;dukebot;Changeset: 583a61aa
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-05-13 17:46:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/583a61aabbcd1646305323488da4452773248396
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Resolve IDE warnings in WTrayIconPeer and SystemTray,JDK-8286663,5074801,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-05-12 08:23,2022-11-07 08:13,2023-10-01 09:56,2022-06-08 08:41,11,17,8,,,,,,,,,19,client-libs,,0,cleanup,cssn22_05_02,cssn22_06_01,cssn22_09_01,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-cleanup,sustaining,,,,,,,,,,,"WTrayIconPeer.disposeImpl calls popupParent.dispose() twice, the second call may produce NullPointerException.

SystemTray has a few redundant initializers for local variables.

SystemTray.getTrayIcons uses a sized array in toArray call, empty array is more efficient.",,,,,,,,,,JDK-8294506,JDK-8293250,JDK-8295207,JDK-8293255,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3nn:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-05-23 09:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8850
Date: 2022-05-23 16:43:05 +0000;;;","2022-06-08 08:41;dukebot;Changeset: a9b9831f
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-06-08 15:36:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a9b9831f2a88ed3b7701d402b167a096b94aeb98
;;;","2022-09-26 08:19;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
Medium risk, cleanup in desktop awt coding.
Clean backport. 
SAP nightly testing passed.;;;","2022-09-26 08:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/737
Date: 2022-09-26 15:21:57 +0000;;;","2022-10-11 05:49;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
Medium risk, cleanup in desktop awt coding. 
Clean backport except for Copyright.
SAP nighlty testing passed.;;;","2022-10-11 06:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1440
Date: 2022-10-11 12:50:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"codestrings gtest fails on AArch64: ""udf"" in padding",JDK-8286660,5074797,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-05-12 07:57,2022-05-18 23:18,2023-10-01 09:56,2022-05-17 01:50,19,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"On hsdis-enabled machine this test fails even with JDK-8274039:

$ CONF=linux-aarch64-server-fastdebug make run-test TEST=jtreg:gtest/GTestWrapper.java

[----------] 1 test from codestrings
[ RUN      ] codestrings.validate_vm
/home/shade/shipilev-jdk/test/hotspot/gtest/code/test_codestrings.cpp:85: Failure
Expected equality of these values:
  replace_addr_expr(out1.as_string())
    Which is: ""--------------------------------------------------------------------------------\n ;; First block comment.\n  <addr>:   nop\n--------------------------------------------------------------------------------\n""
  replace_addr_expr(out2.as_string())
    Which is: ""--------------------------------------------------------------------------------\n ;; First block comment.\n  <addr>:   nop\n  <addr>:   udf\t#0\n--------------------------------------------------------------------------------\n""
With diff:
@@ +2,4 @@
  ;; First block comment.
   <addr>:   nop
+  <addr>:   udf\t#0
 --------------------------------------------------------------------------------\n


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264207,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3mr:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-12 11:49;shade;Bisect points to JDK-8264207;;;","2022-05-13 02:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8695
Date: 2022-05-13 09:10:09 +0000;;;","2022-05-17 01:50;dukebot;Changeset: 63cace75
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-05-17 08:47:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/63cace759ee0a913536171d1e498decb517cc71a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JFR: Build failure when C1 or C2 is disabled after JDK-8282420,JDK-8286647,5074785,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-05-12 06:33,2022-05-18 23:16,2023-10-01 09:56,2022-05-12 15:50,19,,,,,,,,,,,19,hotspot,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,"
JDK fails to build when C1 or c2 is disabled by --with-jvm-features=-compiler{1,2}

```
* For target hotspot_variant-server_libjvm_objs_jfrResolution.o:
In file included from /jdk/src/hotspot/share/c1/c1_Instruction.hpp:28,
                 from /jdk/src/hotspot/share/c1/c1_IR.hpp:28,
                 from /jdk/src/hotspot/share/c1/c1_GraphBuilder.hpp:28,
                 from /jdk/src/hotspot/share/jfr/instrumentation/jfrResolution.cpp:26:
/jdk/src/hotspot/share/c1/c1_Compilation.hpp: In member function 'bool Compilation::should_install_code()':
/jdk/src/hotspot/share/c1/c1_Compilation.hpp:155:76: error: 'InstallMethods' was not declared in this scope
   bool should_install_code()                     { return _install_code && InstallMethods; }
                                                                            ^~~~~~~~~~~~~~
/jdk/src/hotspot/share/c1/c1_Compilation.hpp:155:76: note: suggested alternative: 'install_code'
   bool should_install_code()                     { return _install_code && InstallMethods; }
                                                                            ^~~~~~~~~~~~~~
                                                                            install_code
/jdk/src/hotspot/share/c1/c1_Compilation.hpp: In static member function 'static int Compilation::desired_max_code_buffer_size()':
/jdk/src/hotspot/share/c1/c1_Compilation.hpp:211:17: error: 'NMethodSizeLimit' was not declared in this scope
     return (int)NMethodSizeLimit;  // default 64K
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282420,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3k3:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-05-12 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8680
Date: 2022-05-12 13:52:52 +0000;;;","2022-05-12 15:50;dukebot;Changeset: 617ef541
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-05-12 22:48:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/617ef541bba58e45aa660aa30d7eb85c89ddb5b5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: CmpU needs to do more precise over/underflow analysis,JDK-8286638,5074774,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,epeter,epeter,epeter,2022-05-12 04:55,2023-01-17 02:45,2023-10-01 09:56,2022-05-16 00:25,17,18,19,,,,,,,,,19,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,,,,,,,,,,,,,,"Was originally from bug JDK-8283466 that reported multiple domination asserts.
Creating a separate bug because it is not related to all other issue, was only triggered with the ConvI2L refactoring JDK-8230382.

Original Bug Reproducer:

$ build/linux-x86_64-server-fastdebug/images/jdk/bin/java -cp 0029/ -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -Xcomp -XX:CompileOnly=Test -XX:-TieredCompilation Test
CompileCommand: compileonly Test.* bool compileonly = true
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc: SuppressErrorAt=/gcm.cpp:766
#
# A fatal error has been detected by the Java Runtime Environment:
#
# Internal Error (/home/shade/trunks/jdk/src/hotspot/share/opto/gcm.cpp:766), pid=3733508, tid=3733521
# assert(!LCA_orig->dominates(pred_block) || early->dominates(pred_block)) failed: early is high enough
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.shade.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.shade.jdk, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V [libjvm.so+0xdd1fe5] PhaseCFG::insert_anti_dependences(Block*, Node*, bool)+0x18a5


Copied analysis from comments in JDK-8283466?:

Scenario:
type i: [minint...0]
access to c[i-1]

Range-check:
int index = AddI(i, -1)
-> type index: [minint-1 ... -1] -> underflow -> int
CmpU(index, c.size()) [lt] -> checks index>=0 and index<c.size()
Consequence: range-check cannot statically determine that the access is never ok.
Sad, because we can manually tell that the range [minint-1 ... -1] should not pass the range check.

Data-flow:
long index = ConvI2L( AddI(i, -1) )
-> type of ConvI2L: [0...maxint-1]
-> why do we know this? Because this is before an array access. We assume range-check guarantees index in range [0...c.size()-1], and c.size()<=maxint.
Then there is a push_thru_add, and we get:
long index = AddL( ConvI2L(i), -1)
-> type of new ConvI2L: [1...maxint-1] - because we correct the lo by 1 for the add. Somehow we do not adjust hi, in my opinion it should now be maxint, to correct by 1.
Consequence: if hi is maxint or maxint-1, there is no overflow.
Then, we statically detect that:
type i: [minint...0]
type ConvI2L: [1...maxint-1]
-> filter results in TOP -> data-flow is eliminated sucessfully.

Result in the end:
data-flow collapses, while control-flow (range-check) does not collapse. This leads to issues described above.

With the help of [~thartmann], we tracked it to CmpUNode::Value.
There, we analyze if the in1 is an AddI.
We detect that this AddI may have 2 ranges:
tr1: int:<=-1:www
tr2: int:max (underflow: minint-1)

We then check how these ranges compare to in2:
t2: int:>=0

For this we compute:
const Type* cmp1 = sub(tr1, t2); -> TypeInt::CC_GT = [1]
const Type* cmp2 = sub(tr2, t2); -> TypeInt::CC_GE = [0...1]

But then, we only do something with this result if cmp1 == cmp2.
https://github.com/openjdk/jdk/blame/master/src/hotspot/share/opto/subnode.cpp#L832

However, I wonder if we can not just take the union of cmp1 and cmp2, which would be [0...1] = [GE]
Then, the output node [655 Bool] checks for [lt], which we could know is never true.
We could conclude that the Range-check never passes.
This would then also kill the control-flow, in parallel to the data-flow that is already killed with ConvI2L.

Implementation:
const TypeInt* cmp1 = sub(tr1, t2)->is_int();
const TypeInt* cmp2 = sub(tr2, t2)->is_int();
// compute union, so that cmp handles all possible results from the two cases
return cmp1->meet(cmp2);",,,,,,,,,,JDK-8288800,JDK-8288959,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286361,,JDK-8230382,JDK-8283466,JDK-8299959,,,,,,,,,,,,,"2022-05-12 04:57;epeter;0029.zip;https://bugs.openjdk.org/secure/attachment/98923/0029.zip",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3hn:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-05-12 05:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8679
Date: 2022-05-12 12:29:22 +0000;;;","2022-05-13 17:49;dlong;Does this affect product builds?;;;","2022-05-16 00:25;dukebot;Changeset: 2d34acfe
Author:    Emanuel Peter <emanuel.peter@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-05-16 07:21:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2d34acfec908e6cdfb8e920b54d5b932029e4bac
;;;","2022-05-16 00:42;epeter;[~dlong] Yes, it seems to affect product build. JDK-19 build 22.
I use the regression test I have just integrated:

jdk-19-22-linux-x64/bin/java -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -Xcomp -XX:-TieredCompilation -XX:CompileCommand=compileonly,compiler.rangechecks.TestRangeCheckCmpUUnderflow::* -XX:RepeatCompilation=300 TestRangeCheckCmpUUnderflow.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fa6403e0868, pid=2592964, tid=2592977
#
# JRE version: Java(TM) SE Runtime Environment (19.0+22) (build 19-ea+22-1598)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19-ea+22-1598, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x455868]  OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*)+0x108
#
# Core dump will be written. Default location: /scratch/empeter/core.2592964
#
# An error report file with more information is saved as:
# /scratch/empeter/hs_err_pid2592964.log
#
# Compiler replay data is saved as:
# /scratch/empeter/replay_pid2592964.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
;;;","2022-05-16 14:16;dlong;ILW = crash in compiler; reproduces with stress flags; disable compilation = HMM = P2;;;","2022-06-21 01:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/168
Date: 2022-06-21 08:26:59 +0000;;;","2022-06-21 08:33;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A C2 fix we should take.
Clean backport.
Test passes, but also without the fix.  SAP nightly testing passed.;;;","2022-06-21 08:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/486
Date: 2022-06-21 15:42:50 +0000;;;","2022-07-11 17:19;epavlova;New added compiler/rangechecks/TestRangeCheckCmpUUnderflow.java test passed in JDK 19 ATR.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fc) Memory mapped regions bigger than 2GB do not work correctly on Windows,JDK-8286637,5074773,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bpb,mcimadamore,mcimadamore,2022-05-12 04:49,2023-07-29 02:50,2023-10-01 09:56,2022-05-18 07:52,17,18,19,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"The Windows implementation of FileChannel::map seems incorrect, as it converts a jlong byte size into a DWORD, thus dropping 32 bits on the floor:

```
mapAddress = MapViewOfFile(
        mapping,             /* Handle of file mapping object */
        mapAccess,           /* Read and write access */
        highOffset,          /* High word of offset */
        lowOffset,           /* Low word of offset */
        (DWORD)len);         /* Number of bytes to map */ <------
```

This issue was discovered and reported in the panama-dev mailing list:

https://mail.openjdk.java.net/pipermail/panama-dev/2022-May/016977.html

Of course this was never an issue with MappedByteBuffer, whose size can never exceed 2^32.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287154,,,,,,,JDK-8287526,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3hf:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-05-12 04:52;mcimadamore;A workaround is to use a size of the memory mapped region that is a power of two. When doing this, the low 32-bit of the size will be exactly zero. Then, as specified in MapViewOfFile [1]:

""If this parameter is 0 (zero), the mapping extends from the specified offset to the end of the file mapping.""

So, doing this will return a view that will span for the entire memory mapping.

[1] - https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-mapviewoffile;;;","2022-05-12 12:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8686
Date: 2022-05-12 19:15:23 +0000;;;","2022-05-18 07:52;dukebot;Changeset: e934a2c7
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-05-18 14:49:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e934a2c752266847f4ea88c207a2fc2a8e743ff1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[11] avoid -std=c++11 CXX harfbuzz buildflag on Windows,JDK-8286630,5074764,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-05-12 02:34,2022-07-05 23:27,2023-10-01 09:56,2022-05-13 03:35,11,,,,,,,,,,,11.0.16,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,"The Visual Studio compilers (checked VS2013 and VS2017)  do not know this flag, output is 
cl : Command line warning D9002 : ignoring unknown option '-std=c+11'

So the flag should be avoided on Windows.

JDK 17 and above use c++14 already, that's why this change is for 11u only.",,,,,,,,,,JDK-8289795,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,windows,,,,,,"0|i2x3ff:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-05-12 02:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1081
Date: 2022-05-12 09:43:55 +0000;;;","2022-05-13 03:34;dukebot;Changeset: 844f03b5
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-05-13 10:32:16 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/844f03b522b5c40e5ffdd79da16890b45c3aba99
;;;","2022-05-17 23:13;dukebot;Changeset: 844f03b5
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-05-13 10:32:16 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/844f03b522b5c40e5ffdd79da16890b45c3aba99
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2 fails with assert(!n->is_Store() && !n->is_LoadStore()) failed: no node with a side effect,JDK-8286625,5074760,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,alanb,alanb,2022-05-12 01:28,2023-03-10 01:08,2023-10-01 09:56,2022-06-07 23:43,17,19,repo-loom,,,,,,,,,19,hotspot,,0,c2,intermittent-low-frequency,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-19,stress,,,,,,,,,,,,,,"applications/ctw/modules/java_base_2.java failed when testing a sync up of the loom repo to jdk-19+22:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (src/hotspot/share/opto/loopopts.cpp:1598), pid=28136, tid=28855
#  assert(!n->is_Store() && !n->is_LoadStore()) failed: no node with a side effect
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (fastdebug build 19-internal-2022-05-12-0621265.alan.bateman.loom-merge)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-internal-2022-05-12-0621265.alan.bateman.loom-merge, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x149471c]  PhaseIdealLoop::try_sink_out_of_loop(Node*)+0xa1c

Note that the test fails with randomization on (-XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:+StressCCP).

If it fails in the loom repo then it is likely that it fails in the main line too, when run with --enable-preview.

Executed CTW for all 3254 classes in modules:java.base(at /opt/mach5/mesos/work_dir/jib-master/install/2022-05-12-0621265.alan.bateman.loom-merge/linux-x64-debug.jdk/jdk-19/fastdebug/lib/modules)
----------System.err:(21/1342)----------
There were 1 errors:[
java.lang.Error: modules_java_base_3254: failed during compilation of class #4520 : sun/net/util/IPAddressUtil
	at sun.hotspot.tools.ctw.CtwRunner.startCtwforAllClasses(CtwRunner.java:215)
	at sun.hotspot.tools.ctw.CtwRunner.run(CtwRunner.java:119)
	at sun.hotspot.tools.ctw.CtwRunner.main(CtwRunner.java:65)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1585)

java.lang.AssertionError: There were 1 errors:[{modules_java_base_3254: failed during compilation of class #4520 : sun/net/util/IPAddressUtil}]
	at sun.hotspot.tools.ctw.CtwRunner.run(CtwRunner.java:134)
	at sun.hotspot.tools.ctw.CtwRunner.main(CtwRunner.java:65)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1585)

JavaTest Message: Test threw exception: java.lang.AssertionError
JavaTest Message: shutting down test",,,,,,,,,,JDK-8288801,JDK-8289636,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303466,JDK-8289127,JDK-8294967,,,,,JDK-8252372,JDK-8269088,JDK-8288000,,,,,,"2022-05-12 02:43;rcastanedalo;hs_err_modules_java_base_3254_28136.log;https://bugs.openjdk.org/secure/attachment/98919/hs_err_modules_java_base_3254_28136.log","2022-05-16 02:17;thartmann;replay_adjusted.log;https://bugs.openjdk.org/secure/attachment/98946/replay_adjusted.log","2022-05-12 02:43;rcastanedalo;replay_modules_java_base_3254_28136.log;https://bugs.openjdk.org/secure/attachment/98920/replay_modules_java_base_3254_28136.log",,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3ej:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-12 04:25;rcastanedalo;Adding 19 as an affected version speculatively, even if the failure has only been seen so far in the loom repo.;;;","2022-05-12 04:29;rcastanedalo;ILW = assertion failure in debug build; seen once in loom repo with stress flags on (likely to occur in mainline with --enable-preview); disable compilation of affected method = MLH = P4;;;","2022-05-16 02:08;thartmann;This is most likely another regression of JDK-8252372.;;;","2022-05-16 02:17;thartmann;I slightly adjusted the replay compilation file by removing Loom specific references to jdk/internal/vm/Continuation (see attached replay_adjusted.log) and this now reproduces with latest JDK 19-ea+23-1651:
 -XX:+ReplayIgnoreInitErrors -XX:+ReplayCompiles -XX:+PrintCompilation -XX:ReplayDataFile=replay_adjusted.log -XX:RepeatCompilation=10000 -XX:+StressIGVN

Raising priority.;;;","2022-05-16 02:19;thartmann;Roland, could you please have a look?;;;","2022-05-16 03:18;thartmann;Could actually be a duplicate of JDK-8278420.;;;","2022-06-02 08:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8996
Date: 2022-06-02 15:43:09 +0000;;;","2022-06-07 23:43;dukebot;Changeset: 590337e2
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-06-08 06:35:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/590337e2f229445e353e7c32e0dcff8d93e412d2
;;;","2022-06-28 12:45;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Harmless change, but typical C2 fix risk, we should fix it anyways.
Clean backport.
Test passes and fails without the fix.  SAP nightly testing passed.
;;;","2022-06-28 12:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/514
Date: 2022-06-28 19:52:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Regression Test CoordinateTruncationBug.java fails on OL8.3,JDK-8286624,5074759,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,mbollapragad,mbollapragad,2022-05-12 01:24,2023-07-24 21:40,2023-10-01 09:56,2022-11-14 11:18,11,17,18,19,8,,,,,,,20,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,sn_131,sqebug,test_sprint,test_sprint_nov_2022,testbug,,,,,,,,"closed/test/jdk/sun/java2d/SunGraphics2D/CoordinateTruncationBug.java fails on OEL 8.3 (Aarch64)  with JDK 18.0.2+5

----------System.err:(13/726)----------
Screen(0, 0) == ff000000
Screen failed!
java.lang.RuntimeException: Test failed due to 1 or more failures
	at CoordinateTruncationBug.main(CoordinateTruncationBug.java:40)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test failed due to 1 or more failures
JavaTest Message: shutting down test

Note : echo $XDG_SESSION_TYPE returns x11",,,,,,,,,,JDK-8297282,JDK-8297370,JDK-8312005,JDK-8297971,JDK-8297328,JDK-8312007,JDK-8312653,JDK-8305468,JDK-8297466,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,linux_oracle_8,,,,,,"0|i2x3eb:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-05-14 11:47;prr;Well I can see why frame.setLocationRelativeTo(null) helps. Currently the test's undecorated window is placed at (0,0) which means right under the desktop menu bar
That menu bar has a tiny ""curve"" at both left and right which extends down into the main desktop area, and the menu bar has a black b/g.

I've attached ol83.png which shows what I mean - the white rect is the test canvas and it is overlapped in the top-left by the title bar, so as soon as the test samples pixel (0,0) it gets black instead of the expected white and fails.

I guess if we ran the headful tests on an OL 8.4 x64 desktop we'd see the same .. plans are in motion for that .. but all headful testing is on Ubuntu rn.
Although thinking about it I wonder if that means previous SQE ATR runs did not include this config for x64 either.
Any way 'aarch64' is a red herring unless they come with different desktops than x64 which I doubt !
So this is a test issue. I also have to say I don't like the way the test waits .. or more or less doesn't wait .. for the canvas to be displayed .. not enough certainty to me.


;;;","2022-11-12 12:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11120
Date: 2022-11-12 20:29:39 +0000;;;","2022-11-14 11:52;dukebot;Changeset: c71d87e5
Author:    Phil Race <prr@openjdk.org>
Date:      2022-11-14 19:50:45 +0000
URL:       https://git.openjdk.org/jdk/commit/c71d87e54ca0c0173583bed978e06c7faa0fa283
;;;","2022-11-17 22:11;vrudomet;Fix Request [11u, 17u, 19u]

Clean backport. New test, low risk.
Test pass during manual run (mac, linux, x64 aarch64) using
make run-test TEST=""test/jdk/sun/java2d/SunGraphics2D/CoordinateTruncationBug.java"";;;","2022-11-17 22:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/72
Date: 2022-11-18 06:31:06 +0000;;;","2022-11-17 22:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/896
Date: 2022-11-18 06:31:04 +0000;;;","2022-11-17 22:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1528
Date: 2022-11-18 06:31:08 +0000;;;","2022-11-28 20:52;vrudomet;Fix request [8u]

Clean Backport for the test itself (new test), but the test needs to be moved due to 8 directory structure
New test, low risk.
Test passes during manual run on linux and mac ;;;","2022-11-28 21:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/199
Date: 2022-11-29 04:53:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create regression test for verifying setMargin() of JRadioButton,JDK-8286620,5074755,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2022-05-11 23:10,2023-07-06 04:08,2023-10-01 09:56,2022-06-07 08:53,,,,,,,,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_120,,,,,,,,,,,,,,,"Test case bug4380543.java added for checking setMargin() of JRadioButton.
Reference bugs: JDK-4380543, JDK-8134640.",,,,,,,,,,JDK-8311471,JDK-8310506,JDK-8311567,JDK-8311573,JDK-8310286,JDK-8311402,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8075919,,JDK-8134640,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3df:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-05-12 21:30;tr;Moving the test from closed to open. 
;;;","2022-05-16 01:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8721
Date: 2022-05-16 06:45:04 +0000;;;","2022-06-07 08:53;dukebot;Changeset: 67f1bd7f
Author:    Tejesh R <tr@openjdk.org>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-06-07 15:50:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/67f1bd7ff1bb218fd6de9ef1e957f729013e133c
;;;","2023-06-16 03:43;goetz;Fix request [17u]

I backport this as prerequisite of JDK-8289238.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed;;;","2023-06-16 03:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1456
Date: 2023-06-16 10:45:11 +0000;;;","2023-06-30 00:36;goetz;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
I had to adapt the test to Java 11 syntax.
Test passes.  SAP nightly testing passes.
;;;","2023-06-30 00:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2015
Date: 2023-06-30 07:36:14 +0000;;;","2023-07-04 14:56;clanger;I don't see a backport to Oracle 11.0.21, but nevermind. Just a new test.;;;","2023-07-04 23:57;goetz;[11u] Sorry, the reason is that it is a prerequisite to JDK-8289238.  Anyways, more tests are good.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mac Aarch: Excessive warnings to be ignored for build jdk,JDK-8286601,5074728,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,afarley,afarley,afarley,2022-05-11 10:43,2022-05-26 10:21,2023-10-01 09:56,2022-05-12 02:28,17,18,,,,,,,,,,19,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,,,,,,,,,,,,,,,,"When building OpenJDK17 or OpenJDK18 on Mac Aarch64 using the Clang compiler, there are a large number of low-priority warning messages warning of unused parameters and the like.

Total text output on JDK17 is approximately 170mb, and the output on JDK18 is around 90mb. This feels excessive, especially when compared with the JDK11 output (under 1mb).

After checking flags-cflags.m4, it seems we don't set BUILD_CC_DISABLE_WARNING_PREFIX to ""-Wno-"", which results in the buildjdk-spec.gmk file (generated from buildjdk-spec.gmk.in) not using the same set of warning suppression flags as:
- when you're building the buildjdk and full jdk with gcc
and
- when you're building the full jdk with clang

In short, I propose we set that variable in the same way we do when using the gcc compiler and when using clang for making the full jdk; ignoring the same warnings. This has been tested, and knocks the output down to under 1mb, while still producing a healthy build.

My plan is to propose this change in the head branch before proposing a backport to 18 and 17.",,,,,,,,,,JDK-8287182,JDK-8287184,JDK-8287252,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,,,"0|i2x37f:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-05-11 13:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8665
Date: 2022-05-11 20:55:29 +0000;;;","2022-05-12 02:28;dukebot;Changeset: 40f43c6b
Author:    Adam Farley <afarley@openjdk.org>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-05-12 09:27:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/40f43c6b1ffc88d55dd3223f5d0259ae73cf0356
;;;","2022-05-12 14:20;afarley;Fix Request
Request to backport this fix to JDK17u and JDK18u, please.
Patch should apply clean, and prevents the same issue seen on those two versions.;;;","2022-05-13 03:33;goetz;[17u]
Hi @adfarley, please make a PR for the change before flagging jdk17u-fix-request. Thanks.;;;","2022-05-13 04:21;afarley;Hi @goetz, Thanks for the information. PRs have been requested via /backport.;;;","2022-05-13 04:27;afarley;Backport PRs:
JDK17u: https://github.com/openjdk/jdk17u/pull/338
JDK18u: https://github.com/openjdk/jdk18u/pull/130;;;","2022-05-13 04:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/130
Date: 2022-05-13 11:24:39 +0000;;;","2022-05-13 04:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u/pull/338
Date: 2022-05-13 11:25:46 +0000;;;","2022-05-13 12:58;afarley;In hindsight, these probably shouldn't be labelled ""integrate"" until the fix request has been approved via the bug. Will cancel those and create two new ones. Same content, just lacking the integrate label until this bug's fix request labels have been changed to ""yes"".

Edit: Done. New PRs have been raised, and will not be tagged ""/integrate"" until the fix request tags in this bug have been changed to ""yes"".;;;","2022-05-13 13:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/131
Date: 2022-05-13 20:02:39 +0000;;;","2022-05-13 13:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u/pull/339
Date: 2022-05-13 20:03:10 +0000;;;","2022-05-25 04:23;goetz;Hi @adfarley
you pushed this change to the wrong repo. I admitted it only to jdk17u-dev.  I should have seen that you used the wrong repo for your PR before approving. Please note for next time.;;;","2022-05-26 10:21;afarley;I will remember. Thank you for pointing it out.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: -XX:UseBranchProtection=pac-ret crashes after JDK-8284161,JDK-8286596,5074723,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ngasson,ngasson,ngasson,2022-05-11 09:04,2022-07-13 15:22,2023-10-01 09:56,2022-05-17 08:14,19,,,,,,,,,,,19,hotspot,,0,aarch64-related,loom,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,,,,,,,,,,,,,,,"$ ./build/linux-aarch64-server-fastdebug/jdk/bin/java -XX:UseBranchProtection=pac-ret -version
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000ffff7100250c, pid=1032126, tid=1032127
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.entuser.jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.entuser.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# J 8 c1 java.lang.StringLatin1.hashCode([B)I java.base (42 bytes) @ 0x0000ffff7100250c [0x0000ffff71002500+0x000000000000000c]
#
# Core dump will be written. Default location: /tmp/core.1032126
#
# An error report file with more information is saved as:
# /home/ent-user/jdk/hs_err_pid1032126.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,,,"0|i2x36b:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-05-11 16:01;dlong;ILW = crash in c1 generated code; on aarch64 with UseBranchProtection flag; no workaround = HLH = P2;;;","2022-05-11 22:48;alanb;I'm trying to see if this could had been caught by the testing done on JEP 425 prior to integration. Would I be correct to say that this feature is only enabled if you configure/build with --enable-branch-protection and run on special HW has has this feature?;;;","2022-05-12 01:59;ngasson;Yes that's right. It's a bit of a pain to test as there isn't much publicly available hardware that supports it yet. The best option is the Apple M1 with a Fedora VM or Docker container (macOS doesn't enable it by default).

For this crash the fix is pretty straightforward. I'll submit the patch later today.;;;","2022-05-12 07:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8682
Date: 2022-05-12 14:52:18 +0000;;;","2022-05-17 08:14;dukebot;Changeset: 87d9d7f5
Author:    Nick Gasson <ngasson@openjdk.org>
Date:      2022-05-17 15:11:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/87d9d7f54207b00ffea510f16930f38a64b612d9
;;;","2022-07-13 15:22;epavlova;I built latest jdk19 sources with BranchProtection support
(configure --enable-branch-protection) and tested that 
> java -XX:UseBranchProtection=pac-ret -version
doesn't crash. So mark this bug as verified.

However, I also noticed that running 
> java -XX:UseBranchProtection=pac-ret -version
on the build arrch64 build without BranchProtection support (which is default)
results in following crash:

#  SIGILL (0x4) at pc=0x0000fffbcc582248, pid=934918, tid=934919
#
# JRE version:  (19.0+30) (fastdebug build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+30-2169, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# v  ~StubRoutines::jbyte_arraycopy 0x0000fffbcc582248
..
Stack: [0x0000fffbe1ee0000,0x0000fffbe20e0000],  sp=0x0000fffbe20de240,  free space=2040k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
v  ~StubRoutines::jbyte_arraycopy 0x0000fffbcc582248
V  [libjvm.so+0x184b62c]  StubRoutines::initialize2()+0x58
V  [libjvm.so+0xf1b524]  init_globals()+0xc4
V  [libjvm.so+0x1905800]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x2d0
V  [libjvm.so+0x10aca6c]  JNI_CreateJavaVM+0xbc
C  [libjli.so+0x3c50]  JavaMain+0x7c
C  [libjli.so+0x756c]  ThreadJavaMain+0xc
C  [libpthread.so.0+0x78f8]  start_thread+0x188

Perhaps it should not crash but fail with warning instead. Please comment.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build fails on macos aarch64 when using --with-zlib=bundled,JDK-8286582,5074702,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-05-11 04:20,2022-11-15 18:54,2023-10-01 09:56,2022-05-12 01:13,19,,,,,,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-build,,,,,,,,,,,,,,"As noted in https://mail.openjdk.java.net/pipermail/build-dev/2022-March/033956.html, using --with-zlib=bundled, currently fails on macos aarch64 with errors like:

build errors:

/home/me/jdk/src/java.base/share/native/libzip/zlib/gzlib.c:276:9: 
error: implicit declaration of function 'lseek' is invalid in C99 
[-Werror,-Wimplicit-function-declaration]
         LSEEK(state->fd, 0, SEEK_END);  /* so gzoffset() is correct */
         ^
/home/me/jdk/src/java.base/share/native/libzip/zlib/gzlib.c:38:17: note: 
expanded from macro 'LSEEK'
#  define LSEEK lseek
                 ^
/home/me/jdk/src/java.base/share/native/libzip/zlib/gzlib.c:276:9: note: 
did you mean 'fseek'?
/home/me/jdk/src/java.base/share/native/libzip/zlib/gzlib.c:38:17: note: 
expanded from macro 'LSEEK'
#  define LSEEK lseek
                 ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/stdio.h:162:6: 
note: 'fseek' declared here
int      fseek(FILE *, long, int);
          ^
/home/me/jdk/src/java.base/share/native/libzip/zlib/gzlib.c:282:24: 
error: implicit declaration of function 'lseek' is invalid in C99 
[-Werror,-Wimplicit-function-declaration]
         state->start = LSEEK(state->fd, 0, SEEK_CUR);
                        ^
/home/me/jdk/src/java.base/share/native/libzip/zlib/gzlib.c:38:17: note: 
expanded from macro 'LSEEK'
#  define LSEEK lseek
                 ^
/home/me/jdk/src/java.base/share/native/libzip/zlib/gzlib.c:383:9: 
error: implicit declaration of function 'lseek' is invalid in C99 
[-Werror,-Wimplicit-function-declaration]
     if (LSEEK(state->fd, state->start, SEEK_SET) == -1)
         ^
/home/me/jdk/src/java.base/share/native/libzip/zlib/gzlib.c:38:17: note: 
expanded from macro 'LSEEK'
#  define LSEEK lseek
                 ^
/home/me/jdk/src/java.base/share/native/libzip/zlib/gzlib.c:424:15: 
error: implicit declaration of function 'lseek' is invalid in C99 
[-Werror,-Wimplicit-function-declaration]
         ret = LSEEK(state->fd, offset - state->x.have, SEEK_CUR);
               ^
/home/me/jdk/src/java.base/share/native/libzip/zlib/gzlib.c:38:17: note: 
expanded from macro 'LSEEK'
#  define LSEEK lseek
                 ^
/home/me/jdk/src/java.base/share/native/libzip/zlib/gzlib.c:520:14: 
error: implicit declaration of function 'lseek' is invalid in C99 
[-Werror,-Wimplicit-function-declaration]
     offset = LSEEK(state->fd, 0, SEEK_CUR);
              ^
/home/me/jdk/src/java.base/share/native/libzip/zlib/gzlib.c:38:17: note: 
expanded from macro 'LSEEK'
#  define LSEEK lseek
                 ^
5 errors generated.
",,,,,,,,,,JDK-8293024,JDK-8297093,JDK-8293025,JDK-8289102,JDK-8289181,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x31n:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2022-05-11 04:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8651
Date: 2022-05-11 11:38:31 +0000;;;","2022-05-12 01:13;dukebot;Changeset: 50d47de8
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-05-12 08:09:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/50d47de8358e2f22bf3a4a165d660c25ef6eacbc
;;;","2022-06-21 21:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/175
Date: 2022-06-22 04:14:55 +0000;;;","2022-06-21 23:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/493
Date: 2022-06-22 05:43:56 +0000;;;","2022-06-22 19:25;serb;Fix request (17u)

The clean backport.
- Justification: The fix for a build issue if the ""--with-zlib=bundled"" is set. This change will open the possibilities to use the bundled version of the zlib on macOS, see https://bugs.openjdk.org/browse/JDK-8286623 for details.
- Risk Analysis: Low
https://github.com/openjdk/jdk17u-dev/pull/493;;;","2022-06-23 02:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1177
Date: 2022-06-23 06:23:50 +0000;;;","2022-06-23 12:31;serb;Fix request (11u)

Mostly clean backport, see my comment: https://github.com/openjdk/jdk11u-dev/pull/1177#discussion_r904759091
- Justification: The fix for a build issue if the ""--with-zlib=bundled"" is set. This change will open the possibilities to use the bundled version of the zlib on macOS, see https://bugs.openjdk.org/browse/JDK-8286623 for details.
- Risk Analysis: Low
https://github.com/openjdk/jdk11u-dev/pull/1177;;;","2022-06-26 21:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/80
Date: 2022-06-27 00:33:27 +0000;;;","2022-06-28 13:40;serb;Fix request (8u)

- Justification: The fix for a build issue if the ""--with-zlib=bundled"" is set. This change will open the possibility to use the bundled version of the zlib on macOS, see https://bugs.openjdk.org/browse/JDK-8286623 for details.
- Risk Analysis: Low
https://github.com/openjdk/jdk8u-dev/pull/80

The patch for JDK8 is slightly different:
1. The main code patch is moved from the make/autoconf/lib-bundled.m4 to the jdk/make/lib/CoreLibraries.gmk the same place where "":= -lz"" option is set.
2. All disabled warnings are removed from the patch, seems we do not have such DISABLED_WARNINGS_XX in JDK8

;;;","2022-08-30 19:05;andrew;Revoking 8u approval for now as there are still issues with the PR (which also needs to be reopened);;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make Java process DPI Aware if sun.java2d.dpiaware property is set,JDK-8286581,5074700,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rmahajan,aivanov,aivanov,2022-05-11 03:48,2023-02-15 11:50,2023-10-01 09:56,2023-01-18 10:05,11,17,,,,,,,,,,21,client-libs,,0,cleanup,cssn23_01_01,noreg-hard,sustaining,,,,,,,,,,,,,,,,,"The 'sun.java2d.dpiaware' property controlled whether Java tried to declare itself DPI Aware for Windows. Setting this property didn't work after dpiaware flag was added to the application manifest.

It doesn't work now because Java launchers are Per-Monitor v2 DPI Aware via the application manifest.

Thus, we need to make sure that when sun.java2d.dpiaware is set to true we have Java process DPI awareness set to Per-Monitor v2 DPI Aware to match what is the manifest file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2x317:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-05-11 10:31;prr;And what if someone has a custom launcher ? ;;;","2022-05-11 14:46;aivanov;I didn't think about it. But then the DPI awareness of the process should rather be set to 'Per-Monitor v2' instead of 'System'. What do you think?;;;","2022-05-13 19:21;prr;Yes, if I understand you correctly, it should be brought up to par with the manifest and
hence expected JDK's modern Windows behaviour. ;;;","2023-01-13 13:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11998
Date: 2023-01-13 20:53:31 +0000;;;","2023-01-18 10:05;dukebot;Changeset: 2a46e07f
Author:    Rajat Mahajan <rajat.m.mahajan@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-01-18 18:04:30 +0000
URL:       https://git.openjdk.org/jdk/commit/2a46e07f7d85a3c7db93b53b5c347cd96a91cbb9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/jvmti/vthread/GetSetLocalTest failed with assert: Not supported for heap frames,JDK-8286580,5074699,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sspitsyn,sspitsyn,sspitsyn,2022-05-11 03:43,2022-08-03 18:14,2023-10-01 09:56,2022-06-23 09:25,19,repo-loom,,,,,,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,"Robbin noticed the test serviceability/jvmti/vthread/GetSetLocalTest is failing with the assert:

open/src/hotspot/share/runtime/vframe.cpp:300
#  assert(stack_chunk() == __null) failed: Not supported for heap frames

V  [libjvm.dylib+0x11b01dc]  interpretedVFrame::locals_addr_at(int) const+0xc8
V  [libjvm.dylib+0x11b1288]  interpretedVFrame::set_locals(StackValueCollection*) const+0xf0
V  [libjvm.dylib+0xc31c80]  VM_BaseGetOrSetLocal::doit()+0x5fc
V  [libjvm.dylib+0x11cfbe0]  VM_Operation::evaluate()+0x104
V  [libjvm.dylib+0x11eb640]  VMThread::evaluate_operation(VM_Operation*)+0x100",,,,,,,,,,JDK-8291310,JDK-8289237,JDK-8291143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291525,,JDK-8291525,,,,,,,JDK-8288387,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x30z:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-05-11 05:36;alanb;This issue may require checking the that spec and implementation are aligned. The spec currently has ""The SetLocalXXX functions may be used to set the value of a local variable in the topmost frame of a virtual thread suspended at a breakpoint or single step event."" but the implementation is more relaxed and does not require the thread to be suspended.;;;","2022-06-02 13:59;sspitsyn;This issue is reproducible with the options:
 -Xcomp -ea -esa -XX:+UnlockExperimentalVMOptions -XX:-TieredCompilation -XX:+DeoptimizeALot --enable-preview

The assert is fired when the JVMTI SetLocalObject() is setting the value of locall 'tt' of method 'producer() by index 1 in the topmost frame at the depth 0 (target virtual thread has been mounted and suspended):
  // #6: Test JVMTI SetLocal<Type> functions with a good vthread
  err = jvmti->SetLocalObject(vthread, depth, SlotThread, values->tt);

The fragment of Java code with the producer() method:

    static void producer(String msg) throws InterruptedException {
        Thread tt = Thread.currentThread();    <== this local is by index 1 
        . . .
        QUEUE.put(msg);
    }

This is the extra debug tracing at the point where the is called:
  test_SetLocal: mounted: 1 depth: 0 fcount: 8
  DBG: VM_BaseGetOrSetLocal::doit: _set: 1, _depth: 0, in_continuation: 1
  DBG: VM_BaseGetOrSetLocal::doit: _index: 1, _type: 12 (T_OBJECT), _value: 7fb368000c30

Stack trace of mounted target virtual thread:

JVMTI Stack Trace for thread VThread-Producer: frame count: 8
 0: GetSetLocalTest: producer(Ljava/lang/String;)V
 1: GetSetLocalTest: lambda$static$0()V
 2: GetSetLocalTest$$Lambda$1.0x0000000801001518: run()V
 3: java/lang/VirtualThread: run(Ljava/lang/Runnable;)V
 4: java/lang/VirtualThread$VThreadContinuation: lambda$new$0(Ljava/lang/VirtualThread;Ljava/lang/Runnable;)V
 5: java/lang/VirtualThread$VThreadContinuation$$Lambda$8.0x000000080104fa30: run()V
 6: jdk/internal/vm/Continuation: enter0()V
 7: jdk/internal/vm/Continuation: enter(Ljdk/internal/vm/Continuation;Z)V;;;","2022-06-17 02:00;rpressler;The problem occurs because the thread is suspended at a safepoint poll on return in the oldest thawed frame. The safepoint happens after the frame is popped but before it returns to the return barrier, thawing the caller (and so the stack looks as if we're in enterSpecial). In that case the virtual thread's topmost frame is still frozen on the heap, even though it is mounted.

However, the spec says that a set local operation should succeed for the topmost frame of a mounted virtual thread only if the thread is suspended *at a breakpoint or a single-step event*, and I don't think we can stop at that safepoint in that case.

If so, the fix is simple: if we're trying to set, even if the virtual thread is mounted and the depth is zero, if the frame is a heap frame, we should return an OPAQUE_FRAME error. The test should be changed as well to accept such an error if the thread is suspended not at a breakpoint/single-step.;;;","2022-06-17 12:44;sspitsyn;Thank you, Ron!
Nice analysis and suggestion.;;;","2022-06-17 21:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/42
Date: 2022-06-18 03:59:44 +0000;;;","2022-06-23 09:25;dukebot;Changeset: 4c9ea7e6
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-06-23 16:21:32 +0000
URL:       https://git.openjdk.org/jdk19/commit/4c9ea7e66aaf99f42ee2df0b17c6586f57019a19
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove the unnecessary method Attr#attribTopLevel and its usage,JDK-8286573,5074691,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gli,gli,gli,2022-05-11 01:31,2022-08-01 15:41,2023-10-01 09:56,2022-05-12 06:09,,,,,,,,,,,,19,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,noreg-cleanup,,,,,,,,,,,,,,,,,"This patch [1] added the method `Attr#attribTopLevel` to validate the annotations of the package. Then the annotation validation was moved to the annotation pipeline [2] and the TopLevel tree node was refactored (added JCPackageDecl) [3]. So now the `Attr#attribTopLevel` is replaced by method `attribPackage` and actually is not used by any code. It is good to remove it.

[1]https://github.com/openjdk/jdk/commit/13d31713dc6ac7134d81abeb11a659df2104d71f
[2]https://github.com/openjdk/jdk/commit/da21af58f4811285f7050691d51fe32600c0e5f8
[3]https://github.com/openjdk/jdk/commit/9783b65028eba41796c3e05ebb545b1a722f56b0",,,,,,,,,,JDK-8290105,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x2z7:",9223372036854775807,b23,,,,,,,,,,,"2022-05-11 01:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8648
Date: 2022-05-11 08:49:46 +0000;;;","2022-05-12 06:09;dukebot;Changeset: 36bdd251
Author:    Guoxiong Li <gli@openjdk.org>
Date:      2022-05-12 13:05:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/36bdd25159ff78425e5f0a1145a814d9edca97ae
;;;","2022-07-08 21:30;gli;Fix Request(18u)

Request to backport this change to jdk18u. The code applies cleanly.

Low risk: just clean some unnecessary code and trivial change.

In order to backport it to 17u-dev, before that, I need to backport it to 18u firstly.

Thanks.;;;","2022-07-08 21:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/178
Date: 2022-07-09 04:30:48 +0000;;;","2022-07-10 08:43;gli;Fix Request(17u)

Request to backport this change to jdk17u-dev. The code applies cleanly.

Low risk: just clean some unnecessary code and trivial change.

Thanks.;;;","2022-07-10 08:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/544
Date: 2022-07-10 15:43:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java source launcher from a minimal jdk image containing jdk.compiler fails with --enable-preview option,JDK-8286571,5074688,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asotona,sundar,sundar,2022-05-11 00:44,2022-06-09 22:29,2023-10-01 09:56,2022-06-07 06:41,18,19,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"$ jlink --add-modules jdk.compiler --output comp_only
$ cd comp_only/bin

$ cat Main.java 
class Main {
   public static void main(String[] args) {
     System.out.println(""hello world"");
   }
}

./java --enable-preview --source 18 Main.java 
Exception in thread ""main"" java.lang.IllegalArgumentException: error: release version 18 not supported
	at jdk.compiler/com.sun.tools.javac.main.Arguments.reportDiag(Arguments.java:889)
	at jdk.compiler/com.sun.tools.javac.main.Arguments.handleReleaseOptions(Arguments.java:311)
	at jdk.compiler/com.sun.tools.javac.main.Arguments.processArgs(Arguments.java:350)
	at jdk.compiler/com.sun.tools.javac.main.Arguments.init(Arguments.java:246)
	at jdk.compiler/com.sun.tools.javac.api.JavacTool.getTask(JavacTool.java:191)
	at jdk.compiler/com.sun.tools.javac.api.JavacTool.getTask(JavacTool.java:119)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.compile(Main.java:383)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:189)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)


But separate compilation and run works with --enable-preview option.

$ ./javac --enable-preview --source=18 Main.java 
$ ./java --enable-preview Main
hello world

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287560,,,,,,,JDK-8287559,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x2yj:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5d8045fc,,,,,,,,,"2022-05-11 00:48;sundar;Running launcher from full jdk image with --limit-modules jdk.compiler also results in error:

$ java --limit-modules jdk.compiler --enable-preview --source 18 Main.java
Exception in thread ""main"" java.lang.IllegalArgumentException: error: release version 18 not supported
	at jdk.compiler/com.sun.tools.javac.main.Arguments.reportDiag(Arguments.java:889)
	at jdk.compiler/com.sun.tools.javac.main.Arguments.handleReleaseOptions(Arguments.java:311)
	at jdk.compiler/com.sun.tools.javac.main.Arguments.processArgs(Arguments.java:350)
	at jdk.compiler/com.sun.tools.javac.main.Arguments.init(Arguments.java:246)
	at jdk.compiler/com.sun.tools.javac.api.JavacTool.getTask(JavacTool.java:191)
	at jdk.compiler/com.sun.tools.javac.api.JavacTool.getTask(JavacTool.java:119)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.compile(Main.java:383)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:189)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

But adding jdk.zipfs fixes that:

$ java --limit-modules jdk.compiler,jdk.zipfs --enable-preview --source 18 Main.java
hello world
;;;","2022-05-11 00:56;alanb;Assigning to Jon for now. It is a bit surprising that the error is ""release NNN not supported"". If there is an error opening ct.sym (as jdk.zipfs is not in the run-time image) then I would have expected a different error.;;;","2022-05-11 01:08;sundar;Adding jdk.zipfs to the image generated by jlink fixes the issue as well.

$ jlink --add-modules jdk.compiler,jdk.zipfs --output comp_zipfs
$ cd comp_zipfs/bin

$ cat Main.java 
class Main {
   public static void main(String[] args) {
     System.out.println(""hello world"");
   }
}

$ ./java --enable-preview --source 18 Main.java
hello world;;;","2022-05-17 01:50;asotona;There are actually two different issues:

First in JDKPlatformProvider, which silently swallows ProviderNotFoundException.

And second in module dependencies, where jdk.compiler requires ZipFS provider from jdk.zipfs module, however it is not declared.
 ;;;","2022-05-17 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8747
Date: 2022-05-17 12:47:25 +0000;;;","2022-05-20 06:41;mcimadamore;For the records, I think that having to specify -source for the Java source launcher feels odd. We're doing an in-memory compilation and then executing against a well-known JVM. Jshell does not have a -source option. I think the Java source launcher should probably not have one either, and just use whatever --release N is supported by the JVM.;;;","2022-05-23 03:19;asotona;The same root cause of the issue manifests on minimal JDK image in java launcher and javac launcher, and there is no relation to --enable-preview option.

These are the main effects of the issue:

./java --source 18 Main.java
Exception in thread ""main"" java.lang.IllegalArgumentException: error: release version 18 not supported 

./javac --release 18     
error: release version 18 not supported

javac --help      
...
  --release <release>
        Compile for the specified Java SE release. Supported releases: 
  -s <directory>               Specify where to place generated source files
  --source <release>, -source <release>
        Provide source compatibility with the specified Java SE release. Supported releases: 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19
...
;;;","2022-06-07 06:41;dukebot;Changeset: 905bcbe3
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2022-06-07 13:38:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/905bcbe34eb9750f6f7f12a577733c71a31d7972
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GCC 12 reports some compiler warnings,JDK-8286562,5074684,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2022-05-10 22:42,2023-08-07 14:12,2023-10-01 09:56,2022-05-27 19:10,17,19,,,,,,,,,,19,hotspot,,0,amazon-interest,gcc12,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"I saw some compiler warnings when I tried to build OpenJDK with GCC 12.0.1 on Fedora 36.

* -Wstringop-overflow
    * src/hotspot/share/oops/array.hpp
    * src/hotspot/share/jfr/recorder/checkpoint/types/traceid/jfrTraceIdBits.inline.hpp
```
In member function 'void Array<T>::at_put(int, const T&) [with T = unsigned char]',
    inlined from 'void ConstantPool::tag_at_put(int, jbyte)' at /home/ysuenaga/github-forked/jdk/src/hotspot/share/oops/constantPool.hpp:126:64,
    inlined from 'void ConstantPool::method_at_put(int, int, int)' at /home/ysuenaga/github-forked/jdk/src/hotspot/share/oops/constantPool.hpp:380:15,
    inlined from 'ConstantPool* BytecodeConstantPool::create_constant_pool(JavaThread*) const' at /home/ysuenaga/github-forked/jdk/src/hotspot/share/classfile/bytecodeAssembler.cpp:85:26:
/home/ysuenaga/github-forked/jdk/src/hotspot/share/oops/array.hpp:119:114: error: writing 1 byte into a region of size 0 [-Werror=stringop-overflow=]
  119 |   void at_put(const int i, const T& x) { assert(i >= 0 && i< _length, ""oob: 0 <= %d < %d"", i, _length); _data[i] = x; }
      |                                                                                                         ~~~~~~~~~^~~

In file included from /home/ysuenaga/github-forked/jdk/src/hotspot/share/jfr/recorder/checkpoint/types/traceid/jfrTraceIdLoadBarrier.inline.hpp:33,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/share/jfr/recorder/checkpoint/types/traceid/jfrTraceId.inline.hpp:30,
                 from /home/ysuenaga/github-forked/jdk/src/hotspot/share/jfr/support/jfrJdkJfrEvent.cpp:30:
In function 'void set_form(jbyte, jbyte*) [with jbyte (* op)(jbyte, jbyte) = traceid_or]',
    inlined from 'void set(jbyte, jbyte*)' at /home/ysuenaga/github-forked/jdk/src/hotspot/share/jfr/recorder/checkpoint/types/traceid/jfrTraceIdBits.inline.hpp:129:23,
    inlined from 'static void JfrTraceIdBits::store(jbyte, const T*) [with T = Klass]' at /home/ysuenaga/github-forked/jdk/src/hotspot/share/jfr/recorder/checkpoint/types/traceid/jfrTraceIdBits.inline.hpp:135:6,
    inlined from 'static void JfrTraceId::tag_as_jdk_jfr_event(const Klass*)' at /home/ysuenaga/github-forked/jdk/src/hotspot/share/jfr/recorder/checkpoint/types/traceid/jfrTraceId.inline.hpp:106:3,
    inlined from 'static void JdkJfrEvent::tag_as(const Klass*)' at /home/ysuenaga/github-forked/jdk/src/hotspot/share/jfr/support/jfrJdkJfrEvent.cpp:176:35:
/home/ysuenaga/github-forked/jdk/src/hotspot/share/jfr/recorder/checkpoint/types/traceid/jfrTraceIdBits.inline.hpp:99:9: error: writing 1 byte into a region of size 0 [-Werror=stringop-overflow=]
   99 |   *dest = op(bits, *dest);
      |   ~~~~~~^~~~~~~~~~~~~~~~~
```

* -Wformat-overflow
    * src/hotspot/share/opto/memnode.cpp
```
/home/ysuenaga/github-forked/jdk/src/hotspot/share/opto/memnode.cpp: In member function 'Node* LoadNode::eliminate_autobox(PhaseIterGVN*)':
/home/ysuenaga/github-forked/jdk/src/hotspot/share/opto/memnode.cpp:1409:53: error: '%s' directive argument is null [-Werror=format-overflow=]
 1409 |                    bt == T_INT     || bt == T_LONG, ""wrong type = %s"", type2name(bt));
      |                                                     ^~~~~~~~~~~~~~~~~
```

* -Wformat-truncation
    * src/java.base/unix/native/libjli/java_md_common.c
```
/home/ysuenaga/github-forked/jdk/src/java.base/unix/native/libjli/java_md_common.c: In function 'Resolve':
/home/ysuenaga/github-forked/jdk/src/java.base/unix/native/libjli/java_md_common.c:132:43: error: '%s' directive output may be truncated writing up to 4095 bytes into a region of size between 2 and 4097 [-Werror=format-truncation=]
  132 |     JLI_Snprintf(name, sizeof(name), ""%s%c%s"", indir, FILE_SEPARATOR, cmd);
      |                                           ^~
```

* -Waddress
    * src/java.base/share/native/libjli/java.c
```
/home/ysuenaga/github-forked/jdk/src/java.base/share/native/libjli/java.c:1629:35: error: the comparison will always evaluate as 'false' for the pointer operand in 'arg + 2' must not be NULL [-Werror=address]
 1629 |             *nargv++ = ((arg + 2) == NULL) ? NULL : JLI_StringDup(arg + 2);
      |
```

* -Wuse-after-free
    * src/java.base/share/native/libjli/parse_manifest.c
    * src/jdk.jpackage/linux/native/applauncher/LinuxPackage.c
    * src/java.desktop/share/native/libharfbuzz/hb-font.cc
```
/home/ysuenaga/github-forked/jdk/src/java.base/share/native/libjli/parse_manifest.c:292:34: error: pointer 'endpos' used after 'free' [-Werror=use-after-free]
  292 |             pos = flen - (endpos - cp);
      |                          ~~~~~~~~^~~~~

/home/ysuenaga/github-forked/jdk/src/jdk.jpackage/linux/native/applauncher/LinuxPackage.c:180:63: error: pointer 'strBufBegin' may be used after 'realloc' [-Werror=use-after-free]
  180 |             strBufNextChar = strNewBufBegin + (strBufNextChar - strBufBegin);
      |                                               ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~

/home/ysuenaga/github-forked/jdk/src/java.desktop/share/native/libharfbuzz/hb-font.cc:2286:12: error: pointer 'trampoline' used after 'void free(void*)' [-Werror=use-after-free]
 2286 |   closure->ref_count++;
      |   ~~~~~~~~~^~~~~~~~~
```

Most of warnings can be ignored, however warnings for libjli seem to be bugs.",,,,,,,,,,JDK-8301101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287491,JDK-8286705,JDK-8286694,JDK-8288048,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x2xn:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-10 23:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8646
Date: 2022-05-11 05:58:31 +0000;;;","2022-05-13 03:15;ysuenaga;Due to discussion on GitHub, I excluded java.c , parse_manifest.c , LinuxPackage.c . They will be fixed in JDK-8286694 and JDK-8286705.;;;","2022-05-27 19:10;dukebot;Changeset: 410a25d5
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2022-05-28 02:09:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/410a25d59a11b6a627bbb0a2c405c2c2be19f464
;;;","2023-01-19 13:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1087
Date: 2023-01-19 21:19:35 +0000;;;","2023-01-19 19:14;dlutker;Fix request [17u] 

Clean backport to fix some warnings with GCC 12.;;;","2023-01-23 11:47;phh;Addendum to 17u fix request.

The pre-submit tests are fixed in a followup https://github.com/openjdk/jdk17u-dev/pull/1090 with an additional fix in https://github.com/openjdk/jdk17u-dev/pull/1094. 1090 and 1094 pre-submit testing is clean. The 3 PRs will be pushed together.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Re-examine synchronization of mark and reset methods on InflaterInputStream,JDK-8286559,5074681,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-05-10 19:12,2022-05-18 23:17,2023-10-01 09:56,2022-05-13 20:22,19,,,,,,,,,,,19,core-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,,"java.util.zip.InflaterInputStream has:

    public synchronized void mark(int readlimit) {
    }

and

public synchronized void reset() throws IOException {
        throw new IOException(""mark/reset not supported"");
    }

In both these cases the ""synchronized"" can be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286579,,,,,,,,JDK-8284930,,,,,,,JDK-8286604,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x2wz:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2022-05-11 02:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8649
Date: 2022-05-11 09:00:17 +0000;;;","2022-05-13 20:22;dukebot;Changeset: e4378ab2
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-05-14 03:21:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e4378ab28d46fb1270a2d6b3388838ce790a9fb5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8286460 causes tests to fail to compile in Tier2,JDK-8286551,5074668,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,ccheung,dcubed,dcubed,2022-05-10 12:35,2022-10-18 02:31,2023-10-01 09:56,2022-05-10 13:22,19,,,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,regression,tier2,,,,,,,,,,,,,,,,"The fix for the following bug:

JDK-8286460 Remove dependence on JAR filename in CDS tests

is causing tests in Tier2 to fail to compile:

runtime/cds/appcds/dynamicArchive/methodHandles/MethodHandlesAsCollectorTest.java
runtime/cds/appcds/dynamicArchive/methodHandles/MethodHandlesCastFailureTest.java
runtime/cds/appcds/dynamicArchive/methodHandles/MethodHandlesGeneralTest.java
runtime/cds/appcds/dynamicArchive/methodHandles/MethodHandlesInvokersTest.java
runtime/cds/appcds/dynamicArchive/methodHandles/MethodHandlesPermuteArgumentsTest.java
runtime/cds/appcds/dynamicArchive/methodHandles/MethodHandlesSpreadArgumentsTest.java
runtime/cds/appcds/methodHandles/MethodHandlesAsCollectorTest.java
runtime/cds/appcds/methodHandles/MethodHandlesCastFailureTest.java
runtime/cds/appcds/methodHandles/MethodHandlesGeneralTest.java
runtime/cds/appcds/methodHandles/MethodHandlesInvokersTest.java
runtime/cds/appcds/methodHandles/MethodHandlesPermuteArgumentsTest.java
runtime/cds/appcds/methodHandles/MethodHandlesSpreadArgumentsTest.java

The runtime/cds/appcds/methodHandles/MethodHandlesSpreadArgumentsTest.java test is failing with:

----------direct:(6/425)----------
/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+22-1571/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/methodHandles/MethodHandlesSpreadArgumentsTest.java:77: error: cannot find symbol
        String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();
                          ^
  symbol:   variable Path
  location: class MethodHandlesSpreadArgumentsTest
1 error
result: Failed. Compilation failed: Compilation failed",,,,,,,,,,JDK-8292249,JDK-8294351,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286460,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x2u3:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-05-10 13:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8639
Date: 2022-05-10 20:05:52 +0000;;;","2022-05-10 13:22;dukebot;Changeset: 070a0cda
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-05-10 20:20:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/070a0cda31f83a3cf18a612b91c30d66cf407c3c
;;;","2022-09-21 06:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/713
Date: 2022-09-21 12:43:03 +0000;;;","2022-09-21 06:16;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.  It is a fix for 8286460.
No risk, only a test change.
Clean backport.
Tests pass.;;;","2022-09-21 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/717
Date: 2022-09-21 13:15:58 +0000;;;","2022-09-22 06:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/722
Date: 2022-09-22 13:14:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Build failure caused by missing DefaultPollerProvider implementation on AIX,JDK-8286540,5074657,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsteele,tsteele,tsteele,2022-05-10 10:44,2023-04-27 04:30,2023-10-01 09:56,2022-05-11 11:51,,,,,,,,,,,,19,core-libs,,0,loom,oraclejdk-na,,,,,,,,,,,,,,,,,,,"Attempting to build the current jdk master on AIX halts at:

* For target jdk_modules_java.base__the.java.base_batch:
/home/hotspot/openjdk/jdk-fork/src/java.base/share/classes/sun/nio/ch/PollerProvider.java:67: error: cannot find symbol
            return new DefaultPollerProvider();
                       ^
  symbol:   class DefaultPollerProvider
  location: class PollerProvider

Possible implementations for DefaultPollerProvider are given by:

- src/java.base/linux/classes/sun/nio/ch/DefaultPollerProvider.java
- src/java.base/macosx/classes/sun/nio/ch/DefaultPollerProvider.java
- src/java.base/windows/classes/sun/nio/ch/DefaultPollerProvider.java
 
However, none of the libraries or kernel modules used (epoll, kqueue, wepoll) by these implementations are available on AIX out of the box.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286597,JDK-8284161,,,,,,JDK-8286302,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,,aix,,,,,,"0|i2x2rn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-05-10 12:15;alanb;The port of JEP 425 to AIX will probably need a pollset implementation of Poller.;;;","2022-05-10 15:54;tsteele;The Pollset implementation seems to be the most straightforward of the changes required. What is proving more difficult are the calls to 'unimplemented()' and the other assertions added by the change which break the build in subtle ways. These will have to be found and fixed before the project can be built on AIX again.;;;","2022-05-10 23:11;alanb;Richard Reingruber is working to get ppc64 ports to work, see JDK-8286446 and JDK-8286302.;;;","2022-05-11 08:04;tsteele;Thanks for the head's up :-);;;","2022-05-11 09:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8658
Date: 2022-05-11 16:52:44 +0000;;;","2022-05-11 11:51;dukebot;Changeset: 46a775af
Author:    Tyler Steele <tsteele@openjdk.org>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2022-05-11 18:48:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/46a775af11bce4bc780b5f85e0cd2f648dee1d03
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tests under dynamicArchive/methodHandles should check for loading of lambda proxy classes,JDK-8286510,5074627,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,ccheung,ccheung,2022-05-10 10:29,2023-02-13 11:09,2023-10-01 09:56,2023-02-07 10:49,19,,,,,,,,,,,21,hotspot,,0,cds,noreg-self,,,,,,,,,,,,,,,,,,,"The tests under dynamicArchive/methodHandles are for testing of loading of lambda proxy classes. Currently, if no lambda proxy classes are loaded, the tests still pass. This was found during the fix for JDK-8286460.

If the test is run correctly, output like the following should appear in the runtime log if -Xlog:class+load is enable when running the test:

[0.808s][info ][class,load] test.java.lang.invoke.MethodHandlesGeneralTest$$Lambda$93/0x0000000801544220 source: shared objects file (top)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x2kz:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-10 11:43;hseigel;ILW=MLM=p4;;;","2023-02-03 10:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12414
Date: 2023-02-03 18:03:54 +0000;;;","2023-02-07 10:49;dukebot;Changeset: 53f72edc
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-02-07 18:48:57 +0000
URL:       https://git.openjdk.org/jdk/commit/53f72edcf603b0052804a8d7ed1ac1e856829eae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Withdraw ValueObject and IdentityObject and introduce value and identity class modifiers,JDK-8286491,5074607,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sadayapalam,sadayapalam,sadayapalam,2022-05-10 07:21,2022-05-17 06:11,2023-10-01 09:56,2022-05-16 22:23,repo-valhalla,,,,,,,,,,,repo-valhalla,tools,,0,,,,,,,,,,,,,,,,,,,,,"The latest version of Value Objects JEP calls for (among other things):

- Implement the 'identity' and 'value' modifiers
- Remove support for implicit IdentityObject and ValueObject interfaces

Apart from these the class file flag ACC_VALUE is redefined from being 0x0100 to 0x0040

See https://openjdk.java.net/jeps/8277163 for details",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286877,JDK-8286864,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x2gj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-05-10 07:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/valhalla/pull/688
Date: 2022-05-10 14:28:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JvmtiEventControllerPrivate::set_event_callbacks CLEARING_MASK computation is incorrect,JDK-8286490,5074606,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,shade,shade,2022-05-10 07:12,2022-05-25 23:15,2023-10-01 09:56,2022-05-24 23:29,19,,,,,,,,,,,19,hotspot,,0,sonarcloud-found,,,,,,,,,,,,,,,,,,,,"Loom added the following code in JvmtiEventControllerPrivate::set_event_callbacks:

  // Mask to clear normal event bits.
  const jlong CLEARING_MASK = (1L >> (TOTAL_MIN_EVENT_TYPE_VAL - TOTAL_MIN_EVENT_TYPE_VAL)) - 1L;
  // Avoid cleaning extension event bits.
  jlong enabled_bits = CLEARING_MASK & env->env_event_enable()->_event_callback_enabled.get_bits();

But the CLEARING_MASK is computed weirdly/incorrectly:
 a) It subtracts TOTAL_MIN_EVENT_TYPE_VAL from itself, always yielding 0;
 b) It shifts 1L to the right, which means the subexpression would produce either 0 or 1; or, after -1L, either 0 or -1 (full mask?).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x2gb:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-05-23 03:56;sspitsyn;It was a typo in the original CLEARING_MASK set.
The suggested fix is:

diff --git a/src/hotspot/share/prims/jvmtiEventController.cpp b/src/hotspot/share/prims/jvmtiEventController.cpp
index 6cee593180c..d679c877a80 100644
--- a/src/hotspot/share/prims/jvmtiEventController.cpp
+++ b/src/hotspot/share/prims/jvmtiEventController.cpp
@@ -772,7 +772,7 @@ void JvmtiEventControllerPrivate::set_event_callbacks(JvmtiEnvBase *env,
 
   env->set_event_callbacks(callbacks, size_of_callbacks);
   // Mask to clear normal event bits.
-  const jlong CLEARING_MASK = (1L >> (TOTAL_MIN_EVENT_TYPE_VAL - TOTAL_MIN_EVENT_TYPE_VAL)) - 1L;
+  const jlong CLEARING_MASK = (1L >> (JVMTI_MIN_EVENT_TYPE_VAL - TOTAL_MIN_EVENT_TYPE_VAL)) - 1L;
   // Avoid cleaning extension event bits.
   jlong enabled_bits = CLEARING_MASK & env->env_event_enable()->_event_callback_enabled.get_bits();

The purpose of this mask is to keep the extension event bits and clear normal JVMTI event bits.;;;","2022-05-23 22:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8860
Date: 2022-05-24 05:45:17 +0000;;;","2022-05-24 23:29;dukebot;Changeset: a0cccb54
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-05-25 06:24:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a0cccb54791d954bf08da5aac9b9794e370617c8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception printed to stdout on Windows when storing transparent image in clipboard,JDK-8286481,5074597,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,achung,ihse,ihse,2022-05-10 05:53,2023-09-29 03:00,2023-10-01 09:56,2022-06-06 14:30,11,17,6,7,8,,,,,,,19,client-libs,,0,11bpr-critical-approved,8bpr-critical-approved,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sn_118,sn_119,sn_120,,,,,,,,,,,,"When storing a transparent image (bitmap with an alpha channel) in the system clipboard on Windows, at exception is printed to standard out, like this:

java.io.IOException: Registered service providers failed to encode BufferedImage@5a01ccaa: type = 2 DirectColorModel: rm
ask=ff0000 gmask=ff00 bmask=ff amask=ff000000 IntegerInterleavedRaster: width = 1 height = 1 #Bands = 4 xOff = 0 yOff =
0 dataOffset[0] 0 to image/jpeg
        at java.desktop/sun.awt.datatransfer.DataTransferer.imageToStandardBytesImpl(DataTransferer.java:1799)
        at java.desktop/sun.awt.datatransfer.DataTransferer.imageToStandardBytes(DataTransferer.java:1713)
        at java.desktop/sun.awt.windows.WDataTransferer.imageToPlatformBytes(WDataTransferer.java:353)
        at java.desktop/sun.awt.datatransfer.DataTransferer.translateTransferable(DataTransferer.java:855)
        at java.desktop/sun.awt.windows.WDataTransferer.translateTransferable(WDataTransferer.java:220)
        at java.desktop/sun.awt.windows.WClipboard.setContentsNative(WClipboard.java:83)
        at java.desktop/sun.awt.datatransfer.SunClipboard.setContents(SunClipboard.java:105)

The exception is not passed on to user code; it is just consumed and printed to the console in sun.awt.windows.WClipboard.setContentsNative().

Despite the printed exception, the actual copy works just fine anyway. So this is just annoying noise to the user.

",,,,,,,,,,JDK-8317305,JDK-8311967,JDK-8314306,JDK-8316637,JDK-8313346,JDK-8307198,JDK-8307712,JDK-8313504,JDK-8310372,JDK-8312880,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314001,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2x2eb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-05-10 05:56;ihse;A simple reproducer: https://gist.github.com/P0keDev/d2f7ef12fef3d320e1eec803afcdf45b

This was discovered this while working on a Java-based hobby project (https://github.com/Wynntils/Artemis/pull/49). See also this Stack Overflow report on the problem: https://stackoverflow.com/questions/59140881/error-copying-an-image-object-to-the-clipboard

Apparently the last change was done as part of ancient history in https://bugs.openjdk.java.net/browse/JDK-4696186, in which the exception printout were masked for certain kinds of exceptions.;;;","2022-05-24 10:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8871
Date: 2022-05-24 16:54:55 +0000;;;","2022-05-24 10:01;achung;WClipboard loops through all image formats when trying to set clipboard contents, but images with an alpha value cannot be encoded in jpeg. DataTransfer.imageToStandardBytesImpl checks that jpeg cannot encode images with alpha values and throws an error which is caught by WClipboard and printed.
;;;","2022-06-06 14:30;dukebot;Changeset: 5264881a
Author:    Alisen Chung <achung@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-06-06 21:22:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5264881a1528444dfefbabec6f42596810f0ce07
;;;","2023-06-19 08:51;mdoerr;Fix Request (17u): 
Should get backported for parity with 17.0.9-oracle. Applies cleanly.;;;","2023-06-19 08:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1471
Date: 2023-06-19 15:52:25 +0000;;;","2023-07-21 03:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2054
Date: 2023-07-21 10:28:43 +0000;;;","2023-07-21 03:33;lucy;Fix Request (11u)

This backport is for parity with 11.0.21-oracle. Applies cleanly. Nightly tests run without related issues..
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
x86_32: Fix crashes with non-preview mode after JDK-8284161 (Virtual Threads),JDK-8286476,5074592,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,shade,shade,2022-05-10 05:24,2022-06-14 09:45,2023-10-01 09:56,2022-05-11 07:17,19,,,,,,,,,,,19,hotspot,,0,loom,oraclejdk-na,regression,,,,,,,,,,,,,,,,,,"Virtual Threads are not fully implemented on x86_32. The feature is guarded with `--enable-preview`. But there is some VM code that is executed unconditionally anyway, crashing the VM on some tests. This improves the x86_32 code to the point that tests without `--enable-preview` run successfully. This adds the scaffolding for full implementation too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,,,,,,,JDK-8288433,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x2d7:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-10 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8630
Date: 2022-05-10 13:42:03 +0000;;;","2022-05-11 07:17;dukebot;Changeset: ae695d6c
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-05-11 14:15:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ae695d6cb79afbca6e38ede59b366ec55eced76a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Collection set pruning adds one region too many,JDK-8286467,5074570,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tschatzl,tschatzl,tschatzl,2022-05-10 02:25,2022-05-18 23:15,2023-10-01 09:56,2022-05-11 23:43,19,,,,,,,,,,,19,hotspot,,0,gc-g1,gc-g1-remset,,,,,,,,,,,,,,,,,,,"The following if statement in the do_heap_region function of G1PruneRegionClosure:

>      if (_num_pruned > _max_pruned ||
>          _cur_wasted + reclaimable > _max_wasted) {
>          return true;
>      }

should be >=, otherwise one too many region than intended will be added.

Impact is limited, as the pruning is an inherently inexact and conservative heuristics driven process.

Reported by Tianqi Xia (https://mail.openjdk.java.net/pipermail/hotspot-gc-dev/2022-May/039287.html)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8262185,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x28b:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-10 21:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8645
Date: 2022-05-11 04:06:48 +0000;;;","2022-05-11 23:43;dukebot;Changeset: 7567627f
Author:    tqxia <txiadev@gmail.com>
Committer: Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-05-12 06:40:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7567627f4a520b4a8b9afd4f6bf5e6c716031569
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect copyright year for src/java.base/share/classes/jdk/internal/vm/FillerObject.java,JDK-8286462,5074564,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-05-10 00:40,2022-06-10 00:08,2023-10-01 09:56,2022-05-19 00:47,19,,,,,,,,,,,19,hotspot,,0,noreg-self,tencent-interest,ursqe-triaged,,,,,,,,,,,,,,,,,,"
This is on behalf of yyrrzhang@tencent.com.

The copyright year of src/java.base/share/classes/jdk/internal/vm/FillerObject.java should be 2022.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284435,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x26z:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-11 19:02;jiefu;PR： https://github.com/openjdk/jdk/pull/8633;;;","2022-05-18 14:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8633
Date: 2022-05-10 14:58:28 +0000;;;","2022-05-19 00:46;dukebot;Changeset: 022e7170
Author:    yyrrzhang <yyrrzhang@tencent.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2022-05-19 07:45:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/022e71704ce81d9b47624fb9fb93a4017dae62a0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove dependence on JAR filename in CDS tests,JDK-8286460,5074562,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cstein,cstein,cstein,2022-05-10 00:15,2022-09-26 00:11,2023-10-01 09:56,2022-05-10 11:15,19,,,,,,,,,,,19,hotspot,,0,cds,jdk17u-fix-request,jdk17u-fix-yes,testbug,,,,,,,,,,,,,,,,,"Tests generated by CDSMHTest_generate.sh scripts include a hard-coded assumption on from where JUnit classes are loaded from. Namely: junit.jar This filename will change in JTREg 7 as described in https://bugs.openjdk.java.net/browse/CODETOOLS-7903047 and attached PRs.
In addition, the code seems to fail on splitting the class path correctly on Windows systems using Cygwin.

Possible fix for both issues: Use the location information stored in JUnit Test class' runtime representation.

String junitJar = Path.of(Test.class.getProtectionDomain().getCodeSource().getLocation().toURI()).toString();


",,,,,,,,,,JDK-8294344,JDK-8292248,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286551,JDK-8292315,,,,,,JDK-8292337,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,"0|i2x26j:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-10 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8624
Date: 2022-05-10 07:27:35 +0000;;;","2022-05-10 08:58;dcubed;Moving from hotspot/test to hotspot/runtime.
Generally the tests for a product area live in the
cat/subcat for that product area.

hotspot/test tends to be used to test harness issues.;;;","2022-05-10 11:15;dukebot;Changeset: 52dbfa99
Author:    Christian Stein <cstein@openjdk.org>
Committer: Calvin Cheung <ccheung@openjdk.org>
Date:      2022-05-10 18:13:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/52dbfa99fe34d7b9469fba626e3577a22fd1d1fe
;;;","2022-09-21 05:43;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport. Tests don't compile, requires JDK-8286551.
Tests pass if fixed.;;;","2022-09-21 05:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/713
Date: 2022-09-21 12:43:03 +0000;;;","2022-09-21 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/716
Date: 2022-09-21 13:09:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compile error with VS2017 in continuationFreezeThaw.cpp,JDK-8286459,5074561,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mbaesken,mbaesken,mbaesken,2022-05-10 00:04,2022-08-30 10:14,2023-10-01 09:56,2022-05-10 23:57,19,,,,,,,,,,,19,hotspot,,0,loom,noreg-build,oraclejdk-na,,,,,,,,,,,,,,,,,,"After recent changes (loom?) we run into this compile error :

d:\build\jdk\src\hotspot\share\runtime\continuationFreezeThaw.cpp(2463): error C2440: 'type cast': cannot convert from 'int (__cdecl *)(JavaThread *,intptr_t *)' to 'address'
d:\build\jdk\src\hotspot\share\runtime\continuationFreezeThaw.cpp(2463): note: Context does not allow for disambiguation of overloaded function
d:\build\jdk\src\hotspot\share\runtime\continuationFreezeThaw.cpp(2451): note: see reference to function template instantiation 'void ConfigResolve::resolve<true,BarrierSet::GetType<BarrierSet::CardTableBarrierSet>::type>(void)' being compiled
d:\build\jdk\src\hotspot\share\runtime\continuationFreezeThaw.cpp(2436): note: see reference to function template instantiation 'void ConfigResolve::resolve_gc<true>(void)' being compiled
d:\build\jdk\src\hotspot\share\runtime\continuationFreezeThaw.cpp(2466): error C2440: 'type cast': cannot convert from 'intptr_t *(__cdecl *)(JavaThread *,int)' to 'address'
d:\build\jdk\src\hotspot\share\runtime\continuationFreezeThaw.cpp(2466): note: Context does not allow for disambiguation of overloaded function

the compiler we use is 
Microsoft Visual Studio 2017 15.9.14 
C compiler version 19.16.27032.1 [Microsoft (R) C/C++ Optimizing Compiler Version 19.16.27032.1 for x64]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292008,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,windows,,,,,,"0|i2x26b:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-10 01:57;rpressler;These are function pointers being cast to `address`. I don't know what incantation VS2017 would accept.;;;","2022-05-10 03:51;mbaesken;Here is something that looks a bit similar (also C2440 issue with VS2017) :
https://stackoverflow.com/questions/51967446/reinterpret-cast-cannot-convert-from-overloaded-function-to-intptr-t-with
People commented that it might be a compiler bug. Btw VS2019 seems not to have this issue.
First question to me is do we want to continue support VS2017 in jdk/jdk ? If yes than probably some workaround can be found; if not then we can drop the VS2017 support.
;;;","2022-05-10 04:49;mbaesken;casting to void* first makes the compile issue disappear :

    freeze_entry = (address)(void*)freeze<SelectedConfigT>;

    // If we wanted, we could templatize by kind and have three different thaw entries
    thaw_entry   = (address)(void*)thaw<SelectedConfigT>;

Not the nicest workaround I have to say,  should it be guarded with compiler macros ?;;;","2022-05-10 08:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8632
Date: 2022-05-10 14:45:43 +0000;;;","2022-05-10 23:57;dukebot;Changeset: 6586e5ae
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-05-11 06:55:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6586e5ae37e09a6d47f07758e710e1327e1c3be9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(nb == 1) failed: only when the head is not shared,JDK-8286451,5074548,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,fyang,fyang,2022-05-09 19:53,2022-06-20 03:58,2023-10-01 09:56,2022-06-07 23:50,19,,,,,,,,,,,19,hotspot,,0,c2,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,zgc,,,,,,,,,,,,,,"Fastdebug JVM crashes when run dacapo with ZGC. 

This bug could be reproduced at least on x86_64, aarch64 and riscv Linux platforms with jdk master commit:

aaeb08eca422776eef5955473734aad75cb2829a (HEAD -> master, origin/master, origin/HEAD)
Author: Leonid Mesnik <lmesnik@openjdk.org>
Date:   Tue May 10 22:28:12 2022 +0000

$ java -version
openjdk version ""19-internal"" 2022-09-20
OpenJDK Runtime Environment (fastdebug build 19-internal-adhoc.yangfei.jdk-upstream)
OpenJDK 64-Bit Server VM (fastdebug build 19-internal-adhoc.yangfei.jdk-upstream, mixed mode, sharing)

To reproduce on x86_64 Linux platform, do:
$ java -XX:+UseZGC -jar dacapo-9.12-MR1-bach.jar -s small avrora fop h2 jython lusearch lusearch-fix xalan pmd

(the DaCapo JAR is available at https://jztkft.dl.sourceforge.net/project/dacapobench/9.12-bach-MR1/dacapo-9.12-MR1-bach.jar)

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/yangfei/jdk-upstream/src/hotspot/share/ci/ciTypeFlow.cpp:2332), pid=19654, tid=19800
#  assert(nb == 1) failed: only when the head is not shared
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.yangfei.jdk-upstream)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.yangfei.jdk-upstream, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x91ea50]  ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)+0x8f0
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:+UseZGC dacapo-9.12-MR1-bach.jar -s small avrora fop h2 jython lusearch lusearch-fix xalan pmd

Host: ubuntu18, Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz, 48 cores, 377G, Ubuntu 18.04.2 LTS
Time: Wed May 11 08:43:31 2022 CST elapsed time: 12.816312 seconds (0d 0h 0m 12s)

---------------  T H R E A D  ---------------

Current thread (0x00007feaa81c6980):  JavaThread ""C2 CompilerThread7"" daemon [_thread_in_native, id=19800, stack(0x00007feb1563a000,0x00007feb1573b000)]


Current CompileTask:
C2:  12816 4494 %     4       org.h2.util.ObjectArray::sort @ 115 (289 bytes)

Stack: [0x00007feb1563a000,0x00007feb1573b000],  sp=0x00007feb15737970,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x91ea50]  ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)+0x8f0
V  [libjvm.so+0x91ebd1]  ciTypeFlow::clone_loop_heads(ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*)+0xf1
V  [libjvm.so+0x91fab4]  ciTypeFlow::flow_types()+0x734
V  [libjvm.so+0x920056]  ciTypeFlow::do_flow()+0x26
V  [libjvm.so+0x8bd8f4]  ciMethod::get_flow_analysis()+0x64
V  [libjvm.so+0x6e5661]  InlineTree::check_can_parse(ciMethod*)+0xf1
V  [libjvm.so+0x82ee88]  CallGenerator::for_osr(ciMethod*, int)+0x18
V  [libjvm.so+0x9d3d7a]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xfca
V  [libjvm.so+0x829dfe]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x38e
V  [libjvm.so+0x9e0a79]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x9c9
V  [libjvm.so+0x9e1550]  CompileBroker::compiler_thread_loop()+0x400
V  [libjvm.so+0x18e7b23]  JavaThread::thread_main_inner()+0x1f3
V  [libjvm.so+0x18f4ca6]  Thread::call_run()+0xf6
V  [libjvm.so+0x14cbfa4]  thread_native_entry(Thread*)+0x104

Register to memory mapping:

RAX=0x00007fede077d000 points into unknown readable memory: 0x0000000000000058 | 58 00 00 00 00 00 00 00
RBX=0x00007feb157379d0 is pointing into the stack for thread: 0x00007feaa81c6980
RCX=0x00007feddf1067b0: <offset 0x0000000001b687b0> in /home/yangfei/install-fastdebug/jvm/openjdk-19-internal/lib/server/libjvm.so at 0x00007feddd59e000
RDX=0x00007feddf1055b6: <offset 0x0000000001b675b6> in /home/yangfei/install-fastdebug/jvm/openjdk-19-internal/lib/server/libjvm.so at 0x00007feddd59e000
RSP=0x00007feb15737970 is pointing into the stack for thread: 0x00007feaa81c6980
RBP=0x00007feb15737a20 is pointing into the stack for thread: 0x00007feaa81c6980
RSI=0x000000000000091c is an unknown value
RDI=0x00007feddf1057b0: <offset 0x0000000001b677b0> in /home/yangfei/install-fastdebug/jvm/openjdk-19-internal/lib/server/libjvm.so at 0x00007feddd59e000
R8 =0x00007feddf83fe38: <offset 0x00000000022a1e38> in /home/yangfei/install-fastdebug/jvm/openjdk-19-internal/lib/server/libjvm.so at 0x00007feddd59e000
R9 =0x0000000000000100 is an unknown value
R10=0x0000000000000001 is an unknown value
R11=0x0000000000000002 is an unknown value
R12=0x00007fea9c0bac68 points into unknown readable memory: 0x00007feddf744e00 | 00 4e 74 df ed 7f 00 00
R13=0x00007feab436eba0 points into unknown readable memory: 0x00007feddf744e00 | 00 4e 74 df ed 7f 00 00
R14=0x00007feab436eff0 points into unknown readable memory: 0x00007feddf7f3e70 | 70 3e 7f df ed 7f 00 00
R15=0x00007fea9c0bac68 points into unknown readable memory: 0x00007feddf744e00 | 00 4e 74 df ed 7f 00 00


Registers:
RAX=0x00007fede077d000, RBX=0x00007feb157379d0, RCX=0x00007feddf1067b0, RDX=0x00007feddf1055b6
RSP=0x00007feb15737970, RBP=0x00007feb15737a20, RSI=0x000000000000091c, RDI=0x00007feddf1057b0
R8 =0x00007feddf83fe38, R9 =0x0000000000000100, R10=0x0000000000000001, R11=0x0000000000000002
R12=0x00007fea9c0bac68, R13=0x00007feab436eba0, R14=0x00007feab436eff0, R15=0x00007fea9c0bac68
RIP=0x00007fedddebca50, EFLAGS=0x0000000000010202, CSGSFS=0x002b000000000033, ERR=0x0000000000000006
  TRAPNO=0x000000000000000e

Top of Stack: (sp=0x00007feb15737970)
0x00007feb15737970:   00007feb157379c0 00007fedddebac12
0x00007feb15737980:   00007fea9c0bac68 00007feb157379c8
0x00007feb15737990:   00007fea00000002 00007feaa42ffae8
0x00007feb157379a0:   00007feaa42ffaa8 00007feb001645f8 

Instructions: (pc=0x00007fedddebca50)
0x00007fedddebc950:   00 00 00 48 c7 45 b0 00 00 00 00 e8 10 40 cb ff
0x00007fedddebc960:   48 85 c0 49 89 c4 74 14 48 8b 75 88 48 89 d9 ba
0x00007fedddebc970:   04 00 00 00 48 89 c7 e8 94 5c ff ff 48 8b 45 98
0x00007fedddebc980:   48 8b 40 40 4e 89 24 e8 e9 aa f8 ff ff 83 bd 70
0x00007fedddebc990:   ff ff ff 01 0f 85 92 00 00 00 48 8b 55 80 48 8b
0x00007fedddebc9a0:   8d 78 ff ff ff 48 8b 7d 98 e8 d2 ed ff ff 48 8d
0x00007fedddebc9b0:   05 5b 74 93 01 48 89 df c7 45 c0 ff ff ff ff 48
0x00007fedddebc9c0:   c7 45 c8 00 00 00 00 48 89 45 b0 48 8b 45 a0 48
0x00007fedddebc9d0:   89 45 b8 e8 78 e0 ff ff 8b 55 c0 85 d2 78 26 4c
0x00007fedddebc9e0:   3b 7d c8 75 11 e9 7e 00 00 00 66 0f 1f 44 00 00
0x00007fedddebc9f0:   4c 39 7d c8 74 72 48 89 df e8 52 e0 ff ff 8b 45
0x00007fedddebca00:   c0 85 c0 79 eb 48 8b 75 a0 e9 7e fc ff ff b8 01
0x00007fedddebca10:   00 00 00 e9 2b fd ff ff 48 89 c7 e8 60 5e ff ff
0x00007fedddebca20:   41 89 c4 48 8b 45 90 e9 17 fa ff ff 4c 8d 05 05
0x00007fedddebca30:   34 98 01 49 8b 00 48 8d 0d 73 9d 24 01 48 8d 15
0x00007fedddebca40:   72 8b 24 01 48 8d 3d 65 8d 24 01 be 1c 09 00 00
0x00007fedddebca50:   c6 00 58 31 c0 e8 f6 d4 15 00 e8 51 74 ba 00 48
0x00007fedddebca60:   8b 75 a0 e9 32 ff ff ff 48 8b 75 a0 48 89 df 48
0x00007fedddebca70:   8d 5d a0 e8 58 eb ff ff 49 8d 7f 38 48 89 de e8
0x00007fedddebca80:   2c 2e 00 00 48 8b 45 a0 48 89 de 48 8d 78 38 e8
0x00007fedddebca90:   fc 33 00 00 48 8b 75 a0 e9 ef fb ff ff 4c 8d 05
0x00007fedddebcaa0:   94 33 98 01 48 8d 0d fd 96 24 01 48 8d 15 1e 97
0x00007fedddebcab0:   24 01 48 8d 3d f7 8c 24 01 be 19 08 00 00 49 8b
0x00007fedddebcac0:   00 c6 00 58 31 c0 e8 85 d4 15 00 e8 e0 73 ba 00
0x00007fedddebcad0:   e9 2a f8 ff ff 90 66 2e 0f 1f 84 00 00 00 00 00
0x00007fedddebcae0:   55 48 89 e5 41 57 41 56 41 55 41 54 49 89 fe 53
0x00007fedddebcaf0:   48 83 ec 28 4c 8b 67 60 48 89 75 c0 48 89 55 b8
0x00007fedddebcb00:   c6 45 c8 00 4c 89 e3 48 85 db 0f 84 fc 00 00 00
0x00007fedddebcb10:   49 3b 5e 60 0f 84 06 01 00 00 80 7b 40 00 0f 85
0x00007fedddebcb20:   fc 00 00 00 4c 8b 6b 30 48 89 de 4c 89 ef e8 ad
0x00007fedddebcb30:   e1 ff ff 84 c0 41 89 c7 0f 84 e2 00 00 00 48 8d
0x00007fedddebcb40:   05 dc 4b 98 01 80 38 00 74 0e 41 80 bd 92 00 00 


Stack slot to memory mapping:
stack at sp + 0 slots: 0x00007feb157379c0 is pointing into the stack for thread: 0x00007feaa81c6980
stack at sp + 1 slots: 0x00007fedddebac12: <offset 0x000000000091cc12> in /home/yangfei/install-fastdebug/jvm/openjdk-19-internal/lib/server/libjvm.so at 0x00007feddd59e000
stack at sp + 2 slots: 0x00007fea9c0bac68 points into unknown readable memory: 0x00007feddf744e00 | 00 4e 74 df ed 7f 00 00
stack at sp + 3 slots: 0x00007feb157379c8 is pointing into the stack for thread: 0x00007feaa81c6980
stack at sp + 4 slots: 0x00007fea00000002 is an unknown value
stack at sp + 5 slots: 0x00007feaa42ffae8 points into unknown readable memory: 0x00007feddf7f3e90 | 90 3e 7f df ed 7f 00 00
stack at sp + 6 slots: 0x00007feaa42ffaa8 points into unknown readable memory: 0x00007feddf7f3eb0 | b0 3e 7f df ed 7f 00 00
stack at sp + 7 slots: 0x00007feb001645f8 is an unknown value",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279888,,,,,,,,"2022-05-11 03:17;rcastanedalo;hs_err_pid76398.log;https://bugs.openjdk.org/secure/attachment/98903/hs_err_pid76398.log","2022-05-11 03:17;rcastanedalo;hs_err_pid76818.log;https://bugs.openjdk.org/secure/attachment/98901/hs_err_pid76818.log","2022-05-11 03:17;rcastanedalo;replay_pid76398.log;https://bugs.openjdk.org/secure/attachment/98902/replay_pid76398.log","2022-05-11 03:17;rcastanedalo;replay_pid76818.log;https://bugs.openjdk.org/secure/attachment/98900/replay_pid76818.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2x23f:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-10 03:48;rcastanedalo;[~fyang] could you please share more details about the build where you are seeing these failures? (build number or specific git commit). I cannot reproduce it locally using a range of JDK 19 builds.;;;","2022-05-10 04:31;rcastanedalo;[~fyang] Setting resolution as ""incomplete"" temporarily while awaiting for further information, please re-open the issue when providing the additional build details, thanks!;;;","2022-05-10 17:22;fyang;Added necessary jdk master commit information for reproduce purpose.;;;","2022-05-10 17:26;fyang;[~rcastanedalo] I have add jdk master commit infomation in the description. Could you please try again? With a jdk fastdebug build, I see this bug can be easily reproduced on my side after 3-4 dacapo runs on x86_64, aarch64 and riscv Linux platforms. ;;;","2022-05-11 00:09;rcastanedalo;Thank you for the additional information [~fyang], I did manage to reproduce the failure now using commit aaeb08e in my environment (x86_64, Intel(R) Core(TM) i7-9850H CPU @ 2.60GHz, 12 cores, 31G, Ubuntu 20.04.1 LTS).;;;","2022-05-11 00:31;rcastanedalo;ILW = assertion failure in debug build; intermittent failure on standard benchmark suite using -XX:+UseZGC; no know workaround = MMH = P3;;;","2022-05-11 03:19;rcastanedalo;Attached the hs_err and replay files from two crashes. The method under compilation is, in both cases, org.h2.util.ObjectArray::sort, but the compilation mode differs (regular vs. OSR).;;;","2022-05-11 03:45;thartmann;Assert was introduced by JDK-8279888 in JDK 19 b20:
https://github.com/openjdk/jdk/commit/32593df392cfd139e10849c2a5db0a377fd1ce9c#diff-67c933de6d66468bc2bb9df38a26d63caa4002f2e177bc6c3616d5cd26fedbf2R2332

Roland, could you please have a look?;;;","2022-05-30 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8947
Date: 2022-05-30 13:50:08 +0000;;;","2022-06-07 23:50;dukebot;Changeset: bf0e625f
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-06-08 06:41:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bf0e625fe0e83c00006f13367a67e9f6175d21e4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PPC64: fix crashes after JDK-8284161 (virtual threads preview),JDK-8286446,5074543,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rrich,rrich,rrich,2022-05-09 15:23,2023-03-07 14:31,2023-10-01 09:56,2022-05-11 06:25,19,,,,,,,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,After integration of JDK-8284161 the ppc port is broken. There are various crashes running `java -version` with a devkit build and during the build the bootstrap vm crashes as well.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,JDK-8225652,,,,,,JDK-8286302,,,,,,,,,,,,,,,,,,ppc,,,,,,,,19,,,,,,,,"0|i2x22b:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-09 16:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8617
Date: 2022-05-09 22:45:49 +0000;;;","2022-05-11 06:24;dukebot;Changeset: 87f3d2b8
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2022-05-11 13:21:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/87f3d2b870a1534183c4a70db4526532bc858d04
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add jhsdb jstack processing without --mixed in efh ,JDK-8286438,5074534,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-05-09 12:59,2022-05-11 23:16,2023-10-01 09:56,2022-05-10 12:01,19,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,The jstack --mixed is not supported on MacOS and we should have a jhsdb.jstack command without --mixed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x20b:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-05-09 13:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8610
Date: 2022-05-09 20:35:57 +0000;;;","2022-05-10 12:01;dukebot;Changeset: d347fc12
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-05-10 18:58:58 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d347fc127bec1bf2b3d939b4d9d898d99255eca4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8284316 caused validate-source to fail in Tier1,JDK-8286435,5074530,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,dcubed,dcubed,dcubed,2022-05-09 12:11,2022-06-17 14:45,2023-10-01 09:56,2022-05-09 12:24,19,,,,,,,,,,,19,client-libs,,0,tier1,,,,,,,,,,,,,,,,,,,,"[2022-05-09T18:42:00,534Z]   Validating hs-atr-problem-listed.js
[2022-05-09T18:42:05,827Z] BAD COPYRIGHT LINE: /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14438/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0fc20da2-c46c-40f8-bf4a-1f4bc5390b45/runs/9ab03d6d-a779-41f8-82ef-3e77b633b606/workspace/open/test/jdk/javax/accessibility/manual/lib/ManualTestFrame.java
[2022-05-09T18:42:05,827Z] BAD COPYRIGHT LINE: /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14438/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0fc20da2-c46c-40f8-bf4a-1f4bc5390b45/runs/9ab03d6d-a779-41f8-82ef-3e77b633b606/workspace/open/test/jdk/javax/accessibility/manual/SwingSetTest.java
[2022-05-09T18:42:05,827Z] BAD COPYRIGHT LINE: /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14438/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0fc20da2-c46c-40f8-bf4a-1f4bc5390b45/runs/9ab03d6d-a779-41f8-82ef-3e77b633b606/workspace/open/test/jdk/javax/accessibility/manual/TestJProgressBarAccessibility.java
[2022-05-09T18:42:05,827Z] 3 header format error(s).
[2022-05-09T18:42:05,830Z] make[3]: *** [/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14438/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0fc20da2-c46c-40f8-bf4a-1f4bc5390b45/runs/9ab03d6d-a779-41f8-82ef-3e77b633b606/workspace/build/validate-source/support/header_validated/_test_jdk_validated] Error 1
[2022-05-09T18:42:05,832Z] HandleGplSource.gmk:146: recipe for target '/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14438/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0fc20da2-c46c-40f8-bf4a-1f4bc5390b45/runs/9ab03d6d-a779-41f8-82ef-3e77b633b606/workspace/build/validate-source/support/header_validated/_test_jdk_validated' failed
[2022-05-09T18:42:05,847Z] make[2]: *** [validate-headers] Error 2
[2022-05-09T18:42:05,847Z] /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14438/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0fc20da2-c46c-40f8-bf4a-1f4bc5390b45/runs/9ab03d6d-a779-41f8-82ef-3e77b633b606/workspace/closed/make/Main.gmk:67: recipe for target 'validate-headers' failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284316,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x1zf:",9223372036854775807,b22,,,,,,,,,,,"2022-05-09 12:14;dcubed;Here's the context diff for the proposed fix:

$ git diff
diff --git a/test/jdk/javax/accessibility/manual/SwingSetTest.java b/test/jdk/javax/accessibility/manual/SwingSetTest.java
index 8700f9a07d2..8b4abb6305a 100644
--- a/test/jdk/javax/accessibility/manual/SwingSetTest.java
+++ b/test/jdk/javax/accessibility/manual/SwingSetTest.java
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2021, 2022, Oracle and/or its affiliates. All rights reserved.
  * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
  */
 
diff --git a/test/jdk/javax/accessibility/manual/TestJProgressBarAccessibility.java b/test/jdk/javax/accessibility/manual/TestJProgressBarAccessibility.java
index 0740e8d2971..1f0e76aeb3d 100644
--- a/test/jdk/javax/accessibility/manual/TestJProgressBarAccessibility.java
+++ b/test/jdk/javax/accessibility/manual/TestJProgressBarAccessibility.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
diff --git a/test/jdk/javax/accessibility/manual/lib/ManualTestFrame.java b/test/jdk/javax/accessibility/manual/lib/ManualTestFrame.java
index 6aad4164dee..f86c116c01e 100644
--- a/test/jdk/javax/accessibility/manual/lib/ManualTestFrame.java
+++ b/test/jdk/javax/accessibility/manual/lib/ManualTestFrame.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021, 2022 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2021, 2022, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it;;;","2022-05-09 12:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8607
Date: 2022-05-09 19:16:46 +0000;;;","2022-05-09 12:24;dukebot;Changeset: 02e5fc04
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-05-09 19:22:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/02e5fc04ccd046e9904302548f131b89d5f2954a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"make test TEST=""gtest:<sometag>"" exits with error when it shouldn't",JDK-8286430,5074525,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-05-09 11:30,2023-08-31 07:06,2023-10-01 09:56,2022-05-11 01:52,17,19,,,,,,,,,,19,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,"I have google-test 1.10.0. A test run running hotspot's gtests results in an always non-zero make run. For example:

$ make  LOG=debug  test TEST=""gtest:LogTagSet""
[...]
Note: Google Test filter = LogTagSet*
[==========] Running 10 tests from 2 test suites.
[----------] Global test environment set-up.
[----------] 8 tests from LogTagSet
[ RUN      ] LogTagSet.defaults
[       OK ] LogTagSet.defaults (0 ms)
[ RUN      ] LogTagSet.has_output
[       OK ] LogTagSet.has_output (0 ms)
[ RUN      ] LogTagSet.ntags
[       OK ] LogTagSet.ntags (0 ms)
[ RUN      ] LogTagSet.is_level
[       OK ] LogTagSet.is_level (0 ms)
[ RUN      ] LogTagSet.level_for
[       OK ] LogTagSet.level_for (0 ms)
[ RUN      ] LogTagSet.contains
[       OK ] LogTagSet.contains (0 ms)
[ RUN      ] LogTagSet.label
[       OK ] LogTagSet.label (0 ms)
[ RUN      ] LogTagSet.duplicates
[       OK ] LogTagSet.duplicates (0 ms)
[----------] 8 tests from LogTagSet (0 ms total)

[----------] 2 tests from LogTagSetDescriptions
[ RUN      ] LogTagSetDescriptions.describe_vm
[       OK ] LogTagSetDescriptions.describe_vm (0 ms)
[ RUN      ] LogTagSetDescriptions.command_line_help_vm
[       OK ] LogTagSetDescriptions.command_line_help_vm (0 ms)
[----------] 2 tests from LogTagSetDescriptions (102 ms total)

[----------] Global test environment tear-down
[==========] 10 tests from 2 test suites ran. (103 ms total)
[  PASSED  ] 10 tests.
Finished running test 'gtest:LogTagSet/server'
Test report is stored in build/linux-x86_64-server-fastdebug/test-results/gtest_LogTagSet_server
/usr/bin/rm -f /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-results/test-summary.txt.old 2> /dev/null
/usr/bin/mv /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-results/test-summary.txt /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-results/test-summary.txt.old 2> /dev/null || true
/usr/bin/rm -f /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-support/test-last-ids.txt.old 2> /dev/null
/usr/bin/mv /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-support/test-last-ids.txt /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-support/test-last-ids.txt.old 2> /dev/null || true
echo >> /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-results/test-summary.txt ==============================
echo >> /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-results/test-summary.txt Test summary
echo >> /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-results/test-summary.txt ==============================
printf >> /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-results/test-summary.txt ""%2s %-49s %5s %5s %5s %5s %2s\n"" ""  "" \
    TEST TOTAL PASS FAIL ERROR "" ""
echo >> /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-support/test-last-ids.txt gtest_LogTagSet_server 
printf >> /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-results/test-summary.txt ""%2s %-49s %5d %5d %5d %5d %2s\n"" "">>"" ""gtest:LogTagSet/server"" 0 10 0 -10 ""<<"" 
echo >> /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-results/test-summary.txt ==============================
echo >> /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-results/test-summary.txt TEST FAILURE 
/usr/bin/mkdir -p /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support 
/usr/bin/touch /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/exit-with-error 
echo

/usr/bin/cat /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/test-results/test-summary.txt
==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR   
>> gtest:LogTagSet/server                                0    10     0   -10 <<
==============================
TEST FAILURE
echo

gmake[3]: Leaving directory '/disk/openjdk/upstream-sources/git/jdk-jdk/make'
gmake[2]: Leaving directory '/disk/openjdk/upstream-sources/git/jdk-jdk'
[ -f /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/javacservers/server.port ] && echo Stopping sjavac server && /usr/bin/touch /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/javacservers/server.port.stop; true
/usr/bin/date '+%Y %m %d %H %M %S' | /usr/bin/gawk '{ print $1,$2,$3,$4,$5,$6,($4*3600+$5*60+$6) }' > /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/build-times/build_time_end_TOTAL
/usr/bin/date '+%Y-%m-%d %H:%M:%S' > /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/build-times/build_time_end_TOTAL_human_readable
echo `/usr/bin/cat /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/build-times/build_time_start_TOTAL` `/usr/bin/cat /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/build-times/build_time_end_TOTAL` TOTAL | /usr/bin/gawk '{ F=$7; T=$14; if (F > T) { T+=3600*24 }; D=T-F; H=int(D/3600); M=int((D-H*3600)/60); S=D-H*3600-M*60; printf(""%02d:%02d:%02d %s\n"",H,M,S,$15); }' > /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/build-times/build_time_diff_TOTAL
printf  -- ""----- Build times -------\nStart %s\nEnd   %s\n%s\n%s\n-------------------------\n"" ""`/usr/bin/cat /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/build-times/build_time_start_TOTAL_human_readable`"" ""`/usr/bin/cat /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/build-times/build_time_end_TOTAL_human_readable`"" ""`/usr/bin/ls /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/build-times/build_time_diff_* | /usr/bin/grep -v _TOTAL | /usr/bin/xargs /usr/bin/cat | /usr/bin/sort -k 2`"" ""`/usr/bin/cat /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/build-times/build_time_diff_TOTAL`"" | /usr/bin/tee -a /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/build.log
----- Build times -------
Start 2022-05-09 20:24:06
End   2022-05-09 20:24:10

00:00:04 TOTAL
-------------------------
if test -f /disk/openjdk/upstream-sources/git/jdk-jdk/build/linux-x86_64-server-fastdebug/make-support/exit-with-error ; then \
    exit 1 ; \
  fi
make[1]: *** [/disk/openjdk/upstream-sources/git/jdk-jdk/make/Init.gmk:319: main] Error 1
make[1]: Leaving directory '/disk/openjdk/upstream-sources/git/jdk-jdk'
make: *** [/disk/openjdk/upstream-sources/git/jdk-jdk/make/Init.gmk:186: test] Error 2",,,,,,,,,,JDK-8315463,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300806,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x1yb:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-05-09 11:34;sgehwolf;The reason for this is that there is this AWK line in RunTests.gmk:

$$(eval $1_TOTAL := $$(shell $$(AWK) '/==========.* tests? from .* \
              test cases? ran/ { print $$$$2 }' $$($1_RESULT_FILE)

I.e. it matches for gtest output of something like:

[==========] 10 tests from 2 test cases ran. (103 ms total)

Yet, the output is using 'suite' or 'suites':

[==========] 10 tests from 2 test suites ran. (103 ms total)

Therefore the TOTAL variable never gets set and the result is this negative value strangeness.;;;","2022-05-09 11:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8605
Date: 2022-05-09 18:39:28 +0000;;;","2022-05-09 14:59;erikj;We are still using gtest 1.8.1 so I'm guessing that the current awk line matches what that version prints. I think any change here needs to support both the old and new outputs.;;;","2022-05-10 01:18;sgehwolf;Good to know, thanks. I'll update the PR.;;;","2022-05-11 01:52;dukebot;Changeset: 63a1ec6e
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-05-11 08:49:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/63a1ec6e7c08fc21d5cded734637eeb80147079f
;;;","2023-08-30 10:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1711
Date: 2023-08-30 17:39:06 +0000;;;","2023-08-30 10:46;shade;Fix Request (17u)

Another prerequisite for gtest update. Applies cleanly. gtest 1.8.1 and 1.13.0 (update in separate PR) seem to work well with it.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jpackageapplauncher build fails intermittently in Tier[45],JDK-8286429,5074522,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,erikj,dcubed,dcubed,2022-05-09 10:55,2022-06-21 05:35,2023-10-01 09:56,2022-05-10 06:14,19,,,,,,,,,,,19,infrastructure,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,tier4,tier5,,,,,,,,,,,,,,,,"We're seeing Tier4 and Tier5 task failures in build tasks that
are related to jpackageapplauncher:

Here's one example log snippet:

[2022-05-09T13:29:30,247Z] Creating jdk/modules/jdk.jpackage/jdk/jpackage/internal/resources/jpackageapplauncher from 3 file(s)
[2022-05-09T13:29:30,258Z] /bin/bash: /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14414/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6efcc4c3-e191-46a4-ace2-bf55c1b049b1/runs/d8aebb3d-848b-4767-83ac-67840fd4f61f/workspace/build/linux-x64-next-interim-dummy/support/markdown/BUILD_MAN_PAGES_jpackage.md_pre.tmp.includes.tmp: No such file or directory
[2022-05-09T13:29:30,259Z] make[3]: *** [/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14414/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6efcc4c3-e191-46a4-ace2-bf55c1b049b1/runs/d8aebb3d-848b-4767-83ac-67840fd4f61f/workspace/build/linux-x64-next-interim-dummy/support/markdown/BUILD_MAN_PAGES_jpackage.md_pre.tmp] Error 1
[2022-05-09T13:29:30,259Z] LauncherCommon.gmk:239: recipe for target '/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14414/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6efcc4c3-e191-46a4-ace2-bf55c1b049b1/runs/d8aebb3d-848b-4767-83ac-67840fd4f61f/workspace/build/linux-x64-next-interim-dummy/support/markdown/BUILD_MAN_PAGES_jpackage.md_pre.tmp' failed
[2022-05-09T13:29:30,260Z] make[2]: *** [jdk.jpackage-libs] Error 1
[2022-05-09T13:29:30,260Z] make[2]: *** Waiting for unfinished jobs....
[2022-05-09T13:29:30,260Z] make/Main.gmk:199: recipe for target 'jdk.jpackage-libs' failed
[2022-05-09T13:30:07,987Z] 
[2022-05-09T13:30:07,987Z] ERROR: Build failed for target 'default (installer)' in configuration 'linux-x64-next-interim-dummy' (exit code 2)


Here's another log snippet:

[2022-05-09T13:35:45,782Z] [bootcycle] Creating jdk/modules/jdk.jpackage/jdk/jpackage/internal/resources/jpackageapplauncher from 3 file(s)
[2022-05-09T13:35:45,791Z] /bin/bash: /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14460/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3b400ad5-3a92-4521-a23c-47db57263631/runs/a58cc2aa-ff5c-45ec-88dc-5f80cf817daf/workspace/build/linux-x64-bootcycle/bootcycle-build/support/markdown/BUILD_MAN_PAGES_jpackage.md_pre.tmp.includes.tmp: No such file or directory
[2022-05-09T13:35:45,791Z] /bin/mv: cannot stat '/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14460/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3b400ad5-3a92-4521-a23c-47db57263631/runs/a58cc2aa-ff5c-45ec-88dc-5f80cf817daf/workspace/build/linux-x64-bootcycle/bootcycle-build/support/markdown/BUILD_MAN_PAGES_jpackage.md_pre.tmp.replacements.tmp': No such file or directory
[2022-05-09T13:35:45,792Z] LauncherCommon.gmk:239: recipe for target '/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14460/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3b400ad5-3a92-4521-a23c-47db57263631/runs/a58cc2aa-ff5c-45ec-88dc-5f80cf817daf/workspace/build/linux-x64-bootcycle/bootcycle-build/support/markdown/BUILD_MAN_PAGES_jpackage.md_pre.tmp' failed
[2022-05-09T13:35:45,792Z] make[5]: *** [/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14460/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3b400ad5-3a92-4521-a23c-47db57263631/runs/a58cc2aa-ff5c-45ec-88dc-5f80cf817daf/workspace/build/linux-x64-bootcycle/bootcycle-build/support/markdown/BUILD_MAN_PAGES_jpackage.md_pre.tmp] Error 1
[2022-05-09T13:35:45,792Z] make[5]: *** [/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14460/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3b400ad5-3a92-4521-a23c-47db57263631/runs/a58cc2aa-ff5c-45ec-88dc-5f80cf817daf/workspace/build/linux-x64-bootcycle/bootcycle-build/support/markdown/BUILD_MAN_PAGES_jpackage.md_pre.tmp] Error 1
[2022-05-09T13:35:45,792Z] LauncherCommon.gmk:239: recipe for target '/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14460/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/3b400ad5-3a92-4521-a23c-47db57263631/runs/a58cc2aa-ff5c-45ec-88dc-5f80cf817daf/workspace/build/linux-x64-bootcycle/bootcycle-build/support/markdown/BUILD_MAN_PAGES_jpackage.md_pre.tmp' failed
[2022-05-09T13:35:45,793Z] make/Main.gmk:199: recipe for target 'jdk.jpackage-libs' failed
[2022-05-09T13:35:45,794Z] make[4]: *** [jdk.jpackage-libs] Error 1
[2022-05-09T13:35:45,795Z] make[4]: *** Waiting for unfinished jobs....
[2022-05-09T13:35:45,795Z] make/Main.gmk:222: recipe for target 'jdk.jpackage-launchers' failed
[2022-05-09T13:35:45,795Z] make[4]: *** [jdk.jpackage-launchers] Error 1
[2022-05-09T13:36:26,899Z] 
[2022-05-09T13:36:26,899Z] ERROR: Build failed for target 'product-images' in configuration 'linux-x64-bootcycle' (exit code 2) 
[2022-05-09T13:36:26,900Z] make[4]: warning: -jN forced in submake: disabling jobserver mode.",,,,,,,,,,JDK-8286555,JDK-8288863,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274498,,,,,,,JDK-8284675,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i2x1xn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-05-09 12:37;dcubed;I forgot to mention that these failures are intermittent.
They do not happen in every Tier4 nor in every Tier5.;;;","2022-05-09 15:01;erikj;I will take a look.;;;","2022-05-09 15:26;erikj;The way LauncherCommon.gmk is currently written, it's only meant to be included from ""make/module/<module>/Launcher.gmk"", or at least only from one single place for each module. This is because the man page generation that happens in LauncherCommon.gmk is module global. For the jdk.jpackage module, LauncherCommon.gmk is now called from two separate sub makefiles, both make/module/jdk.jpackage/Lib.gmk and make/module/jdk.jpackage/Launcher.gmk. These files are called from the top level targets jdk.jpackage-libs and jdk.jpackage-launchers respectively. These top level targets are assumed to be able to run independently of each other, which is normally fine, but now they define the same rules for the same files. This creates a race where one may be deleting files that the other one is creating, causing directories to disappear while files are being written to them. This can fail the build, but also risks silently corrupting the build.

I think it's a bit of a bad design choice to put unconditional module wide manpage generation in LauncherCommon.gmk. I too would have assumed that it was just a file declaring macros and not adding actual rules without calling any macro, so that it would be safe to include it to reach those macro definitions. I'm still not sure what the best solution is.;;;","2022-05-09 15:36;erikj;I have an idea for a simple fix. We can add a conditional around the man page generation to make sure we are being called from a Launcher.gmk, but checking the value of MAKEFILE_PREFIX which we inherit from ModuleWrapper.gmk.;;;","2022-05-09 15:37;erikj;Hm, if it's only JAVA_MANIFEST we need from LauncherCommon.gmk then we could probably eliminate the need.;;;","2022-05-09 16:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8618
Date: 2022-05-09 23:18:47 +0000;;;","2022-05-10 05:03;ihse;Thanks for fixing this Erik. I only got half-way yesterday.;;;","2022-05-10 06:14;dukebot;Changeset: 65f50678
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-05-10 13:09:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/65f50678f2fc9b129db57181f227ba0da53ecd38
;;;","2022-05-10 07:58;dcubed;The fix for this bug is in jdk-19+22-1562.;;;","2022-06-15 03:19;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Low risk, build change. Follow-up to 8284675.
Clean backport. SAP nighlty testing passed.;;;","2022-06-15 03:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/471
Date: 2022-06-15 10:21:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AlgorithmId should understand PBES2,JDK-8286428,5074521,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-05-09 10:47,2022-05-18 23:17,2023-10-01 09:56,2022-05-15 15:33,,,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,,"AlgorithmId.getName() usually returns a standard algorithm name, but for PBES2, it only returns the PBES2 name and not a full algorithm name that contains info on KDF and ENC algorithms.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x1xf:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-05-09 14:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8615
Date: 2022-05-09 21:44:10 +0000;;;","2022-05-15 15:33;dukebot;Changeset: 357f990e
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-05-15 22:31:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/357f990e3244feaba6d8709b7ea50660220a418b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3.8: Clarify that Identifier is not a ReservedKeyword,JDK-8286427,5074519,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,abuckley,abuckley,2022-05-09 09:48,2022-06-21 02:20,2023-10-01 09:56,2022-06-21 02:20,18,,,,,,,,,,,19,specification,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,"JLS18 defines Identifier to exclude every Keyword:

  Identifier:
    IdentifierChars but not a Keyword or BooleanLiteral or NullLiteral

which makes TypeIdentifier's exclusion of certain keywords rather redundant:

  TypeIdentifier:
    Identifier but not permits, record, sealed, var, or yield

3.5's tokenization rules are clear that identifiers are exclusive with, specifically, _reserved_ keywords:  ""A sequence of input characters that could be reduced to either an identifier token or a reserved keyword token (§3.9) is always reduced to a reserved keyword token.""

Therefore, Identifier should exclude ReservedKeyword, not Keyword:

  Identifier:
    IdentifierChars but not a ***ReservedKeyword*** or BooleanLiteral or NullLiteral",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x1wz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add OIDs for RC2 and Blowfish,JDK-8286422,5074513,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-05-09 08:34,2022-05-18 23:15,2023-10-01 09:56,2022-05-12 06:29,,,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,,Add missing OIDs for these algorithms.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x1vn:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-05-11 15:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8668
Date: 2022-05-11 22:35:32 +0000;;;","2022-05-12 06:29;dukebot;Changeset: 752ad1c4
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-05-12 13:27:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/752ad1c41093645506dd267f618bd46882d0c674
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Update task definition of execution-platforms, corelibs and langtools",JDK-8286381,5074467,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rgangadhar,rgangadhar,rgangadhar,2022-05-09 03:27,2023-01-06 08:14,2023-10-01 09:56,2022-10-30 23:03,17,,,,,,,,,,,17.0.7-oracle,infrastructure,,0,jdk17u-na,sqebug,testbug,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x1lf:",9223372036854775807,b01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong condition for using non-immediate oops on AArch64,JDK-8286376,5074462,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,eosterlund,eosterlund,eosterlund,2022-05-09 01:38,2022-06-20 03:29,2023-10-01 09:56,2022-05-24 02:19,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,,,,"With the introduction of loom, nmethod entry barriers were added for all GCs. So far, the use of nmethod entry barriers has implied that nmethod oops are patched in the instruction stream. That is no longer the case. A condition was added to make sure we still get non-immediate oops on AArch64 for collectors that use nmethod entry barriers, and support immediate oops. However, the condition was messed up, so we instead end up doing the wrong thing. We should do the right thing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,,"0|i2x1kb:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-09 04:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8593
Date: 2022-05-09 11:12:32 +0000;;;","2022-05-09 05:17;rcastanedalo;ILW = potential incorrect behavior and performance degradation; on ZGC + AArch64; no know workaround = MMH = P3 ;;;","2022-05-24 02:19;dukebot;Changeset: bd361bc0
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2022-05-24 09:16:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bd361bc077e58da173e752392147b8d08055dc37
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cleanup problem lists after loom integration,JDK-8286368,5074434,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-05-08 18:54,2023-02-01 11:06,2023-10-01 09:56,2022-05-10 12:06,19,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,It is needed to re-sort  tests in problem lists and clean up some comments.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284236,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x1e3:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-05-09 11:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8604
Date: 2022-05-09 18:17:13 +0000;;;","2022-05-10 12:13;dukebot;Changeset: dcec1d2a
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-05-10 19:12:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dcec1d2a68e2c82e27174c3dc52bb17316530966
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: riscv port is broken after JDK-8284161,JDK-8286367,5074432,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,yadongwang,yadongwang,yadongwang,2022-05-08 18:44,2023-03-07 14:33,2023-10-01 09:56,2022-05-10 00:17,19,,,,,,,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,"JDK-8284161 implements a preview version of virtual threads on x86_64 and aarch64, and riscv port is broken everywhere. The initial patch is required to make everything on riscv work without ""--enable-preview"". ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,JDK-8286301,JDK-8225652,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,19,,linux,,,,,,"0|i2x1dn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-09 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8595
Date: 2022-05-09 13:02:36 +0000;;;","2022-05-10 00:17;dukebot;Changeset: bf0dc4f8
Author:    Yadong Wang <yadongwang@openjdk.org>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2022-05-10 07:14:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bf0dc4f844ca83855e7fde19313d92da055dcb77
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BigInteger.parallelMultiply missing @since 19,JDK-8286363,5074417,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,alanb,alanb,2022-05-08 00:54,2022-05-11 23:16,2023-10-01 09:56,2022-05-10 08:33,19,,,,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,The method was added on 2022-02-11 so should have the indicated tag.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277175,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x1ab:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28853e3d,,,,,,,,,"2022-05-09 08:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8598
Date: 2022-05-09 15:26:20 +0000;;;","2022-05-10 08:33;dukebot;Changeset: 04bba07d
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-05-10 15:30:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/04bba07d6588cb96e371f3acdb49d735c9e6536d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ARM32: Fix crashes after JDK-8284161 (Virtual Threads),JDK-8286360,5074414,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,shade,martin,martin,2022-05-07 12:53,2022-12-23 13:06,2023-10-01 09:56,2022-06-07 00:26,19,,,,,,,,,,,19,hotspot,,1,oraclejdk-na,,,,,,,,,,,,,,,,,,,,"Starting 2022-05-07, Openjdk head stopped being able to build on 32-bit Raspberry Pi OS

OS: Raspbian GNU/Linux 11 (bullseye) armv 
Host: Raspberry Pi 4 Model B Rev 1.4

---

ERROR: Build failed for targets 'jdk-image test-image-jdk-jtreg-native' in configuration 'linux-arm-server-release' (exit code 2) 
Stopping sjavac server

=== Output from failing command(s) repeated here ===
* For target jdk__optimize_image_exec:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (templateInterpreterGenerator_arm.cpp:732), pid=22200, tid=22203
#  Error: Unimplemented()
#
# JRE version:  (19.0) (build )
# Java VM: OpenJDK Server VM (19-internal-adhoc.martin.jdk, mixed mode, serial gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0x9c8254]  TemplateInterpreterGenerator::generate_Continuation_doYield_entry()+0x2c
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/martin/ws/jdk/make/hs_err_pid22200.log
   ... (rest of output omitted)

* All command lines available in /home/martin/ws/jdk/build/linux-arm-server-release/make-support/failure-logs.
=== End of repeated output ===
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284161,JDK-8286365,,,,,,,,,,,,,,,,,aarch32,,,,,,,,,,linux,,,,,,"0|i2x19n:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-05-07 14:21;martin;Unsurprisingly this problem is caused by the big loom integration

Author: Alan Bateman <alanb@openjdk.org>
Date:   Sat May 7 08:06:16 2022 +0000

    8284161: Implementation of Virtual Threads (Preview)

Alan, thanks for committing on the weekend, making it easy for us Raspberry Pi hobbyists to identify the problem;;;","2022-05-07 14:25;martin;Alan will know where this bug belongs;;;","2022-05-08 00:26;alanb;The initial integration is x64 and aarch64 on the usual operating systems. There are ""Unimplemented"" stubs for the other architectures. I suspect you should be able to get further if you change TemplateInterpreterGenerator::generate_Continuation_doYield_entry in src/hotspot/cpu/arm/templateInterpreterGenerator_arm.cpp to add this to the beginning of the function:
  if (!Continuations::enabled()) return nullptr;

I'll move the issue to hotspot/runtime for now.

;;;","2022-05-08 11:40;martin;I tried patching with:

--- a/src/hotspot/cpu/arm/templateInterpreterGenerator_arm.cpp
+++ b/src/hotspot/cpu/arm/templateInterpreterGenerator_arm.cpp
@@ -729,6 +729,7 @@ void TemplateInterpreterGenerator::generate_fixed_frame(bool native_call) {
 //
 
 address TemplateInterpreterGenerator::generate_Continuation_doYield_entry(void) {
+  if (!Continuations::enabled()) return nullptr;
   Unimplemented();
   return NULL;
 }


but that runs into:


* For target jdk__optimize_image_exec:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (stubRoutines.hpp:100), pid=4621, tid=4626
#  guarantee(_table_length < _table_max_length) failed: Incorrect UnsafeCopyMemory::_table_max_length
#
# JRE version:  (19.0) (build )
# Java VM: OpenJDK Server VM (19-internal-adhoc.martin.jdk, mixed mode, g1 gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0x9808dc]  UnsafeCopyMemoryMark::UnsafeCopyMemoryMark(StubCodeGenerator*, bool, bool, unsigned char*)+0xc0


I continue to think Raspberry Pi OS 32-bit is an important enough platform to be part of patch acceptance testing;;;","2022-05-09 02:06;rehn;I think this is a better version:
+#if (defined(X86) || defined(AARCH64))
   case Interpreter::java_lang_continuation_doYield
                                            : entry_point = generate_Continuation_doYield_entry(); break;
+#endif

This file already have some arch ifdefs.;;;","2022-05-09 12:17;martin;I tried Robbin's suggestion:

--- a/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
+++ b/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
@@ -425,8 +425,10 @@ address TemplateInterpreterGenerator::generate_method_entry(
   case Interpreter::java_lang_math_fmaF    : entry_point = generate_math_entry(kind);      break;
   case Interpreter::java_lang_ref_reference_get
                                            : entry_point = generate_Reference_get_entry(); break;
+#if (defined(X86) || defined(AARCH64))
   case Interpreter::java_lang_continuation_doYield
                                            : entry_point = generate_Continuation_doYield_entry(); break;
+#endif
   case Interpreter::java_util_zip_CRC32_update
                                            : native = true; entry_point = generate_CRC32_update_entry();  break;
   case Interpreter::java_util_zip_CRC32_updateBytes


and ran into new failure mode:

* For target jdk__optimize_image_exec:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (templateInterpreterGenerator.cpp:467), pid=28176, tid=28179
#  fatal error: unexpected method kind: 27
#
# JRE version:  (19.0) (build )
# Java VM: OpenJDK Server VM (19-internal-adhoc.martin.jdk, mixed mode, serial gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0x9c636c]  TemplateInterpreterGenerator::generate_all()+0xcfc
#
;;;","2022-05-09 17:22;coleenp;There's a PR for riscv changes to run -version at https://github.com/openjdk/jdk/pull/8595 that fixes this.;;;","2022-05-09 17:24;coleenp;Closing this as a duplicate of the other riscv bug.
The other non-Oracle platforms are broken similarly.;;;","2022-05-09 21:53;martin;Coleen, this bug is about arm 32-bit (aka aarch32, armv, armv7l), not riscv.

The changes in JDK-8286367 are all risc-specific, so it seems very unlikely that it will fix this, although similar changes may be needed for arm

Probably all non-amd64, non-aarch64 platforms are currently broken.

OK ... Trying ...
$ git checkout pull/8595
$ make
...
still fails in the same way;;;","2022-05-09 22:32;alanb;There are PRs in progress for risvc and ppc64. Ron mailed aarch32-port-dev about getting arm32 to run again.;;;","2022-05-10 04:45;coleenp;Sorry about that.;;;","2022-05-10 08:13;shade;While JDK-8286365 is supposed to implement Loom at ARM32, I think we can get a working VM that does not crash on non-Loom code in this bug. Which would at least allow it to build. The x86_32 change (JDK-8286476) would need to land first, which would work out some of the 32-bit mess.;;;","2022-05-11 07:39;aleonard;fyi, we are seeing this crash on platforms: arm32, riscv64, ppc64 Linux, s390x Linux;;;","2022-05-11 07:44;shade;If you look at the issue for the original Loom integration (JDK-8284161), you would see all the related issues on different platforms.;;;","2022-05-12 03:41;shade;I had some success with https://github.com/openjdk/jdk/pull/8634 -- ARM32 is able to build, but with disabled C2.;;;","2022-05-13 06:20;shade;I am going to stop working on this issue for a while. Feel free to pick up where I left.;;;","2022-05-26 21:25;itakiguchi;I'm very sorry, I did wrong operation.;;;","2022-06-02 03:30;shade;JDK-8287496 makes it better, but there are still some C2 problems and asserts. Probably requires a bit of attention.;;;","2022-06-03 12:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8634
Date: 2022-05-10 15:51:10 +0000;;;","2022-06-07 00:26;dukebot;Changeset: b6c6cc5d
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-06-07 07:24:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b6c6cc5d9918bf1727ae13d09f8a3bf677a058a7
;;;","2022-12-23 13:06;dcubed;According to comments in the PR, this fix was tested as follows:

Additional testing:
 - [x] Linux arm32 fastdebug build
 - [x] Linux arm32 fastdebug, `jdk_loom  hotspot_loom` pass
 - [x] Linux arm32 fastdebug, `jdk_jfr` passes (some timeout failures, because the board I have is very slow)

so this fix was verified back on 2022.06.06.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
incorrect use of `@serial`,JDK-8286348,5074402,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-05-06 16:56,2022-07-05 15:47,2023-10-01 09:56,2022-05-09 13:36,18,,,,,,,,,,,19,client-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,"`@serial` is a doc comment tag that should be used on serializable fields of serializable objects, or on classes or packages to control the documentation.

In no case is it applicable to any methods on serializable objects.

The following instances have been observed in JDK documentation comments.

open/src/java.desktop/share/classes/java/applet/Applet.java:111: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
     * @serial
open/src/java.desktop/share/classes/java/awt/Button.java:487: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
     * @serial
open/src/java.desktop/share/classes/java/awt/Checkbox.java:663: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
     * @serial
open/src/java.desktop/share/classes/java/awt/CheckboxMenuItem.java:478: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
     * @serial
open/src/java.desktop/share/classes/java/awt/Choice.java:711: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
     * @serial
open/src/java.desktop/share/classes/java/awt/Container.java:3726: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
     * @serial
open/src/java.desktop/share/classes/java/awt/Font.java:1944: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
     * @serial
open/src/java.desktop/share/classes/java/awt/Label.java:169: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
     * @serial
open/src/java.desktop/share/classes/java/awt/MenuComponent.java:450: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
     * @serial
open/src/java.desktop/share/classes/java/awt/event/FocusEvent.java:389: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
     * @serial
open/src/java.desktop/share/classes/java/awt/event/KeyEvent.java:2009: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
     * @serial
open/src/java.desktop/share/classes/java/awt/event/MouseEvent.java:1197: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
     * @serial
open/src/java.base/share/classes/java/security/Provider.java:866: warning: Tag @serial cannot be used in method documentation.  It can only be used in the following types of documentation: package, class/interface, field.
    * @serial
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252717,,,,,JDK-8284612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x16z:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-05-06 18:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8586
Date: 2022-05-07 01:04:03 +0000;;;","2022-05-09 13:36;dukebot;Changeset: 54e33082
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-05-09 20:35:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/54e33082105dcbcfc795839c954f6e63402edff1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3-parameter version of AllocateHeap should not ignore AllocFailType,JDK-8286346,5074398,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-05-06 15:24,2023-05-26 00:44,2023-10-01 09:56,2022-05-09 05:35,11,17,19,,,,,,,,,19,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,,"In code review of JDK-8286331 [1], @dlong pointed out that 3-paramter version of AllocateHeap ignores AllocFailType.


[1] https://github.com/openjdk/jdk/pull/8579#pullrequestreview-965174543",,,,,,,,,,JDK-8308928,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286331,,,,,,,,,,,,,,,,,JDK-8199698,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x163:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-06 16:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8585
Date: 2022-05-06 23:48:03 +0000;;;","2022-05-09 05:35;dukebot;Changeset: 64b05ccb
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-05-09 12:32:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/64b05ccbed7879dd38a49453a6098bfe9729ee76
;;;","2023-05-19 01:56;shade;AFAICS, this is a regression in 11, due to JDK-8199698.;;;","2023-05-25 08:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1399
Date: 2023-05-25 15:34:22 +0000;;;","2023-05-25 12:50;shade;Fix Request (17u)

Fixes a simple regression in JDK 11, which would be important for JDK-8286331 backport. Applies cleanly. Tests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/c2/irTests/TestEnumFinalFold.java fails if Enum/String methods are not inlined,JDK-8286339,5074369,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,dcubed,dcubed,2022-05-06 11:37,2022-05-11 23:16,2023-10-01 09:56,2022-05-10 22:30,19,,,,,,,,,,,19,hotspot,,0,intermittent,noreg-self,oracle-triage-19,problemlist,tier2,tier3,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

compiler/c2/irTests/TestEnumFinalFold.java

Here's a snippet from the log file:

----------System.err:(46/5586)*----------

Command Line:
/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+22-1518/linux-x64-debug.jdk/jdk-19/fastdebug/bin/java -DReproduce=true -cp /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14506/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4981ce79-0dd4-470c-98bb-6ce346eb9c6d/runs/e283214c-0259-411d-8786-ca843e7b5225/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_1/classes/5/compiler/c2/irTests/TestEnumFinalFold.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+22-1518/src.full/open/test/hotspot/jtreg/compiler/c2/irTests:/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14506/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4981ce79-0dd4-470c-98bb-6ce346eb9c6d/runs/e283214c-0259-411d-8786-ca843e7b5225/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_1/classes/5/test/lib:/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14506/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4981ce79-0dd4-470c-98bb-6ce346eb9c6d/runs/e283214c-0259-411d-8786-ca843e7b5225/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_1/classes/5:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+22-1518/linux-x64-debug.test/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14506/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/4981ce79-0dd4-470c-98bb-6ce346eb9c6d/runs/e283214c-0259-411d-8786-ca843e7b5225/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_compiler_1/tmp -XX:+CreateCoredumpOnCrash -ea -esa -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -Dir.framework.server.port=35791 -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompileCommand=log,compiler.c2.irTests.TestEnumFinalFold::* -XX:CompileCommand=option,compiler.c2.irTests.TestEnumFinalFold::*,bool,PrintIdeal,true -XX:CompileCommand=option,compiler.c2.irTests.TestEnumFinalFold::*,bool,PrintOptoAssembly,true -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM compiler.c2.irTests.TestEnumFinalFold

One or more @IR rules failed:

Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method ""public int compiler.c2.irTests.TestEnumFinalFold.testNameLengthSum()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIf={}, applyIfAnd={}, failOn={""(\\\\d+(\\\\s){2}(AddI.*)+(\\\\s){2}===.*)""}, applyIfOr={}, counts={}, applyIfNot={})""
     - failOn: Graph contains forbidden nodes:
       * Regex 1: (\\d+(\\s){2}(AddI.*)+(\\s){2}===.*)
         - Matched forbidden node:
           * 129  AddI  === _  115  68  [[ 130 ]]  !jvms: TestEnumFinalFold::testNameLengthSum @ bci:18 (line 62)

>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.throwIfNoSafepointWhilePrinting(IRMatcher.java:91)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.reportFailures(IRMatcher.java:82)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.applyIRRules(IRMatcher.java:54)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.<init>(IRMatcher.java:43)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:702)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:671)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:324)
	at compiler.lib.ir_framework.TestFramework.run(TestFramework.java:210)
	at compiler.lib.ir_framework.TestFramework.run(TestFramework.java:199)
	at compiler.c2.irTests.TestEnumFinalFold.main(TestEnumFinalFold.java:40)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286190,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i2x0zn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-06 12:04;dcubed;This is a new test added by:

JDK-8286190 Add test to verify constant folding for Enum fields

and so far the test has failed on:

linux-aarch64-debug
macosx-aarch64-debug
linux-x64-debug;;;","2022-05-06 12:05;dcubed;[~shade] - Can you take a look at this bug?
It looks like the new test from:

JDK-8286190 Add test to verify constant folding for Enum fields

is failing in Tier2.;;;","2022-05-06 12:39;dcubed;Here's the test tasks' JVM args for the three failures that I've seen so far:

linux-aarch64-debug:
-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation


macosx-aarch64-debug:
-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation


linux-x64-debug:
-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation;;;","2022-05-06 13:48;dcubed;The test failed in Tier3 on windows-x64-debug with the following JVM args:

-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation

The test also failed in Tier3 on macosx-x64-debug with the following JVM args:

-XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation;;;","2022-05-06 14:04;dlong;ILW = new test failing; intermittent; no workaround = MMH = P3;;;","2022-05-10 01:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8625
Date: 2022-05-10 08:11:12 +0000;;;","2022-05-10 22:30;dukebot;Changeset: 9c254841
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-05-11 05:29:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9c2548414c71b4caaad6ad9e1b122f474e705300
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
suppress warnings about bad @author tags when author info is not generated.,JDK-8286338,5074368,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-05-06 11:36,2022-05-18 23:21,2023-10-01 09:56,2022-05-17 13:40,18,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"The JDK API documentation has lots of instances of ""bad"" @author tags, in that they appear on a member declaration and not on a top-level declaration.

These bad tags can trigger warnings.

Rather than suggesting to remove some or all of these ""bad"" tags, a different solution would be to suppress the check/warning if author info is not enabled in the doclet (i.e. the `-author` option.)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8252717,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x0zf:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-05-06 15:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8583
Date: 2022-05-06 22:06:17 +0000;;;","2022-05-17 13:40;dukebot;Changeset: 141ef68f
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-05-17 20:38:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/141ef68f8250ac0b97d481c2f727628c03ea4943
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jni_GetStringUTFChars() uses wrong heap allocator,JDK-8286331,5074361,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-05-06 10:35,2023-05-26 03:57,2023-10-01 09:56,2022-05-09 12:49,17,19,,,,,,,,,,19,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,,,,,,,"While analyzing valgrind log, I noticed abnormal entries:

Conditional jump or move depends on uninitialised value(s)
   at 0x5AF96E7: is_readable_pointer (os.cpp:1056)
   by 0x5AF96E7: is_pointer_bad (os.cpp:1177)
   by 0x5AF96E7: is_pointer_bad (os.cpp:1176)
   by 0x5AF96E7: os::is_first_C_frame(frame*) (os.cpp:1199)
   by 0x5B0BD56: os::get_native_stack(unsigned char**, int, int) (os_posix.cpp:155)
   by 0x578EA1F: jni_GetStringUTFChars (jni.cpp:2236)
   by 0xF2D9A6A: Java_jdk_internal_loader_NativeLibrary_findEntry0 (NativeLibraries.c:233)

Because I did not turn on NMT detail tracking, there should not have stack walking.

It turns out that jni_GetStringUTFChars() passes 0 as NativeCallStack reference (see below), that results construction of NativeCallStack, where it performs stack walking in its constructor.

   result = AllocateHeap(length + 1, mtInternal, 0, AllocFailStrategy::RETURN_NULL);

",,,,,,,,,,JDK-8308945,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286346,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x0xv:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-06 10:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8579
Date: 2022-05-06 17:54:45 +0000;;;","2022-05-09 12:49;dukebot;Changeset: b0d2b0a3
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-05-09 19:46:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b0d2b0a3553cbb2db23d543b98ab1401b3dbfa91
;;;","2023-05-25 08:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1401
Date: 2023-05-25 15:47:13 +0000;;;","2023-05-25 12:51;shade;Fix Request (17u)

Avoids the accidental stack walking in GetStringUTFChars, which improves performance. Applies cleanly, but requires JDK-8286346 backport to be integrated first. Tests pass.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Trampoline not created for far runtime targets outside small CodeCache,JDK-8286314,5074343,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,eastigeevich,eastigeevich,eastigeevich,2022-05-06 09:46,2022-09-27 05:39,2023-10-01 09:56,2022-07-01 05:09,11,17,18,19,20,,,,,,,20,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK-next,jdk19u-fix-yes,oracle-triage-19,,,,,,,,,,,,"MacroAssembler::trampoline_call only generates trampolines when the size of CodeCache is bigger than 128M (this is checked with far_branches):

address MacroAssembler::trampoline_call(Address entry, CodeBuffer* cbuf) {
...
  if (far_branches()) {
...
      address stub = emit_trampoline_stub(offset(), entry.target());
      if (stub == NULL) {
        postcond(pc() == badAddress);
        return NULL; // CodeCache is full
      }
    }
  }

MacroAssembler::trampoline_call supports relocInfo types: runtime_call_type, opt_virtual_call_type, static_call_type or virtual_call_type. Targets of opt_virtual_call_type, static_call_type or virtual_call_type are always inside CodeCache. Targets of runtime_call_type can be outside CodeCache and a distance to them can be bigger than 128M. If CodeCache size is less than 128M, a trampoline won't be created for such targets.
If a target is outside CodeCache we should check whether the maximum possible distance to the target is below 128.",,,,,,,,,,JDK-8291620,JDK-8294453,JDK-8291010,JDK-8291487,JDK-8289045,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,,"0|i2x0tv:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-06 14:39;dlong;ILW = possible bad code generated; never seen/no reproducer?; no workaround = MMH = P3;;;","2022-05-12 05:41;aph;This is a surprise. trampoline_call checks its args are in range, so if it had ever happened we'd know. I suspect the reason we haven't is that when C2 is enabled people don't set ReservedCodeCacheSize to small, and trampolines are only used by C2.;;;","2022-06-22 04:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9235
Date: 2022-06-22 11:50:36 +0000;;;","2022-06-28 09:30;thartmann;[~eastigeevich] This bug was pushed to JDK 20 while the main bug was still targeted to JDK 19. Please fix it according to:
https://openjdk.org/guide/#how-to-fix-an-incorrect-backport-creation-in-jbs;;;","2022-07-01 05:03;eastigeevich;Fix was pushed while main bug was targeted to '19'. Reset the main bug to fixed in '20' and copied the Robo Duke entry here.;;;","2022-07-01 05:05;eastigeevich;Changeset: bf0623b1
Author: Evgeny Astigeevich <eastig@amazon.com>
Committer: Andrew Haley <aph@openjdk.org>
Date: 2022-06-23 09:30:59 +0000
URL: https://git.openjdk.org/jdk/commit/bf0623b11fd95f09fe953822af71d965bdab8d0f;;;","2022-07-27 08:48;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Rather simple change to generating assembly, acceptable risk.
Clean backport.  SAP nighlty testing passed.;;;","2022-07-27 09:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/600
Date: 2022-07-27 15:52:24 +0000;;;","2022-07-28 03:16;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Rather simple change to generating assembly, acceptable risk.
Clean backport.
SAP nightly testing passed.;;;","2022-07-28 03:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1276
Date: 2022-07-28 10:19:58 +0000;;;","2022-09-22 06:16;thartmann;Fix Request (JDK 19u)
Fixes a possible bad code generation. The fix is low risk and applies cleanly. Already tested and backported to Oracle JDK 11u and 17u. ;;;","2022-09-22 06:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/28
Date: 2022-09-22 13:17:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Voice over reads the boolean value as null in the JTable,JDK-8286313,5074342,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenov,landrews,landrews,2022-05-06 09:33,2023-06-14 09:13,2023-10-01 09:56,2022-08-12 23:00,11,17,18,19,,,,,,,,20,client-libs,,0,a11y,accessibility,amazon-interest,cssn22_08_02,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-yes,macos,,,,,,,,,,,,,"I have a Table which is extended from AbstractTableModel with String, integer and Boolean values ( to represent checkbox). When the row is selected Voice over reads the Boolean value as null.

Step to reproduce
--------------------------
1) Enable VoiceOver 
2) Run the attached test. 
3) Select any row and observe that Voice over reads the Checkbox value as null. If you hear the same then the bug is reproduced.

This are similar to the following
https://bugs.openjdk.java.net/browse/JDK-8278526
https://bugs.openjdk.java.net/browse/JDK-8277497

This issue is seen only in JDK18 onwards because of https://bugs.openjdk.java.net/browse/JDK-8271071

I have attached the screen recording for the same",,,,,,,,,,JDK-8295805,JDK-8292923,JDK-8292783,JDK-8292857,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-06 09:33;landrews;Screen Recording 2022-05-06 at 11.08.25 AM.mov;https://bugs.openjdk.org/secure/attachment/98851/Screen+Recording+2022-05-06+at+11.08.25+AM.mov","2022-05-06 09:32;landrews;TableDemo.java;https://bugs.openjdk.org/secure/attachment/98852/TableDemo.java",,,,,,,,,x86,,,,,,,,,,os_x,,,,,,"0|i2x0tn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-07-25 09:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9629
Date: 2022-07-25 16:24:15 +0000;;;","2022-08-12 23:00;dukebot;Changeset: 8353a333
Author:    Artem Semenov <asemenov@openjdk.org>
Date:      2022-08-13 05:56:37 +0000
URL:       https://git.openjdk.org/jdk/commit/8353a33350eca859842bc6b92bc9a38a60c11e26
;;;","2022-10-19 17:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/810
Date: 2022-10-20 00:33:19 +0000;;;","2022-10-20 05:51;phh;Fix Request (17u).

On behalf of Rui Li ruiamzn@amazon.com.

Backport for Oracle parity. From Rui:

""Tested locally. After the change, checkboxes can be read with VoiceOver. Before the change, they were read as null. (However checkboxes are read as 1 or 0 like numbers. Not sure if that's the best user experience, but this is a backport : /)"";;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove boilerplate from use of runTests,JDK-8286311,5074340,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-05-06 09:23,2023-01-05 03:02,2023-10-01 09:56,2022-12-22 13:22,19,,,,,,,,,,,21,tools,,0,noreg-self,,,,,,,,,,,,,,,,,,,,"JDK-8272853 reduces the need for boilerplate in tests.

We should leverage that ability.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8272853,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x0t7:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-12-20 15:04;jjg;We can also use `var` in the typical declaration of tester, as in

    MyTester tester = new MyTester();
    tester.runTests();;;;","2022-12-20 15:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11746
Date: 2022-12-20 23:13:25 +0000;;;","2022-12-22 13:22;dukebot;Changeset: 2294f225
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-12-22 21:20:43 +0000
URL:       https://git.openjdk.org/jdk/commit/2294f225c074516abd2fecf5c64e2e1a2453bc6f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ForkJoinPool.commonPool().close() spins,JDK-8286294,5074319,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dl,alanb,alanb,2022-05-06 04:10,2022-05-11 23:12,2023-10-01 09:56,2022-05-09 04:12,19,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"The default implementation of ExecutorService.close invokes shutdown and waits for the executor to terminate with awaitTermination. This doesn't play with the FJP common pool where shutdown is no-op and awaitTermination works like awaitQuiescence.

It doesn't make sense to close the common pool, but if code does invoke its close method then it will spin calling awaitTermination. One option would for commonPool to return a ForkJoinPool that overrides close to just wait forever or have ForkJoinPool override close.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286341,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x0oj:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2022-05-06 04:48;dl;It seems best to just override FJP.close spec and code to check for common pool, and if so do nothing. None of the alternatives seem explainable or useful enough.
;;;","2022-05-06 08:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8577
Date: 2022-05-06 15:05:57 +0000;;;","2022-05-06 08:20;dl;The corresponding update is now in https://github.com/openjdk/jdk/pull/8577
;;;","2022-05-09 04:12;dukebot;Changeset: 4f5d73f2
Author:    Doug Lea <dl@openjdk.org>
Date:      2022-05-09 11:09:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4f5d73f2d411aa6147c5388b024e0d2996378d5a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tests ShortResponseBody and ShortResponseBodyWithRetry should use less resources,JDK-8286293,5074318,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2022-05-06 03:59,2023-07-31 20:27,2023-10-01 09:56,2022-05-09 06:02,11,17,18,19,,,,,,,,19,core-libs,,0,CPU22_07-critical-approved,CPU22_07-critical-SQE-OK,httpclient,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,"ShortResponseBody and ShortResponseBodyWithRetry are probably too many clients and this is causing some trouble on machines that have resource limitations - such has old windows version and macosx-aarch64.
Also it could be preferable to split the test to test GET and POST separately. GET is retried by default, so it doesn't need to be run again in  ShortResponseBodyWithRetry.",,,,,,,,,,JDK-8286949,JDK-8286661,JDK-8287082,JDK-8287232,JDK-8286576,JDK-8287226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286682,JDK-8286273,,,,,,,,,,,,,,"2022-05-06 08:02;dfuchs;jdk11.patch;https://bugs.openjdk.org/secure/attachment/98850/jdk11.patch",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x0ob:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-05-06 04:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8569
Date: 2022-05-06 11:04:29 +0000;;;","2022-05-06 08:06;dfuchs;Attached jdk11.patch: a patch to backport this fix to jdk 11.;;;","2022-05-09 06:02;dukebot;Changeset: f1433861
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-05-09 13:01:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f143386109bce2a2e7241f685e2df26849a0ad48
;;;","2022-05-16 04:28;goetz;Fix request [17u]

I backport this test-only change for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nightly testing passed.;;;","2022-05-16 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/401
Date: 2022-05-16 11:27:54 +0000;;;","2022-05-18 06:32;goetz;Fix request [11u]

I backport this test-only change for parity with 11.0.17-oracle.
No risk, only a test change.
I had to resolve and adapt the tests to jdk11 test infra.
Tests pass.  SAP nightly testing passed.;;;","2022-05-18 06:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1095
Date: 2022-05-18 13:31:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Reading file as UTF-16 causes Error which ""shouldn't happen""",JDK-8286287,5074215,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,naoto,webbuggrp,webbuggrp,2022-05-05 07:29,2023-03-29 00:25,2023-10-01 09:56,2022-05-12 08:59,17,18,19,,,,,,,,,19,core-libs,,0,19ea,dcsaw,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
If a text file is UTF-8 and has an odd number of characters, trying to read it as UTF-16 throws an Error caused by MalformedInputException:

Files.readString(Paths.get(""text.txt""), StandardCharsets.UTF_16);

A comment in the java.lang.String method which causes the Error says ""// Substitution is always enabled, // so this shouldn't happen"". Clearly the intent is that only the MalformedInputException should be thrown.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a UTF-8 file text.txt containing an odd number of characters. Create, compile and run Test.java with the provided source code.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Exception caught, no output.
ACTUAL -
Exception in thread ""main"" java.lang.Error: java.nio.charset.MalformedInputException: Input length = 1
        at java.base/java.lang.String.decodeWithDecoder(String.java:1220)
        at java.base/java.lang.String.newStringNoRepl1(String.java:796)
        at java.base/java.lang.String.newStringNoRepl(String.java:748)
        at java.base/java.lang.System$2.newStringNoRepl(System.java:2439)
        at java.base/java.nio.file.Files.readString(Files.java:3370)
        at Test.main(Test.java:8)
Caused by: java.nio.charset.MalformedInputException: Input length = 1
        at java.base/java.nio.charset.CoderResult.throwException(CoderResult.java:274)
        at java.base/java.lang.String.decodeWithDecoder(String.java:1213)
        ... 5 more

---------- BEGIN SOURCE ----------
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;

public class Test {
    public static void main(String[] args) {
        try {
            Files.readString(Paths.get(""text.txt""), StandardCharsets.UTF_16);
        } catch (Exception e) {}
    }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8305152,JDK-8303670,JDK-8304629,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288589,,,,,,,,,,,,,,,"2022-05-06 00:56;tongwan;Test.java;https://bugs.openjdk.org/secure/attachment/98845/Test.java","2022-05-06 00:56;tongwan;test.txt;https://bugs.openjdk.org/secure/attachment/98846/test.txt",,,,,,,,,generic,,,,,,,b07,17,,generic,,,,,,"0|i2x01f:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-05-06 00:59;tongwan;The observations on Windows 10:
JDK 17ea+6: Passed.
JDK 17ea+7: Failed, MalformedInputException thrown.
JDK 18: Failed.
JDK 19ea+19: Failed.;;;","2022-05-09 14:06;naoto;There's a code path that fails to set `CodingErrorAction.REPLACE` on the `CharsetDecoder` in `String` class (in `newStringNoRepl1()`);;;","2022-05-10 13:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8640
Date: 2022-05-10 20:22:39 +0000;;;","2022-05-12 08:59;dukebot;Changeset: cc7560e9
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-05-12 15:58:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cc7560e995eac56709d9e55a1561135fad246cb2
;;;","2023-03-28 03:35;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Small change in an important component (String!).  Needs a follow up.
Clean backport.
Test passes and fails without the fix. SAP nighlty testing passed;;;","2023-03-28 03:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1221
Date: 2023-03-28 10:36:24 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: Rank issues with ParGCRareEvent_lock and Threads_lock,JDK-8286285,5074311,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,tschatzl,tschatzl,2022-05-06 00:38,2022-08-04 07:19,2023-10-01 09:56,2022-05-10 01:53,19,,,,,,,,,,,19,hotspot,,0,gc-g1,gc-pending-review,,,,,,,,,,,,,,,,,,,"If G1 needs to use the ParGCRareEvent_lock during GC, there will be a failure wrt to the rank of these two locks:

ParGCRareEvent_lock is of safepoint rank, and Threads_lock safepoint-1.

I.e. any (legitimate) use of ParGCRareEvent_lock during safepoint/gc will trigger the rank checking.

This rank issue occurs if verification finds any issue with eg. remembered sets, or references to dead objects etc. with -XX:-GCParallelVerificationEnabled (the default), then the VM thread which holds Threads_lock will fail.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x0mr:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-06 03:46;tschatzl;This is the error:

#  assert(false) failed: Attempting to acquire lock ParGCRareEvent_lock/safepoint out of order with lock Threads_lock/safepoint-1 -- possible deadlock
;;;","2022-05-06 05:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8573
Date: 2022-05-06 12:51:24 +0000;;;","2022-05-10 01:52;dukebot;Changeset: 60a91d15
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-05-10 08:49:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/60a91d15adf0f3c836d4a06a79b2fee96c914f21
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(func2 == 0 && func3 == 0) failed: not unary,JDK-8286283,5074309,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbhateja,jbhateja,jbhateja,2022-05-06 00:16,2022-05-18 02:41,2023-10-01 09:56,2022-05-15 22:37,18,,,,,,,,,,,18.0.2,hotspot,,0,c2,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-19,vectorapi,,,,,,,,,,,,,"Following test case results into an assertion failure with debug builds and produces incorrect results with release build of JDK-18

HOW TO REPRODUCE:

1. Ensure that the x86_64 processor supports AVX512:
$ java -XX:+PrintFlagsFinal --version | grep UseAVX
     intx UseAVX                                   = 3                                    {ARCH product} {default}

2. Run java (version 18, fastdebug) as follows:
$ java --add-modules jdk.incubator.vector logic_opt.java
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (src/hotspot/share/opto/compile.cpp:2567), pid=11089, tid=11104
#  assert(func2 == 0 && func3 == 0) failed: not unary
#
# JRE version: Java(TM) SE Runtime Environment (18.0.1+10) (fastdebug build 18.0.1+10-24)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18.0.1+10-24, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa7865a]  Compile::compute_truth_table(Unique_Node_List&, Unique_Node_List&)+0x53a
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/rocastan/notes/bugs/8286283/core.11089)
#
# An error report file with more information is saved as:
# hs_err_pid11089.log
#
# Compiler replay data is saved as:
# replay_pid11089.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)",,,,,,,,,,JDK-8286904,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273322,JDK-8271515,JDK-8241040,,,,,,"2022-05-06 00:44;rcastanedalo;logic_opt.java;https://bugs.openjdk.org/secure/attachment/98844/logic_opt.java",,,,,,,,,,x86_64,,,,,,,,,,,,,,,,"0|i2x0mb:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-06 00:24;jbhateja;Problem is only seen with JDK-18 released version and not with JDK mainline which contains a re-designed algorithm for macrologic  optimization to support predicated logic operations.

During JDK-18 time frame we integrated masking related optimizations from panama-vector branch but turned off macro-logic optimization for predicated logic operations.  ;;;","2022-05-06 03:00;rcastanedalo;Hi [~jbhateja], could you specify which particular commit(s) integrated the masking optimizations and turned off the macro-logic optimization? Thanks!;;;","2022-05-06 03:11;rcastanedalo;ILW = miscompilation; in incubator module, under a specific processor configuration (x86_64 with AVX-512); run with `-XX:UseAVX=2` = HLL = P4;;;","2022-05-06 04:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/123
Date: 2022-05-06 11:29:46 +0000;;;","2022-05-07 02:35;jbhateja;Hi [~rcastanedalo] 
Following commit link  
https://github.com/openjdk/jdk/commit/a59c9b2ac277d6ff6be1700d91ff389f137e61ca

Thanks;;;","2022-05-08 22:45;thartmann;This was fixed by JDK-8273322 in JDK 19.;;;","2022-05-09 07:22;kvn;It needs jdk18u backport request.;;;","2022-05-10 12:25;jbhateja;Fix Request:
Problem relates to macro logic optimization which skipped processing predicated logic operations in JDK-18. Apparently the check used to test predicated IR node was incorrect and has now been replaced with stricter node flag based check.

Attached reproducer results into an assertion failure with debug build and produces incorrect result with release builds.

Scope of the issue is limited to JDK-18 since in JDK-19 macro logic inferencing algorithm was extended to cover predicated logic operations with significant code changes.

;;;","2022-05-15 22:37;dukebot;Changeset: 3d545876
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-05-16 05:35:11 +0000
URL:       https://git.openjdk.java.net/jdk18u/commit/3d5458761da1b81fdea5e6ce54db993ff0250e2d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS VerifyError when calling clone() on object array,JDK-8286277,5073792,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,webbuggrp,webbuggrp,2022-04-28 10:45,2022-07-22 06:28,2023-10-01 09:56,2022-05-23 09:24,18,,,,,,,,,,,19,hotspot,,0,cds,dcsswa,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Linux (Fedora 35), verified against Java 18 and 17.0.3

A DESCRIPTION OF THE PROBLEM :
While trying to use AppCDS with an application with several dependencies outside of our control, we found a VerifyError that happens when a specific Kotlin class is loaded from a shared archive.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Download the following popular Kotlin jars from Maven Central:

https://search.maven.org/remotecontent?filepath=com/squareup/okio/okio/2.10.0/okio-2.10.0.jar
https://search.maven.org/remotecontent?filepath=com/squareup/okhttp3/okhttp/4.9.3/okhttp-4.9.3.jar
https://search.maven.org/remotecontent?filepath=org/jetbrains/kotlin/kotlin-stdlib/1.6.21/kotlin-stdlib-1.6.21.jar

Compile the attached source code against third-party JARs:
% javac -cp okhttp-4.9.3.jar:kotlin-stdlib-1.6.21.jar KtCdsVerifyError.java

Create a JAR for CDS:
% jar -cf KtCdsVerifyError.jar KtCdsVerifyError.class

Create a shared archive:
% java -XX:ArchiveClassesAtExit=ktcds.jsa -cp okio-2.10.0.jar:okhttp-4.9.3.jar:kotlin-stdlib-1.6.21.jar:KtCdsVerifyError.jar KtCdsVerifyError

Re-execute the program using the shared archive:
% java -XX:SharedArchiveFile=ktcds.jsa -cp okio-2.10.0.jar:okhttp-4.9.3.jar:kotlin-stdlib-1.6.21.jar:KtCdsVerifyError.jar KtCdsVerifyError


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The program should run successfully with no output whether launched with a shared archive or not.
ACTUAL -
When run with the created shared archive, the program fails:

Exception in thread ""main"" java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    okhttp3/internal/Util
  Reason:
    Type '[Ljava/lang/Object;' is not assignable to 'okhttp3/internal/Util'

	at okhttp3.HttpUrl$Builder.parse$okhttp(HttpUrl.kt:1239)
	at okhttp3.HttpUrl$Companion.get(HttpUrl.kt:1633)
	at okhttp3.HttpUrl.get(HttpUrl.kt)
	at KtCdsVerifyError.main(KtCdsVerifyError.java:5)


---------- BEGIN SOURCE ----------
import okhttp3.HttpUrl;

public class KtCdsVerifyError {
    public static void main(final String[] args) {
        HttpUrl.get(""http://example.com"");
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Avoid loading Kotlin classes at CDS archive time.

FREQUENCY : always


",,,,,,,,,,JDK-8290255,JDK-8289912,JDK-8290883,JDK-8290505,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-05 22:42;sswsharm;KtCdsVerifyError.java;https://bugs.openjdk.org/secure/attachment/98843/KtCdsVerifyError.java",,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i2wxff:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-05 22:44;sswsharm;Issue is reproduced.

OS: Linux (Ubuntu 20.04)
JDK 17:Fail
JDK 18: Fail

Output:  Exception is observed when running with creating shared archive

Exception in thread ""main"" java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    okhttp3/internal/Util
  Reason:
    Type '[Ljava/lang/Object;' is not assignable to 'okhttp3/internal/Util'

at okhttp3.HttpUrl$Builder.parse$okhttp(HttpUrl.kt:1239)
at okhttp3.HttpUrl$Companion.get(HttpUrl.kt:1633)
at okhttp3.HttpUrl.get(HttpUrl.kt)
at KtCdsVerifyError.main(KtCdsVerifyError.java:5)

Moving it to JDK for further analysis.;;;","2022-05-06 09:06;ccheung;With -Xlog:cds+verification=trace logging enabled, the failure is during the following check_verification_constraints:

[0.666s][trace][cds,verification] check_verification_constraint: okhttp3.internal.Util: [Ljava.lang.Object; must be subclass of okhttp3.internal.Util [0x3];;;","2022-05-12 23:27;iklam;Simplified test case:

super public class Cloner
    version 52:0
{
  public static Method main:""([Ljava/lang/Object;)V""
    stack 1 locals 1
  {
    aload_0;
    invokevirtual Method ""java/lang/Object"".clone:""()Ljava/lang/Object;"";
    return;
  }
};;;","2022-05-16 16:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8737
Date: 2022-05-16 22:49:24 +0000;;;","2022-05-23 09:24;dukebot;Changeset: 646c8aae
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-05-23 16:23:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/646c8aaeeccb494c72ff84c6e0f303f790be0ba9
;;;","2022-06-30 11:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/519
Date: 2022-06-30 18:48:34 +0000;;;","2022-07-01 01:33;yan;Fix request (17u):
on behalf of Jan Kratochvil:
This bug has been faced by a customer and this backport does work for them. The testcase works after backporting to 17u-dev.;;;","2022-07-18 23:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/236
Date: 2022-07-19 06:15:51 +0000;;;","2022-07-19 00:08;yan;Fix request (15u)
on behalf of Jan Kratochvil: 
This OpenJDK-15 backport is not clean as the original commit errors on OpenJDK-15 with:
    TEST RESULT: Error. can't find jdk.test.lib.helpers.ClassFileInstaller in test directory or libraries
as OpenJDK-15 is missing  JDK-8263412: ClassFileInstaller can't be used by classes outside of default package
;;;","2022-07-22 05:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/376
Date: 2022-07-22 12:49:36 +0000;;;","2022-07-22 06:08;yan;Fix request (13u)

There was a backport to OpenJDK-15. 
This OpenJDK-13 backport had to move files from 
test/hotspot/jtreg/runtime/cds/appcds/ to test/hotspot/jtreg/runtime/appcds/ 
as OpenJDK-13 is missing: 8202339: [TESTBUG] Consolidate the tests in runtime/SharedArchiveFile and runtime/appcds.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[java.desktop] Replace color search in XColors with a switch statement,JDK-8286270,5074297,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-05-05 20:06,2022-07-27 20:05,2023-10-01 09:56,2022-07-22 11:41,17,18,19,,,,,,,,,20,client-libs,,0,,,,,,,,,,,,,,,,,,,,,"The current implementation creates ~750 new objects on load, and uses a binary array search with a Comparable implementation. This implementation is probably bad. Instead, we can use the enhanced switch feature to possibly save time, resources, and code size. The new implementation means that the array doesn't have to be sorted alphanumerically necessarily, and it creates the colors on demand.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x0jn:",9223372036854775807,b08,,,,,,,,,,,"2022-05-05 20:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7096
Date: 2022-01-15 03:44:17 +0000;;;","2022-07-22 11:41;dukebot;Changeset: ef8486a1
Author:    SWinxy <swinxythecat@gmail.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-07-22 18:36:58 +0000
URL:       https://git.openjdk.org/jdk/commit/ef8486a1a40c8b65d3db6048c3dc79802073148d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] VoiceOver : Moving JTable column to be the first column JVM crashes,JDK-8286266,5074292,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,landrews,landrews,2022-05-05 17:47,2023-05-05 03:44,2023-10-01 09:56,2022-05-20 14:21,18,19,,,,,,,,,,19,client-libs,,0,a11y,accessibility,cssn22_07_01,jdk11u-a11y-defer,jdk17u-fix-request,jdk17u-fix-yes,macos,noreg-hard,regression,regression_8271071,sn_117,sn_118,vpat,,,,,,,,"I see JVM crashes when moving any columns to be the first column JVM crashes this happens when Voice over is enabled.

Step to reproduce
--------------------------
1) Enable VoiceOver on mac
2) Run the attached test
3) Select or Unselect the last column checkbox and when  VoiceOver is reading try moving the 'Vegetarian' column to the first column repeat the same for few times and you will the JVM crashes.

I tried with other columns also and the crash was reproduced.
I have attached the Screen Recording for reproducing.

This happens only in JDK18 & JDK19 but not in previous release like 8, 11 and 17.

 After seeing the JVM crash I see that it happened at and this could be https://bugs.openjdk.java.net/browse/JDK-8271071 which was added JDK 18 ( https://github.com/openjdk/jdk/commit/c0f3e1d6beab94a6b361814585b6d77fa617e7e4)

C  [libawt_lwawt.dylib+0xa25f9]  -[TableAccessibility accessibilityCellForColumn:row:]+0x29
C  [AppKit+0x683bad]  -[NSAccessibilityAttributeAccessorInfo getParameterizedAttributeValue:forObject:withParameter:]+0x41
C  [AppKit+0x685745]  ___NSAccessibilityEntryPointValueForAttributeWithParameter_block_invoke.840+0x1bf
C  [AppKit+0x6809ee]  NSAccessibilityPerformEntryPointObject+0x10
C  [AppKit+0x68222f]  NSAccessibilityEntryPointValueForAttributeWithParameter+0xac
",,,,,,,,,,JDK-8287782,JDK-8288410,JDK-8289579,JDK-8289924,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271071,,,,,,,,"2022-05-05 17:37;landrews;TableDemo.java;https://bugs.openjdk.org/secure/attachment/98839/TableDemo.java","2022-05-05 17:38;landrews;hs_err_pid67423.log;https://bugs.openjdk.org/secure/attachment/98838/hs_err_pid67423.log","2022-05-05 17:38;landrews;hs_err_pid78299.log;https://bugs.openjdk.org/secure/attachment/98837/hs_err_pid78299.log",,,,,,,,x86,,,,,,,,,,os_x,,,,,,"0|i2x0ij:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-05-09 11:14;kizune;It seems that the problem is in the cached row values in TableAccessibility.m

When we drag the table header the ACCESSIBLE_TABLE_MODEL_CHANGED event is being constantly generated which in turn causes constant invocation of the clearCache selector which invalidates all the cached row records by doing
    for (NSNumber *key in [rowCache allKeys]) {
        [[rowCache objectForKey:key] release];
    }
Which causes very interesting side effects if the data referenced by the cached row object is being requested from the a11y subsystem and being released in the middle of the processing.;;;","2022-05-10 10:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8636
Date: 2022-05-10 17:34:34 +0000;;;","2022-05-20 14:21;dukebot;Changeset: b33c6e52
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-05-20 21:19:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b33c6e52c1ba675efdae6e48a9ff022b2b24513c
;;;","2022-07-04 01:07;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Clean backport.
SAP nightly testing passed.;;;","2022-07-04 01:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/525
Date: 2022-07-04 08:10:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/c1/TestPinnedIntrinsics.java failed with ""RuntimeException: testCurrentTimeMillis failed with -3""",JDK-8286263,5074288,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlong,dcubed,dcubed,2022-05-05 16:35,2022-09-22 05:38,2023-10-01 09:56,2022-05-06 12:52,11,17,19,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-19,tier2,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

compiler/c1/TestPinnedIntrinsics.java

Here's a snippet from the log file:

#section:main
----------messages:(4/588)----------
command: main -XX:TieredStopAtLevel=1 -Xbatch -XX:CompileCommand=dontinline,compiler.c1.TestPinnedIntrinsics::checkNanoTime -XX:CompileCommand=dontinline,compiler.c1.TestPinnedIntrinsics::checkCurrentTimeMillis compiler.c1.TestPinnedIntrinsics
reason: User specified action: run main/othervm -XX:TieredStopAtLevel=1 -Xbatch -XX:CompileCommand=dontinline,compiler.c1.TestPinnedIntrinsics::checkNanoTime -XX:CompileCommand=dontinline,compiler.c1.TestPinnedIntrinsics::checkCurrentTimeMillis compiler.c1.TestPinnedIntrinsics 
Mode: othervm [/othervm specified]
elapsed time (seconds): 0.354
----------configuration:(0/0)----------
----------System.out:(2/203)----------
CompileCommand: dontinline compiler/c1/TestPinnedIntrinsics.checkNanoTime bool dontinline = true
CompileCommand: dontinline compiler/c1/TestPinnedIntrinsics.checkCurrentTimeMillis bool dontinline = true
----------System.err:(13/868)----------
java.lang.RuntimeException: testCurrentTimeMillis failed with -3
	at compiler.c1.TestPinnedIntrinsics.checkCurrentTimeMillis(TestPinnedIntrinsics.java:58)
	at compiler.c1.TestPinnedIntrinsics.testCurrentTimeMillis(TestPinnedIntrinsics.java:53)
	at compiler.c1.TestPinnedIntrinsics.main(TestPinnedIntrinsics.java:65)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: testCurrentTimeMillis failed with -3
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: testCurrentTimeMillis failed with -3
----------rerun:(35/6012)*----------",,,,,,,,,,JDK-8294231,JDK-8292457,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8184271,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,,,"0|i2x0hn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-05 18:52;dlong;ILW = test failure; intermittent on one platform; disable intrinsic = MLM = P4;;;","2022-05-05 20:42;dlong;The generated code looks OK to me.  I wonder if this could be a problem with os::javaTimeNanos() on osx.  This page says mach_absolute_time() is monotonic, but the implementation of javaTimeNanos() is treating it like it isn't:
https://developer.apple.com/documentation/kernel/1462446-mach_absolute_time;;;","2022-05-05 21:16;dholmes;It says ""testCurrentTimeMillis"" and that is not monotonic.

If the time-of-day clock got an adjustment at just the wrong time it could affect this test;;;","2022-05-05 21:30;dlong;Thanks David, I missed that.;;;","2022-05-05 21:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8566
Date: 2022-05-06 04:42:50 +0000;;;","2022-05-06 12:52;dukebot;Changeset: bb52ea68
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-05-06 19:47:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bb52ea6820ee749b1ac07485cf1ef65c40048f13
;;;","2022-09-19 13:58;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.
;;;","2022-09-19 14:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/699
Date: 2022-09-19 21:20:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Selection of non-expanded non-leaf treeItem grows unexpectedly when adding two-level descendants,JDK-8286261,5074286,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2022-05-05 15:45,2022-07-04 06:18,2023-10-01 09:56,2022-05-22 11:40,jfx19,,,,,,,,,,,jfx19,javafx,,0,,,,,,,,,,,,,,,,,,,,,"On a TreeTableView, with multiple selection enabled, when a non-expanded non-leaf node, that has at least two levels of descendants, is selected, the selection grows unexpectedly to the next sibling of the top-level node, once a new treeItem is added to the second (or deeper) level of the selected item.

The attached test shows the issue. 

- Node 0 (non-leaf) is selected and not expanded. It has as child Node 1, which also has Node 2 as child. 
- Node 3 is a sibling of Node 0.

When Node 4 is added as sibling of Node 2, Node 3 gets selected unexpectedly (see attached picture).

This issue can be reproduced with any JavaFX version and platform.
",,,,,,,,,,JDK-8289694,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248217,,,,,,,,,,,,,,,"2022-05-05 15:37;jpereda;TreeTableViewSelectionTest.java;https://bugs.openjdk.org/secure/attachment/98834/TreeTableViewSelectionTest.java","2022-05-05 15:30;jpereda;UnexpectedSelection.png;https://bugs.openjdk.org/secure/attachment/98835/UnexpectedSelection.png",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x0h7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-05-06 02:02;jpereda;In the test we have:

- Node 0                     <-- Collapsed
    |-- Node 1
           |-- Node 2
           |-- Node 4       <--- added
- Node 3

After Node 4 is added, in https://github.com/openjdk/jfx/blob/master/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java#L2614:

shift += treeItem.isExpanded() ? addedSize : 0;

where treeItem is set to the parent of Node 4, Node 1, which is expanded, and therefore shift is set to 1, which explains the unexpected selection of Node 3. 

However, given that the ancestor of Node 1 is collapsed, this shift shouldn't apply.

A fix for this issue (which affects added/removed changes for both selection and focus models) should consider replacing all calls to treeItem.isExpanded() with something like (treeItem.isExpanded() And AllItsAncestors.areExpanded()).
;;;","2022-05-06 03:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/791
Date: 2022-05-06 10:16:41 +0000;;;","2022-05-22 11:39;dukebot;Changeset: 19a855e8
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2022-05-22 18:36:41 +0000
URL:       https://git.openjdk.java.net/jfx/commit/19a855e8ec3972377359ecbc0f71808f34c1b288
;;;","2022-06-30 01:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/70
Date: 2022-06-29 19:43:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Password cleanup after KeyStore.PasswordProtection in P11KeyStore,JDK-8286259,5074284,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hchao,hchao,hchao,2022-05-05 14:54,2022-06-29 23:16,2023-10-01 09:56,2022-06-27 16:18,,,,,,,,,,,,20,security-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,"After the the generation of KeyStore.PasswordProtection object in P11KeyStore class, it needs to be destroyed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x0gr:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-06-22 17:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9254
Date: 2022-06-23 00:41:07 +0000;;;","2022-06-27 16:18;dukebot;Changeset: ca78f7bd
Author:    Hai-May Chao <hchao@openjdk.org>
Date:      2022-06-27 23:15:13 +0000
URL:       https://git.openjdk.org/jdk/commit/ca78f7bd762e1d5cd843d1ff36fafb8c943aba97
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update libxslt to 1.1.35,JDK-8286257,5074282,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,vdyakov,vdyakov,2022-05-05 13:57,2022-07-17 11:03,2023-10-01 09:56,2022-05-23 08:53,8u341,jfx19,,,,,,,,,,jfx19,javafx,,0,3rdparty,CPU22_07-critical-approved,CPU22_07-critical-SQE-OK,noreg-other,sn_118,sn_119,,,,,,,,,,,,,,,"We need to update the version of libxslt to the latest version, 1.1.35.",,,,,,,,,,JDK-8287167,JDK-8287256,JDK-8287259,JDK-8287243,JDK-8290415,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8234056,,,,,,JDK-8286324,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x0gb:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-05-17 05:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/797
Date: 2022-05-17 12:32:17 +0000;;;","2022-05-23 08:53;dukebot;Changeset: d6770034
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-05-23 15:49:32 +0000
URL:       https://git.openjdk.java.net/jfx/commit/d6770034a66a294b8740875c28871f2b4677aef2
;;;","2022-05-24 10:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/61
Date: 2022-05-24 17:33:57 +0000;;;","2022-05-24 10:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/101
Date: 2022-05-24 17:31:27 +0000;;;","2022-07-16 11:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/834
Date: 2022-07-16 18:48:55 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update libxml2 to 2.9.14,JDK-8286256,5074280,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,vdyakov,vdyakov,2022-05-05 12:52,2023-01-24 09:07,2023-10-01 09:56,2022-05-23 08:53,8u341,jfx19,,,,,,,,,,jfx19,javafx,,0,3rdparty,CPU22_07-critical-approved,CPU22_07-critical-SQE-OK,sn_118,sn_119,,,,,,,,,,,,,,,,"We currently use libxml2 version 2.9.13. We should update to the latest stable release, which is version 2.9.14

",,,,,,,,,,JDK-8287255,JDK-8287166,JDK-8287242,JDK-8287258,JDK-8290414,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275181,,,JDK-8301009,JDK-8283328,,,,,,JDK-8286317,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x0fv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-05-17 05:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/797
Date: 2022-05-17 12:32:17 +0000;;;","2022-05-23 08:53;dukebot;Changeset: d6770034
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-05-23 15:49:32 +0000
URL:       https://git.openjdk.java.net/jfx/commit/d6770034a66a294b8740875c28871f2b4677aef2
;;;","2022-05-24 10:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx17u/pull/61
Date: 2022-05-24 17:33:57 +0000;;;","2022-05-24 10:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx11u/pull/101
Date: 2022-05-24 17:31:27 +0000;;;","2022-07-16 11:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/834
Date: 2022-07-16 18:48:55 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing cases for RECORD,JDK-8286206,5074228,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jjg,jjg,2022-05-05 10:12,2022-06-09 22:30,2023-10-01 09:56,2022-06-07 07:49,19,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"There are 2 places in SourceCodeAnalysisImpl (lines 937, 1686) in jdk.jshell where there is a switch on an ElementKind that has a case for ENUM but not a case for RECORD. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x04b:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-06-06 07:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9042
Date: 2022-06-06 14:40:01 +0000;;;","2022-06-07 07:49;dukebot;Changeset: 062db59e
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-06-07 14:44:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/062db59eeb8ba6389aaa3c622dbc109a92d580ca
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[linux] Fix process-memory information,JDK-8286198,5074218,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-05-05 07:43,2022-05-19 05:42,2023-10-01 09:56,2022-05-10 06:32,16,17,18,19,,,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,sap-interest,,,,,,,,,,,,,"We use mallinfo/mallinfo2 to obtain information about the glibc used memory, but there is an error which causes it to be correct only for fine granular malloc allocations. glibc puts larger allocations in mmap-allocated areas, which were missing from the old calculation.",,,,,,,,,,JDK-8287020,JDK-8286656,JDK-8286900,JDK-8286780,JDK-8286655,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8251255,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x023:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-05 08:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8553
Date: 2022-05-05 14:55:01 +0000;;;","2022-05-10 06:32;dukebot;Changeset: 9e320d9a
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-05-10 13:28:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9e320d9ab1813eda705d7318ef964092c50d1ade
;;;","2022-05-10 06:51;stuefe;Fix Request (17):

I'd like this fix downported, since it helps with analysing native oom situations. Fix is low risk and applies cleanly.;;;","2022-05-10 06:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/391
Date: 2022-05-10 13:33:14 +0000;;;","2022-05-10 07:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/126
Date: 2022-05-10 14:04:35 +0000;;;","2022-05-10 07:17;stuefe;Fix Request (18):

I'd like this fix downported, since it helps with analysing native oom situations. Fix is low risk and applies cleanly.;;;","2022-05-10 07:17;stuefe;Fix Request (11):

I'd like this fix downported, since it helps with analysing native oom situations. Fix is low risk and applies cleanly.;;;","2022-05-10 07:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1078
Date: 2022-05-10 14:16:13 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExecutorShutdown test fails intermittently,JDK-8286194,5074212,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2022-05-05 06:59,2022-12-09 05:23,2023-10-01 09:56,2022-05-13 04:53,19,,,,,,,,,,,19,core-libs,,0,httpclient,noreg-self,ursqe-triaged,,,,,,,,,,,,,,,,,,"config ExecutorShutdown.teardown(): failure
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(3) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 1
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 2
	Total pending operations: 1
	Facade referenced: false
	Selector alive: true
Found 1 client still active, with 1 operations still pending out of 8 tracked clients.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286720,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x00r:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-05-05 07:03;dfuchs;... the thread dump shows the issue

""main"" prio=5 Id=1 WAITING on java.lang.Thread@60bd942a
	at java.base@19-internal/java.lang.Object.wait(Native Method)
	-  waiting on java.lang.Thread@60bd942a
	at java.base@19-internal/java.lang.Thread.join(Thread.java:1299)
	at java.base@19-internal/java.lang.Thread.join(Thread.java:1367)
	at app//com.sun.javatest.regtest.agent.MainWrapper.main(MainWrapper.java:74)

""MainThread"" prio=5 Id=15 RUNNABLE
	at java.management@19-internal/sun.management.ThreadImpl.dumpThreads0(Native Method)
	at java.management@19-internal/sun.management.ThreadImpl.dumpAllThreads(ThreadImpl.java:521)
	at java.management@19-internal/sun.management.ThreadImpl.dumpAllThreads(ThreadImpl.java:509)
	at app//ReferenceTracker.printThreads(ReferenceTracker.java:95)
	at app//ReferenceTracker.check(ReferenceTracker.java:131)
	at app//ReferenceTracker.check(ReferenceTracker.java:87)
	at app//ExecutorShutdown.teardown(ExecutorShutdown.java:313)
	at java.base@19-internal/java.lang.invoke.LambdaForm$DMH/0x0000000800c34000.invokeVirtual(LambdaForm$DMH)
	...


""ForkJoinPool.commonPool-worker-1"" daemon prio=5 Id=27 BLOCKED on jdk.internal.net.http.Http2ClientImpl@1e1825c owned by ""pool-3-thread-3"" Id=35
	at platform/java.net.http@19-internal/jdk.internal.net.http.Http2ClientImpl.deleteConnection(Http2ClientImpl.java:191)
	-  blocked on jdk.internal.net.http.Http2ClientImpl@1e1825c
	at platform/java.net.http@19-internal/jdk.internal.net.http.Http2Connection.shutdown(Http2Connection.java:709)
	at platform/java.net.http@19-internal/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.processQueue(Http2Connection.java:1393)
	at platform/java.net.http@19-internal/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber$$Lambda$352/0x0000000800daefe8.run(Unknown Source)
	at platform/java.net.http@19-internal/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at platform/java.net.http@19-internal/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at platform/java.net.http@19-internal/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.base@19-internal/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1397)
	...

	Number of locked synchronizers = 1
	- java.util.concurrent.locks.ReentrantLock$NonfairSync@457896fa


""HttpClient-3-SelectorManager"" daemon prio=5 Id=32 RUNNABLE
	at java.base@19-internal/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base@19-internal/java.io.FileOutputStream.write(FileOutputStream.java:349)
	at java.base@19-internal/java.io.BufferedOutputStream.write(BufferedOutputStream.java:123)
	-  locked java.io.BufferedOutputStream@286b75f9
	at java.base@19-internal/java.io.PrintStream.write(PrintStream.java:563)
	-  locked java.io.PrintStream@29a5e948
	at java.base@19-internal/sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:234)
	at java.base@19-internal/sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:313)
	at java.base@19-internal/sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:111)
	-  locked java.io.OutputStreamWriter@24db6d42
	at java.base@19-internal/java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:180)
	...


""pool-3-thread-3"" prio=5 Id=35 BLOCKED on jdk.internal.net.http.HttpClientImpl$SelectorManager@558da1de owned by ""HttpClient-3-SelectorManager"" Id=32
	at platform/java.net.http@19-internal/jdk.internal.net.http.HttpClientImpl$SelectorManager.register(HttpClientImpl.java:1027)
	-  blocked on jdk.internal.net.http.HttpClientImpl$SelectorManager@558da1de
	at platform/java.net.http@19-internal/jdk.internal.net.http.HttpClientImpl$SelectorManager.eventUpdated(HttpClientImpl.java:1020)
	at platform/java.net.http@19-internal/jdk.internal.net.http.HttpClientImpl.eventUpdated(HttpClientImpl.java:773)
	at platform/java.net.http@19-internal/jdk.internal.net.http.SocketTube.pauseEvent(SocketTube.java:1287)
	at platform/java.net.http@19-internal/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.pauseReadEvent(SocketTube.java:759)
	at platform/java.net.http@19-internal/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.read(SocketTube.java:820)
	at platform/java.net.http@19-internal/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$211/0x0000000800d212b8.run(Unknown Source)
	at platform/java.net.http@19-internal/jdk.internal.net.http.SocketTube$SocketFlowTask.run(SocketTube.java:181)
	...

	Number of locked synchronizers = 3
	- java.util.concurrent.locks.ReentrantLock$NonfairSync@26bac22b
	- java.util.concurrent.ThreadPoolExecutor$Worker@57f5494c
	- java.util.concurrent.locks.ReentrantLock$NonfairSync@20d3801d
;;;","2022-05-05 12:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8562
Date: 2022-05-05 19:03:13 +0000;;;","2022-05-13 04:53;dukebot;Changeset: 04df8b74
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-05-13 11:51:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/04df8b74379c9de7b20931fea1642f82569d3a2d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
misc tests fail due to JDK-8285987,JDK-8286191,5074209,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,mbaesken,rriggs,rriggs,2022-05-05 06:46,2023-05-08 01:29,2023-10-01 09:56,2022-05-10 00:45,19,,,,,,,,,,,19,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,problemlist,regression,tier1,tier2,,,,,,,,,,,,,,,"The addition of the isMusl() method to test/lib/jdk/test/lib/Platform.java causes a test failure:

test/lib-test/jdk/test/lib/TestMutuallyExclusivePlatformPredicates.java

A test for the isMusl() method needs to be added

Please remove it from the ProblemList when the issue is fixed:
   test/lib-test/ProblemList.txt",,,,,,,,,,JDK-8307593,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285987,,,,,,,JDK-8286199,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x003:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-05-05 06:47;rriggs;Please add the needed test; it is causing CI test failures;;;","2022-05-05 06:51;dcubed;Bumping this from P3 -> P1. This is a regression and is causing
6 test failures (same test) per Tier1 job set.;;;","2022-05-05 07:59;dcubed;Here's a log file snippet for the jdk-19+22-1494-tier2 sighting: 

jdk/jshell/ExternalEditorTest.java 

#section:script_messages
----------messages:(0/0)----------


test result: Error. Parse Exception: Syntax error in @requires expression: invalid name: vm.musl

Update: We are seeing 6 test failures (same test) per Tier2 job set.;;;","2022-05-05 08:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8556
Date: 2022-05-05 15:21:23 +0000;;;","2022-05-10 00:45;dukebot;Changeset: de8f4d01
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-05-10 07:44:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/de8f4d01b234f5224a687dae5db52ab31247c2da
;;;","2023-05-04 23:06;goetz;Fix request [17u]

I backport this as follow up of 8285987.
No risk, only a test change.
I had to do trivial adaptions.
Tests pass. SAP nightly testing passed.;;;","2023-05-05 00:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1321
Date: 2023-05-04 12:38:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: ""failed: non-reduction loop contains reduction nodes"" assert failure",JDK-8286177,5074194,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,roland,roland,2022-05-05 00:43,2022-07-25 05:12,2023-10-01 09:56,2022-05-24 00:21,11,17,19,,,,,,,,,19,hotspot,,0,c2,c2-superword,javafuzzer,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,"Similarly to JDK-8279622, a node marked as a reduction is hoisted out of its original reduction loop into an outer loop that is not marked as a reduction. The assertion introduced in JDK-8279622 catches this inconsistency and fails. Unlike JDK-8279622 though, the inconsistent reduction marking in this case is not fatal, in that it would not lead to a miscompilation should the assertion be disabled. This is because the inconsistently marked loop(s) contains safepoints, which inhibits SLP vectorization.

HOW TO REPRODUCE

$ javac Test.java FuzzerUtils.java
$ java Test

#  Internal Error (/home/roland/jdk-jdk/src/hotspot/share/opto/superword.cpp:113), pid=4077494, tid=4077507
#  assert(!lpt->has_reduction_nodes() || cl->is_reduction_loop()) failed: non-reduction loop contains reduction nodes
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.roland.jdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.roland.jdk-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1a3cb04]  SuperWord::transform_loop(IdealLoopTree*, bool)+0x424

FAILURE ANALYSIS

The node corresponding to (acc += j) is marked as a reduction together with its (inner) loop:

  int i = 0, acc = 0;
  do {
      int j = 0;
      do {              // inner loop marked as a reduction
          if (b) {
              acc += j; // node marked as a reduction
          }
          j++;
      } while (j < 5);
      i++;
  } while (i < 100);
  return acc;

After unrolling and constant-folding the inner loop (b is always true), the node formerly corresponding to (acc += j), and now corresponding to (acc += 10), is hoisted into the outer loop, which is not marked as a reduction. This creates an inconsistent state that is later caught by the failing assertion:

  int i = 0, acc = 0;
  do {
      acc += 10; // node marked as a reduction (inconsistent, outer loop is not marked as a reduction)
      i++;
  } while (i < 100);
  return acc;",,,,,,,,,,JDK-8288835,JDK-8288834,JDK-8290438,JDK-8289130,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287087,JDK-8289197,,,,,,JDK-8279622,JDK-8290964,,,,,,,"2022-05-05 00:43;roland;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/98813/FuzzerUtils.java","2022-05-05 00:43;roland;Test.java;https://bugs.openjdk.org/secure/attachment/98814/Test.java","2022-05-05 00:43;roland;hs_err_pid4077494.log;https://bugs.openjdk.org/secure/attachment/98815/hs_err_pid4077494.log","2022-05-05 00:43;roland;replay_pid4077494.log;https://bugs.openjdk.org/secure/attachment/98816/replay_pid4077494.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2wzwr:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-05 03:34;thartmann;Assert was introduced by JDK-8279622. [~rcastanedalo], could you please have a look?;;;","2022-05-05 04:43;rcastanedalo;ILW = assert failure in C2; JavaFuzzer-generated program; use -XX:-SuperWordReductions = MMM = P3;;;","2022-05-20 04:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8805
Date: 2022-05-20 09:45:19 +0000;;;","2022-05-24 00:21;dukebot;Changeset: 6458a56e
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-05-24 07:19:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6458a56e60472fb2fbe8fa60bbc856dc95f50f07
;;;","2022-06-22 03:22;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A c2 fix that is a follow up so we should take it.
I had to resolve removing the assertion.
Test passes, unfortunately also without the fix.;;;","2022-06-22 03:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/495
Date: 2022-06-22 08:28:23 +0000;;;","2022-07-01 03:30;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
A c2 fix that is a follow up to JDK-8279622 so we should take it.
Clean backport from 17.
Test passes, unfortunately also without the fix. SAP nighlty testing passed.;;;","2022-07-01 03:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1195
Date: 2022-07-01 10:32:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create an automated test for JDK-4516019,JDK-8286172,5074189,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-05-04 22:47,2023-06-27 08:18,2023-10-01 09:56,2022-07-18 10:25,11,17,18,19,8,,,,,,,20,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,,,"Create an automated test for JDK-4516019

Clicking on the increment/decrement buttons of the spinner does not install focus on the spinner or one of its focusable children.

The test validates the same.

This review is for migrating tests from a closed test suite to open.

Testing:
The test ran successfully on Mach5 with multiple runs (30) on windows-x64, linux-x64 and macos-x64.",,,,,,,,,,JDK-8304380,JDK-8296540,JDK-8310969,JDK-8304632,JDK-8296377,JDK-8301482,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wzvn:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-05-05 00:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8546
Date: 2022-05-05 06:58:26 +0000;;;","2022-07-18 10:25;dukebot;Changeset: e72742ee
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-07-18 17:18:53 +0000
URL:       https://git.openjdk.org/jdk/commit/e72742eeb5f265e854d098a560cb41c83e93f905
;;;","2022-11-07 02:02;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nighlty testing passed.;;;","2022-11-07 02:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/859
Date: 2022-11-07 10:05:01 +0000;;;","2023-06-22 07:51;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed;;;","2023-06-22 07:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1992
Date: 2023-06-22 14:51:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HttpClient/2 : Expect:100-Continue blocks indefinitely when response is not 100 ,JDK-8286171,5074068,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,ccleary,webbuggrp,webbuggrp,2022-05-03 09:52,2023-01-31 03:44,2023-10-01 09:56,2022-06-09 08:06,11,17,18,19,,,,,,,,20,core-libs,,0,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows 10
JDK 17

A DESCRIPTION OF THE PROBLEM :
When HttpClient sends an Expect:100-Continue header via http 2 protocol. If the server responds with an 417[Expectation Code] or any other error code besides code 100. The client hangs forever. Issue does not exist when using http 1.1 protocol

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1) Create an very basic HttpServer which does not parse any bytes but instead sends http 2 frames at each stage of the request. 

2)Send an POST request with expectContinue enabled

3)Send one request to first upgrade the client first to http 2 and then on the 2nd request send POST with expectContinue enabled. Client exits normally if response code is 100 but hangs forever if code is anything else

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
HttpClient should finish the  Expect 100 request either as an normal response or should throw an exception if response code is not 100
ACTUAL -
Client hangs forever when  Expect : 100-Continue response code is not 100

---------- BEGIN SOURCE ----------
The problem does not persist with http 1.1 protocol hence we need to first upgrade the protocol on the client and server to http 2 after exchanging Connection: Upgrade & 101 Switching protocol packets and then on the 2nd request we send an PUT request with an expect 100 header enabled.

To keep this example as simple as possible an very oversimplified version of HPack was implemented and the server does not attempt to parse any bytes of the client but from debugging experience i create stages where each stage decides what response to send to the client.

The most basic version of HPACK

private static final class OverSimplifiedHPack
 {
  /*
       0   1   2   3   4   5   6   7
   +---+---+---+---+---+---+---+---+
   | 0 | 0 | 0 | 0 |  Index (4+)   |
   +---+---+-----------------------+
   | H |     Value Length (7+)     |
   +---+---------------------------+
   | Value String (Length octets)  |
   +-------------------------------+
 */
  private static byte[] encode_literal_non_indexed_headers(String[] index_values)throws Exception
  {
   try(ByteArrayOutputStream encoding=new ByteArrayOutputStream();
       ByteArrayOutputStream buffer=new ByteArrayOutputStream())
   {
    for(int i=0;i<=index_values.length-2;i+=2)
    {
     String value=index_values[i+1]; 

     byte[] 
     header_index=encodePrefix(encoding,Integer.parseInt(index_values[i]),(byte)4),
     valueBytes=value.getBytes(),
     valueLength=encodePrefix(encoding,valueBytes.length,(byte)7); 
    
     encoding.reset();
     
     encoding.write(header_index[0]&0b00001111);
     if(header_index.length>1){encoding.write(header_index,1,header_index.length-1);}
     
     encoding.write(valueLength[0]&0b01111111);
     if(valueLength.length>1){encoding.write(valueLength,1,valueLength.length-1);}
     encoding.write(valueBytes);
     
     buffer.write(encoding.toByteArray());
    }
    return buffer.toByteArray();
   } 
  } 
  
  private static byte[] encodePrefix(ByteArrayOutputStream encoding,int value,byte prefix)throws Exception
  {
   encoding.reset();
   
   int max=(int)Math.pow(2,prefix)-1;
   if(value<max){encoding.write(value);}
   else
   {
    encoding.write(max);

    value-=max;
    while(value>128)
    {
     encoding.write(((value%128)+128));

     value/=128;
    }

    encoding.write(value);
   } 

   return encoding.toByteArray();    
  }
 } 

The HttpServer

The server gives some predefined responses and is designed to parse exactly 2 requests.

1)The 1st request is an random get request. This is designed to 1st upgrade the client to Http 2

2)The 2nd request is the actual Expect 100 header where there is one important boolean flag

       boolean doContinue=true;

Setting this flag to true writes 100 which produces expected result on the client side. Setting to false however writes code 417 indicating expectation failed which hangs the client

8 =   index of the header :status in the static encoding table of HPACK[RFC 7541]
28 = index of the header content-length in the static encoding table of HPACK[RFC 7541] 

public static void main2(String[] args)throws Exception
 {
  try(ServerSocket socket=new ServerSocket(5000))
  {
   try(Socket client=socket.accept())
   {
    try(InputStream input=client.getInputStream();
        OutputStream output=client.getOutputStream())
    {
     byte[] array=new byte[8196];
     
     int 
     stage=1,
     requestID=0; 
     /*Please change this variable for both test cases*/
     boolean doContinue=true;
     
     while(input.read(array)>0)
     {
      if(stage==1)
      {
       try(ByteArrayOutputStream serverPreface=new ByteArrayOutputStream())
       {
        serverPreface.write
        (
         (
          ""HTTP/1.1 101 Switching Protocols\r\n""+
          ""Connection:Upgrade\r\n""+
          ""Upgrade:h2c\r\n\r\n""
         ).getBytes()
        );
        
        byte[] settings={};
        serverPreface.write
        (
         new byte[]
         {
          (byte)((settings.length>>16) & 0xFF),
          (byte)((settings.length>>8) & 0xFF),
          (byte)(settings.length & 0xFF),
          (byte)0x4,
          (byte)0x1,
          0,0,0,0
         } 
        );
        serverPreface.write(settings);
        
        output.write(serverPreface.toByteArray());
        output.flush();
       } 
      
       if(requestID==0){stage=3;}
      }
      else if(stage==2)
      {    
      //if we are at the 2nd request skip any frames which is not an Header Frame
       if(requestID==1 && array[3]!=0x1){continue;}
      
       try(ByteArrayOutputStream frameBytes=new ByteArrayOutputStream())
       {
        byte[] headerBytes=OverSimplifiedHPack.encode_literal_non_indexed_headers
        (
         new String[]
         {
          ""8"",doContinue?""100"":""407"",
          ""28"",""0""
         }
        );       
        frameBytes.write
        (
         new byte[]
         {
          (byte)((headerBytes.length>>16) & 0xFF),
          (byte)((headerBytes.length>>8) & 0xFF),
          (byte)(headerBytes.length & 0xFF),
          (byte)0x1,
          (byte)0x4,
          0,0,0,3
         } 
        );
        frameBytes.write(headerBytes);
        
        output.write(frameBytes.toByteArray());  
        output.flush();
       }
      
       if(doContinue){stage=3;}
       else{stage=-1;}
      } 
      else if(stage==3)
      {
       //for the 2nd request we respond only after the client has sent us all the header and
      //data frames. For any other frame types we don't respond 
       if(requestID==1 && !(array[3]==0x1 || array[3]==0x0)){continue;}
   
       try(ByteArrayOutputStream frameBytes=new ByteArrayOutputStream())
       {
        byte[] content=(requestID==0?""Request 1 Done"":""Test Complete"").getBytes();
        
        byte[] headerBytes=OverSimplifiedHPack.encode_literal_non_indexed_headers
        (
         new String[]
         {
          ""8"",""202"",
          ""28"",""""+content.length
         } 
        );     
        frameBytes.write
        (
         new byte[]
         {
          (byte)((headerBytes.length>>16) & 0xFF),
          (byte)((headerBytes.length>>8) & 0xFF),
          (byte)(headerBytes.length & 0xFF),
          (byte)0x1,
          (byte)0x4,
          0,0,0,(byte)(requestID==0?1:3)
         } 
        );
        frameBytes.write(headerBytes);
        
      
        frameBytes.write
        (
         new byte[]
         {
          (byte)((content.length>>16) & 0xFF),
          (byte)((content.length>>8) & 0xFF),
          (byte)(content.length & 0xFF),
          (byte)0x0,
          (byte)0x1,
          0,0,0,(byte)(requestID==0?1:3)
         } 
        );
        frameBytes.write(content);
        
        output.write(frameBytes.toByteArray());
        output.flush();
       }
       
       if(requestID==0)
       {
        requestID=1;
        stage=2;
       }
       else{stage=-1;}
      } 
     } 
    } 
   } 
  } 
 } 

Output

When doContinue=true

Status code: 200
Headers: {:status=[200], content-length=[14]}
Body: Request 1 Done
=======================
Status code: 202
Headers: {:status=[202], content-length=[13]}
Body: Test Complete

When do Continue = false

Status code: 200
Headers: {:status=[200], content-length=[14]}
Body: Request 1 Done
=======================

/*HANGS FOREVER*/
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
No workaround. Issue does not exist for http 1.1. When upgrading to version 2 response 100 must be written before the 101 Switching protocol response and then both test cases work else client throws error.

FREQUENCY : always


",,,,,,,,,,JDK-8288335,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-04 22:35;tongwan;HTTTP_Continue.java;https://bugs.openjdk.org/secure/attachment/98808/HTTTP_Continue.java","2022-05-04 22:35;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/98809/Main.java",,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wz4r:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-05-04 06:50;tongwan;Requested a complete reproducer from the submitter.;;;","2022-05-04 22:38;tongwan;Test case 1[Server responds with code 100 and everything works as expected]
1) Set DO_CONTINUE=true and run the method server
2)run the client
3)No problems expected output on both client & server

Test Case 2[Server responds with code 417 and client hangs]
1) Set DO_CONTINUE=false and run the method server
2)run the client
3)client hangs forever on the 2nd request

Make sure to run the server method on a seperate JVM[as an seperate process] and the client as well on a seperate JVM[process]. Please don't run both the methods at once in the same program.;;;","2022-05-04 22:40;tongwan;The observations on Windows 10:
JDK 11: Failed, client hangs when DO_CONTINUE=false
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+19: Failed.;;;","2022-06-09 01:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9093
Date: 2022-06-08 18:29:10 +0000;;;","2022-06-09 08:06;dukebot;Changeset: 26714431
Author:    Conor Cleary <ccleary@openjdk.org>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-06-09 15:03:52 +0000
URL:       https://git.openjdk.org/jdk/commit/267144311c96109421b897b359c155a963661d31
;;;","2022-06-09 08:45;erikj;This change didn't make it in before the cut for the JDK 19 fork, but Skara mistakenly tagged it as fixVersion 19 initially. I've updated the fixVersion to 20.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Files.exists returns unexpected results with C:\pagefile.sys because it's not readable,JDK-8286160,5074131,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2022-05-04 05:01,2023-01-31 03:45,2023-10-01 09:56,2022-06-09 09:34,11,17,18,19,8,,,,,,,20,core-libs,,0,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Windows any, Java any (bug is present ever since `Files.exists()` was added)

A DESCRIPTION OF THE PROBLEM :
`Files.exists()`, contrary to what documentation says, verifies that file is readable instead of verifying that file exists. Furthermore, in order to verify that, it actually opens file for reading (and immediately closes it).

The first problem is seen with files that exist but are not readable (due to security or being opened exclusively)
----
In this case, the following results are observed:
   Files.exists() = false
   File.exists()  = true

This is completely unexpected, and documentation doesn't explain this danger.

For example, on Windows, try with `C:\pagefile.sys`. While this file might sounds a bit exotic, it's just a simplest example. Files that are opened with exclusive access, or that are not accessible to current user, are rather common. I anticipate that on Linux, the same will happen when trying with `/etc/passwd`.

The second problem is with antivirus
----
By opening the file for read access, JDK triggers the antivirus to check the file.
In my case, checking timings for checking every file in a local git installation are:
Files.exists() = 45.2 sec
File.exists()  =  0.8 sec

Discussion
----
The problem occurs because `Files.exists()` and `File.exists()` are completely different implementations.

`File.exists()`, at least on Windows, eventually arrives to native `getFinalAttributes()`, which correctly calls `GetFileAttributesExW()`.

`Files.exists()` however has two paths.
When links are NOT followed, it eventually arrives to `WindowsFileAttributeViews.get()` and once again calls the good `GetFileAttributesExW()`.
However, when links are followed (and this is the default!), it goes to `checkAccess()`, with all the problems described above.

Possible fixes
----
I understand that `Files.exists()` should always only check for file's presence and never for its readability. That is, to be more in line with what is done in `File.exists()`, which even seems to have code to handle symlinks when needed.

While investigating, I found other people puzzled by this
----
https://stackoverflow.com/questions/57282130
https://stackoverflow.com/questions/30520179
https://stackoverflow.com/questions/35087699

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
true, true
ACTUAL -
false, true

---------- BEGIN SOURCE ----------
Path path = Paths.get(""C:\\pagefile.sys"");
System.out.println(""Files.exists() = "" + Files.exists(path));
System.out.println(""File.exists()  = "" + path.toFile().exists());
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8288342,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-04 19:47;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/98807/Main.java",,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,,"0|i2wzir:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2022-05-04 20:05;tongwan;The observations on Windows 10:
JDK 8: Failed, the outputs of the reproducer are false, true.
JDK 11: Failed.
JDK 17: Failed.
JDK 18: Failed.
JDK 19ea+19: Failed.;;;","2022-06-06 15:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9045
Date: 2022-06-06 22:28:47 +0000;;;","2022-06-09 09:34;dukebot;Changeset: d482d7f5
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-06-09 16:30:53 +0000
URL:       https://git.openjdk.org/jdk/commit/d482d7f5b99e89185471c05cde797f13405c32f2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Memory leak in getAllConfigs of awt_GraphicsEnv.c:585,JDK-8286159,5074177,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,shadowbug,shadowbug,2022-05-04 17:18,2022-06-01 23:31,2023-10-01 09:56,2022-05-31 13:16,18,19,,,,,,,,,,19,client-libs,,0,bugdb_34137776,parfait,sn_118,sn_119,,,,,,,,,,,,,,,,,Memory leak in getAllConfigs of awt_GraphicsEnv.c:585,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,"0|i2wzsz:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-05-06 16:43;prr;The tooling is expressing itself oddly but I see the potential for a leak of graphicsConfigs allocated here
  
 graphicsConfigs = (AwtGraphicsConfigDataPtr *)
        calloc(nConfig, sizeof(AwtGraphicsConfigDataPtr));

In normal operation this is stored in
    screenDataPtr->configs = graphicsConfigs;

before returning

but in the case of an error when we jump to cleanup: I don't see anything freeing graphicsConfigs
and it isn't stored anywhere
;;;","2022-05-23 13:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8857
Date: 2022-05-23 20:35:33 +0000;;;","2022-05-31 13:16;dukebot;Changeset: 97bd4c25
Author:    Phil Race <prr@openjdk.org>
Date:      2022-05-31 20:14:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/97bd4c255a319ce626a316ed211ef1fd7d0f1e14
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix 3rd party notices in test files,JDK-8286154,5074170,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2022-05-04 14:57,2023-02-01 01:17,2023-10-01 09:56,2022-05-06 09:12,,,,,,,,,,,,19,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,"There are test files that have Taligent copyright notices which have the wording such as:

```
 * Taligent is a registered trademark of Taligent, Inc.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
[...] 
```

which is not compatible with the GNU General Public License version 2. Following existing conventions, prepend this text:

```
/*
 * This file is available under and governed by the GNU General Public
 * License version 2 only, as published by the Free Software Foundation.
 * However, the following notice accompanied the original version of this
 * file and, per its terms, should not be removed:
 * 
```

to each of the Taligent copyright notice. Following files will be modified:

```
test/jdk/java/text/BreakIterator/BreakIteratorTest.java
test/jdk/java/text/CharacterIterator/CharacterIteratorTest.java
test/jdk/java/text/Format/ChoiceFormat/Bug4185732Test.java
test/jdk/java/text/Format/MessageFormat/Bug4185816Test.java
test/jdk/java/util/Locale/Bug4184873Test.java
test/jdk/java/util/Locale/LocaleTest.java
test/jdk/java/util/Locale/PrintDefaultLocale.java
test/jdk/java/util/ResourceBundle/Bug4179766Class.java
test/jdk/java/util/ResourceBundle/Bug4179766Getter.java
test/jdk/java/util/ResourceBundle/Bug4179766Resource.java
test/jdk/java/util/ResourceBundle/FakeTestResource.java
test/jdk/java/util/ResourceBundle/RBTestFmwk.java
test/jdk/java/util/ResourceBundle/ResourceBundleTest.java
test/jdk/java/util/ResourceBundle/TestBug4179766.java
test/jdk/java/util/ResourceBundle/TestResource.java
test/jdk/java/util/ResourceBundle/TestResource_de.java
test/jdk/java/util/ResourceBundle/TestResource_fr.java
test/jdk/java/util/ResourceBundle/TestResource_fr_CH.java
test/jdk/java/util/ResourceBundle/TestResource_it.java
test/jdk/sun/text/IntHashtable/patch-src/java/text/Bug4170614Test.java
test/jdk/sun/text/resources/LocaleDataTest.java 
```",,,,,,,,,,JDK-8301585,JDK-8299268,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wzrf:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-05-05 09:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8558
Date: 2022-05-05 16:13:59 +0000;;;","2022-05-06 09:12;dukebot;Changeset: 1277f5d8
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-05-06 16:10:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1277f5d84e9c2863595396a471a61d83f8a0298c
;;;","2023-01-30 09:28;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport. SAP nightly testing passed.;;;","2023-01-30 09:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1123
Date: 2023-01-30 17:30:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove redundant casts and other cleanup,JDK-8286153,5074168,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-05-04 14:49,2022-05-11 23:12,2023-10-01 09:56,2022-05-05 17:18,18,,,,,,,,,,,19,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,"IDE removes a number of redundant casts that can be eliminated.

There are additional warnings in the affected files that are worth consideration.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wzqz:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-05-04 17:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8543
Date: 2022-05-05 00:18:56 +0000;;;","2022-05-05 17:18;dukebot;Changeset: 9425ab2b
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-05-06 00:16:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9425ab2b43b649bd591706bfc820e9c8795a6fdf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"C2: ""bad AD file"" with PopulateIndex on x86_64",JDK-8286125,5074135,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pli,roland,roland,2022-05-04 06:58,2022-05-17 00:29,2023-10-01 09:56,2022-05-10 06:39,19,,,,,,,,,,,19,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,,"I see the following crash:

Default case invoked for:
   opcode  = 274, ""PopulateIndex""
o3504  PopulateIndex  === _ o3305 o180  [[o3505 o3509 o3513  354 ]]  #vectorx[4]:{int}

--N: o3504  PopulateIndex  === _ o3305 o180  [[o3505 o3509 o3513  354 ]]  #vectorx[4]:{int}

   --N: o3305  Phi  === o3301 o3813 o2894  [[o3234 o3238 o3242 o3246 o3300 o3288 o3504 o3121 o2894  248 ]]  #int:>=24:www #tripcount
   RREGI  0  RREGI
   RAX_REGI  0  RAX_REGI
   RBX_REGI  0  RBX_REGI
   RCX_REGI  0  RCX_REGI
   RDX_REGI  0  RDX_REGI
   RDI_REGI  0  RDI_REGI
   NO_RAX_RDX_REGI  0  NO_RAX_RDX_REGI
   NO_RBP_R13_REGI  0  NO_RBP_R13_REGI
   STACKSLOTI  100  storeSSI

   --N: o180  ConI  === o0  [[o3779 o1522 o3785 o3360 o2905 o2905 o2166 o1900 o3843 o3856 o2836 o1707 o3504 o1844 o3775 o3827 o2479 o3781 o3777 o2807 o1472 o1652 o3783  217  217 ]]  #int:1
   IMMI  10  IMMI
   IMMI_1  0  IMMI_1
   IMMI2  0  IMMI2
   IMMU7  5  IMMU7
   IMMI8  5  IMMI8
   IMMU8  5  IMMU8
   IMMI16  10  IMMI16
   IMMU31  0  IMMU31
   IMMI_POW2M1  20  IMMI_POW2M1
   RREGI  100  loadConI
   RAX_REGI  100  loadConI
   RBX_REGI  100  loadConI
   RCX_REGI  100  loadConI
   RDX_REGI  100  loadConI
   RDI_REGI  100  loadConI
   NO_RAX_RDX_REGI  100  loadConI
   NO_RBP_R13_REGI  100  loadConI
   STACKSLOTI  200  storeSSI

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/matcher.cpp:1716
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/roland/jdk-jdk/src/hotspot/share/opto/matcher.cpp:1716), pid=142402, tid=142421
#  assert(false) failed: bad AD file
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc.roland.jdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc.roland.jdk-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x14f9a8a]  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0x50a
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /mnt/old/roland/tmp/tmp/core.142402)
#
# An error report file with more information is saved as:
# /mnt/old/roland/tmp/tmp/hs_err_pid142402.log

With the attached test case ran this way:
$ javac Test.java FuzzerUtils.java
$ java Test",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280510,,,,,,,,"2022-05-04 06:57;roland;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/98799/FuzzerUtils.java","2022-05-04 06:57;roland;Test.java;https://bugs.openjdk.org/secure/attachment/98800/Test.java","2022-05-04 07:37;roland;hs_err_pid243453.log;https://bugs.openjdk.org/secure/attachment/98802/hs_err_pid243453.log",,,,,,,,,,,,,,,,,,,,,,,,"0|i2wzjn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-04 07:19;thartmann;Looks like a regression from JDK-8280510.;;;","2022-05-04 07:20;thartmann;[~pli] please have a look.;;;","2022-05-04 07:24;rcastanedalo;Hi [~roland], I cannot reproduce this on JDK 19 (commit 4434c7df) using my local machine. Could you specify the platform details (processor flags) and build details (JDK 19 build number or git hash) where you are observing this failure? ;;;","2022-05-04 07:37;roland;I reproduce it with:

commit 29c2e54cf6fe472bd75a75fedf4ecf66e204647a (HEAD -> master, origin/master, origin/HEAD)
Author: Coleen Phillimore <coleenp@openjdk.org>
Date:   Wed May 4 12:51:20 2022 +0000

    8286092: Remove dead windows stack code
    
    Reviewed-by: iklam, dholmes

Let me attach the hs_err for system details.;;;","2022-05-04 15:07;dlong;ILW = assert in compiler; seen only with fuzzer test; no workaround = MMH = P3;;;","2022-05-04 22:25;pli;Hi [~roland],

Thanks for reporting this. But I haven't reproduced it on x86 with that commit either.

This assertion failure looks a bit weird because PopulateIndexNode is not supported on x86 and I have disabled that opt in my previous patch with a check. (https://github.com/openjdk/jdk/commit/ea83b4455ba87b1820f7ab3a1d084c61f470f4e3#diff-692826251cae892bc4737919579c6afbd317551cd507f99c7bd29d585c1282e2R398);;;","2022-05-04 23:00;pli;This is reproducible by below case with reduced vector size. Cause is that PopulateIndexNode is incorrectly created when vector operand is a replication of loop induction variable.

// java -XX:MaxVectorSize=16 -Xbatch Test
public class Test {

    public static long[] arr = new long[400];

    public static void bar() {
        for (int i = 304; i > 15; i -= 3) {
            int c = 16;
            do {
                for (int t = 1; t < 1; t++) {}
                arr[c + 1] >>= i;
            } while (--c > 0);
        }
    }

    public static void main(String[] args) {
        int iter = 100000;
        while (iter-- > 0) {
            bar();
        }
    }
}
;;;","2022-05-07 06:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8587
Date: 2022-05-07 13:23:54 +0000;;;","2022-05-10 06:39;dukebot;Changeset: 1ca54046
Author:    Pengfei Li <pli@openjdk.org>
Date:      2022-05-10 13:37:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1ca540460cb3ca9de92ba6d9dd417526e333f91e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos]: App bundle cannot upload to Mac App Store due to info.plist embedded in java exe,JDK-8286122,5073274,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,almatvee,webbuggrp,webbuggrp,2022-04-21 23:18,2022-07-21 03:51,2023-10-01 09:56,2022-05-18 13:25,17,,,,,,,,,,,19,tools,,0,dcsad,jdk17u-fix-request,jdk17u-fix-yes,macos,reproducer-no,sn_117,sn_118,webbug,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
I am attempting to upload an update of our app to the Mac App Store.

Our app is a Java Swing app and I am using OpenJDK 17 and the jpackage tool to generate an app bundle for upload.
https://docs.oracle.com/en/java/javase/17/docs/specs/man/jpackage.html
NOTE: I have also tried JDK 18. I have not tried earlier versions of the JDK as they do not include all app store options in the jpackage tool.

The pkg file produced by jpackage passes verification using the Transporter app (with one warning: ITMS-90889), however when I deliver the pkg using Transporter I receive the following error email:

Dear Developer,
We identified one or more issues with a recent delivery for your app, ""APP_NAME"" APP_VERSION. Please correct the following issues, then upload again.
ITMS-90511: CFBundleIdentifier Collision - The Info.plist CFBundleIdentifier value 'net.java.openjdk.java' of 'java' is already in use by another application.
...


I have done much searching on the internet to try and fix this issue.

I've determined that the issue is being caused by the bundled java executable - it contains its own Info.plist with the CFBundleIdentifier 'net.java.openjdk.java' and this has been uploaded by someone else previously.
Apple do not allow the same bundle identifier that someone else has previously used.

Some articles indicate this can be fixed by using codesign --removesignature and re-signing the executable with my own Mac developer certificate and entitlements file.
The jpackage process appears to be doing this:
[15:37:04.534] Command [PID: 47885]:
    /usr/bin/codesign --remove-signature /path/to/APP_NAME.app/Contents/runtime/Contents/Home/bin/java
[15:37:04.534] Returned: 0
[15:37:05.063] Command [PID: 47886]:
    /usr/bin/codesign --timestamp --options runtime -s 3rd Party Mac Developer Application: CERTIFICATE_NAME --prefix UNIQUE_PREFIX -vvvv --entitlements /path/to/APP_NAME.entitlements /path/to/APP_NAME.app/Contents/runtime/Contents/Home/bin/java
[15:37:05.064] Output:
    /path/to/APP_NAME.app/Contents/runtime/Contents/Home/bin/java: signed Mach-O thin (x86_64) [net.java.openjdk.java]
[15:37:05.064] Returned: 0

Other articles, some quite old, suggest editing the java executable with a hex editor and replacing 'net.java.openjdk.java' with a unique value of the same length.
I tried this and it resulted in the java executable no longer functioning:
Killed: 9


I raised this issue with Apple Developer technical support and they investigated the issue and sent a reply which I have included below.

Any help you could provide with this issue would be greatly appreciated.




Email reply from DTS tech support:

Looking at your app I was able to get to the bottom of this issue. Consider the error message in your original email:

ITMS-90511: CFBundleIdentifier Collision - The Info.plist
CFBundleIdentifier value 'net.java.openjdk.java' of 'java' is already in use by another application.

I’ve dealt with this message before, and it has a long and interesting history. The Mac App Store prevents two developers from submitting executables with the same bundle identifier. This is an important security check: We don’t want app A impersonating app B.

This check applies to all executables, not just the app’s main executable. Historically the Mac App Store ingestion process had bugs that caused it to apply to other types of code, like frameworks and bundles. When I first saw this incident I was worried that these bugs had come back.

However, that’s not the case. Let’s look at the main executables in your app:

% find APP_NAME.app -type f -print0 | xargs -0 file | grep ""Mach-O.*executable""
APP_NAME.app/Contents/MacOS/APP_NAME: Mach-O 64-bit executable x86_64
APP_NAME.app/Contents/runtime/Contents/Home/bin/java: Mach-O 64-bit executable x86_64
APP_NAME.app/Contents/runtime/Contents/Home/bin/keytool: Mach-O 64-bit executable x86_64
APP_NAME.app/Contents/runtime/Contents/Home/lib/jspawnhelper: Mach-O 64-bit executable x86_64

Based on the error message it’s obvious we need to focus on the `java` executable. However, it’s placed in a location that doesn’t have a corresponding `Info.plist` file:

% find APP_NAME.app -name ""Info.plist""
APP_NAME.app/Contents/Info.plist
APP_NAME.app/Contents/runtime/Contents/Info.plist

The first file here applies to your entire app and the second file applies to the Java runtime package as a whole. Moreover, neither of these have a bundle ID that matches the error message:

% plutil -extract CFBundleIdentifier raw -o - ""APP_NAME.app/Contents/Info.plist""
UNIQUE.BUNDLE.ID
% plutil -extract CFBundleIdentifier raw -o - ""APP_NAME.app/Contents/runtime/Contents/Info.plist""
com.oracle.java.com.UNIQUE.BUNDLE.ID

So where is this bundle ID coming from?

* * *

Some further spelunking reveals the issue. Consider this:

% otool -s __TEXT __info_plist -v APP_NAME.app/Contents/runtime/Contents/Home/bin/java
…
<dict>
<key>CFBundleIdentifier</key>
<string>net.java.openjdk.java</string>
…
</dict>
</plist>

This is an obscure corner case in the macOS bundle story: A standalone tool, like `java`, which isn’t in a bundle structure, and thus can’t have a standalone `Info.plist` file, can put its information property list in a `__TEXT` / `__info_plist` section within its executable. And it seems that the folks who created your Java runtime did just that.

Given that, the Mac App Store error is valid: You are trying to submit an executable whose bundle ID matches some existing app.

To get around this check you’ll need to give `java` a new bundle ID. That’s not easy to do. This `__TEXT` / `__info_plist` section is set up by a linker option (see `-sectcreate` in <x-man-page://1/ld>) and there’s no good way to modify it after the fact [1].

At this point my advice is that you escalate this with your Java runtime vendor. I suspect that they’ve added this information property list to get around a TCC check — the only other interesting property in there is `NSMicrophoneUsageDescription` — and they probably didn’t notice this Mac App Store submission issue. There’s a couple of ways they could resolve this [2] but it’s really their issue to resolve.

If they need help with this they should absolutely open their own DTS tech support incident; I’d be happy to help them in that context.

<https://developer.apple.com/support/technical/>

Share and Enjoy
--
Quinn “The Eskimo!”
Apple Developer Relations, Developer Technical Support, Core OS/Hardware
<http://www.apple.com/developer/>

[1] And by “good” I mean “Using a standard tool supplied by Apple.” The Mach-O file format is reasonably well documented and thus you could build a custom tool to do that, but even that’s not easy. There are a couple of problems:

* The new information property list may be larger than the previous one.

* The `__info_plist` section can appear anywhere in the `__TEXT` segment.

If you increase the size of the section then subsequent sections need to move up to accommodate it and, depending on which sections you have to move, that might require other cross-section links to be fixed up. Yergh!

[2] The ones that spring to mind are:

* Package the `java` executable in a standard bundle, replacing `runtime/Contents/Home/bin/java` with a symlink to that.

* Add an `__info_plist` section with a bunch of padding and then build a tool to update the bundle ID in that section, taking advantage of that padding to avoid the need to move subsequent sections in the `__TEXT` segment.


STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Build a simple java swing application on Mac OSX using the jpackage tool.

Upload to the Mac App Store.

Receive the ITMS-90511 CFBundleIdentifier Collision error via email.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Mac App Store accepts the uploaded application without any CFBundleIdentifier Collision errors.
ACTUAL -
e identified one or more issues with a recent delivery for your app, ""APP_NAME"" APP_VERSION. Please correct the following issues, then upload again.
ITMS-90511: CFBundleIdentifier Collision - The Info.plist CFBundleIdentifier value 'net.java.openjdk.java' of 'java' is already in use by another application.


FREQUENCY : always


",,,,,,,,,,JDK-8289981,JDK-8290802,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286850,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,,"0|i2wu8b:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-05-11 14:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8666
Date: 2022-05-11 21:31:44 +0000;;;","2022-05-18 13:25;dukebot;Changeset: b523c884
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-05-18 20:21:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b523c88480ba5c8f9d78537c9de0abcbf1f867c0
;;;","2022-07-20 00:01;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
We should backport so Java apps can be delivered on apple.
I include a localization file for ""de"" for jpackage as this change
touches that file missing in 17.
I had to resolve copyrights.
SAP nightly testing passed.;;;","2022-07-20 00:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/565
Date: 2022-07-20 06:57:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: G1RemSetArrayOfCardsEntriesBase off-by-one error,JDK-8286115,5074123,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ayang,ayang,ayang,2022-05-04 01:02,2022-08-19 02:17,2023-10-01 09:56,2022-05-05 05:36,19,,,,,,,,,,,19,hotspot,,0,gc-g1,,,,,,,,,,,,,,,,,,,,"`G1RemSetArrayOfCardsEntriesBase` controls the max number of array entries based on the region size. For example, `G1RemSetArrayOfCardsEntries` should be `128 (32 * 4)` when region size == 32M.

However, `java -XX:+UnlockExperimentalVMOptions -XX:G1HeapRegionSize=32M -XX:+PrintFlagsFinal --version | grep -i -e regionsize -e G1RemSetArrayOfCardsEntries` prints:

```
   size_t G1HeapRegionSize                         = 33554432                                  {product} {command line}
     uint G1RemSetArrayOfCardsEntries              = 256                                  {experimental} {ergonomic}
```


The bug is in `G1Arguments::initialize_card_set_configuration`:

```
  G1RemSetArrayOfCardsEntriesBase * (1u << (region_size_log_mb + 1))
```

should be

```
  G1RemSetArrayOfCardsEntriesBase << region_size_log_mb
```

The `+ 1` is incorrect and should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292654,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wzgz:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-04 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8531
Date: 2022-05-04 10:29:53 +0000;;;","2022-05-05 05:36;dukebot;Changeset: fd41e65f
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2022-05-05 12:31:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fd41e65fa8389d21faac520f7035ead0a5439364
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[test] show real exception in bomb call in sun/rmi/runtime/Log/checkLogging/CheckLogging.java,JDK-8286114,5074122,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-05-04 00:45,2022-09-12 08:08,2023-10-01 09:56,2022-05-04 07:34,11,17,19,,,,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,"There is one TestLibrary.bomb call in sun/rmi/runtime/Log/checkLogging/CheckLogging.java that is not passing the exception to bomb, that should be improved.",,,,,,,,,,JDK-8293026,JDK-8293027,JDK-8287928,JDK-8288179,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wzgr:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50807e59,,,,,,,,,"2022-05-04 04:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8533
Date: 2022-05-04 11:37:09 +0000;;;","2022-05-04 07:34;dukebot;Changeset: 7424f475
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-05-04 14:30:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7424f47557be54c781f64f1c0c9265e11fe40acf
;;;","2022-06-03 07:42;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well, because the small test enhancement would be helpful there too. The patch applies cleanly and is low risk.;;;","2022-06-03 07:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/429
Date: 2022-06-03 14:41:10 +0000;;;","2022-06-06 23:59;mbaesken;jdk11 backport request
I would like to have the patch in jdk11 as well, because the small test enhancement would be helpful there too. The patch applies cleanly and is low risk.;;;","2022-06-06 23:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1124
Date: 2022-06-07 06:52:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SourceRevision.gmk should respect GIT variable,JDK-8286105,5074111,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysuenaga,ysuenaga,ysuenaga,2022-05-03 20:03,2022-05-11 23:11,2023-10-01 09:56,2022-05-04 17:32,19,,,,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,"We can specify `git` binary via `GIT` in configure script, but it does not affect in SourceRevision.gmk .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wzeb:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-05-03 20:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8526
Date: 2022-05-04 03:06:44 +0000;;;","2022-05-04 17:32;dukebot;Changeset: d43ae723
Author:    Yasumasa Suenaga <ysuenaga@openjdk.org>
Date:      2022-05-05 00:27:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d43ae723b869e13d30f4ca0cf3d41349bc29bdc7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"VThreadMonitorTest fails ""assert(!current->cont_fastpath() || (current->cont_fastpath_thread_state() && !interpreted_native_or_deoptimized_on_stack(current))) failed""",JDK-8286103,5074109,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rpressler,dcubed,dcubed,2022-05-03 19:32,2022-07-27 03:42,2023-10-01 09:56,2022-06-21 10:04,19,repo-loom,,,,,,,,,,19,hotspot,,0,intermittent,loom,tier7,,,,,,,,,,,,,,,,,,"The following test failed in the jdk-19-loomvt CI:

serviceability/jvmti/vthread/VThreadMonitorTest/VThreadMonitorTest.java

Here's a snippet from the log file:

MonitorContendedEntered: ForkJoinPool-1-worker-1: contended monitor: (nil)
MonitorContendedEntered: GetCurrentContendedMonitor returned expected monitor for ForkJoinPool-1-worker-1
MonitorContendedEntered: GetThreadState returned state for ForkJoinPool-1-worker-1: 5

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/continuationFreezeThaw.cpp:1419
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14583/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/573b9063-f5bd-4d5b-b8d0-ecb9689634ec/runs/a0194c96-56c6-4351-bfa9-3ab6dd03bf04/workspace/open/src/hotspot/share/runtime/continuationFreezeThaw.cpp:1419), pid=1926, tid=2275
#  Error: assert(!current->cont_fastpath() || (current->cont_fastpath_thread_state() && !interpreted_native_or_deoptimized_on_stack(current))) failed
#
# JRE version: Java(TM) SE Runtime Environment (19.0+1) (fastdebug build 19-loomvt+1-50)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-loomvt+1-50, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xb4f7d4]  int freeze_internal<Config<(oop_kind)0, G1BarrierSet> >(JavaThread*, long*)+0x734
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S40722/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0d33a799-a731-430f-a784-3d8ec8503df6/runs/6588dd07-9533-4dd2-a73a-a5111cc1b2e7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/5/core.1926)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S40722/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0d33a799-a731-430f-a784-3d8ec8503df6/runs/6588dd07-9533-4dd2-a73a-a5111cc1b2e7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_serviceability/scratch/5/hs_err_pid1926.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(46/6737)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f8bd4000ed0):  JavaThread ""ForkJoinPool-1-worker-6"" daemon [_thread_in_Java, id=2275, stack(0x00007f8c55afb000,0x00007f8c55bfc000)]

Stack: [0x00007f8c55afb000,0x00007f8c55bfc000],  sp=0x00007f8c55bfa330,  free space=1020k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xb4f7d4]  int freeze_internal<Config<(oop_kind)0, G1BarrierSet> >(JavaThread*, long*)+0x734
V  [libjvm.so+0xb4f8e2]  int freeze<Config<(oop_kind)0, G1BarrierSet> >(JavaThread*, long*)+0xf2
v  ~RuntimeStub::cont_doYield 0x00007f8c69046575
J 3162 c2 jdk.internal.vm.Continuation.yield0(Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Z java.base@19-loomvt (359 bytes) @ 0x00007f8c697719f8 [0x00007f8c69771900+0x00000000000000f8]
J 3161 c2 jdk.internal.vm.Continuation.yield(Ljdk/internal/vm/ContinuationScope;)Z java.base@19-loomvt (73 bytes) @ 0x00007f8c6977937c [0x00007f8c69779280+0x00000000000000fc]
J 3160 c2 java.lang.VirtualThread.yieldContinuation()Z java.base@19-loomvt (55 bytes) @ 0x00007f8c6976f9b4 [0x00007f8c6976f920+0x0000000000000094]
J 3062 c2 java.lang.VirtualThread.doParkNanos(J)V java.base@19-loomvt (193 bytes) @ 0x00007f8c6974e1b0 [0x00007f8c6974e0c0+0x00000000000000f0]
J 3057 c2 java.lang.VirtualThread.doSleepNanos(J)V java.base@19-loomvt (111 bytes) @ 0x00007f8c69749e6c [0x00007f8c69749d40+0x000000000000012c]
J 3055 c2 java.lang.VirtualThread.sleepNanos(J)V java.base@19-loomvt (80 bytes) @ 0x00007f8c697473a4 [0x00007f8c69747340+0x0000000000000064]
J 3054 c2 java.lang.Thread.sleep(J)V java.base@19-loomvt (103 bytes) @ 0x00007f8c69747b5c [0x00007f8c69747ae0+0x000000000000007c]
J 3053% c2 VThreadMonitorTest.lambda$static$1()V (51 bytes) @ 0x00007f8c697480fc [0x00007f8c69748040+0x00000000000000bc]
J 3052 c2 VThreadMonitorTest$$Lambda$2+0x0000000801001b28.run()V (4 bytes) @ 0x00007f8c6974778c [0x00007f8c69747740+0x000000000000004c]
J 3018  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@19-loomvt (0 bytes) @ 0x00007f8c6973aa59 [0x00007f8c6973a9c0+0x0000000000000099]
J 3009 c2 jdk.internal.vm.Continuation.run()V java.base@19-loomvt (586 bytes) @ 0x00007f8c6974f978 [0x00007f8c6974f400+0x0000000000000578]
J 2868 c2 java.lang.VirtualThread.runContinuation()V java.base@19-loomvt (135 bytes) @ 0x00007f8c696ed734 [0x00007f8c696ed600+0x0000000000000134]
J 3007 c2 java.lang.VirtualThread$$Lambda$9+0x000000080104e828.run()V java.base@19-loomvt (8 bytes) @ 0x00007f8c6973a418 [0x00007f8c6973a3c0+0x0000000000000058]
J 3005 c2 java.util.concurrent.ForkJoinTask.doExec()I java.base@19-loomvt (37 bytes) @ 0x00007f8c69738ff4 [0x00007f8c69738f60+0x0000000000000094]
J 3003 c2 java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V java.base@19-loomvt (83 bytes) @ 0x00007f8c6973b4fc [0x00007f8c6973b460+0x000000000000009c]
J 2995 c2 java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I java.base@19-loomvt (250 bytes) @ 0x00007f8c6971ed4c [0x00007f8c6971eac0+0x000000000000028c]
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@19-loomvt
J 2986 c2 java.util.concurrent.ForkJoinWorkerThread.run()V java.base@19-loomvt (180 bytes) @ 0x00007f8c69729d74 [0x00007f8c69729ce0+0x0000000000000094]
v  ~StubRoutines::call_stub 0x00007f8c6902cd47
V  [libjvm.so+0xfd0d94]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.so+0xfd1644]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x4b4
V  [libjvm.so+0xfd1ab7]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x77
V  [libjvm.so+0x114d64b]  thread_entry(JavaThread*, JavaThread*)+0x12b
V  [libjvm.so+0x1a5528a]  JavaThread::thread_main_inner()+0x21a
V  [libjvm.so+0x1a62b60]  Thread::call_run()+0x100
V  [libjvm.so+0x170bae4]  thread_native_entry(Thread*)+0x104

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~RuntimeStub::cont_doYield 0x00007f8c69046527
J 3162 c2 jdk.internal.vm.Continuation.yield0(Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Z java.base@19-loomvt (359 bytes) @ 0x00007f8c697719f8 [0x00007f8c69771900+0x00000000000000f8]
J 3161 c2 jdk.internal.vm.Continuation.yield(Ljdk/internal/vm/ContinuationScope;)Z java.base@19-loomvt (73 bytes) @ 0x00007f8c6977937c [0x00007f8c69779280+0x00000000000000fc]
J 3160 c2 java.lang.VirtualThread.yieldContinuation()Z java.base@19-loomvt (55 bytes) @ 0x00007f8c6976f9b4 [0x00007f8c6976f920+0x0000000000000094]
J 3062 c2 java.lang.VirtualThread.doParkNanos(J)V java.base@19-loomvt (193 bytes) @ 0x00007f8c6974e1b0 [0x00007f8c6974e0c0+0x00000000000000f0]
J 3057 c2 java.lang.VirtualThread.doSleepNanos(J)V java.base@19-loomvt (111 bytes) @ 0x00007f8c69749e6c [0x00007f8c69749d40+0x000000000000012c]
J 3055 c2 java.lang.VirtualThread.sleepNanos(J)V java.base@19-loomvt (80 bytes) @ 0x00007f8c697473a4 [0x00007f8c69747340+0x0000000000000064]
J 3054 c2 java.lang.Thread.sleep(J)V java.base@19-loomvt (103 bytes) @ 0x00007f8c69747b5c [0x00007f8c69747ae0+0x000000000000007c]
J 3053% c2 VThreadMonitorTest.lambda$static$1()V (51 bytes) @ 0x00007f8c697480fc [0x00007f8c69748040+0x00000000000000bc]
J 3052 c2 VThreadMonitorTest$$Lambda$2+0x0000000801001b28.run()V (4 bytes) @ 0x00007f8c6974778c [0x00007f8c69747740+0x000000000000004c]
J 3018  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@19-loomvt (0 bytes) @ 0x00007f8c6973aa59 [0x00007f8c6973a9c0+0x0000000000000099]
J 3009 c2 jdk.internal.vm.Continuation.run()V java.base@19-loomvt (586 bytes) @ 0x00007f8c6974f978 [0x00007f8c6974f400+0x0000000000000578]
J 2868 c2 java.lang.VirtualThread.runContinuation()V java.base@19-loomvt (135 bytes) @ 0x00007f8c696ed734 [0x00007f8c696ed600+0x0000000000000134]
J 3007 c2 java.lang.VirtualThread$$Lambda$9+0x000000080104e828.run()V java.base@19-loomvt (8 bytes) @ 0x00007f8c6973a418 [0x00007f8c6973a3c0+0x0000000000000058]
J 3005 c2 java.util.concurrent.ForkJoinTask.doExec()I java.base@19-loomvt (37 bytes) @ 0x00007f8c69738ff4 [0x00007f8c69738f60+0x0000000000000094]
J 3003 c2 java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V java.base@19-loomvt (83 bytes) @ 0x00007f8c6973b4fc [0x00007f8c6973b460+0x000000000000009c]
J 2995 c2 java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I java.base@19-loomvt (250 bytes) @ 0x00007f8c6971ed4c [0x00007f8c6971eac0+0x000000000000028c]
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@19-loomvt
J 2986 c2 java.util.concurrent.ForkJoinWorkerThread.run()V java.base@19-loomvt (180 bytes) @ 0x00007f8c69729d74 [0x00007f8c69729ce0+0x0000000000000094]
v  ~StubRoutines::call_stub 0x00007f8c6902cd47",,,,,,,,,,JDK-8291129,JDK-8291280,JDK-8288921,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i2wzdv:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-06-15 12:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19/pull/18
Date: 2022-06-15 11:00:14 +0000;;;","2022-06-21 10:04;dukebot;Changeset: 198cec9e
Author:    Ron Pressler <rpressler@openjdk.org>
Committer: Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2022-06-21 16:58:55 +0000
URL:       https://git.openjdk.org/jdk19/commit/198cec9e1b7e8f77a619335dbc569c8def21670c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/awt/geom/Path2D/UnitTest.java failed with ""RuntimeException: 2D bounds too small""",JDK-8286093,5074094,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,dcubed,dcubed,2022-05-03 15:00,2022-06-02 16:57,2023-10-01 09:56,2022-05-29 23:07,19,,,,,,,,,,,19,client-libs,,0,intermittent,sn_119,tier3,,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

java/awt/geom/Path2D/UnitTest.java

Here's a snippet from the log file:

#section:main
----------messages:(5/190)----------
command: main UnitTest
reason: Assumed action based on file name: run main UnitTest 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 0.401
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(12/651)----------
test bounds = java.awt.geom.Rectangle2D$Double[x=11.303064346313477,y=11.447156402089732,w=97.89670983262936,h=97.78632595875011]
ref bounds = java.awt.geom.Rectangle2D$Double[x=11.303064405207321,y=11.443248359033289,w=97.8967067718771,h=97.79023384862587]
xmin: 11.303064346313477 + 0 = 11.303064405207321 + 0
ymin: 11.447156402089732 + 0 = 11.443248359033289 + 4097
xmax: 109.19977417894283 + 0 = 109.19977117708443 + 1
ymax: 109.23348236083984 + 0 = 109.23348220765916 + 0
flt tbounds = [11.303064, 11.447156, 109.199776, 109.23348]
flt rbounds = [11.303064, 11.443249, 109.19977, 109.23348]
xmin ulp = 0
ymin ulp = 4097
xmax ulp = 0
ymax ulp = 0
----------System.err:(16/818)----------
java.lang.RuntimeException: 2D bounds too small
	at UnitTest.checkBounds(UnitTest.java:997)
	at UnitTest.checkBounds(UnitTest.java:926)
	at UnitTest.testBounds(UnitTest.java:1313)
	at UnitTest.testBounds(UnitTest.java:1306)
	at UnitTest.test(UnitTest.java:1175)
	at UnitTest.main(UnitTest.java:1435)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 2D bounds too small
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 2D bounds too small
----------rerun:(36/5455)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,,os_x,windows,,,,,"0|i2wzaj:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-05-14 10:57;prr;Also seen on windows x64

test bounds = java.awt.geom.Rectangle2D$Double[x=12.099005699157715,y=12.639154434204102,w=97.73677921295166,h=96.31467247009277]
ref bounds = java.awt.geom.Rectangle2D$Double[x=12.099005584769975,y=12.639154222173099,w=97.7367788715209,h=96.31489389440178]
xmin: 12.099005699157715 + 0 = 12.099005584769975 + 0
ymin: 12.639154434204102 + 0 = 12.639154222173099 + 0
xmax: 109.83578491210938 + 0 = 109.83578445629087 + 0
ymax: 108.95382690429688 + 29 = 108.95404811657488 + 0
flt tbounds = [12.099006, 12.639154, 109.835785, 108.95383]
flt rbounds = [12.099006, 12.639154, 109.835785, 108.95405]
xmin ulp = 0
ymin ulp = 0
xmax ulp = 0
ymax ulp = 29
System.err
java.lang.RuntimeException: 2D bounds too small
	at UnitTest.checkBounds(UnitTest.java:997)
	at UnitTest.checkBounds(UnitTest.java:926)
	at UnitTest.testBounds(UnitTest.java:1313)
	at UnitTest.testBounds(UnitTest.java:1306)
	at UnitTest.test(UnitTest.java:1175)
	at UnitTest.main(UnitTest.java:1435)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1585)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 2D bounds too small
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 2D bounds too small;;;","2022-05-16 15:57;prr;The test uses Math.random() and on my mac it failed about once in every 200+ hundred runs - by these kind of small margins.
here's the log of that where I print the run count every hundred runs
100
200
300
test bounds = java.awt.geom.Rectangle2D$Double[x=11.158415794372559,y=11.28923511505127,w=96.58329105377197,h=94.42583751678467]
ref bounds = java.awt.geom.Rectangle2D$Double[x=11.15841533511017,y=11.289237596062287,w=96.58329185745498,h=94.56926689919084]
xmin: 11.158415794372559 + 0 = 11.15841533511017 + 0
ymin: 11.28923511505127 + 3 = 11.289237596062287 + 0
xmax: 107.74170684814453 + 0 = 107.74170719256514 + 0
ymax: 105.71507263183594 + 18800 = 105.85850449525313 + 0
flt tbounds = [11.158416, 11.289235, 107.74171, 105.71507]
flt rbounds = [11.158416, 11.289238, 107.74171, 105.858505]
xmin ulp = 0
ymin ulp = 0
xmax ulp = 0
ymax ulp = 18800
Exception in thread ""main"" java.lang.RuntimeException: 2D bounds too small
	at UnitTest.checkBounds(UnitTest.java:997)
	at UnitTest.checkBounds(UnitTest.java:926)
	at UnitTest.testBounds(UnitTest.java:1313)
	at UnitTest.testBounds(UnitTest.java:1306)
	at UnitTest.test(UnitTest.java:1175)
	at UnitTest.main(UnitTest.java:1435)
test bounds = java.awt.geom.Rectangle2D$Double[x=10.576547622680664,y=13.654943466186523,w=97.67728233337402,h=95.85267066955566]
ref bounds = java.awt.geom.Rectangle2D$Double[x=10.576547224356238,y=13.805044396170835,w=97.67728188235533,h=95.70344506480782]
xmin: 10.576547622680664 + 0 = 10.576547224356238 + 0
ymin: 13.654943466186523 + 157392 = 13.805044396170835 + 0
xmax: 108.25382995605469 + 0 = 108.25382910671156 + 0
ymax: 109.50761413574219 + 115 = 109.50848946097867 + 0
flt tbounds = [10.576548, 13.654943, 108.25383, 109.507614]
flt rbounds = [10.576548, 13.805044, 108.25383, 109.50849]
xmin ulp = 0
ymin ulp = 0
xmax ulp = 0
ymax ulp = 115
Exception in thread ""main"" java.lang.RuntimeException: 2D bounds too small
	at UnitTest.checkBounds(UnitTest.java:997)
	at UnitTest.checkBounds(UnitTest.java:926)
	at UnitTest.testBounds(UnitTest.java:1313)
	at UnitTest.testBounds(UnitTest.java:1306)
	at UnitTest.test(UnitTest.java:1175)
	at UnitTest.main(UnitTest.java:1435)
400
500
600
test bounds = java.awt.geom.Rectangle2D$Double[x=10.571367263793945,y=10.467348098754883,w=98.15530967712402,h=98.72718620300293]
ref bounds = java.awt.geom.Rectangle2D$Double[x=10.571367203099307,y=10.46734780189644,w=98.18780669217327,h=98.72718741065276]
xmin: 10.571367263793945 + 0 = 10.571367203099307 + 0
ymin: 10.467348098754883 + 0 = 10.46734780189644 + 0
xmax: 108.72667694091797 + 4259 = 108.75917389527257 + 0
ymax: 109.19453430175781 + 0 = 109.1945352125492 + 0
flt tbounds = [10.571367, 10.467348, 108.72668, 109.194534]
flt rbounds = [10.571367, 10.467348, 108.75917, 109.194534]
xmin ulp = 0
ymin ulp = 0
xmax ulp = 4259
ymax ulp = 0
Exception in thread ""main"" java.lang.RuntimeException: 2D bounds too small
	at UnitTest.checkBounds(UnitTest.java:997)
	at UnitTest.checkBounds(UnitTest.java:926)
	at UnitTest.testBounds(UnitTest.java:1313)
	at UnitTest.testBounds(UnitTest.java:1306)
	at UnitTest.test(UnitTest.java:1175)
	at UnitTest.main(UnitTest.java:1435)
700
test bounds = java.awt.geom.Rectangle2D$Double[x=13.112784385681152,y=13.422480583190918,w=96.54673862457275,h=95.94292163848877]
ref bounds = java.awt.geom.Rectangle2D$Double[x=13.074781909778505,y=13.422480501321933,w=96.5847413495882,h=95.94292362971656]
xmin: 13.112784385681152 + 0 = 13.074781909778505 + 39848
ymin: 13.422480583190918 + 0 = 13.422480501321933 + 0
xmax: 109.6595230102539 + 0 = 109.65952325936671 + 0
ymax: 109.36540222167969 + 0 = 109.36540413103849 + 0
flt tbounds = [13.112784, 13.422481, 109.65952, 109.3654]
flt rbounds = [13.074782, 13.422481, 109.65952, 109.3654]
xmin ulp = 39848
ymin ulp = 0
xmax ulp = 0
ymax ulp = 0
Exception in thread ""main"" java.lang.RuntimeException: 2D bounds too small
	at UnitTest.checkBounds(UnitTest.java:997)
	at UnitTest.checkBounds(UnitTest.java:926)
	at UnitTest.testBounds(UnitTest.java:1313)
	at UnitTest.testBounds(UnitTest.java:1306)
	at UnitTest.test(UnitTest.java:1175)
	at UnitTest.main(UnitTest.java:1435)
800
900
test bounds = java.awt.geom.Rectangle2D$Double[x=13.476293563842773,y=11.519186973571777,w=96.44590187072754,h=96.6943826675415]
ref bounds = java.awt.geom.Rectangle2D$Double[x=13.438971988356727,y=11.519186876940203,w=94.07277436269963,h=96.69438520920795]
xmin: 13.476293563842773 + 0 = 13.438971988356727 + 39135
ymin: 11.519186973571777 + 0 = 11.519186876940203 + 0
xmax: 109.92219543457031 + 0 = 107.51174635105636 + 315942
ymax: 108.21356964111328 + 0 = 108.21357208614816 + 0
flt tbounds = [13.476294, 11.519187, 109.922195, 108.21357]
flt rbounds = [13.4389715, 11.519187, 107.51175, 108.21357]
xmin ulp = 39135
ymin ulp = 0
xmax ulp = 0
ymax ulp = 0
Exception in thread ""main"" java.lang.RuntimeException: 2D bounds too small
	at UnitTest.checkBounds(UnitTest.java:997)
	at UnitTest.checkBounds(UnitTest.java:926)
	at UnitTest.testBounds(UnitTest.java:1313)
	at UnitTest.testBounds(UnitTest.java:1306)
	at UnitTest.test(UnitTest.java:1175)
	at UnitTest.main(UnitTest.java:1435)
1000
1100
1200
test bounds = java.awt.geom.Rectangle2D$Double[x=13.285070419311523,y=13.278828620910645,w=96.11142921447754,h=94.82786083221436]
ref bounds = java.awt.geom.Rectangle2D$Double[x=13.206916247150883,y=13.278829626796563,w=96.18958045383077,h=94.82785745689554]
xmin: 13.285070419311523 + 0 = 13.206916247150883 + 81951
ymin: 13.278828620910645 + 1 = 13.278829626796563 + 0
xmax: 109.39649963378906 + 0 = 109.39649670098166 + 0
ymax: 108.106689453125 + 0 = 108.10668708369211 + 0
flt tbounds = [13.28507, 13.278829, 109.3965, 108.10669]
flt rbounds = [13.206916, 13.27883, 109.3965, 108.10669]
xmin ulp = 81951
ymin ulp = 0
xmax ulp = 0
ymax ulp = 0
Exception in thread ""main"" java.lang.RuntimeException: 2D bounds too small
	at UnitTest.checkBounds(UnitTest.java:997)
	at UnitTest.checkBounds(UnitTest.java:926)
	at UnitTest.testBounds(UnitTest.java:1313)
	at UnitTest.testBounds(UnitTest.java:1306)
	at UnitTest.test(UnitTest.java:1175)
	at UnitTest.main(UnitTest.java:1435)
1300
1400
test bounds = java.awt.geom.Rectangle2D$Double[x=10.401887893676758,y=10.135292053222656,w=93.6849422454834,h=97.5394515991211]
ref bounds = java.awt.geom.Rectangle2D$Double[x=10.401888353500288,y=10.135291627644209,w=94.01801362932288,h=97.53945164150964]
xmin: 10.401887893676758 + 0 = 10.401888353500288 + 0
ymin: 10.135292053222656 + 0 = 10.135291627644209 + 0
xmax: 104.08683013916016 + 43656 = 104.41990198282316 + 0
ymax: 107.67474365234375 + 0 = 107.67474326915385 + 0
flt tbounds = [10.401888, 10.135292, 104.08683, 107.67474]
flt rbounds = [10.401888, 10.135292, 104.4199, 107.67474]
xmin ulp = 0
ymin ulp = 0
xmax ulp = 43656
ymax ulp = 0
Exception in thread ""main"" java.lang.RuntimeException: 2D bounds too small
	at UnitTest.checkBounds(UnitTest.java:997)
	at UnitTest.checkBounds(UnitTest.java:926)
	at UnitTest.testBounds(UnitTest.java:1313)
	at UnitTest.testBounds(UnitTest.java:1306)
	at UnitTest.test(UnitTest.java:1175)
	at UnitTest.main(UnitTest.java:1435)
1500
1600
;;;","2022-05-23 11:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8828
Date: 2022-05-22 09:08:03 +0000;;;","2022-05-29 23:07;dukebot;Changeset: 5848a60c
Author:    jeremy <jeremy.wood@mac.com>
Committer: Laurent Bourgès <lbourges@openjdk.org>
Date:      2022-05-30 06:06:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5848a60c01747728cbdde1e9d8a244079fd88c14
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Intermittent WebKit build failure on macOS in JavaScriptCore,JDK-8286089,5074089,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jbhaskar,kcr,kcr,2022-05-03 11:16,2023-04-10 22:32,2023-10-01 09:56,2023-04-04 06:06,8,jfx19,,,,,,,,,,jfx21,javafx,,0,jfx20u-fix-request,jfx20u-fix-yes,noreg-build,sn_124,sn_125,sn_140,sn_141,,,,,,,,,,,,,,"Our CI builds occasionally fail on macOS with the following error:

Error copying file (if different) from ""modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generate_separate_header.py"" to ""modules/javafx.web/build/mac/Release/JavaScriptCore/Scripts/builtins_generate_separate_header.py"".
make[2]: *** [JavaScriptCore/Scripts/builtins_generate_separate_header.py] Error 1
make[2]: *** Deleting file `JavaScriptCore/Scripts/builtins_generate_separate_header.py'
make[1]: *** [Source/JavaScriptCore/CMakeFiles/JSCBuiltins.dir/all] Error 2
make[1]: *** Waiting for unfinished jobs....
...
[ 16%] Linking C static library ../../../lib/libSqliteJava.a
[ 16%] Built target SqliteJava
make: *** [all] Error 2

Originally I had thought this was an error linking libSqliteJava.a, but in digging into a failing build, I see that that library is generated successfully. The error is much earlier in the log, and only after it gets to that point, does the build report the error and abort.
",,,,,,,,,,JDK-8305818,JDK-8305824,JDK-8305823,JDK-8305592,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-03-24 06:04;jbhaskar;macbuildfix.patch;https://bugs.openjdk.org/secure/attachment/103122/macbuildfix.patch",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wz9f:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-05-03 11:20;kcr;We don't get an error message indicating why the link failed, but one thing I spotted is that in the case of the failing builds, not all of the icu libraries have been built.

Here is the output of the build showing the link commands for ICU and SQLite when it works, which is does most of the time:

Linking CXX static library ../../../lib/libicuuc.a
Linking CXX static library ../../../lib/libicui18n.a
Linking C static library ../../../lib/libSqliteJava.a
Linking C static library ../../../lib/libicudata.a

And here is the output when it fails:

Linking CXX static library ../../../lib/libicuuc.a
Linking C static library ../../../lib/libSqliteJava.a

Note that libicui18n.a has not been built yet. The working theory is that this is likely a dependency bug in the build logic. I believe that libSqliteJava.a depends on libicui18n.a, so the link is failing when the latter isn't available at the time the former is linked.
;;;","2022-05-11 15:44;kcr;I'm running into this more frequently now. Raising the priority to P2.;;;","2022-05-12 12:46;kcr;As noted in the updated description, the problem is not in building the SQlite library at all. I doubt it has anything to do with ICU either.

The error occurs when trying to copy ""src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generate_separate_header.py"" to ""build/mac/Release/JavaScriptCore/Scripts/"". I can confirm that when I look into the destination directory, the ""builtins_generate_separate_header.py"" file is missing.;;;","2023-03-24 06:26;kcr;Option A seems fragile (if it helps, it will do so accidentally), and will increase the build time. I am not in favor of this approach.

If Option B proves to be robust, then that might be an OK solution. I recommend using something like 10 rather than 4 as the maximum number of retries.;;;","2023-03-27 19:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1073
Date: 2023-03-28 02:08:27 +0000;;;","2023-04-04 06:06;dukebot;Changeset: 810bd90d
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Date:      2023-04-04 13:04:47 +0000
URL:       https://git.openjdk.org/jfx/commit/810bd90d5089364067549b8ba299300bfd208357
;;;","2023-04-10 08:29;jbhaskar;Fix Request JFX20u:
Needed to keep native WebKit code in sync
Clean backport and low risk.;;;","2023-04-10 08:48;kcr;jfx20u fix request approved.;;;","2023-04-10 11:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx20u/pull/11
Date: 2023-04-10 17:19:15 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
keytool prints out wrong key algorithm for -importpass command,JDK-8286069,5074066,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,weijun,weijun,2022-05-03 09:03,2022-05-04 23:41,2023-10-01 09:56,2022-05-03 20:01,,,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,,"No matter what -keyalg is given, the output always shows PBEWithMD5AndDES. For example:

$ printf ""chanegit\nchangeit\n"" | keytool -keystore ks -storepass changeit -importpass -keyalg PBEWithHmacSHA256Andaes_128 -alias c -v
Generated PBEWithMD5AndDES secret key
[Storing ks]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wz4b:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-05-03 10:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8520
Date: 2022-05-03 17:51:43 +0000;;;","2022-05-03 20:01;dukebot;Changeset: 075ce8a0
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-05-04 02:56:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/075ce8a0d0ab279049c81d5ce23fcee3711925e2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(k != __null) failed: klass not loaded caused by FillerObject_klass,JDK-8286066,5074063,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-05-03 08:47,2022-05-11 23:12,2023-10-01 09:56,2022-05-05 16:21,19,,,,,,,,,,,19,hotspot,,0,cds,tencent-interest,,,,,,,,,,,,,,,,,,,"# Reproduce

java -XX:-UseCompressedClassPointers -XX:TLABSize=2048 -Xshare:dump on Linux/x64, or
java -XX:-UseCompressedClassPointers -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -Xshare:dump on Linux/x64, or
run runtime/cds/appcds/TestEpsilonGCWithCDS.java on Linux/x86_32.

# Symptom

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jdk/src/hotspot/share/classfile/vmClasses.hpp:55), pid=128873, tid=128876
#  assert(k != __null) failed: klass not loaded
#
# JRE version:  (19.0) (fastdebug build )
# Java VM: OpenJDK Server VM (fastdebug 19-internal-adhoc..jdk, interpreted mode, tiered, epsilon gc, linux-x86)
# Problematic frame:
# V  [libjvm.so+0x85f60d]  CollectedHeap::fill_with_dummy_object(HeapWordImpl**, HeapWordImpl**, bool)+0x42d
#

(gdb) bt
#0  0xf66c5506 in vmClasses::check_klass (k=0x0) at /home/jdk/src/hotspot/share/classfile/vmClasses.hpp:55
#1  0xf68de7a7 in vmClasses::FillerObject_klass () at /home/jdk/src/hotspot/share/classfile/vmClasses.hpp:87
#2  0xf695ce9e in CollectedHeap::fill_with_object_impl (start=0xb2e370c8, words=2, zap=true) at /home/jdk/src/hotspot/share/gc/shared/collectedHeap.cpp:470
#3  0xf695b40b in CollectedHeap::fill_with_object (start=0xb2e370c8, words=2, zap=true) at /home/jdk/src/hotspot/share/gc/shared/collectedHeap.cpp:479
#4  0xf695bf4e in CollectedHeap::fill_with_object (start=0xb2e370c8, end=0xb2e370d0, zap=true) at /home/jdk/src/hotspot/share/gc/shared/collectedHeap.hpp:289
#5  0xf695b4fd in CollectedHeap::fill_with_dummy_object (this=0xf602c250, start=0xb2e370c8, end=0xb2e370d0, zap=true)
    at /home/jdk/src/hotspot/share/gc/shared/collectedHeap.cpp:503
#6  0xf71d5866 in ThreadLocalAllocBuffer::insert_filler (this=0xf6017cdc) at /home/jdk/src/hotspot/share/gc/shared/threadLocalAllocBuffer.cpp:122
#7  0xf71d5949 in ThreadLocalAllocBuffer::retire (this=0xf6017cdc, stats=0x0) at /home/jdk/src/hotspot/share/gc/shared/threadLocalAllocBuffer.cpp:145
#8  0xf71d5995 in ThreadLocalAllocBuffer::retire_before_allocation (this=0xf6017cdc) at /home/jdk/src/hotspot/share/gc/shared/threadLocalAllocBuffer.cpp:152
#9  0xf6ed49c0 in MemAllocator::allocate_inside_tlab_slow (this=0xf62255c0, allocation=...) at /home/jdk/src/hotspot/share/gc/shared/memAllocator.cpp:309
#10 0xf6ed48ea in MemAllocator::allocate_inside_tlab (this=0xf62255c0, allocation=...) at /home/jdk/src/hotspot/share/gc/shared/memAllocator.cpp:278
#11 0xf6ed4b47 in MemAllocator::mem_allocate (this=0xf62255c0, allocation=...) at /home/jdk/src/hotspot/share/gc/shared/memAllocator.cpp:350
#12 0xf6ed4b9e in MemAllocator::allocate (this=0xf62255c0) at /home/jdk/src/hotspot/share/gc/shared/memAllocator.cpp:363
#13 0xf6c1b199 in CollectedHeap::class_allocate (this=0xf602c250, klass=0xaa41bca8, size=26, __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/gc/shared/collectedHeap.inline.hpp:46
#14 0xf6c1aead in InstanceMirrorKlass::allocate_instance (this=0xaa41bca8, k=0xaa429d70, __the_thread__=0xf6017c10) at /home/jdk/src/hotspot/share/oops/instanceMirrorKlass.cpp:55
#15 0xf6c396b5 in java_lang_Class::create_mirror (k=0xaa429d70, class_loader=..., module=..., protection_domain=..., classData=..., __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/javaClasses.cpp:1004
#16 0xf690c541 in ClassFileParser::fill_instance_klass (this=0xf62257d4, ik=0xaa429d70, changed_by_loadhook=false, cl_inst_info=..., __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/classFileParser.cpp:5428
#17 0xf690ba43 in ClassFileParser::create_instance_klass (this=0xf62257d4, changed_by_loadhook=false, cl_inst_info=..., __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/classFileParser.cpp:5257
#18 0xf6dd7ca9 in KlassFactory::create_from_stream (stream=0xf60226b8, name=0xaae374d0, loader_data=0xf6032fa0, cl_info=..., __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/klassFactory.cpp:202
#19 0xf691d2c4 in ClassLoader::load_class (name=0xaae374d0, search_append_only=false, __the_thread__=0xf6017c10) at /home/jdk/src/hotspot/share/classfile/classLoader.cpp:1235
#20 0xf7187393 in SystemDictionary::load_instance_class_impl (class_name=0xaae374d0, class_loader=..., __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/systemDictionary.cpp:1289
#21 0xf71876c0 in SystemDictionary::load_instance_class (name_hash=2757074569, name=0xaae374d0, class_loader=..., __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/systemDictionary.cpp:1354
#22 0xf7185c36 in SystemDictionary::resolve_instance_class_or_null (name=0xaae374d0, class_loader=..., protection_domain=..., __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/systemDictionary.cpp:723
#23 0xf7184b42 in SystemDictionary::resolve_instance_class_or_null_helper (class_name=0xaae374d0, class_loader=..., protection_domain=..., __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/systemDictionary.cpp:294
#24 0xf7184a1d in SystemDictionary::resolve_or_null (class_name=0xaae374d0, class_loader=..., protection_domain=..., __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/systemDictionary.cpp:277
#25 0xf7184973 in SystemDictionary::resolve_or_fail (class_name=0xaae374d0, class_loader=..., protection_domain=..., throw_error=true, __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/systemDictionary.cpp:263
#26 0xf67314f1 in SystemDictionary::resolve_or_fail (class_name=0xaae374d0, throw_error=true, __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/systemDictionary.hpp:100
#27 0xf724e3ea in vmClasses::resolve (id=vmClassID::Exception_klass_knum, __the_thread__=0xf6017c10) at /home/jdk/src/hotspot/share/classfile/vmClasses.cpp:99
#28 0xf724e4ed in vmClasses::resolve_until (limit_id=vmClassID::SoftReference_klass_knum, start_id=@0xf6225fa8: vmClassID::Cloneable_klass_knum, __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/vmClasses.cpp:108
#29 0xf724ef3f in vmClasses::resolve_through (last_id=vmClassID::Reference_klass_knum, start_id=@0xf6225fa8: vmClassID::Cloneable_klass_knum, __the_thread__=0xf6017c10)
    at /home/jdk/src/hotspot/share/classfile/vmClasses.hpp:64
#30 0xf724e75e in vmClasses::resolve_all (__the_thread__=0xf6017c10) at /home/jdk/src/hotspot/share/classfile/vmClasses.cpp:168
#31 0xf718845a in SystemDictionary::initialize (__the_thread__=0xf6017c10) at /home/jdk/src/hotspot/share/classfile/systemDictionary.cpp:1655
#32 0xf71f9814 in Universe::genesis (__the_thread__=0xf6017c10) at /home/jdk/src/hotspot/share/memory/universe.cpp:346
#33 0xf71fb851 in universe2_init () at /home/jdk/src/hotspot/share/memory/universe.cpp:966
#34 0xf6c07275 in init_globals () at /home/jdk/src/hotspot/share/runtime/init.cpp:132
#35 0xf71cc844 in Threads::create_vm (args=0xf622626c, canTryAgain=0xf62261d3) at /home/jdk/src/hotspot/share/runtime/thread.cpp:2756
```

The reason is that we load FillerObject_klass too late.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284435,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wz3n:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-03 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8519
Date: 2022-05-03 16:01:56 +0000;;;","2022-05-05 16:21;dukebot;Changeset: 7ebc4bce
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-05-05 23:16:42 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7ebc4bce930e7d406f1e68c8bd09ac1dc3a21e5a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
check compiler queue after calling AbstractCompiler::on_empty_queue,JDK-8286063,5074058,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,dnsimon,dnsimon,2022-05-03 06:57,2022-05-05 00:15,2023-10-01 09:56,2022-05-03 21:58,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,,,,"JDK-8242440 added support for a JIT compiler to be notified when a CompilerThread has an empty compilation queue. It's possible for a specific compiler implementation of AbstractCompiler::on_empty_queue to temporarily release the MethodCompileQueue_lock (e.g. [1]). This means a non-CompilerThread has a chance to enqueue a new compilation task. As such, the CompilerThread should check for this after calling AbstractCompiler::on_empty_queue.

[1] https://github.com/openjdk/jdk/blob/357b1b18c20233f16fba872b79237e9459f5ba43/src/hotspot/share/jvmci/jvmciCompiler.cpp#L174",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242440,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wz2j:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-03 07:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8517
Date: 2022-05-03 14:07:30 +0000;;;","2022-05-03 16:56;dlong;ILW = MMH = P3;;;","2022-05-03 21:58;dukebot;Changeset: 4282fb2b
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-05-04 04:55:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4282fb2b0d0e517d255be7c882c141722e9c9b46
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make javac error on a generic enum friendlier,JDK-8286057,5074051,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abimpoudis,prappo,prappo,2022-05-03 06:07,2022-05-25 23:12,2023-10-01 09:56,2022-05-24 03:32,19,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"Should an attempt to generify enum lead to a friendlier error?

```
$ cat E.java 
public enum E<T> {}

$ javac E.java
E.java:1: error: '{' expected
public enum E<T> {}
             ^
E.java:1: error: <identifier> expected
public enum E<T> {}
                ^
E.java:1: error: reached end of file while parsing
public enum E<T> {}
                   ^
3 errors
```

In comparison, here's how javac reports on an attempt to generify annotation:

```
$ cat A.java
public @interface A<T> {}

$ javac A.java
A.java:1: error: annotation interface A cannot be generic
public @interface A<T> {}
                    ^
1 error
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wz0z:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-05-12 03:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8677
Date: 2022-05-12 10:39:05 +0000;;;","2022-05-24 03:32;dukebot;Changeset: 9473c383
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-05-24 10:31:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9473c383c6c18698c551172eb20e41737025cf44
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use ForceGC for cleaner test cases,JDK-8286045,5074036,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-05-02 19:19,2023-07-27 21:16,2023-10-01 09:56,2022-05-26 11:02,,,,,,,,,,,,19,security-libs,,0,noreg-self,tencent-interest,test-only,ursqe-triaged,,,,,,,,,,,,,,,,,"There is a jtreg test library to help with ensuring the GC runs, `test/lib/jdk/test/lib/util/ForceGC.java`.  And there are also some test case use System.gc() directly for cleaner testing.  It looks like a good idea to replace the test code that runs/checks the GC with `ForceGC.await()`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wyxn:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-05-02 19:21;xuelei;See also: https://github.com/openjdk/jdk/pull/8136#issuecomment-1115436082;;;","2022-05-25 08:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8885
Date: 2022-05-25 15:20:45 +0000;;;","2022-05-26 11:02;dukebot;Changeset: 7eb15593
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-05-26 17:59:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7eb15593e18a923bbc18c8d596cff87d87019640
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid JVM crash when containers share the same /tmp dir,JDK-8286030,5074015,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,iklam,iklam,2022-05-02 13:15,2023-05-04 10:19,2023-10-01 09:56,2022-07-17 21:12,19,,,,,,,,,,,20,hotspot,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"There are some Kubernetes setups that share the same /tmp directory across multiple containers. Such a scenario is currently not supported by the JDK and crashes may happen.

(original report) ========================
We've been seeing intermittent SIGBUS failures on linux with jdk11.  They
all have this distinctive backtrace:

C  [libc.so.6+0x12944d]
V  [libjvm.so+0xcca542]  perfMemory_init()+0x72
V  [libjvm.so+0x8a3242]  vm_init_globals()+0x22
V  [libjvm.so+0xedc31d]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x1ed
V  [libjvm.so+0x9615b2]  JNI_CreateJavaVM+0x52
C  [libjli.so+0x49af]  JavaMain+0x8f
C  [libjli.so+0x9149]  ThreadJavaMain+0x9

Initially, we suspected that /tmp was full but that turned out to not be the case.  After a few more instances of the crash and investigation, we believe we know the root cause.

The crashing applications are all running in a K8 pod, with each JVM in a
separate container:

container_type: cgroupv1 (from the hs_err file)

/tmp is mounted such that it's shared by multiple containers.  Since these
JVMs are running in containers, we believe what happens is the namespaced (i.e. per container) PIDs overlap between different containers - 2 JVMs, in separate containers, can end up with the same namespaced PID.  Since /tmp is shared, they can now ""contend"" on the same perfMemory file since those file names are PID based.

Once multiple JVMs can contend on the same file, a SIGBUS can arise if one JVM has mmap'd the file and another ftruncate()'s it from under it (e.g.
https://github.com/openjdk/jdk11/blob/37115c8ea4aff13a8148ee2b8832b20888a5d880/src/hotspot/os/linux/perfMemory_linux.cpp#L909 ).

As for possible solutions, would it be possible to use the global PID instead of the namespaced PID to ""regain"" the uniqueness invariant of the PID? Also, might it make sense to flock() the file to prevent another process from mucking with it?

(Reported by Vitaly Davidovich -- 
https://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2022-April/054921.html )

Manual reproducer:
https://github.com/openjdk/jdk/compare/master...iklam:jdk:8286030-test-case-for-jvm-crash-when-containers-share-tmp-dir?expand=1",,,,,,,,,,JDK-8302451,JDK-8298573,JDK-8299140,JDK-8302197,JDK-8303876,JDK-8304196,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255008,,,,,,,JDK-8305647,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wysz:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-05-02 17:57;iklam;Work around:

If the /tmp/hsperfdata_$USER/<pid> files are not needed (e.g., you don't need to use jcmd to access the containerized JVM processes), you can disable them with the -XX:-UsePerfData flag. This will avoid the crash.;;;","2022-05-03 03:18;sgehwolf;> /tmp is mounted such that it's shared by multiple containers.

This seems to be the root cause of the issue. If /tmp is being shared by containers, each of which usually only run one process -  and the user of the container process perhaps matches too - it becomes *very* likely to clash. I.e. /tmp/hsperdata_root/1 trying to be used by more than one container.

Question is why that's being done? Usually in containers the root filesystem, including tmp is in a container-unique filesystem which avoids this whole problem.;;;","2022-05-03 09:23;iklam;[Per Vitaly Davidovich]: I can't comment on the JBS, but another workaround (which we're employing) is -XX:+PerfDisableSharedMem.  Per my understanding, this will prevent certain tools from locating the JVM instance but still allows something like `jcmd` to connect (via an explicitly supplied pid) and read the perf counters. ;;;","2022-05-03 10:57;soaks;We have the same issue. In a kubernetes environment, /tmp is often mounted using the K8S feature emptyDir, which mounts the same directory from the host into each container within a pod. (https://kubernetes.io/docs/concepts/storage/volumes/). This allows the root filesystem to be mounted read-only for security reasons.

It would be great if the hotspot files (hsperf_xxx, .java, etc.) were all placed wherever java.io.tmpdir points to.;;;","2022-05-04 06:03;sgehwolf;There is also the option of sharing the namespace for multiple containers that need to communicate within a pod https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/#configure-a-pod

I believe that would also avoid this issue? The trouble really is that with running multiple JVMs in separate containers, yet share /tmp the uniqueness of the PID goes out the window. AFAIK, there is no way to figure out the host's pid of a pid within a container. host => container pid works, not the other way round, though. container pid => host pid.;;;","2022-05-04 07:13;soaks;The namespace applies to pods. Pods don't generally share /tmp; containers do (at least sometimes as discussed here). Containers are isolated processes within a single pod. I guess conceivably the multiple processes could be rearchitected as pods and things changed for that, but that's a severe restriction on the use of Java within K8S.

It does seem like the PID solution is a non-starter. java.io.tmpdir seems a quite simple solution instead.;;;","2022-05-04 18:14;dholmes;To repeat a comment from JDK-8189674:

The JVM doesn't use the -Djava.io.tmpdir setting. We have tried in the past (JDK-6938627) and it isn't workable (JDK-7009828). The tools and the VM that is the target of the tools have to agree on well known file locations and that can't happen if the ""tmp"" location can be customized.
;;;","2022-05-04 23:07;iklam;I agree with [~dholmes] that changing the directory for writing the hsperf files is not the way to go.

We already have well specified locations for storing the rendezvous files: 

    /proc/*/root/tmp/hsperfdata_*/ 

The problem we have is that we cannot use getpid() in the filenames because with cgroup-based containers, getpid() is no longer globally unique. That's why I propose using a UUID instead of getpid() in the filenames. See http://mail.openjdk.java.net/pipermail/hotspot-runtime-dev/2022-May/055050.html

Let's continue the discussion on hotspot-runtime-dev. Have two parallel threads in both JBS and e-mail makes the discussion difficult.;;;","2022-06-14 11:48;iklam;Updated proposed fix:

https://mail.openjdk.org/pipermail/hotspot-runtime-dev/2022-May/055295.html;;;","2022-06-28 22:14;iklam;I couldn't easily reproduce the error with an unmodified JDK. It seems like the crash happens only at very precise timing, when two JVM have created the hsperfdata file at almost the exact time with os::open().

I created a manual reproducer. Please see this link for details:

https://github.com/openjdk/jdk/compare/master...iklam:jdk:8286030-test-case-for-jvm-crash-when-containers-share-tmp-dir?expand=1
;;;","2022-07-06 23:15;iklam;I created a draft PR for the fix proposed two comments above: https://github.com/openjdk/jdk/pull/9226 . However, it seems pretty complex and risky (could have backward compatibility issues). Please see that PR for details.

I've decided to use this bug for only avoiding the crash (which only happens very rarely by my findings in the previous comment). A comprehensive fix would need to be done in JDK-8289883.;;;","2022-07-06 23:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9406
Date: 2022-07-07 06:01:58 +0000;;;","2022-07-17 21:12;dukebot;Changeset: 84f23149
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-07-18 04:10:08 +0000
URL:       https://git.openjdk.org/jdk/commit/84f23149e22561173feb0e34bca31a7345b43c89
;;;","2023-02-09 07:03;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Medium risk. Should only affect perf mem use cases. A clear fix, we should definitely take it.
I had to do a simple resolve.
Test passes and fails without the patch. SAP nighlty testing passed.;;;","2023-02-09 07:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1150
Date: 2023-02-09 15:00:27 +0000;;;","2023-02-10 04:18;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Medium risk. Should only affect perf mem use cases. A clear fix, we should definitely take it. 
I had to resolve a bit because of different file layout.
Test passes on linux. SAP nightly testing passed.;;;","2023-02-10 04:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1716
Date: 2023-02-10 11:14:46 +0000;;;","2023-05-04 10:19;sgehwolf;[~ibereziuk] Please don't add jdk8u-fix-yes labels. That label is being used for approval of OpenJDK 8u backports.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add classpath exemption to globals_vectorApiSupport_***.S.inc,JDK-8286029,5074012,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,sviswanathan,tsteele,tsteele,2022-05-02 12:56,2022-08-24 07:44,2023-10-01 09:56,2022-05-05 15:27,,,,,,,,,,,,19,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,,,,,,,,,,,,,,,,"Some copyright headers include the GPLv2 but the classpath exception is missing. This change was requested here via the mailing list [1].

Of those changes requested, only the following files are outstanding. 

src/jdk.incubator.vector/linux/native/libjsvml/globals_vectorApiSupport_linux.S.inc
src/jdk.incubator.vector/windows/native/libjsvml/globals_vectorApiSupport_windows.S.inc

The others mentioned in the thread were addressed previously [2]

---

[1] https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2022-April/013988.html
[2] https://bugs.openjdk.java.net/browse/JDK-8280956",,,,,,,,,,JDK-8287582,JDK-8286309,JDK-8287328,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292816,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wysb:",9223372036854775807,b22,,,,,,,,,,,"2022-05-02 18:14;dholmes;These files are the native part of the Vector API. These are JDK files not Hotspot. Returning to core-libs.;;;","2022-05-04 09:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8508
Date: 2022-05-02 20:05:36 +0000;;;","2022-05-05 15:27;dukebot;Changeset: 6a1b145a
Author:    Tyler Steele <tyler.steele@ibm.com>
Committer: Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2022-05-05 22:26:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6a1b145a0ab0057037f813f7dd6e71ad5b6f3de2
;;;","2022-05-05 16:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/385
Date: 2022-05-05 23:00:54 +0000;;;","2022-05-05 16:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/122
Date: 2022-05-05 23:02:28 +0000;;;","2022-05-05 16:09;tsteele;[17u, 18u fix request]

This change adds the GPLv2 classpath exemption to two vector incubator files. Backport applied cleanly. No risk (header text change only). ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some -Xlint keys are missing in javac man page,JDK-8286028,5074011,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-05-02 12:10,2022-05-04 23:38,2023-10-01 09:56,2022-05-02 14:13,17,,,,,,,,,,,19,tools,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,"Below 5 -Xlint keys are listed in output of `javac --help-lint` but not in javac man page.

• missing-explicit-ctor
• strictfp
• synchronization
• text-blocks
• preview

javac man page should be updated to include them.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282149,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wys3:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-05-02 12:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8507
Date: 2022-05-02 19:05:49 +0000;;;","2022-05-02 14:13;dukebot;Changeset: f973b783
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-05-02 21:12:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f973b78383dd9b47557b5ab06dd4978122bcee63
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"PKCS12 keystore shows ""DES/CBC"" as the algorithm of a DES SecretKeyEntry",JDK-8286024,5074007,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-05-02 10:38,2022-05-04 23:39,2023-10-01 09:56,2022-05-02 15:38,,,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,,"If you store a DES SecretKey inside a PKCS12 keystore and then retrieve it, the SecretKeyEntry's algorithm is DES/CBC.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255552,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wyr7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-05-02 14:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8505
Date: 2022-05-02 17:41:52 +0000;;;","2022-05-02 15:38;dukebot;Changeset: 50a4df87
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-05-02 22:37:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/50a4df87c87febdf5fa8561b7d0d21b8d6623943
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect test configurations for compiler/stable/TestStableShort.java,JDK-8286013,5073994,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2022-05-02 07:01,2022-05-17 09:50,2023-10-01 09:56,2022-05-02 15:45,11,17,18,19,,,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,noreg-self,oracle-triage-19,tencent-interest,,,,,,,,,,,"The four test configurations for compiler/stable/TestStableShort.java are the same.
```
/*
 * @test TestStableShort
 * @summary tests on stable fields and arrays
 * @library /test/lib /
 * @modules java.base/jdk.internal.misc
 * @modules java.base/jdk.internal.vm.annotation
 * @build sun.hotspot.WhiteBox
 *
 * @run main/bootclasspath/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xcomp
 *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4
 *                                 -XX:-TieredCompilation
 *                                 -XX:+FoldStableValues
 *                                 compiler.stable.TestStableShort
 * @run main/bootclasspath/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xcomp
 *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4
 *                                 -XX:-TieredCompilation
 *                                 -XX:+FoldStableValues
 *                                 compiler.stable.TestStableShort
 *
 * @run main/bootclasspath/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xcomp
 *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4
 *                                 -XX:-TieredCompilation
 *                                 -XX:+FoldStableValues
 *                                 compiler.stable.TestStableShort
 * @run main/bootclasspath/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xcomp
 *                                 -XX:CompileOnly=::get,::get1,::get2,::get3,::get4
 *                                 -XX:-TieredCompilation
 *                                 -XX:+FoldStableValues
 *                                 compiler.stable.TestStableShort
 */
```

I believe this is a copy-paste mistake.
Let's fix it.",,,,,,,,,,JDK-8286903,JDK-8286794,JDK-8286861,JDK-8286863,JDK-8286405,JDK-8286406,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8203318,JDK-8035828,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wyob:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-02 07:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8503
Date: 2022-05-02 14:08:57 +0000;;;","2022-05-02 07:37;thartmann;Test was added by JDK-8035828.;;;","2022-05-02 07:40;thartmann;Similar to JDK-8203318.;;;","2022-05-02 15:15;dlong;ILW = same as JDK-8203318 = MMH = P3 ;;;","2022-05-02 15:45;dukebot;Changeset: 3420a1aa
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-05-02 22:41:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3420a1aa70c99b502368ef3f0edc6acea7a2bf1c
;;;","2022-05-06 06:52;jiefu;Fix request for jdk11u & jdk17u.

I'd like to backport this patch to jdk11u & jdk17u to fix the test bug.
Patch can be applied cleanly to jdk11u & jdk17u.
Only one test code is affected, so the risk is low.
Thanks.;;;","2022-05-06 07:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/387
Date: 2022-05-06 13:55:53 +0000;;;","2022-05-06 07:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1071
Date: 2022-05-06 14:02:49 +0000;;;","2022-05-10 19:22;jiefu;Fix request for jdk18u

I'd like to backport this patch to jdk18u to fix the test bug.
Patch can be applied cleanly to jdk18u.
Only one test code is affected, so the risk is low.
Thanks.;;;","2022-05-10 19:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/128
Date: 2022-05-11 02:17:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
executing shell scripts without #! fails on Alpine linux,JDK-8285987,5073966,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-05-02 03:11,2023-06-16 05:22,2023-10-01 09:56,2022-05-05 05:46,11,17,19,,,,,,,,,19,core-libs,,0,8bpr-critical-approved,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,"A couple a tests like  java/lang/ProcessBuilder/Basic.java#id0.Basic_id0 and jdk/jshell/ExternalEditorTest.java.ExternalEditorTest try to start small shell scripts without #! at the first line of scripts.  This fails with error=8, Exec format error .
Looks like this is a known issue on musl / Alpine, see also
https://www.openwall.com/lists/musl/2018/03/09/2
https://github.com/scala-steward-org/scala-steward/issues/1374
(we see it on Alpine 3.15).  So probably the tests need adjustment.
",,,,,,,,,,JDK-8305067,JDK-8307590,JDK-8310147,JDK-8306145,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286191,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,linux_alpine,,,,,,"0|i2wyi3:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-05-04 05:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8535
Date: 2022-05-04 12:04:47 +0000;;;","2022-05-05 05:46;dukebot;Changeset: 9d2f591e
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-05-05 12:45:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9d2f591e6a15dc155a8cc3b18a54456d5f9a3aa7
;;;","2022-05-05 06:42;rriggs;The change to add isMusl() also needs to update the library test.  
   test/lib-test/jdk/test/lib/TestMutuallyExclusivePlatformPredicates.java

It is causing test failures.;;;","2022-05-05 08:06;rriggs;And the assumption that \@ requires has a defined value for vm.musl is also causing other test failures. In The JshellExternalEditor test.;;;","2023-04-28 07:19;goetz;To overcome the later below code copied from test/jdk/ needs to 
be added to test/langtools/TEST.ROOT.
But as vm.musl was removed in JDK-8286191, this is not necessary for now.

# Allow querying of various System properties in @requires clauses
#
# Source files for classes that will be used at the beginning of each test suite run,
# to determine additional characteristics of the system for use with the @requires tag.
# Note: compiled bootlibs classes will be added to BCP.
requires.extraPropDefns = ../jtreg-ext/requires/VMProps.java
requires.extraPropDefns.bootlibs = ../lib/jdk/test/whitebox
requires.extraPropDefns.libs = \
    ../lib/jdk/test/lib/Platform.java \
    ../lib/jdk/test/lib/Container.java
requires.extraPropDefns.vmOpts = -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI
requires.properties= \
    vm.musl \

;;;","2023-04-28 08:38;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a test change.
Clean backport.
Test fails, which is known. Requires follow-up 8286191 which I backport, too.
With both test passes and SAP nightly tests pass.;;;","2023-04-28 08:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1313
Date: 2023-04-28 15:39:24 +0000;;;","2023-05-22 07:20;shade;In current jdk17u-dev, jdk/jshell/ExternalEditorTest.java fails:

Running test 'jtreg:test/langtools/jdk/jshell/ExternalEditorTest.java'
--------------------------------------------------
TEST: jdk/jshell/ExternalEditorTest.java
TEST JDK: /home/shipilev/shipilev-jdk17u-dev/build/linux-x86_64-server-fastdebug/images/jdk

TEST RESULT: Error. Parse Exception: Syntax error in @requires expression: invalid name: vm.musl;;;","2023-05-22 07:29;goetz;[~shade], it seems I dropped the undo of that from 8286191 ... will fix.

Actually it looks as if the automatic merge failed ...

See JDK-8308554;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Several tests in compiler/c2/irTests miss @requires vm.compiler2.enabled,JDK-8285980,5073956,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-05-01 18:47,2023-07-10 07:53,2023-10-01 09:56,2022-05-02 03:39,19,,,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-19,tencent-interest,,,,,,,,,,,,,,,,"9 of compiler/c2/irTests tests fail when testing with C2 disabled (e.g., --with-jvm-features=-compiler2).

```
==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR
>> jtreg:test/hotspot/jtreg/compiler/c2/irTests         29    20     9     0 <<
==============================
TEST FAILURE

compiler/c2/irTests/TestSkeletonPredicates.java
compiler/c2/irTests/TestFewIterationsCountedLoop.java
compiler/c2/irTests/TestDuplicateBackedge.java
compiler/c2/irTests/TestStripMiningDropsSafepoint.java
compiler/c2/irTests/TestCountedLoopSafepoint.java
compiler/c2/irTests/TestLongRangeChecks.java
compiler/c2/irTests/TestSuperwordFailsUnrolling.java
compiler/c2/irTests/TestIRLShiftIdeal_XPlusX_LShiftC.java
compiler/c2/irTests/TestIRAddIdealNotXPlusC.java
```

It would be better to add `@requires vm.compiler2.enabled` to these tests.",,,,,,,,,,JDK-8307240,JDK-8307734,JDK-8311818,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wyfv:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-01 18:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8495
Date: 2022-05-02 01:53:57 +0000;;;","2022-05-02 03:39;dukebot;Changeset: 1f9f8738
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-05-02 10:38:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1f9f8738f344ecbc0270608ee84eb92138f349a2
;;;","2022-05-02 04:26;thartmann;ILW = Tests fail if C2 is disabled (test bugs), several tests when C2 is not available, no workaround = MLH = P4;;;","2023-07-05 06:32;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Simple resolves needed.
Tests pass. SAP nightly testing passed.;;;","2023-07-05 06:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1548
Date: 2023-07-05 13:32:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
G1: G1SegmentedArraySegment::header_size() is incorrect since JDK-8283368,JDK-8285979,5073954,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jiefu,jiefu,jiefu,2022-05-01 16:48,2022-08-04 07:19,2023-10-01 09:56,2022-05-02 15:45,19,,,,,,,,,,,19,hotspot,,0,gc-g1,gc-g1-remset,tencent-interest,,,,,,,,,,,,,,,,,,"The following crashes were observed while running gc/g1.
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/jdk/src/hotspot/share/gc/g1/g1SegmentedArray.cpp:218), pid=68376, tid=68415
#  guarantee(is_aligned(slot, _alloc_options->slot_alignment())) failed: result 0x000000000000002b not aligned at 8
#
# JRE version: OpenJDK Runtime Environment (19.0) (slowdebug build 19-internal-adhoc.jvm.jdk-501)
# Java VM: OpenJDK 64-Bit Client VM (slowdebug 19-internal-adhoc.jvm.jdk-501, interpreted mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x4ee392]  G1SegmentedArray::allocate()+0x198
#


Current thread (0x00007f2704001b70):  WorkerThread ""G1 Conc#2"" [stack: 0x00007f26fd15e000,0x00007f26fd25e000] [id=68415]

Stack: [0x00007f26fd15e000,0x00007f26fd25e000],  sp=0x00007f26fd25c4f0,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x4ee392]  G1SegmentedArray::allocate()+0x198
V  [libjvm.so+0x429362]  FreeListAllocator::allocate()+0xe2
V  [libjvm.so+0x441726]  G1CardSetAllocator::allocate()+0x1c
V  [libjvm.so+0x4417e3]  G1CardSetMemoryManager::allocate(unsigned int)+0x75
V  [libjvm.so+0x43e800]  G1CardSet::allocate_mem_object(unsigned long)+0x36
V  [libjvm.so+0x43f00a]  G1CardSet::coarsen_container(void* volatile*, void*, unsigned int, bool)+0xa0
V  [libjvm.so+0x43ecbf]  G1CardSet::add_to_howl(void*, unsigned int, unsigned int, bool)+0xf7
V  [libjvm.so+0x43f623]  G1CardSet::add_to_container(void* volatile*, void*, unsigned int, unsigned int, bool)+0x15d
V  [libjvm.so+0x43f725]  G1CardSet::add_card(unsigned int, unsigned int, bool)+0x81
V  [libjvm.so+0x441f36]  G1TransferCard::operator()(unsigned int)+0x2e
V  [libjvm.so+0x443709]  void G1CardSetArray::iterate<G1TransferCard>(G1TransferCard&)+0x57
V  [libjvm.so+0x4427d5]  void G1CardSet::iterate_cards_during_transfer<G1TransferCard>(void*, G1TransferCard&)+0xdb
V  [libjvm.so+0x43f265]  G1CardSet::transfer_cards(G1CardSetHashTableValue*, void*, unsigned int)+0x9d
V  [libjvm.so+0x43f814]  G1CardSet::add_card(unsigned int, unsigned int, bool)+0x170
V  [libjvm.so+0x4d01d1]  HeapRegionRemSet::add_reference(void*, unsigned int)+0xcf
V  [libjvm.so+0x4d5d0e]  void G1RebuildRemSetClosure::do_oop_work<narrowOop>(narrowOop*)+0xa6
V  [libjvm.so+0x4cfcaf]  G1RebuildRemSetClosure::do_oop(narrowOop*)+0x23
V  [libjvm.so+0x4cef4e]  EnableIf<!IsSame<G1RebuildRemSetClosure, OopClosure>::value, void>::type call_do_oop<narrowOop, G1RebuildRemSetClosure, OopClosure, G1RebuildRemSetClosure>(void (G1RebuildRemSetClosure::*)(narrowOop*), void (OopClosure::*)(narrowOop*), G1RebuildRemSetClosure*, narrowOop*)+0x42
V  [libjvm.so+0x4e3555]  void Devirtualizer::do_oop<G1RebuildRemSetClosure, narrowOop>(G1RebuildRemSetClosure*, narrowOop*)+0x47
V  [libjvm.so+0x4d961a]  void OopOopIterateDispatch<G1RebuildRemSetClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>(G1RebuildRemSetClosure*, oopDesc*, Klass*)+0x12d
V  [libjvm.so+0x4d70a0]  void OopIteratorClosureDispatch::oop_oop_iterate<G1RebuildRemSetClosure>(G1RebuildRemSetClosure*, oopDesc*, Klass*)+0x38
V  [libjvm.so+0x4d6a44]  void oopDesc::oop_iterate<G1RebuildRemSetClosure>(G1RebuildRemSetClosure*)+0x32
V  [libjvm.so+0x4d459f]  G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::scan_for_references(oopDesc*, MemRegion)+0x9f
V  [libjvm.so+0x4d4e68]  G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::rebuild_rem_set_in_region(G1CMBitMap const*, HeapWordImpl**, HeapWordImpl**, HeapRegion*, MemRegion)+0x23a
V  [libjvm.so+0x4d51e0]  G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*)+0x2ae
V  [libjvm.so+0x55f1b3]  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const+0x107
V  [libjvm.so+0x457139]  G1CollectedHeap::heap_region_par_iterate_from_worker_offset(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const+0x49
V  [libjvm.so+0x4d5550]  G1RebuildRemSetTask::work(unsigned int)+0x6e
V  [libjvm.so+0xc70916]  WorkerTaskDispatcher::worker_run_task()+0x84
V  [libjvm.so+0xc70de0]  WorkerThread::run()+0x30
V  [libjvm.so+0xbacd18]  Thread::call_run()+0x180
V  [libjvm.so+0x9aa23d]  thread_native_entry(Thread*)+0x18f
```

Reproduce:
 - configure --with-jvm-features=-compiler2 ...
 - run gc/g1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283368,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wyff:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-01 17:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8494
Date: 2022-05-01 23:56:55 +0000;;;","2022-05-02 15:45;dukebot;Changeset: fbcd8749
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-05-02 22:41:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fbcd874907ebed91024354fef1d5bd4c25a2f17e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/exceptions/OptimizeImplicitExceptions.java can't pass with -XX:+DeoptimizeALot,JDK-8285976,5073948,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xliu,xliu,xliu,2022-05-01 12:40,2022-06-28 08:22,2023-10-01 09:56,2022-05-04 11:02,18,19,,,,,,,,,,19,hotspot,,0,jtreg-test-failure,noreg-self,oracle-triage-19,ursqe-triaged,,,,,,,,,,,,,,,,,"$make test TEST=""compiler/exceptions/OptimizeImplicitExceptions.java"" JTREG=""VM_OPTIONS=-XX:+DeoptimizeALot"" CONF=linux-x86_64-server-fastdebug

==========================================================
testMode=STACKTRACES_IN_FASTTHROW OmitStackTraceInFastThrow=false
==========================================================
testMode=STACKTRACES_IN_FASTTHROW exception=NULL_POINTER_EXCEPTION invocations=5120
decompilecount=0 trapCount=5120 trapCount(null_check)=5120 globalDeoptCount=0 globalDeoptCount(null_check)=0
method compiled=true
testMode=STACKTRACES_IN_FASTTHROW exception=NULL_POINTER_EXCEPTION invocations=5124
decompilecount=0 trapCount=5124 trapCount(null_check)=5124 globalDeoptCount=4 globalDeoptCount(null_check)=4
method compiled=true
testMode=STACKTRACES_IN_FASTTHROW exception=NULL_POINTER_EXCEPTION invocations=5252
decompilecount=0 trapCount=5252 trapCount(null_check)=5252 globalDeoptCount=133 globalDeoptCount(null_check)=132
method compiled=true
----------System.err:(15/1029)----------
java.lang.RuntimeException: Wrong number of deoptimizations.: expected 132 to equal 133
    at jdk.test.lib.Asserts.fail(Asserts.java:594)
    at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
    at jdk.test.lib.Asserts.assertEQ(Asserts.java:178)
    at compiler.exceptions.OptimizeImplicitExceptions.check(OptimizeImplicitExceptions.java:181)
    at compiler.exceptions.OptimizeImplicitExceptions.main(OptimizeImplicitExceptions.java:253)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
    at java.base/java.lang.Thread.run(Thread.java:828)
JavaTest Message: Test threw exception: java.lang.RuntimeException: Wrong number of deoptimizations.: expected 132 to equal 133
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Wrong number of deoptimizations.: expected 132 to equal 133",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8275908,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,"0|i2wye3:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-01 16:47;xliu;-XX:+PrintOptoStatistics dumps the histogram of deoptizations. 

in this case, an deopt due to ""Reason_constraint"" emerges due to -XX:+DeoptimizeALot. 

Deoptimization traps recorded:
   133 (100.0%) total
               null_check/none/arraylength: 132 (99.2%)
                       constraint/none/nop: 1 (0.8%)
----------System.err:(15/1029)----------
java.lang.RuntimeException: Wrong number of deoptimizations.: expected 132 to equal 133

As a result, the total number of deopt can't add up at line 181.

@Volker, 
Should we disable 'DeoptimizeALot' and 'DeoptimizeRandom' via whitebox API in this test? 
;;;","2022-05-02 04:26;thartmann;ILW = Test fails due to stress flag (test bug), single test with stress flag, disable stress flag = MLM = P4;;;","2022-05-02 18:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8513
Date: 2022-05-03 01:20:48 +0000;;;","2022-05-04 11:02;dukebot;Changeset: c5a0687f
Author:    Xin Liu <xliu@openjdk.org>
Date:      2022-05-04 17:59:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c5a0687f80367a3a284dfd56781c371826264d3b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/lang/Thread/virtual/JfrEvents.testVirtualThreadSubmitFailed failed with null,JDK-8285971,5073942,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2022-04-30 23:45,2022-05-01 04:13,2023-10-01 09:56,2022-05-01 04:13,repo-loom,,,,,,,,,,,repo-loom,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"java/lang/Thread/virtual/JfrEvents.java failed in tier7 with:

----------System.out:(44/2672)----------
{jdk.VirtualThreadPinned=2}
test JfrEvents.testVirtualThreadPinned(): success
{jdk.VirtualThreadStart=100, jdk.VirtualThreadEnd=100}
test JfrEvents.testVirtualThreadStartAndEnd(): success
test JfrEvents.testVirtualThreadSubmitFailed(): failure
java.lang.AssertionError: null
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.fail(Assert.java:106)
	at JfrEvents.testVirtualThreadSubmitFailed(JfrEvents.java:153)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1584)

===============================================
java/lang/Thread/virtual/JfrEvents.java
Total tests run: 3, Passes: 2, Failures: 1, Skips: 0
===============================================",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wycr:",9223372036854775807,,,,,,,,,,,,"2022-04-30 23:46;alanb;The test waits for 500ms for the thread to park and this may be not enough for some of the test systems. The test needs to be changed to poll the thread status until the state is WAITING.;;;","2022-05-01 04:13;alanb;Fixed test to wait for threads to be in BLOCKED state:
https://github.com/openjdk/loom/commit/7d5d08047bb50552a7af2a76bb821646c74dc6fd;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gc/arguments/TestUseCompressedOopsFlagsWithUlimit.java still fails after JDK-8285011,JDK-8285970,5073940,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,dcubed,dcubed,2022-04-30 20:23,2022-06-07 22:56,2023-10-01 09:56,2022-05-02 08:33,19,,,,,,,,,,,19,hotspot,,0,noreg-self,testbug,tier7,ursqe-triaged,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

gc/arguments/TestUseCompressedOopsFlagsWithUlimit.java

Here's a snippet from the log file:

----------System.err:(11/839)----------
java.lang.RuntimeException: UseCompressedOops set to false, expected true when running with the following flags: [[-XX:MaxRAM=34359738368, -XX:MaxRAMPercentage=100, -XX:+PrintFlagsFinal, -version]]
	at gc.arguments.TestUseCompressedOopsFlagsWithUlimit.checkFlag(TestUseCompressedOopsFlagsWithUlimit.java:70)
	at gc.arguments.TestUseCompressedOopsFlagsWithUlimit.main(TestUseCompressedOopsFlagsWithUlimit.java:90)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: UseCompressedOops set to false, expected true when running with the following flags: [[-XX:MaxRAM=34359738368, -XX:MaxRAMPercentage=100, -XX:+PrintFlagsFinal, -version]]

This failure occurred in jdk-19+21-1420-tier7 which includes the
fix for the following bug:

JDK-8285011 gc/arguments/TestUseCompressedOopsFlagsWithUlimit.java fails after JDK-8280761",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285011,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i2wycb:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-01 04:14;dholmes;Failing in all tier7 runs.;;;","2022-05-01 04:16;dholmes;The tests are explicitly run with -XX:-UseCompressedOops in that task.

The test uses ProcessTools.createTestJvm which will add the jtreg test args;;;","2022-05-02 01:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8499
Date: 2022-05-02 08:52:33 +0000;;;","2022-05-02 08:33;dukebot;Changeset: 7a95a40e
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-05-02 15:30:35 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7a95a40e036b324a7502f21ef0b80837b708952a
;;;","2022-05-02 14:14;dcubed;The fix for this bug is integrated in jdk-19+21-1444.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"TestScenarios.java does not check for ""<!-- safepoint while printing -->"" correctly",JDK-8285965,5073935,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,dcubed,dcubed,2022-04-30 06:21,2023-01-30 01:15,2023-10-01 09:56,2022-06-08 03:49,17,19,,,,,,,,,,19,hotspot,,0,intermittent,ir-framework,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-19,tier5,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

testlibrary_tests/ir_framework/tests/TestScenarios.java

Here's a snippet from the log file:

The following scenarios have failed: #1

Scenario #1
===========
Scenario flags: [-XX:TLABRefillWasteFraction=51]

Command Line:
c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-19+21-1420\\windows-x64-debug.jdk\\jdk-19\\fastdebug\\bin\\java.exe -DReproduce=true -cp T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_misc\\classes\\3\\testlibrary_tests\\ir_framework\\tests\\TestScenarios.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-19+21-1420\\src.full\\open\\test\\hotspot\\jtreg\\testlibrary_tests\\ir_framework\\tests;T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_misc\\classes\\3\\test\\lib;T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_misc\\classes\\3\\testlibrary_tests;T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_misc\\classes\\3;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\javatest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\jtreg.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\junit.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\hamcrest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\testng.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\jcommander.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\guice.jar -Djava.library.path=c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-19+21-1420\\windows-x64-debug.test\\hotspot\\jtreg\\native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=t:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_hotspot_misc\\tmp -Dir.framework.server.port=53528 -XX:TLABRefillWasteFraction=51 -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompileCommand=log,ir_framework.tests.TestScenarios::* -XX:CompileCommand=option,ir_framework.tests.TestScenarios::*,bool,PrintIdeal,true -XX:CompileCommand=option,ir_framework.tests.TestScenarios::*,bool,PrintOptoAssembly,true -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM ir_framework.tests.TestScenarios

One or more @IR rules failed:

Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method ""public void ir_framework.tests.TestScenarios.failS3()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(applyIfAnd={}, applyIf={""TLABRefillWasteFraction"", ""51""}, failOn={}, applyIfOr={}, counts={""(\\\\d+(\\\\s){2}(Call.*Java.*)+(\\\\s){2}===.*)"", ""1""}, applyIfNot={})""
     - counts: Graph contains wrong number of nodes:
       * Regex 1: (\\d+(\\s){2}(Call.*Java.*)+(\\s){2}===.*)
         - Failed comparison: [found] 0 = 1 [given]
         - No nodes matched!

>>> Check stdout for compilation output of the failed methods



  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


java.lang.RuntimeException: The following scenarios have failed: #1. Please check stderr for more information.: expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at ir_framework.tests.TestScenarios.main(TestScenarios.java:66)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: The following scenarios have failed: #1. Please check stderr for more information.: expected true, was false",,,,,,,,,,JDK-8296890,JDK-8301333,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8254129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wyb7:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-02 01:32;thartmann;The test expects scenarios 1 and 3 to fail (""The following scenarios have failed: #1, #3""), however, only scenario 1 failed: ""The following scenarios have failed: #1"";;;","2022-05-02 03:57;thartmann;I'm not able to reproduce this. Marking as test bug because it's most likely either an issue with the IR verification framework or an issue with the test.;;;","2022-05-02 03:59;thartmann;ILW = IR verification framework test fails because match rule does not fail as expected, happened only once with single test, no workaround = MLH = P4;;;","2022-05-02 04:00;thartmann;Christian, could you please have a look?;;;","2022-05-02 04:10;thartmann;Maybe we should always execute these tests with -DVerbose=true to be able to inspect the dumped graph if the test fails.;;;","2022-05-10 00:56;chagedorn;[~thartmann] Sure. I think it's another issue of not handling ""<!-- safepoint while printing -->"" correctly in the test itself.;;;","2022-05-10 23:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8647
Date: 2022-05-11 06:13:12 +0000;;;","2022-06-08 03:49;dukebot;Changeset: 6e3e470d
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-06-08 10:41:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6e3e470dac80d3b6c3a0f4845ce4115858178dd3
;;;","2023-01-24 12:20;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
SAP nighlty testing passed.;;;","2023-01-24 12:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1111
Date: 2023-01-24 20:23:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NimbusDefaults has a typo in a L&F property,JDK-8285962,5073931,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,aturbanov,aturbanov,2022-04-30 02:22,2022-05-25 23:10,2023-10-01 09:56,2022-05-20 02:03,17,18,19,,,,,,,,,19,client-libs,,0,sn_118,,,,,,,,,,,,,,,,,,,,"The is a typo in a method javax.swing.plaf.nimbus.NimbusDefaults#initializeDefaults

   d.put(""ProgressBar.vertictalSize"", new DimensionUIResource(19, 150));

Source file - 
jdk/src/java.desktop/share/classes/javax/swing/plaf/nimbus/skin.laf 

               <uiProperty name=""vertictalSize"" type=""DIMENSION"">
                  <dimension width=""19"" height=""150""/>
               </uiProperty>

It seems this default is never used now. As method 'javax.swing.plaf.basic.BasicProgressBarUI#getPreferredInnerVertical' tries to find property by ""ProgressBar.verticalSize""

    protected Dimension getPreferredInnerVertical() {
        Dimension vertDim = (Dimension)DefaultLookup.get(progressBar, this,
            ""ProgressBar.verticalSize"");
        if (vertDim == null) {
            vertDim = new Dimension(12, 146);
        }
        return vertDim;
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-6430967,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wyab:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-05-02 09:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8504
Date: 2022-05-02 16:01:02 +0000;;;","2022-05-20 02:03;dukebot;Changeset: 6d56caff
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-05-20 08:59:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6d56caff3d7b06bb75f741bc503797edf94e9889
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(fs) Excessive default poll interval in PollingWatchService,JDK-8285956,5073922,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2022-04-29 15:58,2022-12-04 23:10,2023-10-01 09:56,2022-05-04 21:08,,,,,,,,,,,,19,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,,,,,,,,,,,,,,,,"AIX and BSD's implementation of the WatchService and WatchKey interfaces is given in PollingWatchService.java. The default wait after starting the polling thread, and period between subsequent polls is 10 seconds. This value is too long.",,,,,,,,,,JDK-8286652,JDK-8287581,JDK-8287327,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298057,,,,,,,JDK-7133447,JDK-8297275,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,os_x,,,,,"0|i2wy8b:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-04-29 17:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8479
Date: 2022-04-30 00:14:29 +0000;;;","2022-05-04 21:08;dukebot;Changeset: 1bb4de2e
Author:    Tyler Steele <tyler.steele@ibm.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-05-05 04:05:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1bb4de2e2868a539846ec48dd43fd623c2ba69a5
;;;","2022-05-05 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/384
Date: 2022-05-05 14:15:02 +0000;;;","2022-05-05 07:22;tsteele;[17u, 18u Fix Request]

Backporting this change to 17 and 18 to improve WatchService performance. Backport clean and risk low.;;;","2022-05-05 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/121
Date: 2022-05-05 14:18:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"javadoc java.lang.Record should not have ""Direct Known Subclasses:"" section",JDK-8285939,5073903,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jlaskey,jlaskey,2022-04-29 10:18,2022-06-01 23:31,2023-10-01 09:56,2022-05-31 16:02,18,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"Like java.lang.Object and java.lang.Enum, java.lang.Record should not list all the implementations in the JDK.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wy43:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-05-03 12:46;jjg;The bug is an indirect consequence that records are not recorded/displayed in their own hierarchy, in a manner similar to that on enum classes.  This is an omission in the internal `ClassTree` class related to the overall support for record class in the standard doclet.

Fixing that omission fixes the issue reported here.

(Separately, I note that subtypes of Object are suppressed differently, using a hardwired list of classes for which to skip reporting subtypes. That list also includes CORBA object, from times past, which is still notable when generating documentation for older releases.)

;;;","2022-05-03 13:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8523
Date: 2022-05-03 20:38:44 +0000;;;","2022-05-31 16:02;dukebot;Changeset: 8fc201e5
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-05-31 22:59:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8fc201e5bb7cb909a8bf496a751793b91b73631b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Spurious lint warning for static method accessed through instance qualifier,JDK-8285935,5073898,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,mcimadamore,mcimadamore,2022-04-29 08:41,2022-08-10 19:09,2023-10-01 09:56,2022-08-04 10:59,19,,,,,,,,,,,20,tools,,0,javac-lint,review-requested,,,,,,,,,,,,,,,,,,,"Quoting from:
https://mail.openjdk.java.net/pipermail/compiler-dev/2022-April/019517.html


public class Demo {
     public static void main(String[] args) {
         var obj = new Object() {
             static void foo() {
                 System.out.println(""Static method of anonymous class"");
             }
         };
         obj.foo(); // Cannot replace instance qualifier with class reference
     }
}

With -Xlint:static, javac reports the following warning:

Demo.java:8: warning: [static] static method should be qualified by
type name, <anonymous Demo$1>, instead of by an expression
         obj.foo(); // Cannot replace instance qualifier with class reference
            ^
1 warning
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wy2z:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-07-15 10:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9521
Date: 2022-07-15 17:10:34 +0000;;;","2022-08-04 10:59;dukebot;Changeset: 3ba31716
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2022-08-04 17:57:28 +0000
URL:       https://git.openjdk.org/jdk/commit/3ba317167d24b6ed478418a2abae9042ab2764f1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[REDO] JDK-8285802 AArch64: Consistently handle offsets in MacroAssembler as 64-bit quantities,JDK-8285923,5073883,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aph,dcubed,dcubed,2022-04-29 06:45,2023-04-17 04:12,2023-10-01 09:56,2022-05-09 06:40,11,17,18,19,,,,,,,,19,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-19,regression,tier1,tier2,tier3,tier4,,,,,,,,,,,,"The following tests are failing in the JDK19 CI in Tier1:

tools/doclint/tool/StatsTest.java
jdk/javadoc/tool/8224612/OptionsTest.java
jdk/javadoc/doclet/testDocletExample/TestDocletExample.java

Here's hs_err_pid snippets from the OptionsTest.java failure:

#  Internal Error (assembler_aarch64.hpp:251), pid=3232143, tid=3232158
#  guarantee(val < (1ULL << nbits)) failed: Field too big for insn
#
# JRE version: Java(TM) SE Runtime Environment (19.0+21) (build 19-ea+21-1423)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19-ea+21-1423, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xac4848]  Assembler::movz(RegisterImpl const*, unsigned int, unsigned int)+0x138

<snip>

---------------  T H R E A D  ---------------

Current thread (0x0000fffde830d5f0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=3232158, stack(0x0000fffdbeed0000,0x0000fffdbf0d0000)]


Current CompileTask:
C2:   1880 2623       4       javadoc.tester.HtmlParser::htmlAttrs (236 bytes)

Stack: [0x0000fffdbeed0000,0x0000fffdbf0d0000],  sp=0x0000fffdbf0cb2c0,  free space=2028k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xac4848]  Assembler::movz(RegisterImpl const*, unsigned int, unsigned int)+0x138
V  [libjvm.so+0xaac198]  MacroAssembler::mov_immediate64(RegisterImpl const*, unsigned long)+0x498
V  [libjvm.so+0xaaf818]  MacroAssembler::wrap_adds_subs_imm_insn(RegisterImpl const*, RegisterImpl const*, unsigned long, void (MacroAssembler::*)(RegisterImpl const*, RegisterImpl const*, unsigned int), void (MacroAssembler::*)(RegisterImpl const*, RegisterImpl const*, RegisterImpl const*, Assembler::shift_kind, unsigned int))+0x94
V  [libjvm.so+0x336fe0]  overflowAddI_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0xbc
V  [libjvm.so+0xb9f4f4]  PhaseOutput::scratch_emit_size(Node const*)+0x1a4
V  [libjvm.so+0xb9bdb4]  PhaseOutput::shorten_branches(unsigned int*)+0x234
V  [libjvm.so+0xba2b50]  PhaseOutput::Output()+0x480
V  [libjvm.so+0x5bf7e4]  Compile::Code_Gen()+0x460
V  [libjvm.so+0x5c2c5c]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xe7c
V  [libjvm.so+0x50be8c]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xf8
V  [libjvm.so+0x5ca368]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x758
V  [libjvm.so+0x5cb0c8]  CompileBroker::compiler_thread_loop()+0x468
V  [libjvm.so+0xd030ec]  JavaThread::thread_main_inner()+0xbc
V  [libjvm.so+0xd08b78]  Thread::call_run()+0xb8
V  [libjvm.so+0xb8c5cc]  thread_native_entry(Thread*)+0xdc
C  [libpthread.so.0+0x7868]  start_thread+0x188",,,,,,,,,,JDK-8287951,JDK-8289132,JDK-8302833,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287091,,,,,,,JDK-8285802,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,os_x,,,,,"0|i2wxzn:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-29 06:48;dcubed;Here's hs_err_pid snippets from the TestDocletExample.java failure:

#  Internal Error (assembler_aarch64.hpp:251), pid=3203340, tid=3231246
#  guarantee(val < (1ULL << nbits)) failed: Field too big for insn
#
# JRE version: Java(TM) SE Runtime Environment (19.0+21) (build 19-ea+21-1423)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19-ea+21-1423, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0xac4848]  Assembler::movz(RegisterImpl const*, unsigned int, unsigned int)+0x138

<snip>

---------------  T H R E A D  ---------------

Current thread (0x0000fffcbc75f6c0):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=3231246, stack(0x0000fffcc6ae0000,0x0000fffcc6ce0000)]


Current CompileTask:
C2: 101403 15024       4       javadoc.tester.HtmlParser::htmlAttrs (236 bytes)

Stack: [0x0000fffcc6ae0000,0x0000fffcc6ce0000],  sp=0x0000fffcc6cdb2c0,  free space=2028k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xac4848]  Assembler::movz(RegisterImpl const*, unsigned int, unsigned int)+0x138
V  [libjvm.so+0xaac198]  MacroAssembler::mov_immediate64(RegisterImpl const*, unsigned long)+0x498
V  [libjvm.so+0xaaf818]  MacroAssembler::wrap_adds_subs_imm_insn(RegisterImpl const*, RegisterImpl const*, unsigned long, void (MacroAssembler::*)(RegisterImpl const*, RegisterImpl const*, unsigned int), void (MacroAssembler::*)(RegisterImpl const*, RegisterImpl const*, RegisterImpl const*, Assembler::shift_kind, unsigned int))+0x94
V  [libjvm.so+0x336fe0]  overflowAddI_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0xbc
V  [libjvm.so+0xb9f4f4]  PhaseOutput::scratch_emit_size(Node const*)+0x1a4
V  [libjvm.so+0xb9bdb4]  PhaseOutput::shorten_branches(unsigned int*)+0x234
V  [libjvm.so+0xba2b50]  PhaseOutput::Output()+0x480
V  [libjvm.so+0x5bf7e4]  Compile::Code_Gen()+0x460
V  [libjvm.so+0x5c2c5c]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xe7c
V  [libjvm.so+0x50be8c]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xf8
V  [libjvm.so+0x5ca368]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x758
V  [libjvm.so+0x5cb0c8]  CompileBroker::compiler_thread_loop()+0x468
V  [libjvm.so+0xd030ec]  JavaThread::thread_main_inner()+0xbc
V  [libjvm.so+0xd08b78]  Thread::call_run()+0xb8
V  [libjvm.so+0xb8c5cc]  thread_native_entry(Thread*)+0xdc
C  [libpthread.so.0+0x7868]  start_thread+0x188;;;","2022-04-29 06:51;dcubed;Here's log file snippets from the StatsTest.java failure:

#section:main
----------messages:(6/338)----------
command: main DocLintTester -ref StatsTest.out -stats -Xmsgs:all StatsTest.java
reason: User specified action: run main DocLintTester -ref StatsTest.out -stats -Xmsgs:all StatsTest.java 
Mode: agentvm
Agent id: 10
Additional exports to unnamed modules from @modules: jdk.javadoc/jdk.javadoc.internal.doclint
elapsed time (seconds): 0.001
----------configuration:(16/1791)----------

<snip>

result: Error. Agent communication error: java.net.SocketException: Broken pipe; check console log for any additional details

The artifacts link does not have any hs_err_pid files or core files.;;;","2022-04-29 07:02;dcubed;The next Tier1 failed jdk/javadoc/doclet tests on macosx-aarch64:

jdk/javadoc/doclet/testVersionTag/TestVersionTag.java
jdk/javadoc/doclet/testModules/TestModuleServicesLink.java

Both of these failed this assertion:

#  Internal Error (assembler_aarch64.hpp:251), pid=27134, tid=41987
#  guarantee(val < (1ULL << nbits)) failed: Field too big for insn

jdk/javadoc/doclet/testBadPackageFileInJar/TestBadPackageFileInJar.java

failed with this error msg, but no hs_err_pid file:

----------stdout:(8/501)----------
[thread 87143 also had an error]
#
# Compiler replay data is saved as:
# /System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S42613/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/379f3606-79b2-4f98-9329-9db3b6865b71/runs/c6844c27-375f-4393-ab5b-02653b4fa157/testoutput/test-support/jtreg_open_test_langtools_tier1/scratch/2/replay_pid26193.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
result: Error. Agent communication error: java.io.EOFException; check console log for any additional details;;;","2022-04-29 07:04;dcubed;The first Tier1 build-ID containing these failures includes
just one changeset:

2022-04-29 13:01
aph: df4d5c - OpenJDK
8285802  AArch64: Consistently handle offsets in MacroAssembler as 64-bit quantities;;;","2022-04-29 07:06;dcubed;[~aph] - Looks like your fix for:

JDK-8285802 AArch64: Consistently handle offsets in MacroAssembler as 64-bit quantities

is causing some Tier1 test failure in jdk/javadoc.
Please take a look as soon as possible.;;;","2022-04-29 12:28;dcubed;We're now seeing JCK tests fail with this assertion failure:

On linux-aarch64:

api/javax_swing/plaf/metal/MetalFileChooserUI/FilterComboBoxRenderer/Ctor.html
api/javax_swing/plaf/basic/BasicLabelUI/protected.html

On macosx-aarch64:

api/javax_swing/plaf/BorderUIResource/TitledBorderUIResource/TitledBorderUIResourceTests.html
api/javax_swing/plaf/basic/BasicFileChooserUI/file.html
api/javax_swing/JLabel/AccessibleJLabel/AccessibleContext.html;;;","2022-04-29 13:25;aph;OK, sorry. I didn't see that failure in my tests. If this is causing people problems I can simply post a PR to back out the change, and try again some time in the future with a different patch. Should I do that?

BTW, it's a public holiday here on Monday. ;;;","2022-04-29 13:25;aph;Never mind, I see you did it. Sorry for the noise.;;;","2022-04-29 13:37;dcubed;The failures have been intermittent in Mach5. We've had 4 Tier1
job sets with failures and 2 Tier1 job sets with no failures. The
failing Tier1 job sets are sometimes only linux-aarch64 failures
or only macosx-aarch64 failures. I think there was one Tier1 that
had failures in both linux-aarch64 and macosx-aarch64 (and not
the same tests between them). Weird!;;;","2022-04-29 14:58;dcubed;Here's hs_err_pid snippets for the jdk-19+21-1429-tier2 sighting: 

java/net/httpclient/ResponseBodyBeforeError.java

#  Internal Error (assembler_aarch64.hpp:251), pid=1906218, tid=1906273
#  guarantee(val < (1ULL << nbits)) failed: Field too big for insn
#
# JRE version: Java(TM) SE Runtime Environment (19.0+21) (build 19-ea+21-1429)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (19-ea+21-1429, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x39bd00]  Instruction_aarch64::f(unsigned int, int, int)+0x80

<snip>

---------------  T H R E A D  ---------------

Current thread (0x0000fffef41f7710):  JavaThread ""C2 CompilerThread2"" daemon [_thread_in_native, id=1906273, stack(0x0000fffef3580000,0x0000fffef3780000)]


Current CompileTask:
C2:   4866 4423       4       sun.security.ssl.HKDF::<init> (58 bytes)

Stack: [0x0000fffef3580000,0x0000fffef3780000],  sp=0x0000fffef377b2c0,  free space=2028k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x39bd00]  Instruction_aarch64::f(unsigned int, int, int)+0x80
V  [libjvm.so+0xaabf00]  MacroAssembler::mov_immediate64(RegisterImpl const*, unsigned long)+0x200
V  [libjvm.so+0xaaf818]  MacroAssembler::wrap_adds_subs_imm_insn(RegisterImpl const*, RegisterImpl const*, unsigned long, void (MacroAssembler::*)(RegisterImpl const*, RegisterImpl const*, unsigned int), void (MacroAssembler::*)(RegisterImpl const*, RegisterImpl const*, RegisterImpl const*, Assembler::shift_kind, unsigned int))+0x94
V  [libjvm.so+0x336fe0]  overflowAddI_reg_immNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0xbc
V  [libjvm.so+0xb9f4e4]  PhaseOutput::scratch_emit_size(Node const*)+0x1a4
V  [libjvm.so+0xb9bda4]  PhaseOutput::shorten_branches(unsigned int*)+0x234
V  [libjvm.so+0xba2b40]  PhaseOutput::Output()+0x480
V  [libjvm.so+0x5bf7e4]  Compile::Code_Gen()+0x460
V  [libjvm.so+0x5c2c5c]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xe7c
V  [libjvm.so+0x50be8c]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xf8
V  [libjvm.so+0x5ca368]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x758
V  [libjvm.so+0x5cb0c8]  CompileBroker::compiler_thread_loop()+0x468
V  [libjvm.so+0xd030cc]  JavaThread::thread_main_inner()+0xbc
V  [libjvm.so+0xd08b58]  Thread::call_run()+0xb8
V  [libjvm.so+0xb8c5bc]  thread_native_entry(Thread*)+0xdc
C  [libpthread.so.0+0x7868]  start_thread+0x188;;;","2022-04-29 15:13;dlong;ILW = crash in tier1 testing; intermittent; no workaround = HMH = P1;;;","2022-04-30 06:55;dcubed;Changed the priority to match JDK-8285802 (P3). Also changed the
synopsis to reflect that this bug is now the [REDO] for JDK-8285802;;;","2022-05-02 14:32;mbalao;We've been looking with @fferrari into this issue.

The problem is caused by the removal of the cast ""(int)imm"" in MacroAssembler::wrap_adds_subs_imm_insn [0]. After 8285802, we pass a uint64_t imm to Assembler::operand_valid_for_add_sub_immediate [1] which, in turn, will cast it to int64_t imm. There is no sign extension in that cast. Before 8285802, Assembler::operand_valid_for_add_sub_immediate was receiving an int and casting it to int64_t implied a sign extension.

To illustrate, let's say that imm is -1. After 8285802, Assembler::operand_valid_for_add_sub_immediate gets a (int64_t)0x00000000FFFFFFFF instead of a (int64_t)0xFFFFFFFFFFFFFFFF. What was a small negative before is now a large positive, and it's likely that Assembler::operand_valid_for_add_sub_immediate is now returning false instead of true. Thus, execution reaches this point [2]. Then it calls mov [3] and mov_immediate_64 [4]. It then calls movz [5]. For movz, imm is an unsigned int again. It then calls f [6] asking to encode 0xFFFFFFFF between bits 5 and 20, which is not possible, and we finally trigger the assertion here [7].

If we look from MacroAssembler::wrap_adds_subs_imm_insn backwards, the call on the test that failed comes from overflowAddI_reg_immNode::emit (auto-generated, ad_aarch64.cpp). This function called cmnw [8], which then called addsw [9] [10]. It's worth noting how the pass through cmnw implied that imm was casted to unsigned int.

Thus, after 8285802 imm was forced to unsigned int, then to uint64_t and then to int64_t. Whereas before 8285802, the cast path for imm was unsigned int, to int, to int64_t.

As an example, this C++ code reflects the two cast paths and how they throw different results:

#include <iostream>
#include <string>
#include <cstdint>

int main()
{
    {
        // Input
        unsigned int i = (unsigned int)-1;

        unsigned int u = (unsigned int)i;
        int i_tmp = (int)u;
        std::cout << ""i (before 8285802): "" << std::hex << (int64_t)i_tmp << std::endl;
    }
    {
        // Input
        unsigned int i = (unsigned int)-1;

        uint64_t u = (uint64_t)i;
        std::cout << ""i (after 8285802): "" << std::hex << (int64_t)u << std::endl;
    }
}

--
[0] - https://github.com/openjdk/jdk/commit/df4d5cf5f53c1451487e6301d31c196fac029f7a#diff-0f4150a9c607ccd590bf256daa800c0276144682a92bc6bdced5e8bc1bb81f3aL2218
[1] - https://github.com/openjdk/jdk/blob/jdk-19%2B20/src/hotspot/cpu/aarch64/assembler_aarch64.cpp#L438
[2] - https://github.com/openjdk/jdk/blob/jdk-19%2B20/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp#L2223
[3] - https://github.com/openjdk/jdk/blob/jdk-19%2B20/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp#L495
[4] - https://github.com/openjdk/jdk/blob/jdk-19%2B20/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp#L1390
[5] - https://github.com/openjdk/jdk/blob/jdk-19%2B20/src/hotspot/cpu/aarch64/assembler_aarch64.hpp#L791
[6] - https://github.com/openjdk/jdk/blob/jdk-19%2B20/src/hotspot/cpu/aarch64/assembler_aarch64.hpp#L796
[7] - https://github.com/openjdk/jdk/blob/jdk-19%2B20/src/hotspot/cpu/aarch64/assembler_aarch64.hpp#L251
[8] - https://github.com/openjdk/jdk/blob/jdk-19%2B20/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp#L196
[9] - https://github.com/openjdk/jdk/blob/jdk-19%2B20/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp#L1196
[10] - https://github.com/openjdk/jdk/blob/jdk-19%2B20/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp#L1179;;;","2022-05-05 08:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8554
Date: 2022-05-05 14:56:38 +0000;;;","2022-05-07 06:59;dcubed;Mach5 testing:

Mach5 Tier1:
- no failures

Mach5 Tier2:
- 1 unrelated, known failure

Mach5 Tier3:
- no failures

Mach5 Tier4:
- no failures

Mach5 Tier5:
- no failures ;;;","2022-05-09 06:40;dukebot;Changeset: b849efdf
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-05-09 13:37:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b849efdf154552903faaddd69cac1fe5f1ddf18a
;;;","2022-06-21 00:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/159
Date: 2022-06-21 07:34:12 +0000;;;","2022-06-23 03:38;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
I had to do a trivial resolve.  I'll integrate after 8287091.
SAP nightly testing passed.;;;","2022-06-23 03:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/501
Date: 2022-06-23 10:37:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/stress/strace/strace003.java failed with ""Unexpected method name: begin""",JDK-8285922,5073882,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,alanb,alanb,2022-04-29 06:24,2022-05-03 11:12,2023-10-01 09:56,2022-05-03 11:12,repo-loom,,,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"The test failed with:

# ERROR: strace003Thread32>Unexpected method name: begin
# ERROR: 	at 1 position
# ERROR: 	line number: 70
# ERROR: 	class name: jdk.internal.misc.Blocker
# ERROR: 	file name: Blocker.java
	checking strace003Thread33(trace elements: 13)
	checking strace003Thread34(trace elements: 18)
	checking strace003Thread44(trace elements: 10)
	checking strace003Thread49(trace elements: 36)
	checking strace003Thread51(trace elements: 74)
	checking strace003Thread57(trace elements: 94)
	checking strace003Thread65(trace elements: 17)
	checking strace003Thread86(trace elements: 28)
	checking strace003Thread88(trace elements: 64)
waiting for threads finished",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxzf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2022-04-29 06:26;alanb;The straceXXX tests are overly sensitive to the internals of Thread and other core classes. I wonder if they can be re-implemetned to be more robust and avoid being dependent on internals.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
serviceability/dcmd/jvmti/AttachFailed/AttachReturnError.java fails on Alpine,JDK-8285921,5073881,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-04-29 06:10,2022-10-14 01:58,2023-10-01 09:56,2022-05-03 04:23,,,,,,,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,noreg-self,,,,,,,,,,,,,"The test tests, among other things, that if a JVMTI agent could not be successfully initialized, the agent library is correctly unloaded.

However, muslc does not implement dlclose().

https://wiki.musl-libc.org/functional-differences-from-glibc.html

""musl’s dynamic loader loads libraries permanently for the lifetime of the process, until it exits or calls exec. dlclose is a no-op. ""

Test should be modified for Alpine.
-----------------------------------
error is like this (on Alpine 3.15) :
	at AttachReturnError.run(AttachReturnError.java:47)
	at AttachFailedTestBase.cli(AttachFailedTestBase.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)
Caused by: java.lang.RuntimeException: '/home/build/linux-x86_64-server-release/images/test/hotspot/jtreg/native/libReturnError.so' found in stdout 
 
                at jdk.test.lib.process.OutputAnalyzer.shouldNotContain(OutputAnalyzer.java:267)
                at AttachReturnError.run(AttachReturnError.java:45)
                ... 29 more
 
===============================================
serviceability/dcmd/jvmti/AttachFailed/AttachReturnError.java
Total tests run: 2, Passes: 0, Failures: 2, Skips: 0
===============================================",,,,,,,,,,JDK-8286801,JDK-8286905,JDK-8286485,JDK-8295326,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux_alpine,,,,,,"0|i2wxz7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-05-01 04:45;dholmes;We hit this problem 4 years ago with the musl port. Only solution was to provide a means to exclude such tests.

https://mail.openjdk.java.net/pipermail/portola-dev/2018-April/000357.html
;;;","2022-05-02 00:04;mbaesken;Hi David, it seems to me that in the ProblemList we can only exclude OS specifiers (like linux), CPU architectures (like  x64)  and OS revisions.
Is there a ""good"" way to exclude Alpine ?
Of course we could add  ""requires !vm.musl""   to the test itself, is that what you suggest ?;;;","2022-05-02 19:07;dholmes;> Of course we could add ""requires !vm.musl"" to the test itself, is that what you suggest ? 

Yes - sorry that wasn't clear.;;;","2022-05-03 00:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8515
Date: 2022-05-03 07:47:28 +0000;;;","2022-05-03 04:23;dukebot;Changeset: 0f62cb6f
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-05-03 11:21:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0f62cb6fcc75e0b8cc2d623f67273114233a40ef
;;;","2022-05-05 04:20;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well, because the issue is present there too. Risk is low, the patch applies cleanly.;;;","2022-05-05 04:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/382
Date: 2022-05-05 11:18:48 +0000;;;","2022-05-10 06:46;mbaesken;jdk18 backport request
I would like to have the patch in jdk18 as well, because the issue is present there too. Risk is low, the patch applies cleanly.;;;","2022-05-10 06:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/125
Date: 2022-05-10 13:51:04 +0000;;;","2022-10-12 00:32;mbaesken;jdk11 backport request
I would like to have the patch in jdk11 as well, because the issue is present there too (special musl/Alpine handling is needed) . Risk is low, the patch has to be manually integrated because a predecessor (8252657) is missing.
PR : https://github.com/openjdk/jdk11u-dev/pull/1449;;;","2022-10-12 00:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1449
Date: 2022-10-12 07:28:05 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove debug printout from JDK-8285093,JDK-8285919,5073876,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-04-29 05:40,2023-02-15 01:09,2023-10-01 09:56,2022-04-29 06:27,19,,,,,,,,,,,19,infrastructure,,0,build-infra,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,A debug printout in configure was introduced in JDK-8285093. It should be removed.,,,,,,,,,,JDK-8302533,JDK-8300629,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285093,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxy3:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-29 05:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8467
Date: 2022-04-29 12:43:02 +0000;;;","2022-04-29 06:27;dukebot;Changeset: 64225e19
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-04-29 13:26:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/64225e19995e81d2e836ce84befea1a01bb6c860
;;;","2023-01-18 02:56;clanger;Fix request (17u):
The change for JDK-8285093 was backported to jdk17u and it introduced unintentional debug output in configure. This will be corrected by this backport. Risk: Low. Testing: GHA and SAP nightlies.;;;","2023-01-18 03:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1082
Date: 2023-01-18 10:54:21 +0000;;;","2023-02-10 14:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1718
Date: 2023-02-10 21:59:04 +0000;;;","2023-02-14 01:37;clanger;Fix Request (11u):
Backport inlined in backport of JDK-8285093. Regression fix. Testing: GHA and SAP nigthlies.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
failure_handler: gather the contents of /etc/hosts file,JDK-8285915,5073871,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-04-29 04:22,2022-05-04 23:39,2023-10-01 09:56,2022-05-02 18:25,19,,,,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,"On macOS and linux systems, it would be useful to gather the /etc/hosts file contents as part of the environment details collection as part of the failure handler. This can sometimes help understand some network test failures (for example: is localhost mapped to something unexpected).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxwz:",9223372036854775807,b21,,,,,,,,,,,"2022-04-29 04:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8466
Date: 2022-04-29 11:28:32 +0000;;;","2022-05-02 18:25;dukebot;Changeset: 45ca81ff
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-05-03 01:23:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/45ca81ff5f25ce7927c5debc2f89b41246b91b92
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AppCDS crash when using shared archive with old class file,JDK-8285914,5073508,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,webbuggrp,webbuggrp,2022-04-25 23:23,2022-05-11 23:13,2023-10-01 09:56,2022-05-09 09:04,18.0.1,,,,,,,,,,,19,hotspot,,0,cds,dcsswa,dynamic-cds,reproducer-yes,webbug,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Fedora 35, OpenJDK 18.0.1 / 17.0.3

A DESCRIPTION OF THE PROBLEM :
While trying to realize the benefit of AppCDS with our moderately intensive application, we reliably crash with SEGV in SystemDictionary::load_shared_lambda_proxy_class. The same crash affects 18.0.1 and 17.0.3. It seems to relate to extending a class in an old format from the popular JUnit library.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Download the popular JUnit JAR from Maven Central, version 4.13.2:
https://search.maven.org/remotecontent?filepath=junit/junit/4.13.2/junit-4.13.2.jar

Compile the attached source code against JUnit:
% javac -cp junit-4.13.2.jar JsaCrash.java

Create a JAR:
% jar cf jsacrash.jar *.class

Create a dynamic shared archive:
% java -XX:ArchiveClassesAtExit=test.jsa -cp junit-4.13.2.jar:jsacrash.jar JsaCrash

Run the same code with the shared archive:
% java -XX:SharedArchiveFile=test.jsa -cp junit-4.13.2.jar:jsacrash.jar JsaCrash

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The example program should print out 'done!' and exit successfully.
ACTUAL -
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f7ff024d1b6, pid=159584, tid=159585
#
# JRE version: OpenJDK Runtime Environment (18.0.1+10) (build 18.0.1+10-24)
# Java VM: OpenJDK 64-Bit Server VM (18.0.1+10-24, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd511b6]  SystemDictionary::load_shared_lambda_proxy_class(InstanceKlass*, Handle, Handle, PackageEntry*, JavaThread*)+0x26
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h"" (or dumping to /home/steven/tmp/core.159584)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:SharedArchiveFile=test.jsa JsaCrash

Host: AMD Ryzen 7 3700X 8-Core Processor, 16 cores, 31G, Fedora release 35 (Thirty Five)
Time: Mon Apr 25 23:19:53 2022 PDT elapsed time: 0.046148 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x00007f7fe8025890):  JavaThread ""main"" [_thread_in_vm, id=159585, stack(0x00007f7fef31b000,0x00007f7fef41b000)]

Stack: [0x00007f7fef31b000,0x00007f7fef41b000],  sp=0x00007f7fef418a80,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xd511b6]  SystemDictionary::load_shared_lambda_proxy_class(InstanceKlass*, Handle, Handle, PackageEntry*, JavaThread*)+0x26
V  [libjvm.so+0xd56e91]  SystemDictionaryShared::prepare_shared_lambda_proxy_class(InstanceKlass*, InstanceKlass*, JavaThread*)+0xf1
V  [libjvm.so+0x8e5a3e]  JVM_LookupLambdaProxyClassFromArchive+0x24e
j  java.lang.invoke.LambdaProxyClassArchive.findFromArchive(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MethodType;)Ljava/lang/Class;+0 java.base@18.0.1
j  java.lang.invoke.LambdaProxyClassArchive.find(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;Z[Ljava/lang/Class;[Ljava/lang/invoke/MethodType;)Ljava/lang/Class;+59 java.base@18.0.1
j  java.lang.invoke.InnerClassLambdaMetafactory.spinInnerClass()Ljava/lang/Class;+96 java.base@18.0.1
j  java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite()Ljava/lang/invoke/CallSite;+1 java.base@18.0.1
j  java.lang.invoke.LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;+67 java.base@18.0.1
j  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 java.base@18.0.1
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+28 java.base@18.0.1
j  java.lang.invoke.BootstrapMethodInvoker.invoke(Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;+319 java.base@18.0.1
j  java.lang.invoke.CallSite.makeSite(Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/invoke/CallSite;+8 java.base@18.0.1
j  java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+6 java.base@18.0.1
j  java.lang.invoke.MethodHandleNatives.linkCallSite(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+45 java.base@18.0.1
v  ~StubRoutines::call_stub
V  [libjvm.so+0x80c645]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x315
V  [libjvm.so+0x80c9ec]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x10c
V  [libjvm.so+0xd4d807]  SystemDictionary::invoke_bootstrap_method(BootstrapInfo&, JavaThread*)+0x217
V  [libjvm.so+0xa6eb52]  LinkResolver::resolve_dynamic_call(CallInfo&, BootstrapInfo&, JavaThread*)+0x22
V  [libjvm.so+0xa6ecee]  LinkResolver::resolve_invokedynamic(CallInfo&, constantPoolHandle const&, int, JavaThread*)+0xbe
V  [libjvm.so+0x805e01]  InterpreterRuntime::resolve_invokedynamic(JavaThread*)+0x121
V  [libjvm.so+0x807aed]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x18d
j  JsaCrash$Builder.addContext(LJsaCrash$Builder$ContextBuilder;Ljava/lang/Class;)LJsaCrash$Builder;+2
j  JsaCrash$Builder$ContextBuilder.as(Ljava/lang/Class;)LJsaCrash$Builder;+6
j  JsaCrash.main([Ljava/lang/String;)V+10
v  ~StubRoutines::call_stub
V  [libjvm.so+0x80c645]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x315
V  [libjvm.so+0x8a5e2d]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .constprop.1]+0x38d
V  [libjvm.so+0x8a8bee]  jni_CallStaticVoidMethod+0x15e
C  [libjli.so+0x46ae]  JavaMain+0xcfe
C  [libjli.so+0x7d29]  ThreadJavaMain+0x9

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.invoke.LambdaProxyClassArchive.findFromArchive(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MethodType;)Ljava/lang/Class;+0 java.base@18.0.1
j  java.lang.invoke.LambdaProxyClassArchive.find(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;Z[Ljava/lang/Class;[Ljava/lang/invoke/MethodType;)Ljava/lang/Class;+59 java.base@18.0.1
j  java.lang.invoke.InnerClassLambdaMetafactory.spinInnerClass()Ljava/lang/Class;+96 java.base@18.0.1
j  java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite()Ljava/lang/invoke/CallSite;+1 java.base@18.0.1
j  java.lang.invoke.LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;+67 java.base@18.0.1
j  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+20 java.base@18.0.1
j  java.lang.invoke.Invokers$Holder.invokeExact_MT(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;+28 java.base@18.0.1
j  java.lang.invoke.BootstrapMethodInvoker.invoke(Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;+319 java.base@18.0.1
j  java.lang.invoke.CallSite.makeSite(Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/invoke/CallSite;+8 java.base@18.0.1
j  java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(Ljava/lang/Class;Ljava/lang/invoke/MethodHandle;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+6 java.base@18.0.1
j  java.lang.invoke.MethodHandleNatives.linkCallSite(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/invoke/MemberName;+45 java.base@18.0.1
v  ~StubRoutines::call_stub
j  JsaCrash$Builder.addContext(LJsaCrash$Builder$ContextBuilder;Ljava/lang/Class;)LJsaCrash$Builder;+2
j  JsaCrash$Builder$ContextBuilder.as(Ljava/lang/Class;)LJsaCrash$Builder;+6
j  JsaCrash.main([Ljava/lang/String;)V+10
v  ~StubRoutines::call_stub

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000018

Register to memory mapping:

RAX=0x0 is NULL
RBX=0x00007f7fe8025890 is a thread
RCX=0x0 is NULL
RDX=0x00007f7f7001bcf0 points into unknown readable memory: 0x000000062a02efd0 | d0 ef 02 2a 06 00 00 00
RSP=0x00007f7fef418a80 is pointing into the stack for thread: 0x00007f7fe8025890
RBP=0x00007f7fef418af0 is pointing into the stack for thread: 0x00007f7fe8025890
RSI=0x00007f7f7001bcd8 points into unknown readable memory: 0x00000007ffb56068 | 68 60 b5 ff 07 00 00 00
RDI=0x0000000800bbdd68 is pointing into metadata
R8 =0x00007f7fe8025890 is a thread
R9 =0x00007f7f7001bce8 points into unknown readable memory: 0x000000062a039138 | 38 91 03 2a 06 00 00 00
R10=0x000000080045cb10 is pointing into metadata
R11=0x000000080044f8e8 is pointing into metadata
R12=0x0000000800bbdd68 is pointing into metadata
R13=0x0000000800bbdd68 is pointing into metadata
R14=0x00007f7f7001bcd8 points into unknown readable memory: 0x00000007ffb56068 | 68 60 b5 ff 07 00 00 00
R15=0x00007f7f7001bcf0 points into unknown readable memory: 0x000000062a02efd0 | d0 ef 02 2a 06 00 00 00


Registers:
RAX=0x0000000000000000, RBX=0x00007f7fe8025890, RCX=0x0000000000000000, RDX=0x00007f7f7001bcf0
RSP=0x00007f7fef418a80, RBP=0x00007f7fef418af0, RSI=0x00007f7f7001bcd8, RDI=0x0000000800bbdd68
R8 =0x00007f7fe8025890, R9 =0x00007f7f7001bce8, R10=0x000000080045cb10, R11=0x000000080044f8e8
R12=0x0000000800bbdd68, R13=0x0000000800bbdd68, R14=0x00007f7f7001bcd8, R15=0x00007f7f7001bcf0
RIP=0x00007f7ff024d1b6, EFLAGS=0x0000000000010256, CSGSFS=0x002b000000000033, ERR=0x0000000000000004
  TRAPNO=0x000000000000000e

Top of Stack: (sp=0x00007f7fef418a80)
0x00007f7fef418a80:   00007f7fe8025890 00007f7f7001bcd8
0x00007f7fef418a90:   0000000000000000 0000000000000002
0x00007f7fef418aa0:   00007f7fef418af0 00007f7fefa08eb3
0x00007f7fef418ab0:   0000000000000000 00007f7f7001bce8 

Instructions: (pc=0x00007f7ff024d1b6)
0x00007f7ff024d0b6:   b8 0f 85 bb 00 00 00 0f b7 77 04 0f 1f 80 00 00
0x00007f7ff024d0c6:   00 00 44 0f b7 fe 45 85 ff 74 aa eb 95 0f 1f 44
0x00007f7ff024d0d6:   00 00 4c 8b b1 18 02 00 00 48 89 55 b8 48 89 4d
0x00007f7ff024d0e6:   c0 49 8b 46 18 49 8b 5e 10 4d 8b 66 20 48 89 45
0x00007f7ff024d0f6:   c8 49 8b 46 28 48 89 45 b0 e8 5c ba fe ff 41 8d
0x00007f7ff024d106:   77 fe 48 8d 78 01 e8 6f 02 ff ff 48 8b 4d c0 48
0x00007f7ff024d116:   8b 55 b8 4c 89 ee 48 89 c7 49 89 c7 e8 19 e2 ff
0x00007f7ff024d126:   ff 49 89 c5 4d 85 ff 74 08 4c 89 ff e8 39 c7 fe
0x00007f7ff024d136:   ff 48 83 3b 00 74 14 48 8b 75 b0 4c 89 f7 e8 e7
0x00007f7ff024d146:   50 66 ff 48 89 df e8 0f 47 66 ff 66 48 0f 6e c3
0x00007f7ff024d156:   4d 89 66 20 4c 89 e8 0f 16 45 c8 41 0f 11 46 10
0x00007f7ff024d166:   48 83 c4 28 5b 41 5c 41 5d 41 5e 41 5f 5d c3 0f
0x00007f7ff024d176:   1f 00 48 83 c4 28 4c 89 ee 5b 41 5c 41 5d 41 5e
0x00007f7ff024d186:   41 5f 5d e9 72 fd ff ff 66 90 55 48 89 e5 41 57
0x00007f7ff024d196:   49 89 d7 41 56 49 89 f6 41 55 49 89 fd 41 54 53
0x00007f7ff024d1a6:   4c 89 c3 48 83 ec 48 48 89 4d c0 e8 ca 5b 00 00
0x00007f7ff024d1b6:   4c 8b 40 18 49 89 c4 41 0f b7 70 04 66 83 fe 01
0x00007f7ff024d1c6:   0f 86 e4 00 00 00 41 80 78 06 5b 0f 84 b9 00 00
0x00007f7ff024d1d6:   00 8d 46 ff 48 98 41 80 7c 00 06 3b 75 0c 41 80
0x00007f7ff024d1e6:   78 06 4c 0f 84 d1 00 00 00 90 4c 89 c7 48 89 d9
0x00007f7ff024d1f6:   4c 89 fa 4c 89 f6 4c 89 45 c8 e8 3b e1 ff ff 4c
0x00007f7ff024d206:   8b 45 c8 48 83 7b 08 00 75 05 48 85 c0 75 1f 48
0x00007f7ff024d216:   89 da be 01 00 00 00 4c 89 c7 48 89 45 c8 e8 e7
0x00007f7ff024d226:   87 ff ff 48 83 7b 08 00 48 8b 45 c8 75 05 49 39
0x00007f7ff024d236:   c4 74 17 48 83 c4 48 31 c0 5b 41 5c 41 5d 41 5e
0x00007f7ff024d246:   41 5f 5d c3 66 0f 1f 44 00 00 4c 89 e6 4c 89 ef
0x00007f7ff024d256:   e8 25 95 a9 ff 4c 8b 45 c0 31 c9 49 89 d9 4c 89
0x00007f7ff024d266:   fa 4c 89 f6 4c 89 ef e8 9e f3 ff ff 48 83 7b 08
0x00007f7ff024d276:   00 75 c0 48 83 c4 48 5b 41 5c 41 5d 41 5e 41 5f
0x00007f7ff024d286:   5d c3 0f 1f 84 00 00 00 00 00 4c 89 c7 4c 89 45
0x00007f7ff024d296:   c8 e8 44 9b f7 ff 4c 8b 45 c8 84 c0 0f 85 f8 00
0x00007f7ff024d2a6:   00 00 41 0f b7 70 04 0f 1f 00 85 f6 0f 84 38 ff 


Stack slot to memory mapping:
stack at sp + 0 slots: 0x00007f7fe8025890 is a thread
stack at sp + 1 slots: 0x00007f7f7001bcd8 points into unknown readable memory: 0x00000007ffb56068 | 68 60 b5 ff 07 00 00 00
stack at sp + 2 slots: 0x0 is NULL
stack at sp + 3 slots: 0x0000000000000002 is an unknown value
stack at sp + 4 slots: 0x00007f7fef418af0 is pointing into the stack for thread: 0x00007f7fe8025890
stack at sp + 5 slots: 0x00007f7fefa08eb3: <offset 0x000000000050ceb3> in /home/steven/tmpjdk/jdk-18.0.1/lib/server/libjvm.so at 0x00007f7fef4fc000
stack at sp + 6 slots: 0x0 is NULL
stack at sp + 7 slots: 0x00007f7f7001bce8 points into unknown readable memory: 0x000000062a039138 | 38 91 03 2a 06 00 00 00


---------------  P R O C E S S  ---------------

Threads class SMR info:
_java_thread_list=0x00007f7f7c086d50, length=12, elements={
0x00007f7fe8025890, 0x00007f7fe80fd5b0, 0x00007f7fe80fea50, 0x00007f7fe8104610,
0x00007f7fe81059b0, 0x00007f7fe8106db0, 0x00007f7fe81087d0, 0x00007f7fe8109cf0,
0x00007f7fe810b150, 0x00007f7fe8112c00, 0x00007f7fe81163d0, 0x00007f7f7c085db0
}

Java Threads: ( => current thread )
=>0x00007f7fe8025890 JavaThread ""main"" [_thread_in_vm, id=159585, stack(0x00007f7fef31b000,0x00007f7fef41b000)]
  0x00007f7fe80fd5b0 JavaThread ""Reference Handler"" daemon [_thread_blocked, id=159592, stack(0x00007f7fbd033000,0x00007f7fbd133000)]
  0x00007f7fe80fea50 JavaThread ""Finalizer"" daemon [_thread_blocked, id=159593, stack(0x00007f7fbcf33000,0x00007f7fbd033000)]
  0x00007f7fe8104610 JavaThread ""Signal Dispatcher"" daemon [_thread_blocked, id=159594, stack(0x00007f7fbce33000,0x00007f7fbcf33000)]
  0x00007f7fe81059b0 JavaThread ""Service Thread"" daemon [_thread_blocked, id=159595, stack(0x00007f7fbcd33000,0x00007f7fbce33000)]
  0x00007f7fe8106db0 JavaThread ""Monitor Deflation Thread"" daemon [_thread_blocked, id=159596, stack(0x00007f7fbcc33000,0x00007f7fbcd33000)]
  0x00007f7fe81087d0 JavaThread ""C2 CompilerThread0"" daemon [_thread_blocked, id=159597, stack(0x00007f7fbcb33000,0x00007f7fbcc33000)]
  0x00007f7fe8109cf0 JavaThread ""C1 CompilerThread0"" daemon [_thread_blocked, id=159598, stack(0x00007f7fbca33000,0x00007f7fbcb33000)]
  0x00007f7fe810b150 JavaThread ""Sweeper thread"" daemon [_thread_blocked, id=159599, stack(0x00007f7fbc933000,0x00007f7fbca33000)]
  0x00007f7fe8112c00 JavaThread ""Notification Thread"" daemon [_thread_blocked, id=159600, stack(0x00007f7fbc833000,0x00007f7fbc933000)]
  0x00007f7fe81163d0 JavaThread ""Common-Cleaner"" daemon [_thread_blocked, id=159602, stack(0x00007f7fbc631000,0x00007f7fbc731000)]
  0x00007f7f7c085db0 JavaThread ""C1 CompilerThread1"" daemon [_thread_blocked, id=159603, stack(0x00007f7fbc4f0000,0x00007f7fbc5f0000)]

Other Threads:
  0x00007f7fe80fa500 VMThread ""VM Thread"" [stack: 0x00007f7fbd135000,0x00007f7fbd235000] [id=159591]
  0x00007f7fe8114530 WatcherThread ""VM Periodic Task Thread"" [stack: 0x00007f7fbc733000,0x00007f7fbc833000] [id=159601]
  0x00007f7fe80592a0 WorkerThread ""GC Thread#0"" [stack: 0x00007f7fec92a000,0x00007f7feca2a000] [id=159586]
  0x00007f7fe806a360 ConcurrentGCThread ""G1 Main Marker"" [stack: 0x00007f7fec828000,0x00007f7fec928000] [id=159587]
  0x00007f7fe806b260 WorkerThread ""G1 Conc#0"" [stack: 0x00007f7fec726000,0x00007f7fec826000] [id=159588]
  0x00007f7fe80cc2b0 ConcurrentGCThread ""G1 Refine#0"" [stack: 0x00007f7fbd526000,0x00007f7fbd626000] [id=159589]
  0x00007f7fe80cd180 ConcurrentGCThread ""G1 Service"" [stack: 0x00007f7fbd424000,0x00007f7fbd524000] [id=159590]

Threads with active compile tasks:

VM state: not at safepoint (normal execution)

VM Mutex/Monitor currently owned by a thread: None

Heap address: 0x000000060ac00000, size: 8020 MB, Compressed Oops mode: Zero based, Oop shift amount: 3

CDS archive(s) mapped at: [0x0000000800000000-0x0000000800baf000-0x0000000800bfe000), size 12574720, SharedBaseAddress: 0x0000000800000000, ArchiveRelocationMode: 0.
Compressed class space mapped at: 0x0000000800c00000-0x0000000840c00000, reserved size: 1073741824
Narrow klass base: 0x0000000800000000, Narrow klass shift: 0, Narrow klass range: 0x100000000

GC Precious Log:
 CardTable entry size: 512
 Card Set container configuration: InlinePtr #cards 4 size 8 Array Of Cards #cards 32 size 80 Howl #buckets 8 coarsen threshold 7372 Howl Bitmap #cards 1024 size 144 coarsen threshold 921 Card regions per heap region 1 cards per card region 8192
 CPUs: 16 total, 16 available
 Memory: 32073M
 Large Page Support: Disabled
 NUMA Support: Disabled
 Compressed Oops: Enabled (Zero based)
 Heap Region Size: 4M
 Heap Min Capacity: 8M
 Heap Initial Capacity: 504M
 Heap Max Capacity: 8020M
 Pre-touch: Disabled
 Parallel Workers: 13
 Concurrent Workers: 3
 Concurrent Refinement Workers: 13
 Periodic GC: Disabled

Heap:
 garbage-first heap   total 524288K, used 4012K [0x000000060ac00000, 0x0000000800000000)
  region size 4096K, 1 young (4096K), 0 survivors (0K)
 Metaspace       used 166K, committed 384K, reserved 1114112K
  class space    used 10K, committed 128K, reserved 1048576K

Heap Regions: E=young(eden), S=young(survivor), O=old, HS=humongous(starts), HC=humongous(continues), CS=collection set, F=free, OA=open archive, CA=closed archive, TAMS=top-at-mark-start (previous, next)
|   0|0x000000060ac00000, 0x000000060ac00000, 0x000000060b000000|  0%| F|  |TAMS 0x000000060ac00000, 0x000000060ac00000| Untracked 
|   1|0x000000060b000000, 0x000000060b000000, 0x000000060b400000|  0%| F|  |TAMS 0x000000060b000000, 0x000000060b000000| Untracked 
|   2|0x000000060b400000, 0x000000060b400000, 0x000000060b800000|  0%| F|  |TAMS 0x000000060b400000, 0x000000060b400000| Untracked 
|   3|0x000000060b800000, 0x000000060b800000, 0x000000060bc00000|  0%| F|  |TAMS 0x000000060b800000, 0x000000060b800000| Untracked 
|   4|0x000000060bc00000, 0x000000060bc00000, 0x000000060c000000|  0%| F|  |TAMS 0x000000060bc00000, 0x000000060bc00000| Untracked 
|   5|0x000000060c000000, 0x000000060c000000, 0x000000060c400000|  0%| F|  |TAMS 0x000000060c000000, 0x000000060c000000| Untracked 
|   6|0x000000060c400000, 0x000000060c400000, 0x000000060c800000|  0%| F|  |TAMS 0x000000060c400000, 0x000000060c400000| Untracked 
|   7|0x000000060c800000, 0x000000060c800000, 0x000000060cc00000|  0%| F|  |TAMS 0x000000060c800000, 0x000000060c800000| Untracked 
|   8|0x000000060cc00000, 0x000000060cc00000, 0x000000060d000000|  0%| F|  |TAMS 0x000000060cc00000, 0x000000060cc00000| Untracked 
|   9|0x000000060d000000, 0x000000060d000000, 0x000000060d400000|  0%| F|  |TAMS 0x000000060d000000, 0x000000060d000000| Untracked 
|  10|0x000000060d400000, 0x000000060d400000, 0x000000060d800000|  0%| F|  |TAMS 0x000000060d400000, 0x000000060d400000| Untracked 
|  11|0x000000060d800000, 0x000000060d800000, 0x000000060dc00000|  0%| F|  |TAMS 0x000000060d800000, 0x000000060d800000| Untracked 
|  12|0x000000060dc00000, 0x000000060dc00000, 0x000000060e000000|  0%| F|  |TAMS 0x000000060dc00000, 0x000000060dc00000| Untracked 
|  13|0x000000060e000000, 0x000000060e000000, 0x000000060e400000|  0%| F|  |TAMS 0x000000060e000000, 0x000000060e000000| Untracked 
|  14|0x000000060e400000, 0x000000060e400000, 0x000000060e800000|  0%| F|  |TAMS 0x000000060e400000, 0x000000060e400000| Untracked 
|  15|0x000000060e800000, 0x000000060e800000, 0x000000060ec00000|  0%| F|  |TAMS 0x000000060e800000, 0x000000060e800000| Untracked 
|  16|0x000000060ec00000, 0x000000060ec00000, 0x000000060f000000|  0%| F|  |TAMS 0x000000060ec00000, 0x000000060ec00000| Untracked 
|  17|0x000000060f000000, 0x000000060f000000, 0x000000060f400000|  0%| F|  |TAMS 0x000000060f000000, 0x000000060f000000| Untracked 
|  18|0x000000060f400000, 0x000000060f400000, 0x000000060f800000|  0%| F|  |TAMS 0x000000060f400000, 0x000000060f400000| Untracked 
|  19|0x000000060f800000, 0x000000060f800000, 0x000000060fc00000|  0%| F|  |TAMS 0x000000060f800000, 0x000000060f800000| Untracked 
|  20|0x000000060fc00000, 0x000000060fc00000, 0x0000000610000000|  0%| F|  |TAMS 0x000000060fc00000, 0x000000060fc00000| Untracked 
|  21|0x0000000610000000, 0x0000000610000000, 0x0000000610400000|  0%| F|  |TAMS 0x0000000610000000, 0x0000000610000000| Untracked 
|  22|0x0000000610400000, 0x0000000610400000, 0x0000000610800000|  0%| F|  |TAMS 0x0000000610400000, 0x0000000610400000| Untracked 
|  23|0x0000000610800000, 0x0000000610800000, 0x0000000610c00000|  0%| F|  |TAMS 0x0000000610800000, 0x0000000610800000| Untracked 
|  24|0x0000000610c00000, 0x0000000610c00000, 0x0000000611000000|  0%| F|  |TAMS 0x0000000610c00000, 0x0000000610c00000| Untracked 
|  25|0x0000000611000000, 0x0000000611000000, 0x0000000611400000|  0%| F|  |TAMS 0x0000000611000000, 0x0000000611000000| Untracked 
|  26|0x0000000611400000, 0x0000000611400000, 0x0000000611800000|  0%| F|  |TAMS 0x0000000611400000, 0x0000000611400000| Untracked 
|  27|0x0000000611800000, 0x0000000611800000, 0x0000000611c00000|  0%| F|  |TAMS 0x0000000611800000, 0x0000000611800000| Untracked 
|  28|0x0000000611c00000, 0x0000000611c00000, 0x0000000612000000|  0%| F|  |TAMS 0x0000000611c00000, 0x0000000611c00000| Untracked 
|  29|0x0000000612000000, 0x0000000612000000, 0x0000000612400000|  0%| F|  |TAMS 0x0000000612000000, 0x0000000612000000| Untracked 
|  30|0x0000000612400000, 0x0000000612400000, 0x0000000612800000|  0%| F|  |TAMS 0x0000000612400000, 0x0000000612400000| Untracked 
|  31|0x0000000612800000, 0x0000000612800000, 0x0000000612c00000|  0%| F|  |TAMS 0x0000000612800000, 0x0000000612800000| Untracked 
|  32|0x0000000612c00000, 0x0000000612c00000, 0x0000000613000000|  0%| F|  |TAMS 0x0000000612c00000, 0x0000000612c00000| Untracked 
|  33|0x0000000613000000, 0x0000000613000000, 0x0000000613400000|  0%| F|  |TAMS 0x0000000613000000, 0x0000000613000000| Untracked 
|  34|0x0000000613400000, 0x0000000613400000, 0x0000000613800000|  0%| F|  |TAMS 0x0000000613400000, 0x0000000613400000| Untracked 
|  35|0x0000000613800000, 0x0000000613800000, 0x0000000613c00000|  0%| F|  |TAMS 0x0000000613800000, 0x0000000613800000| Untracked 
|  36|0x0000000613c00000, 0x0000000613c00000, 0x0000000614000000|  0%| F|  |TAMS 0x0000000613c00000, 0x0000000613c00000| Untracked 
|  37|0x0000000614000000, 0x0000000614000000, 0x0000000614400000|  0%| F|  |TAMS 0x0000000614000000, 0x0000000614000000| Untracked 
|  38|0x0000000614400000, 0x0000000614400000, 0x0000000614800000|  0%| F|  |TAMS 0x0000000614400000, 0x0000000614400000| Untracked 
|  39|0x0000000614800000, 0x0000000614800000, 0x0000000614c00000|  0%| F|  |TAMS 0x0000000614800000, 0x0000000614800000| Untracked 
|  40|0x0000000614c00000, 0x0000000614c00000, 0x0000000615000000|  0%| F|  |TAMS 0x0000000614c00000, 0x0000000614c00000| Untracked 
|  41|0x0000000615000000, 0x0000000615000000, 0x0000000615400000|  0%| F|  |TAMS 0x0000000615000000, 0x0000000615000000| Untracked 
|  42|0x0000000615400000, 0x0000000615400000, 0x0000000615800000|  0%| F|  |TAMS 0x0000000615400000, 0x0000000615400000| Untracked 
|  43|0x0000000615800000, 0x0000000615800000, 0x0000000615c00000|  0%| F|  |TAMS 0x0000000615800000, 0x0000000615800000| Untracked 
|  44|0x0000000615c00000, 0x0000000615c00000, 0x0000000616000000|  0%| F|  |TAMS 0x0000000615c00000, 0x0000000615c00000| Untracked 
|  45|0x0000000616000000, 0x0000000616000000, 0x0000000616400000|  0%| F|  |TAMS 0x0000000616000000, 0x0000000616000000| Untracked 
|  46|0x0000000616400000, 0x0000000616400000, 0x0000000616800000|  0%| F|  |TAMS 0x0000000616400000, 0x0000000616400000| Untracked 
|  47|0x0000000616800000, 0x0000000616800000, 0x0000000616c00000|  0%| F|  |TAMS 0x0000000616800000, 0x0000000616800000| Untracked 
|  48|0x0000000616c00000, 0x0000000616c00000, 0x0000000617000000|  0%| F|  |TAMS 0x0000000616c00000, 0x0000000616c00000| Untracked 
|  49|0x0000000617000000, 0x0000000617000000, 0x0000000617400000|  0%| F|  |TAMS 0x0000000617000000, 0x0000000617000000| Untracked 
|  50|0x0000000617400000, 0x0000000617400000, 0x0000000617800000|  0%| F|  |TAMS 0x0000000617400000, 0x0000000617400000| Untracked 
|  51|0x0000000617800000, 0x0000000617800000, 0x0000000617c00000|  0%| F|  |TAMS 0x0000000617800000, 0x0000000617800000| Untracked 
|  52|0x0000000617c00000, 0x0000000617c00000, 0x0000000618000000|  0%| F|  |TAMS 0x0000000617c00000, 0x0000000617c00000| Untracked 
|  53|0x0000000618000000, 0x0000000618000000, 0x0000000618400000|  0%| F|  |TAMS 0x0000000618000000, 0x0000000618000000| Untracked 
|  54|0x0000000618400000, 0x0000000618400000, 0x0000000618800000|  0%| F|  |TAMS 0x0000000618400000, 0x0000000618400000| Untracked 
|  55|0x0000000618800000, 0x0000000618800000, 0x0000000618c00000|  0%| F|  |TAMS 0x0000000618800000, 0x0000000618800000| Untracked 
|  56|0x0000000618c00000, 0x0000000618c00000, 0x0000000619000000|  0%| F|  |TAMS 0x0000000618c00000, 0x0000000618c00000| Untracked 
|  57|0x0000000619000000, 0x0000000619000000, 0x0000000619400000|  0%| F|  |TAMS 0x0000000619000000, 0x0000000619000000| Untracked 
|  58|0x0000000619400000, 0x0000000619400000, 0x0000000619800000|  0%| F|  |TAMS 0x0000000619400000, 0x0000000619400000| Untracked 
|  59|0x0000000619800000, 0x0000000619800000, 0x0000000619c00000|  0%| F|  |TAMS 0x0000000619800000, 0x0000000619800000| Untracked 
|  60|0x0000000619c00000, 0x0000000619c00000, 0x000000061a000000|  0%| F|  |TAMS 0x0000000619c00000, 0x0000000619c00000| Untracked 
|  61|0x000000061a000000, 0x000000061a000000, 0x000000061a400000|  0%| F|  |TAMS 0x000000061a000000, 0x000000061a000000| Untracked 
|  62|0x000000061a400000, 0x000000061a400000, 0x000000061a800000|  0%| F|  |TAMS 0x000000061a400000, 0x000000061a400000| Untracked 
|  63|0x000000061a800000, 0x000000061a800000, 0x000000061ac00000|  0%| F|  |TAMS 0x000000061a800000, 0x000000061a800000| Untracked 
|  64|0x000000061ac00000, 0x000000061ac00000, 0x000000061b000000|  0%| F|  |TAMS 0x000000061ac00000, 0x000000061ac00000| Untracked 
|  65|0x000000061b000000, 0x000000061b000000, 0x000000061b400000|  0%| F|  |TAMS 0x000000061b000000, 0x000000061b000000| Untracked 
|  66|0x000000061b400000, 0x000000061b400000, 0x000000061b800000|  0%| F|  |TAMS 0x000000061b400000, 0x000000061b400000| Untracked 
|  67|0x000000061b800000, 0x000000061b800000, 0x000000061bc00000|  0%| F|  |TAMS 0x000000061b800000, 0x000000061b800000| Untracked 
|  68|0x000000061bc00000, 0x000000061bc00000, 0x000000061c000000|  0%| F|  |TAMS 0x000000061bc00000, 0x000000061bc00000| Untracked 
|  69|0x000000061c000000, 0x000000061c000000, 0x000000061c400000|  0%| F|  |TAMS 0x000000061c000000, 0x000000061c000000| Untracked 
|  70|0x000000061c400000, 0x000000061c400000, 0x000000061c800000|  0%| F|  |TAMS 0x000000061c400000, 0x000000061c400000| Untracked 
|  71|0x000000061c800000, 0x000000061c800000, 0x000000061cc00000|  0%| F|  |TAMS 0x000000061c800000, 0x000000061c800000| Untracked 
|  72|0x000000061cc00000, 0x000000061cc00000, 0x000000061d000000|  0%| F|  |TAMS 0x000000061cc00000, 0x000000061cc00000| Untracked 
|  73|0x000000061d000000, 0x000000061d000000, 0x000000061d400000|  0%| F|  |TAMS 0x000000061d000000, 0x000000061d000000| Untracked 
|  74|0x000000061d400000, 0x000000061d400000, 0x000000061d800000|  0%| F|  |TAMS 0x000000061d400000, 0x000000061d400000| Untracked 
|  75|0x000000061d800000, 0x000000061d800000, 0x000000061dc00000|  0%| F|  |TAMS 0x000000061d800000, 0x000000061d800000| Untracked 
|  76|0x000000061dc00000, 0x000000061dc00000, 0x000000061e000000|  0%| F|  |TAMS 0x000000061dc00000, 0x000000061dc00000| Untracked 
|  77|0x000000061e000000, 0x000000061e000000, 0x000000061e400000|  0%| F|  |TAMS 0x000000061e000000, 0x000000061e000000| Untracked 
|  78|0x000000061e400000, 0x000000061e400000, 0x000000061e800000|  0%| F|  |TAMS 0x000000061e400000, 0x000000061e400000| Untracked 
|  79|0x000000061e800000, 0x000000061e800000, 0x000000061ec00000|  0%| F|  |TAMS 0x000000061e800000, 0x000000061e800000| Untracked 
|  80|0x000000061ec00000, 0x000000061ec00000, 0x000000061f000000|  0%| F|  |TAMS 0x000000061ec00000, 0x000000061ec00000| Untracked 
|  81|0x000000061f000000, 0x000000061f000000, 0x000000061f400000|  0%| F|  |TAMS 0x000000061f000000, 0x000000061f000000| Untracked 
|  82|0x000000061f400000, 0x000000061f400000, 0x000000061f800000|  0%| F|  |TAMS 0x000000061f400000, 0x000000061f400000| Untracked 
|  83|0x000000061f800000, 0x000000061f800000, 0x000000061fc00000|  0%| F|  |TAMS 0x000000061f800000, 0x000000061f800000| Untracked 
|  84|0x000000061fc00000, 0x000000061fc00000, 0x0000000620000000|  0%| F|  |TAMS 0x000000061fc00000, 0x000000061fc00000| Untracked 
|  85|0x0000000620000000, 0x0000000620000000, 0x0000000620400000|  0%| F|  |TAMS 0x0000000620000000, 0x0000000620000000| Untracked 
|  86|0x0000000620400000, 0x0000000620400000, 0x0000000620800000|  0%| F|  |TAMS 0x0000000620400000, 0x0000000620400000| Untracked 
|  87|0x0000000620800000, 0x0000000620800000, 0x0000000620c00000|  0%| F|  |TAMS 0x0000000620800000, 0x0000000620800000| Untracked 
|  88|0x0000000620c00000, 0x0000000620c00000, 0x0000000621000000|  0%| F|  |TAMS 0x0000000620c00000, 0x0000000620c00000| Untracked 
|  89|0x0000000621000000, 0x0000000621000000, 0x0000000621400000|  0%| F|  |TAMS 0x0000000621000000, 0x0000000621000000| Untracked 
|  90|0x0000000621400000, 0x0000000621400000, 0x0000000621800000|  0%| F|  |TAMS 0x0000000621400000, 0x0000000621400000| Untracked 
|  91|0x0000000621800000, 0x0000000621800000, 0x0000000621c00000|  0%| F|  |TAMS 0x0000000621800000, 0x0000000621800000| Untracked 
|  92|0x0000000621c00000, 0x0000000621c00000, 0x0000000622000000|  0%| F|  |TAMS 0x0000000621c00000, 0x0000000621c00000| Untracked 
|  93|0x0000000622000000, 0x0000000622000000, 0x0000000622400000|  0%| F|  |TAMS 0x0000000622000000, 0x0000000622000000| Untracked 
|  94|0x0000000622400000, 0x0000000622400000, 0x0000000622800000|  0%| F|  |TAMS 0x0000000622400000, 0x0000000622400000| Untracked 
|  95|0x0000000622800000, 0x0000000622800000, 0x0000000622c00000|  0%| F|  |TAMS 0x0000000622800000, 0x0000000622800000| Untracked 
|  96|0x0000000622c00000, 0x0000000622c00000, 0x0000000623000000|  0%| F|  |TAMS 0x0000000622c00000, 0x0000000622c00000| Untracked 
|  97|0x0000000623000000, 0x0000000623000000, 0x0000000623400000|  0%| F|  |TAMS 0x0000000623000000, 0x0000000623000000| Untracked 
|  98|0x0000000623400000, 0x0000000623400000, 0x0000000623800000|  0%| F|  |TAMS 0x0000000623400000, 0x0000000623400000| Untracked 
|  99|0x0000000623800000, 0x0000000623800000, 0x0000000623c00000|  0%| F|  |TAMS 0x0000000623800000, 0x0000000623800000| Untracked 
| 100|0x0000000623c00000, 0x0000000623c00000, 0x0000000624000000|  0%| F|  |TAMS 0x0000000623c00000, 0x0000000623c00000| Untracked 
| 101|0x0000000624000000, 0x0000000624000000, 0x0000000624400000|  0%| F|  |TAMS 0x0000000624000000, 0x0000000624000000| Untracked 
| 102|0x0000000624400000, 0x0000000624400000, 0x0000000624800000|  0%| F|  |TAMS 0x0000000624400000, 0x0000000624400000| Untracked 
| 103|0x0000000624800000, 0x0000000624800000, 0x0000000624c00000|  0%| F|  |TAMS 0x0000000624800000, 0x0000000624800000| Untracked 
| 104|0x0000000624c00000, 0x0000000624c00000, 0x0000000625000000|  0%| F|  |TAMS 0x0000000624c00000, 0x0000000624c00000| Untracked 
| 105|0x0000000625000000, 0x0000000625000000, 0x0000000625400000|  0%| F|  |TAMS 0x0000000625000000, 0x0000000625000000| Untracked 
| 106|0x0000000625400000, 0x0000000625400000, 0x0000000625800000|  0%| F|  |TAMS 0x0000000625400000, 0x0000000625400000| Untracked 
| 107|0x0000000625800000, 0x0000000625800000, 0x0000000625c00000|  0%| F|  |TAMS 0x0000000625800000, 0x0000000625800000| Untracked 
| 108|0x0000000625c00000, 0x0000000625c00000, 0x0000000626000000|  0%| F|  |TAMS 0x0000000625c00000, 0x0000000625c00000| Untracked 
| 109|0x0000000626000000, 0x0000000626000000, 0x0000000626400000|  0%| F|  |TAMS 0x0000000626000000, 0x0000000626000000| Untracked 
| 110|0x0000000626400000, 0x0000000626400000, 0x0000000626800000|  0%| F|  |TAMS 0x0000000626400000, 0x0000000626400000| Untracked 
| 111|0x0000000626800000, 0x0000000626800000, 0x0000000626c00000|  0%| F|  |TAMS 0x0000000626800000, 0x0000000626800000| Untracked 
| 112|0x0000000626c00000, 0x0000000626c00000, 0x0000000627000000|  0%| F|  |TAMS 0x0000000626c00000, 0x0000000626c00000| Untracked 
| 113|0x0000000627000000, 0x0000000627000000, 0x0000000627400000|  0%| F|  |TAMS 0x0000000627000000, 0x0000000627000000| Untracked 
| 114|0x0000000627400000, 0x0000000627400000, 0x0000000627800000|  0%| F|  |TAMS 0x0000000627400000, 0x0000000627400000| Untracked 
| 115|0x0000000627800000, 0x0000000627800000, 0x0000000627c00000|  0%| F|  |TAMS 0x0000000627800000, 0x0000000627800000| Untracked 
| 116|0x0000000627c00000, 0x0000000627c00000, 0x0000000628000000|  0%| F|  |TAMS 0x0000000627c00000, 0x0000000627c00000| Untracked 
| 117|0x0000000628000000, 0x0000000628000000, 0x0000000628400000|  0%| F|  |TAMS 0x0000000628000000, 0x0000000628000000| Untracked 
| 118|0x0000000628400000, 0x0000000628400000, 0x0000000628800000|  0%| F|  |TAMS 0x0000000628400000, 0x0000000628400000| Untracked 
| 119|0x0000000628800000, 0x0000000628800000, 0x0000000628c00000|  0%| F|  |TAMS 0x0000000628800000, 0x0000000628800000| Untracked 
| 120|0x0000000628c00000, 0x0000000628c00000, 0x0000000629000000|  0%| F|  |TAMS 0x0000000628c00000, 0x0000000628c00000| Untracked 
| 121|0x0000000629000000, 0x0000000629000000, 0x0000000629400000|  0%| F|  |TAMS 0x0000000629000000, 0x0000000629000000| Untracked 
| 122|0x0000000629400000, 0x0000000629400000, 0x0000000629800000|  0%| F|  |TAMS 0x0000000629400000, 0x0000000629400000| Untracked 
| 123|0x0000000629800000, 0x0000000629800000, 0x0000000629c00000|  0%| F|  |TAMS 0x0000000629800000, 0x0000000629800000| Untracked 
| 124|0x0000000629c00000, 0x0000000629c00000, 0x000000062a000000|  0%| F|  |TAMS 0x0000000629c00000, 0x0000000629c00000| Untracked 
| 125|0x000000062a000000, 0x000000062a0f5c40, 0x000000062a400000| 24%| E|  |TAMS 0x000000062a000000, 0x000000062a000000| Complete 
|2003|0x00000007ff800000, 0x00000007ffb75000, 0x00000007ffc00000| 86%|OA|  |TAMS 0x00000007ff800000, 0x00000007ff800000| Untracked 
|2004|0x00000007ffc00000, 0x00000007ffc76000, 0x0000000800000000| 11%|CA|  |TAMS 0x00000007ffc00000, 0x00000007ffc00000| Untracked 

Card table byte_map: [0x00007f7fd0676000,0x00007f7fd1620000] _byte_map_base: 0x00007f7fcd620000

Marking Bits (Prev, Next): (CMBitMap*) 0x00007f7fe8059d10, (CMBitMap*) 0x00007f7fe8059d50
 Prev Bits: [0x00007f7fc797c000, 0x00007f7fcf6cc000)
 Next Bits: [0x00007f7fbfc2c000, 0x00007f7fc797c000)

Polling page: 0x00007f7ff09e5000

Metaspace:

Usage:
  Non-class:    156.45 KB used.
      Class:     10.15 KB used.
       Both:    166.59 KB used.

Virtual space:
  Non-class space:       64.00 MB reserved,     256.00 KB ( <1%) committed,  1 nodes.
      Class space:        1.00 GB reserved,     128.00 KB ( <1%) committed,  1 nodes.
             Both:        1.06 GB reserved,     384.00 KB ( <1%) committed. 

Chunk freelists:
   Non-Class:  3.98 MB
       Class:  3.74 MB
        Both:  7.72 MB

MaxMetaspaceSize: unlimited
CompressedClassSpaceSize: 1.00 GB
Initial GC threshold: 21.00 MB
Current GC threshold: 21.00 MB
CDS: on
MetaspaceReclaimPolicy: balanced
 - commit_granule_bytes: 65536.
 - commit_granule_words: 8192.
 - virtual_space_node_default_size: 8388608.
 - enlarge_chunks_in_place: 1.
 - new_chunks_are_fully_committed: 0.
 - uncommit_free_chunks: 1.
 - use_allocation_guard: 0.


Internal statistics:

num_allocs_failed_limit: 0.
num_arena_births: 4.
num_arena_deaths: 0.
num_vsnodes_births: 2.
num_vsnodes_deaths: 0.
num_space_committed: 6.
num_space_uncommitted: 0.
num_chunks_returned_to_freelist: 0.
num_chunks_taken_from_freelist: 9.
num_chunk_merges: 0.
num_chunk_splits: 4.
num_chunks_enlarged: 3.
num_inconsistent_stats: 0.

CodeHeap 'non-profiled nmethods': size=119168Kb used=9Kb max_used=9Kb free=119158Kb
 bounds [0x00007f7fd91c0000, 0x00007f7fd9430000, 0x00007f7fe0620000]
CodeHeap 'profiled nmethods': size=119164Kb used=44Kb max_used=44Kb free=119120Kb
 bounds [0x00007f7fd1d61000, 0x00007f7fd1fd1000, 0x00007f7fd91c0000]
CodeHeap 'non-nmethods': size=7428Kb used=1658Kb max_used=1658Kb free=5769Kb
 bounds [0x00007f7fd1620000, 0x00007f7fd1890000, 0x00007f7fd1d61000]
 total_blobs=403 nmethods=41 adapters=276
 compilation: enabled
              stopped_count=0, restarted_count=0
 full_count=0

Compilation events (20 events):
Event: 0.028 Thread 0x00007f7fe8109cf0 nmethod 26 0x00007f7fd1d69910 code [0x00007f7fd1d69ac0, 0x00007f7fd1d69c90]
Event: 0.028 Thread 0x00007f7fe8109cf0   27       3       java.lang.String::checkIndex (10 bytes)
Event: 0.028 Thread 0x00007f7fe8109cf0 nmethod 27 0x00007f7fd1d69d90 code [0x00007f7fd1d69f20, 0x00007f7fd1d6a050]
Event: 0.028 Thread 0x00007f7f7c085db0 nmethod 25 0x00007f7fd1d6a110 code [0x00007f7fd1d6a2e0, 0x00007f7fd1d6a680]
Event: 0.029 Thread 0x00007f7f7c085db0   29       3       java.lang.Math::min (11 bytes)
Event: 0.029 Thread 0x00007f7f7c085db0 nmethod 29 0x00007f7fd1d6a810 code [0x00007f7fd1d6a9a0, 0x00007f7fd1d6aad0]
Event: 0.029 Thread 0x00007f7f7c085db0   30       3       java.lang.StringLatin1::canEncode (13 bytes)
Event: 0.029 Thread 0x00007f7f7c085db0 nmethod 30 0x00007f7fd1d6ab90 code [0x00007f7fd1d6ad20, 0x00007f7fd1d6ae70]
Event: 0.029 Thread 0x00007f7fe8109cf0   31       3       java.lang.StringLatin1::indexOfChar (33 bytes)
Event: 0.029 Thread 0x00007f7fe8109cf0 nmethod 31 0x00007f7fd1d6af10 code [0x00007f7fd1d6b0c0, 0x00007f7fd1d6b2f0]
Event: 0.030 Thread 0x00007f7f7c085db0   32       3       java.lang.StringLatin1::hashCode (42 bytes)
Event: 0.030 Thread 0x00007f7f7c085db0 nmethod 32 0x00007f7fd1d6b410 code [0x00007f7fd1d6b5c0, 0x00007f7fd1d6b770]
Event: 0.030 Thread 0x00007f7fe8109cf0   33       3       java.util.concurrent.ConcurrentHashMap::spread (10 bytes)
Event: 0.031 Thread 0x00007f7fe8109cf0 nmethod 33 0x00007f7fd1d6b890 code [0x00007f7fd1d6ba20, 0x00007f7fd1d6bb10]
Event: 0.031 Thread 0x00007f7fe81087d0   34       4       java.lang.Object::<init> (1 bytes)
Event: 0.031 Thread 0x00007f7fe81087d0 nmethod 34 0x00007f7fd91c0e90 code [0x00007f7fd91c1000, 0x00007f7fd91c1078]
Event: 0.031 Thread 0x00007f7fe8109cf0   35       3       java.util.Objects::requireNonNull (14 bytes)
Event: 0.031 Thread 0x00007f7fe8109cf0 nmethod 35 0x00007f7fd1d6bb90 code [0x00007f7fd1d6bd40, 0x00007f7fd1d6bf20]
Event: 0.032 Thread 0x00007f7f7c085db0   38       1       java.lang.Enum::ordinal (5 bytes)
Event: 0.032 Thread 0x00007f7f7c085db0 nmethod 38 0x00007f7fd91c1890 code [0x00007f7fd91c1a20, 0x00007f7fd91c1af0]

GC Heap History (0 events):
No events

Deoptimization events (0 events):
No events

Classes loaded (2 events):
Event: 0.023 Loading class jdk/internal/vm/PostVMInitHook
Event: 0.023 Loading class jdk/internal/vm/PostVMInitHook done

Classes unloaded (0 events):
No events

Classes redefined (0 events):
No events

Internal exceptions (0 events):
No events

VM Operations (0 events):
No events

Events (20 events):
Event: 0.020 Protecting memory [0x00007f7fbce33000,0x00007f7fbce37000] with protection modes 0
Event: 0.021 Thread 0x00007f7fe81059b0 Thread added: 0x00007f7fe81059b0
Event: 0.021 Protecting memory [0x00007f7fbcd33000,0x00007f7fbcd37000] with protection modes 0
Event: 0.021 Thread 0x00007f7fe8106db0 Thread added: 0x00007f7fe8106db0
Event: 0.021 Protecting memory [0x00007f7fbcc33000,0x00007f7fbcc37000] with protection modes 0
Event: 0.021 Thread 0x00007f7fe81087d0 Thread added: 0x00007f7fe81087d0
Event: 0.021 Protecting memory [0x00007f7fbcb33000,0x00007f7fbcb37000] with protection modes 0
Event: 0.021 Thread 0x00007f7fe8109cf0 Thread added: 0x00007f7fe8109cf0
Event: 0.021 Protecting memory [0x00007f7fbca33000,0x00007f7fbca37000] with protection modes 0
Event: 0.021 Thread 0x00007f7fe810b150 Thread added: 0x00007f7fe810b150
Event: 0.021 Protecting memory [0x00007f7fbc933000,0x00007f7fbc937000] with protection modes 0
Event: 0.023 Thread 0x00007f7fe8112c00 Thread added: 0x00007f7fe8112c00
Event: 0.023 Protecting memory [0x00007f7fbc833000,0x00007f7fbc837000] with protection modes 0
Event: 0.024 Thread 0x00007f7fe81163d0 Thread added: 0x00007f7fe81163d0
Event: 0.024 Protecting memory [0x00007f7fbc631000,0x00007f7fbc635000] with protection modes 0
Event: 0.024 Loaded shared library /home/steven/tmpjdk/jdk-18.0.1/lib/libnio.so
Event: 0.026 Thread 0x00007f7f7c085db0 Thread added: 0x00007f7f7c085db0
Event: 0.026 Protecting memory [0x00007f7fbc4f0000,0x00007f7fbc4f4000] with protection modes 0
Event: 0.026 Loaded shared library /home/steven/tmpjdk/jdk-18.0.1/lib/libzip.so
Event: 0.028 Loaded shared library /home/steven/tmpjdk/jdk-18.0.1/lib/libverify.so


Dynamic libraries:
60ac00000-62a400000 rw-p 00000000 00:00 0 
62a400000-7ff800000 ---p 00000000 00:00 0 
7ff800000-7ffb00000 rw-p 00000000 00:00 0 
7ffb00000-7ffb75000 rw-p 00c5d000 fd:03 18158856                         /home/steven/tmpjdk/jdk-18.0.1/lib/server/classes.jsa
7ffb75000-7ffc00000 rw-p 00000000 00:00 0 
7ffc00000-7ffc76000 rw-p 00be7000 fd:03 18158856                         /home/steven/tmpjdk/jdk-18.0.1/lib/server/classes.jsa
7ffc76000-800000000 rw-p 00000000 00:00 0 
800000000-800449000 rw-p 00001000 fd:03 18158856                         /home/steven/tmpjdk/jdk-18.0.1/lib/server/classes.jsa
800449000-800baf000 r--p 0044a000 fd:03 18158856                         /home/steven/tmpjdk/jdk-18.0.1/lib/server/classes.jsa
800baf000-800bcf000 rw-p 00001000 fd:03 18138561                         /home/steven/tmp/test.jsa
800bcf000-800bfe000 r--p 00021000 fd:03 18138561                         /home/steven/tmp/test.jsa
800bfe000-800c00000 ---p 00000000 00:00 0 
800c00000-800c10000 rw-p 00000000 00:00 0 
800c10000-800c40000 ---p 00000000 00:00 0 
800c40000-800c50000 rw-p 00000000 00:00 0 
800c50000-840c00000 ---p 00000000 00:00 0 
557de5407000-557de5408000 r-xp 00000000 fd:03 18138569                   /home/steven/tmpjdk/jdk-18.0.1/bin/java
557de5409000-557de540a000 r--p 00001000 fd:03 18138569                   /home/steven/tmpjdk/jdk-18.0.1/bin/java
557de540a000-557de540b000 rw-p 00002000 fd:03 18138569                   /home/steven/tmpjdk/jdk-18.0.1/bin/java
557de58f1000-557de5938000 rw-p 00000000 00:00 0                          [heap]
7f7f60000000-7f7f60021000 rw-p 00000000 00:00 0 
7f7f60021000-7f7f64000000 ---p 00000000 00:00 0 
7f7f64000000-7f7f64032000 rw-p 00000000 00:00 0 
7f7f64032000-7f7f68000000 ---p 00000000 00:00 0 
7f7f68000000-7f7f68021000 rw-p 00000000 00:00 0 
7f7f68021000-7f7f6c000000 ---p 00000000 00:00 0 
7f7f6c000000-7f7f6c021000 rw-p 00000000 00:00 0 
7f7f6c021000-7f7f70000000 ---p 00000000 00:00 0 
7f7f70000000-7f7f70035000 rw-p 00000000 00:00 0 
7f7f70035000-7f7f74000000 ---p 00000000 00:00 0 
7f7f74000000-7f7f74021000 rw-p 00000000 00:00 0 
7f7f74021000-7f7f78000000 ---p 00000000 00:00 0 
7f7f78000000-7f7f78021000 rw-p 00000000 00:00 0 
7f7f78021000-7f7f7c000000 ---p 00000000 00:00 0 
7f7f7c000000-7f7f7c089000 rw-p 00000000 00:00 0 
7f7f7c089000-7f7f80000000 ---p 00000000 00:00 0 
7f7f80000000-7f7f80021000 rw-p 00000000 00:00 0 
7f7f80021000-7f7f84000000 ---p 00000000 00:00 0 
7f7f86ad0000-7f7f94000000 r--p 00000000 fd:01 1048640                    /usr/lib/locale/locale-archive
7f7f94000000-7f7f94021000 rw-p 00000000 00:00 0 
7f7f94021000-7f7f98000000 ---p 00000000 00:00 0 
7f7f98000000-7f7f98021000 rw-p 00000000 00:00 0 
7f7f98021000-7f7f9c000000 ---p 00000000 00:00 0 
7f7f9c000000-7f7f9c021000 rw-p 00000000 00:00 0 
7f7f9c021000-7f7fa0000000 ---p 00000000 00:00 0 
7f7fa0000000-7f7fa0021000 rw-p 00000000 00:00 0 
7f7fa0021000-7f7fa4000000 ---p 00000000 00:00 0 
7f7fa4000000-7f7fa4030000 rw-p 00000000 00:00 0 
7f7fa4030000-7f7fa4400000 ---p 00000000 00:00 0 
7f7fa4400000-7f7fa4410000 rw-p 00000000 00:00 0 
7f7fa4410000-7f7fa8000000 ---p 00000000 00:00 0 
7f7fa8000000-7f7fa8021000 rw-p 00000000 00:00 0 
7f7fa8021000-7f7fac000000 ---p 00000000 00:00 0 
7f7fac000000-7f7fac021000 rw-p 00000000 00:00 0 
7f7fac021000-7f7fb0000000 ---p 00000000 00:00 0 
7f7fb0000000-7f7fb0021000 rw-p 00000000 00:00 0 
7f7fb0021000-7f7fb4000000 ---p 00000000 00:00 0 
7f7fb4000000-7f7fb4021000 rw-p 00000000 00:00 0 
7f7fb4021000-7f7fb8000000 ---p 00000000 00:00 0 
7f7fb8000000-7f7fb8021000 rw-p 00000000 00:00 0 
7f7fb8021000-7f7fbc000000 ---p 00000000 00:00 0 
7f7fbc105000-7f7fbc4d6000 rw-p 00000000 00:00 0 
7f7fbc4d6000-7f7fbc4e3000 r-xp 00000000 fd:03 18158847                   /home/steven/tmpjdk/jdk-18.0.1/lib/libverify.so
7f7fbc4e3000-7f7fbc4e5000 r--p 0000c000 fd:03 18158847                   /home/steven/tmpjdk/jdk-18.0.1/lib/libverify.so
7f7fbc4e5000-7f7fbc4e6000 rw-p 0000e000 fd:03 18158847                   /home/steven/tmpjdk/jdk-18.0.1/lib/libverify.so
7f7fbc4e6000-7f7fbc4ed000 r-xp 00000000 fd:03 18158848                   /home/steven/tmpjdk/jdk-18.0.1/lib/libzip.so
7f7fbc4ed000-7f7fbc4ee000 ---p 00007000 fd:03 18158848                   /home/steven/tmpjdk/jdk-18.0.1/lib/libzip.so
7f7fbc4ee000-7f7fbc4ef000 r--p 00007000 fd:03 18158848                   /home/steven/tmpjdk/jdk-18.0.1/lib/libzip.so
7f7fbc4ef000-7f7fbc4f0000 rw-p 00008000 fd:03 18158848                   /home/steven/tmpjdk/jdk-18.0.1/lib/libzip.so
7f7fbc4f0000-7f7fbc4f4000 ---p 00000000 00:00 0 
7f7fbc4f4000-7f7fbc621000 rw-p 00000000 00:00 0 
7f7fbc621000-7f7fbc62f000 r-xp 00000000 fd:03 18158839                   /home/steven/tmpjdk/jdk-18.0.1/lib/libnet.so
7f7fbc62f000-7f7fbc630000 r--p 0000d000 fd:03 18158839                   /home/steven/tmpjdk/jdk-18.0.1/lib/libnet.so
7f7fbc630000-7f7fbc631000 rw-p 0000e000 fd:03 18158839                   /home/steven/tmpjdk/jdk-18.0.1/lib/libnet.so
7f7fbc631000-7f7fbc635000 ---p 00000000 00:00 0 
7f7fbc635000-7f7fbc731000 rw-p 00000000 00:00 0 
7f7fbc731000-7f7fbc732000 ---p 00000000 00:00 0 
7f7fbc732000-7f7fbc833000 rw-p 00000000 00:00 0 
7f7fbc833000-7f7fbc837000 ---p 00000000 00:00 0 
7f7fbc837000-7f7fbc933000 rw-p 00000000 00:00 0 
7f7fbc933000-7f7fbc937000 ---p 00000000 00:00 0 
7f7fbc937000-7f7fbca33000 rw-p 00000000 00:00 0 
7f7fbca33000-7f7fbca37000 ---p 00000000 00:00 0 
7f7fbca37000-7f7fbcb33000 rw-p 00000000 00:00 0 
7f7fbcb33000-7f7fbcb37000 ---p 00000000 00:00 0 
7f7fbcb37000-7f7fbcc33000 rw-p 00000000 00:00 0 
7f7fbcc33000-7f7fbcc37000 ---p 00000000 00:00 0 
7f7fbcc37000-7f7fbcd33000 rw-p 00000000 00:00 0 
7f7fbcd33000-7f7fbcd37000 ---p 00000000 00:00 0 
7f7fbcd37000-7f7fbce33000 rw-p 00000000 00:00 0 
7f7fbce33000-7f7fbce37000 ---p 00000000 00:00 0 
7f7fbce37000-7f7fbcf33000 rw-p 00000000 00:00 0 
7f7fbcf33000-7f7fbcf37000 ---p 00000000 00:00 0 
7f7fbcf37000-7f7fbd033000 rw-p 00000000 00:00 0 
7f7fbd033000-7f7fbd037000 ---p 00000000 00:00 0 
7f7fbd037000-7f7fbd133000 rw-p 00000000 00:00 0 
7f7fbd133000-7f7fbd134000 ---p 00000000 00:00 0 
7f7fbd134000-7f7fbd235000 rw-p 00000000 00:00 0 
7f7fbd235000-7f7fbd303000 r-xp 00000000 fd:03 18158833                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjsvml.so
7f7fbd303000-7f7fbd304000 r--p 000cd000 fd:03 18158833                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjsvml.so
7f7fbd304000-7f7fbd305000 rw-p 000ce000 fd:03 18158833                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjsvml.so
7f7fbd305000-7f7fbd422000 rw-p 00000000 00:00 0 
7f7fbd422000-7f7fbd423000 ---p 00000000 00:00 0 
7f7fbd423000-7f7fbd524000 rw-p 00000000 00:00 0 
7f7fbd524000-7f7fbd525000 ---p 00000000 00:00 0 
7f7fbd525000-7f7fc040c000 rw-p 00000000 00:00 0 
7f7fc040c000-7f7fc795c000 ---p 00000000 00:00 0 
7f7fc795c000-7f7fc815c000 rw-p 00000000 00:00 0 
7f7fc815c000-7f7fcf6ac000 ---p 00000000 00:00 0 
7f7fcf6ac000-7f7fcf7c8000 rw-p 00000000 00:00 0 
7f7fcf7c8000-7f7fd0672000 ---p 00000000 00:00 0 
7f7fd0672000-7f7fd0772000 rw-p 00000000 00:00 0 
7f7fd0772000-7f7fd161c000 ---p 00000000 00:00 0 
7f7fd161c000-7f7fd1620000 rw-p 00000000 00:00 0 
7f7fd1620000-7f7fd1890000 rwxp 00000000 00:00 0 
7f7fd1890000-7f7fd1d61000 ---p 00000000 00:00 0 
7f7fd1d61000-7f7fd1fd1000 rwxp 00000000 00:00 0 
7f7fd1fd1000-7f7fd91c0000 ---p 00000000 00:00 0 
7f7fd91c0000-7f7fd9430000 rwxp 00000000 00:00 0 
7f7fd9430000-7f7fe0620000 ---p 00000000 00:00 0 
7f7fe0620000-7f7fe8000000 r--s 00000000 fd:03 18158849                   /home/steven/tmpjdk/jdk-18.0.1/lib/modules
7f7fe8000000-7f7fe8144000 rw-p 00000000 00:00 0 
7f7fe8144000-7f7fec000000 ---p 00000000 00:00 0 
7f7fec001000-7f7fec008000 r--s 00000000 fd:01 1441798                    /usr/lib64/gconv/gconv-modules.cache
7f7fec008000-7f7fec01b000 r-xp 00000000 fd:03 18158840                   /home/steven/tmpjdk/jdk-18.0.1/lib/libnio.so
7f7fec01b000-7f7fec01c000 r--p 00012000 fd:03 18158840                   /home/steven/tmpjdk/jdk-18.0.1/lib/libnio.so
7f7fec01c000-7f7fec01d000 rw-p 00013000 fd:03 18158840                   /home/steven/tmpjdk/jdk-18.0.1/lib/libnio.so
7f7fec01d000-7f7fec724000 rw-p 00000000 00:00 0 
7f7fec724000-7f7fec725000 ---p 00000000 00:00 0 
7f7fec725000-7f7fec826000 rw-p 00000000 00:00 0 
7f7fec826000-7f7fec827000 ---p 00000000 00:00 0 
7f7fec827000-7f7fec928000 rw-p 00000000 00:00 0 
7f7fec928000-7f7fec929000 ---p 00000000 00:00 0 
7f7fec929000-7f7fecc25000 rw-p 00000000 00:00 0 
7f7fecc25000-7f7fedacf000 ---p 00000000 00:00 0 
7f7fedacf000-7f7fee824000 rw-p 00000000 00:00 0 
7f7fee824000-7f7fee908000 ---p 00000000 00:00 0 
7f7fee908000-7f7fee90d000 rw-p 00000000 00:00 0 
7f7fee90d000-7f7fee9f1000 ---p 00000000 00:00 0 
7f7fee9f1000-7f7fee9f6000 rw-p 00000000 00:00 0 
7f7fee9f6000-7f7feea00000 ---p 00000000 00:00 0 
7f7feea00000-7f7feea24000 r-xp 00000000 fd:03 18158824                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjava.so
7f7feea24000-7f7feea25000 ---p 00024000 fd:03 18158824                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjava.so
7f7feea25000-7f7feea26000 r--p 00024000 fd:03 18158824                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjava.so
7f7feea26000-7f7feea27000 rw-p 00025000 fd:03 18158824                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjava.so
7f7feea27000-7f7feea28000 rw-p 00000000 00:00 0 
7f7feea28000-7f7fef2fc000 r--s 00000000 fd:01 1184342                    /var/lib/sss/mc/passwd
7f7fef2fc000-7f7fef317000 r-xp 00000000 fd:03 18158829                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjimage.so
7f7fef317000-7f7fef318000 ---p 0001b000 fd:03 18158829                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjimage.so
7f7fef318000-7f7fef31a000 r--p 0001b000 fd:03 18158829                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjimage.so
7f7fef31a000-7f7fef31b000 rw-p 0001d000 fd:03 18158829                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjimage.so
7f7fef31b000-7f7fef31f000 ---p 00000000 00:00 0 
7f7fef31f000-7f7fef41b000 rw-p 00000000 00:00 0 
7f7fef41b000-7f7fef42a000 r--p 00000000 fd:01 1059222                    /usr/lib64/libm.so.6
7f7fef42a000-7f7fef49b000 r-xp 0000f000 fd:01 1059222                    /usr/lib64/libm.so.6
7f7fef49b000-7f7fef4f5000 r--p 00080000 fd:01 1059222                    /usr/lib64/libm.so.6
7f7fef4f5000-7f7fef4f6000 r--p 000d9000 fd:01 1059222                    /usr/lib64/libm.so.6
7f7fef4f6000-7f7fef4f7000 rw-p 000da000 fd:01 1059222                    /usr/lib64/libm.so.6
7f7fef4f7000-7f7fef4f8000 r--p 00000000 fd:01 1059229                    /usr/lib64/librt.so.1
7f7fef4f8000-7f7fef4f9000 r-xp 00001000 fd:01 1059229                    /usr/lib64/librt.so.1
7f7fef4f9000-7f7fef4fa000 r--p 00002000 fd:01 1059229                    /usr/lib64/librt.so.1
7f7fef4fa000-7f7fef4fb000 r--p 00002000 fd:01 1059229                    /usr/lib64/librt.so.1
7f7fef4fb000-7f7fef4fc000 rw-p 00000000 00:00 0 
7f7fef4fc000-7f7ff0641000 r-xp 00000000 fd:03 18158859                   /home/steven/tmpjdk/jdk-18.0.1/lib/server/libjvm.so
7f7ff0641000-7f7ff0642000 ---p 01145000 fd:03 18158859                   /home/steven/tmpjdk/jdk-18.0.1/lib/server/libjvm.so
7f7ff0642000-7f7ff0700000 r--p 01145000 fd:03 18158859                   /home/steven/tmpjdk/jdk-18.0.1/lib/server/libjvm.so
7f7ff0700000-7f7ff0733000 rw-p 01203000 fd:03 18158859                   /home/steven/tmpjdk/jdk-18.0.1/lib/server/libjvm.so
7f7ff0733000-7f7ff0790000 rw-p 00000000 00:00 0 
7f7ff0790000-7f7ff07bc000 r--p 00000000 fd:01 1059219                    /usr/lib64/libc.so.6
7f7ff07bc000-7f7ff0932000 r-xp 0002c000 fd:01 1059219                    /usr/lib64/libc.so.6
7f7ff0932000-7f7ff0986000 r--p 001a2000 fd:01 1059219                    /usr/lib64/libc.so.6
7f7ff0986000-7f7ff0987000 ---p 001f6000 fd:01 1059219                    /usr/lib64/libc.so.6
7f7ff0987000-7f7ff098a000 r--p 001f6000 fd:01 1059219                    /usr/lib64/libc.so.6
7f7ff098a000-7f7ff098d000 rw-p 001f9000 fd:01 1059219                    /usr/lib64/libc.so.6
7f7ff098d000-7f7ff099a000 rw-p 00000000 00:00 0 
7f7ff099a000-7f7ff099b000 r--p 00000000 fd:01 1059221                    /usr/lib64/libdl.so.2
7f7ff099b000-7f7ff099c000 r-xp 00001000 fd:01 1059221                    /usr/lib64/libdl.so.2
7f7ff099c000-7f7ff099d000 r--p 00002000 fd:01 1059221                    /usr/lib64/libdl.so.2
7f7ff099d000-7f7ff099e000 r--p 00002000 fd:01 1059221                    /usr/lib64/libdl.so.2
7f7ff099e000-7f7ff099f000 rw-p 00000000 00:00 0 
7f7ff099f000-7f7ff09a0000 r--p 00000000 fd:01 1059227                    /usr/lib64/libpthread.so.0
7f7ff09a0000-7f7ff09a1000 r-xp 00001000 fd:01 1059227                    /usr/lib64/libpthread.so.0
7f7ff09a1000-7f7ff09a2000 r--p 00002000 fd:01 1059227                    /usr/lib64/libpthread.so.0
7f7ff09a2000-7f7ff09a3000 r--p 00002000 fd:01 1059227                    /usr/lib64/libpthread.so.0
7f7ff09a3000-7f7ff09a4000 rw-p 00000000 00:00 0 
7f7ff09a4000-7f7ff09b2000 r-xp 00000000 fd:03 18158830                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjli.so
7f7ff09b2000-7f7ff09b3000 ---p 0000e000 fd:03 18158830                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjli.so
7f7ff09b3000-7f7ff09b4000 r--p 0000e000 fd:03 18158830                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjli.so
7f7ff09b4000-7f7ff09b5000 rw-p 0000f000 fd:03 18158830                   /home/steven/tmpjdk/jdk-18.0.1/lib/libjli.so
7f7ff09b5000-7f7ff09b8000 r--p 00000000 fd:01 1049257                    /usr/lib64/libz.so.1.2.11
7f7ff09b8000-7f7ff09c6000 r-xp 00003000 fd:01 1049257                    /usr/lib64/libz.so.1.2.11
7f7ff09c6000-7f7ff09cc000 r--p 00011000 fd:01 1049257                    /usr/lib64/libz.so.1.2.11
7f7ff09cc000-7f7ff09cd000 ---p 00017000 fd:01 1049257                    /usr/lib64/libz.so.1.2.11
7f7ff09cd000-7f7ff09ce000 r--p 00017000 fd:01 1049257                    /usr/lib64/libz.so.1.2.11
7f7ff09ce000-7f7ff09cf000 rw-p 00000000 00:00 0 
7f7ff09d0000-7f7ff09d8000 rw-s 00000000 00:23 228348                     /tmp/hsperfdata_steven/159584
7f7ff09d8000-7f7ff09da000 r--p 00000000 fd:01 1052933                    /usr/lib64/libnss_sss.so.2
7f7ff09da000-7f7ff09e1000 r-xp 00002000 fd:01 1052933                    /usr/lib64/libnss_sss.so.2
7f7ff09e1000-7f7ff09e3000 r--p 00009000 fd:01 1052933                    /usr/lib64/libnss_sss.so.2
7f7ff09e3000-7f7ff09e4000 r--p 0000a000 fd:01 1052933                    /usr/lib64/libnss_sss.so.2
7f7ff09e4000-7f7ff09e5000 rw-p 0000b000 fd:01 1052933                    /usr/lib64/libnss_sss.so.2
7f7ff09e5000-7f7ff09e6000 ---p 00000000 00:00 0 
7f7ff09e6000-7f7ff09e7000 r--p 00000000 00:00 0 
7f7ff09e7000-7f7ff09e9000 rw-p 00000000 00:00 0 
7f7ff09e9000-7f7ff09eb000 r--p 00000000 fd:01 1059192                    /usr/lib64/ld-linux-x86-64.so.2
7f7ff09eb000-7f7ff0a11000 r-xp 00002000 fd:01 1059192                    /usr/lib64/ld-linux-x86-64.so.2
7f7ff0a11000-7f7ff0a1c000 r--p 00028000 fd:01 1059192                    /usr/lib64/ld-linux-x86-64.so.2
7f7ff0a1c000-7f7ff0a1d000 ---p 00000000 00:00 0 
7f7ff0a1d000-7f7ff0a1f000 r--p 00033000 fd:01 1059192                    /usr/lib64/ld-linux-x86-64.so.2
7f7ff0a1f000-7f7ff0a21000 rw-p 00035000 fd:01 1059192                    /usr/lib64/ld-linux-x86-64.so.2
7ffc3b0a2000-7ffc3b0c4000 rw-p 00000000 00:00 0                          [stack]
7ffc3b1da000-7ffc3b1de000 r--p 00000000 00:00 0                          [vvar]
7ffc3b1de000-7ffc3b1e0000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]


VM Arguments:
jvm_args: -XX:SharedArchiveFile=test.jsa 
java_command: JsaCrash
java_class_path (initial): junit-4.13.2.jar:jsacrash.jar
Launcher Type: SUN_STANDARD

[Global flags]
     intx CICompilerCount                          = 12                                        {product} {ergonomic}
     uint ConcGCThreads                            = 3                                         {product} {ergonomic}
     uint G1ConcRefinementThreads                  = 13                                        {product} {ergonomic}
   size_t G1HeapRegionSize                         = 4194304                                   {product} {ergonomic}
    uintx GCDrainStackTargetSize                   = 64                                        {product} {ergonomic}
   size_t InitialHeapSize                          = 528482304                                 {product} {ergonomic}
   size_t MarkStackSize                            = 4194304                                   {product} {ergonomic}
   size_t MaxHeapSize                              = 8409579520                                {product} {ergonomic}
   size_t MaxNewSize                               = 5045747712                                {product} {ergonomic}
   size_t MinHeapDeltaBytes                        = 4194304                                   {product} {ergonomic}
   size_t MinHeapSize                              = 8388608                                   {product} {ergonomic}
    uintx NonNMethodCodeHeapSize                   = 7602480                                {pd product} {ergonomic}
    uintx NonProfiledCodeHeapSize                  = 122027880                              {pd product} {ergonomic}
    uintx ProfiledCodeHeapSize                     = 122027880                              {pd product} {ergonomic}
    uintx ReservedCodeCacheSize                    = 251658240                              {pd product} {ergonomic}
     bool SegmentedCodeCache                       = true                                      {product} {ergonomic}
    ccstr SharedArchiveFile                        = test.jsa                                  {product} {command line}
   size_t SoftMaxHeapSize                          = 8409579520                             {manageable} {ergonomic}
     bool UseCompressedClassPointers               = true                           {product lp64_product} {ergonomic}
     bool UseCompressedOops                        = true                           {product lp64_product} {ergonomic}
     bool UseG1GC                                  = true                                      {product} {ergonomic}

Logging:
Log output configuration:
 #0: stdout all=warning uptime,level,tags foldmultilines=false
 #1: stderr all=off uptime,level,tags foldmultilines=false

Environment Variables:
PATH=/home/steven/bin:/home/steven/.m2/apache-maven/bin:/usr/local/sbin:/usr/local/bin:/home/steven/bin:/home/steven/.m2/apache-maven/bin:/usr/local/sbin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/home/steven/bin:/usr/local/sbin:/usr/sbin:/home/steven/code/wspl-tools/bin:/home/steven/ws-code/wspl-tools/bin:/home/steven/go/bin:/bin
SHELL=/bin/zsh
DISPLAY=:0.0
LANG=en_US.utf8

Signal Handlers:
   SIGSEGV: crash_handler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGBUS: crash_handler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGFPE: crash_handler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGPIPE: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGXFSZ: javaSignalHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGILL: crash_handler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGUSR2: SR_handler in libjvm.so, mask=00000000000000000000000000000000, flags=SA_RESTART|SA_SIGINFO
    SIGHUP: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
    SIGINT: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGTERM: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGQUIT: UserHandler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO
   SIGTRAP: crash_handler in libjvm.so, mask=11100100010111111101111111111110, flags=SA_RESTART|SA_SIGINFO


---------------  S Y S T E M  ---------------

OS:
Fedora release 35 (Thirty Five)
uname: Linux 5.17.4-200.fc35.x86_64 #1 SMP PREEMPT Wed Apr 20 15:37:53 UTC 2022 x86_64
OS uptime: 0 days 8:27 hours
libc: glibc 2.34 NPTL 2.34 
rlimit (soft/hard): STACK 8192k/infinity , CORE infinity/infinity , NPROC 127862/127862 , NOFILE 1048576/1048576 , AS infinity/infinity , CPU infinity/infinity , DATA infinity/infinity , FSIZE infinity/infinity , MEMLOCK 16384k/16384k
load average: 0.59 0.64 1.12

/proc/meminfo:
MemTotal:       32842852 kB
MemFree:         4838076 kB
MemAvailable:   23461452 kB
Buffers:          569748 kB
Cached:         18304124 kB
SwapCached:          196 kB
Active:          8213780 kB
Inactive:       17406456 kB
Active(anon):     223812 kB
Inactive(anon):  7425508 kB
Active(file):    7989968 kB
Inactive(file):  9980948 kB
Unevictable:         128 kB
Mlocked:             128 kB
SwapTotal:      25165816 kB
SwapFree:       25141240 kB
Dirty:               112 kB
Writeback:           296 kB
AnonPages:       6746392 kB
Mapped:          1584116 kB
Shmem:            902956 kB
KReclaimable:    1198576 kB
Slab:            1605684 kB
SReclaimable:    1198576 kB
SUnreclaim:       407108 kB
KernelStack:       31720 kB
PageTables:        69596 kB
NFS_Unstable:          0 kB
Bounce:                0 kB
WritebackTmp:          0 kB
CommitLimit:    41587240 kB
Committed_AS:   16105664 kB
VmallocTotal:   34359738367 kB
VmallocUsed:      313968 kB
VmallocChunk:          0 kB
Percpu:            45056 kB
HardwareCorrupted:     0 kB
AnonHugePages:         0 kB
ShmemHugePages:        0 kB
ShmemPmdMapped:        0 kB
FileHugePages:         0 kB
FilePmdMapped:         0 kB
CmaTotal:              0 kB
CmaFree:               0 kB
HugePages_Total:       0
HugePages_Free:        0
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:       2048 kB
Hugetlb:               0 kB
DirectMap4k:     2770868 kB
DirectMap2M:    29646848 kB
DirectMap1G:     1048576 kB

/sys/kernel/mm/transparent_hugepage/enabled: always [madvise] never
/sys/kernel/mm/transparent_hugepage/defrag (defrag/compaction efforts parameter): always defer defer+madvise [madvise] never

Process Memory:
Virtual Size: 11598576K (peak: 11598576K)
Resident Set Size: 40292K (peak: 40292K) (anon: 14780K, file: 25480K, shmem: 32K)
Swapped out: 0K
C-Heap outstanding allocations: 2454K

/proc/sys/kernel/threads-max (system-wide limit on the number of threads): 255725
/proc/sys/vm/max_map_count (maximum number of memory map areas a process may have): 65530
/proc/sys/kernel/pid_max (system-wide limit on number of process identifiers): 4194304

container (cgroup) information:
container_type: cgroupv2
cpu_cpuset_cpus: not supported
cpu_memory_nodes: not supported
active_processor_count: 16
cpu_quota: not supported
cpu_period: not supported
cpu_shares: not supported
memory_limit_in_bytes: unlimited
memory_and_swap_limit_in_bytes: unlimited
memory_soft_limit_in_bytes: unlimited
memory_usage_in_bytes: 18015866880
memory_max_usage_in_bytes: not supported
maximum number of tasks: unlimited
current number of tasks: 1405

Steal ticks since vm start: 0
Steal ticks percentage since vm start:  0.000

CPU: total 16 (initial active 16) (16 cores per cpu, 2 threads per core) family 23 model 113 stepping 0 microcode 0x8701021, cx8, cmov, fxsr, ht, mmx, 3dnowpref, sse, sse2, sse3, ssse3, sse4a, sse4.1, sse4.2, popcnt, lzcnt, tsc, tscinvbit, avx, avx2, aes, clmul, bmi1, bmi2, adx, sha, fma, vzeroupper, clflush, clflushopt
CPU Model and flags from /proc/cpuinfo:
model name	: AMD Ryzen 7 3700X 8-Core Processor
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf rapl pni pclmulqdq monitor ssse3 fma cx16 sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 hw_pstate ssbd mba ibpb stibp vmmcall fsgsbase bmi1 avx2 smep bmi2 cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr rdpru wbnoinvd arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold avic v_vmsave_vmload vgif v_spec_ctrl umip rdpid overflow_recov succor smca sme sev sev_es

Online cpus: 0-15
Offline cpus: 16-31
BIOS frequency limitation: 3600000
Frequency switch latency (ns): 0
Available cpu frequencies: 3600000 2800000 2200000 
Current governor: schedutil
Core performance/turbo boost: 1

Memory: 4k page, physical 32842852k(4838076k free), swap 25165816k(25141240k free)
Page Sizes: 4k

vm_info: OpenJDK 64-Bit Server VM (18.0.1+10-24) for linux-amd64 JRE (18.0.1+10-24), built on Mar  9 2022 22:31:43 by ""mach5one"" with gcc 10.3.0

END.


---------- BEGIN SOURCE ----------
import java.io.IOException;
import java.io.UncheckedIOException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.function.Consumer;
import java.util.function.Supplier;

import org.junit.rules.MethodRule;
import org.junit.rules.TestRule;
import org.junit.runner.Description;
import org.junit.runners.model.FrameworkMethod;
import org.junit.runners.model.Statement;

import static java.util.concurrent.CompletableFuture.completedFuture;

public class JsaCrash implements TestRule {
    public static final String TEST_CASE_CONTEXT = ""Test Case"";

    private final Map<String, Future<Object>> contexts;

    private final CompletableFuture<Void> contextsStart = new CompletableFuture<>();
    private final CompletableFuture<Void> shutdownStart;
    private final Map<String, CompletableFuture<Void>> shutdownEnd;

    private final List<? extends TestRule> innerRules;

    JsaCrash(final Object testCase,
            final Map<String, Supplier<CompletableFuture<Object>>> contextSuppliers,
            final List<? extends TestRule> innerRules,
            final CompletableFuture<Void> shutdownStart,
            final Map<String, CompletableFuture<Void>> shutdownEnd)
    {
        this.innerRules = innerRules;
        this.shutdownStart = shutdownStart;
        this.shutdownEnd = shutdownEnd;
        final var myContexts = new HashMap<String, Future<Object>>();
        contextSuppliers.forEach((name, supplier) -> {
            myContexts.put(name, contextsStart.thenCompose(x -> start(name, supplier)));
        });
        this.contexts = Map.copyOf(myContexts);
    }

    public static void main(final String... args) throws Throwable {
        JsaCrash.builder()
                .launch(""test"").as(TestConfiguration.class)
                .build()
                .apply(new Statement() {
                    @Override
                    public void evaluate() throws Throwable {
                        System.out.println(""statement""); // NOPMD
                    }
                }, Description.EMPTY)
                .evaluate();
        System.out.println(""done!""); // NOPMD
    }

    public static class TestConfiguration {
    }

    @Override
    public Statement apply(final Statement base, final Description description) {
        Statement stmt = new Statement() {
            @Override
            public void evaluate() throws Throwable {
                try {
                    start();
                    base.evaluate();
                } finally {
                    stop();
                }
            }
        };
        for (final TestRule r : innerRules) {
            stmt = r.apply(stmt, description);
        }
        return stmt;
    }

    protected void start() throws Throwable {
        contextsStart.complete(null);
        contexts.keySet()
            .forEach(this::context);
    }

    protected void stop() {
        shutdownStart.complete(null);
        try {
            CompletableFuture.allOf(shutdownEnd.values().toArray(CompletableFuture<?>[]::new)).get(30, TimeUnit.SECONDS);
        } catch (final InterruptedException e1) {
        } catch (final ExecutionException e1) {
            shutdownEnd.forEach((ctxName, cf) -> {
                cf.whenComplete((x, e) -> {
                    if (e != null) {
                    }
                });
            });
        } catch (final TimeoutException e1) {
        }
    }

    private CompletableFuture<Object> start(final String name, final Supplier<CompletableFuture<Object>> starter) {
        return starter.get();
    }

    public Object context(final String ctxName) {
        try {
            return Optional.ofNullable(contexts.get(ctxName))
                    .orElse(null)
                    .get();
        } catch (final InterruptedException e) {
            Thread.currentThread().interrupt();
            return null;
        } catch (final ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    public MethodRule injectRule() {
        return new MethodRule() {
            @Override
            public Statement apply(final Statement base, final FrameworkMethod method, final Object target) {
                return new Statement() {
                    @Override
                    public void evaluate() throws Throwable {
                        base.evaluate();
                    }
                };
            }
        };
    }

    public static JsaCrash.Builder builder() {
        return new Builder();
    }

    public static final class Builder {
        private final Map<String, Supplier<CompletableFuture<Object>>> contextSuppliers = new LinkedHashMap<>();
        private final Map<String, Object> baseProperties = new HashMap<>();
        private final List<TestRule> innerRules = new ArrayList<>();
        private final CompletableFuture<Void> shutdownStart = new CompletableFuture<>();
        private final Map<String, CompletableFuture<Void>> shutdownEnd = new LinkedHashMap<>();
        private JsaCrash builtRule;

        public Builder() {
        }

        public ContextBuilder launch(final String ctxName) {
            return new ContextBuilder(ctxName);
        }

        Class<?>[] featureConfiguration(final ClassLoader cl) {
            return new Class<?>[0];
        }

        Builder addContext(final ContextBuilder ctx, final ResolvedService service) {
            URLClassLoader cl;
            try {
                cl = new URLClassLoader(extractAndCacheClasspath(service.tarball()).toArray(URL[]::new));
            } catch (final IOException e) {
                throw new UncheckedIOException(e);
            }
            return addContext(ctx, () -> {
                final var myProps = new HashMap<>(ctx.properties);
                try {
                    final String mainClassName = service.spec().mainClass()
                            .orElse(""main"");
                    final var mainClass = Class.forName(mainClassName, true, cl);
                    return null;
                } catch (final ReflectiveOperationException e) {
                    throw new RuntimeException(""Context '"" + ctx.ctxName + ""' failed startup"", e);
                }
            }, t -> t.setContextClassLoader(cl));
        }

        static List<URL> extractAndCacheClasspath(final Path tarball) throws IOException {
            final var results = new ArrayList<URL>();
            return results;
        }

        Builder addContext(final ContextBuilder ctx, final Class<?> configurationClass) {
            return addContext(ctx, () -> {return null;}, t -> {});
        }

        private Builder addContext(final ContextBuilder ctx, final Supplier<Object> runner, final Consumer<Thread> threadCustomizer) {
            final var shutdown = new CompletableFuture<Void>();
            shutdownEnd.put(ctx.ctxName, shutdown);
            contextSuppliers.put(ctx.ctxName, () -> {
                final var startup = new CompletableFuture<Object>();
                final var thread = new Thread(() -> {
                    final Object app;
                    try {
                        app = runner.get();
                        startup.complete(app);
                    } catch (final Exception e) {
                        e.addSuppressed(new Throwable(""Failing context is: "" + ctx.ctxName));
                        startup.completeExceptionally(e);
                        shutdown.completeExceptionally(e);
                        return;
                    }
                    try {
                        shutdownStart.get();
                    } catch (final InterruptedException e) {
                        Thread.currentThread().interrupt();
                    } catch (final ExecutionException e) {
                    } finally {
                        shutdown.complete(null);
                    }
                }, ""main:"" + ctx.ctxName);
                threadCustomizer.accept(thread);
                thread.start();
                return startup;
            });
            return this;
        }

        public JsaCrash build(final Object testCase) {
            contextSuppliers.put(TEST_CASE_CONTEXT, () -> completedFuture(startTestCaseCtx()));
            builtRule = new JsaCrash(testCase, contextSuppliers, innerRules, shutdownStart, shutdownEnd);
            return builtRule;
        }

        private Object startTestCaseCtx() {
            return null;
        }

        public JsaCrash build() {
            return build(new Object());
        }

        public class ContextBuilder {
            private final String ctxName;
            private final Map<String, Object> properties = new HashMap<>(baseProperties);

            ContextBuilder(final String ctxName) {
                this.ctxName = ctxName;
            }
            public Builder as(final Class<?> configurationClass) {
                return addContext(this, configurationClass);
            }

        }
    }

    public interface ServiceSpec {
        default String groupId() {
            return ""my.service"";
        }
        String artifactId();
        String version();
        Optional<String> mainClass();

    }

    public interface ResolvedService {
        ServiceSpec spec();
        Path tarball();

        static ResolvedService of(final ServiceSpec spec, final Path tarball) {
            return new ResolvedService() {
                @Override
                public Path tarball() {
                    return tarball;
                }

                @Override
                public ServiceSpec spec() {
                    return spec;
                }
            };
        }
    }

    public static ServiceSpec service(final String artifactId, final String version) {
        return new ServiceSpec() {
            @Override
            public String version() {
                return version;
            }

            @Override
            public Optional<String> mainClass() {
                return Optional.empty();
            }

            @Override
            public String artifactId() {
                return artifactId;
            }
        };
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
This bug prevents us from using CDS.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-04-29 04:07;sswsharm;JsaCrash.java;https://bugs.openjdk.org/secure/attachment/98753/JsaCrash.java","2022-04-29 04:12;sswsharm;hs_err_pid2989.log;https://bugs.openjdk.org/secure/attachment/98754/hs_err_pid2989.log",,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i2wvob:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-29 04:13;sswsharm;Issue is reproduced( hs_err_pid12989.log is attached)

OS: Linux(ubuntu 20.04)
JDK 17.0.3: Fail
JDK 18: Fail

Moving it to dev team for further analysis;;;","2022-04-29 12:11;ccheung;Running the test case with a debug build the following assert in systemDictionaryShared.cpp:922 failed:

#  assert(shared_nest_host != __null) failed: unexpected NULL _nest_host

Using gdb on the core dump, the lambda_ik and caller_ik passed to the SystemDictionaryShared::prepare_shared_lambda_proxy_class function are:

(gdb) x/s &(caller_ik->_name._body)
0x800c6604e:	""JsaCrash$Builder\361\361\377\377\256\212\037""
(gdb) x/s &(lambda_ik->_name._body)
0x800c67076:	""JsaCrash$Builder$$Lambda$1+0x0000000801001c90\361\361\361\361\361\377\377'Q\032"";;;","2022-05-02 14:49;ccheung;The nest host for JsaCrash$Builder$$Lambda$1+0x0000000801001c90 is JsaCrash which was skipped during dumping because it is an old class and cannot be verified.

The following warning is during dump time:

[2.218s][warning][cds] Skipping JsaCrash: Old class has been linked

A simple fix is to add another check on the nest_host in SystemDictionaryShared::add_lambda_proxy_class.
Don't archive the lambda proxy class if its nest_host cannot be verified.;;;","2022-05-04 11:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8540
Date: 2022-05-04 18:20:14 +0000;;;","2022-05-09 09:04;dukebot;Changeset: 29ccb8fb
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-05-09 16:00:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/29ccb8fbb83037882d59bda35865d3aed1780f9d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix some @param tags,JDK-8285890,5073843,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-04-29 01:42,2022-05-04 23:37,2023-10-01 09:56,2022-04-30 14:22,19,,,,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,This cleans up after JDK-8285676.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285676,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxqr:",9223372036854775807,b21,,,,,,,,,,,"2022-04-29 02:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8465
Date: 2022-04-29 09:03:58 +0000;;;","2022-04-30 14:22;dukebot;Changeset: 3eb661bb
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-04-30 21:21:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3eb661bbe7151f3a7e949b6518f57896c2bd4136
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replay compilation fails with assert(is_valid()) failed: check invoke,JDK-8285885,5073838,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dlong,thartmann,thartmann,2022-04-29 00:03,2022-06-21 10:51,2023-10-01 09:56,2022-05-03 14:02,18,19,,,,,,,,,,19,hotspot,,0,ci-replay,noreg-hard,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,,"Replay compilation with attached replay file replay_pid2967600.log fails since JDK-8271911:

#  Internal Error (/open/src/hotspot/share/interpreter/bytecode.cpp:122), pid=893400, tid=893401
#  assert(is_valid()) failed: check invoke
#
# JRE version: Java(TM) SE Runtime Environment (18.0+36) (fastdebug build 18+36-2087)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 18+36-2087, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x733725]  Bytecode_invoke::verify() const+0x285

Stack: [0x00007f536c1e7000,0x00007f536c2e8000],  sp=0x00007f536c2e68a0,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x733725]  Bytecode_invoke::verify() const+0x285
V  [libjvm.so+0x99e4e9]  CompileReplay::parse_cp_ref(JavaThread*)+0x5f9
V  [libjvm.so+0x99f216]  CompileReplay::parse_klass(JavaThread*)+0x166
V  [libjvm.so+0x9a0b6c]  CompileReplay::process_instanceKlass(JavaThread*)+0x1c
V  [libjvm.so+0x998d68]  ciReplay::replay_impl(JavaThread*)+0xcd8
V  [libjvm.so+0x998e8f]  ciReplay::replay(JavaThread*)+0xf
V  [libjvm.so+0x1045eb8]  JNI_CreateJavaVM+0x5c8
C  [libjli.so+0x3aef]  JavaMain+0x8f
C  [libjli.so+0x7aa9]  ThreadJavaMain+0x9

I also attached the required jar files from Lucene but the issue reproduces without them.

Workaround:

sed '/@bci/d' replay_pid2967600.log > new_replay",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8271911,,,,,,,,,,,,,,,"2022-04-29 00:06;thartmann;lucene-core-9.1.0.jar;https://bugs.openjdk.org/secure/attachment/98743/lucene-core-9.1.0.jar","2022-04-29 00:06;thartmann;lucene-facet-9.1.0.jar;https://bugs.openjdk.org/secure/attachment/98742/lucene-facet-9.1.0.jar","2022-04-29 00:04;thartmann;replay_pid2967600.log;https://bugs.openjdk.org/secure/attachment/98741/replay_pid2967600.log",,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxpn:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-29 00:08;thartmann;ILW = Replay compilation fails, replay files with cp ref, remove @bci statements from replay file = MMM = P3;;;","2022-04-29 00:08;thartmann;Dean, could you please have a look?;;;","2022-04-29 15:30;dlong;[~thartmann], the bytecodes in the jar file don't match what is in the replay file.  Are you sure this is the same jar file that was used to generate the replay file?;;;","2022-04-29 15:39;dlong;The crash in JDK-8285835 says it is using lucene-core-10.0.0-SNAPSHOT.jar.  ;;;","2022-05-01 22:10;thartmann;No, most likely it's not the same version but the jar is not required to trigger the failure and I think replay compilation should be more robust when ReplayIgnoreInitErrors is enabled (especially since the failing classes/methods do not take part in the actual compilation that is to be replayed). ;;;","2022-05-02 18:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8514
Date: 2022-05-03 01:46:22 +0000;;;","2022-05-03 14:02;dukebot;Changeset: f82dd766
Author:    Dean Long <dlong@openjdk.org>
Date:      2022-05-03 21:00:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f82dd76614013afdbc69853f5a1943fcdcd3b55b
;;;","2022-06-21 02:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/170
Date: 2022-06-21 09:03:33 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update WebKit to 614.1,JDK-8285881,5073833,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,arapte,arapte,2022-04-28 23:02,2023-09-08 05:40,2023-10-01 09:56,2022-07-28 05:27,8u351,jfx20,,,,,,,,,,jfx20,javafx,,0,3rdparty,sn_117,sn_118,sn_121,sn_122,sn_123,webkit-2.36,,,,,,,,,,,,,,"This will update JavaFX WebKit to 614.1, based on GTK WebKit 2.36.x

[1] https://trac.webkit.org/wiki/WebKitGTK/2.36.x
[2] https://trac.webkit.org/log/webkit/releases/WebKitGTK/webkit-2.36/
",,,,,,,,,,JDK-8292186,JDK-8292555,JDK-8291036,,,,,,,,,,,,,,,,,,,,,,,JDK-8284703,JDK-8289952,JDK-8290782,JDK-8275225,,,,,,,,,,JDK-8311097,JDK-8290238,JDK-8288413,JDK-8290237,JDK-8301699,JDK-8315915,JDK-8289618,JDK-8290275,JDK-8290292,JDK-8291592,JDK-8292609,JDK-8291040,JDK-8290274,JDK-8291630,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxoj:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-07-22 12:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/846
Date: 2022-07-22 19:29:12 +0000;;;","2022-07-28 05:26;dukebot;Changeset: 7e48413e
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2022-07-28 12:21:57 +0000
URL:       https://git.openjdk.org/jfx/commit/7e48413eb0f9eb3dcbd9d3a1572fc311036092c8
;;;","2022-08-10 04:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/77
Date: 2022-08-10 11:00:23 +0000;;;","2022-08-17 07:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/109
Date: 2022-08-17 14:35:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TestBug] LocalStorageTest and UserDataDirectoryTest  don't always cleanup data dirs,JDK-8285878,5073827,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbhaskar,arapte,arapte,2022-04-28 21:35,2023-04-27 05:58,2023-10-01 09:56,2023-04-20 18:20,jfx19,,,,,,,,,,,jfx21,javafx,,0,noreg-self,sn_131,sn_142,test_sprint,testbug,,,,,,,,,,,,,,,,"LocalStorageTest creates a directory for test: modules/javafx.web/LocalStorageDir/.
This directory does not get deleted after the test completes execution.

UserDataDirectoryTest creates modules/javafx.web/foo, modules/javafx.web/bar, and modules/javafx.web/baz directories
These directories are sometimes not cleaned up. If this happens, subsequent tests will fail.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8255940,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxn7:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2022-08-04 08:51;kcr;In addition to the cleanup, the test should be changed to put this directory under ""build"", so ""modules/javafx.web/build/LocalStorageDir/"". No tests should write anything to a source directory (i.e., a directory that has SCM managed sources underneath it).;;;","2022-08-13 04:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/869
Date: 2022-08-13 11:45:00 +0000;;;","2022-11-08 07:10;kcr;I added UserDataDirectoryTest to this bug, since it has a similar problem.

The likely solution for both of these tests is:
1. All data directories must only be created under the ""build"" dir. In addition to being a best practice, at least they will be cleaned up by ""gradle clean""
2. There should be an @AfterClass method that deletes the data dirs
3. There should be an @BeforeClass method that also deletes the data dirs prior to running the tests in case it wasn't cleaned up previously
;;;","2023-04-19 03:41;jbhaskar;pr  https://git.openjdk.org/jfx/pull/869 is in closed status;;;","2023-04-19 06:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1100
Date: 2023-04-19 13:25:07 +0000;;;","2023-04-20 18:20;dukebot;Changeset: 48b5fea3
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Date:      2023-04-21 01:17:20 +0000
URL:       https://git.openjdk.org/jfx/commit/48b5fea374666c0930a9c861e8e202f6e3daaed1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Selective cleanup in doclint Checker class,JDK-8285869,5073815,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-04-28 15:36,2022-05-04 23:42,2023-10-01 09:56,2022-05-04 13:25,19,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"There are a number of places that an IDE reports that enhanced switch and other minor cleanup can be done in the Checker class. There's enough to do it standalone, and not piggy-backed on any other change to this file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxkj:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-04-28 17:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8460
Date: 2022-04-29 00:29:50 +0000;;;","2022-05-04 13:25;dukebot;Changeset: 28e6d805
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-05-04 20:23:23 +0000
URL:       https://git.openjdk.java.net/jdk/commit/28e6d805f4bc9d107ac839aca854bcb96a6637d8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Convert applet manual tests SelectionVisible.java to Frame and automate,JDK-8285867,5073813,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-04-28 15:22,2023-09-25 04:54,2023-10-01 09:56,2022-05-11 16:35,,,,,,,,,,,,19,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,"Following are the two applet manual test that can be automated
./open/test/jdk/java/awt/TextField/SelectionVisible/SelectionVisible.java
./open/test/jdk/java/awt/TextArea/SelectionVisible/SelectionVisible.java",,,,,,,,,,JDK-8314711,JDK-8314575,JDK-8314574,JDK-8314728,JDK-8316884,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxk3:",9223372036854775807,b23,,,,,,,,,,,"2022-04-29 15:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8477
Date: 2022-04-29 22:39:28 +0000;;;","2022-05-11 16:35;dukebot;Changeset: 44a60ce1
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-05-11 23:34:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/44a60ce1724dc3e39faf1d7a68de2e6376894534
;;;","2023-09-22 13:02;goetz;
I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport.
Tests pass. SAP nightly testing passed.;;;","2023-09-22 13:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1775
Date: 2023-09-22 20:03:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[AIX] unreachable code in basic_tools.m4 -> BASIC_CHECK_TAR,JDK-8285850,5073791,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2022-04-28 10:44,2023-02-01 22:49,2023-10-01 09:56,2023-01-27 07:29,,,,,,,,,,,,21,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,"Thanks to Matthias for originally catching this issue.

basic_tools.m4 contains the line 'elif test ""x$TAR_TYPE"" = ""aix"";...'. This comparison can never be true, since no value of TAR_TYPE exists that will cause ""x..."" to equal ""aix"". The code following this line should be tested on AIX for hidden issues, then changed to the intended line: ""x$TAR_TYPE"" = ""xaix"";...' (by adding the missing 'x').",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxf7:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-11-07 14:04;ihse;[~tsteele] This bug has been open and assigned to you for half a year or so. Do you intend to work on it? If not, it's better to make it unassigned; that way it will come under consideration for fixing by me. ;;;","2022-11-07 14:36;tsteele;[~ihse] Sorry to keep you in suspense, but I will hold on to it if that is alright. We had a couple new devs join the team recently & this issue would be a good first issue for them.;;;","2023-01-26 15:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12146
Date: 2023-01-23 16:47:47 +0000;;;","2023-01-27 07:29;dukebot;Changeset: dff41316
Author:    Deepa Kumari <dpakri181@gmail.com>
Committer: Tyler Steele <tsteele@openjdk.org>
Date:      2023-01-27 15:28:13 +0000
URL:       https://git.openjdk.org/jdk/commit/dff41316a2c07ef05b9f9421093ee78d6a80d92e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DST not applying properly with zone id offset set with TZ env variable,JDK-8285838,5073776,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2022-04-28 08:57,2022-11-21 04:11,2023-10-01 09:56,2022-06-13 13:05,18,,,,,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"On behalf of Gaurav Chaudhari:

When a match cannot be made directly against a recognized region/timezone from the tzdb.dat, TimeZone.getSystemGMTOffsetID() is invoked to find the GMT based offset to calculate the offset and find the corresponding time.
The native code reached in TimeZone_md.c has a bug for platforms that are not MacOS, where daylight savings is not respected.

To reproduce the issue:
TZ=""MEZ-1MESZ,M3.5.0,M10.5.0"" java -cp . TimeTest
with the following test , TimeTest.java
import java.util.Calendar;
import java.util.TimeZone;
import java.util.Date;
import java.text.SimpleDateFormat;


public class TimeTest {
        public static void main(String args[]) {
                Date time = Calendar.getInstance().getTime();
                SimpleDateFormat sdf = new SimpleDateFormat(""dd.MM.yyyy HH:mm:ss.SSS"");

                System.out.println(""Calendar.getInstance().getTime() = ""+time);
                System.out.println(""SimpleDateFormat                 = ""+sdf.format(time));
        }
}

Reproducible on Linux on Z (s390x) OpenJDK18 (jdk18+38 Temurin)
TZ=""MEZ-1MESZ,M3.5.0,M10.5.0"" ~/jdk-18+36/bin/java -cp . TimeTest
Calendar.getInstance().getTime() = Thu Apr 28 15:55:16 GMT+01:00 2022
SimpleDateFormat                 = 28.04.2022 15:55:16.171

Zone ID can be set according to guidelines below:
https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297335,JDK-8288377,JDK-8288369,,,,,JDK-6992725,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxbv:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,Fix failed,,"2022-05-17 07:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8661
Date: 2022-05-11 18:00:31 +0000;;;","2022-06-13 13:05;dukebot;Changeset: 9b6d0a7e
Author:    Gaurav Chaudhari <deigue@hotmail.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-06-13 20:01:57 +0000
URL:       https://git.openjdk.org/jdk/commit/9b6d0a7e94fd18d302c559bec6f785d71a919a88
;;;","2022-06-13 17:42;naoto;Fix failed with the CI. The test should account for the case ""GMT-22"" from the OS.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"sun/net/www/http/KeepAliveCache/KeepAliveProperty.java failed with ""RuntimeException: Failed in server""",JDK-8285836,5073774,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,djelinski,dcubed,dcubed,2022-04-28 08:47,2023-05-28 22:13,2023-10-01 09:56,2022-08-03 07:55,11.0.17,19,20,,,,,,,,,20,core-libs,,0,8u-tier2,intermittent,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier2,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

sun/net/www/http/KeepAliveCache/KeepAliveProperty.java

Here's a snippet from the log file:

#section:main
----------messages:(4/238)----------
command: main -Dhttp.keepAlive.time.server=30 KeepAliveProperty long
reason: User specified action: run main/othervm -Dhttp.keepAlive.time.server=30 KeepAliveProperty long 
Mode: othervm [/othervm specified]
elapsed time (seconds): 3.132
----------configuration:(0/0)----------
----------System.out:(1/28)----------
URL: http://127.0.0.1:38087
----------System.err:(27/2032)----------
Apr 28, 2022 3:24:02 PM sun.net.www.protocol.http.HttpURLConnection writeRequests
FINE: sun.net.www.MessageHeader@47654f865 pairs: {GET / HTTP/1.1: null}{User-Agent: Java/19-ea}{Host: 127.0.0.1:38087}{Accept: */*}{Connection: keep-alive}
Apr 28, 2022 3:24:02 PM sun.net.www.http.HttpClient logFinest
FINEST: KeepAlive stream used: http://127.0.0.1:38087
Apr 28, 2022 3:24:02 PM sun.net.www.protocol.http.HttpURLConnection getInputStream0
FINE: sun.net.www.MessageHeader@47d0c1473 pairs: {null: HTTP/1.1 200 OK}{Content-Type: text/plain; charset=iso-8859-1}{Content-Length: 11}
Apr 28, 2022 3:24:05 PM sun.net.www.http.ClientVector get
FINEST: cached HttpClient was idle for 3000
Apr 28, 2022 3:24:05 PM sun.net.www.http.HttpClient logFinest
FINEST: KeepAlive stream retrieved from the cache, sun.net.www.http.HttpClient(http://127.0.0.1:38087)
Apr 28, 2022 3:24:05 PM sun.net.www.protocol.http.HttpURLConnection writeRequests
FINE: sun.net.www.MessageHeader@4b6ea5ee5 pairs: {GET / HTTP/1.1: null}{User-Agent: Java/19-ea}{Host: 127.0.0.1:38087}{Accept: */*}{Connection: keep-alive}
Apr 28, 2022 3:24:05 PM sun.net.www.http.HttpClient logFinest
FINEST: KeepAlive stream used: http://127.0.0.1:38087
Apr 28, 2022 3:24:05 PM sun.net.www.protocol.http.HttpURLConnection getInputStream0
FINE: sun.net.www.MessageHeader@54e77e33 pairs: {null: HTTP/1.1 200 OK}{Content-Type: text/plain; charset=iso-8859-1}{Content-Length: 13}
java.lang.RuntimeException: Failed in server
	at KeepAliveProperty.main(KeepAliveProperty.java:176)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Failed in server
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Failed in server
----------rerun:(36/6726)*----------",,,,,,,,,,JDK-8309025,JDK-8306082,JDK-8293053,JDK-8293054,JDK-8294572,JDK-8294573,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285837,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,,,,,,"0|i2wxbf:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-06-15 09:10;msheppar;there's a potential race condition .... a bit convoluted but still possible depending on the load on the systems and whether or not the server thread has been bumped after it sends it ""goodbye world"" response .... 
Consider that the server has written its goodbye world response, then gets bumped and is waiting to be run again in which it will update  the pass global variable, the main client thread continues execution, and tests pass prior to update in the server run method, thus pass is still false, yet to be updated to true
if the server thread is explicitly joined prior to testing the pass global variable, then it should mitigate the issue where the pass variable has yet to be updated in the server while the main client thread has forged ahead and tests the pass variable before it has been updated in the server thread.

In the recent ATR observation there's nothing in the ps or top to suggest excessive load and its a 12 core machine !!

Nonetheless, it would seem good practice to join the server thread and then test pass or fail condition ?

Also, the command line args a re a bit cryptic -- how about passing close_expected, close_not_expected ?;;;","2022-07-16 07:28;dcubed;Here's log file snippets from the jdk-20+7-332-tier2 the: 

sun/net/www/http/KeepAliveCache/KeepAliveProperty.java

#section:main
----------messages:(4/238)----------
command: main -Dhttp.keepAlive.time.server=30 KeepAliveProperty long
reason: User specified action: run main/othervm -Dhttp.keepAlive.time.server=30 KeepAliveProperty long 
Mode: othervm [/othervm specified]
elapsed time (seconds): 3.148
----------configuration:(0/0)----------
----------System.out:(1/28)----------
URL: http://127.0.0.1:36481
----------System.err:(27/2033)----------
Jul 16, 2022 2:17:55 PM sun.net.www.protocol.http.HttpURLConnection writeRequests
FINE: sun.net.www.MessageHeader@796713b85 pairs: {GET / HTTP/1.1: null}{User-Agent: Java/20-ea}{Host: 127.0.0.1:36481}{Accept: */*}{Connection: keep-alive}
Jul 16, 2022 2:17:55 PM sun.net.www.http.HttpClient logFinest
FINEST: KeepAlive stream used: http://127.0.0.1:36481
Jul 16, 2022 2:17:55 PM sun.net.www.protocol.http.HttpURLConnection getInputStream0
FINE: sun.net.www.MessageHeader@1018b3533 pairs: {null: HTTP/1.1 200 OK}{Content-Type: text/plain; charset=iso-8859-1}{Content-Length: 11}
Jul 16, 2022 2:17:58 PM sun.net.www.http.ClientVector get
FINEST: cached HttpClient was idle for 3000
Jul 16, 2022 2:17:58 PM sun.net.www.http.HttpClient logFinest
FINEST: KeepAlive stream retrieved from the cache, sun.net.www.http.HttpClient(http://127.0.0.1:36481)
Jul 16, 2022 2:17:58 PM sun.net.www.protocol.http.HttpURLConnection writeRequests
FINE: sun.net.www.MessageHeader@4ac01cb85 pairs: {GET / HTTP/1.1: null}{User-Agent: Java/20-ea}{Host: 127.0.0.1:36481}{Accept: */*}{Connection: keep-alive}
Jul 16, 2022 2:17:58 PM sun.net.www.http.HttpClient logFinest
FINEST: KeepAlive stream used: http://127.0.0.1:36481
Jul 16, 2022 2:17:58 PM sun.net.www.protocol.http.HttpURLConnection getInputStream0
FINE: sun.net.www.MessageHeader@6b1ec0b3 pairs: {null: HTTP/1.1 200 OK}{Content-Type: text/plain; charset=iso-8859-1}{Content-Length: 13}
java.lang.RuntimeException: Failed in server
	at KeepAliveProperty.main(KeepAliveProperty.java:176)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1589)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Failed in server
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Failed in server
----------rerun:(35/6547)*----------;;;","2022-08-01 07:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9700
Date: 2022-08-01 11:01:01 +0000;;;","2022-08-03 07:55;dukebot;Changeset: af529be0
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-08-03 14:51:28 +0000
URL:       https://git.openjdk.org/jdk/commit/af529be069b651808310c3c37e2167d216979f69
;;;","2022-09-27 10:40;goetz;Fix request [11u, 17u]

I backport this for parity with 11.0.18-oracle, 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-09-27 11:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/748
Date: 2022-09-27 18:24:43 +0000;;;","2022-09-27 12:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1377
Date: 2022-09-27 19:01:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SIGSEGV in PhaseIdealLoop::build_loop_late_post_work,JDK-8285835,5073773,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kvn,uschindler,uschindler,2022-04-28 08:40,2023-01-16 09:51,2023-10-01 09:56,2022-10-29 05:36,11,17,18,19,20,,,,,,,20,hotspot,,0,apache-lucene-found,c2,c2-ea,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,oracle-triage-19,,,,,,,,,,"While testing Apache Lucene with JDK 18 and JDK 19, we have seen the following crash now quite often (once every few days):

The first crash like this was with 18-ea-b26.
It happens very often with jdk-18 GA release.
But also seen with jdk-19-ea+14.

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f9bdccff07b, pid=2967600, tid=2967613
#
# JRE version: OpenJDK Runtime Environment (18.0+36) (build 18+36-2087)
# Java VM: OpenJDK 64-Bit Server VM (18+36-2087, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xab507b]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0xdb
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Dcommon.dir=/home/jenkins/workspace/Lucene-main-Linux/lucene -Dgradle.lib.dir=/home/jenkins/.gradle/wrapper/dists/gradle-7.2-all/260hg96vuh6ex27h9vo47iv4d/gradle-7.2/lib -Dgradle.user.home=/home/jenkins/.gradle -Dgradle.worker.jar=/home/jenkins/.gradle/caches/7.2/workerMain/gradle-worker.jar -Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom -Djava.security.manager=org.apache.lucene.tests.util.TestSecurityManager -Djava.security.policy=/home/jenkins/workspace/Lucene-main-Linux/gradle/testing/randomization/policies/tests.policy -Djava.util.logging.config.file=/home/jenkins/workspace/Lucene-main-Linux/gradle/testing/defaults-tests/logging.properties -Djdk.map.althashing.threshold=0 -Djetty.insecurerandom=1 -Djetty.testMode=1 -Djunit4.childvm.count=1 -Djunit4.childvm.id=0 -Dorg.gradle.internal.worker.tmpdir=/home/jenkins/workspace/Lucene-main-Linux/lucene/facet/build/tmp/test/work -Dorg.gradle.native=false -DtempDir=/home/jenkins/workspace/Lucene-main-Linux/lucene/facet/build/tmp/tests-tmp -Dtests.LUCENE_VERSION=10.0.0 -Dtests.asserts=true -Dtests.badapples=false -Dtests.codec=random -Dtests.directory=random -Dtests.docvaluesformat=random -Dtests.dups=0 -Dtests.failfast=false -Dtests.file.encoding=US-ASCII -Dtests.haltonfailure=false -Dtests.heapsize=512m -Dtests.infostream=false -Dtests.jvmargs=-XX:+UseCompressedOops -XX:+UseParallelGC -Dtests.jvms=6 -Dtests.leaveTemporary=false -Dtests.linedocsfile=europarl.lines.txt.gz -Dtests.locale=random -Dtests.minheapsize=256m -Dtests.monster=false -Dtests.multiplier=3 -Dtests.neverUpToDate=true -Dtests.nightly=false -Dtests.postingsformat=random -Dtests.profile=false -Dtests.seed=5AFE8586BB2DA1B9 -Dtests.slow=true -Dtests.slowestSuites=true -Dtests.slowestTests=true -Dtests.timezone=random -Dtests.useSecurityManager=true -Dtests.verbose=false -Dtests.weekly=false -Dtests.workDir=/home/jenkins/workspace/Lucene-main-Linux/lucene/facet/build/tmp/tests-tmp -XX:+UseCompressedOops -XX:+UseParallelGC --add-modules=jdk.unsupported,jdk.management -esa --module-path=/home/jenkins/workspace/Lucene-main-Linux/lucene/test-framework/build/libs/lucene-test-framework-10.0.0-SNAPSHOT.jar:/home/jenkins/workspace/Lucene-main-Linux/lucene/queries/build/libs/lucene-queries-10.0.0-SNAPSHOT.jar:/home/jenkins/workspace/Lucene-main-Linux/lucene/backward-codecs/build/libs/lucene-backward-codecs-10.0.0-SNAPSHOT.jar:/home/jenkins/workspace/Lucene-main-Linux/lucene/codecs/build/libs/lucene-codecs-10.0.0-SNAPSHOT.jar:/home/jenkins/workspace/Lucene-main-Linux/lucene/core/build/libs/lucene-core-10.0.0-SNAPSHOT.jar:/home/jenkins/.gradle/caches/modules-2/files-2.1/com.carrotsearch/hppc/0.9.0/fcc952fb6d378266b943bef9f15e67a4d45cfa88/hppc-0.9.0.jar:/home/jenkins/.gradle/caches/modules-2/files-2.1/com.carrotsearch.randomizedtesting/randomizedtesting-runner/2.7.6/17894fe98cce53f9bd994044d9bea7bd7801cafa/randomizedtesting-runner-2.7.6.jar:/home/jenkins/.gradle/caches/modules-2/files-2.1/junit/junit/4.13.1/cdd00374f1fee76b11e2a9d127405aa3f6be5b6a/junit-4.13.1.jar:/home/jenkins/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest/2.2/1820c0968dba3a11a1b30669bb1f01978a91dedc/hamcrest-2.2.jar --add-modules=ALL-MODULE-PATH --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED -Xms256m -Xmx512m -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/home/jenkins/workspace/Lucene-main-Linux/lucene/facet/build/tmp/tests-tmp -Duser.country=US -Duser.language=en -Duser.variant -ea worker.org.gradle.process.internal.worker.GradleWorkerMain 'Gradle Test Executor 57'

Host: AMD Ryzen 7 3700X 8-Core Processor, 16 cores, 62G, Ubuntu 20.04.4 LTS
Time: Thu Apr 28 11:26:11 2022 UTC elapsed time: 4.342910 seconds (0d 0h 0m 4s)

---------------  T H R E A D  ---------------

Current thread (0x00007f9bd4088c30):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=2967613, stack(0x00007f9bbc7d9000,0x00007f9bbc8da000)]


Current CompileTask:
C2:   4342 4892       4       org.apache.lucene.facet.range.RangeFacetCounts::count (519 bytes)

Stack: [0x00007f9bbc7d9000,0x00007f9bbc8da000],  sp=0x00007f9bbc8d5540,  free space=1009k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xab507b]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0xdb
V  [libjvm.so+0xab5670]  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)+0x180
V  [libjvm.so+0xab5f9e]  PhaseIdealLoop::build_and_optimize(LoopOptsMode)+0x75e
V  [libjvm.so+0x5b009a]  Compile::Optimize()+0x5aa
V  [libjvm.so+0x5b2228]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xe78
V  [libjvm.so+0x4f4b51]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x101
V  [libjvm.so+0x5baba8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xca8
V  [libjvm.so+0x5bb6f8]  CompileBroker::compiler_thread_loop()+0x4a8
V  [libjvm.so+0xd91a62]  JavaThread::thread_main_inner()+0xc2
V  [libjvm.so+0xd95c10]  Thread::call_run()+0xc0
V  [libjvm.so+0xbfa4f1]  thread_native_entry(Thread*)+0xe1

Threads with active compile tasks:
C2 CompilerThread0     4345 4892       4       org.apache.lucene.facet.range.RangeFacetCounts::count (519 bytes)
C2 CompilerThread3     4345 4901 %     4       org.apache.lucene.facet.range.LongRangeFacetCounts::count @ 144 (240 bytes)
C2 CompilerThread6     4345 4766 %     4       org.apache.lucene.facet.range.TestRangeFacetCounts::testRandomLongsMultiValued @ 581 (1129 bytes)

Not sure how to reproduce this - as always. Looks like the above crash was in Lucene's facet module, so one can try this in a loop:

$ gradlew :lucene:facet:test","Host: AMD Ryzen 7 3700X 8-Core Processor, 16 cores, 62G, Ubuntu 20.04.4 LTS
",,,,,,,,,JDK-8297510,JDK-8299626,JDK-8300216,JDK-8296279,JDK-8296277,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-10-26 00:28;roland;TestBrokenEA.java;https://bugs.openjdk.org/secure/attachment/101193/TestBrokenEA.java","2022-04-28 08:40;uschindler;hs_err_pid2967600.log;https://bugs.openjdk.org/secure/attachment/98734/hs_err_pid2967600.log","2022-09-23 08:35;zgu;hs_err_pid899.log;https://bugs.openjdk.org/secure/attachment/100850/hs_err_pid899.log","2022-09-26 23:34;thartmann;replay_pid2821873.log;https://bugs.openjdk.org/secure/attachment/100868/replay_pid2821873.log","2022-04-28 08:40;uschindler;replay_pid2967600.log;https://bugs.openjdk.org/secure/attachment/98733/replay_pid2967600.log","2022-09-23 09:47;zgu;replay_pid899.log;https://bugs.openjdk.org/secure/attachment/100851/replay_pid899.log",,,,,x86,,,,,,,,,,linux,,,,,,"0|i2wxb7:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-28 08:45;uschindler;Looks like it is happening while compiling this: https://github.com/apache/lucene/blob/6b82e600a8f8e2dcfd182bcaf58a3434e9a05b3f/lucene/facet/src/java/org/apache/lucene/facet/range/RangeFacetCounts.java#L108-L217

(Sorry for the huge method!);;;","2022-04-28 16:03;dlong;It sounds similar to JDK-8283386.  Both crash in the same function and show lots of inlining in the replay files.  Like JDK-8283386, it would be nice to have the crash info from a debug build to see if this is really a duplicate of JDK-8280600.;;;","2022-04-28 16:04;dlong;ILW = same as JDK-8283386 = HLM = P3 ;;;","2022-04-28 16:07;dlong;Closing as a dup of JDK-8283386.;;;","2022-04-28 23:33;thartmann;[~uschindler] mentioned ""also seen with jdk-19-ea+14"" but JDK-8280600 was fixed in JDK 19 b08 which would mean that it's not a duplicate of JDK-8280600, right?;;;","2022-04-28 23:37;thartmann;[~uschindler] could you provide instructions on how to set up the test environment that you were using when this happened? ;;;","2022-04-29 00:08;thartmann;I'm not able to reproduce this with replay compilation (even after working around JDK-8285885).;;;","2022-04-29 00:10;uschindler;Hi,

> [~uschindler] mentioned ""also seen with jdk-19-ea+14"" but JDK-8280600 was fixed in JDK 19 b08 which would mean that it's not a duplicate of JDK-8280600, right?

For jdk-19-ea+14 I have seen it, too. But I am not 100% sure if it is the same issue: It just has same affected method name in the SEGV. Unfortunately, I don't have the replay logs anymore (they are deleted after some time by the CI Server Jenkins).

> [~uschindler] could you provide instructions on how to set up the test environment that you were using when this happened?

This is a Jenkins environment. To reproduce it locally (I haven't tried as this often requires running the same tests in a loop for hours), you can checkout Apache Lucene and run the test with exactly the same random seed (Lucene's tests are randomized, so they ofteb hit bugs like this). Unfortunately as the JVM crashed it does not state a reproduce line for the failing test.

The failing build is here (I made it sticky so it won't be cleaned up): https://jenkins.thetaphi.de/job/Lucene-main-Linux/34243/

I will collect all info that I can extract and give you a few lines to run the test again.;;;","2022-04-29 00:46;thartmann;Thanks Uwe! Regarding ""The first crash like this was with 18-ea-b26"", did you test with earlier builds of JDK 18 or was this just the first JDK 18 build you used?;;;","2022-04-29 02:22;uschindler;> Regarding ""The first crash like this was with 18-ea-b26"", did you test with earlier builds of JDK 18 or was this just the first JDK 18 build you used?

We did tests with previous versions, too. But as it was not crashing all the time and we did not install all versions so it could have been introduced a few bulds before that.

Nevertheless, with JDK-18 now in our official build path we see crashes like this every few days.

This weekend I will also update to latest JDK-19 build. If the error happens again, I will post it here, so we can know for sure that it was caused by the same issue.

I was in a meeting, now I will work on giving you some instriuctions... Stay tuned. It is a bit complicated to run tests against JDK-18, because Gradle does not support it, so you have to run Gradle and the build with JDK 17 (the minimum version for Lucene Main branch) and set an environment variable RUNTIME_JAVA_HOME so the test executor runs tests with that version.;;;","2022-04-29 02:49;uschindler;Here is how to setup Lucene with the exact same setup, git hash and config as the failing Jenkins test (I tried this on same machine):

thetaphi@serv1:~/repro$ git clone https://github.com/apache/lucene.git
Cloning into 'lucene'...
remote: Enumerating objects: 1227553, done.
remote: Counting objects: 100% (514/514), done.
remote: Compressing objects: 100% (299/299), done.
remote: Total 1227553 (delta 129), reused 416 (delta 86), pack-reused 1227039
Receiving objects: 100% (1227553/1227553), 453.43 MiB | 27.12 MiB/s, done.
Resolving deltas: 100% (721267/721267), done.

thetaphi@serv1:~/repro$ cd lucene/

thetaphi@serv1:~/repro/lucene$ git checkout a8d86ea6e8b89ea0324e7f8b6e1d5213254274d5
Note: switching to 'a8d86ea6e8b89ea0324e7f8b6e1d5213254274d5'.
HEAD is now at a8d86ea6e8b LUCENE-10292: Suggest: Fix FreeTextSuggester so that getCount() returned results consistent with lookup() during concurrent build()

thetaphi@serv1:~/repro/lucene$ export JAVA_HOME=/your/home/dir/jdk-17

thetaphi@serv1:~/repro/lucene$ export RUNTIME_JAVA_HOME=/your/home/dir/jdk-18-or-later

thetaphi@serv1:~/repro/lucene$ export TEST_JVM_ARGS=""-XX:+UseCompressedOops -XX:+UseParallelGC""

thetaphi@serv1:~/repro/lucene$ ./gradlew :lucene:facet:test -Ptests.seed=5AFE8586BB2DA1B9 -Ptests.multiplier=3 -Ptests.jvms=1
Starting a Gradle Daemon (subsequent builds will be faster)

> Task :altJvmWarning
NOTE: Alternative java toolchain will be used for compilation and tests:
  Project will use 18 (OpenJDK 18+36-2087, home at: /home/jenkins/tools/java/64bit/jdk-18)
  Gradle runs with 17 (Eclipse Adoptium JDK 17.0.2+8, home at: /home/jenkins/tools/java/64bit/jdk-17.0.2)


> Task :randomizationInfo
Running tests with randomization seed: tests.seed=5AFE8586BB2DA1B9

> Task :errorProneSkipped
WARNING: errorprone disabled (skipped on non-nightly runs, pass -Ptests.nightly=true to run)

> Task :lucene:facet:test
WARNING: A command line option has enabled the Security Manager
WARNING: The Security Manager is deprecated and will be removed in a future release
:lucene:facet:test (SUCCESS): 238 test(s), 3 skipped

This should crash, but it doesnt! :-( It is using the exact same settings (see TEST_JVM_ARGS env var, you may modify it, too - but that are the settings jenkins used).

You can also run the whole thing in a loop with random seeds changing all the time:

thetaphi@serv1:~/repro/lucene$ ./gradlew :lucene:facet:beast -Ptests.dups=100 -Ptests.multiplier=3 -Ptests.jvms=6

The beast task duplicates all tests ""tests.dups"" times (100) in the example and here all is ran with 6 JVMs in parallel. Our Jenkins uses 6 test runners, so to better reproduce maybe that's the best option.

Unfortunately I was not able to reproduce yet. I will let it run a few hours :-);;;","2022-04-29 02:56;thartmann;Thanks Uwe, I'm getting this failure:

FAILURE: Build failed with an exception.

* Where:
Script '/scratch/tohartma/lucene/gradle/java/modules.gradle' line: 494

* What went wrong:
A problem occurred evaluating project ':lucene:spatial-extras'.
> Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.
   > No signature of method: java.lang.Object.clone() is applicable for argument types: () values: []
     Possible solutions: collect(), collect(groovy.lang.Closure), collect(java.util.Collection, groovy.lang.Closure), any(), find(), print(java.io.PrintWriter)
;;;","2022-04-29 03:06;uschindler;You can also try to run the default test suite in one JVM, but just repeating every test 100 times:

thetaphi@serv1:~/repro/lucene$ ./gradlew :lucene:facet:test -Ptests.seed=5AFE8586BB2DA1B9 -Ptests.multiplier=3 -Ptests.jvms=1 -Ptests.iters=100;;;","2022-04-29 03:08;uschindler;> Thanks Uwe, I'm getting this failure:

Did you run with ""./gradlew"" (remeber the ""w"" and ""./""), otherwise it may be some preinstalled and outdated / too new gradle version in your distrbution?;;;","2022-04-29 03:13;uschindler;Nevertheless, I have to tell you that I was not able to reproduce it on same hardware. Not sure if you can use the replay files to trigger the bug (you may be able to inject those to the test runner's JVM using the TEST_JVM_ARGS env var).;;;","2022-04-29 03:16;thartmann;Yes, I'm running with ./gradlew and JAVA_HOME is 17.0.2+8-LTS-86, not sure what the problem is.;;;","2022-04-29 03:22;thartmann;And it's expected that such crashes in the JIT are extremely hard to reproduce but usually running it repeatedly for several days does the trick. ;;;","2022-04-29 03:24;uschindler;No idea where this comes from. I searched the mailing list but nobody else reported something like this!

It looks like Gradle already fails when setting up the project. The code that fails to compile is our custom build code to let gradle compile and run tests with the Java Module System (Lucene is fully modularized since version 9.1.0). Gradle's native module system support is - as you might expect - incomplete or not existant. :-) The error message is also very strange: clone() should always exist!;;;","2022-04-29 03:28;thartmann;It looks like this: https://github.com/grails/grails-core/issues/12152#issuecomment-952019192;;;","2022-04-29 03:31;uschindler;Dawid Weiss told me:
> maybe a different jvm in his path (java_home is not important, I think)
> which -a java?
> Also, if he runs with --stack we may see what the source stack is

I'd suggest to also set PATH to point to Java 17. Also maybe add --stacktrace to command line.;;;","2022-04-29 03:53;thartmann;I already have JDK 17.0.2 on PATH:

$ java -version
java version ""17.0.2"" 2022-01-18 LTS
Java(TM) SE Runtime Environment (build 17.0.2+8-LTS-86)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.2+8-LTS-86, mixed mode, sharing)

$ which -a java
/scratch/tohartma/lucene/jdk-17.0.2/bin//java
/usr/bin/java
/bin/java

Stack trace is:

* Exception is:
org.gradle.api.GradleScriptException: A problem occurred evaluating project ':lucene:spatial-extras'.
        at org.gradle.groovy.scripts.internal.DefaultScriptRunnerFactory$ScriptRunnerImpl.run(DefaultScriptRunnerFactory.java:93)
        at org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.lambda$apply$0(DefaultScriptPluginFactory.java:133)
        at org.gradle.configuration.ProjectScriptTarget.addConfiguration(ProjectScriptTarget.java:79)
        at org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.apply(DefaultScriptPluginFactory.java:136)
        at org.gradle.configuration.BuildOperationScriptPlugin$1.run(BuildOperationScriptPlugin.java:65)
[...]
        at org.gradle.wrapper.BootstrapMainStarter.start(BootstrapMainStarter.java:35)
        at org.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:108)
        at org.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:63)
Caused by: org.gradle.api.internal.plugins.PluginApplicationException: Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.
        at org.gradle.api.internal.plugins.DefaultPluginManager.doApply(DefaultPluginManager.java:173)
        at org.gradle.api.internal.plugins.DefaultPluginManager.apply(DefaultPluginManager.java:151)
        at org.gradle.api.plugins.JavaLibraryPlugin.apply(JavaLibraryPlugin.java:51)
[...]
        at org.gradle.api.Script$apply$0.callCurrent(Unknown Source)
        at build_90ht0n1nmwcwc5pkt0j1c72m7.run(/scratch/tohartma/lucene/lucene/spatial-extras/build.gradle:18)
        at org.gradle.groovy.scripts.internal.DefaultScriptRunnerFactory$ScriptRunnerImpl.run(DefaultScriptRunnerFactory.java:91)
        ... 209 more
Caused by: groovy.lang.MissingMethodException: No signature of method: java.lang.Object.clone() is applicable for argument types: () values: []
Possible solutions: collect(), collect(groovy.lang.Closure), collect(java.util.Collection, groovy.lang.Closure), find(), any(), any(groovy.lang.Closure)
        at ModularPathsExtension.clone(/scratch/tohartma/lucene/gradle/java/modules.gradle:494)
        at ModularPathsExtension.cloneWithMode(/scratch/tohartma/lucene/gradle/java/modules.gradle:498)
        at ModularPathsExtension$cloneWithMode$0.call(Unknown Source)
        at modules_7m9geo81re84fucj0771dcb0z$_run_closure1$_closure2$_closure4.doCall(/scratch/tohartma/lucene/gradle/java/modules.gradle:47)
        at jdk.internal.reflect.GeneratedMethodAccessor344.invoke(Unknown Source)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at org.gradle.util.internal.ClosureBackedAction.execute(ClosureBackedAction.java:72)
        at org.gradle.util.internal.ConfigureUtil.configureTarget(ConfigureUtil.java:155)
        at org.gradle.util.internal.ConfigureUtil.configure(ConfigureUtil.java:106)
[...]
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:74)
        at org.gradle.api.internal.plugins.DefaultPluginManager.lambda$doApply$0(DefaultPluginManager.java:167)
        at org.gradle.configuration.internal.DefaultUserCodeApplicationContext.apply(DefaultUserCodeApplicationContext.java:44)
        at org.gradle.api.internal.plugins.DefaultPluginManager.doApply(DefaultPluginManager.java:166)
        ... 240 more
;;;","2022-04-29 04:01;thartmann;Issue seems to be with Groovy:
https://issues.apache.org/jira/browse/GROOVY-10405;;;","2022-04-29 04:23;uschindler;Thanks. It is still strange why this happens only for you! We all run our code with JDK 17, so maybe something is different in the Oracle version vs. the AdoptOpenJDK version. Sorry about this totally unrelated issue!

We are currently updating Gradle to latest version in Lucene (thaks Dawid Weiss). If that works, you may update your git checkout to latest version. This would of course no longer be the same version like the one failed in this issue, but it doesn'Ät reproduce easy anyways. So You can use any Lucene checkout, so a ""git checkout main"" instead of the hash should be fine, too.

Maybe try AdoptOpenJDK to run Gradle (no need to run this for the tests, therefore we have RUNTIME_JAVA_HOME), but we are all out of suggestions.;;;","2022-05-02 00:07;thartmann;Thanks Uwe. Dawid Weiss provided a patch that now allows me to build and run the tests. I'll report back if I'm able to reproduce the JVM crash.;;;","2022-05-02 17:06;dlong;BTW, I built my own lucene .jar files and tried to replay with replay_pid2967600.log but it didn't crash with 18+36-2087.;;;","2022-05-02 23:20;thartmann;Yes, I did the same (also with RepeatCompilation and several stress options) - no luck. Hopefully the full run will reproduce it at some point.;;;","2022-05-05 08:16;uschindler;This is unfortunately very unfortunate. If I see another hit, I could post more hits with this. I don't think its a hardware issue, because it only fails exactly with that stack trace.;;;","2022-05-05 23:22;thartmann;Yes, it's most likely the same issue as JDK-8283386. We are investigating but to make progress, we need a reproducer. I'm still running the Lucene tests in a loop but no luck so far.

It might help if you could run your testing with a fastdebug build of the JVM, if possible. It will be much slower but might give us some additional insight if asserts are hit.;;;","2022-05-06 08:07;uschindler;Hi, I will install some of Shiplev's fastdebug builds over weekend and let run Jenkins builds through it.;;;","2022-05-09 00:38;thartmann;Thanks, I was finally able to reproduce this after running the :lucene:facet:beast test for 4 days.;;;","2022-05-09 06:27;uschindler;Hi Tobias,
great! If you need more data points, I can work on it, but fastdebug builds are not active at moment.;;;","2022-05-10 01:05;thartmann;Thanks, not needed at this point. ;;;","2022-06-24 06:10;thartmann;Re-opening because it turned out to be independent of JDK-8283386.;;;","2022-07-06 06:43;thartmann;I was finally able to reproduce this more reliably by using ""-XX:+UseCompressedOops -XX:+UseParallelGC -XX:+StressIGVN -Xbatch"" and running the following command in a loop:
  ./gradlew :lucene:facet:test --tests ""*testRandomLongs*"";;;","2022-09-22 07:58;thartmann;I can still only reproduce this rarely and after performing many runs, I was able to determine that since JDK-8272330 it reproduces much more often (before, it reproduced after 42817 runs, after it reproduced after ~5000 runs). So this might well be an old issue.;;;","2022-09-23 08:35;zgu;It is quite easy to reproduce with jdk17u 32-bit/tier2, I hit this crash 2 out of 2 runs.;;;","2022-09-26 03:48;thartmann;[~zgu] could you provide instructions on how you reproduced the issue?;;;","2022-09-26 06:40;zgu;[~thartmann] I built jdk7u-dev 32-bits on RHEL7 vagrant box with devtoolset-7, then run tier2 tests.

My vagrant box configuration:

  config.vm.define :rhel7 do |config|
    config.vm.box = 'generic/rhel7'
    config.vm.host_name = 'rhel7.localdomain'
    config.disksize.size = '80GB'
    config.vm.provider ""virtualbox"" do |vb|
      vb.memory = ""20480""
      vb.cpus = ""8""
    end
end

;;;","2022-09-26 23:31;thartmann;Okay, thanks. It might well be a different issue though because a crash/assert in this method is quite generic.;;;","2022-09-26 23:34;thartmann;I'm now able to reproduce this reliably with replay compilation:
- Download and unpack jar/class files from http://cr.openjdk.java.net/~thartmann/8285835/jars.zip
- Run java -XX:+ReplayIgnoreInitErrors -XX:+ReplayCompiles -XX:ReplayDataFile=replay_pid2821873.log -cp jars:jars/* -XX:+UseParallelGC

Reproduces with JDK 20-ea+17-1159.

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/loopnode.cpp:5854
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8340/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/92701a50-9423-4c0a-b1a9-76fdf2bba15d/runs/97ed0e3b-7532-46ba-a3e8-d6aabd0476e7/workspace/open/src/hotspot/share/opto/loopnode.cpp:5854), pid=994437, tid=994446
#  assert(false) failed: Bad graph detected in build_loop_late
#
# JRE version: Java(TM) SE Runtime Environment (20.0+17) (fastdebug build 20-ea+17-1159)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+17-1159, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x148dbb7]  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)+0x187
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/tobias/Downloads/hs_err_pid994437.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp;;;","2022-09-26 23:38;thartmann;I suspect that this could be a duplicate of JDK-8293941, JDK-8290850 or JDK-8288981.;;;","2022-09-27 00:16;thartmann;Christian, could you please have a look?;;;","2022-09-27 01:25;uschindler;Thanks for digging into that!;;;","2022-10-19 02:42;uschindler;Hi,
the Apache Solr team (which is based on the Lucene library) gets more an more reports of downstream users that the Apache Solr Docker image fails with exactly that error. Although Solr does not use the Lucene Facet module (it has its own), it looks like other loops are affected by this, too. In Solr's case it looks like C2 compiling com.github.benmanes.caffeine.cache.BoundedLocalCache::put (731 bytes) is affected: https://github.com/ben-manes/caffeine/blob/4ac6eb5591a1d325c2786fc335688cf6f20c228a/caffeine/src/main/java/com/github/benmanes/caffeine/cache/BoundedLocalCache.java#L2208-L2317

The user reports can be seen here: https://lists.apache.org/thread/wg7qtkddd1t5h08okj7gm9qbrpdf0ox6

Apache Solr will now provide an alternative Docker image based on JDK 11 so affected users can fallback to it. In case you have a bugfix, please make sure that you backport this to JDK 17.;;;","2022-10-19 04:44;chagedorn;A simpler reproducer:

$ java -XX:-UseProfiledLoopPredicate -XX:-UseLoopPredicate -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=replay_pid2821873.log -cp jars:jars/* -XX:+UseParallelGC -XX:CompilerDirectivesFile=commands

with `commands` file:
[
  {
    match : [""*.*""],

    inline : [
    ""-java/nio*.*"",
    ""-java/lang/String.*"",
    ""-java/util/TreeMap.*"",
    ""-java/util/HashMap.*"",
    ""-jdk*.*"",
    ""-org/apache/lucene/tests/index/range/RangeFacetCounts.*"",
    ""-org/apache/lucene/facet/range/OverlappingLongRangeCounter.*"",
    ""-org/apache/lucene/facet/range/RangeFacet*.*"",
    ""-org/apache/lucene/util/BitSetIterator*.*"",
    ""-org/apache/lucene/tests/store*.*"",
    ""-org/apache/lucene/tests/index/DocValues.*"",
    ""-org/apache/lucene/util/packed.*"",
    ],
  },
]

and disabling ci replay assertion:

diff --git a/src/hotspot/share/ci/ciObjectFactory.cpp b/src/hotspot/share/ci/ciObjectFactory.cpp
--- a/src/hotspot/share/ci/ciObjectFactory.cpp	
+++ b/src/hotspot/share/ci/ciObjectFactory.cpp	
@@ -290,7 +290,7 @@
     Klass* k = (Klass*)key;
     if (k->is_instance_klass() && ciReplay::is_klass_unresolved((InstanceKlass*)k)) {
       // Klass was unresolved at replay dump time. Simulate this case.
-      return ciEnv::_unloaded_ciinstance_klass;
+//      return ciEnv::_unloaded_ciinstance_klass;
     }
   }
 
@@ -384,7 +384,7 @@
   if (o->is_klass()) {
     Klass* k = (Klass*)o;
     if (k->is_instance_klass()) {
-      assert(!ReplayCompiles || ciReplay::no_replay_state() || !ciReplay::is_klass_unresolved((InstanceKlass*)k), ""must be whitelisted for replay compilation"");
+//      assert(!ReplayCompiles || ciReplay::no_replay_state() || !ciReplay::is_klass_unresolved((InstanceKlass*)k), ""must be whitelisted for replay compilation"");
       return new (arena()) ciInstanceKlass(k);
     } else if (k->is_objArray_klass()) {
       return new (arena()) ciObjArrayKlass(k);
;;;","2022-10-21 08:11;roland;I attached a test I wrote (TestBrokenEA.java) that causes a similar issue:

#  Internal Error (/home/roland/jdk-jdk/src/hotspot/share/opto/split_if.cpp:348), pid=4113361, tid=4113369
#  assert(prior_n->is_Region()) failed: must be a post-dominating merge point

I believe it's a bug in EA where ConnectionGraph::split_AddP() sets the inputs of AddP to a node that doesn't dominate it.;;;","2022-10-26 01:00;kvn;EA does not adjust NSR (not_scalar_replaceable) state for referenced allocations.
In the test object A is NSR because it merges with NULL. But this state is not propagated to allocations it references.
EA does correctly propagate Argument and Global escape state. We should do something similar for NSR.
;;;","2022-10-27 16:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10894
Date: 2022-10-27 23:14:11 +0000;;;","2022-10-28 00:14;uschindler;Hi,
I looked at the ""simple reproducer""  (TestBrokenEA.java). How does this relate to the Lucene Facet example? Which loop in there has a similar structure?
I am interested because a similar issue like this one is also happening in Ben Manes Caffeine (https://github.com/ben-manes/caffeine) and currently affects many Apache SOlr users. I'd like to look at the loops and understand what's happeing: https://github.com/ben-manes/caffeine/blob/4ac6eb5591a1d325c2786fc335688cf6f20c228a/caffeine/src/main/java/com/github/benmanes/caffeine/cache/BoundedLocalCache.java#L2208-L2317;;;","2022-10-28 00:32;roland;[~uschindler] I don't have an answer to that question. I wrote the test case from what I observed during a failing compilation process. I never looked at the java source code. I see allocations that are involved are at:

Lucene90DocValuesProducer::getNumericValues @ bci:141 (line 647)
Lucene90DocValuesProducer::getSortedNumeric @ bci:69 (line 1304)
AssertingLeafReader$AssertingSortedNumericDocValues::create @ bci:9 (line 892)
RangeFacetCounts::count @ bci:6 (line 114)

Not sure how helpful that is.;;;","2022-10-28 01:00;uschindler;It looks like this loop: https://github.com/apache/lucene/blob/6b82e600a8f8e2dcfd182bcaf58a3434e9a05b3f/lucene/facet/src/java/org/apache/lucene/facet/range/RangeFacetCounts.java#L118-L137

The first 2 allocations are inside DocValues.getSortedNumeric (line 122, a static method doing the 2 allocations and returning one or the other). The third allocation is coming from the ""hits.context.reader()"" (which is an instance of this AssertingLeafReader; Lucene wraps some of its interfaces at test time with some asserting implementations to check if they behave correctly)  which is passed to that static method.

The ""test1()"" like method in your test starting with the array assignment is line 123 and then there is the if/else looking also like in the test. So it looks like similar code.

I will check Ben Manes' Caffeine if I find something similar.

It would really be good to verify that the PR fixes the original issue.;;;","2022-10-28 01:28;uschindler;Actually A, B, C are those wrappers: A (is AssertingSortedNumericDocValues) wrapping B (a so called SingletonSortedNumericDocValues, created here: https://github.com/apache/lucene/blob/6b82e600a8f8e2dcfd182bcaf58a3434e9a05b3f/lucene/core/src/java/org/apache/lucene/index/DocValues.java#L198-L200) and this singleton wraps C, another NumericDocValues instance on lowest level.;;;","2022-10-29 05:36;dukebot;Changeset: 8aa1526b
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-10-29 12:32:36 +0000
URL:       https://git.openjdk.org/jdk/commit/8aa1526b443025b8606a3668262f46a9cb6ea6f6
;;;","2022-10-31 00:59;uschindler;Thanks for the fix, after some code analysis it looks that this is the same bug like we have seen for Caffeine and another bug reported on the Adoptium website.

Would this be a candidate for backport to 17?;;;","2022-10-31 01:26;thartmann;Yes, it will be backported to JDK 17u after some stabilization time in mainline.;;;","2022-11-22 07:58;thartmann;Fix Request (JDK 19u)
Fixes a crash during C2 compilation. The fix is medium risk and applies cleanly. Already tested and backported to Oracle JDK 11u and 17u.;;;","2022-11-22 08:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/82
Date: 2022-11-22 15:57:49 +0000;;;","2023-01-03 03:28;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
C2 change with the typical risk. We should go along and avoid the crash.
I had to resolve and adapted the code  a bit.
Test passes but also passes without the fix. SAP nighlty testing passed.;;;","2023-01-03 03:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1023
Date: 2023-01-03 11:24:59 +0000;;;","2023-01-12 08:37;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle from 17
C2 change with the typical risk. We should go along and avoid the crash.
I had to resolve due to a trivial context difference.
Test passes but also passes without the fix. SAP niglty testing passed.;;;","2023-01-12 08:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1649
Date: 2023-01-12 16:36:13 +0000;;;"
"runtime/Thread/TooSmallStackSize.java failed ""assert(k->is_initialized()) failed: need to increase java_thread_min_stack_allowed calculation""",JDK-8285832,5073768,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,coleenp,dcubed,dcubed,2022-04-28 07:33,2022-06-17 08:12,2023-10-01 09:56,2022-06-15 12:06,19,repo-loom,,,,,,,,,,19,hotspot,,0,tier1,,,,,,,,,,,,,,,,,,,,"The following test failed in loom-jep-vt:

runtime/Thread/TooSmallStackSize.java

Here's a log file snippet:

#section:driver
----------messages:(6/239)----------
command: driver TooSmallStackSize
reason: User specified action: run driver TooSmallStackSize 
Mode: agentvm
Agent id: 20
Additional exports to unnamed modules from @modules: java.base/jdk.internal.misc
elapsed time (seconds): 0.372
----------configuration:(17/1600)*----------

<snip>

----------System.out:(7/1719)*----------
*** Testing -XX:ThreadStackSize=16
Command line: [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-19-loomvt+1-47\\windows-x64-debug.jdk\\jdk-19\\fastdebug\\bin\\java.exe -cp T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\classes\\3\\runtime\\Thread\\TooSmallStackSize.d;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-19-loomvt+1-47\\src.full\\open\\test\\hotspot\\jtreg\\runtime\\Thread;T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\classes\\3\\test\\lib;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\javatest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\jtreg.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\junit.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\hamcrest.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\testng.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\jcommander.jar;C:\\ade\\mesos\\work_dir\\jib-master\\install\\jtreg\\6.1\\1\\bundles\\jtreg-6.1+1.zip\\jtreg\\lib\\guice.jar -XX:ThreadStackSize=16 -version ]
[2022-04-28T14:23:17.076717300Z] Gathering output for process 8776
[2022-04-28T14:23:17.189163700Z] Waiting for completion for process 8776
[2022-04-28T14:23:17.241879500Z] Waiting for completion finished for process 8776
[2022-04-28T14:23:17.242784300Z] Waiting for completion for process 8776
[2022-04-28T14:23:17.242784300Z] Waiting for completion finished for process 8776
----------System.err:(53/3351)*----------
 stdout: [# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\exceptions.cpp:240
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\\workspace\\open\\src\\hotspot\\share\\utilities\\exceptions.cpp:240), pid=8776, tid=66772
#  assert(k->is_initialized()) failed: need to increase java_thread_min_stack_allowed calculation
#
# JRE version: Java(TM) SE Runtime Environment (19.0+1) (fastdebug build 19-loomvt+1-47)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-loomvt+1-47, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\scratch\\2\\hs_err_pid8776.mdmp
#
# An error report file with more information is saved as:
# T:\\testoutput\\test-support\\jtreg_open_test_hotspot_jtreg_tier1_runtime\\scratch\\2\\hs_err_pid8776.log
Error occurred during initialization of VM
java.lang.NoClassDefFoundError: Could not initialize class jdk.internal.misc.Blocker
	at java.io.FileOutputStream.write(java.base/FileOutputStream.java:367)
	at java.io.BufferedOutputStream.flushBuffer(java.base/BufferedOutputStream.java:125)
	at java.io.BufferedOutputStream.implFlush(java.base/BufferedOutputStream.java:251)
	at java.io.BufferedOutputStream.flush(java.base/BufferedOutputStream.java:239)
	at java.io.PrintStream.implWrite(java.base/PrintStream.java:644)
	at java.io.PrintStream.write(java.base/PrintStream.java:622)
	at sun.nio.cs.StreamEncoder.writeBytes(java.base/StreamEncoder.java:313)
	at sun.nio.cs.StreamEncoder.implFlushBuffer(java.base/StreamEncoder.java:409)
	at sun.nio.cs.StreamEncoder.lockedFlushBuffer(java.base/StreamEncoder.java:127)
	at sun.nio.cs.StreamEncoder.flushBuffer(java.base/StreamEncoder.java:114)
	at java.io.OutputStreamWriter.flushBuffer(java.base/OutputStreamWriter.java:193)
	at java.io.PrintStream.implWriteln(java.base/PrintStream.java:848)
	at java.io.PrintStream.writeln(java.base/PrintStream.java:825)
	at java.io.PrintStream.println(java.base/PrintStream.java:1167)
	at java.lang.System.logInitException(java.base/System.java:2076)
	at java.lang.System.initPhase2(java.base/System.java:2201)

];
 stderr: [Java HotSpot(TM) 64-Bit Server VM warning: Potentially dangerous stack overflow in ReservedStackAccess annotated method java.util.concurrent.locks.ReentrantLock$Sync.lock()V [1]

Exception: java.lang.StackOverflowError thrown from the UncaughtExceptionHandler in thread ""Finalizer""
]
 exitValue = 1

java.lang.RuntimeException: 'The Java thread stack size specified is too small' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at TooSmallStackSize.checkStack(TooSmallStackSize.java:132)
	at TooSmallStackSize.main(TooSmallStackSize.java:170)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1584)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: 'The Java thread stack size specified is too small' missing from stdout/stderr",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286092,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,,"0|i2wxa3:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Verified,,"2022-04-28 07:52;alanb;Assigning to Coleen for now as this started failing in the fibers branch after JDK-8279663.;;;","2022-04-28 09:27;coleenp;It should have worked with increased StackShadowPages.  Investigating.
  size_t min_stack_allowed =
            (size_t)(StackOverflow::stack_guard_zone_size() +
                     StackOverflow::stack_shadow_zone_size() +
                     (4*BytesPerWord COMPILER2_PRESENT(+2)) * 4 * K);
;;;","2022-04-28 12:54;coleenp;If you increase StackShadowPages in mainline, like we should do because fill_in_stack_trace() is just at the boundary of StackShadowPages, this test will fail there too.  The code that checks if the stack size given is too small is buggy on Windows.;;;","2022-04-29 05:24;coleenp;java -XX:ThreadStackSize=16 -XX:StackShadowPages=12 -Xlog:os -version
This crashes in mainline.  This isn't a loom specific bug.;;;","2022-04-29 10:49;coleenp;With the fix that I'm testing, this is the output for various combinations of StackShadowPages and ThreadStackSize (ie not crashing) and the new minimum size stacks.  StackShadowPages on windows is currently 9 in debug and 11 with the loom integration.

hotspot-windows ~/cphillim/19stack/build/windows-x64
$ java -XX:ThreadStackSize=10 -XX:StackShadowPages=9 -version

The Java thread stack size specified is too small. Specify at least 92k                                                 
Error: Could not create the Java Virtual Machine.                                                                       
Error: A fatal exception has occurred. Program will exit.                                                               
                                                                                                                        
hotspot-windows ~/cphillim/19stack/build/windows-x64
$ java -XX:ThreadStackSize=10 -XX:StackShadowPages=8 -version
intx StackShadowPages=8 is outside the allowed range [ 9 ... 39 ] 
Improperly specified VM option 'StackShadowPages=8'                                                                     
Error: Could not create the Java Virtual Machine.                                                                       
Error: A fatal exception has occurred. Program will exit.                                                               
                                                                                                                        
hotspot-windows ~/cphillim/19stack/build/windows-x64
$ java -XX:ThreadStackSize=10 -XX:StackShadowPages=11 -version

The Java thread stack size specified is too small. Specify at least 100k                                                
Error: Could not create the Java Virtual Machine.                                                                       
Error: A fatal exception has occurred. Program will exit.                                                               
                                                                                                                                                                                                                                                                                                                                            
hotspot-windows ~/cphillim/19stack/build/windows-x64
$ java -XX:ThreadStackSize=16 -XX:StackShadowPages=20 -version

The Java thread stack size specified is too small. Specify at least 136k                                                
Error: Could not create the Java Virtual Machine.                                                                       
Error: A fatal exception has occurred. Program will exit.                                                               
                                                                                                                        ;;;","2022-04-29 15:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8471
Date: 2022-04-29 17:35:57 +0000;;;","2022-05-03 10:45;dukebot;Changeset: be67acdf
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-05-03 17:43:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/be67acdf5cb962deb657045c4c07592984a789c9
;;;","2022-06-15 12:08;coleenp;[~mseledtsov] thank you for verifying the fix!;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/execstack/TestCheckJDK.java fails with zipped debug symbols,JDK-8285828,5073766,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-04-28 07:23,2022-05-17 09:50,2023-10-01 09:56,2022-04-29 01:54,11,17,19,,,,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,noreg-self,tencent-interest,,,,,,,,,,,,"Reproduce:
 1. configure --with-native-debug-symbols=zipped  ...
 2. run runtime/execstack/TestCheckJDK.java


```
STDOUT:
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jdb.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jshell.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/rmiregistry.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jhsdb.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jar.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jarsigner.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/javadoc.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jdeprscan.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jmap.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jconsole.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/javap.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jdeps.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/javac.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jfr.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jstack.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/keytool.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jcmd.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jstat.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/java.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jinfo.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jstatd.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/serialver.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jrunscript.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jmod.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jimage.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jlink.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jpackage.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jwebserver.diz
Library does not have the noexecstack bit set: /home/jdk/build/linux-x86_64-server-release/images/jdk/bin/jps.diz
STDERR:
java.lang.RuntimeException: The tested VM contains libs that don't have the noexecstack bit set. They must be linked with -z,noexecstack.: expected true, was false
        at jdk.test.lib.Asserts.fail(Asserts.java:594)
        at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
        at TestCheckJDK.main(TestCheckJDK.java:64)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
        at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: The tested VM contains libs that don't have the noexecstack bit set. They must be linked with -z,noexecstack.: expected true, was false
JavaTest Message: shutting down test
```",,,,,,,,,,JDK-8286793,JDK-8286403,JDK-8286902,JDK-8286649,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8187045,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2wx9n:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-28 07:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8451
Date: 2022-04-28 14:34:57 +0000;;;","2022-04-29 01:54;dukebot;Changeset: c4f7a850
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-04-29 08:50:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c4f7a850c6b35dd74899dc34aeefadfddcb33bf9
;;;","2022-05-06 07:10;jiefu;Fix request for jdk17u

I'd like to backport this patch to fix the test failure.
Patch can be applied cleanly and only the test code is affected.
Thanks.;;;","2022-05-06 07:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/388
Date: 2022-05-06 14:11:03 +0000;;;","2022-05-10 11:48;hseigel;[~jiefu] Are you planning to backport this to JDK-18u?;;;","2022-05-10 18:55;jiefu;[~hseigel] Sure, I'll do it.;;;","2022-05-10 19:04;jiefu;Fix request for jdk18u

I'd like to backport this patch to fix the test failure.
Patch can be applied cleanly and only the test code is affected.
Thanks.;;;","2022-05-10 19:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/127
Date: 2022-05-11 01:59:25 +0000;;;","2022-05-10 21:22;jiefu;Fix request for jdk11u

I'd like to backport this patch to fix the test failure.
The patch doesn't apply cleanly, but only one conflict in the copyright year.
Thanks.

PR: https://github.com/openjdk/jdk11u-dev/pull/1080;;;","2022-05-10 21:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1080
Date: 2022-05-11 04:20:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Describe the keystore.pkcs12.legacy system property in the java.security file,JDK-8285827,5073765,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-04-28 07:15,2022-07-29 01:39,2023-10-01 09:56,2022-05-02 07:06,,,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,,"In JDK-8153005 we upgraded default PKCS12 encryption and integrity algorithms, at the same time we also added a system property named `keystore.pkcs12.legacy`. When set, old algorithms will be used. This system property should be described in the `java.security` file along with other PKCS12 algorithms settings.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8153005,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wx9f:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-04-28 07:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8452
Date: 2022-04-28 14:35:54 +0000;;;","2022-05-02 07:06;dukebot;Changeset: cfcba1fc
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-05-02 14:03:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cfcba1fccc8e3e6a68e1cb1826b70e076d5d83c4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove circularity from the @throws and @exception definitions,JDK-8285821,5073753,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,prappo,prappo,2022-04-28 04:21,2022-05-25 23:04,2023-10-01 09:56,2022-05-18 12:13,19,,,,,,,,,,,19,tools,,0,javadoc-spec,noreg-doc,,,,,,,,,,,,,,,,,,,"@exception
@exception class-name description
This tag is equivalent to the @throws tag, which is now the recommended form.
...
@throws
@throws class-name description
Behaves the same as the @exception tag.


To me it reads like this:

    A: see B
    B: see A",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wx6r:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: LCM prioritizes locally dependent CreateEx nodes over projections after 8270090,JDK-8285820,5073752,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,shade,shade,2022-04-28 03:59,2022-07-03 12:10,2023-10-01 09:56,2022-05-12 00:08,11,17,18,19,,,,,,,,19,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-19,,,,,,,,,,,,,,,"Before JDK-8270090, CreateEx nodes *initially ready* were given priority over Proj nodes [1], but CreateEx nodes with input dependencies within the block (""locally-dependent"") were given the same priority as Proj nodes [2]. That is, the ranking between CreateEx and Proj nodes was:

1. Initially ready CreateEx nodes
2. Proj nodes and other CreateEx nodes (tie)

JDK-8270090 altered this ranking, giving *all* CreateEx nodes priority over Proj nodes, regardless of whether they are ready initially or not [3]. This was done based on the wrong assumption that all CreateEx nodes would be initially ready. The new ranking has triggered the following test failure, specific to x86_32 using -XX:+UseShenandoahGC, but might affect other platforms and configurations:

$ CONF=linux-x86-server-fastdebug make run-test TEST=java/util/concurrent/tck/JSR166TestCase.java TEST_VM_OPTS=""-XX:+UseShenandoahGC""

# Internal Error (/home/shade/trunks/jdk/src/hotspot/cpu/x86/gc/shenandoah/shenandoahBarrierSetAssembler_x86.cpp:817), pid=3039050, tid=3039063
# assert(res != __null) failed: need result register

Current CompileTask:
C2: 2791 1631 4 java.util.concurrent.LinkedTransferQueue::xfer (236 bytes)

Stack: [0xb183f000,0xb1900000], sp=0xb18fcd00, free space=759k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [libjvm.so+0x14d12a0] ShenandoahBarrierSetAssembler::cmpxchg_oop(MacroAssembler*, RegisterImpl*, Address, RegisterImpl*, RegisterImpl*, bool, RegisterImpl*, RegisterImpl*)+0x710
V [libjvm.so+0x391091] compareAndSwapP_shenandoahNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x281
V [libjvm.so+0x1346f81] PhaseOutput::scratch_emit_size(Node const*)+0x491
V [libjvm.so+0x1113969] MachNode::size(PhaseRegAlloc*) const+0x69
V [libjvm.so+0x133d1db] PhaseOutput::shorten_branches(unsigned int*)+0x34b
V [libjvm.so+0x134fde5] PhaseOutput::Output()+0xad5
V [libjvm.so+0x96d98d] Compile::Code_Gen()+0x4dd
V [libjvm.so+0x972a6a] Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x141a
V [libjvm.so+0x796d6f] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x89f
V [libjvm.so+0x9844cd] CompileBroker::invoke_compiler_on_method(CompileTask*)+0x15bd
V [libjvm.so+0x985311] CompileBroker::compiler_thread_loop()+0x7b1
V [libjvm.so+0x9af41b] CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x2b
V [libjvm.so+0x16ee8f8] JavaThread::thread_main_inner()+0x5b8
V [libjvm.so+0x16f10a2] JavaThread::run()+0x402
V [libjvm.so+0x16fa55e] Thread::call_run()+0xfe
V [libjvm.so+0x1324ff3] thread_native_entry(Thread*)+0x123
C [libpthread.so.0+0x7635] start_thread+0xf5

[1] https://github.com/openjdk/jdk/blob/beedae1141b6b650dc4cedf1f038afc1c8b460dd/src/hotspot/share/opto/lcm.cpp#L1057-L1070
[2] https://github.com/openjdk/jdk/blob/beedae1141b6b650dc4cedf1f038afc1c8b460dd/src/hotspot/share/opto/lcm.cpp#L531-L538
[3] https://github.com/openjdk/jdk/blob/8ebea443f333ecf79d6b0fc725ededb231e83ed5/src/hotspot/share/opto/lcm.cpp#L532-L537",,,,,,,,,,JDK-8286935,JDK-8286934,JDK-8288200,JDK-8289639,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8270090,JDK-8286622,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wx6j:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-28 05:11;shade;Bisection points to JDK-8270090.;;;","2022-04-28 05:36;rcastanedalo;ILW = C2 assertion failure; running Shenandoah GC on x86; disable compilation of affected method or use default GC = MLM = P4;;;","2022-04-28 06:22;shade;Looks to me the Shenandoah CAS node was optimized away. The hack below solves the failure, by partially reverting the JDK-8270090 that made CreateEx chosen over the projection (those are used to pin atomic ops, afaics, see BarrierSetC2::pin_atomic_op). [~rcastanedalo], I wonder if CreateEx handling is now incorrect.

diff --git a/src/hotspot/share/opto/lcm.cpp b/src/hotspot/share/opto/lcm.cpp
index 3bbc46f4e1a..0bad9b05166 100644
--- a/src/hotspot/share/opto/lcm.cpp
+++ b/src/hotspot/share/opto/lcm.cpp
@@ -529,7 +529,7 @@ Node* PhaseCFG::select(
     Node *n = worklist[i];      // Get Node on worklist
 
     int iop = n->is_Mach() ? n->as_Mach()->ideal_Opcode() : 0;
-    if (iop == Op_CreateEx) {
+    if (n->is_Proj() || iop == Op_CreateEx) {
       // CreateEx must start the block (after Phi and Parm nodes which are
       // pre-scheduled): select it right away.
       worklist.map(i,worklist.pop());
;;;","2022-05-02 04:02;rcastanedalo;Thanks for the analysis [~shade]. The intention of JDK-8270090 w.r.t. CreateEx nodes was to preserve the original prioritization, where they were given the highest priority by placing them at the beginning of the ready list before running the list scheduling algorithm (see the last change in https://github.com/openjdk/jdk/pull/7988/files), so it is still unclear to me why this fails after, but not before, JDK-8270090. I don't have access to a x86_32 system, would it be possible to get the output for this test case using ""-XX:+TraceOptoPipelining -XX:+Verbose""? Thanks!;;;","2022-05-02 05:07;shade;Unfortunately, TraceOptoPipelining output is huge, even if I limit it to the problematic method with CompileCommand. I can try and manage the dump later. But here is what I gather. Before the patch, we inserted CreateEx at the top of the list, and selected Proj anyway (""Projections always win""). Meaning, before the JDK-8270090, Proj nodes had priority over CreateEx. After JDK-8270090, it is not really relevant if we inserted CreateEx on the top or not, because we would roll over the entire worklist and return CreateEx if it is anywhere on the list, right? Meaning, after JDK-8270090 invert the priority of CreateEx over Proj: now CreateEx would be selected first.;;;","2022-05-03 01:38;rcastanedalo;I think I finally see what's going on. Before JDK-8270090, only CreateEx nodes *initially ready* were given priority over Proj nodes [1], but CreateEx nodes with input dependencies within the block where given the same priority as Proj nodes [2]. That is, the ranking between CreateEx and Proj nodes was:

1. Initially ready CreateEx nodes
2. Proj nodes and other CreateEx nodes (tie)

JDK-8270090 indeed altered this ranking, giving *all* CreateEx nodes priority over Proj nodes, regardless of whether they are ready initially or not [3]. This was done based on the seemingly wrong assumption that all CreateEx nodes would be initially ready.

I think the ranking between CreateEx nodes and Proj nodes should be, for clarity:

1. Initially ready CreateEx nodes
2. Proj nodes
3. Other CreateEx nodes

Alternatively, we could partially revert JDK-8270090 as you suggest in your patch above, also reintroducing the code that manipulates the ready list order to raise the priority of initially ready CreateEx nodes [4]. This would be less disruptive but I find it brittle and a bit convoluted to rely on the ready list order for correctness.

What do you think?

[1] https://github.com/openjdk/jdk/blob/beedae1141b6b650dc4cedf1f038afc1c8b460dd/src/hotspot/share/opto/lcm.cpp#L1057-L1070
[2] https://github.com/openjdk/jdk/blob/beedae1141b6b650dc4cedf1f038afc1c8b460dd/src/hotspot/share/opto/lcm.cpp#L531-L538
[3] https://github.com/openjdk/jdk/blob/8ebea443f333ecf79d6b0fc725ededb231e83ed5/src/hotspot/share/opto/lcm.cpp#L532-L537
[4] https://github.com/openjdk/jdk/blob/beedae1141b6b650dc4cedf1f038afc1c8b460dd/src/hotspot/share/opto/lcm.cpp#L1063-L1066;;;","2022-05-03 01:53;shade;Yes, that makes sense. So before JDK-8270090 we added initially ready CreateEx node to the beginning of the worklist, and that always resolved the tie against subsequent Proj in favor of CreateEx. If we do my hack, that would mean initially ready CreateEx nodes *may* lose that tie and Proj would be selected first -- and so it would require reinstating adding the initially ready CreateEx at the beginning of worklist. I agree that's quite fragile, but at least it gets us back to state before JDK-8270090. If you can come up with better way to do this, it would be nice.

This confirms the bug is more or less generic, it just so happens to manifest on Shenandoah x86_32. Feel free to change the synopsis accordingly.;;;","2022-05-04 05:25;rcastanedalo;Updating priority after the pre-investigation:
ILW = C2 assertion failure; observed running Shenandoah GC on x86 but might be generic; disable compilation of affected method = MMM = P3;;;","2022-05-05 00:55;rcastanedalo;I decided to go with the lower-risk approach of partially reverting JDK-8270090 by now, the proposed solution is implemented in https://github.com/robcasloz/jdk/tree/JDK-8285820. I will file a RFE for reworking the scheduling of initially-ready CreateEx nodes in the future.

[~shade] Testing on windows-x64, linux-x64, linux-aarch64, and macosx-x64 looks good. Could you please re-run your linux-x86+UseShenandoahGC tests on the above branch?;;;","2022-05-05 01:16;rcastanedalo;[~marchof] The fix to JDK-8270090 caused failures in other configurations, so it has to be partially reverted. The parts that have to be reverted should not reintroduce the issue seen in JDK-8270090 (wrong relative ranking between projections and CheckCastPP nodes), but would be good to test it. Would it be possible to test building JaCoCo on ARM32 using a fastdebug build of https://github.com/robcasloz/jdk/tree/JDK-8285820? (i.e. same as https://pici.beachhub.io/#/JDK-8270090/ and https://pici.beachhub.io/#/JDK-8270090-jacoco/ but for my personal JDK-8285820 branch). Thanks!;;;","2022-05-05 01:58;marchof;[~rcastanedalo] JDK build is running https://pici.beachhub.io/#/jdk-8285820;;;","2022-05-05 05:52;rcastanedalo;Thanks [~marchof]! The build succeeded, would it be possible to test building JaCoCo using this JDK build? (similarly to https://pici.beachhub.io/#/JDK-8270090-jacoco).;;;","2022-05-05 05:59;shade;I tested the original Shenandoah reproducer and it passes. Once PR is open, GHA would test x86_32 tier1, and I can do tier1 with Shenandoah too.;;;","2022-05-05 06:02;marchof;[~rcastanedalo] The JaCoCo build is already running: https://pici.beachhub.io/#/jdk-8285820-jacoco;;;","2022-05-05 06:10;rcastanedalo;Thank you both!;;;","2022-05-06 03:22;marchof;JaCoCo build is green with fastdebug build of your branch!;;;","2022-05-06 04:12;rcastanedalo;Great, thanks Marc! I will soon submit a pull request for review (https://github.com/openjdk/jdk/pull/8568).;;;","2022-05-10 00:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8568
Date: 2022-05-06 10:42:52 +0000;;;","2022-05-10 07:58;marchof;FYI: Due to JDK-8286365 master cannot be built any more for arm32.;;;","2022-05-11 00:00;rcastanedalo;Thanks for the heads-up [~marchof], I do not expect the integration of virtual threads to affect this fix, but we will see after JDK-8286365 is addressed.;;;","2022-05-12 00:08;dukebot;Changeset: 89392fb1
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-05-12 07:05:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/89392fb15e9652b7b562b3511f79bda725c5499c
;;;","2022-06-08 03:29;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Required follow-up.
Clean backport. 
SAP nightly testing passed.;;;","2022-06-08 07:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/442
Date: 2022-06-08 10:29:12 +0000;;;","2022-06-24 02:57;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Required follow-up to 8270090.
Clean backport. 
SAP nighltly testing passed.;;;","2022-06-24 03:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1179
Date: 2022-06-24 09:55:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AArch64: Consistently handle offsets in MacroAssembler as 64-bit quantities,JDK-8285802,5073734,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aph,aph,aph,2022-04-28 02:34,2022-05-04 23:37,2023-10-01 09:56,2022-04-29 06:04,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-19,,,,,,,,,,,,,,,,,,,,"In a few places we pass offsets as 32-bit ints rather than 64-bit longs, and we're not consistent about it. We shold have a clean 64-bit path for offset generation and validation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285923,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,,"0|i2wx2j:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-28 03:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8448
Date: 2022-04-28 09:59:13 +0000;;;","2022-04-28 16:10;dlong;ILW = impact: medium?; likelihood: medium?; workaround: none? = MMH = P3;;;","2022-04-29 06:04;dukebot;Changeset: df4d5cf5
Author:    Andrew Haley <aph@openjdk.org>
Date:      2022-04-29 13:01:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/df4d5cf5f53c1451487e6301d31c196fac029f7a
;;;","2022-04-29 10:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1067
Date: 2022-04-29 16:44:30 +0000;;;","2022-04-29 10:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/50
Date: 2022-04-29 17:40:15 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AsyncGetCallTrace might acquire a lock via JavaThread::thread_from_jni_environment,JDK-8285794,5073726,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbechberger,jbechberger,jbechberger,2022-04-28 02:28,2023-07-24 21:39,2023-10-01 09:56,2022-05-09 01:19,,,,,,,,,,,,19,hotspot,,0,AsyncGetCallTrace,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,"Calling JavaThread::thread_from_jni_environment for
a terminated thread in AsyncGetCallTrace might cause the acquisition of a lock making AsyncGetCallTrace non-signal-safe.",,,,,,,,,,JDK-8297855,JDK-8296940,JDK-8312644,JDK-8311601,JDK-8311600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wx0r:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2022-04-28 02:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8446
Date: 2022-04-28 09:38:30 +0000;;;","2022-05-09 01:19;dukebot;Changeset: d4474b58
Author:    Johannes Bechberger <johannes.bechberger@sap.com>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2022-05-09 08:18:31 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d4474b5816c2ec8daaf1c905b77d8ba4e23c9439
;;;","2022-09-30 00:54;jbechberger;Fix Request (17u):
Fixes the minor possibility of ASGCT acquiring a lock.
Tested using my jdk profiling tester.;;;","2022-09-30 00:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/725
Date: 2022-09-23 13:34:35 +0000;;;","2022-11-21 04:13;jbechberger;Fix Request (11u):
Fixes the minor possibility of ASGCT acquiring a lock.
Tested using my jdk profiling tester. ;;;","2022-11-21 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1537
Date: 2022-11-21 12:12:35 +0000;;;","2022-11-22 02:25;clanger;Removing jdk11u-fix-request label for the time being, until PR is reviewed. Please put it back again then.;;;","2022-11-30 04:22;jbechberger;It's now properly reviewed.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Posix signal handler modification checking issues.,JDK-8285792,5073724,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hseigel,kevinw,kevinw,2022-04-28 02:23,2023-08-22 08:44,2023-10-01 09:56,2022-07-27 05:32,19,,,,,,,,,,,20,hotspot,,0,os,signals,,,,,,,,,,,,,,,,,,,"There are a few issues with the signal handler modification check in src/hotspot/os/posix/signals_posix.cpp:

The periodic warning triggers when crash_handler is the handler: should be ignored, as it is in PosixSignals::print_signal_handler().

check_signal_handler(int) prints ALL signal handlers when it finds one that is modified.  When multiple changes are detected, this is very noisy.

Code duplication/inconsistency.  Noted in PR for JDK-8283337, different code uses different guards for checking for changes handlers.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285647,,,JDK-8285647,,,,,,,,,JDK-8285647,JDK-8283337,JDK-8292054,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wx0b:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-28 09:57;cjplummer; JDK-8285647 is caused by this issue.;;;","2022-07-25 10:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9631
Date: 2022-07-25 17:21:27 +0000;;;","2022-07-27 05:31;dukebot;Changeset: 48b77a69
Author:    Harold Seigel <hseigel@openjdk.org>
Date:      2022-07-27 12:22:55 +0000
URL:       https://git.openjdk.org/jdk/commit/48b77a69697adb9967e58a18e1f248afb30e1b26
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CheckCleanerBound test fails with PasswordCallback object is not released,JDK-8285785,5073714,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,jpai,jpai,2022-04-27 23:30,2023-07-23 05:03,2023-10-01 09:56,2022-04-28 09:14,19,,,,,,,,,,,19,security-libs,,0,intermittent,noreg-self,tencent-interest,tier2,ursqe-triaged,,,,,,,,,,,,,,,,"The javax/security/auth/callback/PasswordCallback/CheckCleanerBound.java test case failed on one of the test setups with the following exception:

----------System.err:(10/548)----------
java.lang.RuntimeException: PasswordCallback object is not released
	at CheckCleanerBound.main(CheckCleanerBound.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

This is a new test that was introduced recently as part of https://github.com/openjdk/jdk/pull/8272/

The test runs gc in a loop and expects the GC to have garbage collected contents of a WeakHashMap. The loop runs for 10 iterations. Perhaps some delay needs to be added between each iteration to increase the chances of GC garbage collecting the instances?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284910,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wwy3:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5c1d831a,,,,,,,,,"2022-04-27 23:39;jpai;As an additional info from that test run:

----------messages:(5/160)----------
command: main CheckCleanerBound
reason: Assumed action based on file name: run main CheckCleanerBound 
Mode: agentvm
...
elapsed time (seconds): 0.113

;;;","2022-04-28 00:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8443
Date: 2022-04-28 07:01:25 +0000;;;","2022-04-28 06:37;dcubed;Since this is a Tier2 failures, I'm bumping this from P4 -> P3.;;;","2022-04-28 09:14;dukebot;Changeset: b9d1e851
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-04-28 16:10:39 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b9d1e85151d9d4016639e6298c90737db10f6072
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
clean up use of bad arguments for `@clean` in langtools tests,JDK-8285756,5073684,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-04-27 12:42,2023-09-04 02:44,2023-10-01 09:56,2022-04-27 15:34,18,,,,,,,,,,,19,tools,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,,,"Some javac tests have bad/dysfunctional `@clean` tags that are now rejected by newer versions of jtreg (>=7)

They need to be fixed.
tools/javac/6257443/T6257443.java                                                                                Error. Parse Exception: Bad classname provided for `clean': foo.package-info
tools/javac/jvm/ClassRefDupInConstantPoolTest.java                                                               Error. Parse Exception: Bad classname provided for `clean': ClassRefDupInConstantPoolTest$Duplicates.class
tools/javac/warnings/suppress/PackageInfo.java                                                                   Error. Parse Exception: Bad classname provided for `clean': pack.package-info",,,,,,,,,,JDK-8310287,JDK-8315491,JDK-8315633,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289798,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wwrf:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-04-27 14:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8435
Date: 2022-04-27 21:15:25 +0000;;;","2022-04-27 15:34;dukebot;Changeset: 3312d8c6
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-04-27 22:22:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3312d8c620003125a88540fd5b2bacff34732ade
;;;","2023-06-16 23:45;goetz;Fix request [17u]

I backport this to enable jtreg 7 in jdk17.
No risk, only a test change.
Clean backport.
SAP nightly testing passed.;;;","2023-06-16 23:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1463
Date: 2023-06-17 06:43:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8285093 changed the default for --with-output-sync,JDK-8285755,5073683,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,erikj,erikj,erikj,2022-04-27 12:09,2023-02-15 01:09,2023-10-01 09:56,2022-04-28 05:49,17.0.6,19,,,,,,,,,,19,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"The make option '--output-sync recurse' can be useful in certain situations, especially when dealing with very verbose output from makefiles and you want to parse them after the fact. However, when running make interactively on the command line, it certainly gets in the way, as output from each sub make call is buffered until that make process terminates.

In JDK-8285093, the configure logic for this configuration was changed and, probably by mistake, the default was changes to default ""recurse"" if available in the supplied GNU make. This is a regression for most users of the build system and needs to be changed back.",,,,,,,,,,JDK-8300524,JDK-8302532,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285093,,,,,,,JDK-8062020,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wwr7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-27 12:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8431
Date: 2022-04-27 19:16:48 +0000;;;","2022-04-28 05:49;dukebot;Changeset: ccf0e8bf
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-04-28 12:46:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ccf0e8bf9060bca010541b9851f4f39efe9cf375
;;;","2022-04-28 06:22;erikj;This issue was likely the cause for the recent reports of ""fcntl(): Bad file descriptor"" in build logs on mac.;;;","2023-01-17 13:05;shade;Fix Request (17u)

Fixes the regression in 17u build-test system. Applies cleanly. Restores the behavior of `make test`.;;;","2023-01-17 13:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1081
Date: 2023-01-17 21:04:40 +0000;;;","2023-02-10 14:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1718
Date: 2023-02-10 21:59:04 +0000;;;","2023-02-14 01:37;clanger;Fix Request (11u):
Backport inlined in backport of JDK-8285093. Regression fix. Testing: GHA and SAP nigthlies. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Re-examine PushbackInputStream mark/reset,JDK-8285745,5073673,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,bpb,bpb,2022-04-27 11:32,2022-05-04 23:38,2023-10-01 09:56,2022-05-02 11:24,19,,,,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,"PushbackInputStream mark/reset are synchronized, it appears pointless as the other PushbackInputStream methods do not synchronize. Can synchronization be removed? ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285759,,,,,,,,JDK-8284930,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wwoz:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2022-04-27 13:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8433
Date: 2022-04-27 20:10:03 +0000;;;","2022-05-02 11:24;dukebot;Changeset: 9d8c3bf9
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-05-02 18:19:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9d8c3bf9f8bc2083c44b7203e81c007d685b9b61
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ensure each IntegerPolynomial object is only created once,JDK-8285743,5073671,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-04-27 11:16,2022-05-11 23:13,2023-10-01 09:56,2022-05-09 10:20,,,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,,Each only contains final fields and there's no need to create multiple objects for the same type. This will ease object comparison so only an identity equals check is needed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285493,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wwoj:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-04-29 15:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8476
Date: 2022-04-29 22:30:04 +0000;;;","2022-05-09 10:20;dukebot;Changeset: 397d095f
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-05-09 17:18:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/397d095f661e9d9c98b8254fb7867dc87047b0b8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
disable EscapeBarrier deopt for virtual threads,JDK-8285739,5073667,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,sspitsyn,sspitsyn,2022-04-27 11:08,2022-06-25 02:14,2023-10-01 09:56,2022-05-23 07:52,19,repo-loom,,,,,,,,,,19,hotspot,,0,loom,,,,,,,,,,,,,,,,,,,,"We need to find out how to disable escape analysis when both JVMTI and Preview are enabled.
There are several spots where EA is used.

src/hotspot/share/prims/jvmtiTagMap.cpp (Heap Walking API implementation):

// Deprecated function to iterate over all objects in the heap
void JvmtiTagMap::iterate_over_heap(jvmtiHeapObjectFilter object_filter,
                                    Klass* klass,
                                    jvmtiHeapObjectCallback heap_object_callback,
                                    const void* user_data)
{
  // EA based optimizations on tagged objects are already reverted.
  EscapeBarrier eb(object_filter == JVMTI_HEAP_OBJECT_UNTAGGED ||
                   object_filter == JVMTI_HEAP_OBJECT_EITHER,
                   JavaThread::current());
  eb.deoptimize_objects_all_threads();
  . . .

// Iterates over all objects in the heap
void JvmtiTagMap::iterate_through_heap(jint heap_filter,
                    Klass* klass,
                    const jvmtiHeapCallbacks* callbacks,
                    const void* user_data)
{
 // EA based optimizations on tagged objects are already reverted.
 EscapeBarrier eb(false, JavaThread::current()); // disable due to virtual threads
 eb.deoptimize_objects_all_threads();
 . . .

// iterate over all objects that are reachable from a set of roots
void JvmtiTagMap::iterate_over_reachable_objects(jvmtiHeapRootCallback heap_root_callback,
                         jvmtiStackReferenceCallback stack_ref_callback,
                         jvmtiObjectReferenceCallback object_ref_callback,
                         const void* user_data) {
 JavaThread* jt = JavaThread::current();
 EscapeBarrier eb(true, jt);
 . . .

void JvmtiTagMap::follow_references(jint heap_filter,
                                    Klass* klass,
                                    jobject object,
                                    const jvmtiHeapCallbacks* callbacks,
                                    const void* user_data)
{
  . . .
  // EA based optimizations that are tagged or reachable from initial_object are already reverted.
  EscapeBarrier eb(initial_object.is_null() &&

src/hotspot/share/prims/jvmtiImpl.hpp (implementation GetLocal/SetLocal):

class VM_GetOrSetLocal : public VM_BaseGetOrSetLocal {
 protected:
  JavaThread* _thread;
  EscapeBarrier _eb;
  . . .

src/hotspot/share/prims/jvmtiEnvBase.cpp (ForceEarlyReturn implementation):

jvmtiError
JvmtiEnvBase::force_early_return(jthread thread, jvalue value, TosState tos) {
  . . .
  // Eagerly reallocate scalar replaced objects.
  EscapeBarrier eb(true, current_thread, java_thread);
  . . .

src/hotspot/share/prims/jvmtiEnv.cpp (implementation of GetOwnedMonitorInfo, GetOwnedMonitorStackDepthInfo and PopFrame):

JvmtiEnv::GetOwnedMonitorInfo(jthread thread, jint* owned_monitor_count_ptr, jobject** owned_monitors_ptr) {
    . . .
    EscapeBarrier eb(true, calling_thread, java_thread);
  . . .

JvmtiEnv::GetOwnedMonitorStackDepthInfo(jthread thread, jint* monitor_info_count_ptr, jvmtiMonitorStackDepthInfo** monitor_info_ptr) {
  . . .
    EscapeBarrier eb(true, calling_thread, java_thread);
  . . .

JvmtiEnv::PopFrame(jthread thread) {
  . . .
  // Eagerly reallocate scalar replaced objects.
  EscapeBarrier eb(true, current_thread, java_thread);
  . . .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264699,JDK-8233915,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wwnn:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-05-09 10:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8589
Date: 2022-05-09 01:36:39 +0000;;;","2022-05-20 23:16;rrich;Disabling EscapeAnalysis is not sufficient to avoid all issues fixed by JDK-8227745. JDK-8233915 is an issue that can only be fixed with EscapeBarriers, i.e. JDK-8227745.;;;","2022-05-23 07:52;dukebot;Changeset: 940e94f1
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-05-23 14:50:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/940e94f194e2abab8006e67dbb82cab5f16e3a17
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JDK-8236128 causes validate-source failures,JDK-8285736,5073664,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,dcubed,dcubed,dcubed,2022-04-27 09:48,2022-08-05 12:37,2023-10-01 09:56,2022-04-27 10:18,19,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"[2022-04-27T16:38:03,815Z] BAD COPYRIGHT LINE: /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14651/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f7d7c0c8-e47e-4b8b-babd-ac7aafda47f2/runs/9610e7d1-e5cd-4760-a68d-76e900200420/workspace/open/src/jdk.jpackage/share/classes/jdk/jpackage/internal/PlatformPackage.java
[2022-04-27T16:38:03,815Z] 1 header format error(s).
[2022-04-27T16:38:03,815Z] HandleGplSource.gmk:146: recipe for target '/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14651/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f7d7c0c8-e47e-4b8b-babd-ac7aafda47f2/runs/9610e7d1-e5cd-4760-a68d-76e900200420/workspace/build/validate-source/support/header_validated/_src_jdk.jpackage_validated' failed
[2022-04-27T16:38:03,815Z] /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14651/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f7d7c0c8-e47e-4b8b-babd-ac7aafda47f2/runs/9610e7d1-e5cd-4760-a68d-76e900200420/workspace/closed/make/Main.gmk:67: recipe for target 'validate-headers' failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8236128,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wwmz:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2022-04-27 09:49;dcubed;$ do_java_bld -c validate-headers clean
INFO: pwd=/work/shared/bug_hunt/XXXXXXX_for_jdk19.git
INFO: pwd and pwd -P do not match; pwd might contain symbolic links.
INFO: reset pwd=/System/Volumes/Data/work/shared/bug_hunt/XXXXXXX_for_jdk19.git
INFO: GNUMAKE=/usr/bin/make
INFO: GNUMAKE version is: GNU Make 3.81
INFO: DEVKIT=
INFO: BOOT_JDK=
Build Type: clean
Clean Config: validate-headers
    Clearing cumulative build log.
    Configuring the build.
Build prelim time: 0.38 minutes.
Build Config: validate-headers
    Building objects
Building target 'validate-headers' in configuration 'validate-source'
fcntl(): Bad file descriptor
BAD COPYRIGHT LINE: /System/Volumes/Data/work/shared/bug_hunt/XXXXXXX_for_jdk19.git/open/src/jdk.jpackage/share/classes/jdk/jpackage/internal/PlatformPackage.java
1 header format error(s).
HandleGplSource.gmk:146: recipe for target '/System/Volumes/Data/work/shared/bug_hunt/XXXXXXX_for_jdk19.git/build/validate-source/support/header_validated/_src_jdk.jpackage_validated' failed
/System/Volumes/Data/work/shared/bug_hunt/XXXXXXX_for_jdk19.git/closed/make/Main.gmk:67: recipe for target 'validate-headers' failed
make[3]: *** [/System/Volumes/Data/work/shared/bug_hunt/XXXXXXX_for_jdk19.git/build/validate-source/support/header_validated/_src_jdk.jpackage_validated] Error 1
make[3]: *** Waiting for unfinished jobs....
make[2]: *** [validate-headers] Error 2

ERROR: Build failed for target 'validate-headers' in configuration 'validate-source' (exit code 2) 

=== Make failed targets repeated here ===
HandleGplSource.gmk:146: recipe for target '/System/Volumes/Data/work/shared/bug_hunt/XXXXXXX_for_jdk19.git/build/validate-source/support/header_validated/_src_jdk.jpackage_validated' failed
/System/Volumes/Data/work/shared/bug_hunt/XXXXXXX_for_jdk19.git/closed/make/Main.gmk:67: recipe for target 'validate-headers' failed
=== End of repeated output ===

HELP: Try searching the build log for the name of the first failed target.
HELP: Run 'make doctor' to diagnose build problems.

make[1]: *** [main] Error 2
make: *** [validate-headers] Error 2
    Build FAILed (status=1)
;;;","2022-04-27 09:51;dcubed;Proposed fix:

$ git diff
diff --git a/src/jdk.jpackage/share/classes/jdk/jpackage/internal/PlatformPackage.java b/src/jdk.jpackage/share/classes/jdk/jpackage/internal/PlatformPackage.java
index f99f9353f5b..c10f59464a3 100644
--- a/src/jdk.jpackage/share/classes/jdk/jpackage/internal/PlatformPackage.java
+++ b/src/jdk.jpackage/share/classes/jdk/jpackage/internal/PlatformPackage.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2019, 2022 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2022, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it

$ do_java_bld -c validate-headers inc
INFO: pwd=/work/shared/bug_hunt/XXXXXXX_for_jdk19.git
INFO: pwd and pwd -P do not match; pwd might contain symbolic links.
INFO: reset pwd=/System/Volumes/Data/work/shared/bug_hunt/XXXXXXX_for_jdk19.git
INFO: GNUMAKE=/usr/bin/make
INFO: GNUMAKE version is: GNU Make 3.81
INFO: DEVKIT=
INFO: BOOT_JDK=
Build Type: incremental
Build prelim time: 0.00 minutes.
Build Config: validate-headers
    Building objects
Building target 'validate-headers' in configuration 'validate-source'
Finished building target 'validate-headers' in configuration 'validate-source'
    Done building
    Build validate-headers time: 1.17 minutes.
Total build time: 1.17 minutes.;;;","2022-04-27 10:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8429
Date: 2022-04-27 16:53:44 +0000;;;","2022-04-27 10:18;dukebot;Changeset: 5b42747b
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-04-27 17:16:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5b42747ba1606b34b05449518fa601d2451c5c66
;;;","2022-08-05 12:37;dcubed;validate-source failures are verified by the validate-source
task no longer failing in the CI. This fix is automatically verified
in the build-ID that contains this changeset: jdk-19+20-1375

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[s390] Vector Instruction Emitters for element-wise access are broken,JDK-8285733,5073656,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lucy,lucy,lucy,2022-04-27 08:43,2022-05-25 23:08,2023-10-01 09:56,2022-05-19 07:01,11,17,18,19,,,,,,,,19,hotspot,,0,oraclejdk-na,oracle-triage-19,,,,,,,,,,,,,,,,,,,"It was detected that the emitters for vector instructions which access individual vector elements are fundamentally broken. They need to get fixed. 

The risk of this fix is minimal. The emitters have not been in use so far. The fix will therefore not break any existing code. For that reason, backports to older versions are not mandatory. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,,linux,,,,,,"0|i2wwl7:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-27 12:27;dlong;ILW = MMH = P3;;;","2022-05-04 07:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8537
Date: 2022-05-04 14:42:27 +0000;;;","2022-05-19 07:01;dukebot;Changeset: af7cda5d
Author:    Lutz Schmidt <lucy@openjdk.org>
Date:      2022-05-19 13:58:25 +0000
URL:       https://git.openjdk.java.net/jdk/commit/af7cda5d8f1f724f183f6ec85ca9edf6afb2d478
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
unify _WIN32_WINNT settings,JDK-8285730,5073650,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-04-27 07:34,2022-08-17 00:04,2023-10-01 09:56,2022-05-09 23:49,17,18,19,,,,,,,,,19,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,"Currently we set  _WIN32_WINNT at various places in the codebase;  this is used to target a minimum Windows version we want to support. See also for more detailled information :
https://docs.microsoft.com/en-us/windows/win32/winprog/using-the-windows-headers?redirectedfrom=MSDN#setting-winver-or-_win32_winnt
Macros for Conditional Declarations
""Certain functions that depend on a particular version of Windows are declared using conditional code. This enables you to use the compiler to detect whether your application uses functions that are not supported on its target version(s) of Windows.""

However currently we have quite a lot of differing settings of _WIN32_WINNT in the codebase ; setting  _WIN32_WINNT  to  0x0601  (Windows 7) where possible would make sense because we have this setting already at one place (so targetting older Windows versions at other places is most likely not useful).

While looking at the codebase, it was found that at  least in jdk\src\jdk.crypto.mscapi\windows\native\libsunmscapi\security.cpp  already Windows 8 APIs are needed, otherwise we get :

d:\a\jdk\jdk\jdk\src\jdk.crypto.mscapi\windows\native\libsunmscapi\security.cpp(1262): error C2065: 'NCRYPT_CIPHER_KEY_BLOB': undeclared identifier
d:\a\jdk\jdk\jdk\src\jdk.crypto.mscapi\windows\native\libsunmscapi\security.cpp(1280): error C2065: 'NCRYPT_PROTECTED_KEY_BLOB': undeclared identifier

Reason is that already for some time ( at least OpenJDK 11) we have an implicit minimum requirement of Windows 8 / Windows 2012
APIs for this code, so enforcing Win 7 is too old; see also
https://docs.microsoft.com/en-us/windows/win32/api/ncrypt/nf-ncrypt-ncryptexportkey

NCRYPT_PROTECTED_KEY_BLOB
Export a protected key in a NCRYPT_KEY_BLOB_HEADER structure.
Windows 8 and Windows Server 2012: Support for this value begins.

(same for NCRYPT_CIPHER_KEY_BLOB)

So we need -D_WIN32_WINNT=0x0602 to build this coding.
",,,,,,,,,,JDK-8292529,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286634,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,windows,,,,,,"0|i2wwjv:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-27 08:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8428
Date: 2022-04-27 14:57:41 +0000;;;","2022-05-09 23:49;dukebot;Changeset: 4fd79a6a
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-05-10 06:45:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4fd79a6ad2683e4863bd4e311cb01cbc30ebf57f
;;;","2022-08-10 04:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/628
Date: 2022-08-10 11:04:11 +0000;;;","2022-08-10 04:18;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well because the cleanup would be beneficial there too. Risk is low - medium, patch applies cleanly.;;;","2022-08-16 00:19;clanger;[~mbaesken] Regarding the backport to 17u: Are we sure that it doesn't break compatibility for any older build configuration that JDK17u might be using?;;;","2022-08-16 00:45;mbaesken;We have at least some dependencies to Win 8 / Win 2012 in the codebase for quite some time already :
>Reason is that already for some time ( at least OpenJDK 11) we have an implicit minimum requirement of Windows 8 / Windows 2012

So I think for jdk17 it would be okay (but I would not backport it to  jdk11).
But in case we want to still allow support for ""good old""  Windows 7 at least partly, we can drop the backport.;;;","2022-08-16 05:13;clanger;Backporting to 17 but skipping 11 sounds fine then. Approved.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Alpine Linux build fails with busybox tar,JDK-8285728,5073647,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-04-27 07:22,2022-07-27 00:14,2023-10-01 09:56,2022-04-28 06:34,17,19,,,,,,,,,,19,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"Currently , in target ""product-bundles""  , the Alpine Linux build fails when Busybox tar is used.
Error is :
/bin/tar: unrecognized option: I
BusyBox v1.34.1 (2022-04-04 10:19:27 UTC) multi-call binary
Usage: tar c|x|t [-ZzJjahmvokO] [-f TARFILE] [-C DIR] [-T FILE] [-X FILE] [LONGOPT]... [FILE]...

Seems this is coming from a wrong setting of TAR_INCLUDE_PARAM in autoconf/basic_tools.m4    (I is set, seems T is needed) .

As a workaround, gnu tar can be installed however additionally.
Unfortunately , configure currently does not show the issue so we see it afterwards in the build.",,,,,,,,,,JDK-8286804,JDK-8291184,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,linux_alpine,,,,,,"0|i2wwj7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-28 03:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8449
Date: 2022-04-28 10:24:37 +0000;;;","2022-04-28 06:34;dukebot;Changeset: 36bf6fbe
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-04-28 13:33:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/36bf6fbe0839cebce5e66ba680a73353703152aa
;;;","2022-05-13 05:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/396
Date: 2022-05-13 12:16:09 +0000;;;","2022-05-13 05:22;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well because the issue is present there too. Risk is low. The patch applies cleanly.;;;","2022-07-20 00:05;mbaesken;jdk11 backport request
I would like to have the patch in jdk11 as well because the issue is present there too. Risk is low. The patch does not apply cleanly (small differences in the stride).
PR : https://github.com/openjdk/jdk11u-dev/pull/1242/files;;;","2022-07-20 00:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1242
Date: 2022-07-19 14:44:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[11u, 17u] Unify fix for JDK-8284920 with version from head",JDK-8285727,5073646,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-04-27 07:05,2022-05-24 06:06,2023-10-01 09:56,2022-05-06 14:44,11.0.15,17.0.3,,,,,,,,,,17.0.4,xml,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,The fix for JDK-8284920 in OpenJDK head (18 and 19) differs from its backport versions to older releases. The upstream code changes less LOC plus it contains a testcase. This should be unified.,,,,,,,,,,JDK-8286658,JDK-8287235,JDK-8286769,JDK-8286657,JDK-8286819,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284920,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b07,17.0.3,,,,,,,,"0|i2wwiz:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2022-04-27 11:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/373
Date: 2022-04-27 18:38:38 +0000;;;","2022-05-02 14:53;clanger;Fix Request (17u)
We should do this code alignment between JDK Updates versions to avoid unnecessary code diffs. Seems like the version currently in 11u/17u has advantages but this should be followed up via a change in head. This backport adds an addtional test case. Tests: GHA and SAP's nightlies. ;;;","2022-05-06 14:44;dukebot;Changeset: a95482ac
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-05-06 21:43:29 +0000
URL:       https://git.openjdk.java.net/jdk17u-dev/commit/a95482acf83cc03bc562baace0d55d831d0b2b41
;;;","2022-05-06 15:19;clanger;Fix request (11u)
Same reasoning as for 17u. 17u patch applies cleanly. Tests: GHA & SAP.;;;","2022-05-06 15:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1072
Date: 2022-05-06 22:14:20 +0000;;;","2022-05-12 05:01;dukebot;Changeset: a95482ac
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-05-06 21:43:29 +0000
URL:       https://git.openjdk.java.net/jdk17u/commit/a95482acf83cc03bc562baace0d55d831d0b2b41
;;;","2022-05-12 06:56;yan;Fix request (13u, 15u)

Same thing here. Version from 17u applies without any difference in both cases. Tested so far with regtests of jdk/javax/xml/jaxp, jaxp/javax/xml (together with JDK-8285726 patch). ;;;","2022-05-12 07:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/350
Date: 2022-05-12 14:07:50 +0000;;;","2022-05-12 07:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/209
Date: 2022-05-12 14:08:00 +0000;;;","2022-05-16 07:06;yan;Fix request (7u)

I'd like to backport this leveling fix to 7u, too. All differences between patches for adapted for git 7u and e.g. 15u are in paths. First round of tests run OK. Well, with testng 6.9.;;;","2022-05-16 07:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk7u/pull/4
Date: 2022-05-16 14:08:27 +0000;;;","2022-05-23 07:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/64
Date: 2022-05-23 14:30:34 +0000;;;","2022-05-23 23:48;yan;Fix request (8u):
and in jdk8u, too, please. Paths adjusted, it is the same patch. Tier1 runs OK.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[11u, 17u] Unify fix for JDK-8284548 with version from head",JDK-8285726,5073644,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-04-27 07:01,2022-05-16 05:23,2023-10-01 09:56,2022-05-06 14:44,11.0.15,17.0.3,,,,,,,,,,17.0.4,xml,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,"The fix for JDK-8284548 in OpenJDK head (18 and 19) differs from its backport versions to older releases, mostly in the testcase. This should be unified.",,,,,,,,,,JDK-8286811,JDK-8286770,JDK-8286651,JDK-8286650,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284548,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b06,17.0.3,,,,,,,,"0|i2wwij:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,,,"2022-04-27 11:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/372
Date: 2022-04-27 18:15:12 +0000;;;","2022-04-28 23:23;clanger;Fix Request (17u)
We should do this code alignment between JDK Updates versions to avoid unnecessary code diffs. Risk is low, change only replaces the test. Tests: GHA and SAP's nightlies.;;;","2022-05-02 00:19;goetz;Hi, you might want to add [17u] to the bug title?;;;","2022-05-06 14:44;dukebot;Changeset: c464f20f
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-05-06 21:42:39 +0000
URL:       https://git.openjdk.java.net/jdk17u-dev/commit/c464f20f41ff8b6b7eb3f1357f9bd5fcd51b13cb
;;;","2022-05-06 15:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1073
Date: 2022-05-06 22:15:05 +0000;;;","2022-05-06 15:20;clanger;Fix request (11u)
Same reasoning as for 17u. 17u patch applies cleanly. Tests: GHA & SAP. ;;;","2022-05-12 05:01;dukebot;Changeset: c464f20f
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-05-06 21:42:39 +0000
URL:       https://git.openjdk.java.net/jdk17u/commit/c464f20f41ff8b6b7eb3f1357f9bd5fcd51b13cb
;;;","2022-05-12 06:10;yan;Fix request (13u, 15u)

Same thing here. Version from 17u applies without any difference in both cases. Tested so far with regtests of jdk/javax/xml/jaxp,   jaxp/javax/xml (together with JDK-8285727 patch).;;;","2022-05-12 06:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/208
Date: 2022-05-12 13:10:35 +0000;;;","2022-05-12 06:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/349
Date: 2022-05-12 13:21:11 +0000;;;","2022-05-16 02:56;yan;Fix request (7u)

This version is different from versions 8+: first, in Lexer.java there's no LastModified and a usual copyright, so it is dropped from the change. Second, a new XPathExceptionTest is hard to compile in 7: to run with jdk7 we'd need an older than usual version of testng (<6.11) which, in turn, doesn't work with asserts like that in the test, there are lambdas, and XPathExpression has no evaluateExpression or similar method. Instead of of backporting the test, I'm doing a simple change in existing one provided by SAP.

Thus, test-only update change. Test pass.
;;;","2022-05-16 03:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk7u/pull/3
Date: 2022-05-16 09:53:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong link to JBS in README.md,JDK-8285725,5073642,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,nlisker,nlisker,nlisker,2022-04-27 06:54,2022-05-17 11:46,2023-10-01 09:56,2022-04-27 08:39,jfx18,,,,,,,,,,,jfx19,javafx,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,"In the README.md, under Issue Tracking, the link to ""issues list"" leads to the JBS homepage. In CONTRIBUTING.md under Bug Report, the (almost) same paragraph links to the JavaFX filter in JBS, which is a lot more helpful.
The README link should be updated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wwi3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1d1c7815,,,,,,,,,"2022-04-27 07:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/788
Date: 2022-04-27 14:01:06 +0000;;;","2022-04-27 08:39;dukebot;Changeset: d69a498c
Author:    Nir Lisker <nlisker@openjdk.org>
Date:      2022-04-27 15:38:12 +0000
URL:       https://git.openjdk.java.net/jfx/commit/d69a498c2cde73339bc99e6c02c0d47fe4b1b650
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
test/jdk/java/nio/file/Files/probeContentType/Basic.java fails to compile after backport of 8273655,JDK-8285720,5073635,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,goetz,goetz,2022-04-27 04:49,2022-10-18 00:42,2023-10-01 09:56,2022-05-30 20:02,11.0.16,13.0.12,15.0.8,,,,,,,,,11.0.16,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,,,,,,"The test does not compile with older Java versions. E.g., record is not known:

/priv/jvmtests/output_openjdk11_dev_dbgU_linuxx86_64/grmpf/testdata/jtreg/jtreg_test_11/test/jdk/java/nio/file/Files/probeContentType/Basic.java:196: error: cannot find symbol
record ExType(String extension, List<String> expectedTypes) { }
^
symbol: class record",,,,,,,,,,JDK-8295459,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273655,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wwgj:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-04-27 04:56;goetz;See also comments in PR of backport of JDK-8273655 to 11: https://github.com/openjdk/jdk11u-dev/pull/1007;;;","2022-05-28 14:09;andrew;Records were a JDK 14 feature - https://openjdk.java.net/jeps/359 - so 15u shouldn't have this problem. I'll double-check though.;;;","2022-05-28 14:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1111
Date: 2022-05-28 21:14:17 +0000;;;","2022-05-30 07:23;clanger;Records are a feature of JDK 16 (https://openjdk.java.net/jeps/395). In JDK14 and JDK 15 they had only been preview. And I don't believe we want to turn on preview mode for this test. So this issue applies to 13 and 15 as well.;;;","2022-05-30 08:39;andrew;Fix Request [11u]:

Fixes the regression caused by the backport of JDK-8273655.  PR https://github.com/openjdk/jdk11u-dev/pull/1111 reviewed by Christoph Langer & Martin Doerr.;;;","2022-05-30 08:40;andrew;Ah, thanks for the clarification. Those previews can be confusing :) Once 11u is in, I can backport to 13u & 15u (I guess it should have been 15u first, but 11u was where the complaint was filed);;;","2022-05-30 20:02;dukebot;Changeset: 1c93a6e0
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2022-05-31 03:00:14 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/1c93a6e011588ef3c491768d156552681f2480c4
;;;","2022-06-01 00:52;dukebot;Changeset: 1c93a6e0
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2022-05-31 03:00:14 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/1c93a6e011588ef3c491768d156552681f2480c4
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogMessageBuffer doesn't check vsnprintf return value,JDK-8285712,5073628,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jsjolen,jsjolen,jsjolen,2022-04-27 03:25,2022-05-04 23:37,2023-10-01 09:56,2022-05-02 03:22,,,,,,,,,,,,19,hotspot,,0,logging,,,,,,,,,,,,,,,,,,,,LogMessageBuffer::vwrite doesn't check os::vsnprintf's return value before casting the return value to size_t and using it for a memory allocation. As os::vsnprintf can return negative values this may cause a wraparound and a massive memory allocation.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wwez:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-27 15:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8423
Date: 2022-04-27 10:34:53 +0000;;;","2022-05-02 03:22;dukebot;Changeset: cf81f6cf
Author:    Johan Sjölén <johan.sjolen@oracle.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-05-02 10:19:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cf81f6cf5bb098575ebce55f19b7c8149203cd71
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: RVC: Support disassembler show-bytes option,JDK-8285711,5073626,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-04-27 02:56,2023-07-09 19:11,2023-10-01 09:56,2022-04-28 23:48,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-19,,,,,,,,,,,,,,,,,,,,RVC (under which instruction size could become 2) should support Assembler::instr_len() to calculate the real instruction size.,,,,,,,,,,JDK-8311704,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,19,,linux,,,,,,"0|i2wwej:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-27 03:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8421
Date: 2022-04-27 10:10:30 +0000;;;","2022-04-27 12:32;dlong;ILW = LMH = P5;;;","2022-04-28 23:48;dukebot;Changeset: b71e8c16
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-04-29 06:45:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b71e8c16498dab2ee5fc5b3ebadec1dbba469261
;;;","2023-03-20 21:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/20
Date: 2023-03-21 04:20:53 +0000;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Miscalculation of G1CardSetAllocator unused memory size ,JDK-8285710,5073624,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,hshi,hshi,hshi,2022-04-27 02:39,2022-05-11 23:16,2023-10-01 09:56,2022-05-10 06:48,19,,,,,,,,,,,19,hotspot,,0,gc-g1,gc-g1-remset,tencent-interest,,,,,,,,,,,,,,,,,,"Submit this issue on behalf of Tianqi Xia from Tencent

wasted memory size looks overflow with following command 
java -XX:+AlwaysPreTouch -Xlog:gc*=debug,gc+remset*=trace:gc.log::filecount=10,filesize=20m -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1 -Xms20g -Xmx20g BigRamTester

gc.log.0:[28.849s][trace][gc,remset         ] GC(14)   Total per region rem sets sizes = 32141880 Max = 346176 wasted = 17184923896
gc.log.0:[29.125s][trace][gc,remset         ] GC(14)   Total per region rem sets sizes = 15885016 Max = 245176 wasted = 2457272
gc.log.0:[36.825s][trace][gc,remset         ] GC(15)   Total per region rem sets sizes = 19260504 Max = 402744 wasted = 25772335544
gc.log.0:[37.104s][trace][gc,remset         ] GC(15)   Total per region rem sets sizes = 2344432 Max = 245896 wasted = 258768
gc.log.0:[44.926s][trace][gc,remset         ] GC(16)   Total per region rem sets sizes = 19598664 Max = 399448 wasted = 12886642824
gc.log.0:[45.216s][trace][gc,remset         ] GC(16)   Total per region rem sets sizes = 2297024 Max = 259032 wasted = 178352
gc.log.0:[53.168s][trace][gc,remset         ] GC(17)   Total per region rem sets sizes = 24104656 Max = 431352 wasted = 42954964120
gc.log.0:[53.454s][trace][gc,remset         ] GC(17)   Total per region rem sets sizes = 2249624 Max = 314848 wasted = 8590191016
gc.log.0:[61.548s][trace][gc,remset         ] GC(18)   Total per region rem sets sizes = 24454432 Max = 432528 wasted = 34364643192

size_t G1CardSetAllocator::wasted_mem_size() const {

  uint num_wasted_slots = _segmented_array.num_available_slots() -

                          _segmented_array.num_allocated_slots() -

                          (uint)_free_slots_list.pending_count();

  return num_wasted_slots * _segmented_array.slot_size();

}

when calculating the wasted memory size of G1CardSetAllocator, the code erroneously substracted both _segmented_array.num_allocated_slots() and _free_slots_list.pending_count() from _segmented_array.num_available_slots().

The correct formula should be: num_wasted_slots = _segmented_array.num_available_slots() - (_segmented_array.num_allocated_slots() - (uint)_free_slots_list.pending_count()).

This can potentially leads to an arithmetic overflow and misleading information will be displayed when G1SummarizeRSetStatsPeriod is set.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286189,,,,,,,,,,,,,JDK-8267834,,,,,,,JDK-8286291,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,"0|i2wwe3:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-05-04 17:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8424
Date: 2022-04-27 11:03:18 +0000;;;","2022-05-10 06:48;dukebot;Changeset: 9835678a
Author:    dev-tianqixia <txiadev@gmail.com>
Committer: Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-05-10 13:43:33 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9835678a8658110cd2dac489cf55ab3d9074ea6d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TreeTableView] graphic property of TreeItem is still visible after collapsing tree,JDK-8285700,5073611,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kpk,tschindl,tschindl,2022-04-27 01:05,2023-07-25 08:34,2023-10-01 09:56,2023-07-20 08:49,jfx11,jfx18,,,,,,,,,,jfx22,javafx,,0,,,,,,,,,,,,,,,,,,,,,"In JDK-8157398 an regression caused by the fix for JDK-8143266 - when the regression was fixed in OpenJFX-8 it was decided that no fix was needed for OpenJFX-9 because with the attached snippet the problem could not be reproduce.

Unfortunately the snippet simply was to minimal adding more nesting levels reveals that the problem still exists from OpenJFX-9 onwards to OpenJFX-18.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8143266,JDK-8157398,,,,,,,,,,,,,,"2022-04-27 00:57;tschindl;Bildschirmfoto 2022-04-27 um 09.56.46.png;https://bugs.openjdk.org/secure/attachment/98719/Bildschirmfoto+2022-04-27+um+09.56.46.png","2022-04-27 00:54;tschindl;Test.java;https://bugs.openjdk.org/secure/attachment/98720/Test.java",,,,,,,,,generic,,,,,,,,9,,generic,,,,,,"0|i2wwb7:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-04-27 01:12;tschindl;Steps to reproduce:
- Run attached sample
- Expand ""Child Node 4""
- Collapse ""Child Node 4""

You should now see the same effect as in the attached screenshot;;;","2023-07-06 22:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1172
Date: 2023-07-07 05:25:34 +0000;;;","2023-07-11 07:11;fastegal;actually, I see (sometime around fx19+) two variations of misbehavior

- expand the second last node
- expected and actual: graphic of last treeItem is moved to the new position below the initial
- expected: graphic of first sub-child treeItem is visible, actual: not visible
- collapse second last node
- expected: graphic of last treeItem is moved back to its initial position, actual: remains at expanded location (as shown in the screenshot);;;","2023-07-11 23:34;kpk;[~fastegal], I believe you are seeing this behavior without the fix provided. I could reproduce these 2 issues before the fix and the changes made fixes both the issues mentioned above.;;;","2023-07-12 01:38;fastegal;exactly - just wanted to make sure you are aware of both .. and can write unit tests against each to verify the fix :) ;;;","2023-07-12 01:42;kpk;Sure. Thanks for confirming.;;;","2023-07-20 08:49;dukebot;Changeset: 600cee70
Author:    Karthik P K <kpk@openjdk.org>
Date:      2023-07-20 15:47:19 +0000
URL:       https://git.openjdk.org/jfx/commit/600cee70a2f6f907a53f7183315e6d7f79b291d6
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AlgorithmConstraints:permits not throwing IllegalArgumentException when 'alg'  is null,JDK-8285696,5073607,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,djelinski,kganapureddy,kganapureddy,2022-04-26 23:54,2022-10-14 00:03,2023-10-01 09:56,2022-04-27 23:21,19,,,,,,,,,,,19,security-libs,,0,11bpr-critical-approved,conformance,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-jck,regression,tck-red-19,,,,,,,,,,,,"One of the existing JCK test ( api/java_security/AlgorithmConstraints/PermitsMethodIAEx.html ) validating the below case  failing with JDK19-ea-pre-b20 build.
""Throws:IllegalArgumentException - if primitives or algorithm is null or empty""  - when algorithm is null.

Expected - IllegalArgumentException
Actual - NullPointerException

Looks like regression caused by - JDK-8285398
Where  - cachedCheckAlgorithm try to retrieve the null from the cache.",,,,,,,,,,JDK-8287862,JDK-8287577,JDK-8286951,JDK-8289462,JDK-8289609,JDK-8288874,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285398,JCK-7317603,,,,,,JDK-8289319,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,"0|i2wwab:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-04-27 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8427
Date: 2022-04-27 14:03:15 +0000;;;","2022-04-27 23:21;dukebot;Changeset: 47951655
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-04-28 06:20:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/47951655acacba515c0d69f5192257664f887dba
;;;","2022-06-13 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/462
Date: 2022-06-13 06:44:02 +0000;;;","2022-06-13 22:38;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Required follow-up to JDK-8285398.
Clean backport.
SAP nightly testing failed, jck tests green, too. --- I mean they passed!;;;","2022-06-20 07:18;clanger;Approving 17u under the assumption that you meant: ""SAP nightly testing passed"" :);;;","2022-06-21 05:35;goetz;Yes. 8285398 failed  but with this follow up it passes.;;;","2022-06-24 03:45;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Required follow-up to JDK-8285398.
Clean backport, but I had to fix it.
SAP nightly testing passed.;;;","2022-06-24 03:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1182
Date: 2022-06-24 10:45:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create an automated test for JDK-4702199,JDK-8285693,5073604,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-04-26 23:18,2022-08-03 18:05,2023-10-01 09:56,2022-05-04 16:36,11,17,18,19,8,,,,,,,19,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,,,"Create an automated test for JDK-4702199

In order for spatial Braille to work and screen reader ""review mode"", we need bounding rectangle information for all text on the screen, and also the ability to get text substrings. StarOffice 6.1, Netscape and GNOME accessibility also require this new interface for describing text in their applications. This new interface is required for accessibility to StarOffice 6.1, Netscape and GNOME applications as required by Section 508

The solution is to define a new interface and related two helper classes. 
AccessibleExtendedText, 
AccessibleTextSequence. 
AccessibleAttributeSequence

The test validates the public fields of the above classes.
This review is for migrating tests from a closed test suite to open.
",,,,,,,,,,JDK-8291838,JDK-8289670,JDK-8289674,JDK-8289703,JDK-8291850,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ww9n:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-04-27 01:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8416
Date: 2022-04-27 07:54:18 +0000;;;","2022-05-04 16:36;dukebot;Changeset: 158d871d
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-05-04 23:32:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/158d871d0574970c9e5609dd037aaa0ead668a3b
;;;","2022-08-02 06:21;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.17,17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nighlty testing passed.;;;","2022-08-02 06:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/623
Date: 2022-08-02 13:23:26 +0000;;;","2022-08-02 06:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1306
Date: 2022-08-02 13:28:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CloneableReference subtest should not throw CloneNotSupportedException,JDK-8285690,5073599,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kbarrett,kbarrett,kbarrett,2022-04-26 19:17,2023-01-26 04:57,2023-10-01 09:56,2022-04-28 08:19,19,,,,,,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,"The test java/lang/ref/ReferenceClone.java has a subtest that calls clone() on the test class CloneableReference.  That call should not throw CloneNotSupportedException, and indeed should fail if it does throw that exception.  But that clone call is within a try/catch that ignores that exception.  The fix is to have the test fail if that exception is thrown.
",,,,,,,,,,JDK-8298523,JDK-8301052,JDK-8298918,JDK-8301150,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8201793,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,11,,,,,,,,"0|i2ww8j:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-04-27 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8418
Date: 2022-04-27 09:24:24 +0000;;;","2022-04-28 08:19;dukebot;Changeset: 2d8d1402
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2022-04-28 15:15:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/2d8d1402147f6ddd15732ce7098a8438317a2681
;;;","2023-01-23 08:50;goetz;Fix request [11u,17u]

I backport this for parity with 11.0.19-oracle,17.0.7-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.
;;;","2023-01-23 09:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1099
Date: 2023-01-23 16:54:43 +0000;;;","2023-01-23 09:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1680
Date: 2023-01-23 17:01:10 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove jtreg tag manual=yesno for java/awt/print/PrinterJob/PageRangesDlgTest.java,JDK-8285687,5073596,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-04-26 16:38,2023-08-07 01:16,2023-10-01 09:56,2022-05-19 01:05,17,18,19,,,,,,,,,19,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,,,"Test was failing with the following issue
1) Parser error due to yesno in @run main/manual=yesno 
2) Test Instruction was printed on the console & when run with jtreg user will not see the test instruction.
3) There is not way for the user to decide whether the test is pass or fail",,,,,,,,,,JDK-8313867,JDK-8294500,JDK-8290226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ww7v:",9223372036854775807,b24,,,,,,,,,,,"2022-04-26 17:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8412
Date: 2022-04-27 00:06:41 +0000;;;","2022-05-19 01:05;dukebot;Changeset: fc3edf24
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-05-19 08:04:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fc3edf2412461f41ac4dfd8b047257432620ba6d
;;;","2022-09-26 01:23;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-09-26 01:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/727
Date: 2022-09-26 08:22:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update FreeType to 2.12.0,JDK-8285686,5073593,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,vdyakov,vdyakov,2022-04-26 15:40,2022-07-18 13:17,2023-10-01 09:56,2022-04-29 09:41,11,17,19,,,,,,,,,19,client-libs,,0,11-bp,17-bp,3rdparty,freetype,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,noreg-other,sn_117,,,,"Freetype 2.12.0 was released on 2022-03-31

",,,,,,,,,,JDK-8286192,JDK-8286147,JDK-8286214,JDK-8286946,JDK-8285959,JDK-8286296,JDK-8286292,JDK-8286938,,,,,,,,,,,,,,,,,,,,,JDK-8218098,,,JDK-8290334,JDK-8261170,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ww77:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-04-28 12:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8456
Date: 2022-04-28 19:41:46 +0000;;;","2022-04-29 09:42;dukebot;Changeset: 67dd8a8d
Author:    Phil Race <prr@openjdk.org>
Date:      2022-04-29 16:40:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/67dd8a8d6a3f069f11d8e1492a775892f1f49829
;;;","2022-04-29 16:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/115
Date: 2022-04-29 23:08:04 +0000;;;","2022-04-29 16:32;prr;Fix Request
I would like to backport this fix to JDK18u
The fix made in 19 applies cleanly - see PR here -https://github.com/openjdk/jdk18u/pull/115
It passes all our automated tests.
Upgrading freetype is a task we have done before, there should no particular risks here
and this version contains several important fixes we'd like to have.;;;","2022-05-06 03:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/348
Date: 2022-05-06 10:11:15 +0000;;;","2022-05-06 03:18;yan;Fix request (13u, 15u)

I'd like to backport this update to 13u and 15u. The patch from jdk19 applies seamlessly, some perfunctory testing runs fine and I hope we have enough time before July to try it in honest.;;;","2022-05-06 04:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/207
Date: 2022-05-06 10:56:24 +0000;;;","2022-05-13 04:07;goetz;Fix request [17u]

I backport this for parity with 15.0.8.
Clean backport.
SAP nightly testing passed.;;;","2022-05-13 04:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/395
Date: 2022-05-13 11:06:28 +0000;;;","2022-05-16 04:08;goetz;Fix request [11u]

I backport this for parity with 13.0.12.
Clean backport.
SAP nightly testing passed.;;;","2022-05-16 04:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1086
Date: 2022-05-16 11:02:41 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix regular expression used for tags on Shenandoah 8u tree,JDK-8285679,5073581,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,andrew,andrew,2022-04-26 13:13,2022-11-18 09:38,2023-10-01 09:56,2022-05-03 18:42,shenandoah8u332,,,,,,,,,,,shenandoah8u332,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,"Due to difficulty doing local jcheck runs (it doesn't seem to work on branches), the tags field in the JDK-8282458 backport contain a bad regular expression.  We should fix this so the sh/jdk8u tree can be used with SKARA.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294292,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2ww4j:",9223372036854775807,b01,,,,,,,,,,,"2022-05-03 18:42;andrew;Had to be pushed directly:

https://github.com/openjdk/shenandoah-jdk8u/commit/a6ec29fc6beccae20353d9828d2a3a2ebeeb573e;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in ktab man page,JDK-8285678,5073580,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-04-26 12:54,2022-04-27 23:24,2023-10-01 09:56,2022-04-26 13:58,,,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,,"https://docs.oracle.com/en/java/javase/18/docs/specs/man/ktab.html, Commands and Options, -d:

etype should be specified as the numberic value etype defined in RFC 3961, section 8.

""numberic"" should be ""numeric"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ww4b:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a7b7e03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add missing @param tags for type parameters on classes and interfaces,JDK-8285676,5073577,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-04-26 12:11,2022-05-04 23:36,2023-10-01 09:56,2022-04-28 11:03,19,,,,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285496,,,,,,,JDK-8285890,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ww3n:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-04-26 15:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8410
Date: 2022-04-26 22:24:26 +0000;;;","2022-04-28 11:03;dukebot;Changeset: bba456a8
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-04-28 18:00:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bba456a8dbf9027e4b015567c17a79fc7441aa08
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Temporary fix for arm32 SafeFetch,JDK-8285675,5073576,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-04-26 11:48,2023-07-14 08:03,2023-10-01 09:56,2022-04-27 04:30,19,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"JDK-8283326 reworked the SafeFetch implementation and, on most platforms, switched to static assembly. 

On arm (32-bit), this change led to strange crashes (JDK-8284997). These problems are time consuming to analyze (among other things they only occur when building natively on a Rasberry Pi with one particular Docker setup). 

As a temporary workaround I'd like to switch SafeFetch to the sigjmp method for arm, until I find time to analyze these problems in more detail.",,,,,,,,,,JDK-8312103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284997,,,,,,,,,,,,,,,,,,,,,,,,,arm,,,,,,,,,,,,,,,,"0|i2ww3f:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-26 11:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8399
Date: 2022-04-26 13:31:00 +0000;;;","2022-04-27 04:30;dukebot;Changeset: 16a8ebbf
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-04-27 11:28:55 +0000
URL:       https://git.openjdk.java.net/jdk/commit/16a8ebbf0573b8ee75072f8120fb0d4a584cb51d
;;;","2023-07-14 02:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1577
Date: 2023-07-13 11:18:51 +0000;;;","2023-07-14 03:45;snazarki;This issue was intentionally skipped in favour of 8288719 when 8283326 was backported to JDK17. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/nio/channels/etc/PrintSupportedOptions.java and java/nio/channels/DatagramChannel/AfterDisconnect.java are failing,JDK-8285671,5073572,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,michaelm,dfuchs,dfuchs,2022-04-26 11:10,2022-08-09 09:01,2023-10-01 09:56,2022-04-27 09:17,19,,,,,,,,,,,19,core-libs,,0,intermittent,problemlist,regression,tier2,,,,,,,,,,,,,,,,,"jdk/net/ExtendedSocketOption/DontFragmentTest.java is also failing due to this.

java/nio/channels/etc/PrintSupportedOptions.java:

----------System.out:(30/711)----------
java.nio.channels.SocketChannel[unconnected]
 SO_SNDBUF -> 131072
 SO_OOBINLINE -> false
 SO_KEEPALIVE -> false
 SO_REUSEADDR -> false
 SO_REUSEPORT -> false
 IP_TOS -> 0
 TCP_KEEPINTERVAL -> 75
 TCP_NODELAY -> false
 TCP_KEEPIDLE -> 7200
 SO_RCVBUF -> 131072
 SO_LINGER -> -1
 TCP_KEEPCOUNT -> 8
sun.nio.ch.ServerSocketChannelImpl[unbound]
 SO_REUSEADDR -> true
 SO_REUSEPORT -> false
 TCP_KEEPINTERVAL -> 75
 TCP_KEEPIDLE -> 7200
 SO_RCVBUF -> 131072
 TCP_KEEPCOUNT -> 8
sun.nio.ch.DatagramChannelImpl@6a051b3a
 SO_SNDBUF -> 65507
 IP_MULTICAST_IF -> null
 SO_REUSEADDR -> false
 SO_REUSEPORT -> false
 IP_MULTICAST_LOOP -> true
 IP_TOS -> 0
 SO_BROADCAST -> false
 SO_RCVBUF -> 786896
 IP_MULTICAST_TTL -> 1
----------System.err:(18/1230)----------
java.lang.UnsupportedOperationException: unsupported socket option
	at jdk.net/jdk.net.MacOSXSocketOptions.getIpDontFragment0(Native Method)
	at jdk.net/jdk.net.MacOSXSocketOptions.getIpDontFragment(MacOSXSocketOptions.java:88)
	at jdk.net/jdk.net.ExtendedSocketOptions.getIpDontFragment(ExtendedSocketOptions.java:366)
	at jdk.net/jdk.net.ExtendedSocketOptions$1.getOption(ExtendedSocketOptions.java:307)
	at java.base/sun.nio.ch.Net.getSocketOption(Net.java:470)
	at java.base/sun.nio.ch.DatagramChannelImpl.getOption(DatagramChannelImpl.java:443)
	at PrintSupportedOptions.test(PrintSupportedOptions.java:66)
	at PrintSupportedOptions.main(PrintSupportedOptions.java:52)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)



java/nio/channels/DatagramChannel/AfterDisconnect.java: 

----------System.out:(51/3210)----------
Test with default
Test with IPv6 socket
Test with IPv4 socket
test AfterDisconnect.execute(): failure
java.lang.UnsupportedOperationException: unsupported socket option
	at jdk.net/jdk.net.MacOSXSocketOptions.getIpDontFragment0(Native Method)
	at jdk.net/jdk.net.MacOSXSocketOptions.getIpDontFragment(MacOSXSocketOptions.java:88)
	at jdk.net/jdk.net.ExtendedSocketOptions.getIpDontFragment(ExtendedSocketOptions.java:366)
	at jdk.net/jdk.net.ExtendedSocketOptions$1.getOption(ExtendedSocketOptions.java:307)
	at java.base/sun.nio.ch.Net.getSocketOption(Net.java:470)
	at java.base/sun.nio.ch.DatagramChannelImpl.getOption(DatagramChannelImpl.java:443)
	at java.base/sun.nio.ch.DatagramChannelImpl.repairSocket(DatagramChannelImpl.java:1357)
	at java.base/sun.nio.ch.DatagramChannelImpl.disconnect(DatagramChannelImpl.java:1311)
	at AfterDisconnect.testLocalAddress(AfterDisconnect.java:114)
	at AfterDisconnect.test(AfterDisconnect.java:93)
	at AfterDisconnect.execute(AfterDisconnect.java:86)


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284890,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ww2j:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-04-26 11:17;dcubed;The following fix:

JDK-8284890 Support for Do not fragment IP socket options

was integrated in jdk-19+20-1350 and these tests did not fail in jdk-19+20-1350-tier2
so I've added the 'intermittent' label. I also added the 'regression' label.;;;","2022-04-26 13:36;dcubed;Here's a log file snippet from the jdk-19+20-1356-tier2 sighting: 

jdk/net/ExtendedSocketOption/DontFragmentTest.java

#section:main
----------messages:(5/228)----------
command: main DontFragmentTest ipv4
reason: User specified action: run main/othervm DontFragmentTest ipv4 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.net
elapsed time (seconds): 0.145
----------configuration:(3/35)----------
Boot Layer
  add modules: jdk.net

----------System.out:(1/14)----------
Family = INET
----------System.err:(18/1225)----------
java.lang.UnsupportedOperationException: unsupported socket option
	at jdk.net/jdk.net.MacOSXSocketOptions.getIpDontFragment0(Native Method)
	at jdk.net/jdk.net.MacOSXSocketOptions.getIpDontFragment(MacOSXSocketOptions.java:88)
	at jdk.net/jdk.net.ExtendedSocketOptions.getIpDontFragment(ExtendedSocketOptions.java:366)
	at jdk.net/jdk.net.ExtendedSocketOptions$1.getOption(ExtendedSocketOptions.java:307)
	at java.base/sun.nio.ch.Net.getSocketOption(Net.java:470)
	at java.base/sun.nio.ch.DatagramChannelImpl.getOption(DatagramChannelImpl.java:443)
	at DontFragmentTest.testDatagramChannel(DontFragmentTest.java:78)
	at DontFragmentTest.main(DontFragmentTest.java:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.UnsupportedOperationException: unsupported socket option
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.UnsupportedOperationException: unsupported socket option
----------rerun:(37/6014)*----------;;;","2022-04-26 13:38;michaelm;Sounds like the older MacOS versions do not support this option. So, we need to add code to test this before adding the options to the supported list;;;","2022-04-27 03:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8419
Date: 2022-04-27 09:43:52 +0000;;;","2022-04-27 09:17;dukebot;Changeset: ef27081f
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2022-04-27 16:14:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ef27081fe7e00c8ec8e21d3ee31d7194b5339da2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix two typos in the spec of j.u.random.RandomGenerator,JDK-8285658,5073557,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,rgiulietti,rgiulietti,2022-04-26 09:15,2022-05-04 23:35,2023-10-01 09:56,2022-04-27 12:22,,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"Beside the description in the corresponding CSR, there are a couple of hard-coded ""magic"" values that can be replaced by more symbolic expressions (see PR)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285641,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wvz7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-04-26 09:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8404
Date: 2022-04-26 16:38:37 +0000;;;","2022-04-27 12:22;dukebot;Changeset: 1f868f1d
Author:    Raffaello Giulietti <raffaello.giulietti@oracle.com>
Committer: Joe Darcy <darcy@openjdk.org>
Date:      2022-04-27 19:19:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1f868f1d091602cc462ee0fe5fa613a3638a5f1c
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add test that checks IP_DONTFRAGMENT is a supported option,JDK-8285646,5073532,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,michaelm,michaelm,michaelm,2022-04-26 07:08,2022-07-25 07:33,2023-10-01 09:56,2022-07-04 05:49,,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,Test scenario was missed in initial integration,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wvtn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-04-26 09:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8405
Date: 2022-04-26 16:41:08 +0000;;;","2022-07-04 05:49;michaelm;This was fixed in https://github.com/openjdk/jdk/pull/8419;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/JRootPane/DefaultButtonTest.java failed with Default Button not pressed for L&F: com.sun.java.swing.plaf.motif.MotifLookAndFeel,JDK-8285635,5073519,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,alanb,alanb,2022-04-26 04:10,2023-06-27 08:16,2023-10-01 09:56,2022-11-09 21:53,20,repo-loom,,,,,,,,,,20,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,sn_117,sn_131,test_sprint,testbug,,,,,,,,,,,,,"javax/swing/JRootPane/DefaultButtonTest.java failed (once) in the loom repo on linux-x64 with:

----------System.out:(5/292)----------
Testing L&F: javax.swing.plaf.metal.MetalLookAndFeel
Test Passed for L&F: javax.swing.plaf.metal.MetalLookAndFeel
Testing L&F: javax.swing.plaf.nimbus.NimbusLookAndFeel
Test Passed for L&F: javax.swing.plaf.nimbus.NimbusLookAndFeel
Testing L&F: com.sun.java.swing.plaf.motif.MotifLookAndFeel
----------System.err:(12/907)----------
java.lang.RuntimeException: Test Failed, Default Button not pressed for L&F: com.sun.java.swing.plaf.motif.MotifLookAndFeel
	at DefaultButtonTest.runTest(DefaultButtonTest.java:104)
	at DefaultButtonTest.main(DefaultButtonTest.java:47)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1555)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test Failed, Default Button not pressed for L&F: com.sun.java.swing.plaf.motif.MotifLookAndFeel
JavaTest Message: shutting down test

The loom repo is currently sync'ed with jdk-19+19. This failure is unlikely to be caused by any changes in the loom repo.",,,,,,,,,,JDK-8310970,JDK-8306503,JDK-8304608,JDK-8304768,JDK-8304228,JDK-8304221,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305779,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wvqr:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-04-26 22:38;alanb;[~psadhukhan] This may be an intermittent test failure? Did you walk through the test and the code that it uses to come up with any theory as to why the test failed? ;;;","2022-04-26 22:51;psadhukhan;it might be timing related...The test iterate through all installed look and feel without any break in between which might be detrimental in some slow systems. 
That's why I tried to run without any change but it does not fail. We could add a delay before each l&f switchover if it fails more times..;;;","2022-10-21 11:25;dcubed;Here's a log file snippet for the jdk-20+21-1498-tier4 sighting:

javax/swing/JRootPane/DefaultButtonTest.java

#section:main
----------messages:(7/272)----------
command: main DefaultButtonTest
reason: User specified action: run main DefaultButtonTest 
started: Fri Oct 21 16:15:08 UTC 2022
Mode: othervm
Additional options from @modules: --add-modules java.desktop
finished: Fri Oct 21 16:15:10 UTC 2022
elapsed time (seconds): 1.12
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(5/292)----------
Testing L&F: javax.swing.plaf.metal.MetalLookAndFeel
Test Passed for L&F: javax.swing.plaf.metal.MetalLookAndFeel
Testing L&F: javax.swing.plaf.nimbus.NimbusLookAndFeel
Test Passed for L&F: javax.swing.plaf.nimbus.NimbusLookAndFeel
Testing L&F: com.sun.java.swing.plaf.motif.MotifLookAndFeel
----------System.err:(12/907)----------
java.lang.RuntimeException: Test Failed, Default Button not pressed for L&F: com.sun.java.swing.plaf.motif.MotifLookAndFeel
	at DefaultButtonTest.runTest(DefaultButtonTest.java:104)
	at DefaultButtonTest.main(DefaultButtonTest.java:47)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test Failed, Default Button not pressed for L&F: com.sun.java.swing.plaf.motif.MotifLookAndFeel
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test Failed, Default Button not pressed for L&F: com.sun.java.swing.plaf.motif.MotifLookAndFeel
----------rerun:(43/5224)*----------;;;","2022-11-03 23:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10978
Date: 2022-11-04 06:27:19 +0000;;;","2022-11-09 21:53;dukebot;Changeset: 79c00921
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-11-10 05:51:13 +0000
URL:       https://git.openjdk.org/jdk/commit/79c0092125ef01e2980f8072d7b295ce0c1a6077
;;;","2023-04-19 07:08;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-04-19 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1281
Date: 2023-04-19 14:12:25 +0000;;;","2023-06-22 08:04;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed
;;;","2023-06-22 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1994
Date: 2023-06-22 15:16:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Take better advantage of generic MethodType cache,JDK-8285633,5073515,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,redestad,redestad,redestad,2022-04-26 03:43,2022-05-04 23:34,2023-10-01 09:56,2022-04-27 10:56,,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"j.l.invoke.MethodType has a pair of public convenience methods genericMethodType(int) and genericMethodType(int, boolean) that will return a possibly cached method type. These operations are generally much faster than the equivalent methodType(..) calls.

Rather than painstakingly use genericMethodType(int, ..) everywhere it might matter, an alternative solution is to refactor methodType(..) to check if the parameters match the genericMethodType and then automatically call genericMethodType method. Since generic type signatures are common, this appears to be a net win on both startup and helps enable constant folding.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wvpv:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2022-04-26 04:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8398
Date: 2022-04-26 10:57:04 +0000;;;","2022-04-27 10:56;dukebot;Changeset: 6c79671e
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2022-04-27 17:54:21 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6c79671e50d572f3da3a286d34a98dcb83b8d906
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix a configure error in RISC-V cross build,JDK-8285630,5073511,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pli,pli,pli,2022-04-26 02:07,2023-07-09 19:32,2023-10-01 09:56,2022-04-28 06:02,19,,,,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,"We are trying to cross build a RISC-V version of OpenJDK. We specified `--openjdk-target=riscv64-linux-gnu` after `bash configure` but got an error message.

configure: error: /usr/bin/bash /home/ent-user/jdk_src/make/autoconf/build-aux/config.sub riscv64-linux-gnu failed
configure exiting with result code 1",,,,,,,,,,JDK-8311769,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,19,,generic,,,,,,"0|i2wvoz:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-27 02:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8420
Date: 2022-04-27 09:50:35 +0000;;;","2022-04-28 06:02;dukebot;Changeset: 091637c8
Author:    Pengfei Li <pli@openjdk.org>
Date:      2022-04-28 12:59:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/091637c82631e344c235758f9e102edb1eb1231c
;;;","2023-06-23 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Xcheck:jni warnings during JFR initialization,JDK-8285621,5073505,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dbuck,dbuck,dbuck,2022-04-25 20:49,2022-07-08 01:13,2023-10-01 09:56,2022-05-27 06:37,8u321,,,,,,,,,,,8u351,hotspot,,0,11-na,sustaining,,,,,,,,,,,,,,,,,,,"These ""benign"" warnings can significantly complicate troubleshooting customer issues.

===
/java/jdk1.8.0_321/bin/java -Xcheck:jni -XX:+UnlockCommercialFeatures -XX:+FlightRecorder -version
WARNING in native method: JNI call made without checking exceptions when required to from CallStaticObjectMethod
        at jdk.internal.instrumentation.Tracer.retransformClasses0(Native Method)
        at jdk.internal.instrumentation.Tracer.addInstrumentations(Tracer.java:213)
        - locked <0x000000076dedf090> (a jdk.internal.instrumentation.Tracer)
        at oracle.jrockit.jfr.VMJFR.instrument(VMJFR.java:453)
        at oracle.jrockit.jfr.JFR.init(JFR.java:297)

<...>

WARNING in native method: JNI call made without checking exceptions when required to from CallStaticObjectMethodV
        at java.lang.Object.getClass(Native Method)
        at java.security.AccessControlContext.<init>(AccessControlContext.java:255)
        at java.security.AccessController.createWrapper(AccessController.java:599)
        at java.security.AccessController.doPrivileged(AccessController.java:429)
        at oracle.jrockit.jfr.VMJFR.createJavaLangThreadForBufferthread(VMJFR.java:527)
java version ""1.8.0_321""
Java(TM) SE Runtime Environment (build 1.8.0_321-b07)
Java HotSpot(TM) 64-Bit Server VM (build 25.321-b07, mixed mode)
$
===",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wvnn:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-04-25 20:51;dbuck;Issue seems to have been resolved sometime between 8 and 10GA, but it is not clear to me exactly when and how. JDK-8187442 probably plays a role, but I suspect there may be a bit more to this.;;;","2022-04-25 21:23;dholmes;I don't see this in 9 either (9-b01 is clean). Not seeing relevance of  JDK-8187442 though as this issue seems restricted to JFR code.

But also can't immediately see why the warnings are being issued ... could be the warning code itself that is broken in 8u.

Aside: a Java stack trace is of limited use in reporting a failing in native code. :(;;;","2022-04-25 22:10;dbuck;9 still throws JNI warnings, but only if I actually start a recording:
===
$ /java/jdk-9.0.4/bin/java -Xcheck:jni -XX:+UnlockCommercialFeatures -XX:+FlightRecorder -XX:StartFlightRecording=duration=60s,filename=myrecording.jfr -cp ~/test Sleeper
Started recording 1. The result will be written to:

/home/dbuck/repos/jdk8u-cpu/myrecording.jfr
WARNING in native method: JNI call made without checking exceptions when required to from CallStaticObjectMethod
WARNING in native method: JNI call made without checking exceptions when required to from CallStaticObjectMethod
===

I agree that is it not clear what connection, if any, this might have to JDK-8187442. I only mentioned it because 10b25 is the first build where I could run JFR without any JNI warnings.;;;","2022-05-25 22:05;dbuck;I believe there are 2 individual issues described in the bug description:

=== issue 1 ===
WARNING in native method: JNI call made without checking exceptions when required to from CallStaticObjectMethod
        at jdk.internal.instrumentation.Tracer.retransformClasses0(Native Method)
===========

=== issue 2 ===
WARNING in native method: JNI call made without checking exceptions when required to from CallStaticObjectMethodV
        at java.lang.Object.getClass(Native Method)
===========

When I run the testcase against 8u321, I see 11 instances of issue 1, and only 1 instance of issue 2.

Issue 1 is a bug in jdk.internal.instrumentation. Issue 2 appears to be a duplicate of JDK-8164086 which was fixed in JDK 9 and probably should be backported to JDK 8 as a separate task. I intend to use this bug report to track my fix of issue 1 only.;;;","2022-05-26 04:54;dbuck;The bug for ""issue 1"" is in code that was removed as part of JDK-8202618, so this issue is not applicable to JDK 11 and later.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix java/awt/print/PrinterJob/ImagePrinting/PrintARGBImage.java manual test,JDK-8285617,5073500,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-04-25 16:03,2022-12-06 03:14,2023-10-01 09:56,2022-04-27 05:25,17,18,,,,,,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,"java/awt/print/PrinterJob/ImagePrinting/PrintARGBImage.java test has the following issue and it needs to be fixed
1) Test fails with parser error due to @run main/manual=yesno 
2) User can't decide whether it as pass or fail after looking into the printout. ",,,,,,,,,,JDK-8291835,JDK-8290421,JDK-8295361,JDK-8291028,JDK-8298166,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wvmj:",9223372036854775807,b21,,,,,,,,,,,"2022-04-25 18:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8395
Date: 2022-04-26 01:44:45 +0000;;;","2022-04-27 05:25;dukebot;Changeset: e7c3b9de
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-04-27 12:23:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e7c3b9de649d4b28ba16844e042afcf3c89323e5
;;;","2022-08-02 06:03;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly testing passed.;;;","2022-08-02 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/620
Date: 2022-08-02 13:03:04 +0000;;;","2022-10-11 01:01;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
No risk, only a test change.
I had to adapt a String text block to Java 11 syntax.
Test passes. SAP nighlty testing passed.;;;","2022-10-11 01:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1435
Date: 2022-10-11 08:00:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] Incorrect path for launcher-as-service.txt in .cfg file,JDK-8285616,5073498,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,efrenkel,efrenkel,2022-04-25 15:39,2022-08-23 09:49,2023-10-01 09:56,2022-05-05 13:24,19,,,,,,,,,,,19,tools,,0,jpackage,macos,sn_117,sqebug,,,,,,,,,,,,,,,,,"Test mach5 build: 
https://jpg-data.us.oracle.com/artifactory/jdk-dev-local/jdk/personal/alexey.semenyuk/2022-04-12-1650563.alexey.semenyuk.jdk10

Need to create ServiceTest and UpdateServiceTest artifacts.
ServiceTest creates three packages: ServiceTest-1.0.pkg, UpdateServiceTest-1.0.pkg, and UpdateServiceTest-2.0.pkg. The test can be executed in a regular invocation of run_tests.sh script you use to produce artifacts for testing.

IMPORTANT NOTE: To reproduce this bug machine used for creating test artifacts and machine you run on should be DIFFERENT machines

Steps to Reproduce:
(1) Open terminal and run command: sudo installer -allowUntrusted -pkg ServiceTest-1.0.pkg -target / 
(2) In terminal run command: cat /Applications/ServiceTest.app/Contents/app/ServiceTest.cfg
(3) Copy ""Djpackage.test.appOutput"" path, it will look something like ""/var/folders/zz/zyxvpxvq6csfxvn_n0000000000000/T/launcher-as-service.txt"" (path will be different than this, but should be in /var/folders directory)
(4) In terminal run command:  ls /copied/path/to/launcher-as-service.txt
      (a) VERIFY this file exists

Expected Result:
launcher-as-service.txt file exists in path found in ServiceTest.cfg file

Actual Result:
launcher-as-service.txt file does NOT exist

This bug is only reproduced if you run on a DIFFERENT machine than the machine the test artifacts were created on",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8236128,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2wvm3:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,Verified,,"2022-04-25 19:11;asemenyuk;The test uses the value of ""java.io.tmpdir"" system property to get the name of a directory where to create launcher-as-service.txt file on Linux and macOS. This approach is not portable as on macOS the value of the property references ""random"" directory. Need better solution. Maybe use hardcoded ""/tmp"" or ""/var/tmp"" values.;;;","2022-05-05 13:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8563
Date: 2022-05-05 20:00:54 +0000;;;","2022-05-05 13:24;dukebot;Changeset: 9644a314
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-05-05 20:21:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9644a314cf1c80e43c48474f6f311fc98da597ac
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typo in java.lang.Float,JDK-8285614,5073496,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-04-25 15:19,2022-04-27 23:28,2023-10-01 09:56,2022-04-25 16:04,19,,,,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,"java.lang.Float uses "" equality"" where ""equally"" is intended.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8261123,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wvln:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-04-25 15:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8390
Date: 2022-04-25 22:22:29 +0000;;;","2022-04-25 16:04;dukebot;Changeset: d435d692
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-04-25 23:03:11 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d435d692b0bbc0164a1fd1bf3616ee61a3c1c58b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove jtreg tag manual=yesno for java/awt/print/PrinterJob/ImagePrinting/ClippedImages.java,JDK-8285612,5073493,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-04-25 14:38,2022-09-26 01:10,2023-10-01 09:56,2022-05-11 16:38,17,18,,,,,,,,,,19,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,testbug,,,,,,,,,,,,,,,,," java/awt/print/PrinterJob/ImagePrinting/ClippedImages.java is failing due to following issue 
1) Parser error due to yesno in @run main/manual=yesno
2) User can't mark the test as pass or fail, test just passes after taking the print out. ",,,,,,,,,,JDK-8292533,JDK-8294352,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wvkz:",9223372036854775807,b23,,,,,,,,,,,"2022-04-25 15:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8391
Date: 2022-04-25 22:36:59 +0000;;;","2022-05-11 16:38;dukebot;Changeset: 57a76708
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-05-11 23:35:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/57a76708864c3fed5fc2543f6a8552f38670488c
;;;","2022-09-21 07:18;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Not clean, included the hunk for ClippedImages.java from ""JDK-8270058: Use Objects.check{Index,FromIndexSize} for java.desktop""
Test passes. SAP nightly testing passed.;;;","2022-09-21 07:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/719
Date: 2022-09-21 14:16:48 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Retrofit (Doc)Pretty with java.io.UncheckedIOException,JDK-8285611,5073491,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-04-25 13:51,2022-04-27 23:29,2023-10-01 09:56,2022-04-26 00:51,19,,,,,,,,,,,19,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,Standard java.io.UncheckedIOException is more convenient than older ad-hoc com.sun.tools.javac.tree.(Doc)Pretty.UncheckedIOException.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285396,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wvkj:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-04-25 14:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8387
Date: 2022-04-25 21:01:58 +0000;;;","2022-04-26 00:51;dukebot;Changeset: e333cd33
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-04-26 07:48:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e333cd33d17721bd762bfa10db1899a391556011
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"closed sun/java2d/GdiRendering/ClipShapeRendering.java failed with ""Incorrect color ffeeeeee instead of ff0000ff in pixel (100, 100)""",JDK-8285604,5073484,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,dcubed,dcubed,2022-04-25 12:50,2023-04-18 00:28,2023-10-01 09:56,2022-11-18 14:00,11,17,19,,,,,,,,,20,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,sn_131,test_sprint,test_sprint_nov_2022,testbug,tier5,,,,,,,,,"The following closed tests failed in the JDK19 CI:

sun/java2d/GdiRendering/ClipShapeRendering.java

Here's a log file snippet:

#section:main
----------messages:(5/198)----------
command: main ClipShapeRendering
reason: User specified action: run main ClipShapeRendering 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 2.062
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(4/150)----------
Running OFF-SCREEN tests..
Running ON-SCREEN tests..
Checking results for off-screen rendering..done.
Checking results for on-screen rendering..done.
----------System.err:(12/782)----------
Incorrect color ffeeeeee instead of ff0000ff in pixel (100, 100)
java.lang.RuntimeException: Test failed. off-screen: passed   on-screen: failed
	at ClipShapeRendering.main(ClipShapeRendering.java:446)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test failed. off-screen: passed   on-screen: failed
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test failed. off-screen: passed on-screen: failed
----------rerun:(42/5690)*----------",,,,,,,,,,JDK-8297327,JDK-8305799,JDK-8297471,JDK-8305469,JDK-8297365,JDK-8306194,JDK-8297443,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x,,,,,,"0|i2wviz:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-04-25 16:53;prr;This test hasn't failed since being re-enabled in Nov. 2021 after
    8252813: client tests failing on macOS 10.15.X host
which was an issue where the mouse pointer was being sampled instead of the window.
I've no insight into why it failed again just now.

Probably need to just monitor it for now to see if something changed and it fails again.
;;;","2022-05-19 12:14;vdyakov;is it introduced in 19?;;;","2022-05-19 14:39;prr;No evidence for that. It was seen just twice and both on the same system.
;;;","2022-11-16 12:43;prr;This failed on the same host that we've seen problems on from time to time as documented in
https://bugs.openjdk.org/browse/JDK-8296909
and other bugs so it is somewhat suspect as to whether this could also have been a case of capturing pointer pixels.

But when I ran this test locally on my mac it happened to fail the same way because the window
came up behind a terminal window.
using setAlwaysOnTop(true) can be used to guard against this.;;;","2022-11-17 13:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11221
Date: 2022-11-17 21:05:35 +0000;;;","2022-11-18 14:02;dukebot;Changeset: c56c69ed
Author:    Phil Race <prr@openjdk.org>
Date:      2022-11-18 22:00:22 +0000
URL:       https://git.openjdk.org/jdk/commit/c56c69ed3e09df1b56e340498dc28ba50815d15e
;;;","2022-11-18 21:01;vrudomet;Fix request [11u, 17u, 19u]

Clean backport.
New test, low risk.
Test passed on 11, 17, 19 with command: make run-test TEST=""test/jdk/sun/java2d/GdiRendering/ClipShapeRendering.java""
;;;","2022-11-18 21:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/74
Date: 2022-11-19 05:04:08 +0000;;;","2022-11-18 21:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/901
Date: 2022-11-19 05:04:05 +0000;;;","2022-11-18 21:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1533
Date: 2022-11-19 05:03:46 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[11] add signum checks in DSA.java engineVerify,JDK-8285591,5073462,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2022-04-25 07:14,2022-07-20 19:34,2023-10-01 09:56,2022-04-28 03:45,11,13,8,,,,,,,,,11.0.16,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk8u-critical-request,jdk8u-critical-yes,redhat-interest,,,,,,,,,,,,,,"JDK-8277233 added signum checks to the engineVerify method in DSA.java in jdk17+.
To be consistent with higher releases, it would be good to check also in jdk11.",,,,,,,,,,JDK-8287736,JDK-8287944,JDK-8290752,JDK-8287969,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277233,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wve3:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-04-25 07:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1045
Date: 2022-04-25 14:24:51 +0000;;;","2022-04-28 00:05;mbaesken;I would like to have the patch in jdk11u-dev as well, because it gives better consistency in behavior to higher releases like jdk17 (see 8277233). Risk of the backport is low to medium (we have the added check already in higher releases). JCK and JTREG tests worked fine.;;;","2022-04-28 03:45;dukebot;Changeset: bf3438c5
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-04-28 10:43:19 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/bf3438c5dc993b96d089cabb5318bfc64a6904a3
;;;","2022-05-04 01:17;dukebot;Changeset: bf3438c5
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-04-28 10:43:19 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/bf3438c5dc993b96d089cabb5318bfc64a6904a3
;;;","2022-05-30 09:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u/pull/11
Date: 2022-05-30 16:22:14 +0000;;;","2022-05-30 09:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/353
Date: 2022-05-30 16:28:03 +0000;;;","2022-05-30 19:53;andrew;Fix Request [13u]:

Same rationale as the backport to 11u. javax.crypto tests all pass and no regressions with sun.security tests (7 fail here on both patched and unpatched)
PR: https://git.openjdk.java.net/jdk13u-dev/pull/353;;;","2022-06-06 17:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk7u/pull/8
Date: 2022-06-06 23:57:51 +0000;;;","2022-06-06 18:50;andrew;Critical Fix Request [8u]:

Same rationale as the backport to 11u & 13u. Requesting during rampdown so all releases are in sync by the July update.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IGV: scheduling crashes on control-unreachable CFG nodes,JDK-8285558,5073426,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2022-04-25 05:12,2022-08-16 23:47,2023-10-01 09:56,2022-05-31 00:01,19,,,,,,,,,,,19,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-19,,,,,,,,,,,,,,,,,"IGV's schedule approximation algorithm assumes that all CFG nodes are reachable from the Root node. This assumption is violated by ill-formed graphs with components that are unreachable from the root, leading to crashes and failure to approximate the schedule and viewing the graph. IGV should handle such cases, as debugging inconsistent graphs is a key use case.

HOW TO REPRODUCE:

Unzip and open crash.zip (attached) in IGV. The following failure is printed to .igv.log:

[INFO] java.lang.AssertionError: duplicate : Node 8 [bci=9, category=data, con=3, debug_idx=-2144031193, dump_spec=FramePtr, idx=51, is_
dead_loop_safe=true, jvms=InterceptorMethodHandler::getInterceptionChain @ bci:9 (line 92), line=92, name=Parm, short_name=RP, type=rawp
tr:]
[INFO]  at com.sun.hotspot.igv.data.InputBlock.addNode(InputBlock.java:97)
[INFO]  at com.sun.hotspot.igv.data.InputGraph.ensureNodesInBlocks(InputGraph.java:178)

The issue can also be reproduced on npe.zip (attached).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287164,,,,,,,,,,,,,,,,,"2022-04-25 05:11;rcastanedalo;crash.zip;https://bugs.openjdk.org/secure/attachment/98696/crash.zip","2022-05-27 02:21;rcastanedalo;npe.zip;https://bugs.openjdk.org/secure/attachment/99113/npe.zip",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wv63:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-25 05:20;rcastanedalo;ILW = crash in debug tool; low-frequency; no workaround known = MLH = P4;;;","2022-05-27 02:27;rcastanedalo;Raising likelihood, since the bug has been reported twice (here and in JDK-8287164) from different users:

ILW = crash in debug tool; observed occasionally by different users; no workaround known = MMH = P3;;;","2022-05-27 03:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8916
Date: 2022-05-27 10:08:22 +0000;;;","2022-05-31 00:01;dukebot;Changeset: 8f59422d
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2022-05-31 06:59:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8f59422d357a00a2270a8f421966977e3979c2fb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DatagramSocket:receive throws SocketException instead of ClosedByInterruptException when interrupted,JDK-8285528,5073392,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,alanb,kganapureddy,kganapureddy,2022-04-24 23:34,2022-04-26 01:01,2023-10-01 09:56,2022-04-25 10:11,repo-loom,,,,,,,,,,,repo-loom,core-libs,,0,conformance,,,,,,,,,,,,,,,,,,,,"As part of conformance test dev for the amended spec in java.net area, it's observed that DatagramSocket:receive() behavior is not as per the spec for the below scenario.

""This method is interruptible in the following circumstances:

The datagram socket is associated with a DatagramChannel. In that case, interrupting a thread receiving a datagram packet will close the underlying channel and cause this method to throw ClosedByInterruptException with the interrupt status set.""

Expected - ClosedByInterruptException

Actual behavior is - java.net.SocketException: Socket closed is thrown.

Please find the attached code to demonstrate the behavior ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-04-24 23:35;kganapureddy;TestReceiveInterruption.java;https://bugs.openjdk.org/secure/attachment/98691/TestReceiveInterruption.java",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wuyj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-04-25 00:42;alanb;Long standing behavior has varied a bit (JDK 11 throws ClosedByInterruptException, JDK 17 throws SocketException ""Socket closed""). The spec and implementation needs to be aligned, good catch.;;;","2022-04-26 00:23;kganapureddy;It looks the fix affects the second use case -
""The datagram socket uses the system-default socket implementation and a virtual thread PREVIEW is receiving a datagram packet. In that case, interrupting the virtual thread will cause it to wakeup and close the socket. This method will then throw SocketException with the interrupt status set.""

Now the other test is failing which is expecting SocketException but actual is - java.nio.channels.ClosedByInterruptException.
;;;","2022-04-26 00:52;alanb;There are 4 cases to consider:

1. DatagramSocket created with public constructor, platform thread, receive should not be interrupted. The interrupt status should be set when receive completes or throws.

2. DatagramSocket created with public constructor, virtual thread, receive should be interrupted and throw SocketException with the interrupt status set.

3. DatagramSocket obtained from DatagramChannel, platform thread, receive should be interrupted and throw ClosedByInterruptException and with the interrupt status set.

4. DatagramSocket obtained from DatagramChannel, virtual thread, receive should be interrupted and throw ClosedByInterruptException and with the interrupt status set.

The jtreg tests for these cases are passing. I also checked locally and I'm seeing the expected behavior. I think your comment is saying that you aren't see the expected behavior for #2. Can you send me, or attach, a test so that I know we are discussing the same issue.


;;;","2022-04-26 00:56;kganapureddy;My bad, My test needs to be corrected as it's a copy paste mistake still the DatagramSocket is associated with Channel and using VirtualThread which is case 4.
Thank you.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve test java/io/FileOutputStream/OpenNUL.java,JDK-8285523,5073385,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-04-24 20:07,2022-08-31 03:46,2023-10-01 09:56,2022-04-29 00:38,19,,,,,,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,The test added as part of the https://bugs.openjdk.java.net/browse/JDK-8285445 do not trigger the bug.,,,,,,,,,,JDK-8287198,JDK-8287197,JDK-8287116,JDK-8287068,JDK-8287251,JDK-8287069,JDK-8289479,JDK-8293056,JDK-8293055,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285445,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wuwz:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2022-04-24 21:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8379
Date: 2022-04-25 04:35:13 +0000;;;","2022-04-28 23:24;serb;will backport it to all versions where JDK-8285445 was pushed.;;;","2022-04-29 00:38;dukebot;Changeset: f42631e3
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-04-29 07:34:46 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f42631e354d4abf7994abd92aa5def6b2ceeab3a
;;;","2022-05-15 16:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/132
Date: 2022-05-15 22:53:06 +0000;;;","2022-05-15 16:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/398
Date: 2022-05-15 22:53:39 +0000;;;","2022-05-15 17:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/211
Date: 2022-05-15 22:54:10 +0000;;;","2022-05-15 18:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1085
Date: 2022-05-15 22:54:48 +0000;;;","2022-05-15 18:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/59
Date: 2022-05-16 01:28:55 +0000;;;","2022-05-15 18:48;serb;Fix request (18u)

An updated test validates the ""default"" case when the ""jdk.io.File.enableADS"" property is not set, it can be used to verify the https://bugs.openjdk.java.net/browse/JDK-8285445
Review https://github.com/openjdk/jdk18u/pull/132;;;","2022-05-15 18:49;serb;Fix request (17u)

An updated test validates the ""default"" case when the ""jdk.io.File.enableADS"" property is not set, it can be used to verify the https://bugs.openjdk.java.net/browse/JDK-8285445
Review https://github.com/openjdk/jdk17u-dev/pull/398;;;","2022-05-15 18:50;serb;Fix request (15u)

An updated test validates the ""default"" case when the ""jdk.io.File.enableADS"" property is not set, it can be used to verify the https://bugs.openjdk.java.net/browse/JDK-8285445
Review https://github.com/openjdk/jdk15u-dev/pull/211;;;","2022-05-15 18:50;serb;Fix request (11u)

An updated test validates the ""default"" case when the ""jdk.io.File.enableADS"" property is not set, it can be used to verify the https://bugs.openjdk.java.net/browse/JDK-8285445
Review https://github.com/openjdk/jdk11u-dev/pull/1085;;;","2022-05-15 18:51;serb;Fix request (8u)

Clean backport, only the paths are changed. 
An updated test validates the ""default"" case when the ""jdk.io.File.enableADS"" property is not set, it can be used to verify the https://bugs.openjdk.java.net/browse/JDK-8285445
Review https://github.com/openjdk/jdk8u-dev/pull/59;;;","2022-06-29 08:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk7u/pull/10
Date: 2022-06-29 15:34:24 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CDS assert: visibility cannot change between dump time and runtime,JDK-8285518,5073376,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,iklam,alanb,alanb,2022-04-23 23:55,2022-05-11 23:16,2023-10-01 09:56,2022-05-10 11:21,19,repo-loom,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"gc/TestFullGCALot.java hit this assert in the loom repo. The startup of the Reference Handler and Finalizer have changed slightly in the loom repo, now started explicitly in initPhase1 rather than via the Reference initializer before.


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (t:\workspace\open\src\hotspot\share\classfile\systemDictionary.cpp:995), pid=27480, tid=40036
#  assert(SystemDictionary::is_shared_class_visible_impl(class_name, ik, pkg_entry, class_loader)) failed: visibility cannot change between dump time and runtime

Current thread (0x0000022513fb2f40):  JavaThread ""Reference Handler"" daemon [_thread_in_vm, id=40036, stack(0x0000007dfa300000,0x0000007dfa400000)]

Stack: [0x0000007dfa300000,0x0000007dfa400000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc47701]  os::platform_print_native_stack+0xf1  (os_windows_x86.cpp:235)
V  [jvm.dll+0xeaa04b]  VMError::report+0x10eb  (vmError.cpp:835)
V  [jvm.dll+0xeabb2e]  VMError::report_and_die+0x7fe  (vmError.cpp:1664)
V  [jvm.dll+0xeac2b4]  VMError::report_and_die+0x64  (vmError.cpp:1445)
V  [jvm.dll+0x5821b7]  report_vm_error+0xb7  (debug.cpp:283)
V  [jvm.dll+0xdda748]  SystemDictionary::is_shared_class_visible+0x178  (systemDictionary.cpp:994)
V  [jvm.dll+0xddb5c7]  SystemDictionary::load_shared_class+0xf7  (systemDictionary.cpp:1144)
V  [jvm.dll+0xddb15e]  SystemDictionary::load_instance_class_impl+0x20e  (systemDictionary.cpp:1281)
V  [jvm.dll+0xddd1df]  SystemDictionary::resolve_instance_class_or_null+0x8bf  (systemDictionary.cpp:723)
V  [jvm.dll+0xddd76f]  SystemDictionary::resolve_or_fail+0x6f  (systemDictionary.cpp:265)
V  [jvm.dll+0x54a541]  ConstantPool::klass_at_impl+0x3a1  (constantPool.cpp:514)
V  [jvm.dll+0x7be469]  InterpreterRuntime::ldc+0x269  (interpreterRuntime.cpp:157)
C  0x0000022507553dff
C  0x0000022507553dff

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.ref.Reference$ReferenceHandler.run()V+3 java.base@19-loomvt
v  ~StubRoutines::call_stub 0x00000225075310a7

  public void java.lang.ref.Reference$ReferenceHandler::run()
    Code:
       0: invokestatic  #7                  // Method jdk/internal/misc/Unsafe.getUnsafe:()Ljdk/internal/misc/Unsafe;
       3: ldc           #13                 // class jdk/internal/ref/Cleaner   <<<<<<<<<<<<<<<<<<<<<< HERE
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-04-25 16:29;iklam;loom_reproduce.diff;https://bugs.openjdk.org/secure/attachment/98699/loom_reproduce.diff","2022-04-25 16:37;iklam;mainline_reproduce.diff;https://bugs.openjdk.org/secure/attachment/98700/mainline_reproduce.diff",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wuuz:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-25 16:33;iklam;Reproducer and prototype for fix -- loom repo:

[1] Apply loom_reproduce.diff from the bug attachment

[2] Use SerialGC to dump CDS archive. This will omit the archived Java heap. (On Windows, which this bug was observed, the archived Java heap is disabled).

$ java -Xshare:dump -XX:+UseSerialGC
$ java -Xlog:cds --version
[0.052s][info][cds] trying to map /jdk2/bld/loom-debug/images/jdk/lib/server/classes.jsa
[0.052s][info][cds] Opened archive /jdk2/bld/loom-debug/images/jdk/lib/server/classes.jsa.
[0.052s][info][cds] Archive was created with UseCompressedOops = 1, UseCompressedClassPointers = 1
[0.052s][info][cds] full module graph: disabled because archive was created without full module graph
[0.052s][info][cds] Core region alignment: 4096
[0.052s][info][cds] Reserved archive_space_rs [0x0000000800000000 - 0x0000000801000000] (16777216) bytes
[0.052s][info][cds] Reserved class_space_rs   [0x0000000801000000 - 0x0000000841000000] (1073741824) bytes
[0.052s][info][cds] Mapped static  region #0 at base 0x0000000800000000 top 0x00000008004d8000 (ReadWrite)
[0.052s][info][cds] Mapped static  region #1 at base 0x00000008004d8000 top 0x0000000800c89000 (ReadOnly)
[0.052s][info][cds] optimized module handling: enabled
[0.052s][info][cds] full module graph: disabled
java 19-internal 2022-09-20
Java(TM) SE Runtime Environment (slowdebug build 19-internal-adhoc.iklam.loom)
Java HotSpot(TM) 64-Bit Server VM (slowdebug build 19-internal-adhoc.iklam.loom, mixed mode, sharing)

[3] Enable UseNewCode to simulate the timing issue 

$ java -XX:+UseNewCode --version
Cleaner pkg_entry = (nil)
Universe::is_module_initialized() = 0
Cleaner: wait for Universe::is_module_initialized()
Cleaner: wait for Universe::is_module_initialized()
java 19-internal 2022-09-20
Java(TM) SE Runtime Environment (slowdebug build 19-internal-adhoc.iklam.loom)
Java HotSpot(TM) 64-Bit Server VM (slowdebug build 19-internal-adhoc.iklam.loom, mixed mode, sharing)
[....]
#  Internal Error (/jdk2/loom/open/src/hotspot/share/classfile/systemDictionary.cpp:994), pid=1523111, tid=1523133
#  assert(SystemDictionary::is_shared_class_visible_impl(class_name, ik, pkg_entry, class_loader)) failed: visibility cannot change between dump time and runtime
#
# JRE version: Java(TM) SE Runtime Environment (19.0) (slowdebug build 19-internal-adhoc.iklam.loom)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 19-internal-adhoc.iklam.loom, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12bb33f]  SystemDictionary::is_shared_class_visible(Symbol*, InstanceKlass*, PackageEntry*, Handle)+0x15f
#


[4] Enable UseNewCode2 to use the prototype fix

$ java -XX:+UseNewCode -XX:+UseNewCode2 --version
Cleaner pkg_entry = (nil)
Universe::is_module_initialized() = 0
Cleaner: wait for Universe::is_module_initialized()
Cleaner: wait for Universe::is_module_initialized()
java 19-internal 2022-09-20
Java(TM) SE Runtime Environment (slowdebug build 19-internal-adhoc.iklam.loom)
Java HotSpot(TM) 64-Bit Server VM (slowdebug build 19-internal-adhoc.iklam.loom, mixed mode, sharing)
;;;","2022-04-25 16:39;iklam;This bug also exists on the mainline, but reproducing it requires changing the JDK bootup sequence. See mainline_reproduce.diff in bug attachment.

Reproduction steps are the same as in the previous comment.;;;","2022-04-25 17:14;dholmes;Can you clarify the race please - which threads are involved? I'm guessing the reference processing thread is trying to initialize Cleaner before module init is complete?;;;","2022-04-25 18:15;iklam;I've updated the Description to indicate that the assert fails in the reference thread

    java.lang.ref.Reference$ReferenceHandler::run()

This thread is launched before the module system is fully initialized. The main change between the mainline and loom is -- the Cleaner class is loaded in the main VM thread in mainline, but it's loaded in the ReferenceHandler thread in loom. This makes it possible to for the timing problem to happen in the loom repo:

[1] main thread: spawn ReferenceHandler thread

[2] ReferenceHandler thread: try to load Cleaner class. Because module system is not initialized, you see this in the output:

Cleaner pkg_entry = (nil)
Universe::is_module_initialized() = 0

[3] main thread: finishes initialization of module system

[4] ReferenceHandler: comes to this function with Universe::is_module_initialized() == true and pkg_entry == NULL. Thus it will set visible = false;

https://github.com/openjdk/jdk/blob/4bf2c18d6c2b4e54c27fb557e679b9c24e09c0e7/src/hotspot/share/classfile/systemDictionary.cpp#L1001-L1031

bool SystemDictionary::is_shared_class_visible_impl(Symbol* class_name,
                                                    InstanceKlass* ik,
                                                    PackageEntry* pkg_entry,
                                                    Handle class_loader) {
  int scp_index = ik->shared_classpath_index();
  assert(!ik->is_shared_unregistered_class(), ""this function should be called for built-in classes only"");
  assert(scp_index >= 0, ""must be"");
  SharedClassPathEntry* scp_entry = FileMapInfo::shared_path(scp_index);
  if (!Universe::is_module_initialized()) {
    assert(scp_entry != NULL && scp_entry->is_modules_image(),
           ""Loading non-bootstrap classes before the module system is initialized"");
    assert(class_loader.is_null(), ""sanity"");
    return true;
  }

  ModuleEntry* mod_entry = (pkg_entry == NULL) ? NULL : pkg_entry->module();
  bool should_be_in_named_module = (mod_entry != NULL && mod_entry->is_named());
  bool was_archived_from_named_module = scp_entry->in_named_module();
  bool visible;

  if (was_archived_from_named_module) {
    if (should_be_in_named_module) {
      // Is the module loaded from the same location as during dump time?
      visible = mod_entry->shared_path_index() == scp_index;
      if (visible) {
        assert(!mod_entry->is_patched(), ""cannot load archived classes for patched module"");
      }
    } else {
      // During dump time, this class was in a named module, but at run time, this class should be
      // in an unnamed module.
      visible = false;   <<<<<<<<<<<<<<<<<<<<<<<<<<< we come to here
    }
  }


;;;","2022-04-25 18:58;dholmes;I would have to ask why Loom changed things such that the Cleaner class is now initialized lazily by the ReferenceHandler thread instead of keeping it in the clinit of the Reference class (and executed by the main thread)? Was it just to move some startup costs off the main thread? The init sequence is very fragile so minimising unnecessary changes is always the safest thing to do.;;;","2022-04-25 22:04;iklam;Regardless of whether the initialization sequence should be changed, this is a bug in the CDS code so it should be fixed in the mainline. There are potentially other classes that may be affected by the same timing hole.;;;","2022-04-26 00:24;alanb;Loom has significant changes in this area to allow virtual threads be Cleaners. This has implications for startup so there are a few changes to defer as much as possible. Mandy and I discussed this area and I think we've got it to a good place. It doesn't matter to loom at this time if Cleaner is initialized in the Reference initializer or its run method. There were previous iterations where init'ing it in the initializer was too early. I think we've only hit the CDS assert once but it seems this has been a timing issue that has been lurking for some time.;;;","2022-04-26 00:40;dholmes;[~iklam] If the CDS code has a timing dependency on the initialization sequence then wouldn't it just  need to assert what it expects to be true rather than trying to account for it being false?

[~alanb] A conversation for a different forum but why would you need to allow Cleaners to be virtual threads?;;;","2022-04-26 01:04;alanb;Yes, a discussion for elsewhere but in brief: A criticism of Cleaners is that there it is costly to have a platform Thread waiting to execute cleaning actions. In the post finalizer (JEP 421) world we expect there will be a lot more use of Cleaners so we want them to a lightweight as possible. ;;;","2022-04-26 08:06;iklam;[~dholmes] the problem is generic and is not limited to the Cleaner class. It can happen to any class that started to be loaded  in a non-main thread before the module system is initialized.

If we don't fix this, the only way to avoid it is to make the module system initialization single threaded. I think that would be too restrictive.;;;","2022-04-26 19:01;dholmes;> the only way to avoid it is to make the module system initialization single threaded.

That is actually what my current expectation is - at least for the bulk of the module system. Races/non-determinism in the initialization process could lead to rare and very hard to diagnose startup bugs.;;;","2022-04-26 21:54;iklam;Even in mainline, the module system initialization is not single threaded.;;;","2022-04-26 22:35;alanb;The module system initialization doesn't directly create any threads. However, depending on the command line options, it may trigger GC and reference processing so there be some non-determinism.;;;","2022-04-27 02:39;dholmes;I stand corrected. The module system is mostly initialized in initPhase2(). The reference handler and finalizer threads are created before that; similarly for the VM's service thread and notification thread.;;;","2022-05-09 21:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8392
Date: 2022-04-25 23:48:14 +0000;;;","2022-05-10 11:21;dukebot;Changeset: 61c68abc
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-05-10 18:18:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/61c68abc68a77e5d009d4665dc21e840db02f4ae
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
System.getenv() returns unexpected value if environment variable has non ASCII character,JDK-8285517,5073375,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,itakiguchi,itakiguchi,itakiguchi,2022-04-23 22:13,2022-08-09 09:03,2023-10-01 09:56,2022-05-19 16:40,18,19,,,,,,,,,,19,core-libs,,0,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,,,,,,,,,,,,,,,,,,"On JDK19 with Linux ja_JP.eucjp locale, 
System.getenv() returns unexpected value if environment variable has Japanese EUC characters.
It seems this issue happens because of JEP 400.

Please check following output.
================================
$ locale 
LANG=ja_JP.eucjp
LC_CTYPE=""ja_JP.eucjp""
LC_NUMERIC=""ja_JP.eucjp""
LC_TIME=""ja_JP.eucjp""
LC_COLLATE=""ja_JP.eucjp""
LC_MONETARY=""ja_JP.eucjp""
LC_MESSAGES=""ja_JP.eucjp""
LC_PAPER=""ja_JP.eucjp""
LC_NAME=""ja_JP.eucjp""
LC_ADDRESS=""ja_JP.eucjp""
LC_TELEPHONE=""ja_JP.eucjp""
LC_MEASUREMENT=""ja_JP.eucjp""
LC_IDENTIFICATION=""ja_JP.eucjp""
LC_ALL=
$ cat Env.java
public class Env {
    public static void main(String[] args) throws Exception {
        for (String s : args)
            System.out.println(s+""=""+System.getenv(s));
    }
}
$ export DATE=`date`
$ echo $DATE
2022年 4月 23日 土曜日 22:33:29 JST
$ ~/jdk-17.0.2/bin/java -showversion Env.java DATE
openjdk version ""17.0.2"" 2022-01-18
OpenJDK Runtime Environment (build 17.0.2+8-86)
OpenJDK 64-Bit Server VM (build 17.0.2+8-86, mixed mode, sharing)
DATE=2022年  4月 23日 土曜日 22:33:29 JST
$ ~/jdk-19+b19/bin/java -showversion Env.java DATE
openjdk version ""19-ea"" 2022-09-20
OpenJDK Runtime Environment (build 19-ea+19-1283)
OpenJDK 64-Bit Server VM (build 19-ea+19-1283, mixed mode, sharing)
DATE=2022?  4?? 23?? ?????? 22:33:29 JST
================================

When I wrote jtreg testcase, I found ProcessBuilder had same kind of issue.",,,,,,,,,,JDK-8287608,JDK-8287953,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8166606,,,,,,,,,,,,,,,,,,,,,,,,,,18,,linux,,,,,,"0|i2wuur:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2022-04-24 02:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8378
Date: 2022-04-24 09:18:54 +0000;;;","2022-05-19 16:40;dukebot;Changeset: 890771e7
Author:    Ichiroh Takiguchi <itakiguchi@openjdk.org>
Date:      2022-05-19 23:38:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/890771e708277c5f7ea9460ff7bcc7e4cae87eab
;;;","2022-05-26 16:00;itakiguchi;Fix request [18u]

This issue is related by JEP 400.
I'd like to test JEP 400 with stable released code.

Backport is not clean.
Because following patch is not integrated on test/jdk/java/lang/ProcessBuilder/Basic.java:
  8284161: Implementation of Virtual Threads (Preview)
The modification does not affect logic, just remove following line:
  import java.lang.reflect.Field;

Tier1 and tier2 testing is clean except:
sun/security/pkcs11/Secmod/AddTrustedCert.java 
sun/security/ssl/X509TrustManagerImpl/Symantec/Distrust.java 

I think these are known issues on Linux platform;;;","2022-05-26 16:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/139
Date: 2022-05-26 23:11:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
clearPassword should be called in a finally try block,JDK-8285516,5073374,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-04-23 21:59,2023-09-13 14:07,2023-10-01 09:56,2022-05-09 07:15,17,19,,,,,,,,,,19,security-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,noreg-cleanup,noreg-trivial,tencent-interest,,,,,,,,,,,,,,,"In the PKCS12 key store implementation, the PBEKeySpec.clearPassword() should be called in a finally try block.",,,,,,,,,,JDK-8316224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wuuj:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-04-23 22:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8377
Date: 2022-04-24 05:13:36 +0000;;;","2022-05-09 07:15;dukebot;Changeset: 36e4df9d
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-05-09 14:13:50 +0000
URL:       https://git.openjdk.java.net/jdk/commit/36e4df9d66134ef160bbba0e59d0e3dbb183ba4b
;;;","2023-09-06 15:20;crakoczy;Fix Request (17u);;;","2023-09-06 15:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1722
Date: 2023-09-06 22:21:19 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"(dc) DatagramChannel.disconnect fails with ""Invalid argument"" on macOS 12.4",JDK-8285515,5073373,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jpai,dcubed,dcubed,2022-04-23 20:05,2023-07-31 23:16,2023-10-01 09:56,2022-04-29 02:17,11,17,18.0.2,19,7,8,,,,,,19,core-libs,,0,amazon-interest,CPU22_07-critical-approved,CPU22_07-critical-SQE-OK,intermittent,jdk11u-critical-request,jdk11u-critical-yes,jdk17u-critical-request,jdk17u-critical-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,tck-red-11.0.16-oracle,tck-red-17.0.4-oracle,tck-red-18.0.2,tck-red-7u351,tck-red-8u341,tier2,,"The following 5 tests failed in the JDK19 CI:

java/nio/channels/DatagramChannel/SelectWhenRefused.java
java/nio/channels/DatagramChannel/Disconnect.java
java/nio/channels/DatagramChannel/ChangingAddress.java
java/nio/channels/DatagramChannel/AfterDisconnect.java
java/nio/channels/DatagramChannel/AdaptorGetters.java

Here's a log file snippet for the SelectWhenRefused.java test:

----------System.err:(12/680)----------
java.net.SocketException: Invalid argument
	at java.base/sun.nio.ch.DatagramChannelImpl.disconnect0(Native Method)
	at java.base/sun.nio.ch.DatagramChannelImpl.disconnect(DatagramChannelImpl.java:1300)
	at SelectWhenRefused.main(SelectWhenRefused.java:78)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.net.SocketException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.net.SocketException: Invalid argument

The other 4 tests have similar failures.

The test machine is running Mac_OS_X_12.4 and we've been
seeing some strange failures on Mac_OS_X_12.4 in the last
few days.",,,,,,,,,,JDK-8287276,JDK-8287277,JDK-8287807,JDK-8304908,JDK-8288314,JDK-8287961,JDK-8288463,JDK-8308799,JDK-8288243,JDK-8288242,JDK-8288008,JDK-8288465,JDK-8287963,JDK-8288010,JDK-8288566,JDK-8288565,JDK-8288009,,,,,,,,,,,,,,,,,JDK-8285779,JDK-8285365,,JDK-8287509,JDK-8285514,JDK-8287509,JDK-8288033,,,,,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,,os_x,,,,,,"0|i2wuub:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2022-04-23 22:27;alanb;There seems to be a regression in macOS 12.4 beta2 that breaks the disconnect method. A native reproducer has been created to submit to Apple. A possible workaround in the JDK is being looked at too.;;;","2022-04-26 07:17;jpai;Investigation of these failures show that there's been a change in behaviour of the ""connect()"" system call in MacOS 12.4 Beta2 version. Java DatagramSocket/DatagramChannel internally call the connect() system call with a ""null address"" (as allowed by the ""man connect"" documentation), to dissolve a connected association on the socket (a.k.a disconnect). This call is now returning a different return value in MacOS 12.4 Beta2 version. Importantly, this change in behaviour appears to be only for IPv4-mapped IPv6 addresses (which is what these tests end up using). We will be requesting inputs from Apple on this change, by filing a issue in their internal issue tracker.;;;","2022-04-28 02:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8445
Date: 2022-04-28 09:37:17 +0000;;;","2022-04-29 02:17;dukebot;Changeset: 269eae61
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-04-29 09:15:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/269eae61894b6bd0a7512045a369b53df747f6e5
;;;","2022-05-31 00:35;alanb;[~pgupta] - I've restored the bug description so it matches the commit message. Please refrain from changing JBS issues after the change has already been committed.;;;","2022-05-31 02:10;pgupta;[~alanb] My bad, i missed this part and thanks for catching it.;;;","2022-06-03 04:56;lpinto;Fix request (18u)
Clean backport of mainline fix.
Need to fix this in 18u as it's a regression issue.;;;","2022-06-03 05:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/147
Date: 2022-06-03 12:07:14 +0000;;;","2022-06-08 23:12;goetz;Fix request [17u]

I backport this for parity with 17.0.4-oracle.
Fix for new macOS we should have.
Clean backport.
SAP nightly testing passed. ;;;","2022-06-08 23:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u/pull/346
Date: 2022-06-09 06:11:14 +0000;;;","2022-06-08 23:28;goetz;Fix request [11u]

I backport this for parity with 11.0.16-oracle.
Fix for new macOS we should have. 
SAP nightly testing passed.;;;","2022-06-08 23:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u/pull/46
Date: 2022-06-09 06:27:35 +0000;;;","2023-04-13 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/303
Date: 2023-04-13 18:57:45 +0000;;;","2023-04-13 15:41;btaylor;Fix request [8u]
Backport for parity with jdk11+ and oracle 8u
Resolves a networking bug on macos12
jtreg tier1 tests mentioned in the description pass;;;","2023-04-19 03:00;sgehwolf;[~btaylor] What are your thoughts on JDK-8288033 for OpenJDK 8u? It seems like this would cause a regression on older mac os X.;;;","2023-04-20 11:28;btaylor;I was able to reproduce the failure described on this bug on macos 12. It's not clear to me from the report if JDK-8288033 simply reverts this change, or if it uses version-dependent logic to pick between connect and disconnectx as appropriate. If the former, I would argue in favor of supporting the more modern version of macos. If the latter, it seems reasonable to me to take both this change and JDK-8288033.

It's not clear to me what versions need to be supported by jdk8u for macos - [the wiki](https://wiki.openjdk.org/display/Build/Supported+Build+Platforms) indicates 10.7 for Oracle and 10.8 for ""other build platforms"", but the code [targets 10.9](https://github.com/openjdk/jdk8u-dev/blob/master/common/autoconf/flags.m4#L700) on modern clang toolchains and [there are APIs used from 10.10](https://github.com/openjdk/jdk8u-dev/blob/master/jdk/src/macosx/native/sun/awt/AWTWindow.m#L268) and [10.13](https://github.com/openjdk/jdk8u-dev/blob/master/jdk/src/share/native/sun/awt/libpng/pngrutil.c#L457) - just to give 2 examples. I see 7 instances of `-Wunguarded-availability` when building the current jdk8u-dev repo locally on macos 13.

I don't have access to a sufficiently old version of macos (< 10.11) to test JDK-8288033 with, so I would need assistance from someone who does to do/test that backport.;;;","2023-04-24 06:21;sgehwolf;Thanks. It seems OK to only support MacOS X v10.11.0+ at this point. We can revisit should this turn out to be a problem. Approving.;;;","2023-04-24 13:42;btaylor;Should we change the target in the build system as part of this patch, or consider backporting https://bugs.openjdk.org/browse/JDK-8260518?;;;","2023-04-24 15:49;phh;JDK-8265031 is a JFX issue, not a JDK issue.;;;","2023-04-25 10:05;btaylor;My mistake, I meant https://bugs.openjdk.org/browse/JDK-8260518;;;","2023-04-25 11:20;phh;I'd support backporting JDK-8260518. Severin?;;;","2023-04-25 11:37;sgehwolf;For me it's not a requirement for this bug to go in. If you do plan to backport, please solicit feedback on the list first.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
revert fix for JDK-8282704 now that JDK-8282952 is fixed,JDK-8285507,5073364,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2022-04-23 06:11,2022-05-04 23:38,2023-10-01 09:56,2022-05-02 08:40,19,,,,,,,,,,,19,hotspot,,0,threads,,,,,,,,,,,,,,,,,,,,"The following fix:

    JDK-8282704 runtime/Thread/StopAtExit.java may leak memory

is no longer needed now that the following bug is fixed:

    JDK-8282952 Thread::exit should be immune to Thread.stop",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282952,,,,,,,,,,,,,,,,,,,,JDK-8283610,JDK-8282704,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wusb:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-27 07:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8389
Date: 2022-04-25 22:17:00 +0000;;;","2022-05-02 08:40;dukebot;Changeset: 41de506e
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-05-02 15:39:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/41de506ed6c9dc0331c2b6ae99c11623df05f34a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor cleanup could be done in javax.net,JDK-8285504,5073356,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,mpowers,mpowers,2022-04-22 19:40,2023-02-23 13:46,2023-10-01 09:56,2022-04-28 15:20,,,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,,"JDK-8273046 is the umbrella bug for this bug. The changes were too large for a single code review, so it was decided to split into smaller chunks. This is one such chunk: 

open/src/java.base/share/classes/java/net",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302596,,,,,,,,JDK-8273046,JDK-8302696,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wuqj:",9223372036854775807,b21,,,,,,,,,,,"2022-04-25 11:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8384
Date: 2022-04-25 17:40:13 +0000;;;","2022-04-28 15:20;dukebot;Changeset: 573eacec
Author:    Mark Powers <mark.powers@oracle.com>
Committer: Bradford Wetmore <wetmore@openjdk.org>
Date:      2022-04-28 22:18:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/573eaceca559a8a0832b1e1a7181b2f21d3978c7
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SwingNodeDnDMemoryLeakTest::testSwingNodeMemoryLeak fails sometimes,JDK-8285503,5073355,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,hmeda,hmeda,2022-04-22 19:38,2022-11-29 06:15,2023-10-01 09:56,2022-11-14 07:25,jfx18,,,,,,,,,,,jfx20,javafx,,0,sn_131,test_sprint,testbug,,,,,,,,,,,,,,,,,,"It is observed that the test SwingNodeDnDMemoryLeakTest .testSwingNodeMemoryLeak fails some times randomly when executed for multiple iterations.
Call stack observed during the failure is as follows: 

SwingNodeDnDMemoryLeakTest > testSwingNodeMemoryLeak FAILED
    java.lang.AssertionError: expected:<10> but was:<0>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:647)
        at org.junit.Assert.assertEquals(Assert.java:633)
        at test.javafx.embed.swing.SwingNodeDnDMemoryLeakTest.testSwingNodeMemoryLeak(SwingNodeDnDMemoryLeakTest.java:80)",Tested  this issue on macOS BigSur 11.6.2 and windows 10.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296618,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,,,,,,,"0|i2wuqb:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@368b4b86,,,,,,,,,"2022-11-08 10:05;kcr;I see this failure most of the time on my MacBook Pro x64 system (running macOS 12.5.1, but it used to happen on previous macOS versions, too). So for me, the test only *passes* intermittently.

The current GC code is fragile. Switching to using JMemoryBuddy might fix this.

Given how often it fails, the test should either be fixed or a new bug filed to skip the test until it can be fixed.;;;","2022-11-08 14:26;almatvee;Got same failure on MacBook Pro x64 running macOS 12.6.

java.lang.AssertionError: expected:<10> but was:<0>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:647)
	at org.junit.Assert.assertEquals(Assert.java:633)
	at test.javafx.embed.swing.SwingNodeDnDMemoryLeakTest.testSwingNodeMemoryLeak(SwingNodeDnDMemoryLeakTest.java:80);;;","2022-11-10 04:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/946
Date: 2022-11-10 12:01:53 +0000;;;","2022-11-14 07:24;dukebot;Changeset: 59569502
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2022-11-14 15:22:59 +0000
URL:       https://git.openjdk.org/jfx/commit/595695020cf46737a9790fb5638252d3e4a6fdad
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ECC calculation error,JDK-8285493,5073343,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-04-22 13:41,2022-05-06 11:39,2023-10-01 09:56,2022-04-27 19:57,,,,,,,,,,,,19,security-libs,,0,noreg-other,,,,,,,,,,,,,,,,,,,,Modular arithmetic on numbers from different fields makes no sense.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285743,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wunn:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-04-26 15:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8409
Date: 2022-04-26 21:02:49 +0000;;;","2022-04-27 19:57;dukebot;Changeset: c1173c24
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-04-28 02:52:41 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c1173c24bff271e26013126ff1746c480e2fe1a9
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve DocFinder,JDK-8285488,5073337,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-04-22 10:00,2022-11-28 14:45,2023-10-01 09:56,2022-11-16 01:45,19,,,,,,,,,,,20,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,DocFinder's Input and Output could use fewer taglet-specific fields.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291869,,,,,,,,,,JDK-8295277,JDK-8295800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wumb:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-10-18 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10746
Date: 2022-10-18 15:05:16 +0000;;;","2022-11-16 01:45;dukebot;Changeset: 499406c7
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-11-16 09:43:21 +0000
URL:       https://git.openjdk.org/jdk/commit/499406c764ba0ce57079b1f612297be5b148e5bb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typos in corelibs,JDK-8285485,5073331,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-04-22 08:07,2022-05-18 23:19,2023-10-01 09:56,2022-05-17 05:13,19,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"I ran codespell on modules owned by core-libs, and accepted those changes where it indeed discovered real typos. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wukz:",9223372036854775807,b23,,,,,,,,,,,"2022-04-22 08:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8364
Date: 2022-04-22 15:08:51 +0000;;;","2022-05-17 05:13;dukebot;Changeset: e68024c2
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-05-17 12:10:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e68024c2d28d634ebfde7f2fdcc35f5d7b07d704
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve handling of @inheritDoc,JDK-8285470,5073316,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-04-22 06:15,2022-05-04 23:42,2023-10-01 09:56,2022-05-04 13:56,19,,,,,,,,,,,19,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,,,,,,"The only taglet that along with its own tag needs to know the immediately enclosing tag is InheritDocTaglet:

    @return {@inheritDoc}
    @throws NullPointerException {@inheritDoc}
    @param p {@inheritDoc}

However, the immediately enclosing tag is unconditionally passed to all taglets. If we stop passing it and make InheritDocTaglet compute it instead, the code becomes cleaner.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wuhn:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-04-22 07:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8361
Date: 2022-04-22 14:05:44 +0000;;;","2022-05-04 13:56;dukebot;Changeset: bb022b24
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-05-04 20:55:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bb022b24cfdad9d6826140c6b26c46f480e7457d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"cannot open file ""NUL:""",JDK-8285445,5073206,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,bpb,webbuggrp,webbuggrp,2022-04-21 07:01,2022-08-19 11:22,2023-10-01 09:56,2022-06-18 10:14,11.0.1,11.0.15.1.1-oracle,11.0.15.1-oracle,11.0.16,13.0.12,15.0.8,17.0.3.1-oracle,17.0.4,18.0.1.1,7u343,8u333,19,core-libs,,0,amazon-interest,azul-interest,dcsaw,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,regression,release-note=yes,reproducer-yes,webbug,"A DESCRIPTION OF THE PROBLEM :
with java update cpuapr2022 (8u331 11.0.15 and 18.0.1) undertow is broken for windows.

this code:
https://github.com/xnio/xnio/blob/3.x/api/src/main/java/org/xnio/channels/Channels.java#L1098
return new FileOutputStream(""NUL:"").getChannel();
 

is broken after this ""improvement"" (ticket JDK-8278356 is not public, why?)
https://github.com/openjdk/jdk/commit/395bb5b7f97f2549da89641257fe56712856b49d ""8278356: Improve file creation""

2022-04-21 11:06:26,989 [XNIO-10 task-10] {} ERROR io.undertow.request.io UT005090: Unexpected failure
java.lang.NoClassDefFoundError: Could not initialize class org.xnio.channels.Channels

REGRESSION : Last worked in version 8

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
run test program below.




EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
No Exception.

ACTUAL -
 Exception in thread ""main"" java.io.FileNotFoundException: Invalid file path

---------- BEGIN SOURCE ----------
import java.io.FileOutputStream;

public class NulFile {
    public static void main(String[] args) throws Exception {
        new FileOutputStream(""NUL:"");
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
set system property: -Djdk.io.File.enableADS=true

FREQUENCY : always


",,,,,,,,,,JDK-8285957,JDK-8285634,JDK-8285744,JDK-8285682,JDK-8285532,JDK-8285608,JDK-8285580,JDK-8285681,JDK-8285597,JDK-8285787,JDK-8285813,JDK-8285607,JDK-8285609,JDK-8286218,JDK-8285581,JDK-8285606,JDK-8285512,JDK-8286248,JDK-8285750,JDK-8289475,,,,,,,,,,,JDK-8285500,,,JDK-8285966,JDK-8285499,JDK-8285446,JDK-8285499,JDK-8285446,JDK-8285523,JDK-8289782,,,,,,JDK-8278356,JDK-8285511,,,,,,,"2022-04-22 02:19;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/98672/Main.java",,,,,,,,,,x86_64,,,,,,,b06,,,windows,,,,,,"0|i2wtt7:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,Verified,,"2022-04-22 02:11;tongwan;The observations on Windows 10:
JDK 8u331b05: Passed.
JDK 8u331b06: Failed. FileNotFoundException thrown.;;;","2022-04-22 02:30;alanb;A workaround is to replace ""NUL:"" with ""NUL"", or as the submitter has found, the system property to get older behavior.

OutputStream.nullOutputStream(), added in Java 11, provides a output stream that discards all bytes. This is preferable to depending on the Windows specific NUL device.;;;","2022-04-22 07:41;rkale;Hi,
We observed that below program also failing with 'java.io.FileNotFoundException: Invalid file path' after upgrading to jdk8u331.

import java.io.*;
public class Test{
	public static void main(String []args){
		try {
                          new FileOutputStream(""NUL:"");
			  System.out.println(""Successful..."");
		}catch (FileNotFoundException e) {
                System.out.println(e);
        }
	}
};;;","2022-04-22 18:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8373
Date: 2022-04-23 01:11:56 +0000;;;","2022-04-23 08:54;dukebot;Changeset: 03cbb48e
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-04-23 15:51:04 +0000
URL:       https://git.openjdk.java.net/jdk/commit/03cbb48e6a1d806f204a39bbdbb4bc9be9e57a41
;;;","2022-04-23 09:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/106
Date: 2022-04-23 16:08:10 +0000;;;","2022-04-24 15:08;serb;Working on the backport to the openjdk 8/11/15/17.;;;","2022-04-24 21:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk15u-dev/pull/198
Date: 2022-04-25 01:57:55 +0000;;;","2022-04-25 04:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/358
Date: 2022-04-25 11:41:53 +0000;;;","2022-04-25 04:57;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well, because the issue is present there too (after 8278356: Improve file creation).  The patch applies cleanly.
Seems there is also a CSR about this : https://bugs.openjdk.java.net/browse/JDK-8285500;;;","2022-04-25 10:33;serb;@mbaesken, I have started the process of the backports and requested an additional approvals in the CSR, also requested an update to the test which as of now cannot be used to verify the fix. It would be good not to duplicate the work.;;;","2022-04-25 10:38;serb;@goetz Just FYI that the jdk17u-fix-yes was added before CSR approval.;;;","2022-04-25 15:04;serb;Fix request (15u)

Clean backport.
This is the fix for a regression introduced by the April CPU.
The fix was verified by the updated test(see https://bugs.openjdk.java.net/browse/JDK-8285523).
Review https://github.com/openjdk/jdk15u-dev/pull/198
CSR for 15-pool was approved: https://bugs.openjdk.java.net/browse/JDK-8285500;;;","2022-04-25 15:42;serb;Fix request (11u)

Clean backport.
This is the fix for a regression introduced by the April CPU.
The fix was verified by the updated test(see https://bugs.openjdk.java.net/browse/JDK-8285523).
Review https://github.com/openjdk/jdk11u-dev/pull/1047
CSR for 11-pool was approved: https://bugs.openjdk.java.net/browse/JDK-8285500;;;","2022-04-25 15:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1047
Date: 2022-04-25 22:14:09 +0000;;;","2022-04-26 10:40;andrew;Sorry, but why is this being rushed into update releases? There is an option to turn off the feature already, and surely it is better to be more secure by default?;;;","2022-04-26 11:36;serb;@andrew the 11.0.15.1-oracle(and probably others) includes fixes for other regressions:
https://bugs.openjdk.java.net/issues/?jql=project%20%3D%20JDK%20AND%20fixVersion%20%3D%2011.0.15.1-oracle;;;","2022-04-27 17:17;andrew;Yes, thanks, I realised afterwards that they didn't ship JDK-8284562 & JDK-8285461 in the recent release when we did. It thus makes sense for Oracle to do a follow-up release and include other issues like this one, whereas it doesn't for OpenJDK.
;;;","2022-04-28 02:11;yan;Fix request (13u):

clean backport. Will be targeted to July release. We should have it in 13u to align with 11 and 15 and later releases. The CSR is updated for 13-pool, too.
;;;","2022-04-28 02:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk13u-dev/pull/346
Date: 2022-04-28 09:25:12 +0000;;;","2022-04-28 14:26;serb;Fix request (8u)

Clean backport, only the paths are changed.
This is the fix for a regression introduced by the April CPU.
The fix was verified by the updated test(see https://bugs.openjdk.java.net/browse/JDK-8285523).
Review https://github.com/openjdk/jdk8u-dev/pull/49
CSR for 8-pool was approved: https://bugs.openjdk.java.net/browse/JDK-8285500;;;","2022-04-28 15:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/49
Date: 2022-04-28 21:22:10 +0000;;;","2022-06-29 08:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk7u/pull/9
Date: 2022-06-29 15:03:30 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Typo in Collections.addAll method javadoc,JDK-8285440,5073284,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-04-22 00:33,2022-05-04 23:34,2023-10-01 09:56,2022-04-27 07:22,17,18,,,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,"The Collections.addAll method javadoc currently states:
/**
     * Adds all of the specified elements to the specified collection.
     * Elements to be added may be specified individually or as an array.
     * The behaviour of this convenience method is similar to that of
     * {@code cc.addAll(Collections.unmodifiableList(Arrays.asList(elements)))}.

...

It seems that the ""cc"" in that line should instead have been ""c"" since the param passed to this method is named ""c"" and the rest of the API specification in this javadoc uses ""c"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wuaj:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-04-22 00:33;jpai;A contributor already has a PR open to fix this https://github.com/openjdk/jdk/pull/6942;;;","2022-04-22 01:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/6942
Date: 2021-12-31 18:58:43 +0000;;;","2022-04-27 07:22;dukebot;Changeset: 4919525d
Author:    Johnny Lim <izeye@naver.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2022-04-27 14:18:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4919525ddb55ba52d199a37c3b0e14e4a0c7c738
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove unused os::fsync,JDK-8285439,5073282,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-04-22 00:28,2022-04-27 23:28,2023-10-01 09:56,2022-04-24 23:44,19,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,The os::fsync function seems to be unused and could be removed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wua3:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-22 00:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8358
Date: 2022-04-22 07:41:12 +0000;;;","2022-04-24 23:44;dukebot;Changeset: c5aa75dd
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-04-25 06:43:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c5aa75dd8126c70c74fc2b541d82ef664a4b5ffd
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Fix MachNode size mismatch for MacroAssembler::verify_oops* ,JDK-8285437,5073280,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-04-22 00:14,2023-07-09 19:11,2023-10-01 09:56,2022-04-23 19:19,19,,,,,,,,,,,19,hotspot,,0,c2,oraclejdk-na,oracle-triage-19,,,,,,,,,,,,,,,,,,"Same as JDK-8283737: in fastdebug build, MacroAssembler::verify_oop is used in match rules encodeHeapOop and decodeHeapOop, which also requires a fixed length.

Could be reproduced by -XX:+VerifyOops:

> jdk/bin/java -XX:+VerifyOops -jar demo-0.0.1-SNAPSHOT.jar
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/output.cpp:1780
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/jdk19/src/hotspot/share/opto/output.cpp:1780), pid=437, tid=452
#  guarantee((int)(blk_starts[i+1] - blk_starts[i]) >= (current_offset - blk_offset)) failed: shouldn't increase block size
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc..jdk19)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc..jdk19, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-riscv64)
# Problematic frame:
# V  [libjvm.so+0xf93f04]  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)+0x19c0
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /jdk19/hs_err_pid437.log
#
# Compiler replay data is saved as:
# /jdk19/replay_pid437.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted



> jdk/bin/java -XX:+VerifyOops -jar demo-0.0.1-SNAPSHOT.jar
 2277  decodeHeapOop  === _  2278  [[ 2298 ]] jdk/internal/ref/CleanerImpl:exact *  Oop:jdk/internal/ref/CleanerImpl:exact * !jvms: JarFile::<init> @ bci:5 (line 117) JarURLConnection::get @ bci:183 (line 269)
decode_heap_oop  R7, R7	#@decodeHeapOop n_size (72), current_offset (4420), instr_offset (4344)
--------------------------------------------------------------------------------
BFD: unrecognized disassembler option:
  0x00000040137a3cb8:   slli	t2,t2,0x3
  0x00000040137a3cbc:   addi	sp,sp,-32
  0x00000040137a3cc0:   sd	ra,0(sp)
  0x00000040137a3cc4:   sd	t0,8(sp)
  0x00000040137a3cc8:   sd	t1,16(sp)
  0x00000040137a3ccc:   sd	a0,24(sp)
  0x00000040137a3cd0:   mv	a0,t2
  0x00000040137a3cd4:   lui	t0,0x2094
  0x00000040137a3cd8:   addiw	t0,t0,467
  0x00000040137a3cdc:   slli	t0,t0,0xd
  0x00000040137a3ce0:   addi	t0,t0,-1680 # 0x0000000002093970
  0x00000040137a3ce4:   auipc	t1,0xef9ca
  0x00000040137a3ce8:   ld	t1,124(t1) # 0x000000400316dd60
  0x00000040137a3cec:   jalr	t1
  0x00000040137a3cf0:   ld	ra,0(sp)
  0x00000040137a3cf4:   ld	t0,8(sp)
  0x00000040137a3cf8:   ld	t1,16(sp)
  0x00000040137a3cfc:   ld	a0,24(sp)
  0x00000040137a3d00:   addi	sp,sp,32
  0x00000040137a3d04:   Address 0x00000040137a3d04 is out of bounds.
--------------------------------------------------------------------------------
 -------------------
--------------------------------------------------------------------------------
BFD: unrecognized disassembler option:
  0x00000040137d2d40:   slli	t2,t2,0x3
  0x00000040137d2d44:   addi	sp,sp,-32
  0x00000040137d2d48:   sd	ra,0(sp)
  0x00000040137d2d4c:   sd	t0,8(sp)
  0x00000040137d2d50:   sd	t1,16(sp)
  0x00000040137d2d54:   sd	a0,24(sp)
  0x00000040137d2d58:   mv	a0,t2
  0x00000040137d2d5c:   lui	t0,0x4128
  0x00000040137d2d60:   addiw	t0,t0,2015
  0x00000040137d2d64:   slli	t0,t0,0xc
  0x00000040137d2d68:   auipc	t1,0xef99b
  0x00000040137d2d6c:   ld	t1,-8(t1) # 0x000000400316dd60
  0x00000040137d2d70:   jalr	t1
  0x00000040137d2d74:   ld	ra,0(sp)
  0x00000040137d2d78:   ld	t0,8(sp)
  0x00000040137d2d7c:   ld	t1,16(sp)
  0x00000040137d2d80:   ld	a0,24(sp)
  0x00000040137d2d84:   addi	sp,sp,32
  0x00000040137d2d88:   Address 0x00000040137d2d88 is out of bounds.
--------------------------------------------------------------------------------
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/output.cpp:1704
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/jdk19/src/hotspot/share/opto/output.cpp:1704), pid=467, tid=497
#  assert(false) failed: wrong size of mach node
#
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19-internal-adhoc..jdk19)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19-internal-adhoc..jdk19, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-riscv64)
# Problematic frame:
# V  [libjvm.so+0xf93488]  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)+0xf44
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /jdk19/hs_err_pid467.log
#
# Compiler replay data is saved as:
# /jdk19/replay_pid467.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted",,,,,,,,,,JDK-8311702,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299168,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,19,,linux,,,,,,"0|i2wu9n:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-22 00:26;xlinzheng;(demo-0.0.1-SNAPSHOT.jar is a normal springboot-helloworld program);;;","2022-04-22 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8356
Date: 2022-04-22 07:26:54 +0000;;;","2022-04-22 00:56;rcastanedalo;ILW = crash in verification code; happens in debug builds with VerifyOops on; do not use VerifyOops = MML = P4;;;","2022-04-23 19:19;dukebot;Changeset: 9d9f4e50
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-04-24 02:17:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9d9f4e502f6ddc3116ed9b80f7168a1edfce839e
;;;","2023-03-01 19:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/5
Date: 2023-03-02 03:50:59 +0000;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Assertion in NativeGSSContext constructor,JDK-8285431,5073270,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-04-21 22:46,2022-04-27 23:28,2023-10-01 09:56,2022-04-23 07:32,,,,,,,,,,,,19,security-libs,,0,noreg-cleanup,noreg-trivial,tencent-interest,,,,,,,,,,,,,,,,,,"In the NativeGSSContext constructor for imported context, the assert is use on the object field, instead of the input parameters.  As the NativeGSSContext object does not exist yet, this looks like an obvious issue.

    NativeGSSContext(long pCtxt, GSSLibStub stub) throws GSSException {
-       assert(pContext != 0);
+       assert(pCtxt != 0);
        pContext = pCtxt;
        ...


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wu7f:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-04-21 23:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8355
Date: 2022-04-22 06:26:01 +0000;;;","2022-04-23 07:32;dukebot;Changeset: e9d604a3
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-04-23 14:28:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e9d604a3e5dcd26eed21eda4b5251a07dafcb92a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[LOOM] Some nsk/jdi tests fail due to needing too many virtual threads,JDK-8285416,5073253,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-04-21 17:51,2023-01-11 23:02,2023-10-01 09:56,2023-01-06 10:55,repo-loom,,,,,,,,,,,21,core-svc,,0,loom,noreg-self,problemlist,wrapper,,,,,,,,,,,,,,,,,"These 2 tests try to create 10 vthreads and have them all block on a synchronized method call, but on some hosts there are not enough carrier threads to support pinning all 10 vthreads (by default there is 1 per core), so the test deadlocks. -Djdk.defaultScheduler.parallelism=<n> could be used with the debugee to ensure there are enough carrier threads.

vmTestbase/nsk/jdi/EventRequestManager/stepRequests/stepreq002/TestDescription.java
vmTestbase/nsk/jdi/EventRequestManager/deleteEventRequests/delevtreqs002/TestDescription.java

Not this is basically the same issue as we see with JDK-8282383, but those tests fail when there are even fewer cores.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282383,,,,,,,JDK-8291429,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wu3n:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-10-06 09:46;cjplummer;The fix for JDK-8291429 can be used to fix this issue. ;;;","2022-12-19 18:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11735
Date: 2022-12-20 02:04:01 +0000;;;","2023-01-06 10:54;dukebot;Changeset: d6e9f015
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-01-06 18:49:11 +0000
URL:       https://git.openjdk.org/jdk/commit/d6e9f01584ef84d6390c356fd3b342d9d79899ab
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
add test and check for negative argument to HashMap::newHashMap et al,JDK-8285405,5073240,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,smarks,smarks,2022-04-21 15:35,2022-08-17 17:54,2023-10-01 09:56,2022-08-10 19:34,20,,,,,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"HashMap::newHashMap and related methods, added by JDK-8186958, specify that a negative argument will throw IllegalArgumentException. This occurs today, because a negative argument will be passed through calculateHashMapCapacity and then to a constructor, which will throw IAE. However, it seems unwise to rely on calculateHashMapCapacity always to provide a negative result if given a negative argument. (Indeed, some of the alternative implementations of this method returned a positive result given a negative argument.)

Thus it seems prudent to add a test that ensures that the new HashMap-related static factory methods always throw IAE when given a negative argument, and further, checks should be added in the method implementations to break the reliance on this specific behavior of calculateHashMapCapacity.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8186958,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wu0r:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2022-06-06 00:04;jpai;While working on the tests for this change, I encountered a OOM error with this new WeakHashMap.newWeakHashMap(int) API. I think that needs a discussion, for which I have created a thread in the core-libs-dev mailing list https://mail.openjdk.java.net/pipermail/core-libs-dev/2022-June/091137.html;;;","2022-06-07 23:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9036
Date: 2022-06-06 06:57:23 +0000;;;","2022-08-09 02:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9806
Date: 2022-08-09 09:36:28 +0000;;;","2022-08-10 19:34;dukebot;Changeset: 4b03e135
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-08-11 02:17:01 +0000
URL:       https://git.openjdk.org/jdk/commit/4b03e135e157cb6cc9ba5eebf4a1f1b6e9143f48
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RSA signature verification should reject non-DER OCTET STRING,JDK-8285404,5073238,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2022-04-21 15:01,2022-05-06 11:40,2023-10-01 09:56,2022-04-26 13:49,,,,,,,,,,,,19,security-libs,,0,noreg-other,,,,,,,,,,,,,,,,,,,,"RFC 8017 8.2.2 Step 4 requires encoding the digest and then comparing it with the decrypted copy. The current implementation decodes the decrypted copy and compares the content with the digest. We should follow the RFC.

*Update*: We think it's possible that there might be signers omitting the NULL params in the digest algorithm identifier. The check is relaxed to only requiring the digest value be DER encoded.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wu0b:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-04-22 10:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8365
Date: 2022-04-22 17:10:58 +0000;;;","2022-04-26 13:49;dukebot;Changeset: 14e7d911
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2022-04-26 20:47:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/14e7d911997d33eba2893991fa0e2f507aa977f8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JNI exception pending in awt_GraphicsEnv.c:1432,JDK-8285399,5073228,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,shadowbug,shadowbug,2022-04-21 13:08,2023-01-02 03:49,2023-10-01 09:56,2022-05-21 09:06,19,,,,,,,,,,,19,client-libs,,0,bugdb_34096726,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,parfait,sn_117,sn_118,,,,,,,,,,,,,JNI exception pending in awt_GraphicsEnv.c:1432,,,,,,,,,,JDK-8299456,JDK-8296903,JDK-8299363,JDK-8296327,JDK-8296253,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284023,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,"0|i2wty3:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-04-26 12:55;prr;This was introduced by the recent fix for
8284023: java.sun.awt.X11GraphicsDevice.getDoubleBufferVisuals() leaks XdbeScreenVisualInfo

The code in question is in unix/native/libawt_xawt/awt/awt_GraphicsEnv.c
in the native method Java_sun_awt_X11GraphicsDevice_getDoubleBufferVisuals(


    AWT_FLUSH_UNLOCK(); // << Exception *may* be thrown here
    for (i = 0; i < visScreenInfo->count; i++) {
        XdbeVisualInfo* visInfo = visScreenInfo->visinfo;
        (*env)->CallVoidMethod(env, this, midAddVisual, (visInfo[i]).visual); // << But why no complaint here
        if ((*env)->ExceptionCheck(env)) {
            break;
        }
    }
    AWT_LOCK();                   // ADDED
    XdbeFreeVisualInfo(visScreenInfo); // ADDED
    AWT_UNLOCK();  // ADDED
}

The last 3 lines were added to fix a leak.

AWT_FLUSH_UNLOCK() re-throws any exception it found pending
AWT_LOCK() calls (*env)->CallStaticVoidMethod(env, tkClass, awtLockMID)
and the tooling flags that this is being called whilst there may be an exception pending.

I do not understand why the tooling did not already complain that the pre-existing CallVoidMethod
has the same issue.

I think the intended design was that AWT_UNLOCK and AWT_UNLOCK_FLUSH are
used right before a return to Java code from the JNI method so you want to make
sure Java sees the exception. That's been lost in the mists of time and so although
mostly true, I don't think it is universally true and certainly isn't here.

Since we are doing up-calls in a loop I think it would be unsafe - to keep the lock
so it does need to be released, which means we need to add logic to handle
pending exceptions in more places.

And AWT_LOCK makes an up-call and clears any exceptions after the up-call but
doesn't check for ones before, since I think it was expected to be called at the start of
a native method when that was not possible.

A class of such problems could be solved by doing that - and should resolve this complaint.
Although I think we need a check inside that loop too even though there is no complaint.
;;;","2022-05-01 14:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8493
Date: 2022-05-01 21:25:27 +0000;;;","2022-05-21 09:06;dukebot;Changeset: c156bcc5
Author:    Phil Race <prr@openjdk.org>
Date:      2022-05-21 16:05:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c156bcc599534ae989bc9cbd001e7c150da8096c
;;;","2022-12-22 05:57;goetz;
Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Low risk, simple change to java desktop.
We backported the change causing this a while ago.
Clean backport. SAP nightly testing passed.;;;","2022-12-22 06:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/972
Date: 2022-12-22 14:21:42 +0000;;;","2022-12-31 09:09;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
Low risk, simple change to java desktop. 
Clean backport.
SAP nighlty testing passed.;;;","2022-12-31 09:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1624
Date: 2022-12-31 17:11:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JNI exception pending in CUPSfuncs.c:250,JDK-8285397,5073226,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,shadowbug,shadowbug,2022-04-21 12:28,2022-07-08 12:33,2023-10-01 09:56,2022-05-18 10:14,18,19,,,,,,,,,,19,client-libs,,0,bugdb_34096618,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-hard,parfait,regression,regression_8181571,sn_117,sn_118,,,,,,,,,,JNI exception pending in CUPSfuncs.c:250,,,,,,,,,,JDK-8287528,JDK-8287322,JDK-8288491,JDK-8290032,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8181571,,,,,,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,"0|i2wtxn:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-04-22 10:36;prr;The complaint here is about this code below added in  the recent fix for
8181571: printing to CUPS fails on mac sandbox app

  for (i = 0; i < num_dests; i++) {
            utf_str = JNU_NewStringPlatform(env, dests[i].name);
            if (utf_str == NULL) {
                for (j = i - 1; j >= 0; j--) {
                    utf_str = (*env)->GetObjectArrayElement(env, nameArray, j)
                    (*env)->SetObjectArrayElement(env, nameArray, j, NULL);
                    (*env)->DeleteLocalRef(env, utf_str);
                    utf_str = NULL;
                }

Somehow the tool being used has knowledge of what JNU_NewStringPlatform() does and that it might throw an exception.
Given the complexity of that function and the number of code paths it is difficult to say otherwise, and something like OOME 
but the way the application knows it fails is the null return. The code then attempts to clean up (in the partially shown loop above)
before returning. This is all to deal with a very hyopthetical situation.

I think the simplest thing to do here is to clear any pending exception as in
            utf_str = JNU_NewStringPlatform(env, dests[i].name);
            if (utf_str == NULL) {
                (*env)->ExceptionClear(env);  // << ADD THIS LINE

But GetObjectArrayElement and SetObjectArrayElement can also throw exceptions .. although it would require a programming error to cause it. 
Most code in the JDK doesn't check for pending exceptions after calling these so probably we can skip that.
Or just keep throwing ExceptionClear() calls in there to keep the tools happy .. 
;;;","2022-05-01 12:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8491
Date: 2022-05-01 19:31:01 +0000;;;","2022-05-18 10:13;dukebot;Changeset: a03438cb
Author:    Phil Race <prr@openjdk.org>
Date:      2022-05-18 17:12:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a03438cb1b915c89739fc974e5b84adc38bd14bf
;;;","2022-05-19 23:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/409
Date: 2022-05-20 06:41:33 +0000;;;","2022-05-20 05:40;alexsch;Fix request [17u] 

The fix is requested to be backported with JDK-8181571.;;;","2022-05-23 11:38;clanger;[~alexsch], I think JDK-8181571 needs the jdk17u-fix-request label as well?;;;","2022-05-23 11:56;alexsch;Actually I had added the jdk17u-fix-request  label to JDK-8181571 but it was removed after that.
May be it was because the dependent pull request for JDK-8285397 had not been created yet.
Actually I do not know should the JDK-8181571 have the fix request label as well or not.;;;","2022-05-23 23:09;alexsch;I have added  jdk17u-fix-request label to JDK-8181571 one more time.;;;","2022-05-23 23:49;clanger;Yes the label needed to be added back to JDK-8181571 after the creation of the dependent PR. I see that Goetz had mentioned this in his comment on the PR: https://github.com/openjdk/jdk17u-dev/pull/405#issuecomment-1131695774. Both issues are approved now.;;;","2022-05-25 06:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1109
Date: 2022-05-25 13:42:20 +0000;;;","2022-05-25 07:51;alexsch;Fix request [11u]

The fix is backported together with JDK-8181571. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[JVMCI] [11u] Partial backport of JDK-8220623: InstalledCode,JDK-8285395,5073224,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-04-21 10:33,2022-05-04 01:25,2023-10-01 09:56,2022-04-25 08:16,11.0.15,,,,,,,,,,,11.0.16,hotspot,,0,17-na,18-na,19-na,jdk11u-fix-request,jdk11u-fix-yes,jvmci,sustaining,,,,,,,,,,,,,," JDK-8220623 available in JDK 13 and better includes an update to InstalledCode class making getAddress() and getEntryPoint() methods no longer final.

In GraalVM those methods are overriden in latest code thus breaking the build using plain OpenJDK 11u as base JDK:

substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/meta/SubstrateInstalledCodeImpl.java:67: error: getAddress() in SubstrateInstalledCodeImpl cannot override getAddress() in InstalledCode
    public long getAddress() {
                ^
  overridden method is final
substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/meta/SubstrateInstalledCodeImpl.java:73: error: getEntryPoint() in SubstrateInstalledCodeImpl cannot override getEntryPoint() in InstalledCode
    public long getEntryPoint() {
                ^
  overridden method is final
2 errors

As backporting all of JDK-8220623 is too risky for a stable JDK release we should consider only a partial backport including changes to InstalledCode.java only which is a lot less risky.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8220623,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,"0|i2wtx7:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-21 10:35;sgehwolf;This is breaking the JDK 11-based build of Mandrel in the upcoming 22.2 GraalVM release. See:
https://github.com/graalvm/mandrel/issues/373;;;","2022-04-21 10:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1038
Date: 2022-04-21 17:45:16 +0000;;;","2022-04-22 02:43;sgehwolf;Fix Request (OpenJDK 11u):

Please approve this partial, low-risk, backport in one file in the JVMCI code. The change aligns the code in InstalledCode to the JDK 13+ code line making those two methods no longer final. That's it. The patch has been reviewed by Andrew Dinn and is local to JVMCI. Tested with jvmci tests which pass. Also tested a build with latest graalvm master which succeeds to build again with plain OpenJDK 11u.;;;","2022-04-25 06:23;goetz;An [11u] in the bug title would be helpful.  Can you still squeeze this in?  The JBS issue title is editable.
Thanks, Goetz.;;;","2022-04-25 08:12;sgehwolf;OK. Added the [11u] into the synopsis.;;;","2022-04-25 08:15;dukebot;Changeset: d9be932a
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-04-25 15:13:40 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/d9be932a45b8a6e22ab951bbb2586544b93a738d
;;;","2022-05-04 01:14;dukebot;Changeset: d9be932a
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-04-25 15:13:40 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/d9be932a45b8a6e22ab951bbb2586544b93a738d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compiler blackholes can be eliminated due to stale ciMethod::intrinsic_id(),JDK-8285394,5073223,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2022-04-21 09:50,2022-05-05 11:44,2023-10-01 09:56,2022-04-22 10:13,17,18,19,,,,,,,,,19,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,oracle-triage-11,oracle-triage-19,redhat-interest,,,,,,,,,,,,"This is seen in some tests: if blackhole method is deemed hot for inlining, then at least C2 would inline it without looking back at its intrinsic status. Which silently breaks blackholes.

The cause is that there are *two* places where intrinsic ID is recorded. Current blackhole code only writes down blackhole intrinsic ID in `Method::intrinsic_id()`, but we should also set it in `ciMethod::intrinsic_id()`, which is used from C2 inlining code. `ciMethod` is normally populated from `Method::intrinsic_id()`, but it happens too early, before setting up blackhole intrinsic.",,,,,,,,,,JDK-8286168,JDK-8286137,JDK-8286135,JDK-8286242,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8259316,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wtwz:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-21 10:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8344
Date: 2022-04-21 17:02:27 +0000;;;","2022-04-22 01:22;rcastanedalo;ILW = miscompilation of benchmarking support functionality; affects benchmarking code; disable inlining of affected methods = MML = P4;;;","2022-04-22 10:13;dukebot;Changeset: ce8db2c4
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2022-04-22 17:11:34 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ce8db2c40378de01ce35ca37ec315af47974d6d6
;;;","2022-05-02 03:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/116
Date: 2022-05-02 10:13:10 +0000;;;","2022-05-02 03:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/377
Date: 2022-05-02 10:26:12 +0000;;;","2022-05-02 23:38;shade;Fix Request (17u, 18u)

Fixes the Blackhole - inliner interactions. Patches does not apply cleanly due to minor test differences. RFRs acked by kvn. ;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EdDSA trimming zeros,JDK-8285389,5073217,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,ascarpino,ascarpino,ascarpino,2022-04-21 09:11,2023-05-19 02:16,2023-10-01 09:56,2022-04-25 08:33,17,18,19,,,,,,,,,19,security-libs,,0,amazon-interest,noreg-sqe,,,,,,,,,,,,,,,,,,,ed25519 and ed448 internally will trim extra zeros off the end of the signature before processing.  This can result in some verify testing failures which are strict about the signature length passed into the operation.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8237218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wtvn:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,Verified,,"2022-04-22 14:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8372
Date: 2022-04-22 21:04:58 +0000;;;","2022-04-25 08:33;dukebot;Changeset: 414918d9
Author:    Anthony Scarpino <ascarpino@openjdk.org>
Date:      2022-04-25 15:31:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/414918d9113b447c9ae774cdfd087f1636b8e5a0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/util/HashMap/WhiteBoxResizeTest.java fails in tier7 after JDK-8186958,JDK-8285386,5073211,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,smarks,dcubed,dcubed,2022-04-21 07:43,2023-07-06 05:39,2023-10-01 09:56,2022-04-21 15:30,19,,,,,,,,,,,19,core-libs,,0,noreg-self,tier7,tier8,ursqe-triaged,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

java/util/HashMap/WhiteBoxResizeTest.java

Here's a snippet from the linux-x64-debug log file:

#section:testng
----------messages:(6/226)----------
command: testng WhiteBoxResizeTest
reason: User specified action: run testng WhiteBoxResizeTest 
Mode: agentvm
Agent id: 10
Additional opens to unnamed modules from @modules: java.base/java.util
elapsed time (seconds): 23.708
----------configuration:(15/1660)----------
Boot Layer
  class path: /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar 
  patch:      java.base /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14419/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/93d42b3f-c74b-4e29-acb7-1247cfd3a139/runs/fa4c9650-2c8f-4f25-b7a6-c63289b2cc25/testoutput/test-support/jtreg_open_test_jdk_jdk_util/patches/java.base

Test Layer
  add opens:  java.base/java.util ALL-UNNAMED
  class path: /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14419/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/93d42b3f-c74b-4e29-acb7-1247cfd3a139/runs/fa4c9650-2c8f-4f25-b7a6-c63289b2cc25/testoutput/test-support/jtreg_open_test_jdk_jdk_util/classes/1/java/util/HashMap/WhiteBoxResizeTest.d 
              /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+19-1259/src.full/open/test/jdk/java/util/HashMap 

----------rerun:(31/5129)*----------

<snip>

----------System.out:(738/93459)----------
test WhiteBoxResizeTest.defaultCapacity(WhiteBoxResizeTest$$Lambda$518/0x00000000802582c0@4c2e2ef3): success
test WhiteBoxResizeTest.defaultCapacity(WhiteBoxResizeTest$$Lambda$519/0x00000000802584d8@4345e2db): success
test WhiteBoxResizeTest.defaultCapacity(WhiteBoxResizeTest$$Lambda$520/0x00000000802586f0@3679b336): success

<snip>

test WhiteBoxResizeTest.populatedCapacity(""fwm1pa"", 50331648, 67108864, WhiteBoxResizeTest$$Lambda$581/0x0000000080261798@3ff42ee9, WhiteBoxResizeTest$$Lambda$582/0x00000000802619b0@6a6d26fe): success
test WhiteBoxResizeTest.populatedCapacity(""fwm2pa"", 50331648, 67108864, WhiteBoxResizeTest$$Lambda$583/0x0000000080261be0@57b94036, WhiteBoxResizeTest$$Lambda$584/0x0000000080261df8@49a4af4e): success
test WhiteBoxResizeTest.populatedCapacity(""fhmcpy"", 50331649, 134217728, WhiteBoxResizeTest$$Lambda$563/0x000000008025ef18@1307c1d3, WhiteBoxResizeTest$$Lambda$564/0x000000008025f138@68571a2c): failure
java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:710)
	at java.base/java.util.HashMap.putVal(HashMap.java:635)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:522)
	at java.base/java.util.HashMap.<init>(HashMap.java:492)
	at WhiteBoxResizeTest.lambda$genFakePopulatedCapacityCases$51(WhiteBoxResizeTest.java:272)
	at WhiteBoxResizeTest$$Lambda$563/0x000000008025ef18.get(Unknown Source)
	at WhiteBoxResizeTest.populatedCapacity(WhiteBoxResizeTest.java:318)
	at java.base/java.lang.invoke.LambdaForm$DMH/0x0000000080264000.invokeVirtual(LambdaForm$DMH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x0000000080267400.invoke(LambdaForm$MH)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:158)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at org.testng.TestRunner$$Lambda$125/0x000000008012a228.accept(Unknown Source)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
test WhiteBoxResizeTest.populatedCapacity(""fhm0pa"", 50331649, 134217728, WhiteBoxResizeTest$$Lambda$565/0x000000008025f360@47533a93, WhiteBoxResizeTest$$Lambda$566/0x000000008025f578@19bb0ffa): failure
java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:710)
	at java.base/java.util.HashMap.putVal(HashMap.java:635)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:522)
	at java.base/java.util.HashMap.putAll(HashMap.java:791)
	at WhiteBoxResizeTest.lambda$genFakePopulatedCapacityCases$54(WhiteBoxResizeTest.java:273)
	at WhiteBoxResizeTest$$Lambda$566/0x000000008025f578.accept(Unknown Source)
	at WhiteBoxResizeTest.populatedCapacity(WhiteBoxResizeTest.java:319)
	at java.base/java.lang.invoke.LambdaForm$DMH/0x0000000080264000.invokeVirtual(LambdaForm$DMH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x0000000080267400.invoke(LambdaForm$MH)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:158)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at org.testng.TestRunner$$Lambda$125/0x000000008012a228.accept(Unknown Source)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
test WhiteBoxResizeTest.populatedCapacity(""fhm1pa"", 50331649, 134217728, WhiteBoxResizeTest$$Lambda$567/0x000000008025f7a8@338422a1, WhiteBoxResizeTest$$Lambda$568/0x000000008025f9c0@72813ff4): failure
java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:710)
	at java.base/java.util.HashMap.putVal(HashMap.java:635)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:522)
	at java.base/java.util.HashMap.putAll(HashMap.java:791)
	at WhiteBoxResizeTest.lambda$genFakePopulatedCapacityCases$56(WhiteBoxResizeTest.java:274)
	at WhiteBoxResizeTest$$Lambda$568/0x000000008025f9c0.accept(Unknown Source)
	at WhiteBoxResizeTest.populatedCapacity(WhiteBoxResizeTest.java:319)
	at java.base/java.lang.invoke.LambdaForm$DMH/0x0000000080264000.invokeVirtual(LambdaForm$DMH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x0000000080267400.invoke(LambdaForm$MH)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:158)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at org.testng.TestRunner$$Lambda$125/0x000000008012a228.accept(Unknown Source)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
test WhiteBoxResizeTest.populatedCapacity(""fhm2pa"", 50331649, 134217728, WhiteBoxResizeTest$$Lambda$569/0x000000008025fbf0@4594cf9b, WhiteBoxResizeTest$$Lambda$570/0x0000000080260000@3e113642): failure
java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:710)
	at java.base/java.util.HashMap.putVal(HashMap.java:635)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:522)
	at java.base/java.util.HashMap.putAll(HashMap.java:791)
	at WhiteBoxResizeTest.lambda$genFakePopulatedCapacityCases$58(WhiteBoxResizeTest.java:275)
	at WhiteBoxResizeTest$$Lambda$570/0x0000000080260000.accept(Unknown Source)
	at WhiteBoxResizeTest.populatedCapacity(WhiteBoxResizeTest.java:319)
	at java.base/java.lang.invoke.LambdaForm$DMH/0x0000000080264000.invokeVirtual(LambdaForm$DMH)
	at java.base/java.lang.invoke.LambdaForm$MH/0x0000000080267400.invoke(LambdaForm$MH)
	at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:158)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at org.testng.TestRunner$$Lambda$125/0x000000008012a228.accept(Unknown Source)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
test WhiteBoxResizeTest.populatedCapacity(""flmcpy"", 50331649, 134217728, WhiteBoxResizeTest$$Lambda$571/0x0000000080260230@1ccdab06, WhiteBoxResizeTest$$Lambda$572/0x0000000080260450@43ac325e): failure
java.lang.OutOfMemoryError: Java heap space
test WhiteBoxResizeTest.populatedCapacity(""flm0pa"", 50331649, 134217728, WhiteBoxResizeTest$$Lambda$573/0x0000000080260678@595e11b2, WhiteBoxResizeTest$$Lambda$574/0x0000000080260890@6e6eb578): failure
java.lang.OutOfMemoryError: Java heap space
test WhiteBoxResizeTest.populatedCapacity(""flm1pa"", 50331649, 134217728, WhiteBoxResizeTest$$Lambda$575/0x0000000080260ac0@52dae466, WhiteBoxResizeTest$$Lambda$576/0x0000000080260cd8@300e2d23): failure
java.lang.OutOfMemoryError: Java heap space
test WhiteBoxResizeTest.populatedCapacity(""flm2pa"", 50331649, 134217728, WhiteBoxResizeTest$$Lambda$577/0x0000000080260f08@7f4eca47, WhiteBoxResizeTest$$Lambda$578/0x0000000080261120@7ab2e81c): failure
java.lang.OutOfMemoryError: Java heap space
test WhiteBoxResizeTest.populatedCapacity(""fwmcpy"", 50331649, 134217728, WhiteBoxResizeTest$$Lambda$579/0x0000000080261350@1432d8e2, WhiteBoxResizeTest$$Lambda$580/0x0000000080261570@571f42a): failure
java.lang.OutOfMemoryError: Java heap space
test WhiteBoxResizeTest.populatedCapacity(""fwm1pa"", 50331649, 134217728, WhiteBoxResizeTest$$Lambda$581/0x0000000080261798@7038cd61, WhiteBoxResizeTest$$Lambda$582/0x00000000802619b0@6e98b86f): failure
java.lang.OutOfMemoryError: Java heap space
test WhiteBoxResizeTest.populatedCapacity(""fwm2pa"", 50331649, 134217728, WhiteBoxResizeTest$$Lambda$583/0x0000000080261be0@484aa866, WhiteBoxResizeTest$$Lambda$584/0x0000000080261df8@7e2f27cb): failure
java.lang.OutOfMemoryError: Java heap space
test WhiteBoxResizeTest.requestedCapacity(""rhm1"", 2, WhiteBoxResizeTest$$Lambda$585/0x00000000802627c8@5dae412f): success
test WhiteBoxResizeTest.requestedCapacity(""rhm2"", 2, WhiteBoxResizeTest$$Lambda$586/0x00000000802629e0@7fd9ab6a): success
test WhiteBoxResizeTest.requestedCapacity(""rlm1"", 2, WhiteBoxResizeTest$$Lambda$587/0x0000000080262bf8@6186dc4b): success

<snip>

test WhiteBoxResizeTest.tableSizeFor(1073741824, 1073741824): success
test WhiteBoxResizeTest.tableSizeFor(1073741825, 1073741824): success
test WhiteBoxResizeTest.tableSizeFor(2147483647, 1073741824): success

===============================================
java/util/HashMap/WhiteBoxResizeTest.java
Total tests run: 590, Passes: 576, Failures: 14, Skips: 0
===============================================

----------System.err:(10/528)----------
java.lang.Exception: failures: 14
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: failures: 14


test result: Failed. Execution failed: `main' threw exception: java.lang.Exception: failures: 14


The fix for the following bug:

JDK-8186958 Need method to create pre-sized HashMap

is included in jdk-19+19-1259-tier7 and it also modified:

java/util/HashMap/WhiteBoxResizeTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8186958,,,,,,,JDK-8290828,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,windows,,,,,"0|i2wtub:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2022-04-21 07:44;dcubed;Starting this bug as a P2 since this is a regression.;;;","2022-04-21 09:09;smarks;Not a product regression. One set of test cases consumes more memory than earlier sets of test cases. The failing tasks are run with -XX:-UseCompressedOops so pointers are 64 bits which increases the size of things -- in particular Object[], which are used internally here -- so that increases memory pressure.

If we can configure more memory for the test that would be good, or exclude the test runner configurations that don't have enough memory. I'd prefer not to remove those test cases but we could do that if there isn't a good alternative. Please advise.;;;","2022-04-21 12:14;smarks;Some internal discussion reveals that the default heap size for running tests is 768 MB. (Tests are run with -Xmx768m.) The test allocates a HashMap with capacity (array length) of 134217728. This consumes about 536MB with compressed OOPS (4 bytes per array element), but 1072MB without compressed OOPS (8 bytes per array element). That explains the failures in the configurations where compressed OOPS is disabled.

I'll change the test to require 2GB of heap (-Xmx2g) which should accommodate the array allocation, and which should run easily on all our test machine configurations.;;;","2022-04-21 15:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8352
Date: 2022-04-21 22:08:00 +0000;;;","2022-04-21 15:30;dukebot;Changeset: 58155a72
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2022-04-21 22:28:14 +0000
URL:       https://git.openjdk.java.net/jdk/commit/58155a723e3ce57ee736b9e0468591e386feceee
;;;","2022-04-22 07:18;dcubed;The fix for this bug is integrated in jdk-19+20-1311.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/jvmti/scenarios/hotswap/HS204/hs204t001/hs204t001.java failed with ""exit code: 96""",JDK-8285383,5073208,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,dcubed,dcubed,2022-04-21 07:14,2022-09-26 09:44,2023-10-01 09:56,2022-09-20 11:21,19,,,,,,,,,,,20,hotspot,,0,intermittent,tier5,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

vmTestbase/nsk/jvmti/scenarios/hotswap/HS204/hs204t001/hs204t001.java

Here's a snippet from the log file:

#section:main
----------messages:(4/431)----------
command: main -agentlib:hs204t001=pathToNewByteCode=./bin,-waittime=5,package=nsk,samples=100,mode=compiled nsk.jvmti.scenarios.hotswap.HS204.hs204t001.hs204t001
reason: User specified action: run main/othervm/native -agentlib:hs204t001=pathToNewByteCode=./bin,-waittime=5,package=nsk,samples=100,mode=compiled nsk.jvmti.scenarios.hotswap.HS204.hs204t001.hs204t001 
Mode: othervm [/othervm specified]
elapsed time (seconds): 0.423
----------configuration:(0/0)----------
----------System.out:(13/408)----------
... timeout.. 10
.. Path ./bin
 Testing started..
# info :: File = ./bin/newclass00/nsk/jvmti/scenarios/hotswap/HS204/hs204t001/hs204t001R.class 
#  info **Agent:: opening file ./bin/newclass00/nsk/jvmti/scenarios/hotswap/HS204/hs204t001/hs204t001R.class 
# info file size= 1120
 File red completely 
hs204t001R
 started running thread..
... Inside doThisThread..
 State..2770
 comming out ..
 index =146720
----------System.err:(0/0)----------
----------rerun:(35/8960)*----------

<snip>

result: Failed. Unexpected exit from test [exit code: 96]

There's no core file or hs_err_pid file in the artifacts. I have
no idea where the ""exit code 96"" came from.

There's another unresolved bug for this test:

JDK-8228404 vmTestbase/nsk/jvmti/scenarios/hotswap/HS204/hs204t001/hs204t001.java crashed with AssertionError",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8289232,JDK-8228404,,,,JDK-8228404,JDK-8289232,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x,,,,,,"0|i2wttn:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-07-11 21:45;sspitsyn;The exit code comes from the following lines:
    74	    public static void main(String[] args) {
    75	        args = nsk.share.jvmti.JVMTITest.commonInit(args);
    76	        System.exit(Consts.JCK_STATUS_BASE + run(args, System.out));  <== returns (95 + 1)
    77	    }
    79	    // redirecting for some of the testing models.
    80	    public static int run(String[] args , PrintStream out) {
    81	        return new hs204t001().runIt(args, out);                                              <== returns 1
    82	    }
    84	    private int runIt(String[] args, PrintStream out) {
   . . .
   113	        return (t1.getIndex() == afterSuspend  ? 0 : 1);                                   <== returns 1 if (t1.getIndex() != afterSuspend)
   114	    }


;;;","2022-08-01 15:47;amenkov;The test does not work as described in the test summary.
It supposed to redefine test class from ClassLoad/ClassFileLoadHook/ClassPrepare/ClassFileLoadHook callbacks and then suspend the thread and do PopFrame, but actually it does a single redefinition from ClassPrepare. Redefinition from ClassLoad never happens, redefinition from ClassFileLoadHook is commented out.
Discussed the scenario with Serguei offline and it looks like the scenario is not good at all.
ClassLoad, ClassPrepare and ClassFileLoadHook events are wrong places to redefine classes.
When we redefine a class and try to redefine it again from ClassLoad we actually cannot redefine it. 2nd (3rd, etc.) redefinition should complete before the 1st one, and 2nd version of the class becomes obsolete immediately.
ClassFileLoadHook can be used to replace class bytes, but it should return new class bytes via parameters instead of calling redefineClasses.
Testing for PopFrame does not add any value. With the scenario all redefinition happen before the test object is created, so this PopFrame has nothing to do with class redefinition.
Class redefinition when some methods of the class are executed is covered by other tests from vmTestbase/nsk/jvmti/scenarios/hotswap
;;;","2022-08-05 11:07;amenkov;[~dholmes] Yes, I believe it's the same. The test works this way from the beginning (i.e. from the time nsk tests were moved to openjdk repo)
;;;","2022-09-16 16:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10318
Date: 2022-09-16 23:24:29 +0000;;;","2022-09-17 08:06;dcubed;[~amenkov] - since you are using this bug to delete the bad test, you should
also close the other unresolved bugs for this test:

    JDK-8228404 vmTestbase/nsk/jvmti/scenarios/hotswap/HS204/hs204t001/hs204t001.java crashed with AssertionError
    JDK-8289232 JVMTI hs204t001/hs204t001.java fails with 'Cannot invoke ""java.util.concurrent.atomic.AtomicBoolean.get()"" because ""nsk.jvmti.scenarios.hotswap.HS204.hs204t001.hs204t001R.run"" is null'

I recommend closing JDK-8228404 and JDK-8289232 as duplicates of
this bug (JDK-8285383) after you get thru the review process and integrate.;;;","2022-09-20 11:21;dukebot;Changeset: 21008cad
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-09-20 18:18:39 +0000
URL:       https://git.openjdk.org/jdk/commit/21008cad46d53a34715037d1ec1ca53a43a549db
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typos in security,JDK-8285380,5073203,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-04-21 06:48,2022-08-24 07:49,2023-10-01 09:56,2022-05-13 08:06,19,,,,,,,,,,,19,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"I ran codespell on modules owned by the security team, and accepted those changes where it indeed discovered real typos.
",,,,,,,,,,JDK-8290365,JDK-8288888,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wtsj:",9223372036854775807,b23,,,,,,,,,Verified,,"2022-04-21 06:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8340
Date: 2022-04-21 13:51:27 +0000;;;","2022-05-13 08:06;dukebot;Changeset: f631c988
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-05-13 15:04:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f631c9884f252a1349b81ee2db2e69af43784802
;;;","2022-06-20 05:46;goetz;Fix request [17u]

I backport this to simplify follow-up backports, e.g. 8286211.
No risk, only a comment change.
Clean backport. SAP nightly testing passed.;;;","2022-06-20 05:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/475
Date: 2022-06-20 12:47:15 +0000;;;","2022-07-05 06:11;goetz;Fix request [11u]

I backport this to simplify follow-up backports, e.g. 8286211.
No risk, only a comment change.
Almost clean backport.
SAP nighlty testing passed.;;;","2022-07-05 06:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1199
Date: 2022-07-05 13:13:56 +0000;;;","2022-08-24 07:49;dboyle;Typos in comments, verified as fixed;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create an automated test for JDK-4702233,JDK-8285373,5073193,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-04-21 05:53,2022-10-31 08:58,2023-10-01 09:56,2022-06-03 14:30,11,17,18,19,8,,,,,,,19,client-libs,,0,accessibility,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,,"Create an automated test for JDK-4702233

Several new AccessibleRole and AccessibleRelation constants are needed in those classes in the java.accessibility package. These new contants codify additions made in the GNOME, Netscape, and UNO (StarOffice) accessibility APIs.
StarOffice 6.1 and GNOME accessibility require new role, state and relation
constants in the javax.accessibility package.  The existing constants are
inadequate for providing accessibility to StarOffice and GNOME applications
as required by Section 508.

Solution
--------
Define new constants in the javax.accessibility package.
AccessibleRelation
AccessibleRoles
AccessibleState
AccessibleAction
AccessibleContext

The test validates the public fields of the above AccessibleConstants.

This review is for migrating tests from a closed test suite to open.",,,,,,,,,,JDK-8294503,JDK-8289877,JDK-8296133,JDK-8292277,JDK-8289809,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287826,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wtqb:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-04-21 23:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8342
Date: 2022-04-21 15:54:02 +0000;;;","2022-06-03 14:30;dukebot;Changeset: 6f526e1b
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2022-06-03 21:27:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6f526e1bc3e0af4189fbb7d3b48d614717f266b0
;;;","2022-09-26 01:35;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport. Requires JDK-8287826 else test don't compile.
Test passes with the follow-up.  SAP nighlty testing passed.;;;","2022-09-26 01:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/729
Date: 2022-09-26 08:40:05 +0000;;;","2022-10-26 15:40;vrudomet;Fix request [11u] 

Clean backport, trivial, low risk - new test.
This backport adds a test, that fails to compile. Second pr will with backport of JDK-8287826 fixes the test.
test fails compilation, but passes during manual run after second backport commit.;;;","2022-10-26 17:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1483
Date: 2022-10-26 23:59:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typo in jdk.charsets,JDK-8285370,5073188,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-04-21 04:30,2022-04-27 23:27,2023-10-01 09:56,2022-04-22 07:05,19,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,Codespell could just find a single typo in the files covered by the i18n alias.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wtp7:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3962510e,,,,,,,,,"2022-04-21 04:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8335
Date: 2022-04-21 11:34:14 +0000;;;","2022-04-22 07:05;dukebot;Changeset: 4e252cf3
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-04-22 14:04:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4e252cf3c4e13e2f7c43ea4ee096473571691a01
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Overhaul doc-comment inheritance,JDK-8285368,5073185,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prappo,prappo,prappo,2022-04-21 04:24,2023-07-12 13:12,2023-10-01 09:56,2023-06-28 05:18,19,,,,,,,,,,,22,tools,,0,javadoc-inheritance,javadoc-spec,,,,,,,,,,,,,,,,,,,"This is an umbrella for a number of issues related to inheritance of doc comments. Those issues are linked to from this issue.

Many of those issues require a spec change [^1]. Those spec changes are so intertwined, that we think that it makes sense to file a single CSR (of this umbrella) to address them all as a single spec change.

** The list of linked issues is live: issues can be added or removed from this list. **

[^1]: https://docs.oracle.com/en/java/javase/18/docs/specs/javadoc/doc-comment-spec.html",,,,,,,,,,JDK-8310165,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287152,,,,,,,,JDK-8287100,,,,,,,JDK-8005622,JDK-6934301,JDK-8002153,JDK-6376959,JDK-8309964,JDK-8296807,JDK-8300517,JDK-8295800,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wtoj:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-05-10 18:16;martin;Thanks for working on javadoc comment inheritance.  It's not easy.

I had many struggles with comment inheritance while working on the spec for the Java Collection Framework.  Too often I ran into various bugs, but also I recognized the limitations of comment inheritance in general - there were many cases where comment inheritance was almost, but only almost, what I wanted, and the result was giving up and resorting to copypasta which you can probably still see in java.util. today.

I recall musing that java didn't offer multiple inheritance of code (too hard?!), but **did** offer multiple inheritance of spec!;;;","2023-06-07 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14357
Date: 2023-06-07 14:19:16 +0000;;;","2023-06-28 05:14;prappo;Changeset: 3e0bbd29
Author: Pavel Rappo <prappo@openjdk.org>
Date: 2023-06-15 17:47:41 +0000
URL: https://git.openjdk.org/jdk/commit/3e0bbd290c534b0f9729c54cd45308d505907797;;;","2023-06-28 05:16;prappo;Fix was pushed while main bug was targeted to 21. Resetting the main bug to fixed in 22 and copying the Robo Duke entry here.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typos in serviceability,JDK-8285366,5073181,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-04-21 04:15,2022-05-20 00:47,2023-10-01 09:56,2022-05-13 08:20,19,,,,,,,,,,,19,core-svc,,0,,,,,,,,,,,,,,,,,,,,,"I ran codespell on modules owned by the serviceability team, and accepted those changes where it indeed discovered real typos. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wtnn:",9223372036854775807,b23,,,,,,,,,,,"2022-04-21 04:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8334
Date: 2022-04-21 11:22:48 +0000;;;","2022-05-13 08:20;dukebot;Changeset: 76caeed4
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-05-13 15:17:22 +0000
URL:       https://git.openjdk.java.net/jdk/commit/76caeed498d868c7923461fb481349c0a2cbd99d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
unify os::pause platform coding,JDK-8285362,5073177,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-04-21 03:27,2022-04-27 23:27,2023-10-01 09:56,2022-04-22 06:44,19,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"The os::pause() coding in the different  os_<platform>.cpp  files is very close, so it should be unified at os.cpp or at least os_posix.cpp .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wtmr:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-21 05:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8338
Date: 2022-04-21 12:30:34 +0000;;;","2022-04-22 06:44;dukebot;Changeset: d8025c95
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-04-22 13:41:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d8025c95cdfe77902c981f4db1fc2a51ca4d6878
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassCastExceptionForInvalidSurface.java has an incorrect copyright header,JDK-8285361,5073176,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-04-21 03:26,2022-04-27 23:27,2023-10-01 09:56,2022-04-21 03:41,,,,,,,,,,,,19,client-libs,,0,noreg-trivial,,,,,,,,,,,,,,,,,,,,"It looks like a recent commit caused the copyright header verification checks to fail:

test/jdk/sun/java2d/ClassCastExceptionForInvalidSurface.java
[2022-04-21T10:22:22,085Z] 1 header format error(s).

A comma is missing after the ""2016, 2022"" text in the copyright header",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277816,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wtmj:",9223372036854775807,b20,,,,,,,,,,,"2022-04-21 03:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8331
Date: 2022-04-21 10:34:42 +0000;;;","2022-04-21 03:41;dukebot;Changeset: 9a905ccc
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-04-21 10:38:40 +0000
URL:       https://git.openjdk.java.net/jdk/commit/9a905ccc5e6411c3b68277b58e7c40b405e33afc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[TestBug] Cleanup a few ignored javafx.controls unit tests,JDK-8285360,5073175,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2022-04-21 03:20,2022-04-26 08:09,2023-10-01 09:56,2022-04-23 04:25,jfx19,,,,,,,,,,,jfx19,javafx,,0,sn_116,test_sprint,testbug,,,,,,,,,,,,,,,,,,"This bug is to cleanup few unit tests that are currently ignored.

Here is the list of targeted unit test classes-
RadioMenuItemTest
PopupControlTest
PaginationTest
DateCellTest
CellTest",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285359,,JDK-8234486,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wtmb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-04-21 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/780
Date: 2022-04-21 11:23:35 +0000;;;","2022-04-23 04:25;dukebot;Changeset: 318204b4
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2022-04-23 11:23:59 +0000
URL:       https://git.openjdk.java.net/jfx/commit/318204b47530e532abf8738693e6eefa2de00543
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Zero build failure with clang due to values not handled in switch,JDK-8285342,5073157,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2022-04-21 02:34,2022-04-27 23:27,2023-10-01 09:56,2022-04-21 16:47,17,19,,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,tencent-interest,,,,,,,,,,,,,,,,,,"```
* For target hotspot_variant-zero_libjvm_objs_bytecodeInterpreter.o:
/jdk/src/hotspot/share/interpreter/zero/bytecodeInterpreter.cpp:2971:13: error: 7 enumeration values not handled in switch: 'T_VOID', 'T_ADDRESS', 'T_NARROWOOP'... [-Werror,-Wswitch]
    switch (istate->method()->result_type()) {
            ^
/jdk/src/hotspot/share/interpreter/zero/bytecodeInterpreter.cpp:2971:13: note: add missing switch cases
    switch (istate->method()->result_type()) {
            ^
/jdk/src/hotspot/share/interpreter/zero/bytecodeInterpreter.cpp:2971:13: error: 7 enumeration values not handled in switch: 'T_VOID', 'T_ADDRESS', 'T_NARROWOOP'... [-Werror,-Wswitch]
    switch (istate->method()->result_type()) {
            ^
/jdk/src/hotspot/share/interpreter/zero/bytecodeInterpreter.cpp:2971:13: note: add missing switch cases
    switch (istate->method()->result_type()) {
            ^
/jdk/src/hotspot/share/interpreter/zero/bytecodeInterpreter.cpp:2971:13: error: 7 enumeration values not handled in switch: 'T_VOID', 'T_ADDRESS', 'T_NARROWOOP'... [-Werror,-Wswitch]
    switch (istate->method()->result_type()) {
            ^
   ... (rest of output omitted)
```

```
* For target hotspot_variant-zero_libjvm_objs_zeroInterpreter_zero.o:
/jdk/src/hotspot/cpu/zero/zeroInterpreter_zero.cpp:615:11: error: 10 enumeration values not handled in switch: 'btos', 'ztos', 'ctos'... [-Werror,-Wswitch]
  switch (entry->flag_state()) {
          ^
/jdk/src/hotspot/cpu/zero/zeroInterpreter_zero.cpp:615:11: note: add missing switch cases
  switch (entry->flag_state()) {
          ^
1 error generated.
```",,,,,,,,,,JDK-8285701,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wtib:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-21 02:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8330
Date: 2022-04-21 09:42:36 +0000;;;","2022-04-21 16:47;dukebot;Changeset: d84b9c54
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-04-21 23:46:59 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d84b9c54893dd33686d49755fca7a4b7f6a681c4
;;;","2022-04-25 07:44;jiefu;Fix request for JDK17u

I'd like to backport this fix to jdk17u to fix zero build failure with clang.
Only zero VM is affected, so the risk is low.
Patch can be applied cleanly.
Thanks.;;;","2022-04-25 07:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/359
Date: 2022-04-25 14:46:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Win: Japanese logical fonts are drawn with wrong size,JDK-8285308,5073123,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,prr,tnakamura,tnakamura,2022-04-21 01:42,2022-06-16 14:59,2023-10-01 09:56,2022-05-19 16:43,18,19,,,,,,,,,,19,client-libs,,0,noreg-hard,regression,regression_8260265,sn_118,,,,,,,,,,,,,,,,,"FULL PRODUCT VERSION :
openjdk version ""18"" 2022-03-22
OpenJDK Runtime Environment (build 18+36-2087)
OpenJDK 64-Bit Server VM (build 18+36-2087, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
AWT Text shows Japanese fonts with wrong size.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Launch the sample program on Japanese Windows.

EXPECTED VERSUS ACTUAL BEHAVIOR :
See the attached images.
errorJPFont.png: Japanese font is drawing with unexpected size.
expected.png: Both English and Japanese fonts are expected.

REPRODUCIBILITY :
This bug can be reproduced always.

ADDITIONAL INFORMATION:
This issue can be related with JEP 400, UTF-8 by Default.
When we use ""-Dfile.encoding=COMAPT"", this issue was gone.

---------- BEGIN SOURCE ----------
import java.awt.*;

public class fonttest {
    public static void main(String[] args) {
        Frame f = new Frame();
        TextField t = new TextField();
        t.setText(""ABC\u3042\u3044ABC"");
        t.setFont(new Font(Font.SERIF, Font.PLAIN, 8));
        f.add(t);
        f.setSize(200,100);
        f.setVisible(true);
    }
}
---------- END SOURCE ---------- ","Windows Server 2012R2 Japanese
Windows 10 Pro 21H2 Japanese",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8187041,,,,,,,,"2022-04-27 00:31;tnakamura;30pointcase.png;https://bugs.openjdk.org/secure/attachment/98715/30pointcase.png","2022-04-25 16:51;tnakamura;Win32Project1.cpp;https://bugs.openjdk.org/secure/attachment/98702/Win32Project1.cpp","2022-04-27 00:33;tnakamura;Win32Project1.cpp_v2;https://bugs.openjdk.org/secure/attachment/98717/Win32Project1.cpp_v2","2022-04-21 01:41;tnakamura;errorJPFont.png;https://bugs.openjdk.org/secure/attachment/98664/errorJPFont.png","2022-04-21 01:41;tnakamura;expected.png;https://bugs.openjdk.org/secure/attachment/98663/expected.png","2022-04-27 01:05;tnakamura;expected30pt.png;https://bugs.openjdk.org/secure/attachment/98718/expected30pt.png","2022-04-27 00:32;tnakamura;fonttest.java_v2;https://bugs.openjdk.org/secure/attachment/98716/fonttest.java_v2","2022-04-25 16:50;tnakamura;nativeappFont.png;https://bugs.openjdk.org/secure/attachment/98701/nativeappFont.png",,,generic,,,,,,,b13,18,,windows,,,,,,"0|i2wtar:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-04-21 04:11;tnakamura;Adding noreg-hard tag since native encoding of the environment was the condition of the issue. It's required the primary language change of Windows.;;;","2022-04-21 17:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8329
Date: 2022-04-21 09:14:14 +0000;;;","2022-04-25 16:52;tnakamura;The bigger fonts are caused by the behavior of RichEdit component. Attached the screen shot of a native application of RichEdit, and its source code.;;;","2022-04-27 00:34;tnakamura;Attached the screen shot and source codes of 30-point case.
- Screen shot: 30pointcase.png
- Java sample: fonttest.java_v2
- C++ sample: Win32Project1.cpp_v2;;;","2022-05-05 06:19;tnakamura;As the request in PR8329, assigning this to Phil.;;;","2022-05-11 11:41;prr;The wrong native encoding means the wrong font was picked up to apply to the text control.
This is fixed by checking for the UTF controls and assigning the right code page as before.;;;","2022-05-11 11:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8662
Date: 2022-05-11 18:25:09 +0000;;;","2022-05-19 16:43;dukebot;Changeset: 40e99a19
Author:    Phil Race <prr@openjdk.org>
Date:      2022-05-19 23:41:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/40e99a19f20dde0916684f93c17c51c7c5de109a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove unused os::available,JDK-8285307,5073121,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-04-21 00:41,2022-04-27 23:27,2023-10-01 09:56,2022-04-21 07:05,19,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"Seems int os::available(int fd, jlong *bytes)  is not used any more and can be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wtab:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-21 01:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8327
Date: 2022-04-21 08:18:04 +0000;;;","2022-04-21 07:05;dukebot;Changeset: f166b5b1
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-04-21 14:02:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/f166b5b13b709922b83680ee550bbbde815b346d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typos in java.desktop,JDK-8285306,5073120,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,ihse,ihse,2022-04-21 00:38,2022-10-31 04:13,2023-10-01 09:56,2022-10-18 10:10,19,,,,,,,,,,,20,client-libs,,0,,,,,,,,,,,,,,,,,,,,,"I ran codespell on the ""src/java.desktop"" directory, and accepted those changes where it indeed discovered real typos. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286759,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wta3:",9223372036854775807,b20,,,,,,,,,,,"2022-04-21 01:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8328
Date: 2022-04-21 08:35:36 +0000;;;","2022-10-18 10:10;dukebot;Changeset: 2a799e5c
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-10-18 17:08:49 +0000
URL:       https://git.openjdk.org/jdk/commit/2a799e5c82395919b807561da4a062e0fe6da31d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create an automated test for JDK-4495286,JDK-8285305,5073119,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-04-21 00:19,2022-10-14 08:58,2023-10-01 09:56,2022-06-03 14:30,11,17,18,19,8,,,,,,,19,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,,,"Create an automated test for JDK-4495286

AccessibleJTable.setAccessibleSelction should select rows/cols when cell selection.
When cell selection is not enabled, there is no way, using
accessibility, to select rows or columns. It seems logical that selecting a cell
using accessibility should have the same effect as clicking on a cell with the
mouse. That is, if row or column selection is enabled, then selecting a cell
should instead cause the row or column to be selected.

The proposed test verifies that the above behavior is fixed. 
",,,,,,,,,,JDK-8289672,JDK-8294505,JDK-8295362,JDK-8289675,JDK-8289704,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wt9v:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-04-21 03:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8333
Date: 2022-04-21 10:51:18 +0000;;;","2022-06-03 14:30;dukebot;Changeset: 25e9901a
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2022-06-03 21:28:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/25e9901aeacd45f8baec6d1e52a6823e7f087fa3
;;;","2022-09-26 01:44;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-09-26 01:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/730
Date: 2022-09-26 08:44:34 +0000;;;","2022-10-12 06:08;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
No risk, only a test change.
Clean backport.
Test passes.  SAP nightly testing passes.;;;","2022-10-12 06:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1452
Date: 2022-10-12 13:11:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: Incorrect register mask in call_native_base,JDK-8285303,5073116,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,fjiang,fjiang,fjiang,2022-04-20 23:32,2023-07-09 19:10,2023-10-01 09:56,2022-04-22 16:50,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-19,,,,,,,,,,,,,,,,,,,,"On behalf of Dingli Zhang (dingli@iscas.ac.cn)

In `MacroAssembler::call_native_base`, t0 and xmethod should be saved as expected:

```
void MacroAssembler::call_native_base(address entry_point, Label *retaddr) {
  Label E, L;
  int32_t offset = 0;
  push_reg(0x80000040, sp);   // push << t0 & xmethod >> to sp
  movptr_with_offset(t0, entry_point, offset);
  jalr(x1, t0, offset);
  if (retaddr != NULL) {
    bind(*retaddr);
  }
  pop_reg(0x80000040, sp);   // pop << t0 & xmethod >> from sp
}
```

Register mask of '0x80000040' operates << t1 & xmethod >> here, which should be '0x80000020' for << t0 & xmethod >>.",,,,,,,,,,JDK-8311698,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,19,,linux,,,,,,"0|i2wt97:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-21 00:38;rcastanedalo;ILW = no known failure; unknown likelihood; no workaround = LLH = P5;;;","2022-04-21 19:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8353
Date: 2022-04-22 02:02:01 +0000;;;","2022-04-22 16:50;dukebot;Changeset: b10833bb
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-04-22 23:48:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b10833bbf3cd33c6e6a4cf2671f587a27c606ebb
;;;","2023-06-19 20:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
C2: assert(!requires_atomic_access) failed: can't ensure atomicity,JDK-8285301,5072719,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,webbuggrp,webbuggrp,2022-04-17 07:45,2022-06-21 11:06,2023-10-01 09:56,2022-04-28 23:16,17,18,19,,,,,,,,,19,hotspot,,0,c2,dcsswa,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-11,oracle-triage-19,reproducer-yes,webbug,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Run arbitrary program with -XX:+AlwaysAtomicAccesses, VM crashes.

Reproduce:
$ java -Xcomp -XX:+UnlockExperimentalVMOptions -XX:+AlwaysAtomicAccesses -version
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jiahx/jdk_source/jdk17u/src/hotspot/share/gc/shared/c2/barrierSetC2.cpp:159), pid=6272, tid=6286
#  assert(!requires_atomic_access) failed: can't ensure atomicity
#
# JRE version: OpenJDK Runtime Environment (17.0.3) (fastdebug build 17.0.3-internal+0-adhoc.jiahx.jdk17u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17.0.3-internal+0-adhoc.jiahx.jdk17u, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x5f4029]  BarrierSetC2::load_at_resolved(C2Access&, Type const*) const+0x139
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
---------------  T H R E A D  ---------------

Current thread (0x00007f267c3b9830):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=6286, stack(0x00007f2608196000,0x00007f2608297000)]


Current CompileTask:
C2:    975  477    b  4       java.lang.Thread::<init> (9 bytes)

Stack: [0x00007f2608196000,0x00007f2608297000],  sp=0x00007f2608292820,  free space=1010k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x5f4029]  BarrierSetC2::load_at_resolved(C2Access&, Type const*) const+0x139
V  [libjvm.so+0xb263f0]  G1BarrierSetC2::load_at_resolved(C2Access&, Type const*) const+0x130
V  [libjvm.so+0x5f625e]  BarrierSetC2::load_at(C2Access&, Type const*) const+0xfe
V  [libjvm.so+0xc79c7b]  GraphKit::access_load(Node*, Type const*, BasicType, unsigned long)+0xeb
V  [libjvm.so+0x10f47af]  LibraryCallKit::inline_native_currentThread()+0x1f
V  [libjvm.so+0x110c204]  LibraryIntrinsic::generate(JVMState*)+0x284
V  [libjvm.so+0xa94c76]  Parse::do_call()+0x4c6
V  [libjvm.so+0x1412f8f]  Parse::do_one_bytecode()+0x2b7f
V  [libjvm.so+0x14014e2]  Parse::do_one_block()+0x392
V  [libjvm.so+0x1402718]  Parse::do_all_blocks()+0x128
V  [libjvm.so+0x140676c]  Parse::Parse(JVMState*, ciMethod*, float)+0xc4c
V  [libjvm.so+0x7a9d9a]  ParseGenerator::generate(JVMState*)+0x8a
V  [libjvm.so+0xa94c76]  Parse::do_call()+0x4c6
V  [libjvm.so+0x1412f8f]  Parse::do_one_bytecode()+0x2b7f
V  [libjvm.so+0x14014e2]  Parse::do_one_block()+0x392
V  [libjvm.so+0x1402718]  Parse::do_all_blocks()+0x128
V  [libjvm.so+0x140676c]  Parse::Parse(JVMState*, ciMethod*, float)+0xc4c
V  [libjvm.so+0x7a9d9a]  ParseGenerator::generate(JVMState*)+0x8a
V  [libjvm.so+0xa94c76]  Parse::do_call()+0x4c6
V  [libjvm.so+0x1412f8f]  Parse::do_one_bytecode()+0x2b7f
V  [libjvm.so+0x14014e2]  Parse::do_one_block()+0x392
V  [libjvm.so+0x1402718]  Parse::do_all_blocks()+0x128
V  [libjvm.so+0x140676c]  Parse::Parse(JVMState*, ciMethod*, float)+0xc4c
V  [libjvm.so+0x7a9d9a]  ParseGenerator::generate(JVMState*)+0x8a
V  [libjvm.so+0x951ff4]  Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)+0x1194
V  [libjvm.so+0x7a70ed]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x12d
V  [libjvm.so+0x95fd8a]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa6a
V  [libjvm.so+0x960858]  CompileBroker::compiler_thread_loop()+0x438
V  [libjvm.so+0x17f2d3f]  JavaThread::thread_main_inner()+0x1df
V  [libjvm.so+0x17f7c18]  Thread::call_run()+0xf8
V  [libjvm.so+0x13beee4]  thread_native_entry(Thread*)+0x104


FREQUENCY : always


",,,,,,,,,,JDK-8286110,JDK-8288876,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8244997,,,,,,,,"2022-04-20 22:59;sswsharm;hs_err_pid4460.log;https://bugs.openjdk.org/secure/attachment/98660/hs_err_pid4460.log","2022-04-20 22:58;sswsharm;replay_pid4460.log;https://bugs.openjdk.org/secure/attachment/98661/replay_pid4460.log",,,,,,,,,generic,,,,,,,b11,16,,generic,,,,,,"0|i2wqsz:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-20 23:02;sswsharm;Issue is reproduced.
 java -Xcomp -XX:+UnlockExperimentalVMOptions -XX:+AlwaysAtomicAccesses -version leads to crash in JDK 17 and 18 fastdebug builds.

OS: Windows 10
JDK 17.0.3: Fail
JDK 18.0.1 : Fail

ILW = assert with non-default flag value; medium; no workaround if non-default flags are really needed = MMH = P3

Moving it to dev team for further analysis.;;;","2022-04-21 00:51;rcastanedalo;Moving issue to runtime team, since it owns the enhancement (JDK-8244997) that introduced the failing assertion. Please feel free to send back to compiler (or gc) if you disagree.;;;","2022-04-21 00:53;rcastanedalo;Note that the issue can also be reproduced in JDK 19 (b18).;;;","2022-04-21 17:30;dholmes;It is definitely a compiler issue even though runtime took point on the other enhancement - Tom Rodriguez provided some of the changes.;;;","2022-04-22 01:12;rcastanedalo;Fair enough, [~coleenp] feel free to unassign and change subcomponent to 'compiler' if you agree.;;;","2022-04-22 05:42;coleenp;Hi Sorry I didn't look at this yesterday.  As David said, I didn't do the compiler part of the change that caused this problem, so I'd like to reassign it back to the compiler group.;;;","2022-04-25 03:20;rcastanedalo;ILW = JVM crash, debug build with experimental option enabled, do not enable the option = HLL = P4;;;","2022-04-26 05:30;thartmann;I think the assert is too strong, require_atomic_access should only affect T_LONG/T_DOUBLE accesses and the one emitted by LibraryCallKit::inline_native_currentThread is T_OBJECT.;;;","2022-04-26 07:11;thartmann;I also hit this:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk2/open/src/hotspot/share/gc/shared/c2/barrierSetC2.cpp:173), pid=584115, tid=584130
#  assert(!requires_atomic_access) failed: not yet supported

Current CompileTask:
C2:   4039 1804   !b  4       java.lang.invoke.DirectMethodHandle::makePreparedLambdaForm (798 bytes)

Stack: [0x00007fdd5983a000,0x00007fdd5993b000],  sp=0x00007fdd59936710,  free space=1009k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x707a14]  BarrierSetC2::load_at_resolved(C2Access&, Type const*) const+0x3a4
V  [libjvm.so+0xcaee8f]  G1BarrierSetC2::load_at_resolved(C2Access&, Type const*) const+0xcf
V  [libjvm.so+0x705e8d]  BarrierSetC2::load_at(C2Access&, Type const*) const+0xed
V  [libjvm.so+0x6561a5]  ArrayCopyNode::load(BarrierSetC2*, PhaseGVN*, Node*&, MergeMemNode*, Node*, TypePtr const*, Type const*, BasicType)+0xb5
V  [libjvm.so+0x65a52f]  ArrayCopyNode::array_copy_forward(PhaseGVN*, bool, Node*&, Node*, TypePtr const*, TypePtr const*, Node*, Node*, Node*, Node*, BasicType, Type const*, int)+0x29f
V  [libjvm.so+0x65dbc5]  ArrayCopyNode::Ideal(PhaseGVN*, bool)+0x1095
V  [libjvm.so+0x16daeb5]  PhaseGVN::transform_no_reclaim(Node*)+0x25
V  [libjvm.so+0x1323213]  LibraryCallKit::inline_array_copyOf(bool)+0x6e3
V  [libjvm.so+0x1341fa2]  LibraryIntrinsic::generate(JVMState*)+0x302
V  [libjvm.so+0xc118a8]  Parse::do_call()+0x378
V  [libjvm.so+0x1694a68]  Parse::do_one_block()+0xa88
V  [libjvm.so+0x1695a27]  Parse::do_all_blocks()+0x137
V  [libjvm.so+0x169a8b6]  Parse::Parse(JVMState*, ciMethod*, float)+0xb96
V  [libjvm.so+0x8c9b60]  ParseGenerator::generate(JVMState*)+0x110
V  [libjvm.so+0xc118a8]  Parse::do_call()+0x378
V  [libjvm.so+0x1694a68]  Parse::do_one_block()+0xa88
V  [libjvm.so+0x1695a27]  Parse::do_all_blocks()+0x137
V  [libjvm.so+0x169a8b6]  Parse::Parse(JVMState*, ciMethod*, float)+0xb96
V  [libjvm.so+0x8c9b60]  ParseGenerator::generate(JVMState*)+0x110
V  [libjvm.so+0xab463a]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x135a
V  [libjvm.so+0x8c75a3]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x683
V  [libjvm.so+0xac4407]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc97
V  [libjvm.so+0xac52e8]  CompileBroker::compiler_thread_loop()+0x728
V  [libjvm.so+0x1969aaa]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x1974dd0]  Thread::call_run()+0x100
V  [libjvm.so+0x164d9e4]  thread_native_entry(Thread*)+0x104



# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/jdk2/open/src/hotspot/share/gc/shared/c2/barrierSetC2.cpp:107), pid=588745, tid=588761
#  assert(!requires_atomic_access) failed: not yet supported

Current CompileTask:
C2:   3818 1804   !b  4       java.lang.invoke.DirectMethodHandle::makePreparedLambdaForm (798 bytes)

Stack: [0x00007f740fbfc000,0x00007f740fcfd000],  sp=0x00007f740fcf8740,  free space=1009k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x707554]  BarrierSetC2::store_at_resolved(C2Access&, C2AccessValue&) const+0x344
V  [libjvm.so+0x705b7d]  BarrierSetC2::store_at(C2Access&, C2AccessValue&) const+0xed
V  [libjvm.so+0x656318]  ArrayCopyNode::store(BarrierSetC2*, PhaseGVN*, Node*&, MergeMemNode*, Node*, TypePtr const*, Node*, Type const*, BasicType)+0xf8
V  [libjvm.so+0x65a553]  ArrayCopyNode::array_copy_forward(PhaseGVN*, bool, Node*&, Node*, TypePtr const*, TypePtr const*, Node*, Node*, Node*, Node*, BasicType, Type const*, int)+0x2c3
V  [libjvm.so+0x65dbc5]  ArrayCopyNode::Ideal(PhaseGVN*, bool)+0x1095
V  [libjvm.so+0x16daeb5]  PhaseGVN::transform_no_reclaim(Node*)+0x25
V  [libjvm.so+0x1323213]  LibraryCallKit::inline_array_copyOf(bool)+0x6e3
V  [libjvm.so+0x1341fa2]  LibraryIntrinsic::generate(JVMState*)+0x302
V  [libjvm.so+0xc118a8]  Parse::do_call()+0x378
V  [libjvm.so+0x1694a68]  Parse::do_one_block()+0xa88
V  [libjvm.so+0x1695a27]  Parse::do_all_blocks()+0x137
V  [libjvm.so+0x169a8b6]  Parse::Parse(JVMState*, ciMethod*, float)+0xb96
V  [libjvm.so+0x8c9b60]  ParseGenerator::generate(JVMState*)+0x110
V  [libjvm.so+0xc118a8]  Parse::do_call()+0x378
V  [libjvm.so+0x1694a68]  Parse::do_one_block()+0xa88
V  [libjvm.so+0x1695a27]  Parse::do_all_blocks()+0x137
V  [libjvm.so+0x169a8b6]  Parse::Parse(JVMState*, ciMethod*, float)+0xb96
V  [libjvm.so+0x8c9b60]  ParseGenerator::generate(JVMState*)+0x110
V  [libjvm.so+0xab463a]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x135a
V  [libjvm.so+0x8c75a3]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x683
V  [libjvm.so+0xac4407]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc97
V  [libjvm.so+0xac52e8]  CompileBroker::compiler_thread_loop()+0x728
V  [libjvm.so+0x1969aaa]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x1974dd0]  Thread::call_run()+0x100
V  [libjvm.so+0x164d9e4]  thread_native_entry(Thread*)+0x104;;;","2022-04-27 03:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8422
Date: 2022-04-27 10:25:36 +0000;;;","2022-04-28 23:16;dukebot;Changeset: 0a4a6403
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-04-29 06:12:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0a4a6403bbdfa7a9f632dbf625435d9aaf04074c
;;;","2022-06-09 03:14;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
A defensive fix for C2 we should take.
I had to do one simple resolve.
Tests pass, unfortunately also without the fix.
SAP nightly testing passed.;;;","2022-06-09 03:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/454
Date: 2022-06-09 10:13:26 +0000;;;","2022-06-21 00:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/156
Date: 2022-06-21 07:20:29 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Need better testing for IdentityHashMap,JDK-8285295,5073108,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smarks,smarks,smarks,2022-04-20 17:38,2022-05-11 23:12,2023-10-01 09:56,2022-05-06 11:44,,,,,,,,,,,,19,core-libs,,1,,,,,,,,,,,,,,,,,,,,,"Unlike for other collections, there don't seem to be any fundamental tests for IdentityHashMap. Most basically, there should be tests to ensure that membership in the map is identity-based and not value-based.

For example, consider what should happen if the following (erroneous!) patch is applied to IdentityHashMap.

--- a/src/java.base/share/classes/java/util/IdentityHashMap.java
+++ b/src/java.base/share/classes/java/util/IdentityHashMap.java
@@ -296,7 +296,7 @@ public class IdentityHashMap<K,V>
      * Returns index for Object x.
      */
     private static int hash(Object x, int length) {
-        int h = System.identityHashCode(x);
+        int h = x.hashCode();
         // Multiply by -254 to use the hash LSB and to ensure index is even
         return ((h << 1) - (h << 8)) & (length - 1);
     }
@@ -333,10 +333,10 @@ public class IdentityHashMap<K,V>
         int i = hash(k, len);
         while (true) {
             Object item = tab[i];
-            if (item == k)
-                return (V) tab[i + 1];
             if (item == null)
                 return null;
+            if (item.equals(k))
+                return (V) tab[i + 1];
             i = nextKeyIndex(i, len);
         }
     }

This patch essentially changes the get() method to look up by value instead of by identity. Normally IDHM works like this:

    jshell> record Box(int i) {}
    jshell> var box1 = new Box(0)
    box1 ==> Box[i=0]
    jshell> var box2 = new Box(0)
    box2 ==> Box[i=0]
    jshell> box1 == box2
    $79 ==> false
    jshell> box1.equals(box2)
    $80 ==> true
    jshell> var map = new IdentityHashMap<Box, String>()
    map ==> {}
    jshell> map.put(box1, ""a"")
    jshell> map.put(box2, ""b"")
    jshell> map
    map ==> {Box[i=0]=b, Box[i=0]=a}
    jshell> map.get(box1)
    $86 ==> ""a""
    jshell> map.get(box2)
    $87 ==> ""b""
    jshell> map.get(new Box(0))
    $88 ==> null
    
However, with this patch in place, the behavior is as follows:

    jshell> record Box(int i) {}
    jshell> var box1 = new Box(0)
    box1 ==> Box[i=0]
    jshell> var box2 = new Box(0)
    box2 ==> Box[i=0]
    jshell> box1 == box2
    $4 ==> false
    jshell> box1.equals(box2)
    $5 ==> true
    jshell> var map = new IdentityHashMap<Box, String>()
    map ==> {}
    jshell> map.put(box1, ""a"")
    jshell> map.put(box2, ""b"")
    jshell> map
    map ==> {Box[i=0]=a, Box[i=0]=b}
    jshell> map.get(box1)
    $10 ==> ""a""
    jshell> map.get(box2)
    $11 ==> ""a""
    jshell> map.get(new Box(0))
    $12 ==> ""a""

This is of course completely incorrect. However, with this patch applied, tiers 1, 2, and 3 of the regression suite don't report any failures at all! Failures do occur in a variety of java/beans/XMLEncoder tests (tier 4) because they apparently do rely on the identity semantics of IdentityHashMap.

Some fundamental tests for IdentityHashMap should be added to test/jdk/java/util/IdentityHashMap, which will put them into the jdk_collections_core test group, which is in tier 1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8178355,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wt7f:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2022-04-21 20:38;smarks;Draft PR here: https://github.com/openjdk/jdk/pull/8354;;;","2022-04-26 20:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8354
Date: 2022-04-22 03:37:27 +0000;;;","2022-05-06 11:44;dukebot;Changeset: 5a1d8f7e
Author:    Stuart Marks <smarks@openjdk.org>
Date:      2022-05-06 18:41:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5a1d8f7e5358d823e9bdeab8056b1de2b050f939
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArgumentsTest.set_numeric_flag_double_vm fails on some locales (again),JDK-8285279,5073086,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,iklam,iklam,iklam,2022-04-20 11:14,2022-04-27 23:31,2023-10-01 09:56,2022-04-26 22:01,19,,,,,,,,,,,19,hotspot,,0,cmd,,,,,,,,,,,,,,,,,,,,"The previois fix (JDK-8284181) is incomplete

$ LC_NUMERIC=en_DK.UTF-8 ./hotspot/variant-server/libjvm/gtest/gtestLauncher -jdk:./images/jdk/ --gtest_filter=ArgumentsTest.set_numeric_flag_double_vm

Note: Google Test filter = ArgumentsTest.set_numeric_flag_double_vm
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ArgumentsTest
[ RUN      ] ArgumentsTest.set_numeric_flag_double_vm
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/runtime/test_arguments.cpp:600: Failure
Value of: ArgumentsTest::parse_argument(flag->name(), str)
  Actual: false
Expected: true
Test string '1.e-2' did not parse for type double.
[  FAILED  ] ArgumentsTest.set_numeric_flag_double_vm (0 ms)
[----------] 1 test from ArgumentsTest (87 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (87 ms total)
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] ArgumentsTest.set_numeric_flag_double_vm

 1 FAILED TEST
ERROR: RUN_ALL_TESTS() failed. Error 1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284181,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wt2j:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-20 11:14;iklam;Fix:

diff --git a/test/hotspot/gtest/runtime/test_arguments.cpp b/test/hotspot/gtest/runtime/test_arguments.cpp
index b67d306baab..1069be61dfe 100644
--- a/test/hotspot/gtest/runtime/test_arguments.cpp
+++ b/test/hotspot/gtest/runtime/test_arguments.cpp
@@ -593,13 +593,13 @@ TEST_VM_F(ArgumentsTest, set_numeric_flag_double) {
   for (uint i = 0; i < ARRAY_SIZE(more_test_strings); i++) {
     const char* str = more_test_strings[i];
 
-    char* dummy;
+    char* end;
     errno = 0;
-    double expected = strtod(str, &dummy);
-    if (errno == 0) {
+    double expected = strtod(str, &end);
+    if (errno == 0 && end != NULL && *end == '\0') {
       ASSERT_TRUE(ArgumentsTest::parse_argument(flag->name(), str))
         << ""Test string '"" <<
-        str << ""' did not parse for type "" << flag->type_string() << ""."";
+        str << ""' did not parse for type "" << flag->type_string() << "". (Expected value = "" << expected << "")"";
       double d = flag->get_double();
       ASSERT_TRUE(d == expected)
         << ""Parsed number "" << d << "" is not the same as expected "" << expected;;;;","2022-04-25 12:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8386
Date: 2022-04-25 19:04:04 +0000;;;","2022-04-26 22:00;dukebot;Changeset: 4714fdcd
Author:    Ioi Lam <iklam@openjdk.org>
Date:      2022-04-27 04:58:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4714fdcd6a1615b9d357dab0116a579c1cd5bfb5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
compiler/intrinsics/sha/cli/TestUseSHA256IntrinsicsOptionOnUnsupportedCPU.java fails after JDK-8284563,JDK-8285266,5073072,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kvn,mikael,mikael,2022-04-20 09:37,2022-04-27 23:26,2023-10-01 09:56,2022-04-20 15:44,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-19,tier6,,,,,,,,,,,,,,,,,"java.lang.AssertionError: Option 'UseSHA256Intrinsics' is expected to have 'false' value
Option 'UseSHA256Intrinsics' should be disabled by default
	at jdk.test.lib.cli.CommandLineOptionTest.verifyOptionValue(CommandLineOptionTest.java:307)
	at jdk.test.lib.cli.CommandLineOptionTest.verifyOptionValue(CommandLineOptionTest.java:280)
	at jdk.test.lib.cli.CommandLineOptionTest.verifyOptionValueForSameVM(CommandLineOptionTest.java:404)
	at compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedAArch64CPU.verifyOptionValues(GenericTestCaseForUnsupportedAArch64CPU.java:89)
	at compiler.intrinsics.sha.cli.DigestOptionsBase$TestCase.test(DigestOptionsBase.java:163)
	at compiler.intrinsics.sha.cli.DigestOptionsBase.runTestCases(DigestOptionsBase.java:139)
	at jdk.test.lib.cli.CommandLineOptionTest.test(CommandLineOptionTest.java:537)
	at compiler.intrinsics.sha.cli.TestUseSHA256IntrinsicsOptionOnUnsupportedCPU.main(TestUseSHA256IntrinsicsOptionOnUnsupportedCPU.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)
Caused by: java.lang.RuntimeException: 'UseSHA256Intrinsics\\s*:?=\\s*false' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
	at jdk.test.lib.cli.CommandLineOptionTest.verifyOptionValue(CommandLineOptionTest.java:299)
	... 11 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284563,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,,,"0|i2wszf:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-20 09:47;kvn;UseSHA256Intrinsics is set to true:

     bool UseSHA                                   = true                                      {product} {default}
     bool UseSHA1Intrinsics                        = true                                   {diagnostic} {default}
     bool UseSHA256Intrinsics                      = true                                   {diagnostic} {default}
     bool UseSHA3Intrinsics                        = false                                  {diagnostic} {default}
     bool UseSHA512Intrinsics                      = false                                  {diagnostic} {default}
;;;","2022-04-20 10:06;kvn;I think the issue is caused by renaming feature name from `sha256` to `sha2`. The name is used in test lib:
https://github.com/openjdk/jdk/blob/master/test/hotspot/jtreg/compiler/testlibrary/sha/predicate/IntrinsicPredicates.java#L78;;;","2022-04-20 10:17;kvn;As result TestUseSHA256IntrinsicsOptionOnUnsupportedCPU.java test code was executed because SHA256_INSTRUCTION_AVAILABLE did not match `sha256` and testing assumed that it was not supported.
;;;","2022-04-20 10:39;eliu;My intention was to keep alignment for the name and CPU feature, as the name ""sha256"" does not map to anyone. If it's not easy to change all use points of the string ""sha256"" to ""sha2"", I'm fine to withdraw the name back.;;;","2022-04-20 10:53;kvn;I am testing simple fix which revert name back to ""sha256"". Only need to fix declaration and ""supports_sha256()"".;;;","2022-04-20 11:57;valeriep;The name should be SHA256. SHA2 is often used to refer to a family of algorithms - SHA256, SHA384, SHA512, etc.;;;","2022-04-20 12:35;kvn;I made only trivial fix (for fast approval) :
     decl(SHA1,          sha1,          5)     \
-    decl(SHA2,          sha2,          6)     \
+    decl(SHA2,          sha256,        6)     \
     decl(CRC32,         crc32,         7)     \

I did not rename ID ""CPU_SHA2"" because it is used in few other places. It could be done in separate RFE.;;;","2022-04-20 14:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8324
Date: 2022-04-20 21:06:34 +0000;;;","2022-04-20 15:44;dukebot;Changeset: 691c5da5
Author:    Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-04-20 22:41:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/691c5da59352e8473de53e67252d719df1c02601
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor cleanup could be done in java.security,JDK-8285263,5073069,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,mpowers,mpowers,2022-04-20 08:24,2023-03-30 05:15,2023-10-01 09:56,2022-06-13 08:16,,,,,,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,,,,"JDK-8273046 is the umbrella bug for this bug. The changes were too large for a single code review, so it was decided to split into smaller chunks. This is one such chunk: 

open/src/java.base/share/classes/java/security ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302493,,,,,,,,JDK-8302696,,,,,,,JDK-8273046,JDK-8294058,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wsyr:",9223372036854775807,b02,,,,,,,,,,,"2022-04-20 13:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8319
Date: 2022-04-20 16:52:32 +0000;;;","2022-06-13 08:16;dukebot;Changeset: 17695962
Author:    Mark Powers <mark.powers@oracle.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2022-06-13 15:13:56 +0000
URL:       https://git.openjdk.org/jdk/commit/17695962ac191b1c0404f9671f09e0e9bbc83ef5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update boot JDK to 18.0.1,JDK-8285253,5073059,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,kcr,kcr,2022-04-20 06:05,2022-07-31 11:38,2023-10-01 09:56,2022-06-27 09:33,jfx19,,,,,,,,,,,jfx19,javafx,,0,noreg-build,sn_117,,,,,,,,,,,,,,,,,,,"Now that JDK 18.0.1 has released we should update the boot JDK for JavaFX to use JDK 18.0.1.

Find JDK here: https://www.oracle.com/java/technologies/javase/jdk18-archive-downloads.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291588,,,,,,,JDK-8283517,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wswj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2022-06-17 01:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/792
Date: 2022-05-10 09:50:08 +0000;;;","2022-06-27 09:33;dukebot;Changeset: 1f625708
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-06-27 16:28:18 +0000
URL:       https://git.openjdk.org/jfx/commit/1f6257086422cdc3b0cb01de3ef9bbc3137cfa30
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Android] Window's screen is not updated after native screen was disposed,JDK-8285217,5073021,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2022-04-20 02:41,2022-05-17 11:46,2023-10-01 09:56,2022-05-10 14:06,jfx18,,,,,,,,,,,jfx19,javafx,,0,,,,,,,,,,,,,,,,,,,,,"On Android, the lifecycle of an application includes the case of its native window being disposed when the app moves to background. When the app comes to foreground again, a new native window is created. However, the JavaFX window is still the same.

In com.sun.glass.ui.Screen, a pointer is kept for a native screen, and when notifySettingsChanged() is called, the JavaFX window(s) gets its screen updated, considering only that the new screen has the same pointer as before. 

For instance on Android, this covers the case where the screen changes orientation, where the screen dimensions change but the pointer to the native screen is still the same.

However, when the app goes to background the native screen is disposed, its pointer is 0 as the native window is null. In case the app comes to foreground again, a new native window is created, and therefore there is a new pointer.

The current algorithm only checks that the pointer for the old screen is still the same as the new one, but doesn't take into account this case, in which the old screen has been disposed (and has 0 as pointer) and the new screen has a new non-zero pointer. 

This prevents the JavaFX window from getting that new screen, and further changes (for instance in orientation) will produce unexpected results.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,android,,,,,,"0|i2wso3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2022-04-20 11:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/778
Date: 2022-04-20 18:26:06 +0000;;;","2022-05-10 14:06;dukebot;Changeset: 6c6545f7
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2022-05-10 21:05:10 +0000
URL:       https://git.openjdk.java.net/jfx/commit/6c6545f7b8b9917ef4aceb0a367864f240a2a9c5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TableColumnHeader: calc of cell width must respect row styling (TreeTableView),JDK-8285197,5073001,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rlichten,rlichten,rlichten,2022-04-20 01:34,2022-06-24 07:16,2023-10-01 09:56,2022-05-20 02:13,8u261,9.0.4,jfx14,,,,,,,,,jfx19,javafx,,0,sn_115,TableColumnHeader,TableView,,,,,,,,,,,,,,,,,,"The TreeViewFitColumnBug.java example attached shows that column autofitting does not work

- expected: column width such that text in all rows fully visible
- actual: text is eclipsed

JDK-8251480 fixed this problem for TableView.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8251480,,,,,,,,,,,,,,,,,,,,,"2022-04-20 01:39;rlichten;TreeViewFitColumnBug.java;https://bugs.openjdk.org/secure/attachment/98650/TreeViewFitColumnBug.java","2022-04-20 01:41;rlichten;TreeViewFitColumnBug.png;https://bugs.openjdk.org/secure/attachment/98651/TreeViewFitColumnBug.png",,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wsjn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-04-20 01:35;rlichten;This clone serves to handle the problem stated above for tree views.;;;","2022-04-21 01:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/779
Date: 2022-04-21 08:38:20 +0000;;;","2022-05-20 02:13;dukebot;Changeset: 18b2366f
Author:    Robert Lichtenberger <rlichten@openjdk.org>
Committer: Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2022-05-20 09:12:02 +0000
URL:       https://git.openjdk.java.net/jfx/commit/18b2366f3d0520479f0d9c4af48acf9495d15a72
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deadlock reporting prints carrier thread when virtual thread is in deadlock cycle ,JDK-8285196,5072998,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rpressler,alanb,alanb,2022-04-20 01:18,2022-04-27 14:55,2023-10-01 09:56,2022-04-27 14:53,repo-loom,,,,,,,,,,,repo-loom,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"Here's an example of a deadlock cycle with with one platform Thread and one virtual Thread.

Found one Java-level deadlock:
=============================
""Thread-0"":
  waiting to lock monitor 0x00007fe381c5ca60 (object 0x000000070fbf1e50, a java.lang.Object),
  which is held by ""ForkJoinPool-1-worker-1""
 
""ForkJoinPool-1-worker-1"":
  waiting to lock monitor 0x00007fe381c5cb30 (object 0x000000070fbf1e40, a java.lang.Object),
  which is held by ""Thread-0""
 
Java stack information for the threads listed above:
===================================================
""Thread-0"":
at Deadlock.lambda$test$0(Deadlock.java:32)
- waiting to lock <0x000000070fbf1e50> (a java.lang.Object)
- locked <0x000000070fbf1e40> (a java.lang.Object)
at Deadlock$$Lambda$26/0x00000008000849f0.run(Unknown Source)
at java.lang.Thread.run(java.base/Thread.java:1555)
""ForkJoinPool-1-worker-1"":
at jdk.internal.vm.Continuation.run(java.base/Continuation.java:259)
at java.lang.VirtualThread.runContinuation(java.base/VirtualThread.java:213)
at java.lang.VirtualThread$$Lambda$35/0x00000008000e7da8.run(java.base/Unknown Source)
at java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(java.base/ForkJoinTask.java:1421)
at java.util.concurrent.ForkJoinTask.doExec(java.base/ForkJoinTask.java:385)
at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(java.base/ForkJoinPool.java:1311)
at java.util.concurrent.ForkJoinPool.scan(java.base/ForkJoinPool.java:1840)
at java.util.concurrent.ForkJoinPool.runWorker(java.base/ForkJoinPool.java:1806)
at java.util.concurrent.ForkJoinWorkerThread.run(java.base/ForkJoinWorkerThread.java:183)
 
Found 1 deadlock.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wsiz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-25 09:21;coleenp;Is this a bug because the virtual thread has unmounted the code that took the lock so we can't see it in the stack dump?  Do you have a test case. I don't understand this issue.  Thanks.;;;","2022-04-25 11:25;alanb;This is, at least partly, about the output of the deadlock detection. If a virtual thread is in a cycle of threads that are in deadlock waiting to acquire object monitors then the output suggests the carrier is in the cycle. It prints the frames of both the carrier and virtual thread. Ownable synchronizers is more complicated because the owner may be virtual thread so the detection detection won't report the cycle as the thread is not in the VM's thread list.

Note that the API equivalent (j.l.management.ThreadMXBean) has been re-specified to find deadlocks of platform threads. It leaves wriggle room to allow for the inclusion of platform threads that are in a cycle with virtual threads. Here's a test for the API:
https://github.com/openjdk/loom/blob/fibers/test/jdk/java/lang/management/ThreadMXBean/VirtualThreadDeadlocks.java

I don't think we need to solve all issues for a first release. What we have now does not regress but the output is confusing when a virtual thread is in the cycle of threads waiting for object monitors. So I think we need to fix the output. Also I think we should change the jmm findDeadlockXXX functions should be changed to return the Thread objects of the mounted virtual threads rather than the carrier. This is masked right now by a filter at the Java level to ignore the Thread when it's a carrier thread.;;;","2022-04-27 14:53;rpressler;Fixed by https://git.openjdk.java.net/loom/pull/173

Cycles involving virtual threads are not reported;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Document jpackage resource dir feature,JDK-8285146,5072943,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,asemenyuk,asemenyuk,2022-04-19 16:10,2022-06-09 22:22,2023-10-01 09:56,2022-06-08 16:48,19,,,,,,,,,,,19,tools,,0,noreg-doc,sn_120,,,,,,,,,,,,,,,,,,,"There is no documentation on how to use the ""resource dir"" feature of jpackage available. Need to document it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ws6r:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate XML keys in XPATHErrorResources.java and XSLTErrorResources.java,JDK-8285097,5072892,Bug,Closed,JDK,JDK,software,duke,,,P5,Fixed,joehw,tsteele,tsteele,2022-04-19 14:32,2022-08-24 07:43,2023-10-01 09:56,2022-05-18 11:14,,,,,,,,,,,,19,xml,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,"Created on behalf of Shruthi

src/java.xml/share/classes/com/sun/org/apache/xpath/internal/XPATHErrorResources.java file has duplicate keys.
(1) Same key and different value.
{ ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,
""rtf() not supported by XRTreeFragSelectWrapper""},
{ ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,
""asNodeIterator() not supported by XRTreeFragSelectWrapper""},
(2) Same key and value.
{ ER_SOURCE_RETURN_TYPE_CANNOT_BE_NULL,
""Source and/or Return Type can not be null""},
{ ER_SOURCE_RETURN_TYPE_CANNOT_BE_NULL,
""Source and/or Return Type can not be null""},

src/java.xml/share/classes/com/sun/org/apache/xalan/internal/res/XSLTErrorResources.java file has duplicate keys.
(3) the same key and different value.
{ ""xslProc_option"", ""Xalan-J command line Process class options:""},
{ ""xslProc_option"", ""Xalan-J command line Process class options\u003a""}, 
[Poster's Note: 0x3a is the same as ':' in ascii/utf-8 so this is actually the same key and value.]",,,,,,,,,,JDK-8290979,JDK-8290470,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wrvf:",9223372036854775807,b24,,,,,,,,,Verified,,"2022-04-27 16:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8318
Date: 2022-04-20 15:37:13 +0000;;;","2022-05-18 11:14;dukebot;Changeset: b5a3d284
Author:    Shruthi <Shruthi.Shruthi1@ibm.com>
Committer: Joe Wang <joehw@openjdk.org>
Date:      2022-05-18 18:13:15 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b5a3d2843be3c093cd3a534caece87a32e5c47cc
;;;","2022-05-31 00:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1121
Date: 2022-05-31 07:46:46 +0000;;;","2022-06-01 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/427
Date: 2022-05-31 11:08:32 +0000;;;","2022-06-06 06:44;tsteele;[11u, 17u backport request]

These changes remove duplicate keys from the xml error strings. T1 testing shows no issues. Risk is low.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test java/awt/Frame/InvisibleOwner/InvisibleOwner.java failing on Linux,JDK-8285094,5072888,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2022-04-19 13:38,2022-05-04 23:36,2023-10-01 09:56,2022-04-28 17:08,,,,,,,,,,,,19,client-libs,,0,,,,,,,,,,,,,,,,,,,,,"Whilst investigating another issue I noticed that on at least two Ubuntu 21.04 systems java/awt/Frame/InvisibleOwner/InvisibleOwner.java always failed.
It wasn't being noticed because we automatically re-run the test and then it always passed.
I re-wrote the test to be stable but it still failed.
Debugging I saw that ""paint(Graphics g)"" was called literally thousands of times  for no apparent reason.

After a bit of work running smaller and smaller sub-sets I got to this much shorter  list
java/awt/Frame/FrameSetSizeStressTest/FrameSetSizeStressTest.java java/awt/Frame/FramesGC/FramesGC.java 
java/awt/Frame/FrameSize/TestFrameSize.java 
java/awt/Frame/GetGraphicsStressTest/GetGraphicsStressTest.java 
java/awt/Frame/HideMaximized/HideMaximized.java 
java/awt/Frame/HugeFrame/HugeFrame.java 
java/awt/Frame/InvisibleOwner/InvisibleOwner.java

I then watched these running and saw that InvisibleOwner.java wasn't even showing on the screen - not even a frame - despite receiving window showing events and repaint requests.

I then noticed that the windows from tests immediately before hadn't shown either but those tests didn't fail because of it.

So I looked at java/awt/Frame/GetGraphicsStressTest/GetGraphicsStressTest.java
which as well as creating and disposing graphics instances, also calls
Frame.removeNotify()
Frame.addNotify();

in a tight loop in one thread - whilst doing the graphics stressing in other threads.

Near as I can tell this stresses out the Xserver to the text that for some amount of time afterwards it isn't actually able to display anything.

Adding a 5 or more second sleep to the end gives the Xserver time to catch up and subsequent tests behave much better and pass.

The stabilisation of InvisibleOwner is still worth doing but that  sleep looks like the important one. It is possible other stress tests may cause similar problems so that is something to monitor
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wruj:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-04-20 16:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8312
Date: 2022-04-20 04:13:09 +0000;;;","2022-04-28 17:08;dukebot;Changeset: 64d98ba1
Author:    Phil Race <prr@openjdk.org>
Date:      2022-04-29 00:06:36 +0000
URL:       https://git.openjdk.java.net/jdk/commit/64d98ba1001a24b301e5d8bce247f556fdcd39b2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve XPath operators count accuracy,JDK-8285081,5072875,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,joehw,joehw,joehw,2022-04-19 13:11,2022-08-17 11:26,2023-10-01 09:56,2022-06-07 14:00,,,,,,,,,,,,19,xml,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk13u-fix-request,jdk13u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,"The JDK impl for the XPath API and XSLT imposes limits on certain operations. It was observed that the operator count appeared to be inaccurate in certain cases, such as the relational operators, a result of the parsers and compilers for XPath and XSLT XPath being different. The process currently counts an axis and node test once on double colon, however, it needs to be re-examined with the consideration of the abbreviated syntax as a node test can be used alone without the double colon. In most cases, counting once with the double colon would be okay as its one location step and consistent with the abbreviated syntax, but the node tests needs to be checked to see they are preceded with an axis. Also, several other symbols such as double slash need to be in the operator list to be counted as one step.
",,,,,,,,,,JDK-8290362,JDK-8289248,JDK-8290816,JDK-8290442,JDK-8290815,JDK-8288674,JDK-8288963,JDK-8288115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285300,,,,,,,,,JDK-8285300,JDK-8270504,JDK-8289486,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wrrn:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11b5a46e,,,,,,,Verified,,"2022-06-03 11:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/9022
Date: 2022-06-03 18:17:55 +0000;;;","2022-06-07 14:00;dukebot;Changeset: 8e078391
Author:    Joe Wang <joehw@openjdk.org>
Date:      2022-06-07 20:49:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8e0783917975075aae5d586f0076d5093afb0b62
;;;","2022-06-20 06:32;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Medium risk, a change to life coding. I would take this change,
the risk seems bearable and 17 is LTS.
Clean backport.
SAP nightly testing passed.;;;","2022-06-20 06:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/478
Date: 2022-06-20 13:32:41 +0000;;;","2022-07-15 06:52;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
Clean backport.
SAP nightly testing passed.;;;","2022-07-15 07:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1232
Date: 2022-07-15 13:54:58 +0000;;;","2022-07-21 05:32;yan;Fix request (13u, 15u):

I'd like to backport this fix expecting more contextually-related changes in future
Clean backport, tier2 OK.;;;","2022-07-21 05:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk13u-dev/pull/374
Date: 2022-07-21 12:35:04 +0000;;;","2022-07-21 05:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/238
Date: 2022-07-21 12:35:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#custom-cl-zgc crashes in repo-loom,JDK-8285051,5072843,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stefank,lmesnik,lmesnik,2022-04-19 12:15,2022-04-20 05:39,2023-10-01 09:56,2022-04-20 05:39,repo-loom,,,,,,,,,,,,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"Test
runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#custom-cl-zgc
crashes in repo-loom with 
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S41249/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/9793e8f0-be06-4d79-b093-01a3ce3a35a7/runs/b3a41eaf-1b10-483c-9a14-c6a3a6d267fe/workspace/open/src/hotspot/share/gc/z/zBarrier.inline.hpp:348), pid=21699, tid=9987
#  assert(ZResurrection::is_blocked()) failed: Invalid phase
#
# JRE version: Java(TM) SE Runtime Environment (19.0+1) (fastdebug build 19-loomvt+1-19)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-loomvt+1-19, mixed mode, sharing, tiered, compressed class ptrs, z gc, bsd-amd64)
# Core dump will be written. Default location: core.21699
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S19376/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d1f74fb6-d2a4-4f9d-946c-9425d3590779/runs/e3f796f2-3bb4-462a-987c-267bf50fd361/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/tmp -XX:-UseCompressedOops -XX:ArchiveClassesAtExit=/System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S19376/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d1f74fb6-d2a4-4f9d-946c-9425d3590779/runs/e3f796f2-3bb4-462a-987c-267bf50fd361/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/5/appcds-04h34m13s508.jsa -Xshare:auto --add-modules=java.base,jdk.httpserver --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED -Xlog:cds=debug,class+load,class+loader+constraints -XX:+UseZGC -XX:ZCollectionInterval=0.01 CustomAppLoader /System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S19376/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d1f74fb6-d2a4-4f9d-946c-9425d3590779/runs/e3f796f2-3bb4-462a-987c-267bf50fd361/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/5/loader_constraints.jar LoaderConstraintsApp 3

Host: jpg-mac-x64-032.us.oracle.com, ""Macmini8,1"" x86_64 3200 MHz, 12 cores, 32G, Darwin 20.6.0, macOS 11.6 (20G165)
Time: Mon Apr 18 04:34:14 2022 GMT elapsed time: 1.002786 seconds (0d 0h 0m 1s)

---------------  T H R E A D  ---------------

Current thread (0x00007ff472828e10):  JavaThread ""DestroyJavaVM"" [_thread_in_Java, id=9987, stack(0x000070000875e000,0x000070000885e000)]

Stack: [0x000070000875e000,0x000070000885e000],  sp=0x000070000885ca00,  free space=1018k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x12b9af9]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x6e9
V  [libjvm.dylib+0x12ba17b]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x6ac94d]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0x134f4cb]  ZBarrier::keep_alive_barrier_on_phantom_root_oop_field(oop*)+0x3b
V  [libjvm.dylib+0x134f1a2]  ZNMethod::nmethod_oops_do_inner(nmethod*, OopClosure*)+0x52
V  [libjvm.dylib+0x134f25c]  ZNMethod::nmethod_oops_barrier(nmethod*)+0x1c
V  [libjvm.dylib+0x1328eb8]  ZBarrierSetNMethod::nmethod_entry_barrier(nmethod*)+0x118
V  [libjvm.dylib+0x3a69a9]  BarrierSetNMethod::nmethod_stub_entry_barrier(unsigned char**)+0x109
v  ~StubRoutines::nmethod_entry_barrier 0x00000001263cc497
C  0xffffffffffffffff
j  java.lang.invoke.MethodTypeForm.canonicalize(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/MethodType;+7 java.base@19-loomvt
J 201 c1 java.lang.invoke.MethodType.makeImpl(Ljava/lang/Class;[Ljava/lang/Class;Z)Ljava/lang/invoke/MethodType; java.base@19-loomvt (109 bytes) @ 0x000000011ee1fd0c [0x000000011ee1f620+0x00000000000006ec]
J 410 c1 java.lang.invoke.MethodType.insertParameterTypes(I[Ljava/lang/Class;)Ljava/lang/invoke/MethodType; java.base@19-loomvt (121 bytes) @ 0x000000011ee702f4 [0x000000011ee6fba0+0x0000000000000754]
j  java.lang.invoke.MethodType.invokerType()Ljava/lang/invoke/MethodType;+5 java.base@19-loomvt
j  java.lang.invoke.DelegatingMethodHandle.makeReinvokerForm(Ljava/lang/invoke/MethodHandle;ILjava/lang/Object;ZLjava/lang/invoke/LambdaForm$NamedFunction;Ljava/lang/invoke/LambdaForm$NamedFunction;)Ljava/lang/invoke/LambdaForm;+138 java.base@19-loomvt
j  java.lang.invoke.DelegatingMethodHandle.makeReinvokerForm(Ljava/lang/invoke/MethodHandle;ILjava/lang/Object;Ljava/lang/invoke/LambdaForm$NamedFunction;)Ljava/lang/invoke/LambdaForm;+6 java.base@19-loomvt
j  java.lang.invoke.GenerateJLIClassesHelper.makeReinvokerFor(Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/LambdaForm;+18 java.base@19-loomvt
j  java.lang.invoke.GenerateJLIClassesHelper.generateDelegatingMethodHandleHolderClassBytes(Ljava/lang/String;[Ljava/lang/invoke/MethodType;)[B+50 java.base@19-loomvt
j  java.lang.invoke.GenerateJLIClassesHelper$HolderClassBuilder.build()Ljava/util/Map;+646 java.base@19-loomvt
j  java.lang.invoke.GenerateJLIClassesHelper.generateHolderClasses(Ljava/util/stream/Stream;)Ljava/util/Map;+36 java.base@19-loomvt
j  java.lang.invoke.MethodHandleImpl$1.generateHolderClasses(Ljava/util/stream/Stream;)Ljava/util/Map;+1 java.base@19-loomvt
j  jdk.internal.misc.CDS.generateLambdaFormHolderClasses([Ljava/lang/String;)[Ljava/lang/Object;+18 java.base@19-loomvt
v  ~StubRoutines::call_stub 0x000000012631ed40
V  [libjvm.dylib+0x9cba04]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x504
V  [libjvm.dylib+0x9cafde]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x14e
V  [libjvm.dylib+0x9cb115]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, Handle, JavaThread*)+0x65
V  [libjvm.dylib+0xd108e7]  LambdaFormInvokers::regenerate_holder_classes(JavaThread*)+0x457
V  [libjvm.dylib+0xee5e03]  MetaspaceShared::link_shared_classes(bool, JavaThread*)+0x23
V  [libjvm.dylib+0x767ece]  DynamicArchive::prepare_for_dump_at_exit()+0x3e
V  [libjvm.dylib+0x120f347]  JavaThread::invoke_shutdown_hooks()+0x37
V  [libjvm.dylib+0x120f5b3]  Threads::destroy_vm()+0x1f3
V  [libjvm.dylib+0xac88db]  jni_DestroyJavaVM+0xcb
C  [libjli.dylib+0x4f60]  JavaMain+0xc20
C  [libjli.dylib+0x73e9]  ThreadJavaMain+0x9
C  [libsystem_pthread.dylib+0x68fc]  _pthread_start+0xe0
C  [libsystem_pthread.dylib+0x2443]  thread_start+0xf
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wrkj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-04-19 12:56;stefank;I'm in the process of updating these asserts.;;;","2022-04-20 05:39;stefank;Fixed with:
https://github.com/openjdk/loom/commit/99608fb4d6d414b0eed1113cb2bc2d16f9a85bbe;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skip ServiceTest.testManyServicesRunConcurrently on Windows,JDK-8285034,5072826,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,arapte,kcr,kcr,2022-04-19 11:07,2022-04-26 08:09,2023-10-01 09:56,2022-04-21 18:42,jfx19,,,,,,,,,,,jfx19,javafx,,0,sn_116,test_sprint,testbug,,,,,,,,,,,,,,,,,,"We are seeing many CI test failures on Windows due to JDK-8284552. The test should be skipped on Windows until JDK-8284552 can be fixed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284552,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wrgr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2022-04-21 08:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/783
Date: 2022-04-21 15:44:57 +0000;;;","2022-04-21 18:42;dukebot;Changeset: 5a023bd8
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2022-04-22 01:40:57 +0000
URL:       https://git.openjdk.java.net/jfx/commit/5a023bd8d15a0e70336bad96efa39e24a07679da
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/jdi/EventSet/suspendPolicy/suspendpolicy008/ fails with ""eventSet.suspendPolicy() != policyExpected""",JDK-8285032,5072824,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-04-19 10:58,2022-05-04 23:35,2023-10-01 09:56,2022-04-27 13:41,repo-loom,,,,,,,,,,,19,core-svc,,0,noreg-self,wrapper,,,,,,,,,,,,,,,,,,,"The following failure happened with the vthread wrapper:

=> nsk/jdi/EventSet/suspendPolicy/suspendpolicy008      TESTING BEGINS
--> debugger: breakpointForCommunication
debugee.stderr> **> debuggee: debuggee started!

=> nsk/jdi/EventSet/suspendPolicy/suspendpolicy008 :::::: case: # 0
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread0
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread0
--> debugger: ......got : instanceof ThreadStartEvent
--> debugger: breakpointForCommunication

=> nsk/jdi/EventSet/suspendPolicy/suspendpolicy008 :::::: case: # 1
--> debugger: ......got : instanceof ThreadStartEvent
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread1
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread1
--> debugger: breakpointForCommunication

=> nsk/jdi/EventSet/suspendPolicy/suspendpolicy008 :::::: case: # 2
--> debugger: ......got : instanceof ThreadStartEvent
--> debugger: breakpointForCommunication
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread2
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread2

=> nsk/jdi/EventSet/suspendPolicy/suspendpolicy008 :::::: case: # 3
--> debugger: ......got : instanceof ThreadStartEvent
--> debugger: breakpointForCommunication
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread3

=> nsk/jdi/EventSet/suspendPolicy/suspendpolicy008 :::::: case: # 4
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread3
--> debugger: ......got : instanceof ThreadStartEvent
# ERROR: ##> debugger: ERROR: eventSet.suspendPolicy() != policyExpected
The following stacktrace is for failure analysis.
nsk.share.TestFailure: ##> debugger: ERROR: eventSet.suspendPolicy() != policyExpected
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.JDIBase.log3(JDIBase.java:70)
	at nsk.jdi.EventSet.suspendPolicy.suspendpolicy008.testRun(suspendpolicy008.java:383)
	at nsk.jdi.EventSet.suspendPolicy.suspendpolicy008.runTest(suspendpolicy008.java:208)
	at nsk.jdi.EventSet.suspendPolicy.suspendpolicy008.runThis(suspendpolicy008.java:151)
	at nsk.jdi.EventSet.suspendPolicy.suspendpolicy008.run(suspendpolicy008.java:94)
	at nsk.jdi.EventSet.suspendPolicy.suspendpolicy008.main(suspendpolicy008.java:87)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:1555)
# ERROR: ##> debugger:        eventSet.suspendPolicy() == 0
# ERROR: ##> debugger:        policyExpected           == 2
--> debugger: breakpointForCommunication
# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** event 'ThreadStartEvent in thread thread4' IS NOT a breakpoint **
# ERROR: ##> debugger: test phase has not finished normally: debuggee is still alive
--> debugger: ......forcing: vm.exit();
TEST FAILED
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wrgb:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-04-19 11:17;cjplummer;We've only seen this once so far. Ignore the ""IS NOT a breakpoint"" exception at the end. The real issue is:

 nsk.share.TestFailure: ##> debugger: ERROR: eventSet.suspendPolicy() != policyExpected
...
# ERROR: ##> debugger: eventSet.suspendPolicy() == 0
# ERROR: ##> debugger: policyExpected == 2 

The test has a series of passes. Each one enables 1 to 3 ThreadStartRequests using a mix of the 3 suspend policies, eventually covering all possible combination. The EventSet returned for the ThreadStartEvent should say the suspend policy is for whichever policy would suspend the most threads.

The test is having issues in the 3 or 4 test case. It seems that case 3 is a little slow in exiting the debuggee thread, and case 4 has already started up by the time it exits. This shouldn't be an issue, and is probably just a red herring, but I'm not sure.

Case 4 then gets a ThreadStartEvent  with the wrong suspend policy. Case 4 does does two ThreadStartRequests with policies NONE (0) and ALL (2). The eventset ends up with NONE when it should be ALL. What I suspect is this is caused by a spurious thread starting (a carrier thread) and it was started between the enabling of the two ThreadStartRequests:

              case 3:
                      eventRequest1 = settingThreadStartRequest (
                                             SUSPEND_NONE, ""ThreadStartRequest1"");
                      eventRequest1.enable();
                      eventRequest2 = settingThreadStartRequest (
                                             SUSPEND_THREAD, ""ThreadStartRequest2"");
                      eventRequest2.enable();
                      break;

So if it comes in after the SUSPEND_NONE request has been setup but before the SUSPEND_THREAD request, then the suspend policy on the eventset would be NONE. Unfortunately the test is not printing out the name of the thread when this happens, so the first thing to do is include the thread name and then try to reproduce again, but unfortunately this failure seems very rare so that might be hard to do. I think the fix is in the following code which is execute right after enabling the event requests:

            mainThread.resume();
            getEventSet();

Probably just doing a getEventSet() call before the resume() would clear out any ThreadStartEvent resulting from the spurious creation of a carrier thread. There could be another one that comes in right after, but it should have the right suspend policy, so the test should be ok with it.;;;","2022-04-20 12:01;cjplummer;There is another test bug here other than the above explained issue with the untimely carrier thread creation, but this other issue is exacerbated by the carrier thread creation.

For each of the 7 test cases, the debugee creates a thread using the following pattern:

                            thread0 = JDIThreadFactory.newThread(new Threadsuspendpolicy008a(""thread0""));
                            methodForCommunication();
                            threadStart(thread0);

methodForCommunication() has a breakpoint set in it. That's how the debugger knows it's time to start looking for the ThreadStartEvent. On the debugger site if it were to get a ThreadStartEvent for a carrier thread instead of the BreakPointEvent, that's ok because it skips it and then checks again for the BreakPointEvent. However, the debugee code is actually as clean as shown below. It intersperses some of the both between different test cases. For example:
                    case 0:
                            thread0 = JDIThreadFactory.newThread(new Threadsuspendpolicy008a(""thread0""));
                            methodForCommunication();
                            threadStart(thread0);

                            thread1 = JDIThreadFactory.newThread(new Threadsuspendpolicy008a(""thread1""));
                            methodForCommunication();
                            break;

                    case 1:
                            threadStart(thread1);

                            thread2 = JDIThreadFactory.newThread(new Threadsuspendpolicy008a(""thread2""));
                            methodForCommunication();
                            break;

What I'm seeing is that the BreakPointEvent for the second methodForCommunication() call sometimes is generated before the ThreadStartEvent for the first threadStart(thread0). Since once execution resume after methodForCommunication() there is no more synchronization, it seems that this is always a possibility, but it only seems to happen if there is also an unexpected ThreadStartEvent due to carrier thread creations.  What I'm seeing on the debugger side is:

1. Getting the first BreakPointEvent, resuming the debuggee, and waiting for a ThreadStartEvent
2. Getting a ThreadStartEvent for a carrier thread, which I now have code in place to skip and wait again for the thread0 ThreadStartEvent.
3. Getting the 2nd BreakPointEvent, which is an error. It should be a ThreadStartEvent for thread0. I checked and right after this BreakPointEvent the expected ThreadStartEvent is sent.

I what is happening is the starting of thread0 requires first creating a carrier thread for it to run on, and delays its ThreadStartEvent long enough for the main thread to get to the next methodForCommunication(). A short sleep is probably the simplest fix to clean this up, although certainly not most elegant. Really this test should have better synchronization, but I I'm not it's worth the effort.

...Hmm, just noticed that threadStart() does synchronize with the thread being started, and waits until it is entered. Will need to rethink what is going wrong here.

...Ugh! The test puts a counter of 1 on the ThreadStartEventRequest. That explains a lot of the odd behavior I've seen. Need to see if it can be done without the counter.;;;","2022-04-21 13:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8350
Date: 2022-04-21 20:14:49 +0000;;;","2022-04-27 13:41;dukebot;Changeset: 5c093493
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-04-27 20:38:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5c0934931b097baf76c1f6a25f0c0b73af45ffc3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
gc/arguments/TestUseCompressedOopsFlagsWithUlimit.java fails after JDK-8280761,JDK-8285011,5072801,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,tschatzl,dcubed,dcubed,2022-04-19 07:39,2022-05-04 23:36,2023-10-01 09:56,2022-04-28 08:52,19,,,,,,,,,,,19,hotspot,,0,problemlist,regression,testbug,tier1,tier2,tier3,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

gc/arguments/TestUseCompressedOopsFlagsWithUlimit.java

Here's a snippet from the log file:

----------System.out:(4/2568)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+19-1263/linux-x64-debug.jdk/jdk-19/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14625/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f5f2749-8fb7-427a-8bf1-6ab5b234de70/runs/e3b44cf2-c2b6-441f-ad72-994c85e2bdc7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/classes/0/gc/arguments/TestUseCompressedOopsFlagsWithUlimit.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+19-1263/src.full/open/test/hotspot/jtreg/gc/arguments:/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14625/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f5f2749-8fb7-427a-8bf1-6ab5b234de70/runs/e3b44cf2-c2b6-441f-ad72-994c85e2bdc7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/classes/0:/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14625/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f5f2749-8fb7-427a-8bf1-6ab5b234de70/runs/e3b44cf2-c2b6-441f-ad72-994c85e2bdc7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/classes/0/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14625/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f5f2749-8fb7-427a-8bf1-6ab5b234de70/runs/e3b44cf2-c2b6-441f-ad72-994c85e2bdc7/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/tmp -XX:+CreateCoredumpOnCrash -XX:+UseZGC -XX:MaxRAM=34359738368 -XX:MaxRAMPercentage=100 -XX:+PrintFlagsFinal -version ]
[2022-04-19T14:19:42.966830422Z] Gathering output for process 8341
[2022-04-19T14:19:42.976057882Z] Waiting for completion for process 8341
[2022-04-19T14:19:43.180178290Z] Waiting for completion finished for process 8341
----------System.err:(11/839)----------
java.lang.RuntimeException: UseCompressedOops set to false, expected true when running with the following flags: [[-XX:MaxRAM=34359738368, -XX:MaxRAMPercentage=100, -XX:+PrintFlagsFinal, -version]]
	at gc.arguments.TestUseCompressedOopsFlagsWithUlimit.checkFlag(TestUseCompressedOopsFlagsWithUlimit.java:69)
	at gc.arguments.TestUseCompressedOopsFlagsWithUlimit.main(TestUseCompressedOopsFlagsWithUlimit.java:89)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: UseCompressedOops set to false, expected true when running with the following flags: [[-XX:MaxRAM=34359738368, -XX:MaxRAMPercentage=100, -XX:+PrintFlagsFinal, -version]]

The test is failing in Tier2 and the failing build-ID has just the fix for:

JDK-8280761 UseCompressedOops should be set after limit_heap_by_allocatable_memory",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280761,,,,,,,JDK-8285970,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wrb7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-04-19 07:40;dcubed;Starting at P2 since this appears to be a regression.;;;","2022-04-19 07:58;dcubed;This appears to be related to:

JDK-8280761 UseCompressedOops should be set after limit_heap_by_allocatable_memory

Please take a look.;;;","2022-04-19 08:05;tschatzl;ZGC does not support compressed oops at all, so the test fails as it expects compressed oops.

The fix is to not run this test with ZGC.;;;","2022-04-19 08:13;tschatzl;Also fails on non-zgc runs on macosx-aarch64. Going to problemlist for now to reduce noise.;;;","2022-04-19 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8298
Date: 2022-04-19 15:08:36 +0000;;;","2022-04-20 00:34;ayang;I added some debug output and the error msg is ""sh: line 0: ulimit: virtual memory: cannot modify limit: Invalid argument"", indicating `ulimit` on macosx doesn't support virtual-mem restriction. I also tried smaller arg (4g instead of 10g), but to no avail. The best way forward I believe is to disable that test on macosx, making it linux only then.;;;","2022-04-26 08:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8401
Date: 2022-04-26 15:20:02 +0000;;;","2022-04-28 08:52;dukebot;Changeset: b7185780
Author:    Thomas Schatzl <tschatzl@openjdk.org>
Date:      2022-04-28 15:49:27 +0000
URL:       https://git.openjdk.java.net/jdk/commit/b7185780ff395523020dc9826cc15aef04d8fa15
;;;","2022-05-03 02:15;ayang;Just for the record, linux prints the expected result, but mac consistently reports ""Invalid argument"" on running `clang++ tmp.cc; ulimit -v 1048576; ./a.out`.

```
#include <sys/time.h>
#include <sys/resource.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/resource.h>

int main() {
 struct rlimit current;

 int result = getrlimit(RLIMIT_AS, &current);
 if (result != 0) {
   puts(""Unable to get rlimit"");
 }

 printf(""limit is %llu\n"", (unsigned long long)current.rlim_cur);
 return 0;
}
```;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"JFR: jdk/jfr/jmx/streaming/TestClose.java failed with ""Exception: Expected repository to be empty""",JDK-8285008,5072798,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,dcubed,dcubed,2022-04-19 06:34,2022-06-01 23:27,2023-10-01 09:56,2022-05-28 10:24,19,,,,,,,,,,,19,hotspot,,0,intermittent,tier5,,,,,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

jdk/jfr/jmx/streaming/TestClose.java

Here's a snippet from the log file:

#section:main
----------messages:(5/272)----------
command: main jdk.jfr.jmx.streaming.TestClose
reason: User specified action: run main/othervm jdk.jfr.jmx.streaming.TestClose 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,jdk.management.jfr
elapsed time (seconds): 5.451
----------configuration:(3/57)----------
Boot Layer
  add modules: jdk.jfr jdk.management.jfr

----------System.out:(1/51)*----------
test-close-1650354393395\\2022_04_19_07_46_35.jfr
----------System.err:(11/652)----------
java.lang.Exception: Expected repository to be empty
	at jdk.jfr.jmx.streaming.TestClose.main(TestClose.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.Exception: Expected repository to be empty
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Expected repository to be empty
----------rerun:(45/5804)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,,"0|i2wraj:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-05-27 10:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8927
Date: 2022-05-27 17:27:27 +0000;;;","2022-05-28 10:24;dukebot;Changeset: a6e2e223
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-05-28 17:22:10 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a6e2e223ea0339117c89f46e074a92dc2f31dfd5
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use correct lookup mode for MethodHandleStatics.UNSAFE,JDK-8285007,5072797,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,redestad,redestad,redestad,2022-04-19 06:00,2022-04-20 23:31,2023-10-01 09:56,2022-04-19 13:28,,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"In JDK-8187826 we changed to use a NamedFunction for the UNSAFE field, but it appears the invocation mode and the exception type is wrong. This mismatch appears to be ignored by HotSpot, but a user implementing an experimental JVM ran into some issues. 

Use REF_getStatic and expect NoSuchFieldException when setting up NF_UNSAFE",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wrab:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2022-04-19 06:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8297
Date: 2022-04-19 13:19:31 +0000;;;","2022-04-19 13:28;dukebot;Changeset: 5d1ec54d
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2022-04-19 20:26:02 +0000
URL:       https://git.openjdk.java.net/jdk/commit/5d1ec54d6c20dfe67a459c9d102cdfa0394bcc1e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove remaining files in src/samples,JDK-8284999,5072788,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-04-19 03:38,2022-04-20 23:30,2023-10-01 09:56,2022-04-19 07:08,19,,,,,,,,,,,19,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,"JEP 298 was about removing demos and samples. Unfortunately, JDK-8173801 which should have removed all files in src/samples, left a few non-source files (key stores and images). These should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wr8b:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-19 03:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8294
Date: 2022-04-19 10:41:07 +0000;;;","2022-04-19 07:08;dukebot;Changeset: 595c8b85
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-04-19 14:07:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/595c8b859890b5b439069a5aac6664b96b444580
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
arm32 build crashes since JDK-8283326,JDK-8284997,5072785,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,marchof,marchof,2022-04-19 03:08,2023-07-14 08:03,2023-10-01 09:56,2022-06-24 06:21,19,,,,,,,,,,,20,hotspot,,0,jacoco-found,oraclejdk-na,oracle-triage-19,,,,,,,,,,,,,,,,,,"Since merge of JDK-8283326 native builds on arm32 crash reproducible when using the new JVM as part of build steps.

Please find example crash report attached,",,,,,,,,,,JDK-8312102,JDK-8289047,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283326,,,,,,,JDK-8285675,JDK-8288719,,,,,,,"2022-04-19 05:39;marchof;build.log;https://bugs.openjdk.org/secure/attachment/98640/build.log","2022-04-19 11:13;marchof;debug-build.log.gz;https://bugs.openjdk.org/secure/attachment/98645/debug-build.log.gz","2022-04-19 11:13;marchof;debug-hs_err_pid16984.log;https://bugs.openjdk.org/secure/attachment/98644/debug-hs_err_pid16984.log","2022-04-19 03:07;marchof;hs_err_pid16897.log;https://bugs.openjdk.org/secure/attachment/98637/hs_err_pid16897.log","2022-04-19 07:22;marchof;hs_err_pid17036.log;https://bugs.openjdk.org/secure/attachment/98642/hs_err_pid17036.log","2022-04-23 09:46;jgneff;openjdk-19+18-24-gbb7c97bddfe-armhf.txt.gz;https://bugs.openjdk.org/secure/attachment/98689/openjdk-19%2B18-24-gbb7c97bddfe-armhf.txt.gz","2022-04-23 09:46;jgneff;openjdk-19+18-25-gbdf8a2a2050-armhf.txt.gz;https://bugs.openjdk.org/secure/attachment/98690/openjdk-19%2B18-25-gbdf8a2a2050-armhf.txt.gz","2022-05-02 08:13;stuefe;readelf-crossbuild.txt;https://bugs.openjdk.org/secure/attachment/98771/readelf-crossbuild.txt","2022-05-02 08:13;stuefe;readelf-output-localbuild.txt;https://bugs.openjdk.org/secure/attachment/98772/readelf-output-localbuild.txt",,arm,,,,,,,,,,,,,,,,"0|i2wr7n:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-19 04:01;stuefe;What are the build flags you use for the crashing builds? What is the hardware?;;;","2022-04-19 04:05;rcastanedalo;ILW = JVM crash; building JaCoCo on ARM32; no known workaround = MMH = P3;;;","2022-04-19 04:25;marchof;The build is started with the following commands:

    bash configure --disable-warnings-as-errors --with-native-debug-symbols=none
    make images

It runs on a Raspberry Pi 4 (within a docker container based on ubuntu:18.04).;;;","2022-04-19 05:12;stuefe;I'm unable to reproduce it on a Raspberry 4 4g with Raspian 32-bit. I did build natively, I tried crossbuilding, ran a number of tests, it just works. You do a scratch build, right?

Could you please build the debug version (configure ... --with-debug-level=fastdebug) and run the actual build with ""make images LOG=debug"", then attach the resulting hs-err file as well as the build log? Please also sync the sources to 21ea740e1da48054ee46efda493d0812a35d786e (JDK-8284699), just to be sure we build the same sources.

Also, there seem to be several crashes here, all in various stub routines. If possible, please attach multiple hs-err files.

--

Have to say, so far this is very strange. The crashes are in several stub routines, but none have to do with my patch. So far I am unsure what to make of it.;;;","2022-04-19 05:14;stuefe;Note that I am on vacation until next week and may only react sporadically.;;;","2022-04-19 05:29;dholmes;[~stuefe] where are you seeing the different error reports? Is there a missing link to an external report?;;;","2022-04-19 05:39;marchof;[~stuefe] I see a single crash reported during the build. Please find the build log attached.

I will create a fastdebug build as requested.;;;","2022-04-19 05:46;stuefe;hs-err file shows crash in atomic_add(), Marc's comment under https://bugs.openjdk.java.net/browse/JDK-8283326 talks about crashing in cmpxchg, so at least two crash locations are involved.;;;","2022-04-19 07:25;marchof;[~stuefe] Sorry, for the confusion. There is only one crash per build (because afterwards the build is terminated). But it looks like it randomly crashes at ~StubRoutines::atomic_add or at ~StubRoutines::atomic_cmpxchg for each build. I added hs_err_pid17036.log as an example for atomic_cmpxchg.;;;","2022-04-19 07:39;stuefe;Still stumped. Cannot reproduce it. Only difference is that I build locally with gcc8 instead of gcc9. I'll retry after my vacation.

Is there a Docker container readily available? Or a DockerFile to build one?;;;","2022-04-19 07:43;marchof;This the Dockerfile I'm using: https://github.com/marchof/PiCI/blob/master/jdk/docker/Dockerfile

It uses the path /workspace which needs to be mapped to the OpenJDK tree.;;;","2022-04-19 11:15;marchof;[~stuefe] The results with fast debug are attached:

- debug-build.log.gz
- debug-hs_err_pid16984.log

Bur first enjoy your vacation! :);;;","2022-04-19 15:42;dholmes;The debug log is intriguing:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (0xe0000000), pid=16984, tid=16989

so we don't even have a clear error cause.

The fact this happens around the stub code does suggest a code generation fault.;;;","2022-04-19 22:58;stuefe;Yes, weird, isn't it? My patch did not touch those stub routines.

My current guess is that by removing the SafeFetch stub routine generation, my patch nudged some hidden bug loose in the stub generator. It was the last routine to be generated. Like an IC flush is now missing or something ? We now generate just fewer code into the code blob, so its smaller.

Yesterday night I finally got it reproduced, but only in a hand-crafted docker container based on Marc's one, and by directly building on the Raspberry. My cross build works with GCC 10, and Marc's build with GCC 9. Maybe that's the difference.

[~marchof] BTW, build times on Raspberry are atrocious. I thought the poor thing was melting on me. You really should look into crossbuilding. I build openjdk arm on my x86 desktop in 2,5 minutes.;;;","2022-04-20 04:26;marchof;I double checked and did two fastdebug builds:

Commit bdf8a2a2050393e91800786f8d5a5d6805f936eb (your change for JDK-8283326): Crashes with Internal Error (0xe0000000)
Commit bb7c97bddfe88cb3261706f5e272fd0418e5238c (parent, also by you): Builds succeeds

;;;","2022-04-21 17:37;jgneff;I'm getting the following reproducible crash when building on 32-bit ARM (""armhf"" Debian architecture) when the build hits the target 'jdk__optimize_image_exec'. I assume my error is related to this bug report, because of the timing, but please let me know if I should instead open a new report.

Optimizing the exploded image
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0xf7a7577c, pid=64825, tid=64844
#
# JRE version: OpenJDK Runtime Environment (19.0+19) (build 19-ea+19-snap)
# Java VM: OpenJDK Server VM (19-ea+19-snap, mixed mode, g1 gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0x64677c]  RuntimeService::init()+0x143
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /build/snapcraft-openjdk-ada10b75ccb0e6a3649b33d25f2b67a7/parts/jdk/build/make/core.64825)
#
# An error report file with more information is saved as:
# /build/snapcraft-openjdk-ada10b75ccb0e6a3649b33d25f2b67a7/parts/jdk/build/make/hs_err_pid64825.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

These are builds that I run every week successfully (until today) on the Canonical Launchpad build farm. I can also try locally on a Raspberry Pi 2 Model B Rev 1.1, if necessary, and I can change any parameters of the build to try other tests. My build configuration is in the following YAML file:

https://github.com/jgneff/openjdk/blob/edge/snap/snapcraft.yaml#L146
;;;","2022-04-23 09:45;jgneff;Despite the different error message, it does seem that I'm hitting the same issue. Builds on 'armhf' with the following commit fail:

8283326: Implement SafeFetch statically
https://github.com/openjdk/jdk/commit/bdf8a2a2050

while builds with its parent commit work:

https://github.com/openjdk/jdk/commit/bb7c97bddfe
8284874: Add comment to ProcessHandle/OnExitTest to describe zombie problem

I attached ""before"" and ""after"" build logs showing the working build before the commit and the failing build after the commit.

Before: openjdk-19+18-24-gbb7c97bddfe-armhf.txt.gz
From https://github.com/openjdk/jdk
Note: checking out 'bb7c97bddfe88cb3261706f5e272fd0418e5238c'.
HEAD is now at bb7c97bddfe 8284874: Add comment to ProcessHandle/OnExitTest to describe zombie problem

After: openjdk-19+18-25-gbdf8a2a2050-armhf.txt.gz
From https://github.com/openjdk/jdk
Note: checking out 'bdf8a2a2050393e91800786f8d5a5d6805f936eb'.
HEAD is now at bdf8a2a2050 8283326: Implement SafeFetch statically

So far, I get a SIGSEGV at the same location every time:

Optimizing the exploded image
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0xf74db1ac, pid=64500, tid=64515
#
# JRE version: OpenJDK Runtime Environment (19.0) (build 19-internal-adhoc.root.build)
# Java VM: OpenJDK Server VM (19-internal-adhoc.root.build, mixed mode, g1 gc, linux-arm)
# Problematic frame:
# V  [libjvm.so+0x6451ac]  RuntimeService::init()+0x13b
;;;","2022-04-26 11:51;stuefe;Temp. workaround under review: https://github.com/openjdk/jdk/pull/8399 (https://bugs.openjdk.java.net/browse/JDK-8285675);;;","2022-04-27 11:02;marchof;I can confirm that since the above workaround was merged to master the native build on arm32 is green again. Thanks!;;;","2022-04-28 10:19;snazarki;Could this be due to thumb interworking?  Some logs contains odd value at return register (LR), and CPSR indicates CPU working in thumb mode (bit 5 is set). Could anybody check what mode is used for assembler file compilation? ;;;","2022-05-02 08:12;stuefe;[~snazarki] thanks for the hint. Remains strange. AFAICS we don't force the ISA anywhere - no -marm or -mthumb - nor do we set -mthumb-interwork.

I compared the object files for the assembler file in question from both crossbuild (which works) and local build (which does not work). In both cases I only see a single code section with ""$a"", so it would be ARM ISA? But then, the working variant has a ""Tag_THUMB_ISA_use: Thumb-1"", the non-working one says ""Tag_THUMB_ISA_use: Thumb-2"". I attached both files.

Side question, we should not even need -mthumb-interwork, or? Should we not just simply use the same ISA for all compile units?
;;;","2022-05-04 13:42;snazarki;[~stuefe] Those tags just indicate supported ISA.  Section with $a points to ARM code, and it highly likely SafeFetch32_impl is also in ARM mode (can be checked with readelf --syms: if address is even this is ARM function).  Is it possible to share  disassembler dump for the function? ;;;","2022-05-16 05:17;thartmann;Moved to hotspot/runtime.;;;","2022-05-27 02:22;stuefe;Picked this up again.

This is either a problem with the tool chain, or with the way we call the assembly, or the way we build the assembly.

TL;DR VM uses thumb mode globally, the assembly is in ARM, but we don't switch to ARM when calling it.

-------------------

SafeFetch32_impl is implemented like this:
```
    .globl SafeFetch32_impl
    .globl _SafeFetch32_fault
    .globl _SafeFetch32_continuation

SafeFetch32_impl:
_SafeFetch32_fault:
    ldr      r0, [r0]
    bx       lr
_SafeFetch32_continuation:
    mov      r0, r1
    bx       lr
```

SafeFetch32 Wrapper is C++, looks like this:

```
extern ""C"" int SafeFetch32_impl(int* adr, int errValue);
inline int SafeFetch32(int* adr, int errValue) {
  return SafeFetch32_impl(adr, errValue);
}
```

I step through VM initialization. VM seems to be always in thumb mode: cpsr=xxxx030 and lr is odd-numbered. So that seems to be the standard in this build. Ok.

Now I am in the SafeFetch32 wrapper, before stepping into the SafeFetch32_impl assembly routine (named SafeFetch32_fault since the fault label points to the start of the function):

```
(gdb) 
0xb659d62a      52        return SafeFetch32_impl(adr, errValue);
8: x/3i $pc
=> 0xb659d62a <SafeFetch32(int*, int)+14>:      bl      0xb665e36c <_SafeFetch32_fault>
   0xb659d62e <SafeFetch32(int*, int)+18>:      mov     r3, r0
   0xb659d630 <SafeFetch32(int*, int)+20>:      mov     r0, r3
(gdb)  info registers
r0             0x7438d688          1949881992
r1             0xcafebabe          3405691582
r2             0x3                 3
r3             0xdeadbeef          3735928559
r4             0xb6d47c70          3067378800
r5             0xb5d1afec          3050418156
r6             0x75609c3c          1969265724
r7             0xb5d1af40          3050417984
r8             0xb5d1ba40          3050420800
r9             0x7438ab90          1949870992
r10            0xb5b17138          3048304952
r11            0xb5d1d468          3050427496
r12            0xb6d47fec          3067379692
sp             0xb5d1af40          0xb5d1af40
lr             0xb65ba1af          -1235508817
pc             0xb659d62a          0xb659d62a <SafeFetch32(int*, int)+14>
cpsr           0x800f0030          -2146500560
fpscr          0x60000010          1610612752
```

Now I am inside of _SafeFetch32_fault. We did not switch the execution mode, we are still in thumb mode.

```
(gdb) stepi
_SafeFetch32_fault () at /shared/projects/openjdk/jdk-jdk/source/src/hotspot/os_cpu/linux_arm/safefetch_linux_arm.S:36
36          ldr      r0, [r0]
8: x/3i $pc
=> 0xb665e36c <_SafeFetch32_fault>:     ldr     r0, [r0]
   0xb665e370 <_SafeFetch32_fault+4>:   bx      lr
   0xb665e374 <_SafeFetch32_continuation>:      mov     r0, r1
(gdb)  info registers
r0             0x7438d688          1949881992
r1             0xcafebabe          3405691582
r2             0x3                 3
r3             0xdeadbeef          3735928559
r4             0xb6d47c70          3067378800
r5             0xb5d1afec          3050418156
r6             0x75609c3c          1969265724
r7             0xb5d1af40          3050417984
r8             0xb5d1ba40          3050420800
r9             0x7438ab90          1949870992
r10            0xb5b17138          3048304952
r11            0xb5d1d468          3050427496
r12            0xb6d47fec          3067379692
sp             0xb5d1af40          0xb5d1af40
lr             0xb659d62f          -1235626449
pc             0xb665e36c          0xb665e36c <_SafeFetch32_fault>
cpsr           0x800f0030          -2146500560
fpscr          0x60000010          1610612752
```

I step one more instruction. PC only advances by two bytes because the CPU thinks thumb. But this was a four byte instruction. Disassembler is confused now:

```
(gdb) stepi
0xb665e36e      36          ldr      r0, [r0]
8: x/6i $pc
=> 0xb665e36e <_SafeFetch32_fault+2>:                   ; <UNDEFINED> instruction: 0xff1ee590
   0xb665e372 <_SafeFetch32_fault+6>:   andeq   lr, r1, pc, lsr #2
   0xb665e376 <_SafeFetch32_continuation+2>:                    ; <UNDEFINED> instruction: 0xff1ee1a0
   0xb665e37a <_SafeFetch32_continuation+6>:    strlt   lr, [r0, #303]  ; 0x12f
   0xb665e37e <__static_initialization_and_destruction_0(int, int)+2>:  sub     sp, #8
   0xb665e380 <__static_initialization_and_destruction_0(int, int)+4>:  add     r7, sp, #0
```

=============

VM was compiled in thumb mode, assembler routine in ARM mode, but we did not switch from thumb to ARM when calling into the assembler routine.

The call was generated by gcc:

```
=> 0xb659d62a <SafeFetch32(int*, int)+14>:      bl      0xb665e36c <_SafeFetch32_fault>
```

It uses a ""BL"", not a ""BLX"" instruction.
 If I understand ARM assembly correctly [1], it should have used ""BLX"" to switch the instruction set. I am sure the answer is somehow in how we use the toolchain.
 
[1] https://developer.arm.com/documentation/dui0489/h/arm-and-thumb-instructions/b--bl--bx--blx--and-bxj
;;;","2022-05-27 05:41;stuefe;I wondered why only Marc's reproduction scenario, based on an Ubuntu18.04 docker image, shows the error.

It looks like in all other build environments I tested (devkit crossbuild, Raspberry OS 32), GCC generates ARM code too, so it does not clash with the ARM code in the static assembler routine. But the GCC from Ubuntu 18.04 generates THUMB code, because it itself was built with --with-mode=thumb. So this error is hidden by the (typical?) implicit -marm code generation used when building OpenJDK for arm32.;;;","2022-05-27 06:11;stuefe;One possible solution would be to add the missing `.type function` to the assembler function, in my test this causes with-thumb-built-gcc to emit the correct call instruction (blx) and we switch to arm mode when calling into SafeFetch. But I'm not sure this is the best solution. Should we not use the same mode for all compilation units? Why leave this up to the whims of the toolchain builder?;;;","2022-06-02 02:19;aph;We should use `.type function` anyway, for ABI compatibility.;;;","2022-06-20 03:33;stuefe;PR open at https://github.com/openjdk/jdk/pull/9213;;;","2022-06-20 03:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9213
Date: 2022-06-20 08:24:49 +0000;;;","2022-06-24 06:21;stuefe;This has been fixed with JDK-8288719. I don't know why Skara did not pick up on that automatically.;;;","2022-06-24 09:17;dcubed;Dukebot added a comment - Yesterday
Changeset: 26c03c18
Author: Thomas Stuefe <stuefe@openjdk.org>
Date: 2022-06-23 10:15:05 +0000
URL: https://git.openjdk.org/jdk/commit/26c03c1860c6da450b5cd6a46576c78bea682f96;;;","2022-06-24 09:20;dcubed;> This has been fixed with JDK-8288719. I don't know why Skara did not pick up on that automatically. 

This bug's ""Fix Version/s"" was set to '19' at the time of the integration so a backport
bug was created.;;;","2022-06-24 09:25;dcubed;Fix was pushed while main bug was targeted to '19'. Reset the main bug to fixed in '20' and copied the Robo Duke entry here.;;;","2023-07-13 04:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1577
Date: 2023-07-13 11:18:51 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,
"-Xdoclint:all returns warning for records, even when documented properly",JDK-8284994,5072712,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,webbuggrp,webbuggrp,2022-04-16 18:59,2022-04-27 23:30,2023-10-01 09:56,2022-04-26 08:45,17,18,,,,,,,,,,19,tools,,0,additional-information-received,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
System agnostic -- problem shows up on all systems

A DESCRIPTION OF THE PROBLEM :
When using the command line tool -Xdoclint, I receive a warning on my record, even when I have documented them properly.



STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile the executable test case with the following command

javac      XdoclintDoesntHandleRecordJavadocCorrectly.java     -Xdoclint:all

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
I expect it to compile without warnings
ACTUAL -
Instead, I get this output

XdoclintDoesntHandleRecordJavadocCorrectly.java:14: warning: no comment
int a,
    ^
XdoclintDoesntHandleRecordJavadocCorrectly.java:16: warning: no comment
int b,
    ^
XdoclintDoesntHandleRecordJavadocCorrectly.java:18: warning: no comment
int c
    ^
3 warnings


---------- BEGIN SOURCE ----------
/**
 *
 * Comment.
 *
 * @param a Comment.
 * @param b Comment.
 * @param c Comment.
 *
 */
public record XdoclintDoesntHandleRecordJavadocCorrectly(
/** Comment. */
int a,
/** b Comment. */
int b,
/** @param c Comment. */
int c
) {}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None really, aside from just turning off the warnings

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285496,,,,,,,,,,,,,,,"2022-04-19 02:14;adev;XdoclintDoesntHandleRecordJavadocCorrectly.java;https://bugs.openjdk.org/secure/attachment/98635/XdoclintDoesntHandleRecordJavadocCorrectly.java",,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wqrf:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-04-19 02:13;adev;using javadoc with given reproducer didn't reproduce any warning:
PS C:\test> C:\jdk\jdk-18_windows-x64_bin\jdk-18\bin\javadoc .\XdoclintDoesntHandleRecordJavadocCorrectly.java -Xdoclint:all
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
Loading source file .\XdoclintDoesntHandleRecordJavadocCorrectly.java...
Constructing Javadoc information...
Building index for all the packages and classes...
Standard Doclet version 18+36-2087
Building tree for all the packages and classes...
Generating .\XdoclintDoesntHandleRecordJavadocCorrectly.html...
Generating .\package-summary.html...
Generating .\package-tree.html...
Generating .\overview-tree.html...
Building index for all classes...
Generating .\allclasses-index.html...
Generating .\allpackages-index.html...
Generating .\index-all.html...
Generating .\index.html...
Generating .\help-doc.html...
PS C:\test>;;;","2022-04-19 02:14;adev;I could not reproduce the issue with the given reproducer.;;;","2022-04-19 22:41;pnarayanaswa;Additional Information from submitter:
===========================
Use javac, not javadoc. My bug report is reporting an issue with javac's -Xdoclint option. Maybe javadoc's -Xdoclint works fine, but that is not what this bug report is about.
Ah, I understand where the confusion is. I labelled this bug using the wrong subcomponent name. I labelled the bug with a subcomponent of javadoc instead of javac. That is my fault for being misleading.

To be clear, this bug is still a problem that needs to be fixed, and is very much reproducible by multiple people

https://stackoverflow.com/questions/71726595/how-to-javadoc-a-record-without-warnings-from-xdoclint

I just made the mistake of using the wrong subcomponent label. My apologies.;;;","2022-04-19 23:01;adev;The issue is reproducible with javac XdoclintDoesntHandleRecordJavadocCorrectly.java -Xdoclint:all ;;;","2022-04-21 18:23;jjg;Yes, this is a bug, that should be fixed.

That being said, it is not common to run DocLint on comments on all declarations, including private ones, and so a plausible workaround, for now, is to use a more conventional option, like -Xdoclint:all/protected, to just run DocLint on standard API comments, for public and protected API.;;;","2022-04-21 18:33;jjg;There are various contributing factors here.

1. javac vs javadoc.   These two tools scan in somewhat different ways to find comments to check.   javadoc has more info, and knows exactly which comments need to be read and checked by DocLint.  javac has less info, and so relies on command-line options to specify the packages and access levels for which two scan for comments. That explains the observed differences in the two tools.

2a.  The components of a record are modeled as fields. the DocLint Checker should not expect to find comments on these fields.

2b. The ""inverse"" of 2a.  The DocLint Checker *should* check the `@param` tags for the record declaration itself .. that is, all components should have a corresponding @param.

and indirectly related, the DocLint Checker should check that in all contexts in which `@param` can appear,
that the names are ""valid"", leading to a possible new message, ""unexpected @param <name>""
;;;","2022-04-23 10:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8375
Date: 2022-04-23 17:03:06 +0000;;;","2022-04-26 08:45;dukebot;Changeset: 20a132d4
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-04-26 15:42:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/20a132d460bc34fbf59774bc7493d93472b7d52a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replace System.exit call in swing tests with RuntimeException,JDK-8284993,5072781,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2022-04-19 01:53,2022-04-27 23:27,2023-10-01 09:56,2022-04-21 23:50,17,18,19,,,,,,,,,19,client-libs,,0,sn_116,test_sprint,,,,,,,,,,,,,,,,,,,Few swing tests call System.exit() which might stop the test harness from executing further tests if any of the test fail. We should replace with RuntimeException.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wr6r:",9223372036854775807,b20,,,,,,,,,,,"2022-04-19 01:53;psadhukhan;https://mach5.us.oracle.com/mdash/jobs/prsadhuk-jdk-20220419-0416-31366618?search=result.status%3APASSED

https://mach5.us.oracle.com/mdash/jobs/prsadhuk-jdk-20220419-0550-31369160?search=result.status%3APASSED;;;","2022-04-19 02:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8293
Date: 2022-04-19 09:10:30 +0000;;;","2022-04-21 23:50;dukebot;Changeset: 80219a48
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-04-22 06:48:01 +0000
URL:       https://git.openjdk.java.net/jdk/commit/80219a48c34719263cd41dacd02ba19dd39b1b27
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix misleading Vector API doc for LSHR operator ,JDK-8284992,5072780,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jiefu,jiefu,jiefu,2022-04-19 01:36,2022-07-28 07:53,2023-10-01 09:56,2022-04-29 16:06,17,18,19,,,,,,,,,19,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,noreg-self,oracle-triage-19,tencent-interest,vectorapi,,,,,,,,,,,,"This is misleading which may lead to bugs for Java developers.
This is because for negative byte/short elements, the results computed by `LSHR` will be different from that of `>>>`.
For more details, please see https://github.com/openjdk/jdk/pull/8276#issue-1206391831 .",,,,,,,,,,JDK-8286901,JDK-8286792,JDK-8286404,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285771,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wr6j:",9223372036854775807,b21,,,,,,,,,,,"2022-04-19 01:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8291
Date: 2022-04-19 08:41:50 +0000;;;","2022-04-20 19:06;dlong;ILW = Technical error in documentation; API documentation; no workaround = MMH = P3;;;","2022-04-29 16:06;dukebot;Changeset: e54f26aa
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2022-04-29 23:01:37 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e54f26aa3d5d44264e052bc51d3d819a8da5d1e7
;;;","2022-05-06 07:17;jiefu;Fix request for jdk17u.

I'd like to backport this patch to fix the incorrect doc for vectorapi LSHR operator.
Patch can be applied cleanly and only the api documentation is affected.
Thanks.;;;","2022-05-06 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/389
Date: 2022-05-06 14:18:48 +0000;;;","2022-05-10 19:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/129
Date: 2022-05-11 02:18:09 +0000;;;","2022-05-10 19:25;jiefu;Fix request for jdk18u.

I'd like to backport this patch to fix the incorrect doc for vectorapi LSHR operator.
Patch can be applied cleanly and only the api documentation is affected.
Thanks.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test vmTestbase/nsk/stress/except/except010.java times out with -Xcomp  -XX:+DeoptimizeALot,JDK-8284980,5072771,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2022-04-18 17:13,2022-09-22 05:39,2023-10-01 09:56,2022-05-10 12:04,19,repo-loom,,,,,,,,,,19,hotspot,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,loom,noreg-self,tier8,,,,,,,,,,,,,,,"Test vmTestbase/nsk/stress/except/except010.java times out with -Xcomp  -XX:+DeoptimizeALot in repo-loom

Not reproduced with single run like:
java -Xms50m -Xmx200m -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:+DeoptimizeALot  -cp vmTestbase  nsk.stress.except.except010",,,,,,,,,,JDK-8292456,JDK-8294232,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8139875,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wr4j:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-05-08 19:50;lmesnik;Test run infinite recursion and have the same issue as JDK-8139875

It should be fixed same way
@requires (vm.opt.DeoptimizeALot != true & vm.compMode != ""Xcomp"");;;","2022-05-09 11:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8601
Date: 2022-05-09 17:56:29 +0000;;;","2022-05-09 11:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8602
Date: 2022-05-09 18:02:13 +0000;;;","2022-05-10 12:04;dukebot;Changeset: 7704eb18
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2022-05-10 19:02:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7704eb18664606361bc87d54d102533530f1d2dd
;;;","2022-09-21 05:53;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-09-21 06:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/715
Date: 2022-09-21 12:58:09 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MetricsTesterCgroupV2.getLongValueEntryFromFile fails when named value doesn't exist,JDK-8284977,5072768,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,iklam,iklam,2022-04-18 15:59,2023-02-22 07:00,2023-10-01 09:56,2022-06-14 23:43,11.0.6-oracle,17,19,,,,,,,,,20,core-libs,,0,cgroupsv2,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk19u-fix-request,jdk19u-fix-SQE-OK,jdk19u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,testbug,,,,,,,,,"This is a test bug.

When running test/jdk/jdk/internal/platform/cgroup/TestCgroupMetrics.java on ubuntu 21.10, this test looks for a named value ""nr_periods"" in the file /sys/fs/cgroup/..../cpu.stat

However, if this file exists but doesn't contain this named value, the following code fails:

    private long getLongValueEntryFromFile(String file, String metric) {
        Path filePath = Paths.get(UNIFIED.getPath(), file);
        try {
            String strVal = Files.lines(filePath).filter(l -> l.startsWith(metric)).collect(Collectors.joining());
            String[] keyValues = strVal.split(""\\s+"");
            String value = keyValues[1];   <<< HERE
            return convertStringToLong(value);
        } catch (IOException e) {
            return NOT_AVAILABLE;
        }
    }



java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
	at jdk.test.lib.containers.cgroup.MetricsTesterCgroupV2.getLongValueEntryFromFile(MetricsTesterCgroupV2.java:125)
	at jdk.test.lib.containers.cgroup.MetricsTesterCgroupV2.testCpuSchedulingMetrics(MetricsTesterCgroupV2.java:324)
	at jdk.test.lib.containers.cgroup.MetricsTester.testAll(MetricsTester.java:59)
	at TestCgroupMetrics.main(TestCgroupMetrics.java:47)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)",,,,,,,,,,JDK-8302809,JDK-8293138,JDK-8301912,JDK-8299307,JDK-8289914,JDK-8292961,JDK-8300744,JDK-8302730,JDK-8294575,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288398,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wr3v:",9223372036854775807,b03,,,,,,,,,,,"2022-06-14 02:27;sgehwolf;According to the docs: https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v2.html#cpu

The cpu.stat file always exists, but nr_periods et. al. only if the CPU controller is enabled. So there are two ways to fix this: 1) Don't run the test on a system where not all controllers are enabled (tests would be useless there). 2) handle the case where the filter might return an empty result (as product code does).;;;","2022-06-14 03:05;sgehwolf;Possible fix (untested)

diff --git a/test/lib/jdk/test/lib/containers/cgroup/MetricsTesterCgroupV2.java b/test/lib/jdk/test/lib/containers/cgroup/MetricsTesterCgroupV2.java
index 25d6c73cbb5..a2c5695730c 100644
--- a/test/lib/jdk/test/lib/containers/cgroup/MetricsTesterCgroupV2.java
+++ b/test/lib/jdk/test/lib/containers/cgroup/MetricsTesterCgroupV2.java
@@ -121,6 +121,12 @@ public class MetricsTesterCgroupV2 implements CgroupMetricsTester {
         Path filePath = Paths.get(UNIFIED.getPath(), file);
         try {
             String strVal = Files.lines(filePath).filter(l -> l.startsWith(metric)).collect(Collectors.joining());
+            if (strVal.isEmpty()) {
+                // For certain files the match for the metric might not exist
+                // e.g. cpu.stat's nr_periods iff the controller is not enabled.
+                // Return unlimited in that case
+                return UNLIMITED;
+            }
             String[] keyValues = strVal.split(""\\s+"");
             String value = keyValues[1];
             return convertStringToLong(value);
;;;","2022-06-14 04:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9153
Date: 2022-06-14 11:26:17 +0000;;;","2022-06-14 23:42;dukebot;Changeset: 444a0d98
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-06-15 06:39:23 +0000
URL:       https://git.openjdk.org/jdk/commit/444a0d98ac06ab043e3b11281234fd515abff302
;;;","2022-07-06 04:25;mbaesken;jdk17u backport request
I would like to have the patch in jdk17u-dev as well because the issue is present there too. The patch applies cleanly and is low risk.;;;","2022-07-06 04:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/532
Date: 2022-07-06 11:20:41 +0000;;;","2022-08-23 22:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/13
Date: 2022-08-24 05:47:05 +0000;;;","2022-08-23 22:54;clanger;Fix request (19u):
We see the issue in our tests for jdk19u. Hence requesting backport. Applies cleanly and passed SAP test matrix.;;;","2022-09-29 01:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1379
Date: 2022-09-29 08:52:35 +0000;;;","2022-09-29 02:04;jdowland;Fix Request (11u)

Clean test-only backport that fixes some test executions. Thanks!;;;","2022-12-20 00:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/215
Date: 2022-12-20 08:07:14 +0000;;;","2022-12-22 09:14;sgehwolf;Fix Request (OpenJDK 8u) on behalf of Kurashige Taizo:

This issue is observable in the jdk8u-dev tree too on some systems. Test only fix low risk. Clean backport.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
closed test sun/java2d/OpenGL/XORPaint.java is unstable,JDK-8284965,5072751,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2022-04-18 08:55,2022-04-27 23:31,2023-10-01 09:56,2022-04-26 13:34,,,,,,,,,,,,19,client-libs,,0,sn_116,test_sprint,,,,,,,,,,,,,,,,,,,"There 5 open bugs which mention sun/java2d/OpenGL/XORPaint.java as a
test that fails in some cases and it is problem listed on the closed problem list.
But none of the bugs are specifically about this test.
Eg see https://bugs.openjdk.java.net/browse/JDK-8238720

A couple of the reasons it fails are
- sampling a pixel right on the boundary of a rectangle so that in some hidpi cases it is not the exact value expected
- painting only once and assuming it will not get repainted by bailing at the start of paint() on 2nd and later calls and so when it does, the screen grab is all white.

I'd like to stabilise it and move it to open so I need a new bug specific to this test.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wr03:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-04-21 10:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8345
Date: 2022-04-21 17:15:20 +0000;;;","2022-04-26 13:34;dukebot;Changeset: 110edd99
Author:    Phil Race <prr@openjdk.org>
Date:      2022-04-26 20:31:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/110edd9999c1d26154fc090562d7c8b2ded18a10
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StructuralMostSpecificTest.java hits native OOME on ia32 Windows,JDK-8284959,5072745,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dbuck,dbuck,dbuck,2022-04-18 08:16,2022-05-05 08:29,2023-10-01 09:56,2022-04-21 14:31,8u321,,,,,,,,,,,8u341,tools,,0,9-na,noreg-self,,,,,,,,,,,,,,,,,,,"Seeing failures with errors like below on test runs:
===
java.lang.OutOfMemoryError: unable to create new native thread
	at java.lang.Thread.start0(Native Method)
	at java.lang.Thread.start(Thread.java:719)
	at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:957)
	at java.util.concurrent.ThreadPoolExecutor.processWorkerExit(ThreadPoolExecutor.java:1025)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)
===

Not surprising that 32-bit Windows is the only platform failing; it has the most cramped address space.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,,windows,,,,,,"0|i2wqyr:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-04-18 08:25;dbuck;Regardless of OS or architecture, this same test has a significantly smaller native footprint in JDK 9 and later. For example, on Linux-x64, we see almost a 2/3 drop: 612356k -> 228720k. My best guess is that JDK-8129962 is mostly responsible for this difference, but other changes in the VM and/or langtools repo may have played a role. This is only an issue for JDK 8.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential leak awtImageData/color_data when initializes X11GraphicsEnvironment,JDK-8284956,5072741,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-04-18 06:12,2022-07-05 23:09,2023-10-01 09:56,2022-05-13 06:14,11,17,18,19,,,,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,redhat-interest,,,,,,,,,,,,,,,"valgrind caught following leak:

==2108002== 560 bytes in 1 blocks are definitely lost in loss record 8,986 of 9,705
==2108002==    at 0x4849464: calloc (vg_replace_malloc.c:1328)
==2108002==    by 0x4656BA8E: awt_allocate_colors (X11Color.c:339)
==2108002==    by 0x4656D223: awtCreateX11Colormap (X11Color.c:1265)
==2108002==    by 0x4657B38E: findWithTemplate (awt_GraphicsEnv.c:169)
==2108002==    by 0x4657B56C: makeDefaultConfig (awt_GraphicsEnv.c:248)
==2108002==    by 0x4657C7F0: Java_sun_awt_X11GraphicsEnvironment_initNativeData (awt_GraphicsEnv.c:705)
==2108002==    by 0x168065D0: ???

The leak originates from the loop in findWithTemplate(), where it may call awtCreateX11Colormap() multiple times to calloc awtImageData without freeing/reusing the existing ones.

AwtGraphicsConfigData.color_data has the same pattern, even it did not show in the leak profile.
 ",,,,,,,,,,JDK-8289374,JDK-8289375,JDK-8289787,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2wqxv:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-04-20 06:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8317
Date: 2022-04-20 13:48:19 +0000;;;","2022-05-13 06:14;dukebot;Changeset: cbe7e7bd
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-05-13 13:12:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cbe7e7bd7f7e7ea9f7221ef206917c58baff7696
;;;","2022-06-08 12:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/448
Date: 2022-06-08 19:08:39 +0000;;;","2022-06-08 12:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1132
Date: 2022-06-08 19:14:44 +0000;;;","2022-06-08 13:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/149
Date: 2022-06-08 20:28:11 +0000;;;","2022-06-08 13:58;zgu;Fix Request (18u)

A clean backport to fix memory leaks.
;;;","2022-06-08 13:58;zgu;Fix Request (17u)

A clean backport to fix memory leaks.
;;;","2022-06-08 13:58;zgu;Fix Request (11u)

A clean backport to fix memory leaks.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Compile::flatten_alias_type asserts with ""indeterminate pointers come only from unsafe ops""",JDK-8284951,5072556,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,thartmann,webbuggrp,webbuggrp,2022-04-14 01:45,2023-08-02 03:45,2023-10-01 09:57,2022-04-26 05:06,11,17,18,19,,,,,,,,19,hotspot,,0,c2,dcsswa,oracle-triage-19,reproducer-yes,webbug,,,,,,,,,,,,,,,,"Running the JVM with the combination of flags ""-Xcomp -XX:-InlineUnsafeOps -XX:-ReduceInitialCardMarks -XX:+StressReflectiveCode"" yields the following assertion failure:

# A fatal error has been detected by the Java Runtime Environment:
(...)
#  assert(InlineUnsafeOps) failed: indeterminate pointers come only from unsafe ops
#
# JRE version: Java(TM) SE Runtime Environment (19.0+18) (fastdebug build 19-ea+18-1211)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+18-1211, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xa9b56c]  Compile::flatten_alias_type(TypePtr const*) const+0xf2c
(...)

The failure is *not* specific for the attached code, it can be reproduced just by starting up the JVM.

HOW TO REPRODUCE:

- JDK 11 (fastdebug):

$ java -Xcomp -XX:-InlineUnsafeOps -XX:-ReduceInitialCardMarks -XX:+StressReflectiveCode -XX:CompileCommand=compileonly,*::clone

(...)
assert(InlineUnsafeOps) failed: indeterminate pointers come only from unsafe ops
(...)

- JDK 17, 18, 19b18 (fastdebug):

$ java -Xcomp -XX:-InlineUnsafeOps -XX:-ReduceInitialCardMarks -XX:+StressReflectiveCode -XX:CompileCommand=compileonly,*::resolve

ORIGINAL REPORT FROM WEBBUG GROUP:

ADDITIONAL SYSTEM INFORMATION :
OS: Ubuntu18.04
jdk11
$ java -version
openjdk version ""11.0.15-internal"" 2022-04-19
OpenJDK Runtime Environment (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u)
OpenJDK 64-Bit Server VM (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u, mixed mode, sharing)

jdk17
$ java -version
openjdk version ""17.0.3-internal"" 2022-04-19
OpenJDK Runtime Environment (fastdebug build 17.0.3-internal+0-adhoc.user.jdk17u)
OpenJDK 64-Bit Server VM (fastdebug build 17.0.3-internal+0-adhoc.user.jdk17u, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
JVM crashed when running the following test under jdk11 and jdk17.
Reproduce:
$ java -Xcomp -XX:-InlineUnsafeOps -XX:-InlineMethodsWithExceptionHandlers -XX:-ReduceInitialCardMarks -XX:+StressReflectiveCode Test
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/user/jdk_source/jdk11u/src/hotspot/share/opto/compile.cpp:1439), pid=42185, tid=42197
#  assert(InlineUnsafeOps) failed: indeterminate pointers come only from unsafe ops
#
# JRE version: OpenJDK Runtime Environment (11.0.15) (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 11.0.15-internal+0-adhoc.user.jdk11u, compiled mode, sharing, tiered, compressed oops, g1 gc, linux-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xcomp -XX:-InlineUnsafeOps -XX:-InlineMethodsWithExceptionHandlers -XX:-ReduceInitialCardMarks -XX:+StressReflectiveCode Test

Host: wen-PowerEdge-R740, Intel(R) Xeon(R) Gold 6248R CPU @ 3.00GHz, 96 cores, 251G, Ubuntu 18.04.6 LTS
Time: Thu Apr 14 15:24:29 2022 CST elapsed time: 3.861922 seconds (0d 0h 0m 3s)

---------------  T H R E A D  ---------------

Current thread (0x00007fc128639000):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=42197, stack(0x00007fc0b453b000,0x00007fc0b463c000)]


Current CompileTask:
C2:   3861 1507   !b  4       java.lang.invoke.MemberName::clone (14 bytes)

Stack: [0x00007fc0b453b000,0x00007fc0b463c000],  sp=0x00007fc0b46363f0,  free space=1004k
Native frames: (J=compiled Java code, A=aot compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x18de9ca]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x1ca
V  [libjvm.so+0x18dfabf]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x2f
V  [libjvm.so+0xb4cb80]  report_vm_error(char const*, int, char const*, char const*, ...)+0x100
V  [libjvm.so+0xa5be33]  Compile::flatten_alias_type(TypePtr const*) const+0xdd3
V  [libjvm.so+0xa65dd6]  Compile::find_alias_type(TypePtr const*, bool, ciField*)+0x76
V  [libjvm.so+0x1306d78]  PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*)+0x98
V  [libjvm.so+0x1309acb]  PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*)+0x23b
V  [libjvm.so+0x12fea50]  PhaseMacroExpand::expand_macro_nodes()+0x940
V  [libjvm.so+0xa6f995]  Compile::Optimize()+0xc15
V  [libjvm.so+0xa70c7f]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0x107f
V  [libjvm.so+0x87377b]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0xfb
V  [libjvm.so+0xa7e2d0]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x390
V  [libjvm.so+0xa7f298]  CompileBroker::compiler_thread_loop()+0x418
V  [libjvm.so+0x181006b]  JavaThread::thread_main_inner()+0x20b
V  [libjvm.so+0x180bea5]  Thread::call_run()+0x75
V  [libjvm.so+0x151cb06]  thread_native_entry(Thread*)+0x106





---------- BEGIN SOURCE ----------
Download TestStressReflectiveCode.zip from:
https://drive.google.com/file/d/1lW_IonDXEb-pSk7xttZPkl2rBTC0uXad/view?usp=sharing
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313405,,,,,,,,,,,,,,,,,"2022-04-18 02:17;sswsharm;TestStressReflectiveCode.zip;https://bugs.openjdk.org/secure/attachment/98623/TestStressReflectiveCode.zip",,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wq8r:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-18 02:20;sswsharm;This issue is not reproducible. 
Since,  VM option 'InlineMethodsWithExceptionHandlers' is develop and is available only in debug version of VM, checked on debug builds but no crash is observed 

OS: Windows 10
JDK 8u321 debug : Pass
JDK 11 debug: Pass
JDK 17 debug: Pass

Moving it to JDK for further analysis.;;;","2022-04-19 01:53;rcastanedalo;ILW = JVM assertion failure, unlikely combination of flags, avoid flag combination = MLL = P5;;;","2022-04-21 07:48;thartmann;This even reproduces with a plain:
java -Xcomp -XX:-InlineUnsafeOps -XX:-ReduceInitialCardMarks -XX:+StressReflectiveCode;;;","2022-04-25 03:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8381
Date: 2022-04-25 10:25:25 +0000;;;","2022-04-26 05:06;dukebot;Changeset: 8de3c655
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-04-26 12:05:24 +0000
URL:       https://git.openjdk.java.net/jdk/commit/8de3c655457a33e64c4d1fd72603ea8b712e25cc
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CgroupV1 detection code should consider memory.swappiness,JDK-8284950,5072738,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pxie,pxie,pxie,2022-04-18 01:45,2023-09-25 00:36,2023-10-01 09:57,2022-05-15 23:42,,,,,,,,,,,,19,hotspot,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,tencent-interest,,,,,,,,,,,,,,,"cgroup v1 system

Operating System Metrics:
    Provider: cgroupv1
    Effective CPU Count: 8
    CPU Period: 100000us
    CPU Quota: -1
    CPU Shares: -1
    List of Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Effective Processors: N/A
    List of Memory Nodes, 1 total: 
    0 
    List of Available Memory Nodes: N/A
    Memory Limit: 50.00M
    Memory Soft Limit: Unlimited
    Memory & Swap Limit: 100.00M
    Maximum Processes Limit: 4194305

set memory.swappiness to 0,swap space will not be used
https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt

Memory & Swap Limit should be 50.00M

test case:
cgcreate -g memory:foo1
cd /sys/fs/cgroup/memory/foo1
echo 52428800 > memory.limit_in_bytes
echo 104857600 > memory.memsw.limit_in_bytes 
memory.swappiness default value is 60
cgexec -g memory:foo1 java -XshowSettings:system -Xms60m -XX:+AlwaysPreTouch  -version  (success)


echo 0 >  memory.swappiness

cgexec -g memory:foo1 java -XshowSettings:system -Xms60m -XX:+AlwaysPreTouch  -version (killed)


",,,,,,,,,,JDK-8294388,JDK-8302948,JDK-8292768,JDK-8292767,JDK-8294542,JDK-8302627,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292852,JDK-8316418,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqx7:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-18 02:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8285
Date: 2022-04-18 09:07:31 +0000;;;","2022-04-20 02:04;sgehwolf;memory.swappiness is cgroups v1 only (not supported on cgroups v2). Therefore, this is a cgroups v1 only bug.;;;","2022-04-20 10:52;sgehwolf;Also note that podman version < 4.0.x won't set memory.swappiness in the cgroups filesystem. The reproducer for podman/docker is:

$ sudo podman run --memory=100m --memory-swappiness=0 --rm -ti -v $(pwd)/build/linux-x86_64-server-release/images/jdk:/opt/jdk:z fedora:35
[root@5187da19e721 /]# cat /sys/fs/cgroup/memory/memory.swappiness
0
[root@a9a6c0c1fb75 /]# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv1
    Effective CPU Count: 8
    CPU Period: 100000us
    CPU Quota: -1
    CPU Shares: -1
    List of Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Effective Processors, 8 total: 
    0 1 2 3 4 5 6 7 
    List of Memory Nodes, 1 total: 
    0 
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: 100.00M
    Memory Soft Limit: Unlimited
    Memory & Swap Limit: 200.00M
    Maximum Processes Limit: 2048

openjdk version ""19-internal"" 2022-09-20
OpenJDK Runtime Environment (build 19-internal-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 19-internal-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
[root@a9a6c0c1fb75 /]# /opt/jdk/bin/java -XshowSettings:system -Xms160m -XX:+AlwaysPreTouch -version
Killed;;;","2022-04-20 11:24;sgehwolf;After JDK-8284900 OSContainer::memory_and_swap_limit_in_bytes() will not only be used in reporting (print_container_info) in hotspot. Therefore, we should add appropriate handling of memory.swappiness and the case where swappaccount=0 is in place via kernel comandline in the hotspot codebase too (i.e. it'll need a port of the fix from JDK-8250984 too).;;;","2022-05-15 23:42;dukebot;Changeset: 46d208fb
Author:    bobpengxie <bobpengxie@tencent.com>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2022-05-16 06:40:54 +0000
URL:       https://git.openjdk.java.net/jdk/commit/46d208fb1ce9a3d45bee2afda824f15c84a5e4d2
;;;","2022-08-21 20:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/641
Date: 2022-08-22 02:59:44 +0000;;;","2022-08-21 20:05;pxie;Fix request

I'd like to backport this patch to jdk17u.
It will fix the CgroupV1 detection code should consider memory.swappiness
It can be applied cleanly.
This risk is low. ;;;","2022-08-21 20:21;pxie;Fix request

I'd like to backport this patch to jdk11u.
It will fix the CgroupV1 detection code should consider memory.swappiness
It can be applied cleanly.
This risk is low. 
;;;","2022-08-21 20:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1336
Date: 2022-08-22 03:12:03 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
failed: same CodeEmitInfo used for multiple LIR instructions,JDK-8284945,5072704,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dskantz,webbuggrp,webbuggrp,2022-04-16 07:28,2023-05-04 02:00,2023-10-01 09:57,2023-04-18 23:12,8u381,,,,,,,,,,,8u381,hotspot,,0,dcsswa,reproducer-yes,sustaining,webbug,,,,,,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Similar to JDK-8195776, under JDK8, the JVM crashes when using the option ImplicitDiv0Checks

Reproduce: java -Xcomp -XX:-ImplicitDiv0Checks -version

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/jiahx/jdk_source/jdk8u/hotspot/src/share/vm/c1/c1_LinearScan.cpp:2461), pid=70128, tid=0x00007f53b2656700
#  assert(info->_oop_map == oop_map) failed: same CodeEmitInfo used for multiple LIR instructions
#
# JRE version: OpenJDK Runtime Environment (8.0) (build 1.8.0-internal-fastdebug-user_2022_03_11_16_03-b00)
# Java VM: OpenJDK 64-Bit Server VM (25.71-b00-fastdebug compiled mode linux-amd64 compressed oops)
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
---------------  T H R E A D  ---------------

Current thread (0x00007f54a022e800):  JavaThread ""C1 CompilerThread13"" daemon [_thread_in_native, id=70225, stack(0x00007f53b2557000,0x00007f53b2657000)]

Stack: [0x00007f53b2557000,0x00007f53b2657000],  sp=0x00007f53b2654ab0,  free space=1014k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x121fcac]  VMError::report_and_die()+0x2ec
V  [libjvm.so+0x797f81]  report_vm_error(char const*, int, char const*, char const*)+0x61
V  [libjvm.so+0x542a14]  LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&, LIR_Op*)+0x94
V  [libjvm.so+0x54b724]  LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*)+0x274
V  [libjvm.so+0x54bba3]  LinearScan::assign_reg_num()+0x163
V  [libjvm.so+0x554f0d]  LinearScan::do_linear_scan()+0x1dd
V  [libjvm.so+0x49e7cf]  Compilation::emit_lir()+0xa4f
V  [libjvm.so+0x4a1090]  Compilation::compile_java_method()+0x700
V  [libjvm.so+0x4a15da]  Compilation::compile_method()+0x7a
V  [libjvm.so+0x4a1dbe]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*)+0x3ae
V  [libjvm.so+0x4a28ef]  Compiler::compile_method(ciEnv*, ciMethod*, int)+0x18f
V  [libjvm.so+0x70bdf2]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x8b2
V  [libjvm.so+0x70d3e0]  CompileBroker::compiler_thread_loop()+0x710
V  [libjvm.so+0x118b188]  JavaThread::thread_main_inner()+0x1c8
V  [libjvm.so+0x118b54d]  JavaThread::run()+0x37d
V  [libjvm.so+0xf19ca2]  java_start(Thread*)+0x102
C  [libpthread.so.0+0x76db]  start_thread+0xdb


Current CompileTask:
C1:   1099   34  s b  3       java.util.Hashtable::get (69 bytes)


FREQUENCY : always


",,,,,,,,,,JDK-8306799,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8195776,,,,,,,,"2022-04-17 23:42;sswsharm;hs_err_pid18696.log;https://bugs.openjdk.org/secure/attachment/98617/hs_err_pid18696.log","2022-04-17 23:42;sswsharm;replay_pid18696.log;https://bugs.openjdk.org/secure/attachment/98618/replay_pid18696.log",,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wqpn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-17 23:39;sswsharm;Since,  VM option 'ImplicitDiv0Checks' is develop, it is only available under debug builds, crash is observed in the debug build.

OS : Windows 10
JDK 8u321 debug : Fail

Moving it to dev team for further analysis.;;;","2022-04-18 08:43;dcubed;Moving from hotspot/runtime -> hotspot/compier.;;;","2022-04-18 23:57;thartmann;This is a duplicate of JDK-8195776 which affects JDK 8u. The sustaining team should decide if the fix should be backported.;;;","2023-03-06 23:41;thartmann;Status ""Resolved"" should only be used for issues that have a changeset. Re-opened and ""Closed"".;;;","2023-04-06 00:34;dskantz;Reopen. Can be used for parts of JDK-8195776.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
assert(cnt++ < 40) failed: infinite cycle in loop optimization,JDK-8284944,5072575,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tholenstein,webbuggrp,webbuggrp,2022-04-14 09:20,2022-07-18 02:50,2023-10-01 09:57,2022-05-25 06:50,11,17.0.2,18,8,,,,,,,,19,hotspot,,0,c2,dcsswa,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-19,reproducer-yes,webbug,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: Ubuntu18.04

JDK8
$ java -version
openjdk version ""1.8.0-internal-fastdebug""
OpenJDK Runtime Environment (build 1.8.0-internal-fastdebug-user_2022_03_11_16_03-b00)
OpenJDK 64-Bit Server VM (build 25.71-b00-fastdebug, mixed mode)

JDK11
$ java -version
openjdk version ""11.0.15-internal"" 2022-04-19
OpenJDK Runtime Environment (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u)
OpenJDK 64-Bit Server VM (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u, mixed mode, sharing)

JDK17
$ java -version
openjdk version ""17.0.3-internal"" 2022-04-19
OpenJDK Runtime Environment (fastdebug build 17.0.3-internal+0-adhoc.user.jdk17u)
OpenJDK 64-Bit Server VM (fastdebug build 17.0.3-internal+0-adhoc.user.jdk17u, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
JVM crashed when running the test case with option -XX:-PartialPeelLoop under jdk8, jdk11, jdk17.

Reproduce:
$ java -Xcomp -XX:-PartialPeelLoop Test
i i10 i11 = 125,270,93
i12 i13 i14 = 72879,2,2
i15 i16 i17 = 174,0,148
i18 fArr iArr1 = 173,-4543399874554511360,-327513
Test.instanceCount Test.fFld Test.bFld = 6542009568855372046,1092616192,1
dFld Test.dArrFld Test.lArrFld = 4613701581922619432,4668565628057730655,-6269174457476628831
vMeth1_check_sum: -27854160
lMeth_check_sum: 1587511662398500560
vMeth_check_sum: 2853594718
i i10 i11 = 125,270,93
i12 i13 i14 = 72879,2,2
i15 i16 i17 = 174,0,148
i18 fArr iArr1 = 173,-4543399874554511360,-327513
Test.instanceCount Test.fFld Test.bFld = 6542009568855372046,1092616192,1
dFld Test.dArrFld Test.lArrFld = 4615953381736304680,4668565628057730655,-6269174457476628831
vMeth1_check_sum: -55708320
lMeth_check_sum: 3175023324796980640
vMeth_check_sum: 5707189439
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/compile.cpp:2021
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/user/jdk_source/jdk17u/src/hotspot/share/opto/compile.cpp:2021), pid=44309, tid=44322
#  assert(cnt++ < 40) failed: infinite cycle in loop optimization
#
# JRE version: OpenJDK Runtime Environment (17.0.3) (fastdebug build 17.0.3-internal+0-adhoc.user.jdk17u)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 17.0.3-internal+0-adhoc.user.jdk17u, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x950bc6]  Compile::Optimize()+0x1006
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/user/hs_err_pid44309.log
#
# Compiler replay data is saved as:
# /home/user/replay_pid44309.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

hs_err.log:
---------------  T H R E A D  ---------------

Current thread (0x00007f5cf021c000):  JavaThread ""C2 CompilerThread6"" daemon [_thread_in_native, id=44761, stack(0x00007f5c3a456000,0x00007f5c3a556000)]

Stack: [0x00007f5c3a456000,0x00007f5c3a556000],  sp=0x00007f5c3a550ab0,  free space=1002k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x121fcac]  VMError::report_and_die()+0x2ec
V  [libjvm.so+0x797f81]  report_vm_error(char const*, int, char const*, char const*)+0x61
V  [libjvm.so+0x6fcb74]  Compile::Optimize()+0xcf4
V  [libjvm.so+0x6fe9c5]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)+0xe05
V  [libjvm.so+0x59ba70]  C2Compiler::compile_method(ciEnv*, ciMethod*, int)+0xe0
V  [libjvm.so+0x70bdf2]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x8b2
V  [libjvm.so+0x70d3e0]  CompileBroker::compiler_thread_loop()+0x710
V  [libjvm.so+0x118b188]  JavaThread::thread_main_inner()+0x1c8
V  [libjvm.so+0x118b54d]  JavaThread::run()+0x37d
V  [libjvm.so+0xf19ca2]  java_start(Thread*)+0x102
C  [libpthread.so.0+0x76db]  start_thread+0xdb


Current CompileTask:
C2:   6921 1042   !b  4       Test::mainTest (767 bytes)




FREQUENCY : always


",,,,,,,,,,JDK-8288809,JDK-8290441,JDK-8289461,JDK-8288833,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287284,,,,,,,JDK-8287290,JDK-8273612,,,,,,,"2022-05-23 03:41;tholenstein;Output TraceLoopOpts.txt;https://bugs.openjdk.org/secure/attachment/99052/Output+TraceLoopOpts.txt","2022-05-23 05:46;tholenstein;Reproducer.java;https://bugs.openjdk.org/secure/attachment/99057/Reproducer.java","2022-04-20 02:07;sswsharm;TestPartialPeelLoop.zip;https://bugs.openjdk.org/secure/attachment/98652/TestPartialPeelLoop.zip","2022-04-20 02:08;sswsharm;hs_err_pid15984.log;https://bugs.openjdk.org/secure/attachment/98653/hs_err_pid15984.log","2022-04-20 02:08;sswsharm;replay_pid15984.log;https://bugs.openjdk.org/secure/attachment/98654/replay_pid15984.log",,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wqcz:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-17 23:23;sswsharm;Issue is not reproducible.
Program executes fine, crash is not observed.

OS: Linux(Ubuntu 20.04)
JDK 8u321: Pass
JDK 11.0.4: Pass
JDK 17.0.2: Pass
JDK 18: Pass;;;","2022-04-18 08:42;dcubed;Moving from hotspot/runtime -> hotspot/compiler.;;;","2022-04-20 02:06;sswsharm;Issue is reproduced with the latest test sample on fastdebug builds

OS: Windows 10
JDK 8u321 fastdebug: Fail
JDK 17.0.3 fastdebug: Fail
JDK 18 fastdebug: Fail


additional-information from submitter:
==================================
 Test.class uploaded before is incorrect, I re-uploaded the new test sample in the same link

Crash can be reproduced in fastdebug versions of JDK8, JDK11, and JDK17.
OS: Ubuntu18.04
==================================;;;","2022-04-20 19:14;dlong;ILW = assert w/ non-default flag value; medium; no workaround if non-default flags are really needed = MMH = P3;;;","2022-04-27 07:06;thartmann;Does not reproduce with JDK 19, we need to check which changeset fixed it.;;;","2022-05-05 00:24;tholenstein;The bug was hidden by JDK-8273612. Without the changes in JDK-8273612 the bug still reproduces in mainline (git revert -n 83b22192)
;;;","2022-05-06 06:05;tholenstein;Can also be reproduced with a smaller reproducer: java -XX:-PartialPeelLoop -XX:CompileCommand=compileonly,Reproducer::run Reproducer.java;;;","2022-05-18 05:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8767
Date: 2022-05-18 12:33:24 +0000;;;","2022-05-23 03:45;tholenstein;In the PR I added a jtreg test TestMaxLoopOptsCountReached.java that also triggers the assert after JDK-8273612. There it seems that Compile::optimize_loops does all valid optimizations. The output of  TestMaxLoopOptsCountReached.java run with -XX:+TraceLoopOpts is attached in Output TraceLoopOpts.txt.;;;","2022-05-23 13:26;kvn;Very interesting test Reproducer.java
It does not show any loop optimizations with -XX:+TraceLoopOpts. With -XX:+PrintOpto I see it grow internal loop body.
Also it failed with -XX:+VerifyLoopOptimizations (I know that this flag is not reliable but ...).

I tested with jdk8u-cpu and test passed.  It did:
Counted          Loop: N126/N68  counted [0,20001),+1 (-1 iters)
Parallel IV: 110     Loop: N126/N68  counted [0,20001),+1 (-1 iters)  has_sfpt
PreMainPost      Loop: N126/N68  counted [0,20001),+1 (30229 iters)  has_sfpt
Unroll 2         Loop: N126/N68  counted [int,20001),+1 (30229 iters)  main has_sfpt
Unroll 4         Loop: N199/N68  counted [int,20000),+2 (30229 iters)  main has_sfpt
Unroll 8         Loop: N260/N68  counted [int,19998),+4 (30229 iters)  main has_sfpt
Unroll 16         Loop: N298/N68  counted [int,19994),+8 (30229 iters)  main has_sfpt

I would assume that internal loop could be folded into simple expression  `cnt += 40000`.  We are missing some optimization or check. May be because `cnt` is static.



;;;","2022-05-23 13:40;kvn;About TestMaxLoopOptsCountReached.java. 

Can it be modified to compile with JDK 11? I got error:TestMaxLoopOptsCountReached.java:40: error: Illegal static declaration in inner class TestMaxLoopOptsCountReached.A
        static String e(long f, boolean b, String g, Level h, String s,
                      ^
  modifier 'static' is only allowed in constant variable declarations
1 error

It is too complex to see what is going on. ;;;","2022-05-23 13:41;kvn;Switching off Strip Mining `-XX:-UseCountedLoopSafepoints` helps Reproducer.java to pass similar to jdk8u.

But it did not help TestMaxLoopOptsCountReached.java;;;","2022-05-23 16:57;kvn;I modified code (increased LoopOptsCount flags limit) to print how many iterations needed to complete TestMaxLoopOptsCountReached::test compilation.
With LoopOptsCount=100 I got:

=== optimize_loops  cnt = 52, _loop_opts_cnt = 46 ===

;;;","2022-05-23 16:59;kvn;The last optimizations were:

Unroll 4( 2)   Loop: N51962/N1912  counted [int,6),+2 (2147483648 iters)  main sfpts={ 225 }
Empty without zero trip guard         Loop: N5343/N2671  limit_check profile_predicated predicated counted [0,int),+1 (2147483648 iters)  has_sfpt strip_mined
Peel               Loop: N5343/N2671  limit_check profile_predicated predicated counted [0,int),+1 (2147483648 iters)  has_sfpt strip_mined
Empty without zero trip guard         Loop: N5359/N2761  limit_check profile_predicated predicated counted [0,int),+1 (2147483648 iters)  has_sfpt strip_mined
Peel               Loop: N5359/N2761  limit_check profile_predicated predicated counted [0,int),+1 (2147483648 iters)  has_sfpt strip_mined
Empty without zero trip guard         Loop: N5370/N2626  limit_check profile_predicated predicated counted [0,int),+1 (2147483648 iters)  has_sfpt strip_mined
Peel               Loop: N5370/N2626  limit_check profile_predicated predicated counted [0,int),+1 (2147483648 iters)  has_sfpt strip_mined
;;;","2022-05-25 06:50;dukebot;Changeset: 796494d0
Author:    Tobias Holenstein <tobias.holenstein@oracle.com>
Committer: Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-05-25 13:48:19 +0000
URL:       https://git.openjdk.java.net/jdk/commit/796494d0fecfb9587e8b68ff1d5c09411cb82f89
;;;","2022-06-21 00:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk18u/pull/163
Date: 2022-06-21 07:48:38 +0000;;;","2022-06-27 07:47;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
No risk, debug only.
Clean backport.
Test passes. SAP niglty testing passed.;;;","2022-06-27 08:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/513
Date: 2022-06-27 14:52:08 +0000;;;","2022-07-05 07:00;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
No risk, debug only. 
Trivial resolve.
SAP nightly testing passed.;;;","2022-07-05 07:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1200
Date: 2022-07-05 13:59:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: should not allocate special register for temp,JDK-8284937,5072728,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,yzhu,yzhu,yzhu,2022-04-17 20:17,2023-07-09 19:10,2023-10-01 09:57,2022-04-18 18:18,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-19,,,,,,,,,,,,,,,,,,,,"Following testcases fail with -XX:+UseRVV after JDK-8284863：

test/hotspot/jtreg/compiler/vectorapi/VectorCastShape128Test.java
test/hotspot/jtreg/compiler/vectorapi/VectorCastShape64Test.java
test/hotspot/jtreg/compiler/vectorapi/VectorMaskCastTest.java
test/hotspot/jtreg/compiler/vectorapi/VectorMaskLoadStoreTest.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x000000400214b604, pid=47220, tid=47271
#
# JRE version: OpenJDK Runtime Environment (19.0) (build 19-internal-adhoc.zhuyanhong.jdk)
# Java VM: OpenJDK 64-Bit Server VM (19-internal-adhoc.zhuyanhong.jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-riscv64)
# Problematic frame:
# V  [libjvm.so+0x7de604]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x440
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P"" (or dumping to /home/zhuyanhong/jdk/JTwork/compiler/vectorapi/VectorMaskCastTest/core.47220)
#

The root cause of this problem is that special registers were allocated as temporary registers in C2. 
We add `guarantee(tmp != x27, ""Use Special Register x27"");` in `C2_MacroAssembler::count_positives_v`, and the error log turns out x27 is allocated for temp:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c2_MacroAssembler_riscv.cpp:1546), pid=45749, tid=45834
#  guarantee(tmp != x27) failed: Use Special Register x27
#
# JRE version: OpenJDK Runtime Environment (19.0) (build 19-internal-adhoc.zhuyanhong.jdk)
# Java VM: OpenJDK 64-Bit Server VM (19-internal-adhoc.zhuyanhong.jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-riscv64)
# Problematic frame:
# V  [libjvm.so+0x36fdfc]  C2_MacroAssembler::count_positives_v(RegisterImpl const*, RegisterImpl const*, RegisterImpl const*, RegisterImpl const*)+0x23a

x27 is used for heapbase, special registers should not allocated as a tmp register. Similar issue also exists in several other C2 instructs for riscv.",,,,,,,,,,JDK-8311697,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284863,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,linux,,,,,,"0|i2wquz:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-18 01:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8283
Date: 2022-04-18 08:18:27 +0000;;;","2022-04-18 18:18;dukebot;Changeset: 145dfed0
Author:    Yanhong Zhu <yzhu@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-04-19 01:15:07 +0000
URL:       https://git.openjdk.java.net/jdk/commit/145dfed03c21ffe233203c1117d02b552bd17630
;;;","2023-06-19 20:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix Java 7 bootstrap breakage due to use of Arrays.stream,JDK-8284936,5072726,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,andrew,andrew,2022-04-17 17:30,2022-04-28 02:46,2023-10-01 09:57,2022-04-19 15:10,,,,,,,,,,,,openjdk8u332,xml,,0,,,,,,,,,,,,,,,,,,,,,"The backport of JDK-8270504 introduced the use of Arrays.stream into the JAXP classes. While this built fine when using 8u itself to build, it broke building with the previous JDK release. We can fix this by replacing the use of Arrays.stream with loops, as is done in the 7u backport of JDK-8270504.",,,,,,,,,,JDK-8285817,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,b07,openjdk8u332,,generic,,,,,,"0|i2wquj:",9223372036854775807,b09,,,,,,,,,,,"2022-04-19 15:10;hgupdate;URL:   https://hg.openjdk.java.net/jdk8u/monojdk8u/rev/37aca7715d13
User:  andrew
Date:  2022-04-19 22:05:16 +0000
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve debug in java.security.jgss,JDK-8284935,5072722,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-04-17 09:22,2023-03-15 06:40,2023-10-01 09:57,2022-04-18 07:10,,,,,,,,,,,,19,security-libs,,0,noreg-cleanup,performance,tencent-interest,,,,,,,,,,,,,,,,,,The debug information should not be calculated if debug is not enabled.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8304264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqtn:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-04-17 21:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8279
Date: 2022-04-18 04:40:27 +0000;;;","2022-04-18 07:10;dukebot;Changeset: c63fabe3
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-04-18 14:07:56 +0000
URL:       https://git.openjdk.java.net/jdk/commit/c63fabe3d582ce0828b04b0224cea49aab5fedf3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve debug in jdk.crypto.cryptoki,JDK-8284933,5072718,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-04-17 07:26,2022-04-20 23:37,2023-10-01 09:57,2022-04-19 21:39,,,,,,,,,,,,19,security-libs,,0,noreg-cleanup,performance,tencent-interest,,,,,,,,,,,,,,,,,,The debug information should not be calculated if debug is not enabled.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqsr:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-04-17 07:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8277
Date: 2022-04-17 14:45:49 +0000;;;","2022-04-19 21:39;dukebot;Changeset: 0f81d8fc
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-04-20 04:36:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/0f81d8fcc3fb703760b1cddb01861ea5031023fb
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Re-examine FilterInputStream mark/reset,JDK-8284930,5072713,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,alanb,alanb,2022-04-17 01:56,2022-08-10 05:55,2023-10-01 09:57,2022-04-26 08:39,19,,,,,,,,,,,19,core-libs,,1,noreg-trivial,release-note=yes,,,,,,,,,,,,,,,,,,,"FilterInputStream mark/reset are synchronized, it appears pointless as the other FilterInputStream methods do not synchronize. Can synchronization be removed?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285286,,,,,,,,,,,,,,,JDK-8286559,JDK-8285745,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqrn:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2022-04-19 16:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8309
Date: 2022-04-19 23:26:44 +0000;;;","2022-04-26 08:39;dukebot;Changeset: a3b78814
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-04-26 15:35:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a3b788144ecc37262a3560e9c234bc8fb41ca3df
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update description of SourceVersion.RELEASE_18,JDK-8284923,5072623,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-04-15 12:52,2023-05-18 13:00,2023-10-01 09:57,2022-04-18 10:19,19,,,,,,,,,,,19,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,The description of SourceVersion.RELEASE_18 does not explicitly state what language changes are present in that release.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284966,JDK-8308388,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqnn:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c6c40,,,,,,,,,"2022-04-15 13:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8268
Date: 2022-04-15 20:00:18 +0000;;;","2022-04-18 10:19;dukebot;Changeset: 6e36c455
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2022-04-18 17:17:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6e36c4550a5729280c8e18aea6754004a0c11ce2
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix some doc-comment issues on methods with package access in JDK API,JDK-8284922,5072622,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-04-15 12:28,2022-04-20 23:29,2023-10-01 09:57,2022-04-18 10:38,19,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,People rarely include JDK elements with package access in a javadoc run. That is why bugs in those elements' doc comments tend to remain unnoticed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqnf:",9223372036854775807,b19,,,,,,,,,,,"2022-04-15 12:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8267
Date: 2022-04-15 19:34:33 +0000;;;","2022-04-18 10:38;dukebot;Changeset: d3d71ea2
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-04-18 17:35:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d3d71ea289b7525d3f5c5057d995776be9a0796a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
tier1 test failures after JDK-8284909,JDK-8284921,5072621,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,dnsimon,dcubed,dcubed,2022-04-15 11:53,2022-07-11 15:06,2023-10-01 09:57,2022-04-15 15:18,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-19,regression,tier1,tier2,,,,,,,,,,,,,,,"The following fix appears to be causing Tier1 test failures:

JDK-8284909 [JVMCI] remove remnants of AOT support

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284909,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqn7:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-04-15 11:59;kvn;[~dnsimon] please look.;;;","2022-04-15 12:22;dnsimon;I'm looking now - sorry for the disruption.;;;","2022-04-15 13:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8269
Date: 2022-04-15 20:23:08 +0000;;;","2022-04-15 13:47;dlong;ILW = tier1 test failures (regression); always; no workaround = HHH = P1;;;","2022-04-15 15:18;dukebot;Changeset: dce72402
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2022-04-15 22:16:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dce72402b54a417c51102f51016607c76106b524
;;;","2022-07-11 15:06;epavlova;Tests passed in JDK 19 ATR.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect Token type causes XPath expression to return incorrect results,JDK-8284920,5072620,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,joehw,joehw,joehw,2022-04-15 11:19,2022-05-16 06:05,2023-10-01 09:57,2022-04-19 13:08,11.0.15-oracle,17.0.3-oracle,18.0.1,7u341,8u331,,,,,,,11.0.15,xml,,0,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,regression,,,,,,,,,,,,,,,,,"A literal token ""."" of type String was mistakenly replaced with a constant DOT of type char. Since there are two overloaded versions of tokenIs(String) and tokenIs(char), the change caused the wrong one to be called.
",,,,,,,,,,JDK-8285557,JDK-8285464,JDK-8285348,JDK-8285382,JDK-8285121,JDK-8285473,JDK-8286230,JDK-8285458,JDK-8285816,JDK-8286254,JDK-8285442,JDK-8285356,JDK-8285358,JDK-8285216,JDK-8285092,JDK-8285239,JDK-8285178,JDK-8285284,JDK-8285746,JDK-8286026,JDK-8285751,JDK-8285578,JDK-8285461,JDK-8285194,JDK-8285367,,,,,,,,,,,,,,,,,,,,,JDK-8270504,JDK-8285727,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqmz:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42d7a890,,,,,,,,,"2022-04-19 13:08;dukebot;Changeset: 224e1a3f
Author:    Anton Kozlov <akozlov@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2022-04-15 14:07:52 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/224e1a3fcb2c9c43e97e7b0e69d7aad66560f6fc
;;;","2022-04-20 10:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8321
Date: 2022-04-20 17:40:24 +0000;;;","2022-04-21 02:02;rreddy;Fix request (18u)
Clean backport of mainline fix.
Need to fix this in18u as it's a regression issue.;;;","2022-04-21 02:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/103
Date: 2022-04-21 09:11:49 +0000;;;","2022-04-21 04:06;mdoerr;17.0.3 commit:
https://github.com/openjdk/jdk17u/commit/c1a87498eac64a014786274e564e1b0b1e4afc51;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem list test(s) failing due to extra repaints with D3D pipeline.,JDK-8284914,5072614,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2022-04-15 10:06,2022-04-20 23:23,2023-10-01 09:57,2022-04-15 10:29,,,,,,,,,,,,19,client-libs,,0,,,,,,,,,,,,,,,,,,,,,"https://bugs.openjdk.java.net/browse/JDK-8284825
reports failure of sun/java2d/DirectX/MultiPaintEventTest/MultiPaintEventTest.java

There is also a closed test failing for the same reason.
https://bugs.openjdk.java.net/browse/JDK-8278610
javax/swing/RepaintManager/4939857/bug4939857.java fails with ""To many paints: 3""

These tests will fail whenever they happen to run on a system with D3D enabled so they need to be problem listed for windows.
We don't want to run them with D3D turned off since for at least the open one it is specifically intended to test D3D.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqln:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-04-15 10:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8265
Date: 2022-04-15 17:15:42 +0000;;;","2022-04-15 10:29;dukebot;Changeset: 6199008d
Author:    Phil Race <prr@openjdk.org>
Date:      2022-04-15 17:26:47 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6199008dbde55c7d30c5d8fc75cf23fbc4b8e039
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Buffer clean in PasswordCallback,JDK-8284910,5072609,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,xuelei,xuelei,xuelei,2022-04-15 08:34,2022-08-09 09:01,2023-10-01 09:57,2022-04-27 19:51,,,,,,,,,,,,19,security-libs,,0,tencent-interest,,,,,,,,,,,,,,,,,,,,"There were a lot efforts to clean up the buffered passwords.  The PasswordCallback.setPassword() clones the password, but is not registered for cleanup.  An application could call clearPassword() for the purpose, but it would be nice to cleanup the buffer as well if clearPassword() was not called in an application.  If the setPassword() get called multiple times, the clearPassword() should also be called the same times if not relying on finalization.  It could be fragile in practice.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285785,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqkj:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5c1d831a,,,,,,,Verified,,"2022-04-16 08:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8272
Date: 2022-04-16 15:45:21 +0000;;;","2022-04-27 19:51;dukebot;Changeset: 89fd6d34
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-04-28 02:48:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/89fd6d34f859d61d9cf5a1edf9419eee7c338390
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Refine diagnostic positions for DCErroneous,JDK-8284908,5072606,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-04-15 07:22,2022-04-27 23:27,2023-10-01 09:57,2022-04-21 02:00,19,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,Diagnostic positions for some error nodes created by DocCommentParser can be improved.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqjv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-04-15 10:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8264
Date: 2022-04-15 16:58:55 +0000;;;","2022-04-21 02:00;dukebot;Changeset: d6b5a635
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-04-21 08:57:16 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d6b5a6357710598be225e67f82e6e0c1bed2d62f
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compact profiles build fails with GNU make 4,JDK-8284907,5072604,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,erikj,erikj,erikj,2022-04-15 06:23,2022-06-08 09:31,2023-10-01 09:57,2022-04-28 10:02,8u42,,,,,,,,,,,8u42,infrastructure,,0,jdk8u42-fix-request,jdk8u42-fix-yes,,,,,,,,,,,,,,,,,,,"The compact profiles jar creation logic relies on what seems to be undefined behavior in GNU make. Pattern rules are unreliable when the file names contain '$'. The specific construct used in CreateJars.gmk works with GNU make 3.81, but fails with version 4 or higher.

This was originally fixed in 8u60 in JDK-8067857. That change is quite big and not something we want to backport to 8u42. However, since then, GNU make 4 and higher have become quite common on Linux too, and not just in Cygwin where I believe this problem was first encountered. Because of this, I would like to extract just the fix for this, exactly as it was done in JDK-8067857. Here is the original change:

https://git.openjdk.java.net/jdk8u-dev/commit/17421c860a6e71e14b0023e686b87c35b2049f69#diff-e580e7e55e76622c538ae8a1b55af984b3e12bba099e493582fff2925b9ae02aR314-R322
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqjf:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-15 07:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-ri/pull/2
Date: 2022-04-15 13:48:24 +0000;;;","2022-04-15 10:07;erikj;Fix Request [8u42]

This fix works around a behavior change between different versions of GNU make. It has been in place in later 8u releases for a long time, so the risk should be very low. The motivation for backporting it here is to reduce the amount of specialized build environment setup needed to be able to build the 8u42 release (and possibly future MRs).;;;","2022-04-28 10:02;roboduke;Changeset: d63ed0a5
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-04-28 17:01:26 +0000
URL:       https://git.openjdk.java.net/jdk8u-ri/commit/d63ed0a562f7f124a38074ae407d7a4e7feb0e58
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typos in hotspot,JDK-8284903,5072597,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-04-15 00:38,2022-04-20 23:31,2023-10-01 09:57,2022-04-19 12:12,19,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,"I ran codespell on hotspot, and accepted those changes where it indeed discovered real typos. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqhv:",9223372036854775807,b19,,,,,,,,,,,"2022-04-15 00:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8260
Date: 2022-04-15 07:40:04 +0000;;;","2022-04-19 12:12;dukebot;Changeset: 4594696f
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-04-19 19:10:52 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4594696f5462995ec58ca1d2c1bde7cc857c5caf
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enhance PassFailJFrame,JDK-8284898,5072586,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-04-14 15:01,2022-12-06 01:46,2023-10-01 09:57,2022-04-19 14:11,,,,,,,,,,,,19,client-libs,,0,noreg-self,,,,,,,,,,,,,,,,,,,,Add  a set constructors to PassFailJFrame.java class & method to force the test to pass and fail,,,,,,,,,,JDK-8290831,JDK-8292019,JDK-8291484,JDK-8292405,JDK-8290978,JDK-8298160,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283803,JDK-8293811,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqff:",9223372036854775807,b19,,,,,,,,,,,"2022-04-14 16:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8004
Date: 2022-03-28 20:23:20 +0000;;;","2022-04-19 14:11;dukebot;Changeset: ed23033d
Author:    lawrence.andrews <87324768+lawrence-andrew@users.noreply.github.com>
Committer: Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-04-19 21:07:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ed23033dc6b3d4833ce2c8d07f273747ab8ae406
;;;","2022-07-25 08:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/596
Date: 2022-07-25 15:28:19 +0000;;;","2022-08-01 06:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1295
Date: 2022-08-01 09:21:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typos in langtools,JDK-8284894,5072579,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-04-14 12:55,2022-04-20 23:26,2023-10-01 09:57,2022-04-14 14:43,19,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,"I ran codespell on the langtools directories, and accepted those changes where it indeed discovered real typos.

(Due to false positives this can unfortunately not be run automatically) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqdv:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-04-14 13:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8251
Date: 2022-04-14 19:57:13 +0000;;;","2022-04-14 14:43;dukebot;Changeset: 3084921d
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-04-14 21:41:45 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3084921d7a67c470d1e2bb0ab51100bec455200e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typos in java.base,JDK-8284893,5072578,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-04-14 12:00,2022-06-03 14:02,2023-10-01 09:57,2022-04-19 13:10,19,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"I ran codespell on the ""src/java.base"" directory, and accepted those changes where it indeed discovered real typos.

(Due to false positives this can unfortunately not be run automatically)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287821,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqdn:",9223372036854775807,b19,,,,,,,,,,,"2022-04-14 12:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8250
Date: 2022-04-14 19:07:09 +0000;;;","2022-04-19 13:10;dukebot;Changeset: fb469fb8
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-04-19 20:07:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/fb469fb894ed84686f9fec5787ac99eb535fdd18
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java/net/httpclient/http2/TLSConnection.java fails intermittently,JDK-8284892,5072577,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2022-04-14 11:11,2022-09-22 05:05,2023-10-01 09:57,2022-04-15 02:10,,,,,,,,,,,,19,core-libs,,0,httpclient,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,,,,"---
Test #4: SSL parameters with TLS_RSA_WITH_AES_128_CBC_SHA cipher suite, expect successful connection
Handler: received request to https://localhost:44491/
Handler: read 4 bytes of body: 
body
Response: Test response
Passed
Check protocol: negotiated protocol: TLSv1.2
Check protocol: expected protocol: TLSv1.2
Check protocol: negotiated ciphersuite: SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA
Check protocol: expected ciphersuite: TLS_RSA_WITH_AES_128_CBC_SHA
Check protocol: unexpected negotiated ciphersuite
",,,,,,,,,,JDK-8293985,JDK-8294223,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqdf:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-04-14 11:13;dfuchs;This is a race condition caused by the test's handler on the server side;;;","2022-04-14 11:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8249
Date: 2022-04-14 18:26:00 +0000;;;","2022-04-15 02:10;dukebot;Changeset: 1e22c70f
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-04-15 09:07:09 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1e22c70ff2e010740cb22856a642dd4afa1017cc
;;;","2022-09-19 13:45;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2022-09-19 13:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/696
Date: 2022-09-19 20:46:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix typos in build system files,JDK-8284891,5072572,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2022-04-14 08:58,2022-04-20 23:25,2023-10-01 09:57,2022-04-14 12:35,19,,,,,,,,,,,19,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,"I ran codespell on the ""make"" directory, and accepted those changes where it indeed discovered real typos.  

(Due to false positives this can unfortunately not be run automatically)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqcb:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-14 09:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8246
Date: 2022-04-14 16:05:48 +0000;;;","2022-04-14 12:35;dukebot;Changeset: 160eb2bd
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2022-04-14 19:33:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/160eb2bd392fea29dd690ee9781174d14dc0b659
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#custom-cl-zgc timed out,JDK-8284889,5072570,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccheung,dcubed,dcubed,2022-04-14 08:00,2022-04-27 23:28,2023-10-01 09:57,2022-04-25 09:57,19,,,,,,,,,,,19,hotspot,,0,intermittent,tier4,zgc,,,,,,,,,,,,,,,,,,"The following test timed out in the JDK19 CI:

runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#custom-cl-zgc

Here's a snippet from the log file:

========================================
errorInDump: true, useCustomLoader: true, useZGC: true, case: 3
========================================
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1216/linux-aarch64-debug.jdk/jdk-19/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11732/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8b144c3c-19d2-4036-905c-1863f6bdaa42/runs/d7f39ae6-156b-42c8-8c23-4af51ae02277/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/0/runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest_custom-cl-zgc.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1216/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/loaderConstraints:/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11732/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8b144c3c-19d2-4036-905c-1863f6bdaa42/runs/d7f39ae6-156b-42c8-8c23-4af51ae02277/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/0/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1216/src.full/open/test/lib:/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11732/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8b144c3c-19d2-4036-905c-1863f6bdaa42/runs/d7f39ae6-156b-42c8-8c23-4af51ae02277/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/0/test/hotspot/jtreg/runtime/cds/appcds:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1216/src.full/open/test/hotspot/jtreg/runtime/cds/appcds:/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11732/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8b144c3c-19d2-4036-905c-1863f6bdaa42/runs/d7f39ae6-156b-42c8-8c23-4af51ae02277/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/0/test/hotspot/jtreg/runtime/cds/appcds/test-classes:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1216/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/test-classes:/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11732/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8b144c3c-19d2-4036-905c-1863f6bdaa42/runs/d7f39ae6-156b-42c8-8c23-4af51ae02277/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/classes/0/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1216/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar -XX:MaxRAMPercentage=6.25 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11732/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8b144c3c-19d2-4036-905c-1863f6bdaa42/runs/d7f39ae6-156b-42c8-8c23-4af51ae02277/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/tmp -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -XX:ArchiveClassesAtExit=/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11732/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8b144c3c-19d2-4036-905c-1863f6bdaa42/runs/d7f39ae6-156b-42c8-8c23-4af51ae02277/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/0/appcds-11h04m55s955.jsa -Xshare:auto --add-modules java.base,jdk.httpserver --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -Xlog:cds=debug,class+load,class+loader+constraints -cp /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11732/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8b144c3c-19d2-4036-905c-1863f6bdaa42/runs/d7f39ae6-156b-42c8-8c23-4af51ae02277/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/0/custom_app_loader.jar -XX:+UseZGC -XX:ZCollectionInterval=0.01 CustomAppLoader /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S11732/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8b144c3c-19d2-4036-905c-1863f6bdaa42/runs/d7f39ae6-156b-42c8-8c23-4af51ae02277/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_runtime/scratch/0/loader_constraints.jar LoaderConstraintsApp 3 ]
[2022-04-14T11:04:55.956918752Z] Gathering output for process 3810524
----------System.err:(0/0)----------
----------rerun:(48/11672)*----------

<snip>

result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1216/linux-aarch64-debug.jdk/jdk-19/fastdebug/bin/java' timed out (timeout set to 1200000ms, elapsed time including timeout handling was 1332778ms).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,,,"0|i2wqbv:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-22 10:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8367
Date: 2022-04-22 17:31:52 +0000;;;","2022-04-25 09:57;dukebot;Changeset: 1e79ded9
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2022-04-25 16:54:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/1e79ded98acf89d9fe7158c21ba521f2688f62f1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[macos] javax/swing/JInternalFrame/8146321/JInternalFrameIconTest.java failed with ""NimbusLookAndFeel] : ERROR: icon and imageIcon not same.""",JDK-8284888,5072569,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,dcubed,dcubed,2022-04-14 07:51,2022-05-18 23:15,2023-10-01 09:57,2022-05-12 01:57,19,,,,,,,,,,,19,client-libs,,0,aarch64,intermittent,macos,problemlist,sn_117,sn_118,tier4,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

javax/swing/JInternalFrame/8146321/JInternalFrameIconTest.java

Here's a snippet from the log file:

#section:main
----------messages:(5/207)----------
command: main JInternalFrameIconTest
reason: User specified action: run main JInternalFrameIconTest 
Mode: othervm
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 23.353
----------configuration:(3/40)----------
Boot Layer
  add modules: java.desktop

----------System.out:(8/569)----------
imageicon captureRect java.awt.Rectangle[x=875,y=409,width=16,height=16]
icon captureRect java.awt.Rectangle[x=875,y=409,width=16,height=16]
[javax.swing.plaf.metal.MetalLookAndFeel] : SUCCESS: icon and imageIcon same.
imageicon captureRect java.awt.Rectangle[x=876,y=405,width=16,height=16]
icon captureRect java.awt.Rectangle[x=876,y=405,width=16,height=16]
imageicon captureRect java.awt.Rectangle[x=882,y=431,width=16,height=16]
icon captureRect java.awt.Rectangle[x=882,y=431,width=16,height=16]
[com.apple.laf.AquaLookAndFeel] : SUCCESS: icon and imageIcon same.
----------System.err:(14/931)----------
[javax.swing.plaf.nimbus.NimbusLookAndFeel] : ERROR: icon and imageIcon not same.
java.lang.RuntimeException: Error Log:
[javax.swing.plaf.nimbus.NimbusLookAndFeel] : ERROR: icon and imageIcon not same.
	at JInternalFrameIconTest.main(JInternalFrameIconTest.java:72)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Error Log:
[javax.swing.plaf.nimbus.NimbusLookAndFeel] : ERROR: icon and imageIcon not same.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Error Log: [javax.swing.plaf.nimbus.NimbusLookAndFeel] : ERROR: icon and imageIcon not same.
----------rerun:(42/6775)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286786,,,,,,,,,,,,,,,"2022-04-25 20:36;psadhukhan;iconImage-fail.png;https://bugs.openjdk.org/secure/attachment/98703/iconImage-fail.png","2022-04-25 20:36;psadhukhan;imageicon-fail.png;https://bugs.openjdk.org/secure/attachment/98704/imageicon-fail.png",,,,,,,,,aarch64,,,,,,,,,,os_x,,,,,,"0|i2wqbn:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-04-25 02:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8380
Date: 2022-04-25 09:37:10 +0000;;;","2022-05-12 01:57;dukebot;Changeset: ff17f496
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-05-12 08:54:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ff17f496f4bcd8f775eb1ba6d962e963428322d3
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javax/swing/text/html/parser/Parser/8078268/bug8078268.java is empty 8u,JDK-8284886,5072567,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aivanov,aivanov,aivanov,2022-04-14 07:16,2022-04-20 12:17,2023-10-01 09:57,2022-04-15 03:57,8u121,,,,,,,,,,,8u341,client-libs,,0,11-na,9-na,cssn22_04_02,noreg-self,sustaining,testbug,,,,,,,,,,,,,,,"The test files in javax/swing/text/html/parser/Parser/8078268/ are empty:

jdk8u> ls -l jdk/test/javax/swing/text/html/parser/Parser/8078268/
total 0
-rw-r--r-- 1 <user> None 0 Apr 14 15:01 bug8078268.java
-rw-r--r-- 1 <user> None 0 Jan 18 21:49 slowparse.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8078268,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8u121,,,,,,,,"0|i2wqb7:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-04-14 07:20;aivanov;Backports of JDK-8078268 to 8u contain the fix to src/share/classes/javax/swing/text/html/parser/Parser.java but the test files bug8078268.java and slowparse.html are empty.;;;","2022-04-19 03:24;aivanov;The fix put the original test files from JDK-8078268 into repo:

jdk8u> ls -l jdk/test/javax/swing/text/html/parser/Parser/8078268/
total 576K
-rw-r--r-- 1 <user> None 2.6K Apr 14 15:28 bug8078268.java
-rw-r--r-- 1 <user> None 572K Apr 14 15:28 slowparse.html

The test fails with 8u111 and passes with 8u112 where the original bug was fixed.;;;","2022-04-19 03:25;aivanov;Now JDK-8264526 and JDK-8284884 can be backported.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replace polling with waiting in javax/swing/text/html/parser/Parser/8078268/bug8078268.java,JDK-8284884,5072565,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,aivanov,aivanov,2022-04-14 05:52,2022-11-02 20:40,2023-10-01 09:57,2022-04-15 06:58,17,9,,,,,,,,,,19,client-libs,,0,cleanup,cssn22_04_02,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sustaining,testbug,,,,,,,,,,,,The javax/swing/text/html/parser/Parser/8078268/bug8078268.java test uses active polling mechanism which can be replaced with more efficient waiting on a CountDownLatch.,,,,,,,,,,JDK-8285586,JDK-8285005,JDK-8285000,JDK-8285004,JDK-8295141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8264526,JDK-8078268,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqar:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-04-14 13:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8252
Date: 2022-04-14 20:25:56 +0000;;;","2022-04-15 06:58;dukebot;Changeset: 53580b33
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2022-04-15 13:55:06 +0000
URL:       https://git.openjdk.java.net/jdk/commit/53580b336ac83addfaf20763e37781cebec7c531
;;;","2022-04-20 07:24;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly. Test has passed.;;;","2022-04-20 07:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/353
Date: 2022-04-20 14:22:49 +0000;;;","2022-10-09 23:46;goetz;Fix request [11u]

I backport this for parity with 11.0.17-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-10-10 00:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1426
Date: 2022-10-10 06:59:53 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SIGSEGV in Node::verify_edges due to compilation bailout,JDK-8284882,5072540,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,webbuggrp,webbuggrp,2022-04-13 20:15,2022-07-07 20:42,2023-10-01 09:57,2022-04-28 23:10,11.0.15,8u321,,,,,,,,,,11.0.17-oracle,hotspot,,0,c2,dcsswa,jdk11u-fix-request,jdk11u-fix-yes,oracle-triage-19,reproducer-yes,webbug,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
OS: Ubuntu18.04
jdk8
$ java -version
openjdk version ""1.8.0-internal-fastdebug""
OpenJDK Runtime Environment (build 1.8.0-internal-fastdebug-user_2022_03_11_16_03-b00)
OpenJDK 64-Bit Server VM (build 25.71-b00-fastdebug, mixed mode)

jdk11
$ java -version
openjdk version ""11.0.15-internal"" 2022-04-19
OpenJDK Runtime Environment (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u)
OpenJDK 64-Bit Server VM (fastdebug build 11.0.15-internal+0-adhoc.user.jdk11u, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
The JVM is crashed when executing with the -XX:+VerifyGraphEdges option under JDK8 and JDK11.

Reproduce:
$ java -Xcomp -XX:+VerifyGraphEdges -XX:LoopUnrollLimit=10000 Test
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f8ecb2b3447, pid=74397, tid=0x00007f8d79444700
#
# JRE version: OpenJDK Runtime Environment (8.0) (build 1.8.0-internal-fastdebug-jiahx_2022_03_11_16_03-b00)
# Java VM: OpenJDK 64-Bit Server VM (25.71-b00-fastdebug compiled mode linux-amd64 compressed oops)
# Problematic frame:
# V  [libjvm.so+0xec0447]  Node::verify_edges(Unique_Node_List&)+0x17
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/user/hs_err_pid74397.log
#
# Compiler replay data is saved as:
# /home/user/replay_pid74397.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#

hs_err:
Stack: [0x00007f8d79345000,0x00007f8d79445000],  sp=0x00007f8d79440360,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xec0447]  Node::verify_edges(Unique_Node_List&)+0x17
V  [libjvm.so+0x6ea924]  Compile::verify_graph_edges(bool) [clone .part.264]+0xf4
V  [libjvm.so+0x6fb3b2]  Compile::Code_Gen()+0x372
V  [libjvm.so+0x6feac4]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)+0xf04
V  [libjvm.so+0x59ba70]  C2Compiler::compile_method(ciEnv*, ciMethod*, int)+0xe0
V  [libjvm.so+0x70bdf2]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x8b2
V  [libjvm.so+0x70d3e0]  CompileBroker::compiler_thread_loop()+0x710
V  [libjvm.so+0x118b188]  JavaThread::thread_main_inner()+0x1c8
V  [libjvm.so+0x118b54d]  JavaThread::run()+0x37d
V  [libjvm.so+0xf19ca2]  java_start(Thread*)+0x102
C  [libpthread.so.0+0x76db]  start_thread+0xdb


Current CompileTask:
C2:   4571  954    b  4       Test::vMeth2 (256 bytes)


---------- BEGIN SOURCE ----------
Download TestVerifyGraphEdge.zip from:
https://drive.google.com/file/d/1wqW5oEWTiDf1cUovCwAXSgpAyvw4BTHf/view?usp=sharing
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8289465,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-04-14 04:18;sswsharm;TestVerifyGraphEdge.zip;https://bugs.openjdk.org/secure/attachment/98584/TestVerifyGraphEdge.zip","2022-04-14 04:14;sswsharm;hs_err_pid14048.log;https://bugs.openjdk.org/secure/attachment/98582/hs_err_pid14048.log","2022-04-14 04:14;sswsharm;replay_pid14048.log;https://bugs.openjdk.org/secure/attachment/98583/replay_pid14048.log",,,,,,,,,,,,,,,,,,,,,,,,"0|i2wq57:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-14 04:17;sswsharm;Issue is reproduced. 
Since,  VM option 'VerifyGraphEdges' is notproduct and is available only in debug version of VM, crash is only observed on debug build.

OS: Windows 10
JDK 8u321 debug build: Fail

Moving it to dev team for further analysis.;;;","2022-04-14 20:39;dlong;ILW = impact: crash non-product build; likelihood: reproducible with debug flag; workaround:  don't use VerifyGraphEdges = MMM = P3;;;","2022-04-28 00:32;thartmann;The problem is that C->_root is NULL because compilation bailed out in the matcher due to ""Out of stack space, increase MaxLabelRootDepth"". This was fixed in JDK 14 by the unrelated fix for JDK-8234391:
https://hg.openjdk.java.net/jdk/jdk/rev/5defda391e18#l10.7

We should add the same check to JDK 11u.;;;","2022-06-24 04:30;goetz;Fix request [11u]

A simple fix for C2. Adds a missing bailout.
Trivial, low risk.
SAP nightly testing passed.;;;","2022-06-24 04:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1184
Date: 2022-06-24 11:25:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add test to JDK-8273056,JDK-8284866,5072551,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,rgiulietti,rgiulietti,2022-04-14 01:14,2022-12-21 05:39,2023-10-01 09:57,2022-04-14 08:38,18,,,,,,,,,,,19,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,jdk18u-fix-SQE-OK,jdk18u-fix-yes,noreg-self,ursqe-triaged,,,,,,,,,,,,,,"Add a test to ensure that Random.nextExponential() produces non-negative outcomes after JDK-8273056.

There's no need to add a test for Random.nextGaussian(), as this generates doubles over the whole range.",,,,,,,,,,JDK-8285598,JDK-8285600,JDK-8285707,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wq7n:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2022-04-14 04:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8243
Date: 2022-04-14 11:31:03 +0000;;;","2022-04-14 08:38;dukebot;Changeset: 3ffec3a5
Author:    Raffaello Giulietti <raffaello.giulietti@oracle.com>
Committer: Jim Laskey <jlaskey@openjdk.org>
Date:      2022-04-14 15:36:20 +0000
URL:       https://git.openjdk.java.net/jdk/commit/3ffec3a50b70051eba3fc7cd816e49811870f5d4
;;;","2022-04-25 08:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/109
Date: 2022-04-25 15:32:11 +0000;;;","2022-04-26 03:28;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.4-oracle. Applies cleanly and the test has passed.;;;","2022-04-26 03:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/366
Date: 2022-04-26 10:29:16 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
riscv: missing side effect for result in instruct vcount_positives,JDK-8284863,5072547,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fjiang,fjiang,fjiang,2022-04-13 23:30,2022-04-20 23:26,2023-10-01 09:57,2022-04-14 23:13,19,,,,,,,,,,,19,hotspot,,0,oracle-triage-19,,,,,,,,,,,,,,,,,,,,"JDK-8283364 replaces StringCoding.hasNegatives with countPositives.
But the TEMP_DEF for result in vcount_positives was missing,  without which result != tmp  could not be guaranteed. 
If we add `assert_different_registers(result, tmp)` in `C2_MacroAssembler::count_positives_v`, 
JVM will complain assertion error for some test in hotspot and langtools when UseRVV is enabled.

For example,  on QEMU user mode with enabling RVV extension, the following jtreg tests commands will trigger assertion error:

jtreg -javaoption:-XX:+UseRVV -Djdk.lang.Process.launchMechanism=VFORK -timeoutFactor:20  -jdk:fastdebug/install-fastdebug/jvm/openjdk-19 test/langtools/tools/sjavac/JavacOptionPrep.java

```
javac: [-d, JTwork/classes/0/tools/sjavac/JavacOptionPrep.d, -sourcepath, test/langtools/tools/sjavac, -classpath, JTwork/classes/0/tools/sjavac/JavacOptionPrep.d, --add-exports=jdk.compiler/com.sun.tools.sjavac.options=ALL-UNNAMED, test/langtools/tools/sjavac/JavacOptionPrep.java]
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/register.hpp:245
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (src/hotspot/share/asm/register.hpp:245), pid=15559, tid=15600
#  assert(regs[i] != regs[j]) failed: Multiple uses of register: c_rarg0
# JRE version: OpenJDK Runtime Environment (19.0) (fastdebug build 19)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 19, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-riscv64)
# Problematic frame:
# V  [libjvm.so+0x58f38a]  C2_MacroAssembler::count_positives_v(RegisterImpl const*, RegisterImpl const*, RegisterImpl const*, RegisterImpl const*)+0x96
```
With code base,  test result for hotspot and langtools with RVV enabled:
test_hotspot:
applications/ctw/modules/java_base.java
applications/ctw/modules/java_xml.java
gc/metaspace/TestMetaspacePerfCounters.java

test_langtools:
Test results: passed: 4,228; failed: 73; error: 2

After is patch, failed tests in  hotspot and langtools are passed:
test_langtools:
Test results: passed: 4,305",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284937,,,,,,,JDK-8283364,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,linux,,,,,,"0|i2wq6r:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-14 01:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8239
Date: 2022-04-14 08:40:06 +0000;;;","2022-04-14 20:35;dlong;ILW = impact: corrupted register value, failed tests; likelihood: reproducible; workaround: disable intrinsic = MMM = P3;;;","2022-04-14 23:13;dukebot;Changeset: ea0706de
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-04-15 06:12:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ea0706de82fffcb634cedf2cb6048c33a7d15004
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Start of release updates for JDK 20,JDK-8284858,5072538,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2022-04-13 17:30,2022-10-31 15:13,2023-10-01 09:57,2022-06-09 09:22,20,,,,,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288336,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273146,JDK-8292493,,,,,,JDK-8286039,JDK-8296149,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wq4r:",9223372036854775807,b01,,,,,,,,,,,"2022-05-26 15:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8236
Date: 2022-04-14 05:09:14 +0000;;;","2022-06-09 09:22;dukebot;Changeset: edff51e5
Author:    Joe Darcy <darcy@openjdk.org>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2022-06-09 16:16:49 +0000
URL:       https://git.openjdk.org/jdk/commit/edff51e5fdb5282830ecfb3792a88c7b28ca6557
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a test case for checking UnicodeScript entity numbers,JDK-8284856,5072534,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2022-04-13 15:51,2022-04-20 23:31,2023-10-01 09:57,2022-04-19 08:53,,,,,,,,,,,,19,core-libs,,0,,,,,,,,,,,,,,,,,,,,,"Discussed here:
https://github.com/openjdk/jdk/pull/7928#discussion_r849951761",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wq3v:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-04-14 14:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8253
Date: 2022-04-14 20:52:44 +0000;;;","2022-04-19 08:53;dukebot;Changeset: eb9c457b
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-04-19 15:51:57 +0000
URL:       https://git.openjdk.java.net/jdk/commit/eb9c457b4141f2d253be14cbbad844bc4ba8c48d
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update needed to Cleaners added to jdk.crypto.cryptoki,JDK-8284855,5072533,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,xuelei,bchristi,bchristi,2022-04-13 15:30,2022-04-21 19:34,2023-10-01 09:57,2022-04-19 14:56,19,,,,,,,,,,,19,security-libs,,0,noreg-cleanup,tencent-interest,,,,,,,,,,,,,,,,,,,"The fix for JDK-8284368 replaced the finalizers in jdk.crypto.cryptoki with Cleaners.

However, there is a problem with the code changes. The Runnables registered with Cleaner refer to the object being registered ('this'). Meaning, the Cleaner mechanism will keep the objects reachable, preventing them from being cleaned and collected.

The JDK-8284368 change needs to be reworked to not reference 'this'.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284368,,,,,,,JDK-8253568,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wq3n:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,,,"2022-04-13 15:33;bchristi;For PKCS11, some native refactoring may be needed to allow it to disconnect() without keeping the PKCS11 object itself around.;;;","2022-04-13 21:06;xuelei;The issue should be addressed in JDK 19 as there is a risk of memory leak.;;;","2022-04-14 11:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8248
Date: 2022-04-14 18:06:10 +0000;;;","2022-04-19 14:56;dukebot;Changeset: 60446746
Author:    Xue-Lei Andrew Fan <xuelei@openjdk.org>
Date:      2022-04-19 21:53:08 +0000
URL:       https://git.openjdk.java.net/jdk/commit/60446746d41c3c80d9788a252b4a55afe44e1e7b
;;;","2022-04-21 14:12;rhalade;Please update bug with applicable noreg label.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix various 'expected' typo,JDK-8284853,5072531,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aturbanov,aturbanov,aturbanov,2022-04-13 13:36,2022-04-20 23:25,2023-10-01 09:57,2022-04-14 11:08,19,,,,,,,,,,,19,hotspot,,0,,,,,,,,,,,,,,,,,,,,,In a few places 'expected' word has various typos. Usually in comments.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wq37:",9223372036854775807,b19,,,,,,,,,,,"2022-04-13 13:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8231
Date: 2022-04-13 20:36:48 +0000;;;","2022-04-14 11:08;dukebot;Changeset: 48c75498
Author:    Andrey Turbanov <aturbanov@openjdk.org>
Date:      2022-04-14 18:05:49 +0000
URL:       https://git.openjdk.java.net/jdk/commit/48c75498060f076287d3d44c49934db9ac70887b
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update javax.crypto files to use proper javadoc for mentioned classes,JDK-8284851,5072528,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,mpowers,mpowers,2022-04-13 12:39,2022-07-13 23:38,2023-10-01 09:57,2022-07-07 16:22,,,,,,,,,,,,20,security-libs,,0,,,,,,,,,,,,,,,,,,,,,"For example: < code >PermissionCollection< /code >.

Expand scope of fix to include java/security.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wq2j:",9223372036854775807,b06,,,,,,,,,,,"2022-06-28 07:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/9282
Date: 2022-06-24 16:48:46 +0000;;;","2022-07-07 16:22;dukebot;Changeset: f804f2ce
Author:    Mark Powers <mark.powers@oracle.com>
Committer: Valerie Peng <valeriep@openjdk.org>
Date:      2022-07-07 23:20:58 +0000
URL:       https://git.openjdk.org/jdk/commit/f804f2ce8ef7a859aae021b20cbdcd9e34f9fb94
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test,JDK-8284837,5072497,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,alanb,alanb,alanb,2022-04-13 09:15,2022-04-13 10:05,2023-10-01 09:57,2022-04-13 10:05,,,,,,,,,,,,,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284839,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wpvn:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test,JDK-8284835,5072495,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,,alanb,alanb,2022-04-13 09:14,2022-04-13 09:15,2023-10-01 09:57,2022-04-13 09:15,,,,,,,,,,,,,core-libs,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284836,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wpv7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"sun/java2d/DirectX/MultiPaintEventTest/MultiPaintEventTest.java failed with ""RuntimeException: Processed unnecessary paint().""",JDK-8284825,5072479,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,dcubed,dcubed,2022-04-13 06:16,2023-09-06 04:36,2023-10-01 09:57,2023-01-11 00:08,19,,,,,,,,,,,21,client-libs,,0,intermittent,tier4,,,,,,,,,,,,,,,,,,,"The following test failed in the the JDK19 CI:

sun/java2d/DirectX/MultiPaintEventTest/MultiPaintEventTest.java

Here's a snippet from the log file:

#section:main
----------messages:(5/234)----------
command: main MultiPaintEventTest
reason: User specified action: run main/othervm MultiPaintEventTest 
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.desktop
elapsed time (seconds): 2.428
----------configuration:(3/43)----------
Boot Layer
  add modules: java.desktop

----------System.out:(0/0)----------
----------System.err:(11/668)----------
java.lang.RuntimeException: Processed unnecessary paint().
	at MultiPaintEventTest.main(MultiPaintEventTest.java:78)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Processed unnecessary paint().
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Processed unnecessary paint().
----------rerun:(47/4949)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315773,JDK-8301458,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,windows,,,,,,"0|i2wprn:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-04-13 06:19;dcubed;Two failures in two Tier4 job sets in a row on the same test machine. The
next Tier4 did not have a failure so I've tagged this as intermittent.
;;;","2022-04-13 13:43;prr;It looks probable that the multiple paint bug was not completely fixed so the the test
will fail sometimes. It was pushed over a month ago so I don't know why it is only 
failing now. I don't see any recent JDK changes which might have de-stabilised it.
The machines I see it it is failing on do support D3D .. perhaps it never ran on those before ?
We may have to problem list the test.;;;","2022-04-13 14:19;prr;I've run it a bunch of times on various systems without D3D support and it passes.
It does fail on one D3D capable system with an AMD Radeon HD 7700
I next need to see if any other D3D systems fail the test.;;;","2022-05-19 12:13;vdyakov;is it introduced in 19?;;;","2022-05-19 14:42;prr;Depends what you mean, the test is new in 19 so it couldn't have failed before .. 
but the condition it tests for was already known to happen in older releases.
Seems to me like there's an incomplete 19 fix but no regression.;;;","2023-01-10 21:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11933
Date: 2023-01-11 05:44:22 +0000;;;","2023-01-11 00:08;dukebot;Changeset: ef32fdb8
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-01-11 08:06:57 +0000
URL:       https://git.openjdk.org/jdk/commit/ef32fdb8cc9681cf7f1b7a40e3c5a3239491ec75
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun.security.ssl.Finished::toString misses a line feed in the message format pattern,JDK-8284796,5072445,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2022-04-12 21:48,2022-04-20 23:26,2023-10-01 09:57,2022-04-14 19:12,18,,,,,,,,,,,19,security-libs,,0,noreg-trivial,tencent-interest,,,,,,,,,,,,,,,,,,,"@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015, 2021, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2022, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -146,7 +146,7 @@ final class Finished {
                     ""\""Finished\"": '{'\n"" +
                     ""  \""verify data\"": '{'\n"" +
                     ""{0}\n"" +
-                    ""  '}'"" +
+                    ""  '}'\n"" +
                     ""'}'"",
                     Locale.ENGLISH);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wpk3:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-04-12 22:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8215
Date: 2022-04-13 05:10:22 +0000;;;","2022-04-14 19:12;dukebot;Changeset: d9708206
Author:    John Jiang <jjiang@openjdk.org>
Date:      2022-04-15 02:09:30 +0000
URL:       https://git.openjdk.java.net/jdk/commit/d9708206164a0b7bfe611b597b49c5e75c37ad47
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Test java/util/logging/Logger/logrb/TestLogrbResourceBundle.java fails intermittently with vthreads wrapper,JDK-8284779,5072427,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,lmesnik,lmesnik,2022-04-12 16:31,2022-05-01 08:16,2023-10-01 09:57,2022-05-01 08:16,repo-loom,,,,,,,,,,,repo-loom,core-libs,,0,noreg-self,wrapper,,,,,,,,,,,,,,,,,,,"Test 
java/util/logging/Logger/logrb/TestLogrbResourceBundle.java
fails intermittently when executed with the wrapper.",,,,,,,,,,JDK-8285637,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wpg3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3cc899dc,,,,,,,,,"2022-04-12 16:31;lmesnik;The log:

Testing LOGRB_NO_ARGS with null
Testing LOGRB_NO_ARGS with resources.ListBundle
Testing LOGRB_NO_ARGS with resources.ListBundle
Testing LOGRB_NO_ARGS with resources.PropertyBundle
Testing LOGRB_NO_ARGS with null
Testing LOGRB_NO_ARGS with null
Testing LOGRB_NO_ARGS with resources.PropertyBundle
Testing LOGRB_SINGLE_ARG with null
Testing LOGRB_SINGLE_ARG with resources.ListBundle
Testing LOGRB_SINGLE_ARG with resources.ListBundle
Testing LOGRB_SINGLE_ARG with resources.PropertyBundle
Testing LOGRB_SINGLE_ARG with null
Testing LOGRB_SINGLE_ARG with null
Testing LOGRB_SINGLE_ARG with resources.PropertyBundle
Testing LOGRB_ARG_ARRAY with null
Testing LOGRB_ARG_ARRAY with resources.ListBundle
Testing LOGRB_ARG_ARRAY with resources.ListBundle
Testing LOGRB_ARG_ARRAY with resources.PropertyBundle
Testing LOGRB_ARG_ARRAY with null
Testing LOGRB_ARG_ARRAY with null
Testing LOGRB_ARG_ARRAY with resources.PropertyBundle
Testing LOGRB_VARARGS with null
Testing LOGRB_VARARGS with resources.ListBundle
Testing LOGRB_VARARGS with resources.ListBundle
Testing LOGRB_VARARGS with resources.PropertyBundle
Testing LOGRB_VARARGS with null
Testing LOGRB_VARARGS with null
Testing LOGRB_VARARGS with resources.PropertyBundle
Testing LOGRB_THROWABLE with null
Testing LOGRB_THROWABLE with resources.ListBundle
Testing LOGRB_THROWABLE with resources.ListBundle
Testing LOGRB_THROWABLE with resources.PropertyBundle
Testing LOGRB_THROWABLE with null
Testing LOGRB_THROWABLE with null
Testing LOGRB_THROWABLE with resources.PropertyBundle
Configuring foo.bar with java.util.PropertyResourceBundle@89a583
Testing LOGRB_NO_ARGS with null
Testing LOGRB_NO_ARGS with resources.ListBundle
Testing LOGRB_NO_ARGS with null
Testing LOGRB_NO_ARGS with resources.ListBundle
Testing LOGRB_NO_ARGS with resources.PropertyBundle
Testing LOGRB_NO_ARGS with null
Testing LOGRB_NO_ARGS with resources.PropertyBundle
Testing LOGRB_SINGLE_ARG with null
Testing LOGRB_SINGLE_ARG with resources.ListBundle
Testing LOGRB_SINGLE_ARG with null
Testing LOGRB_SINGLE_ARG with resources.ListBundle
Testing LOGRB_SINGLE_ARG with resources.PropertyBundle
Testing LOGRB_SINGLE_ARG with null
Testing LOGRB_SINGLE_ARG with resources.PropertyBundle
Testing LOGRB_ARG_ARRAY with null
Testing LOGRB_ARG_ARRAY with resources.ListBundle
Testing LOGRB_ARG_ARRAY with null
Testing LOGRB_ARG_ARRAY with resources.ListBundle
Testing LOGRB_ARG_ARRAY with resources.PropertyBundle
Testing LOGRB_ARG_ARRAY with null
Testing LOGRB_ARG_ARRAY with resources.PropertyBundle
Testing LOGRB_VARARGS with null
Testing LOGRB_VARARGS with resources.ListBundle
Testing LOGRB_VARARGS with null
Testing LOGRB_VARARGS with resources.ListBundle
Testing LOGRB_VARARGS with resources.PropertyBundle
Testing LOGRB_VARARGS with null
Testing LOGRB_VARARGS with resources.PropertyBundle
Testing LOGRB_THROWABLE with null
Testing LOGRB_THROWABLE with resources.ListBundle
Testing LOGRB_THROWABLE with null
Testing LOGRB_THROWABLE with resources.ListBundle
Testing LOGRB_THROWABLE with resources.PropertyBundle
Testing LOGRB_THROWABLE with null
Testing LOGRB_THROWABLE with resources.PropertyBundle
Configuring foo.bar with java.util.PropertyResourceBundle@35752354
Testing LOGRB_NO_ARGS with null
Testing LOGRB_NO_ARGS with resources.ListBundle
Testing LOGRB_NO_ARGS with null
Testing LOGRB_NO_ARGS with resources.ListBundle
Testing LOGRB_NO_ARGS with resources.PropertyBundle
Testing LOGRB_NO_ARGS with null
Testing LOGRB_NO_ARGS with resources.PropertyBundle
Testing LOGRB_SINGLE_ARG with null
Testing LOGRB_SINGLE_ARG with resources.ListBundle
Testing LOGRB_SINGLE_ARG with null
Testing LOGRB_SINGLE_ARG with resources.ListBundle
Testing LOGRB_SINGLE_ARG with resources.PropertyBundle
Testing LOGRB_SINGLE_ARG with null
Testing LOGRB_SINGLE_ARG with resources.PropertyBundle
Testing LOGRB_ARG_ARRAY with null
Testing LOGRB_ARG_ARRAY with resources.ListBundle
Testing LOGRB_ARG_ARRAY with null
Testing LOGRB_ARG_ARRAY with resources.ListBundle
Testing LOGRB_ARG_ARRAY with resources.PropertyBundle
Testing LOGRB_ARG_ARRAY with null
Testing LOGRB_ARG_ARRAY with resources.PropertyBundle
Testing LOGRB_VARARGS with null
Testing LOGRB_VARARGS with resources.ListBundle
Testing LOGRB_VARARGS with null
Testing LOGRB_VARARGS with resources.ListBundle
Testing LOGRB_VARARGS with resources.PropertyBundle
Testing LOGRB_VARARGS with null
Testing LOGRB_VARARGS with resources.PropertyBundle
Testing LOGRB_THROWABLE with null
Testing LOGRB_THROWABLE with resources.ListBundle
Testing LOGRB_THROWABLE with null
Testing LOGRB_THROWABLE with resources.ListBundle
Testing LOGRB_THROWABLE with resources.PropertyBundle
Testing LOGRB_THROWABLE with null
Testing LOGRB_THROWABLE with resources.PropertyBundle
Testing LOGRB_NO_ARGS with foo.bar.baz and null
----------System.err:(13/849)----------
java.lang.RuntimeException: Unexpected bundle: java.util.PropertyResourceBundle@35752354
	at TestLogrbResourceBundle.main(TestLogrbResourceBundle.java:351)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:327)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:287)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:174)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:329)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:322)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Unexpected bundle: java.util.PropertyResourceBundle@35752354

;;;","2022-04-12 16:32;lmesnik;No need to evaluate/fix this issue right now.;;;","2022-04-25 05:18;dfuchs;It's possible that the foo.bar logger gets garbage collected just before the foo.bar.baz logger is created. A reachability fence should fix that!;;;","2022-04-25 06:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8382
Date: 2022-04-25 13:30:05 +0000;;;","2022-05-01 08:15;alanb;It looks like this fixVersion wasn't changed before was integrated so the bot created a back port issue with fixVersion = 19. The main issue is no longe any use so I will close it.;;;","2022-05-01 08:16;alanb;Fixed in main line for JDK 19.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GHA: Use GCC Major Version Dependencies Only,JDK-8284772,5072415,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,andrew,andrew,2022-04-12 11:53,2023-08-28 19:33,2023-10-01 09:57,2022-04-28 07:43,openjdk8u242,,,,,,,,,,,openjdk8u342,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk21u-fix-request,jdk21u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,"Major versions of GCC often cause problems with OpenJDK.  Fedora's eager adoption of them means we often encounter these early.  JDK-8282231 is just the latest example from the introduction of GCC 12.

However, the GHA workflow in OpenJDK doesn't just depend on a major version of GCC - which is actually contained in the Ubuntu package name of gcc-9 itself - but the full revision number, even down to local packaging changes.

I believe this is overkill and leads to valuable time being wasted on issues like JDK-8283778 where the GCC version itself didn't change at all, just the Ubuntu version suffix.

Rather than maintain this for 8u, I suggest we just depend on gcc-9 which is already a pretty modern version for 8u.  I have yet to see an issue be specific to a minor GCC version bump, whereas the current setup is pretty much guaranteed to mean further fixes to the GitHub workflow every time the Ubuntu packager produces a new build.
",,,,,,,,,,JDK-8315159,JDK-8315160,JDK-8293278,JDK-8314595,JDK-8314845,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283778,JDK-8269148,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,b01,openjdk8u342,,generic,,,,,,"0|i2wpdf:",9223372036854775807,b01,,,,,,,,,,,"2022-04-12 12:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk8u-dev/pull/35
Date: 2022-04-12 18:59:41 +0000;;;","2022-04-26 10:26;andrew;Fix Request [8u]:

This is needed to unbreak the x86_64 GitHub Action (GHA) build for 8u.  It currently fails due to the very specific version of GCC 9 currently requested, which is now missing from the Ubuntu platform used by GitHub.

This has no effect on the actual 8u code and will allow other PRs to perform test builds again.;;;","2022-04-28 07:43;dukebot;Changeset: 62defc3d
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2022-04-28 14:41:43 +0000
URL:       https://git.openjdk.java.net/jdk8u-dev/commit/62defc3dfc4b9ba5adfe3189f34fe8b3f59b94a0
;;;","2022-05-04 07:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/shenandoah-jdk8u/pull/3
Date: 2022-04-17 15:12:42 +0000;;;","2022-05-04 09:00;dukebot;Changeset: 62defc3d
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2022-04-28 14:41:43 +0000
URL:       https://git.openjdk.java.net/jdk8u/commit/62defc3dfc4b9ba5adfe3189f34fe8b3f59b94a0
;;;","2023-08-17 12:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2087
Date: 2023-08-17 19:39:59 +0000;;;","2023-08-17 19:40;andrew;Fix Request [11u]

We should make the same change in 11u to avoid breakage every time there is a minor release update or release bump in the Ubuntu gcc package. GHA in 11u is currently broken as 10.3 is now longer available.

Patch has been reviewed by Volker Simonis & Sergey Bylokhov and GHA tests all passed.;;;","2023-08-18 09:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1673
Date: 2023-08-18 16:16:29 +0000;;;","2023-08-21 19:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15374
Date: 2023-08-22 02:14:54 +0000;;;","2023-08-28 05:33;andrew;Fix Request [17u]

Much as with 8u, 11u & trunk, we should do this to avoid breakage every time there is a minor release update or release bump in the Ubuntu gcc package. 

Patch has been reviewed by Aleksey Shipilëv and GHA tests all passed; see https://github.com/openjdk/jdk17u-dev/pull/1673;;;","2023-08-28 06:02;andrew;Fix Request [21u]

Same as above for 21u. Clean backport from trunk.;;;","2023-08-28 06:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/111
Date: 2023-08-28 12:56:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"java/util/zip/CloseInflaterDeflaterTest.java failed with ""AssertionError: Expected IOException to be thrown, but nothing was thrown""",JDK-8284771,5072413,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,rreddy,dcubed,dcubed,2022-04-12 11:24,2023-04-18 00:31,2023-10-01 09:57,2022-04-12 13:41,19,,,,,,,,,,,19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,tier1,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

java/util/zip/CloseInflaterDeflaterTest.java

Here's a snippet from the log file:

#section:testng
----------messages:(5/168)----------
command: testng CloseInflaterDeflaterTest
reason: User specified action: run testng CloseInflaterDeflaterTest 
Mode: agentvm
Agent id: 20
elapsed time (seconds): 0.061
----------configuration:(14/1717)----------
Boot Layer
  class path: /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar 
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar 
  patch:      java.base /System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14356/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/10d2064b-4c41-479d-87f6-0fe873bd625d/runs/4ddd5298-2434-4db2-a21b-e8e66a84b02a/testoutput/test-support/jtreg_open_test_jdk_tier1_part2/patches/java.base

Test Layer
  class path: /System/Volumes/Data/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14356/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/10d2064b-4c41-479d-87f6-0fe873bd625d/runs/4ddd5298-2434-4db2-a21b-e8e66a84b02a/testoutput/test-support/jtreg_open_test_jdk_tier1_part2/classes/4/java/util/zip/CloseInflaterDeflaterTest.d
              /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-19+18-1200/src.full/open/test/jdk/java/util/zip

----------rerun:(29/5386)*----------

<snip>

----------System.out:(80/5371)----------
config CloseInflaterDeflaterTest.before_test(): success
test CloseInflaterDeflaterTest.testDeflaterInputStream(): success
test CloseInflaterDeflaterTest.testDeflaterOutputStream(true): success
test CloseInflaterDeflaterTest.testDeflaterOutputStream(false): success
test CloseInflaterDeflaterTest.testGZip(true): success
test CloseInflaterDeflaterTest.testGZip(false): success
test CloseInflaterDeflaterTest.testInflaterOutputStream(true): failure
java.lang.AssertionError: Expected IOException to be thrown, but nothing was thrown
	at org.testng.Assert.expectThrows(Assert.java:1730)
	at org.testng.Assert.assertThrows(Assert.java:1695)
	at CloseInflaterDeflaterTest.testInflaterOutputStream(CloseInflaterDeflaterTest.java:181)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)
test CloseInflaterDeflaterTest.testInflaterOutputStream(false): failure
java.lang.AssertionError: Expected IOException to be thrown, but nothing was thrown
	at org.testng.Assert.expectThrows(Assert.java:1730)
	at org.testng.Assert.assertThrows(Assert.java:1695)
	at CloseInflaterDeflaterTest.testInflaterOutputStream(CloseInflaterDeflaterTest.java:181)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)
test CloseInflaterDeflaterTest.testZipCloseEntry(java.util.jar.JarOutputStream@54a87a): success
test CloseInflaterDeflaterTest.testZipCloseEntry(java.util.zip.ZipOutputStream@707b45f0): success

===============================================
java/util/zip/CloseInflaterDeflaterTest.java
Total tests run: 9, Passes: 7, Failures: 2, Skips: 0
===============================================

----------System.err:(10/527)----------
java.lang.Exception: failures: 2
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: failures: 2",,,,,,,,,,JDK-8296366,JDK-8305628,JDK-8295874,JDK-8306203,JDK-8295775,JDK-8295704,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302142,JDK-8305522,,,,,,,,JDK-8302142,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,os_x,,,,,,"0|i2wpcz:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2022-04-12 13:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8213
Date: 2022-04-12 20:09:31 +0000;;;","2022-04-12 13:41;dukebot;Changeset: 7891085a
Author:    Ravi Reddy <rreddy@openjdk.org>
Committer: Lance Andersen <lancea@openjdk.org>
Date:      2022-04-12 20:39:05 +0000
URL:       https://git.openjdk.java.net/jdk/commit/7891085a877b8a5715d095e0c0dbaaf5bc8f16bb
;;;","2022-10-20 05:49;goetz;Fix request [17u]

I backport this for parity with 17.0.6-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2022-10-20 06:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/814
Date: 2022-10-20 12:51:39 +0000;;;","2022-10-31 11:46;goetz;Fix request [11u]

I backport this for parity with 11.0.18-oracle.
No risk, only a test change.
Somewhat clean backport: the test fixed was forgotten in a previous 
backport, including it here. Test and this patch on top both clean.
Test passes. SAP nightly testing passed.;;;","2022-10-31 11:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1489
Date: 2022-10-31 18:45:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create an automated test for JDK-4422535,JDK-8284767,5072408,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-04-12 09:59,2023-06-27 07:55,2023-10-01 09:57,2022-07-18 10:23,11,17,18,19,8,,,,,,,20,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sqebug,testbug,,,,,,,,,,,,,"Create an automated test for JDK-4422535
AccessibleValue implementation only accept Integers
The AccessibleValue implementations of the following components:

java.awt.Scrollbar
javax.swing.AbstractButton
javax.swing.JInternalFrame
javax.swing.JSplitPane
javax.swing.JScrollBar
javax.swing.JProgressBar
javax.swing.JSlider

require the argument to setCurrentAccessibleValue(Number) to be an Integer, else they completely ignore it - it returns a false indicating that the value has not been set by the return value, but they cannot know the reason for that).

The test verifies that for each of the above components, the AccessibleValue is set when it is set to a Number (Float, Double, long etc) and not just for an Integer.",,,,,,,,,,JDK-8302951,JDK-8310965,JDK-8303559,JDK-8304800,JDK-8302851,JDK-8302706,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wpbv:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-04-13 04:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8220
Date: 2022-04-13 11:02:05 +0000;;;","2022-07-18 10:23;dukebot;Changeset: 5ae43209
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Phil Race <prr@openjdk.org>
Date:      2022-07-18 17:16:44 +0000
URL:       https://git.openjdk.org/jdk/commit/5ae4320921b15dcc198d0c71416cd46e5b5c2f85
;;;","2023-02-28 09:45;goetz;Fix request [17u]

I backport this test fix for parity with 17.0.8-oracle to 17.0.7.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed
;;;","2023-02-28 09:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1191
Date: 2023-02-28 17:48:15 +0000;;;","2023-06-22 07:35;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed;;;","2023-06-22 07:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1989
Date: 2023-06-22 14:34:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[linux] improve print_container_info,JDK-8284758,5072396,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-04-12 07:21,2023-02-21 00:19,2023-10-01 09:57,2022-04-20 04:12,19,,,,,,,,,,,19,hotspot,,0,containers,hs_err,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,"Currently on Linux, os::Linux::print_container_info might print rather badly unreadable memory infos like :

memory_usage_in_bytes: 18029760512
memory_max_usage_in_bytes: 423686144

This could be improved , at a lot of places in the hs_err file output we already print the larger memory-related infos in k , for example rlimit information
or /proc/meminfo.",,,,,,,,,,JDK-8286803,JDK-8290665,JDK-8302946,JDK-8302835,JDK-8302836,JDK-8302626,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,linux,,,,,,"0|i2wp97:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-13 01:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8217
Date: 2022-04-13 08:20:20 +0000;;;","2022-04-20 04:12;dukebot;Changeset: 6c6d5223
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-04-20 11:08:43 +0000
URL:       https://git.openjdk.java.net/jdk/commit/6c6d5223dfaae268f968f4292356d4be89adb122
;;;","2022-05-13 03:25;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well because the adjusted output would be beneficial there too. Risk is low. The patch applies cleanly.;;;","2022-05-13 03:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/394
Date: 2022-05-13 10:19:02 +0000;;;","2022-07-18 07:54;mbaesken;jdk11u backport request
I would like to have the patch in jdk11 as well because the adjusted output would be beneficial there too. Risk is low. The patch does not apply cleanly (seems to have a bit of change in the stride).

PR : https://github.com/openjdk/jdk11u-dev/pull/1240
;;;","2022-07-19 01:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1240
Date: 2022-07-18 14:49:59 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[11u] Remove unused isUseContainerSupport in CgroupV1Subsystem,JDK-8284756,5072393,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-04-12 06:21,2023-02-13 23:36,2023-10-01 09:57,2022-04-13 04:58,,,,,,,,,,,,11.0.16,core-libs,,0,17-na,18-na,19-na,cgroupsv2,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,,,,,,,,,,,,,"src/java.base/linux/classes/jdk/internal/platform/cgroupv1/CgroupV1Subsystem.java

declares a private native method isUseContainerSupport() see:

https://github.com/openjdk/jdk11u-dev/blob/24fec25451a71df8ccf2510227c6286fb8f792ca/src/java.base/linux/classes/jdk/internal/platform/cgroupv1/CgroupV1Subsystem.java#L509

The 11u backport of JDK-8231111 moved this to CgroupsMetrics class. See:
https://github.com/openjdk/jdk11u-dev/commit/19f26f725fdc29ee0eb4e330a275134663933629#diff-43f63fd495a029da52a87cc35df770564f51688106f5f6373ac5f36848f3c62dR170

This is a result of an out-of-order backport of JDK-8250627 ahead of  
JDK-8231111. The stray declaration of CgroupV1Subsystem.isUseContainerSupport() should get removed as it's unused.",,,,,,,,,,JDK-8299014,JDK-8301985,JDK-8301698,JDK-8302401,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2wp8j:",9223372036854775807,b01,,,,,,,,,,,"2022-04-12 07:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1033
Date: 2022-04-12 14:30:42 +0000;;;","2022-04-12 09:12;sgehwolf;Fix Request (OpenJDK 11u):
Trivial cleanup patch post cgroups v2 patch of JDK-8231111. It's a 11u only patch because it's not present in head or 17u as patch ordering was different. Risk is low as it just removes dead code. Testing: TestUseContainerSupport continues to pass + GHA. The patch has been reviewed by Zhengyu Gu.;;;","2022-04-13 04:58;dukebot;Changeset: 8482b376
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-04-13 11:56:18 +0000
URL:       https://git.openjdk.java.net/jdk11u-dev/commit/8482b376d6630649728929158233984b11d0e2f7
;;;","2022-05-04 01:13;dukebot;Changeset: 8482b376
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-04-13 11:56:18 +0000
URL:       https://git.openjdk.java.net/jdk11u/commit/8482b376d6630649728929158233984b11d0e2f7
;;;","2022-11-16 03:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/178
Date: 2022-11-16 10:55:51 +0000;;;","2022-12-16 11:51;jdowland;Fix request (8u)

Please consider for 8u cgroup v2 support. A trivial clean patch. Thanks;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Zero does not build on Mac OS X due to missing os::current_thread_enable_wx implementation,JDK-8284752,5072388,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dholmes,jbechberger,jbechberger,2022-04-12 04:26,2022-10-12 02:15,2023-10-01 09:57,2022-04-12 16:28,,,,,,,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,,,,,,,,,,,,,,,,"The zero variant cannot currently be build on Mac OS X (I tested only aarch64): It fails because the `os::current_thread_enable_wx` method is not implemented for the bsd_zero target, but the usage of this method is only enabled with `MACOS_AARCH64_ONLY` which makes the usages appear in zero variants on Mac OS X aarch64.",,,,,,,,,,JDK-8295200,JDK-8295120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,,,"0|i2wp7f:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-12 04:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8200
Date: 2022-04-12 11:31:03 +0000;;;","2022-04-12 16:28;dukebot;Changeset: bc12e861
Author:    Johannes Bechberger <johannes.bechberger@sap.com>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2022-04-12 23:23:51 +0000
URL:       https://git.openjdk.java.net/jdk/commit/bc12e8616d1a28ab8504bcb6edc06783748cc797
;;;","2022-09-27 07:16;jbechberger;Fix Request (17u):
Applies clean.
The build runs through for Zero on my Mac M1.;;;","2022-09-27 07:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/742
Date: 2022-09-27 14:19:03 +0000;;;","2022-09-27 07:29;jbechberger;Fix Request (11u):
Applies clean.
The build runs through for Zero on my Mac M1. ;;;","2022-09-27 07:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1375
Date: 2022-09-27 14:32:07 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FFI_GO_CLOSURES macro not defined but required for zero build on Mac OS X,JDK-8284732,5072376,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jbechberger,jbechberger,jbechberger,2022-04-12 00:42,2023-05-05 02:04,2023-10-01 09:57,2022-04-12 16:23,,,,,,,,,,,,19,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oraclejdk-na,,,,,,,,,,,,,,,,"Building the zero variant of the JVM causes the compiler to emit warnings as the `FFI_GO_CLOSURES` macro is not defined:
```
In file included from ..../cpu/zero/globalDefinitions_zero.hpp:37:
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk/usr/include/ffi/ffi.h:483:20: error: expected value in expression
#if FFI_GO_CLOSURES
```
This only happens for the zero variant, as other variants do not use the ffi header.",,,,,,,,,,JDK-8295139,JDK-8294915,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307527,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,,,"0|i2wp4r:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-12 00:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8195
Date: 2022-04-12 07:53:32 +0000;;;","2022-04-12 03:05;dholmes;This is not a build issue but a hotspot issue.;;;","2022-04-12 16:23;dukebot;Changeset: cafde7fe
Author:    Johannes Bechberger <johannes.bechberger@sap.com>
Committer: David Holmes <dholmes@openjdk.org>
Date:      2022-04-12 23:20:12 +0000
URL:       https://git.openjdk.java.net/jdk/commit/cafde7fe0025cb648d27c8070689a073e49eabb0
;;;","2022-09-27 07:02;jbechberger;Fix Request (17u):
Fixes the zero build.
Applies clean and does not show the FFI_GO_CLOSURES related warnings on Mac OS X (which is the test for this PR).;;;","2022-09-27 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/741
Date: 2022-09-27 14:06:27 +0000;;;","2022-09-27 07:23;jbechberger;Fix Request (11u):
Fixes the zero build.
Applies clean and does not show the FFI_GO_CLOSURES related warnings on Mac OS X (which is the test for this PR). ;;;","2022-09-27 07:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1374
Date: 2022-09-27 14:23:36 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Include all image types to the J2DBench.ColorConvertOpTests,JDK-8284699,5072339,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-04-11 14:01,2022-04-20 23:28,2023-10-01 09:57,2022-04-17 20:37,19,,,,,,,,,,,19,client-libs,,0,noreg-demo,,,,,,,,,,,,,,,,,,,,The J2DBench.ColorConvertOp tests are used to track the performance of the littlecms library in the JDK. The new version of the littlecms will add support for the premultiplied alpha. But right now the J2DBench does not test the pre-alpha formats.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wowj:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-04-11 15:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8188
Date: 2022-04-11 21:06:08 +0000;;;","2022-04-17 20:37;dukebot;Changeset: 21ea740e
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-04-18 03:34:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/21ea740e1da48054ee46efda493d0812a35d786e
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Avoid parsing the doc comment of an element that is not documented,JDK-8284697,5072336,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2022-04-11 12:48,2022-04-20 23:31,2023-10-01 09:57,2022-04-19 09:28,,,,,,,,,,,,19,tools,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wovv:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-04-11 14:45;prappo;jdk/javadoc/internal/doclets/toolkit/util/VisibleMemberTable.java:466

The code in question appeared in JDK-8025091; the fix needs to be careful not to introduce performance degradation.;;;","2022-04-15 11:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8266
Date: 2022-04-15 18:23:38 +0000;;;","2022-04-19 09:28;dukebot;Changeset: 13fb1eed
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2022-04-19 16:27:13 +0000
URL:       https://git.openjdk.java.net/jdk/commit/13fb1eed52f1a9152242119969a9d4a0c0627513
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[macos] VoiceOver : Getting java.lang.IllegalArgumentException: Invalid location on Editable JComboBox,JDK-8284690,5072327,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,landrews,landrews,2022-04-11 09:59,2022-12-05 19:32,2023-10-01 09:57,2022-05-25 03:42,18,19,,,,,,,,,,19,client-libs,,0,a11y,accessibility,amazon-interest,cssn22_07_01,jdk11u-fix-request,jdk11u-fix-yes,jdk15u-fix-request,jdk15u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,macos,regression,sn_117,sn_118,sn_119,vpat-exclude,,,"I am getting the following java.lang.IllegalArgumentException: Invalid location After selecting the text and selecting the item from the editable JComboBox.

java.lang.IllegalArgumentException: Invalid location
	at java.desktop/javax.swing.text.JTextComponent$AccessibleJTextComponent.getTextRange(JTextComponent.java:3213)
	at java.desktop/sun.lwawt.macosx.CAccessibleText$14.call(CAccessibleText.java:291)
	at java.desktop/sun.lwawt.macosx.CAccessibleText$14.call(CAccessibleText.java:283)
	at java.desktop/sun.lwawt.macosx.LWCToolkit$CallableWrapper.run(LWCToolkit.java:698)
	at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:97)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:747)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:744)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)


Step to reproduce
------------------------
1) Enable VoiceOver on the mac
2) Run the attached test
3) Select an item from Editable JComboBox. Voice over should read the selected value.
4) Once again select an item from the Editable JComboBox this time select the value (text) and try selecting another item from the Editable JComboBox.
If you see the exception then the bug is reproduced.

I have attached the screen recording for the reference.
",,,,,,,,,,JDK-8287784,JDK-8295853,JDK-8295852,JDK-8295854,JDK-8288411,JDK-8289677,JDK-8298137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-04-11 09:59;landrews;EditableJComboBoxAccessibilityException.mov;https://bugs.openjdk.org/secure/attachment/98530/EditableJComboBoxAccessibilityException.mov","2022-05-19 11:49;landrews;Screen Shot 2022-05-19 at 1.43.05 PM.png;https://bugs.openjdk.org/secure/attachment/99023/Screen+Shot+2022-05-19+at+1.43.05+PM.png","2022-04-11 09:57;landrews;TestJComboBoxAccessibility.java;https://bugs.openjdk.org/secure/attachment/98531/TestJComboBoxAccessibility.java",,,,,,,,,,,,,,,,18,,os_x,,,,,,"0|i2wotv:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-05-19 09:04;vdyakov;[~landrews] please provide details with access to your machine on how to reproduce it;;;","2022-05-19 11:49;landrews;[~vdyakov], I reproduced the bug on my mac laptop. I have attached detailed of my laptop.;;;","2022-05-19 12:18;vdyakov;please re-evaluate by an access to affected laptop;;;","2022-05-20 14:04;kizune;Due to the asynchronous operations from event processor and from native request from VoiceOver when 
we are selecting text in combobox and then trying to choose in popup item with text longer than 
the selected text we have a race condition when we are asking the selection from the text component whose
document model has not been fully updated and we are trying to request selection that is outside of the 
document model's text range so we get this exception.;;;","2022-05-20 14:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8820
Date: 2022-05-20 21:13:35 +0000;;;","2022-05-25 03:42;dukebot;Changeset: ebfa27b9
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-05-25 10:39:17 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ebfa27b9f06aee8ceceabc564a78a351903ce9a1
;;;","2022-06-20 14:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk15u-dev/pull/225
Date: 2022-06-20 20:51:04 +0000;;;","2022-06-20 14:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/480
Date: 2022-06-20 20:43:18 +0000;;;","2022-06-20 14:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1162
Date: 2022-06-20 20:46:13 +0000;;;","2022-07-22 15:27;phh;Fix Request (15u)

Clean backport, low risk.;;;","2022-10-09 18:42;serb;Fix Request (17u)

Clean backport, low risk.;;;","2022-10-09 18:42;serb;Fix Request (11u)

Clean backport, low risk.;;;","2022-10-09 19:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/132
Date: 2022-10-10 01:56:29 +0000;;;","2022-10-30 15:25;serb;Fix request (8u)

Parity with Oracle 8u351. Clean backport, low risk. 
I have verified the fix manually using the steps in the bug report and have run the jdk_desktop tests, no new issues were found.
Review https://github.com/openjdk/jdk8u-dev/pull/132



;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor cleanup could be done in java.security.jgss,JDK-8284688,5072325,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,mpowers,mpowers,2022-04-11 09:16,2022-05-25 23:08,2023-10-01 09:57,2022-05-19 06:16,,,,,,,,,,,,19,security-libs,,0,,,,,,,,,,,,,,,,,,,,,"JDK-8273046 is the umbrella bug for this bug. The changes were too large for a single code review, so it was decided to split into smaller chunks. This is one such chunk:

open/src/java.security.jgss/share/classes/javax/security
open/src/java.security.jgss/share/classes/org/ietf
open/src/java.security.jgss/share/classes/sun/security",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8273046,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wotf:",9223372036854775807,b24,,,,,,,,,,,"2022-04-11 17:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/7746
Date: 2022-03-08 17:21:34 +0000;;;","2022-05-19 06:16;dukebot;Changeset: db19dc6b
Author:    Mark Powers <mark.powers@oracle.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2022-05-19 13:13:48 +0000
URL:       https://git.openjdk.java.net/jdk/commit/db19dc6bb99fe5f149045b6a2a9ceb0b79f0dcc8
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
validate-source failure after JDK-8283710,JDK-8284687,5072324,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,dcubed,dcubed,dcubed,2022-04-11 09:14,2022-06-15 15:11,2023-10-01 09:57,2022-04-11 09:27,19,,,,,,,,,,,19,hotspot,,0,noreg-trivial,tier1,,,,,,,,,,,,,,,,,,,"[2022-04-11T14:57:45,006Z]   Validating hs-atr-problem-listed.js
[2022-04-11T14:57:47,758Z] BAD COPYRIGHT LINE: /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14660/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c134da88-879d-4c0e-b873-d26d20a75029/runs/0ebee734-e900-4a94-a425-78da8415534d/workspace/open/src/hotspot/share/jfr/leakprofiler/chains/jfrbitset.hpp
[2022-04-11T14:57:47,758Z] 1 header format error(s).
[2022-04-11T14:57:47,760Z] make[3]: *** [/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14660/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c134da88-879d-4c0e-b873-d26d20a75029/runs/0ebee734-e900-4a94-a425-78da8415534d/workspace/build/validate-source/support/header_validated/_src_hotspot_validated] Error 1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283710,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wot7:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-04-11 09:17;dcubed;Context diff for the proposed fix:

$ git diff
diff --git a/src/hotspot/share/jfr/leakprofiler/chains/jfrbitset.hpp b/src/hotspot/share/jfr/leakprofiler/chains/jfrbitset.hpp
index af83fa3c3cb..507e31f9e5d 100644
--- a/src/hotspot/share/jfr/leakprofiler/chains/jfrbitset.hpp
+++ b/src/hotspot/share/jfr/leakprofiler/chains/jfrbitset.hpp
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it;;;","2022-04-11 09:21;dcubed;Verified with:

$ do_java_bld -c validate-headers inc
INFO: pwd=/work/shared/bug_hunt/XXXXXXX_for_jdk19.git
INFO: pwd and pwd -P do not match; pwd might contain symbolic links.
INFO: reset pwd=/System/Volumes/Data/work/shared/bug_hunt/XXXXXXX_for_jdk19.git
INFO: GNUMAKE=/usr/bin/make
INFO: GNUMAKE version is: GNU Make 3.81
INFO: DEVKIT=
INFO: BOOT_JDK=
Build Type: incremental
Build prelim time: 0.00 minutes.
Build Config: validate-headers
    Building objects
Building target 'validate-headers' in configuration 'validate-source'
Finished building target 'validate-headers' in configuration 'validate-source'
    Done building
    Build validate-headers time: 0.91 minutes.
Total build time: 0.91 minutes.
;;;","2022-04-11 09:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8181
Date: 2022-04-11 16:20:02 +0000;;;","2022-04-11 09:27;dukebot;Changeset: 470a6684
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-04-11 16:25:44 +0000
URL:       https://git.openjdk.java.net/jdk/commit/470a66840cda88d3be07f2b7c4c164c3265603e1
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Interval of < 1 ms disables ExecutionSample events,JDK-8284686,5072323,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jbechberger,jbechberger,jbechberger,2022-04-11 08:59,2022-09-27 05:19,2023-10-01 09:57,2022-05-09 12:30,,,,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,,,,,,"When using an interval of < 1 ms, no ExecutionSample events are produced:

It works for 1ms:
`java -XX:StartFlightRecording=filename=flight.jfr,jdk.ExecutionSample#period=1ms CLASS_FILE; jfr print --events jdk.ExecutionSample flight.jfr`
prints events, but 
`java -XX:StartFlightRecording=filename=flight.jfr,jdk.ExecutionSample#period=999us CLASS_FILE; jfr print --events jdk.ExecutionSample flight.jfr`
prints no events. 

This seems to be a special case for MethodSample events (https://github.com/openjdk/jdk/blob/master/src/hotspot/share/jfr/periodic/sampling/jfrThreadSampler.cpp#L493-L508): the period interval is converted into integer milliseconds for all events, converting 999us to 0ms, but only for MethodSample (ExecutionSample, ...) does a 0ms interval mean that no events are generated.

Seems to be present in the code since the first public commit of JFR.
",,,,,,,,,,JDK-8288401,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wosz:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-04-11 09:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8183
Date: 2022-04-11 16:53:08 +0000;;;","2022-05-09 12:30;dukebot;Changeset: 902b1dd4
Author:    Johannes Bechberger <johannes.bechberger@sap.com>
Committer: Erik Gahlin <egahlin@openjdk.org>
Date:      2022-05-09 19:27:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/902b1dd4550136c520e5ec6cb8c4fe9a81218938
;;;","2022-06-13 14:32;jbechberger;Fix Request (17u):
Fix handling of ExecutionSample events with < 1ms intervals
Applies clean and tested via the nightly SAP builds.;;;","2022-06-13 14:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/463
Date: 2022-06-13 21:35:36 +0000;;;","2022-09-23 07:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/58
Date: 2022-09-23 14:42:26 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"compiler/c2/aarch64/TestFarJump.java fails with ""RuntimeException: for CodeHeap < 250MB the far jump is expected to be encoded with a single branch instruction""",JDK-8284681,5072317,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bulasevich,dcubed,dcubed,2022-04-11 08:33,2022-10-19 04:17,2023-10-01 09:57,2022-04-16 04:58,19,,,,,,,,,,,19,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,oracle-triage-19,tier6,ursqe-triaged,,,,,,,,,,,,,,,"The following test failed in the JDK19 CI:

compiler/c2/aarch64/TestFarJump.java

Here's a snippet from the log file:

#section:driver
----------messages:(5/179)----------
command: driver compiler.c2.aarch64.TestFarJump
reason: User specified action: run driver compiler.c2.aarch64.TestFarJump 
Mode: agentvm
Agent id: 6
elapsed time (seconds): 0.421
----------configuration:(18/2496)----------
Boot Layer
  class path: /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar 
              /opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar 
  patch:      java.base /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S43514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f4a2a10-c93f-4a25-b114-096da87fb938/runs/53ab2678-d5cf-4c94-9d43-38d25348aed8/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/patches/java.base

Test Layer
  class path: /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S43514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f4a2a10-c93f-4a25-b114-096da87fb938/runs/53ab2678-d5cf-4c94-9d43-38d25348aed8/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/classes/2/compiler/c2/aarch64/TestFarJump.d
              /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1176/src.full/open/test/hotspot/jtreg/compiler/c2/aarch64
              /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S43514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f4a2a10-c93f-4a25-b114-096da87fb938/runs/53ab2678-d5cf-4c94-9d43-38d25348aed8/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/classes/2/test/lib
              /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1176/src.full/open/test/lib
              /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S43514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f4a2a10-c93f-4a25-b114-096da87fb938/runs/53ab2678-d5cf-4c94-9d43-38d25348aed8/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/classes/2
              /opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1176/src.full/open/test/hotspot/jtreg

----------rerun:(29/6936)*----------

<snip>

----------System.out:(10/4782)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1176/linux-aarch64-open.jdk/jdk-19/bin/java -cp /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S43514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f4a2a10-c93f-4a25-b114-096da87fb938/runs/53ab2678-d5cf-4c94-9d43-38d25348aed8/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/classes/2/compiler/c2/aarch64/TestFarJump.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1176/src.full/open/test/hotspot/jtreg/compiler/c2/aarch64:/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S43514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f4a2a10-c93f-4a25-b114-096da87fb938/runs/53ab2678-d5cf-4c94-9d43-38d25348aed8/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/classes/2/test/lib:/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S43514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f4a2a10-c93f-4a25-b114-096da87fb938/runs/53ab2678-d5cf-4c94-9d43-38d25348aed8/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/classes/2:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar -XX:-Inline -Xcomp -Xbatch -XX:+TieredCompilation -XX:+SegmentedCodeCache -XX:CompileOnly=compiler.c2.aarch64.TestFarJump::main -XX:ReservedCodeCacheSize=256M -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly compiler.c2.aarch64.TestFarJump ]
[2022-04-11T02:20:34.985072841Z] Gathering output for process 3238574
[Exception Handler]
  0x0000fffbf0140450: ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x0000fffbf0140450: a8ec 0390 | 0801 1691 | 0001 3fd6 | c1d5 bbd4 | 78be 930f | fcff 0000 
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1176/linux-aarch64-open.jdk/jdk-19/bin/java -cp /opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S43514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f4a2a10-c93f-4a25-b114-096da87fb938/runs/53ab2678-d5cf-4c94-9d43-38d25348aed8/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/classes/2/compiler/c2/aarch64/TestFarJump.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1176/src.full/open/test/hotspot/jtreg/compiler/c2/aarch64:/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S43514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f4a2a10-c93f-4a25-b114-096da87fb938/runs/53ab2678-d5cf-4c94-9d43-38d25348aed8/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/classes/2/test/lib:/opt/mach5/mesos/work_dir/slaves/c82600aa-2448-475c-8c08-6f02a5b3f3af-S43514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1f4a2a10-c93f-4a25-b114-096da87fb938/runs/53ab2678-d5cf-4c94-9d43-38d25348aed8/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_compiler/classes/2:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/javatest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/junit.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/hamcrest.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/testng.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/jcommander.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/6.1/1/bundles/jtreg-6.1+1.zip/jtreg/lib/guice.jar -XX:-Inline -Xcomp -Xbatch -XX:+TieredCompilation -XX:+SegmentedCodeCache -XX:CompileOnly=compiler.c2.aarch64.TestFarJump::main -XX:ReservedCodeCacheSize=200M -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly compiler.c2.aarch64.TestFarJump ]
[2022-04-11T02:20:35.185813687Z] Gathering output for process 3238618
[Exception Handler]
  0x0000fffdd3940410: ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x0000fffdd3940410: 5c50 8695 | c1d5 bbd4 | 78be 56f0 | fdff 0000 
----------System.err:(11/674)----------
java.lang.RuntimeException: for CodeHeap < 250MB the far jump is expected to be encoded with a single branch instruction
	at compiler.c2.aarch64.TestFarJump.runVM(TestFarJump.java:116)
	at compiler.c2.aarch64.TestFarJump.main(TestFarJump.java:128)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:828)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: for CodeHeap < 250MB the far jump is expected to be encoded with a single branch instruction",,,,,,,,,,JDK-8295656,JDK-8295233,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280872,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,linux,,,,,,"0|i2worn:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-11 09:15;kvn;The test was introduced by JDK-8280872.;;;","2022-04-11 09:19;kvn;[~bulasevich] Please look.  No additional flags were specified according to log.;;;","2022-04-11 09:28;kvn;I assume the issue is intermittent because this is first failure since change was pushed (jdk-19+17).;;;","2022-04-11 17:46;dlong;ILW = 1 test fails, possible test bug; intermittent; no workaround = MMH = P3;;;","2022-04-13 03:20;bulasevich;Thank for the issue!

Problem is that ""should not reach here"" message raw address is put into the codes, and it happened that raw address is equal to the ADRP instruction encoding. The test fails because it does not expect to find ADRP there. I am going to fix the test logic.

==============================================================================
[Exception Handler]
  0x0000fffbf0140450: ; {runtime_call handle_exception_from_callee Runtime1 stub}
  0x0000fffbf0140450: a8ec 0390 | 0801 1691 | 0001 3fd6 | c1d5 bbd4 | 78be 930f | fcff 0000 

Disassembly:
0x0000000000000000:  A8 EC 03 90    adrp  x8, #0x7d94000
0x0000000000000004:  08 01 16 91    add   x8, x8, #0x580
0x0000000000000008:  00 01 3F D6    blr   x8
0x000000000000000c:  C1 D5 BB D4    dcps1 #0xdeae
0x0000000000000010:  78 BE 93 0F    n/a
0x0000000000000014:  FC FF 00 00    n/a

[Exception Handler]
  0x0000fffdd3940410: ; {runtime_call handle_exception_from_callee Runtime1 stub}
  0x0000fffdd3940410: 5c50 8695 | c1d5 bbd4 | 78be 56f0 | fdff 0000 

Disassembly:
0x0000000000000000:  5C 50 86 95    bl    #0x6194170
0x0000000000000004:  C1 D5 BB D4    dcps1 #0xdeae
0x0000000000000008:  78 BE 56 F0    adrp  x24, #0xad7cf000
0x000000000000000c:  FC FF 00 00    n/a

==============================================================================

void MacroAssembler::stop(const char* msg) {
  BLOCK_COMMENT(msg);
  dcps1(0xdeae);
  emit_int64((uintptr_t)msg);
}

void should_not_reach_here() { stop(""should not reach here""); }

int LIR_Assembler::emit_exception_handler() {
  ...
  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::handle_exception_from_callee_id)));  
  __ should_not_reach_here();
}
;;;","2022-04-14 09:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8223
Date: 2022-04-13 12:39:59 +0000;;;","2022-04-16 04:58;dukebot;Changeset: 21de4e55
Author:    Boris Ulasevich <bulasevich@openjdk.org>
Date:      2022-04-16 05:57:00 +0000
URL:       https://git.openjdk.java.net/jdk/commit/21de4e55b8fa2ba138338ec82c159897ab3d4233
;;;","2022-10-11 04:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/779
Date: 2022-10-11 11:34:26 +0000;;;","2022-10-11 04:46;eastigeevich;Fix Request (17u)

As the backport of JDK-8280872 introduces the test, we need a backport of the test fix.
This is a clean backport.

;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sun.font.FontConfigManager.getFontConfig() leaks charset,JDK-8284680,5072311,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zgu,zgu,zgu,2022-04-11 07:34,2022-09-08 13:27,2023-10-01 09:57,2022-05-12 05:27,11,17,18,19,,,,,,,,19,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk18u-fix-request,redhat-interest,,,,,,,,,,,,,,,"valgrind caught following leaks running SwingSet2 demo


=1373265== 158,464 bytes in 77 blocks are definitely lost in loss record 16,222 of 16,244
==1373265==    at 0x48496AF: realloc (vg_replace_malloc.c:1437)
==1373265==    by 0x4AFB32B8: ???
==1373265==    by 0x4AFB4A80: ???
==1373265==    by 0x4AFB4F93: ???
==1373265==    by 0x49C27A74: Java_sun_font_FontConfigManager_getFontConfig (fontpath.c:1103)
==1373265==    by 0x24A855D0: ???
==1373265==    by 0x24A812D5: ???
==1373265==    by 0x24A812D5: ???
==1373265==    by 0x24A8142E: ???
==1373265==    by 0x24A813E9: ???
==1373265==    by 0x24A812D5: ???
==1373265==    by 0x24A8142E: ???
",,,,,,,,,,JDK-8289788,JDK-8289377,JDK-8293552,JDK-8289376,JDK-8290599,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2woqb:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-04-11 11:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8187
Date: 2022-04-11 18:05:09 +0000;;;","2022-05-12 05:27;dukebot;Changeset: dea6e886
Author:    Zhengyu Gu <zgu@openjdk.org>
Date:      2022-05-12 12:26:28 +0000
URL:       https://git.openjdk.java.net/jdk/commit/dea6e886af20457597dd02dacf1e80273a7165a7
;;;","2022-06-08 07:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/447
Date: 2022-06-08 14:30:01 +0000;;;","2022-06-08 07:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk11u-dev/pull/1131
Date: 2022-06-08 14:31:19 +0000;;;","2022-06-08 12:05;zgu;Fix Request (17u)

A clean backport to fix memory leaks.
;;;","2022-06-08 12:06;zgu;Fix Request (11u)

A clean backport to fix memory leaks.;;;","2022-06-08 14:03;zgu;Fix Request (18u)

A clean backport to fix memory leaks.;;;","2022-06-08 14:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk18u/pull/150
Date: 2022-06-08 21:03:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"""jpackage.exe"" creates application launcher without Windows Application Manfiest",JDK-8284675,5072304,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,alitvinov,alitvinov,2022-04-11 06:14,2022-06-21 05:39,2023-10-01 09:57,2022-05-05 13:28,17,18,19,,,,,,,,,19,tools,,0,bugdb_33410156,jdk17u-fix-request,jdk17u-fix-yes,sn_117,,,,,,,,,,,,,,,,,"ADDITIONAL OS VERSION INFORMATION:
MS Windows 10 OS

A DESCRIPTION OF THE PROBLEM:
""jpackage.exe"" tool generates Java application launchers which do not contain Windows Application Manifest.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM:
1.  Install JDK.
2.  Download JDK Demos and Samples archive which is currently publicly available for download as part of bundles related to JDK 8 update releases.
https://www.oracle.com/java/technologies/downloads/#java8-demos-windows

3.  Unpack the downloaded archive with Demos and Samples.
4.  Create Java application launcher by the next command:

""<JDK_HOME>\bin\jpackage.exe -t ""app-image"" -n ""SwingSet2"" -i ""<DEMOS_AND_SAMPLES_DIR>\demo\jfc\SwingSet2"" --main-class SwingSet2 --main-jar SwingSet2.jar""

5.  Check, if in the generated Java application launcher the Windows Application Manifest is present or absent. It can be done using ""Mt.exe"" tool from Microsoft Windows Software Development Kit (SDK) by the next command:

""mt.exe -inputresource:<CURRENT_DIR>\SwingSet2\SwingSet2.exe;#1 -out:res1.manifest""

If ""mt.exe"" fails with the error message ""Failed to read the manifest from the resource of file ""SwingSet2.exe"". The specified resource type cannot be found in the image file."", then the bug is reproduced.",,,,,,,,,,JDK-8286434,JDK-8288864,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8274498,,JDK-8286429,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2woor:",9223372036854775807,b22,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-04-11 06:21;alitvinov;I verified that the bug is present in JDK 19 compiled from the version of JDK source code from the repository ""https://github.com/openjdk/jdk.git"" of its state on 03/25/2022. Also I verified using this source code that the solution for this bug announced by Alexey Semenyuk earlier in off-line communication effectively resolves this bug.;;;","2022-05-05 08:47;vdyakov;[~asemenyuk] any progress on this bug fix?;;;","2022-05-05 12:02;asemenyuk;jpackage app launcher must have the same manifest as the standard Java launcher;;;","2022-05-05 12:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8561
Date: 2022-05-05 19:02:51 +0000;;;","2022-05-05 13:28;dukebot;Changeset: e7adc283
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2022-05-05 20:25:32 +0000
URL:       https://git.openjdk.java.net/jdk/commit/e7adc283c60c6c8e7bb174b45a2cd68823a9e81e
;;;","2022-06-15 03:18;goetz;Fix request [17u]

I backport this for parity with 17.0.5-oracle.
Low risk, build change. Requires follow-up 8286429.
Clean backport. SAP nighlty testing passed.;;;","2022-06-15 03:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/470
Date: 2022-06-15 10:19:44 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
First selected item of a TreeItem multiple selection gets removed if new items are constantly added to the TreeTableView,JDK-8284665,5072295,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2022-04-11 03:51,2023-02-21 13:58,2023-10-01 09:57,2022-06-27 07:02,jfx17,,,,,,,,,,,jfx19,javafx,,0,,,,,,,,,,,,,,,,,,,,,"On a TreeTableView that gets new TreeItems added continuously, at some fast rate, with multiple selection enabled, after selecting an item and then pressing shift to extend the range to a group of items, the selection removes the first item, which is unexpected.

When no more items are added to the TreeTableView or these are added at a low rate (several seconds), then the selection works as expected, if it happens after some time of the last addition.

This issue can be reproduced with any JavaFX version.

To reproduce, run the attached test.

- Select Node 1 (see selectNode1.png) 
- Press Shift to extend the range to items Node 1, 2, 3 and 4. Note the selection removes the first item and only three items are selected (see shiftSelectNode4Fails.png)

Wait around 10 seconds (until 100 treeItems have been added), do it again:

- Select Node 1 (see selectNode1.png) 
- Press Shift to extend the range to items Node 1, 2, 3 and 4. Note the selection works as expected and four items are selected (see shiftSelectNode4Works.png).",,,,,,,,,,JDK-8287563,JDK-8295769,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8248217,,,,,,,,,,,,,,,"2022-04-11 03:49;jpereda;TreeTableSelectIssue.java;https://bugs.openjdk.org/secure/attachment/98515/TreeTableSelectIssue.java","2022-04-11 03:34;jpereda;selectNode1.png;https://bugs.openjdk.org/secure/attachment/98516/selectNode1.png","2022-04-11 03:34;jpereda;shiftSelectNode4Fails.png;https://bugs.openjdk.org/secure/attachment/98517/shiftSelectNode4Fails.png","2022-04-11 03:34;jpereda;shiftSelectNode4Works.png;https://bugs.openjdk.org/secure/attachment/98518/shiftSelectNode4Works.png",,,,,,,,,,,,,,,,,,,,,,,"0|i2womr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-04-11 05:35;jpereda;Adding a listener:

table.getSelectionModel().getSelectedItems().addListener((ListChangeListener<TreeItem<String>>) change -> System.out.println(""change = "" + change));

and performing the mentioned steps, shows:

- if items are being added:

change = { [TreeItem [ value: Node 1 ]] added at 0 }
change = { [TreeItem [ value: Node 1 ]] removed at 0 }
change = { [TreeItem [ value: Node 2 ], TreeItem [ value: Node 3 ], TreeItem [ value: Node 4 ]] added at 0 }

- if items are not being added anymore:

change = { [TreeItem [ value: Node 1 ]] added at 0 }
change = { [TreeItem [ value: Node 1 ]] removed at 0 }
change = { [TreeItem [ value: Node 1 ], TreeItem [ value: Node 2 ], TreeItem [ value: Node 3 ], TreeItem [ value: Node 4 ]] added at 0 }

TableCellBehaviourBase::doSelect has:

final TablePositionBase anchor = getAnchor(tableView, focusedCell);

when Node 1 is selected, focusedCell is row 1 (as expected), anchor returns row 1 (as expected) when the treeTableView size doesn't change. However, anchor returns row 2 (unexepected) when items are being added.

That leads to the treeItemListener in TreeTableView, that has a shift=addedSize when e.wasAdded that calls:

TreeTablePosition<S, ?> newAnchor = new TreeTablePosition<>(treeTableView, anchor.getRow() + shift, anchor.getTableColumn());
TreeTableCellBehavior.setAnchor(treeTableView, newAnchor, false);

if the anchor was part of the selection.

For the current test, this shifts unexpectedly the anchor of a row that is part of the selection but is not part of the change, which happens several rows below.
This should only happen if the anchor was _after_ the startRow of the change.

                    ;;;","2022-04-13 03:50;arapte;It's not that only one item gets removed from the selection. It may remove multiple items when selecting using Shift + Down arrow key.
In addition, If we select items using Shift + UP arrow key, then and extra item on bottom side of selection gets added into the selection.;;;","2022-05-05 03:26;jpereda;It seems this issue was introduced with JDK-8095881, which was applied not only to TreeTableView, but also ListView, TableView and TreeView. 

I can reproduce the issue based on a similar test with a TableView, but not with a ListView or a TreeView.

The fix is the same for the two controls, so I guess it could be done from this single JBS issue?
;;;","2022-05-05 09:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jfx/pull/790
Date: 2022-05-05 16:21:45 +0000;;;","2022-06-27 06:59;kcr;Changeset: 83a46e0c
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2022-05-31 10:06:59 +0000
URL:       https://git.openjdk.java.net/jfx/commit/83a46e0cef3f041b349c59cd9108d9a5895e79c9
;;;","2022-10-20 10:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/85
Date: 2022-10-20 17:24:57 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reproducible assembly builds without relative linking,JDK-8284661,5072292,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aleonard,aleonard,aleonard,2022-04-11 02:19,2022-05-31 04:09,2023-10-01 09:57,2022-04-19 01:33,,,,,,,,,,,,19,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,reproducible-build,,,,,,,,,,,,,,,,,,"FIx JDK-8284437 resolved reproducible builds from different workspaces,
but utilized relative path linking because assembly files embedded absolute
file paths during the library linking.

The embedded absolute assembly file path symbols is because the source
.S assembly files do not specify a .file symbol location, which then means
the linker embeds a symbol link to the absolute .object file.

Usage of a .file <relative source location> in the .S source will result in a 
correct .file symbol.
",,,,,,,,,,JDK-8287564,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284437,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2wom3:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-04-11 02:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8177
Date: 2022-04-11 09:43:37 +0000;;;","2022-04-19 01:33;dukebot;Changeset: ab83bced
Author:    Andrew Leonard <aleonard@openjdk.org>
Date:      2022-04-19 08:29:38 +0000
URL:       https://git.openjdk.java.net/jdk/commit/ab83bceda14f00d2bd9489d33f40aeeafd7572b4
;;;","2022-05-25 11:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk17u-dev/pull/416
Date: 2022-05-25 18:35:31 +0000;;;","2022-05-25 11:45;aleonard;Fix Request 17u
Dependent fix for enabling reproducible builds when the built workspace folder and or user is different between the two builds, this updates the fix to not rely on relative linking.
Applies cleanly on top of JDK-8284437.
Tests successfully.
This should be merged after the dependent PR for JDK-8284437.
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Doc errors in sun.security.ssl.SSLSessionContextImpl,JDK-8284641,5072271,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjiang,jjiang,jjiang,2022-04-10 20:27,2022-04-13 23:03,2023-10-01 09:57,2022-04-10 23:40,18,,,,,,,,,,,19,security-libs,,0,noreg-doc,tencent-interest,,,,,,,,,,,,,,,,,,,"- * @systemProperty jdk.tls.server.enableSessionTicketExtension} determines if the
+ * {@systemProperty jdk.tls.server.enableSessionTicketExtension} determines if the
  * server will provide stateless session tickets, if the client supports it,
  * as described in RFC 5077 and RFC 8446.  a stateless session ticket
  * contains the encrypted server's state which saves server resources.
@@ -47,7 +47,7 @@ import sun.security.util.Cache;
  * client will send an extension in the ClientHello in the pre-TLS 1.3.
  * This extension allows the client to accept the server's session state for
  * Server Side stateless resumption (RFC 5077).  Setting the property to
- * ""true"" turns this on, by default it is false.  For TLS 1.3, the system
+ * ""false"" turns this off, by default it is true.  For TLS 1.3, the system",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wohf:",9223372036854775807,b18,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-04-10 21:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8173
Date: 2022-04-11 04:02:44 +0000;;;","2022-04-10 23:40;dukebot;Changeset: 40ddb755
Author:    John Jiang <jjiang@openjdk.org>
Date:      2022-04-11 06:39:18 +0000
URL:       https://git.openjdk.java.net/jdk/commit/40ddb7558cd985d49aa5aaedae6c5145ba3d0ac0
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crashes after 8282221:  assert(ctrl == kit.control()) failed: Control flow was added although the intrinsic bailed out,JDK-8284635,5072268,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sparasa,dholmes,dholmes,2022-04-10 19:06,2022-04-27 05:48,2023-10-01 09:57,2022-04-14 09:27,19,,,,,,,,,,,19,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-19,problemlist,regression,tier4,tier6,tier7,tier8,,,,,,,,,,,"Test: java/lang/Integer/Unsigned.java

Flags: '-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation'


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14723/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/dc999d20-0b9e-45a0-a56e-a0a5d62ec11b/runs/0465d409-f0a1-4a56-ab74-7df41d85d328/workspace/open/src/hotspot/share/opto/library_call.cpp:140), pid=15469, tid=15487
#  assert(ctrl == kit.control()) failed: Control flow was added although the intrinsic bailed out
#
# JRE version: Java(TM) SE Runtime Environment (19.0+18) (fastdebug build 19-ea+18-1175)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 19-ea+18-1175, compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x133e4c4]  LibraryIntrinsic::generate(JVMState*)+0x284
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14421/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b35e1d04-72f8-4b37-acef-d679dcc5f979/runs/3040b9d8-2706-4b1c-a9c1-1b150fbd785c/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/scratch/4/core.15469)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xmx768m -XX:MaxRAMPercentage=4.16667 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14421/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b35e1d04-72f8-4b37-acef-d679dcc5f979/runs/3040b9d8-2706-4b1c-a9c1-1b150fbd785c/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/tmp -ea -esa -Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:+TieredCompilation -Djava.library.path=/opt/mach5/mesos/work_dir/jib-master/install/jdk-19+18-1175/linux-x64-debug.test/jdk/jtreg/native --patch-module=java.base=/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14421/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b35e1d04-72f8-4b37-acef-d679dcc5f979/runs/3040b9d8-2706-4b1c-a9c1-1b150fbd785c/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/patches/java.base -Djava.security.policy=file:/opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14421/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b35e1d04-72f8-4b37-acef-d679dcc5f979/runs/3040b9d8-2706-4b1c-a9c1-1b150fbd785c/./testoutput/test-support/jtreg_open_test_jdk_jdk_lang/jtreg.policy com.sun.javatest.regtest.agent.AgentServer -id 47 -logfile /opt/mach5/mesos/work_dir/slaves/779adf21-f3e5-4e6a-a889-8cc0f9bc6fbb-S14421/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b35e1d04-72f8-4b37-acef-d679dcc5f979/runs/3040b9d8-2706-4b1c-a9c1-1b150fbd785c/testoutput/test-support/jtreg_open_test_jdk_jdk_lang/jtData/agentServer.47.trace -allowSetSecurityManager -port 44809 -timeoutFactor 10.0

Host: AMD EPYC 7742 64-Core Processor, 12 cores, 46G, Oracle Linux Server release 7.9
Time: Sun Apr 10 16:14:10 2022 UTC elapsed time: 202.118148 seconds (0d 0h 3m 22s)

---------------  T H R E A D  ---------------

Current thread (0x00007f4eb04eb730):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=15487, stack(0x00007f4e896a5000,0x00007f4e897a6000)]


Current CompileTask:
C2: 202118 16631   !b  4       Unsigned::testDivideAndRemainder (298 bytes)

Stack: [0x00007f4e896a5000,0x00007f4e897a6000],  sp=0x00007f4e897a20e0,  free space=1012k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x133e4c4]  LibraryIntrinsic::generate(JVMState*)+0x284
V  [libjvm.so+0xc12e48]  Parse::do_call()+0x378
V  [libjvm.so+0x16a1458]  Parse::do_one_bytecode()+0x5f8
V  [libjvm.so+0x168ef74]  Parse::do_one_block()+0x864
V  [libjvm.so+0x168fed7]  Parse::do_all_blocks()+0x137
V  [libjvm.so+0x1694d66]  Parse::Parse(JVMState*, ciMethod*, float)+0xb96
V  [libjvm.so+0x8cbd90]  ParseGenerator::generate(JVMState*)+0x110
V  [libjvm.so+0xab5f1a]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x135a
V  [libjvm.so+0x8c97d3]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x683
V  [libjvm.so+0xac5d77]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xc97
V  [libjvm.so+0xac6bd8]  CompileBroker::compiler_thread_loop()+0x718
V  [libjvm.so+0x195f22a]  JavaThread::thread_main_inner()+0x25a
V  [libjvm.so+0x196a550]  Thread::call_run()+0x100
V  [libjvm.so+0x1647f54]  thread_native_entry(Thread*)+0x104
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284663,,JDK-8282221,,,,,,,JDK-8262256,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,,linux,windows,,,,,"0|i2wogr:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-04-10 23:20;thartmann;These checks were introduced by JDK-8262256. Similar issues have been fixed in the past (see JDK-8262998). The issue is easy to reproduce:

    public static void test() {
        Integer.divideUnsigned(0, 0);
    }

    public static void main(String[] args) {
      for (int i = 0; i < 100_000; ++i) {
          try {
               test();
            } catch (Exception e) { }
        }
    };;;","2022-04-10 23:28;thartmann;ILW = C2 emits intrinsic code even when bailing out (could lead to failures like JDK-8262231), with Integer intrinsics, disable affected intrinsic = MMM = P3;;;","2022-04-11 08:45;sparasa;Thank you for providing the information! I was able to reproduce the issue and will work on a fix and address this issue as early as possible.;;;","2022-04-11 16:53;sparasa;Please see the fix submitted as PR at https://github.com/openjdk/jdk/pull/8190.
Please let me know if there're any other issues. Thanks!;;;","2022-04-12 13:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8190
Date: 2022-04-11 23:50:45 +0000;;;","2022-04-14 09:27;dukebot;Changeset: a81c5d3a
Author:    vamsi-parasa <srinivas.vamsi.parasa@intel.com>
Committer: Vladimir Kozlov <kvn@openjdk.org>
Date:      2022-04-14 16:24:29 +0000
URL:       https://git.openjdk.java.net/jdk/commit/a81c5d3a23163164a79763421935d0262a36f27e
;;;","2022-04-15 07:05;dcubed;The fix for this bug is integrated in jdk-19+19-1223.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CompressedClassPointers.java fails on macos-aarch64,JDK-8284633,5072263,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pchawdhary,vaibhav,vaibhav,2022-04-10 09:57,2023-01-30 06:02,2023-10-01 09:57,2022-04-11 04:40,11.0.16-oracle,,,,,,,,,,,11.0.16-oracle,hotspot,,0,11u-tier1,jdk11u-na,macos-aarch64-11u,,,,,,,,,,,,,,,,,,"Test case : runtime/CompressedOops/CompressedClassPointers.java	
OS:  macos-aarch64
Regression: NO,  macos-aarch64 support newly added for 11u.

Exception:

        CompressedClassPointers
----------System.err:(29/1960)----------
 stdout: [[0.007s][trace][gc,metaspace] node @0x000000014213dce0: reserved=1048576.00 KB, committed=0.00 KB (  0%), used=0.00 KB (  0%)
[0.007s][trace][gc,metaspace]    [0x0000000800000000, 0x0000000800000000, 0x0000000800000000, 0x0000000840000000)
[0.007s][trace][gc,metaspace] Narrow klass base: 0x0000000800000000, Narrow klass shift: 0
[0.007s][trace][gc,metaspace] Compressed class space size: 1073741824 Address: 0x0000000800000000 Req Addr: 0x00000007c0000000
[0.007s][trace][gc,metaspace] node @0x0000000140e3c1a0: reserved=8192.00 KB, committed=0.00 KB (  0%), used=0.00 KB (  0%)
[0.007s][trace][gc,metaspace]    [0x0000000122564000, 0x0000000122564000, 0x0000000122564000, 0x0000000122d64000)
];
 stderr: [Java HotSpot(TM) 64-Bit Server VM warning: Shared spaces are not supported in this VM
java version ""11.0.16-ea"" 2022-07-19 LTS
Java(TM) SE Runtime Environment 18.9 (fastdebug build 11.0.16-ea+3-LTS-154)
Java HotSpot(TM) 64-Bit Server VM 18.9 (fastdebug build 11.0.16-ea+3-LTS-154, mixed mode)
]
 exitValue = 0

java.lang.RuntimeException: 'Narrow klass base: 0x0000000000000000' missing from stdout/stderr 

	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:164)
	at CompressedClassPointers.smallHeapTest(CompressedClassPointers.java:52)
	at CompressedClassPointers.main(CompressedClassPointers.java:150)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
	at java.base/java.lang.Thread.run(Thread.java:834)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test",,,,,,,,,,JDK-8297176,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301347,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,os_x,,,,,,"0|i2wofn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-29 02:53;goetz;[11u]  jdk11u-na: we never saw this failure in the OpenJDK port.;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
runtime/Thread/StopAtExit.java possibly leaking memory again,JDK-8284632,5072262,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2022-04-10 06:57,2022-05-17 10:56,2023-10-01 09:57,2022-05-02 08:27,19,,,,,,,,,,,19,hotspot,,0,threads,,,,,,,,,,,,,,,,,,,,"In my stress testing of jdk-19+17, it appears that
StressWrapper_StopAtExit is possibly leaking memory again.

I have sightings on my linux-x64 and macosx-aarch64 machine
during all three runs of jdk-19+17 stress testing on each machine.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283610,JDK-8283651,JDK-8286830,,,,,JDK-8282704,JDK-8286088,JDK-8283044,JDK-8286333,,,,,"2022-04-18 12:10;dcubed;8284632_ThreadDeath_objects.jpg;https://bugs.openjdk.org/secure/attachment/98627/8284632_ThreadDeath_objects.jpg","2022-04-10 08:14;dcubed;jdk-19+17_linux.8284632.zip;https://bugs.openjdk.org/secure/attachment/98504/jdk-19%2B17_linux.8284632.zip","2022-04-10 08:10;dcubed;jdk-19+17_macosx-aarch64.8284632.zip;https://bugs.openjdk.org/secure/attachment/98503/jdk-19%2B17_macosx-aarch64.8284632.zip","2022-04-17 07:49;dcubed;jdk-19+18_linux.8284632.zip;https://bugs.openjdk.org/secure/attachment/98612/jdk-19%2B18_linux.8284632.zip","2022-04-17 07:41;dcubed;jdk-19+18_macosx-aarch64.8284632.zip;https://bugs.openjdk.org/secure/attachment/98611/jdk-19%2B18_macosx-aarch64.8284632.zip",,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2woff:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-04-10 08:10;dcubed;Here's the sightings for jdk-19+17 on macosx-aarch64:

$ unzip -l jdk-19+17_macosx-aarch64.8284632.zip
Archive:  jdk-19+17_macosx-aarch64.8284632.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
   108651  04-08-2022 05:43   jdk-19+17_1/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.fastdebug
   108662  04-08-2022 05:42   jdk-19+17_1/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.release
   111179  04-08-2022 06:31   jdk-19+17_1/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.slowdebug
   112900  04-09-2022 03:24   jdk-19+17_2/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.fastdebug
   102813  04-09-2022 03:22   jdk-19+17_2/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.release
   111583  04-09-2022 04:16   jdk-19+17_2/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.slowdebug
    90973  04-10-2022 01:10   jdk-19+17_3/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.fastdebug
   108957  04-10-2022 01:43   jdk-19+17_3/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.slowdebug
---------                     -------
   855718                     8 files;;;","2022-04-10 08:14;dcubed;Here's the sightings for jdk-19+17 on linux-x64:

$ unzip -l jdk-19+17_linux.8284632.zip
Archive:  jdk-19+17_linux.8284632.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    84438  04-08-2022 06:14   jdk-19+17_1/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.fastdebug
   108585  04-08-2022 06:05   jdk-19+17_1/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.release
   114342  04-09-2022 05:19   jdk-19+17_2/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.release
   100097  04-09-2022 07:10   jdk-19+17_2/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.slowdebug
    85850  04-10-2022 04:35   jdk-19+17_3/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.fastdebug
    92432  04-10-2022 06:19   jdk-19+17_3/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.slowdebug
---------                     -------
   585744                     6 files;;;","2022-04-16 19:52;dcubed;The memory leak reproduces on my MBP13 with jdk-19+17 bits.
I verified that the memory leak does not reproduce on my MBP13
with jdk-19+16 bits. I bisected all the build-IDs between jdk-19+16
and jdk-19+17 and figured out that the memory leak does not
occur with jdk-19+17-1106, but it does reproduce with jdk-19+17-1107.

There is only one changeset in 19+17-1107:

JDK-8283044 Use asynchronous handshakes to deliver asynchronous exceptions

So now I need to figure out the why...;;;","2022-04-17 07:39;dcubed;Here's the sightings for jdk-19+18 on macosx-aarch64:

$ unzip -l jdk-19+18_macosx-aarch64.8284632.zip
Archive:  jdk-19+18_macosx-aarch64.8284632.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    91083  04-15-2022 04:18   jdk-19+18_1/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.fastdebug
    84735  04-15-2022 04:16   jdk-19+18_1/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.release
   115724  04-15-2022 05:09   jdk-19+18_1/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.slowdebug
   115919  04-16-2022 02:02   jdk-19+18_2/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.fastdebug
   101077  04-16-2022 02:53   jdk-19+18_2/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.slowdebug
   100784  04-16-2022 23:45   jdk-19+18_3/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.release
   102567  04-17-2022 00:36   jdk-19+18_3/failures.macosx-aarch64/StressWrapper_StopAtExit.jtr.slowdebug
---------                     -------
   711889                     7 files;;;","2022-04-17 07:49;dcubed;Here's the sightings for jdk-19+18 on linux-x64:

$ unzip -l jdk-19+18_linux.8284632.zip
Archive:  jdk-19+18_linux.8284632.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    88175  2022-04-15 04:49   jdk-19+18_1/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.fastdebug
    86264  2022-04-15 04:41   jdk-19+18_1/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.release
    82523  2022-04-15 06:21   jdk-19+18_1/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.slowdebug
    82602  2022-04-16 03:46   jdk-19+18_2/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.fastdebug
    85557  2022-04-16 03:38   jdk-19+18_2/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.release
    85149  2022-04-16 05:19   jdk-19+18_2/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.slowdebug
   100512  2022-04-17 04:20   jdk-19+18_3/failures.linux-x86_64/StressWrapper_StopAtExit.jtr.slowdebug
---------                     -------
   610782                     7 files;;;","2022-04-18 12:11;dcubed;Still learning how to poke around with VisualVM... I've attached a
picture that shows that 99% of the heap space is retained by
java.lang.ThreadDeath objects. Now I have something to hunt...;;;","2022-04-27 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jdk/pull/8388
Date: 2022-04-25 22:12:38 +0000;;;","2022-04-29 09:08;dcubed;I replaced my fix with the one that [~rehn] proposed in the PR, merged it with my
counter based debug code and tested it with StressWrapper_StopAtExit.java and
the latest StopAtExit.java version:

$ grep dcubed_ build/macosx-x86_64-normal-server-release/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_StopAtExit_java/StressWrapper_StopAtExit.jtr
vm_exit: dcubed_async_global_alloc_cnt=34998851
vm_exit: dcubed_async_global_release_cnt=34998851

$ grep dcubed_ build/macosx-x86_64-normal-server-fastdebug/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_StopAtExit_java/StressWrapper_StopAtExit.jtr
vm_exit: dcubed_async_global_alloc_cnt=70362610
vm_exit: dcubed_async_global_release_cnt=70362610

$ grep dcubed_ build/macosx-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_StressWrapper_StopAtExit_java/StressWrapper_StopAtExit.jtr
vm_exit: dcubed_async_global_alloc_cnt=20947308
vm_exit: dcubed_async_global_release_cnt=20947308

The StressWrapper_StopAtExit is configured to run StopAtExit for 101 minutes
and these test results are great. No signs of leakage.;;;","2022-05-02 08:27;dukebot;Changeset: 4a79270c
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-05-02 15:23:03 +0000
URL:       https://git.openjdk.java.net/jdk/commit/4a79270c0195e79cfc59f774c1ac58c56321ea8a
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to gather JCov coverage for JCK19 vs JDK19/20,CODETOOLS-7903240,5075223,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P2,Fixed,lkuskov,mmathur,mmathur,2022-05-18 23:36,2022-08-09 16:48,2023-10-01 09:57,2022-08-09 16:48,jcov_3.0,,,,,,,,,,,jcov_3.0,tools,,0,jckqa_coverage,,,,,,,,,,,,,,,,,,,,"Unable to gather JCov coverage for JCK19 b12 vs OpenJDK19 b22. 

All JCK-runtime-19 & JCK-compiler-19 tests against instrumented OpenJDK19 b22 java are getting errored/failing with exit code 139.

Few JTR files are attached for reference.

This is showstopper for JCK 19 coverage gathering.

Coverage Jenkins Job Console - 
https://jck.us.oracle.com/jenkins/job/QA/job/coverage/job/jckqa_coverage/211/console

JCov used - 
http://jupiter.jck.us.oracle.com/java/jck-dev/users/lkuskov/snapshots/jcov/3.0_12/jcov_3.0/
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903213,JCK-7317364,,,,,,,,,,,,,,,,,,,,,,,,"2022-05-18 23:36;mmathur;AppletStubMethods.jtr.txt;https://bugs.openjdk.org/secure/attachment/98992/AppletStubMethods.jtr.txt","2022-05-18 23:36;mmathur;EventDelivery.jtr.txt;https://bugs.openjdk.org/secure/attachment/98991/EventDelivery.jtr.txt","2022-05-18 23:36;mmathur;annot00201.jtr.txt;https://bugs.openjdk.org/secure/attachment/98990/annot00201.jtr.txt","2022-05-18 23:36;mmathur;annot00201cls.jtr.txt;https://bugs.openjdk.org/secure/attachment/98989/annot00201cls.jtr.txt",,,,,,,,,,,,,,,,,,,,,,,"0|i2x697:",9223372036854775807,,,,,,,,,,,,"2022-05-25 23:52;mmathur;[~lkuskov] Seeing same issue with JCK19 b13 vs OpenJDK19 b23 as well -
https://jck.us.oracle.com/jenkins/job/QA/job/coverage/job/jckqa_coverage/213/console
;;;","2022-06-01 10:58;apikalev;[~lkuskov] Pease share is there is any update on this issue.;;;","2022-08-03 20:31;mmathur;Just an update, the issue is still seen with the latest JCK19 b23 vs OpenJDK19 b33 -
https://jck.us.oracle.com/jenkins/job/QA/job/coverage/job/jckqa_coverage/223/console
;;;","2022-08-05 16:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jcov/pull/20
Date: 2022-08-05 22:35:44 +0000;;;","2022-08-05 16:18;lkuskov;Since jcov is based on asm snapshot (9.4-SNAPSHOT) the tool isn't promoted - the jcov snapshot can be found at https://jck.us.oracle.com/java/jck-dev/users/lkuskov/snapshots/jcov/3.0_13;;;","2022-08-09 16:48;roboduke;Changeset: 872982fb
Author:    Leonid Kuskov <lkuskov@openjdk.org>
Committer: GitHub <noreply@github.com>
Date:      2022-08-09 16:47:09 +0000
URL:       https://git.openjdk.org/jcov/commit/872982fbeeee3a473238068db99e0eac22624fba
;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
README.md referes to old API and old generated code pattern,CODETOOLS-7903201,5075733,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-05-27 00:15,2022-06-07 23:50,2023-10-01 09:57,2022-05-27 02:42,,,,,,,,,,,,,tools,,0,jdk19,,,,,,,,,,,,,,,,,,,,README.md referes to old API and old generated code pattern,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x9ej:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-05-27 00:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/42
Date: 2022-05-27 07:17:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
sync makefiles to build jmod for jextract,CODETOOLS-7903200,5075603,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-05-25 03:37,2022-05-25 06:20,2023-10-01 09:57,2022-05-25 04:11,,,,,,,,,,,,,tools,,0,jdk18,,,,,,,,,,,,,,,,,,,,sync makefiles to build jmod for jextract,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x8ln:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-05-25 03:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/38
Date: 2022-05-25 10:53:02 +0000;;;","2022-05-25 05:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/39
Date: 2022-05-25 12:07:08 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
add a build step to create jmod file for jextract module,CODETOOLS-7903197,5075316,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-05-20 02:18,2022-05-20 03:47,2023-10-01 09:57,2022-05-20 03:47,,,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,"add a build step to create jmod file for jextract module and use the same jmod while linking ""app jextract image"" as well as ""test jextract image"". Such a .jmod can be used by users to jlink it to create custom JREs",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x6tv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-05-20 02:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/34
Date: 2022-05-20 09:26:43 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"fix typo in 7903030: missed 2nd "" in join",CODETOOLS-7903192,5075029,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,,jjg,jjg,2022-05-16 14:39,2022-05-16 17:57,2023-10-01 09:57,2022-05-16 17:55,,,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,"Fix an issue identified in jtreg PR#29
https://github.com/openjdk/jtreg/pull/29",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x523:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-05-16 14:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/29
Date: 2021-10-22 20:13:32 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract runtime helper issues,CODETOOLS-7903190,5074985,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,mcimadamore,mcimadamore,2022-05-16 01:19,2022-05-17 02:47,2023-10-01 09:57,2022-05-17 02:47,,,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,"See
https://mail.openjdk.java.net/pipermail/panama-dev/2022-May/017000.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4sb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-05-16 02:48;mcimadamore;Main actionable comments:

* instead of having a dynamic check as to whether call is variadic or not (and then link accordingly) jextract can know all this, at extraction time

* Some null checks seem repeated - for instance, the getter for the downcall method handle performs a null check on the static final field - but so does the wrapper of the downcall method handle. We could reduce the amount of generated code by having the wrapper calling the method handle getter.

* (this is not mentioned in the original email): the code for RuntimeHelper::upcallStub looks fishy, as there's a string descriptor -> method type conversion. I would be surprised if this cannot be removed, or, even better, if the method type could not be inferred from the function descriptor (see Linker::downcallType/upcallType).;;;","2022-05-16 07:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/33
Date: 2022-05-16 14:01:17 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract should support --version option,CODETOOLS-7903187,5074907,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-05-13 07:25,2022-05-13 08:53,2023-10-01 09:57,2022-05-13 08:53,,,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,"jextract should support --version option which could just print underlying java version and exit. Note that jextract is a shell script or a batch file generated by jlink and so -J<vm_option> pattern is not supported. So ""jextract -J--version"" won't work.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x4b7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-05-13 07:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/31
Date: 2022-05-13 14:27:28 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update RerunTest for latest JUnit,CODETOOLS-7903185,5074819,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-05-12 13:43,2022-05-12 18:47,2023-10-01 09:57,2022-05-12 18:47,jtreg7.0,,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,RerunTest should no longer expect/require hamcrest in the class path.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3rn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-05-12 13:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/82
Date: 2022-05-12 20:51:11 +0000;;;","2022-05-12 14:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/84
Date: 2022-05-12 21:26:06 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update OS version check ,CODETOOLS-7903184,5074818,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-05-12 13:40,2022-05-12 18:43,2023-10-01 09:57,2022-05-12 18:43,jtreg7.0,,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,The version check current requires a `.equals` match. It should allow `.startsWith`.    e.g. 12.3.1 as well as 12.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2x3rf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-05-12 13:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/82
Date: 2022-05-12 20:51:11 +0000;;;","2022-05-12 14:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/83
Date: 2022-05-12 21:12:02 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
port jextract for foreign-preview changes,CODETOOLS-7903181,5074695,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-05-11 02:34,2022-05-20 08:15,2023-10-01 09:57,2022-05-20 08:15,,,,,,,,,,,,,tools,,0,jextract,,,,,,,,,,,,,,,,,,,,port jextract for foreign-preview changes (https://openjdk.java.net/jeps/424),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x303:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-05-20 04:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/35
Date: 2022-05-20 11:02:49 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libclang bindings has to be regenerated,CODETOOLS-7903179,5074520,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-05-09 10:11,2022-05-13 07:06,2023-10-01 09:57,2022-05-09 10:41,,,,,,,,,,,,,tools,,0,jextract,,,,,,,,,,,,,,,,,,,,"* JAVA_INT etc are used instead of generated bindings in Constants$root.java
* updateclang extract.sh still uses -d instead of the new --output option
* copyright year is 2021 for jextract generated sources (cp_header.txt goes into generated clang headers)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2x1x7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-05-09 10:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/30
Date: 2022-05-09 17:13:18 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"jextract makefile build, test fails on macOS Monterey",CODETOOLS-7903173,5073830,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-04-28 22:22,2022-05-13 07:04,2023-10-01 09:57,2022-04-29 04:12,,,,,,,,,,,,,tools,,0,jextract,,,,,,,,,,,,,,,,,,,,"jextract makefile build, test fails on macOS Monterey with 

ld: -lSystem library not found 

error. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,os_x,,,,,,"0|i2wxnv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-04-28 22:22;sundar;Similar error seen on BigSur 

https://github.com/ponylang/ponyc/issues/3684 

Workaround is to pass linker flag 

-L /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib ;;;","2022-04-28 22:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/27
Date: 2022-04-29 05:24:45 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Change invocation of GitHub Actions,CODETOOLS-7903172,5073808,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-04-28 14:12,2022-04-29 12:00,2023-10-01 09:57,2022-04-29 12:00,,,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,We should modify the invocation of GitHub Actions to better align withnthe policies for JDK.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wxiz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-04-28 14:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/81
Date: 2022-04-28 21:14:47 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix issues related to generating internal API documentation,CODETOOLS-7903171,5073551,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-04-26 08:59,2022-04-26 11:41,2023-10-01 09:57,2022-04-26 11:41,,,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,"The build support for generating internal API documentation for jtreg, and some of the doc comments, have fallen into disrepair and need to be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wvxv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-04-26 09:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/79
Date: 2022-04-26 16:17:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract makefiles still use joptsimple and generated module-info.java,CODETOOLS-7903167,5073192,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-04-21 05:02,2022-05-13 07:04,2023-10-01 09:57,2022-04-28 03:43,,,,,,,,,,,,,tools,,0,jextract,,,,,,,,,,,,,,,,,,,,"jextract makefiles still use joptsimple and generated module-info.java. With CODETOOLS-7903156 fix, jopt-simple dependency has been removed. Sync. makefiles with gradle build.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wtq3:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-04-21 05:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/26
Date: 2022-04-21 12:10:11 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jtreg crashes trying to compile .jasm with enablePreview=true,CODETOOLS-7903166,5072593,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,enikitin,enikitin,enikitin,2022-04-14 23:09,2022-05-16 10:35,2023-10-01 09:57,2022-05-16 10:35,,,,,,,,,,,,,tools,,0,jtreg,,,,,,,,,,,,,,,,,,,,"If the .jasm-file lies under a directory with TEST.properties containing ""enablePreview=true"", the following crash happens:

java.lang.IndexOutOfBoundsException: Index: -1, Size: 0
        at java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:756)
        at java.base/java.util.ArrayList.add(ArrayList.java:481)
        at com.sun.javatest.regtest.exec.CompileAction.run(CompileAction.java:368)
        at com.sun.javatest.regtest.exec.RegressionScript.run(RegressionScript.java:275)
        at com.sun.javatest.Script.run(Script.java:431)
        at com.sun.javatest.DefaultTestRunner.runTest(DefaultTestRunner.java:183)
        at com.sun.javatest.DefaultTestRunner$1.run(DefaultTestRunner.java:76)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wqgz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-04-14 23:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/77
Date: 2022-04-15 06:24:52 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
cleanup jextract options,CODETOOLS-7903164,5072573,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-04-14 09:01,2022-05-13 07:02,2023-10-01 09:57,2022-04-15 05:10,,,,,,,,,,,,,tools,,0,jextract,,,,,,,,,,,,,,,,,,,,"cleanup jextract options.

1. Change -d option for output to be --output
2. Introduce -D option to pass preprocessor macro
3. Remove -C option. Support compile_flags.txt file like clang tools do to pass clang specific options to jextract.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wqcj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-04-14 10:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/23
Date: 2022-04-14 17:15:35 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract crashes due to name clash with pointer to function typedefs,CODETOOLS-7903158,5072486,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-04-13 07:44,2022-05-13 07:04,2023-10-01 09:57,2022-04-13 09:01,,,,,,,,,,,,,tools,,0,jextract,,,,,,,,,,,,,,,,,,,,"File: test.h

typedef void (func)(int x, const void *addr);


$ jextract test.h 
WARNING: Using incubator modules: jdk.incubator.foreign
In memory compilation failed: warning: using incubating module(s): jdk.incubator.foreign
func.java:16: error: variable addr is already defined in method ofAddress(MemoryAddress,ResourceScope)
return (int x, jdk.incubator.foreign.MemoryAddress addr) -> {
                                                   ^
1 error
1 warning

$ jextract --source test.h
WARNING: Using incubator modules: jdk.incubator.foreign
$ cat func.java          
// Generated by jextract

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface func {

    void apply(int x, jdk.incubator.foreign.MemoryAddress addr);
    static NativeSymbol allocate(func fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(func.class, fi, constants$0.func$FUNC, ""(ILjdk/incubator/foreign/MemoryAddress;)V"", scope);
    }
    static func ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress(""func::"" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (int x, jdk.incubator.foreign.MemoryAddress addr) -> {
            try {
                constants$0.func$MH.invokeExact(symbol, x, (jdk.incubator.foreign.Addressable)addr);
            } catch (Throwable ex$) {
                throw new AssertionError(""should not reach here"", ex$);
            }
        };
    }
}


Names like ""addr"", ""scope"" used in FunctionalInterfaceBuilder can clash with identifiers from C headers.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wpt7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-04-13 08:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/21
Date: 2022-04-13 15:01:39 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract crashes when header contains complex long double,CODETOOLS-7903157,5072422,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-04-12 13:55,2022-05-13 07:05,2023-10-01 09:57,2022-04-13 02:57,,,,,,,,,,,,,tools,,0,foreign-jextract,,,,,,,,,,,,,,,,,,,,"A recent code refactoring revealed a latent issue with the analysis to detect unsupported types. More specifically, while typedefs of unsupported types are correctly detected, types such as `long double complex` are not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wpez:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-04-12 14:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/20
Date: 2022-04-12 21:05:14 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
remove jopt-simple dependency from jextract,CODETOOLS-7903156,5072390,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-04-12 05:30,2022-05-13 07:03,2023-10-01 09:57,2022-04-13 05:11,,,,,,,,,,,,,tools,,0,jextract,,,,,,,,,,,,,,,,,,,,"remove jopt-simple dependency from jextract. This will also remove ""org.moditect.gradleplugin"" gradle build plugin. We inject module-info into jot-simple jar (and hence also to org.openjdk.jextract module). If jopt-simple is removed, org.openjdk.jextract can use module-info.java in source form and we can avoid module-info injection plugin.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2wp7v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-04-12 05:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/19
Date: 2022-04-12 12:33:37 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
replace single use of `rsync` with `cp -R`,CODETOOLS-7903155,5072342,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-04-11 16:37,2022-04-11 20:14,2023-10-01 09:57,2022-04-11 20:14,jtreg7.0,,,,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,,,,,,"One test file makes ""non-standard"" use of `rsync` by direct name -- not even using a makefile variable like `$(RSYNC)`.  The use assumes the availability of `rsync` which might not be available,

The use can easily be replaced by equivalent `cp -R`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2wox7:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-04-11 16:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jtreg/pull/73
Date: 2022-04-11 23:40:27 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jextract build fails on Windows,CODETOOLS-7903154,5072312,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,sundar,sundar,sundar,2022-04-11 07:34,2022-05-13 07:03,2023-10-01 09:57,2022-04-11 07:56,,,,,,,,,,,,,tools,,0,jextract,,,,,,,,,,,,,,,,,,,,"jextract build fails on Windows.

`Error: no value given for --add-options`.

See also:

https://mail.openjdk.java.net/pipermail/jextract-dev/2022-April/000151.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,,generic,,,,,,"0|i2woqj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-04-11 07:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.java.net/jextract/pull/18
Date: 2022-04-11 14:48:56 +0000;;;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
