Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Outward issue link (Backport),Inward issue link (Blocks),Inward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (Blocks),Outward issue link (CSR),Inward issue link (Cloners),Outward issue link (Cloners),Inward issue link (Duplicate),Inward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Duplicate),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Inward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field ( Type of Bug [Challenge] ),Custom field (CPU),Custom field (CPU),Custom field (Cost of Delay),Custom field (Epic Link),Custom field (Imported),Custom field (Indexed),Custom field (Introduced In Build),Custom field (Introduced In Version),Custom field (Number of Tests Affected [Challenge]),Custom field (OS),Custom field (OS),Custom field (OS),Custom field (Oracle Evaluation),Custom field (Original story points),Custom field (Parent Link),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Resolved In Build),Custom field (Story Points),Custom field (Subcomponent),Custom field (Target end),Custom field (Target start),Custom field (Team),Custom field (Time Spent),Custom field (Understanding),Custom field (Value),Custom field (Verification),Custom field (external_bug),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Escape HTML in source code hosting provider's web UI as required,SKARA-1807,5092567,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,prappo,prappo,2023-01-26 08:08,2023-08-22 05:47,2023-10-01 09:56,2023-01-27 10:33,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,Bug summaries that resemble HTML might be a problem for UIs like GitHub or GitLab. Skara bots should escape sensitive parts of such summaries. Here's an example of what an unescaped <code> might do (pay attention to the bot comments to the PR): https://github.com/openjdk/jdk/pull/4273. Another example is an unescaped <section>: https://github.com/openjdk/jdk11u-dev/pull/1219.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1027,,,,,,,,,SKARA-2000,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i303yz:",9223372036854775807,,,,,,,,,,,,"2023-01-26 09:04;erikj;To be clear, the issue here is the ""<code>"" in the bug title, which gets messed up in the Skara generated part of the PR body.;;;","2023-01-27 09:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1465
Date: 2023-01-26 23:58:20 +0000;;;","2023-01-27 10:33;roboduke;Changeset: 1838b76d
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-01-27 18:33:05 +0000
URL:       https://git.openjdk.org/skara/commit/1838b76d4f3223c4e187b3b51f91716d1a9fc1e9
;;;",,,,,,,,,,,,,,,,,,
Need committer rights in closed jdk updates and mainline project,SKARA-1804,5092415,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,anantsi,harakesh,harakesh,2023-01-24 22:50,2023-01-29 22:02,2023-10-01 09:56,2023-01-29 22:02,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,"I have backported the following till now:
https://bugs.openjdk.org/browse/JDK-8261279
https://bugs.openjdk.org/browse/JDK-8284892
I need committer rights in jdk updates and mainline project
This includes the closed census in jdk-updates as well as the closed part of the mainline jdk project.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30317:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GitLabRepository.canPush only checks direct members,SKARA-1803,5092387,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2023-01-24 11:53,2023-01-25 10:21,2023-10-01 09:56,2023-01-25 10:21,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,The method `canPush` on GitLabRepository uses the wrong endpoint for the query. It only checks for direct members and not inherited members (https://docs.gitlab.com/ee/api/members.html).,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1738,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i302uz:",9223372036854775807,,,,,,,,,,,,"2023-01-24 12:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1462
Date: 2023-01-24 20:46:57 +0000;;;","2023-01-25 10:21;roboduke;Changeset: 9a2a9f74
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-01-25 18:21:18 +0000
URL:       https://git.openjdk.org/skara/commit/9a2a9f7415f937b27b84fbf13f7cbd0d28559082
;;;",,,,,,,,,,,,,,,,,,,
Exclude some GraphQL calls from RestRequestCache rate limiter,SKARA-1801,5092281,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,erikj,erikj,erikj,2023-01-23 14:22,2023-01-24 09:19,2023-10-01 09:56,2023-01-24 09:19,,,,,,,,1.0,admin,,0,,,,,,,,,,,,,,,,"In SKARA-1731, the best practices regarding non GET requests on Github became better enforced. Unfortunately that has lead to some unexpected performance issues. I believe this is mostly caused by GraphQL requests, which are always POST, being treated as a non GET REST requests by the limiter and limited to one per second.

Reading the Integrator best practices document again (https://docs.github.com/en/rest/guides/best-practices-for-integrators?apiVersion=2022-11-28) and the GraphQL resource limitations (https://docs.github.com/en/graphql/overview/resource-limitations) I'm pretty sure you aren't supposed to limit GraphQL to one call per second, but rather just make sure you stay within the points limit.

I want to make it possible to exclude certain calls from this rate limiter to see if this can alleviate the contention we are currently seeing.

Two PRs were unable to integrate today due to this contention:
https://github.com/openjdk/jdk/pull/12139
https://github.com/openjdk/jdk/pull/11922",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3027f:",9223372036854775807,,,,,,,,,,,,"2023-01-24 06:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1461
Date: 2023-01-24 14:41:46 +0000;;;","2023-01-24 09:19;roboduke;Changeset: 51956054
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-01-24 17:18:47 +0000
URL:       https://git.openjdk.org/skara/commit/51956054485fce5cb42629c9696a3131cb098178
;;;",,,,,,,,,,,,,,,,,,,
Do not notify on Withdrawn  CSR issue,SKARA-1799,5092112,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-01-20 12:27,2023-01-20 13:49,2023-10-01 09:56,2023-01-20 13:49,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,"In SKARA-1714, we will add '(Withdrawn)' to withdrawn CSR issues shown in the pr body. However, this will cause a small bug in the notify bot which the issueNotifier will add a review link to withdrawn CSR issues. To fix this, simply update the filter in the notify/PullRequestWorkItem#parseIssues method.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1714,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3015v:",9223372036854775807,,,,,,,,,,,,"2023-01-20 13:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1460
Date: 2023-01-20 20:40:04 +0000;;;","2023-01-20 13:49;roboduke;Changeset: 12e3cdc6
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-01-20 21:48:26 +0000
URL:       https://git.openjdk.org/skara/commit/12e3cdc69142797dd68c189ece2d5afe68590cca
;;;",,,,,,,,,,,,,,,,,,,
Need committer rights in closed jdk updates and mainline project,SKARA-1795,5091940,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,anantsi,kj,kj,2023-01-19 02:32,2023-01-24 03:54,2023-10-01 09:56,2023-01-24 03:54,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,"I have done these fixes in closedjdk so far.

https://bugs.openjdk.org/browse/JDK-8298179
https://bugs.openjdk.org/browse/JDK-8299440
https://bugs.openjdk.org/browse/JDK-8299517
https://bugs.openjdk.org/browse/JDK-8298911
https://bugs.openjdk.org/browse/JDK-8298932
https://bugs.openjdk.org/browse/JDK-8299572

I need committer rights in jdk updates and mainline project
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3003n:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skara PR commands are not interpreted on Github review comments,SKARA-1789,5091463,Bug,Resolved,SKARA,Skara,software,darcy,,,P3,Fixed,zsong,ihse,ihse,2023-01-16 08:38,2023-01-19 16:06,2023-10-01 09:56,2023-01-19 16:06,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,"I don't know how many times I've been bitten by this. Typically I want to approve a PR ""from my perspective"", but still saying that the author needs more reviewers. So I go to the Files tab, fill in a comment like:

Build changes ok.
/reviewers 2

and press approve.

And the command is just ignored by Skara. :(

I guess the same goes if you would make a single comment in review mode as well, but I have not tested this.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zx5n:",9223372036854775807,,,,,,,,,,,,"2023-01-18 11:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1458
Date: 2023-01-18 18:04:42 +0000;;;","2023-01-19 16:06;roboduke;Changeset: 2d70b1bd
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-01-20 00:06:24 +0000
URL:       https://git.openjdk.org/skara/commit/2d70b1bd4736fd1e0ea6773b8594875434cccdf6
;;;",,,,,,,,,,,,,,,,,,,
Add GitHub user justin-curtis-lu,SKARA-1787,5091383,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,,jlu,jlu,2023-01-13 10:28,2023-01-13 13:23,2023-10-01 09:56,2023-01-13 13:23,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zwnv:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Do not always add CSR_UPDATE_MARKER when CSR bot finds withdrawn CSR Issue,SKARA-1785,5091204,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-01-11 10:37,2023-01-11 12:45,2023-10-01 09:56,2023-01-11 12:45,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,"In SKARA-1728, I said that 'if we find a withdrawn pr, we need to add CSR_UPDATE_MARKER to the pr body.', yes, we need to add CSR_UPDATE_MARKER, but there is a prerequisite which is that our status message doesn't contain this withdrawn issue. Otherwise, the CSR bot will always add CSR_UPDATE_MARKER when it finds a withdrawn CSR Issue and the pr body will be updated very frequently(looks like the bot go berserk).

This issue is same as SKARA-1673. I discovered this issue and fixed it, but I am silly enough to make the same mistake again.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zvk3:",9223372036854775807,,,,,,,,,,,,"2023-01-11 11:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1455
Date: 2023-01-11 19:30:04 +0000;;;","2023-01-11 12:45;roboduke;Changeset: 20e61e4a
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-01-11 20:45:07 +0000
URL:       https://git.openjdk.org/skara/commit/20e61e4aa1c2065cf3cbd6b6c35e735e28d473e8
;;;",,,,,,,,,,,,,,,,,,,
"""Add GitHub user <YOUR-GITHUB-USERNAME>",SKARA-1783,5091173,Bug,Closed,SKARA,Skara,software,darcy,,,P4,Fixed,sshivang,stooke,stooke,2023-01-11 06:00,2023-01-11 08:01,2023-10-01 09:56,2023-01-11 06:01,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zvd7:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add GitHub user zzambers,SKARA-1742,5091132,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,zzambers,zzambers,2023-01-11 05:39,2023-01-11 06:28,2023-10-01 09:56,2023-01-11 06:28,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zv43:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Change the logic of removing CSR label when CSR label is added via '/csr needed' command,SKARA-1741,5091074,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2023-01-10 15:13,2023-01-11 08:55,2023-10-01 09:56,2023-01-11 08:55,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,"Assuming there is such a situation:

1. One pr solves issue1 and issue2.
2. One user thought this pr needs CSR Issue and commented '/csr needed'.
3. Author of this pr created csr1 of issue1, but then he thought it is not right to create csr of issue1 and withdrawn csr1.
4. Author of this pr created csr2 of issue2 and csr2 got approved.
5. In my opinion, the csr label should be removed(But due to SKARA-1729, it is not removed)

To sum, 

There are two ways that CSR label can be added to a PR
1. via '/csr needed' command
2. A CSR issue is discovered

1. For the first case, if the CSR label is added via '/csr needed', there will be a CSR_NEEDED_MARKER.
In this case, if we want to remove the csr label. there are two ways
(1) No active CSR Issue exists and use '/csr unneeded' command
(2) all of the CSR issues are approved or withdrawn(at least 1 CSR Issue is approved)

2. For the second case, if the CSR label is added because a CSR Issue is discovered, there will not be CSR_NEEDED_MARKER.
In this case,  if we want to remove the csr label, there is only one way
(1) all of the CSR issues are approved or withdrawn",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zur7:",9223372036854775807,,,,,,,,,,,,"2023-01-10 15:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1454
Date: 2023-01-10 23:21:48 +0000;;;","2023-01-11 08:55;roboduke;Changeset: 28edb7c7
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-01-11 16:54:54 +0000
URL:       https://git.openjdk.org/skara/commit/28edb7c7c8b5973ddb546c44e3ae6343ee3c47b2
;;;",,,,,,,,,,,,,,,,,,,
Draft PR for clean backport mistakenly marked as ready,SKARA-1737,5090966,Bug,Resolved,SKARA,Skara,software,darcy,,,P2,Fixed,zsong,kcr,kcr,2023-01-09 09:38,2023-01-12 09:59,2023-10-01 09:56,2023-01-12 09:59,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,"The following Backport PR is in Draft, so not yet ready to be evaluated, reviewed, or integrated:

https://github.com/openjdk/jfx17u/pull/103

Skara mistakenly marked it as ""ready"", when it isn't even ""rfr"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zu37:",9223372036854775807,,,,,,,,,,,,"2023-01-11 14:41;zsong;I am investigating this issue and find that no 'rfr' label will not block the pr be ready for integration.

1. readyForIntegration for normal pr is determined by
(1) whether there is any failed check
(2) whether there is any additional errors
(3) whether there is any uncompleted additional progress 
(4) whether there is any integration blocker

So if there is a draft normal pr, there will always exist a failed check(ReviewersCheck will always fail because the pr is in draft mode and nobody will approve this pr)
Therefore, a draft normal pr will not be marked as 'ready' because there is a failed check not because this pr is in draft mode.

2. readyForIntegration for clean backport is determined by
(1) whether this pr is ready for review(TooFewReviewersIssue won't make it false)
(2) whether there is any additional errors
(3) whether there is any uncompleted additional progress 
(4) whether there is any integration blocker

So if there is a draft clean backport pr, readyForIntegration will be true in most cases.
Therefore, the clean backport pr will be marked as 'ready' whether it is in draft mode or not.;;;","2023-01-11 15:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1456
Date: 2023-01-11 22:51:35 +0000;;;","2023-01-12 09:59;roboduke;Changeset: bbb3595a
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-01-12 17:59:11 +0000
URL:       https://git.openjdk.org/skara/commit/bbb3595ac2bccc4ecc8fd6508a2375b86562cc04
;;;",,,,,,,,,,,,,,,,,,
Improve RestRequestCache rate limiter,SKARA-1731,5090625,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2023-01-03 10:04,2023-01-23 14:23,2023-10-01 09:56,2023-01-19 11:43,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,"In the RestRequestCache, we are trying to limit non GET calls for a specific host and user to one call per second (and all calls, including GET, for a specific host and user, need to be serialized). This throttling is based on recommendations from GitHub (https://docs.github.com/en/rest/guides/best-practices-for-integrators?apiVersion=2022-11-28#dealing-with-abuse-rate-limits). The current implementation isn't really doing that however. Calls are serialized, but depending on timing, we can definitely send more than one non GET call per second, at least in bursts. 

I think that if we really want to enforce such a limit, we need to rework this and use two different locks, one for all remote calls and an additional one for non-GET calls. The GET calls would simply look like this (as they do today):

1. Take lock for general remote call
2. Perform GET remote call
3. Release lock for general remote call

For the non-GET remote calls, we would have this:

1. Take lock for non-GET call
2. Wait if we need to (compare timestamp with timestamp from last call)
3. Take lock for general remote call
4. Update timestamp for last non-GET call
5. Perform non-GET call
6. Release lock for general remote call
7. Release lock for non-GET call
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1801,,,,,,,SKARA-446,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zrzf:",9223372036854775807,,,,,,,,,,,,"2023-01-03 10:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1453
Date: 2023-01-03 18:15:36 +0000;;;","2023-01-19 11:43;roboduke;Changeset: 4a6330c1
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-01-19 19:42:06 +0000
URL:       https://git.openjdk.org/skara/commit/4a6330c1f789c9433295c02e56a7e9a1be26c1e1
;;;",,,,,,,,,,,,,,,,,,,
Add GitHub user rmahajan,SKARA-1730,5090385,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,rmahajan,rmahajan,2022-12-23 11:57,2022-12-23 13:20,2023-10-01 09:56,2022-12-23 13:20,,,,,,,,,admin,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zqi3:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CSR bot should not remove CSR label if one of the CSR issues is withdrawn,SKARA-1729,5090380,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2022-12-23 09:26,2023-01-09 15:37,2023-10-01 09:56,2023-01-09 15:37,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,"While testing SKARA-1714, I discovered a bug in the PullRequestWorkItem of the CSR bot. 

Currently, the CSR bot would remove CSR label if all the CSR issues of the pr is closed(whether approved or withdrawn). However, if the CSR label is added via using '/csr needed' command and the pr contains withdrawn CSR issues, the CSR should not remove the CSR label.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1714,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zqgz:",9223372036854775807,,,,,,,,,,,,"2023-01-03 09:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1451
Date: 2023-01-03 16:23:05 +0000;;;","2023-01-09 15:37;roboduke;Changeset: f904c415
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-01-09 23:36:59 +0000
URL:       https://git.openjdk.org/skara/commit/f904c415b13ac89eef78a0823a31c3bcd580dfdd
;;;",,,,,,,,,,,,,,,,,,,
Should iterate over all issues in PullRequestWorkItem in CSR bot,SKARA-1728,5090320,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2022-12-22 10:23,2022-12-22 13:15,2023-10-01 09:56,2022-12-22 13:15,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,"While testing SKARA-1714 on the staging environment, I discovered a bug in the PullRequestWorkItem in the CSR bot. The issue is that the for loop does not always iterate over all CSR issues for a pull request. 

For example, if we have two active CSR issues (csr1 and csr2) for one pull request, and we withdraw csr2, the loop will exit early after iterating over csr1 and CSR_UPDATE_MARKER will not be added, which means the PR body will not be updated and the status change of csr2 will not be displayed. 

Also, if we find a withdrawn pr, we need to add CSR_UPDATE_MARKER to the pr body.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zq3n:",9223372036854775807,,,,,,,,,,,,"2022-12-22 11:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1449
Date: 2022-12-22 19:04:34 +0000;;;","2022-12-22 13:15;roboduke;Changeset: e66ba112
Author:    Zhao Song <zsong@openjdk.org>
Date:      2022-12-22 21:14:45 +0000
URL:       https://git.openjdk.org/skara/commit/e66ba11213957b2235e623d94de3137cef8824cc
;;;",,,,,,,,,,,,,,,,,,,
PROGRESS_MARKER should be added before the CSR bot add CSR_UPDATE_MARKER,SKARA-1726,5090281,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2022-12-21 15:58,2022-12-22 09:05,2023-10-01 09:56,2022-12-22 09:05,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,"While testing SKARA-1714 in this pull request (https://github.com/openjdk/playground/pull/112), we discovered that if a CSR issue already exists for a main issue and a pull request is then created for the main issue, the CSR and PR bots become stuck in an endless loop and are unable to update the pull request body.

After further investigation, we determined that the cause of this issue is that the CSR bot checks for the presence of the CSR_UPDATE_MARKER in the pull request body before adding it, but first checks for the PROGRESS_MARKER. However, when the CSR bot's pullRequestWorkItem runs for the first time, it is likely that the PR bot's CheckWorkItem has not yet run, resulting in the absence of the PROGRESS_MARKER in the pull request body. In this case, the CSR bot continues to add the CSR_UPDATE_MARKER, while the PR bot attempts to update the pull request body but finds that it has been recently updated and therefore gives up on the update.

The correct fix is to only add CSR_UPDATE_MARKER if we find a PROGRESS_MARKER",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zpuz:",9223372036854775807,,,,,,,,,,,,"2022-12-21 17:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1447
Date: 2022-12-22 00:05:41 +0000;;;","2022-12-22 09:05;roboduke;Changeset: 7a6ddeec
Author:    Zhao Song <zsong@openjdk.org>
Date:      2022-12-22 17:04:59 +0000
URL:       https://git.openjdk.org/skara/commit/7a6ddeec05069bbcd0cc56075613591a4b141942
;;;",,,,,,,,,,,,,,,,,,,
"Clarify ""no known role"" error message",SKARA-1725,5090210,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,aivanov,aivanov,2022-12-21 04:31,2023-02-10 14:25,2023-10-01 09:56,2023-02-10 14:25,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,"When people review PRs, the bot adds a list of reviewers into description. If a user is not registered in OpenJDK Census, a note is added:

(no known github.com user name / role)

What it actually means is ""no known OpenJDK user name / role"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zpi3:",9223372036854775807,,,,,,,,,,,,"2022-12-21 11:54;aivanov;A PR with the error: https://github.com/openjdk/jdk/pull/11571;;;","2023-01-19 15:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1459
Date: 2023-01-19 22:27:09 +0000;;;","2023-02-10 14:25;roboduke;Changeset: 33b3cc32
Author:    Zhao Song <zsong@openjdk.org>
Date:      2023-02-10 22:25:06 +0000
URL:       https://git.openjdk.org/skara/commit/33b3cc328d16307a43303b4b4f0c6bb10951c31e
;;;",,,,,,,,,,,,,,,,,,
Revert SKARA-1655,SKARA-1716,5089045,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,zsong,zsong,zsong,2022-12-06 15:51,2022-12-07 09:00,2023-10-01 09:56,2022-12-07 09:00,,,,,,,,1.0,bots,,0,,,,,,,,,,,,,,,,"In SKARA-1655, I implemented a commit check named jCheckConfCheck. It  was supposed to check if .jcheck/conf is valid in user's commit. But now, we have a better idea(SKARA-1691) to check and we no longer need this check any more. Also, this check is not using by any repo right now. It doesn't hurt to revert it.",,,,,,,,,,,,,,,,,,,,,,,,,,,SKARA-1691,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zij7:",9223372036854775807,,,,,,,,,,,,"2022-12-06 16:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1438
Date: 2022-12-07 00:04:41 +0000;;;","2022-12-07 09:00;roboduke;Changeset: b0723850
Author:    Zhao Song <zsong@openjdk.org>
Date:      2022-12-07 16:59:57 +0000
URL:       https://git.openjdk.org/skara/commit/b072385020718181d9ef04811f9a937d5b894d8a
;;;",,,,,,,,,,,,,,,,,,,
Fix gradle deprecations,SKARA-1713,5088917,Bug,Resolved,SKARA,Skara,software,darcy,,,P4,Fixed,erikj,erikj,erikj,2022-12-05 11:25,2022-12-07 08:42,2023-10-01 09:56,2022-12-05 13:41,,,,,,,,1.0,libraries,,0,,,,,,,,,,,,,,,,We have some deprecation warnings printed by Gradle when we build. It would be good to get rid of them.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zhqr:",9223372036854775807,,,,,,,,,,,,"2022-12-05 11:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/skara/pull/1433
Date: 2022-12-05 19:34:07 +0000;;;","2022-12-05 13:41;roboduke;Changeset: 769c69b6
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2022-12-05 21:41:03 +0000
URL:       https://git.openjdk.org/skara/commit/769c69b6fb023bb06071a77275d5250042e22b21
;;;",,,,,,,,,,,,,,,,,,,
GcFreedRatio rule doesn't have all preferences in preferences list,JMC-8006,5091364,Bug,Resolved,JMC,Java Mission Control,software,hirt,The production time profiling and diagnostics tools-suite for the HotSpot JDK.,,P4,Fixed,hdafgard,hdafgard,hdafgard,2023-01-13 07:04,2023-02-01 03:28,2023-10-01 09:56,2023-01-17 04:19,,,,,,,,9.0.0,Mission Control Core,,0,,,,,,,,,,,,,,,,The shared preference RulePreferences.SHORT_RECORDING_LIMIT is not included in the GcFreedRatio rule where it is used. We should make sure that all rules that depend on a shared preference actually include it in their preference collection.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zwjn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@25ad7987,,,,,,,,,"2023-01-16 10:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmc/pull/462
Date: 2023-01-16 10:03:03 +0000;;;","2023-01-17 04:19;roboduke;Changeset: e90f2582
Author:    Pierre-Yves Bigourdan <pierreyves.bigourdan@datadoghq.com>
Committer: Marcus Hirt <hirt@openjdk.org>
Date:      2023-01-17 12:17:00 +0000
URL:       https://git.openjdk.org/jmc/commit/e90f2582eb36b1563ce478322508d588fda883de
;;;",,,,,,,,,,,,,,,,,,,
AlgorithmId should keep lowercase characters from 3rd party providers,JDK-8301788,5093347,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2023-02-03 07:12,2023-02-13 11:05,2023-10-01 09:56,2023-02-06 09:12,,,,,,,,21,security-libs,,0,,,,,,,,,,,,,,,,"AlgorithmId is able to extract OID <-> name mappings from alias info in 3rd party providers, but it changes names to all UPPERCASE during this process. While this is not fatal since we always compare algorithm names in case-insensitive mode, it's better to keep the original name unchanged.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i308s3:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-02-03 07:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12410
Date: 2023-02-03 15:32:57 +0000;;;","2023-02-06 09:12;dukebot;Changeset: b5697420
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2023-02-06 17:10:46 +0000
URL:       https://git.openjdk.org/jdk/commit/b56974209b1a9c2c702e1c39708cdfbda37d56fc
;;;",,,,,,,,,,,,,,,,,,,
java/net/httpclient/SpecialHeadersTest failing after JDK-8301306,JDK-8301787,5093346,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dfuchs,dfuchs,2023-02-03 07:04,2023-08-04 12:48,2023-10-01 09:56,2023-02-03 08:03,21,,,,,,,21,core-libs,,0,httpclient,tier2,,,,,,,,,,,,,,test result: Error. Parse Exception: Invalid tag: requests,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301306,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i308rv:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-02-03 07:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12409
Date: 2023-02-03 15:16:11 +0000;;;","2023-02-03 08:03;dukebot;Changeset: 8b70256d
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-02-03 16:01:47 +0000
URL:       https://git.openjdk.org/jdk/commit/8b70256d301ad01fb417b77bcb6c973c0db7179c
;;;","2023-02-03 08:27;dcubed;The fix for this bug is integrated in jdk-21+9-620.;;;",,,,,,,,,,,,,,,,,,
[Lilliput] Failing CompressedClassPointerEncoding.java,JDK-8301786,5093345,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,rkennke,rkennke,2023-02-03 07:03,2023-02-08 09:45,2023-10-01 09:56,2023-02-06 23:08,repo-lilliput,,,,,,,repo-lilliput,hotspot,,0,,,,,,,,,,,,,,,,"After merging jdk-21+8, the Lilliput-only test runtime/CompressedOops/CompressedClassPointerEncoding.java started failing because of 2 misaligned compressed class spaces. I commented out those two configurations for now. It can easily be reproduced by removing the comments in the test and running the test on x86_64.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302094,,,,,,,JDK-8294677,,,,,"2023-02-06 08:08;stuefe;hs_err_pid7227.log;https://bugs.openjdk.org/secure/attachment/102562/hs_err_pid7227.log",,,,,,,,,x86_64,,,,,,,,,generic,,,,,,"0|i308rn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-05 00:49;stuefe;This is caused by JDK-8294677 increasing Metaspace root chunk size and hence CCS size and base address granularity from 4M to 16M.

While this is easy to fix, I noticed that parts of the test are dysfunctional and need more TLC than just adjusting the CCS base addresses. E.g. the assumed max. encoding range size of 2G is wrong; at the moment, max. encoding range is 8GB with 24bit Klass Pointers.;;;","2023-02-06 08:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/72
Date: 2023-02-06 16:16:13 +0000;;;",,,,,,,,,,,,,,,,,,,
Generational ZGC: Indirect access barriers are never elided,JDK-8301769,5093328,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rcastanedalo,rcastanedalo,rcastanedalo,2023-02-03 06:26,2023-02-19 23:22,2023-10-01 09:41,2023-02-19 23:22,repo-genzgc,,,,,,,repo-genzgc,hotspot,,0,genzgc,zgc,,,,,,,,,,,,,,"Atomic operation barriers in x64 are not elided according to the expectations described in ZBarrierSetC2::analyze_dominating_barriers(). For example, an atomic operation on an object field followed by a load of the same field does not result in the load's barrier being elided.

To reproduce the issue, run Atomics.java (attached) in x64 as follows:

$ java -Xbatch -XX:-TieredCompilation -XX:+UseZGC -XX:CompileOnly=Atomics::testAtomicThenLoad -XX:CompileCommand=PrintAssembly,Atomics::testAtomicThenLoad Atomics.java | grep BarrierStubC2

According to the logic described in ZBarrierSetC2::analyze_dominating_barriers(), we would expect the following output (the load's barrier should be elided):

;; ZStoreBarrierStubC2

However, we get:

;; ZStoreBarrierStubC2
;; ZLoadBarrierStubC2

In x64, this is a regression introduced by JDK-8297235, where the memory operands of atomic instructions were changed from 'memory' to 'indirect'. This inhibits C2 from deriving the atomic access offset, and as a result ZBarrierSetC2::analyze_dominating_barriers_impl() cannot match dominating/dominated access pairs when at least one of these is an atomic operation. Most likely this is an issue in all other platforms as well, where the memory operands of atomic instructions where already of type 'indirect' before JDK-8297235, but they remain to be tested. The same problem can be expected for volatile loads and stores in aarch64 (zLoadPVolatile, zStorePVolatile), whose memory operand is of type 'indirect'.

As far as I can see, this issue results in missing optimizations but does not cause malfunctioning.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297235,,,,,,,,,,,,"2023-02-03 06:25;rcastanedalo;Atomics.java;https://bugs.openjdk.org/secure/attachment/102539/Atomics.java",,,,,,,,,,,,,,,,,,,,,,,,"0|i308nv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-16 05:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/zgc/pull/13
Date: 2023-02-16 10:55:26 +0000;;;",,,,,,,,,,,,,,,,,,,,
Adding children to wrong index leaves inconsistent state in Parent#childrenSet,JDK-8301763,5092737,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lkostyra,webbuggrp,webbuggrp,2023-01-28 03:16,2023-06-02 08:29,2023-10-01 09:56,2023-05-24 04:39,8,jfx11,jfx17,jfx19,jfx20,,,jfx21,javafx,,0,dcspn,reproducer-yes,sn_143,sn_144,webbug,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Microsoft Windows [Version 10.0.17134.1040]
openjdk version ""13"" 2019-09-17
OpenJDK Runtime Environment AdoptOpenJDK (build 13+33)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 13+33, mixed mode, sharing) 

A DESCRIPTION OF THE PROBLEM :
Adding children to wrong index leaves inconsistent state in Parent#childrenSet, so the next call to remove throws exception. Run attached sources.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run provided test case.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Exception should not be thrown on removing the item.
ACTUAL -
Exception is thrown on removing the item.

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class TestFx_collectionInconsistentState
{

    public static void main( String[] args )
    {
        Application.launch( FxApp.class, args );
    }

    public static class FxApp extends Application
    {

        @Override
        public void start( final Stage primaryStage ) throws Exception
        {
            System.err.println( System.getProperty( ""javafx.version"" ) );
            final var pane = new VBox();
            pane.getChildren().addAll( new Label( ""1"" ), new Label( ""2"" ) );
            try
            {
                pane.getChildren().add( -1, new Label( ""0"" ) );
            }
            catch( IndexOutOfBoundsException aE )
            {
                // Exception is thrown, but the list state becomes corrupted
            }
            // But javafx.scene.Parent.childSet does not revert its state
            pane.getChildren().remove( 0 );
        }
    }

}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-03 04:57;pnarayanaswa;TestFx_collectionInconsistentState.java;https://bugs.openjdk.org/secure/attachment/102538/TestFx_collectionInconsistentState.java",,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i3050r:",9223372036854775807,b19,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2023-02-03 04:58;pnarayanaswa;Checked with attached Testcase in Windows10, Issue is reproducible, Exception is thrown
Test result
========
8: Fail
8u361: Fail
openjfx11: Fail
openjfx17: Fail
openjfx19: Fail
openjfx20ea16: Fail
;;;","2023-02-09 05:46;lkostyra;I reproduced it on latest jfx19 on Windows 11 and macOS Monterey 12.6.1;;;","2023-05-15 05:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1136
Date: 2023-05-15 12:49:41 +0000;;;","2023-05-24 04:39;dukebot;Changeset: 4b24c869
Author:    Lukasz Kostyra <lkostyra@openjdk.org>
Committer: John Hendrikx <jhendrikx@openjdk.org>
Date:      2023-05-24 11:38:24 +0000
URL:       https://git.openjdk.org/jfx/commit/4b24c8690d01634179571d24c8919469b209bec6
;;;",,,,,,,,,,,,,,,,,
Fix possible leak in SpNegoContext dispose,JDK-8301760,5093320,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,yan,yan,yan,2023-02-03 04:24,2023-02-15 22:40,2023-10-01 09:56,2023-02-05 23:09,,,,,,,,21,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-hard,,,,,,,,,"SpNegoContext dispose() sets mechanism context to null without calling it's dispose() first. It would be OK but in case of a custom native provider there may be  a memory leak.
The obvious fix would be, make dispose() like that in e.g. GSSContextImpl.java.
The leak was reported in production but it is hard to reproduce in a regression test.
And, it's not a regression, this code is dated by 2005 I think.",,,,,,,,,,JDK-8302192,JDK-8302624,JDK-8302194,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i308m3:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5ce3d383,,,,,,,,,"2023-02-03 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12407
Date: 2023-02-03 14:12:42 +0000;;;","2023-02-05 23:09;dukebot;Changeset: 3f3356bc
Author:    Yuri Nesterenko <yan@openjdk.org>
Date:      2023-02-06 07:08:35 +0000
URL:       https://git.openjdk.org/jdk/commit/3f3356bcbd2b2fbc545263dc70a48ee931a4e56b
;;;","2023-02-06 00:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/265
Date: 2023-02-06 08:35:26 +0000;;;","2023-02-06 22:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1147
Date: 2023-02-07 06:41:28 +0000;;;","2023-02-06 22:58;yan;Fix request (8u):
the fix is universal and clean but in jdk8u there is an obvious path adjustment.  Local test run on Linux is OK. GHA infrastructure restored and the rererun was OK, too.;;;","2023-02-06 23:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1709
Date: 2023-02-07 07:05:04 +0000;;;","2023-02-07 02:39;yan;Fix request (11u, 17u):
clean backports of a simple fix. Risk of this additional check seems low.
No problems with GHA tests.;;;",,,,,,,,,,,,,,
Missed constructor from 8301659,JDK-8301756,5093316,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-02-03 03:42,2023-02-13 11:10,2023-10-01 09:56,2023-02-08 01:12,,,,,,,,21,client-libs,,0,cleanup,,,,,,,,,,,,,,,8301659 has missed a reordered constructor defined inside libawt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,JDK-8301659,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i308l7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-02-03 03:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12405
Date: 2023-02-03 09:54:05 +0000;;;","2023-02-08 01:12;dukebot;Changeset: 0f08785c
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-02-08 09:10:21 +0000
URL:       https://git.openjdk.org/jdk/commit/0f08785c01226961fb6040d5d30917308de34a88
;;;",,,,,,,,,,,,,,,,,,,
AppendFile/WriteFile has differences between make 3.81 and 4+,JDK-8301753,5093313,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ihse,dnsimon,dnsimon,2023-02-03 03:01,2023-02-22 23:13,2023-10-01 09:56,2023-02-16 11:34,21,,,,,,,21,infrastructure,,0,,,,,,,,,,,,,,,,"When the AppendFile function in make/common/MakeIO.gmk [1] uses the printf shell function, it needs to append a new line (see attached 8301753.patch). That is what the GNU make file function[2] does:

""When writing files, text will be written to the file. If text does not already end in a newline a final newline will be written (even if text is the empty string). If the text argument is not given at all, nothing will be written.""

Without this, the use of AppendFile in CreateNewSpec [3] results in a badly formatted spec file (i.e., everything on one line).

[1] https://github.com/openjdk/jdk/blob/cf68d9fb8e55e461fa717f1443094300de8feacb/make/common/MakeIO.gmk#L270
[2] https://www.gnu.org/software/make/manual/html_node/File-Function.html
[3] https://github.com/openjdk/jdk/blob/cf68d9fb8e55e461fa717f1443094300de8feacb/make/RunTestsPrebuilt.gmk#L105",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-03 03:03;dnsimon;8301753.patch;https://bugs.openjdk.org/secure/attachment/102535/8301753.patch",,,,,,,,,,,,,,,,,,,,,,,,"0|i308kj:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-02-07 11:19;erikj;Did you intend to submit this as a PR yourself?

I agree that the fallback implementation of AppendFile should mimic the gnu make implementation, and it's a bug if they behave differently. Are you running with a gnu make version <4.0 as you are running into this?;;;","2023-02-07 11:55;dnsimon;[~lmesnik] said he'd take care of fixing this.

I was using GNU Make 3.81 on macOS when I hit this.;;;","2023-02-07 12:06;erikj;Right, macos still ships with 3.81.;;;","2023-02-07 13:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12461
Date: 2023-02-07 20:56:01 +0000;;;","2023-02-16 11:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12605
Date: 2023-02-16 19:08:53 +0000;;;","2023-02-16 11:34;dukebot;Changeset: a39cf2e3
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2023-02-16 19:32:38 +0000
URL:       https://git.openjdk.org/jdk/commit/a39cf2e3b242298fbf5fafdb8aa9b5d4562061ef
;;;",,,,,,,,,,,,,,,
java/rmi/server/UnicastRemoteObject/serialFilter/FilterUROTest.java fail with -Xcomp ,JDK-8301737,5093294,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sguoyun,sguoyun,sguoyun,2023-02-02 19:25,2023-05-30 09:15,2023-10-01 09:56,2023-02-11 08:54,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"The tests failed with VM_OPTIONS=-Xcomp on the AArch64 and LOONGARCH64 architecture.

----------System.err:(49/3317)----------
java.rmi.NoSuchObjectException: no such object in table
    at java.rmi/sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:304)
    at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:280)
    at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:166)
    at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:215)
    at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:160)
    at $Proxy5.filterCount(Unknown Source)
    at FilterUROTest.useExportObject(FilterUROTest.java:76)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
    at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
    at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
    at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
    at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
    at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
    at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
    at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
    at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
    at org.testng.TestRunner.privateRun(TestRunner.java:764)
    at org.testng.TestRunner.run(TestRunner.java:585)
    at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
    at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
    at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
    at org.testng.SuiteRunner.run(SuiteRunner.java:286)
    at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
    at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
    at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
    at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
    at org.testng.TestNG.runSuites(TestNG.java:1069)
    at org.testng.TestNG.run(TestNG.java:1037)
    at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
    at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
    at java.base/java.lang.Thread.run(Thread.java:1591)
java.lang.Exception: failures: 1
    at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:95)
    at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
    at java.base/java.lang.Thread.run(Thread.java:1591)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308681,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i308gb:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50807e59,,,,,,,,,"2023-02-02 19:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12399
Date: 2023-02-03 03:52:39 +0000;;;","2023-02-11 08:54;dukebot;Changeset: 6f9f2b5d
Author:    sunguoyun <sunguoyun@loongson.cn>
Committer: Roger Riggs <rriggs@openjdk.org>
Date:      2023-02-11 16:53:59 +0000
URL:       https://git.openjdk.org/jdk/commit/6f9f2b5d379315b6452718ccd7c5c953a6eff5d4
;;;",,,,,,,,,,,,,,,,,,,
jdk/incubator/concurrent/StructuredTaskScope/StructuredTaskScopeTest.java fail with -Xcomp,JDK-8301736,5093293,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sguoyun,sguoyun,sguoyun,2023-02-02 18:54,2023-07-27 23:34,2023-10-01 09:56,2023-02-07 01:19,,,,,,,,21,core-libs,,0,loom,noreg-self,,,,,,,,,,,,,,"This test failed with VM_OPTIONS=-Xcomp and CONF=fastdebug
occasionally on the AArch64 and LOONGARCH64 architecture.

----------System.out:(86/6899)----------
config StructuredTaskScopeTest.setUp(): success
test StructuredTaskScopeTest.testCloseConfined(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testCloseWithoutJoin2(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testCloseWithoutJoin3(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testFork1(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testFork2(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testForkAfterClose(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testForkAfterShutdown(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testForkConfined(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testForkReject(): success
test StructuredTaskScopeTest.testFuture1(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testFuture2(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testFuture3(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testFutureCancelConfined(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testFutureWithShutdown(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testHandleComplete1(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testHandleComplete2(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testInterruptClose1(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testInterruptClose2(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testInterruptJoin1(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testInterruptJoin2(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): success
test StructuredTaskScopeTest.testInterruptJoinUntil1(java.lang.ThreadBuilders$PlatformThreadFactory@52034683): failure
java.lang.AssertionError: joinUntil did not throw
    at org.testng.Assert.fail(Assert.java:99)
    at StructuredTaskScopeTest.testInterruptJoinUntil1(StructuredTaskScopeTest.java:625)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
    at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
    at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
    at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
    at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
    at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
    at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
    at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
    at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
    at org.testng.TestRunner.privateRun(TestRunner.java:764)
    at org.testng.TestRunner.run(TestRunner.java:585)
    at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
    at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
    at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
    at org.testng.SuiteRunner.run(SuiteRunner.java:286)
    at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
    at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
    at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
    at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
    at org.testng.TestNG.runSuites(TestNG.java:1069)
    at org.testng.TestNG.run(TestNG.java:1037)
    at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
    at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
    at java.base/java.lang.Thread.run(Thread.java:1591)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i308g3:",9223372036854775807,b09,,,,,,,,,,,"2023-02-02 19:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12398
Date: 2023-02-03 03:19:05 +0000;;;","2023-02-07 01:19;dukebot;Changeset: 1aaf394b
Author:    sunguoyun <sunguoyun@loongson.cn>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2023-02-07 09:17:23 +0000
URL:       https://git.openjdk.org/jdk/commit/1aaf394b33da750803a54df84c6548717e78ea30
;;;",,,,,,,,,,,,,,,,,,,
lookup.findSpecial fails on Object method call from interface,JDK-8301721,5093278,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,dlsmith,dlsmith,2023-02-02 16:20,2023-06-12 20:49,2023-10-01 09:56,2023-06-06 09:21,19,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"|  Welcome to JShell -- Version 19
|  For an introduction type: /help intro

jshell> import java.lang.invoke.*;

jshell> class C { static void test() throws Throwable {
   ...>         MethodHandles.Lookup lookup = MethodHandles.lookup();
   ...>         MethodHandle mh = lookup.findSpecial(Object.class, ""toString"", MethodType.methodType(String.class), C.class);
   ...>         System.out.println(mh.invoke(new C()));
   ...>     }}
|  created class C

jshell> C.test()
REPL.$JShell$17$C@b1bc7ed

jshell> interface I { static void test() throws Throwable {
   ...>         MethodHandles.Lookup lookup = MethodHandles.lookup();
   ...>         MethodHandle mh = lookup.findSpecial(Object.class, ""toString"", MethodType.methodType(String.class), I.class);
   ...>         System.out.println(mh.invoke(new I(){}));
   ...>     }}
|  created interface I

jshell> I.test()
|  Exception java.lang.IllegalArgumentException: nothing to resolve
|        at MethodHandleNatives.resolve (Native Method)
|        at MemberName$Factory.resolve (MemberName.java:1085)
|        at MemberName$Factory.resolveOrNull (MemberName.java:1129)
|        at MethodHandles$Lookup.getDirectMethodCommon (MethodHandles.java:4010)
|        at MethodHandles$Lookup.getDirectMethod (MethodHandles.java:3963)
|        at MethodHandles$Lookup.findSpecial (MethodHandles.java:3012)
|        at I.test (#4:3)
|        at (#5:1)

There's no particular reason that an interface shouldn't be able to make the same 'findSpecial' request as a class. I believe this 'findSpecial' call should succeed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i308cr:",9223372036854775807,b26,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2023-02-03 11:02;mchung;The implementation for looking up the method from its super class assumes the lookup class always has a super class.   It needs to handle when the lookup class is an interface where I.class.getSuperclass() returns null.;;;","2023-06-05 12:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14319
Date: 2023-06-05 19:33:48 +0000;;;","2023-06-06 09:21;dukebot;Changeset: 74dc50b7
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-06-06 16:19:46 +0000
URL:       https://git.openjdk.org/jdk/commit/74dc50b7f0b0b9440746ff329fc3324c477ae421
;;;",,,,,,,,,,,,,,,,,,
[linux] Crash on exit from WebKit 615.1,JDK-8301712,5093269,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jbhaskar,kcr,kcr,2023-02-02 12:16,2023-03-13 17:13,2023-10-01 09:56,2023-02-08 17:11,8u371,jfx21,,,,,,jfx21,javafx,,0,CPU23_04-critical-approved,CPU23_04-critical-SQE-OK,crash,regression,sn_136,sn_137,webkit-2.38,,,,,,,,,"To reproduce this, run any WebView program and exit the application. For example:

1. Run ""java HelloWebView""
2. Close the window by pressing the window close button
BUG: it will crash with a SIGSEGV at address 0 (null pointer crash)
",,,,,,,,,,JDK-8302356,JDK-8302275,JDK-8302279,JDK-8304101,JDK-8302157,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299977,,,,,,,,,,,,,,,,,,,,b05,8u371,,linux,,,,,,"0|i308ar:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-02-08 05:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1027
Date: 2023-02-08 13:51:29 +0000;;;","2023-02-08 17:11;dukebot;Changeset: 13d8df31
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-02-09 01:08:19 +0000
URL:       https://git.openjdk.org/jfx/commit/13d8df31e7bc4336d01ec859e127756928db30d4
;;;","2023-02-11 06:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/133
Date: 2023-02-11 14:11:31 +0000;;;","2023-02-11 06:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/113
Date: 2023-02-11 14:43:18 +0000;;;","2023-03-13 16:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx20u/pull/4
Date: 2023-03-13 23:26:14 +0000;;;",,,,,,,,,,,,,,,,
java/net/DatagramSocket/DatagramSocketMulticasting.java should be hardened,JDK-8301701,5093258,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dclarke,dfuchs,dfuchs,2023-02-02 10:25,2023-09-13 22:43,2023-10-01 09:56,2023-02-27 22:53,,,,,,,,21,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,"The java/net/DatagramSocket/DatagramSocketMulticasting.java is vulnerable to receiving datagrams sent by other tests running concurrently on the machine. In particular the method `testSendReceive` should use a body text unique for the method invocation, and ignore any received datagram that do not contain the same body.

The test could also benefit from being refactored to using TestNG or Jupiter rather than using its own assertXxx methods (which would allow to use assertEquals rather than plain assertTrue",,,,,,,,,,JDK-8316247,JDK-8305058,JDK-8306143,,,,,,,,,,,,,,,,,,,,,JDK-8301674,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3088b:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-02-10 07:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12513
Date: 2023-02-10 15:43:35 +0000;;;","2023-02-27 22:53;dukebot;Changeset: 5feb13b5
Author:    Darragh Clarke <Darragh.clarke@oracle.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2023-02-28 06:51:37 +0000
URL:       https://git.openjdk.org/jdk/commit/5feb13b55d32fad8f533f52ee7bd63e2cf2d247c
;;;","2023-06-13 12:01;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a test change.
Trivial resolve.
Test passes with jtreg 7.2, but not out-of-the box with jtreg 6.2.;;;","2023-06-13 12:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1433
Date: 2023-06-13 19:05:11 +0000;;;",,,,,,,,,,,,,,,,,
[s390] Optimized-build is broken,JDK-8301697,5093255,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,amitkumar,tsteele,tsteele,2023-02-02 09:19,2023-02-22 12:26,2023-10-01 09:56,2023-02-13 08:16,21,,,,,,,21,hotspot,,0,noreg-build,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,"Created on behalf of Amit Kumar.

Optimized build is broken on s390x with GCC-9.4.0. Failure log:

For target support_interim-jmods_support__create_java.base.jmod_exec:
assembly code requires stop: (stop) killed Z_R14
To suppress the following error report, specify this argument
after -XX: or in .hotspotrc:  SuppressErrorAt=/macroAssembler_s390.cpp:5498

A fatal error has been detected by the Java Runtime Environment:

 Internal Error (src/hotspot/cpu/s390/macroAssembler_s390.cpp:5498), pid=3076078, tid=3076083
 guarantee(false) failed: Z assembly code requires stop: killed Z_R14

JRE version:  (21.0) (build )
Java VM: OpenJDK 64-Bit Server VM (21-internal-adhoc.amit.jdk, mixed mode, tiered, compressed oops, compressed class ptrs,      g1 gc, linux-s390x)
Problematic frame:
V  [libjvm.so+0x9e6e78]  stop_on_request(char const*, char const*)+0x60
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,linux,,,,,,"0|i3087n:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-09 10:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12400
Date: 2023-02-03 04:34:46 +0000;;;","2023-02-13 08:16;dukebot;Changeset: 101db262
Author:    Amit Kumar <amitlocham09@icloud.com>
Committer: Tyler Steele <tsteele@openjdk.org>
Date:      2023-02-13 16:14:33 +0000
URL:       https://git.openjdk.org/jdk/commit/101db262e1eef9afcc316009740ebf74a7c598d9
;;;",,,,,,,,,,,,,,,,,,,
TLS 1.3 handshake fails if server_name doesn't match resuming session,JDK-8301686,5093243,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,djelinski,djelinski,2023-02-02 08:08,2023-09-29 01:04,2023-10-01 09:56,2023-09-28 22:01,21,22,,,,,,22,security-libs,,0,amazon-interest,,,,,,,,,,,,,,,"Under certain circumstances the TLS 1.3 handshake may fail: the client sends a pre_shared_key extension, the server processes it, later the server decides not to resume the session, but it still sends its pre_shared_key extension. As a result, the client's handshake keys computed using the PSK do not match the server's, because the server does not use the PSK.

This can happen when the original session was established with a SNIMatcher and the resumption was performed without a SNIMatcher.

Reproducer attached. It performs 2 handshakes using the same SSLContext. The first handshake succeeds, the second aborts with ""Tag mismatch"". Expected result: both handshakes finish successfully.

Possible solution: make PreSharedKeyExtension.SHPreSharedKeyProducer return null if shc.isResumption is false.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-02 08:01;djelinski;BadResumption.zip;https://bugs.openjdk.org/secure/attachment/102518/BadResumption.zip",,,,,,,,,,,,,,,,,,,,,,,,"0|i3084z:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-02-08 11:00;wetmore;Triaging as this is very likely an issue.  Will need someone to investigate further.;;;","2023-04-24 02:08;djelinski;Note that TLS 1.3 permits the server to resume sessions where SNI name does not match the original session:
https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.11

   In TLS versions prior to TLS 1.3, the Server Name Identification
   (SNI) value was intended to be associated with the session (Section 3
   of [RFC6066]), with the server being required to enforce that the SNI
   value associated with the session matches the one specified in the
   resumption handshake.  However, in reality the implementations were
   not consistent on which of two supplied SNI values they would use,
   leading to the consistency requirement being de facto enforced by the
   clients.  In TLS 1.3, the SNI value is always explicitly specified in
   the resumption handshake, and there is no need for the server to
   associate an SNI value with the ticket.  Clients, however, SHOULD
   store the SNI with the PSK to fulfill the requirements of
   Section 4.6.1.;;;","2023-04-26 03:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13669
Date: 2023-04-26 10:02:49 +0000;;;","2023-09-28 22:01;dukebot;Changeset: 0259da92
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-09-29 05:00:02 +0000
URL:       https://git.openjdk.org/jdk/commit/0259da92831087e918d00b8a83e04c96a6877f41
;;;",,,,,,,,,,,,,,,,,
[lworld] Inconsistent CastPP type leads to infinite loop in PhaseIterGVN::optimize,JDK-8301664,5093218,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,dsimms,dsimms,2023-02-02 01:31,2023-02-07 08:21,2023-10-01 09:56,2023-02-07 08:21,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,c2,lw4,lworld,,,,,,,,,,,,,"Since merge with jdk-21+5:

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle/valhalla/open/src/hotspot/share/opto/phaseX.cpp:1162), pid=276313, tid=276326
#  assert(false) failed: infinite loop in PhaseIterGVN::optimize
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-lworld4ea-LTS-2023-02-06-0803323.tobias...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-lworld4ea-LTS-2023-02-06-0803323.tobias..., mixed mode, tiered, jvmci, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x18348dd]  PhaseIterGVN::optimize()+0x55d

Current CompileTask:
C2:   1656   98    b  4       jdk.vm.ci.meta.JavaMethod::format (405 bytes)

Stack: [0x00007fb161eff000,0x00007fb162000000],  sp=0x00007fb161ffa670,  free space=1005k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x18348dd]  PhaseIterGVN::optimize()+0x55d  (phaseX.cpp:1162)
V  [libjvm.so+0xb56f52]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x6b2  (loopnode.hpp:1185)
V  [libjvm.so+0xb506d3]  Compile::Optimize()+0xe43  (compile.cpp:2635)
V  [libjvm.so+0xb54989]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1959  (compile.cpp:842)
V  [libjvm.so+0x94716e]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x51e  (c2compiler.cpp:113)
V  [libjvm.so+0xb61fcc]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xb62dd8]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x10d6876]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:711)
V  [libjvm.so+0x1b25a80]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1797cd3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301665,,,,,,,,,JDK-8228622,,,,,"2023-02-07 05:15;thartmann;replay_pid5879.log;https://bugs.openjdk.org/secure/attachment/102583/replay_pid5879.log",,,,,,,,,,,,,,,,,,,,,,,,"0|i307zf:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-07 05:15;thartmann;java -XX:+UnlockDiagnosticVMOptions -XX:+ReplayIgnoreInitErrors -XX:+ReplayCompiles -XX:ReplayDataFile=replay_pid5879.log -ea -esa -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI;;;","2023-02-07 06:05;thartmann;Old issue introduced by JDK-8228622.;;;","2023-02-07 06:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/822
Date: 2023-02-07 14:32:12 +0000;;;",,,,,,,,,,,,,,,,,,
Resolve initialization reordering issues on Windows for libawt and libsaproc,JDK-8301659,5093212,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-02-01 22:11,2023-02-08 23:37,2023-10-01 09:56,2023-02-02 07:23,,,,,,,,21,hotspot,,0,serviceability,,,,,,,,,,,,,,,"Small, trivial change to resolve initialization order reordering in constructors, required for JDK-8288293

gcc will fail to compile a Windows JDK with the following errors, which causes a build failure eventually:
GDIHashtable.cpp: m_nCounter is initialized before m_nDestroyPeriod [-Werror=reorder] for libawt
sawindbg.cpp: bytePtr is initialized before releaseMode [-Werror=reorder] for libsaproc

Moving the initializer list to the correct order to resolve this build failure is trivial, and is done so in this change",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,JDK-8301756,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i307y3:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-02-01 22:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12382
Date: 2023-02-02 06:12:20 +0000;;;","2023-02-02 07:23;dukebot;Changeset: 725d57b2
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-02-02 15:22:18 +0000
URL:       https://git.openjdk.org/jdk/commit/725d57b2e2b78c1536d8a4adae67b27a2c8aee21
;;;",,,,,,,,,,,,,,,,,,,
com/sun/jdi/JdbStopThreadTest.java fails after JDK-8300811,JDK-8301644,5093195,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,cjplummer,dcubed,dcubed,2023-02-01 13:42,2023-07-20 16:46,2023-10-01 09:56,2023-02-02 09:01,21,,,,,,,21,core-svc,,0,intermittent,noreg-self,regression,tier3,tier6,,,,,,,,,,,"The following test fails in the JDK21 CI:

com/sun/jdi/JdbStopThreadTest.java

Here's a log file snippet from the linux-x64-open sighting:

#section:main
----------messages:(7/295)----------
command: main JdbStopThreadTest
reason: User specified action: run main/othervm JdbStopThreadTest 
started: Wed Feb 01 21:12:21 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jdi
finished: Wed Feb 01 21:12:27 UTC 2023
elapsed time (seconds): 6.2
----------configuration:(3/35)----------
Boot Layer
  add modules: jdk.jdi

----------System.out:(35/4189)*----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+8-582/linux-x64-open.jdk/jdk-21/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/363e5923-f286-4c4a-a92f-1c4e44d12054/runs/5de04201-bcd1-4619-bd6f-ca750be7c170/testoutput/test-support/jtreg_open_test_jdk_tier3/classes/1/com/sun/jdi/JdbStopThreadTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+8-582/src.full/open/test/jdk/com/sun/jdi:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/363e5923-f286-4c4a-a92f-1c4e44d12054/runs/5de04201-bcd1-4619-bd6f-ca750be7c170/testoutput/test-support/jtreg_open_test_jdk_tier3/classes/1/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+8-582/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.1.1/1/bundles/jtreg-7.1.1+1.zip/jtreg/lib/jtreg.jar -Xmx768m -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-x64/jdk-19_linux-x64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/363e5923-f286-4c4a-a92f-1c4e44d12054/runs/5de04201-bcd1-4619-bd6f-ca750be7c170/testoutput/test-support/jtreg_open_test_jdk_tier3/tmp -ea -esa -agentlib:jdwp=transport=dt_socket,server=y,suspend=y JdbStopThreadTestTarg ]
[debuggee]:/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+8-582/linux-x64-open.jdk/jdk-21/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/363e5923-f286-4c4a-a92f-1c4e44d12054/runs/5de04201-bcd1-4619-bd6f-ca750be7c170/testoutput/test-support/jtreg_open_test_jdk_tier3/classes/1/com/sun/jdi/JdbStopThreadTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+8-582/src.full/open/test/jdk/com/sun/jdi:/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/363e5923-f286-4c4a-a92f-1c4e44d12054/runs/5de04201-bcd1-4619-bd6f-ca750be7c170/testoutput/test-support/jtreg_open_test_jdk_tier3/classes/1/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-21+8-582/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.1.1/1/bundles/jtreg-7.1.1+1.zip/jtreg/lib/jtreg.jar -Xmx768m -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-x64/jdk-19_linux-x64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/363e5923-f286-4c4a-a92f-1c4e44d12054/runs/5de04201-bcd1-4619-bd6f-ca750be7c170/testoutput/test-support/jtreg_open_test_jdk_tier3/tmp -ea -esa -agentlib:jdwp=transport=dt_socket,server=y,suspend=y JdbStopThreadTestTarg
[debuggee] Listening for transport dt_socket at address: 38269
[jdb] Set uncaught java.lang.Throwable
[jdb] Set deferred uncaught java.lang.Throwable
[jdb] Initializing jdb ...
[jdb] 
[jdb] VM Started: > No frames on the current call stack
[jdb] 
[jdb] main[1] 
> stop thread at JdbStopThreadTestTarg:46
[jdb] Deferring breakpoint JdbStopThreadTestTarg:46.
[jdb] It will be set after the class is loaded.
[jdb] main[1] 
> run 
[jdb] > Set deferred breakpoint JdbStopThreadTestTarg:46
[jdb] 
[jdb] Breakpoint hit: ""thread=main"", JdbStopThreadTestTarg.test(), line=46 bci=4
[jdb] 46            print(thread); // @1 breakpoint
[jdb] > 
> thread 1
[jdb] main[1] 
> stop go at JdbStopThreadTestTarg:48
[jdb] Set breakpoint JdbStopThreadTestTarg:48
[jdb] main[1] 
> cont
[debuggee] Thread[#1,main,5,main]
[debuggee] test
[jdb] > 
[jdb] Breakpoint hit: 
[jdb] The application exited
[jdb] 
=======================================
Exception thrown during test execution: '^Breakpoint hit: ""thread=main"", JdbStopThreadTestTarg\\.test\\(\\), line=48.*\\R48\\s+print\\(str\\);.*\\R>\\s' missing from stdout/stderr
=======================================
----------System.err:(60/2263)*----------
 stdout: [Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...

VM Started: > No frames on the current call stack

main[1] 
Deferring breakpoint JdbStopThreadTestTarg:46.
It will be set after the class is loaded.
main[1] 
> Set deferred breakpoint JdbStopThreadTestTarg:46

Breakpoint hit: ""thread=main"", JdbStopThreadTestTarg.test(), line=46 bci=4
46            print(thread); // @1 breakpoint
> 
main[1] 
Set breakpoint JdbStopThreadTestTarg:48
main[1] 
> 
Breakpoint hit: 
The application exited
];
 stderr: [Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...

VM Started: > No frames on the current call stack

main[1] 
Deferring breakpoint JdbStopThreadTestTarg:46.
It will be set after the class is loaded.
main[1] 
> Set deferred breakpoint JdbStopThreadTestTarg:46

Breakpoint hit: ""thread=main"", JdbStopThreadTestTarg.test(), line=46 bci=4
46            print(thread); // @1 breakpoint
> 
main[1] 
Set breakpoint JdbStopThreadTestTarg:48
main[1] 
> 
Breakpoint hit: 
The application exited
]
 exitValue = -1

java.lang.RuntimeException: '^Breakpoint hit: ""thread=main"", JdbStopThreadTestTarg\\.test\\(\\), line=48.*\\R48\\s+print\\(str\\);.*\\R>\\s' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:340)
	at JdbStopThreadTest.runCases(JdbStopThreadTest.java:88)
	at lib.jdb.JdbTest.run(JdbTest.java:96)
	at JdbStopThreadTest.main(JdbStopThreadTest.java:58)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException: '^Breakpoint hit: ""thread=main"", JdbStopThreadTestTarg\\.test\\(\\), line=48.*\\R48\\s+print\\(str\\);.*\\R>\\s' missing from stdout/stderr
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: '^Breakpoint hit: ""thread=main"", JdbStopThreadTestTarg\\.test\\(\\), line=48.*\\R48\\s+print\\(str\\);.*\\R>\\s' missing from stdout/stderr
----------rerun:(38/6688)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281857,,,,,,,JDK-8300811,JDK-8301798,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i307uj:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,Verified,,"2023-02-01 13:45;dcubed;These failure started in the build-ID that contains this fix:

JDK-8300811jdb ThreadStartRequest and ThreadDeathRequest should use SUSPEND_NONE instead of SUSPEND_ALL;;;","2023-02-01 13:46;dcubed;[~cjplummer] - Please take a look as the possible regression.;;;","2023-02-01 14:01;cjplummer;We are seeing this:

> cont
[debuggee] Thread[#1,main,5,main]
[debuggee] test
[jdb] > 
[jdb] Breakpoint hit: 
[jdb] The application exited
[jdb] 

instead of this:

> cont
[debuggee] Thread[#1,main,5,main]
[debuggee] test
[jdb] > 
[jdb] Breakpoint hit: ""thread=main"", JdbStopThreadTestTarg.test(), line=48 bci=11
[jdb] 48            print(str); // @2 breakpoint
[jdb] > 
[jdb] The application exited

I'm not sure why removing thread suspension from ThreadStart/Death events would result in missing breakpoint info.

What is different about this breakpoint is that it is using the SUSPEND_NONE policy. It's possible the output was just never flushed before the app exited, and having a SUSPEND_ALL on the ThreadDeath may have been previously helped to flush the output.;;;","2023-02-01 14:16;cjplummer;Just noticed that this is happening with non-debug builds. I don't see it with my local debug build.;;;","2023-02-01 14:41;cjplummer;I couldn't reproduce it locally with a non-debug either. However, I'm pretty sure I know what the problem is. The first breakpoint, which we do see the proper prompt for, is tested with the following:

        jdb.command(JdbCommand.run().waitForPrompt(pattern1, true));
        new OutputAnalyzer(jdb.getJdbOutput()).shouldMatch(pattern1);

The 2nd breakpoint, which we are not seeing the proper prompt for, is using:

        jdb.command(JdbCommand.cont().allowExit());
        new OutputAnalyzer(jdb.getJdbOutput()).shouldMatch(pattern2);

So in the 2nd case it is not waiting for the prompt. I guess somehow this used to work when ThreadDeath caused all threads to be suspended, even if only briefly, because it changed the timing and allowed the full breakpoint output to appear before jdb.getJdbOutput() fetched all the output.

Switching to using waitForPrompt for the second case should solve the problem. Testing now with mach5. I've also submitted test runs without the fix to make sure I can reproduce it firest.;;;","2023-02-01 15:15;cjplummer;waitForPrompt wasn't quite good enough. The problem is that jdb just doesn't get a chance to print the full breakpoint prompt before the the debuggee exits. I think the solution is to have another breakpoint that does suspend the thread right after this one that doesn't suspend. Doing that combined with waitForPrompt should work. Testing now.;;;","2023-02-01 15:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12378
Date: 2023-02-01 23:51:02 +0000;;;","2023-02-02 09:01;dukebot;Changeset: de577332
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-02-02 16:58:48 +0000
URL:       https://git.openjdk.org/jdk/commit/de5773325d15ebefde80cb1bef734c50343958b8
;;;","2023-02-02 09:21;dcubed;The fix for this bug is integrated in jdk-21+9-600.;;;",,,,,,,,,,,,
NativeMemoryUsageTotal event uses reserved value for committed field,JDK-8301641,5093192,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sjohanss,sjohanss,sjohanss,2023-02-01 13:01,2023-02-13 11:07,2023-10-01 09:56,2023-02-07 01:30,21,,,,,,,21,hotspot,,0,jfr,nmt,,,,,,,,,,,,,,The NativeMemoryUsageTotal event uses the wrong value for committed leading to reserved and committed always being the same for the event.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301861,,,,JDK-8157023,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i307tv:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-01 14:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12377
Date: 2023-02-01 22:00:47 +0000;;;","2023-02-07 01:30;dukebot;Changeset: 77dbcd85
Author:    Stefan Johansson <sjohanss@openjdk.org>
Date:      2023-02-07 09:29:59 +0000
URL:       https://git.openjdk.org/jdk/commit/77dbcd85695b2b35ce10526d37a51e7e5fb656d7
;;;",,,,,,,,,,,,,,,,,,,
Java Discovery Protocol docs refer to incorrect property,JDK-8301640,5093191,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ssatish,kevinw,kevinw,2023-02-01 12:28,2023-03-16 08:53,2023-10-01 09:56,2023-02-09 07:48,,,,,,,,20,docs,,0,CPU23_04-critical-approved,jdk11u-na,jdk17u-na,,,,,,,,,,,,,"The table in the Monitoring and Management Guide (chapter 5, JDP) states the property -Dcom.sun.management.jmxremote.autodiscovery=true is used to turn on JDP, and that is correct.

https://docs.oracle.com/en/java/javase/19/management/java-discovery-protocol.html

But in a table, it then specifies:
-Dcom.sun.management.autodiscovery
Enables autodiscovery (JDP) on the network subnet

..but that clearly should be com.sun.management.jmxremote.autodiscovery

All the other Properties are correctly com.sun.management.jdp.... Only com.sun.management.jmxremote.autodiscovery is different.

Also, in the table entry for ""com.sun.management.jdp.port"", we say:
Multicast port to send autodiscovery packets. Enables autodiscovery even if the com.sun.management.autodiscovery property has not been set.

...which should be ""if the com.sun.management.jmxremote.autodiscovery property has not been set.""
",,,,,,,,,,JDK-8301681,JDK-8304356,JDK-8302461,JDK-8301679,JDK-8301680,JDK-8302933,JDK-8301682,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i307tn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4eba8c33,,,,,,,,,"2023-02-09 01:38;kevinw;Looks good, thanks!;;;","2023-02-13 01:23;goetz;[11u-na, 17u-na]
Change to public but Oracle-owned documentation.;;;",,,,,,,,,,,,,,,,,,,
JDI and JDWP specs should clarify potential deadlock issues with method invocation,JDK-8301639,5093190,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cjplummer,cjplummer,cjplummer,2023-02-01 12:23,2023-09-27 18:20,2023-10-01 09:56,2023-09-22 13:31,21,,,,,,,22,core-svc,,0,jdi,jdwp,noreg-doc,spec,,,,,,,,,,,,"The JDI spec says the following regarding ObjectReference.invokeMethod():

https://docs.oracle.com/en/java/javase/17/docs/api/jdk.jdi/com/sun/jdi/ClassType.html

""By default, all threads in the target VM are resumed while the method is being invoked if they were previously suspended by an event or by VirtualMachine.suspend() or ThreadReference.suspend(). This is done to prevent the deadlocks that will occur if any of the threads own monitors that will be needed by the invoked method.""

""The resumption of other threads during the invocation can be prevented by specifying the INVOKE_SINGLE_THREADED bit flag in the options argument; however, there is no protection against or recovery from the deadlocks described above, so this option should be used with great caution.""

The first issue is the reference to deadlocks due to ""monitors"" needed during the invoke. There are other types of resources that the invoked method might need and can result in a deadlock if all threads are not resumed. We can't even know all the types due some of them potentially being native, but a common one would be j.u.concurrent locks. The spec language should be more generic to cover these types of resources.

Another change needed is that when invoking on a virtual thread, there are potentially different resource requirements that can result in a deadlock than you would have when invoking on a platform thread. This is because there are many java library implementation difference that are dependent on the type of thread. For example Thread.sleep() may result in a deadlock when using INVOKE_SINGLE_THREADED on a virtual thread, but it generally is not an issue with platform threads. These potential behavior differences between platform threads and virtual threads should be called out in the spec.

These spec clarifications are needed with the following JDI methods:

ClassType.invokeMethod()
ClassType.newInstance()
InterfaceType.invokeMethod()
ObjectReference.invokeMethod()

And the following JDWP commands:

ClassType.InvokeMethod
ClassType.NewInstance
InterfaceType.InvokeMethod
ObjectReference.InvokeMethod",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316386,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i307tf:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-03-16 13:04;cjplummer;Suggested Fix:

For the issue with ""monitor"" being overly specific, I suggest just changing it to ""resource"". There's only once occurrence.

For the virtual thread issue related to Thread.sleep(), assuming we want to call this out, I suggest adding the following:

""During method invocation, virtual threads may have different resource requirements than platform threads. This is due to differences in the implementation of the Java libraries based on the type of thread being executed. This may result in a deadlock when invoking using INVOKE_SINGLE_THREADED on a virtual thread that you may not see with platform threads. In particular, Thread.sleep() can deadlock when invoked using a virtual thread.""
;;;","2023-06-01 15:15;cjplummer;Deferring to 22.;;;","2023-09-12 16:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15695
Date: 2023-09-12 22:24:18 +0000;;;","2023-09-14 16:56;dholmes;A CSR request is needed for the JDWP spec changes, even though they are trivial. Thanks.;;;","2023-09-22 13:31;dukebot;Changeset: 9aaac2ee
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-09-22 20:29:00 +0000
URL:       https://git.openjdk.org/jdk/commit/9aaac2eee34613c34b2800ddb4d42f5bbeba1837
;;;",,,,,,,,,,,,,,,,
ThreadLocalRandom.current().doubles().parallel() contention,JDK-8301637,5093156,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tvaleev,webbuggrp,webbuggrp,2023-02-01 07:59,2023-08-21 22:57,2023-10-01 09:56,2023-02-02 10:30,17.0.6,20,21,,,,,21,core-libs,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,noreg-perf,regression,webbug,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
In previous versions of Java, ThreadLocalRandom.current().doubles().parallel() was approximately the same speed as new SplittableRandom().doubles().parallel(). However, since Java 17, there is heavy contention on the stream when run in parallel.



REGRESSION : Last worked in version 16

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
ThreadLocalRandom.current().doubles(100_000_000).parallel().sum() on Java 16 vs Java 17.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expected to complete in about 150 milliseconds.
ACTUAL -
Takes several seconds, depending on the hardware. On 1-8-2 MacBookPro Intel it took 24 seconds. On my 1-6-2 Ubuntu Intel Server it took 4.4 seconds.

---------- BEGIN SOURCE ----------
import java.util.SplittableRandom;
import java.util.concurrent.ThreadLocalRandom;

public class Regression {
    public static void main(String... args) throws InterruptedException {
        int STREAM_SIZE = 32_000_000;

        long srIntsTime = System.nanoTime();
        try {
            System.out.println(""sum ints = "" +
                    new SplittableRandom().ints(STREAM_SIZE)
                            .parallel()
                            .sum());
        } finally {
            srIntsTime = System.nanoTime() - srIntsTime;
            System.out.printf(""srIntsTime = %dms%n"", (srIntsTime / 1_000_000));
        }

        long tlrIntsTime = System.nanoTime();
        try {
            System.out.println(""sum ints = "" +
                    ThreadLocalRandom.current().ints(STREAM_SIZE)
                            .parallel()
                            .sum());
        } finally {
            tlrIntsTime = System.nanoTime() - tlrIntsTime;
            System.out.printf(""tlrIntsTime = %dms%n"", (tlrIntsTime / 1_000_000));
        }

        long srLongsTime = System.nanoTime();
        try {
            System.out.println(""sum ints = "" +
                    new SplittableRandom().longs(STREAM_SIZE)
                            .parallel()
                            .sum());
        } finally {
            srLongsTime = System.nanoTime() - srLongsTime;
            System.out.printf(""srLongsTime = %dms%n"", (srLongsTime / 1_000_000));
        }

        long tlrLongsTime = System.nanoTime();
        try {
            System.out.println(""sum longs = "" +
                    ThreadLocalRandom.current().longs(STREAM_SIZE)
                            .parallel()
                            .sum());
        } finally {
            tlrLongsTime = System.nanoTime() - tlrLongsTime;
            System.out.printf(""tlrLongsTime = %dms%n"", (tlrLongsTime / 1_000_000));
        }

        long srDoublesTime = System.nanoTime();
        try {
            System.out.println(""sum doubles = "" +
                    new SplittableRandom().doubles(STREAM_SIZE)
                            .parallel()
                            .sum());
        } finally {
            srDoublesTime = System.nanoTime() - srDoublesTime;
            System.out.printf(""srDoublesTime = %dms%n"", (srDoublesTime / 1_000_000));
        }

        long tlrDoublesTime = System.nanoTime();
        try {
            System.out.println(""sum doubles = "" +
                    ThreadLocalRandom.current().doubles(STREAM_SIZE)
                            .parallel()
                            .sum());
        } finally {
            tlrDoublesTime = System.nanoTime() - tlrDoublesTime;
            System.out.printf(""tlrDoublesTime = %dms%n"", (tlrDoublesTime / 1_000_000));
        }
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Use SplittableRandom.

And I have submitted a PR here: https://github.com/openjdk/jdk/pull/12366

(Not in correct format though)

FREQUENCY : always


",,,,,,,,,,JDK-8309086,JDK-8313414,JDK-8314697,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8193209,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i307lv:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2023-02-01 12:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12366
Date: 2023-02-01 15:51:33 +0000;;;","2023-02-02 10:30;dukebot;Changeset: cf6b9eb8
Author:    Dr Heinz M. Kabutz <heinz@javaspecialists.eu>
Committer: Tagir F. Valeev <tvaleev@openjdk.org>
Date:      2023-02-02 18:28:47 +0000
URL:       https://git.openjdk.org/jdk/commit/cf6b9eb8c8cca4a54fbd97fb073eafc1b8835099
;;;","2023-02-02 10:52;smarks;I added the noreg-trivial label. Is that the right one?;;;","2023-02-02 11:09;tvaleev;Probably noreg-perf?

> Change is for a performance bug for which writing a regression test is infeasible; the bug should describe how to verify the fix.;;;","2023-02-02 11:45;smarks;Yeah I switched to noreg-perf. I think the regression test is infeasible because it would require setting an execution time threshold, which is always fraught on CI systems, especially when running in a virtualized cloud environment.;;;","2023-05-26 10:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1404
Date: 2023-05-26 17:34:39 +0000;;;","2023-05-26 10:49;shade;Fix Request (17u)

Fixes a simple yet dramatic regression in ThreadLocalRandom since JDK 17. Applies cleanly. Tests pass.;;;",,,,,,,,,,,,,,
C2: 8297933 broke type speculation in some cases,JDK-8301630,5093161,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2023-02-01 08:50,2023-03-28 01:14,2023-10-01 09:56,2023-03-01 01:37,21,,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,performance,regression,,,,,,,,,,"While merging 8297933 in the valhalla, a test there failed because 8297933 broke type speculation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297933,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i307mz:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-02 00:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12368
Date: 2023-02-01 16:55:01 +0000;;;","2023-02-02 00:47;chagedorn;ILW = Possible performance loss due to broken type speculation, medium?, no workaround = MMH = P3;;;","2023-03-01 01:37;dukebot;Changeset: 6b07243f
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-03-01 09:36:22 +0000
URL:       https://git.openjdk.org/jdk/commit/6b07243f5671f148166f027796f620bad9b38f73
;;;",,,,,,,,,,,,,,,,,,
RISC-V: c2 fix pipeline class for several instructions,JDK-8301628,5093158,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gcao,gcao,gcao,2023-02-01 08:06,2023-07-09 19:26,2023-10-01 09:56,2023-02-05 18:30,21,,,,,,,21,hotspot,,0,c2,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,"On RISC-V, several C2 instructions can use more accurate ins_pipe, eg.:
```
instruct regI_not_reg(iRegINoSp dst, iRegI src1, immI_M1 m1) %{
  match(Set dst (XorI src1 m1));
  ins_cost(ALU_COST);
  format %{ ""xori  $dst, $src1, -1\t#@regI_not_reg"" %}

  ins_encode %{
    __ xori(as_Register($dst$$reg), as_Register($src1$$reg), -1);
  %}

  ins_pipe(ialu_reg);
%}
```

We can use the more accurate pipe_class `ialu_reg_imm` instead of `ialu_reg`.",,,,,,,,,,JDK-8311750,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,,"0|i307mb:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-01 17:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12379
Date: 2023-02-02 01:46:05 +0000;;;","2023-02-05 18:30;dukebot;Changeset: 8507db15
Author:    Gui Cao <gcao@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2023-02-06 02:28:53 +0000
URL:       https://git.openjdk.org/jdk/commit/8507db1567e3a524238f5145ed08fd1d80a2a2b2
;;;","2023-05-22 20:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/59
Date: 2023-05-23 03:15:52 +0000;;;","2023-06-19 20:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,
[8u] some shell tests are passed but have unexpected operator errors,JDK-8301620,5093137,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aoqi,aoqi,aoqi,2023-02-01 06:09,2023-02-14 19:37,2023-10-01 09:56,2023-02-08 01:29,8,,,,,,,openjdk8u372,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,sustaining,,,,,,,,,,,,,"Some .sh tests are passed on Linux (with dash, like Ubuntu), but ""[: ... unexpected operator"" errors could be found when ""-verbose:all"" is used. 

For example:
```
TEST: runtime/jsig/Test8017498.sh
TEST JDK: /home/aoqi/work/theaoqi/jdk8u-dev/build/linux-x86_64-normal-server-release/images/j2sdk-image

ACTION: shell -- Failed. Execution failed: exit code 2
REASON: User specified action: run shell/timeout=30 Test8017498.sh 
TIME:   0.108 seconds
messages:
command: shell Test8017498.sh
reason: User specified action: run shell/timeout=30 Test8017498.sh 
elapsed time (seconds): 0.108
STDOUT:
TESTSRC=/home/aoqi/work/theaoqi/jdk8u-dev/hotspot/test/runtime/jsig
TESTJAVA=/home/aoqi/work/theaoqi/jdk8u-dev/build/linux-x86_64-normal-server-release/images/j2sdk-image
COMPILEJAVA=/home/aoqi/work/theaoqi/jdk8u-dev/build/linux-x86_64-normal-server-release/images/j2sdk-image
TESTCLASSES=/home/aoqi/tmp/JTwork/classes/runtime/jsig
NULL =/dev/null
PS =:
FS =/
RM =/bin/rm
CP =/bin/cp
MV =/bin/mv
CLASSPATH =.:/home/aoqi/tmp/JTwork/classes/runtime/jsig:
THIS_DIR=.
VM_TYPE=server
VM_BITS=64
VM_OS=linux
VM_CPU=amd64
Testing on Linux
STDERR:
openjdk version ""1.8.0_372-internal""
OpenJDK Runtime Environment (build 1.8.0_372-internal-aoqi_2023_02_01_11_52-b00)
OpenJDK 64-Bit Server VM (build 25.372-b00, mixed mode)
/home/aoqi/work/theaoqi/jdk8u-dev/hotspot/test/runtime/jsig/Test8017498.sh: 50: [: x/usr/bin/gcc: unexpected operator
rerun:
cd /home/aoqi/tmp/JTwork/scratch && \
HOME=/home/aoqi \
LANG=zh_CN.UTF-8 \
PATH=/bin:/usr/bin:/usr/sbin \
TESTFILE=/home/aoqi/work/theaoqi/jdk8u-dev/hotspot/test/runtime/jsig/Test8017498.sh \
TESTSRC=/home/aoqi/work/theaoqi/jdk8u-dev/hotspot/test/runtime/jsig \
TESTSRCPATH=/home/aoqi/work/theaoqi/jdk8u-dev/hotspot/test/runtime/jsig \
TESTCLASSES=/home/aoqi/tmp/JTwork/classes/runtime/jsig \
TESTCLASSPATH=/home/aoqi/tmp/JTwork/classes/runtime/jsig \
COMPILEJAVA=/home/aoqi/work/theaoqi/jdk8u-dev/build/linux-x86_64-normal-server-release/images/j2sdk-image \
TESTJAVA=/home/aoqi/work/theaoqi/jdk8u-dev/build/linux-x86_64-normal-server-release/images/j2sdk-image \
TESTVMOPTS= \
```

This issue is only found in jdk8u.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299804,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i307hn:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-02-01 06:17;aoqi;I just found JDK-8299804 was doing the same fix. I think these three tests also need to be fixed:

 hotspot/test/runtime/6929067/Test6929067.sh
 hotspot/test/runtime/jsig/Test8017498.sh
 jdk/test/jdk/tools/launcher/JliLaunchTest.sh

I will check if there are more omitted tests.;;;","2023-02-01 09:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/260
Date: 2023-02-01 17:21:23 +0000;;;","2023-02-02 05:24;aoqi;Fix request [8u]

This is an addition to JDK-8299804. Just test modification, no risk. Reviewed by Severin Gehwolf.;;;","2023-02-08 01:29;dukebot;Changeset: fbaabf36
Author:    Ao Qi <aoqi@openjdk.org>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-02-08 09:27:46 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/fbaabf366e48edfd7e2749555544f6ea19f70b03
;;;","2023-02-14 19:37;dukebot;Changeset: fbaabf36
Author:    Ao Qi <aoqi@openjdk.org>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-02-08 09:27:46 +0000
URL:       https://git.openjdk.org/jdk8u/commit/fbaabf366e48edfd7e2749555544f6ea19f70b03
;;;",,,,,,,,,,,,,,,,
Compare elements and type mirrors properly,JDK-8301618,5093135,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-02-01 05:49,2023-02-10 08:35,2023-10-01 09:56,2023-02-01 15:55,21,,,,,,,21,tools,,0,noreg-hard,,,,,,,,,,,,,,,Use `equals` to compare elements and `isSameType` to compare type mirrors.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302222,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i307h7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-02-01 09:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12369
Date: 2023-02-01 17:46:00 +0000;;;","2023-02-01 15:55;dukebot;Changeset: 8d6e8a47
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-02-01 23:54:22 +0000
URL:       https://git.openjdk.org/jdk/commit/8d6e8a47c94ad72d380b72b421d9a27d59e6ce33
;;;",,,,,,,,,,,,,,,,,,,
Drag & maximize to another monitor places window incorrectly (Windows),JDK-8301616,5093133,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ngubarkov,ngubarkov,ngubarkov,2023-02-01 05:37,2023-04-10 10:25,2023-10-01 09:56,2023-04-05 06:43,11,17,19,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,"Windows 11 allows to drag window to the top of the screen to maximize it.
If you drag & maximize window to a monitor with different DPI, window is placed with offset, caption and client area are visually misaligned.

First reported here: https://youtrack.jetbrains.com/issue/JBR-5238",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249164,,,,,"2023-02-01 05:38;ngubarkov;JDK-8301616.png;https://bugs.openjdk.org/secure/attachment/102495/JDK-8301616.png",,,,,,,,,,,,,,,,,,windows_10,,,,,,"0|i307gr:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-02-01 05:39;ngubarkov;Caused by `AwtWindow::CheckWindowDPIChange()` hack;;;","2023-02-01 08:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12367
Date: 2023-02-01 16:17:02 +0000;;;","2023-04-05 06:43;dukebot;Changeset: f69d88c5
Author:    Nikita Gubarkov <nikita.gubarkov@jetbrains.com>
Committer: Alexey Ushakov <avu@openjdk.org>
Date:      2023-04-05 13:41:51 +0000
URL:       https://git.openjdk.org/jdk/commit/f69d88c57f98472c483a7dcedcfd5afb0dbd3930
;;;",,,,,,,,,,,,,,,,,,
"JFileChooser file chooser details view ""size"" label cut off in Metal Look&Feel",JDK-8301606,5092287,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tr,webbuggrp,webbuggrp,2023-01-23 16:19,2023-08-10 09:13,2023-10-01 09:56,2023-08-03 09:11,11,17,19,20,8,,,22,client-libs,,0,dcspn,reproducer-yes,sn_147,sn_148,sn_149,webbug,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
java version ""19.0.2"" 2023-01-17
Java(TM) SE Runtime Environment (build 19.0.2+7-44)
Java HotSpot(TM) 64-Bit Server VM (build 19.0.2+7-44, mixed mode, sharing)

Windows 10, 225% screen scale

A DESCRIPTION OF THE PROBLEM :
According to 6371777 it is intentional that the ""Size"" label on the Metal JFileChooser with ""details"" view is right aligned, but on my system the right side is slightly chopped off when screen scale is 225% (I have not tried other scales). Image is available at <link>

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Set screen scale on Windows to 225%.
Run code.
Select details view on file chooser.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expect some margin to the right of the ""e"" in ""Size"".
ACTUAL -
""e"" on ""Size"" label is partly chopped off.

---------- BEGIN SOURCE ----------
import javax.swing.*;

public class JFileChooserBug19 {
   public static void main(String args[]) {
      SwingUtilities.invokeLater(()->new JFileChooser().showSaveDialog(null));
   }
}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-01 03:15;pnarayanaswa;JFileChooserBug19.java;https://bugs.openjdk.org/secure/attachment/102490/JFileChooserBug19.java","2023-02-01 21:51;tr;Scalling225.png;https://bugs.openjdk.org/secure/attachment/102500/Scalling225.png","2023-02-01 03:16;pnarayanaswa;capture.png;https://bugs.openjdk.org/secure/attachment/102491/capture.png","2023-02-01 22:08;psadhukhan;native.png;https://bugs.openjdk.org/secure/attachment/102501/native.png",,,,,,generic,,,,,,,,,windows_10,,,,,,"0|i3028r:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-02-01 03:14;pnarayanaswa;Checked with attached testcase in Windows 10, at display scale or 175%, Issue is observed<attached screenshot>
Test Result
=========
jdk8
jdk8u361: Fail
jdk11: Fail
jdk11.0.18: Fail
jdk17.0.6: Fail
jdk19.0.2: Fail
jdk20ea33: Fail
;;;","2023-02-01 21:52;tr;""e"" on ""Size"" label is partially over the margin. Attached 225% scaling snap.;;;","2023-02-01 21:56;psadhukhan;Probably we need to ""left align"" Size label same as other labels;;;","2023-02-01 22:02;tr;Its left aligned because of the file size list which is also left aligned right?  If we change the alignment of Size label then won't there be a mismatch?;;;","2023-02-01 22:08;psadhukhan;In native windows filechooser (attached screenshot), it's left aligned although the values are right aligned so we can do the same, I presume;;;","2023-02-01 22:12;tr;Yeah, sure then I will work on it.;;;","2023-06-14 02:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14464
Date: 2023-06-14 09:17:06 +0000;;;","2023-08-03 09:11;dukebot;Changeset: bb3aac60
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-08-03 16:09:47 +0000
URL:       https://git.openjdk.org/jdk/commit/bb3aac606397481cb4832cb75ec0a549d079ab13
;;;",,,,,,,,,,,,,
Error recovery does not clear returnResult,JDK-8301580,5093096,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlahoda,jlahoda,jlahoda,2023-02-01 00:48,2023-02-13 11:04,2023-10-01 09:56,2023-02-06 04:27,19,20,21,,,,,21,tools,,0,,,,,,,,,,,,,,,,"Consider code like:
---
class C {
    void m
    {
        return;
    }
}
---

And compile it like:
---
 $ javac -XDshould-stop.at=FLOW -XDdev /tmp/C.java 
/tmp/C.java:3: error: '(' expected
    {
    ^
1 error
An exception has occurred in the compiler (19.0.1-internal). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError
        at jdk.compiler/com.sun.tools.javac.util.Assert.error(Assert.java:155)
        at jdk.compiler/com.sun.tools.javac.util.Assert.check(Assert.java:46)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.clearPendingExits(Flow.java:589)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.visitClassDef(Flow.java:544)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:810)
        at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$BaseAnalyzer.scan(Flow.java:447)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.analyzeTree(Flow.java:1082)
        at jdk.compiler/com.sun.tools.javac.comp.Flow$AliveAnalyzer.analyzeTree(Flow.java:1074)
        at jdk.compiler/com.sun.tools.javac.comp.Flow.analyzeTree(Flow.java:223)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.flow(JavaCompiler.java:1377)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.flow(JavaCompiler.java:1351)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)
printing javac parameters to: /home/jlahoda/src/jdk/jdk/javac.20230201_094507.args
---

The reason is that the returnResult is set in Attr.visitErroneous, but not cleared, and so an error is not produced for the return, leading to the assert failure in Flow.

This then may lead to various JShell problems, as JShell runs with -XDshould-stop.at=FLOW.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3078j:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-02-01 04:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12361
Date: 2023-02-01 12:00:58 +0000;;;","2023-02-06 04:27;dukebot;Changeset: 522fa132
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-02-06 12:25:06 +0000
URL:       https://git.openjdk.org/jdk/commit/522fa1327422e49eaa172d43185b3d85b2561036
;;;",,,,,,,,,,,,,,,,,,,
Test  runtime/jni/nativeStack/ needs to detach the native thread,JDK-8301570,5093084,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dholmes,dholmes,dholmes,2023-01-31 18:17,2023-06-14 00:35,2023-10-01 09:56,2023-01-31 23:58,21,,,,,,,21,hotspot,,0,jdk11u-sap-interest,noreg-self,,,,,,,,,,,,,,It is good practice to always detach a native thread before allowing it to terminate. Failing to do so can cause a problems on some systems due to the way we accommodate auto-detaching via a destructor - ref JDK-8033696,,,,,,,,,,JDK-8301651,JDK-8301917,JDK-8301658,,,,,,,,,,,,,,,,,,,,,JDK-8301144,,,,JDK-8033696,,,,,,,JDK-8301144,JDK-8295974,,,,,,,,,,,,,,,,,,,b04,21,,,,,,,,"0|i3075v:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-31 18:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12357
Date: 2023-02-01 02:47:48 +0000;;;","2023-01-31 23:58;dukebot;Changeset: d269ebba
Author:    David Holmes <dholmes@openjdk.org>
Date:      2023-02-01 07:56:21 +0000
URL:       https://git.openjdk.org/jdk/commit/d269ebbad2286b57802a075091b0cc32110dfcc7
;;;",,,,,,,,,,,,,,,,,,,
jmod list option and jimage list --help not interpreted correctly on turkish locale ,JDK-8301569,5093081,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,yyang,yyang,2023-01-31 18:03,2023-07-12 13:38,2023-10-01 09:56,2023-06-28 18:36,,,,,,,,22,tools,,0,,,,,,,,,,,,,,,,"Create on behalf of glavo<zjx001202@gmail.com>
----
When the default Locale is tr, the jmod and jimage commands have the following problems:

- The jmod command does not correctly recognize the list mode typed in lowercase;
- The jimage command cannot obtain the help information of the list mode.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30757:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3da653bd,,,,,,,,,"2023-05-08 07:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12281
Date: 2023-01-29 15:37:28 +0000;;;","2023-06-28 18:36;dukebot;Changeset: 6f58ab2b
Author:    Glavo <zjx001202@gmail.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2023-06-29 01:34:26 +0000
URL:       https://git.openjdk.org/jdk/commit/6f58ab2bb9e0f02752628daa70e332cd2248e446
;;;",,,,,,,,,,,,,,,,,,,
The test/jdk/java/awt/AppContext/ApplicationThreadsStop/java.policy is unused,JDK-8301567,5093078,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2023-01-31 16:53,2023-02-15 23:16,2023-10-01 09:56,2023-02-08 11:57,20,21,,,,,,21,client-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,The test ApplicationThreadsStop.java was removed by the JDK-8289616 but the related java.policy was not deleted.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i3074j:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-02-01 22:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12356
Date: 2023-02-01 00:54:53 +0000;;;","2023-02-08 11:57;dukebot;Changeset: 631a2790
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-02-08 19:55:12 +0000
URL:       https://git.openjdk.org/jdk/commit/631a2790e5d5b3eac5102dbc42e57feb94bfc23d
;;;",,,,,,,,,,,,,,,,,,,
[8u] Enable additional linux build testing in GitHub,JDK-8301550,5093025,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zzambers,zzambers,zzambers,2023-01-31 06:32,2023-02-07 08:04,2023-10-01 09:56,2023-02-01 08:20,8,,,,,,,openjdk8u372,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,,,,,"Parts of testing in GitHub are currently still disabled as they needed changes to work with JDK 8.

This change does fixes for JDK 8 and enables them. Enabled tests include building hotspot in different configurations and also cross building for other architectures.

Notes on modifications:
- optimized jvm-variant does not exist on JDK 8, client variant tested instead
- added support for multilib testing to linux additional (to existing native and cross) as client and minimal variants are only for 32-bits on JDK 8
- arm and s390x are only available as zero variant on JDK 8 so they use this variant (added required libffi to buildroot)
- JDK 8 does not support --with-build-jdk configuration option (not to be confused with boot jdk), so it was removed as well as code preparing build jdk
- dropped dependence of linux additional on linux x64 build (was only needed to get build jdk)
- In case of JDK 8, a bit more persuasion was required to successfully configure cross build. Explicit configuration of libs was required. Also  *FLAGS env. variables with sysroot had to be set for configuration to succeed, but they must not remain set for build, otherwise it fails.

Testing:
All test passed in Github CI.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301631,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i306sr:",9223372036854775807,b02,,,,,,,,,,,"2023-01-31 06:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/254
Date: 2023-01-31 14:32:51 +0000;;;","2023-02-01 03:33;zzambers;Fix request (8u):

Enable additional linux build testing in GitHub
Only affects testing, passed GitHub CI.;;;","2023-02-01 08:20;dukebot;Changeset: 57bc2093
Author:    Zdenek Zambersky <zzambers@openjdk.org>
Date:      2023-02-01 16:18:45 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/57bc2093d3a0fb1c257a0b45b1076a4b32349f74
;;;","2023-02-07 08:04;dukebot;Changeset: 57bc2093
Author:    Zdenek Zambersky <zzambers@openjdk.org>
Date:      2023-02-01 16:18:45 +0000
URL:       https://git.openjdk.org/jdk8u/commit/57bc2093d3a0fb1c257a0b45b1076a4b32349f74
;;;",,,,,,,,,,,,,,,,,
[Lilliput] Fix aarch64 interpreter load_nklass(),JDK-8301545,5093020,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rkennke,rkennke,rkennke,2023-01-31 05:52,2023-01-31 11:41,2023-10-01 09:56,2023-01-31 11:41,repo-lilliput,,,,,,,repo-lilliput,hotspot,,0,,,,,,,,,,,,,,,,In JDK-8300527 I made a mistake in a last-minute change and GHA hasn't caught it: I got a condition wrong.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300527,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,,"0|i306rn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,"2023-01-31 06:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/68
Date: 2023-01-31 13:54:52 +0000;;;",,,,,,,,,,,,,,,,,,,,
C2: java.lang.StringUTF16::indexOfChar intrinsic called with negative character argument,JDK-8301491,5092964,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfenacci,enikitin,enikitin,2023-01-31 03:07,2023-06-05 09:37,2023-10-01 09:56,2023-02-17 01:11,11,17,19,20,21,,,21,hotspot,,0,c2,fuzzgen,intrinsic,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-21,,,,,"Please excuse for a messy fuzzing test.

The test code is attached, along with escaped UTF-8 sample outputs.
The interpreted code was executed like this:

${JAVA_HOME}/bin/java -XX:-PrintWarnings -Xint -Dstdout.encoding=UTF-8 Test_245

...while for compiled I used the following:

${JAVA_HOME}/bin/java -XX:-PrintWarnings -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:+IgnoreUnrecognizedVMOptions -XX:StressSeed=2110910222 -XX:+StressIGVN -XX:+StressCCP -XX:+StressGCM -XX:+StressLCM -XX:-TieredCompilation -Xbatch -Dstdout.encoding=UTF-8 Test_245

The bug was reproduced against the OpenJDK version from 2023-01-29, with the following git HEAD:
6475501a012",,,,,,,,,,JDK-8305141,JDK-8305554,JDK-8306154,JDK-8307033,JDK-8306993,JDK-8309488,JDK-8305126,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-02-02 01:47;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/102508/Reduced.java","2023-01-31 03:07;enikitin;Test_245.java;https://bugs.openjdk.org/secure/attachment/102467/Test_245.java","2023-01-31 03:07;enikitin;Test_245.xcomp.out;https://bugs.openjdk.org/secure/attachment/102469/Test_245.xcomp.out","2023-01-31 03:07;enikitin;Test_245.xint.out;https://bugs.openjdk.org/secure/attachment/102468/Test_245.xint.out",,,,,,,,,,,,,,,,,,,,,"0|i306f7:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-31 08:24;chagedorn;ILW = Wrong execution of C2 compiled code, single fuzzgen test, -XX:DisableIntrinsic=_indexOfU_char = HLM = P3;;;","2023-01-31 10:01;chagedorn;I've attached a reduced test case Reduced.java:

$ java -Xint Reduced.java > int.log
$ java  -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,java.lang.StringUTF*::* -Xcomp -XX:+StressIGVN -XX:-TieredCompilation -XX:StressSeed=2110910222 Reduced.java > c2.log
$ diff int.log c2.log

Output of diff:
1c1
< int = -1
---
> int = 7

It looks like there is a problem with the java.lang.StringUTF16::indexOfChar C2 intrinsic with negative numbers close to Integer.MIN_VALUE.;;;","2023-02-01 03:05;thartmann;This is most likely a regression from Compact Strings (JDK-8054307) in JDK 9.;;;","2023-02-13 01:14;dfenacci;The base issue seems to be the fact that java.lang.StringUTF16::indexOfChar is called for characters with int value < 0 but the intrinsified functions C2_MacroAssembler::string_indexof_char create code that expects the input character to be >= 0 (tested for x64/avx2 and aarch64).;;;","2023-02-16 00:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12538
Date: 2023-02-13 16:17:50 +0000;;;","2023-02-17 01:11;dukebot;Changeset: 47ca5773
Author:    Damon Fenacci <damon.fenacci@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-02-17 09:10:20 +0000
URL:       https://git.openjdk.org/jdk/commit/47ca5773a54743244a9b28f877246d260b90a408
;;;","2023-03-29 04:47;thartmann;Fix Request (JDK 20u)
Resolves an issue with incorrect execution of C2 compiled code. The fix is low risk, was already backported to Oracle JDK 17u / 11u and tested in the JDK 21 and 17u / 11u CIs. The backport applies cleanly.;;;","2023-03-29 04:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/42
Date: 2023-03-29 11:47:21 +0000;;;","2023-04-26 06:59;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
A rather simple change, but with the typical C2 risk. Clear repro-case.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-04-26 07:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1299
Date: 2023-04-26 13:59:30 +0000;;;","2023-06-02 08:58;goetz;
Fix request [11u]

I backport this for parity with 11.0.20-oracle.
A rather simple change, but with the typical C2 risk. Clear repro-case. 
I had to do simple resolves.
Test passes but also passes without the fix. SAP nightly testing passed.;;;","2023-06-02 09:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1927
Date: 2023-06-02 15:56:24 +0000;;;",,,,,,,,,
C1: ShortLoopOptimizer might lift instructions before their inputs,JDK-8301489,5092439,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dskantz,webbuggrp,webbuggrp,2023-01-25 02:17,2023-09-25 05:11,2023-10-01 09:56,2023-06-27 00:08,11,17,20,21,8u361,,,22,hotspot,,0,additional-information-received,amazon-interest,c1,dcs-bv-crash-conf,dcsswa,jdk21-defer-request,jdk21-defer-yes,jdk21u-fix-request,oracle-triage-21,reproducer-yes,webbug,,,,,"A DESCRIPTION OF THE PROBLEM :
The attached code, which is just standard Java code, causes a JVM crash.
It can be reproduced with the code below.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the attached code in ""TestBug"" class.
This code loops 10000 times, calling the doSomething() method each time.
The JVM will normally crash after less than 5000 iterations.
Most of the code needed in the doSomething() method needs to be present in order to reproduce the bug. If the if or try-catch or while is removed, the bug will not occur.
I retained the code inside the loop in order that the loop is not empty, to avoid unnecessary optimisations.

ACTUAL -
JVM crashes after less than 5000 iterations.
If I increase the value of the requiredLength argument (e.g. to 4000), then the crash occurs after less iterations.

The content of hs_err_pid16440.log is pasted into the ""Confidential Field (hs_err file)"" field.

The following was reported:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c1_LIRAssembler.cpp:867), pid=16440, tid=0x000011dc
#  Error: ShouldNotReachHere()
#
# JRE version: Java(TM) SE Runtime Environment (8.0) (build 1.8.0_361-b09)
# Java VM: Java HotSpot(TM) Client VM (25.361-b09 mixed mode, sharing windows-x86 )
# Failed to write core dump. Minidumps are not enabled by default on client versions of Windows
#
# An error report file with more information is saved as:
# C:\<filepath>\hs_err_pid16440.log
#
# Compiler replay data is saved as:
# C:\<filepath>\replay_pid16440.log
#
# If you would like to submit a bug report, please visit:
# http://bugreport.java.com/bugreport/crash.jsp
#

---------- BEGIN SOURCE ----------
public class TestBug {
    private static int index = 0;

    public static void main(String[] args) {
        for (int i = 0; i < 10000; i++) {
            doSomething(new byte[] { }, 4);
        }
    }

    private static void doSomething(byte[] source, int requiredLength) {
        System.out.println(index++);

        if (requiredLength < 0) {
            requiredLength = 0;
        }

        boolean [] returnArray = new boolean[requiredLength];

        int index = 0;
        try {
            for (byte b : source) {
                if (index == returnArray.length) {
                    break;
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException e) {
            // ignore
        }

        while (index < returnArray.length) {
            returnArray[index++] = false;
        }
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
If I replace the for-each loop with a standard indexed for loop, the issue does not occur.

",,,,,,,,,,JDK-8316407,JDK-8316487,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-04-21 08:30;dskantz;CFGAfterGenerationOfHIR.PNG;https://bugs.openjdk.org/secure/attachment/103514/CFGAfterGenerationOfHIR.PNG","2023-04-21 08:30;dskantz;CFGBeforeRangeCheckElimination.PNG;https://bugs.openjdk.org/secure/attachment/103515/CFGBeforeRangeCheckElimination.PNG","2023-01-31 00:13;sswsharm;TestBug.java;https://bugs.openjdk.org/secure/attachment/102458/TestBug.java","2023-02-02 00:51;sswsharm;replay_pid3832.log;https://bugs.openjdk.org/secure/attachment/102506/replay_pid3832.log","2023-03-22 12:56;dskantz;x64.cfg;https://bugs.openjdk.org/secure/attachment/103095/x64.cfg","2023-03-22 12:56;dskantz;x86.cfg;https://bugs.openjdk.org/secure/attachment/103096/x86.cfg",,,,x86,,,,,,,,,generic,,,,,,"0|i3036j:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-31 02:56;sswsharm;
No crash is observed on JDK 8u361( 64 bit) on Windows OS( 64 bit)

Crash occurred when 32 bit JDK is being used with 64 bit OS:

---------------  S Y S T E M  ---------------

OS: Windows 10 , 64 bit Build 19041 (10.0.19041.2364)

CPU:total 12 (initial active 12) (6 cores per cpu, 2 threads per core) family 6 model 165 stepping 2, cmov, cx8, fxsr, mmx, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, avx, avx2, aes, clmul, erms, 3dnowpref, lzcnt, ht, tsc, tscinvbit, bmi1, bmi2, adx

Memory: 4k page, physical 33267032k(14208972k free), swap 66821464k(40224928k free)

vm_info: Java HotSpot(TM) Client VM (25.361-b09) for windows-x86 JRE (1.8.0_361-b09), built on Jan  9 2023 08:42:19 by ""java_re"" with MS VC++ 15.9 (VS2017)
-----------------------------------------------------------------------------------------------------

;;;","2023-02-01 19:45;pnarayanaswa;Additional Information from submitter:
=============================
Yes, I'm using 32-bit JDK on 64-bit Windows.
I understand that it is fully valid to run 32-bit JDK on 64-bit Windows - e.g. this is described at https://www.java.com/en/download/help/java_win64bit.html#Java%20for%2032-bit.
So it seems to me that this is *an* issue, which would ideally be fixed.;;;","2023-02-02 00:53;sswsharm;
ILW = issue in GA build, reproducible with single test , no workaround available =  MLM = P4
;;;","2023-03-26 22:43;thartmann;I don't recall any other differences between client and server VM, assuming you already looked at JDK-8166002.

Maybe [~iveresov] remembers more.;;;","2023-06-15 04:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14492
Date: 2023-06-15 11:13:02 +0000;;;","2023-06-27 00:08;dukebot;Changeset: 73d7aa1d
Author:    Daniel Skantz <daniel.skantz@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-06-27 07:05:48 +0000
URL:       https://git.openjdk.org/jdk/commit/73d7aa1d2cb037fed69263a1990258866333664d
;;;","2023-07-07 05:56;thartmann;Deferral Request (JDK 21):
This is a very old issue with a non-trivial fix. We should give it some more bake time in JDK 22 before backporting.;;;","2023-09-22 06:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/193
Date: 2023-09-22 13:21:18 +0000;;;","2023-09-23 06:23;goetz;Fix request [21u]

I backport this for parity with 17.0.10-oracle. I assume the deferral was meant for 21, not 21u.
Smallish compiler change, acceptable risk. Also, it is backported to 17.0.10-oracle, where it will have much more exposure than in 21.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-09-24 22:30;thartmann;> I assume the deferral was meant for 21

Correct.;;;",,,,,,,,,,,
Code in DatagramSocket still refers to resolved JDK-8237352,JDK-8301463,5092934,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,michaelm,thartmann,thartmann,2023-01-31 00:59,2023-02-22 12:30,2023-10-01 09:56,2023-02-15 02:21,17,20,21,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"https://github.com/openjdk/jdk/blob/d98a323a8b972c17a066c597a81b164681ad5589/src/java.base/share/classes/java/net/DatagramSocket.java#L1353

https://github.com/openjdk/jdk/blob/d98a323a8b972c17a066c597a81b164681ad5589/src/java.base/share/classes/java/net/DatagramSocket.java#L1396",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8237352,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3068j:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-02-09 03:51;michaelm;Comment can be removed for 21;;;","2023-02-13 01:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12526
Date: 2023-02-13 09:50:58 +0000;;;","2023-02-15 02:21;dukebot;Changeset: 52388179
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2023-02-15 10:19:49 +0000
URL:       https://git.openjdk.org/jdk/commit/52388179e65d4703ec33569dcc7c1351c57e6056
;;;",,,,,,,,,,,,,,,,,,
Convert Permission files to use lambda after JDK-8076596,JDK-8301462,5092933,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,thartmann,thartmann,2023-01-31 00:50,2023-04-13 10:06,2023-10-01 09:56,2023-02-08 11:08,11,17,20,21,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,"https://github.com/openjdk/jdk/blob/d98a323a8b972c17a066c597a81b164681ad5589/src/java.base/share/classes/java/net/SocketPermission.java#L1387

https://github.com/openjdk/jdk/blob/d98a323a8b972c17a066c597a81b164681ad5589/src/java.security.jgss/share/classes/javax/security/auth/kerberos/ServicePermission.java#L571

https://github.com/openjdk/jdk/blob/d98a323a8b972c17a066c597a81b164681ad5589/src/java.base/share/classes/java/security/UnresolvedPermissionCollection.java#L83

https://github.com/openjdk/jdk/blob/d98a323a8b972c17a066c597a81b164681ad5589/src/java.base/share/classes/java/util/PropertyPermission.java#L473",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303594,JDK-8076596,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3068b:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-02-07 14:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12463
Date: 2023-02-07 22:25:43 +0000;;;","2023-02-08 11:08;dukebot;Changeset: 10dd98d0
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-02-08 19:06:41 +0000
URL:       https://git.openjdk.org/jdk/commit/10dd98d0dd6aeb6f214999590ed19707a203f591
;;;",,,,,,,,,,,,,,,,,,,
Code in SendPortZero.java is uncommented even after JDK-8236852 was fixed,JDK-8301457,5092928,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,michaelm,thartmann,thartmann,2023-01-31 00:40,2023-07-31 12:13,2023-10-01 09:56,2023-07-24 07:14,17,20,21,,,,,22,core-libs,,0,amazon-interest,noreg-self,,,,,,,,,,,,,,"The following code still refers to JDK-8236852 which is resolved since JDK 15:

https://github.com/openjdk/jdk/blob/d98a323a8b972c17a066c597a81b164681ad5589/test/jdk/java/net/MulticastSocket/SendPortZero.java#L80

https://github.com/openjdk/jdk/blob/d98a323a8b972c17a066c597a81b164681ad5589/test/jdk/java/net/DatagramSocket/SendPortZero.java#L81",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8236852,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30677:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-02-09 03:52;michaelm;Will check for 21;;;","2023-07-20 06:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14952
Date: 2023-07-20 10:50:17 +0000;;;","2023-07-24 07:14;dukebot;Changeset: 298dda4c
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2023-07-24 14:13:44 +0000
URL:       https://git.openjdk.org/jdk/commit/298dda4c985ddda84e264aff86ea45c849bb171c
;;;",,,,,,,,,,,,,,,,,,
comments in TestTypeAnnotations still refer to resolved JDK-8068737,JDK-8301455,5092926,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vromero,thartmann,thartmann,2023-01-31 00:35,2023-09-18 23:08,2023-10-01 09:56,2023-05-01 13:31,11,17,20,21,,,,21,tools,,0,noreg-self,,,,,,,,,,,,,,,"JDK-8068737 got resolved in JDK 9 but comments still refer to it:

// When JDK-8068737 is fixed, we should change the order

https://github.com/openjdk/jdk/blob/d98a323a8b972c17a066c597a81b164681ad5589/test/langtools/jdk/javadoc/doclet/testTypeAnnotations/TestTypeAnnotations.java#L140

https://github.com/openjdk/jdk/blob/d98a323a8b972c17a066c597a81b164681ad5589/test/langtools/jdk/javadoc/doclet/testTypeAnnotations/TestTypeAnnotations.java#L176",,,,,,,,,,JDK-8316327,JDK-8316480,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8068737,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3066r:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-04-22 14:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13600
Date: 2023-04-22 21:15:27 +0000;;;","2023-05-01 13:31;dukebot;Changeset: 35e75c13
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2023-05-01 20:28:50 +0000
URL:       https://git.openjdk.org/jdk/commit/35e75c131d7c1c2596022955c0f4c53dd3c7e448
;;;",,,,,,,,,,,,,,,,,,,
Clean broken comments from Windows code,JDK-8301443,5092914,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-01-30 22:23,2023-02-15 23:17,2023-10-01 09:56,2023-02-08 19:20,,,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,"Several comments are technically broken in Windows code, this is a change to clean up the broken comments that managed to slip past reviews",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301994,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30643:",9223372036854775807,b10,,,,,,,,,,,"2023-01-30 22:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12305
Date: 2023-01-31 06:28:21 +0000;;;","2023-02-08 19:20;dukebot;Changeset: 70f31501
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-02-09 03:19:42 +0000
URL:       https://git.openjdk.org/jdk/commit/70f3150166a758fe9fa14860588218ef41c2bff4
;;;",,,,,,,,,,,,,,,,,,,
os::print_location gets is_global_handle assert,JDK-8301402,5092870,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aboldtch,coleenp,coleenp,2023-01-30 14:43,2023-02-06 10:42,2023-10-01 09:56,2023-02-01 01:49,21,,,,,,,21,hotspot,,0,os,,,,,,,,,,,,,,,"The os::print_location() code is trying to figure out what the data is and gets an assert

    error_msg=error_msg@entry=0x1532167670d0 ""assert(!is_global_tagged(handle) || is_storage_handle(global_handles(), global_ptr(handle))) failed"", detail_fmt=detail_fmt@entry=0x15321667c15f ""invalid storage"")

It should just return false for this case and not get a secondary assert.

#12 0x0000153215b6a713 in JNIHandles::is_global_handle (handle=handle@entry=0x1532166997aa)
    at src/hotspot/share/runtime/jniHandles.cpp:245
#13 0x00001532160b6388 in os::print_location (st=st@entry=0x153193ffc310, x=23304868566954, verbose=verbose@entry=false)
    at src/hotspot/share/runtime/os.cpp:1155
#14 0x00001532160cead2 in os::print_register_info (st=0x153193ffc310, context=0x153216c204e0 <g_stored_assertion_context>)
--Type <RET> for more, q to quit, c to continue without paging--
    at src/hotspot/os_cpu/linux_x86/os_linux_x86.cpp:595
#15 0x000015321651ce4b in VMError::report (st=st@entry=0x153193ffc310, _verbose=_verbose@entry=true)
    at src/hotspot/share/utilities/vmError.cpp:867

Or ask a safer question.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299089,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i305ub:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-31 01:02;aboldtch;Problem is that JNIHandles::is_[weak_]global_handle assumes that the jobject handle is a valid handle. I restricted this because we now tagged up all different handle types. But I did not think of the print_location code which sends in none handles.

Either revert the handle check to always checking storage and ignore the tags. Or add another is_*_handle method which takes an void*/address and makes no assumptions, just checks the underlying storage, which can be used by print_location.

Looking at this JNIHandles::is_weak_global_handle seems more fragile as when it gets called from checked_jni_DeleteWeakGlobalRef we do not validate the storage at all. While for checked_jni_DeleteGlobalRef (which uses JNIHandles::is_global_handle) is validated with jniCheck::validate_object.

So maybe just always checking the storage is the proper solution even if we have contexts where just checking the tag is valid.;;;","2023-01-31 01:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12312
Date: 2023-01-31 09:27:50 +0000;;;","2023-02-01 01:49;dukebot;Changeset: ef0d0a70
Author:    Axel Boldt-Christmas <aboldtch@openjdk.org>
Date:      2023-02-01 09:47:15 +0000
URL:       https://git.openjdk.org/jdk/commit/ef0d0a7092df7b3ce098fb25860fb839fd34c944
;;;",,,,,,,,,,,,,,,,,,
"[11u, 17u] Bump jtreg to fix issue with build JDK 11.0.18",JDK-8301397,5092864,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,clanger,clanger,clanger,2023-01-30 13:21,2023-02-08 07:12,2023-10-01 09:56,2023-01-31 01:29,11,17,,,,,,17.0.7,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,The build of jtreg-6.1+2 fails with OpenJDK 11.0.18 due to an issue in its build system. This causes issues in the GitHub actions workflow as it uses 11.0.18 for building jtreg after the Jan/2023 CPU. The problem got fixed with CODETOOLS-7903418 and a new version jtreg-6.1+3 was tagged. We should update jtreg to the new tag to unbreak GHA.,,,,,,,,,,JDK-8301470,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i305sz:",9223372036854775807,b01,,,,,,,,,,,"2023-01-30 13:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1129
Date: 2023-01-30 21:24:44 +0000;;;","2023-01-30 13:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1700
Date: 2023-01-30 21:27:25 +0000;;;","2023-01-30 13:38;clanger;Fix request (11u, 17u):
Fix is necessary to unbreak GHA. I seek for quick approval, so I already labeled it although it's not yet reviewed. The change is trivial and should bear no risk.;;;","2023-01-31 01:29;dukebot;Changeset: 0e98d6a8
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-01-31 09:28:20 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/0e98d6a81a395741f992df97d98b4e07679951ea
;;;","2023-02-08 07:12;dukebot;Changeset: 0e98d6a8
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-01-31 09:28:20 +0000
URL:       https://git.openjdk.org/jdk17u/commit/0e98d6a81a395741f992df97d98b4e07679951ea
;;;",,,,,,,,,,,,,,,,
jdk/jfr/api/consumer/streaming/TestCrossProcessStreaming.java,JDK-8301380,5092844,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mgronlun,dcubed,dcubed,2023-01-30 10:19,2023-02-13 11:11,2023-10-01 09:56,2023-02-08 02:28,20,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,"The following test failed in my stress testing for jdk-20+33:

jdk/jfr/api/consumer/streaming/TestCrossProcessStreaming.java

Here's a snippet from the log file:

[Event-Producer] [15.752s][info][jfr,startup] Started recording 1. No limit specified, using maxsize=250MB as default.
[Event-Producer] [15.752s][info][jfr,startup]
[Event-Producer] [15.752s][info][jfr,startup] Use jcmd 15245 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
[Event-Producer] MAIN_STARTED
JFR repository: /private/var/folders/5g/66j5b5kn7fl10mkt696_lzhh00grqb/T/2023_01_29_05_41_30_15245
[Event-Producer] Events generated: 25000
[Event-Producer] Events generated: 8000
[Event-Producer] # To suppress the following error report, specify this argument
[Event-Producer] # after -XX: or in .hotspotrc:  SuppressErrorAt=/jfrThreadLocal.cpp:331
[Event-Producer] #
[Event-Producer] # A fatal error has been detected by the Java Runtime Environment: 
[Event-Producer] #
[Event-Producer] #  Internal Error (/System/Volumes/Data/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/open/src/hotspot/share/jfr/support/jfrThreadLocal.cpp:331), pid=15245, tid=40451
[Event-Producer] #  assert(other_thread_id != 0) failed: invariant
[Event-Producer] #
[Event-Producer] # JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2023-01-26-1529122.dcubed...)
[Event-Producer] # Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2023-01-26-1529122.dcubed..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
[Event-Producer] # Core dump will be written. Default location: ../core.15245
[Event-Producer] #
[Event-Producer] # JFR recording file will be written. Location: /System/Volumes/Data/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/build/macosx-aarch64-normal-server-slowdebug/test-support/jtreg_open_test_jdk_jdk_svc/scratch/2/hs_err_pid15245.jfr
[Event-Producer] #
[Event-Producer] # An error report file with more information is saved as:
[Event-Producer] # /System/Volumes/Data/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/build/macosx-aarch64-normal-server-slowdebug/test-support/jtreg_open_test_jdk_jdk_svc/scratch/2/hs_err_pid15245.log
[Event-Producer] [thread 26883 also had an error]
[Event-Producer] #
[Event-Producer] # If you would like to submit a bug report, please visit:
[Event-Producer] #   https://bugreport.java.com/bugreport/crash.jsp
[Event-Producer] #
----------System.err:(12/707)----------

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000000014a09f210):  JavaThread ""JFR Periodic Tasks"" daemon [_thread_in_vm, id=40451, stack(0x000000016dc6c000,0x000000016de6f000)] _threads_hazard_ptr=0x0000000159e7fad0, _nested_threads_hazard_ptr_cnt=0

Stack: [0x000000016dc6c000,0x000000016de6f000],  sp=0x000000016de6df20,  free space=2055k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x107c00c]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x990  (jfrThreadLocal.cpp:331)
V  [libjvm.dylib+0x107c65c]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x68
V  [libjvm.dylib+0x58b1b8]  report_vm_error(char const*, int, char const*, char const*, ...)+0x88
V  [libjvm.dylib+0x97ab14]  JfrThreadLocal::impersonate(Thread const*, unsigned long long)+0x68
V  [libjvm.dylib+0x975280]  JfrThreadCPULoadEvent::send_events()+0x14c
V  [libjvm.dylib+0x941d0c]  JfrPeriodicEventSet::requestThreadCPULoad()+0xc
V  [libjvm.dylib+0x92fc20]  JfrPeriodicEventSet::requestEvent(JfrEventId, long, PeriodicType)+0xd4 
V  [libjvm.dylib+0x92faec]  jfr_emit_event+0xa4
j  jdk.jfr.internal.JVM.emitEvent(JJJ)Z+0 jdk.jfr@20-internal
j  jdk.jfr.internal.RequestEngine$RequestHook.emitJVMEvent(Ljdk/jfr/internal/PlatformEventType;JLjdk/jfr/internal/RequestEngine$PeriodicType;)V+20 jdk.jfr@20-internal
j  jdk.jfr.internal.RequestEngine$RequestHook.execute(JLjdk/jfr/internal/RequestEngine$PeriodicType;)V+36 jdk.jfr@20-internal
j  jdk.jfr.internal.RequestEngine.run_requests(Ljava/util/Collection;J)J+141 jdk.jfr@20-internal
j  jdk.jfr.internal.RequestEngine.doPeriodic()J+6 jdk.jfr@20-internal
j  jdk.jfr.internal.PlatformRecorder.periodicTask()V+47 jdk.jfr@20-internal
j  jdk.jfr.internal.PlatformRecorder.lambda$startDiskMonitor$1()V+1 jdk.jfr@20-internal 
j  jdk.jfr.internal.PlatformRecorder$$Lambda$73+0x00000008010424d8.run()V+4 jdk.jfr@20-internal
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@20-internal
j  java.lang.Thread.run()V+19 java.base@20-internal
v  ~StubRoutines::call_stub 0x000000011b1b817c
V  [libjvm.dylib+0x8d63f4]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x424
V  [libjvm.dylib+0xd96f3c]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x38
V  [libjvm.dylib+0x8d52c8]  JavaCalls::call(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x38
V  [libjvm.dylib+0x8d5108]  JavaCalls::call_virtual(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x148
V  [libjvm.dylib+0x8d5344]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x70
V  [libjvm.dylib+0x9f4af0]  thread_entry(JavaThread*, JavaThread*)+0xa8
V  [libjvm.dylib+0x8f0fbc]  JavaThread::thread_main_inner()+0x108
V  [libjvm.dylib+0x8f0ea8]  JavaThread::run()+0x124
V  [libjvm.dylib+0xfd6398]  Thread::call_run()+0x154
V  [libjvm.dylib+0xd94198]  thread_native_entry(Thread*)+0x138
C  [libsystem_pthread.dylib+0x7878]  _pthread_start+0x140
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  jdk.jfr.internal.JVM.emitEvent(JJJ)Z+0 jdk.jfr@20-internal
j  jdk.jfr.internal.RequestEngine$RequestHook.emitJVMEvent(Ljdk/jfr/internal/PlatformEventType;JLjdk/jfr/internal/RequestEngine$PeriodicType;)V+20 jdk.jfr@20-internal
j  jdk.jfr.internal.RequestEngine$RequestHook.execute(JLjdk/jfr/internal/RequestEngine$PeriodicType;)V+36 jdk.jfr@20-internal
j  jdk.jfr.internal.RequestEngine.run_requests(Ljava/util/Collection;J)J+141 jdk.jfr@20-internal
j  jdk.jfr.internal.RequestEngine.doPeriodic()J+6 jdk.jfr@20-internal
j  jdk.jfr.internal.PlatformRecorder.periodicTask()V+47 jdk.jfr@20-internal
j  jdk.jfr.internal.PlatformRecorder.lambda$startDiskMonitor$1()V+1 jdk.jfr@20-internal
j  jdk.jfr.internal.PlatformRecorder$$Lambda$73+0x00000008010424d8.run()V+4 jdk.jfr@20-internal
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@20-internal
j  java.lang.Thread.run()V+19 java.base@20-internal
v  ~StubRoutines::call_stub 0x000000011b1b817c",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-30 10:23;dcubed;jdk-20+33_macosx-aarch64.8301380.zip;https://bugs.openjdk.org/secure/attachment/102452/jdk-20%2B33_macosx-aarch64.8301380.zip",,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i305oj:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-01-30 10:23;dcubed;Here's the logs from my jdk-20+33 stress testing sighting on macosx-aarch64:

$ unzip -l jdk-20+33_macosx-aarch64.8301380.zip
Archive:  jdk-20+33_macosx-aarch64.8301380.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    27136  01-29-2023 05:41   jdk-20+33_3/failures.macosx-aarch64/TestCrossProcessStreaming.jtr.slowdebug
    85195  01-29-2023 05:41   jdk-20+33_3/failures.macosx-aarch64/hs_err_pid15245.log
---------                     -------
   112331                     2 files;;;","2023-02-01 15:03;dcubed;So here's the call to JfrThreadLocal::impersonate:

(lldb) up
frame #8: 0x0000000109975280 libjvm.dylib`JfrThreadCPULoadEvent::send_events() at jfrThreadCPULoadEvent.cpp:126:9
   123 	      event.set_endtime(event_time);
   124 	      if (jt != periodic_thread) {
   125 	        // Commit reads the thread id from this thread's trace data, so put it there temporarily
-> 126 	        JfrThreadLocal::impersonate(periodic_thread, JFR_JVM_THREAD_ID(jt));
   127 	      } else {
   128 	        JfrThreadLocal::impersonate(periodic_thread, periodic_thread_id);
   129 	      }

Here's the 'jt' thread:

(lldb) print jt
(JavaThread *) $4 = 0x000000015a0d1810
(lldb) print *jt
(JavaThread) $5 = {
  Thread = {
    ThreadShadow = {
      _pending_exception = nullptr
      _exception_file = 0x0000000000000000
      _exception_line = 0
    }
    _nmethod_disarm_value = 1
    _gc_data = {
      [0] = 0
      [1] = 8192
      [2] = 0
      [3] = 17433981653976477952
      [4] = 0
      [5] = 2048
      [6] = 0
      [7] = 5803341568
      [8] = 17433981653976478193
      [9] = 17433981653976478193
      [10] = 17433981653976478193
      [11] = 17433981653976478193
      [12] = 17433981653976478193
      [13] = 17433981653976478193
      [14] = 17433981653976478193
      [15] = 17433981653976478193
      [16] = 17433981653976478193
      [17] = 17433981653976478193
      [18] = 17433981653976478193
    }
    _threads_hazard_ptr = nullptr
    _threads_list_ptr = nullptr
    _nested_threads_hazard_ptr_cnt = 0
    _suspendible_thread = false
    _last_handle_mark = 0x000000016b87e9b8
    _threads_do_token = 0
    _rcu_counter = 0
    _missed_ic_stub_refill_verifier = nullptr
    _skip_gcalot = false
    _tlab = {
      _start = 0x000000070f2af600
      _top = 0x000000070f2af768
      _pf_top = 0x000000070f2af670
      _end = 0x000000070f2ca758
      _allocation_end = 0x000000070f2ca758
      _desired_size = 13981
      _refill_waste_limit = 218
      _allocated_before_last_gc = 0
      _bytes_since_last_sample_point = 0
      _number_of_refills = 1
      _refill_waste = 0
      _gc_waste = 0
      _slow_allocations = 0
      _allocated_size = 13995
      _allocation_fraction = (_average = 0.333333015, _sample_count = 1, _weight = 35, _is_old = false, _last_sample = 0.333333015)
    }
    _allocated_bytes = 0
    _heap_sampler = (_bytes_until_sample = 865667)
    _statistical_info = (_start_time_stamp = 1752862167946416, _define_class_count = 0)
    _jfr_thread_local = {
      _java_event_writer = nullptr
      _java_buffer = nullptr
      _native_buffer = 0x000000013a9ab810
      _shelved_buffer = nullptr
      _load_barrier_buffer_epoch_0 = nullptr
      _load_barrier_buffer_epoch_1 = 0x000000014a082210
      _checkpoint_buffer_epoch_0 = nullptr
      _checkpoint_buffer_epoch_1 = nullptr
      _stackframes = 0x000000014a00f210
      _dcmd_arena = nullptr
      _thread = {
        _ptr = nullptr
      }
      _vthread_id = 30
      _jvm_thread_id = 30
      _thread_id_alias = 18446744073709551615
      _data_lost = 0
      _stack_trace_id = 18446744073709551615
      _parent_trace_id = 0
      _user_time = 0
      _cpu_time = 625667
      _wallclock_time = 1752862168572375
      _stack_trace_hash = 0
      _stackdepth = 0
      _entering_suspend_flag = 0
      _critical_section = 0
      _vthread_epoch = 0
      _vthread_excluded = false
      _jvm_thread_excluded = false
      _vthread = false
      _dead = false
    }
    _current_pending_raw_monitor = nullptr
    _run_state = PRE_CALL_RUN
    _unhandled_oops = 0xf1f1f1f1f1f1f1f1
    _osthread = 0x0000000159e7f890
    _resource_area = 0x0000000159e7f4a0
    _current_resource_mark = nullptr
    _handle_area = 0x0000000159e7f4f0
    _metadata_handles = 0x0000000159e7f550
    _stack_base = 0x000000016b87f000 ""xP\xd8]u:Lg\xd8߇k\U00000001""
    _stack_size = 2109440
    _lgrp_id = -1
    _owned_locks = nullptr
    _jvmti_env_iteration_count = 0
    _ParkEvent = 0x0000000139f04e00
    _hashStateW = 273326509
    _hashStateX = 1898447301
    _hashStateY = 842502087
    _hashStateZ = 34663
    _wx_init = true
    _wx_state = WXWrite
  }
  _on_thread_list = true
  _threadObj = {
    _obj = 0x0000000139e19240
  }
  _vthread = {
    _obj = 0x0000000139e19248
  }
  _jvmti_vthread = {
    _obj = 0x0000000139e19250
  }
  _scopedValueCache = {
    _obj = 0x0000000139e19258
  }
  _java_call_counter = 1
  _anchor = {
    _last_Java_sp = 0x000000016b87e398
    _last_Java_pc = 0x000000011b1cd15c ""\xac\x83^\xf8\x88\x82""
    _last_Java_fp = 0x000000016b87e400
  }
  _entry_point = 0x0000000000000000
  _jni_environment = {
    functions = 0x000000010a474628
  }
  _deopt_mark = nullptr
  _deopt_nmethod = nullptr
  _vframe_array_head = nullptr
  _vframe_array_last = nullptr
  _jvmti_deferred_updates = nullptr
  _callee_target = 0x00000008004f22e0
  _vm_result = nullptr
  _vm_result_2 = nullptr
  _deferred_card_mark = {
    _start = nullptr
    _word_size = 0
  }
  _current_pending_monitor = nullptr
  _current_pending_monitor_is_from_java = true
  _current_waiting_monitor = 0x000000015a8716d0
  _active_handles = 0x000000015a9a2fe0
  _free_handle_block = nullptr
  _Stalled = 5813769936
  _monitor_chunks = nullptr
  _suspend_flags = 0
  _thread_state = _thread_blocked
  _poll_data = (_polling_word = 18446744073709551614, _polling_page = 4371267584)
  _safepoint_state = 0x0000000159e7f850
  _saved_exception_pc = 0x0000000000000000
  _requires_cross_modify_fence = false
  _no_safepoint_count = 0
  _visited_for_critical_count = 0
  _terminated = _not_terminated
  _in_deopt_handler = 0
  _doing_unsafe_access = false
  _do_not_unlock_if_synchronized = false
  _carrier_thread_suspended = false
  _is_in_VTMS_transition = false
  _is_in_tmp_VTMS_transition = false
  _is_VTMS_transition_disabler = false
  _jni_attach_state = _attached_via_jni
  _pending_deoptimization = -1
  _pending_monitorenter = false
  _pending_transfer_to_interpreter = false
  _in_retryable_allocation = false
  _pending_failed_speculation = 0
  _jvmci = (_implicit_exception_pc = 0x0000000000000000, _alternate_call_target = 0x0000000000000000)
  _libjvmci_runtime = nullptr
  _jvmci_counters = 0x0000000000000000
  _jvmci_reserved0 = 0
  _jvmci_reserved1 = 0
  _jvmci_reserved_oop0 = nullptr
  _stack_overflow_state = {
    _stack_guard_state = stack_guard_enabled
    _stack_overflow_limit = 0x000000016b698000 """"
    _reserved_stack_activation = 0x000000016b87f000 ""xP\xd8]u:Lg\xd8߇k\U00000001""
    _shadow_zone_safe_limit = 0x000000016b6a4000 """"
    _shadow_zone_growth_watermark = 0x000000016b87e250 ""\U00000010\xe5\x84\U0000000e\a""
    _stack_base = 0x000000016b87f000 ""xP\xd8]u:Lg\xd8߇k\U00000001""
    _stack_end = 0x000000016b67c000 """"
  }
  _exception_oop = nullptr
  _exception_pc = 0x0000000000000000
  _exception_handler_pc = 0x0000000000000000
  _is_method_handle_return = 0
  _jni_active_critical = 0
  _pending_jni_exception_check_fn = 0x0000000000000000
  _depth_first_number = 0
  _popframe_condition = 0
  _frames_to_pop_failed_realloc = 0
  _cont_entry = nullptr
  _cont_fastpath = 0x0000000000000000
  _cont_fastpath_thread_state = 1
  _held_monitor_count = 2
  _jni_monitor_count = 0
  _stack_watermarks = {
    _head = nullptr
  }
  _handshake = {
    _handshakee = 0x000000015a0d1810
    _queue = {
      _first = nullptr
    }
    _lock = {
      Mutex = {
        _owner = nullptr
        _lock = {
          PlatformMutex = {
            _impl = 0x0000000139f055c0
          }
          _impl = 0x0000000139f05620
        }
        _name = 0x0000000159e7f320 ""HandshakeState_lock""
        _allow_vm_block = true
        _rank = nosafepoint
        _next = 0xf1f1f1f1f1f1f1f1
        _last_owner = 0xf1f1f1f1f1f1f1f1
        _skip_rank_check = false
      }
    }
    _active_handshaker = nullptr
    _async_exceptions_blocked = false
    _suspended = false
    _async_suspend_handshake = false
  }
  _popframe_preserved_args = 0x0000000000000000
  _popframe_preserved_args_size = 0
  _jvmti_thread_state = nullptr
  _interp_only_mode = 0
  _should_post_on_exceptions_flag = 0
  _thread_stat = 0x0000000159e7f740
  _parker = {
    PlatformParker = {
      _counter = 0
      _cur_index = -1
      _mutex = {
        [0] = (__sig = 1297437786, __opaque = char [56] @ 0x000000015b475580)
      }
      _cond = {
        [0] = (__sig = 1129270852, __opaque = char [40] @ 0x000000015b4755c0)
        [1] = (__sig = 1129270852, __opaque = char [40] @ 0x000000015b4755f0)
      }
    }
  }
  _class_to_be_initialized = nullptr
  _SleepEvent = 0x0000000139f05100
}

The ""jt"" thread (0x000000015a0d1810) is listed on the _java_thread_list in the hs_err_pid:

Threads class SMR info:
_java_thread_list=0x0000000149e7c1b0, length=16, elements={
0x000000013a015210, 0x000000014a00d010, 0x000000014a00dc10, 0x000000012e80a410,
0x000000013a018010, 0x000000014a010a10, 0x000000015b00ba10, 0x000000012e808210,
0x000000014a095610, 0x000000012e9e2810, 0x000000014a09f210, 0x000000012f008810,
0x000000015b05ee10, 0x000000013a319c10, 0x000000015a0d1810, 0x000000014a02aa10
}
_to_delete_list=0x0000000159e7fad0, length=15, elements={
0x000000013a015210, 0x000000014a00d010, 0x000000014a00dc10, 0x000000012e80a410,
0x000000013a018010, 0x000000014a010a10, 0x000000015b00ba10, 0x000000012e808210,
0x000000014a095610, 0x000000012e9e2810, 0x000000014a09f210, 0x000000012f008810,
0x000000015b05ee10, 0x000000013a319c10, 0x000000015a0d1810
}

AND it is also listed on the _to_delete_list which is a bit surprising... Here's that ""Java Threads: "" entry:

  0x000000015a0d1810 JavaThread ""DestroyJavaVM"" [_thread_blocked, id=9987, stack(0x000000016b67c000,0x000000016b87f000)]

and an Events entry:

Event: 22.825 Thread 0x000000015a0d1810 Thread added: 0x000000015a0d1810

So the JavaThread that was at 0x000000015a0d1810 died and a newly created
JavaThread was put at the same memory location and is now the ""DestroyJavaVM"".

It seems very strange to me that the same JavaThread address is on both the
_java_thread_list and _to_delete_list lists. I have to think about that one...;;;","2023-02-01 18:25;dholmes;The main thread detaches from the VM when main() returns and re-attaches as the DestroyJavaVM thread. This should involves two different JavaThread instances of course.;;;","2023-02-02 03:33;mgronlun;It seems very strange the same thread address is on both lists! ThreadsSMRSupport::smr_delete() is supposed to await the release of the hazard pointer to the list that is _to_delete_list(s), before it destroys the JavaThread and makes it available. What is the status of the "" _threads_hazard_ptr"" and the ""_threads_list_ptr"" fields for the periodic thread?;;;","2023-02-02 04:30;mgronlun;I think I found the problem with the assert(other_thread_id != 0) failed: invariant :

The ""DestroyJavaVM"" thread is created by calling:

jint JNICALL jni_DestroyJavaVM(JavaVM *vm)

  res = vm->AttachCurrentThread((void **)&env, (void *)&destroyargs);

jint JNICALL jni_AttachCurrentThread(JavaVM *vm, void **penv, void *_args) {
  HOTSPOT_JNI_ATTACHCURRENTTHREAD_ENTRY(vm, penv, _args);
  if (vm_created == 0) {
    HOTSPOT_JNI_ATTACHCURRENTTHREAD_RETURN((uint32_t) JNI_ERR);
    return JNI_ERR;
  }

  jint ret = attach_current_thread(vm, penv, _args, false); ### <------------

  HOTSPOT_JNI_ATTACHCURRENTTHREAD_RETURN(ret);
  return ret;
}

static jint attach_current_thread(JavaVM *vm, void **penv, void *_args, bool daemon) {
  JavaVMAttachArgs *args = (JavaVMAttachArgs *) _args;

  // Check below commented out from JDK1.2fcs as well
  /*
  if (args && (args->version != JNI_VERSION_1_1 || args->version != JNI_VERSION_1_2)) {
    return JNI_EVERSION;
  }
  */

  Thread* t = Thread::current_or_null();
  if (t != NULL) {
    // If executing from an atexit hook we may be in the VMThread.
    if (t->is_Java_thread()) {
      // If the thread has been attached this operation is a no-op
      *(JNIEnv**)penv = JavaThread::cast(t)->jni_environment();
      return JNI_OK;
    } else {
      return JNI_ERR;
    }
  }

  // Create a thread and mark it as attaching so it will be skipped by the
  // ThreadsListEnumerator - see CR 6404306
  JavaThread* thread = new JavaThread(true); ### <<-- this creates a new JavaThread representation

  ### The JavaThread constructor re-initializes the embedded _jfr_thread_local struct, with thread ids set to 0.

  ###  [+0x058] _vthread_id      : 0x0 [Type: unsigned __int64]
  ###  [+0x060] _jvm_thread_id   : 0x0 [Type: unsigned __int64] 

  ### The default thread state is _thread_new
  ### +0x3b4 _thread_state : 2 ( _thread_new )

  // Set correct safepoint info. The thread is going to call into Java when
  // initializing the Java level thread object. Hence, the correct state must
  // be set in order for the Safepoint code to deal with it correctly.

  thread->set_thread_state(_thread_in_vm); ### <<-- but it is immediately set to _thread_in_vm...

  thread->record_stack_base_and_size();
  thread->register_thread_stack_with_NMT();
  thread->initialize_thread_current();
  MACOS_AARCH64_ONLY(thread->init_wx());

  if (!os::create_attached_thread(thread)) {
    thread->smr_delete();
    return JNI_ERR;
  }
  // Enable stack overflow checks
  thread->stack_overflow_state()->create_stack_guard_pages();

  thread->initialize_tlab();

  thread->cache_global_variables();

  // This thread will not do a safepoint check, since it has
  // not been added to the Thread list yet.

  { MutexLocker ml(Threads_lock);
    // This must be inside this lock in order to get FullGCALot to work properly, i.e., to
    // avoid this thread trying to do a GC before it is added to the thread-list
    thread->set_active_handles(JNIHandleBlock::allocate_block());
    Threads::add(thread, daemon); ### <<--------------------- --------------------this will now add the thread to the SMR thread list
  }

  ### We now have a new JavaThread on the SMR list, with thread state _thread_in_vm and jfr thread id 0.
  ### Since the initial state was changed from _thread_new, the JFR iterator will include it. Hence, assert.
  ### The thread id assignment is done lazily as part of  post_thread_start_event(thread); just a few lines below. This explains this rare sighting - it is a very small window where the thread is _thread_in_vm and has a jfr traceid set to 0.


And here is the reason why the assertion fails as part of impersonation:

inline traceid load_java_thread_id(const Thread* t) {
  assert(t != nullptr, ""invariant"");
  assert(t->is_Java_thread(), ""invariant"");
  oop threadObj = JavaThread::cast(t)->threadObj();
  return threadObj != nullptr ? AccessThreadTraceId::id(threadObj) : 0; ### <<--- the jni attaching thread is set onto the thread list, in state _thread_in_vm, before it has called to java in order to create a threadObj.
}

traceid JfrThreadLocal::assign_thread_id(const Thread* t, JfrThreadLocal* tl) {
  assert(t != nullptr, ""invariant"");
  assert(tl != nullptr, ""invariant"");
  JfrSpinlockHelper spinlock(&tl->_critical_section);
  traceid tid = tl->_jvm_thread_id;
  if (tid == 0) {
    if (t->is_Java_thread()) {
      tid = load_java_thread_id(t);
      tl->_jvm_thread_id = tid;
      Atomic::store(&tl->_vthread_id, tid);
      return tid;
    }
    tid = static_cast<traceid>(ThreadIdentifier::next());
    tl->_jvm_thread_id = tid;
  }
  return tid;
}


I think I can fix this by updating the iterator to filter out _jni_attach_state == _attaching_via_jni,.;;;","2023-02-02 07:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12388
Date: 2023-02-02 15:07:21 +0000;;;","2023-02-08 02:28;dukebot;Changeset: c92a7deb
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2023-02-08 10:26:40 +0000
URL:       https://git.openjdk.org/jdk/commit/c92a7deba50cbf5e283d1bd0ef5f2d6f8a4fc947
;;;",,,,,,,,,,,,,,
adjust timeout for JLI GetObjectSizeIntrinsicsTest.java subtest again,JDK-8301377,5092840,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2023-01-30 09:57,2023-08-29 23:15,2023-10-01 09:56,2023-04-24 09:12,20,,,,,,,21,core-svc,,0,noreg-self,,,,,,,,,,,,,,,"The following bug was used previously to adjust the -Xmx8g -Xint config
for JLI GetObjectSizeIntrinsicsTest.java:

    JDK-8292261 adjust timeouts in JLI GetObjectSizeIntrinsicsTest.java

That subtest has started timing out again in recent JDK20 builds:

# jdk-20+20_1_macosx-aarch64 - observed in jdk-20+20 testing on 2022.10.21 on
# macosx-aarch64 in slowdebug config:
#   - -Xmx8g -Xint config
#   - timeout at 3409.889 PASSED while timeout handler was running
# jdk-20+20_3_macosx-aarch64 - observed in jdk-20+20 testing on 2022.10.22 on
# macosx-aarch64 in slowdebug config:
#   - -Xmx8g -Xint config
#   - timeout at 3513.24 PASSED while timeout handler was running
# jdk-20+32_1_macosx-aarch64 - observed in jdk-20+32 testing on 2023.01.20 on
# macosx-aarch64 in slowdebug config:
#   - -Xmx8g -Xint config
#   - timeout at 3041.601 PASSED while timeout handler was running
# jdk-20+32_2_macosx-aarch64 - observed in jdk-20+32 testing on 2023.01.21 on
# macosx-aarch64 in slowdebug config:
#   - -Xmx8g -Xint config
#   - timeout at 3122.356 PASSED while timeout handler was running
# jdk-20+32_3_macosx-aarch64 - observed in jdk-20+32 testing on 2023.01.22 on
# macosx-aarch64 in slowdebug config:
#   - -Xmx8g -Xint config
#   - timeout at 3187.748 PASSED while timeout handler was running
# jdk-20+33_1_macosx-aarch64 - observed in jdk-20+33 testing on 2023.01.27 on
# macosx-aarch64 in slowdebug config:
#   - -Xmx8g -Xint config
#   - timeout at 3057.873 PASSED while timeout handler was running
# jdk-20+33_2_macosx-aarch64 - observed in jdk-20+33 testing on 2023.01.28 on
# macosx-aarch64 in slowdebug config:
#   - -Xmx8g -Xint config
#   - timeout at 3015.16 PASSED while timeout handler was running
# jdk-20+33_3_macosx-aarch64 - observed in jdk-20+33 testing on 2023.01.29 on
# macosx-aarch64 in slowdebug config:
#   - -Xmx8g -Xint config
#   - timeout at 3051.319 PASSED while timeout handler was running

",,,,,,,,,,JDK-8315090,JDK-8315300,JDK-8315311,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292261,,,,,,,,,,,,"2023-01-30 10:07;dcubed;jdk-20+20_macosx-aarch64.8301377.zip;https://bugs.openjdk.org/secure/attachment/102449/jdk-20%2B20_macosx-aarch64.8301377.zip","2023-01-30 10:09;dcubed;jdk-20+32_macosx-aarch64.8301377.zip;https://bugs.openjdk.org/secure/attachment/102450/jdk-20%2B32_macosx-aarch64.8301377.zip","2023-01-30 10:10;dcubed;jdk-20+33_macosx-aarch64.8301377.zip;https://bugs.openjdk.org/secure/attachment/102451/jdk-20%2B33_macosx-aarch64.8301377.zip",,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i305nn:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@dc685aa,,,,,,,,,"2023-01-30 10:07;dcubed;Here's the logs from my jdk-20+20 stress testing sighting on macosx-aarch64:

$ unzip -l jdk-20+20_macosx-aarch64.8301377.zip
Archive:  jdk-20+20_macosx-aarch64.8301377.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    31152  10-21-2022 00:29   jdk-20+20_1/failures.macosx-aarch64/GetObjectSizeIntrinsicsTest_id8.jtr.slowdebug
    43631  10-22-2022 23:54   jdk-20+20_3/failures.macosx-aarch64/GetObjectSizeIntrinsicsTest_id8.jtr.slowdebug
---------                     -------
    74783                     2 files;;;","2023-01-30 10:09;dcubed;Here's the logs from my jdk-20+32 stress testing sighting on macosx-aarch64:

$ unzip -l jdk-20+32_macosx-aarch64.8301377.zip
Archive:  jdk-20+32_macosx-aarch64.8301377.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    32661  01-20-2023 04:08   jdk-20+32_1/failures.macosx-aarch64/GetObjectSizeIntrinsicsTest_id8.jtr.slowdebug
    38928  01-21-2023 04:15   jdk-20+32_2/failures.macosx-aarch64/GetObjectSizeIntrinsicsTest_id8.jtr.slowdebug
    32623  01-22-2023 04:25   jdk-20+32_3/failures.macosx-aarch64/GetObjectSizeIntrinsicsTest_id8.jtr.slowdebug
---------                     -------
   104212                     3 files;;;","2023-01-30 10:10;dcubed;Here's the logs from my jdk-20+33 stress testing sighting on macosx-aarch64:

$ unzip -l jdk-20+33_macosx-aarch64.8301377.zip
Archive:  jdk-20+33_macosx-aarch64.8301377.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    45968  01-27-2023 03:48   jdk-20+33_1/failures.macosx-aarch64/GetObjectSizeIntrinsicsTest_id8.jtr.slowdebug
    32652  01-28-2023 04:54   jdk-20+33_2/failures.macosx-aarch64/GetObjectSizeIntrinsicsTest_id8.jtr.slowdebug
    46013  01-29-2023 06:03   jdk-20+33_3/failures.macosx-aarch64/GetObjectSizeIntrinsicsTest_id8.jtr.slowdebug
---------                     -------
   124633                     3 files;;;","2023-02-03 10:24;dcubed;I'm testing bumping the timeout for the -Xmx8g -Xint case
by 60 more seconds (from timeout=240 to timeout=300).
With my slowdebug timeoutFactor of 12, this will increase
total test timeout from 2880 seconds to 3600 seconds.;;;","2023-04-21 14:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13593
Date: 2023-04-21 21:35:07 +0000;;;","2023-04-24 09:12;dukebot;Changeset: 4b23bef5
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2023-04-24 16:10:44 +0000
URL:       https://git.openjdk.org/jdk/commit/4b23bef51df9c1a5bc8f43748a8d6c8d99995656
;;;",,,,,,,,,,,,,,,
NullPointerException in MemberEnter.checkReceiver,JDK-8301374,5092838,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,vromero,cushon,cushon,2023-01-30 09:36,2023-02-22 12:28,2023-10-01 09:56,2023-02-14 11:01,11,21,,,,,,21,tools,,0,javac-crash,,,,,,,,,,,,,,,"The following invalid program crashes javac. The crash repros back to at least JDK 11.

public class X {
  interface F {
    void apply(E e);
  }
  enum E {
    ONE
  }

  F f = (E.ONE) -> {};
}

An exception has occurred in the compiler (20-ea). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot read field ""sym"" because ""localEnv.enclMethod"" is null
        at jdk.compiler/com.sun.tools.javac.comp.MemberEnter.checkReceiver(MemberEnter.java:322)
        at jdk.compiler/com.sun.tools.javac.comp.MemberEnter.visitVarDef(MemberEnter.java:267)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:1018)
        at jdk.compiler/com.sun.tools.javac.comp.MemberEnter.memberEnter(MemberEnter.java:163)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitVarDef(Attr.java:1265)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:1018)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:663)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:737)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:756)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitLambda(Attr.java:3171)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCLambda.accept(JCTree.java:1994)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:663)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:709)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.visitVarDef(Attr.java:1306)
        at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:1018)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:663)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:737)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5592)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5485)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5309)
        at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5248)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1331)
        at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:960)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:317)
        at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
        at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:64)
        at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:50)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i305n7:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-02-11 19:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12523
Date: 2023-02-12 03:53:02 +0000;;;","2023-02-14 11:01;dukebot;Changeset: ca73f7e8
Author:    Vicente Romero <vromero@openjdk.org>
Date:      2023-02-14 18:59:37 +0000
URL:       https://git.openjdk.org/jdk/commit/ca73f7e80f4a7e3c3c2a68c957412618d042d101
;;;",,,,,,,,,,,,,,,,,,,
Add exception handler method to the BaseLdapServer,JDK-8301367,5092828,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,aefimov,aefimov,aefimov,2023-01-30 08:11,2023-08-01 00:04,2023-10-01 09:56,2023-02-02 04:47,,,,,,,,21,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,"Add exception handler method to the BaseLdapTestServer LDAP test library class. That will allow LDAP tests to customize the handling of server-side exceptions. 
Currently, the BaseLdapTestServer implementation prints an exception and its stack trace to the standard error stream.

Full file path: test/jdk/com/sun/jndi/ldap/lib/BaseLdapServer.java",,,,,,,,,,JDK-8313154,JDK-8312581,JDK-8313468,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277999,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i305kz:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@226ed983,,,,,,,,,"2023-01-31 08:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12347
Date: 2023-01-31 16:19:34 +0000;;;","2023-02-02 04:47;dukebot;Changeset: 03b23a1e
Author:    Aleksei Efimov <aefimov@openjdk.org>
Date:      2023-02-02 12:45:00 +0000
URL:       https://git.openjdk.org/jdk/commit/03b23a1e1bd724019ef4fdbee3463d0646329164
;;;","2023-07-24 04:24;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport. 
SAP nightly testing passed.;;;","2023-07-24 04:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1622
Date: 2023-07-24 11:24:04 +0000;;;",,,,,,,,,,,,,,,,,
LinkedTransferQueue does not respect timeout for poll(),JDK-8301341,5092650,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,vklang,webbuggrp,webbuggrp,2023-01-27 07:20,2023-09-15 11:48,2023-10-01 09:56,2023-07-22 03:42,17,,,,,,,22,core-libs,,0,dcsaw,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,reproducer-hard,webbug,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Linux 5.15.0-58-generic #64-Ubuntu SMP x86_64 GNU/Linux
Ubuntu 22.04.1 LTS
openjdk 17.0.5 2022-10-18
OpenJDK Runtime Environment (build 17.0.5+8-Ubuntu-2ubuntu122.04)
OpenJDK 64-Bit Server VM (build 17.0.5+8-Ubuntu-2ubuntu122.04, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
There's code that used a LinkedTransferQueue that is not returning from `poll` under certain circumstance. The code in question is https://github.com/openhab/openhab-core/blob/main/bundles/org.openhab.core/src/main/java/org/openhab/core/common/QueueingThreadPoolExecutor.java#L193. I modified it locally to include its own measurements and logging:

```
                            long start = System.nanoTime();
                            final Runnable runnable = taskQueue.poll(2, TimeUnit.SECONDS);
                            long end = System.nanoTime();
                            long duration = end - start;
                            if (duration > 3000000000L) {
                                logger.warn(""Polling the task queue in thread pool '{}' took {}ms"",
                                        threadPoolName, duration / 1000000L);
                            }
```

When it hangs, CPU use on that thread goes to 100%, and the stack trace is:
```
""safeCall-queue"" Id=8239 in RUNNABLE
    at java.base@17.0.5/java.util.concurrent.LinkedTransferQueue.awaitMatch(LinkedTransferQueue.java:652)
    at java.base@17.0.5/java.util.concurrent.LinkedTransferQueue.xfer(LinkedTransferQueue.java:616)
    at java.base@17.0.5/java.util.concurrent.LinkedTransferQueue.poll(LinkedTransferQueue.java:1294)
    at org.openhab.core.common.QueueingThreadPoolExecutor$1.run(QueueingThreadPoolExecutor.java:193)
    at java.base@17.0.5/java.lang.Thread.run(Thread.java:833)
```

This stack trace is consistent, no matter how many times I sample it, I've not caught it executing on a different line.

At this point, I used another thread to inspect the queue, and confirmed that from its point of view the queue is empty. I was unable to inspect the internal data structures of the queue via reflection, because `head` and `tail` are `volatile transient`. I _am_ able to force it to break out by forcing an item to be pushed onto the queue (line 118 in that file). At which point, my logs indicated the following:

```
2023-01-27 08:05:17.338 [WARN ] [re.common.QueueingThreadPoolExecutor] - Polling the task queue in thread pool 'safeCall' took 1377089ms
```

Definitely longer than 2s! I'm not sure if the `awaitMatch` method is messing up its time-keeping, or if it's getting confused by some rare intermediate state. It's not completely deadlocked, because pushing a new element allows it to break out. And it's definitely spinning chewing up CPU usage, and not parking itself.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run openHAB 3.4.1 on my hardware, and I'm sure a smattering of my particular configuration. I can reproduce within a few hours of restarting the process, no less often than once per day.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
`poll` returns after 2 seconds, even if the queue is empty.
ACTUAL -
CPU usage gets pegged at 100%.

CUSTOMER SUBMITTED WORKAROUND :
I'm able to notice the situation, and trigger an item to be pushed onto the pertinent queue, dislodging it.

FREQUENCY : often


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i304hf:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2023-01-30 03:48;tongwan;The problem was observed on openHAB 3.4.1;;;","2023-01-30 21:14;dholmes;Just to be clear, these kinds of timeouts only apply to the time a thread waits (ie parks) for some state to change, it does not apply to the whole operation. If the code enters a busy loop rather then parking, then the timeout will not apply.;;;","2023-02-06 07:13;dl;This is a similar issue as https://bugs.openjdk.org/browse/JDK-8300663 - and might await non-preview status of loom to address
;;;","2023-06-05 11:51;dl;Updated to use Thread.isVirtual to distinguish spin vs immediate block cases, enabling re-introduction of spin control from the previous version, removing anomalies like this one. There wasn't a stand-alone test case submitted for this, and I'm not sure how  to create one that merely shows fewer performance glitches.

;;;","2023-06-05 11:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14317
Date: 2023-06-05 18:52:00 +0000;;;","2023-07-22 03:42;dukebot;Changeset: 8d1ab570
Author:    Doug Lea <dl@openjdk.org>
Date:      2023-07-22 10:41:42 +0000
URL:       https://git.openjdk.org/jdk/commit/8d1ab57065c7ebcc650b5fb4ae098f8b0a35f112
;;;","2023-09-15 11:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/168
Date: 2023-09-15 18:39:02 +0000;;;",,,,,,,,,,,,,,
Identical branch conditions in CompileBroker::print_heapinfo,JDK-8301338,5092798,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,shade,shade,shade,2023-01-30 02:05,2023-04-27 07:08,2023-10-01 09:56,2023-01-31 03:08,11,17,20,21,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-21,redhat-interest,sonarcloud-found,starter,,,,,,,"This was silently introduced by JDK-8219586. SonarCloud complains:
 ""Identical sub-expressions on both sides of operator ""||"".

There are two occurrences of:

if ((function_lock_1 != NULL) || (function_lock_1 != NULL)) {
",,,,,,,,,,JDK-8305559,JDK-8302402,JDK-8301952,JDK-8307038,JDK-8306827,,,,,,,,,,,,,,,,,,,,,,,JDK-8219586,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i305eb:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-30 02:09;chagedorn;ILW = Possibly incorrect heap info printed with PrintCodeHeapAnalytics, only with PrintCodeHeapAnalytics, no workaround = LLH = P5;;;","2023-01-30 02:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12288
Date: 2023-01-30 10:20:51 +0000;;;","2023-01-31 03:08;dukebot;Changeset: d583767b
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-01-31 11:06:47 +0000
URL:       https://git.openjdk.org/jdk/commit/d583767bf17aea55d361a1d1713444fc41fa9911
;;;","2023-03-29 04:16;thartmann;Fix Request (JDK 20u)
Resolves an issue with potential incorrect debug output. The fix is trivial, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-03-29 04:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/36
Date: 2023-03-29 11:15:24 +0000;;;","2023-04-19 02:58;goetz;
Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, very obvious change.
I had to resolve.
SAP nightly testing passed.;;;","2023-04-19 03:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1272
Date: 2023-04-19 09:57:42 +0000;;;",,,,,,,,,,,,,,
[8u] Fix writing of test files after the cgroups v2 backport,JDK-8301332,5092791,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2023-01-30 01:09,2023-02-07 08:03,2023-10-01 09:56,2023-01-30 09:15,openjdk8u372,,,,,,,openjdk8u372,core-svc,,0,11-na,17-na,21-na,jdk8u-fix-request,jdk8u-fix-yes,testbug,,,,,,,,,,"During the 8u backport review of JDK-8287107 this came up. Andrew Hughes pointed out that:

[...] it should be Files.writeString(a, b) => Files.write(a, b.getBytes(StandardCharsets.UTF_8)) rather than Files.writeString(a, b) => Files.write(a, b.getBytes()). Files.writeString(a,b) is a shorthand for Files.writeString(a, b, StandardCharsets.UTF_8), while getBytes() with no arguments will use the platform default character set. This could lead to different behaviour with the default character set is not ASCII or UTF-8.

There are at least 50 occurrences of this pattern in test code:

$ grep -rn 'Files.write(' jdk/test/jdk/internal/platform/ hotspot/test/runtime/containers/ | grep 'getBytes()' | wc -l
50

We should fix this in one sweep.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,openjdk8u372,,linux,,,,,,"0|i305cr:",9223372036854775807,b02,,,,,,,,,,,"2023-01-30 02:05;sgehwolf;Later releases not affected since they use Files.writeString() API [1], which uses UTF-8 charset encoding for writes.

[1] https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html#writeString(java.nio.file.Path,java.lang.CharSequence,java.nio.file.OpenOption...);;;","2023-01-30 02:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/252
Date: 2023-01-30 10:11:11 +0000;;;","2023-01-30 02:32;sgehwolf;Fix Request (OpenJDK 8u):

Trivial test cleanup. Test files are now being written using the UTF-8 charset encoding instead of relying on the platform default. Low risk, as it's a test change only. Tests continue to pass. Review pending (but trivial, so already requesting fix approval).;;;","2023-01-30 09:15;dukebot;Changeset: b4ee9f86
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-01-30 17:12:51 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/b4ee9f86a159a3b1969b31e1e77f438b8833cc40
;;;","2023-02-07 08:03;dukebot;Changeset: b4ee9f86
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-01-30 17:12:51 +0000
URL:       https://git.openjdk.org/jdk8u/commit/b4ee9f86a159a3b1969b31e1e77f438b8833cc40
;;;",,,,,,,,,,,,,,,,
RISC-V: C2: assert(false) failed: bad AD file due to missing match rule,JDK-8301313,5092770,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fjiang,fyang,fyang,2023-01-29 18:03,2023-07-09 19:26,2023-10-01 09:56,2023-02-02 21:04,21,,,,,,,21,hotspot,,0,c2,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,"https://bugs.openjdk.org/browse/JDK-8293841 added support for Foreign Function & Memory API on RISC-V.

Run following foreign jtreg test with fastdebug build on linux-riscv64 platform (issue is not reproducible with release build):

$ make run-test-only TEST=""./test/jdk/java/foreign/TestSpliterator.java"" TEST_VM_OPTS=""-XX:-TieredCompilation"" JTREG=""TIMEOUT_FACTOR=24""

```
STDOUT:
test TestSpliterator.testBadSpliteratorElementSizeNotMultiple(): success
test TestSpliterator.testBadSpliteratorElementSizeTooBig(): success
test TestSpliterator.testBadSpliteratorElementSizeZero(): success
test TestSpliterator.testBadStreamElementSizeNotMultiple(): success
test TestSpliterator.testBadStreamElementSizeTooBig(): success
test TestSpliterator.testBadStreamElementSizeZero(): success
test TestSpliterator.testHyperAligned(): success
test TestSpliterator.testSpliteratorElementSizeMultipleButNotPowerOfTwo(): success
test TestSpliterator.testStreamElementSizeMultipleButNotPowerOfTwo(): success
test TestSpliterator.testSum(10, 1): success
test TestSpliterator.testSum(100, 1): success
test TestSpliterator.testSum(1000, 1): success
test TestSpliterator.testSum(10000, 1): success
test TestSpliterator.testSum(10, 10): success
test TestSpliterator.testSum(100, 10): success
test TestSpliterator.testSum(1000, 10): success
test TestSpliterator.testSum(10000, 10): success
test TestSpliterator.testSum(10, 100): success
test TestSpliterator.testSum(100, 100): success
test TestSpliterator.testSum(1000, 100): success
test TestSpliterator.testSum(10000, 100): success
test TestSpliterator.testSum(10, 1000): success
test TestSpliterator.testSum(100, 1000): success
test TestSpliterator.testSum(1000, 1000): success
test TestSpliterator.testSum(10000, 1000): success
test TestSpliterator.testSum(10, 10000): success
test TestSpliterator.testSum(100, 10000): success
test TestSpliterator.testSum(1000, 10000): success
test TestSpliterator.testSum(10000, 10000): success
o1206  CMoveL  === _ o2270 o2271  [[ o2277 o1219 o1222 o1224 162 ]]  #long:minint..maxint:www

--N: o1206  CMoveL  === _ o2270 o2271  [[ o2277 o1219 o1222 o1224 162 ]]  #long:minint..maxint:www

   --N: o2270  Binary  === _ o1205 o1361  [[ o1206 ]]
   _Binary_cmpOp__CmpI_iRegI_iRegI  101  _Binary_cmpOp__CmpI_iRegI_iRegI

      --N: o1205  Bool  === _ o1361  [[ o2270 ]] [lt]
      CMPOP  1  CMPOP
      CMPOPU  1  CMPOPU
      CMPOPULTGE  0  CMPOPULTGE

      --N: o1361  CmpI  === _ o1173 o21  [[ o1205 o2270 ]]
      _CmpI_iRegI_iRegI  100  _CmpI_iRegI_iRegI
      _CmpI_iRegI_immI0  0  _CmpI_iRegI_immI0

         --N: o1173  Phi  === o1172 o42 o1319  [[ o1176 o1175 o1191 o1274 o1195 o395 o1361 o1286 o599 o1559 o1590 ]]  #int
         IREGI  0  IREGI
         IREGINOSP  0  IREGINOSP
         IREGI_R10  0  IREGI_R10
         IREGI_R12  0  IREGI_R12
         IREGI_R13  0  IREGI_R13
         IREGI_R14  0  IREGI_R14
         IREGIHEAPBASE  0  IREGIHEAPBASE
         IREGIORL2I  0  IREGI
         IREGIORL  0  IREGI
         IREGILNP  0  IREGI
         IREGILNPNOSP  0  IREGINOSP

         --N:  o21  ConI  === o0  [[ o1074 o1361 o2261 o2279 ]]  #int:0
         IMMI  0  IMMI
         IMMI0  0  IMMI0
         IMMI_LE_4  0  IMMI_LE_4
         IMMIADD  0  IMMIADD
         IMMISUB  0  IMMISUB
         IMMI5  0  IMMI5
         IMMIOFFSET  0  IMMIOFFSET
         IREGI  100  loadConI
         IREGINOSP  100  loadConI
         IREGI_R10  100  loadConI
         IREGI_R12  100  loadConI
         IREGI_R13  100  loadConI
         IREGI_R14  100  loadConI
         IREGIORL2I  100  IREGI
         IREGIORL  100  IREGI
         IREGILNP  100  IREGI
         IREGILNPNOSP  100  IREGINOSP
         IMMIORL  0  IMMI

   --N: o2271  Binary  === _ o1195 o41  [[ o1206 ]]
   _Binary_iRegL_iRegL  100  _Binary_iRegL_iRegL
   _Binary_iRegLNoSp_iRegL  101  _Binary_iRegLNoSp_iRegL

      --N: o1195  ConvI2L  === _ o1173  [[ o1360 o1362 o1224 o1209 o2271 o395 o395 o395 ]]  #long:minint..maxint
      IREGL  0  IREGL
      IREGLNOSP  1  IREGLNOSP
      IREGL_R28  0  IREGL_R28
      IREGL_R29  0  IREGL_R29
      IREGL_R30  0  IREGL_R30
      IREGL_R10  0  IREGL_R10
      IREGIORL  0  IREGL
      IREGILNP  0  IREGL
      IREGILNPNOSP  1  IREGLNOSP

      --N:  o41  ConL  === o0  [[ o395 o1056 o578 o395 o2259 o1236 o2271 ]]  #long:0
      IMML5  0  IMML5
      IMML  0  IMML
      IMML0  0  IMML0
      IMMLADD  0  IMMLADD
      IMMLSUB  0  IMMLSUB
      IMMLOFFSET  0  IMMLOFFSET
      IREGL  100  loadConL
      IREGLNOSP  100  loadConL
      IREGL_R28  100  loadConL
      IREGL_R29  100  loadConL
      IREGL_R30  100  loadConL
      IREGL_R10  100  loadConL
      IREGIORL  100  IREGL
      IREGILNP  100  IREGL
      IREGILNPNOSP  100  IREGLNOSP
      IMMIORL  0  IMML

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/matcher.cpp:1709
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/fyang/openjdk-jdk/src/hotspot/share/opto/matcher.cpp:1709), pid=1774058, tid=1774086
#  assert(false) failed: bad AD file
#
# JRE version: OpenJDK Runtime Environment (21.0) (fastdebug build 21-internal-adhoc.fyang.openjdk-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.fyang.openjdk-jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-riscv64)
# Problematic frame:
# V  [libjvm.so+0x10210c4]  Matcher::Label_Root(Node const*, State*, Node*, Node*&)+0x3d0
#
# Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E"" (or dumping to /home/fyang/openjdk-jdk/build/linux-riscv64-server-fastdebug/test-support/jtreg_test_jdk_jdk_foreign/scratch/1/core.1774058)
#
# An error report file with more information is saved as:
# /home/fyang/openjdk-jdk/build/linux-riscv64-server-fastdebug/test-support/jtreg_test_jdk_jdk_foreign/scratch/1/hs_err_pid1774058.log
test TestSpliterator.testSumSameThread(): success

===============================================
java/foreign/TestSpliterator.java
Total tests run: 30, Passes: 30, Failures: 0, Skips: 0
===============================================
```",,,,,,,,,,JDK-8311749,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293841,,,,,"2023-01-29 18:33;fyang;hs_err_pid2448041.log;https://bugs.openjdk.org/secure/attachment/102444/hs_err_pid2448041.log",,,,,,,,,riscv,,,,,,,,,linux,,,,,,"0|i30583:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-29 18:35;fjiang;The root cause is that PhaseIdealLoop::optimize may replace CmpLNode with CmpINode in CmpLNode::Ideal:

```
Node *CmpLNode::Ideal( PhaseGVN *phase, bool can_reshape ) {
  const TypeLong *t2 = phase->type(in(2))->isa_long();
  if (Opcode() == Op_CmpL && in(1)->Opcode() == Op_ConvI2L && t2 && t2->is_con()) {
    const jlong con = t2->get_con();
    if (con >= min_jint && con <= max_jint) {
      return new CmpINode(in(1)->in(1), phase->intcon((jint)con));
    }
  }
  return NULL;
}
```

The old CmpLNode used in CMoveL was generated in PhaseIdealLoop::transform_long_range_checks:

```
    // L_clamp = Q_min < 0 ? 0 : Q_min
    Node* Q_min_cmp = new CmpLNode(Q_min, long_zero);
    register_new_node(Q_min_cmp, entry_control);
    Node* Q_min_bool = new BoolNode(Q_min_cmp, BoolTest::lt);
    register_new_node(Q_min_bool, entry_control);
    Node* L_clamp = new CMoveLNode(Q_min_bool, Q_min, long_zero, TypeLong::LONG);
```

But in riscv.ad, there is no match rule for CMoveL and CmpI, which result in the bad AD file.;;;","2023-01-30 00:11;chagedorn;ILW = Missing C2 match rule for CMoveL and CmpI on riscv, only with foreign jtregs, disable compilation of affected methods = HLM = P3;;;","2023-01-30 06:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12295
Date: 2023-01-30 13:57:59 +0000;;;","2023-02-02 21:04;dukebot;Changeset: 3ad6aef1
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2023-02-03 05:03:21 +0000
URL:       https://git.openjdk.org/jdk/commit/3ad6aef1496de914b70f00005465e4b22f248d4f
;;;","2023-03-18 18:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/17
Date: 2023-03-19 01:10:00 +0000;;;","2023-06-19 20:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,
java/net/httpclient/* fail with -Xcomp,JDK-8301306,5092761,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sguoyun,sguoyun,sguoyun,2023-01-29 01:29,2023-02-08 23:39,2023-10-01 09:56,2023-02-03 03:57,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"The tests failed with VM_OPTIONS=-Xcomp and CONF=fastdebug
on the AArch64 and LOONGARCH64 architecture.

java/net/httpclient/ByteArrayPublishers.java
java/net/httpclient/ManyRequestsLegacy.java

----------System.err:(46/4302)----------
java.lang.RuntimeException: java.util.concurrent.CompletionException: java.io.IOException: HTTP/1.1 header parser received no bytes
    at ByteArrayPublishers.main(ByteArrayPublishers.java:94)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
    at java.base/java.lang.Thread.run(Thread.java:1591)
Caused by: java.util.concurrent.CompletionException: java.io.IOException: HTTP/1.1 header parser received no bytes
    at java.base/java.util.concurrent.CompletableFuture.encodeRelay(CompletableFuture.java:368)
    at java.base/java.util.concurrent.CompletableFuture.completeRelay(CompletableFuture.java:377)
    at java.base/java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:1152)
    at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
    at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2194)
    at java.net.http/jdk.internal.net.http.Http1Response.onReadError(Http1Response.java:453)
    at java.net.http/jdk.internal.net.http.Http1Response$HeadersReader.onReadError(Http1Response.java:575)
    at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.checkForErrors(Http1AsyncReceiver.java:302)
    at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.flush(Http1AsyncReceiver.java:268)
    at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
    at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
    at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
    ... 1 more



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301787,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i30563:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-01-29 23:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12282
Date: 2023-01-30 07:16:17 +0000;;;","2023-01-30 00:00;alanb;Issues with the HTTP client are tracked in core-libs/java.net. I can't tell from this bug report if there is a test robustness issue or something else.;;;","2023-01-30 00:49;sguoyun;I also found the following tests failed.

jdk/incubator/concurrent/StructuredTaskScope/StructuredTaskScopeTest.java （fastdebug -Xcomp）
java/rmi/server/UnicastRemoteObject/serialFilter/FilterUROTest.java （release -Xcomp）

so if you thinke https://git.openjdk.org/jdk/pull/12282 is not the fundamental solution, then I try to solve this bug on tests and tracke it n core-libs/java.net.;;;","2023-01-30 01:46;alanb;I think it would be useful to see the .jtr files from the failed runs, e.g. StructuredTaskScopeTest.java is 46 tests, and run twice to exercise the API from both platform and virtual threads, so if there is a test failure then it would be useful to know which test/conditions.;;;","2023-01-30 02:40;dfuchs;ManyRequestLegacy doesn't use the new HttpClient but the old HttpURLConnection.
Given the description the most likely cause of the error is that the HttpServer decides to close an idle HTTP/1.1 connection at the time the client is trying to reuse it. Before reusing a connection, the client does its best to try and figure out if it's still alive - but this is a best effort. If the delay between the time it does this check, and the time it tries to write to the connection is extended, then that gives more opportunity for the server to close the idle connection during that time, and it's probably what's being observed here.
The fact that both clients are failing would support that hypothesis.;;;","2023-01-30 13:09;dcubed;Moving from hotspot/runtime -> core-libs/java.net for initial triage.;;;","2023-01-31 03:03;sguoyun;thank @Daniel Fuchs, tests can PASSED by use `-Xcomp -Dsun.net.httpserver.idleInterval=50000`.;;;","2023-02-01 00:56;sguoyun;since different tests need to modify/add different parameters to ensure result is passed, e.g.

java/net/httpclient/ByteArrayPublishers.java  // -Xcomp -Dsun.net.httpserver.idleInterval=50000
java/net/vthread/HttpALot.java  //-Xcomp -Dsun.net.client.defaultReadTimeout=50000
java/net/httpclient/ManyRequestsLegacy.java // -Xcomp -Dsun.net.httpserver.idleInterval=50000 and @run main/othervm/timeout=140

so I want to add ` @requires (vm.compMode != ""Xcomp"") ` in ByteArrayPublishers.java and other failed tests to disable tests running. Do you think it`s right? @Daniel Daugherty @Alan Bateman;;;","2023-02-01 08:32;dcubed;> I want to add ` @requires (vm.compMode != ""Xcomp"") ` in ByteArrayPublishers.java
> and other failed tests to disable tests running. Do you think it`s right?

This is a question of test coverage which should be decided by area maintainers
for java.net and the HotSpot Compiler team so [~alanb] and [~kvn] are good folks
to ping for an opinion.;;;","2023-02-01 09:22;dfuchs;Since the title of this issue only speaks of httpclient tests maybe you could update your PR (and the issue title) to only solve the issue with the java.net tests that are failing. That could be easily reviewed on net-dev, and would make it possible to progress.
You could log a separate issue (and PR) for  the other tests in other areas.

If adding -Dsun.net.httpserver.idleInterval=50000  / -Dsun.net.client.defaultReadTimeout=50000  makes the tests pass in all configurations (with or without -Xcomp) it's probably an acceptable solution ([~alanb] do you agree WRT HttpALot?) 

;;;","2023-02-01 10:44;kvn;I think adding ` @requires vm.compMode != ""Xcomp"" ` is acceptable in this case.
Do these tests pass with `-Xint` (Interpreter mode only)?
;;;","2023-02-01 19:49;sguoyun;java/net/httpclient/ManyRequestsLegacy.java must  set`-Xint -Dsun.net.httpserver.idleInterval=500000` to run passed, other tests passed only with `-Xint`.;;;","2023-02-01 22:35;kvn;We do need testing with default mixed mode when JIT compilation is not blocking. I surprise you need explicitly run only with Interpreter to pass. ;;;","2023-02-03 03:57;dukebot;Changeset: 6f9106e0
Author:    sunguoyun <sunguoyun@loongson.cn>
Committer: Jie Fu <jiefu@openjdk.org>
Date:      2023-02-03 11:56:06 +0000
URL:       https://git.openjdk.org/jdk/commit/6f9106e0d0d9f082f0a61009f95d1b8663dd8d4f
;;;",,,,,,,
Wrong class spec on sun.security.util.Pem,JDK-8301299,5092752,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2023-01-28 07:26,2023-02-08 23:35,2023-10-01 09:56,2023-02-01 13:00,,,,,,,,21,security-libs,,0,noreg-doc,,,,,,,,,,,,,,,"I think this Javadoc comment for the class does not belong there?

https://github.com/openjdk/jdk/blob/391c2bb03a375dc22e416e6d1c015b86bbb958f7/src/java.base/share/classes/sun/security/util/Pem.java#L33

/**
 * The Length interface defines the length of an object
 */
public class Pem {",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i30543:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-02-01 12:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12373
Date: 2023-02-01 19:25:54 +0000;;;","2023-02-01 13:00;dukebot;Changeset: 6c927c92
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2023-02-01 20:59:05 +0000
URL:       https://git.openjdk.org/jdk/commit/6c927c92f7bd01e6b34c1348594b8dff6e760a24
;;;",,,,,,,,,,,,,,,,,,,
Update of config.guess broke build on WSL,JDK-8301267,5092701,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,erikj,erikj,erikj,2023-01-27 10:54,2023-02-06 10:40,2023-10-01 09:56,2023-01-30 12:20,,,,,,,,21,infrastructure,,0,build-infra,,,,,,,,,,,,,,,"After JDK-8300805, config.guess has changed output when running on WSL. Before the change:

x86_64-pc-wsl

After the change:

x86_64-pc-linux-gnu

Our wrapper has a workaround for this, but it seems something changed to make the workaround not apply anymore.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300805,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i304sr:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-27 10:56;jvernee;The issue is that make/autoconf/build-aux/autoconf-config.guess now returns `x86_64-pc-linux-gnu` when it previously returned `x86_64-unknown-linux-gnu`.

The following diff fixes the problem for me:

```
diff --git a/make/autoconf/build-aux/config.guess b/make/autoconf/build-aux/config.guess
index dbb441f9a2a..88a54c87611 100644
--- a/make/autoconf/build-aux/config.guess
+++ b/make/autoconf/build-aux/config.guess
@@ -68,11 +68,11 @@ if test $? = 0; then
 fi

 # Test and fix wsl
-echo $OUT | grep unknown-linux-gnu > /dev/null 2> /dev/null
+echo $OUT | grep pc-linux-gnu > /dev/null 2> /dev/null
 if test $? = 0; then
   uname -r | grep -i microsoft > /dev/null 2> /dev/null
   if test $? = 0; then
-    OUT=`echo $OUT | sed -e 's/unknown-linux-gnu/pc-wsl/'`
+    OUT=`echo $OUT | sed -e 's/pc-linux-gnu/pc-wsl/'`
   fi
 fi
```

i.e. simple change from -unknown- > -pc-;;;","2023-01-27 13:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12268
Date: 2023-01-27 21:11:00 +0000;;;","2023-01-30 12:20;dukebot;Changeset: b84f4c40
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-01-30 20:18:59 +0000
URL:       https://git.openjdk.org/jdk/commit/b84f4c40fde2f0ca313b4660b88b308c54a0ad5a
;;;",,,,,,,,,,,,,,,,,,
Http2Connection may send too many GOAWAY frames,JDK-8301255,5092664,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-01-27 08:55,2023-02-06 10:39,2023-10-01 09:56,2023-01-30 06:38,21,,,,,,,21,core-libs,,0,httpclient,noreg-hard,,,,,,,,,,,,,,"The following behavior was observed in a test log:

DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Shutting down h2c (closed=true): java.io.EOFException: HTTP/2 client stopped
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) sending frame: GOAWAY: length=25, streamid=0, flags=0  Error: Not an error Debugdata: Requested by user
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) added 34 bytes to the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) signalling the publisher of the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Shutting down h2c (closed=true): java.io.EOFException: HTTP/2 client stopped
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) sending frame: GOAWAY: length=25, streamid=0, flags=0  Error: Not an error Debugdata: Requested by user
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) added 34 bytes to the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) signalling the publisher of the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Shutting down h2c (closed=true): java.io.EOFException: HTTP/2 client stopped
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) sending frame: GOAWAY: length=25, streamid=0, flags=0  Error: Not an error Debugdata: Requested by user
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) added 34 bytes to the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) signalling the publisher of the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Shutting down h2c (closed=true): java.io.EOFException: HTTP/2 client stopped
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) sending frame: GOAWAY: length=25, streamid=0, flags=0  Error: Not an error Debugdata: Requested by user
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) added 34 bytes to the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) signalling the publisher of the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Shutting down h2c (closed=true): java.io.EOFException: HTTP/2 client stopped
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) sending frame: GOAWAY: length=25, streamid=0, flags=0  Error: Not an error Debugdata: Requested by user
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) added 34 bytes to the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) signalling the publisher of the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Shutting down h2c (closed=true): java.io.EOFException: HTTP/2 client stopped
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) sending frame: GOAWAY: length=25, streamid=0, flags=0  Error: Not an error Debugdata: Requested by user
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) added 34 bytes to the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) signalling the publisher of the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Shutting down h2c (closed=true): java.io.EOFException: HTTP/2 client stopped
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) sending frame: GOAWAY: length=25, streamid=0, flags=0  Error: Not an error Debugdata: Requested by user
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) added 34 bytes to the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) signalling the publisher of the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Shutting down h2c (closed=true): java.io.EOFException: HTTP/2 client stopped
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) Close all streams
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] Http2Connection(SSLTube(SocketTube(2))) sending frame: GOAWAY: length=25, streamid=0, flags=0  Error: Not an error Debugdata: Requested by user
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) added 34 bytes to the write queue
DEBUG: [HttpClient-2-SelectorManager] [2s 716ms] AsyncSSLConnection(SSLTube(SocketTube(2))) signalling the publisher of the write queue
...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i304kj:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-01-27 10:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12263
Date: 2023-01-27 18:16:20 +0000;;;","2023-01-30 06:38;dukebot;Changeset: 041a12e6
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-01-30 14:36:36 +0000
URL:       https://git.openjdk.org/jdk/commit/041a12e65530b5832b4a500180c97a2a60e0dc51
;;;",,,,,,,,,,,,,,,,,,,
UNIX sun/font coding does not detect SuSE in openSUSE Leap distribution,JDK-8301254,5092658,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alexsch,alexsch,alexsch,2023-01-27 08:29,2023-03-08 23:32,2023-10-01 09:56,2023-03-05 23:42,19,,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,"JDK-8278549 `UNIX sun/font coding misses SUSE distro detection on recent distro SUSE 15` 
adds SuSE detection by checking SLES os name property in /etc/os-release file.

opensuse/leap:15.4 docker defines os name property as ""openSUSE Leap"" in /etc/os-release file which is not recognized as SuSE.

The issue is reproduced with Oracle jdk-19.0.2 with custom fontconfig.SuSE.properties file copied to jdk-19.0.2/lib directory.


Steps to reproduce.

- Download Oracle jdk-19.0.2
- Copy the attached custom fontconfig.SuSE.properties file to jdk-19.0.2/lib directory.
-  Run the opensuse/leap:15.4 docker and install freetype and dejavu fonts (do not install fontconfig)
```
docker run --rm --security-opt seccomp=unconfined -it opensuse/leap:15.4 bash
zypper install -y dejavu-fonts
zypper install -y freetype2
```
- Run HelloImage java sample in the docker
```
import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;

public class HelloImage {

    public static void main(String[] args) throws Exception {

        BufferedImage buff = new BufferedImage(300, 200, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = buff.createGraphics();
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, buff.getWidth(), buff.getHeight());

        g.setColor(Color.BLUE);
        g.setFont(g.getFont().deriveFont(32f));
        g.drawString(""Hello, Image!"", 50, 50);
        g.dispose();

        File file = new File(""hello-image.png"");
        ImageIO.write(buff, ""png"", file);
    }
}
```
```
./jdk-19.0.2/bin/javac HelloImage.java
./jdk-19.0.2/bin/java HelloImage
Exception in thread ""main"" java.lang.NullPointerException: Cannot load from short array because ""sun.awt.FontConfiguration.head"" is null
	at java.desktop/sun.awt.FontConfiguration.getVersion(FontConfiguration.java:1261)
	at java.desktop/sun.awt.FontConfiguration.readFontConfigFile(FontConfiguration.java:221)
	at java.desktop/sun.awt.FontConfiguration.init(FontConfiguration.java:105)
	at java.desktop/sun.awt.X11FontManager.createFontConfiguration(X11FontManager.java:706)
	at java.desktop/sun.font.SunFontManager$2.run(SunFontManager.java:352)
	at java.desktop/sun.font.SunFontManager$2.run(SunFontManager.java:309)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
	at java.desktop/sun.font.SunFontManager.<init>(SunFontManager.java:309)
	at java.desktop/sun.awt.FcFontManager.<init>(FcFontManager.java:35)
	at java.desktop/sun.awt.X11FontManager.<init>(X11FontManager.java:56)
	at java.desktop/sun.font.PlatformFontInfo.createFontManager(PlatformFontInfo.java:37)
	at java.desktop/sun.font.FontManagerFactory.getInstance(FontManagerFactory.java:51)
	at java.desktop/java.awt.Font.getFont2D(Font.java:526)
	at java.desktop/java.awt.Font$FontAccessImpl.getFont2D(Font.java:265)
	at java.desktop/sun.font.FontUtilities.getFont2D(FontUtilities.java:151)
	at java.desktop/sun.java2d.SunGraphics2D.checkFontInfo(SunGraphics2D.java:671)
	at java.desktop/sun.java2d.SunGraphics2D.getFontInfo(SunGraphics2D.java:837)
	at java.desktop/sun.java2d.pipe.GlyphListPipe.drawString(GlyphListPipe.java:46)
	at java.desktop/sun.java2d.SunGraphics2D.drawString(SunGraphics2D.java:2931)
	at HelloImage.main(HelloImage.java:17)
```","OS: openSUSE Leap 15.4
JDK: jdk-19.0.2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278549,,,,,,,,,,,,"2023-01-27 08:31;alexsch;fontconfig.SuSE.properties;https://bugs.openjdk.org/secure/attachment/102435/fontconfig.SuSE.properties",,,,,,,,,generic,,,,,,,,,other,,,,,,"0|i304j7:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-01-27 08:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12260
Date: 2023-01-27 16:46:22 +0000;;;","2023-01-30 12:50;prr;We need to (where possible) get out of this game of having this info hard-coded.
I suggest that if a file called /etc/os-release exists we use the strings in there to
define the name of the fontconfig.properties 
https://man7.org/linux/man-pages/man5/os-release.5.html offers some options
and I think the PREFERRED os name would be that specified by ""ID"" which is
""A lower-case string (no spaces or other characters outside of
  0–9, a–z, ""."", ""_"" and ""-"") identifying the operating system""
If that doesn't exist we'd have to fall back to ""NAME"" and apply some transformation
such as changing all chars outside that other set to ""_"".

Similarly we'd probably want to use ""VERSION_ID"" if its set to find a version specific file.

With that change, then any distro that supports /etc/os-release (all of them ??) and
puts something sensible in there, would work without needing JDK code changes.
If a distro doesn't put something sensible in there, then encourage them to do so.

Of course all this is un-needed if you are happy with what the standard libfontconfig produces.


;;;","2023-03-05 23:42;dukebot;Changeset: 15c76e4c
Author:    Alexander Scherbatiy <alexsch@openjdk.org>
Date:      2023-03-06 07:40:38 +0000
URL:       https://git.openjdk.org/jdk/commit/15c76e4c026112f79828d714a5e1c8f822866afa
;;;",,,,,,,,,,,,,,,,,,
JPackage app-image exe launches multiple exe's in JDK 17+,JDK-8301247,5092200,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,webbuggrp,webbuggrp,2023-01-23 05:14,2023-09-25 11:25,2023-10-01 09:56,2023-09-18 13:22,17,19,21,22,,,,22,tools,,0,amazon-interest,dcsad,regression,reproducer-yes,sn_152,sn_153,webbug,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The following Java program and jpackage command create an app-image which launches multiple exe's on Windows 10. This does not happen before JDK 17. The same code and command work as expected on JDK 16, resulting in a single instance of Main.exe in the Task Manager Details.

import javax.swing.*;

public class Main {
    public static void main(String[] args) {
        JDialog dialog = new JDialog();

        dialog.setVisible(true);
    }
}

jpackage --type app-image --input jpackage_test_jar --dest install/tmp --main-jar jpackage_test.jar --main-class Main

REGRESSION : Last worked in version 16


FREQUENCY : always


",,,,,,,,,,JDK-8316819,JDK-8316459,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-27 06:55;adev;Main.java;https://bugs.openjdk.org/secure/attachment/102434/Main.java","2023-01-27 06:53;adev;Screenshot 2023-01-27 202055.png;https://bugs.openjdk.org/secure/attachment/102433/Screenshot+2023-01-27+202055.png",,,,,,,,generic,,,,,,,,,windows,,,,,,"0|i301pf:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-01-27 06:56;adev;I could not reproduce the issue.
C:\jdk\jdk-19_windows-x64_bin\jdk-19\bin\javac .\Main.java
PS C:\test> jar -cvf test.jar Main.class
added manifest
adding: Main.class(in = 334) (out= 255)(deflated 23%)
PS C:\test> jar -cvf test.jar Main.class
PS C:\test> C:\jdk\jdk-19_windows-x64_bin\jdk-19\bin\jpackage --type app-image --input o --dest install --main-jar test.jar --main-class Main

I could see only one instance of Main in the Windows task manager.;;;","2023-07-12 06:24;dwookey;@ANUPAM DEV I could reproduce this with jdk 19. In your screenshot you show the processes tab, but in the details tab there are 2 instances with different process ids.;;;","2023-07-13 06:51;dwookey;I suspect it was due to https://bugs.openjdk.org/browse/JDK-8272328 where the process is restarted with correct environment variables. The parent process hangs around until the child process exits.

I'm not sure what other problems this causes, but for us, the main problem is that when the parent process gets killed, it doesn't kill the child process (but the reverse is true).  This means our installers sometimes fail to kill the process properly. It also means that some of our apps which run as windows services don't actually stop when stopped (it kills the parent, but not the child), and then start up another 2 new processes when restarted. ;;;","2023-07-14 14:53;asemenyuk;What if we adjust the code launching child process in a way that when the parent process is killed, child process is killed as well?;;;","2023-07-15 00:44;dwookey;That would solve our issue, but I'm not sure what the issue was for the original bug reporter. They also posted in stack overflow: https://stackoverflow.com/q/75173536/4489577;;;","2023-09-12 12:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15690
Date: 2023-09-12 19:47:19 +0000;;;","2023-09-18 13:22;dukebot;Changeset: dcea9bf0
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2023-09-18 20:19:36 +0000
URL:       https://git.openjdk.org/jdk/commit/dcea9bf087c87548d9caa899c52e95d17478da22
;;;",,,,,,,,,,,,,,
NPE in FcFontManager.getDefaultPlatformFont() on Linux without installed fontconfig,JDK-8301246,5092647,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alexsch,alexsch,alexsch,2023-01-27 06:22,2023-02-24 08:55,2023-10-01 09:56,2023-02-17 01:00,openjdk8u322,,,,,,,openjdk8u372,client-libs,,0,11-na,jdk8u-fix-request,jdk8u-fix-yes,openjdk-8-specific,,,,,,,,,,,,"The issues is reproduced only with OpenJDK. Oracle 1.8.0_351 does not throw the NPE.

OpenJDK 8u built from sources with custom fontconfig.properties file throws NPE:
`
at sun.awt.FcFontManager.getDefaultPlatformFont(FcFontManager.java:76)` on Linux where fontconfig is not installed.

Steps to reproduce:

- Build jdk8u from sources: https://github.com/openjdk/jdk8u-dev/
- Copy attached custom fontconfig.properties file to build/linux-x86_64-normal-server-release/images/j2sdk-image/jre/lib directory
- Run docker with ubuntu 20.04, install dejavu fonts, and freetype (do not install fontconfig)
```
docker run -it ubuntu:20.04 bash
apt update
apt install -y fonts-dejavu
apt install -y libfreetype6
```
- Run HelloImage java sample in the docker with the build jdk
```
import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;

public class HelloImage {

    public static void main(String[] args) throws Exception {

        BufferedImage buff = new BufferedImage(300, 200, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = buff.createGraphics();
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, buff.getWidth(), buff.getHeight());

        g.setColor(Color.BLUE);
        g.setFont(g.getFont().deriveFont(32f));
        g.drawString(""Hello, Image!"", 50, 50);
        g.dispose();

        File file = new File(""hello-image.png"");
        ImageIO.write(buff, ""png"", file);
    }
}
```
```
build/linux-x86_64-normal-server-release/images/j2sdk-image/bin/javac HelloImage.java
build/linux-x86_64-normal-server-release/images/j2sdk-image/bin/java HelloImage      
Exception in thread ""main"" java.lang.NullPointerException
	at sun.awt.FcFontManager.getDefaultPlatformFont(FcFontManager.java:76)
	at sun.font.SunFontManager$2.run(SunFontManager.java:443)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.font.SunFontManager.<init>(SunFontManager.java:386)
	at sun.awt.FcFontManager.<init>(FcFontManager.java:35)
	at sun.awt.X11FontManager.<init>(X11FontManager.java:57)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at java.lang.Class.newInstance(Class.java:442)
	at sun.font.FontManagerFactory$1.run(FontManagerFactory.java:83)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.font.FontManagerFactory.getInstance(FontManagerFactory.java:74)
	at java.awt.Font.getFont2D(Font.java:491)
	at java.awt.Font.access$000(Font.java:224)
	at java.awt.Font$FontAccessImpl.getFont2D(Font.java:228)
	at sun.font.FontUtilities.getFont2D(FontUtilities.java:200)
	at sun.java2d.SunGraphics2D.checkFontInfo(SunGraphics2D.java:669)
	at sun.java2d.SunGraphics2D.getFontInfo(SunGraphics2D.java:835)
	at sun.java2d.pipe.GlyphListPipe.drawString(GlyphListPipe.java:50)
	at sun.java2d.SunGraphics2D.drawString(SunGraphics2D.java:2933)
	at HelloImage.main(HelloImage.java:17)
```
","OS: Linux
OpenJDK 8u built from sources:  https://github.com/openjdk/jdk8u-dev/",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-27 06:29;alexsch;fontconfig.properties;https://bugs.openjdk.org/secure/attachment/102432/fontconfig.properties",,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i304gr:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-01-27 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/246
Date: 2023-01-27 14:33:36 +0000;;;","2023-02-01 01:50;alexsch;Fix request: [8u]

The fix allows to use Java 2D with fonts in headless mode on Linux systems where fontconfig is not installed.
It fixes NPE in FcFontManager.getDefaultPlatformFont() method by checking that fontConfigFonts variable is not null.
The issue has been already fixed in JDK 11 as part of the fix JDK-8191522 ""Remove Bigelow&Holmes Lucida fonts from JDK sources"": 
https://github.com/openjdk/jdk/commit/9a9dad8b63e6234829132d5557fbd412d295bb26

risk: low

Review: https://github.com/openjdk/jdk8u-dev/pull/246;;;","2023-02-17 01:00;dukebot;Changeset: ca0a6be2
Author:    Alexander Scherbatiy <alexsch@openjdk.org>
Date:      2023-02-17 08:58:26 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/ca0a6be2d76ce755ccfcce0d45a8943b11868067
;;;","2023-02-24 08:55;dukebot;Changeset: ca0a6be2
Author:    Alexander Scherbatiy <alexsch@openjdk.org>
Date:      2023-02-17 08:58:26 +0000
URL:       https://git.openjdk.org/jdk8u/commit/ca0a6be2d76ce755ccfcce0d45a8943b11868067
;;;",,,,,,,,,,,,,,,,,
java/net/httpclient/http2/IdleConnectionTimeoutTest.java intermittent failure,JDK-8301243,5092642,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ccleary,dfuchs,dfuchs,2023-01-27 05:13,2023-02-22 12:27,2023-10-01 09:56,2023-02-14 01:43,21,,,,,,,21,core-libs,,0,httpclient,noreg-self,,,,,,,,,,,,,,"The IdleConnectionTimeoutTest has been observed failing once in the CI.
The test tries to detect whether a connection was reused or not in the server handler by comparing the address+port of the remote client. If the address and port is the same, it assumes that the connection has been reused.

However, when a connection is closed, there is still a chance that a new connection will be able to reuse the same port than the old connection that was just closed, and this is what has been observed here:


#section:testng
----------messages:(7/1505)----------
command: testng -Djdk.httpclient.HttpClient.log=errors -Djdk.httpclient.keepalive.timeout.h2=1 IdleConnectionTimeoutTest
...
finished: Fri Jan 27 11:30:01 UTC 2023
elapsed time (seconds): 3.609
...
----------System.out:(44/2759)----------
config IdleConnectionTimeoutTest.setup(): success
test IdleConnectionTimeoutTest.test(): failure
java.lang.AssertionError: idleConnectionTimeoutEvent was expected but did not occur expected [200] but found [400]
	at org.testng.Assert.fail(Assert.java:99)
	at org.testng.Assert.failNotEquals(Assert.java:1037)
	at org.testng.Assert.assertEqualsImpl(Assert.java:140)
	at org.testng.Assert.assertEquals(Assert.java:122)
	at org.testng.Assert.assertEquals(Assert.java:907)
	at IdleConnectionTimeoutTest.test(IdleConnectionTimeoutTest.java:124)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

===============================================
java/net/httpclient/http2/IdleConnectionTimeoutTest.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================

----------System.err:(44/2287)----------
TestServer(1): accepting connections
Test run for jdk.httpclient.keepalive.timeout.h2=1
TestServer(1): connection accepted
TestServer(1): stopping is: false
TestServer(1): accepting connections
TestServer(1): creating connection
TestServer: New connection from Socket[addr=/127.0.0.1,port=43374,localport=40965]
TestServer(1): starting connection
TestServer: GET /serverTimeoutHandler
Server: creating input stream for stream 1
TestServer(1): connection started
TestServer(1): Using handler for: /serverTimeoutHandler
Sent response headers 200
Jan 27, 2023 11:30:00 AM jdk.internal.net.http.Http2Connection shutdown
INFO: ERROR: java.net.http.HttpConnectTimeoutException: HTTP connection idle, no active streams. Shutting down.
	at java.net.http/jdk.internal.net.http.Http2Connection$IdleConnectionTimeoutEvent.handle(Http2Connection.java:213)
	at java.net.http/jdk.internal.net.http.HttpClientImpl.purgeTimeoutsAndReturnNextDeadline(HttpClientImpl.java:1850)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:1459)

Server connection to /127.0.0.1:43374 stopping. 1 streams
TestServer: Connection writer stopping
TestServer(1): connection accepted
TestServer(1): stopping is: false
TestServer(1): accepting connections
TestServer(1): creating connection
TestServer: New connection from Socket[addr=/127.0.0.1,port=43374,localport=40965]
TestServer(1): starting connection
TestServer: GET /serverTimeoutHandler
Server: creating input stream for stream 1
TestServer(1): Using handler for: /serverTimeoutHandler
Sent response headers 400
TestServer(1): connection started
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:95)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
----------rerun:(55/11152)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i304fn:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-02-07 07:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12457
Date: 2023-02-07 15:41:23 +0000;;;","2023-02-14 01:43;dukebot;Changeset: 92474f13
Author:    Conor Cleary <ccleary@openjdk.org>
Date:      2023-02-14 09:41:36 +0000
URL:       https://git.openjdk.org/jdk/commit/92474f13f03afacc48541b0de17998998f70eb65
;;;",,,,,,,,,,,,,,,,,,,
ForkJoinPool invokeAll() ignores timeout,JDK-8301216,5092437,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,wxiao,webbuggrp,webbuggrp,2023-01-25 01:25,2023-05-11 00:52,2023-10-01 09:56,2023-03-01 06:18,17,18,,,,,,17.0.8-oracle,core-libs,,0,19-na,dcsaw,jdk17u-fix-request,jdk17u-fix-yes,regression,reproducer-yes,webbug,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Whenever using ForkJoinPool executor and calling invokeAll() method with a timeout less than the time the task takes to execute, it won't cancel the last task (or single), it just executes it until completion.

This bug was observed in any release of Java 17 only.

REGRESSION : Last worked in version 16

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
If the task sleep timer is greater than the timeout set, the task should always timeout. 
I have provided a source code scratch file to test this behaviour. If you run it with Java 11,12,13,14,15,16 or even 19. The console should always print ""TASK TIMED OUT"" (if it's setup with sleep greater than the timeout).

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
For all Callable tasks to be timed out. This is observed by ""TASK TIMED OUT"" being printed on the console for the number of tasks in the list.
ACTUAL -
The last or single (if only 1 passed to the list) task will print ""TASK SUCCESSFULLY EXECUTED"" on the console.

---------- BEGIN SOURCE ----------
import java.util.List;
import java.util.concurrent.*;

class Scratch {

    static final int TIME_OUT = 1000;
    static final TimeUnit TIME_OUT_UNIT = TimeUnit.MILLISECONDS;
    static final int TASK_SLEEP = 2000;
    
    public static void main(String[] args) {

        System.out.println(""JVM: "" + System.getProperty(""java.version""));

        ExecutorService threadPool = new ForkJoinPool(3); // incorrect behaviour in Java 17
//        ExecutorService threadPool = Executors.newWorkStealingPool(); // incorrect behaviour in Java 17
//        ExecutorService threadPool = Executors.newFixedThreadPool(3); // works in Java 17

        Callable<String> simpleCallableTask = () -> {
            Thread.sleep(TASK_SLEEP); // task duration
            return ""Return task result"";
        };

        List<Callable<String>> callableList = List.of(simpleCallableTask, simpleCallableTask, simpleCallableTask);

        try {
            List<Future<String>> futureList = threadPool.invokeAll(callableList, TIME_OUT, TIME_OUT_UNIT);
            for (Future<String> future : futureList) {
                if (future.isCancelled()) {
                    System.out.println(""TASK TIMED OUT"");
                } else {
                    System.out.println(""TASK SUCCESSFULLY EXECUTED"");
                }
            }
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
It's mentioned with comments on the source code, but a workaround is not using ForkJoinPool at all, just use Executors.newFixedThreadPool(n)

FREQUENCY : always


",,,,,,,,,,JDK-8307605,JDK-8303714,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277090,,,,,"2023-01-27 00:10;tongwan;Scratch.java;https://bugs.openjdk.org/secure/attachment/102431/Scratch.java",,,,,,,,,generic,,,,,,b05,17,,generic,,,,,,"0|i30363:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2023-01-25 04:28;alanb;I think this one was fixed by the FJP refresh in JDK 19 (JDK-8277090).  In JDK 17 and 18, it didn't cancel the task when awaitPoolInvoke timed out, so for the reproducer here, all but one task is cancelled.;;;","2023-01-27 00:03;tongwan;The observations on Windows 10:
JDK 11: Passed.
JDK 17ea+4: Passed.
JDK 17ea+5: Failed, TASK SUCCESSFULLY EXECUTED observed.
JDK 18: Failed.
JDK 19: Passed.
JDK 20ea+23: Passed.;;;","2023-05-09 02:20;rrich;Fix request (17u)

I would like to fix this issue in jdk17u.
The fix is small. It just cancels the current task when awaitPoolInvoke times out.
The reproducer succeeds with this fix.
The fix passed our CI testing. This includes most JCK and JTREG tiers 1-4 on the standard platforms and also on ppc64le.;;;","2023-05-09 02:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1329
Date: 2023-05-08 09:15:38 +0000;;;",,,,,,,,,,,,,,,,,
Adjust handshakeTimeout value in test HandshakeTimeout.java after 8189338,JDK-8301214,5092615,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,mbaesken,mbaesken,2023-01-27 00:05,2023-02-13 11:10,2023-10-01 09:56,2023-02-08 00:03,21,,,,,,,21,core-libs,,0,noreg-self,,,,,,,,,,,,,,,"After 8189338 we noticed some errors on one of our test macOS machines (macOS 12.4)
in java/rmi/transport/handshakeTimeout/HandshakeTimeout.java :

remote call failed with exception:
java.rmi.ConnectIOException: error during JRMP connection establishment; nested exception is:
java.net.SocketTimeoutException: Read timed out
at java.rmi/sun.rmi.transport.tcp.TCPChannel.createConnection(TCPChannel.java:308)
at java.rmi/sun.rmi.transport.tcp.TCPChannel.newConnection(TCPChannel.java:204)
at java.rmi/sun.rmi.server.UnicastRef.newCall(UnicastRef.java:345)
at java.rmi/sun.rmi.registry.RegistryImpl_Stub.lookup(RegistryImpl_Stub.java:116)
at HandshakeTimeout$Connector.run(HandshakeTimeout.java:133)
at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.net.SocketTimeoutException: Read timed out
at java.base/sun.nio.ch.NioSocketImpl.timedRead(NioSocketImpl.java:273)
at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:299)
at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:341)
at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:791)
at java.base/java.net.Socket$SocketInputStream.read(Socket.java:1099)
at java.base/java.io.BufferedInputStream.fill(BufferedInputStream.java:258)
at java.base/java.io.BufferedInputStream.implRead(BufferedInputStream.java:292)
at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:279)
at java.base/java.io.DataInputStream.readUnsignedByte(DataInputStream.java:288)
at java.base/java.io.DataInputStream.readByte(DataInputStream.java:268)
at java.rmi/sun.rmi.transport.tcp.TCPChannel.createConnection(TCPChannel.java:247)
... 5 more

TEST PASSED: java.rmi.ConnectException or ConnectIOException thrown
STATUS:Passed.
--------------------------------
java.lang.RuntimeException: TEST FAILED: remote call did not time out
at HandshakeTimeout.main(HandshakeTimeout.java:94)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException: TEST FAILED: remote call did not time out
JavaTest Message: shutting down test

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,os_x,,,,,,"0|i3049n:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50807e59,,,,,,,,,"2023-01-27 00:06;mbaesken;discussed in https://bugs.openjdk.org/browse/JDK-8189338;;;","2023-01-30 03:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12292
Date: 2023-01-30 11:06:05 +0000;;;","2023-01-30 11:36;msheppar;There are two runs of this test ... plain socket and ssl socket. The failures is on the second ssl scenario.

This is unexpected and question arises why did it happen. Is it an obscure issue in the rmi layer, or in the SSL layer, or perhaps in the native code assocaited with ""select"" for the timeout on the read/write ?

Reducing the handshake timeout for the first scenario seems ok. But reducing the handshake to 1 millisecond for the ssl scenario maybe masking an issue with the SSL timers or within the RMI layer  -- the failure could be suggesting some deeper issues.

What the failure suggestion is that additional diagnostics would be helpful for determining how the main thread has reached the no timeout condition:
         if (connector.exception == null) {
                throw new RuntimeException(
                    ""TEST FAILED: remote call did not time out"");
            } else {

Did the Connector thread actually run? Was it in the RTR state when the test completed?  is it still alive? should additional state be added to indicate that the thread has started? Should the Connector thread and the main thread synchronize on a countDownLatch before the thread join ?

The failures suggests a bit of restructuring and some synchronization between the Connector thread and the main thread

The structure of the test means that a jtreg test timeout is unlikely. In this failed case it would have been useful, as the failure handler attempts to capture the jstack output which can hint at the cause of any execution blockage.
;;;","2023-01-30 11:55;djelinski;sun.rmi.transport.tcp.handshakeTimeout is only used in setSoTimeout call [1], and it only controls the socket timeout, even on SSLSockets.

We control the server socket used for connecting; it does not read or write anything. Writes on the client side will either put the data in OS buffers, or time out. Reads on the client side will time out.

Reducing the timeout does not mask any issues, at least not with the current timeout implementation.

I agree that using jtreg for timeout handling might be a better option.

[1] https://github.com/openjdk/jdk/blob/master/src/java.rmi/share/classes/sun/rmi/transport/tcp/TCPChannel.java#L229;;;","2023-01-30 17:12;msheppar;then I'd proffer that  it is probably a race condition  between the Connector thread and the main thread, requiring some synchronization between the start of the Connector Thread and the invocation of Thread::join e.g. use a CountDownLatch. The Thread::join completes before the Connector thread has fully executed its timeout lookup invocation to the non existent Registry. As such, the main should wait for the Connector Thread to start before it invokes the t.join.
As the Connector has a timeout of 5 seconds and the main has a 10 second wait, the assumption is that the Connector will have completed before the join times out. But if the scheduling of the Connector's run is delayed, then it possible for the main to race ahead.

Using the puny handshake timeout make the race less likely, as the time out will be instantaneous on comtemporary systems (super duper, quantum computer);;;","2023-02-07 02:17;djelinski;Thanks [~msheppar] for your suggestions. I adjusted the test to use a single thread only, and to use JTReg for timeout handling. If the test times out again, we will get the diagnostic information from JTReg timeout handler.;;;","2023-02-07 05:31;msheppar;yes, the restructuring is good. I never think of running clint and server in same thread, but it will eliminate any possibility of race between main thread and Connector thread. So the job is OXO.;;;","2023-02-08 00:03;dukebot;Changeset: e628fd5c
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-02-08 08:01:43 +0000
URL:       https://git.openjdk.org/jdk/commit/e628fd5c39847f2f9813cce8e78be8db5e60507d
;;;",,,,,,,,,,,,,
Fix issue with LocaleData after JDK-8300719,JDK-8301206,5092606,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dnguyen,dnguyen,dnguyen,2023-01-26 17:04,2023-02-01 22:38,2023-10-01 09:56,2023-01-27 09:23,20,,,,,,,20,globalization,,0,jdk20-fix-request,jdk20-fix-yes,regression,sn_136,tier2,,,,,,,,,,,Updated localized currency names not in LocaleData. Modified LocaleData to include newly updated values.,,,,,,,,,,JDK-8301542,JDK-8301531,JDK-8301291,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300719,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,"0|i3047n:",9223372036854775807,b34,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@52b4192d,,,,,,,,,"2023-01-26 17:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/118
Date: 2023-01-27 01:43:11 +0000;;;","2023-01-27 09:04;dnguyen;Fix Request
This fix is to update values in the LocaleData file. This previously causes failures in the LocaleDataTest because some updated localized values were outdated. This fix has been reviewed by Naoto and should be a harmless fix. This was tested using tier1, tier2, and tier3 with all passing.;;;","2023-01-27 09:17;naoto;Fix request approved.;;;","2023-01-27 09:23;dukebot;Changeset: e5860ef6
Author:    Damon Nguyen <dnguyen@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-27 17:22:05 +0000
URL:       https://git.openjdk.org/jdk20/commit/e5860ef60a9353508afb09716158baf8bfb35559
;;;","2023-01-27 10:09;dcubed;The fix for this bug is integrated in jdk-20+34-2337.;;;",,,,,,,,,,,,,,,,
Don't scale timeout stress with timeout factor,JDK-8301200,5092598,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,lmesnik,lmesnik,2023-01-26 13:47,2023-03-01 22:55,2023-10-01 09:56,2023-02-23 10:23,21,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,"The timeout factor should be used for timeout only and don't change the duration of testing.

It might be needed to add duration factor if needed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3045v:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-01-27 09:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12261
Date: 2023-01-27 16:59:03 +0000;;;","2023-02-23 10:23;dukebot;Changeset: 6397cb61
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-02-23 18:20:53 +0000
URL:       https://git.openjdk.org/jdk/commit/6397cb611a95be5ed86b95d039a2c389f4304281
;;;","2023-02-23 11:01;dcubed;Is this going to change the duration of VM/NSK M&M testing back to
the way that it was?;;;","2023-02-23 13:26;lmesnik;Yes, the goal is not to increase stress time for VM/NSK/MM tests based on the timeout factor.;;;",,,,,,,,,,,,,,,,,
[vectorapi] The typeChar of LaneType is incorrect when default locale is tr,JDK-8301190,5092588,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,psandoz,psandoz,psandoz,2023-01-26 11:02,2023-08-08 14:00,2023-10-01 09:56,2023-01-26 17:18,17,19,20,,,,,21,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,vectorapi,,,,,,,,,,"When the default Locale is tr, the letter i will be converted to İ (U+0130) by toUpperCase. This causes the assertion to fail in LaneType's constructor:

        this.typeChar = printName.toUpperCase().charAt(0);
        assert(""FDBSIL"".indexOf(typeChar) == ordinal()) : this;
",,,,,,,,,,JDK-8307212,JDK-8308130,JDK-8307360,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3043n:",9223372036854775807,b08,,,,,,,,,Verified,,"2023-01-26 14:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12238
Date: 2023-01-26 21:56:22 +0000;;;","2023-01-26 17:18;dukebot;Changeset: c3ff1514
Author:    Glavo <zjx001202@gmail.com>
Committer: Paul Sandoz <psandoz@openjdk.org>
Date:      2023-01-27 01:17:02 +0000
URL:       https://git.openjdk.org/jdk/commit/c3ff151457102cd45e3c7a49a235a04066beca60
;;;","2023-04-27 06:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1305
Date: 2023-04-27 13:18:26 +0000;;;","2023-04-27 06:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/67
Date: 2023-04-27 13:19:34 +0000;;;","2023-04-27 06:49;shade;Fix Request (17u, 20u)

Clean backport to fix the incubating Vector API. This unblocks testing of those APIs in latest LTS/STS. Yes, I understand it is awkward to backport fixes for incubating features, but this one seems to be very easy to fix, and it was already found in real test deployment. Fixing it would unblock more testing for the incubating feature. Applies cleanly, tests pass.;;;",,,,,,,,,,,,,,,,
validate-source fails after JDK-8298873,JDK-8301189,5092587,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,mdonovan,dcubed,dcubed,2023-01-26 11:02,2023-09-29 03:42,2023-10-01 09:56,2023-01-26 11:40,21,,,,,,,21,security-libs,,0,jdk17u-fix-request,noreg-build,noreg-self,tier1,,,,,,,,,,,,"[2023-01-26T18:45:00,807Z] BAD COPYRIGHT LINE: /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S88494/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/93758177-7c3c-43cb-b924-c7a69f17cbbe/runs/84625a34-e1e1-4bb5-a21e-eb42d557709d/workspace/open/test/jdk/javax/net/ssl/SSLEngine/HandshakeWithInvalidRecordVersion.java
[2023-01-26T18:45:00,807Z] 1 header format error(s).
[2023-01-26T18:45:00,810Z] HandleGplSource.gmk:146: recipe for target '/opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S88494/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/93758177-7c3c-43cb-b924-c7a69f17cbbe/runs/84625a34-e1e1-4bb5-a21e-eb42d557709d/workspace/build/validate-source/support/header_validated/_test_jdk_validated' failed
[2023-01-26T18:45:00,810Z] make[3]: *** [/opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S88494/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/93758177-7c3c-43cb-b924-c7a69f17cbbe/runs/84625a34-e1e1-4bb5-a21e-eb42d557709d/workspace/build/validate-source/support/header_validated/_test_jdk_validated] Error 1
[2023-01-26T18:45:00,819Z] /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S88494/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/93758177-7c3c-43cb-b924-c7a69f17cbbe/runs/84625a34-e1e1-4bb5-a21e-eb42d557709d/workspace/closed/make/Main.gmk:70: recipe for target 'validate-headers' failed
[2023-01-26T18:45:00,819Z] make[2]: *** [validate-headers] Error 2",,,,,,,,,,JDK-8313185,JDK-8313494,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298873,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3043f:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-01-26 11:10;dcubed;Here's the proposed fix:

$ git diff
diff --git a/test/jdk/javax/net/ssl/SSLEngine/HandshakeWithInvalidRecordVersion.java b/test/jdk/javax/net/ssl/SSLEngine/HandshakeWithInvalidRecordVersion.java
index 4c6949d10c2..71119489b85 100644
--- a/test/jdk/javax/net/ssl/SSLEngine/HandshakeWithInvalidRecordVersion.java
+++ b/test/jdk/javax/net/ssl/SSLEngine/HandshakeWithInvalidRecordVersion.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014, 2023 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2023, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -233,4 +233,4 @@ public class HandshakeWithInvalidRecordVersion implements SSLContextTemplate {
             System.out.println(msg);
         }
     }
-}
\ No newline at end of file
+}

Please note that the file is also missing an EOL on the last line of the file.;;;","2023-01-26 11:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12232
Date: 2023-01-26 19:06:40 +0000;;;","2023-01-26 11:39;dukebot;Changeset: 7ddafd75
Author:    Matthew Donovan <matthew.p.donovan@oracle.com>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2023-01-26 19:36:41 +0000
URL:       https://git.openjdk.org/jdk/commit/7ddafd75b02c3083264239404b1c33d219e2cd2b
;;;","2023-09-28 05:40;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport, included in PR for JDK-8298873.
Test passes. SAP nighly testing passed.;;;","2023-09-28 07:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1814
Date: 2023-09-28 12:39:12 +0000;;;",,,,,,,,,,,,,,,,
Memory leaks in OopMapCache,JDK-8301187,5092584,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-01-26 10:06,2023-09-04 02:43,2023-10-01 09:56,2023-01-27 06:59,17,20,21,,,,,21,hotspot,,0,amazon-interest,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,OopMapCache::compute_one_oop_map creates a temporary OopMapCacheEntry and fails to call flush() or deallocate_bit_mask() leaking the data.,,,,,,,,,,JDK-8315630,JDK-8315423,JDK-8309348,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3042r:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-26 10:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12230
Date: 2023-01-26 18:15:05 +0000;;;","2023-01-27 06:59;dukebot;Changeset: e2a3b20c
Author:    Justin King <jcking@openjdk.org>
Committer: Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-01-27 14:58:22 +0000
URL:       https://git.openjdk.org/jdk/commit/e2a3b20ca80186a3d3d1a2a9029036b088b3fc9c
;;;","2023-05-30 08:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1412
Date: 2023-05-30 15:38:17 +0000;;;","2023-05-30 23:19;shade;Fix Request (17u)

Fixes a memory leak. Applies cleanly. Testing passes.;;;",,,,,,,,,,,,,,,,,
perfMemory_windows.cpp add free_security_attr to early returns,JDK-8301170,5092566,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2023-01-26 08:02,2023-07-04 23:51,2023-10-01 09:56,2023-01-31 00:23,21,,,,,,,21,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"The function in make_user_tmp_dir in perfMemory_windows.cpp seems to miss the free_security_attr
calls in early returns. only in the success case at the end it is done.",,,,,,,,,,JDK-8311233,JDK-8302193,JDK-8311452,JDK-8311236,JDK-8304874,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,"0|i303yr:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-01-27 01:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12245
Date: 2023-01-27 09:07:19 +0000;;;","2023-01-31 00:22;dukebot;Changeset: 810c8a27
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-01-31 08:20:52 +0000
URL:       https://git.openjdk.org/jdk/commit/810c8a271b4524ae776e2306ef699e04a7d145a2
;;;","2023-02-09 05:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1149
Date: 2023-02-09 13:47:58 +0000;;;","2023-02-09 06:03;mbaesken;jdk17 backport request
I would like to have the patch in jdk17u-dev as well, because the issue is present there too. The patch is low risk; except COPYRIGHT year info it is a clean backport.;;;","2023-03-20 07:32;mbaesken;jdk11 backport request
I would like to have the patch in jdk11u-dev as well, because the issue is present there too. The patch is low risk; except COPYRIGHT year info it is a clean backport.  PR  : https://github.com/openjdk/jdk11u-dev/pull/1813;;;","2023-03-20 08:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1813
Date: 2023-03-20 14:23:59 +0000;;;",,,,,,,,,,,,,,,
"java/net/httpclient/ThrowingSubscribersAsInputStream.java,ThrowingSubscribersAsInputStreamAsync.java, and other httpclient tests failing on windows: Unable to establish loopback connection",JDK-8301169,5092565,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2023-01-26 07:57,2023-08-08 14:03,2023-10-01 09:56,2023-04-25 08:49,21,,,,,,,21,core-libs,,0,httpclient,,,,,,,,,,,,,,,"test ThrowingSubscribersAsInputStream.testThrowingAsInputStream(""https://localhost:53461/https2/chunk/x"", false, AbstractThrowingSubscribers$UncheckedCustomExceptionThrower@4067c93): failure
java.io.UncheckedIOException: java.io.IOException: Unable to establish loopback connection
	at java.net.http/jdk.internal.net.http.HttpClientImpl.<init>(HttpClientImpl.java:649)
	at java.net.http/jdk.internal.net.http.HttpClientImpl.create(HttpClientImpl.java:551)
	at java.net.http/jdk.internal.net.http.HttpClientBuilderImpl.build(HttpClientBuilderImpl.java:143)
	at AbstractThrowingSubscribers.makeNewClient(AbstractThrowingSubscribers.java:250)
	at AbstractThrowingSubscribers.newHttpClient(AbstractThrowingSubscribers.java:255)
	at AbstractThrowingSubscribers.testThrowing(AbstractThrowingSubscribers.java:429)
	at AbstractThrowingSubscribers.testThrowing(AbstractThrowingSubscribers.java:411)
	at AbstractThrowingSubscribers.testThrowingAsInputStreamImpl(AbstractThrowingSubscribers.java:355)
	at ThrowingSubscribersAsInputStream.testThrowingAsInputStream(ThrowingSubscribersAsInputStream.java:42)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.io.IOException: Unable to establish loopback connection
	at java.base/sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:103)
	at java.base/sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:67)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:571)
	at java.base/sun.nio.ch.PipeImpl.<init>(PipeImpl.java:204)
	at java.base/sun.nio.ch.WEPollSelectorImpl.<init>(WEPollSelectorImpl.java:79)
	at java.base/sun.nio.ch.WEPollSelectorProvider.openSelector(WEPollSelectorProvider.java:33)
	at java.base/java.nio.channels.Selector.open(Selector.java:295)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.<init>(HttpClientImpl.java:1217)
	at java.net.http/jdk.internal.net.http.HttpClientImpl.<init>(HttpClientImpl.java:646)
	... 37 more
Caused by: java.net.BindException: Address already in use: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:573)
	at java.base/sun.nio.ch.Net.connect(Net.java:580)
	at java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:880)
	at java.base/java.nio.channels.SocketChannel.open(SocketChannel.java:285)
	at java.base/sun.nio.ch.PipeImpl$Initializer$LoopbackConnector.run(PipeImpl.java:138)
	at java.base/sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:85)
	... 45 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,windows,,,,,,"0|i303yj:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-01-26 08:00;dfuchs;The test should be re-examined to see if it can be modified to consume less resources - for instance by waiting for a client to be GC'ed before creating the next one (if that's not already the case).;;;","2023-04-25 06:57;dfuchs;Hopefully waiting until a client has been garbage collected before trying to use the next one should help reduce the occurrences in which we fail to establish a loopback connection (which is probably due to resource exhaustion). Modifying the tests to wait until the client has been GC'ed after each method should help.;;;","2023-04-25 07:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13644
Date: 2023-04-25 14:02:48 +0000;;;","2023-04-25 08:49;dukebot;Changeset: 98e8616a
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-04-25 15:48:12 +0000
URL:       https://git.openjdk.org/jdk/commit/98e8616a0c27ac73caf8f91cc83adc88b3490dcb
;;;",,,,,,,,,,,,,,,,,
Update VerifySignedJar to actually exercise and test verification,JDK-8301167,5092563,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2023-01-26 07:31,2023-08-10 01:38,2023-10-01 09:56,2023-02-06 07:45,,,,,,,,21,security-libs,,0,jdk11u-sap-interest,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,"VerifySignedJar currently verifies a binary JAR which was signed with SHA-1 back in April 2000. Because SHA-1 signed JARs has been disabled for a while, the JAR is treated as unsigned so the test doesn't really test anything as of now.",,,,,,,,,,JDK-8314087,JDK-8312658,JDK-8311643,JDK-8311634,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i303y3:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7817f935,,,,,,,,,"2023-01-26 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12206
Date: 2023-01-25 17:38:13 +0000;;;","2023-02-06 07:45;dukebot;Changeset: 05ea083b
Author:    Eirik Bjorsnos <eirbjo@gmail.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2023-02-06 15:43:53 +0000
URL:       https://git.openjdk.org/jdk/commit/05ea083b0563ddacf3e38dc329ba00dc4bac9b29
;;;","2023-08-08 05:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1648
Date: 2023-08-08 12:29:20 +0000;;;","2023-08-08 05:55;mdoerr;Fix Request (17u): 
Should get backported for parity with 17.0.9-oracle. Applies cleanly (deleted jar file differs when downloading the original commit as .diff file, but that doesn't matter). Test has passed.;;;",,,,,,,,,,,,,,,,,
jdk/internal/vm/Continuation/Fuzz.java increase COMPILATION_TIMEOUT for Linux ppc64le,JDK-8301163,5092557,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-01-26 06:59,2023-02-01 22:52,2023-10-01 09:56,2023-01-30 00:16,21,,,,,,,21,hotspot,,0,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,,"On our Linux ppc64le test machines we quite often see compilation timeouts in the test jdk/internal/vm/Continuation/Fuzz.java.
(especially when running with fastdebug binaries)
So it probably makes sense to use a higher compilation timeout (maybe factor 2) on this platform.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,,"0|i303wr:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-27 00:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12244
Date: 2023-01-27 08:33:32 +0000;;;","2023-01-30 00:16;dukebot;Changeset: cbefe1fd
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-01-30 08:15:10 +0000
URL:       https://git.openjdk.org/jdk/commit/cbefe1fd35a4ad59ec979bdaee519617efac9ecf
;;;",,,,,,,,,,,,,,,,,,,
SunPKCS11 KeyStore deleteEntry results in dangling PrivateKey entries,JDK-8301154,5092358,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,valeriep,webbuggrp,webbuggrp,2023-01-24 06:21,2023-07-21 07:35,2023-10-01 09:56,2023-05-23 14:14,11,17,18,19,20,,,21,security-libs,,0,dcsaw,reproducer-other,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
java version ""18.0.1.1"" 2022-04-22
Java(TM) SE Runtime Environment (build 18.0.1.1+2-6)
Java HotSpot(TM) 64-Bit Server VM (build 18.0.1.1+2-6, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
I have a simple setup on a PKCS#11 compliant token with 2 entries seen from Java key-store:
""e1"":{RCA_PrivateKey <-> RCA_Cert}
""e2"":{CA_PrivateKey <-> CA_Cert}

To be clear, ""CA_Cert"" is signed and issued by ""RCA_Cert and PrivateKey""

Calling KeyStore.deleteEntry(""e2"") on key-store obtained from SunPKCS11Provider (that is, an instance of P11KeyStore) results in ""RCA_Cert"" also getting deleted while it is on the chain of ""RCA_PrivateKey"" and this, leaves that key dangling.

Looking at the code for PK11KeyStore.destroyChain() 
(https://github.com/openjdk/jdk/blob/048705c04967d106dedc09a4cf2325a3b46ef4e7/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11KeyStore.java#L1965)
reveals that the logic for ""only delete if not part of any other chain"" (from code comments on line 2025) does not take this PrivateKey association into account, just looks for subject-issuer DN matching (line 2030).

This check must also be in place so that the status of key-store is not rendered invalid after the delete operation.


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309214,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i302oj:",9223372036854775807,b24,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7cafbd52,,,,,,,Verified,,"2023-01-26 05:47;tongwan;The code in question can be found at:
https://github.com/openjdk/jdk11u-dev/blob/master/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11KeyStore.java#L1943
https://github.com/openjdk/jdk17u-dev/blob/master/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11KeyStore.java#L1945
https://github.com/openjdk/jdk19u/blob/master/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11KeyStore.java#L1944
https://github.com/openjdk/jdk/blob/master/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11KeyStore.java#L1965;;;","2023-02-08 11:27;valeriep;Besides the existing condition (the cert should not be an issuer of existing certs), the cert deletion logic needs to taken into account that if a corresponding PrivateKey exists, then the cert should not be deleted.;;;","2023-05-01 12:27;valeriep;While writing the new regression test, found another potential issue: existing impl always destroy the cert corresponding to the private key; dependency is only checked for certs in the upper part of chain. Thus after removing the ""ca"" private key and cert entry, the ""ca"" cert will disappear from all the cert chains rendering all involved chains corrupted.

Raising the priority to P3 as a result.
;;;","2023-05-01 12:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13743
Date: 2023-05-01 19:49:05 +0000;;;","2023-05-23 14:13;dukebot;Changeset: 6b27dad7
Author:    Valerie Peng <valeriep@openjdk.org>
Date:      2023-05-23 21:11:38 +0000
URL:       https://git.openjdk.org/jdk/commit/6b27dad76e20131503da15119d930df17dd517d9
;;;","2023-05-30 06:33;mbaesken;The new test sun/security/pkcs11/KeyStore/CertChainRemoval.java  introduced with this change fails now on some of our test Linux boxes (SLES 15,  RHEL 8.5) .
Exception shown is

========
Add pk1, ca1 and root, then delete pk1
test CertChainRemoval.test(): failure
java.security.KeyStoreException: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_GENERAL_ERROR
       at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.engineSetEntry(P11KeyStore.java:1121)
       at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.engineSetKeyEntry(P11KeyStore.java:462)
       at java.base/java.security.KeyStore.setKeyEntry(KeyStore.java:1192)
       at CertChainRemoval.main(CertChainRemoval.java:141)
       at PKCS11Test.premain(PKCS11Test.java:174)
       at PKCS11Test.testNSS(PKCS11Test.java:550)
       at PKCS11Test.main(PKCS11Test.java:210)
       at PKCS11Test.main(PKCS11Test.java:186)
       at CertChainRemoval.test(CertChainRemoval.java:77)
       at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
       at java.base/java.lang.reflect.Method.invoke(Method.java:578)
       at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
       at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
       at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
       at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
       at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
       at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
       at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
       at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
       at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
       at org.testng.TestRunner.privateRun(TestRunner.java:764)
       at org.testng.TestRunner.run(TestRunner.java:585)
       at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
       at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
       at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
       at org.testng.SuiteRunner.run(SuiteRunner.java:286)
       at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
       at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
       at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
       at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
       at org.testng.TestNG.runSuites(TestNG.java:1069)
       at org.testng.TestNG.run(TestNG.java:1037)
       at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
       at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
       at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
       at java.base/java.lang.reflect.Method.invoke(Method.java:578)
       at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
       at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_GENERAL_ERROR
       at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11.C_CreateObject(Native Method)
       at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.storeCert(P11KeyStore.java:1576)
       at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.storeChain(P11KeyStore.java:1591)
       at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.storePkey(P11KeyStore.java:1814)
       at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.engineSetEntry(P11KeyStore.java:1117)
       ... 37 more

===============================================
sun/security/pkcs11/KeyStore/CertChainRemoval.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================
;;;",,,,,,,,,,,,,,,
RISC-V: pipeline class for several instructions is not set correctly,JDK-8301153,5092547,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fjiang,fjiang,fjiang,2023-01-26 05:29,2023-07-09 19:26,2023-10-01 09:56,2023-01-30 23:31,21,,,,,,,21,hotspot,,0,c2,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,"Witness that some c2 instructions use the inappropriate ins_pipe, e.g.:

```
instruct MoveI2F_stack_reg(fRegF dst, stackSlotI src) %{

  match(Set dst (MoveI2F src));

  effect(DEF dst, USE src);

  ins_cost(LOAD_COST);

  format %{ ""flw  $dst, $src\t#@MoveI2F_stack_reg"" %}

  ins_encode %{
    __ flw(as_FloatRegister($dst$$reg), Address(sp, $src$$disp));
  %}

  ins_pipe(pipe_class_memory);

%}
```

We can use the more accurate pipe_class `fp_load_mem_s` instead.
",,,,,,,,,,JDK-8311748,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,21,,linux,,,,,,"0|i303uj:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-26 05:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12219
Date: 2023-01-26 13:47:12 +0000;;;","2023-01-30 23:31;dukebot;Changeset: 9cc0171e
Author:    Feilong Jiang <fjiang@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2023-01-31 07:28:33 +0000
URL:       https://git.openjdk.org/jdk/commit/9cc0171ed51eef0deb63fe3a5923bae9cf0f5ff0
;;;","2023-05-24 08:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/61
Date: 2023-05-24 15:43:02 +0000;;;","2023-06-19 20:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,,
[TESTBUG] jfr/event/sampling/TestNative was backported to JDK8u without proper native wrapper,JDK-8301143,5092536,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvanek,jvanek,jvanek,2023-01-26 01:56,2023-02-24 08:54,2023-10-01 09:56,2023-02-16 07:04,openjdk8u362,,,,,,,openjdk8u372,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,jdk8u-jvanek,redhat-interest,sustaining,,,,,,,,,,,"jfr/event/sampling/TestNative arrived to JDK8u with whole JFR backport. However JDK8 do not have helper functions for jtregs with native code. A shell wrapper is needed to make this test passing.
On most of the combinations, this is the only failing test in jdk_jfr group.

Exemplar fix is provided here.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,os_x,solaris,,,,"0|i303s3:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2023-01-26 02:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/235
Date: 2023-01-24 16:12:14 +0000;;;","2023-02-08 09:19;jvanek;Fix Request (8u)

The test wills stop to fail.
There the only pernament failures in jdk8 jfr group. This, and Wil make jdk_jfr group generally  passing.;;;","2023-02-16 07:04;dukebot;Changeset: b3e23801
Author:    Jiří Vaněk <jvanek@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-02-16 15:01:56 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/b3e2380183b33a3b1131ad7a5f118e876914f810
;;;","2023-02-24 08:54;dukebot;Changeset: b3e23801
Author:    Jiří Vaněk <jvanek@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-02-16 15:01:56 +0000
URL:       https://git.openjdk.org/jdk8u/commit/b3e2380183b33a3b1131ad7a5f118e876914f810
;;;",,,,,,,,,,,,,,,,,
IGV: NPE occurs when creating a diff graph with a graph in a different folder,JDK-8301133,5092525,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ksakata,ksakata,ksakata,2023-01-25 22:23,2023-02-06 00:31,2023-10-01 09:56,2023-01-26 22:18,20,21,,,,,,21,hotspot,,0,igv,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,"NullPointerException occurs when we try to create a diff graph with a graph in a different folder. We can reproduce with the following steps.
 # Open a graph file. Open a graph.
 # Select a graph in different folder in the Outline window.
 # Right-click and choose ""Difference to current graph"".
 # NullPointerException occurs.

---
[INFO] SEVERE [global]
[INFO] java.lang.NullPointerException: Cannot invoke ""com.sun.hotspot.igv.data.Folder.getElements()"" because the return value of ""com.sun.hotspot.igv.data.Group.getParent()"" is null
[INFO]  at com.sun.hotspot.igv.data.Group.getDisplayName(Group.java:129)
[INFO]  at com.sun.hotspot.igv.view.EditorTopComponent.graphChanged(EditorTopComponent.java:252)
[INFO]  at com.sun.hotspot.igv.view.EditorTopComponent.<init>(EditorTopComponent.java:247)
[INFO]  at com.sun.hotspot.igv.view.GraphViewerImplementation.view(GraphViewerImplementation.java:66)
[INFO]  at com.sun.hotspot.igv.view.GraphViewerImplementation.viewDifference(GraphViewerImplementation.java:44)
[INFO]  at com.sun.hotspot.igv.coordinator.actions.DiffGraphCookie.openDiff(DiffGraphCookie.java:65)
[INFO]  at com.sun.hotspot.igv.coordinator.actions.DiffGraphAction.performAction(DiffGraphAction.java:42)
[INFO]  at org.openide.util.actions.NodeAction$DelegateAction$1.run(NodeAction.java:561)
[INFO]  at org.openide.util.actions.ActionInvoker$1.run(ActionInvoker.java:70)
[INFO]  at org.openide.util.actions.ActionInvoker.doPerformAction(ActionInvoker.java:91)
[INFO]  at org.openide.util.actions.ActionInvoker.invokeAction(ActionInvoker.java:74)
[INFO]  at org.openide.util.actions.NodeAction$DelegateAction.actionPerformed(NodeAction.java:558)
[INFO]  at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1972)
[INFO]  at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2313)
[INFO]  at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
[INFO]  at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
[INFO]  at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:374)
[INFO]  at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1028)
[INFO]  at java.desktop/com.apple.laf.AquaMenuItemUI.doClick(AquaMenuItemUI.java:157)
[INFO]  at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1072)
[INFO]  at java.desktop/java.awt.Component.processMouseEvent(Component.java:6626)
[INFO]  at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3389)
[INFO]  at java.desktop/java.awt.Component.processEvent(Component.java:6391)
[INFO]  at java.desktop/java.awt.Container.processEvent(Container.java:2266)
[INFO]  at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5001)
[INFO]  at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2324)
[INFO]  at java.desktop/java.awt.Component.dispatchEvent(Component.java:4833)
[INFO]  at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4948)
[INFO]  at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4575)
[INFO]  at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4516)
[INFO]  at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2310)
[INFO]  at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2780)
[INFO]  at java.desktop/java.awt.Component.dispatchEvent(Component.java:4833)
[INFO]  at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:773)
[INFO]  at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:722)
[INFO]  at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:716)
[INFO]  at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
[INFO]  at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
[INFO]  at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:97)
[INFO]  at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:746)
[INFO]  at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:744)
[INFO]  at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
[INFO]  at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:86)
[INFO]  at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:743)
[INFO]  at org.netbeans.core.TimableEventQueue.dispatchEvent(TimableEventQueue.java:136)
[INFO] [catch] at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
[INFO]  at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
[INFO]  at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
[INFO]  at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
[INFO]  at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
[INFO]  at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i303pn:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-25 22:59;chagedorn;ILW = NullPointerException when opening diff graph, only with diff graph in different folder, no workaround = MLH = P4;;;","2023-01-26 02:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12214
Date: 2023-01-26 08:31:30 +0000;;;","2023-01-26 22:18;dukebot;Changeset: 938b4096
Author:    Koichi Sakata <ksakata@openjdk.org>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-01-27 06:17:14 +0000
URL:       https://git.openjdk.org/jdk/commit/938b4096086575b2bb8cc88b8985aea4bcfe314c
;;;",,,,,,,,,,,,,,,,,,
Link to debuginfo files should only be made after stripping,JDK-8301129,5092520,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-01-25 20:04,2023-02-01 22:47,2023-10-01 09:56,2023-01-26 23:07,,,,,,,,21,infrastructure,,0,build-infra,,,,,,,,,,,,,,,"Links to debuginfo files should only be made after strip is run, as doing so before can cause strip to wreck the embedded link and make the executable entirely un-executable in certain strange cases. It's safer to always just make the link after strip is called regardless",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i303oj:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-25 20:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12209
Date: 2023-01-26 04:05:37 +0000;;;","2023-01-26 05:35;erikj;Do you have an example of when this would go wrong? This ordering has been the same for 10+ years, and I've never heard of it being a problem.;;;","2023-01-26 06:11;jwaters;It can be problematic when --strip-unneeded is given to strip for instance, which we do pass as a flag in one of our builds (though I can't remember which) since it strips everything, including the debug link as well, when that flag is passed (documentation on this flag is pretty unhelpful and just says it removes ""everything unneeded"" without actually saying what, also it appears different versions of strip actually interpret --strip-debug differently, much to everyone's frustration), additionally on Windows with WSL this also sporadically breaks when cross compiling for Linux, and especially when running said fresh Linux build on WSL, resulting in ""This app can't run on your PC"" errors that, quite frankly, makes one want to commit a murder while trying to figure out what the actual issue is. Generally, it's safer to embed the link after stripping, and this is usually what is done virtually all the time too. It shouldn't affect build performance that much, at least to my knowledge, since it's fortunately just one extra call to objcopy;;;","2023-01-26 06:14;erikj;Thank you for the additional background!;;;","2023-01-26 23:07;dukebot;Changeset: c6b3f2dd
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-01-27 07:07:22 +0000
URL:       https://git.openjdk.org/jdk/commit/c6b3f2dd1055f332c6230872c17e3a6c6f9dff3b
;;;",,,,,,,,,,,,,,,,
[8u] Fix unreliable vs2010 download link,JDK-8301122,5092512,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zzambers,zzambers,zzambers,2023-01-25 14:47,2023-01-30 20:38,2023-10-01 09:56,2023-01-27 06:04,openjdk8u362,,,,,,,openjdk8u372,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,,,,,"Problem:
Link to web.archive.org is currently used to download vs2010, since original download link for vs2010 from Microsoft is dead. Even though it usually works, download from web.archive.org fails from time to time, causing windows x86 build failures in github CI.

Fix:
Switch to more reliable download link for vs2010. Use download link used by winetricks project instead. (As they also switched away from web.archive.org link, when they faced the same problem in the past. [1]) Test code already does fingerprint check of downloaded file, so changing download link should be safe.

[1] https://github.com/Winetricks/winetricks/pull/952",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i303mr:",9223372036854775807,b01,,,,,,,,,,,"2023-01-25 14:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/240
Date: 2023-01-25 22:48:24 +0000;;;","2023-01-26 17:24;zzambers;Fix request (8u):

Fix unreliable vs2010 download link
Only affects testing, tested in GHA;;;","2023-01-27 01:17;sgehwolf;Approved for 8u. However, we need to consider moving to a new visual studio version for GHA.;;;","2023-01-27 06:04;dukebot;Changeset: d0cbcc51
Author:    Zdenek Zambersky <zzambers@openjdk.org>
Date:      2023-01-27 14:02:27 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/d0cbcc5101f166b0469b889ef6f05b2925f0760c
;;;","2023-01-27 06:09;zzambers;On Windows, vs2010 is currently used for x86 build and vs2017 for x64. I think it is still useful to also keep old vs2010 for x86, as it can discover problems with old compiler. It is also one mentioned in README-builds.;;;","2023-01-30 08:51;andrew;Yes, we specifically test two versions of Visual Studio and 2010 is required to catch failures such as https://github.com/openjdk/jdk8u-dev/commit/36321be7840c8e044340b8c162a75dce3ae7698f

It does worry me a bit that there is no official source for this download. Do Microsoft not provide it themselves any more?;;;","2023-01-30 11:30;zzambers;Unfortunately, Microsoft seems to have bad habit of removing all traces of products, they no longer support, from their sites (including download links, docs). See end of support dates:
https://en.wikipedia.org/wiki/Visual_Studio#History;;;","2023-01-30 20:38;dukebot;Changeset: d0cbcc51
Author:    Zdenek Zambersky <zzambers@openjdk.org>
Date:      2023-01-27 14:02:27 +0000
URL:       https://git.openjdk.org/jdk8u/commit/d0cbcc5101f166b0469b889ef6f05b2925f0760c
;;;",,,,,,,,,,,,,
[s390x] TestDwarf.java fails,JDK-8301095,5092474,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2023-01-25 07:24,2023-02-13 11:05,2023-10-01 09:56,2023-02-06 06:24,21,,,,,,,21,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,"Created on behalf of Amit Kumar.

TestDwarf.java is failing on s390 due to incorrect assumption for the sender frame. After checking whether it is an Interpreted or stub-routine frame, it is assumed that the frame is a native frame in line with z_abi_160. But, this is not the case always with some GCC optimizations. So we need to be more precise while selecting the correct (return) pc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,linux,,,,,,"0|i303eb:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-30 22:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12306
Date: 2023-01-31 06:52:01 +0000;;;","2023-02-06 06:24;dukebot;Changeset: 7ae447f4
Author:    Amit Kumar <amitlocham09@icloud.com>
Committer: Tyler Steele <tsteele@openjdk.org>
Date:      2023-02-06 14:22:00 +0000
URL:       https://git.openjdk.org/jdk/commit/7ae447f4ebed5f00b3aab59e2e48c23ee05fda89
;;;",,,,,,,,,,,,,,,,,,,
C2 fails assert(ctrl == kit.control()) failed: Control flow was added although the intrinsic bailed out,JDK-8301093,5092471,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,redestad,dcubed,dcubed,2023-01-25 07:06,2023-02-06 10:42,2023-10-01 09:56,2023-02-01 02:57,21,,,,,,,21,hotspot,,0,c2,c2-intrinsic,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,tier8,,,,,,,,"The following test failed in the JDK21 CI:

java/util/Arrays/HashCode.java

Here's a snippet from the log file:

#section:main
----------messages:(6/362)----------
command: main --add-exports java.base/jdk.internal.util=ALL-UNNAMED -Xcomp -Xbatch HashCode
reason: User specified action: run main/othervm --add-exports java.base/jdk.internal.util=ALL-UNNAMED -Xcomp -Xbatch HashCode 
started: Wed Jan 25 07:33:31 GMT 2023
Mode: othervm [/othervm specified]
finished: Wed Jan 25 07:34:32 GMT 2023
elapsed time (seconds): 60.652
----------configuration:(3/67)----------
Boot Layer
  add exports: java.base/jdk.internal.util ALL-UNNAMED

----------System.out:(21/1777)----------
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/library_call.cpp:137
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S85856/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c344b625-6ec2-4442-aaf0-fd693fc54a6d/runs/fef4c973-9ed3-4208-bfa2-30ec084d56da/workspace/open/src/hotspot/share/opto/library_call.cpp:137), pid=62025, tid=22531
#  assert(ctrl == kit.control()) failed: Control flow was added although the intrinsic bailed out
#
# JRE version: Java(TM) SE Runtime Environment (21.0+7) (fastdebug build 21-ea+7-LTS-407)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+7-LTS-407, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, bsd-amd64)
# Core dump will be written. Default location: core.62025
#
# An error report file with more information is saved as:
# /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S85863/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/34cba6ef-59c3-4d56-b1aa-429feb6c38f1/runs/61b21536-143d-478a-8abe-112844f3b076/testoutput/test-support/jtreg_open_test_jdk_jdk_util/scratch/1/hs_err_pid62025.log
#
# Compiler replay data is saved as:
# /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S85863/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/34cba6ef-59c3-4d56-b1aa-429feb6c38f1/runs/61b21536-143d-478a-8abe-112844f3b076/testoutput/test-support/jtreg_open_test_jdk_jdk_util/scratch/1/replay_pid62025.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(49/6510)*----------


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007fd4c203ca10):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=22531, stack(0x0000700004ff6000,0x00007000050f6000)]


Current CompileTask:
C2:  27192 3361    b        java.lang.invoke.LambdaForm$MH/0x0000000801007c00::invoke (141 bytes)

Stack: [0x0000700004ff6000,0x00007000050f6000],  sp=0x00007000050f2db0,  free space=1011k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x1291279]  VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x739  (library_call.cpp:137)
V  [libjvm.dylib+0x12918db]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, __va_list_tag*)+0x3b
V  [libjvm.dylib+0x6ce53d]  report_vm_error(char const*, int, char const*, char const*, ...)+0xdd
V  [libjvm.dylib+0xcfe5cd]  LibraryIntrinsic::generate(JVMState*)+0x40d
V  [libjvm.dylib+0x7890b7]  Parse::do_call()+0xbd7
V  [libjvm.dylib+0xf98202]  Parse::do_one_bytecode()+0x232
V  [libjvm.dylib+0xf8893c]  Parse::do_one_block()+0x43c
V  [libjvm.dylib+0xf869d9]  Parse::do_all_blocks()+0x3a9
V  [libjvm.dylib+0xf8298b]  Parse::Parse(JVMState*, ciMethod*, float)+0xc1b
V  [libjvm.dylib+0x51b3da]  ParseGenerator::generate(JVMState*)+0xaa
V  [libjvm.dylib+0x7890b7]  Parse::do_call()+0xbd7
V  [libjvm.dylib+0xf98202]  Parse::do_one_bytecode()+0x232
V  [libjvm.dylib+0xf8893c]  Parse::do_one_block()+0x43c
V  [libjvm.dylib+0xf869d9]  Parse::do_all_blocks()+0x3a9
V  [libjvm.dylib+0xf8298b]  Parse::Parse(JVMState*, ciMethod*, float)+0xc1b
V  [libjvm.dylib+0x51b3da]  ParseGenerator::generate(JVMState*)+0xaa
V  [libjvm.dylib+0x636286]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15b6
V  [libjvm.dylib+0x5190c7]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x167
V  [libjvm.dylib+0x654cdb]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x63b
V  [libjvm.dylib+0x654498]  CompileBroker::compiler_thread_loop()+0x288
V  [libjvm.dylib+0xa183bf]  JavaThread::thread_main_inner()+0x1ff
V  [libjvm.dylib+0x11dab67]  Thread::call_run()+0x177
V  [libjvm.dylib+0xf509af]  thread_native_entry(Thread*)+0x14f
C  [libsystem_pthread.dylib+0x64e1]  _pthread_start+0x7d
C  [libsystem_pthread.dylib+0x1f6b]  thread_start+0xf",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8282664,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i303dn:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-25 07:25;thartmann;I think this is likely a regression from JDK-8282664.

ILW = Assert in C2 because intrinsification bailed out and left control flow behind (harmless), intermittent with single test, disable intrinsic = MLH = P4;;;","2023-01-25 07:43;thartmann;I think the problem is that the call to must_be_not_null in LibraryCallKit::inline_vectorizedHashCode adds control flow but the intrinsic can still bail out below:
https://github.com/openjdk/jdk/commit/e37078f5bb626c7ce0348a38bb86ca2ca62ba915#diff-1929ace9ae6df116e2fa2a718ed3924d9dae9a2daea454ca9a78177c21477aa3R5941

The array should only be casted once the initial checks pass and intrinsification is performed.;;;","2023-01-25 07:45;thartmann;[~redestad], [~luhenry], please have a look. It would be good to have a regression test for this. Thanks.;;;","2023-01-31 06:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12342
Date: 2023-01-31 12:41:04 +0000;;;","2023-02-01 02:57;dukebot;Changeset: 969f6a37
Author:    Claes Redestad <redestad@openjdk.org>
Date:      2023-02-01 10:55:43 +0000
URL:       https://git.openjdk.org/jdk/commit/969f6a37e4649079c7acea1952f5537fd9ba2f0a
;;;",,,,,,,,,,,,,,,,
jdk/internal/util/ByteArray/ReadWriteValues.java fails with CompilationError,JDK-8301086,5092465,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,pminborg,dfuchs,dfuchs,2023-01-25 05:36,2023-07-24 11:09,2023-10-01 09:56,2023-01-25 06:23,21,,,,,,,21,core-libs,,0,noreg-build,tier1,,,,,,,,,,,,,,"test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:203: error: method getShort in class ByteArray cannot be applied to given types;
            short actual = ByteArray.getShort(BUFF);
                                    ^
  required: byte[],int
  found:    byte[]
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:212: error: method setShort in class ByteArray cannot be applied to given types;
            ByteArray.setShort(BUFF, expected);
                     ^
  required: byte[],int,short
  found:    byte[],short
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:223: error: method getChar in class ByteArray cannot be applied to given types;
            char actual = ByteArray.getChar(BUFF);
                                   ^
  required: byte[],int
  found:    byte[]
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:232: error: method setChar in class ByteArray cannot be applied to given types;
            ByteArray.setChar(BUFF, expected);
                     ^
  required: byte[],int,char
  found:    byte[],char
  reason: actual and formal argument lists differ in length
est/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:243: error: method getInt in class ByteArray cannot be applied to given types;
            int actual = ByteArray.getInt(BUFF);
                                  ^
  required: byte[],int
  found:    byte[]
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:252: error: method setInt in class ByteArray cannot be applied to given types;
            ByteArray.setInt(BUFF, expected);
                     ^
  required: byte[],int,int
  found:    byte[],int
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:262: error: method getLong in class ByteArray cannot be applied to given types;
            long actual = ByteArray.getLong(BUFF);
                                   ^
  required: byte[],int
  found:    byte[]
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:270: error: method setLong in class ByteArray cannot be applied to given types;
            ByteArray.setLong(BUFF, expected);
                     ^
  required: byte[],int,long
  found:    byte[],long
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:280: error: method getFloat in class ByteArray cannot be applied to given types;
            float actual = ByteArray.getFloat(BUFF);
                                    ^
  required: byte[],int
  found:    byte[]
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:288: error: method setFloat in class ByteArray cannot be applied to given types;
            ByteArray.setFloat(BUFF, expected);
                     ^
  required: byte[],int,float
  found:    byte[],Float
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:298: error: method getDouble in class ByteArray cannot be applied to given types;
            double actual = ByteArray.getDouble(BUFF);
                                     ^
  required: byte[],int
  found:    byte[]
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:306: error: method setDouble in class ByteArray cannot be applied to given types;
            ByteArray.setDouble(BUFF, expected);
                     ^
  required: byte[],int,double
  found:    byte[],double
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:316: error: method setUnsignedShort in class ByteArray cannot be applied to given types;
            ByteArray.setUnsignedShort(BUFF, expected);
                     ^
  required: byte[],int,int
  found:    byte[],int
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:326: error: method getInt in class ByteArray cannot be applied to given types;
        assertThrowsOriginal(NullPointerException.class, () -> ByteArray.getInt(null));
                                                                        ^
  required: byte[],int
  found:    <null>
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:327: error: method setInt in class ByteArray cannot be applied to given types;
        assertThrowsOriginal(NullPointerException.class, () -> ByteArray.setInt(null, 1));
                                                                        ^
  required: byte[],int,int
  found:    <null>,int
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:332: error: method getInt in class ByteArray cannot be applied to given types;
        assertThrowsOriginal(IndexOutOfBoundsException.class, () -> ByteArray.getInt(new byte[1]));
                                                                             ^
  required: byte[],int
  found:    byte[]
  reason: actual and formal argument lists differ in length
test/jdk/jdk/internal/util/ByteArray/ReadWriteValues.java:333: error: method setInt in class ByteArray cannot be applied to given types;
        assertThrowsOriginal(IndexOutOfBoundsException.class, () -> ByteArray.setInt(new byte[1],1));
                                                                             ^
  required: byte[],int,int
  found:    byte[],int
  reason: actual and formal argument lists differ in length
17 errors
result: Failed. Compilation failed: Compilation failed


test result: Failed. Compilation failed: Compilation failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299576,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i303cb:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2023-01-25 06:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12196
Date: 2023-01-25 14:02:14 +0000;;;","2023-01-25 06:23;dukebot;Changeset: a23ff63a
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-01-25 14:13:22 +0000
URL:       https://git.openjdk.org/jdk/commit/a23ff63af147067e0704970a9f9e6d847df22dff
;;;","2023-01-25 06:31;dcubed;A Tier1 compilation failure is a P1 failure so I've bumped the priority
from P3 -> P1. It's a brand new test so I haven't tagged this with
'regression'. How did this possible make it past a Mach5 tier1 job?;;;","2023-01-25 06:38;dcubed;The fix for this bug is integrated in jdk-21+7-469.;;;",,,,,,,,,,,,,,,,,
Handle control characters in java_lang_String::print,JDK-8301065,5092445,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-01-25 02:52,2023-09-27 01:58,2023-10-01 09:56,2023-04-24 09:35,,,,,,,,21,hotspot,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"java_lang_String::print(...) lets the VM display String objects.  This can be called for debugging (debug.cpp) and by the fatal error report (hs_err).

Showing raw Strings means embedded control characters can interfere with the format (or, can be invisible).  We should format control characters specifically, e.g. show their hex value, rather than include actual newlines, tabs and other control characters in the output.
",,,,,,,,,,JDK-8316362,JDK-8315173,JDK-8314659,JDK-8317036,JDK-8314864,JDK-8314865,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3037v:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-25 04:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12190
Date: 2023-01-25 11:51:37 +0000;;;","2023-04-24 09:35;dukebot;Changeset: 41d6be4d
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-04-24 16:33:54 +0000
URL:       https://git.openjdk.org/jdk/commit/41d6be4d807921a91339029ae96e8dc14561bea6
;;;","2023-09-13 04:53;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Low risk, simple improvement to printing for debugging.
Clean backport. SAP nightly testing passed.;;;","2023-09-13 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1731
Date: 2023-09-13 11:51:47 +0000;;;","2023-09-22 02:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2142
Date: 2023-09-22 09:39:31 +0000;;;","2023-09-25 19:02;andrewlu;Fix request [11u]

I backport this for parity with 11.0.22-oracle.
Low risk, simple improvement to printing for debugging.
Clean backport. SAP nightly testing passed.
;;;",,,,,,,,,,,,,,,
ClassCastException in switch with generic record ,JDK-8301025,5092388,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,abimpoudis,eananeva,eananeva,2023-01-24 12:44,2023-02-13 11:04,2023-10-01 09:56,2023-02-06 04:25,21,,,,,,,21,tools,,0,conformance,tck-red,tck-red-21,,,,,,,,,,,,,"The following code throws a ClassCastException in JDK21 b6 but compiles with the latest JDK20:

record TestRecord<T extends String>(T t) {}
…
    public static void main(String argv[]) {

        TestRecord r = new TestRecord(""a"");
        switch (r) {
            case TestRecord(String cS)-> {
                System.out.println(""String"");
            }
            case TestRecord(Object cO)->{
                System.out.println(""Object"");
            }
        }
    }

Exception:
An exception has occurred in the compiler (21-ea). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.ClassCastException: class com.sun.tools.javac.code.Type$TypeVar cannot be cast to class com.sun.tools.javac.jvm.PoolConstant$LoadableConstant (com.sun.tools.javac.code.Type$TypeVar and com.sun.tools.javac.jvm.PoolConstant$LoadableConstant are in module jdk.compiler of loader 'app')
       at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.toLoadableConstant(TransPatterns.java:836)
       at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.lambda$handleSwitch$4(TransPatterns.java:485)
       at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
       at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1921)
       at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
       at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
       at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
       at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1921)
       at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
       at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
       at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)
       at java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)
       at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:616)
       at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.handleSwitch(TransPatterns.java:487)
       at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitSwitch(TransPatterns.java:372)
       at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitch.accept(JCTree.java:1305)
       at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
       at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:70)
       at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.handleSwitch(TransPatterns.java:551)
       at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitSwitch(TransPatterns.java:372)
       at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSwitch.accept(JCTree.java:1305)
       at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
       at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitBlock(TransPatterns.java:1068)
       at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1088)
       at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
       at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitMethodDef(TreeTranslator.java:150)
       at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitMethodDef(TransPatterns.java:1005)
       at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:912)
       at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
       at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:70)
       at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.visitClassDef(TreeTranslator.java:139)
       at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.visitClassDef(TransPatterns.java:1134)
       at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:810)
       at jdk.compiler/com.sun.tools.javac.tree.TreeTranslator.translate(TreeTranslator.java:58)
       at jdk.compiler/com.sun.tools.javac.comp.TransPatterns.translateTopLevelClass(TransPatterns.java:1208)
       at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.desugar(JavaCompiler.java:1600)
       at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.desugar(JavaCompiler.java:1443)
       at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:963)
       at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:104)
       at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
       at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)
       at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)
       at jdk.compiler/com.sun.tools.javac.launcher.Main.compile(Main.java:399)
       at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:202)
       at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

JDK:
java 21-ea 2023-09-19 LTS
Java(TM) SE Runtime Environment (build 21-ea+6-LTS-365)
Java HotSpot(TM) 64-Bit Server VM (build 21-ea+6-LTS-365, mixed mode, sharing)

If run in JDK20, the code above prints “String” as I would expect.
Both r instanceof TestRecord(Object cS) and r instanceof TestRecord(String cS) return true in JDK21.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21.0.6,,,,,,,,"0|i302v7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-01-25 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12200
Date: 2023-01-25 15:11:40 +0000;;;","2023-02-06 04:25;dukebot;Changeset: 7ac2079b
Author:    Aggelos Biboudis <abimpoudis@openjdk.org>
Committer: Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-02-06 12:24:21 +0000
URL:       https://git.openjdk.org/jdk/commit/7ac2079ba7dd07c61576e0b39692a94eecc96e07
;;;",,,,,,,,,,,,,,,,,,,
Video distortion is observed while playing youtube video ,JDK-8301022,5092384,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jbhaskar,hmeda,hmeda,2023-01-24 10:03,2023-03-13 17:37,2023-10-01 09:56,2023-02-23 05:14,8u371,jfx21,,,,,,jfx21,javafx,,0,CPU23_04-critical-approved,CPU23_04-critical-SQE-OK,regression,sn_136,sn_138,webkit-2.38,,,,,,,,,,"After updating to webkit615.1, issue is observed while playing youtube video.
Play Button and volume control buttons are also not displayed.
As seen in the image attached, the searchbar in youtube is wrapped around to the left and also, the play button ,volume button and the volume slider are not visible.",,,,,,,,,,JDK-8304106,JDK-8303143,JDK-8303331,JDK-8304096,JDK-8304097,,,,,,,,,,,,,JDK-8303217,,,,,JDK-8300737,JDK-8300737,,,,JDK-8288413,JDK-8302284,,,,,,JDK-8299977,,,,,"2023-01-24 10:06;hmeda;Screen Shot 2023-01-23 at 5.02.27 PM.png;https://bugs.openjdk.org/secure/attachment/102394/Screen+Shot+2023-01-23+at+5.02.27+PM.png",,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i302ub:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-01-24 10:08;hmeda;When run with jfx-8u, half of the video screen goes blank when the cursor is hovered on the progress bar in youtube;;;","2023-02-19 21:19;jbhaskar;Issue identified old style media controls remove in WebKit now
Need to use modern media controls, a fix is tested with mac ( works )
Need to test with Linux/Window machine, then the code would be pushed.;;;","2023-02-21 23:47;jbhaskar;Use mediaControlsAdwaitaJavaScript and mediaControlsAdwaitaUserAgentStyleSheet
which is compatible with RenderThemeJava
https://github.com/openjdk/jfx/pull/1045;;;","2023-02-21 23:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1045
Date: 2023-02-22 07:46:58 +0000;;;","2023-02-23 05:14;dukebot;Changeset: 14883a29
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-02-23 13:11:58 +0000
URL:       https://git.openjdk.org/jfx/commit/14883a296ac08a91fc24570a7479a6c8c2117643
;;;","2023-03-13 15:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/127
Date: 2023-03-13 22:32:44 +0000;;;","2023-03-13 16:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/137
Date: 2023-03-13 22:32:02 +0000;;;","2023-03-13 17:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx20u/pull/7
Date: 2023-03-14 00:08:37 +0000;;;",,,,,,,,,,,,,
Update libxml2 to 2.10.3,JDK-8301009,5092370,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,vdyakov,vdyakov,2023-01-24 09:07,2023-06-20 06:37,2023-10-01 09:56,2023-03-16 05:12,8u381,jfx21,,,,,,jfx21,javafx,,0,3rdparty,jfx20u-fix-request,jfx20u-fix-yes,sn_139,,,,,,,,,,,,"We currently use libxml2 version 2.9.14. We should update to the latest stable release, which is version 2.10.3

",,,,,,,,,,JDK-8305855,JDK-8304427,JDK-8310383,JDK-8305331,JDK-8310382,JDK-8305330,,,,,,,,,,,,JDK-8294154,JDK-8275181,JDK-8301014,,JDK-8306115,JDK-8286256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i302r7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-03-14 01:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1058
Date: 2023-03-14 08:04:04 +0000;;;","2023-03-16 05:12;dukebot;Changeset: 935c7b79
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Date:      2023-03-16 12:10:22 +0000
URL:       https://git.openjdk.org/jfx/commit/935c7b797d79407d741735324313684617d1292d
;;;","2023-03-20 08:22;kcr;Once jfx20u is open for 20.0.2 fixes (for July), this should be backported to jfx20u.;;;","2023-04-11 05:35;hmeda;Fix Request JFX20u:
Request to approve backport of this commit to jfx20u.
Clean backport and low risk.Needed to keep native WebKit code in sync ;;;","2023-04-11 08:56;kcr;Approved to backport to jfx20u.;;;","2023-04-11 10:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx20u/pull/13
Date: 2023-04-11 17:03:51 +0000;;;","2023-06-20 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/132
Date: 2023-06-20 12:45:00 +0000;;;","2023-06-20 06:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/140
Date: 2023-06-20 13:18:18 +0000;;;",,,,,,,,,,,,,
[lworld] Handle mismatches of the preload attribute in the calling convention,JDK-8301007,5092368,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,thartmann,thartmann,thartmann,2023-01-24 08:14,2023-06-02 05:37,2023-10-01 09:56,2023-04-19 00:52,repo-valhalla,,,,,,,repo-valhalla,hotspot,,0,lw4,lworld,,,,,,,,,,,,,,"C2 passes inline type arguments in scalarized form if the calling convention of the resolved method supports this. That means that the calling conventions of the overriding methods need to support scalarization as well. The preload attribute added with JDK-8281116 does not guarantee any consistency between the overridden and overriding method. We need to fix the calling convention accordingly.

Below is a summary I wrote a while ago.

-------------------------------------------------------------------------------------------

Not following the ""global cache"" version of option (3) for now, I was thinking about other ways to
make it work.

In general, we would always stick to the calling convention of the parent method. Our ""multiple
interface example"" would be handled like this:

interface I1 {
  void m(L*MyValue); // Scalarized
}

interface I2 {
  void m(LMyValue); // Non-scalarized
}

class C implements I1, I2 {
  void m(LMyValue) { }
}

Once C::m is linked, we detect the mismatch and force C::m to always use the non-scalarized calling
convention. Now if the method does not have any other scalarized arguments, that would mean that the
scalarized entry point is unused and just points to the non-scalarized entry point. But in this case
we could always create it and add code that triggers deoptimization and re-execution in the caller.

That's similar to option (2) in that we resolve the mismatch with deoptimization but it is easier to
implement and deoptimization would only be triggered in edge cases (otherwise we would just use the
non-scalarized calling convention right from the beginning). Also, I found several flaws with option
(2) and resolving them would add lots of additional complexity.

Potentially, we could also implement it the other way around: Always use the scalarized calling
convention for C::m but there are some technical challenges to make that work.


-------------------------------------------------------------------------------------------


I had a Zoom session with John this morning. I'm trying to summarize some of what we discussed.

----------------
Argument passing
----------------

- The (optimized) calling convention is fixed at method link time (when the holder klass is loaded).
- The interpreter and C1 always pass arguments in non-scalarized form.
- C2 passes inline type arguments in scalarized form if the calling convention of the resolved
method supports this. That means that the calling conventions of the overriding methods need to
support scalarization as well. Otherwise, we have a mismatch that can only be detected at runtime.
With Q, such a mismatch is not possible but with L* it is.
- Translations between non-scalarized and scalarized arguments are performed in the method entry
points for compiled-to-compiled calls and in the adapter for compiled-to-interpreted or
interpreted-to-compiled calls. It's not feasible to emit multiple entry points and adapters to
handle all the possible mismatches.

Options for handling mismatches:
(1) Reject classes that introduce mismatches during class loading.
(2) Detect mismatches at runtime during resolution of a C2 compiled call when the calling convention
used by the resolved method differs from the calling convention expected by the selected method. To
resolve the mismatch, deoptimize the C2 compiled caller and re-execute the call in the interpreter.
Potentially re-compile the caller without using the scalarized calling convention.
(3) Always use the calling convention of the overridden method and ignore the stars attached to the
arguments of the overriding method.

As I understand, (1) is not an option because we need to support migration.

For (2), we would need to implement deoptimization from call resolution and re-execution of a call
in the interpreter. Without prototyping, it's hard to tell how complicated that would be. This also
has the side effect that once a mismatch is detected for a (virtual) call, we would fall back to
using the non-scalarized calling convention for that call (i.e. for all arguments / callees).

Option (3) would make mismatches impossible. But there's one scenario that we can't handle, namely a
class implementing two interfaces both defining the same method with mismatching star settings:

interface I1 {
  void m(L*MyValue); // Scalarized
}

interface I2 {
  void m(LMyValue); // Non-scalarized
}

class C implements I1, I2 {
  void m(LMyValue) { }
}

No matter what calling convention we choose for C::m, a mismatch is possible through I1 (scalarized)
or I2 (non-scalarized) interface calls.

One variant of option (3) that John and I discussed, would be a dictionary that keeps track of the
calling convention used for each class.

- If I1 is loaded first, 'MyValue' would be loaded early due to the * and the dictionary would keep
track of 'MyValue' being scalarized. When I2::m and C::m are then loaded, we would consult the
dictionary and find that the scalarized calling convention should be used.
- If I2 is loaded first, 'MyValue' would not be loaded early and the dictionary would keep track of
'MyValue' being non-scalarized. When I1::m and C::m are then loaded, we would consult the dictionary
and find that the non-scalarized calling convention should be used.

I'm not sure how feasible that is though. Open questions are:
- Where would we keep track of this?
- Is the footprint overhead acceptable?
- What about concurrent loading of classes?

Also, this option has the side effect that the star setting is often ignored and the class loading
order has an impact on the calling convention of methods of completely unrelated classes.


-----------------
Return processing
-----------------

To avoid costly runtime checks in C2 compiled code to handle scalarized and non-scalarized returns,
the interpreter, C1 and C2 are *always* returning Q's in a scalarized form. Because the interpreter
and C1 do not support scalarization, an additional ""field"" is returned that either contains a
pointer to a heap buffer or a specially encoded Klass*. The interpreter and C1 can then check that
field and either use the pointer to the buffer or re-buffer.

Now current code partially relies on the fact that a Q return is always scalarized and an L return
is never scalarized. With the L* proposal, that would no longer be guaranteed because there can be a
mismatch between the resolved method having an L (non-scalarized) return and the selected method
having a L* (scalarized) return.

Our options are similar to the argument passing ones. For (2) we would detect the mismatch by adding
additional runtime checks to the interpreter and C1 (as I described in my earlier emails). I think
the overhead would be negligible because we already need these checks and would just apply them in
some additional cases. For (3) we would always choose the return convention the dictionary tells us
to use and mismatches would be impossible.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8308756,,,,,,,JDK-8303095,JDK-8303182,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i302qr:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-02-24 10:12;jrose;In the given example, C <: I1, I2.  And I1 disagrees with I2 in Q-ness (in Q-folding terms of JDK-8303095, or in star-ness in L* vs. L in Preload terms).  In the worst case, I1 and I2 have been loaded for many milliseconds and both have thriving separate implementation hierarchies.  Then, suddenly, C is loaded and C requires those hierarchies to overlap.  Then there is a consistency problem; one of I1 or I2 is wrong, where both were right a millisecond ago.

The proposal for Q-folding in JDK-8303095 may allow option (1), ICCE, in more cases, since an explicit Q-marked descriptor is a stronger grounds for throwing ICCE than associated data in a Preload attribute or a TR (type restriction).  We can expect that C.class is a witness to consistent I1.class and I2.class files.  The only way for the error to happen is for I1.class or I2.class to be recompiled after C.class.  If preloads are used, then C.class is no longer a full witness to I1 and I2 agreeing, because the *-ness comes indirectly from the Preload resolution.  But with Q-folding, the witnessing of C.class is directly encoded in C.class.

The option (3) seems best, however, if we can limit the dictionary complexity and footprint.  Option (3), either as a backup to (1) in some cases, or stand-alone, would allow Preload (or similar tactics) to flatten even pure L-types.

Here are some thoughts in the dictionary direction:

The dictionary can be named `SignatureUnfolding`.  (HotSpot uses the non-standard term “signature” for what the JVMS call “method descriptors”.)

`SignatureUnfolding` records L-flavored descriptors and how they are allowed to be related to Q-unfolded Q-flavored descriptors.  (Or alternatively, individual field types, single L-types and a bit which says whether they are allowed to unfold into Q-types.)

The items in `SignatureUnfolding` can be designed as either types or whole signatures (folded to all L-types) or even as name/signature pairs.  Storing more information may or may not increase dictionary size; more information makes conflicts less likely.

Each item is optionally accompanied by an unfolding (full or partial) of L-types to Q-types, or alternatively by an indication that there is no unfolding allowed.

Once an item is entered into the dictionary it is never changed.  (Perhaps class unloading could eventually remove it if the symbols go completely unused.  Perhaps that is not worth the effort.)

Items are added to the dictionary early enough so that they implement a global, permanent decision on whether any method (anywhere, any time in the future execution of this JVM) can unfold its calling sequence to scalarize some of its arguments or returns as Q-types.

Note that a method descriptor may contain multiple independently foldable Q-types along with a mix of non-folded L-types.  This whole exercise assumes that any single method descriptor (or name+descriptor pair, alternatively) is subject to a global decision as to exactly which L-types may be unfolded to Q-types, even for unrelated API hierarchies that happen to mention the same method names and/or types.

The footprint of the `SignatureUnfolding` table is one or two words per entry (two or three for pairs).  (There may also be overhead for a hash table, a skip-list, etc.)  The entries can be Symbol pointers (or pairs of them), since we are just talking about CONSTANT_Utf8 items here (or pairs).

(Idea of the day:  Perhaps we should consider compressing our `Symbol` pointers in HotSpot, along the lines of the way we compress oops.  We never need more than 4Gs worth of them, surely, even if we “waste” index space by continuing to lay out the chars alongside the headers.  And they are ubiquitous.)

The dictionary would hold folded (L-only) types, signatures, or name/signature pairs, plus a global decision about whether there is an unfolded Q-flavored signature (or type) that matches the unfolded signature (or type).

Those items would be added to the dictionary *for each interface method*.  (This is potentially a lot.  Nearly all of them will have no Q-flavored component.)

The number of entries in `SignatureUnfolding` could be reduced by having a secondary dictionary `ByReferenceOnly` that lists just classes (perhaps class names only) which are confirmed to never fold, like L-Object, L-String, L-List.

Adding a class (or class name) to `ByReferenceOnly` is a permanent decision.  Loading a value class of the exact same name would cause the JVM not only to fold all Q-types of that class to L-types, but also to avoid scalarizing those values in interface method APIs.  Thus, no entries would be added to `SignatureUnfolding` which mention any of those classes.

If an interface method signature is considered for entry in the `SignatureUnfolding` dictionary, its types are first evaluated to see if they might possibly (in the future) support Q-folding; if not, they are put in smaller dictionary.  If all types in the signature fail to support Q-folding, then there is no need to make an entry in the larger dictionary.

This process of evaluating individual L-types seems tricky and complex.  But it might naturally piggy-back on top of the class loader constraint checks that we do during class linking.  The idea would be to store the decisions of `ByReferenceOnly` in the class loader constraint dictionary (as an extra bit somewhere), instead of in a physically separate table.  (Or not:  Just loading an interface does not record CLC records; I think you have to load two classes in two CLs to trigger CLC activity.)

In the example above, in Q-folding terms, the main dictionary might hold the name/signature pair `m`, `(LMyValue;)V` (or just the signature, or just `LMyValue;`).  If I1 is loaded first, since I1 uses the Q-flavored descriptor, the dictionary will contain this entry:

  `m`, `(LMyValue;)V`, `(QMyValue;)V`

Note that the Q-type (or a corresponding Preload entry or TR) would have caused loading of MyValue.class, ensuring that the Q was well-formed.  This is the good case.

But if I2 is loaded first, which is the less-good case, the dictionary will contain this entry:

  `m`, `(LMyValue;)V`, null  (I hope we compress this common case to 2 words)

In that case, when I1 is loaded later, the JVM will refuse to scalarize the argument.

Alternatively, if I2 is loaded first, *and* the JVM decides that `MyValue` will never be Q-flavored, the side dictionary `ByReferenceOnly` can be loaded with `MyValue`, and the `SignatureUnfolding` dictionary will not need an entry.

When loading C.class, I1.class and I2.class are fully loaded (as C’s supers) and so all the decisions are made already.  When linking C and setting up v-tables, C will respect the standing decisions in `SignatureUnfolding`.

Alternatively, we could give methods up to three distinct entry points.  Every method would have a fully folded entry point with all L-types.  Methods defined in classes with Q-types might scalarized entry points for those types, based only on super class methods (single inheritance).  Methods defined in interfaces with Q-types would use the `SignatureUnfolding` to make consistent scalarization decisions.  Methods which override/implement both kinds of methods (as in the example of C above) would have all three entry points.
;;;","2023-04-18 04:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/valhalla/pull/834
Date: 2023-04-18 11:12:13 +0000;;;",,,,,,,,,,,,,,,,,,,
Add curl support to createJMHBundle.sh,JDK-8300997,5092354,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,erikj,erikj,erikj,2023-01-24 05:45,2023-09-28 02:12,2023-10-01 09:56,2023-01-25 06:21,,,,,,,,21,infrastructure,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,"Creating this on behalf of Eirik Bjørsnøs.

The following PR adds support for running createJMHBundle.sh on MacOS,
where wget is not installed by default:

https://github.com/openjdk/jdk/pull/12164

I would appreciate help in creating a JBS issue for this PR, since I'm
not an Author.",,,,,,,,,,JDK-8317223,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i302nn:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-24 05:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12164
Date: 2023-01-24 09:39:19 +0000;;;","2023-01-25 06:21;dukebot;Changeset: 61775c85
Author:    Eirik Bjorsnos <eirbjo@gmail.com>
Committer: Erik Joelsson <erikj@openjdk.org>
Date:      2023-01-25 14:01:03 +0000
URL:       https://git.openjdk.org/jdk/commit/61775c85b0989e4de310290e9441851f32cb84a3
;;;","2023-09-27 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1803
Date: 2023-09-27 12:58:16 +0000;;;","2023-09-27 06:10;roboduke;[jdk17u-fix-request] Approval Request from Aleksey Shipilëv
Allows JMH bundle creation on MacOS, simplifies performance testing;;;",,,,,,,,,,,,,,,,,
[XWayland] screencast may hang sometimes,JDK-8300994,5092351,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,azvegint,azvegint,azvegint,2023-01-24 04:24,2023-02-09 13:29,2023-10-01 09:56,2023-02-09 08:01,,,,,,,,internal,client-libs,,0,sn_136,sn_137,,,,,,,,,,,,,,"Current screenshot prototype may hang/crash sometimes
https://github.com/openjdk/wakefield/tree/proto_screencast",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280982,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i302mz:",9223372036854775807,,,,,,,,,,,,"2023-02-09 08:01;azvegint;Changeset: 6e8dc976
Author: Aleksandr Zvegintsev <alexander.zvegintsev@oracle.com>
Date: 2023-02-09 16:50:12 +0100
URL: https://github.com/openjdk/wakefield/commit/6e8dc976f3b9b364e75ad918f0f9f4b640f11e79;;;",,,,,,,,,,,,,,,,,,,,
Build failure on 32-bit platforms after JDK-8281213,JDK-8300981,5092340,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2023-01-24 02:55,2023-01-30 13:05,2023-10-01 09:56,2023-01-24 15:46,21,,,,,,,21,hotspot,,0,nmt,noreg-build,oraclejdk-na,tencent-interest,,,,,,,,,,,,"
* For target hotspot_variant-server_libjvm_objs_memReporter.o:
In file included from /home/jdk/src/hotspot/share/memory/allocation.hpp:29:0,
                 from /home/jdk/src/hotspot/share/cds/metaspaceShared.hpp:28,
                 from /home/jdk/src/hotspot/share/cds/filemap.hpp:28,
                 from /home/jdk/src/hotspot/share/services/memReporter.cpp:25:
/home/jdk/src/hotspot/share/services/memReporter.hpp: In member function 'int64_t MemReporterBase::diff_in_current_scale(size_t, size_t) const':
/home/jdk/src/hotspot/share/services/memReporter.hpp:79:15: error: comparison is always true due to limited range of data type [-Werror=type-limits]
     assert(s1 < INT64_MAX, ""exceeded possible memory limits"");
               ^
/home/jdk/src/hotspot/share/utilities/debug.hpp:59:9: note: in definition of macro 'vmassert'
   if (!(p)) {                                                                  \
         ^
/home/jdk/src/hotspot/share/services/memReporter.hpp:79:5: note: in expansion of macro 'assert'
     assert(s1 < INT64_MAX, ""exceeded possible memory limits"");
     ^~~~~~
/home/jdk/src/hotspot/share/services/memReporter.hpp:80:15: error: comparison is always true due to limited range of data type [-Werror=type-limits]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8281213,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i302kj:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-24 03:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12165
Date: 2023-01-24 11:03:15 +0000;;;","2023-01-24 15:46;dukebot;Changeset: 13394615
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-01-24 23:44:35 +0000
URL:       https://git.openjdk.org/jdk/commit/133946159c699afa2748b41271c15c5a7ec5bc53
;;;",,,,,,,,,,,,,,,,,,,
HTML default Range input control not rendered,JDK-8300954,5092303,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,hmeda,hmeda,2023-01-23 22:55,2023-03-14 05:40,2023-10-01 09:56,2023-03-06 08:01,8u371,jfx21,,,,,,jfx21,javafx,,0,CPU23_04-critical-approved,CPU23_04-critical-SQE-OK,regression,sn_136,sn_137,sn_138,sn_139,webkit-2.38,,,,,,,,"Slider(HTML input as type Range) is not rendered with webkit-615.1. Hence, the unit test FormcontrolsTest is failing",,,,,,,,,,JDK-8303734,JDK-8304100,JDK-8304103,JDK-8303687,JDK-8304108,,,,,,,,,,,,,,,,,,,JDK-8300194,JDK-8293387,,,JDK-8293391,,,,,,,JDK-8303217,JDK-8299977,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i302cb:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-02-28 06:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1049
Date: 2023-02-26 16:47:23 +0000;;;","2023-03-06 08:01;dukebot;Changeset: bbdc5998
Author:    Jay Bhaskar <jbhaskar@openjdk.org>
Date:      2023-03-06 15:59:47 +0000
URL:       https://git.openjdk.org/jfx/commit/bbdc59984a7f6427a5ad8b8ad39aa93ee3b4abbe
;;;","2023-03-13 16:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/128
Date: 2023-03-13 23:22:53 +0000;;;","2023-03-13 16:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/138
Date: 2023-03-13 23:22:49 +0000;;;","2023-03-13 17:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx20u/pull/8
Date: 2023-03-14 00:16:42 +0000;;;",,,,,,,,,,,,,,,,
ClassDesc::ofInternalName missing @since tag,JDK-8300953,5092302,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asotona,darcy,darcy,2023-01-23 22:39,2023-02-01 22:38,2023-10-01 09:56,2023-01-27 07:12,20,,,,,,,20,core-libs,,0,jdk20-fix-request,jdk20-fix-yes,noreg-doc,,,,,,,,,,,,,"When ClassDesc::ofInternalName was added in JDK 20 (JDK-8278863), it was missing an @since tag; this should be added retroactively.",,,,,,,,,,JDK-8301541,JDK-8301290,JDK-8301530,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278863,,,,,,,JDK-8300698,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,"0|i302c3:",9223372036854775807,b34,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-01-24 05:28;asotona;Fix Request

ClassDesc::ofInternalName was added in JDK 20, however @since tag is missing.
This is doc-only fix.

Thanks.;;;","2023-01-24 05:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/115
Date: 2023-01-24 13:35:14 +0000;;;","2023-01-27 07:05;jjg;Fix request approved;;;","2023-01-27 07:12;dukebot;Changeset: b22e5216
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-01-27 15:09:53 +0000
URL:       https://git.openjdk.org/jdk20/commit/b22e5216c4ead4621f137086db6f5b6a0c3982c7
;;;",,,,,,,,,,,,,,,,,
JDK-8299684 breaks x86 build,JDK-8300942,5092288,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bpb,iklam,iklam,2023-01-23 16:20,2023-01-30 13:05,2023-10-01 09:56,2023-01-24 12:34,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"See https://github.com/iklam/jdk/actions/runs/3991101954/jobs/6845533831


=== Output from failing command(s) repeated here ===
* For target support_test_jdk_jtreg_native_support_libNewDirectByteBuffer_libNewDirectByteBuffer.o:
/home/runner/work/jdk/jdk/test/jdk/java/nio/jni/libNewDirectByteBuffer.c: In function 'Java_NewDirectByteBuffer_newDirectByteBuffer':
/home/runner/work/jdk/jdk/test/jdk/java/nio/jni/libNewDirectByteBuffer.c:33:45: error: cast to pointer from integer of different size [-Werror=int-to-pointer-cast]
   33 |     return (*env)->NewDirectByteBuffer(env, (void*)addr, size);
      |                                             ^
/home/runner/work/jdk/jdk/test/jdk/java/nio/jni/libNewDirectByteBuffer.c: In function 'Java_NewDirectByteBuffer_getDirectBufferAddress':
/home/runner/work/jdk/jdk/test/jdk/java/nio/jni/libNewDirectByteBuffer.c:49:12: error: cast from pointer to integer of different size [-Werror=pointer-to-int-cast]
   49 |     return (jlong)(*env)->GetDirectBufferAddress(env, buf);
      |            ^
cc1: all warnings being treated as errors

* All command lines available in /home/runner/work/jdk/jdk/build/linux-x86/make-support/failure-logs.
=== End of repeated output ===

The fix would be to follow JDK-8236634:

/test/jdk/java/foreign/libNativeAccess.c:    jlong addr = (jlong)(uintptr_t)(*env)->GetDirectBufferAddress(env, buf);
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8236634,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3028z:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-01-23 18:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12157
Date: 2023-01-24 02:38:29 +0000;;;","2023-01-24 12:34;dukebot;Changeset: b678e700
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-01-24 20:32:46 +0000
URL:       https://git.openjdk.org/jdk/commit/b678e70003cc2c84df426bb63a07f43e508604bf
;;;",,,,,,,,,,,,,,,,,,,
sun/security/provider/certpath/OCSP/OCSPNoContentLength.java fails due to network errors,JDK-8300939,5092283,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,jnimeh,jnimeh,jnimeh,2023-01-23 14:41,2023-08-04 12:48,2023-10-01 09:56,2023-03-14 08:45,21,,,,,,,21,security-libs,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,problemlist,tier2,,,,,,,,,,,"The new sun/security/provider/certpath/OCSP/OCSPNoContentLength appears to be failing due to a SocketException occurring when the client CertPathValidator tries to perform a OCSP lookup on the certificate.

System.err reports:
java.security.cert.CertPathValidatorException: Unable to determine revocation status due to network error
	at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:135)
	at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:224)
	at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:144)
	at java.base/sun.security.provider.certpath.PKIXCertPathValidator.engineValidate(PKIXCertPathValidator.java:83)
	at java.base/java.security.cert.CertPathValidator.validate(CertPathValidator.java:309)
	at OCSPNoContentLength.main(OCSPNoContentLength.java:90)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.net.SocketException: Connection reset
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:313)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:341)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:791)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:1099)
	at java.base/java.io.BufferedInputStream.fill(BufferedInputStream.java:258)
	at java.base/java.io.BufferedInputStream.read1(BufferedInputStream.java:313)
	at java.base/java.io.BufferedInputStream.implRead(BufferedInputStream.java:386)
	at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:365)
	at java.base/java.io.FilterInputStream.read(FilterInputStream.java:119)
	at java.base/sun.net.www.protocol.http.HttpURLConnection$HttpInputStream.read(HttpURLConnection.java:3652)
	at java.base/java.io.InputStream.readNBytes(InputStream.java:409)
	at java.base/java.io.InputStream.readAllBytes(InputStream.java:346)
	at java.base/sun.security.provider.certpath.OCSP.getOCSPBytes(OCSP.java:223)
	at java.base/sun.security.provider.certpath.OCSP.check(OCSP.java:133)
	at java.base/sun.security.provider.certpath.RevocationChecker.checkOCSP(RevocationChecker.java:780)
	at java.base/sun.security.provider.certpath.RevocationChecker.check(RevocationChecker.java:369)
	at java.base/sun.security.provider.certpath.RevocationChecker.check(RevocationChecker.java:343)
	at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:125)
	... 9 more

JavaTest Message: Test threw exception: java.security.cert.CertPathValidatorException: Unable to determine revocation status due to network error
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.security.cert.CertPathValidatorException: Unable to determine revocation status due to network error",,,,,,,,,,JDK-8308873,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296343,JDK-8300946,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3027v:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2023-02-01 10:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12370
Date: 2023-02-01 18:10:41 +0000;;;","2023-03-14 08:45;dukebot;Changeset: da044dd5
Author:    Jamil Nimeh <jnimeh@openjdk.org>
Date:      2023-03-14 15:42:47 +0000
URL:       https://git.openjdk.org/jdk/commit/da044dd5698d14eccd2a30a24cc691e30fa00cbd
;;;","2023-05-24 07:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1394
Date: 2023-05-24 14:44:08 +0000;;;","2023-05-25 00:27;goetz;Fix request [17u]

Required fix for tests after  JDK-8296343.
No risk, test only.;;;","2023-05-31 10:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1921
Date: 2023-05-31 17:10:40 +0000;;;","2023-06-07 11:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/333
Date: 2023-06-07 18:28:23 +0000;;;",,,,,,,,,,,,,,,
Several startup regressions  ~6-70% in 21-b6 all platforms,JDK-8300926,5092266,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,rehn,ecaspole,ecaspole,2023-01-23 12:49,2023-07-13 03:08,2023-10-01 09:56,2023-03-13 02:37,21,,,,,,,21,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-21,perf-regression,,,,,,,,,,,,"Seems to be related to 
https://bugs.openjdk.org/browse/JDK-8299074

ContinuousCallSiteTargetChange.java seems to be most affected by this and may time out (see JDK-8302606 and comments in JDK-8299074).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291237,JDK-8302606,JDK-8302608,JDK-8302314,JDK-8299074,,,,,JDK-8304743,,,,,"2023-02-22 10:51;dcubed;jdk-21+10_macosx-aarch64.8300926.zip;https://bugs.openjdk.org/secure/attachment/102759/jdk-21%2B10_macosx-aarch64.8300926.zip",,,,,,,,,,,,,,,b06,,,,,,,,,"0|i30243:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2023-01-23 23:54;thartmann;Thanks for reporting, Eric. I'll take a look.;;;","2023-01-23 23:58;thartmann;ILW = Significant startup regressions (regression in JDK 21), with various benchmarks, no known workaround = MHH = P2;;;","2023-01-24 00:49;thartmann;Discussed this with Robbin, he'll take a look. Thank you! ;;;","2023-02-16 04:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12585
Date: 2023-02-16 08:38:42 +0000;;;","2023-02-16 08:19;dcubed;This bug is also considered to be the cause of:

    JDK-8302606 compiler/jsr292/ContinuousCallSiteTargetChange.java times out with slowdebug bits

so the disable that I'm testing in jdk-21+10 stress testing:

    JDK-8302607 disable ContinuousCallSiteTargetChange.java in slowdebug mode

won't need to be integrated since this bug will likely be fixed soon.;;;","2023-02-22 10:51;dcubed;Here's the logs from my jdk-21+10 stress run sightings on macosx-aarch64:

$ unzip -l jdk-21+10_macosx-aarch64.8300926.zip
Archive:  jdk-21+10_macosx-aarch64.8300926.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    53466  02-17-2023 07:57   jdk-21+10_1/failures.macosx-aarch64/ContinuousCallSiteTargetChange.jtr.fastdebug
    53585  02-18-2023 09:34   jdk-21+10_2/failures.macosx-aarch64/ContinuousCallSiteTargetChange.jtr.fastdebug
    68717  02-19-2023 11:02   jdk-21+10_3/failures.macosx-aarch64/ContinuousCallSiteTargetChange.jtr.fastdebug
---------                     -------
   175768                     3 files;;;","2023-03-13 02:36;dukebot;Changeset: c183fce9
Author:    Robbin Ehn <rehn@openjdk.org>
Date:      2023-03-13 09:34:00 +0000
URL:       https://git.openjdk.org/jdk/commit/c183fce9543ca15f5db632babecdb7797d0745e4
;;;","2023-04-16 00:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1243
Date: 2023-04-16 07:33:49 +0000;;;","2023-07-13 03:08;enikitin;Verified manually, by running the provided test:

compiler/jsr292/ContinuousCallSiteTargetChange.java

The JDK-21+13 can't run the test (times out), in JDK-21+26 the run time is acceptable. Given that our CI does run the test without failures, I consider the bug verified.;;;",,,,,,,,,,,,
Method::invoke throws wrong exception type when passing wrong number of arguments to method with 4 or more parameters,JDK-8300924,5092264,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mchung,leder,leder,2023-01-23 11:54,2023-07-21 07:35,2023-10-01 09:56,2023-01-27 09:15,18.0.1,18.0.2.1,19.0.1,19.0.2,,,,21,core-libs,,0,jooq-found,regression,,,,,,,,,,,,,,"Here's a simple reproducer:


import java.lang.reflect.Method;
import java.util.stream.IntStream;

public class Reflection {

    public static void m1(Object a) {}
    public static void m2(Object a, Object b) {}
    public static void m3(Object a, Object b, Object c) {}
    public static void m4(Object a, Object b, Object c, Object d) {}

    public static void main(String[] args) throws Exception {
        for (int i = 1; i < 5; i++) {
            try {
                Method m = Reflection.class.getMethod(""m"" + i, IntStream.range(0, i).mapToObj(x -> Object.class).toArray(Class<?>[]::new));
                System.out.println(m);
                m.invoke(Reflection.class);
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}



On JDK 17, when running this:
""c:\Program Files\Java\jdk-17\bin\java.exe"" Reflection.java


The above program prints the expected output


public static void Reflection.m1(java.lang.Object)
java.lang.IllegalArgumentException: wrong number of arguments
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at Reflection.main(Reflection.java:16)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
public static void Reflection.m2(java.lang.Object,java.lang.Object)
java.lang.IllegalArgumentException: wrong number of arguments
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at Reflection.main(Reflection.java:16)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
public static void Reflection.m3(java.lang.Object,java.lang.Object,java.lang.Object)
java.lang.IllegalArgumentException: wrong number of arguments
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at Reflection.main(Reflection.java:16)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
public static void Reflection.m4(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
java.lang.IllegalArgumentException: wrong number of arguments
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at Reflection.main(Reflection.java:16)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)



But starting with JDK 18:
""c:\Program Files\Java\jdk-18\bin\java.exe"" Reflection.java



The program prints:



public static void Reflection.m1(java.lang.Object)
java.lang.IllegalArgumentException: wrong number of arguments: 0 expected: 1
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(DirectMethodHandleAccessor.java:337)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:102)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at Reflection.main(Reflection.java:16)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:421)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
public static void Reflection.m2(java.lang.Object,java.lang.Object)
java.lang.IllegalArgumentException: wrong number of arguments: 0 expected: 2
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(DirectMethodHandleAccessor.java:337)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:102)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at Reflection.main(Reflection.java:16)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:421)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
public static void Reflection.m3(java.lang.Object,java.lang.Object,java.lang.Object)
java.lang.IllegalArgumentException: wrong number of arguments: 0 expected: 3
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.checkArgumentCount(DirectMethodHandleAccessor.java:337)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:102)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at Reflection.main(Reflection.java:16)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:421)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
public static void Reflection.m4(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
java.lang.reflect.InvocationTargetException
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at Reflection.main(Reflection.java:16)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:577)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:421)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
        at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
Caused by: java.lang.IllegalArgumentException: array is not of length 4
        at java.base/java.lang.invoke.MethodHandleStatics.newIllegalArgumentException(MethodHandleStatics.java:169)
        at java.base/java.lang.invoke.MethodHandleImpl.checkSpreadArgument(MethodHandleImpl.java:588)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        ... 7 more



Notice how the last invocation's IllegalArgumentException is wrapped in an InvocationTargetException. There's no good reason for this to happen. There's no invocation target involved, the exception is caused by the reflection itself.

The DirectMethodHandleAccessor::invokeImpl method hints at the size of the parameter list being relevant here (sources from JDK 19):


    @Hidden
    @ForceInline
    private Object invokeImpl(Object obj, Object[] args) throws Throwable {
        return switch (paramCount) {
            case 0 -> target.invokeExact(obj);
            case 1 -> target.invokeExact(obj, args[0]);
            case 2 -> target.invokeExact(obj, args[0], args[1]);
            case 3 -> target.invokeExact(obj, args[0], args[1], args[2]);
            default -> target.invokeExact(obj, args);
        };
    }


I.e. only the default case with 4+ arguments seems to be affected by the problem",Microsoft Windows [Version 10.0.22621.1105],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,18,,generic,,,,,,"0|i3023n:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,Verified,,"2023-01-23 11:59;alanb;You may be able to temporarily workaround this with -Djdk.reflect.useDirectMethodHandle=false .;;;","2023-01-24 10:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12170
Date: 2023-01-24 18:19:22 +0000;;;","2023-01-27 09:15;dukebot;Changeset: 7aaf76c5
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-01-27 17:13:54 +0000
URL:       https://git.openjdk.org/jdk/commit/7aaf76c5290a1688f9450a357aaae964615c29d0
;;;",,,,,,,,,,,,,,,,,,
Re-examine the initialization of JNU Charset in StaticProperty,JDK-8300916,5092256,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2023-01-23 11:42,2023-03-07 01:53,2023-10-01 09:56,2023-01-30 09:08,,,,,,,,21,core-libs,,0,noreg-cleanup,release-note=yes,,,,,,,,,,,,,,"Found in the review of PR: https://github.com/openjdk/jdk/pull/12132

The current `jnuCharset` initialization behavior depends on the initialization of `Charset.defaultCharset()` which may not be determined by the time `StaticProperty` is initialized. This may end up in an unexpected behavior",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301114,,,,,,,,,,,,,,JDK-8301199,JDK-8299811,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i3021v:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-01-23 14:29;naoto;With the fix to JDK-8275007, `sun.jnu.encoding` should not be null nor unsupported encoding (defaults to UTF-8). The code in question can be replaced with `UTF-8`.;;;","2023-01-24 04:29;itakiguchi;I think this change is better than JDK-8300819.;;;","2023-01-24 09:41;naoto;Turned out that even if we default it to `UTF-8`, it will have to instantiate `UTF-8 Charset` instance in `StaticProperty` initialization, which is too early in `initPhase1`. Possibly we could move `StaticProperty.jnuCharset` to either `ProcessImpl` or `ProcessEnvironment` where it is actually utilized would be the correct implementation.;;;","2023-01-24 13:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12171
Date: 2023-01-24 21:13:30 +0000;;;","2023-01-30 09:08;dukebot;Changeset: 32381398
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-01-30 17:06:44 +0000
URL:       https://git.openjdk.org/jdk/commit/323813985b71c63c915cdfce5221fc65a2ad043d
;;;",,,,,,,,,,,,,,,,
G1: incomplete SATB because nmethod entry barriers don't get armed,JDK-8300915,5092255,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rrich,rrich,rrich,2023-01-23 11:19,2023-02-14 07:21,2023-10-01 09:56,2023-01-30 00:45,,,,,,,,21,hotspot,,0,gc-g1,gc-g1-marking,,,,,,,,,,,,,,"Symptom:
--------

Crashes as described in JDK-8299956 because of class/nmethod unloading even though a nmethod is on stack.

The crashes are reproducible with the release build running test/langtools:tier1 repeatedly with a concurrency of 6 within 15 - 180 minutes.

Analysis:
--------

Debugging code after G1ConcurrentMark::finalize_marking() shows there are
nmethods with dead oops (mostly classloaders) on stack if MarkingCodeBlobClosure
is changed not to mark oops during G1 remark.

The following steps lead to a G1 concurrent marking cycle without arming nmethod entry barriers.
This could cause the symptom because nmethod barriers should be armed to keep oop constants
of nmethods alive.

Step 1

CodeCache::on_gc_marking_cycle_start() is called and nmethods are armed in
G1CollectedHeap::start_codecache_marking_cycle_if_inactive() before young GC

  Stack:
    CodeCache::on_gc_marking_cycle_start() : void
    G1CollectedHeap::start_codecache_marking_cycle_if_inactive() : void
    G1ConcurrentMark::pre_concurrent_start(enum GCCause::Cause) : void
    G1YoungCollector::pre_evacuate_collection_set(G1EvacInfo *) : void
    G1YoungCollector::collect() : void
    G1CollectedHeap::do_collection_pause_at_safepoint_helper() : void

Step 2

Concurrent marking start is undone at same safepoint

  Stack:
    G1ConcurrentMarkThread::start_undo_mark() : void
    G1CollectedHeap::start_concurrent_cycle(bool) : void
    G1CollectedHeap::do_collection_pause_at_safepoint_helper() : void  

Step 3

Because of the undo the CodeCache::on_gc_marking_cycle_finish() in G1ConcurrentMark::remark() is not reached.

Step 4

Next concurrent cycle starts. Same stack as in Step 1. Nmethods are not armed
because CodeCache::is_gc_marking_cycle_active() returns true in
G1CollectedHeap::start_codecache_marking_cycle_if_inactive()

This can cause the issues given in JDK-8299956. The dead loaders are most
probably loaders of (maybe inlined) optimized virtual calls that aren't
reachable anymore. Nevertheless the referencing nmethods must not be unloaded if
they are on stack. The backout done with JDK-8299956 prevents this by iterating
all frames and marking the oops of nmethods on stack.

A better fix would be to make sure nmethod entry barriers are armed when g1 marking starts.
",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302462,,,,,,,,,,JDK-8288970,JDK-8299956,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3021n:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-01-25 05:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12194
Date: 2023-01-25 13:32:27 +0000;;;","2023-01-30 00:45;dukebot;Changeset: 3db558b6
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2023-01-30 08:43:15 +0000
URL:       https://git.openjdk.org/jdk/commit/3db558b67bebfe559833331475f481c588147084
;;;",,,,,,,,,,,,,,,,,,,
ZGC: assert(to_addr != 0) failed: Should be forwarded,JDK-8300913,5092253,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,coleenp,dcubed,dcubed,2023-01-23 10:47,2023-06-30 13:05,2023-10-01 09:56,2023-01-26 05:06,21,,,,,,,21,hotspot,,0,regression,tier8,zgc,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

vmTestbase/nsk/jdi/ReferenceType/instances/instances001/instances001.java

Here's a snippet from the log file:

debugee.stderr> Debuggee: received the command: createInstances:boolean[]:50:1:JNI_LOCAL
debugee.stdout> # To suppress the following error report, specify this argument
debugee.stdout> # after -XX: or in .hotspotrc:  SuppressErrorAt=/zRelocate.cpp:124
debugee.stdout> #
debugee.stdout> # A fatal error has been detected by the Java Runtime Environment:
debugee.stdout> #
debugee.stdout> #  Internal Error (/opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S80242/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b46b8a0c-c1ed-4372-aad0-5f01cdddfbbd/runs/253fc8ee-6f29-4b05-9709-1f5e7ed82f68/workspace/open/src/hotspot/share/gc/z/zRelocate.cpp:124), pid=996508, tid=997340
debugee.stdout> #  assert(to_addr != 0) failed: Should be forwarded
debugee.stdout> #
debugee.stdout> # JRE version: Java(TM) SE Runtime Environment (21.0+7) (fastdebug build 21-ea+7-LTS-397)
debugee.stdout> # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+7-LTS-397, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
debugee.stdout> # Problematic frame:
debugee.stdout> # V  [libjvm.so+0x1c9dd4c]  ZRelocate::relocate_object(ZForwarding*, unsigned long) const+0x22c
debugee.stdout> #
debugee.stdout> # Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S88564/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/595b1026-c088-4339-96e1-2c196b07ca2d/runs/be6cd732-806c-4ea2-939e-460539e9a677/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/scratch/4/core.996508)
debugee.stdout> #
debugee.stdout> # An error report file with more information is saved as:
debugee.stdout> # /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S88564/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/595b1026-c088-4339-96e1-2c196b07ca2d/runs/be6cd732-806c-4ea2-939e-460539e9a677/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi/scratch/4/hs_err_pid996508.log
debugee.stdout> #
debugee.stdout> # If you would like to submit a bug report, please visit:
debugee.stdout> #   https://bugreport.java.com/bugreport/crash.jsp
debugee.stdout> #
# ERROR: Unexpected exception: java.lang.NullPointerException: Cannot invoke ""String.equals(Object)"" because ""<local1>"" is null
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Unexpected exception: java.lang.NullPointerException: Cannot invoke ""String.equals(Object)"" because ""<local1>"" is null
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.TestDebuggerType2.runIt(TestDebuggerType2.java:221)
	at nsk.jdi.ReferenceType.instances.instances001.instances001.run(instances001.java:90)
	at nsk.jdi.ReferenceType.instances.instances001.instances001.main(instances001.java:86)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
java.lang.NullPointerException: Cannot invoke ""String.equals(Object)"" because ""<local1>"" is null
	at nsk.share.jdi.TestDebuggerType2.isDebuggeeReady(TestDebuggerType2.java:240)
	at nsk.share.jdi.HeapwalkingDebugger.checkDebugeeAnswer_instanceCounts(HeapwalkingDebugger.java:129)
	at nsk.jdi.ReferenceType.instances.instances001.instances001.testReferrerType(instances001.java:139)
	at nsk.jdi.ReferenceType.instances.instances001.instances001.testClass(instances001.java:103)
	at nsk.jdi.ReferenceType.instances.instances001.instances001.doTest(instances001.java:204)
	at nsk.share.jdi.TestDebuggerType2.runIt(TestDebuggerType2.java:214)
	at nsk.jdi.ReferenceType.instances.instances001.instances001.run(instances001.java:90)
	at nsk.jdi.ReferenceType.instances.instances001.instances001.main(instances001.java:86)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
# ERROR: TEST FAILED: debuggee's process finished with status: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: TEST FAILED: debuggee's process finished with status: 134
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.TestDebuggerType2.quitDebuggee(TestDebuggerType2.java:202)
	at nsk.share.jdi.TestDebuggerType2.runIt(TestDebuggerType2.java:225)
	at nsk.jdi.ReferenceType.instances.instances001.instances001.run(instances001.java:90)
	at nsk.jdi.ReferenceType.instances.instances001.instances001.main(instances001.java:86)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
TEST FAILED

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f003c541f70):  JavaThread ""Thread-100"" [_thread_in_vm, id=997340, stack(0x00007efdd2c43000,0x00007efdd2d44000)]

Stack: [0x00007efdd2c43000,0x00007efdd2d44000],  sp=0x00007efdd2d42a10,  free space=1022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1c9dd4c]  ZRelocate::relocate_object(ZForwarding*, unsigned long) const+0x22c  (zRelocate.cpp:124)
V  [libjvm.so+0x75d4b8]  ZBarrier::weak_load_barrier_on_phantom_oop_field_preloaded(oop volatile*, oop) [clone .isra.0]+0x218  (zBarrier.inline.hpp:172)
V  [libjvm.so+0x75e775]  AccessInternal::PostRuntimeDispatch<ZBarrierSet::AccessBarrier<593988ul, ZBarrierSet>, (AccessInternal::BarrierType)2, 593988ul>::oop_access_barrier(void*)+0x45  (zBarrierSet.inline.hpp:67)
V  [libjvm.so+0x1196af7]  jni_IsSameObject+0x3c7  (accessBackend.hpp:481)
C  [libjdwp.so+0xfece]  commonRef_compact+0xbe  (commonRef.c:697)
C  [libjdwp.so+0x16ab5]  event_callback+0x355  (eventHandler.c:623)
C  [libjdwp.so+0x17f87]  cbThreadStart+0x77  (eventHandler.c:845)
V  [libjvm.so+0x13ad210]  JvmtiExport::post_thread_start(JavaThread*)+0x220  (jvmtiExport.cpp:1487)
V  [libjvm.so+0x10a3c38]  JavaThread::run()+0x218  (javaThread.cpp:689)
V  [libjvm.so+0x1ab1cd0]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1748e83]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292741,,,,,,,,,,,,,,x86_64,,,,,,,,,generic,,,,,,"0|i30217:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,Verified,,"2023-01-24 00:58;stefank;This started happening after:
```
commit c464ef1d61c2ea4a37759546f0ee39b1f530ccdc
Author: Afshin Zafari <afshin.zafari@oracle.com>
Date:   Wed Jan 18 13:21:32 2023 +0000

    8292741: Convert JvmtiTagMapTable to ResourceHashtable

    Reviewed-by: dholmes, coleenp, rehn
```

I've verified that the tests stops crashing after reverting that changeset.;;;","2023-01-24 09:37;dcubed;This looks like a regression caused by the fix for:

JDK-8292741 Convert JvmtiTagMapTable to ResourceHashtable

so I've added the regression label and bumped the priority from P4 -> P2.;;;","2023-01-24 09:38;dcubed;Moved from hotspot/runtime -> hotspot/jvmti since that is where JDK-8292741 lives.;;;","2023-01-25 08:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12202
Date: 2023-01-25 15:56:49 +0000;;;","2023-01-26 05:06;dukebot;Changeset: 3f633814
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-01-26 13:04:19 +0000
URL:       https://git.openjdk.org/jdk/commit/3f6338146e9d4103ca427986d61af9c23c9651fd
;;;","2023-01-26 09:05;dcubed;The fix for this bug is integrated in jdk-21+8-486.;;;",,,,,,,,,,,,,,,
Wrong state after deselecting two or more cells of a TableView selection ,JDK-8300893,5092233,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2023-01-23 08:36,2023-03-13 11:49,2023-10-01 09:56,2023-02-16 00:28,jfx20,,,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,,,"Given a TableView with multiple and cell selection modes enabled like the attached test, select one cell via mouse click, and then use Shift+arrow keys to select a group of cells over a continuous path, including two or more rows or two or more columns (see for instance Initial selection.png).

Then start deselecting those cells with Shift+arrow keys, in the reverse order of selection. 

The last cell selected is now deselected and the focused cell remains selected (as expected, see First deselection.png). 

But deselecting one more cell doesn't work: the cell remains selected and the focused one gets deselected, which is not expected, see Second deselection.png. 

This issue is related to the ""backtracking"" algorithm used in TableViewBehaviorBase::updateCellVerticalSelection (see https://github.com/openjdk/jfx/blob/master/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java#L714), which makes use of a selection history linked list. 

Selected cells are added to the beginning of the list, so when going the selection path backwards, the first deselection finds the focused cell at index 1 (as expected), but, since no cells are removed from such list, the second deselection still picks that same index 1.

On the other hand, TableViewBehaviorBase::updateCellHorizontalSelection doesn't use the selection history list, but the selected cells list (which is always ordered from left to right, top to bottom), so in case the selection goes from right to left and deselection goes from left to right, the same issue could happen, and the wrong cell is selected/deselected. 

This issue can be reproduced with any JavaFX version and platform.

Additional notes from JDK-8297167 (which is marked as duplicate of this ticket):

To reproduce, click on the top left cell (R0:C0), then press shift-right arrow 4 times, followed by shift-down arrow key 4 times, followed by shift-up arrow 4 times, followed by shift-left arrow 4 times. The expectation is that we should have no cells selected. Instead, there is a weird pattern of selected cells (see the screenshot).

There are probably other similar scenarios using different paths.

There is a unit test which is currently @ Ignored in TableViewKeyInputTest.testSelectionPathDeviationWorks1() - I think there might be problems with that test because the comments describing what's supposed to happen do not correspond to the code.",,,,,,,,,,JDK-8304078,,,,,,,,,,,,,,,,,,,,,,,JDK-8297167,,,,,,,,,,,,,,,,"2023-01-23 08:31;jpereda;CellSelectionBug.java;https://bugs.openjdk.org/secure/attachment/102382/CellSelectionBug.java","2023-01-23 08:13;jpereda;First deselection.png;https://bugs.openjdk.org/secure/attachment/102384/First+deselection.png","2023-01-23 08:11;jpereda;Initial selection.png;https://bugs.openjdk.org/secure/attachment/102385/Initial+selection.png","2023-01-23 08:13;jpereda;Second deselection.png;https://bugs.openjdk.org/secure/attachment/102383/Second+deselection.png",,,,,,,,,,,,,,,,,,,,,"0|i301wr:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-01-23 08:39;angorya;This might be a duplicate of JDK-8297167
;;;","2023-01-23 09:05;jpereda;Right, seems the same issue. I did see and test before a related one (JDK-8274853), but it didn't have the same root cause, so I didn't search more... my bad.

This ticket has some explanation that might be worth keeping in case it is closed as duplicated.

And the test you mention, yes, it needs some changes: the third doUpArrowPress should be doLeftArrowPress
;;;","2023-01-23 09:10;angorya;Thank you for looking into this issue!  Seems this ticket has a bit more information, so I'll just migrate additional notes here and close the other one as a duplicate.;;;","2023-01-23 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1008
Date: 2023-01-23 20:40:23 +0000;;;","2023-02-16 00:28;dukebot;Changeset: dbab36b2
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2023-02-16 08:26:23 +0000
URL:       https://git.openjdk.org/jfx/commit/dbab36b2a264cd596d0390e42e15d4b2bc0c33b8
;;;","2023-03-12 12:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/120
Date: 2023-03-12 19:32:02 +0000;;;",,,,,,,,,,,,,,,
Deprecate for removal javax.swing.plaf.synth.SynthLookAndFeel.load(URL url) ,JDK-8300891,5092231,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prr,prr,prr,2023-01-23 08:22,2023-02-08 23:40,2023-10-01 09:56,2023-02-03 08:30,21,,,,,,,21,client-libs,,0,noreg-doc,sn_136,,,,,,,,,,,,,,"
SynthLookAndFeel.load(URL url) is not used by any of the JDK's built-in Swing L&Fs
since instead these use the alternate way of loading synth styles via setting
a SynthStyleFactory on the SynthLookAndFeel.

In addition there exists
javax.swing.plaf.synth.SynthLookAndFeel.load(InputStream input, Class<?resourceBase>)
which can be used in migration of any external L&F which loads the styles from a synth resource file.

In addition it is not clear to me how this can easily be used by a 3rd party L&F except if
the URL is relative to the code since it would be extremely fragile to point to an absolute
external URL .. nor can I imagine any consumer of the L&F wanting that it.
Nor are many (probably zero) applications likely to be providing their own.
This allows us to remove this method which does not have an easy way to verify the URL as trusted.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298676,,,JDK-8301032,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i301wb:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-01-24 15:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12175
Date: 2023-01-24 23:29:58 +0000;;;","2023-02-03 08:30;dukebot;Changeset: 5962226c
Author:    Phil Race <prr@openjdk.org>
Date:      2023-02-03 16:28:03 +0000
URL:       https://git.openjdk.org/jdk/commit/5962226cc33de047946aca6522f020c97d663d2f
;;;",,,,,,,,,,,,,,,,,,,
WebView's ColorChooser fails to initialize when running in security context,JDK-8300872,5092210,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpereda,jpereda,jpereda,2023-01-23 07:49,2023-03-14 05:40,2023-10-01 09:56,2023-03-05 12:43,jfx17,,,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,,,"When running in a secure context, trying to open the ColorChooser control from a WebView control fails.

To reproduce: Run the attached test with a secure context using the attached security policy (-Djava.security.manager -Djava.security.policy=java.policy), and press the button to open the ChooseColor control. It doesn't show and the following exception is thrown:

Exception in thread ""JavaFX Application Thread"" java.security.AccessControlException: access denied (""java.io.FilePermission"" ""jar:file:/~/.m2/repository/org/openjfx/javafx-controls/20-ea+11/javafx-controls-20-ea+11-mac-aarch64.jar!/com/sun/javafx/scene/control/skin/modena/pattern-transparent.png"" ""read"")
        at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:485)
        at java.base/java.security.AccessController.checkPermission(AccessController.java:1068)
        at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:416)
        at java.base/java.lang.SecurityManager.checkRead(SecurityManager.java:756)
        at java.base/java.io.File.exists(File.java:829)
        at javafx.graphics@20-ea/javafx.scene.image.Image.validateUrl(Image.java:1130)
        at javafx.graphics@20-ea/javafx.scene.image.Image.<init>(Image.java:628)
        at javafx.graphics@20-ea/com.sun.javafx.css.StyleManager$ImageCache.getCachedImage(StyleManager.java:770)
        at javafx.graphics@20-ea/com.sun.javafx.css.StyleManager.getCachedImage(StyleManager.java:846)
        at javafx.graphics@20-ea/javafx.scene.layout.BackgroundConverter.convert(BackgroundConverter.java:97)
        at javafx.graphics@20-ea/javafx.scene.layout.BackgroundConverter.convert(BackgroundConverter.java:42)
        at javafx.graphics@20-ea/javafx.scene.CssStyleHelper.lookup(CssStyleHelper.java:1144)
        at javafx.graphics@20-ea/javafx.scene.CssStyleHelper.transitionToState(CssStyleHelper.java:858)
        at javafx.graphics@20-ea/javafx.scene.Node.doProcessCSS(Node.java:9723)
        at javafx.graphics@20-ea/javafx.scene.Node$1.doProcessCSS(Node.java:482)
        at javafx.graphics@20-ea/com.sun.javafx.scene.NodeHelper.processCSSImpl(NodeHelper.java:194)
        at javafx.graphics@20-ea/com.sun.javafx.scene.ParentHelper.superProcessCSSImpl(ParentHelper.java:93)
        at javafx.graphics@20-ea/com.sun.javafx.scene.ParentHelper.superProcessCSS(ParentHelper.java:63)
        at javafx.graphics@20-ea/javafx.scene.Parent.doProcessCSS(Parent.java:1370)
        at javafx.graphics@20-ea/javafx.scene.Parent$1.doProcessCSS(Parent.java:125)
        at javafx.graphics@20-ea/com.sun.javafx.scene.ParentHelper.processCSSImpl(ParentHelper.java:98)
        at javafx.graphics@20-ea/com.sun.javafx.scene.NodeHelper.processCSS(NodeHelper.java:147)
        at javafx.graphics@20-ea/javafx.scene.Parent.doProcessCSS(Parent.java:1401)
        at javafx.graphics@20-ea/javafx.scene.Parent$1.doProcessCSS(Parent.java:125)
        at javafx.graphics@20-ea/com.sun.javafx.scene.ParentHelper.processCSSImpl(ParentHelper.java:98)
        at javafx.graphics@20-ea/com.sun.javafx.scene.NodeHelper.processCSS(NodeHelper.java:147)
        at javafx.graphics@20-ea/javafx.scene.Parent.doProcessCSS(Parent.java:1401)
        at javafx.graphics@20-ea/javafx.scene.Parent$1.doProcessCSS(Parent.java:125)
        at javafx.graphics@20-ea/com.sun.javafx.scene.ParentHelper.processCSSImpl(ParentHelper.java:98)
        at javafx.graphics@20-ea/com.sun.javafx.scene.NodeHelper.processCSS(NodeHelper.java:147)
        at javafx.graphics@20-ea/javafx.scene.Node.processCSS(Node.java:9605)
        at javafx.graphics@20-ea/javafx.scene.Scene.doCSSPass(Scene.java:587)
        at javafx.graphics@20-ea/javafx.scene.Scene.preferredSize(Scene.java:1786)
        at javafx.graphics@20-ea/javafx.scene.Scene$2.preferredSize(Scene.java:411)
        at javafx.graphics@20-ea/com.sun.javafx.scene.SceneHelper.preferredSize(SceneHelper.java:65)
        at javafx.graphics@20-ea/javafx.stage.Window$12.invalidated(Window.java:1163)
        at javafx.base@20-ea/javafx.beans.property.BooleanPropertyBase.markInvalid(BooleanPropertyBase.java:110)
        at javafx.base@20-ea/javafx.beans.property.BooleanPropertyBase.set(BooleanPropertyBase.java:145)
        at javafx.graphics@20-ea/javafx.stage.Window.setShowing(Window.java:1239)
        at javafx.graphics@20-ea/javafx.stage.Window.show(Window.java:1254)
        at javafx.graphics@20-ea/javafx.stage.Stage.show(Stage.java:277)
        at javafx.controls@20-ea/com.sun.javafx.scene.control.CustomColorDialog.show(CustomColorDialog.java:198)
        at javafx.web@20-ea/com.sun.webkit.ColorChooser.<init>(ColorChooser.java:66)
        at javafx.web@20-ea/com.sun.webkit.ColorChooser.fwkCreateAndShowColorChooser(ColorChooser.java:70)

The exception points to: javafx.graphics@20-ea/javafx.scene.image.Image.validateUrl(Image.java:1130)

The check
if (new File(url).exists()) { } // line 1130

was added in JDK-8267551, by this commit:

https://github.com/openjdk/jfx/pull/508/files#diff-0d427794abc3bdc37d53c1e4abfe9dbaac32f2ba104087f035399d9e60cc30ecR1127

Therefore ColorChooser works up until JavaFX 16 and 17-ea+12, and fails since 17 (starting 17-ea+13).

In fact, this issue can be reproduced with any control that uses bundled resources, like the HTMLEditor control for instance.

There might be other places where the same exception is thrown, like com.sun.javafx.iio.common.ImageTools::createInputStream.

For now, the workaround to make this work is to allow file permissions, like:

permission java.io.FilePermission ""jar:file:/${user.home}/.m2/repository/org/openjfx/-"", ""read"";
    ",,,,,,,,,,JDK-8304079,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-23 07:45;jpereda;HelloWeb.java;https://bugs.openjdk.org/secure/attachment/102381/HelloWeb.java","2023-01-23 07:46;jpereda;java.policy;https://bugs.openjdk.org/secure/attachment/102380/java.policy",,,,,,,,,,,,,,,jfx17,,,,,,,,"0|i301rn:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-01-23 09:19;kcr;Since the security manager is deprecated for removal, I don't expect that this will be a high priority issue to fix, but if someone wants to take it on, we could review a fix. Two things to note:

1. There was a much earlier bug, JDK-8177284, filed against HTMLEditor noting that its resources cannot be loaded when a security manager is present. We closed it as ""Won't fix"" given the security manager deprecation.
2. I'm a bit surprised that the fix for JDK-8267551 has caused (or more likely exposed) this bug. Previous to that, I would have expected an exception later on when the image was actually read.
;;;","2023-01-23 09:33;jpereda;From my early tests, looks like invoking File::exists causes the issue in both javafx.scene.image.Image::validateUrl and com.sun.javafx.iio.common.ImageTools::createInputStream.

As for the changes in JDK-8267551, ""jar:file:/..."" is a valid scheme, and URL_QUICKMATCH.matcher(url).matches() is true, but we don't return immediately new URL(url).toString(), however we now have an extra check for File(""jar:file...).exists(), which is surfacing this issue with the security manager.

Didn't test it that much, but reordering the steps in the validation might help...;;;","2023-02-08 06:41;jpereda;As mentioned in this ticket, calling File::exists fails with a Security Manager enabled with some restrictive policy, but without even getting into the presence or not of such security context, do we really need this File::exists check? 

Revisiting the changes from JDK-826755, this commit https://github.com/openjdk/jfx/pull/508/commits/d30f610968dda345c309248c1928ba0c80444aa7 ""Accept regular file paths, change javadoc"", was the one that added this change in Image::validateUrl:

if (new File(url).exists()) {
  return url;
}

And Javadoc added ""a file path that can be resolved by {@link java.io.File}"", but I wonder what is the type of ""file path"" url that works with that check that does not work for the existing new URL(url) ? There are no failing tests before and after it was added, that justify it.

What is a ""regular file path""? 
- A file url without ""file:"" protocol will be inspected as resource because URL_QUICKMATCH match will fail, and it will throw an exception ""Invalid URL or resource not found"" before even gets to File::exists.
- A file url with ""file:"" or ""file://"" protocol gives a file that doesn't exist

My point is: does this File::exists check even pass and the url is returned before getting to new URL(url)? If the answer is not, we should simply remove those 3 lines.;;;","2023-02-16 00:33;jpereda;[~mstrauss] In case you are not aware of this issue, could you please have a look and provide some feedback?;;;","2023-02-20 06:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1042
Date: 2023-02-20 14:15:07 +0000;;;","2023-03-05 12:43;dukebot;Changeset: b2134505
Author:    Jose Pereda <jpereda@openjdk.org>
Date:      2023-03-05 20:42:16 +0000
URL:       https://git.openjdk.org/jfx/commit/b2134505cc0c89637019ce746d5fac6ab708d4e2
;;;","2023-03-12 12:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/119
Date: 2023-03-12 18:57:21 +0000;;;",,,,,,,,,,,,,,
Make use of the Double.toString(double) algorithm in java.util.Formatter,JDK-8300869,5092207,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,rgiulietti,rgiulietti,2023-01-23 07:11,2023-07-21 07:35,2023-10-01 09:56,2023-02-02 11:12,19,20,,,,,,21,core-libs,,0,release-note=yes,,,,,,,,,,,,,,,"Methods `Double.toString(double)` and `AbstractStringBuilder.append(double)` make use of an algorithm integrated in JDK 19 [1], replacing the one used in earlier release; similarly for the `float` counterparts `Float.toString(float)` and `AbstractStringBuilder.append(float)`.

Class `java.util.Formatter`, however, uses another algorithm to format `double` and `float` values. This can lead to small discrepancies w.r.t. the outcomes of the above methods in certain rare cases, and conflicts with the specification which is based on `Double.toString(double)`. Therefore, to match the specification, `java.util.Formatter` should replace the current algorithm with a variant of the new one tailored for formatted output.

----

[1] https://git.openjdk.java.net/jdk/commit/72bcf2aa03d53b0f68eb07a902575b4e8628d859",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301387,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,"0|i301qz:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2023-01-27 08:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12259
Date: 2023-01-27 16:02:38 +0000;;;","2023-01-27 08:47;rriggs;If there may be differences in output, this issue may deserve a release note. If so, add label 'release-note=yes'.;;;","2023-01-27 08:56;rgiulietti;Right, thanks [~rriggs].
My plan is to add some specific tests for differences in output I am aware of.;;;","2023-02-02 11:12;dukebot;Changeset: f696785f
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2023-02-02 19:10:42 +0000
URL:       https://git.openjdk.org/jdk/commit/f696785fd3bc5b27c06260088a2e0ce520e12142
;;;",,,,,,,,,,,,,,,,,
C2: product reduction in ProdRed_Double is not vectorized,JDK-8300865,5092203,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sviswanathan,rcastanedalo,rcastanedalo,2023-01-23 05:59,2023-06-04 20:17,2023-10-01 09:56,2023-05-31 15:43,17,18,19,20,21,,,21,hotspot,,0,c2,c2-superword,oracle-triage-21,performance,,,,,,,,,,,,"In the runs of test compiler.loopopts.superword.ProdRed_Double with -XX:+SuperWordReductions and -XX:LoopMaxUnroll>=8 on x86_64, C2 is expected to vectorize the product reduction loop in prodReductionInit(), but it fails to do so for any run on an array of x86_64 CPUs with different vectorization capabilities.

HOW TO REPRODUCE

On a linux-x86_64-server-fastdebug build, run

$ make run-test TEST=""compiler/loopopts/superword/ProdRed_Double.java"" TEST_VM_OPTS=""-XX:CompileCommand=PrintAssembly,compiler.loopopts.superword.ProdRed_Double::prodReductionImplement""
$ grep vector_reduction_double build/linux-x86_64-server-fastdebug/test-support/jtreg_test_hotspot_jtreg_compiler_loopopts_superword_ProdRed_Double_java/compiler/loopopts/superword/ProdRed_Double.jtr

We expect to find some matches of 'vector_reduction_double', but get none.

INITIAL ANALYSIS

SuperWord::construct_bb() relies on ReductionNode::implemented() to identify vectorizable reduction uses [1]. Among other arguments, ReductionNode::implemented() takes the minimum vector size for the reduction type (vlen), and fails trivially if it is less or equal than 1 [2]. This is always the case in the context of SuperWord::construct_bb(), since vlen is just set to the result of Matcher::min_vector_size(), which since JDK-8265783 always returns 1 for the 'double' type [3]. Reverting the changes made by JDK-8265783 to Matcher::min_vector_size (in x86.ad) re-enables vectorization of ProdRed_Double.

Thanks to Daniel Skantz for pointing out the issue, found while working on JDK-8294715.

[1] https://github.com/openjdk/jdk/blob/5a4945c0d95423d0ab07762c915e9cb4d3c66abb/src/hotspot/share/opto/superword.cpp#L3355
[2] https://github.com/openjdk/jdk/blob/5a4945c0d95423d0ab07762c915e9cb4d3c66abb/src/hotspot/share/opto/vectornode.cpp#L1468
[3] https://github.com/openjdk/jdk/blob/5a4945c0d95423d0ab07762c915e9cb4d3c66abb/src/hotspot/cpu/x86/x86.ad#L2293-L2295",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8265783,JDK-8302139,,,,,,JDK-8294715,,,,,,,,,,,,,,x86_64,,,,,,,,,,,,,,,"0|i301q3:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-23 06:54;chagedorn;ILW = Missed vectorization opportunity, rare?, no workaround = MLH = P4;;;","2023-01-24 07:13;thartmann;[~sviswanathan], could you please have a look? Thanks.;;;","2023-02-16 03:46;epeter;I also just discovered this issue independently.
I agree with the analysis above. Some other tests still do vectorize, but only if there is a Store that causes SuperWord::construct_bb() to return true.
For example
test/hotspot/jtreg/compiler/loopopts/superword/SumRed_Double.java

for (int i = 0; i < a.length; i++) {
    d[i] = (a[i] * b[i]) + (a[i] * c[i]) + (b[i] * c[i]);
    total += d[i];
}

The store to ""d[i]"" causes vectorization.

We also need a regression test for these things, best with IR framework.
I am doing that with JDK-8302139.;;;","2023-05-22 10:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14065
Date: 2023-05-19 23:27:32 +0000;;;","2023-05-24 08:37;kvn;[~epeter] since you commented here please review PR and submit mach5 testing for it.;;;","2023-05-31 15:42;dukebot;Changeset: f9ad7df4
Author:    Sandhya Viswanathan <sviswanathan@openjdk.org>
Date:      2023-05-31 22:39:54 +0000
URL:       https://git.openjdk.org/jdk/commit/f9ad7df4dafa0a2da38e8cbb4150049fb04f4327
;;;",,,,,,,,,,,,,,,
State return value for Types.asElement(NoType) explicitly,JDK-8300857,5092192,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,prappo,prappo,2023-01-23 02:35,2023-02-01 22:45,2023-10-01 09:56,2023-01-25 18:15,21,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,That API should have an informative sentence on that if an instance of NoType is passed to javax.lang.model.util.Types.asElement(TypeMirror) that method will return null.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300951,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i301nn:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c6c40,,,,,,,,,"2023-01-23 21:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12159
Date: 2023-01-24 05:38:36 +0000;;;","2023-01-25 18:15;dukebot;Changeset: b5a4744f
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-01-26 02:14:07 +0000
URL:       https://git.openjdk.org/jdk/commit/b5a4744f9019f76664738029f13b4d4f651d20d6
;;;",,,,,,,,,,,,,,,,,,,
UB: Compile::_phase_optimize_finished is initialized too late,JDK-8300823,5092145,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,dfenacci,gziemski,gziemski,2023-01-22 06:20,2023-04-27 07:00,2023-10-01 09:56,2023-01-27 04:16,17,20,21,,,,,21,hotspot,,0,c2,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,noreg-hard,oracle-triage-11,oracle-triage-21,starter,,,,,,"Undefined Behavior discovered after turning ""UndefinedBehaviorSanitizer"" in Xcode running simple HelloWorld java app. More info on clang undefined behavior sanitizer can be found https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html 

/Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/compile.hpp:811 Load of value 32, which is not a valid value for type 'bool'

Invalid bool load
#0	0x0000000111b0de77 in Compile::phase_optimize_finished() const at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/compile.hpp:811
#1	0x0000000111b0dc5f in Node::verify_construction() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/node.cpp:89
#2	0x0000000111b0fba3 in Node::Node(unsigned int) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/node.cpp:338
#3	0x0000000111887883 in RegionNode::RegionNode(unsigned int) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/cfgnode.hpp:79
#4	0x0000000111887763 in LoopNode::LoopNode(Node*, Node*) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/loopnode.hpp:143
#5	0x0000000111c43b4b in RootNode::RootNode() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/rootnode.hpp:37
#6	0x0000000111c26958 in RootNode::RootNode() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/rootnode.hpp:37
#7	0x0000000111c2301f in Compile::Init(bool) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/compile.cpp:983
#8	0x0000000111c26427 in Compile::Compile(ciEnv*, TypeFunc const* (*)(), unsigned char*, char const*, int, bool, bool, DirectiveSet*) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/compile.cpp:940
#9	0x0000000111ceb407 in OptoRuntime::generate_stub(ciEnv*, TypeFunc const* (*)(), unsigned char*, char const*, int, bool, bool) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/runtime.cpp:175
#10	0x0000000111ceb093 in OptoRuntime::generate(ciEnv*) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/runtime.cpp:143
#11	0x0000000111cad217 in C2Compiler::init_c2_runtime() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/c2compiler.cpp:82
#12	0x0000000111cad2cf in C2Compiler::initialize() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/opto/c2compiler.cpp:95
#13	0x0000000111e8437b in CompileBroker::init_compiler_runtime() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/compiler/compileBroker.cpp:1730
#14	0x0000000111e8504f in CompileBroker::compiler_thread_loop() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/compiler/compileBroker.cpp:1867
#15	0x0000000110eed6cb in JavaThread::thread_main_inner() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/runtime/javaThread.cpp:710
#16	0x0000000110eed4bb in JavaThread::run() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/runtime/javaThread.cpp:695
#17	0x0000000110d9837b in Thread::call_run() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/runtime/thread.cpp:224
#18	0x00000001109abd1f in thread_native_entry(Thread*) at /Users/gerard/Work/tmp/jdk/src/hotspot/os/bsd/os_bsd.cpp:572
#19	0x00000001000995d3 in _pthread_start ()",,,,,,,,,,JDK-8306512,JDK-8307023,JDK-8301951,JDK-8305544,JDK-8302400,,,,,,,,,,,,,,,,,,,,,,,JDK-8300935,,,,,,,JDK-8244724,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i301d7:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-22 22:17;thartmann;Initial ILW = Potential undefined behavior in node verification code in C2 (debug only code), found with UndefinedBehaviorSanitizer in Xcode - never observed any issues, no known workaround = LLH = P5;;;","2023-01-22 22:21;thartmann;Code was introduced by JDK-8244724. I think the issue is that _phase_optimize_finished is not always initialized.;;;","2023-01-22 22:22;thartmann;Damon, could you please have a look? Thanks.;;;","2023-01-25 03:45;dfenacci;The issue is indeed due to _phase_optimize_finished being initialized too late.;;;","2023-01-25 23:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12192
Date: 2023-01-25 12:17:52 +0000;;;","2023-01-27 04:16;dukebot;Changeset: e4252bb9
Author:    Damon Fenacci <damon.fenacci@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-01-27 12:14:07 +0000
URL:       https://git.openjdk.org/jdk/commit/e4252bb91478e9c2f0a5bbdae7cd663838d91b1b
;;;","2023-03-29 04:03;thartmann;Fix Request (JDK 20u)
Resolves an issue with potential undefined behavior due to an uninitialized field. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-03-29 04:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/30
Date: 2023-03-29 11:03:04 +0000;;;","2023-04-19 02:48;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a change to debug coding.
Clean backport except for Copyright. SAP nightly testing passed.;;;","2023-04-19 02:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1271
Date: 2023-04-19 09:47:51 +0000;;;",,,,,,,,,,,
UB: Applying non-zero offset to non-null pointer 0xfffffffffffffffe produced null pointer,JDK-8300821,5092143,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tholenstein,gziemski,gziemski,2023-01-22 06:00,2023-03-28 01:21,2023-10-01 09:56,2023-03-10 07:40,11,17,20,21,,,,21,hotspot,,0,oracle-triage-21,starter,,,,,,,,,,,,,,"Undefined Behavior discovered after turning ""UndefinedBehaviorSanitizer"" in Xcode running simple HelloWorld java app. More info on clang undefined behavior sanitizer can be found https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html 

/Users/gerard/Work/tmp/jdk/src/hotspot/share/code/relocInfo.hpp:612 Applying non-zero offset to non-null pointer 0xfffffffffffffffe produced null pointer

Nullptr after nonzero offset
#0	0x0000000110fab777 in RelocIterator::next() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/code/relocInfo.hpp:612
#1	0x0000000110a0d147 in CodeBuffer::relocate_code_to(CodeBuffer*) const at /Users/gerard/Work/tmp/jdk/src/hotspot/share/asm/codeBuffer.cpp:783
#2	0x0000000110a0c8a7 in CodeBuffer::copy_code_to(CodeBlob*) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/asm/codeBuffer.cpp:719
#3	0x0000000110f53753 in RuntimeBlob::RuntimeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*, bool) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/code/codeBlob.cpp:161
#4	0x0000000110f54e6b in RuntimeStub::RuntimeStub(char const*, CodeBuffer*, int, int, int, OopMapSet*, bool) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/code/codeBlob.cpp:406
#5	0x0000000110f54ee8 in RuntimeStub::RuntimeStub(char const*, CodeBuffer*, int, int, int, OopMapSet*, bool) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/code/codeBlob.cpp:407
#6	0x0000000110f54fff in RuntimeStub::new_runtime_stub(char const*, CodeBuffer*, int, int, OopMapSet*, bool) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/code/codeBlob.cpp:422
#7	0x000000011085c867 in StubGenerator::generate_jfr_write_checkpoint() at /Users/gerard/Work/tmp/jdk/src/hotspot/cpu/aarch64/stubGenerator_aarch64.cpp:6967
#8	0x0000000110856f93 in StubGenerator::generate_phase1() at /Users/gerard/Work/tmp/jdk/src/hotspot/cpu/aarch64/stubGenerator_aarch64.cpp:7965
#9	0x0000000110856d0b in StubGenerator::StubGenerator(CodeBuffer*, int) at /Users/gerard/Work/tmp/jdk/src/hotspot/cpu/aarch64/stubGenerator_aarch64.cpp:8121
#10	0x0000000110856c48 in StubGenerator::StubGenerator(CodeBuffer*, int) at /Users/gerard/Work/tmp/jdk/src/hotspot/cpu/aarch64/stubGenerator_aarch64.cpp:8117
#11	0x0000000110856bfb in StubGenerator_generate(CodeBuffer*, int) at /Users/gerard/Work/tmp/jdk/src/hotspot/cpu/aarch64/stubGenerator_aarch64.cpp:8133
#12	0x0000000110e7095b in StubRoutines::initializeContinuationStubs() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/runtime/stubRoutines.cpp:279
#13	0x0000000110e71c58 in stubRoutines_initContinuationStubs() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/runtime/stubRoutines.cpp:389
#14	0x0000000110eb94b7 in init_globals() at /Users/gerard/Work/tmp/jdk/src/hotspot/share/runtime/init.cpp:129
#15	0x0000000110efb29f in Threads::create_vm(JavaVMInitArgs*, bool*) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/runtime/threads.cpp:564
#16	0x0000000111111b0b in JNI_CreateJavaVM_inner(JavaVM_**, void**, void*) [inlined] at /Users/gerard/Work/tmp/jdk/src/hotspot/share/prims/jni.cpp:3591
#17	0x0000000111111a74 in ::JNI_CreateJavaVM(JavaVM **, void **, void *) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/prims/jni.cpp:3677
#18	0x0000000111111a73 in ::JNI_CreateJavaVM(JavaVM **, void **, void *) at /Users/gerard/Work/tmp/jdk/src/hotspot/share/prims/jni.cpp:3671
#19	0x00000001001027f7 in InitializeJVM [inlined] at /Users/gerard/Work/tmp/jdk/src/java.base/share/native/libjli/java.c:1459
#20	0x0000000100102744 in JavaMain at /Users/gerard/Work/tmp/jdk/src/java.base/share/native/libjli/java.c:413
#21	0x0000000100102743 in JavaMain ()
#22	0x00000001001053f7 in ThreadJavaMain at /Users/gerard/Work/tmp/jdk/src/java.base/macosx/native/libjli/java_md_macosx.m:720
#23	0x00000001000995d3 in _pthread_start ()
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300935,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i301cr:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-22 22:14;thartmann;Initial ILW = Potential undefined behavior in relocation code, found with UndefinedBehaviorSanitizer in Xcode - never observed any issues, no known workaround = MLH = P4;;;","2023-01-24 07:10;thartmann;[~tholenstein], could you please have a look?;;;","2023-03-07 05:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12854
Date: 2023-03-03 14:46:51 +0000;;;","2023-03-10 07:40;dukebot;Changeset: 01312a00
Author:    Tobias Holenstein <tholenstein@openjdk.org>
Date:      2023-03-10 15:39:45 +0000
URL:       https://git.openjdk.org/jdk/commit/01312a002ba27bfbfebb9fde484ca34ebde0704c
;;;",,,,,,,,,,,,,,,,,
The build is broken after JDK-8294693,JDK-8300817,5092138,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,serb,serb,serb,2023-01-21 11:37,2023-07-18 07:27,2023-10-01 09:56,2023-01-21 13:54,21,,,,,,,21,core-libs,,0,noreg-other,,,,,,,,,,,,,,," === Output from failing command(s) repeated here ===
* For target jdk_modules_java.base__the.java.base_batch:
/home/runner/work/jdk/jdk/src/java.base/share/classes/java/util/Collections.java:462: warning: empty <p> tag
     * position, inclusive.<p>
                           ^
error: warnings found and -Werror specified",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294693,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i301bn:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@73bf8bbe,,,,,,,,,"2023-01-21 12:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12129
Date: 2023-01-21 19:40:58 +0000;;;","2023-01-21 13:54;dukebot;Changeset: 3ea4eac1
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-01-21 21:51:41 +0000
URL:       https://git.openjdk.org/jdk/commit/3ea4eac1450954db095ef56385baa3aceea524ea
;;;",,,,,,,,,,,,,,,,,,,
Use @snippet in java.util:i18n,JDK-8300794,5092111,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-01-20 12:18,2023-05-22 00:54,2023-10-01 09:56,2023-05-16 10:12,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,Use @snippet and @linkplain / @link in i18n related java.util packages.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3015n:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-05-10 17:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13920
Date: 2023-05-10 23:54:37 +0000;;;","2023-05-16 10:12;dukebot;Changeset: 4e929918
Author:    Justin Lu <jlu@openjdk.org>
Date:      2023-05-16 17:10:21 +0000
URL:       https://git.openjdk.org/jdk/commit/4e92991809aa62cf98543a58bec352ab8a2c7b3d
;;;",,,,,,,,,,,,,,,,,,,
Address the inconsistency between the constant array and pool size,JDK-8300773,5092081,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,goetz,goetz,goetz,2023-01-20 04:55,2023-03-02 13:58,2023-10-01 09:56,2023-01-25 01:06,11,17,,,,,,17.0.7,xml,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"Placeholder for backport of ""JDK-8287916: Address the inconsistency between the constant array and pool size"" which is closed.

See also 
https://github.com/openjdk/jdk/commit/7b418f9abae9f9f24155a9533b8e80231f49e0c0
https://github.com/openjdk/jdk19u/commit/f1001a06b3485d13f14bb85eeeb38f7c1b4910f1

",,,,,,,,,,JDK-8301600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287916,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i300yz:",9223372036854775807,b01,,,,,,,,,,,"2023-01-20 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1093
Date: 2023-01-20 12:39:51 +0000;;;","2023-01-24 03:23;goetz;Fix request [17u]

I backport this to fix an issue in BCEL that was fixed in head and 19.0.2.
Probably it was also fixed in 17.0.6-oracle, but the issue is closed so 
this is not transparent.
I it is a clean backport of the git change mentioned in the Description, 
but as the normal backport mechanism does not work with closed
issues I needed a review.
SAP nightly testing passed.;;;","2023-01-25 01:06;dukebot;Changeset: a34f2d37
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-01-25 09:04:56 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/a34f2d3728c077d1dbdfa313f1bf29629fbc32f6
;;;","2023-01-25 01:17;goetz;Fix request [11u]

I backport this for parity with 11.0.19-oracle.
See also 17u fix request.
Clean backport from 17.
SAP nighlty testing passed.;;;","2023-01-25 02:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1689
Date: 2023-01-25 10:10:12 +0000;;;","2023-02-08 07:04;dukebot;Changeset: a34f2d37
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-01-25 09:04:56 +0000
URL:       https://git.openjdk.org/jdk17u/commit/a34f2d3728c077d1dbdfa313f1bf29629fbc32f6
;;;",,,,,,,,,,,,,,,
[17u] Remove duplicate entry in javac.properties,JDK-8300751,5092058,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-01-20 02:33,2023-06-20 06:15,2023-10-01 09:56,2023-02-24 13:09,11,17,,,,,,17.0.7,tools,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"JDK-8245246 removed a duplicate entry in javac.properties. This was done for JDK 20. In older update-releases this removal should be done, too. However, the whole JDK-8245246 can't be backported since it contains other changes inappropriate for back-porting.",,,,,,,,,,JDK-8310381,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8245246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i300tv:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-01-23 00:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1076
Date: 2023-01-17 11:00:43 +0000;;;","2023-01-23 01:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1096
Date: 2023-01-23 09:32:25 +0000;;;","2023-02-20 13:50;clanger;Fix request (17u, 11u) on behalf of GitHub user shruacha1234
These changes remove duplicate keys from the javac properties file. Tier1 testing shows no issues. GHA of 11u have some errors but unrelated. The risk is low.;;;","2023-02-24 13:09;dukebot;Changeset: a5c97d4a
Author:    Shruthi <Shruthi.Shruthi1@ibm.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-02-24 21:07:31 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/a5c97d4ad752ef9f54046c48b5bdfbc9cfb84280
;;;","2023-03-01 01:10;dukebot;Changeset: a5c97d4a
Author:    Shruthi <Shruthi.Shruthi1@ibm.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-02-24 21:07:31 +0000
URL:       https://git.openjdk.org/jdk17u/commit/a5c97d4ad752ef9f54046c48b5bdfbc9cfb84280
;;;","2023-05-17 07:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1865
Date: 2023-05-08 09:37:52 +0000;;;",,,,,,,,,,,,,,,
jstat's CGCT is 5 percent higher than the pause time in -Xlog:gc.,JDK-8300742,5092049,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rrich,kyukihiro,kyukihiro,2023-01-20 02:08,2023-02-08 05:32,2023-10-01 09:56,2023-02-06 05:39,11,8,,,,,,11.0.19,hotspot,,0,gc-cms,jdk11u-fix-request,jdk11u-fix-yes,sustaining,,,,,,,,,,,,"When running Java applications with -XX:+UseConcMarkSweepGC, jstat's CGCT is 5 percent higher than  the pause time in -Xlog:gc.

Steps to Reproduce
Run the attached application.
java -Xms64m -Xmx64m -Xlog:gc CMSGCALot 64

Expected Result
jstat's CGCTis approximately equal to the pause time in -Xlog:gc.

Actual Result
jstat's CGCT is 5 percent higher than the pause time in -Xlog:gc.

jstat
    S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT    CGC    CGCT     GCT
    0.00   0.00  42.33 100.00  75.46  62.08    422    0.080  5934   87.779  5874    7.824   95.683

-Xlog:gc
    [0.247s][info][gc] GC(2) Pause Initial Mark 33M->33M(61M) 1.075ms
    [0.257s][info][gc] GC(2) Pause Remark 42M->42M(61M) 1.956ms
    ...

    [144.450s][info][gc] GC(9517) Pause Initial Mark 43M->43M(61M) 0.230ms
    [144.457s][info][gc] GC(9517) Pause Remark 61M->61M(61M) 2.176ms

Aggregating the gclog, the number of CMS cycle is 5874,  
and the sum of CMS pause time is 7392.646 ms  
jstat's CGC value is equal, but CGCT value is 5.8 percent higher than -Xlog:gc.
","Intel64 Family 6 Model 94 Stepping 3 GenuineIntel 2594 Mhz, 2 core
4GB Memory
Microsoft Windows Server 2016 Standard",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-20 02:00;kyukihiro;CMSGCALot.java;https://bugs.openjdk.org/secure/attachment/102365/CMSGCALot.java",,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i300rv:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-01-20 03:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1676
Date: 2023-01-20 10:31:44 +0000;;;","2023-02-06 05:39;dukebot;Changeset: ebac392d
Author:    Kimura Yukihiro <kimura.yukihiro@jp.fujitsu.com>
Committer: Richard Reingruber <rrich@openjdk.org>
Date:      2023-02-06 13:38:45 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/ebac392d65ab085369ae1b33cc7601d574778d0f
;;;","2023-02-08 05:13;dukebot;Changeset: ebac392d
Author:    Kimura Yukihiro <kimura.yukihiro@jp.fujitsu.com>
Committer: Richard Reingruber <rrich@openjdk.org>
Date:      2023-02-06 13:38:45 +0000
URL:       https://git.openjdk.org/jdk11u/commit/ebac392d65ab085369ae1b33cc7601d574778d0f
;;;",,,,,,,,,,,,,,,,,,
"java/awt/List/ListGarbageCollectionTest/AwtListGarbageCollectionTest.java failed with ""List wasn't garbage collected""",JDK-8300727,5092033,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aivanov,dholmes,dholmes,2023-01-19 22:48,2023-09-04 02:43,2023-10-01 09:56,2023-03-13 08:07,21,,,,,,,21,client-libs,,0,cssn23_02_02,cssn23_03_01,intermittent,noreg-self,sustaining,tier4,,,,,,,,,,"----------System.err:(12/749)----------
java.lang.RuntimeException: List wasn't garbage collected
        at AwtListGarbageCollectionTest.test(AwtListGarbageCollectionTest.java:69)
        at AwtListGarbageCollectionTest.main(AwtListGarbageCollectionTest.java:41)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
        at java.base/java.lang.Thread.run(Thread.java:1623)",,,,,,,,,,JDK-8315314,JDK-8315287,JDK-8315626,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i300ob:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-01-20 11:30;prr;Very strange .. intermittent now but never seen before. I don't know what could have changed
but tests that rely on gc() can be flaky ;;;","2023-02-14 07:26;aivanov;Should a garbage collector be set explicitly in the test? It may help to make the test more predictable. A small delay may be required before it verifies whether the weak reference is cleared or not.;;;","2023-02-14 17:04;dholmes;This is not the way to provoke a full GC in a test reliably:

 //make out of memory to force gc
 String veryLongString = new String(new char[100]);
 while (true) {
     veryLongString += veryLongString;
  }

just use System.gc(). See e.g. test/jdk/java/lang/ref/PhantomReferentClearing.java;;;","2023-02-15 05:41;aivanov;I enabled GC logs with -Xlog:gc=debug and also added System.gc() — the test still fails intermittently. In addition to it, I used PhantomReference instead of WeakReference, the test still fails.

Also, I tried Serial GC by using -XX:+UseSerialGC. It didn't make any difference.

The test has been in the repo since 2014 and it has never failed… often. There were only 20 failures in mach5: a couple of failures in 2020 and in 2022. Then since January 2023, the test has been failing much more often.;;;","2023-02-16 06:22;aivanov;Root cause:

The garbage collection gets invoked even with the original code which generated OOME. Yet the WeakReference wasn't cleared as expected. The test didn't provide any opportunity to re-try.

I replaced the code to call System.gc() directly instead of relying on OOME. I used PhantomReference instead of WeakReference. It didn't work from the first attempt. In majority of cases, it required another call to System.gc() to make the reference enqueued.

The fix:

Call System.gc() in a loop and wait for the reference to be enqueued. The test allows 5 attempts before it fails.;;;","2023-02-16 06:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12594
Date: 2023-02-16 14:38:21 +0000;;;","2023-03-13 08:07;dukebot;Changeset: f835aaaf
Author:    Alexey Ivanov <aivanov@openjdk.org>
Date:      2023-03-13 15:05:15 +0000
URL:       https://git.openjdk.org/jdk/commit/f835aaafc7332d324ca9b08b2a34539fc1c573aa
;;;",,,,,,,,,,,,,,
Cleanup ProblemList-svc-vthread.txt,JDK-8300721,5092023,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2023-01-19 18:02,2023-01-25 23:08,2023-10-01 09:56,2023-01-20 12:03,21,,,,,,,21,core-svc,,0,noreg-self,,,,,,,,,,,,,,,There are a number of entries in ProblemList-svc-vthread.txt that don't have any CRs associated with them. CRs have been since been created and the problemlist needs to be updated to reflect this:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,"0|i300m3:",9223372036854775807,b07,,,,,,,,,,,"2023-01-19 18:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12109
Date: 2023-01-20 02:12:43 +0000;;;","2023-01-20 12:03;dukebot;Changeset: 5784eb7b
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-01-20 19:58:54 +0000
URL:       https://git.openjdk.org/jdk/commit/5784eb7b68a880e130fda5f07c527187764038a2
;;;",,,,,,,,,,,,,,,,,,,
JDK 20 RDP2 L10n resource files update,JDK-8300719,5092021,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dnguyen,dnguyen,dnguyen,2023-01-19 16:31,2023-02-06 04:48,2023-10-01 09:56,2023-01-26 14:35,20,,,,,,,20,globalization,,0,jdk20-fix-request,jdk20-fix-yes,sn_135,sn_136,,,,,,,,,,,,The code changes which affects translation need between RDP1 and RDP2 should be addressed for JDK 20 GA,,,,,,,,,,JDK-8301540,JDK-8301289,JDK-8301529,,,,,,,,,,,,,,,,,,,,,JDK-8295856,,,,,,,,,,,JDK-8301206,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i300ln:",9223372036854775807,b34,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@52b4192d,,,,,,,,,"2023-01-24 12:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/116
Date: 2023-01-24 20:50:00 +0000;;;","2023-01-25 14:59;dnguyen;Fix Request
This fix is to update these various properties, wxl, etc files for RDP2 in JDK20 with the translated files for JDK20. It needs to be updated to keep the localized files up to date with their English source files. The changes have been tested and passed all tests ran against it. This has been reviewed by people from each component.;;;","2023-01-25 15:10;naoto;Fix request approved.;;;","2023-01-26 14:35;dukebot;Changeset: a67b1e77
Author:    Damon Nguyen <dnguyen@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-26 22:33:04 +0000
URL:       https://git.openjdk.org/jdk20/commit/a67b1e77d33339f5db36c6d15bac0423a31eb5ee
;;;",,,,,,,,,,,,,,,,,
Use @snippet in java.text,JDK-8300706,5092007,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-01-19 15:09,2023-01-30 13:04,2023-10-01 09:56,2023-01-23 18:06,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,"Multiple classes/interfaces within the java.text package have already implemented @snippet/JEP413 for code examples.

This issue implements JEP 413 for the remaining classes/interfaces:

BreakIterator
CharacterIterator
DateFormatSymbols
DecimalFormat
NumberFormat",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i300ij:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-01-20 10:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12121
Date: 2023-01-20 17:41:35 +0000;;;","2023-01-23 18:06;dukebot;Changeset: 0323609f
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-24 02:05:05 +0000
URL:       https://git.openjdk.org/jdk/commit/0323609f44e68ba8d992419a23be7066838a0e01
;;;",,,,,,,,,,,,,,,,,,,
Update boot JDK to 19.0.2,JDK-8300705,5092006,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,arapte,kcr,kcr,2023-01-19 15:05,2023-02-02 08:34,2023-10-01 09:56,2023-02-02 05:39,jfx20,,,,,,,jfx20,javafx,2023-02-01 00:00,0,noreg-build,,,,,,,,,,,,,,,"Now that JDK 19.0.2 has released we should update the boot JDK for JavaFX to use JDK 19.0.2.

It would be good to get this into JavaFX 20 before RDP2.",,,,,,,,,,JDK-8301690,,,,,,,,,,,,,,,,,,,,,,JDK-8291588,,,,,,,,,,,,JDK-8297068,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i300ib:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1556b386,,,,,,,,,"2023-02-01 09:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1019
Date: 2023-02-01 17:39:55 +0000;;;","2023-02-02 05:39;dukebot;Changeset: 8f2fac06
Author:    Ambarish Rapte <arapte@openjdk.org>
Date:      2023-02-02 13:38:30 +0000
URL:       https://git.openjdk.org/jfx/commit/8f2fac06152d3332e169f5b5389ac2ba84d18bc2
;;;",,,,,,,,,,,,,,,,,,,
Missing @since tag for ClassFileFormatVersion.RELEASE_21,JDK-8300698,5091999,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,darcy,darcy,darcy,2023-01-19 13:47,2023-01-25 23:07,2023-10-01 09:56,2023-01-19 14:13,21,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,"The addition of the new enum constant for ClassFileFormatVersion.RELEASE_21 neglected to include an @since tag; this should be corrected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296149,JDK-8300953,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i300gr:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@313ae9a0,,,,,,,,,"2023-01-19 14:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12107
Date: 2023-01-19 21:52:16 +0000;;;","2023-01-19 14:13;dukebot;Changeset: f2a1eb98
Author:    Joe Darcy <darcy@openjdk.org>
Date:      2023-01-19 22:11:23 +0000
URL:       https://git.openjdk.org/jdk/commit/f2a1eb980437b43cde222755dbf427d7916cf9e2
;;;",,,,,,,,,,,,,,,,,,,
[AIX] AttachReturnError fails,JDK-8300696,5091997,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2023-01-19 13:34,2023-02-06 10:42,2023-10-01 09:56,2023-01-31 23:06,,,,,,,,21,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,"Created on Behalf of Deepa Kumari.

The test test/hotspot/jtreg/serviceability/dcmd/jvmti/AttachFailed/AttachReturnError.java fails. The list of dynamic libs contains libreturnerror after it has been unloaded.

Failing output:
 stdout: [Dynamic libraries:
   text: 0x0000000100000000 - 0x000000010001e8f0, data: 0x000000011000026b - 0x0000000110008c78 java
 * text: 0x0800000000000000 - 0x080000000536157d, data: 0x08001000a0000ee9 - 0x08001000a027f300 /home/hotspot/openjdk/jdk-tyler/build/aix-ppc64-server-fastdebug/images/jdk/lib/server/libjvm.so
   text: 0x0800000005362000 - 0x080000000536b58d, data: 0x08001000a0280250 - 0x08001000a0280e20 /home/hotspot/openjdk/jdk-tyler/build/aix-ppc64-server-fastdebug/images/jdk/lib/libjimage.so
   text: 0x080000000536c000 - 0x08000000053a3712, data: 0x08001000a0281032 - 0x08001000a0284498 /home/hotspot/openjdk/jdk-tyler/build/aix-ppc64-server-fastdebug/images/jdk/lib/libjava.so
   text: 0x08000000053a4000 - 0x08000000053c05ca, data: 0x08001000a02867d8 - 0x08001000a0288078 /home/hotspot/openjdk/jdk-tyler/build/aix-ppc64-server-fastdebug/images/jdk/lib/libnio.so
   text: 0x08000000053c1000 - 0x08000000053d1e75, data: 0x08001000a02854af - 0x08001000a0285e60 /home/hotspot/openjdk/jdk-tyler/build/aix-ppc64-server-fastdebug/images/jdk/lib/libnet.so
   text: 0x08000000053d2000 - 0x08000000053efb62, data: 0x08001000a02896d0 - 0x08001000a0289fa0 /home/hotspot/openjdk/jdk-tyler/build/aix-ppc64-server-fastdebug/images/jdk/lib/libzip.so
   text: 0x08000000053f0000 - 0x08000000053f638c, data: 0x08001000a028abb5 - 0x08001000a028b2a0 /home/hotspot/openjdk/jdk-tyler/build/aix-ppc64-server-fastdebug/images/jdk/lib/libmanagement.so
   text: 0x08000000053f7000 - 0x08000000053fe850, data: 0x08001000a028c71c - 0x08001000a028cd90 /home/hotspot/openjdk/jdk-tyler/build/aix-ppc64-server-fastdebug/images/jdk/lib/libmanagement_ext.so
   text: 0x08000000053ff000 - 0x08000000053ff523, data: 0x08001000a028d380 - 0x08001000a028d3b8 /home/hotspot/openjdk/jdk-tyler/build/aix-ppc64-server-fastdebug/images/test/hotspot/jtreg/native/libReturnError.so
   text: 0x0900000000000d80 - 0x090000000048ac87, data: 0x09001000a0000820 - 0x09001000a01168a0 /usr/lib/libc.a(shr_64.o)
   text: 0x090000000048b9a0 - 0x09000000004b07c7, data: 0x09001000a01aa170 - 0x09001000a01b63a0 /usr/lib/libodm.a(shr_64.o)
   text: 0x09000000004b1220 - 0x09000000004b1c7e, data: 0x09001000a01177a8 - 0x09001000a0117930 /usr/lib/libcrypt.a(shr_64.o)
   text: 0x09000000004b2e80 - 0x09000000004dc27b, data: 0x09001000a01cf720 - 0x09001000a01d9784 /usr/lib/libcorcfg.a(shr_64.o)
   text: 0x090000000052d060 - 0x09000000005447fd, data: 0x09001000a01c0c90 - 0x09001000a01cec60 /usr/lib/libsrc.a(shr_64.o)
   text: 0x0900000000545f80 - 0x090000000055cd89, data: 0x09001000a01b7e18 - 0x09001000a01bf5b0 /usr/lib/libcfg.a(shr_64.o)
   text: 0x090000000055d000 - 0x09000000005a400c, data: 0x09001000a0118000 - 0x09001000a01a9184 /usr/lib/libpthreads.a(shr_xpg5_64.o)
   text: 0x090000000065b380 - 0x090000000072b994, data: 0x09001000a0211178 - 0x09001000a024aa2d /usr/lib/liblvm.a(shr_64.o)
   text: 0x090000000072c8a0 - 0x09000000007c88e8, data: 0x09001000a024b520 - 0x09001000a026f858 /usr/lib/libperfstat.a(shr_64.o)
   text: 0x09000000007c9600 - 0x090000000081b586, data: 0x09001000a01e9800 - 0x09001000a01f0930 /opt/IBM/xlc/16.1.0/../../../../usr/lpp/xlC/lib/libC.a(shrcore_64.o)
   text: 0x0900000000b1ec80 - 0x0900000000b56d9d, data: 0x09001000a01f1280 - 0x09001000a020aa80 /opt/IBM/xlc/16.1.0/../../../../usr/lpp/xlC/lib/libC.a(ansicore_64.o)
   text: 0x0900000000dab000 - 0x0900000000dab2fb, data: 0x09001000a02f7000 - 0x09001000a02f7000 /usr/lib/libdl.a(shr_64.o)
   text: 0x0900000001953600 - 0x0900000001b06cf8, data: 0x09001000a05d0c00 - 0x09001000a060ff68 /opt/IBM/xlc/16.1.0/../../../../usr/lpp/xlC/lib/libc++.a(shr_64.o)
   text: 0x0900000001b07500 - 0x0900000001b6f72d, data: 0x09001000a05bfb00 - 0x09001000a05cff10 /opt/IBM/xlc/16.1.0/../../../../usr/lpp/xlC/lib/libc++.a(cxxabi_64.o)

];
 stderr: []
 exitValue = -1
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,"0|i300gb:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-01-26 15:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12138
Date: 2023-01-23 09:36:35 +0000;;;","2023-01-31 23:06;dukebot;Changeset: 8164cfbc
Author:    Deepa Kumari <dpakri181@gmail.com>
Committer: Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-02-01 07:04:26 +0000
URL:       https://git.openjdk.org/jdk/commit/8164cfbc0373e57619e18324931f0946b51ae18f
;;;",,,,,,,,,,,,,,,,,,,
GCC 12 reports some compiler warnings in bundled freetype,JDK-8300692,5091993,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dlutker,dlutker,dlutker,2023-01-19 11:54,2023-08-07 14:20,2023-10-01 09:56,2023-01-21 04:09,17,20,21,,,,,21,client-libs,,0,amazon-interest,freetype,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,,,,,,,,,"
If you run configure with `--with-freetype=bundled` and are using GCC 12.2.0, a number of `stringop-overflow` and `dangling-pointer` warnings are produced.


/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c: In function 'gray_convert_glyph':
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c:1968:20: error: storing the address of local variable 'buffer' in '*worker.ycells' [-Werror=dangling-pointer=]
 1968 |     ras.ycells     = (PCell*)buffer;
      |                    ^
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c:1950:14: note: 'buffer' declared here
 1950 |     TCell    buffer[FT_MAX_GRAY_POOL];
      |              ^~~~~~
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c:1950:14: note: 'worker' declared here
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c:1961:26: error: storing the address of local variable 'buffer' in '*worker.cell_null' [-Werror=dangling-pointer=]
 1961 |     ras.cell_null        = buffer + FT_MAX_GRAY_POOL - 1;
      |                          ^
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c:1950:14: note: 'buffer' declared here
 1950 |     TCell    buffer[FT_MAX_GRAY_POOL];
      |              ^~~~~~
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c:1950:14: note: 'worker' declared here
cc1: all warnings being treated as errors
gmake[3]: *** [/src/jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfreetype/ftgrays.o] Error 1
gmake[3]: *** Waiting for unfinished jobs....
/src/jdk/src/java.desktop/share/native/libfreetype/src/truetype/ttgload.c: In function 'load_truetype_glyph':
/src/jdk/src/java.desktop/share/native/libfreetype/src/truetype/ttgload.c:1691:22: error: storing the address of local variable 'inc_stream' in '*loader.stream' [-Werror=dangling-pointer=]
 1691 |       loader->stream = &inc_stream;
      |       ~~~~~~~~~~~~~~~^~~~~~~~~~~~~
/src/jdk/src/java.desktop/share/native/libfreetype/src/truetype/ttgload.c:1624:21: note: 'inc_stream' declared here
 1624 |     FT_StreamRec    inc_stream;
      |                     ^~~~~~~~~~
/src/jdk/src/java.desktop/share/native/libfreetype/src/truetype/ttgload.c:1624:21: note: 'loader' declared here
In function 'cf2_hintmask_read',
    inlined from 'cf2_hintmask_read' at /src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:131:3,
    inlined from 'cf2_interpT2CharString' at /src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:2640:11:
/src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:156:25: error: writing 1 byte into a region of size 0 [-Werror=stringop-overflow=]
  156 |       hintmask->mask[i] = (FT_Byte)cf2_buf_readByte( charstring );
      |       ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:46:
/src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/pshints.h: In function 'cf2_interpT2CharString':
/src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/pshints.h:80:14: note: at offset 12 into destination object 'mask' of size 12
   80 |     FT_Byte  mask[( CF2_MAX_HINTS + 7 ) / 8];
      |              ^~~~
In function 'cf2_hintmask_read',
    inlined from 'cf2_hintmask_read' at /src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:131:3,
    inlined from 'cf2_interpT2CharString' at /src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:2609:11:
/src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:156:25: error: writing 1 byte into a region of size 0 [-Werror=stringop-overflow=]
  156 |       hintmask->mask[i] = (FT_Byte)cf2_buf_readByte( charstring );
      |       ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/pshints.h: In function 'cf2_interpT2CharString':
/src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/pshints.h:80:14: note: at offset 12 into destination object 'mask' of size 12
   80 |     FT_Byte  mask[( CF2_MAX_HINTS + 7 ) / 8];
      |              ^~~~
cc1: all warnings being treated as errors
gmake[3]: *** [/src/jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfreetype/psintrp.o] Error 1
cc1: all warnings being treated as errors
gmake[3]: *** [/src/jdk/build/linux-x86_64-server-release/support/native/java.desktop/libfreetype/ttgload.o] Error 1
gmake[3]: *** wait: No child processes.  Stop.
gmake[2]: *** [java.desktop-libs] Error 1

ERROR: Build failed for target 'images' in configuration 'linux-x86_64-server-release' (exit code 2) 
Stopping javac server

=== Output from failing command(s) repeated here ===
* For target support_native_java.desktop_libfreetype_ftgrays.o:
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c: In function 'gray_convert_glyph':
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c:1968:20: error: storing the address of local variable 'buffer' in '*worker.ycells' [-Werror=dangling-pointer=]
 1968 |     ras.ycells     = (PCell*)buffer;
      |                    ^
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c:1950:14: note: 'buffer' declared here
 1950 |     TCell    buffer[FT_MAX_GRAY_POOL];
      |              ^~~~~~
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c:1950:14: note: 'worker' declared here
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c:1961:26: error: storing the address of local variable 'buffer' in '*worker.cell_null' [-Werror=dangling-pointer=]
 1961 |     ras.cell_null        = buffer + FT_MAX_GRAY_POOL - 1;
      |                          ^
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c:1950:14: note: 'buffer' declared here
 1950 |     TCell    buffer[FT_MAX_GRAY_POOL];
      |              ^~~~~~
/src/jdk/src/java.desktop/share/native/libfreetype/src/smooth/ftgrays.c:1950:14: note: 'worker' declared here
   ... (rest of output omitted)
* For target support_native_java.desktop_libfreetype_psintrp.o:
In function 'cf2_hintmask_read',
    inlined from 'cf2_hintmask_read' at /src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:131:3,
    inlined from 'cf2_interpT2CharString' at /src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:2640:11:
/src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:156:25: error: writing 1 byte into a region of size 0 [-Werror=stringop-overflow=]
  156 |       hintmask->mask[i] = (FT_Byte)cf2_buf_readByte( charstring );
      |       ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:46:
/src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/pshints.h: In function 'cf2_interpT2CharString':
/src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/pshints.h:80:14: note: at offset 12 into destination object 'mask' of size 12
   80 |     FT_Byte  mask[( CF2_MAX_HINTS + 7 ) / 8];
      |              ^~~~
In function 'cf2_hintmask_read',
    inlined from 'cf2_hintmask_read' at /src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:131:3,
    inlined from 'cf2_interpT2CharString' at /src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:2609:11:
/src/jdk/src/java.desktop/share/native/libfreetype/src/psaux/psintrp.c:156:25: error: writing 1 byte into a region of size 0 [-Werror=stringop-overflow=]
   ... (rest of output omitted)
* For target support_native_java.desktop_libfreetype_ttgload.o:
/src/jdk/src/java.desktop/share/native/libfreetype/src/truetype/ttgload.c: In function 'load_truetype_glyph':
/src/jdk/src/java.desktop/share/native/libfreetype/src/truetype/ttgload.c:1691:22: error: storing the address of local variable 'inc_stream' in '*loader.stream' [-Werror=dangling-pointer=]
 1691 |       loader->stream = &inc_stream;
      |       ~~~~~~~~~~~~~~~^~~~~~~~~~~~~
/src/jdk/src/java.desktop/share/native/libfreetype/src/truetype/ttgload.c:1624:21: note: 'inc_stream' declared here
 1624 |     FT_StreamRec    inc_stream;
      |                     ^~~~~~~~~~
/src/jdk/src/java.desktop/share/native/libfreetype/src/truetype/ttgload.c:1624:21: note: 'loader' declared here
cc1: all warnings being treated as errors

* All command lines available in /src/jdk/build/linux-x86_64-server-release/make-support/failure-logs.
=== End of repeated output ===

No indication of failed target found.
HELP: Try searching the build log for '] Error'.
HELP: Run 'make doctor' to diagnose build problems.

make[1]: *** [main] Error 1
make: *** [images] Error 2",,,,,,,,,,JDK-8301256,JDK-8307013,JDK-8304417,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i300ff:",9223372036854775807,b07,,,,,,,,,,,"2023-01-19 12:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12102
Date: 2023-01-19 20:00:56 +0000;;;","2023-01-21 04:09;dukebot;Changeset: a6c2a2ae
Author:    Dan Lutker <lutkerd@amazon.com>
Committer: Julian Waters <jwaters@openjdk.org>
Date:      2023-01-21 12:05:35 +0000
URL:       https://git.openjdk.org/jdk/commit/a6c2a2ae79be6810dca55b13bfc8a7625f25d48d
;;;","2023-01-25 22:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1115
Date: 2023-01-26 00:19:41 +0000;;;","2023-01-26 09:54;dlutker;Fix request [17u]

Backport for GCC 12 support. This is low risk and is passing tier1/2 on local builds with GCC12.2.0. ;;;","2023-03-13 05:33;mbaesken;jdk20u backport request

I would like to backport the patch for GCC 11/12 support to jdk20u, because the issue is present there too. The backport is clean and low risk.;;;","2023-03-13 05:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/19
Date: 2023-03-13 12:08:14 +0000;;;",,,,,,,,,,,,,,,
Missing copyright header in ConditionalBinding.java file,JDK-8300664,5091964,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jhendrikx,dcherepanov,dcherepanov,2023-01-19 07:05,2023-02-02 08:33,2023-10-01 09:56,2023-01-21 13:54,jfx20,,,,,,,jfx20,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,"There is a newly added ConditionalBinding.java (added by JDK-8290040) without copyright header

Full path: modules/javafx.base/src/main/java/com/sun/javafx/binding/ConditionalBinding.java",,,,,,,,,,JDK-8301003,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8290040,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3008z:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2023-01-21 05:49;kcr;I'd like to get this into JavaFX 20 (jfx20 branch).;;;","2023-01-21 08:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1007
Date: 2023-01-21 15:25:51 +0000;;;","2023-01-21 13:54;dukebot;Changeset: 05a67df6
Author:    John Hendrikx <jhendrikx@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-01-21 21:50:41 +0000
URL:       https://git.openjdk.org/jfx/commit/05a67df666bbcfc48299346005aa07b1e9d48ab5
;;;",,,,,,,,,,,,,,,,,,
"java/util/concurrent/SynchronousQueue/Fairness.java failed with ""Error: fair=true i=0 j=1""",JDK-8300663,5091963,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dl,dcubed,dcubed,2023-01-19 06:48,2023-09-16 08:48,2023-10-01 09:56,2023-07-22 03:42,21,22,,,,,,22,core-libs,,0,intermittent,jdk21u-fix-request,jdk21u-fix-SQE-ok-next,jdk21u-fix-yes,problemlist,tier5,tier8,,,,,,,,,"The following test failed in the JDK21 CI:

java/util/concurrent/SynchronousQueue/Fairness.java

Here's a snippet from the log file:

#section:main
----------messages:(7/228)----------
command: main Fairness
reason: Assumed action based on file name: run main Fairness 
started: Thu Jan 19 09:45:55 UTC 2023
Mode: agentvm
Agent id: 115
finished: Thu Jan 19 09:46:46 UTC 2023
elapsed time (seconds): 51.005
----------configuration:(12/1167)*----------

<snip>

----------System.err:(12/544)----------
java.lang.Error: fair=true i=0 j=1

	at Fairness.testFairness(Fairness.java:64)
	at Fairness.main(Fairness.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Error
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Error: fair=true i=0 j=1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314515,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i3008r:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,,,"2023-01-25 09:16;vklang;[~dcubed]

I'm not able to reproduce this problem. Could be a spurious issue related to thread scheduling of the test?;;;","2023-01-26 05:43;vklang;[~martin] Could this perhaps be related to https://github.com/openjdk/jdk/commit/63e3bd7613918c6838ee89151d62a8695e27dcba where there's a (small) window of opportunity where SynchronousQueue is not fair?;;;","2023-02-06 06:31;dl;Yes, this did arise in the initially-loom-only update to avoid spins for virtual threads but with yet being able to check for them and deal with them specially. This might be hard to address until loom is out of preview status. ;;;","2023-02-23 10:38;martin;[~vklang]  For many years, until 2021-02 (when I left Google) I did almost all integrations from jsr166 CVS into openjdk, including stress testing and release engineering.  So you can't generally tell ""real"" authorship from git blame (fine grained detail is only available via CVS!). SynchronousQueue is one of the classes that only dl understands deeply.;;;","2023-06-12 11:34;dcubed;Here's a log file snippet from the jdk-22+2-30-tier8 sighting:

java/util/concurrent/SynchronousQueue/Fairness.java

#section:main
----------messages:(7/219)----------
command: main Fairness
reason: Assumed action based on file name: run main Fairness 
started: Mon Jun 12 12:00:59 GMT 2023
Mode: agentvm
Agent id: 28
finished: Mon Jun 12 12:02:00 GMT 2023
elapsed time (seconds): 61.47
----------configuration:(12/1534)----------

<snip>

----------System.err:(12/532)----------
java.lang.Error: fair=true i=0 j=3

	at Fairness.testFairness(Fairness.java:64)
	at Fairness.main(Fairness.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1583)

JavaTest Message: Test threw exception: java.lang.Error
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Error: fair=true i=0 j=3;;;","2023-07-03 03:01;vklang;Re-assigning to you, Doug :);;;","2023-07-20 03:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14317
Date: 2023-06-05 18:52:00 +0000;;;","2023-07-22 03:42;dukebot;Changeset: 8d1ab570
Author:    Doug Lea <dl@openjdk.org>
Date:      2023-07-22 10:41:42 +0000
URL:       https://git.openjdk.org/jdk/commit/8d1ab57065c7ebcc650b5fb4ae098f8b0a35f112
;;;","2023-07-27 06:03;dl;I just noticed that this test doesn't strictly guarantee ordering of producers in the case of spurious  wakeups. Which would account for rare failures. I'll find a better way to do this. ;;;","2023-07-27 23:21;martin;I was feeling some guilt about this test, so ...
Here's a proposed improvement:


import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicReference;

public class Fairness {
    private static void testFairness(boolean fair, SynchronousQueue<Integer> q)
        throws Throwable
    {
        int threadCount = ThreadLocalRandom.current().nextInt(2, 8);
        AtomicReference<Throwable> badness = new AtomicReference<>();
        List<Thread> ts = new ArrayList<>();
        for (int i = 0; i < threadCount; i++) {
            final Integer I = i;
            CountDownLatch ready = new CountDownLatch(1);
            Runnable put = () -> {
                try {
                    ready.countDown();
                    q.put(I);
                } catch (Throwable fail) { badness.set(fail); }
            };

            Thread t = new Thread(put);
            t.start();
            ts.add(t);
            ready.await();
            // Wait for each call to q.put to block before starting the next
            while (t.getState() == Thread.State.RUNNABLE)
                Thread.yield();
        }
        for (int i = 0; i < threadCount; i++) {
            int j = q.take();
            // Fair queues are specified to be FIFO.
            // Non-fair queues are LIFO in our implementation.
            if (fair ? j != i : j != threadCount - 1 - i)
                throw new Error(String.format(""fair=%b i=%d/%d j=%d%n"",
                                              fair, i, threadCount, j));
        }
        for (Thread t : ts) t.join();
        if (badness.get() != null) throw new Error(badness.get());
    }

    public static void main(String[] args) throws Throwable {
        testFairness(false, new SynchronousQueue<Integer>());
        testFairness(false, new SynchronousQueue<Integer>(false));
        testFairness(true,  new SynchronousQueue<Integer>(true));
    }
}
;;;","2023-08-07 13:16;vklang;[~dl] [~martin] Was the test update PR:ed, or primarily for consideration?;;;","2023-08-07 13:46;dl;Not yet PRed. I'm wondering if while we are at it, we should include the stack-probe-on-yield that was done for forkjoin/AsyccShutDownNow. This would help guard against misfires on blockages during class-loading but also make it more white-box-y and so fragile wrt future updates.;;;","2023-08-08 03:24;dl;... or slightly better: If the only remaining problem is misfiring because of blockages during classloading, it would suffice to run twice, ignoring the first run. A version that adds this to Martin's s pasted below  Viktor: do you know how to run tier2 tests across platforms to check this before PR?

Also, I'm not sure why we even have this test if the only property it detects cannot be observed by users?

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicReference;

public class Fairness {
    public class Fairness {
        private static void testFairness(boolean fair, boolean warm,
                                         SynchronousQueue<Integer> q)
            throws Throwable
        {
            int threadCount = ThreadLocalRandom.current().nextInt(2, 8);
            AtomicReference<Throwable> badness = new AtomicReference<>();
            List<Thread> ts = new ArrayList<>();
            for (int i = 0; i < threadCount; i++) {
                final Integer I = i;
                CountDownLatch ready = new CountDownLatch(1);
                Runnable put = () -> {
                    try {
                        ready.countDown();
                        q.put(I);
                    } catch (Throwable fail) { badness.set(fail); }
                };

                Thread t = new Thread(put);
                t.start();
                ts.add(t);
                ready.await();
                // Wait for each call to q.put to block before starting the next
                while (t.getState() == Thread.State.RUNNABLE)
                    Thread.yield();
            }
            for (int i = 0; i < threadCount; i++) {
                int j = q.take();
                // Fair queues are specified to be FIFO.
                // Non-fair queues are LIFO in our implementation.
                if (fair ? j != i : j != threadCount - 1 - i) {
                    // ignore on warmup to avoid false-alarms on class-loading
                    String msg = String.format(""fair=%b i=%d/%d j=%d%n"",
                                               fair, i, threadCount, j);
                    if (warm)
                        throw new Error(msg);
                }
                for (Thread t : ts) t.join();
                if (badness.get() != null) throw new Error(badness.get());
            }

    public static void main(String[] args) throws Throwable {
        testFairness(false, false, new SynchronousQueue<Integer>());
        testFairness(false, false, new SynchronousQueue<Integer>(false));
        testFairness(true, false, new SynchronousQueue<Integer>(true));
        testFairness(false, true, new SynchronousQueue<Integer>());
        testFairness(false, true, new SynchronousQueue<Integer>(false));
        testFairness(true, true, new SynchronousQueue<Integer>(true));
    }
}

;;;","2023-09-13 00:52;vklang;[~martin] Having thought about this for a while, and after deliberations with Doug. I strongly suspect that any test trying to assert for fairness in this case will have to establish a total order, and as such total order is not likely to exist in any real-world use-case my bet is that fairness in this case (synchronous queue) is not observable. I'm very much open to be convinced otherwise, so if you have any suggestion as to how to proceed it's more than welcome.;;;","2023-09-15 11:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/168
Date: 2023-09-15 18:39:02 +0000;;;","2023-09-16 08:48;martin;I'm still thinking as I did in sister issue 
https://bugs.openjdk.org/browse/JDK-8314515?focusedCommentId=14605989&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14605989

SynchronousQueue does maintain a total order of its waiting threads - it's just a linked list!
This order matters to users (even if not directly observable), and is in the spec.
In the spirit of ""design for testability"",  SynchronousQueue should make its wait queue observable by adding a method to do so.  You could make it module-private if reluctant to make it public.

(But that's a lot of work and I'm not (yet) volunteering to do it myself);;;",,,,,
Refactor TestMemoryAwareness to use WhiteBox api for host values,JDK-8300659,5091958,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2023-01-19 05:35,2023-07-06 05:43,2023-10-01 09:56,2023-01-25 02:26,,,,,,,,21,core-svc,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,"In prep for JDK-8299858 it would be good to refactor the test TestMemoryAwareness.java. It currently does some imprecise matching in case swap accounting is turned off. We should fix this properly by adding WhiteBox API for retrieving physical (container host) values for memory and swap and do the proper assertions in the test.

It's also an enabler for a test for JDK-8299858.",,,,,,,,,,JDK-8310634,JDK-8311580,JDK-8307750,JDK-8307328,JDK-8307327,,,,,,,,,,,,,,,,,,,,,,,JDK-8299858,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i3007n:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-01-19 06:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12097
Date: 2023-01-19 13:57:57 +0000;;;","2023-01-25 02:26;dukebot;Changeset: 3c61d5aa
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-01-25 10:24:33 +0000
URL:       https://git.openjdk.org/jdk/commit/3c61d5aa48606dab2d2c639d5f0a56313476917d
;;;","2023-06-21 08:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1484
Date: 2023-06-21 15:08:42 +0000;;;","2023-06-22 01:31;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Applies cleanly except Copyright year change.;;;","2023-07-04 06:39;lucy;Fix request [11u] 

I backport this for parity with 11.0.21-oracle.
Whitebox obviously differs in location between 11 and head. Needed adaptations.
In all affected files, some chunks did not apply. Manual resolution was straightforward. 

GHA and SAP-internal tests succeeded. 
;;;","2023-07-05 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2031
Date: 2023-07-05 15:56:16 +0000;;;",,,,,,,,,,,,,,,
memory_and_swap_limit() reporting wrong values on systems with swapaccount=0,JDK-8300658,5091957,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2023-01-19 05:20,2023-02-22 23:16,2023-10-01 09:56,2023-02-20 09:09,21,,,,,,,21,hotspot,,0,containers,,,,,,,,,,,,,,,"JDK-8250984 and JDK-8253797 fixed this on the Java side of container support code. If reading file memory.memsw.limit_in_bytes returns an error Metrics.getMemoryAndSwapLimit() returns the memory limit (i.e. no swap). Same for cg2's memory.swap.max. Yet, on the hotspot side this isn't being treated the same way. Swap reporting is off, which yields to confusing trace output:

# podman run --rm -ti [...] --memory=200M --memory-swap=250M fedora:37
Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
[root@dc3a44d5100a /]# cd /testclasses/
[root@dc3a44d5100a testclasses]# /opt/jdk/bin/java -Xlog:os+container=trace -Xbootclasspath/a:whitebox.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI PrintContainerInfo | grep os,container | grep -A1 memsw.limit_in_bytes
[0.099s][trace][os,container] Path to /memory.memsw.limit_in_bytes is /sys/fs/cgroup/memory/memory.memsw.limit_in_bytes
[0.099s][debug][os,container] Open of file /sys/fs/cgroup/memory/memory.memsw.limit_in_bytes failed, No such file or directory
[0.099s][trace][os,container] Memory and Swap Limit is: 18446744073709551614

It also shows up via VM.info or hs_err files like so:

[root@dc3a44d5100a testclasses]# /opt/jdk/bin/java -Xbootclasspath/a:whitebox.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI PrintContainerInfo | grep -A20 cgroup
container (cgroup) information:
container_type: cgroupv1
cpu_cpuset_cpus: 0-3
cpu_memory_nodes: 0
active_processor_count: 4
cpu_quota: no quota
cpu_period: 100000
cpu_shares: no shares
memory_limit_in_bytes: 204800 k
memory_and_swap_limit_in_bytes: not supported
memory_soft_limit_in_bytes: unlimited
memory_usage_in_bytes: 28504 k
memory_max_usage_in_bytes: 28908 k
kernel_memory_usage_in_bytes: 1196 k
kernel_memory_max_usage_in_bytes: unlimited
kernel_memory_limit_in_bytes: 1324 k
maximum number of tasks: 2048
current number of tasks: 15

KVM virtualization detected
Steal ticks since vm start: 0
Steal ticks percentage since vm start:  0.000

These:
memory_limit_in_bytes: 204800 k
memory_and_swap_limit_in_bytes: not supported

Should be:
memory_limit_in_bytes: 204800 k
memory_and_swap_limit_in_bytes: 204800 k


# cat /proc/cmdline | grep swapaccount
BOOT_IMAGE=(hd0,gpt2)/vmlinuz-5.19.7-300.fc37.x86_64 root=UUID=fcdabdd6-70cf-4a94-905d-86c966fed17d ro rootflags=subvol=root rhgb quiet systemd.unified_cgroup_hierarchy=0 swapaccount=0


Comparing this to the java level which we can see with -XshowSettings:system we see:

# /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv1
    Effective CPU Count: 4
    CPU Period: 100000us
    CPU Quota: -1
    CPU Shares: -1
    List of Processors, 4 total: 
    0 1 2 3 
    List of Effective Processors, 4 total: 
    0 1 2 3 
    List of Memory Nodes, 1 total: 
    0 
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: 200.00M
    Memory Soft Limit: Unlimited
    Memory & Swap Limit: 200.00M
    Maximum Processes Limit: 2048

openjdk version ""21-internal"" 2023-09-19
OpenJDK Runtime Environment (fastdebug build 21-internal-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (fastdebug build 21-internal-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)

I.e. memory and swap limit match. Both are 200.00M. I.e. no swap.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8253797,JDK-8250984,JDK-8300645,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i3007f:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-27 09:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12262
Date: 2023-01-27 17:09:35 +0000;;;","2023-02-15 10:24;sgehwolf;Note that JDK-8300645 fixed the trace logging for 'Memory and Swap Limit is: ' that the test change in TestMemoryWithCgroupV1.java depends on. Linking the issue.;;;","2023-02-20 09:09;dukebot;Changeset: e47e9ec0
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-02-20 17:07:04 +0000
URL:       https://git.openjdk.org/jdk/commit/e47e9ec05b630c82182c7843365dfd90fdaa18a0
;;;",,,,,,,,,,,,,,,,,,
Handle julong values in logging of GET_CONTAINER_INFO macros,JDK-8300645,5091941,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2023-01-19 03:07,2023-02-22 23:12,2023-10-01 09:56,2023-02-16 02:10,,,,,,,,21,hotspot,,0,containers,,,,,,,,,,,,,,,"JDK-8194232 tried to fix a similar case to JDK-8292083, but still got it wrong for some cases. As JDK-8292083 bounds the memory limit above by the host total memory, we no longer need changes from JDK-8194232. In fact that old fix amounts to confusing trace output when GET_CONTAINER_INFO returns negative values (like OS_CONTAINER_ERROR, -2) on some systems. See JDK-8299424 for such a symptom:

[0.163s][trace][os,container] Memory and Swap Limit is: 18446744073709551614
memory_and_swap_limit_in_bytes: not supported

During review it was pointed out to better fix the GET_CONTAINER_INFO macros to properly handle logging of julong types in order to avoid those confusing trace logs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300658,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i3003v:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-24 05:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12166
Date: 2023-01-24 13:16:31 +0000;;;","2023-02-16 02:10;dukebot;Changeset: 53ae4c07
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-02-16 10:08:54 +0000
URL:       https://git.openjdk.org/jdk/commit/53ae4c07fda69358fc0b2edadf8dbfe6428de619
;;;",,,,,,,,,,,,,,,,,,,
Remove gc/shenandoah/jni/TestStringCriticalWithDedup.java,JDK-8300644,5091939,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,eosterlund,eosterlund,eosterlund,2023-01-19 02:22,2023-01-30 13:05,2023-10-01 09:56,2023-01-25 00:17,,,,,,,,21,hotspot,,0,gc-shenandoah,,,,,,,,,,,,,,,"The gc/shenandoah/jni/TestStringCriticalWithDedup.java test was designed to catch failure to pin strings being passed out to JNI critical users, because that used to be dangerous. After JDK-8299673 that is not dangerous any longer. Indeed, now we kind of want deduplication to to proceed regardless of JNI critical, which defeats the purpose of this test. It should be removed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3003f:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-01-19 02:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12089
Date: 2023-01-19 10:26:38 +0000;;;","2023-01-25 00:17;dukebot;Changeset: 95fafd09
Author:    Erik Österlund <eosterlund@openjdk.org>
Date:      2023-01-25 08:15:35 +0000
URL:       https://git.openjdk.org/jdk/commit/95fafd094f93eaf3ff15c76ca25345123d1586fe
;;;",,,,,,,,,,,,,,,,,,,
"[17u,11u] Fix DEFAULT_PROMOTED_VERSION_PRE=ea for -dev",JDK-8300642,5091937,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,goetz,goetz,goetz,2023-01-19 02:13,2023-02-08 05:54,2023-10-01 09:56,2023-01-19 11:41,11.0.19,17.0.7,,,,,,17.0.7,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"This was removed in 17.0.6 and 11.0.18 -ga.
I should have reverted this when merging the changes to the -dev repo. So now here in a change of it's own.",,,,,,,,,,JDK-8300695,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299392,JDK-8295641,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i3002z:",9223372036854775807,b01,,,,,,,,,,,"2023-01-19 02:20;goetz;Fix request [11u,17u]

Needed to have proper version string.;;;","2023-01-19 02:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1085
Date: 2023-01-19 10:19:45 +0000;;;","2023-01-19 11:41;dukebot;Changeset: b3e16fc2
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-01-19 19:40:36 +0000
URL:       https://git.openjdk.org/jdk17u-dev/commit/b3e16fc287b6656e0227b30e698f544c3998843d
;;;","2023-01-19 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1673
Date: 2023-01-19 19:58:33 +0000;;;","2023-02-08 05:54;dukebot;Changeset: b3e16fc2
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-01-19 19:40:36 +0000
URL:       https://git.openjdk.org/jdk17u/commit/b3e16fc287b6656e0227b30e698f544c3998843d
;;;",,,,,,,,,,,,,,,,
Tier1 IR Test failure after JDK-8298632 on macosx-x64-debug,JDK-8300638,5091933,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jbhateja,epeter,epeter,2023-01-19 01:34,2023-01-25 23:09,2023-10-01 09:56,2023-01-21 22:49,21,,,,,,,21,hotspot,,0,c2,Intermittent,noreg-self,oracle-triage-21,tier1,,,,,,,,,,,"We just discovered some intermittent IR Test failures for these tests:

compiler/vectorization/runner/LoopReductionOpTest.java
compiler/vectorization/runner/LoopArrayIndexComputeTest.java	
compiler/vectorization/runner/ArrayTypeConvertTest.java
compiler/vectorization/runner/ArrayShiftOpTest.java
(more tests may be affected)

They all have edited IR Rules with JDK-8298632.
https://git.openjdk.org/jdk/pull/11687
https://git.openjdk.org/jdk/commit/715b509f3d3dd2e8ef75f8e710becc959dd538e0


------------------------------------------------------------------------------
Example failure for LoopReductionOpTest.java:

Failed IR Rules (3) of Methods (2)
----------------------------------
1) Method ""public int compiler.vectorization.runner.LoopReductionOpTest.reductionAddSumOfMultiple()"" - [Failed IR rules: 2]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={""sve"", ""true"", ""sse2"", ""true""}, applyIf={}, applyIfCPUFeature={}, counts={""_#LOAD_VECTOR#_"", "">0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\\d+(\\s){2}(LoadVector.*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 > 0 [given]
           - No nodes matched!
   * @IR rule 2: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={""sve"", ""true"", ""sse2"", ""true""}, applyIf={}, applyIfCPUFeature={}, counts={""_#ADD_REDUCTION_V#_"", "">0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\\d+(\\s){2}(AddReductionV(B|S|I|L|F|D).*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 > 0 [given]
           - No nodes matched!

2) Method ""public long compiler.vectorization.runner.LoopReductionOpTest.reductionWithNonReductionDifferentSizes()"" - [Failed IR rules: 1]:
   * @IR rule 2: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIfCPUFeatureOr={""sse2"", ""true""}, applyIf={}, applyIfCPUFeature={}, counts={""_#ADD_REDUCTION_V#_"", "">0""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\\d+(\\s){2}(AddReductionV(B|S|I|L|F|D).*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 > 0 [given]
           - No nodes matched!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298632,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i30023:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-19 01:50;chagedorn;ILW = Several IR test failures on Macosx-x64 but intermittent, tier1, no workaround = MHH = P2;;;","2023-01-19 01:51;chagedorn;[~pli] Please have a look at this.;;;","2023-01-20 02:26;pli;[~jbhateja] Would you like to double check the rules for x86? It looks that sse2 you suggested is not enough for vectorizing some operations, such as PopulateIndex (from x86.ad I see it requires avx=2).

    case Op_PopulateIndex:
      if (!is_LP64 || (UseAVX < 2)) {
        return false;
      }
      break;;;;","2023-01-20 03:22;pli;Failures can be reproduced on modern x86 CPUs by using “export TEST_VM_FLAGLESS=true” and running tests with “-XX:UseAVX=0”.;;;","2023-01-20 03:38;jbhateja;[~pli] I have assigned it to myself. ;;;","2023-01-20 11:34;kvn;GHA tier1 testing (32-bit on linux-x86) now shows these failures and an other one:

compiler/vectorization/runner/ArrayIndexFillTest.java
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\d+(\s){2}(PopulateIndex.*)+(\s){2}===.*)""
           - Failed comparison: [found] 0 > 0 [given]
           - No nodes matched!
;;;","2023-01-20 13:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12124
Date: 2023-01-20 21:17:59 +0000;;;","2023-01-21 22:49;dukebot;Changeset: 7ced08d4
Author:    Jatin Bhateja <jbhateja@openjdk.org>
Date:      2023-01-22 06:47:00 +0000
URL:       https://git.openjdk.org/jdk/commit/7ced08d4ec1b4aec534bd9061f52dd72fa2270f6
;;;",,,,,,,,,,,,,
Lambda deserialization regression involving Enum method reference,JDK-8300623,5091913,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,cushon,cushon,2023-01-18 16:48,2023-02-10 11:13,2023-10-01 09:56,2023-01-23 22:42,20,,,,,,,20,tools,,0,jdk20-fix-request,jdk20-fix-yes,regression,,,,,,,,,,,,,"In the following example, serializing a lambda and reading it back in succeeds on JDK 19 and fails on JDK 20.

I think the culprit is JDK-8059632.

```
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.function.Predicate;

@SuppressWarnings(""unchecked"")
public class T {

  enum E {
    ONE,
    TWO,
    THREE
  }

  public static void main(String[] args) throws Exception {
    E e = E.ONE;
    Predicate<E> p = (Serializable & Predicate<E>) e::equals;
    try (OutputStream os = Files.newOutputStream(Paths.get(""o""));
        ObjectOutputStream oos = new ObjectOutputStream(os)) {
      oos.writeObject(p);
    }
    try (InputStream is = Files.newInputStream(Paths.get(""o""));
        ObjectInputStream ois = new ObjectInputStream(is)) {
      p = (Predicate<E>) ois.readObject();
    }
    Arrays.stream(E.values()).filter(p).forEachOrdered(System.err::println);
  }
}
```

$ java -fullversion
openjdk full version ""19.0.2+7-44""
$ javac T.java
$ java T
$ java T
ONE 

$ java -fullversion
openjdk full version ""20-ea+31-2311""
$ javac T.java
$ java T
Exception in thread ""main"" java.io.InvalidObjectException: ReflectiveOperationException during deserialization
        at java.base/java.lang.invoke.SerializedLambda.readResolve(SerializedLambda.java:280)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at java.base/java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1190)
        at java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2289)
        at java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1760)
        at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:538)
        at java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:496)
        at T.main(T.java:29)
Caused by: java.lang.reflect.InvocationTargetException
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:119)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at java.base/java.lang.invoke.SerializedLambda.readResolve(SerializedLambda.java:278)
        ... 8 more
Caused by: java.lang.IllegalArgumentException: Invalid lambda deserialization
        at T.$deserializeLambda$(T.java:11)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        ... 10 more",,,,,,,,,,JDK-8301029,JDK-8301526,JDK-8301539,,,,,,,,,,,,,,,,,,JDK-8300787,,,,,,,,,,,,,,JCK-7318744,JDK-8059632,JDK-8282080,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zzxn:",9223372036854775807,b33,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2023-01-23 03:21;jlahoda;Fix Request

This is an unintended regression in (de-)serialization caused by the fix for JDK-8059632. Unfortunately, the fix for the regression will require some discussion. The proposal is therefore to rollback the fix for JDK-8059632. The rollback applies without manual changes. Testing: Mach5 tier1-3, all passing.;;;","2023-01-23 03:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/113
Date: 2023-01-23 11:12:08 +0000;;;","2023-01-23 10:52;briangoetz;Fix request approved;;;","2023-01-23 22:41;dukebot;Changeset: a3ed7e94
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-01-24 06:40:06 +0000
URL:       https://git.openjdk.org/jdk20/commit/a3ed7e94a23c0c89138d831f4b36b26dce5b3d01
;;;","2023-01-24 00:39;forax;For the records, the problem is that the compiler generates a check if the SerializedLambda correspond to a serializable lambda that was created in the current class or not.
The problem is that the SerializedLambda instance is created by the jdk runtime, the LambdaMetaFactory which uses runtime information while the check is generated by the compiler which uses compile time informations, sometimes they disagree. I believe that the only way to solve that is that the generated bytecode should do a runtime call to the a new static method of the LambdaMetaFactory to create a second SerializedLambda from the compiler static information and compare the two SerializedLambda.
;;;","2023-01-25 12:51;vromero;Dan mentioned that JDK-8172815, is related and it could be blocking this current issue;;;",,,,,,,,,,,,,,,
ASan build does not correctly propagate options to some test launchers,JDK-8300592,5091872,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-01-18 12:39,2023-01-30 13:08,2023-10-01 09:56,2023-01-25 08:21,,,,,,,,21,infrastructure,,0,build-infra,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zzoj:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-18 12:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12082
Date: 2023-01-18 20:40:40 +0000;;;","2023-01-25 08:21;dukebot;Changeset: edf1e1ab
Author:    Justin King <jcking@openjdk.org>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2023-01-25 16:18:29 +0000
URL:       https://git.openjdk.org/jdk/commit/edf1e1ab4a49aab0990457e534cc4f7e7518efef
;;;",,,,,,,,,,,,,,,,,,,
"@SuppressWarnings option ""lossy-conversions"" missing from jdk.compiler module javadoc",JDK-8300591,5091871,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asotona,acobbs,acobbs,2023-01-18 12:36,2023-01-31 05:03,2023-10-01 09:56,2023-01-24 05:15,20,,,,,,,20,tools,,0,jdk20-fix-request,jdk20-fix-yes,,,,,,,,,,,,,,"The `@SuppressWarnings` lint option `lossy-conversions` is supported by the compiler but neither listed in `module-info.java` for the `jdk.compiler` module nor listed on the man page `javac.1`.

Looks like the former was never added and the latter may have gotten removed accidentally as part of this commit:

commit 5a45c25151b1da8e329ea2be21a0e4d2652f8b4a
Author: Jonathan Gibbons <jjg@openjdk.org>
Date:   Mon Nov 21 22:03:48 2022 +0000

    8297164: Update troff man pages and CheckManPageOptions.java
    
    Reviewed-by: dholmes

",jdk-21+5-83-g1d8b87dda4f,,,,,,,,,JDK-8300843,JDK-8301528,JDK-8301517,,,,,,,,,,,,,,,,,,JDK-8300740,,,,,,,,,,,,,,JDK-8244681,,,,,,,,,,,,,,generic,,,,,,,20,,generic,,,,,,"0|i2zzob:",9223372036854775807,b33,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-01-20 03:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12111
Date: 2023-01-20 10:59:48 +0000;;;","2023-01-23 08:15;asotona;Fix Request
""lossy-conversions"" lint warning has been added in JDK 20, however javac manpage and module javadoc has not been updated. This is request to permit backport of the doc fix. 
Thanks.;;;","2023-01-23 11:02;jjg;Fix request approved
Doc-only fix;;;","2023-01-23 14:48;dholmes;So it looks like this issue, due to the incorrect use of two fix versions was not used for the commit to mainline and so the JDK 21 backport was created. I would suggest re-targeting this issue to JDK 20 and use it for the actual ""backport"". Please ensure the javac.1 page is generated correctly by the build system, with the right version.;;;","2023-01-23 14:51;dholmes;Also the change in:

https://github.com/openjdk/jdk/pull/12111

which was obviously manually performed contains a typo: ""conversion"" instead of ""conversions"". However that is being corrected by JDK-8290918 which is doing the initial manpage generation for JDK 21.;;;","2023-01-24 05:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/114
Date: 2023-01-24 13:07:30 +0000;;;","2023-01-24 05:17;dukebot;Changeset: 60b8a985
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-01-24 13:15:02 +0000
URL:       https://git.openjdk.org/jdk20/commit/60b8a98501c6aafa47827b2f05c354c461cfe75c
;;;",,,,,,,,,,,,,,
[JVMCI] BytecodeFrame.equals is broken,JDK-8300590,5091870,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dnsimon,dnsimon,dnsimon,2023-01-18 12:09,2023-05-05 04:10,2023-10-01 09:56,2023-01-21 03:34,11.0.16-oracle,17,20,21,,,,21,hotspot,,0,jdk11u-jvmci-defer,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,jvmci,oracle-triage-21,,,,,,,,BytecodeFrame.equals returns true even when the frames are found to be not equal: https://github.com/openjdk/jdk/blob/7bf0d1465e73d83aae30f1cd9fd318af9e9c1b70/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.code/src/jdk/vm/ci/code/BytecodeFrame.java#L375,,,,,,,,,,JDK-8305552,JDK-8301947,JDK-8307031,JDK-8301957,JDK-8301857,JDK-8302411,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9,,,,,,,,"0|i2zzo3:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-19 13:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12084
Date: 2023-01-18 21:39:57 +0000;;;","2023-01-19 19:51;dlong;ILW = wrong result; never used; no workaround = MLH = P4;;;","2023-01-21 03:34;dukebot;Changeset: 06394ee8
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-01-21 11:31:44 +0000
URL:       https://git.openjdk.org/jdk/commit/06394ee8b110fe8e37a3b9e582f5dfbf225a3d89
;;;","2023-02-02 01:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1144
Date: 2023-02-02 09:39:57 +0000;;;","2023-02-06 01:04;yan;Fix request (17u):
on behalf of Radim Vansa:

I backport this as the issue appears in JDK 17, too.
Backport is clean except imports.
I can't fully asses the risk but since this is an internal class the scope should be limited.;;;","2023-03-29 04:09;thartmann;Fix Request (JDK 20u)
Resolves a JVMCI issue with a wrong result. The fix is low risk, was already backported to Oracle JDK 17u / 11u and tested in the JDK 21 and 17u / 11u CIs. The backport applies cleanly.
;;;","2023-03-29 04:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/33
Date: 2023-03-29 11:08:22 +0000;;;",,,,,,,,,,,,,,
Use @snippet and @linkplain in java.text.CollationKey and java.text.CompactNumberFormat,JDK-8300589,5091869,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-01-18 11:45,2023-01-30 13:04,2023-10-01 09:56,2023-01-23 20:38,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,"Utilize @snippet for code examples in both java.text.CollationKey and java.text.CompactNumberFormat. 

Replace anchor tags with @linkplain in java.text.CompactNumberFormat for plain text internal links.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zznv:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-01-19 14:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12108
Date: 2023-01-19 22:25:51 +0000;;;","2023-01-23 20:38;dukebot;Changeset: b3822f50
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-24 04:35:46 +0000
URL:       https://git.openjdk.org/jdk/commit/b3822f50c85524a00a045aa3a3d902f190e35906
;;;",,,,,,,,,,,,,,,,,,,
(bf) Some covariant overrides are missing @since tags,JDK-8300587,5091867,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,smarks,smarks,2023-01-18 11:31,2023-01-30 13:03,2023-10-01 09:56,2023-01-23 09:10,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,"JDK-8176865 removed a bunch of @since tags from doc comments for overriding methods. Most of these were correct to remove, because the override was merely providing an implementation of a method that was already declared in a superclass or superinterface. The set of programs that could be written didn't change with the addition of these overrides (setting aside things like reflective access). Thus, it was appropriate for these overrides not to have a @since tag.

However, that bugfix was too aggressive in removing @since tags; it removed them from covariant overrides as well as ordinary overrides. Because the introduction of a covariant override expands the set of possible programs that can be written, the addition of a @since tag is warranted.

The commit with the JDK-8176865 changes is here:

https://github.com/openjdk/jdk/commit/31374e10a35119118791b91275ff2b46cc96074f

Most, if not all, of the covariant overrides from which @since was erroneously removed are the Buffer overrides in java.nio; I've thus filed this bug in that category. However, those changes should be audited to determine whether any other @since tags were erroneously removed from other covariant overrides.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zznf:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-01-20 10:51;bpb;Based on code inspection, it appears that only MappedByteBuffer and X-Buffer.java.template had @since tags which were erroneously removed from covariant overrides. ;;;","2023-01-20 11:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12123
Date: 2023-01-20 19:29:01 +0000;;;","2023-01-23 09:10;dukebot;Changeset: 542bfe61
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-01-23 17:05:36 +0000
URL:       https://git.openjdk.org/jdk/commit/542bfe61e67b72bebff45e7382ec3f40bdab9aae
;;;",,,,,,,,,,,,,,,,,,
Refactor code examples to use @snippet in java.text.Collator,JDK-8300586,5091866,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-01-18 11:23,2023-01-25 23:07,2023-10-01 09:56,2023-01-19 14:38,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,"Implement JEP413. Additionally, it looks like the code example as seen below could use minor tweaks.

 * if( myCollator.compare(""abc"", ""ABC"") < 0 )
 *     System.out.println(""abc is less than ABC"");
 * else
 *     System.out.println(""abc is greater than or equal to ABC"");
 * }</pre>
 * </blockquote>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zzn7:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-01-18 12:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12080
Date: 2023-01-18 19:36:51 +0000;;;","2023-01-19 14:38;dukebot;Changeset: 9b97699b
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-19 22:36:17 +0000
URL:       https://git.openjdk.org/jdk/commit/9b97699be50966672d382a6f288a543ab42bdfd0
;;;",,,,,,,,,,,,,,,,,,,
4.10.1.9.putfield: verification rules allow early write to superclass field,JDK-8300585,5091865,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dlsmith,shadowbug,shadowbug,2023-01-18 11:18,2023-06-23 14:23,2023-10-01 09:56,2023-06-23 13:45,17.0.5,,,,,,,21,specification,,0,bugdb_34992747,licbug,noreg-doc,sustaining,,,,,,,,,,,,"Extracted from: https://github.com/eclipse-openj9/openj9/issues/16524

public class AcceptInvalid01 {
    public AcceptInvalid01() {
        this.field = new InputMethodEvent((Component)null, -100, (TextHitInfo)null, (TextHitInfo)null);
        super();
    }

    public static void main(String[] var0) {
    }
}

The above decompiled class is an invalid class (per the JLS), which was generated by a jasm file. IBM J9 VM accepts this ""invalid"" classfile while hotspot rejects it with:

Caused by: java.lang.VerifyError: Bad type on operand stack in putfield
Exception Details:
  Location:
    AcceptInvalid01.<init>()V @22: putfield
  Reason:
    Type uninitializedThis (current frame, stack[0]) is not assignable to 'AcceptInvalid01' (constant pool 4)
  Current Frame:
    bci: @22
    flags: { flagThisUninit }
    locals: { uninitializedThis }
    stack: { uninitializedThis, 'java/awt/event/InputMethodEvent' }
  Bytecode:
    0000000: 2abb 0003 5901 c000 0110 9c01 c000 0601
    0000010: c000 06b7 0005 b500 042a b700 02b1     

However the JVMS states:

4.9.2 Structural Constraints
...
each instance initialization method, except for the instance initialization method
derived from the constructor of class Object, must call either another instance
initialization method of this or an instance initialization method of its direct
superclass super before its instance members are accessed.

However, instance fields of this that are declared in the current class may be
assigned by putfield before calling any instance initialization method. <--------

4.10 Verification of class Files
...
putfield

A putfield instruction with operand CP is type safe iff all of the following are true:
Its first operand, CP, refers to a constant pool entry denoting a field
whose declared type is FieldType, declared in a class FieldClassName.
FieldClassName must not be an array type

If the instruction occurs in an instance initialization method of the class
FieldClassName, then one can validly pop types matching FieldType and
uninitializedThis off the incoming operand stack yielding the outgoing
type state. This allows instance fields of this that are declared in the current
class to be assigned prior to complete initialization of this. <---------

Based on the JVM Spec above, my understand is that this behavior shouldn't be captured as the assignment via putfield is totally valid & allowed before completing the initialization of this in the instance initialization method of the current class.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301601,,,,,,,,,,,JDK-8159747,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zzmz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3c76b3dd,,,,,,,,,"2023-01-18 17:31;dholmes;The issue here is a bit more subtle than I originally thought. The field does not exist. So the question is how verification should be handling this.

The type checking rules in 4.10.1.9 for putfield relate to the CP entry and the CP entry names the non-existent field in the current class. The fact it doesn't actually exist doesn't matter for verification purposes, that will be handled when the putfield actually has to resolve the field.

The problematic code is here:

     if (stack_object_type == VerificationType::uninitialized_this_type() &&
          target_class_type.equals(current_type()) &&
          _klass->find_local_field(field_name, field_sig, &fd)) {
        stack_object_type = current_type();
      }

We should not be checking for existence of the field.;;;","2023-01-19 12:04;dlong;If there is a reference to the field in the constant pool, but the field is not declared in the class (the class has 0 fields), then does it really satisfy ""instance fields of this that are declared in the current class""?;;;","2023-01-20 13:08;dlong;The descriptions of field() in 4.10.1.3 makes it sound like a simple string match (just looking at the constant pool utf8 string values, not looking at the declared fields of any classes), so it would make sense for the ""refers to a constant pool entry denoting a field"" language to describe only the semantics of the Prolog code, but it as currently written it seems ambiguous enough to be interpreted as pertaining to the results of resolution.;;;","2023-01-25 16:37;dlsmith;Agree that the spec is flawed, and HotSpot has it right: we can't allow a hostile class C to subclass another class B and modify B's fields before B looks at them in its constructor logic. (Doing so would violate the Java language's rules and programmers' assumptions about the initial state of a class at the start of its constructor.)

I'll modify 4.10.putfield to allow 'putfield' on an 'uninitializedThis' *only if* the referenced field name and descriptor are used to declare a field in the current class file.;;;","2023-06-23 13:04;dlsmith;Revised text of 4.10.1.9.putfield:

If the instruction occurs in an instance initialization method of the class 'FieldClassName' **and assigns to a field declared by the class**, then one can validly pop types matching 'FieldType' and 'uninitializedThis' off the incoming operand stack yielding the outgoing type state. This allows instance fields of 'this' that are declared in the current class to be assigned prior to complete initialization of 'this'.

instructionIsTypeSafe(putfield(CP), Environment, _Offset, StackFrame,
                      NextStackFrame, ExceptionStackFrame) :-
    CP = field(FieldClassName, FieldName, FieldDescriptor),
    parseFieldDescriptor(FieldDescriptor, FieldType),
    Environment = environment(CurrentClass, CurrentMethod, _, _, _, _),
    CurrentClass = class(FieldClassName, _),
    isInit(CurrentMethod),
    **classDeclaresMember(CurrentClass, FieldName, FieldDescriptor),**
    canPop(StackFrame, [FieldType, uninitializedThis], NextStackFrame),
    exceptionStackFrame(StackFrame, ExceptionStackFrame).

('classDeclaresMember' is a new accessor defined in 4.10.1.1. For convenience, I deleted the unused 'classAttributes' predicate.);;;","2023-06-23 13:28;dlsmith;On ""declared in a class"": yes, that's sloppy text attempting to describe the contents of a Fieldref. I'm sure there are similar problems elsewhere, but for now I updated the text of the 'getfield' and 'putfield' verification rules to say ""that is a member of a class"", consistent with the handling of Methodrefs.;;;","2023-06-23 14:23;dholmes;""member of a class"" includes inherited fields, which seems to make the definition too broad compared to ""declared in a class"".;;;",,,,,,,,,,,,,,
"[Lilliput] Properly set ZF on anon-check path; avoid some conditional branches",JDK-8300573,5091853,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rkennke,rkennke,rkennke,2023-01-18 08:56,2023-01-23 00:15,2023-10-01 09:56,2023-01-23 00:15,repo-lilliput,,,,,,,repo-lilliput,hotspot,,0,,,,,,,,,,,,,,,,"In AArch64's fast_unlock(), we need to check if the monitor owner is ANONYMOUS (only with Lilliput/fast-locking), and if so, call the runtime to fix this before exiting the monitor. I tried to be smart and used tbnz there, but it turns out that tbnz does *not* set the zero flag, but we do need the ZF set correctly on exit of fast_unlock, so that C2 generated code would actually call the slow path. Therefore we need to use the longer tst/br instructions instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,,"0|i2zzkb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-18 09:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/63
Date: 2023-01-18 17:11:02 +0000;;;",,,,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Properly set ZF on anon-check path,JDK-8300566,5091846,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,rkennke,rkennke,rkennke,2023-01-18 08:04,2023-01-23 00:15,2023-10-01 09:56,2023-01-23 00:15,repo-lilliput,,,,,,,repo-lilliput,hotspot,,0,,,,,,,,,,,,,,,,"In AArch64's fast_unlock(), we need to check if the monitor owner is ANONYMOUS (only with Lilliput/fast-locking), and if so, call the runtime to fix this before exiting the monitor. I tried to be smart and used tbnz there, but it turns out that tbnz does *not* set the zero flag, but we do need the ZF set correctly on exit of fast_unlock, so that C2 generated code would actually call the slow path. Therefore we need to use the longer tst/br instructions instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300440,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,generic,,,,,,"0|i2zzir:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-18 09:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/4
Date: 2023-01-18 16:07:01 +0000;;;",,,,,,,,,,,,,,,,,,,,
BASIC_JVM_LIBS is set for buildjdk even if this is incorrect,JDK-8300550,5091830,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ihse,ihse,ihse,2023-01-18 07:42,2023-01-23 15:49,2023-10-01 09:56,2023-01-18 12:10,21,,,,,,,21,infrastructure,,0,build-infra,,,,,,,,,,,,,,,"We setup a bunch of default library (`-l<lib>`) flags for the JVM compilation in the variable BASIC_JVM_LIBS in LIB_SETUP_LIBRARIES. Almost all of these are dependent on OS, and are thus safe to use both the the target and build compilation (since we do not support cross-OS compilation). However, the recently added libatomic is only added for certain CPUs. This means that it needs to be different for the build and target CPUs, but we currently do not differentiate these. The typical end result of this is that when you try to cross-compile, the buildjdk will be build with flags that should only have been used when building for the target platform, and this can cause failures at runtime (e.g. if no libatomic is installed).",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297851,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zzf7:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-18 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12075
Date: 2023-01-18 16:13:25 +0000;;;","2023-01-18 12:10;dukebot;Changeset: ba899b42
Author:    Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2023-01-18 20:09:34 +0000
URL:       https://git.openjdk.org/jdk/commit/ba899b42ce2b4b11cd45f8e7795479331d59a1be
;;;",,,,,,,,,,,,,,,,,,,
JFileChooser Approve button tooltip is null in Aqua L&F in CUSTOM_DIALOG mode,JDK-8300549,5091829,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,aivanov,aivanov,2023-01-18 07:38,2023-02-22 23:12,2023-10-01 09:56,2023-02-16 03:12,21,,,,,,,21,client-libs,,0,reproducer-yes,,,,,,,,,,,,,,,"The Approve button of JFileChooser in CUSTOM_DIALOG mode has no tooltip in Aqua L&F.

Other L&Fs set the tooltip.
Aqua L&F should be consistent with other Look-and-Feels.

The attached FileChooserApproveButtonTooltip.java produces the following output:

Metal - Open - Open selected file
Nimbus - Open - Open selected file
CDE/Motif - OK - Open selected file.
Mac OS X - Choose - null

This is on the build with the fix for JDK-8299522 which is currently on review https://github.com/openjdk/jdk/pull/11901#pullrequestreview-1253170424 and with the integrated fix for JDK-8300084.

Without the above prerequisites, the button text and tooltips are null; without JDK-8300084, a NullPointerException is thrown in Aqua L&F.",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300084,,JDK-8299522,,,,,,,,,,,,,,,,,,,,,,"2023-01-18 07:30;aivanov;FileChooserApproveButtonTooltip.java;https://bugs.openjdk.org/secure/attachment/102343/FileChooserApproveButtonTooltip.java",,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2zzez:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-01-25 06:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12198
Date: 2023-01-25 14:24:41 +0000;;;","2023-02-16 03:12;dukebot;Changeset: 84c058bb
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-02-16 11:10:25 +0000
URL:       https://git.openjdk.org/jdk/commit/84c058bb63ad68b0cb6c739453bdb81d2c9d369f
;;;",,,,,,,,,,,,,,,,,,,
Refactor VisibleMemberTable (method members),JDK-8300517,5091794,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prappo,prappo,prappo,2023-01-18 04:23,2023-03-20 18:06,2023-10-01 09:56,2023-03-13 13:56,21,,,,,,,21,tools,,0,noreg-cleanup,,,,,,,,,,,,,,,"Integrate various refactoring efforts, recover design.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285368,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zz77:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-03-06 12:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12887
Date: 2023-03-06 19:48:48 +0000;;;","2023-03-13 13:56;dukebot;Changeset: 7bbc5e0e
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-03-13 20:53:52 +0000
URL:       https://git.openjdk.org/jdk/commit/7bbc5e0efbcbf97e8c1d4e889bd06c33c5f4eaa5
;;;",,,,,,,,,,,,,,,,,,,
SymbolLookup::libraryLookup accepts strings with terminators,JDK-8300491,5091766,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-01-18 03:16,2023-05-31 23:26,2023-10-01 09:56,2023-05-25 08:24,19,20,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"SymbolLookup::libraryLookup(String) doesn't validate the incoming library name. So, the following is possible:


jshell> var lookup = SymbolLookup.libraryLookup(""libc.so.6\0foobar"", MemorySession.global());
lookup ==> java.lang.foreign.SymbolLookup$$Lambda$20/0x000000080105bce0@4769b07b

jshell> lookup.lookup(""strlen"");
$5 ==> Optional[MemorySegment{ id=0x6cb06628 limit: 0 }]

As it can be seen, the lookup for ""libc.so.6\0foobar"" succeds, because, under the hood, the string is truncated to ""libc.so.6"" which does exist.

The specification of the method should be clarified to throw IAE in such cases.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zz0z:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-05-24 06:19;mcimadamore;This should be fixed, as the SymbolLookup code diverges from that of System::loadLibrary. In that case, since we end up creating a File whose name contains a NULL character, File::exists() return false, and System::loadLibrary acts as if the library did not exist.
With SymbolLookup::libraryLookup(String) this does not happen. Moreover, for _any_ lookup, calling ""find"" should also perform a similar check, or we'll end up calling dlsym with a string which contains NULL chars.;;;","2023-05-24 08:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14126
Date: 2023-05-24 15:22:15 +0000;;;","2023-05-25 08:24;dukebot;Changeset: 534de6d8
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-05-25 15:22:27 +0000
URL:       https://git.openjdk.org/jdk/commit/534de6d8ae8a241562ffae002a96e40c1ae0b015
;;;",,,,,,,,,,,,,,,,,,
Spaces in name of MacOS Code Signing Identity are not correctly handled after JDK-8293550,JDK-8300490,5091765,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,clanger,clanger,clanger,2023-01-18 03:02,2023-04-18 02:05,2023-10-01 09:56,2023-01-18 22:44,20,,,,,,,20,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"JDK-8293550 reworked the handling of calling the MacOS code signing facilities. After that change, we ran into issues on a build machine where we have code signing identities with spaces in their names.

The reason is incorrect handling of argument quoting.",,,,,,,,,,JDK-8306272,JDK-8300749,JDK-8300701,JDK-8301521,JDK-8301536,,,,,,,,,,,,,,,,,,,,,,,JDK-8293550,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zz0r:",9223372036854775807,b33,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-18 03:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/111
Date: 2023-01-18 11:09:21 +0000;;;","2023-01-18 22:44;dukebot;Changeset: 62a2f232
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-01-19 06:43:44 +0000
URL:       https://git.openjdk.org/jdk20/commit/62a2f2327a7879724cab6d2d1d7d9ddfeb37d189
;;;","2023-01-18 23:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1084
Date: 2023-01-19 07:03:55 +0000;;;","2023-01-18 23:15;clanger;Fix request (17u, 11u)

Fix of a build system regression after the backport of JDK-8293550. Risk: low. Testing: GHA and SAP nightlies.;;;","2023-04-13 03:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1829
Date: 2023-04-13 10:36:23 +0000;;;",,,,,,,,,,,,,,,,
Incorrect usage of CATCH_BAD_ALLOC as a macro call,JDK-8300488,5091763,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-01-18 02:46,2023-01-23 15:47,2023-10-01 09:56,2023-01-18 05:12,,,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,"CATCH_BAD_ALLOC is a regular macro that does not take any parameters, awt_TrayIcon should not use it as a macro function",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288293,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zz0b:",9223372036854775807,b06,,,,,,,,,,,"2023-01-18 02:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12067
Date: 2023-01-18 10:48:58 +0000;;;","2023-01-18 05:12;dukebot;Changeset: 1aded82e
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-01-18 13:11:32 +0000
URL:       https://git.openjdk.org/jdk/commit/1aded82e546869f80b0464e92de137cc42db2658
;;;",,,,,,,,,,,,,,,,,,,
Build failure on Windows 32 after JDK-8296401,JDK-8300463,5091738,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,fyang,shade,shade,2023-01-18 01:36,2023-02-06 10:40,2023-10-01 09:56,2023-01-30 16:11,21,,,,,,,21,hotspot,,0,noreg-build,oraclejdk-na,,,,,,,,,,,,,,"Windows 32 builds fail after JDK-8296401:

```
c:\buildbot\worker\build-jdkx-windows\build\src\hotspot\share\utilities/concurrentHashTable.inline.hpp(998): warning C4018: '<': signed/unsigned mismatch
make[3]: *** [lib/CompileJvm.gmk:147: /cygdrive/c/buildbot/worker/build-jdkx-windows/build/build/windows-x86-server-fastdebug/hotspot/variant-server/libjvm/objs/resolvedMethodTable.obj] Error 1
``` ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296401,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zyur:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-22 04:58;fyang;Hi, I find this issue also triggers when building slowdebug on linux-aarch64 platform with GCC-9.4.0.
```
In file included from /home/realfyang/openjdk-jdk/src/hotspot/share/memory/allocation.hpp:29,
                 from /home/realfyang/openjdk-jdk/src/hotspot/share/classfile/classLoaderData.hpp:28,
                 from /home/realfyang/openjdk-jdk/src/hotspot/share/prims/resolvedMethodTable.cpp:26:
/home/realfyang/openjdk-jdk/src/hotspot/share/utilities/concurrentHashTable.inline.hpp: In instantiation of 'size_t ConcurrentHashTable<CONFIG, F>::delete_check_nodes(ConcurrentHashTable<CONFIG, F>::Bucket*, EVALUATE_FUNC&, size_t, ConcurrentHashTable<CONFIG, F>::Node**, GrowableArrayCHeap<ConcurrentHashTable<CONFIG, F>::Node*, F>&) [with EVALUATE_FUNC = ResolvedMethodTableDeleteCheck; CONFIG = ResolvedMethodTableConfig; MEMFLAGS F = MEMFLAGS::mtClass; size_t = long unsigned int]':
/home/realfyang/openjdk-jdk/src/hotspot/share/utilities/concurrentHashTable.inline.hpp:518:12:   required from 'void ConcurrentHashTable<CONFIG, F>::do_bulk_delete_locked_for(Thread*, size_t, size_t, EVALUATE_FUNC&, DELETE_FUNC&, bool) [with EVALUATE_FUNC = ResolvedMethodTableDeleteCheck; DELETE_FUNC = ResolvedMethodTableDoDelete; CONFIG = ResolvedMethodTableConfig; MEMFLAGS F = MEMFLAGS::mtClass; size_t = long unsigned int]'
/home/realfyang/openjdk-jdk/src/hotspot/share/utilities/concurrentHashTableTasks.inline.hpp:177:5:   required from 'bool ConcurrentHashTable<CONFIG, F>::BulkDeleteTask::do_task(Thread*, EVALUATE_FUNC&, DELETE_FUNC&) [with EVALUATE_FUNC = ResolvedMethodTableDeleteCheck; DELETE_FUNC = ResolvedMethodTableDoDelete; CONFIG = ResolvedMethodTableConfig; MEMFLAGS F = MEMFLAGS::mtClass]'
/home/realfyang/openjdk-jdk/src/hotspot/share/prims/resolvedMethodTable.cpp:326:37:   required from here
/home/realfyang/openjdk-jdk/src/hotspot/share/utilities/concurrentHashTable.inline.hpp:1000:24: error: comparison of integer expressions of different signedness: 'size_t' {aka 'long unsigned int'} and 'int' [-Werror=sign-compare]
 1000 |         guarantee(dels < std::numeric_limits<int>::max(),
/home/realfyang/openjdk-jdk/src/hotspot/share/utilities/debug.hpp:102:9: note: in definition of macro 'guarantee'
  102 |   if (!(p)) {                                                                     \
      |         ^
cc1plus: all warnings being treated as errors
```

Builds fine on linux-aarch64 with the following trivial fix:

```
diff --git a/src/hotspot/share/utilities/concurrentHashTable.inline.hpp b/src/hotspot/share/utilities/concurrentHashTable.inline.hpp
index 884295fc754..84a8a2e4d6e 100644
--- a/src/hotspot/share/utilities/concurrentHashTable.inline.hpp
+++ b/src/hotspot/share/utilities/concurrentHashTable.inline.hpp
@@ -997,7 +997,7 @@ inline size_t ConcurrentHashTable<CONFIG, F>::
       if (dels < num_del) {
         ndel[dels] = rem_n;
       } else {
-        guarantee(dels < std::numeric_limits<int>::max(),
+        guarantee(dels < static_cast<size_t>(std::numeric_limits<int>::max()),
                   ""Growable array size is limited by a (signed) int, something is seriously bad if we reach this point, better exit"");
         extra.append(rem_n);
       }
```;;;","2023-01-24 21:47;fyang;[~shade] Hi Aleksey, I have propose a PR for this issue. Could you please help take a look and give it a try on Win32 platform? Thanks.;;;","2023-01-24 21:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12178
Date: 2023-01-25 05:43:52 +0000;;;","2023-01-30 16:11;dukebot;Changeset: aa349244
Author:    Fei Yang <fyang@openjdk.org>
Date:      2023-01-31 00:10:42 +0000
URL:       https://git.openjdk.org/jdk/commit/aa3492442bb89f84c6427ced0bd687d6a10839cf
;;;",,,,,,,,,,,,,,,,,
[11u] Chunk lost in backport of 8297569,JDK-8300424,5091698,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,goetz,goetz,goetz,2023-01-17 23:10,2023-02-08 04:23,2023-10-01 09:56,2023-01-18 03:11,11.0.19,,,,,,,11.0.19,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,,"Merging the dependent pull request removed the change to HostPortrange.java. The resulting merge was empty. Thus I missed this chunk was lost.

java/net/URLPermission/URLPermissionTest.java is failing without this fix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300223,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zylv:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-01-17 23:30;goetz;Fix request [11u]

Required fix for 8297569;;;","2023-01-17 23:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1668
Date: 2023-01-18 07:29:02 +0000;;;","2023-01-18 03:11;dukebot;Changeset: c1dfd3ee
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-01-18 11:08:52 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/c1dfd3ee8f7a9b9c24cb5a6b5cf7c3b58ed5db4a
;;;","2023-02-08 04:23;dukebot;Changeset: c1dfd3ee
Author:    Goetz Lindenmaier <goetz@openjdk.org>
Date:      2023-01-18 11:08:52 +0000
URL:       https://git.openjdk.org/jdk11u/commit/c1dfd3ee8f7a9b9c24cb5a6b5cf7c3b58ed5db4a
;;;",,,,,,,,,,,,,,,,,
java.security.MessageDigestSpi clone can result in thread-unsafe clones,JDK-8300416,5091367,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,mpowers,webbuggrp,webbuggrp,2023-01-13 07:53,2023-07-21 07:35,2023-10-01 09:56,2023-02-07 09:42,11,17,19,20,8,,,21,security-libs,,0,dcsaw,dcs-checked,reproducer-yes,webbug,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
The tempArray in MessageDigestSpi is shallow copied on clone, thus clones of MessageDigestSpi are not thread-safe.

The error is very unlikely to happen in reality as tempArray is only allocated if engineUpdate was called with a ByteBuffer that is not array backed before clone.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See test example code

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Cloning MessageDigest objects results in two objects that are safe to be used in different threads.
ACTUAL -
Cloned MessageDigest can share some memory and thus influence their behaviour.

---------- BEGIN SOURCE ----------
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.util.Arrays;
import java.util.Random;

public class CloneDigest {
    public static void main(final String[] args) throws Exception {
        final var d1 = MessageDigest.getInstance(""MD5"");

        final ByteBuffer buffer = ByteBuffer.allocateDirect(1024);
        final var r = new Random(1024);

        fillBuffer(r, buffer);

        d1.update(buffer); // this statement triggers tempArray allocation

        final var d2 = (MessageDigest) d1.clone();

        assert Arrays.equals(d1.digest(), d2.digest());

        final var t1 = updateThread(d1);
        final var t2 = updateThread(d2);
        t1.join();
        t2.join();

        if (!Arrays.equals(d1.digest(), d2.digest())) {
            throw new AssertionError(""digests differ"");
            // cloned digest shares some memory with original one
            // and is thus not thread safe
        }

    }

    private static void fillBuffer(final Random r, final ByteBuffer buffer) {
        final byte[] bytes = new byte[buffer.capacity()];
        r.nextBytes(bytes);
        buffer.clear();
        buffer.put(bytes);
        buffer.flip();
    }

    public static Thread updateThread(final MessageDigest d) {
        final var t = new Thread(() -> {
            final var r = new Random(1024);
            final ByteBuffer buffer = ByteBuffer.allocateDirect(1024);
            for (int i = 0; i < 1024; i++) {
                fillBuffer(r, buffer);
                d.update(buffer);
            }
        });
        t.start();
        return t;
    }
}

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Do not clone MessageDigest that were already updated.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-15 21:28;tongwan;CloneDigest.java;https://bugs.openjdk.org/secure/attachment/102321/CloneDigest.java",,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zwkb:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,Verified,,"2023-01-15 21:38;tongwan;The observations on Windows 10:
JDK 8: Failed, AssertionError: digests differ observed.
JDK 11: Failed.
JDK 17: Failed.
JDK 19: Failed.
JDK 20ea+23: Failed.;;;","2023-01-31 09:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12348
Date: 2023-01-31 16:54:03 +0000;;;","2023-02-07 09:42;dukebot;Changeset: 2e2e71e1
Author:    Mark Powers <mpowers@openjdk.org>
Committer: Sean Mullan <mullan@openjdk.org>
Date:      2023-02-07 17:40:22 +0000
URL:       https://git.openjdk.org/jdk/commit/2e2e71e1fa326b8d30f018a3e0726bbcd6d24019
;;;",,,,,,,,,,,,,,,,,,
EdDSA does not verify when there is no message,JDK-8300399,5091670,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,weijun,weijun,weijun,2023-01-17 19:12,2023-01-25 23:06,2023-10-01 09:56,2023-01-19 10:34,,,,,,,,21,security-libs,,0,,,,,,,,,,,,,,,,"A signature algorithm should allow signing an empty message, i.e. calling sign() without any update() call, and such a signature should be verifiable. In SunEC's EdDSA implementation, verify() always returns false if update() is not called.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zyfn:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-01-17 19:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12059
Date: 2023-01-18 03:21:29 +0000;;;","2023-01-19 10:34;dukebot;Changeset: b317658d
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2023-01-19 18:32:08 +0000
URL:       https://git.openjdk.org/jdk/commit/b317658d69a477df04ded3cc2e107970f8a6e20d
;;;",,,,,,,,,,,,,,,,,,,
Refactor code examples to use @snippet in java.text.CollationElementIterator,JDK-8300356,5091626,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-01-17 15:03,2023-01-25 23:07,2023-10-01 09:56,2023-01-19 14:37,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,Implement JEP 413,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zy5v:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-01-17 16:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12055
Date: 2023-01-17 23:14:53 +0000;;;","2023-01-19 14:37;dukebot;Changeset: fbbb27e7
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-19 22:35:24 +0000
URL:       https://git.openjdk.org/jdk/commit/fbbb27e77085c346a251e75527af8b21e76f7fc5
;;;",,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/stress/strace/strace* tests fail with ""ERROR: wrong lengths of stack traces""",JDK-8300317,5091584,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,dcubed,dcubed,2023-01-17 12:15,2023-03-20 18:08,2023-10-01 09:56,2023-03-15 10:18,21,,,,,,,21,hotspot,,0,loom,noreg-self,tier8,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

vmTestbase/nsk/stress/strace/strace015.java

Here's a snippet from the log file:

#section:main
----------messages:(6/273)----------
command: main nsk.stress.strace.strace015
reason: User specified action: run main/othervm/native nsk.stress.strace.strace015 
started: Tue Jan 17 04:23:37 UTC 2023
Mode: othervm [/othervm specified]
finished: Tue Jan 17 04:23:38 UTC 2023
elapsed time (seconds): 1.14
----------configuration:(0/0)----------
----------System.out:(235/8218)----------
#>  
#>  WARNING: switching log to verbose mode,
#>      because error is complained
#>  
starting threads...
strace015Thread4>waiting on a monitor
strace015Thread0>waiting on a monitor
strace015Thread1>waiting on a monitor

<snip>

strace015Thread60>waiting on a monitor
strace015Thread46>waiting on a monitor
strace015Thread47>waiting on a monitor
waiting for the defined recursion depth ...
strace015Thread96>waiting on a monitor
strace015Thread68>waiting on a monitor
strace015Thread92>waiting on a monitor

<snip>

strace015Thread82>waiting on a monitor
strace015Thread89>waiting on a monitor
strace015Thread95>waiting on a monitor
making all threads snapshots...
making snapshots of each thread...
notifying

checking lengths of stack traces...
strace015Thread4>notified
strace015Thread89>notified
strace015Thread82>notified

<snip>

strace015Thread5>notified
strace015Thread1>notified
strace015Thread0>notified
# ERROR: wrong lengths of stack traces:
# ERROR: 	strace015Thread0: 203	strace015Thread89: 200
The following stacktrace is for failure analysis.
nsk.share.TestFailure: wrong lengths of stack traces:  strace015Thread0: 203 strace015Thread89: 200
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.stress.strace.strace015.complain(strace015.java:251)
	at nsk.stress.strace.strace015.makeSnapshot(strace015.java:180)
	at nsk.stress.strace.strace015.run(strace015.java:109)
	at nsk.stress.strace.strace015.main(strace015.java:95)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
# ERROR: ***>>>Test failed<<<***


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: wrong lengths of stack traces:
# ERROR: 	strace015Thread0: 203	strace015Thread89: 200
# ERROR: ***>>>Test failed<<<***
----------System.err:(0/0)----------
----------rerun:(39/6715)*----------

<snip>

result: Failed. Execution failed: Execution failed
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295099,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2zxwj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-17 12:22;cjplummer;This seems to be the same issue as JDK-8295099, but for a different strace test. JDK-8295099 was for strace013 and has been fixed. During the review it was pointed out that al the strace tests have the same issue and another CR should be filed to clean them up, but this was never done.;;;","2023-01-17 12:32;cjplummer;It should be noted that the loom update added java.lang.Object.wait0 as an additional frame on the stack. This was accounted for with the loom changes to this test by adding wait0 to the list, but I wonder if that is also why the check for (count - k > 2) needed to be updated to fix strace013. This is what strace015 currently has (the fix in strace013 updated ""2"" to ""3"").

            if (count - k > 2) {
                complain(""wrong lengths of stack traces:\n\t""
                        + threads[0].getName() + "": "" + count
                        + ""\t""
                        + threads[i].getName() + "": "" + k);
                return false;
          };;;","2023-01-17 17:00;dholmes;Any test involving the stack for Object.wait() needs the slack 'k' adjusted from 2 to 3.;;;","2023-01-24 11:39;mseledtsov;ILW = MML = P4;;;","2023-02-23 14:12;dcubed;Here's a log file snippet for the jdk-21+11-835-tier8 sighting:

vmTestbase/nsk/monitoring/stress/thread/strace004/TestDescription.java

#section:main
----------messages:(6/390)----------
command: main nsk.monitoring.stress.thread.strace001 -invocationType=native -threadCount=50 -depth=200
reason: User specified action: run main/othervm/native nsk.monitoring.stress.thread.strace001 -invocationType=native -threadCount=50 -depth=200 
started: Thu Feb 23 19:53:02 GMT 2023
Mode: othervm [/othervm specified]
finished: Thu Feb 23 19:53:08 GMT 2023
elapsed time (seconds): 6.123
----------configuration:(0/0)----------
----------System.out:(467/22807)----------
#>  
#>  WARNING: switching log to verbose mode,
#>      because error is complained
#>  
ThreadMonitor> Test mode:	DIRECTLY access to MBean
ThreadController> number of created threads:	50
ThreadController> depth for all threads:	200
ThreadController> invocation type:	native

Iteration: 0
All threads started: 50
# ERROR: Length of the stack trace is 206, but expected to be not greater than 205
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Length of the stack trace is 206, but expected to be not greater than 205
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.monitoring.stress.thread.strace001.checkTrace(strace001.java:212)
	at nsk.monitoring.stress.thread.strace001.run(strace001.java:106)
	at nsk.monitoring.stress.thread.strace001.main(strace001.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
# ERROR: Unexpected 0 element of the stack trace:
# ERROR: 	jdk.internal.event.Event.<init>
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Unexpected 0 element of the stack trace:  jdk.internal.event.Event.<init>
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.monitoring.stress.thread.strace001.checkElement(strace001.java:252)
	at nsk.monitoring.stress.thread.strace001.checkTrace(strace001.java:228)
	at nsk.monitoring.stress.thread.strace001.run(strace001.java:106)
	at nsk.monitoring.stress.thread.strace001.main(strace001.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
# ERROR: Unexpected 1 element of the stack trace:
# ERROR: 	jdk.internal.event.ThreadSleepEvent.<init>;;;","2023-03-13 20:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13008
Date: 2023-03-14 00:45:03 +0000;;;","2023-03-15 10:18;dukebot;Changeset: 7ad48ea3
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-03-15 17:15:51 +0000
URL:       https://git.openjdk.org/jdk/commit/7ad48ea3ad3e90de64fbc73bf6d555a567b994f4
;;;",,,,,,,,,,,,,,
java.text.MessageFormat has incorrect doc comment,JDK-8300308,5091575,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-01-17 11:42,2023-01-23 15:49,2023-10-01 09:56,2023-01-18 15:13,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,"In the Usage Information of java.text.MessageFormat, there is a comment in the example source code with the wrong variable name. 

*  MessageFormat mf = new MessageFormat(""{0}, {0}, {0}"");
 * String forParsing = ""x, y, z"";
 * Object[] objs = mf.parse(forParsing, new ParsePosition(0));
 * // result now equals {new String(""z"")}

The comment should be targeted at objs, not result. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zxuj:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-01-17 13:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12050
Date: 2023-01-17 21:28:23 +0000;;;","2023-01-17 14:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12054
Date: 2023-01-17 22:44:29 +0000;;;","2023-01-18 15:13;dukebot;Changeset: 31a2e02a
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-18 23:10:57 +0000
URL:       https://git.openjdk.org/jdk/commit/31a2e02afcf4853f71925ec75a9a6427b08b4cbd
;;;",,,,,,,,,,,,,,,,,,
Refactor code examples to use @snippet in java.text.DateFormat,JDK-8300307,5091574,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-01-17 11:11,2023-01-23 15:49,2023-10-01 09:56,2023-01-18 15:11,,,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,Implement JEP 413 to update Javadoc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zxub:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-01-17 14:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12053
Date: 2023-01-17 22:35:54 +0000;;;","2023-01-18 15:11;dukebot;Changeset: dfe94b89
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-18 23:09:46 +0000
URL:       https://git.openjdk.org/jdk/commit/dfe94b89f82a6a43e2f563bcf93cf5a13930c44e
;;;",,,,,,,,,,,,,,,,,,,
[AIX] TestDaemonDestroy fails due to !is_primordial_thread assertion,JDK-8300295,5091562,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2023-01-17 10:00,2023-02-08 23:40,2023-10-01 09:56,2023-02-03 07:37,21,,,,,,,21,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,"Created on behalf of Varada M.

The test at test/hotspot/jtreg/runtime/jni/daemonDestroy/TestDaemonDestroy.java.

Fails at the assertion 'guarantee0(!os::is_primordial_thread());' from src/hotspot/os/aix/os_aix.cpp:405.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8171505,,,,,,,JDK-8300139,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,"0|i2zxrn:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-19 14:13;dholmes;Isn't this just a duplicate of JDK-8300139?;;;","2023-01-20 08:46;tsteele;Hi David, JDK-8300139 is essentially the 'parent' issue. My suggestion to Varada was to first apply the technique proposed by that issue on this smaller scope, then apply it to the remaining tests. I think the review process will be more manageable with just one test to focus on--in any case it will save them from duplicating any suggestions across 5 or so tests.;;;","2023-01-26 15:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12006
Date: 2023-01-16 05:59:43 +0000;;;","2023-02-03 07:37;dukebot;Changeset: bccd55bf
Author:    Varada M <mvarada2000@gmail.com>
Committer: Tyler Steele <tsteele@openjdk.org>
Date:      2023-02-03 15:35:26 +0000
URL:       https://git.openjdk.org/jdk/commit/bccd55bfdf3ae60389a8283cd2eed9c5e9dbe881
;;;",,,,,,,,,,,,,,,,,
SegmentScope.isAccessibleBy returning incorrect values,JDK-8300275,5091541,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,pgundarlahal,pgundarlahal,2023-01-17 07:53,2023-02-02 04:22,2023-10-01 09:56,2023-01-18 04:39,20,,,,,,,20,core-libs,,0,conformance,tck-red-20,tck-red-20.0.1,,,,,,,,,,,,,"MemorySegment.allocateNative(1024, SegmentScope.auto()).scope().isAccessibleBy(Thread.currentThread()) returns false.
Similarly
MemorySegment.allocateNative(1024, SegmentScope.global()).scope().isAccessibleBy(Thread.currentThread()) returns false too.
From documentation of SegmentScope.auto(), SegmentScope.global(), the returned scope object is accessible by any thread.

Arena.openShared().scope().isAccessibleBy(Thread.currentThread()) returns false. Though shared scope documentation doesn't explicitly state accessibility by multiple threads, the result is counter intuitive",,,,,,,,,,JDK-8301520,JDK-8300621,JDK-8301535,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zxmz:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-01-17 13:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/110
Date: 2023-01-17 18:30:16 +0000;;;","2023-01-18 04:39;dukebot;Changeset: b9275a8e
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-01-18 12:36:15 +0000
URL:       https://git.openjdk.org/jdk20/commit/b9275a8ed1c462cfad33dab140022e5968765e58
;;;",,,,,,,,,,,,,,,,,,,
[IR framework] Handle <!-- safepoint while printing --> message instead of bailing out,JDK-8300273,5091539,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,thartmann,thartmann,2023-01-17 07:34,2023-06-23 01:01,2023-10-01 09:56,2023-02-02 06:41,17,20,21,,,,,21,hotspot,,0,intermittent,ir-framework,oracle-triage-11,oracle-triage-21,,,,,,,,,,,,"Instead of bailing out of IR matching when encountering the ""<!-- safepoint while printing -->"" message, we should extend the HotSpotPidFileParser to handle this case. This would allow us to get rid of this special case handling in IR matching.


Original report:

With the following VM change, that should be harmless, TestCompareUnsigned.java fails intermittently (1/10):

diff --git a/src/hotspot/share/code/codeCache.cpp b/src/hotspot/share/code/codeCache.cpp
index 1ecefbe26c2..b463268dd68 100644
--- a/src/hotspot/share/code/codeCache.cpp
+++ b/src/hotspot/share/code/codeCache.cpp
@@ -1435,7 +1435,7 @@ void CodeCache::flush_dependents_on(InstanceKlass* dependee) {
     marked = mark_for_deoptimization(changes);
   }
 
-  if (marked > 0) {
+  if (true) {
     // At least one nmethod has been marked for deoptimization
     Deoptimization::deoptimize_all_marked();
   }



Run Test VM:
Command line: [/oracle/jdk/build/fastdebug/jdk/bin/java -cp /oracle/jdk/open/JTwork/classes/compiler/intrinsics/TestCompareUnsigned.d:/oracle/jdk/open/test/hotspot/jtreg/compiler/intrinsics:/oracle/jdk/open/JTwork/classes/test/lib:/oracle/jdk/open/test/lib:/oracle/jdk/open/JTwork/classes:/oracle/jdk/open/test/hotspot/jtreg:/home/tobias/programs/jtreg/lib/javatest.jar:/home/tobias/programs/jtreg/lib/jtreg.jar -Djava.library.path=. -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Dir.framework.server.port=40681 -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-560669.log -XX:CompilerDirectivesLimit=131 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet -DWarmup=1 compiler.lib.ir_framework.test.TestVM compiler.intrinsics.TestCompareUnsigned ]
[2023-01-17T15:06:39.310899397Z] Gathering output for process 560694
[2023-01-17T15:06:41.293900861Z] Waiting for completion for process 560694
[2023-01-17T15:06:41.294021205Z] Waiting for completion finished for process 560694
Output and diagnostic info for process 560694 was saved into 'pid-560694-output.log'
[2023-01-17T15:06:41.309555163Z] Waiting for completion for process 560694
[2023-01-17T15:06:41.309656107Z] Waiting for completion finished for process 560694

Compilation of Failed Method
----------------------------
1) Compilation of ""public int compiler.intrinsics.TestCompareUnsigned.lessThanInt(int,int)"":
> Phase ""PrintIdeal"":
<empty>

STDERR:

Command Line:
/oracle/jdk/build/fastdebug/jdk/bin/java -DReproduce=true -cp /oracle/jdk/open/JTwork/classes/compiler/intrinsics/TestCompareUnsigned.d:/oracle/jdk/open/test/hotspot/jtreg/compiler/intrinsics:/oracle/jdk/open/JTwork/classes/test/lib:/oracle/jdk/open/test/lib:/oracle/jdk/open/JTwork/classes:/oracle/jdk/open/test/hotspot/jtreg:/home/tobias/programs/jtreg/lib/javatest.jar:/home/tobias/programs/jtreg/lib/jtreg.jar -Djava.library.path=. -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Dir.framework.server.port=40681 -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-560669.log -XX:CompilerDirectivesLimit=131 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet -DWarmup=1 compiler.lib.ir_framework.test.TestVM compiler.intrinsics.TestCompareUnsigned

One or more @IR rules failed:

Failed IR Rules (2) of Methods (1)
----------------------------------
1) Method ""public int compiler.intrinsics.TestCompareUnsigned.lessThanInt(int,int)"" - [Failed IR rules: 2]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={}, failOn={""_#CMP_U3#_""}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - NO compilation output found for this phase! Make sure this phase is emitted or remove it from the list of compile phases in the @IR rule to match on.
   * @IR rule 2: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#CMP_U#_"", ""1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - NO compilation output found for this phase! Make sure this phase is emitted or remove it from the list of compile phases in the @IR rule to match on.

>>> Check stdout for compilation output of the failed methods


  #############################################################
   - To only run the failed tests use -DTest, -DExclude,
     and/or -DScenarios.
   - To also get the standard output of the test VM run with
     -DReportStdout=true or for even more fine-grained logging
     use -DVerbose=true.
  #############################################################


compiler.lib.ir_framework.driver.irmatching.IRViolationException: There were one or multiple IR rule failures. Please check stderr for more information.
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.throwIfNoSafepointWhilePrinting(IRMatcher.java:72)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.reportFailures(IRMatcher.java:62)
	at compiler.lib.ir_framework.driver.irmatching.IRMatcher.match(IRMatcher.java:50)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:754)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:719)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:339)
	at compiler.intrinsics.TestCompareUnsigned.main(TestCompareUnsigned.java:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8306922,,,,,,,JDK-8310711,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zxmj:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-17 07:35;thartmann;It might well be that this is expected behavior with the VM change but it was not obvious to me and should be investigated.

ILW = IR framework failure due to missing compilation output, single test and only with VM changes, no workaround = MLH = P4;;;","2023-01-17 07:37;thartmann;It's worth noting that non-failing runs often print:

Found <!-- safepoint while printing -->, bail out of IR matching;;;","2023-01-27 01:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12246
Date: 2023-01-27 09:31:40 +0000;;;","2023-02-02 06:41;dukebot;Changeset: 59b7fb1a
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-02-02 14:39:28 +0000
URL:       https://git.openjdk.org/jdk/commit/59b7fb1a91c594f98f06b28cb95310a38565397d
;;;",,,,,,,,,,,,,,,,,
The selected item in an editable JComboBox with titled border is not visible in Aqua LAF,JDK-8300269,5091535,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,dnguyen,mvs,mvs,2023-01-17 06:59,2023-05-25 09:10,2023-10-01 09:56,2023-01-27 15:11,20,21,,,,,,20,client-libs,,0,jdk20-fix-request,jdk20-fix-yes,macos,regression,regression_8054572,sn_135,sn_136,sqebug,,,,,,,,"The selected item in an editable JComboBox with titled border is not visible in Aqua LAF. This is working fine in other LAFs and fails only in Aqua LAF. 

This seems to be a regression introduced between JDK-20-ea+1 and JDK-20-ea+18 and reproducible only in JDK 20 and 21. The exact build which this regression got introduced seems to be JDK-20 b16.

I have attached the screenshot as well a simple reproducer code for this issue.

Other observations:
1. This is reproducible only in an editable JComboBox, but in non-editable case, the selected item is barely visible(not completely visible).
2. This is reproducible only in JComboBox with a titled border.
3. There is another issue in editable JComboBox with a titled border in Aqua LAF that, it is not actually editable. May be I will raise a separate issue for this as this is even reproducible in JDK 17,19,20,21 also.",MacOS,,,,,,,,,JDK-8301532,JDK-8301543,JDK-8301394,,,,,,,,,,,,,,,,,,,,,,,JDK-8300409,,JDK-8300296,,,,,,,JDK-8300409,JDK-8054572,,,,"2023-01-17 06:48;mvs;EditableComboBoxWithTitledBorderTest.java;https://bugs.openjdk.org/secure/attachment/102332/EditableComboBoxWithTitledBorderTest.java","2023-01-17 06:46;mvs;TitledBorderComboBox.png;https://bugs.openjdk.org/secure/attachment/102333/TitledBorderComboBox.png",,,,,,,,generic,,,,,,b16,20,,os_x,,,,,,"0|i2zxln:",9223372036854775807,b34,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-01-17 07:46;psadhukhan;Might be related to JDK-8054572;;;","2023-01-17 11:37;dnguyen;I ran the attached test with and without my previous fix. It does seem to cause the visibility issue, so I will look into why TitledBorder is causing this. I'd assume it's because the TitledBorder is creating a border of the wrong size since the fix causing the issue modifies the width/height of an Aqua ComboBox.;;;","2023-01-17 13:45;dnguyen;The fixed comboBox height from the previous fix causes an issue with TitledBorder because adding this border changes the height of the comboBox rectangle. 

This was found by reverting the changes and adding the changes in increments. The only change that causes the issue is the height. And when the height values are recorded, the height of the comboBox with a TitledBorder is nearly double the normal comboBox's height.

Will find a fix to account for the size of the border as well.;;;","2023-01-18 17:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12087
Date: 2023-01-19 01:12:29 +0000;;;","2023-01-26 21:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/119
Date: 2023-01-27 02:40:27 +0000;;;","2023-01-27 13:20;dnguyen;Fix Request
An editable JComboBox with a TitledBorder wasn't visible as a UI element for Aqua L&F. This was due to a change in an Aqua L&F's ComboBox to set a static height to match native macOS UI. This change reverts back to the old height calculation when a border is added to an Aqua ComboBox. The risk is low and tests in clientlibs have already been run with all passes. The PR has been reviewed by Prasanta Sadhukhan, Alexander Zuev, and Alisen Chung.;;;","2023-01-27 13:48;prr;Fix request approved

Contingent on 2 Reviewers approving.;;;","2023-01-27 15:11;dukebot;Changeset: ef6200c7
Author:    Damon Nguyen <dnguyen@openjdk.org>
Committer: Alexander Zuev <kizune@openjdk.org>
Date:      2023-01-27 23:09:14 +0000
URL:       https://git.openjdk.org/jdk20/commit/ef6200c727332796d2e1c8ae3bfa155cbaa72f4c
;;;",,,,,,,,,,,,,
ServerImpl allows too many idle connections when using sun.net.httpserver.maxIdleConnections,JDK-8300268,5091534,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dclarke,dclarke,dclarke,2023-01-17 06:58,2023-02-15 23:17,2023-10-01 09:56,2023-02-09 04:29,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"The `sun.net.httpserver.maxIdleConnections` property currently only gets checked once in ServerImpl.java, 
When there are multiple connections being executed simultaneously it is possible for several to pass this if statement and then proceed to the idle state which results in there being too many IdleConnections",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zxlf:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-02-03 10:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12413
Date: 2023-02-03 17:58:28 +0000;;;","2023-02-09 04:29;dukebot;Changeset: e4d1cff6
Author:    Darragh Clarke <Darragh.clarke@oracle.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2023-02-09 12:27:57 +0000
URL:       https://git.openjdk.org/jdk/commit/e4d1cff6597ac25d435fe16e0fc49d23f6e65df4
;;;",,,,,,,,,,,,,,,,,,,
C2: vectorization fails on simple ByteBuffer loop,JDK-8300258,5091523,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2023-01-17 06:03,2023-03-28 01:20,2023-10-01 09:56,2023-03-09 00:02,11,17,20,21,,,,21,hotspot,,0,c2,c2-superword,oracle-triage-21,performance,,,,,,,,,,,,"This showed up with some panama benchmarks.
The following code snippet (extracted from a ByteBuffer benchmark) is not vectorized:

    public static void testByteLong4(byte[] dest, long[] src, int start, int stop) {
        for (int i = start; i < stop; i++) {
            UNSAFE.putLongUnaligned(dest, 8 * i + baseOffset, src[i]);
        }
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zxiz:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-17 06:16;chagedorn;ILW = Missed vectorization opportunity in C2, rare?, no workaround = MLH = P4;;;","2023-02-06 06:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12440
Date: 2023-02-06 14:15:19 +0000;;;","2023-03-09 00:02;dukebot;Changeset: dc523a58
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-03-09 08:00:24 +0000
URL:       https://git.openjdk.org/jdk/commit/dc523a58a6ece87e5865bea0342415a969172c77
;;;",,,,,,,,,,,,,,,,,,
C2: vectorization is sometimes skipped on loops where it would succeed,JDK-8300256,5091521,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,roland,roland,2023-01-17 05:58,2023-03-28 02:56,2023-10-01 09:56,2023-02-01 01:51,17,20,21,,,,,21,hotspot,,0,c2,c2-superword,oracle-triage-11,oracle-triage-21,performance,,,,,,,,,,,"This showed up with some panama benchmarks.
The following code snippet is not vectorized because vectorization is not even attempted after range check eliminations has eliminated all tests in the main loop body:

    public static void test1(byte[] dest, long[] src) {
        for (int i = 0; i < src.length; i++) {
            if ((i < 0) || (8 > sizeBytes - i)) {
                throw new IndexOutOfBoundsException();
            }
            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + i * 8, src[i]);
        }
    }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301944,,,,,,,JDK-8301785,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zxij:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-17 06:12;chagedorn;ILW = Missed vectorization opportunity in C2, rare?, no workaround = MLH = P4;;;","2023-01-20 07:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12116
Date: 2023-01-20 15:15:40 +0000;;;","2023-02-01 01:51;dukebot;Changeset: 2a8ae2ff
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-02-01 09:48:54 +0000
URL:       https://git.openjdk.org/jdk/commit/2a8ae2ff1c95cb75f315eb5340bff2b46409d1ae
;;;",,,,,,,,,,,,,,,,,,
ASan build does not correctly propagate ASAN_OPTIONS,JDK-8300254,5091518,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2023-01-17 05:49,2023-01-23 15:44,2023-10-01 09:56,2023-01-17 13:55,,,,,,,,21,infrastructure,,0,asan,,,,,,,,,,,,,,,"Building Hotspot with ASan results in many failed tests in jtreg due to ASAN_OPTIONS not being propagated to the VM process. We should use the same approach as UBSan and just automagically compile the default options in. Except not for all binaries, only for those that launch the JVM.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299826,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zxhv:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-17 06:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12039
Date: 2023-01-17 13:50:48 +0000;;;","2023-01-17 13:55;dukebot;Changeset: 00b6c551
Author:    Justin King <jcking@openjdk.org>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2023-01-17 21:53:34 +0000
URL:       https://git.openjdk.org/jdk/commit/00b6c551ec4254ff9adf9749f5eb3980af3ddb3d
;;;",,,,,,,,,,,,,,,,,,,
ModuleReader.find on exploded module throws if resource name maps to invalid file path,JDK-8300228,5091485,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,alanb,cstein,cstein,2023-01-16 20:08,2023-01-23 15:43,2023-10-01 09:56,2023-01-17 08:27,17,20,21,9,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"An InvalidPathException is thrown by Class.getResource(String) by the following program when launched on Windows using the module path with exploded elements:

`mod/module-info.java`
```
module mod {}
```

`mod/pac/Main.java`
```
  package pac;
  class Main {
    public static void main(String... args) {
      Main.class.getResource(""a""); // -> null
      Main.class.getResource("":""); // -> null | InvalidPathException
    }
  }
```

> javac -d classes --module-source-path . --module mod

> java --module-path classes --module mod/pac.Main
Exception in thread ""main"" java.nio.file.InvalidPathException: Illegal char <:> at index 4: pac\:
        at java.base/sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:182)
        at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:153)
        at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77)
        at java.base/sun.nio.fs.WindowsPath.parse(WindowsPath.java:92)
        at java.base/sun.nio.fs.WindowsFileSystem.getPath(WindowsFileSystem.java:232)
        at java.base/jdk.internal.module.Resources.toSafeFilePath(Resources.java:143)
        at java.base/jdk.internal.module.Resources.toFilePath(Resources.java:97)
        at java.base/jdk.internal.module.ModuleReferences$ExplodedModuleReader.find(ModuleReferences.java:382)
        at java.base/jdk.internal.loader.BuiltinClassLoader.findResource(BuiltinClassLoader.java:497)
        at java.base/jdk.internal.loader.BuiltinClassLoader.findResource(BuiltinClassLoader.java:277)
        at java.base/java.lang.Class.getResource(Class.java:2927)
        at mod/pac.Main.main(Main.java:5)

A work-around is running the program on the class path:

> java --class-path classes/mod pac.Main

Another work-around is to archive the program and run it on the module path:

> jar --create --file mod.jar -C classes/mod .

> java --module-path mod.jar --module mod/pac.Main",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2zxaj:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@34132c1c,,,,,,,,,"2023-01-17 01:34;alanb;The ModuleReader for exploded modules should not throw InvalidPathException when the resource name maps to an invalid file path.;;;","2023-01-17 04:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12035
Date: 2023-01-17 11:34:52 +0000;;;","2023-01-17 08:27;dukebot;Changeset: fb147aae
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2023-01-17 16:25:11 +0000
URL:       https://git.openjdk.org/jdk/commit/fb147aaea1593e8a13d562d15994f67cdde3eb35
;;;",,,,,,,,,,,,,,,,,,
"[macos_aarch64] assert(cpu_has(""hw.optional.arm.FEAT_AES"")) failed after JDK-8297092",JDK-8300227,5091484,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,haosun,dholmes,dholmes,2023-01-16 18:31,2023-06-30 12:52,2023-10-01 09:56,2023-01-16 22:44,21,,,,,,,21,hotspot,,0,noreg-build,regression,tier1,tier2,tier3,,,,,,,,,,,"[2023-01-17T02:23:42,276Z] Error getting java.specification.version for /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+6-316/macosx-aarch64-debug.jdk/jdk-21/fastdebug: exit code 134
[2023-01-17T02:23:42,276Z] # To suppress the following error report, specify this argument
[2023-01-17T02:23:42,276Z] # after -XX: or in .hotspotrc:  SuppressErrorAt=/vm_version_bsd_aarch64.cpp:75
[2023-01-17T02:23:42,277Z] #
[2023-01-17T02:23:42,277Z] # A fatal error has been detected by the Java Runtime Environment:
[2023-01-17T02:23:42,277Z] #
[2023-01-17T02:23:42,277Z] #  Internal Error (/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S82745/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2e52dd00-5922-4a1e-8f2a-b7c3aa1b783b/runs/2c5f2fc1-fee9-422c-8983-6143a4bd8635/workspace/open/src/hotspot/os_cpu/bsd_aarch64/vm_version_bsd_aarch64.cpp:75), pid=79523, tid=9987
[2023-01-17T02:23:42,277Z] #  assert(cpu_has(""hw.optional.arm.FEAT_AES"")) failed: should be
[2023-01-17T02:23:42,277Z] #
[2023-01-17T02:23:42,277Z] # JRE version:  (21.0+6) (fastdebug build )
[2023-01-17T02:23:42,277Z] # Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+6-LTS-316, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
[2023-01-17T02:23:42,277Z] # Core dump will be written. Default location: core.79523
[2023-01-17T02:23:42,277Z] #
[2023-01-17T02:23:42,277Z] # An error report file with more information is saved as:
[2023-01-17T02:23:42,277Z] # /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-21+6-316/src.full/open/hs_err_pid79523.log

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297092,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,21,,os_x,,,,,,"0|i2zxab:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-16 18:42;dholmes;Unable to retrive hs_err file so far.

Machine Info:
Name	Value
cpu_name	Apple_M1
os_vendor	Apple
os_version	11.4
os_arch	aarch64
cpu_totalCores	8
hw_model	Macmini9_1
os_description	Mac_OS_X_11.4
os_name	macosx
;;;","2023-01-16 19:46;haosun;Hi [~dholmes], thanks for reporting this bug.

1) We previously missed this build failure mainly because our internal CI was run on one Macmini with new XNU kernel version, i.e. xnu-8020.140.41
```
Darwin 21.6.0 Darwin Kernel Version 21.6.0: Sat Jun 18 17:05:47 PDT 2022; root:xnu-8020.140.41~1/RELEASE_ARM64_T8101 arm64 arm64 Macmini9,1 Darwin
```

2) I can reproduce this failure on one Macmini with XNU version xnu-7195
```
Darwin 20.6.0 Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:20 PDT 2021; root:xnu-7195.141.6~3/RELEASE_ARM64_T8101 arm64
```

Root cause:
From https://github.com/apple-oss-distributions/xnu/blob/rel/xnu-7195/bsd/kern/kern_mib.c#L855, we can see sysctl string name ""FEAT_ASE"" is not introduced in xnu-7195.
Hence, our assertions added in JDK-8297092 would fail.

I will make a patch soon.;;;","2023-01-16 22:22;dholmes;[~haosun] is that patch forthcoming? If not then I will have to initiate a backout as this is crippling our CI. Thanks.;;;","2023-01-16 22:29;haosun;Hi [~dholmes], it's https://github.com/openjdk/jdk/pull/12022

As mentioned in the commit msg, I checked the JDK build in my Macmini. 
Could you also help test this PR with your CI?
Thanks in advance.;;;","2023-01-16 22:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12022
Date: 2023-01-17 06:27:15 +0000;;;","2023-01-16 22:44;dukebot;Changeset: f829a679
Author:    Hao Sun <haosun@openjdk.org>
Date:      2023-01-17 06:43:58 +0000
URL:       https://git.openjdk.org/jdk/commit/f829a67935328824d2465d9073107cda7eaaf216
;;;",,,,,,,,,,,,,,,
JDK-8288516 causes build failure on Windows + VS2010,JDK-8300225,5091480,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stooke,andrew,andrew,2023-01-16 11:32,2023-01-18 12:54,2023-10-01 09:56,2023-01-17 16:17,,,,,,,,openjdk8u362,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300593,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b08,openjdk8u362,,windows,,,,,,"0|i2zx9f:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-17 16:17;andrew;Changeset: 36321be7
Author: Simon Tooke <stooke@openjdk.org>
Committer: Andrew John Hughes <andrew@openjdk.org>
Date: 2023-01-16 19:41:13 +0000
URL: https://git.openjdk.org/jdk8u/commit/36321be7840c8e044340b8c162a75dce3ae7698f;;;",,,,,,,,,,,,,,,,,,,,
Add a pre-check for the number of canonical equivalent permutations in j.u.r.Pattern,JDK-8300207,5091459,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,rgiulietti,rgiulietti,2023-01-16 06:04,2023-08-14 07:09,2023-10-01 09:56,2023-01-22 04:47,11,17,20,8,,,,21,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,"The computation of the number of canonical equivalent permutations requires a pre-check to ensure the correctness of the result in the `int` range.

A check failure indicates that the computation would overflow the `int` range. As a consequence, there's no point in generating the permutations, as that would later lead to an `OutOfMemoryError`.

From a logical perspective, however, a failure still indicates an `OutOfMemoryError` condition, although not a physical one. Thus, `OutOfMemoryError` is thrown pre-emptively with a descriptive message.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296573,,,JDK-8300209,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zx4r:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,Verified,,"2023-01-17 01:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12027
Date: 2023-01-17 09:44:17 +0000;;;","2023-01-22 04:47;dukebot;Changeset: 030b071d
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2023-01-22 12:45:52 +0000
URL:       https://git.openjdk.org/jdk/commit/030b071db1fb6197a2633a04b20aa95432a903bc
;;;",,,,,,,,,,,,,,,,,,,
Sealed-class hierarchy graph missing nodes,JDK-8300204,5091456,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,liach,pminborg,pminborg,2023-01-16 05:30,2023-06-28 08:38,2023-10-01 09:56,2023-05-12 14:01,,,,,,,,21,tools,,1,,,,,,,,,,,,,,,,"The graphic rendering of the sealed class hierarchy is incomplete as no sub-nodes of ValueLayout is rendered.

This used to work at some previous time as indicated in https://bugs.openjdk.org/browse/JDK-8295653",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8311051,,,,,"2023-01-16 05:32;pminborg;SH_MemoryLayout.png;https://bugs.openjdk.org/secure/attachment/102327/SH_MemoryLayout.png",,,,,,,,,,,,,,,,,,,,,,,,"0|i2zx43:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-05-08 19:43;liach;This is because the package detection is wrong; for say java.util.Map.Entry it will report java.util.Map as the package. I can provide a small patch to fix this.;;;","2023-05-08 20:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13875
Date: 2023-05-09 03:11:10 +0000;;;","2023-05-12 14:01;dukebot;Changeset: d8afc7be
Author:    Chen Liang <liach@openjdk.org>
Committer: Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-05-12 20:59:31 +0000
URL:       https://git.openjdk.org/jdk/commit/d8afc7beeb4c41c2dae4ec1dd6671464eaec4720
;;;",,,,,,,,,,,,,,,,,,
"When storing MemoryAddress.ofLong(0x0000000080000000L), MemorySegment.get is not equal to MemorySegment.set because of the expanded sign  ",JDK-8300201,5091129,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pminborg,webbuggrp,webbuggrp,2023-01-11 05:17,2023-02-02 09:39,2023-10-01 09:56,2023-02-02 09:39,19,,,,,,,21,core-libs,,0,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Debian i386 | armhf OpenJDK 19

A DESCRIPTION OF THE PROBLEM :
storing a MemoryAddress.ofLong(0x0000000080000000L) via MemorySegmen.set(ValueLayout.ADDRESS, offset, value) and retriving it via MemorySegmen.set(ValueLayout.ADDRESS, offset) both memory addresses are not equal because of the expanded sign in the retrieved value. 
Both memory addresses point to the same location one with 0x0000000080000000L and the other with 0xffffffff80000000L the upper 4 bytes are ignored ...

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
just run the source code provided

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
either both memory addresses have the value 0xffffffff80000000L or the upper half of the value is ignored on 32 bit pointer platforms.
ACTUAL -
test fails

---------- BEGIN SOURCE ----------
    @Test
    public void testGetAtIndex_32BitAddress() {
        try (MemorySession ms = MemorySession.openConfined()) {

            MemorySegment pointerArray = MemorySegment.allocateNative(128, ms);
            MemoryAddress expected = MemoryAddress.ofLong(0x0000000080000000L);

            pointerArray.setAtIndex(ValueLayout.ADDRESS, 0, expected);

            MemoryAddress actual = pointerArray.getAtIndex(ValueLayout.ADDRESS, 0);

            Assertions.assertEquals(expected, actual);
        }
    }

    @Test
    public void testGet_32BitAddress() {
        try (MemorySession ms = MemorySession.openConfined()) {

            MemorySegment pointerArray = MemorySegment.allocateNative(128, ms);
            MemoryAddress expected = MemoryAddress.ofLong(0x0000000080000000L);

            pointerArray.set(ValueLayout.ADDRESS, 0, expected);

            MemoryAddress actual = pointerArray.get(ValueLayout.ADDRESS, 0);

            Assertions.assertEquals(expected, actual);
        }
    }

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-12 03:16;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/102285/Main.java",,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zv3f:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-01-11 22:24;tongwan;Requested more details of running the reproducer from the submitter.;;;","2023-01-12 03:15;tongwan;The observations on Windows 10:
JDK 19 64 bits: Passed, no failed tests.;;;","2023-01-16 03:48;tongwan;On 32 bits, all factories for MemoryAddress (or MemorySegment in 20) should normalize high order bits.;;;","2023-01-16 09:16;mcimadamore;Maybe the issue was closed prematurely - e.g. we need to make sure that all the paths in the API apply the same kind of normalization when working with 32-bits platforms. At the time of writing, this is not the case.;;;","2023-01-18 01:12;pnarayanaswa;Additional Information from submitter
============================
Test will fail on systems with 32 bit pointer size. On 64 there is no conversation from a signed (intptr_t) 32 bit pointer to a int64_t.
So on debian armhf(32bit) or i386 you can reproduce it. On 64 bit pointer size it can't be reproduced. 
;;;","2023-01-23 09:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/774
Date: 2023-01-23 16:52:39 +0000;;;",,,,,,,,,,,,,,,
Fall-through issue occurs when using record pattern in switch statements,JDK-8300195,5091429,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,webbuggrp,webbuggrp,2023-01-15 04:48,2023-02-10 11:11,2023-10-01 09:56,2023-01-18 02:46,20,,,,,,,20,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Apple M1 Macbook Pro
Mac OS Ventura 13.1
Openjdk version ""20-ea"" 2023-03-21
OpenJDK Runtime Environment (build 20-ea+31-2311)


A DESCRIPTION OF THE PROBLEM :
Fall-through issue occurs when trying to use record pattern with generic or non-generic types in switch statements

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
I'm creating a record as follow:

record Input<T>(T t){}

Then I define a method called print that takes an Input<T> as parameter.

private static <T> void print(Input<T> input){

        switch (input){
            case Input(String s) -> System.out.println(s);
            case Input(Double i) -> System.out.println(i);
            default -> System.out.println(""defult"");
        }
    }

Then I create two Input instances of different types

var stringInput  = new Input<>(""String"");
var intInput = new Input<>(1.2);

Finally I pass two different types of input instances as arguments to the print method.

print(stringInput);
print(intInput);

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Waiting to see Hello and 1.2 results in console
ACTUAL -
I'm getting java.lang.ClassCastException that says ""class java.lang.String cannot be cast to class java.lang.Double (java.lang.String and java.lang.Double are in module java.base of loader 'bootstrap')

---------- BEGIN SOURCE ----------
public class FallThroughIssueExample
{

    public static void main(String[] args) {

        var stringInput  = new Input<>(""Hello"");
        var intInput = new Input<>(1.2);

        print(stringInput);
        print(intInput);
    }

    private static <T> void print(Input<T> input){

        switch (input){
            case Input(String s) -> System.out.println(s);
            case Input(Double i) -> System.out.println(i);
            default -> System.out.println(""defult"");
        }
    }
}

record Input<T>(T t){}
---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,JDK-8301534,JDK-8301519,JDK-8300620,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-16 02:11;adev;FallThroughIssueExample.java;https://bugs.openjdk.org/secure/attachment/102326/FallThroughIssueExample.java",,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zwy3:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2023-01-16 02:09;adev;I am not able to reproduce the issue. I am getting compilation error on JDK 20 with preview features
PS C:\test> C:\jdk\openjdk-20-ea+20_windows-x64_bin\jdk-20\bin\java -version
openjdk version ""20-ea"" 2023-03-21
OpenJDK Runtime Environment (build 20-ea+20-1466)
OpenJDK 64-Bit Server VM (build 20-ea+20-1466, mixed mode, sharing)
PS C:\test> C:\jdk\openjdk-20-ea+20_windows-x64_bin\jdk-20\bin\javac --enable-preview -source 20 .\FallThroughIssueExample.java
.\FallThroughIssueExample.java:16: error: raw deconstruction patterns are not allowed
            case Input(String s) -> System.out.println(s);
                 ^
.\FallThroughIssueExample.java:17: error: raw deconstruction patterns are not allowed
            case Input(Double i) -> System.out.println(i);
                 ^
Note: .\FallThroughIssueExample.java uses preview features of Java SE 20.
Note: Recompile with -Xlint:preview for details.
2 errors
PS C:\test>;;;","2023-01-16 02:11;adev;With JDK 21, I can reproduce the issue:
PS C:\test> C:\jdk\openjdk-21-ea+2_windows-x64_bin\jdk-21\bin\java --enable-preview  FallThroughIssueExample
Hello
Exception in thread ""main"" java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Double (java.lang.String and java.lang.Double are in module java.base of loader 'bootstrap')
        at FallThroughIssueExample.print(FallThroughIssueExample.java:17)
        at FallThroughIssueExample.main(FallThroughIssueExample.java:9)
PS C:\test>;;;","2023-01-16 07:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/109
Date: 2023-01-16 15:11:12 +0000;;;","2023-01-18 02:46;dukebot;Changeset: c1b4212a
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-01-18 10:43:53 +0000
URL:       https://git.openjdk.org/jdk20/commit/c1b4212a53e5d26108e560a82250b01689ae03f0
;;;",,,,,,,,,,,,,,,,,
JDK-8286496 causes build failure on older GCC,JDK-8300178,5091432,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,andrew,andrew,andrew,2023-01-15 09:37,2023-01-18 09:40,2023-10-01 09:56,2023-01-17 14:49,openjdk8u362,,,,,,,openjdk8u362,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300578,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b08,openjdk8u362,,generic,,,,,,"0|i2zwyr:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-17 14:48;dukebot;Changeset: dfd2fe8e
Author:    Andrew John Hughes <andrew@openjdk.org>
Date:      2023-01-16 19:34:47 +0000
URL:       https://git.openjdk.org/jdk8u/commit/dfd2fe8ef599c609d5bfe95519728720b9b92539
;;;","2023-01-17 14:49;dukebot;Changeset: 36321be7
Author:    Simon Tooke <stooke@openjdk.org>
Committer: Andrew John Hughes <andrew@openjdk.org>
Date:      2023-01-16 19:41:13 +0000
URL:       https://git.openjdk.org/jdk8u/commit/36321be7840c8e044340b8c162a75dce3ae7698f
;;;",,,,,,,,,,,,,,,,,,,
URISyntaxException fields can be final,JDK-8300177,5091431,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,dclarke,alanb,alanb,2023-01-15 06:33,2023-02-13 11:08,2023-10-01 09:56,2023-02-07 04:35,21,,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,"URISyntaxException.{input, index} can be final.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zwyj:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-02-03 10:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12415
Date: 2023-02-03 18:10:13 +0000;;;","2023-02-07 04:35;dukebot;Changeset: 09b8a195
Author:    Darragh Clarke <Darragh.clarke@oracle.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2023-02-07 12:34:29 +0000
URL:       https://git.openjdk.org/jdk/commit/09b8a1959771213cb982d062f0a913285e4a0c6e
;;;",,,,,,,,,,,,,,,,,,,
URLEncoder/URLDecoder static fields should be private static final,JDK-8300176,5091430,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,dclarke,alanb,alanb,2023-01-15 06:22,2023-02-01 22:48,2023-10-01 09:56,2023-01-27 02:53,21,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"URLEncoder.{dontNeedEncoding, caseDiff, dfltEncName} and URLDecoder.dfltEncName should re-examined to fix the naming and to make these fields private static final.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zwyb:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-01-20 09:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12122
Date: 2023-01-20 17:41:55 +0000;;;","2023-01-27 02:53;dukebot;Changeset: d7aa87fd
Author:    Darragh Clarke <Darragh.clarke@oracle.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2023-01-27 10:52:06 +0000
URL:       https://git.openjdk.org/jdk/commit/d7aa87fdbdc0f3c5bc6c3a7a9c1b57f25fdaebd1
;;;",,,,,,,,,,,,,,,,,,,
java/net/httpclient/MappingResponseSubscriber.java failed with java.net.ConnectException,JDK-8300172,5091423,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dcubed,dcubed,2023-01-14 07:44,2023-08-04 12:48,2023-10-01 09:56,2023-01-20 01:25,21,,,,,,,21,core-libs,,0,tier2,,,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

java/net/httpclient/MappingResponseSubscriber.java

Here's a snippet from the log file:

test MappingResponseSubscriber.testAsBytes(""https://localhost:54008/https1/chunk"", true): success
test MappingResponseSubscriber.testAsBytes(""http://localhost:54009/http2/fixed"", true): failure
java.net.ConnectException
	at java.net.http/jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:896)
	at java.net.http/jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:133)
	at MappingResponseSubscriber.testAsBytes(MappingResponseSubscriber.java:135)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.net.ConnectException
	at java.net.http/jdk.internal.net.http.common.Utils.toConnectException(Utils.java:1053)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.connectAsync(PlainHttpConnection.java:224)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.checkRetryConnect(PlainHttpConnection.java:259)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.lambda$connectAsync$2(PlainHttpConnection.java:235)
	at java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:934)
	at java.base/java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:911)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1773)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	... 1 more
Caused by: java.nio.channels.ClosedChannelException
	at java.base/sun.nio.ch.SocketChannelImpl.ensureOpen(SocketChannelImpl.java:202)
	at java.base/sun.nio.ch.SocketChannelImpl.beginConnect(SocketChannelImpl.java:786)
	at java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:874)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.lambda$connectAsync$1(PlainHttpConnection.java:208)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:571)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.connectAsync(PlainHttpConnection.java:210)
	... 9 more
HTTP2_VariableHandler received request to http://localhost:54009/http2/chunk
HTTP2_VariableHandler received request to http://localhost:54009/http2/chunk
HTTP2_VariableHandler received request to http://localhost:54009/http2/chunk
test MappingResponseSubscriber.testAsBytes(""http://localhost:54009/http2/chunk"", true): success
HTTP2_FixedLengthHandler received request to https://localhost:54010/https2/fixed
HTTP2_FixedLengthHandler received request to https://localhost:54010/https2/fixed
HTTP2_FixedLengthHandler received request to https://localhost:54010/https2/fixed
test MappingResponseSubscriber.testAsBytes(""https://localhost:54010/https2/fixed"", true): success
HTTP2_VariableHandler received request to https://localhost:54010/https2/chunk
HTTP2_VariableHandler received request to https://localhost:54010/https2/chunk
HTTP2_VariableHandler received request to https://localhost:54010/https2/chunk
test MappingResponseSubscriber.testAsBytes(""https://localhost:54010/https2/chunk"", true): success
config MappingResponseSubscriber.teardown(): success

===============================================
java/net/httpclient/MappingResponseSubscriber.java
Total tests run: 16, Passes: 15, Failures: 1, Skips: 0
===============================================

----------System.err:(17156/2068245)----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2zwwr:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-01-16 10:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12013
Date: 2023-01-16 18:08:29 +0000;;;","2023-01-20 01:25;dukebot;Changeset: 49d60fee
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-01-20 09:23:37 +0000
URL:       https://git.openjdk.org/jdk/commit/49d60fee49b9f5f7182dcd1557d9b2f886901100
;;;",,,,,,,,,,,,,,,,,,,
Build failure with clang-15,JDK-8300169,5091419,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2023-01-14 06:21,2023-04-13 00:26,2023-10-01 09:56,2023-01-18 02:33,21,,,,,,,21,hotspot,,0,noreg-build,tencent-interest,,,,,,,,,,,,,,"-Wbitwise-instead-of-logical
```
/Users/jiefu/jdk/src/hotspot/share/oops/generateOopMap.cpp:1735:10: error: use of bitwise '|' with boolean operands [-Werror,-Wbitwise-instead-of-logical]
  assert(in.is_reference() | in.is_value(), ""sanity check"");
  ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                           ||


/Users/jiefu/jdk/src/hotspot/share/runtime/notificationThread.cpp:69:15: error: use of bitwise '|' with boolean operands [-Werror,-Wbitwise-instead-of-logical]
      while (((sensors_changed = LowMemoryDetector::has_pending_requests()) |
             ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/jiefu/jdk/src/hotspot/share/runtime/notificationThread.cpp:69:15: note: cast one or both operands to int to silence this warning
/Users/jiefu/jdk/src/hotspot/share/runtime/notificationThread.cpp:69:15: error: use of bitwise '|' with boolean operands [-Werror,-Wbitwise-instead-of-logical]
      while (((sensors_changed = LowMemoryDetector::has_pending_requests()) |
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                                            ||


/Users/jiefu/jdk/src/hotspot/share/runtime/serviceThread.cpp:114:15: error: use of bitwise '|' with boolean operands [-Werror,-Wbitwise-instead-of-logical]
      while (((sensors_changed = (!UseNotificationThread && LowMemoryDetector::has_pending_requests())) |
             ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/jiefu/jdk/src/hotspot/share/runtime/serviceThread.cpp:114:15: note: cast one or both operands to int to silence this warning
/Users/jiefu/jdk/src/hotspot/share/runtime/serviceThread.cpp:114:15: error: use of bitwise '|' with boolean operands [-Werror,-Wbitwise-instead-of-logical]
      while (((sensors_changed = (!UseNotificationThread && LowMemoryDetector::has_pending_requests())) |
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/jiefu/jdk/src/hotspot/share/runtime/serviceThread.cpp:114:15: note: cast one or both operands to int to silence this warning
/Users/jiefu/jdk/src/hotspot/share/runtime/serviceThread.cpp:114:15: error: use of bitwise '|' with boolean operands [-Werror,-Wbitwise-instead-of-logical]
      while (((sensors_changed = (!UseNotificationThread && LowMemoryDetector::has_pending_requests())) |
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/jiefu/jdk/src/hotspot/share/runtime/serviceThread.cpp:114:15: note: cast one or both operands to int to silence this warning
/Users/jiefu/jdk/src/hotspot/share/runtime/serviceThread.cpp:114:15: error: use of bitwise '|' with boolean operands [-Werror,-Wbitwise-instead-of-logical]
      while (((sensors_changed = (!UseNotificationThread && LowMemoryDetector::has_pending_requests())) |
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```


While building (LIBJLI LIBZIP LIBSPLASHSCREEN)
```
* For target support_native_java.base_libzip_compress.o:
/Users/jiefu/jdk/src/java.base/share/native/libzip/zlib/compress.c:46:13: error: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
int ZEXPORT compress2(dest, destLen, source, sourceLen, level)
            ^
/Users/jiefu/jdk/src/java.base/share/native/libzip/zlib/compress.c:92:13: error: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
int ZEXPORT compress(dest, destLen, source, sourceLen)
            ^
/Users/jiefu/jdk/src/java.base/share/native/libzip/zlib/compress.c:105:15: error: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
uLong ZEXPORT compressBound(sourceLen)
              ^
3 errors generated.
* For target support_native_java.base_libzip_deflate.o:
```
Compiling infback.c (for libsplashscreen.dylib)


Compiling awt_ImagingLib.c (for libawt.dylib)
```
/Users/jiefu/jdk/src/java.desktop/share/native/libawt/awt/medialib/awt_ImagingLib.c:430:43: error: passing arguments to a function without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
    if ((*sMlibFns[MLIB_CONVKERNCVT].fptr)(kdata, &scale, dkern, w, h,
                                          ^
/Users/jiefu/jdk/src/java.desktop/share/native/libawt/awt/medialib/awt_ImagingLib.c:458:44: error: passing arguments to a function without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
    status = (*sMlibFns[MLIB_CONVMxN].fptr)(dst, src, kdata, w, h,
                                           ^
/Users/jiefu/jdk/src/java.desktop/share/native/libawt/awt/medialib/awt_ImagingLib.c:677:43: error: passing arguments to a function without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
    if ((*sMlibFns[MLIB_CONVKERNCVT].fptr)(kdata, &scale, dkern, w, h,
                                          ^
/Users/jiefu/jdk/src/java.desktop/share/native/libawt/awt/medialib/awt_ImagingLib.c:706:44: error: passing arguments to a function without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
    status = (*sMlibFns[MLIB_CONVMxN].fptr)(dst, src, kdata, w, h,
                                           ^
/Users/jiefu/jdk/src/java.desktop/share/native/libawt/awt/medialib/awt_ImagingLib.c:922:48: error: passing arguments to a function without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
    if ((status = (*sMlibFns[MLIB_AFFINE].fptr)(dst, src, mtx, filter,
                                               ^
/Users/jiefu/jdk/src/java.desktop/share/native/libawt/awt/medialib/awt_ImagingLib.c:1140:48: error: passing arguments to a function without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
    if ((status = (*sMlibFns[MLIB_AFFINE].fptr)(dst, src, mtx, filter,
                                               ^
/Users/jiefu/jdk/src/java.desktop/share/native/libawt/awt/medialib/awt_ImagingLib.c:1498:53: error: passing arguments to a function without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
    else if ((status = (*sMlibFns[MLIB_LOOKUP].fptr)(dst, src,
                                                    ^
/Users/jiefu/jdk/src/java.desktop/share/native/libawt/awt/medialib/awt_ImagingLib.c:1736:55: error: passing arguments to a function without a prototype is deprecated in all versions of C and is not supported in C2x [-Werror,-Wdeprecated-non-prototype]
    } else if ((status = (*sMlibFns[MLIB_LOOKUP].fptr)(dst, src,
                                                      ^
8 errors generated.
```


Compiling hb-font.cc (for libfontmanager.dylib)
```
* For target support_native_java.desktop_libfontmanager_hb-aat-layout.o:
In file included from /Users/jiefu/jdk/src/java.desktop/share/native/libharfbuzz/hb-aat-layout.cc:28:
In file included from /Users/jiefu/jdk/src/java.desktop/share/native/libharfbuzz/hb.hh:483:
/Users/jiefu/jdk/src/java.desktop/share/native/libharfbuzz/hb-vector.hh:229:27: error: builtin __has_trivial_assign is deprecated; use __is_trivially_assignable instead [-Werror,-Wdeprecated-builtins]
            hb_enable_if (hb_is_trivially_copy_assignable(T))>
                          ^
/Users/jiefu/jdk/src/java.desktop/share/native/libharfbuzz/hb-meta.hh:193:44: note: expanded from macro 'hb_is_trivially_copy_assignable'
#define hb_is_trivially_copy_assignable(T) __has_trivial_assign(T)
                                           ^
In file included from /Users/jiefu/jdk/src/java.desktop/share/native/libharfbuzz/hb-aat-layout.cc:28:
In file included from /Users/jiefu/jdk/src/java.desktop/share/native/libharfbuzz/hb.hh:483:
/Users/jiefu/jdk/src/java.desktop/share/native/libharfbuzz/hb-vector.hh:236:28: error: builtin __has_trivial_assign is deprecated; use __is_trivially_assignable instead [-Werror,-Wdeprecated-builtins]
            hb_enable_if (!hb_is_trivially_copy_assignable(T))>
                           ^
/Users/jiefu/jdk/src/java.desktop/share/native/libharfbuzz/hb-meta.hh:193:44: note: expanded from macro 'hb_is_trivially_copy_assignable'
#define hb_is_trivially_copy_assignable(T) __has_trivial_assign(T)
   ... (rest of output omitted)
```


```
Creating support/modules_libs/java.desktop/libfontmanager.dylib from 0 file(s)
/Users/jiefu/jdk/src/java.desktop/macosx/native/libawt_lwawt/awt/CPrinterJob.m:62:21: error: a function declaration without a prototype is deprecated in all versions of C and is treated as a zero-parameter prototype in C2x, conflicting with a subsequent definition [-Werror,-Wdeprecated-non-prototype]
static NSPrintInfo* createDefaultNSPrintInfo();
                    ^
/Users/jiefu/jdk/src/java.desktop/macosx/native/libawt_lwawt/awt/CPrinterJob.m:84:21: note: conflicting prototype is here
static NSPrintInfo* createDefaultNSPrintInfo(JNIEnv* env, jstring printer)
                    ^
1 error generated.
make[3]: *** [/Users/jiefu/jdk/build/macosx-aarch64-server-fastdebug/support/native/java.desktop/libawt_lwawt/CPrinterJob.o] Error 1
make[3]: *** Waiting for unfinished jobs....
make[2]: *** [java.desktop-libs] Error 2
```


```
Compiling NavigableTextAccessibility.m (for libawt_lwawt.dylib)
/Users/jiefu/jdk/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m:215:23: error: variable length array folded to constant array as an extension [-Werror,-Wgnu-folding-constant]
        struct Vertex verts[POLYLINE_BUF_SIZE];
                      ^
1 error generated.
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8074823,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zwvv:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-14 06:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12005
Date: 2023-01-14 14:28:32 +0000;;;","2023-01-14 07:03;dcubed;Moving to hotspot/runtime for initial triage.;;;","2023-01-18 02:33;dukebot;Changeset: 15a9186d
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-01-18 10:32:00 +0000
URL:       https://git.openjdk.org/jdk/commit/15a9186db251f4be7a13e173842ac1bd858f984d
;;;",,,,,,,,,,,,,,,,,,
Typo in AccessibleJTableHeaderEntry javadoc,JDK-8300168,5091417,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,abhiscxk,aturbanov,aturbanov,2023-01-14 02:36,2023-01-23 15:42,2023-10-01 09:56,2023-01-17 02:41,17,21,,,,,,21,client-libs,,0,accessibility,,,,,,,,,,,,,,,"There is a typo: 'AccessiblJTableHeaaderEntry' instead of 'AccessibleJTableHeaderEntry'
            /**
             *  Constructs an AccessiblJTableHeaaderEntry
             * @since 1.4
             *
             * @param c  the column index
             * @param p  the parent <code>JTableHeader</code>
             * @param t  the table <code>JTable</code>
             */
            public AccessibleJTableHeaderEntry(int c, JTableHeader p, JTable t) {",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zwvf:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-01-17 00:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12024
Date: 2023-01-17 08:01:03 +0000;;;","2023-01-17 02:41;dukebot;Changeset: 07d57531
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Committer: Tejesh R <tr@openjdk.org>
Date:      2023-01-17 10:40:19 +0000
URL:       https://git.openjdk.org/jdk/commit/07d57531726092a003d4c5d4febd33e35e02a1a7
;;;",,,,,,,,,,,,,,,,,,,
Add validation of the raster's layout before using in native,JDK-8300167,5091416,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2023-01-13 23:21,2023-01-25 23:05,2023-10-01 09:56,2023-01-18 21:04,11,17,21,,,,,21,client-libs,,0,11-bp,17-bp,20-bp,8-bp,noreg-other,,,,,,,,,,,"Currently we validate the passed from java cmm code to native, except for some types of rasters. One of the reason why the rasters are skipped is that they are not public and have own validation during construction. But it is unclear how it works in the multithreaded case. All this objects are not thread safe - is could be possible that we can get teh ruster which is not completly constructed/validated?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zwv7:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-01-16 00:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12004
Date: 2023-01-14 07:23:18 +0000;;;","2023-01-18 21:04;dukebot;Changeset: 7348b9ec
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-01-19 05:02:12 +0000
URL:       https://git.openjdk.org/jdk/commit/7348b9ec9373746bb76bc9fa9556f1811bd9e475
;;;",,,,,,,,,,,,,,,,,,,
ZipFile.isSignatureRelated returns true for files in META-INF subdirectories,JDK-8300140,5091389,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,mullan,mullan,2023-01-13 12:39,2023-02-01 22:51,2023-10-01 09:56,2023-01-27 14:49,,,,,,,,21,security-libs,,0,,,,,,,,,,,,,,,,"Some call sites of SignatureFileVerifier.isBlockOrSF fail to check that files reside in META-INF directly, and not in a subdirectory of META-INF.

Note that the Jar File Specification does explicitly say:

""Note that if such files are located in META-INF subdirectories, they are not considered signature-related""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zwp7:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-01-13 12:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11976
Date: 2023-01-12 18:44:26 +0000;;;","2023-01-27 14:49;dukebot;Changeset: 5dfc4ec7
Author:    Eirik Bjorsnos <eirbjo@gmail.com>
Committer: Weijun Wang <weijun@openjdk.org>
Date:      2023-01-27 22:47:51 +0000
URL:       https://git.openjdk.org/jdk/commit/5dfc4ec7d94af9fe39fdee9d83b06101b827a3c6
;;;",,,,,,,,,,,,,,,,,,,
CgroupMetrics.getTotalMemorySize0() can report invalid results on 32 bit systems,JDK-8300119,5091363,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jdowland,jdowland,jdowland,2023-01-13 06:57,2023-06-29 00:24,2023-10-01 09:56,2023-01-19 05:28,,,,,,,,21,core-svc,,0,containers,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,"JDK-8292541 introduced JNI method Java_jdk_internal_platform_CgroupMetrics_getTotalMemorySize0. During the effort to backport it to jdk8u-dev, We have discovered that it can return an invalid value on x86 (32 bit) systems.

On a system with 7281311744 bytes of total memory the function would return: -1308622848 suggesting some overflow occurring.

This was caught with the tier1 test:
TestMemoryAwareness.testContainerMemExceedsPhysical.

See this discussion on GitHub for further details
https://github.com/openjdk/jdk8u-dev/pull/220#pullrequestreview-1247595245",,,,,,,,,,JDK-8304607,JDK-8304236,JDK-8300859,JDK-8304241,JDK-8300662,JDK-8301062,JDK-8304240,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292541,,,,,,,,,,,,,,x86,,,,,,,20,,linux,,,,,,"0|i2zwjf:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-01-13 08:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/220
Date: 2023-01-03 11:46:29 +0000;;;","2023-01-18 05:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12069
Date: 2023-01-18 13:20:06 +0000;;;","2023-01-19 05:28;dukebot;Changeset: dea58efb
Author:    Jonathan Dowland <jdowland@openjdk.org>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-01-19 13:26:18 +0000
URL:       https://git.openjdk.org/jdk/commit/dea58efb6280bb1d94daf208ac909aa013439397
;;;","2023-01-19 07:45;sgehwolf;Fix Request (11u, 17u):

Trivial clean backport to keep code in sync. We had to fix this in 8u372 and would like for the code to be in later JDKs as well. Functional no-op so low risk on most arches. Fixes an issue on some 32 bit builds (corner case).;;;","2023-01-19 07:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1086
Date: 2023-01-19 15:41:25 +0000;;;","2023-01-19 07:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1672
Date: 2023-01-19 15:43:06 +0000;;;",,,,,,,,,,,,,,,
Replace use of JNI_COMMIT mode with mode 0,JDK-8300117,5091361,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2023-01-13 05:58,2023-01-23 15:46,2023-10-01 09:56,2023-01-18 01:32,11,17,19,20,21,7,8,21,client-libs,,0,noreg-hard,,,,,,,,,,,,,,,"In files:

src/java.desktop/macosx/native/libawt_lwawt/awt/CClipboard.m
src/java.desktop/macosx/native/libawt_lwawt/awt/CDropTarget.m

the JNI_COMMIT mode is used with ReleaseLongArrayElements / ReleaseByteArrayElements. This mode does not release memory allocated by the corresponding GetXXXArrayElements functions and creates a memory leak. This code should be using mode 0 to ensure the underlying array is freed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8258185,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2zwiz:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2023-01-16 01:08;dholmes;There is no actual leak with hotspot as the mode is irrelevant with a non-copying implementation, but using 0 is preferred.;;;","2023-01-16 04:28;djelinski;Hi [~dholmes] there is an actual leak here; The code in question is using the GetXXXArrayElements function family, which has a copying implementation.;;;","2023-01-16 14:28;dholmes;[~djelinski] apologies I skimmed the code too fast and was reading the zero-length code path.;;;","2023-01-17 00:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12023
Date: 2023-01-17 07:43:41 +0000;;;","2023-01-18 01:32;dukebot;Changeset: 7c8b99ee
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-01-18 09:29:04 +0000
URL:       https://git.openjdk.org/jdk/commit/7c8b99eedb46890c06af3b8e698b3ba169475231
;;;",,,,,,,,,,,,,,,,
C2: Single-bit fields with signed type in TypePtr after JDK-8297933,JDK-8300113,5091356,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-01-13 02:26,2023-02-06 00:17,2023-10-01 09:56,2023-01-16 00:51,21,,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,sonarcloud-found,,,,,,,,,,,"JDK-8297933 added new fields to `TypePtr`:

```
    int _hash_computed:1;
    int _exact_klass_computed:1;
    int _is_loaded_computed:1;
```

SonarCloud reports a warning for them:
  Single-bit named bit fields should not be of a signed type cpp:S2216

With 1 bit field, there is only a place for sign, not the value. Storing ""1"" into that field might effectively converts it to ""-1"" on the compilers I have tried. These fields are currently used as ""booleans"" by boolean-converting non-zeros to true, so there is no bug yet for those compilers. But, I can see how a compiler can convert ""1"" to ""0"", only effectively storing the sign bit, introducing subtle bugs.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297933,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zwhv:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-13 02:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11989
Date: 2023-01-13 10:41:06 +0000;;;","2023-01-13 02:56;rcastanedalo;ILW = potential risk of miscompilation; no failure observed yet since introduction of JDK-8297933; no known workaround = MLH = P4 ;;;","2023-01-16 00:51;dukebot;Changeset: abfd7e89
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-01-16 08:49:02 +0000
URL:       https://git.openjdk.org/jdk/commit/abfd7e89f6ee03cdadf0adecd28c2672cf77d184
;;;",,,,,,,,,,,,,,,,,,
Configuration fails to auto-detect build user through $USER in dockers,JDK-8300099,5091339,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jiefu,jiefu,jiefu,2023-01-12 20:06,2023-01-23 15:37,2023-10-01 09:56,2023-01-13 05:55,21,,,,,,,21,infrastructure,,0,tencent-interest,,,,,,,,,,,,,,,"checking for --with-build-user... <none>, default
configure: Invalid value for --with-build-user: """"
configure: Value cannot be empty
configure: error: Cannot continue
configure exiting with result code 1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296478,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zwe3:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-12 20:13;jiefu;PR: https://github.com/openjdk/jdk/pull/11983;;;","2023-01-12 20:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11983
Date: 2023-01-13 04:10:16 +0000;;;","2023-01-13 05:55;dukebot;Changeset: 3ffc9557
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-01-13 13:53:22 +0000
URL:       https://git.openjdk.org/jdk/commit/3ffc955783e56ed66a931f13c2688311596224e4
;;;",,,,,,,,,,,,,,,,,,
java/util/concurrent/ConcurrentHashMap/ConcurrentAssociateTest.java fails with internal timeout when executed with TieredCompilation1/3,JDK-8300098,5091338,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,vklang,lmesnik,lmesnik,2023-01-12 18:31,2023-08-08 14:05,2023-10-01 09:56,2023-02-06 07:28,17.0.7-oracle,18,19,20,21,,,21,core-libs,,0,atr,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,oracle-triage-21,,,,,,,,,,"Test 
java/util/concurrent/ConcurrentHashMap/ConcurrentAssociateTest.java

use an internal non-scalable timeout. The test fails when executed with
 -XX:TieredStopAtLevel=1
or
 -XX:TieredStopAtLevel=3


The trace:
test ConcurrentAssociateTest.testCompute(): success
test ConcurrentAssociateTest.testComputeIfAbsent(): success
test ConcurrentAssociateTest.testMerge(): success
test ConcurrentAssociateTest.testPut(): failure
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at ConcurrentAssociateTest.testOnce(ConcurrentAssociateTest.java:148)
	at ConcurrentAssociateTest.test(ConcurrentAssociateTest.java:102)
	at ConcurrentAssociateTest.testPut(ConcurrentAssociateTest.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)
test ConcurrentAssociateTest.testPutAll(): success",,,,,,,,,,JDK-8311448,JDK-8309227,JDK-8311507,JDK-8309220,JDK-8311277,JDK-8309221,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-30 00:29;thartmann;ConcurrentHashMap.diff;https://bugs.openjdk.org/secure/attachment/102445/ConcurrentHashMap.diff","2023-01-26 07:16;thartmann;failingRun1.log;https://bugs.openjdk.org/secure/attachment/102425/failingRun1.log","2023-01-13 01:09;alanb;threaddump.txt;https://bugs.openjdk.org/secure/attachment/102295/threaddump.txt",,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2zwdv:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@239b1eeb,,,,,,,Verified,,"2023-01-13 01:38;alanb;The test uses a timeout of 200s so I don't think scaling will help. Instead, there be something else going on. I attach the thread dump from the run that timed out. It looks like we have:

ForkJoinPool.commonPool-worker-3 blocked in putVal trying to lock TreeBin@34c6fe5c that is owned by worker-5.

ForkJoinPool.commonPool-worker-6 blocked in putVal trying to lock TreeBin@34c6fe5c that is owned by worker-5.

ForkJoinPool.commonPool-worker-8 blocked in transfer trying to lock TreeBin@34c6fe5c that owned by worker-5.

ForkJoinPool.commonPool-worker-5 owns TreeBin@34c6fe5c but has parked waiting for the write lock so it can insert into the tree. I don't see any other threads that might unpark this writer.

[~lmesnik] Are you able to duplicate this issue on this linux-aarch64 host? If it fails consistently with TieredStopAtLevel=1 and TieredStopAtLevel=3 but not with C2 then it hints of a C1 issue, maybe only on aarch64?
;;;","2023-01-20 23:38;alanb;So far, we seem to be able to duplicate this on linux-aarch64 on Ampere A1 and with -XX:TieredStopAtLevel=1 and -XX:TieredStopAtLevel=3.  It duplicates with main line, JDK 19, JDK 18, and JDK 17u.  No sighting so far on x64 or macosx-aarch64.;;;","2023-01-23 08:01;martin;I used to do a lot of stress testing of concurrency tests at Google, but the test environment was limited to machines with a strong memory model and a small number of cpus.  I have been surprised by how few bugs have been found in recent years due to weak memory model hardware.  Perhaps the Ampere machines have both aggressively weak memory model hardware combined with a very large number of cpus, and this is such a bug.  I recommend doing as much openjdk testing and debugging on high-end Ampere machines as possible.  I see Oracle Cloud has such machines - https://www.oracle.com/cloud/compute/arm/.;;;","2023-01-23 11:58;vklang;Adding more info, and again, this needs a fair amount of test runs to produce a failure, I'm observing around ~10% failure occurrence when the test fails.

The following is on Linux and Aarch64:

Test doesn't fail when given -Xint
Test doesn't fail when given -XX:-TieredCompilation
Test doesn't fail when given -XX:TieredStopAtLevel=3 -XX:+UseParallelGC
Test doesn't fail when given -XX:TieredStopAtLevel=3 -XX:+UseZGC

Test fails when given -XX:TieredStopAtLevel=3
Test fails when given -XX:TieredStopAtLevel=3 -XX:+UseG1GC
Test fails when given -XX:TieredStopAtLevel=3 -XX:-InlineNatives
Test fails when given -XX:TieredStopAtLevel=1 -XX:-InlineNatives
Test fails when given -XX:TieredStopAtLevel=3 -XX:-UseLSE
Test fails when given -XX:TieredStopAtLevel=1 -XX:-UseLSE;;;","2023-01-26 00:29;thartmann;I was able to narrow it down to a single C1 compiled method:

    890   68   !   1       java.util.concurrent.ConcurrentHashMap$TreeBin::find (191 bytes)
                              @ 52   java.lang.Object::equals (11 bytes)   no static binding
                              @ 81   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   disallowed by CompileCommand
                              @ 106   java.util.concurrent.ConcurrentHashMap$TreeNode::findTreeNode (177 bytes)   callee is too large
                              @ 157   jdk.internal.misc.Unsafe::getAndAddInt (27 bytes)   intrinsic
                              @ 177   java.util.concurrent.locks.LockSupport::unpark (26 bytes)   disallowed by CompileCommand
                              @ 120   jdk.internal.misc.Unsafe::getAndAddInt (27 bytes)   intrinsic
                              @ 140   java.util.concurrent.locks.LockSupport::unpark (26 bytes)   disallowed by CompileCommand

-XX:TieredStopAtLevel=1 -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,java.util.concurrent.ConcurrentHashMap$TreeBin::find -XX:+PrintCompilation -XX:+PrintInlining -XX:CompileCommand=dontinline,java.util.concurrent.locks.LockSupport::unpark -XX:CompileCommand=dontinline,jdk.internal.misc.Unsafe::compareAndSetInt

https://github.com/openjdk/jdk/blob/536c9a512ea90d97a1ae5310453410d55db98bdd/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java#L2890

Attached failingRun1.log includes a dump of that method.;;;","2023-01-26 00:30;thartmann;Let's move this to hotspot/compiler for now, given that there is lots of evidence that this is a C1 bug.;;;","2023-01-26 00:32;thartmann;Initial ILW = Incorrect execution of C1 compiled code (deadlock), intermittent but reproducible with single test on Linux AArch64, no workaround but disable compilation of affected method = HMM = P2;;;","2023-01-29 03:44;dl;There's a CHM bug scenario that I haven't been able to rule out after looking at this again: A  late clearing of waiter field in ConcurrentHashMap.contendedLock by a previous waiter. There may be a constraint I've forgotten that makes this impossible in principle, but it is easy to change to be more clearly correct by replacing the writes with CASes, and thus rule out while checking C1. Diffs are below. I'll mail a copy to Viktor.

diff --git a/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java b/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java
index 63ff6f21be9..648f4a8c9c6 100644
--- a/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java
+++ b/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java
@@ -2862,22 +2862,19 @@ public class ConcurrentHashMap<K,V> extends AbstractMap<K,V>
          * Possibly blocks awaiting root lock.
          */
         private final void contendedLock() {
-            boolean waiting = false;
+            Thread current = Thread.currentThread();
             for (int s;;) {
                 if (((s = lockState) & ~WAITER) == 0) {
                     if (U.compareAndSetInt(this, LOCKSTATE, s, WRITER)) {
-                        if (waiting)
-                            waiter = null;
+                        U.compareAndSetReference(this, WAITERTHREAD, current, null);
                         return;
                     }
                 }
-                else if ((s & WAITER) == 0) {
-                    if (U.compareAndSetInt(this, LOCKSTATE, s, s | WAITER)) {
-                        waiting = true;
-                        waiter = Thread.currentThread();
-                    }
-                }
-                else if (waiting)
+                else if ((s & WAITER) == 0)
+                    U.compareAndSetInt(this, LOCKSTATE, s, s | WAITER);
+                else if (waiter != current)
+                    U.compareAndSetReference(this, WAITERTHREAD, null, current);
+                else
                     LockSupport.park(this);
             }
         }
@@ -3296,6 +3293,9 @@ public class ConcurrentHashMap<K,V> extends AbstractMap<K,V>
 
         private static final long LOCKSTATE
             = U.objectFieldOffset(TreeBin.class, ""lockState"");
+        private static final long WAITERTHREAD
+            = U.objectFieldOffset(TreeBin.class, ""waiter"");
+
     }
 
     /* ----------------Table Traversal -------------- */
;;;","2023-01-30 00:24;thartmann;Thanks, Doug. After reviewing the C1 generated code once more, I'm also starting to believe that this is not a JIT issue but simply related to timing.

I'll run your patch through testing and report back.;;;","2023-01-30 00:28;alanb;[~thartmann] I did some initial testing with the updated CHM yesterday and did not see any failures, 2000 runs with both TieredStopAtLevel=1, and the same with TieredStopAtLevel=3.;;;","2023-01-30 00:47;thartmann;Thanks [~alanb], that matches my observations. With the reduced test and flags, it usually reproduced 1/10 and I've already executed several hundred iterations.;;;","2023-01-30 00:54;thartmann;Moved this back to core-libs/java.util.concurrent as it seems to be an issue with the CHM implementation. I leave tests running for a bit longer to verify.

Update: No failures after 1000 runs.;;;","2023-01-31 02:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12318
Date: 2023-01-31 10:32:45 +0000;;;","2023-01-31 02:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12319
Date: 2023-01-31 10:45:07 +0000;;;","2023-02-06 07:28;dukebot;Changeset: ecf8842c
Author:    Viktor Klang <viktor.klang@oracle.com>
Committer: Alan Bateman <alanb@openjdk.org>
Date:      2023-02-06 15:26:32 +0000
URL:       https://git.openjdk.org/jdk/commit/ecf8842cd2309210f3d5eee7f9f28a198a860686
;;;","2023-06-29 14:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1519
Date: 2023-06-29 21:14:32 +0000;;;","2023-07-02 09:37;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Applies cleanly.;;;","2023-07-04 07:53;lucy;Fix request [11u] 

I backport this for parity with 11.0.21-oracle.

Patch did not apply cleanly. There was a whitespace diff which confused the merge algorithm. In addition, change JDK-8207146 is missing: Unsafe::compareAndSetReference had to be reverted to Unsafe::compareAndSetObject

Manual testing successful - with and without fix.
SAP nightly tests did not reveal any issue related to this PR.;;;","2023-07-04 08:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2026
Date: 2023-07-04 15:38:56 +0000;;;",,
Refactor code examples to use @snippet in java.text.MessageFormat,JDK-8300093,5091330,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-01-12 14:52,2023-01-23 15:44,2023-10-01 09:56,2023-01-17 11:42,,,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,Implement JEP 413 in java.text.MessageFormat to update javadoc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zwc3:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-01-13 13:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12001
Date: 2023-01-13 21:47:40 +0000;;;","2023-01-17 11:42;dukebot;Changeset: ade08e19
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-17 19:40:41 +0000
URL:       https://git.openjdk.org/jdk/commit/ade08e190cc28cf0ce0194fa3fb67e48dc634e07
;;;",,,,,,,,,,,,,,,,,,,
AquaFileChooserUI.getDefaultButton returns null,JDK-8300084,5091320,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,aivanov,aivanov,2023-01-12 12:33,2023-04-06 08:35,2023-10-01 09:56,2023-01-16 20:47,11,17,20,21,8,,,21,client-libs,,0,,,,,,,,,,,,,,,,"FileChooserUI.getDefaultButton returns non-null value for every Look and Feel but Aqua.

The default implementation in javax.swing.plaf.FileChooserUI#getDefaultButton returns null. It's overridden in BasicFileChooserUI to return getApproveButton which, in its turn, returns the Approve button in each Look and Feel.

AquaFileChooserUI does not extend BasicFileChooserUI, therefore the returned value remains null.

---------- BEGIN SOURCE ----------
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;

public class FileChooserDefaultButton {
    public static void main(String[] args) throws Exception {
        SwingUtilities.invokeAndWait(() -> {
            JFileChooser fc = new JFileChooser();
            System.out.println(fc.getUI().getDefaultButton(fc));
        });
    }
}
---------- END SOURCE ----------",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299522,JDK-8300549,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2zw9v:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-01-12 12:37;aivanov;This bug was found during code review for JDK-8299522:
https://github.com/openjdk/jdk/pull/11901#discussion_r1067397133;;;","2023-01-12 13:10;aivanov;Proposed fix:

diff --git a/src/java.desktop/macosx/classes/com/apple/laf/AquaFileChooserUI.java b/src/java.desktop/macosx/classes/com/apple/laf/AquaFileChooserUI.java
index 5461e25f7af..1dfe7a606eb 100644
--- a/src/java.desktop/macosx/classes/com/apple/laf/AquaFileChooserUI.java
+++ b/src/java.desktop/macosx/classes/com/apple/laf/AquaFileChooserUI.java
@@ -593,6 +593,11 @@ public class AquaFileChooserUI extends FileChooserUI {
         return fApproveButton;
     }
 
+    @Override
+    public JButton getDefaultButton(JFileChooser fc) {
+        return getApproveButton(fc);
+    }
+
     public int getApproveButtonMnemonic(final JFileChooser fc) {
         return fSubPanel.getApproveButtonMnemonic(fc);
     };;;","2023-01-16 03:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12008
Date: 2023-01-16 11:17:10 +0000;;;","2023-01-16 20:47;dukebot;Changeset: 8365c677
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-01-17 04:44:42 +0000
URL:       https://git.openjdk.org/jdk/commit/8365c6775cb3d2e15c4849f0ba69dc49bad2cf6a
;;;",,,,,,,,,,,,,,,,,
SIGSEGV in LibraryCallKit::inline_string_copy due to constant NULL src argument,JDK-8300079,5091314,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,lmesnik,lmesnik,2023-01-12 11:45,2023-07-09 22:02,2023-10-01 09:56,2023-01-22 22:10,11,17,19,20,21,,,21,hotspot,,0,atr,c2,c2-intrinsic,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-21,,,,,"Test crashes with Xcomp:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffa45ed537d, pid=47852, tid=3212
#
# JRE version: Java(TM) SE Runtime Environment (20.0+27) (build 20-ea+27-2213)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (20-ea+27-2213, compiled mode, sharing, compressed oops, compressed class ptrs, parallel gc, windows-amd64)
# Problematic frame:
# V  [jvm.dll+0x5b537d]  LibraryCallKit::inline_string_copy+0xdd
#
# Core dump will be written. Default location: C:\sb\prod\1670707063\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0\hs_err_pid47852.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xbootclasspath/a:C:\sb\prod\1670707063\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0\wb.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djava.security.manager=allow -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=c:\ade\mesos\work_dir\jib-master\install\jdk\19\36\bundles\windows-x64\jdk-19_windows-x64_bin.zip\jdk-19 -Djava.io.tmpdir=c:\sb\prod\1670707063\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\tmp -XX:+CreateCoredumpOnCrash -XX:+UseParallelGC -Xcomp -XX:-TieredCompilation -XX:MaxRAMPercentage=50 -Djava.net.preferIPv6Addresses=false -XX:+DisplayVMOutputToStderr -Xlog:gc*,gc+heap=debug:gc.log:uptime,timemillis,level,tags -XX:+DisableExplicitGC -XX:+StartAttachListener -Xlog:monitorinflation=info:file=../monitorinflation.log::filesize=500m -Djava.io.tmpdir=C:\sb\prod\1670707063\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0/java.io.tmpdir -Duser.home=C:\sb\prod\1670707063\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0/user.home -agentpath:c:\ade\mesos\work_dir\jib-master\install\jdk-20+27-2213\windows-x64.test\hotspot\jtreg\native\JvmtiStressModule.dll -XX:NativeMemoryTracking=detail -Djdk.test.lib.random.seed=-6686853612947720509 applications.kitchensink.process.stress.Main C:\sb\prod\1670707063\testoutput\test-support\jtreg_closed_test_hotspot_jtreg_applications_runthese_RunThese30M_java\scratch\0\kitchensink.final.properties

Host: AMD EPYC 7J13 64-Core Processor                , 12 cores, 23G,  Windows Server 2022 , 64 bit Build 20348 (10.0.20348.740)
Time: Sat Dec 10 21:54:47 2022 Etc elapsed time: 1411.367917 seconds (0d 0h 23m 31s)

---------------  T H R E A D  ---------------

Current thread (0x000001f678bf9840):  JavaThread ""C2 CompilerThread3"" daemon [_thread_in_native, id=3212, stack(0x000000a604300000,0x000000a604400000)]


Current CompileTask:
C2:1411367 516956   !b        javasoft.sqe.tests.api.java.lang.String.CopyValueOfTests::String0039 (32 bytes)

Stack: [0x000000a604300000,0x000000a604400000],  sp=0x000000a6043fc260,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x5b537d]  LibraryCallKit::inline_string_copy+0xdd  (library_call.cpp:1366)
V  [jvm.dll+0x5bb4bd]  LibraryCallKit::try_to_inline+0x64d  (library_call.cpp:316)
V  [jvm.dll+0x5a6e63]  LibraryIntrinsic::generate+0x93  (library_call.cpp:114)
V  [jvm.dll+0x2f56fc]  Parse::do_call+0x53c  (doCall.cpp:662)
V  [jvm.dll+0x6d4d22]  Parse::do_one_bytecode+0x2f62  (parse2.cpp:2705)
V  [jvm.dll+0x6ccda6]  Parse::do_one_block+0x176  (parse1.cpp:1560)
V  [jvm.dll+0x6cc3f1]  Parse::do_all_blocks+0x341  (parse1.cpp:710)
V  [jvm.dll+0x6ca5f4]  Parse::Parse+0x7c4  (parse1.cpp:616)
V  [jvm.dll+0x1d1cec]  ParseGenerator::generate+0x8c  (callGenerator.cpp:103)
V  [jvm.dll+0x2f56fc]  Parse::do_call+0x53c  (doCall.cpp:662)
V  [jvm.dll+0x6d4d22]  Parse::do_one_bytecode+0x2f62  (parse2.cpp:2705)
V  [jvm.dll+0x6ccda6]  Parse::do_one_block+0x176  (parse1.cpp:1560)
V  [jvm.dll+0x6cc3f1]  Parse::do_all_blocks+0x341  (parse1.cpp:710)
V  [jvm.dll+0x6ca5f4]  Parse::Parse+0x7c4  (parse1.cpp:616)
V  [jvm.dll+0x1d1cec]  ParseGenerator::generate+0x8c  (callGenerator.cpp:103)
V  [jvm.dll+0x2f56fc]  Parse::do_call+0x53c  (doCall.cpp:662)
V  [jvm.dll+0x6d4d22]  Parse::do_one_bytecode+0x2f62  (parse2.cpp:2705)
V  [jvm.dll+0x6ccda6]  Parse::do_one_block+0x176  (parse1.cpp:1560)
V  [jvm.dll+0x6cc3f1]  Parse::do_all_blocks+0x341  (parse1.cpp:710)
V  [jvm.dll+0x6ca5f4]  Parse::Parse+0x7c4  (parse1.cpp:616)
V  [jvm.dll+0x1d1cec]  ParseGenerator::generate+0x8c  (callGenerator.cpp:103)
V  [jvm.dll+0x2f56fc]  Parse::do_call+0x53c  (doCall.cpp:662)
V  [jvm.dll+0x6d4d22]  Parse::do_one_bytecode+0x2f62  (parse2.cpp:2705)
V  [jvm.dll+0x6ccda6]  Parse::do_one_block+0x176  (parse1.cpp:1560)
V  [jvm.dll+0x6cc3f1]  Parse::do_all_blocks+0x341  (parse1.cpp:710)
V  [jvm.dll+0x6ca5f4]  Parse::Parse+0x7c4  (parse1.cpp:616)
V  [jvm.dll+0x1d1cec]  ParseGenerator::generate+0x8c  (callGenerator.cpp:103)
V  [jvm.dll+0x2f56fc]  Parse::do_call+0x53c  (doCall.cpp:662)
V  [jvm.dll+0x6d4d22]  Parse::do_one_bytecode+0x2f62  (parse2.cpp:2705)
V  [jvm.dll+0x6ccda6]  Parse::do_one_block+0x176  (parse1.cpp:1560)
V  [jvm.dll+0x6cc3f1]  Parse::do_all_blocks+0x341  (parse1.cpp:710)
V  [jvm.dll+0x6ca5f4]  Parse::Parse+0x7c4  (parse1.cpp:616)
V  [jvm.dll+0x1d1cec]  ParseGenerator::generate+0x8c  (callGenerator.cpp:103)
V  [jvm.dll+0x24a8a3]  Compile::Compile+0x9e3  (compile.cpp:760)
V  [jvm.dll+0x1ceae1]  C2Compiler::compile_method+0xc1  (c2compiler.cpp:116)
V  [jvm.dll+0x25a4bb]  CompileBroker::invoke_compiler_on_method+0x73b  (compileBroker.cpp:2240)
V  [jvm.dll+0x258b90]  CompileBroker::compiler_thread_loop+0x250  (compileBroker.cpp:1917)
V  [jvm.dll+0x3f35e5]  JavaThread::run+0x105  (javaThread.cpp:694)
V  [jvm.dll+0x7f57c6]  Thread::call_run+0xc6  (thread.cpp:234)
V  [jvm.dll+0x6bb6cb]  thread_native_entry+0x7b  (os_windows.cpp:547)
C  [ucrtbase.dll+0x26b4c]
C  [KERNEL32.DLL+0x14ed0]
C  [ntdll.dll+0x7e39b]
",,,,,,,,,,JDK-8301953,JDK-8305549,JDK-8307028,JDK-8302404,JDK-8309092,JDK-8301949,JDK-8306991,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-13 03:24;thartmann;Test.java;https://bugs.openjdk.org/secure/attachment/102301/Test.java","2023-01-13 02:05;thartmann;replay_pid47852.log;https://bugs.openjdk.org/secure/attachment/102296/replay_pid47852.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2zw8j:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-12 19:46;dlong;Based on the disassembly of the crash site, we seem to be hitting a null pointer here:

  BasicType src_elem = src_type->isa_aryptr()->elem()->array_element_basic_type();

because isa_aryptr() returned NULL.;;;","2023-01-12 19:47;dlong;ILW = null pointer crash; seen in stress test with -Xcomp, windows only; no workaround = MMH = P3 ;;;","2023-01-13 02:05;thartmann;I can reproduce this on Linux x64 with the attached replay file and the JCK 20 test classes:

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f9d9e2b7c5e, pid=275047, tid=275060
#
# JRE version: Java(TM) SE Runtime Environment (20.0+28) (fastdebug build 20-ea+28-2221)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+28-2221, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1404c5e]  LibraryCallKit::inline_string_copy(bool)+0xde

(rr) print src->dump(1)
   0  Root  === 0  [[ 0 1 3 22 23 24 25 36 37 38 102 105 107 110 111 120 128 148 149 151 153 154 155 157 158 161 ]] 
  23  ConP  === 0  [[ 21 21 27 33 35 40 40 48 59 59 35 61 66 68 68 80 69 69 69 69 69 80 80 83 83 85 90 92 94 126 135 126 138 144 146 164 164 164 164 164 172 183 183 146 ]]  #NULL

I can also reproduce this with JDK < 20.;;;","2023-01-13 03:26;thartmann;It's an old issue. Attached Test.java reproduces the crash even with JDK 11u.

-XX:CompileCommand=compileonly,Test::test -XX:CompileCommand=quiet -XX:-TieredCompilation -Xcomp -XX:CompileCommand=dontinline,java.lang.String::rangeCheck Test.java;;;","2023-01-20 04:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12112
Date: 2023-01-20 11:57:45 +0000;;;","2023-01-22 22:10;dukebot;Changeset: 45e4e009
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-01-23 06:06:32 +0000
URL:       https://git.openjdk.org/jdk/commit/45e4e00981ef8b4bf143afce0889698319273c1d
;;;","2023-03-29 04:07;thartmann;Fix Request (JDK 20u)
Resolves an issue with a SIGSEGV during C2 compilation. The fix is low risk, was already backported to Oracle JDK 17u / 11u and tested in the JDK 21 and 17u / 11u CIs. The backport applies cleanly.;;;","2023-03-29 04:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/32
Date: 2023-03-29 11:06:45 +0000;;;","2023-04-26 00:49;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Low risk, just adding a check for NULL.
Not clean, basically a new implementation of a trivial but larger change.
Test passes and fails without the fix
SAP nightly testing passed.;;;","2023-04-26 00:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1297
Date: 2023-04-26 07:47:56 +0000;;;","2023-05-29 12:43;goetz;
Fix request [11u]

I backport this for parity with 11.0.20-oracle. Backport based on change of jdk17
Typical risk of a C2 change, but issue well reproducible
I had to do trivial resolve and apation.
Test fails without the fix and passes with it. SAP nighlty testing passed.;;;","2023-05-29 12:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1911
Date: 2023-05-29 19:41:57 +0000;;;",,,,,,,,,
Refactor code examples to use @snippet in java.text.ChoiceFormat,JDK-8300077,5091312,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-01-12 11:29,2023-01-30 13:04,2023-10-01 09:56,2023-01-23 11:34,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zw83:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-01-12 20:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11981
Date: 2023-01-12 22:31:24 +0000;;;","2023-01-23 11:34;dukebot;Changeset: dcf1523b
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-23 19:31:36 +0000
URL:       https://git.openjdk.org/jdk/commit/dcf1523bf2dba234371190a70a41cfcb77907196
;;;",,,,,,,,,,,,,,,,,,,
 Left shift of negative value in share/adlc/dict2.cpp,JDK-8300069,5091304,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jcking,jcking,jcking,2023-01-12 10:43,2023-04-23 14:03,2023-10-01 09:56,2023-01-17 09:01,21,,,,,,,21,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-21,ubsan,,,,,,,,,,,,share/adlc/dict2.cpp:292:19: runtime error: left shift of negative value -45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300797,JDK-8300801,JDK-8300797,,,,,,,JDK-8240259,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zw6b:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-12 10:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11977
Date: 2023-01-12 18:48:46 +0000;;;","2023-01-12 18:18;dlong;ILW = runtime error; with ubsan; no workaround = MMH = P3;;;","2023-01-13 07:59;jcking;Based on discussion in https://git.openjdk.org/jdk/pull/11977, we are opting to disable this specific check across the board.;;;","2023-01-17 09:01;dukebot;Changeset: e139ec3d
Author:    Justin King <jcking@openjdk.org>
Committer: Magnus Ihse Bursie <ihse@openjdk.org>
Date:      2023-01-17 16:59:31 +0000
URL:       https://git.openjdk.org/jdk/commit/e139ec3db24f68c9907742b530069192a4eec3f3
;;;",,,,,,,,,,,,,,,,,
Shenandoah: Handle more GCCauses in ShenandoahControlThread::request_gc,JDK-8300053,5091287,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-01-12 08:13,2023-05-31 07:14,2023-10-01 09:56,2023-01-16 01:34,11,17,20,21,,,,21,hotspot,,0,amazon-interest,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,redhat-interest,,,,,,,,,,,"```
$ CONF=linux-x86_64-server-fastdebug make test TEST=jdk/internal/vm/Continuation/BasicExt.java TEST_VM_OPTS=""-XX:+UseShenandoahGC""

#  Internal Error (/home/shade/trunks/jdk/src/hotspot/share/gc/shenandoah/shenandoahControlThread.cpp:479), pid=406430, tid=406562
#  assert(GCCause::is_user_requested_gc(cause) || GCCause::is_serviceability_requested_gc(cause) || cause == GCCause::_metadata_GC_clear_soft_refs || cause == GCCause::_codecache_GC_aggressive || cause == GCCause::_codecache_GC_threshold || cause == GCCause::_full_gc_alot || cause == GCCause::_wb_full_gc || cause == GCCause::_wb_breakpoint || cause == GCCause::_scavenge_alot) failed: only requested GCs here: WhiteBox Initiated Young GC
#
```",,,,,,,,,,JDK-8309213,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zw2j:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-01-12 08:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11970
Date: 2023-01-12 16:15:08 +0000;;;","2023-01-16 01:34;dukebot;Changeset: cac72a60
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-01-16 09:32:04 +0000
URL:       https://git.openjdk.org/jdk/commit/cac72a60181d3570562f8534c691528d06e40cb8
;;;","2023-05-30 03:13;shade;Fix Request (17u)

Covers a corner case in Shenandoah code. Applies cleanly. Builds pass.;;;","2023-05-30 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1409
Date: 2023-05-30 10:10:56 +0000;;;",,,,,,,,,,,,,,,,,
PdhDll::PdhCollectQueryData and PdhLookupPerfNameByIndex will never be NULL,JDK-8300052,5091286,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2023-01-12 07:14,2023-01-23 15:39,2023-10-01 09:56,2023-01-15 22:09,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,"Both PdhDll::PdhCollectQueryData and PdhLookupPerfNameByIndex are concrete definitions and not pointers to executable code (Former is defined by us and the latter is a macro that expands into a concrete declaration), so it makes no sense to check if they will be NULL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2zw2b:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-12 07:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11968
Date: 2023-01-12 15:21:37 +0000;;;","2023-01-13 11:16;dcubed;Changed this from a Task to a Bug. I'm not sure why it was
a Task, but I think changing it to a Bug puts it on the triage
team's radar...;;;","2023-01-15 04:36;jwaters;My mistake, I must have set it as a Task without realizing. Thanks for changing it to be more visible to the relevant Reviewers;;;","2023-01-15 22:09;dukebot;Changeset: 12edd6f9
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-01-16 06:07:38 +0000
URL:       https://git.openjdk.org/jdk/commit/12edd6f922195f193659814d6c37c361c83e6797
;;;",,,,,,,,,,,,,,,,,
"assert(JvmtiEnvBase::environments_might_exist()) failed: to enter event controller, JVM TI environments must exist",JDK-8300051,5091285,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,sspitsyn,stefank,stefank,2023-01-12 06:50,2023-07-27 10:49,2023-10-01 09:56,2023-07-20 15:41,21,,,,,,,22,hotspot,,0,hgupdate-sync,intermittent,jdk21-fix-request,jdk21-fix-yes,loom,tier1,tier3,tier5,,,,,,,,"I'm get this assert if I press Ctrl+C while running Skynet with -XX:StartFlightRecording=dumponexit=true.

```
#  assert(JvmtiEnvBase::environments_might_exist()) failed: to enter event controller, JVM TI environments must exist
...
V  [libjvm.dylib+0x565d88]  report_vm_error(char const*, int, char const*, char const*, ...)+0x80
V  [libjvm.dylib+0xb20268]  JvmtiEventControllerPrivate::thread_started(JavaThread*)+0xd4
V  [libjvm.dylib+0x9ccc10]  JVM_VirtualThreadMountEnd+0x1c8
J 1384  java.lang.VirtualThread.notifyJvmtiMountEnd(Z)V java.base@21-internal (0 bytes) 
J 1484 c2 jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V java.base@21-internal (19 bytes)
J 1234  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@21-internal (0 bytes)
J 1523 c2 jdk.internal.vm.Continuation.run()V java.base@21-internal (586 bytes)
J 1476 c2 java.util.concurrent.ForkJoinTask.doExec()I java.base@21-internal (37 bytes)
```

I get this assert once every five to ten times I try this.",,,,,,,,,,JDK-8312627,JDK-8312959,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zw23:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-01-12 06:51;stefank;I originally triggered this while running with -XX:+UseZGC, but I've also managed to reproduce this with -XX:+UseG1GC.;;;","2023-01-12 06:57;stefank;I've only tried this with JDK 21. Could be a problem in JDK 20.;;;","2023-01-13 17:31;sspitsyn;Need to fix this in 21.;;;","2023-07-13 04:42;dholmes;This test has now failed three times in a few hours! I have to suspect that JDK-8311556 may be to blame!

Edit: Just realized this is a new test added by JDK-8311556;;;","2023-07-13 08:27;sspitsyn;It looks like the newly added test is able reproduce the existing bug.
Interesting that I did not see it in my mach5 testing for JDK-8311556 even though this test was run hundreds of times. Probably, I need to use some specific options to reproduce the issue.;;;","2023-07-13 23:52;mbaesken;
We noticed the assertion on Windows x86_64,  in the test  :

serviceability/jvmti/vthread/VThreadTLSTest/VThreadTLSTest.java#id1

#
#  Internal Error (d:\jdk-dev\src\hotspot\share\prims\jvmtiEventController.cpp:736), pid=479212, tid=503772
#  assert(JvmtiEnvBase::environments_might_exist()) failed: to enter event controller, JVM TI environments must exist
#
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.GLOBALopenjdk.jdk-dev)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.GLOBALopenjdk.jdk-dev, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
 .......
---------------  T H R E A D  ---------------

Current thread (0x0000020e1425fef0):  JavaThread ""ForkJoinPool-1-worker-16"" daemon [_thread_in_vm, id=503772, stack(0x000000dce0700000,0x000000dce0800000) (1024K)]

Stack: [0x000000dce0700000,0x000000dce0800000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc59841]  os::win32::platform_print_native_stack+0x101  (os_windows_x86.cpp:236)
V  [jvm.dll+0xfa31a0]  VMError::report+0x1460  (vmError.cpp:993)
V  [jvm.dll+0xfa5575]  VMError::report_and_die+0x645  (vmError.cpp:1799)
V  [jvm.dll+0xfa5c84]  VMError::report_and_die+0x64  (vmError.cpp:1564)
V  [jvm.dll+0x5429db]  report_vm_error+0x5b  (debug.cpp:191)
V  [jvm.dll+0xa1f124]  JvmtiEventControllerPrivate::thread_started+0x274  (jvmtiEventController.cpp:736)
V  [jvm.dll+0xa53799]  JvmtiVTMSTransitionDisabler::VTMS_vthread_start+0x59  (jvmtiThreadState.cpp:530)
V  [jvm.dll+0x8f4013]  JVM_VirtualThreadStart+0x173  (jvm.cpp:3919)
C  0x0000020e0745e9af  (no source info available)

The last pc belongs to native method entry point (kind = native) (printed below).
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.VirtualThread.notifyJvmtiStart()V+0 java.base@22-internal
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+27 java.base@22-internal
j  java.lang.VirtualThread$VThreadContinuation$1.run()V+8 java.base@22-internal
j  jdk.internal.vm.Continuation.enter0()V+4 java.base@22-internal
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 java.base@22-internal
J 204  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@22-internal (0 bytes) @ 0x0000020e07baf8e4 [0x0000020e07baf760+0x0000000000000184]
j  jdk.internal.vm.Continuation.run()V+122 java.base@22-internal
j  java.lang.VirtualThread.runContinuation()V+71 java.base@22-internal
j  java.lang.VirtualThread$$Lambda+0x000000080104e4b8.run()V+4 java.base@22-internal
j  java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec()Z+4 java.base@22-internal
j  java.util.concurrent.ForkJoinTask.doExec()I+10 java.base@22-internal
j  java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+19 java.base@22-internal
j  java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinPool$WorkQueue;II)I+211 java.base@22-internal
j  java.util.concurrent.ForkJoinPool.runWorker(Ljava/util/concurrent/ForkJoinPool$WorkQueue;)V+35 java.base@22-internal
j  java.util.concurrent.ForkJoinWorkerThread.run()V+31 java.base@22-internal
v  ~StubRoutines::call_stub 0x0000020e0745107d;;;","2023-07-14 14:14;dholmes;> serviceability/jvmti/vthread/VThreadTLSTest/VThreadTLSTest.java#id1

[~mbaesken] Yes sorry I should have listed that earlier. This test is failing on Windows x64 in most of our tier1, tier3 and some tier5 test runs.

[~sspitsyn] if no fix is imminent can we get this ProblemListed please (quickly before Dan gets back :) ).;;;","2023-07-17 10:16;sspitsyn;[~dholmes] Thanks, David. Will do.;;;","2023-07-18 01:24;sspitsyn;In general, the root cause seemed to be understandable.
Unfortunately, I can't reproduce this issue. I'm lost in guesses how to do it.
It is important to reproduce the problem to prove that my update will fix it.
I can try the Stefan's approach though.;;;","2023-07-19 01:15;mbaesken;[~sspitsyn]  The  test  serviceability/jvmti/vthread/VThreadTLSTest/VThreadTLSTest.java#id1  showed the issue very well on Windows in our nightly tests, so reproducing the issue should not be very hard. This was in the fastdebug tests , but not sure if it's important that it is fastdebug.
So if you have a patch we could check it with our nightly tests (please remove the problemlisting with your patch too so that we really see anything).;;;","2023-07-19 17:21;sspitsyn;[~mbaesken] I ran this test hundreds of times on mach5 for Windows in fastdebug mode.
No luck so far. And it looks very strange.
Is it reproduced only when run together with other tests?;;;","2023-07-19 20:23;sspitsyn;Refactored test a little bit, added some TMP sleeps to implementation and was able to reproduce the issue on all platforms with a probability ~100%.;;;","2023-07-19 23:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14945
Date: 2023-07-20 06:53:26 +0000;;;","2023-07-20 00:12;mbaesken;> Is it reproduced only when run together with other tests?

Hi [~sspitsyn] , we run these tests with concurrency 15 or 20 (conc parameter of jtreg) and in agent mode (avm). This might be important to reproduce the issue. But great that you found a way too to reproduce it.;;;","2023-07-20 15:41;dukebot;Changeset: 783de32b
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-07-20 22:40:18 +0000
URL:       https://git.openjdk.org/jdk/commit/783de32b6af4383b5ba71b91c307a5dddd0dae13
;;;","2023-07-20 17:04;sspitsyn;Fix Request
This fix is important to support virtual threads for agents loaded into running VM.;;;","2023-07-21 15:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21/pull/143
Date: 2023-07-21 22:32:29 +0000;;;","2023-07-25 01:40;sspitsyn;Alan, thank you for a backport approval!;;;",,,
TypeOopPtr::make_from_klass_common calls itself with args in wrong order,JDK-8300040,5091270,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,dsimms,dsimms,2023-01-12 04:59,2023-02-06 00:17,2023-10-01 09:56,2023-01-12 23:18,21,,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,,,,,,,,,,,"It appears that TypeOopPtr::make_from_klass_common call itself with ""klass_change"" and ""try_for_exact"" arguments swapped:

https://github.com/openjdk/jdk/blob/05a0a710313917fe7124ff43fe9c9af1d649bcac/src/hotspot/share/opto/type.cpp#L3581

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297933,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i2zvyr:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-12 05:32;thartmann;ILW = Swapped arguments in C2 method might lead to incorrect compilation, no issue observed, no workaround = MLH = P4;;;","2023-01-12 05:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11966
Date: 2023-01-12 13:30:54 +0000;;;","2023-01-12 23:18;dukebot;Changeset: 640eff64
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-01-13 07:16:53 +0000
URL:       https://git.openjdk.org/jdk/commit/640eff64d296cc34b7b3fd50dc7075ffe23a642f
;;;",,,,,,,,,,,,,,,,,,
Make new version of JNU_GetStringPlatformChars which checks for null characters,JDK-8300038,5091266,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,michaelm,michaelm,michaelm,2023-01-12 04:19,2023-05-31 23:26,2023-10-01 09:56,2023-05-25 07:59,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"JNU_GetStringPlatformChars needs to check for null characters which are allowed in Java Strings but not in native strings. IllegalArgumentException should be thrown as a fallback. Probably, strings should be checked before calling this function so more specific action should be taken.

A new native function JNU_GetStringPlatformCharsStrict will be added which will be documented to throw IllegalArgumentException
if the returned string contains null characters. Separate PRs will be required to change existing code to use this new function.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zvxv:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,,,"2023-05-23 08:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14083
Date: 2023-05-22 13:19:04 +0000;;;","2023-05-25 07:58;dukebot;Changeset: e7edf8d1
Author:    Michael McMahon <michaelm@openjdk.org>
Date:      2023-05-25 14:57:29 +0000
URL:       https://git.openjdk.org/jdk/commit/e7edf8d1458ff0d66aedbb0086050c36864702f6
;;;",,,,,,,,,,,,,,,,,,,
DwarfParser resource leak,JDK-8300032,5091254,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2023-01-12 02:28,2023-01-23 15:39,2023-10-01 09:56,2023-01-15 22:58,17,21,,,,,,21,hotspot,,0,noreg-hard,,,,,,,,,,,,,,,"DwarfParser class creates a cleaner using this code:
https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/linux/amd64/DwarfParser.java#L51-L52

    Cleaner.create()
           .register(this, () -> DwarfParser.destroyDwarfContext(p_dwarf_context));

There are 2 problems with this:
- each new DwarfParser creates a new Cleaner instance. Each cleaner instance has an associated thread, so with a large number of live instances, the number of threads might hit the platform thread limit.
- the created lambda captures the enclosing instance, which in turn means that it will never be eligible for collection, and the cleaner will never run.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8234624,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zvv7:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-01-12 05:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11965
Date: 2023-01-12 12:08:51 +0000;;;","2023-01-15 22:58;dukebot;Changeset: fe7fca01
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-01-16 06:56:43 +0000
URL:       https://git.openjdk.org/jdk/commit/fe7fca0128ca3a7b514c49d1508ca64499a8bb8e
;;;",,,,,,,,,,,,,,,,,,,
Replace use of JNI_COMMIT mode with mode 0,JDK-8300024,5091247,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2023-01-12 00:41,2023-01-23 15:39,2023-10-01 09:56,2023-01-15 23:00,11,17,21,8,,,,21,hotspot,,0,noreg-cleanup,,,,,,,,,,,,,,,"In files:

src/jdk.hotspot.agent/linux/native/libsaproc/LinuxDebuggerLocal.cpp
src/jdk.hotspot.agent/windows/native/libsaproc/sawindbg.cpp
test/hotspot/jtreg/serviceability/jvmti/RedefineClasses/RedefineRetransform/libRedefineRetransform.cpp

the JNI_COMMIT mode is used with ReleaseLongArrayElements / ReleaseByteArrayElements. This mode does not release memory allocated by the corresponding GetXXXArrayElements functions and creates a memory leak. This code should be using mode 0 to ensure the underlying array is freed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8258186,,,,,,,,,,,,JDK-8258185,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zvtn:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-01-12 03:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11963
Date: 2023-01-12 09:23:49 +0000;;;","2023-01-15 23:00;dukebot;Changeset: 50e7df91
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-01-16 06:58:27 +0000
URL:       https://git.openjdk.org/jdk/commit/50e7df91c77d436937fff9134174ddb8a8dd4dd7
;;;","2023-01-16 01:07;dholmes;There is no actual leak with hotspot as the mode is irrelevant with a non-copying implementation, but using 0 is preferred.;;;","2023-01-16 04:27;djelinski;Hi [~dholmes] there was an actual leak here; The code in question was using the GetXXXArrayElements function family, which has a copying implementation.;;;","2023-01-16 14:27;dholmes;[~djelinski] apologies I skimmed the code too fast and was reading the zero-length code path.;;;",,,,,,,,,,,,,,,,
Some backports placed the tests in the wrong location,JDK-8300014,5091232,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2023-01-11 19:45,2023-01-30 20:36,2023-10-01 09:56,2023-01-18 10:33,8u341,,,,,,,openjdk8u372,client-libs,,0,9-na,jdk8u-fix-request,jdk8u-fix-yes,openjdk-8-specific,,,,,,,,,,,,"8210058: Algorithmic Italic font leans opposite angle in Printing:
https://github.com/openjdk/jdk8u-dev/commit/70d7bd18c82ecd56efc676909eec4480e4feaa6f
Added the test to the correct place and some empty file(using the test name). Empty file should be deleted.

8153732: Windows remote printer changes do not reflect in lookupPrint…
https://github.com/openjdk/jdk8u-dev/commit/700f182cae67101bc5905105b4d45b2449ec3df0
Added the test to the wrong place",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8210058,JDK-8153732,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zvqb:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-01-11 20:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/229
Date: 2023-01-12 03:52:53 +0000;;;","2023-01-13 20:35;serb;Fix request (8u)

The tests for two backports in jdk8 are updated.
Review: https://github.com/openjdk/jdk8u-dev/pull/229;;;","2023-01-18 10:33;dukebot;Changeset: a318e48e
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-01-18 18:31:25 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/a318e48e205acd2e15c50afb9c70c4106ed72463
;;;","2023-01-30 20:36;dukebot;Changeset: a318e48e
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-01-18 18:31:25 +0000
URL:       https://git.openjdk.org/jdk8u/commit/a318e48e205acd2e15c50afb9c70c4106ed72463
;;;",,,,,,,,,,,,,,,,,
Node.focusWithin doesn't account for nested focused nodes,JDK-8300013,5091231,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mstrauss,mstrauss,mstrauss,2023-01-11 18:40,2023-02-02 08:33,2023-10-01 09:56,2023-01-31 09:11,jfx19,,,,,,,jfx20,javafx,,0,,,,,,,,,,,,,,,,"When a scene graph contains multiple nested focused nodes (this can happen with TableView and other controls), the focusWithin bits that are cleared when a focused node is de-focused must only be cleared when there is no other nested node in the scene graph that would also cause focusWithin to be set.

For example, consider a scene graph of nested nodes:
A -> B -> C -> D

When B and D are both focused, the scene graph looks like this:
A(focusWithin)
-> B(focused, focusWithin)
-> C(focusWithin)
-> D(focused, focusWithin)

When B is de-focused, the focusWithin flags must still be preserved because D remains focused.",,,,,,,,,,JDK-8301688,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299662,,JDK-8299662,,,,,,,JDK-8301556,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zvq3:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@18948797,,,,,,,,,"2023-01-11 19:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/993
Date: 2023-01-12 03:08:30 +0000;;;","2023-01-31 09:11;dukebot;Changeset: a4bc9d1a
Author:    Michael Strauß <mstrauss@openjdk.org>
Date:      2023-01-31 17:10:20 +0000
URL:       https://git.openjdk.org/jfx/commit/a4bc9d1a69e56cab92d3dc34cfff49c5cb524443
;;;",,,,,,,,,,,,,,,,,,,
Remove unused JDI VirtualMachineImpl.removeObjectMirror(ObjectReferenceImpl object) method,JDK-8300012,5091230,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2023-01-11 18:11,2023-01-23 15:37,2023-10-01 09:56,2023-01-13 15:27,21,,,,,,,21,core-svc,,0,,,,,,,,,,,,,,,,"VirtualMachineImpl.removeObjectMirror(ObjectReferenceImpl object) is not used. Furthermore it confuses the reader that runs across removeObjectMirror() calls, because what is actually being called is removeObjectMirror(SoftObjectReference ref).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zvpv:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-01-11 18:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11957
Date: 2023-01-12 02:20:04 +0000;;;","2023-01-13 15:27;dukebot;Changeset: f4e119d5
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2023-01-13 23:25:25 +0000
URL:       https://git.openjdk.org/jdk/commit/f4e119d5fcdf592f59a7d029070eba3878e24a7c
;;;",,,,,,,,,,,,,,,,,,,
Refactor code examples to use @snippet in java.util.TimeZone,JDK-8300011,5091227,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-01-11 14:50,2023-01-23 15:44,2023-10-01 09:56,2023-01-17 10:33,,,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,Code examples in java.util.TimeZone currently use the outdated block-quote method. They should be updated to use JEP 413.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zvp7:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-01-12 11:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11955
Date: 2023-01-11 23:41:46 +0000;;;","2023-01-17 10:33;dukebot;Changeset: d7c05d18
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-17 18:30:32 +0000
URL:       https://git.openjdk.org/jdk/commit/d7c05d18700e512722aee078c049389733f87867
;;;",,,,,,,,,,,,,,,,,,,
UnsatisfiedLinkError on calling System.console().readPassword() on Windows,JDK-8300010,5091226,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,naoto,naoto,naoto,2023-01-11 14:11,2023-08-14 06:24,2023-10-01 09:56,2023-01-17 09:26,21,,,,,,,21,core-libs,,0,noreg-hard,regression,,,,,,,,,,,,,,"The subject call on Windows generate:
```
Exception in thread ""main"" java.lang.UnsatisfiedLinkError: 'boolean jdk.internal.io.JdkConsoleImpl.echo(boolean)'
        at java.base/jdk.internal.io.JdkConsoleImpl.echo(Native Method)
        at java.base/jdk.internal.io.JdkConsoleImpl.readPassword(JdkConsoleImpl.java:101)
        at java.base/jdk.internal.io.JdkConsoleImpl.readPassword(JdkConsoleImpl.java:158)
        at java.base/java.io.ProxyingConsole.readPassword(ProxyingConsole.java:128)
        at d.main(d.java:7)
```

Regression caused by JDK-8298971. Native method implementation for `echo()` is missing on Windows",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298971,,,,,,,,,,,,,,,,,,,,,generic,,,,,,b04,21,,windows,,,,,,"0|i2zvoz:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-01-12 09:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11973
Date: 2023-01-12 17:08:29 +0000;;;","2023-01-17 09:26;dukebot;Changeset: e7e37121
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-01-17 17:25:44 +0000
URL:       https://git.openjdk.org/jdk/commit/e7e371212163ba6a56a9a365c662da3fa1a0fe47
;;;",,,,,,,,,,,,,,,,,,,
Performance regression caused by non-inlined hot methods due to post call noop instructions,JDK-8300002,5091217,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,skuksenko,skuksenko,skuksenko,2023-01-11 13:48,2023-04-19 16:22,2023-10-01 09:56,2023-01-17 16:20,19,20,21,,,,,21,hotspot,,0,loom,oracle-triage-11,oracle-triage-17,oracle-triage-21,perf-regression,,,,,,,,,,,"Turning on --enable-preview (Loom) causes a set of performance regressions due to different inline tree.

Some microbenchmarks:
org.openjdk.bench.java.lang.StringBuilders.fromLatin1String
regression from 9 ns/op - 18 ns/op

org.openjdk.bench.java.lang.StringBuilders.fromLatin1StringBuilder
regression from 15 ns/op -> 25 ns/op

org.openjdk.bench.java.lang.reflect.Clazz.getMethodDifferentClassLoader
regression from ~240 ns/op -> 280 ns/op
and many others.

The reason for the performance regression is the fact that C2 generates post call noop instructions (required for Loom) which increases the instruction size of generated methods and some methods became higher than InlineSmallCode threshold.

Some typical non-inlined hot methods:
java.lang.AbstractStringBuilder::<init>
Class::getMethod
etc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301743,JDK-8301819,,,,,,JDK-8306485,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,generic,,,,,,"0|i2zvmz:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-11 13:58;skuksenko;Tuning InlineSmallCode threshold can't help.
Even small changes in InlineSmallCode threshold cause a chaotic effect on our complete set of benchmarks.

For the current state of inline heuristics would be better to use another strategy.
InlineSmallCode threshold should cut off inline of large/medium methods. At the same moment, adding post call noop instructions doesn't increase the real complexity of the method and shouldn't change inline behavior.

Suggestion: count the total size of post call noop instructions and adjust the inlining heuristic (subtract the total noop size from the instructions size).  ;;;","2023-01-11 18:39;dlong;ILW = performance regression; seen in micro-benchmarks; no workaround = MMH = P3;;;","2023-01-11 19:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11958
Date: 2023-01-12 02:52:17 +0000;;;","2023-01-17 16:20;dukebot;Changeset: 89a032dc
Author:    Sergey Kuksenko <skuksenko@openjdk.org>
Date:      2023-01-18 00:16:34 +0000
URL:       https://git.openjdk.org/jdk/commit/89a032dc057d04c996632ad317a0303cf3560852
;;;",,,,,,,,,,,,,,,,,
java/security/Policy/Root/Root.java fails when home directory is read-only,JDK-8299994,5091209,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bhuang,dcubed,dcubed,2023-01-11 12:22,2023-02-08 23:40,2023-10-01 09:56,2023-02-03 11:20,21,,,,,,,21,security-libs,,0,noreg-self,problemlist,tier2,,,,,,,,,,,,,"The following test fails in the JDK21 CI:

java/security/Policy/Root/Root.java

Heres a snippet from the log file:

#section:testng
----------messages:(6/219)----------
command: testng Root
reason: User specified action: run testng/othervm Root 
started: Wed Jan 11 19:56:10 GMT 2023
Mode: othervm [/othervm specified]
finished: Wed Jan 11 19:56:10 GMT 2023
elapsed time (seconds): 0.887
----------configuration:(0/0)----------
----------System.out:(80/5227)----------
config Root.setup(): failure
java.nio.file.AccessDeniedException: /opt/mach5/.java.policy
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:90)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at java.base/sun.nio.fs.UnixFileSystem.copyFile(UnixFileSystem.java:668)
	at java.base/sun.nio.fs.BsdFileSystem.copyFile(BsdFileSystem.java:154)
	at java.base/sun.nio.fs.UnixFileSystem.copy(UnixFileSystem.java:1060)
	at java.base/sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:300)
	at java.base/java.nio.file.Files.copy(Files.java:1303)
	at Root.setup(Root.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:61)
	at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:366)
	at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:320)
	at org.testng.TestRunner.invokeTestConfigurations(TestRunner.java:617)
	at org.testng.TestRunner.beforeRun(TestRunner.java:607)
	at org.testng.TestRunner.run(TestRunner.java:578)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
test Root.test(): skip
java.nio.file.AccessDeniedException: /opt/mach5/.java.policy
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:90)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at java.base/sun.nio.fs.UnixFileSystem.copyFile(UnixFileSystem.java:668)
	at java.base/sun.nio.fs.BsdFileSystem.copyFile(BsdFileSystem.java:154)
	at java.base/sun.nio.fs.UnixFileSystem.copy(UnixFileSystem.java:1060)
	at java.base/sun.nio.fs.UnixFileSystemProvider.copy(UnixFileSystemProvider.java:300)
	at java.base/java.nio.file.Files.copy(Files.java:1303)
	at Root.setup(Root.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:61)
	at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:366)
	at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:320)
	at org.testng.TestRunner.invokeTestConfigurations(TestRunner.java:617)
	at org.testng.TestRunner.beforeRun(TestRunner.java:607)
	at org.testng.TestRunner.run(TestRunner.java:578)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
config Root.cleanUp(): skip

===============================================
java/security/Policy/Root/Root.java
Total tests run: 1, Passes: 0, Failures: 0, Skips: 1
Configuration Failures: 1, Skips: 1
===============================================

----------System.err:(12/672)----------
java.lang.Exception: failures: 1
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:95)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
----------rerun:(35/7521)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295087,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2zvl7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-01-11 12:24;dcubed;[~mikael] - I really don't see the connection between this failure mode and the fix for:

JDK-8299918 Update Xcode11.3.1-MacOSX10.15 devkit at Oracle

but jdk-21+5-268-tier2 only contains one new changeset and that's the one for JDK-8299918.

Update: See [~tbell]'s comments below...;;;","2023-01-11 12:31;dcubed;I do have to wonder why the test is trying to create a file here:

java.nio.file.AccessDeniedException: /opt/mach5/.java.policy 

/opt/mach5 shouldn't be touch by test code...;;;","2023-01-11 12:53;dcubed;This test was recently modified by the following bug fix:

    JDK-8295087 Manual Test to Automated Test Conversion

In any case, it is strange for a test to create/modify a file in the
home directory of the user.;;;","2023-01-11 12:56;dcubed;Changing from [~mikael] to [~bhuang] since this bug is likely due
to a problem in the test itself.;;;","2023-01-31 14:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12354
Date: 2023-01-31 22:35:21 +0000;;;","2023-02-03 11:20;dukebot;Changeset: 20579e48
Author:    Bill Huang <bhuang@openjdk.org>
Date:      2023-02-03 19:19:14 +0000
URL:       https://git.openjdk.org/jdk/commit/20579e48cf598e890aa35c5518ec8d0594f45385
;;;",,,,,,,,,,,,,,,
Wrong sublist used in ListChangeListener,JDK-8299986,5091199,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,angorya,angorya,angorya,2023-01-11 09:52,2023-05-15 07:43,2023-10-01 09:56,2023-02-10 14:43,8,9,jfx11,,,,,jfx21,javafx,,0,sn_137,,,,,,,,,,,,,,,"Found while randomly looking at the code:

In AccordionBehavior:280, the body of ListChangeListener uses getAddedSubList() while processing removed elements:

```
        private final ListChangeListener<TitledPane> panesListener = c -> {
            while (c.next()) {
                if (c.wasAdded()) {
                    for (final TitledPane tp: c.getAddedSubList()) {
                        tp.focusedProperty().addListener(paneFocusListener);
                    }
                } else if (c.wasRemoved()) {
                    for (final TitledPane tp: c.getAddedSubList()) {
                        tp.focusedProperty().removeListener(paneFocusListener);
                    }
                }
            }
        };
```

This looks like a copy-paste bug which was introduced by RT-32103 / JDK-8123765 on 2013/08/02.

We'd need to check if a similar pattern has been used elsewhere (may be create a script or a regex pattern?)

EDIT: Regex pattern used in Eclipse
(?s)wasRemoved.*getAddedSubList

identified the following places:
AccordionBehavior:280
Rule:269

And the other way around
(?s)wasAdded.*getRemoved
did not turn up any similar issues.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8123765,,,,,,,,,,,,,,,,,,,,,8,,,,,,,,"0|i2zviz:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2023-01-11 09:57;kcr;Are you sure this was introduced by JDK-8097996 ? That seems unlikely.;;;","2023-01-11 10:01;angorya;you are right!  the incorrect code existed earlier, the last change was merely a lambdafication.  
the actual change was made in RT-32103 2013/08/02.

thanks for noticing!;;;","2023-01-11 14:11;kcr;Yes, the code does look like an incorrect copy/paste. Is there a test case that shows a failure?;;;","2023-01-11 14:17;angorya;1. there might be more instances like this lurking in the code.  I think a regex search might be the best course of action.
2. test case - obviously not, since this code originated in 2013.  I don't know whether it's worth adding a test case for each case we'll find, since it's a very obvious coding error.  It would be interesting to run the test sweet and see if any existing tests start failing with the fix.;;;","2023-01-11 14:53;kcr;I like the idea of ""grep""ing for other instances of the same copy/paste error. Even though it is obviously wrong, we ideally want a test before spending time fixing and reviewing it.
;;;","2023-02-09 16:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1029
Date: 2023-02-09 23:53:00 +0000;;;","2023-02-10 14:43;dukebot;Changeset: 55eb83da
Author:    Andy Goryachev <angorya@openjdk.org>
Date:      2023-02-10 22:41:11 +0000
URL:       https://git.openjdk.org/jfx/commit/55eb83daa2ab97dcd8b112d2d4208c0a628cbc38
;;;",,,,,,,,,,,,,,
"(bf) Buffer.checkIndex(int, int) should use Preconditions.checkIndex(int, int, BiFunction)",JDK-8299982,5091192,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,roland,roland,2023-01-11 09:04,2023-02-01 22:47,2023-10-01 09:56,2023-01-26 12:10,21,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"This came up in the benchmarks for this PR: 
https://github.com/openjdk/panama-foreign/pull/762

I changed Buffer.checkIndex(int i, int nb)  to rely on Objects.checkIndex() (which has a c2 intrinsic):

https://github.com/rwestrel/panama-foreign/blob/268a254e2be477fca82cb14ebcecd9ffb699ca19/src/java.base/share/classes/java/nio/Buffer.java#L749

and, I'm seeing a ~20% performance improvement for the MemorySegmentVsBits.byteBuffer benchmark (this also needs some unrelated c2 tweaks).

Note the Buffer.checkIndex() implementation above is an experiment, I don't claim it's correct in all cases.

I discussed this with Maurizio and he mentioned the MemorySegment has a similar range check method that's implemented with Objects.checkIndex().

One thing to consider is that Objects.checkFromIndexSize() is functionally close to what's needed for Buffer.checkIndex() (and the MemorySegment range checking method) but has no c2 intrinsic. One possible path is to implement Buffer.checkIndex(int i, int nb) with Objects.checkFromIndexSize() and then rework Objects.checkFromIndexSize()  so it calls Objects.checkIndex().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zvhf:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-01-24 14:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12174
Date: 2023-01-24 22:07:51 +0000;;;","2023-01-26 12:10;dukebot;Changeset: c4278144
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-01-26 20:09:01 +0000
URL:       https://git.openjdk.org/jdk/commit/c4278144bee667e2565a40f12a2a2c251d6cf3aa
;;;",,,,,,,,,,,,,,,,,,,
Update WebKit to 615.1,JDK-8299977,5091182,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,hmeda,kcr,kcr,2023-01-11 07:02,2023-06-22 16:06,2023-10-01 09:56,2023-02-01 05:28,8u371,jfx21,,,,,,jfx21,javafx,,0,3rdparty,CPU23_04-critical-approved,CPU23_04-critical-SQE-OK,sn_135,sn_136,webkit-2.38,,,,,,,,,,"This will update JavaFX WebKit to 615.1, based on GTK WebKit 2.38.x

https://github.com/WebKit/WebKit/wiki/GLib-Stable-Branches
",,,,,,,,,,JDK-8304095,JDK-8302278,JDK-8302274,JDK-8301385,JDK-8301349,,,,,,,,,,,JDK-8293376,,JDK-8275225,,,,JDK-8310681,,,,JDK-8288413,,JDK-8302684,JDK-8300060,JDK-8300954,JDK-8301022,JDK-8301712,JDK-8302294,JDK-8303217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zvf7:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-01-11 07:10;hmeda;The below link corresponds to the wiki for webkit-2.38:
https://github.com/WebKit/WebKit/wiki/GLib-Stable-Branches
;;;","2023-01-25 11:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1011
Date: 2023-01-25 19:51:02 +0000;;;","2023-02-01 05:28;dukebot;Changeset: 301bbd64
Author:    Hima Bindu Meda <hmeda@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-02-01 13:26:27 +0000
URL:       https://git.openjdk.org/jfx/commit/301bbd6409d463c4f789e2b3dcb6b2ea200d7373
;;;","2023-02-11 06:24;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/132
Date: 2023-02-11 14:11:24 +0000;;;","2023-02-11 06:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/112
Date: 2023-02-11 14:43:08 +0000;;;","2023-03-13 15:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx20u/pull/3
Date: 2023-03-13 22:23:12 +0000;;;",,,,,,,,,,,,,,,
Limit underflow protection CMoveINode in PhaseIdealLoop::do_unroll must also protect type from underflow,JDK-8299975,5091180,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,dcubed,dcubed,2023-01-11 06:53,2023-02-06 02:14,2023-10-01 09:56,2023-01-23 05:15,20,21,,,,,,21,hotspot,,0,c2,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,tier7,,,,,,,,,"The following test failed in the JDK20 CI:

sun/nio/cs/FindOneCharEncoderBugs.java

Here's a snippet from the log file:

----------stdout:(21/1323)*----------
# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=\\loopnode.cpp:2169
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\\sb\\prod\\1673325984\\workspace\\open\\src\\hotspot\\share\\opto\\loopnode.cpp:2169), pid=9040, tid=17328
#  assert(inner->is_valid_counted_loop(T_INT) && inner->is_strip_mined()) failed: OuterStripMinedLoop should have been removed
#
# JRE version: Java(TM) SE Runtime Environment (20.0+31) (fastdebug build 20-ea+31-2305)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+31-2305, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\\sb\\prod\\1673430100\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_nio\\scratch\\4\\hs_err_pid9040.mdmp
#
# An error report file with more information is saved as:
# C:\\sb\\prod\\1673430100\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_nio\\scratch\\4\\hs_err_pid9040.log
#
# Compiler replay data is saved as:
# C:\\sb\\prod\\1673430100\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_nio\\scratch\\4\\replay_pid9040.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
result: Error. Agent communication error: java.net.SocketException: Connection reset; check console log for any additional details

Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x000002382dd5b8c0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=17328, stack(0x0000006f5e400000,0x0000006f5e500000)]


Current CompileTask:
C2: 224992 5613   !   4       sun.nio.cs.ext.EUC_JP$Encoder::encodeBufferLoop (289 bytes)

Stack: [0x0000006f5e400000,0x0000006f5e500000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xbfdb51]  os::win32::platform_print_native_stack+0xf1  (os_windows_x86.cpp:236)
V  [jvm.dll+0xe7f780]  VMError::report+0x10c0  (vmError.cpp:813)
V  [jvm.dll+0xe813be]  VMError::report_and_die+0x6ce  (vmError.cpp:1593)
V  [jvm.dll+0xe81b04]  VMError::report_and_die+0x64  (vmError.cpp:1352)
V  [jvm.dll+0x5717b7]  report_vm_error+0xb7  (debug.cpp:286)
V  [jvm.dll+0xaa8daa]  LoopNode::verify_strip_mined+0x14a  (loopnode.cpp:2169)
V  [jvm.dll+0xa70a55]  PathFrequency::to+0xef5  (loopPredicate.cpp:1077)
V  [jvm.dll+0xa6cacb]  PhaseIdealLoop::loop_predication_impl+0x74b  (loopPredicate.cpp:1575)
V  [jvm.dll+0xa6be48]  IdealLoopTree::loop_predication+0x58  (loopPredicate.cpp:1621)
V  [jvm.dll+0xa8df39]  PhaseIdealLoop::build_and_optimize+0x1089  (loopnode.cpp:4539)
V  [jvm.dll+0x5074bd]  Compile::Optimize+0x108d  (compile.cpp:2382)
V  [jvm.dll+0x5043aa]  Compile::Compile+0x163a  (compile.cpp:831)
V  [jvm.dll+0x427855]  C2Compiler::compile_method+0x145  (c2compiler.cpp:116)
V  [jvm.dll+0x51e528]  CompileBroker::invoke_compiler_on_method+0x858  (compileBroker.cpp:2240)
V  [jvm.dll+0x51bced]  CompileBroker::compiler_thread_loop+0x23d  (compileBroker.cpp:1917)
V  [jvm.dll+0x7eb2c2]  JavaThread::thread_main_inner+0x282  (javaThread.cpp:710)
V  [jvm.dll+0xdfa703]  Thread::call_run+0x253  (thread.cpp:229)
V  [jvm.dll+0xbfc468]  thread_native_entry+0xb8  (os_windows.cpp:547)
C  [ucrtbase.dll+0x2268a]
C  [KERNEL32.DLL+0x17974]
C  [ntdll.dll+0x5a0b1]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8267399,,,,,"2023-01-19 00:08;epeter;H.java;https://bugs.openjdk.org/secure/attachment/102349/H.java","2023-01-17 08:34;epeter;Test.java;https://bugs.openjdk.org/secure/attachment/102334/Test.java","2023-01-12 04:03;epeter;r.log;https://bugs.openjdk.org/secure/attachment/102287/r.log",,,,,,,x86_64,,,,,,,,,generic,,,,,,"0|i2zver:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-11 19:31;dlong;Reproduced with 20+27 through 20+31 with replay file.;;;","2023-01-11 20:35;dlong;Also reproduced on Linux by replacing sun/nio/cs/ext/EUC_JP with sun/nio/cs/EUC_JP in replay file.;;;","2023-01-11 20:36;dlong;ILW = assert in debug build; intermittent; no workaround = MMH = P3;;;","2023-01-12 01:11;dlong;I bisected the assert to this changeset:

    8294540: Remove Opaque2Node: it is broken and triggers assert

[~epeter], please take a look.;;;","2023-01-12 04:03;epeter;Posted replay file here ""r.log""
./java -XX:+PrintCompilation -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=r.log;;;","2023-01-17 08:33;epeter;Found a reproducer Test.java, attached.
Reproduces both on JDK20 and JDK21. A little intermittent, therefore the RepeatCompilation, catches it in more than 50% of runs.

./java -XX:CompileCommand=compileonly,Test::test -XX:CompileCommand=printcompilation,Test::test -XX:-PrintInlining -XX:-TraceLoopOpts -Xbatch -XX:+StressIGVN -XX:RepeatCompilation=100 Test.java;;;","2023-01-19 00:07;epeter;Together with [~chagedorn] we were playing around, and found a much easier reproducer, though it only reproduces with TraceLoopOpts. (see H.java)

It reproduces deterministically without -XX:+StressIGVN, but I don't trust that to hold for long. So I added this to make it reproduce at least 50% of times: -XX:+StressIGVN -XX:RepeatCompilation=100

./java -Xcomp -XX:+TraceLoopOpts -XX:-TieredCompilation -XX:CompileOnly=H::test -XX:CompileCommand=dontinline,H::* -XX:+StressIGVN -XX:RepeatCompilation=100 H.java

...
PreMainPost      Loop: N195/N170  limit_check profile_predicated predicated counted [0,int),+1 (2147483648 iters)  has_sfpt strip_mined
Unroll 2( 2)     Loop: N195/N170  counted [int,int),+1 (2147483648 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_call has_sfpt
  Loop: N305/N309  limit_check profile_predicated predicated counted [0,int),+1 (4 iters)  pre
  Loop: N194/N193  sfpts={ 196 }
    Loop: N434/N170  counted [int,int),#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f40efeed8c1, pid=753804, tid=753817
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-01-16-1431317.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-01-16-1431317.emanuel..., compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x14ac8c1]  BaseCountedLoopEndNode::stride_con() const+0x51

The issue is the same: Phi collapses to constant, AddI(phi, stride) collapses to constant -> cannot find stride any more.;;;","2023-01-19 04:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12092
Date: 2023-01-19 11:25:10 +0000;;;","2023-01-23 05:15;dukebot;Changeset: 5a4945c0
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-01-23 13:10:42 +0000
URL:       https://git.openjdk.org/jdk/commit/5a4945c0d95423d0ab07762c915e9cb4d3c66abb
;;;",,,,,,,,,,,,
Second call to Stage.setScene() create sizing issue with uiScale > 1.0,JDK-8299968,5090939,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lkostyra,webbuggrp,webbuggrp,2023-01-09 05:53,2023-04-20 10:44,2023-10-01 09:56,2023-03-14 06:32,8,jfx11,jfx19,jfx20,,,,jfx21,javafx,,0,dcspn,reproducer-yes,sn_137,sn_138,sn_139,webbug,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Tested on Java 11 / 16 / 17 / 18 (Linux and Windows 10/11) and JavaFX 11, 16, 18 and 19

A DESCRIPTION OF THE PROBLEM :
Hello,

I found out a problem and inconsistent behavior with setScene(...) method on stages.

If the setScene(...) method is called on a stage when uiScale > 1, then the scene components are not layed out correctly (they are ""out of bounds""). I think this is because the returned scene width/height are incorrect after a second setScene(...) call (with and height are higher than before, even if the stage size didn't change).

If the stage is manually resized, the content is correctly layout out.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Have a uiScale > 1.0 on the system.

1. Create a stage and set a scene inside
2. Show this stage
3. Create a new scene and set the scene to the stage
4. The newly created scene is not displayed correctly

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The newly created/set scene should be displayed correctly (its size should be the same than previous scene)
ACTUAL -
The newly created/set scene has wrong dimensions.

The returned width/height are incorrect : they are computed as if the uiScale = 1.0 so the scene is not correctly displayed

---------- BEGIN SOURCE ----------
import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class ProblemSetSceneHighDPI extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setWidth(800);
        primaryStage.setHeight(600);
        primaryStage.setScene(createScene(""This is centered""));
        primaryStage.show();
        new Thread(() -> {
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            Scene nScene = createScene(""This is NOT centered"");
            Platform.runLater(() -> primaryStage.setScene(nScene));
        }).start();
    }

    private Scene createScene(String text) {
        VBox box = new VBox(new Label(text));
        box.setAlignment(Pos.CENTER);
        return new Scene(box);
    }
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
- User should resize the stage 
- Resize the stage with API

These two methods are not great as they are directly impacting UI showed to user.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8199204,,,,JDK-8306121,,,,,,,,,,,,"2023-01-11 05:50;pnarayanaswa;ProblemSetSceneHighDPI.java;https://bugs.openjdk.org/secure/attachment/102280/ProblemSetSceneHighDPI.java",,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ztx7:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4143e3f7,,,,,,,,,"2023-01-11 05:50;pnarayanaswa;Checked with attached testcase, Issue is reproducible <attached short clipping>
Test Result - Windows 10
=========
openjfx11: Fail
openjfx17: Fail
openjfx19: Fail
openjfx20ea11: Fail 

Test Result - Ubuntu 20.04
=========
openjfx11: Pass
openjfx17: Fail new Scene at Step 3 is not created
openjfx19: Fail  new Scene at Step 3 is not created
openjfx20ea11: Fail new Scene at Step 3 is not created;;;","2023-01-11 15:31;kcr;I can reproduce this on my Windows 10 system with 125% scaling.;;;","2023-03-07 06:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1054
Date: 2023-03-07 14:33:33 +0000;;;","2023-03-14 06:32;dukebot;Changeset: 4051f161
Author:    Lukasz Kostyra <lkostyra@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-03-14 13:29:56 +0000
URL:       https://git.openjdk.org/jfx/commit/4051f1611646400b59ee871fb40399b933361ba2
;;;",,,,,,,,,,,,,,,,,
C2: CmpU::Value must filter overflow computation against local sub computation,JDK-8299959,5091117,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,chagedorn,chagedorn,2023-01-11 03:49,2023-04-27 07:03,2023-10-01 09:56,2023-01-18 23:44,17,19,20,21,,,,21,hotspot,,0,c2,javafuzzer,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-11,oracle-triage-21,,,,,,,"The attached Java Fuzzer test fails with the following assertion:

To reproduce:
$ java -XX:StressSeed=2032591506 -XX:-TieredCompilation -XX:+StressCCP -Xcomp -XX:CompileOnly=Test Test.java
$ java -XX:StressSeed=2032591506 -XX:-TieredCompilation -XX:+StressCCP -Xcomp -XX:CompileOnly=Reduced Reduced.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8385/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c9470b35-e681-4289-98ed-c4298f665e5e/runs/b20e7e28-c065-4eb3-98f7-754e547baa60/workspace/open/src/hotspot/share/opto/phaseX.cpp:1763), pid=27138, tid=27151
#  assert(t->meet(t0) == t->remove_speculative()) failed: Not monotonic
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2023-01-11-0103419.ekaterina.pavlova.jdk.jdk.master)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2023-01-11-0103419.ekaterina.pavlova.jdk.jdk.master, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x17b6e34]  PhaseCCP::analyze()+0x324
............
Command Line: -XX:-TieredCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressIGVN -XX:+StressCCP -XX:StressSeed=1639636996 -Xmx1G -Xcomp -Xbatch -XX:CompileOnly=Test -XX:CompileCommand=quiet --add-modules=jdk.incubator.vector -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-x64/jdk-19_linux-x64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S63303/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2c025aa3-738b-4d52-9ba7-2d2924a7de06/runs/53df2e53-125b-4e7c-918d-e0ed7e4a7784/testoutput/test-support/jtreg_closed_test_hotspot_jtreg_applications_javafuzzer_MediumTest_java/tmp Test
............
Current CompileTask:
C2:    813   35   !b        Test::lMeth (216 bytes)

Stack: [0x00007fb16bdfe000,0x00007fb16beff000],  sp=0x00007fb16befa0e0,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x17b6e34]  PhaseCCP::analyze()+0x324  (phaseX.cpp:1763)
V  [libjvm.so+0xb04f51]  Compile::Optimize()+0x701  (compile.cpp:2360)
V  [libjvm.so+0xb097de]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x18ce  (compile.cpp:830)
V  [libjvm.so+0x91a7e7]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7  (c2compiler.cpp:113)
V  [libjvm.so+0xb16acc]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xb178b8]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x1087316]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:710)
V  [libjvm.so+0x1a86740]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x17235b3]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)",,,,,,,,,,JDK-8307029,JDK-8305550,JDK-8306173,JDK-8305134,JDK-8306299,,,,,,,,,,,,,,,,,,,,,JDK-8299966,,,,,,,,,JDK-8286638,,,,,"2023-01-11 03:46;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/102276/FuzzerUtils.java","2023-01-16 06:58;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/102328/Reduced.java","2023-01-11 03:45;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/102277/Test.java","2023-01-11 03:47;chagedorn;hs_err_pid27138.log;https://bugs.openjdk.org/secure/attachment/102275/hs_err_pid27138.log",,,,,,,,,,,,,,,,,,,,,"0|i2zv0r:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-11 03:50;chagedorn;ILW = C2 assertion during CCP, single Java Fuzzer test, disable compilation of affected method = HLM = P3;;;","2023-01-16 08:31;epeter;CmpUNode::Value

In some cases the ""sub"" computation is narrower than the overflow computation.

This means that we may start out with type TOP, then do an overflow computation leading to type ""bool"", then a sub computation leading to ""int:1"". CCP then detects that this breaks monotonicity.;;;","2023-01-16 08:42;epeter;Example:
CmpI(AddI(in11 ,in12), in2)
in1 = AddI

(rr) p t1->dump()
int:-17..-5:www
(rr) p t11->dump()
int:<=-4:www
(rr) p t12->dump()
int:-1
(rr) p t2->dump()
int:>=0

This leads to underflow, with the cmp result being an GE == bool == 0..1
If t11 now widens during CCP to a ""int"", then we don't take the overflow path but directly compute the sub.
There we have t1 > t2 (unsigned comparison, so negative values become very large positive values), so we get a GT, which is narrower.;;;","2023-01-17 02:45;epeter;JDK-8286638
That change already improved the overflow calculus, but now also needs to be filtered against the local sub computation.;;;","2023-01-17 08:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12036
Date: 2023-01-17 11:40:50 +0000;;;","2023-01-18 23:44;dukebot;Changeset: 5f66024e
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-01-19 07:37:50 +0000
URL:       https://git.openjdk.org/jdk/commit/5f66024e957e5e40ce8d5a65717ea7f82c9f0b8f
;;;","2023-03-29 04:12;thartmann;Fix Request (JDK 20u)
Resolves an assert during C2 compilation. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-03-29 04:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/35
Date: 2023-03-29 11:11:55 +0000;;;","2023-04-17 06:11;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Small risk, simple change and well reproducible.
Clean backport.
Test passes and fails without the fix;;;","2023-04-17 06:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1252
Date: 2023-04-17 13:12:09 +0000;;;",,,,,,,,,,,
[BACKOUT] 8297487: G1 Remark: no need to keep alive oop constants of nmethods on stack,JDK-8299956,5091115,Bug,Closed,JDK,JDK,software,duke,,,P1,Fixed,thartmann,thartmann,thartmann,2023-01-11 03:23,2023-07-11 05:23,2023-10-01 09:56,2023-01-11 04:41,21,,,,,,,21,hotspot,,0,intermittent,regression,,,,,,,,,,,,,,"Several crashes have been observed after integration of JDK-8297487. We need to back it out.

tools/javac/tree/JavacTreeScannerTest.java 
tools/javac/modules/JavaBaseTest.java
tools/javac/launcher/SourceLauncherTest.java
tools/javac/tree/SourceDocTreeScannerTest.java
tools/javac/preview/classReaderTest/TooNewMajorVersionTest.java
tools/javac/TryWithResources/InterruptedExceptionTest.java
tools/javac/generics/inference/7086601/T7086601b.java

# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (sharedRuntime.cpp:1457), pid=144752, tid=176160
#  guarantee(caller_cb != NULL && caller_cb->is_compiled()) failed: must be called from compiled method
#
# JRE version: Java(TM) SE Runtime Environment (21.0+5) (build 21-ea+5-LTS-244)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-ea+5-LTS-244, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1673434684\testoutput\test-support\jtreg_open_test_langtools_tier1\scratch\4_1\hs_err_pid144752.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp

Stack: [0x000000eb52900000,0x000000eb52a00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x6b03ea]  os::win32::platform_print_native_stack+0xca  (os_windows_x86.cpp:236)
V  [jvm.dll+0x8388ca]  VMError::report+0xc1a  (vmError.cpp:813)
V  [jvm.dll+0x83a4c5]  VMError::report_and_die+0x675  (vmError.cpp:1593)
V  [jvm.dll+0x83ab77]  VMError::report_and_die+0x47  (vmError.cpp:1352)
V  [jvm.dll+0x2791da]  report_vm_error+0x8a  (debug.cpp:286)
V  [jvm.dll+0x719829]  SharedRuntime::resolve_sub_helper+0xd9  (sharedRuntime.cpp:1457)
V  [jvm.dll+0x71931b]  SharedRuntime::resolve_helper+0x3b  (sharedRuntime.cpp:1337)
V  [jvm.dll+0x719d82]  SharedRuntime::resolve_virtual_call_C+0x32  (sharedRuntime.cpp:1698)
C  0x0000020a0f584486

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
v  ~RuntimeStub::resolve_virtual_call 0x0000020a0f584486
C  0x0000020a10c46e14
C  0x0000000320008131


# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffdeb723031, pid=17456, tid=54652
#
# JRE version: Java(TM) SE Runtime Environment (21.0+5) (build 21-ea+5-LTS-244)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-ea+5-LTS-244, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Problematic frame:
# V  [jvm.dll+0x253031]  vframeStreamCommon::next+0x211
#
# Core dump will be written. Default location: C:\sb\prod\1673434720\testoutput\test-support\jtreg_open_test_langtools_tier1\scratch\5\hs_err_pid17456.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp

Stack: [0x000000185e200000,0x000000185e300000],  sp=0x000000185e2fd2b0,  free space=1012k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x253031]  vframeStreamCommon::next+0x211  (vframe.inline.hpp:103)
V  [jvm.dll+0x473df1]  JVM_GetStackAccessControlContext+0x361  (jvm.cpp:1309)
C  0x000001af8fafce81

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 748  java.security.AccessController.getStackAccessControlContext()Ljava/security/AccessControlContext; java.base@21-ea (0 bytes) @ 0x000001af8fafcdee [0x000001af8fafcda0+0x000000000000004e]
J 21075 c2 com.sun.tools.javac.file.JavacFileManager.getClassLoader(Ljavax/tools/JavaFileManager$Location;)Ljava/lang/ClassLoader; jdk.compiler@21-ea (105 bytes) @ 0x000001af90f85860 [0x000001af90f836c0+0x00000000000021a0]
j  com.sun.tools.javac.main.DelegatingJavaFileManager.getClassLoader(Ljavax/tools/JavaFileManager$Location;)Ljava/lang/ClassLoader;+6 jdk.compiler@21-ea
J 16098 c1 com.sun.tools.javac.processing.JavacProcessingEnvironment.initProcessorLoader()V jdk.compiler@21-ea (175 bytes) @ 0x000001af8a78e5ac [0x000001af8a78e0e0+0x00000000000004cc]
J 20808 c1 com.sun.tools.javac.processing.JavacProcessingEnvironment.<init>(Lcom/sun/tools/javac/util/Context;)V jdk.compiler@21-ea (391 bytes) @ 0x000001af8882ffec [0x000001af88829360+0x0000000000006c8c]
J 19317 c1 com.sun.tools.javac.processing.JavacProcessingEnvironment.instance(Lcom/sun/tools/javac/util/Context;)Lcom/sun/tools/javac/processing/JavacProcessingEnvironment; jdk.compiler@21-ea (25 bytes) @ 0x000001af88bdf93c [0x000001af88bdf560+0x00000000000003dc]
j  com.sun.tools.javac.api.BasicJavacTask.initPlugins(Ljava/util/Set;)V+148 jdk.compiler@21-ea
C  0x000001af90854a80
C  0xdcb0680820079a0b


# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffef7f72936, pid=9728, tid=35532
#
# JRE version: Java(TM) SE Runtime Environment (21.0+5) (build 21-ea+5-LTS-244)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-ea+5-LTS-244, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# Problematic frame:
# V  [jvm.dll+0x132936]  BarrierSetNMethod::supports_entry_barrier+0x6
#
# Core dump will be written. Default location: C:\sb\prod\1673434043\testoutput\test-support\jtreg_open_test_langtools_tier1\scratch\2\hs_err_pid9728.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp

Stack: [0x0000005360800000,0x0000005360900000],  sp=0x00000053608fe6b0,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x132936]  BarrierSetNMethod::supports_entry_barrier+0x6  (barrierSetNMethod.cpp:48)
V  [jvm.dll+0x132b45]  BarrierSetNMethod::guard_value+0x15  (barrierSetNMethod_x86.cpp:189)
V  [jvm.dll+0x132884]  BarrierSetNMethod::nmethod_stub_entry_barrier+0x44  (barrierSetNMethod.cpp:170)
C  0x000001b2716986c9


# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fa4c11ed83d, pid=3880793, tid=3911017
#
# JRE version: Java(TM) SE Runtime Environment (21.0+5) (build 21-ea+5-LTS-244)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-ea+5-LTS-244, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x52b83d]  frame::sender(RegisterMap*) const+0x1ed

Stack: [0x00007fa4916e0000,0x00007fa4917e1000],  sp=0x00007fa4917dc430,  free space=1009k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x52b83d]  frame::sender(RegisterMap*) const+0x1ed  (frame_x86.inline.hpp:244)
V  [libjvm.so+0x8d284c]  java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&, JavaThread*)+0xb7c  (javaClasses.cpp:2695)
V  [libjvm.so+0x8d2d6f]  java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&)+0x5f  (javaClasses.cpp:2782)
V  [libjvm.so+0x99262b]  JVM_FillInStackTrace+0xcb  (jvm.cpp:505)
C  [libjava.so+0x146e2]  Java_java_lang_Throwable_fillInStackTrace+0x12  (Throwable.c:49)
J 5571  java.lang.Throwable.fillInStackTrace(I)Ljava/lang/Throwable; java.base@21-ea (0 bytes) @ 0x00007fa4ac384fd9 [0x00007fa4ac384f20+0x00000000000000b9]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302462,JDK-8297487,,,,,,JDK-8300915,,,,,"2023-01-11 04:34;thartmann;hs_err_pid1706541.log;https://bugs.openjdk.org/secure/attachment/102278/hs_err_pid1706541.log","2023-01-11 04:34;thartmann;hs_err_pid820588.log;https://bugs.openjdk.org/secure/attachment/102279/hs_err_pid820588.log",,,,,,,,,,,,,,,,,,,,,,,"0|i2zv0b:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2023-01-11 03:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11941
Date: 2023-01-11 11:27:43 +0000;;;","2023-01-11 04:41;dukebot;Changeset: d15285f9
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-01-11 12:39:50 +0000
URL:       https://git.openjdk.org/jdk/commit/d15285f948c5414028790e25b4497d28775eeb54
;;;","2023-01-11 07:47;rrich;Hi Tobias,
I don't see a connection between the attached crash logs and JDK-8297487. Also that change was very thoroughly tested on all platforms, fastdebug/release without any failures.
I tried to reproduce with `time make test TEST=test/langtools/tools/javac` but so far without success.
I checked out the original commit of JDK-8297487 for this.
Can you help and explain how you reproduced the issue?
Did the BACKOUT actually help at all?
Thanks, Richard.;;;","2023-01-11 11:11;dcubed;Here's a log file snippet from the jdk-21+5-252-tier4 sighting:

tools/javac/processing/TestWarnErrorCount.java

----------stdout:(18/1320)----------
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGILL (0x4) at pc=0x0000fffc52ab5554, pid=70475, tid=82601
#
# JRE version: Java(TM) SE Runtime Environment (21.0+5) (fastdebug build 21-ea+5-LTS-252)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+5-LTS-252, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# C  0x0000fffc52ab5554
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1ab80dfd-041d-4011-8aa5-22b5b6df80f8/runs/baea33b5-2c11-496f-a204-29d6769b775e/testoutput/test-support/jtreg_open_test_langtools_tier1/scratch/2/core.70475)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151514/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1ab80dfd-041d-4011-8aa5-22b5b6df80f8/runs/baea33b5-2c11-496f-a204-29d6769b775e/testoutput/test-support/jtreg_open_test_langtools_tier1/scratch/2/hs_err_pid70475.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
result: Error. Agent communication error: java.io.EOFException; check console log for any additional details


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000fffc6066c500):  JavaThread ""AgentVMThread"" [_thread_in_Java, id=82601, stack(0x0000fffc1ade0000,0x0000fffc1afe0000)]

Stack: [0x0000fffc1ade0000,0x0000fffc1afe0000],  sp=0x0000fffc1afdd4e0,  free space=2037k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  0x0000fffc52ab5554

siginfo: si_signo: 4 (SIGILL), si_code: 1 (ILL_ILLOPC), si_addr: 0x0000fffc52ab5554;;;","2023-01-11 11:12;dcubed;This [BACKOUT] was integrated in jdk-21+5-261.;;;","2023-01-11 22:36;thartmann;Hi Richard,
I was able to reliably reproduce this by running full open/test/langtools/:tier1 with a product build on Linux x64 and Windows x64 in around 4/100 runs. Please note that it only reproduced for me with a full run of that task (*not* by only running one the failing tests). I've seen this before and it's most likely due to timing/warmup/profiling/code cache pressure differences when multiple tests are executed in the same VM. I narrowed it down to our CI build that included your change and then also manually verified by reverting the change. I can reproduce it with your change but not without.

Also, the backout did help. We did not observe these issues anymore.

I can still reproduce this with your change, so if you want me to run some experiments, let me know (we can follow-up by email).;;;","2023-01-30 02:17;rrich;I cannot reproduce the issues anymore since JDK-8300915 is fixed.;;;",,,,,,,,,,,,,,
Update Xcode11.3.1-MacOSX10.15 devkit at Oracle,JDK-8299918,5091070,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mikael,mikael,mikael,2023-01-10 14:13,2023-01-18 15:30,2023-10-01 09:56,2023-01-11 10:28,,,,,,,,21,infrastructure,,0,hgupdate-sync,jdk11u-na,jdk17u-na,,,,,,,,,,,,,Update the Xcode11.3.1-MacOSX10.15 devkit version used on macOS at Oracle to work around an issue on Ventura.,,,,,,,,,,JDK-8300377,JDK-8300606,JDK-8300071,JDK-8300336,JDK-8300137,,,,,,,,,,,,,,,,,,,,,,,JDK-8299693,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2zuqb:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-10 17:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11932
Date: 2023-01-11 01:47:11 +0000;;;","2023-01-11 10:28;dukebot;Changeset: a17b563f
Author:    Mikael Vidstedt <mikael@openjdk.org>
Date:      2023-01-11 18:26:38 +0000
URL:       https://git.openjdk.org/jdk/commit/a17b563f54b2e0953a1dd9a613e6d5e0e9a8e4cb
;;;","2023-01-11 10:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/99
Date: 2023-01-11 18:37:01 +0000;;;","2023-01-12 14:28;dukebot;Changeset: 4b92fb0c
Author:    Mikael Vidstedt <mikael@openjdk.org>
Date:      2023-01-12 18:47:08 +0000
URL:       https://git.openjdk.org/jdk/commit/4b92fb0c6bc82e37e5fb20c72c3ff701070be6dd
;;;","2023-01-17 02:01;goetz;[11u-na, 17u-na]
jib not used in OpenJDK;;;",,,,,,,,,,,,,,,,
JMX ObjectInputFilter additional classes needed,JDK-8299891,5091036,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kevinw,kevinw,kevinw,2023-01-10 06:14,2023-02-14 11:01,2023-10-01 09:56,2023-02-01 01:16,20,,,,,,,20,core-svc,,0,apache-derby-found,regression,,,,,,,,,,,,,,"The default setting for the ObjectInputFilter for JMX is too restrictive.

javax.management.Attribute is needed when calling e.g. setAttribute.
Also javax.management.AttributeList, and Query classes, QueryExp...
",,,,,,,,,,JDK-8301977,JDK-8301973,JDK-8301646,,,,,,,,,,,,,,,,,,JDK-8300581,,,,,,,,,,,,,,JDK-8283093,,,,,,,,,,,,,,,,,,,,b22,,,,,,,,,"0|i2zuir:",9223372036854775807,b34,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,Verified,,"2023-01-10 07:10;mwthomps;ILW=HMM=P2;;;","2023-01-11 01:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/97
Date: 2023-01-11 09:40:11 +0000;;;","2023-02-01 01:16;dukebot;Changeset: 225f8053
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-02-01 09:14:25 +0000
URL:       https://git.openjdk.org/jdk20/commit/225f80532cbeb1597c7f5d660e67d4fa4248c83f
;;;","2023-02-14 10:58;kevinw;Derby CacheManagerMBeanTest passing with this change.;;;",,,,,,,,,,,,,,,,,
Unnecessary NullPointerException catch in java.util.TimeZone#setDefaultZone,JDK-8299865,5091007,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,aturbanov,aturbanov,2023-01-10 04:32,2023-01-23 15:37,2023-10-01 09:56,2023-01-13 10:15,,,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,"Method java.util.TimeZone#setDefaultZone has catch for NullPointerException:

        // if the time zone ID is not set (yet), perform the
        // platform to Java time zone ID mapping.
        if (zoneID == null || zoneID.isEmpty()) {
            String javaHome = StaticProperty.javaHome();
            try {
                zoneID = getSystemTimeZoneID(javaHome);
                if (zoneID == null) {
                    zoneID = GMT_ID;
                }
            } catch (NullPointerException e) {
                zoneID = GMT_ID;
            }
        }

But NPE couldn't happen in try block. We can remove catch block to simplify code a bit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-4368016,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zucb:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-01-11 13:19;naoto;NPE used to be thrown back in the old days (JDK-4368016). Since the current code uses static property and is not affected by System.setProperties() with incorrect java.home and/or user.timezone values, the try/catch block is no longer necessary.;;;","2023-01-12 11:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11951
Date: 2023-01-11 17:12:39 +0000;;;","2023-01-13 10:15;dukebot;Changeset: 500b45e1
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-13 18:13:50 +0000
URL:       https://git.openjdk.org/jdk/commit/500b45e12dccc254e2d1cbd9513653ae939ef349
;;;",,,,,,,,,,,,,,,,,,
ZipFileStore#supportsFileAttributeView(String) doesn't throw NPE,JDK-8299864,5091006,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,pminborg,aturbanov,aturbanov,2023-01-10 04:27,2023-01-17 12:06,2023-10-01 09:56,2023-01-11 07:09,13,17,21,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"I've noticed that ZipFileStore#supportsFileAttributeView(String)
doesn't throw NullPointerException when 'null' is passed as an
argument.

public boolean supportsFileAttributeView(String name) {
    return ""basic"".equals(name) || ""zip"".equals(name) ||
           ((""owner"".equals(name) || ""posix"".equals(name)) && zfs.supportPosix);
}

Package level javadoc for {{java.nio.file}} package mentions that NullPointerException is expected from all methods which pass {{null}}:

>Unless otherwise noted, passing a null argument to a constructor or method in any class or interface in this package will cause a NullPointerException to be thrown.

Other JDK implementations of FileStore throw NPE in this method in case of null.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8222276,,,,,,,,,,,,,,,,,,,,,,,,,,,,13,,,,,,,,"0|i2zuc3:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2023-01-10 07:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11926
Date: 2023-01-10 15:26:05 +0000;;;","2023-01-11 07:09;dukebot;Changeset: 7d3400b1
Author:    Per Minborg <pminborg@openjdk.org>
Date:      2023-01-11 15:08:52 +0000
URL:       https://git.openjdk.org/jdk/commit/7d3400b1cf6befd28af81113b218d0aae60ac05f
;;;",,,,,,,,,,,,,,,,,,,
URLFromURITest.java should import org.junit.jupiter.api.Test,JDK-8299863,5091005,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dclarke,dfuchs,dfuchs,2023-01-10 04:23,2023-01-25 23:08,2023-10-01 09:56,2023-01-20 09:03,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"URLFromURITest.java mixes JUnit 4 and Jupiter APIs:

It should import org.junit.jupiter.api.Test; instead of import org.junit.Test;

There may be more tests that have the same issue.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zubv:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2023-01-10 04:25;dfuchs;See https://github.com/openjdk/jdk/blob/8d17d1ee6f08ee90771d469182aaaaa7c23971fd/test/jdk/java/net/URL/URLFromURITest.java#L46-L51;;;","2023-01-20 08:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12117
Date: 2023-01-20 15:51:52 +0000;;;","2023-01-20 09:02;dukebot;Changeset: e8038557
Author:    Darragh Clarke <Darragh.clarke@oracle.com>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-01-20 17:00:53 +0000
URL:       https://git.openjdk.org/jdk/commit/e8038557080ba686829395b49658a899bea15d35
;;;",,,,,,,,,,,,,,,,,,
OfAddress setter should disallow heap segments,JDK-8299862,5091004,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,jvernee,jvernee,2023-01-10 04:20,2023-01-23 11:27,2023-10-01 09:56,2023-01-11 02:33,20,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,"The following test currently fails:

    @Test(expectedExceptions = IllegalArgumentException.class,
        expectedExceptionsMessageRegExp = "".*Heap segment not allowed.*"")
    public void testNoHeapSets() {
        MemorySegment targetSegment = MemorySegment.allocateNative(ADDRESS.byteSize(), SegmentScope.auto());
        MemorySegment segment = MemorySegment.ofArray(new byte[]{ 0, 1, 2 });
        targetSegment.set(ADDRESS, 0, segment); // should throw
    }

i.e. it is possible to set a heap segment's address into another memory segment. The address of a heap segment is a virtual address, so doing this is non-sensicle.

This should be blocked.",,,,,,,,,,JDK-8300371,JDK-8300008,,,,,,,,,,,,,,,,,,,JDK-8299889,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zubn:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-01-10 04:20;jvernee;Potential fix:

diff --git a/src/java.base/share/classes/jdk/internal/foreign/Utils.java b/src/java.base/share/classes/jdk/internal/foreign/Utils.java
index f00c49bb442..facde705729 100644
--- a/src/java.base/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/java.base/share/classes/jdk/internal/foreign/Utils.java
@@ -38,6 +38,7 @@ import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Supplier;
 import jdk.internal.access.SharedSecrets;
+import jdk.internal.foreign.abi.SharedUtils;
 import jdk.internal.vm.annotation.ForceInline;
 import static java.lang.foreign.ValueLayout.JAVA_BYTE;

@@ -62,8 +63,8 @@ public final class Utils {
                     MethodType.methodType(boolean.class, byte.class));
             BOOL_TO_BYTE = lookup.findStatic(Utils.class, ""booleanToByte"",
                     MethodType.methodType(byte.class, boolean.class));
-            ADDRESS_TO_LONG = lookup.findVirtual(MemorySegment.class, ""address"",
-                    MethodType.methodType(long.class));
+            ADDRESS_TO_LONG = lookup.findStatic(SharedUtils.class, ""unboxSegment"",
+                    MethodType.methodType(long.class, MemorySegment.class));
             LONG_TO_ADDRESS_SAFE = lookup.findStatic(Utils.class, ""longToAddressSafe"",
                     MethodType.methodType(MemorySegment.class, long.class));
             LONG_TO_ADDRESS_UNSAFE = lookup.findStatic(Utils.class, ""longToAddressUnsafe"",
diff --git a/src/java.base/share/classes/jdk/internal/foreign/abi/SharedUtils.java b/src/java.base/share/classes/jdk/internal/foreign/abi/SharedUtils.java
index 5673b599664..c0e6ea3fa3f 100644
--- a/src/java.base/share/classes/jdk/internal/foreign/abi/SharedUtils.java
+++ b/src/java.base/share/classes/jdk/internal/foreign/abi/SharedUtils.java
@@ -259,7 +259,7 @@ public final class SharedUtils {
         }
     }

-    static long unboxSegment(MemorySegment segment) {
+    public static long unboxSegment(MemorySegment segment) {
         if (!segment.isNative()) {
             throw new IllegalArgumentException(""Heap segment not allowed: "" + segment);
         };;;","2023-01-10 06:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/92
Date: 2023-01-10 14:04:38 +0000;;;","2023-01-11 02:33;dukebot;Changeset: 945ef075
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-01-11 10:31:25 +0000
URL:       https://git.openjdk.org/jdk20/commit/945ef07564bb2e7db9743d07d7d9ac7faa3f3d4d
;;;",,,,,,,,,,,,,,,,,,
[Metrics] Swap memory limit reported incorrectly when too large,JDK-8299858,5091001,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2023-01-10 03:32,2023-02-01 22:46,2023-10-01 09:56,2023-01-26 06:53,,,,,,,,21,core-svc,,0,containers,,,,,,,,,,,,,,,"This bug is related to JDK-8292541 which fixed the reported memory limit when it (potentially) exceeds physical host memory. However, a similar issue can happen with Metrics.getMemoryAndSwapLimit(), when the memory limit exceeds host swap limit. That should also not happen.

Host system:
$ free -b
               total        used        free      shared  buff/cache   available
Mem:     67174510592 11629891584 32003850240  1106583552 23540768768 53689348096
Swap:     8589930496     3145728  8586784768

I.e. total host swap is '8589930496' (8 GB). Total system memory is 64 GB. The container should not be allowed to exceed the host memory and host swap values (8+64 = 72GB).

Reproducer:

$ sudo podman run --rm -ti -v $(pwd)/build/linux-x86_64-server-fastdebug/images/jdk:/opt/jdk:z --memory 671745105920 --memory-swap 671745105920 fedora:37 /opt/jdk/bin/java -XshowSettings:system -version
Operating System Metrics:
    Provider: cgroupv1
    Effective CPU Count: 12
    CPU Period: 100000us
    CPU Quota: -1
    CPU Shares: -1
    List of Processors, 12 total: 
    0 1 2 3 4 5 6 7 8 9 10 11 
    List of Effective Processors, 12 total: 
    0 1 2 3 4 5 6 7 8 9 10 11 
    List of Memory Nodes, 1 total: 
    0 
    List of Available Memory Nodes, 1 total: 
    0 
    Memory Limit: Unlimited
    Memory Soft Limit: Unlimited
    Memory & Swap Limit: 625.61G
    Maximum Processes Limit: 2048

openjdk version ""20-internal"" 2023-03-21
OpenJDK Runtime Environment (fastdebug build 20-internal-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (fastdebug build 20-internal-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)

Note the Memory and Swap Limit of '625.61G' It should be 'Unlimited' (=> use host values).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292541,,,,,,,JDK-8300659,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i2zuaz:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-01-19 09:01;sgehwolf;Adding link to JDK-8300659 as this fix depends on that refactoring in the test.;;;","2023-01-20 08:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12118
Date: 2023-01-20 15:53:09 +0000;;;","2023-01-26 06:53;dukebot;Changeset: 64ddf953
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-01-26 14:50:46 +0000
URL:       https://git.openjdk.org/jdk/commit/64ddf9536f55fb81956ebde6dfc0a3c4147af371
;;;",,,,,,,,,,,,,,,,,,
Revert JDK-8294461: wrong effectively final determination by javac,JDK-8299849,5090991,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,jlahoda,jlahoda,2023-01-10 01:22,2023-02-10 11:08,2023-10-01 09:56,2023-01-10 23:54,20,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,"Effectively final handling was changed to be closer to the wording of the JLS under JDK-8294461. However, this lead to JDK-8299416, and it turns out the effectively handling needs more complex consideration, including the specification.

Therefore, the proposal is to revert JDK-8294461, and reconsider the effectively final handling in a future release, making adjustments as needed.",,,,,,,,,,JDK-8300007,JDK-8300369,,,,,,,,,,,,,,,,,,,JDK-8299855,,,,,,,JDK-8294461,JDK-8299416,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zu8r:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,Verified,,"2023-01-10 07:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/93
Date: 2023-01-10 15:49:36 +0000;;;","2023-01-10 23:54;dukebot;Changeset: 636976ad
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2023-01-11 07:52:18 +0000
URL:       https://git.openjdk.org/jdk20/commit/636976ada8773474a5540234a38667668349b30b
;;;",,,,,,,,,,,,,,,,,,,
RISC-V: Improve PrintOptoAssembly output of CMoveI/L nodes,JDK-8299847,5090989,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,fyang,fyang,fyang,2023-01-10 00:43,2023-07-09 19:25,2023-10-01 09:56,2023-01-16 19:08,21,,,,,,,21,hotspot,,0,c2,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,"Witnessed some incorrect/strange branch condition code in PrintOptoAssembly output on RISC-V which is quite confusing.
If we searching for ""cmovI_cmp"" from the output, we have something like following:

20a +   bneglt R28, R29, skip   #@cmovI_cmpI
254 +   bneggt R28, R7, skip    #@cmovI_cmpL
262 +   bneglt R30, R29, skip   #@cmovI_cmpI
0bc +   bneglt R30, R14, skip   #@cmovI_cmpI
0a4 +   bneggt R30, R29, skip   #@cmovI_cmpL
0e4 +   bneggt R15, R13, skip   #@cmovI_cmpL
0f2 +   bneggt R29, R28, skip   #@cmovI_cmpL
158 +   bnegle R29, R7, skip    #@cmovI_cmpL
168 +   bneggt R14, R15, skip   #@cmovI_cmpI
13e +   bneggt R28, R14, skip   #@cmovI_cmpL
198 +   bneggt R21, R8, skip    #@cmovI_cmpL
1de +   bnegle R30, R25, skip   #@cmovI_cmpL
1e8 +   bneggt R28, R11, skip   #@cmovI_cmpI
072 +   bneglt R14, R7, skip    #@cmovI_cmpI
13c +   bneglt R7, R10, skip    #@cmovI_cmpI
17a +   bneggt R29, R7, skip    #@cmovI_cmpL
188 +   bneglt R10, R7, skip    #@cmovI_cmpI
084 +   bneglt R15, R28, skip   #@cmovI_cmpI
0da +   bneglt R29, R30, skip   #@cmovI_cmpI
18e +   bneggt R29, R7, skip    #@cmovI_cmpL
0494 +  bneglt R8, R18, skip    #@cmovI_cmpI
45a +   bneggt R7, R28, skip    #@cmovI_cmpL
468 +   bneglt R10, R14, skip   #@cmovI_cmpI
040 +   bneglt R15, R10, skip   #@cmovI_cmpI
042 +   bneglt R12, R10, skip   #@cmovI_cmpI
068 +   bneggt R31, R12, skip   #@cmovI_cmpL

While this won't affect release build, we should fix this for debug build.",,,,,,,,,,JDK-8311744,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,linux,,,,,,"0|i2zu8b:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-10 01:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11919
Date: 2023-01-10 09:01:57 +0000;;;","2023-01-10 02:21;rcastanedalo;ILW = incorrect pretty-printing of generated code; always on RISC-V; use PrintAssembly instead of PrintOptoAssembly = LHL = P5;;;","2023-01-16 19:08;dukebot;Changeset: 859ccd1a
Author:    Fei Yang <fyang@openjdk.org>
Date:      2023-01-17 03:06:57 +0000
URL:       https://git.openjdk.org/jdk/commit/859ccd1a150653c42ebbcd3402994ef9ff4c810f
;;;","2023-03-20 18:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/18
Date: 2023-03-21 01:18:03 +0000;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,
Make `user.timezone` system property searchable,JDK-8299836,5090977,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,naoto,naoto,2023-01-09 13:59,2023-01-17 12:07,2023-10-01 09:56,2023-01-11 09:17,,,,,,,,21,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,The system property `user.timezone` is specified in `TimeZone.getDefault()` method. It should be found in the javadoc's search box (use @systemProperty tag).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zu5n:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-01-09 16:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11915
Date: 2023-01-09 23:59:19 +0000;;;","2023-01-11 09:17;dukebot;Changeset: 437d69a2
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-11 17:14:08 +0000
URL:       https://git.openjdk.org/jdk/commit/437d69a220a8615f845013e0b495c5b47d945698
;;;",,,,,,,,,,,,,,,,,,,
"In jshell, the output of ""0"".repeat(49999)+""2"" ends with a '0'",JDK-8299829,5090964,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asotona,rgiulietti,rgiulietti,2023-01-09 09:29,2023-01-17 12:05,2023-10-01 09:56,2023-01-11 00:32,17,19,20,,,,,21,tools,,0,,,,,,,,,,,,,,,,"""0"".repeat(49999)+""2"" correctly evaluates to a string with a terminating '2'.
However, jshell outputs it with a terminating '0'.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zu2r:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2023-01-10 07:28;asotona;Jshell provides double truncation of long Strings.
One is performed in ExecutionControlForwarder to fit into MAX_UTF_CHARS = 21844 (which is exactly the point where ""2"" disappears).
Second truncation is performed in Feedback to fit presentation requirements.
While ExecutionControlForwarder truncates right part of the String, Feedback truncated inner part in 2/3 and joins the parts with "" ... "".

I recommend to fix ExecutionControlForwarder to truncate the same way as Feedback, so the right part of any long String won't disappear.;;;","2023-01-10 07:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11927
Date: 2023-01-10 15:42:31 +0000;;;","2023-01-11 00:32;dukebot;Changeset: 030e88d6
Author:    Adam Sotona <asotona@openjdk.org>
Date:      2023-01-11 08:30:48 +0000
URL:       https://git.openjdk.org/jdk/commit/030e88d63844f185b839977ff1b19bbc4fe688e8
;;;",,,,,,,,,,,,,,,,,,
[TESTBUG] TestCreateMinidumpOnCrash.java should not delete hs_err on failure,JDK-8299828,5090963,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lujaniuk,lujaniuk,lujaniuk,2023-01-09 09:00,2023-09-05 01:51,2023-10-01 09:56,2023-01-11 04:36,8u371,,,,,,,8u371,hotspot,,0,sustaining,,,,,,,,,,,,,,,"TestCreateMinidumpOnCrash.java currently always finishes by deleting the created files. However, this can make it hard to diagnose a failure, as for example in JDK-8299212. Upon failure, we should not delete hs_err.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zu2j:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[s390] AES-CTR mode intrinsic fails with multiple short update() calls,JDK-8299817,5090952,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lucy,lucy,lucy,2023-01-09 08:24,2023-03-06 11:43,2023-10-01 09:56,2023-02-28 04:55,19,20,,,,,,21,hotspot,,0,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,,"The AES-CTR mode intrinsic has an issue (wrong encrypt/decrypt result) when it is used with multiple short (len < 16) update() calls. 

The issue was detected using the jtreg test created for JDK-8292158. The root cause of the issue is not related to JDK-8292158. It is just triggered by the same usage pattern.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,19,,generic,,,,,,"0|i2zu03:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-09 15:12;dlong;ILW = wrong result; reproduced in 1 test; no workaround = MMH = P3;;;","2023-01-12 06:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11967
Date: 2023-01-12 14:29:34 +0000;;;","2023-02-28 04:55;dukebot;Changeset: e144783e
Author:    Lutz Schmidt <lucy@openjdk.org>
Date:      2023-02-28 12:52:00 +0000
URL:       https://git.openjdk.org/jdk/commit/e144783eb2d2a4437d0f992c964e34a932bfa54b
;;;",,,,,,,,,,,,,,,,,,
newStringNoRepl should avoid copying arrays for ASCII compatible charsets,JDK-8299807,5090941,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stsypanov,yyang,yyang,2023-01-09 06:21,2023-03-08 23:29,2023-10-01 09:56,2023-03-03 07:43,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"Create on behalf of Glavo<zjx001202@gmail.com>
-----
JavaLangAccess::newStringUTF8NoRepl and JavaLangAccess::getBytesUTF8NoRepl are not implemented correctly. They always copy arrays, rather than avoiding copying as much as possible as javadoc says.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ztxn:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-01-09 06:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11897
Date: 2023-01-09 03:34:55 +0000;;;","2023-01-27 19:51;smarks;Previous PR superseded by this one:

https://github.com/openjdk/jdk/pull/12119
;;;","2023-01-27 20:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12119
Date: 2023-01-20 16:47:27 +0000;;;","2023-03-03 07:43;dukebot;Changeset: 7449e1c6
Author:    Glavo <zjx001202@gmail.com>
Committer: Roger Riggs <rriggs@openjdk.org>
Date:      2023-03-03 15:41:03 +0000
URL:       https://git.openjdk.org/jdk/commit/7449e1c6617f51101e415fc29fafa79c6b55e24d
;;;",,,,,,,,,,,,,,,,,
Fix non-portable code in hotspot shell tests in 8u ,JDK-8299804,5090936,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zzambers,zzambers,zzambers,2023-01-09 04:59,2023-02-01 06:32,2023-10-01 09:56,2023-01-11 05:10,8,,,,,,,openjdk8u372,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,sustaining,,,,,,,,,,,,"Some hotspot shell tests use ""=="" for comparison inside of ""[ ]"". However this is bash extension and it is not portable (posix test command only knows single ""="", see: [1]).

This results in errors on systems where default shell is not bash, such as Ubuntu used in GHA (which defaults to ""Dash"" shell). Expressions are then treated as always false.

Problem is only present on 8u as newer jdks use different approach for shell/jni tests and no longer have these shell tests.

[1] https://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301620,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ztwj:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-01-09 06:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/227
Date: 2023-01-09 13:02:17 +0000;;;","2023-01-09 06:19;zzambers;Fix request (8u):

Fix non-portable code in hotspot shell tests in 8u
fixes tests only, passed testing in GHA (error messages fixed);;;","2023-01-11 05:10;dukebot;Changeset: 5a3fc18e
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-01-11 13:09:55 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/5a3fc18e92f3b34ad604b4cb269c08a96c021560
;;;","2023-01-30 20:35;dukebot;Changeset: 5a3fc18e
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2023-01-11 13:09:55 +0000
URL:       https://git.openjdk.org/jdk8u/commit/5a3fc18e92f3b34ad604b4cb269c08a96c021560
;;;",,,,,,,,,,,,,,,,,
os::print_hex_dump is racy,JDK-8299790,5090923,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2023-01-08 23:55,2023-08-16 23:28,2023-10-01 09:56,2023-08-10 00:24,17,21,22,,,,,22,hotspot,,0,amazon-interest,os,,,,,,,,,,,,,,"It uses os::is_readable_pointer for readibility check before printing, but that information may be stale once we get to the printing. It would be better to use SafeFetch directly to access the dumped memory location. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8314163,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zttn:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-07-16 12:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14895
Date: 2023-07-16 09:55:43 +0000;;;","2023-08-10 00:24;dukebot;Changeset: 8f28809a
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2023-08-10 07:21:47 +0000
URL:       https://git.openjdk.org/jdk/commit/8f28809aa87b1026cdbdd1ea88da3c7f0c994697
;;;","2023-08-11 04:29;mbaesken;On AIX, we start today seeing failures , is this maybe related ?
Test  gtest/NMTGtests.java#nmt-off
java.lang.AssertionError: gtest execution failed; exit code = 2. the failed tests: [os::test_print_hex_dump_vm, os::test_print_hex_dump_vm, os::test_print_hex_dump_vm, os::test_print_hex_dump_vm, os::test_print_hex_dump_vm, os::test_print_hex_dump_vm]
	at GTestWrapper.main(GTestWrapper.java:98)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
	at java.base/java.lang.Thread.run(Thread.java:1570)


stdout contains :
test/hotspot/gtest/runtime/test_os.cpp:174: Failure
Value of: buf
Expected: has substring ""0001 0203 0405 0607 0809 0a0b 0c0d 0e0f""
  Actual: ""0x0000000115739c70:   0000 0102 0304 0506 0008 090a 0b0c 0d0e\n0x0000000115739c80:   0010 1112 1314 1516 0018 191a 1b1c 1d1e\n0x0000000115739c90:   0020 2122 2324 2526 0028 292a 2b2c 2d2e\n0x0000000115739ca0:   0030 3132 3334 3536 0038 393a 3b3c 3d3e\n0x00000""
test/hotspot/gtest/runtime/test_os.cpp:174: Failure
Value of: buf
Expected: has substring ""00010203 04050607 08090a0b 0c0d0e0f""
  Actual: ""0x0000000115739c70:   00000000 01020304 00000008 090a0b0c\n0x0000000115739c80:   00000010 11121314 00000018 191a1b1c\n0x0000000115739c90:   00000020 21222324 00000028 292a2b2c\n0x0000000115739ca0:   00000030 31323334 00000038 393a3b3c\n0x0000000115739cb0:   0""
test/hotspot/gtest/runtime/test_os.cpp:174: Failure
Value of: buf
Expected: has substring ""0001020304050607 08090a0b0c0d0e0f""
  Actual: ""0x0000000115739c70:   0000000000000000 0000000000000008\n0x0000000115739c80:   0000000000000010 0000000000000018\n0x0000000115739c90:   0000000000000020 0000000000000028\n0x0000000115739ca0:   0000000000000030 0000000000000038\n0x0000000115739cb0:   000000000""
test/hotspot/gtest/runtime/test_os.cpp:174: Failure
Value of: buf
Expected: has substring ""0001 0203 0405 0607 0809 0a0b 0c0d 0e0f""
  Actual: ""0x0000000115739c70:   0000 0102 0304 0506 0008 090a 0b0c 0d0e\n0x0000000115739c80:   0010 1112 1314 1516 0018 191a 1b1c 1d1e\n0x0000000115739c90:   0020 2122 2324 2526 0028 292a 2b2c 2d2e\n0x0000000115739ca0:   0030 3132 3334 3536 0038 393a 3b3c 3d3e\n0x00000""
test/hotspot/gtest/runtime/test_os.cpp:174: Failure
Value of: buf
Expected: has substring ""00010203 04050607 08090a0b 0c0d0e0f""
  Actual: ""0x0000000115739c70:   00000000 01020304 00000008 090a0b0c\n0x0000000115739c80:   00000010 11121314 00000018 191a1b1c\n0x0000000115739c90:   00000020 21222324 00000028 292a2b2c\n0x0000000115739ca0:   00000030 31323334 00000038 393a3b3c\n0x0000000115739cb0:   0""
test/hotspot/gtest/runtime/test_os.cpp:174: Failure
Value of: buf
Expected: has substring ""0001020304050607 08090a0b0c0d0e0f""
  Actual: ""0x0000000115739c70:   0000000000000000 0000000000000008\n0x0000000115739c80:   0000000000000010 0000000000000018\n0x0000000115739c90:   0000000000000020 0000000000000028\n0x0000000115739ca0:   0000000000000030 0000000000000038\n0x0000000115739cb0:   000000000""
[  FAILED  ] os.test_print_hex_dump_vm (4 ms);;;","2023-08-11 06:59;stuefe;#+*!$ big endian;;;",,,,,,,,,,,,,,,,,
Compilation of gtest causes build to fail if runtime libraries are in different dirs,JDK-8299789,5090922,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,serb,serb,2023-01-08 23:37,2023-08-07 14:09,2023-10-01 09:56,2023-01-10 04:54,11,17,21,,,,,21,infrastructure,,0,11-bp,17-bp,amazon-interest,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20-fix-request,noreg-build,,,,,,"The ""GtestImage.gmk"" assumes that all runtime libraries MSVCR_DLL, VCRUNTIME_1_DLL and  MSVCP_DLL are located in one folder. So that makefile call the SetupCopyFiles just once.
This causes build to fail if the runtime libraries are located in different dirs and passed by related options to the configure.
",,,,,,,,,,JDK-8300165,JDK-8300393,JDK-8300174,JDK-8300175,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,"0|i2zttf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-09 08:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11899
Date: 2023-01-09 09:18:52 +0000;;;","2023-01-10 04:54;dukebot;Changeset: c8a8388a
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-01-10 10:30:34 +0000
URL:       https://git.openjdk.org/jdk/commit/c8a8388aba3dc121bad04aaa123f6cd7525c3d38
;;;","2023-01-10 20:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1644
Date: 2023-01-10 22:18:14 +0000;;;","2023-01-10 22:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/94
Date: 2023-01-10 22:44:21 +0000;;;","2023-01-11 02:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1051
Date: 2023-01-10 22:06:15 +0000;;;","2023-01-11 03:59;serb;Fix request (20u 17u 11u)

Clean backport. The fix for a broken build if the runtime libraries are located in different dirs and gtests are compiled.
Tested by the default build w/ and w/o gtests, then by running gtests, then by using the separate runtime lib + running the gtests.
Review 20u: https://github.com/openjdk/jdk20/pull/94
Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1051
Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/1644;;;","2023-01-17 05:21;dukebot;Changeset: e15bdc58
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-01-14 04:19:54 +0000
URL:       https://git.openjdk.org/jdk/commit/e15bdc58abdac131c635de80440006f48c303b3f
;;;",,,,,,,,,,,,,,
Test tools/jpackage/share/jdk/jpackage/tests/MainClassTest.java timed out,JDK-8299779,5090909,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,almatvee,dholmes,dholmes,2023-01-08 17:07,2023-03-16 00:20,2023-10-01 09:56,2023-03-10 17:06,20,21,,,,,,21,tools,,0,macos,sn_138,sn_139,tier2,tier8,,,,,,,,,,,"No obvious issues:

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+31-2300/macosx-x64.jdk/jdk-20.jdk/Contents/Home/bin/java' timed out (timeout set to 2160000ms, elapsed time including timeout handling was 2493285ms).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300164,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2ztqj:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-01-18 21:58;dholmes;This is always failing on the same host;;;","2023-01-20 19:26;dcubed;Here's some top log snippets from the jdk-21+7-407-tier2 sighting:

tools/jpackage/share/jdk/jpackage/tests/MainClassTest.java

----------------------------------------
[2023-01-21 02:24:35] [/usr/bin/top, -l, 1] timeout=20000
----------------------------------------
Processes: 386 total, 3 running, 7 stuck, 376 sleeping, 1820 threads 
2023/01/21 02:24:35
Load Avg: 3.36, 4.52, 5.29 
CPU usage: 2.4% user, 7.48% sys, 90.47% idle 
SharedLibs: 359M resident, 80M data, 46M linkedit.
MemRegions: 43814 total, 3863M resident, 51M private, 587M shared.
PhysMem: 9972M used (2252M wired), 6408M unused.
VM: 1919G vsize, 2320M framework vsize, 725418(0) swapins, 846557(0) swapouts.
Networks: packets: 79787966/233G in, 44589871/179G out.
Disks: 4234806/63G read, 19900988/480G written.

<snip>

71350  java             0.0  00:00.01 3      0    44     2348K 0B    0B    43105 71033 stuck    *0[1]      0.00000 0.00000    502 2122     380   85       33       992       176      37        0       0        0.0   0      0      mach5-one             N/A    N/A   N/A   N/A   N/A   N/A  
71330  hdiutil          0.0  00:00.03 21     1    46     7224K 0B    0B    43105 69863 stuck    *0[1]      0.00000 0.00000    502 3093     116   107      33       1958      705      442       0       32       0.0   0      0      mach5-one             N/A    N/A   N/A   N/A   N/A   N/A  
71250  diskimages-helpe 0.0  00:00.08 3      1    67     5892K 0B    0B    71250 1     stuck    *0[1]      0.00000 0.00000    502 2509     110   1350     560      1711      1331     838       0       126      0.0   0      0      mach5-one             N/A    N/A   N/A   N/A   N/A   N/A  
71224  jpackage         0.0  00:17.04 29     1    120    412M  0B    0B    43105 69850 stuck    *0[1]      0.00000 0.00000    502 205811   1632  6052     3003     315763    110104   15546     0       331      0.0   0      0      mach5-one             N/A    N/A   N/A   N/A   N/A   N/A  
5814   lsd              0.0  00:06.08 3      2    294    2604K 0B    360K  5814  1     stuck    *2[3407]   0.00000 0.00000    502 269460   2490  49899    15649    249727    53870    26724     2097    318      0.0   0      0      mach5-one             N/A    N/A   N/A   N/A   N/A   N/A  
311    ReportCrash      0.0  00:01.30 6      2    124    4392K 0B    716K  311   1     stuck     0[0]      0.00000 0.00000    0   55863    182   18151    7520     34799     24099    9666      2295    250      0.0   0      0      root                  N/A    N/A   N/A   N/A   N/A   N/A  
;;;","2023-03-06 17:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12896
Date: 2023-03-07 00:56:02 +0000;;;","2023-03-10 17:06;dukebot;Changeset: 0a4d54f7
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2023-03-11 01:04:13 +0000
URL:       https://git.openjdk.org/jdk/commit/0a4d54f7ce2ac906a8012ed92c84ed8303cb4b90
;;;",,,,,,,,,,,,,,,,,
Test runtime/NMT/BaselineWithParameter.java timed out,JDK-8299777,5090907,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stefank,dholmes,dholmes,2023-01-08 13:48,2023-03-01 05:57,2023-10-01 09:56,2023-02-21 02:59,21,,,,,,,21,hotspot,,0,intermittent,nmt,tier7,,,,,,,,,,,,,"Nothing to go on:

----------messages:(9/503)----------
command: main -XX:NativeMemoryTracking=detail BaselineWithParameter
reason: User specified action: run main/othervm -XX:NativeMemoryTracking=detail BaselineWithParameter 
started: Fri Jan 06 05:21:12 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.management --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
Timeout information:
--- Timeout information end.
finished: Fri Jan 06 05:48:08 UTC 2023
elapsed time (seconds): 1616.121
----------configuration:(4/115)----------
Boot Layer
  add modules: java.base java.management   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(1/28)----------
Timeout refired 1200 times
----------System.err:(0/0)----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286345,,,,,,,JDK-8010084,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2ztq3:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-02-20 04:26;stefank;I think I know what the problem is with these NMT tests. The test forks a process and then waits for it to finish without draining the streams. The forked process then hangs when it writes to stdout/stderr because the main thread doesn't read the written data.

I think this often works, because the forked process writes so little that it fits in some kind of out buffer. If I artificially increase the written data I can reproduce this hang.

Adding more data to the NMT jcmd:
```
diff --git a/src/hotspot/share/services/nmtDCmd.cpp b/src/hotspot/share/services/nmtDCmd.cpp
index f64c65c2dc8..42dbe6c1ae2 100644
--- a/src/hotspot/share/services/nmtDCmd.cpp
+++ b/src/hotspot/share/services/nmtDCmd.cpp
@@ -108,6 +108,11 @@ void NMTDCmd::execute(DCmdSource source, TRAPS) {
   // Serialize NMT query
   MutexLocker locker(THREAD, MemTracker::query_lock());
 
+  // Fill up the output
+  for (int i = 0; i < 8 * 1024; i++) {
+    output()->print_cr(""Fake line: %d"", i);
+  }
+
   if (_summary.value()) {
     report(true, scale_unit);
   } else if (_detail.value()) {
```;;;","2023-02-20 05:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12663
Date: 2023-02-20 13:46:46 +0000;;;","2023-02-20 13:04;dholmes;BTW the waitFor() was explicitly added by this issue: JDK-8010084. I wonder if OutputAnalyzer behaved differently back then?;;;","2023-02-21 02:59;dukebot;Changeset: fef19102
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-02-21 10:58:36 +0000
URL:       https://git.openjdk.org/jdk/commit/fef1910277842303b41854c207fc4caba393adc6
;;;","2023-02-21 04:45;stefank;[~dholmes] I wonder if the issue the waitFor tried to solve was that we reused the ProcessBuilder, while the first forked process were not completely shut down. Maybe we shouldn't be reusing ProcessBuilder instances, or we need to add back the waitFor() calls *after* the usage of the OutputAnalyzer?

Update: According to the documentation of ProcessBuilder.start():
""Subsequent modifications to this process builder will not affect the returned Process.""
;;;","2023-02-21 14:31;dholmes;[~stefank] These days at least, OutputAnalyzer implicitly ensures the process has terminated. If you check the process output then that operation only completes when the stream pumper terminates, which means the process output has ceased and the process terminated. If you check the return value then an explicit waitFor is issued.;;;","2023-02-21 22:31;stefank;[~dholmes] Right. That was my understanding as well, but your earlier comment got me worried that I had missed something. Thanks.;;;","2023-02-21 23:21;dholmes;So I had to dig further into this, and back in JDK 8 / hsx25 the OutputAnalyzer only processed the actual output of the process:

https://hg.openjdk.org/hsx/hsx25/hotspot/file/a649f6511c04/test/testlibrary/com/oracle/java/testlibrary/OutputAnalyzer.java

It requires that the Process passed to the constructor has already terminated.

The issue that introduced the p.start.waitFor() was simply that the test had to wait for the baseline to be taken before requesting the summary - it had nothing to do with checking any output and no use of OutputAnalyzer was involved. The flaw with that is that unless something consumes the process output it can block - hence this issue and the fix.;;;",,,,,,,,,,,,,
The ColorModel.getRGBdefault() method is not thread-safe,JDK-8299772,5090894,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2023-01-07 17:07,2023-01-23 15:49,2023-10-01 09:56,2023-01-18 12:29,17,21,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,"The next implementation of ColorModel.getRGBdefault() is not thread-safe:

    private static ColorModel RGBdefault;

    public static ColorModel getRGBdefault() {
        if (RGBdefault == null) {
            RGBdefault = new DirectColorModel(32,
                                              0x00ff0000,       // Red
                                              0x0000ff00,       // Green
                                              0x000000ff,       // Blue
                                              0xff000000        // Alpha
                                              );
        }
        return RGBdefault;
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2ztn7:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-01-09 06:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11895
Date: 2023-01-08 01:09:30 +0000;;;","2023-01-18 12:29;dukebot;Changeset: 8b70c432
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-01-18 20:27:30 +0000
URL:       https://git.openjdk.org/jdk/commit/8b70c432d31b29bf5f6b8d29809e3c3b91318be1
;;;",,,,,,,,,,,,,,,,,,,
"ExceptionInInitializerError for an enum with multiple switch statements, follow-up",JDK-8299760,5090873,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,acobbs,vromero,vromero,2023-01-06 12:19,2023-03-29 23:15,2023-10-01 09:56,2023-03-23 14:20,,,,,,,,21,tools,,0,,,,,,,,,,,,,,,,"proposed fix for JDK-7176515 fix the specific reported issue but a more complex test case still fails with the same exception error at runtime. See the fix for JDK-7176515 which contains a commented version of the test case still failing. We need to do more research in order to provide a complete solution, if possible.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ztij:",9223372036854775807,b16,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-01-08 20:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/10797
Date: 2022-10-20 15:46:01 +0000;;;","2023-03-23 14:20;dukebot;Changeset: ac6af6a6
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Vicente Romero <vromero@openjdk.org>
Date:      2023-03-23 21:17:47 +0000
URL:       https://git.openjdk.org/jdk/commit/ac6af6a64099c182e982a0a718bc1b780cef616e
;;;",,,,,,,,,,,,,,,,,,,
java/util/zip/Deinflate.java failing on s390x,JDK-8299748,5090858,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amitkumar,tsteele,tsteele,2023-01-06 07:50,2023-09-29 03:09,2023-10-01 09:56,2023-04-28 04:58,,,,,,,,21,core-libs,,0,jdk17u-fix-request,noreg-self,,,,,,,,,,,,,,"Created on behalf of Amit Kumar.

DeInflate.java test fails on s390x platform because size for out1 array which is responsible for storing the compressed data is insufficient. Due to that, the system is unable to write whole compressed data on array. While decompressing the data, the assert statement 'n != len' is getting executed.

----------System.out:(2/78)----------
level:-1, strategy: 0, dowrap: false
m=525312, n=498060, len=524288, eq=false
----------System.err:(11/585)----------
java.lang.RuntimeException: De/inflater failed:java.util.zip.Deflater@5ce95579
    at DeInflate.check(DeInflate.java:141)
    at DeInflate.main(DeInflate.java:290)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
    at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: De/inflater failed:java.util.zip.Deflater@5ce95579

test result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: De/inflater failed:java.util.zip.Deflater@5ce95579",,,,,,,,,,JDK-8313516,JDK-8313370,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,linux,,,,,,"0|i2ztf7:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@62714d2c,,,,,,,,,"2023-01-30 00:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12283
Date: 2023-01-30 08:03:38 +0000;;;","2023-02-07 22:46;amitkumar;Tyler, Assigning it to myself :).;;;","2023-04-28 04:58;dukebot;Changeset: fee02f06
Author:    Amit Kumar <amitkumar@openjdk.org>
Committer: Volker Simonis <simonis@openjdk.org>
Date:      2023-04-28 11:55:59 +0000
URL:       https://git.openjdk.org/jdk/commit/fee02f066879e77e55e217660daa46607778b6e8
;;;","2023-09-28 06:52;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed.;;;","2023-09-28 07:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1817
Date: 2023-09-28 13:54:04 +0000;;;",,,,,,,,,,,,,,,,
Accept unknown signatureAlgorithm in PKCS7 SignerInfo,JDK-8299746,5090855,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,weijun,weijun,weijun,2023-01-06 07:35,2023-01-11 23:02,2023-10-01 09:56,2023-01-06 10:52,,,,,,,,21,security-libs,,0,,,,,,,,,,,,,,,,"The SignerInfo::makeSigAlg method tries its best to recover the signature algorithm from legacy PKCS7 SignerInfo type where the signatureAlgorithm field was named encryptionAlgorithm and could be either RSA or SHA1withRSA. On the other hand, if it's a modern algorithm not yet known by the JDK (but known by a 3rd party security provider), a strange name like SHA1withSIGALG is returned. The signatureAlgorithm should have been returned directly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ztej:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2023-01-06 07:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11883
Date: 2023-01-06 15:52:03 +0000;;;","2023-01-06 10:52;dukebot;Changeset: ba03f42a
Author:    Weijun Wang <weijun@openjdk.org>
Date:      2023-01-06 18:46:37 +0000
URL:       https://git.openjdk.org/jdk/commit/ba03f42a50375c05400de9bd19d1d6d444f0a46d
;;;",,,,,,,,,,,,,,,,,,,
CaptureCallState is missing @Preview annotation,JDK-8299740,5090848,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-01-06 06:10,2023-01-27 05:56,2023-10-01 09:56,2023-01-06 06:53,20,,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,The CaptureCallState interface is missing the @Preview annotation.,,,,,,,,,,JDK-8299766,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ztcz:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-01-06 06:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/86
Date: 2023-01-06 14:10:52 +0000;;;","2023-01-06 06:53;dukebot;Changeset: 5eee2a07
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-01-06 14:52:08 +0000
URL:       https://git.openjdk.org/jdk20/commit/5eee2a07f5db5979149cc3e96d4f608ed135a7b3
;;;",,,,,,,,,,,,,,,,,,,
HashedPasswordFileTest.java and ExceptionTest.java can fail with java.lang.NullPointerException,JDK-8299739,5090847,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-01-06 05:39,2023-02-15 23:17,2023-10-01 09:56,2023-02-09 01:31,,,,,,,,21,core-svc,,0,noreg-self,,,,,,,,,,,,,,,"

These two tests fail occasionally:
test/jdk/javax/management/security/HashedPasswordFileTest.java
test/jdk/javax/management/MBeanServer/ExceptionTest.java


e.g an NPE in HashedPasswordFileTest at line 220: cs.stop()
Stopping the JMXConnectorServer, but cs is null.

testClearTextPasswordFile and other tests call createServerSide() which would set cs from a call to newJMConnectorServer().

cs is a private variable and is never set to null, so the first test is testClearTextPasswordFile and it fails to set it.
The other tests then go on to pass.

createServerSide() must have thrown an exception, to avoid setting cs, but no exception is visible in the log.

Ah, testClearTextPasswordFile must call createServerSide and get an exception, but it calls cs.stop() in a finally block, so hits the NPE before we see the exception.

Test needs an update to not hit an NPE before showing its Exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ztcr:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1f101086,,,,,,,,,"2023-01-06 05:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11881
Date: 2023-01-06 13:11:41 +0000;;;","2023-02-09 01:31;dukebot;Changeset: 04f30185
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-02-09 09:30:44 +0000
URL:       https://git.openjdk.org/jdk/commit/04f30185e914c10c918d0eff1fb63fd96e1139fb
;;;",,,,,,,,,,,,,,,,,,,
Drop VaList,JDK-8299736,5090843,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2023-01-06 04:49,2023-01-06 06:08,2023-10-01 09:56,2023-01-06 06:08,repo-panama,,,,,,,,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,"As discussed here:
https://mail.openjdk.org/pipermail/panama-dev/2022-November/018096.html

The VaList class is hopelessly platform specific and of limited usefulness. It would be better to drop it for the time being (and maybe introduce it as part of the bindings generated by jextract).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ztbv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-01-06 05:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/763
Date: 2023-01-06 13:13:26 +0000;;;",,,,,,,,,,,,,,,,,,,,
"AArch64: ""unexpected literal addressing mode"" assertion failure with -XX:+PrintC1Statistics",JDK-8299733,5090838,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ngasson,ngasson,ngasson,2023-01-06 03:30,2023-02-06 00:16,2023-10-01 09:56,2023-01-10 05:44,20,21,,,,,,20,hotspot,,0,aarch64-related,c1,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,,,,,,,,,,"$ java -XX:+PrintC1Statistics -XX:+UseZGC --version

# To suppress the following error report, specify this argument                                                                
# after -XX: or in .hotspotrc:  SuppressErrorAt=/assembler_aarch64.cpp:245                                                     
#                                                                                                                              
# A fatal error has been detected by the Java Runtime Environment:                                                             
#                                                                                                                              
#  Internal Error (/home/nicgas01/jdk/src/hotspot/cpu/aarch64/assembler_aarch64.cpp:245), pid=955885, tid=955956               
#  assert(_mode != literal) failed: unexpected literal addressing mode                                                         
#                                                                                                                              
# JRE version: OpenJDK Runtime Environment (21.0) (slowdebug build 21-internal-adhoc.nicgas01.jdk)                             
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 21-internal-adhoc.nicgas01.jdk, mixed mode, tiered, compressed class ptrs, z gc, linux-aarch64)                                                                                                                
# Problematic frame:                                                                                                           
# V  [libjvm.so+0x12fad4c]  Address::assert_is_nonliteral() const+0x2c   ",,,,,,,,,,JDK-8300402,JDK-8300003,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298053,,,,,,,,,JDK-8292878,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2ztar:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-06 06:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/87
Date: 2023-01-06 14:46:36 +0000;;;","2023-01-06 07:24;chagedorn;ILW = C1 assert with debug flag only, only affects debug builds and with PrintC1Statistics but regression, no workaround = MMH = P3;;;","2023-01-10 05:43;dukebot;Changeset: 21d468e5
Author:    Nick Gasson <ngasson@openjdk.org>
Date:      2023-01-10 13:29:55 +0000
URL:       https://git.openjdk.org/jdk20/commit/21d468e5751b082edc8db919e378fbb1cc6dc9ad
;;;",,,,,,,,,,,,,,,,,,
[Vector API] assert in switch-default of LibraryCallKit::arch_supports_vector_rotate is too weak to catch bugs,JDK-8299721,5090829,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,jiefu,jiefu,jiefu,2023-01-05 23:37,2023-02-06 00:16,2023-10-01 09:56,2023-01-06 04:58,21,,,,,,,21,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-21,tencent-interest,vectorapi,,,,,,,,,,,"The switch-default path of LibraryCallKit::arch_supports_vector_rotate means runtime error.
So to prevent potential bugs, an error msg should be printed even with release VMs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zt8r:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-06 00:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11877
Date: 2023-01-06 07:53:27 +0000;;;","2023-01-06 00:39;chagedorn;ILW = Turn assertion into fatal to stop and catch bugs with product builds and prevent undefined behavior, never observed, no workaround = LLH = P5 ;;;","2023-01-06 04:58;dukebot;Changeset: 8cc1669f
Author:    Jie Fu <jiefu@openjdk.org>
Date:      2023-01-06 12:56:36 +0000
URL:       https://git.openjdk.org/jdk/commit/8cc1669ffd22c8cabc98585ca6df6fc5fed5fb10
;;;",,,,,,,,,,,,,,,,,,
JavaDoc: Buttons to copy specific documentation URL are not accessible ,JDK-8299718,5090352,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,hannesw,webbuggrp,webbuggrp,2022-12-23 01:04,2023-04-17 02:32,2023-10-01 09:56,2023-04-03 03:39,19,,,,,,,21,tools,,0,dcsad,reproducer-other,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
JDK 19.0.1

A DESCRIPTION OF THE PROBLEM :
JavaDoc generated using the standard javadoc tool provides buttons beside method and constant names to copy their documentation URL to the clipboard. These buttons are only accessible to mouse users, and do not have a visible accessible name. They are not keyboard accessible except when made visible by moving the mouse. They are not present in the DOM for screen reader users to locate. They have no visible text, only an icon.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Generate JavaDoc for a class using the standard javadoc tool.
Open the documentation in a web browser.
Move the mouse over the name of a field or method of the class.
A button with an icon in it appears beside the name. The icon has alt text of ""Copy URL"".
Clicking the button causes the text ""Copied!"" to be shown beside the button until the mouse is moved away.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
All functionality should be available to all users regardless of input devices used.
Visible text on buttons helps all users to understand the interface. Icons alone, even with alt text, are not meaningful to everyone.
Buttons should remain visible at all times. Otherwise speech input, screen readers, and keyboard users are unable to use them.
Keyboard focus indicators should meet or exceed minimum contrast requirements as per WCAG 2.1.
ACTUAL -
The button does not appear in the DOM at all unless you move the mouse over the name of the field or constant.
The button has no visible text to describe its function for users who do not use screen readers.
Users must be able to see the button's icon and guess its meaning.
The keyboard focus indicator around the button has insufficient contrast (1.33, should be minimum 3.00) to be readily visible.

These buttons fail WCAG 2.0 level A requirements for keyboard accessibility, and fail WCAG 2.1 level AA requirements for colour contrast.

See:
https://www.w3.org/WAI/WCAG21/quickref/#keyboard
https://www.w3.org/WAI/WCAG21/quickref/#non-text-contrast

---------- BEGIN SOURCE ----------
<h3>main<button class=""copy copy-header"" onclick=""copyUrl(this)""> <img src=""../../../../copy.svg"" alt=""Copy URL""> <span data-copied=""Copied!""></span></button></h3>
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
None for users who rely on assistive technologies, touch screens, or keyboard input.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305958,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zqar:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2023-01-05 22:43;adev;The button does not appear in the DOM at all unless the mouse is moved over the name of the field or constant.
It fails WCAG 2.0 level A requirements for keyboard accessibility, and fail WCAG 2.1 level AA requirements for colour contrast. ;;;","2023-03-24 08:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13176
Date: 2023-03-24 15:29:30 +0000;;;","2023-04-03 03:39;dukebot;Changeset: 094e03de
Author:    Hannes Wallnöfer <hannesw@openjdk.org>
Date:      2023-04-03 10:37:19 +0000
URL:       https://git.openjdk.org/jdk/commit/094e03de6a0944c296ffc67177c66a0148ab9ce7
;;;",,,,,,,,,,,,,,,,,,
IR test: VectorGatherScatterTest.java fails with SVE randomly,JDK-8299715,5090824,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,xgong,xgong,xgong,2023-01-05 22:17,2023-01-17 15:56,2023-10-01 09:56,2023-01-10 17:51,20,21,,,,,,20,hotspot,,0,noreg-self,oracle-triage-21,vectorapi,,,,,,,,,,,,,"test/hotspot/jtreg/compiler/vectorapi/VectorGatherScatterTest.java fails randomly on SVE server with the IR check failure:

One or more @IR rules failed:

Failed IR Rules (2) of Methods (2)
----------------------------------
1) Method ""public static void compiler.vectorapi.VectorGatherScatterTest.testLoadGatherMasked()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#LOAD_VECTOR_GATHER_MASKED#_"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\\d+(\\s){2}(LoadVectorGatherMasked.*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 >= 1 [given]
           - No nodes matched!

2) Method ""public static void compiler.vectorapi.VectorGatherScatterTest.testStoreScatterMasked()"" - [Failed IR rules: 1]:
   * @IR rule 1: ""@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeatureOr={}, applyIfCPUFeature={}, counts={""_#STORE_VECTOR_SCATTER_MASKED#_"", "">= 1""}, failOn={}, applyIfAnd={}, applyIfOr={}, applyIfNot={})""
     > Phase ""PrintIdeal"":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: ""(\\d+(\\s){2}(StoreVectorScatterMasked.*)+(\\s){2}===.*)""
           - Failed comparison: [found] 0 >= 1 [given]
           - No nodes matched!

>>> Check stdout for compilation output of the failed methods
",,,,,,,,,,JDK-8300366,JDK-8300005,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2zt7n:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-05 23:33;chagedorn;I'll target this to JDK 21 for now but feel free to fix this in JDK 20 (if it is really a test bug only) if there is an easy fix in time.

ILW = IR test failure on SVE, single test, no workaround = MLH = P4;;;","2023-01-05 23:43;xgong;Thanks for doing this! I have prepared a patch to fix this issue. And the PR will be created soon. So do I need to target the fixing to jdk20 or the jdk mainline? Thanks!;;;","2023-01-05 23:55;chagedorn;Is it a test fix only? Then you are allowed to fix it in JDK 20 (as stated in https://openjdk.org/jeps/3) if you want to have this in JDK 20. Otherwise, mainline is also fine. Just make sure to set the Fix Version accordingly (or set it to tbd).;;;","2023-01-06 00:07;xgong;Yes, it is a test fix only.;;;","2023-01-09 06:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/90
Date: 2023-01-09 08:08:02 +0000;;;","2023-01-10 17:51;dukebot;Changeset: de79162f
Author:    Xiaohong Gong <xgong@openjdk.org>
Date:      2023-01-11 01:49:56 +0000
URL:       https://git.openjdk.org/jdk20/commit/de79162fdf122236fd518a51fd47aec75daf2948
;;;",,,,,,,,,,,,,,,
Test javax/swing/JTableHeader/6889007/bug6889007.java failed: Wrong type of cursor,JDK-8299713,5090822,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,dholmes,dholmes,2023-01-05 20:12,2023-08-04 02:44,2023-10-01 09:56,2023-04-30 21:43,11,17,20,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sn_136,sn_137,sn_138,sn_139,sn_142,test_sprint,testbug,tier4,,,"----------System.err:(36/3000)----------
java.lang.RuntimeException: Wrong type of cursor!
	at bug6889007$MyTableHeaderUI.rolloverColumnUpdated(bug6889007.java:86)
	at java.desktop/javax.swing.plaf.basic.BasicTableHeaderUI.updateRolloverColumn(BasicTableHeaderUI.java:484)
	at java.desktop/javax.swing.plaf.basic.BasicTableHeaderUI$MouseInputHandler.mouseMoved(BasicTableHeaderUI.java:215)
	at java.desktop/java.awt.AWTEventMulticaster.mouseMoved(AWTEventMulticaster.java:337)
	at java.desktop/java.awt.Component.processMouseMotionEvent(Component.java:6665)
	at java.desktop/javax.swing.JComponent.processMouseMotionEvent(JComponent.java:3416)
	at java.desktop/java.awt.Component.processEvent(Component.java:6389)
	at java.desktop/java.awt.Container.processEvent(Container.java:2266)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4995)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2324)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4827)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4948)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4588)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4516)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2310)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2780)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4827)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:775)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:98)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:747)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:744)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)

This seems a very old, very intermittent bug - see JDK-7179842 - but the failure mode remains the same. I can see two failures like this in our CI records and the previous one was Nov 2021.",,,,,,,,,,JDK-8313751,JDK-8311618,JDK-8309347,JDK-8309345,JDK-8309426,JDK-8309451,,,,,,,,,,,,,,,,,,,,,,JDK-7179842,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2zt77:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-01-25 00:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12181
Date: 2023-01-25 08:32:33 +0000;;;","2023-03-17 15:40;vdyakov;Prasanta Sadhukhan added a comment  on Jan 25 • 
Issue seems to be very old, very intermittent bug which is not reproducible in repeated test run,
so added some stability fixes like accessing swing components in EDT, delay, frame dispose and take a screenshot during fail.
;;;","2023-04-30 21:43;dukebot;Changeset: b54c4a33
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-05-01 04:41:22 +0000
URL:       https://git.openjdk.org/jdk/commit/b54c4a33c69e16adf5b85b80b8deb4ded2ed074d
;;;","2023-07-05 04:51;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-07-05 05:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1545
Date: 2023-07-05 11:52:30 +0000;;;","2023-08-01 22:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2063
Date: 2023-08-02 05:29:25 +0000;;;","2023-08-02 20:10;andrewlu;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;",,,,,,,,,,,,,,
JCov coverage runs depend on jdk_symbols,JDK-8299705,5090812,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,shurailine,shurailine,shurailine,2023-01-05 16:15,2023-01-11 22:57,2023-10-01 09:56,2023-01-06 11:03,,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299767,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8242181,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zt4z:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-06 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/89
Date: 2023-01-06 18:02:25 +0000;;;","2023-01-06 11:03;dukebot;Changeset: 1f141bd7
Author:    Alexandre Iline <shurailine@openjdk.org>
Date:      2023-01-06 18:51:41 +0000
URL:       https://git.openjdk.org/jdk20/commit/1f141bd7a99085c5464626eb83402ffabf9d38c8
;;;",,,,,,,,,,,,,,,,,,,
Test runtime/cds/appcds/WrongClasspath.java fails after JDK-8299329,JDK-8299699,5090802,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,asmehra,dholmes,dholmes,2023-01-05 13:36,2023-01-11 23:02,2023-10-01 09:56,2023-01-06 11:58,21,,,,,,,21,hotspot,,0,tier4,,,,,,,,,,,,,,,"Test is failing in our tier 4 CI runs:

----------System.err:(15/1124)----------
java.lang.RuntimeException: FIXME: jar file not at a supported location ('/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S52813/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/5093aef5-0a20-455a-a9d3-7190e241f431/runs/746710c6-7807-4656-b6d0-cfe1ca20f5f2/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_appcds_dynamic/scratch/5/'): hello.jar
	at TestCommon.patchJarForDynamicDump(TestCommon.java:364)
	at TestCommon.createArchive(TestCommon.java:224)
	at TestCommon.createArchive(TestCommon.java:176)
	at TestCommon.dump(TestCommon.java:133)
	at TestCommon.testDump(TestCommon.java:533)
	at WrongClasspath.main(WrongClasspath.java:57)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299329,,,,,,,,,,,,,,,,,,,,,,,,,,,,21,,,,,,,,"0|i2zt2r:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-05 14:26;iklam;The failure happens when running with

make test TEST=test/hotspot/jtreg:hotspot_appcds_dynamic TEST_OPTS_JAVA_OPTIONS=-Dtest.dynamic.cds.archive=true

Suggested fix is to put the new test case in WrongClasspath.java around:

if (System.getProperty(""test.dynamic.cds.archive"") == null) {
  // JAR files in the current directory are not compatible with test.dynamic.cds.archive
  // mode.

  ...

}

;;;","2023-01-05 14:34;asmehra;Failure happens because TestCommon#patchJarForDynamicDump(String cp) expects the jar files passed in ""cp"" parameter are with absolute path. The new test case added for JDK 8299329 passed jar files using path relative to work dir.

        if (!firstJar.startsWith(expected)) {
            throw new RuntimeException(""FIXME: jar file not at a supported location ('""
                                       + expected + ""'): "" + firstJar);
        }

Another workaround could be to change the above condition to:

        if (Paths.get(firstJar).isAbsolute() && !firstJar.startsWith(expected)) {
            throw new RuntimeException(""FIXME: jar file not at a supported location ('""
                                       + expected + ""'): "" + firstJar);
        }

@Ioi Lam, does that make sense?;;;","2023-01-05 17:39;iklam;[~asmehra] I think your suggested fix is better. We should allow the JAR files in the current dire rectory (i.e., the jtreg ""scratch"" directory"") to be patched.

Instead of checking for isAbsolute(), I would restrict that to only the current directory.

The reason for the ""if (!firstJar.startsWith(expected)"" check was to prevent the test from inadvertently modifying an important system file, or one of the JAR files in jtreg. So something like ../../some/place.jar would potentially be unsafe to modify.;;;","2023-01-06 06:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11882
Date: 2023-01-06 14:25:05 +0000;;;","2023-01-06 11:58;dukebot;Changeset: d6d6eb4c
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Calvin Cheung <ccheung@openjdk.org>
Date:      2023-01-06 19:56:12 +0000
URL:       https://git.openjdk.org/jdk/commit/d6d6eb4cba3d2d85035b46d18e8817b5b2a354a2
;;;",,,,,,,,,,,,,,,,
Change to Xcode12.4+1.1 devkit for building on macOS at Oracle,JDK-8299693,5090795,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,mikael,mikael,mikael,2023-01-05 12:15,2023-06-20 05:57,2023-10-01 09:56,2023-01-05 14:41,21,,,,,,,21,infrastructure,,0,hgupdate-sync,jdk11u-na,jdk17u-na,,,,,,,,,,,,,Bump the devkit version used when building on macOS at Oracle to work around an issue when building on Ventura.,,,,,,,,,,JDK-8299867,JDK-8300398,JDK-8300401,JDK-8300136,JDK-8300335,,,,,,,,,,,,,,,,,,,,,,,JDK-8264623,,,,,,,JDK-8306898,JDK-8304665,JDK-8295890,JDK-8299918,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2zt17:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-05 13:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11869
Date: 2023-01-05 20:17:52 +0000;;;","2023-01-05 14:41;dukebot;Changeset: 4b6809b9
Author:    Mikael Vidstedt <mikael@openjdk.org>
Date:      2023-01-05 22:39:44 +0000
URL:       https://git.openjdk.org/jdk/commit/4b6809b94a09871712df7a1c51b7192adbe2093b
;;;","2023-01-09 14:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/91
Date: 2023-01-09 22:26:20 +0000;;;","2023-01-11 13:52;dukebot;Changeset: 5826a077
Author:    Mikael Vidstedt <mikael@openjdk.org>
Date:      2023-01-10 04:39:53 +0000
URL:       https://git.openjdk.org/jdk/commit/5826a077f9415cab88f90553fbfdeaabb439a53d
;;;","2023-01-17 02:00;goetz;[11u-na, 17u-na]
jib not used in OpenJDK;;;",,,,,,,,,,,,,,,,
"Make use of JLine for Console as ""opt-in""",JDK-8299689,5090790,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,naoto,naoto,2023-01-05 11:02,2023-05-22 13:21,2023-10-01 09:56,2023-01-09 10:24,20,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,The enhancement introduced in JDK-8295803 uses the `JLine` library (`jdk.internal.le` module) as the `java.io.Console` implementation by default. This resulted in the performance regression reported in JDK-8299685. Also introduces an unnecessary native process forking on macOS/Linux platforms. This should be avoided by default. Making it optional opt-in style would fix the issue.,,,,,,,,,,JDK-8299875,,,,,,,,,,,,,,,,,,,,JDK-8299690,,,JDK-8299137,,,,JDK-8299685,JDK-8308591,JDK-8295803,,,,,JDK-8299687,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zt03:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-01-06 10:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/88
Date: 2023-01-06 17:57:47 +0000;;;","2023-01-09 10:24;dukebot;Changeset: d49851a8
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-01-09 18:23:42 +0000
URL:       https://git.openjdk.org/jdk20/commit/d49851a8b8e80b6ffa53c2bb4f5b2897735d471f
;;;",,,,,,,,,,,,,,,,,,,
(bf) JNI direct buffer functions with large capacity behave unexpectedly,JDK-8299684,5090732,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,bpb,webbuggrp,webbuggrp,2023-01-04 19:00,2023-07-21 07:35,2023-10-01 09:56,2023-01-23 09:16,1.4.0,11,17,19,20,8,,21,core-libs,,0,additional-information-received,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Tested with JDK 17 and 19 on macOS and Linux.

A DESCRIPTION OF THE PROBLEM :
JNI function NewDirectByteBuffer accepts a jlong argument for the capacity of the returned buffer.
However, If I pass a value larger than Integer.MAX_VALUE, it behaves unexpectedly, and the behavior is undocumented.
If I pass a value that will cast to a negative int, it will throw an IllegalArgumentException.
If I pass a value that will cast to a positive int, Both Java method ByteBuffer.capacity() and JNI function GetDirectBufferCapacity return a value that is not equal to the correct capacity.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Set ByteBufferTest.SIZE to 3_000_000_000L, compile and run the code; then set ByteBufferTest.SIZE to 5_000_000_000L, compile and run the code.

ACTUAL -
If SIZE = 3_000_000_000L, it throws an IllegalArgumentException with the following stack trace:
Exception in thread ""main"" java.lang.IllegalArgumentException: capacity < 0: (-1294967296 < 0)
	at java.base/java.nio.Buffer.createCapacityException(Buffer.java:282)
	at java.base/java.nio.Buffer.<init>(Buffer.java:245)
	at java.base/java.nio.ByteBuffer.<init>(ByteBuffer.java:298)
	at java.base/java.nio.ByteBuffer.<init>(ByteBuffer.java:306)
	at java.base/java.nio.MappedByteBuffer.<init>(MappedByteBuffer.java:113)
	at java.base/java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:177)
	at ByteBufferTest.allocBigBuffer(Native Method)
	at ByteBufferTest.main(ByteBufferTest.java:11)

If SIZE = 5_000_000_000L, it prints 705032704 twice, which is not expected.

---------- BEGIN SOURCE ----------
// --- ByteBufferTest.java ---
import java.nio.ByteBuffer;

public class ByteBufferTest {
    static {
        System.loadLibrary(""bytebuffertest"");
    }

    private static final long SIZE = 3_000_000_000L;
    //private static final long SIZE = 5_000_000_000L;

    public static void main(String[] args) {
        var buf = allocBigBuffer(SIZE);
        System.out.println(buf.capacity());
        System.out.println(getLongCapacity(buf));
    }

    // See ByteBufferTest.c for implementations.
    private static native ByteBuffer allocBigBuffer(long size);
    private static native long getLongCapacity(ByteBuffer buf);
}

// --- ByteBufferTest.c ---
#include ""ByteBufferTest.h""
#include <stdlib.h>

// private static native ByteBuffer allocBigBuffer(long size)
JNIEXPORT jobject JNICALL Java_ByteBufferTest_allocBigBuffer(JNIEnv *env, jclass cls, jlong size)
{
    return (*env)->NewDirectByteBuffer(env, malloc(size), size);
}

// private static native long getLongCapacity(ByteBuffer buf)
JNIEXPORT jlong JNICALL Java_ByteBufferTest_getLongCapacity(JNIEnv *env, jclass cls, jobject buf)
{
    return (*env)->GetDirectBufferCapacity(env, buf);
}

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299759,,,,,,,JDK-8303073,,,,,,,JDK-8301277,,,,,"2023-01-05 09:16;tongwan;ByteBufferTest.c;https://bugs.openjdk.org/secure/attachment/102211/ByteBufferTest.c","2023-01-05 09:16;tongwan;ByteBufferTest.h;https://bugs.openjdk.org/secure/attachment/102212/ByteBufferTest.h","2023-01-05 09:16;tongwan;ByteBufferTest.java;https://bugs.openjdk.org/secure/attachment/102213/ByteBufferTest.java",,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zsn7:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,Verified,,"2023-01-04 23:24;alanb;It looks like jni_NewDirectByteBuffer casts/truncates the capacity to a jint before the upcall. It could be checked there, or we could change the private constructor to allow the parameter be a long and do the validation in Java.;;;","2023-01-05 09:05;tongwan;Got Exception in thread ""main"" java.lang.UnsatisfiedLinkError: no bytebuffertest.so in java.library.path.  Requested more details from the submitter.;;;","2023-01-05 13:04;dholmes;If the Java code only takes an int capacity (why?) then we need to reject anything bigger than Integer.MAX_VALUE and throw OOME. I guess I'd rather see the Java code changed to take a long and have it deal with any inherent limitations.;;;","2023-01-05 14:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11873
Date: 2023-01-05 22:25:19 +0000;;;","2023-01-05 22:10;tongwan;Additional information from the submitter:
If you are using Linux, try the following commands:

jdk_install_path=   # Set this variable to the installation path of your JDK.
javac -h . ByteBufferTest.java
gcc ByteBufferTest.c -I$jdk_install_path/include -I$jdk_install_path/include/linux -shared -o libbytebuffertest.so
java -Djava.library.path=. ByteBufferTest

If you are using Fedora or RHEL-based Linux (RHEL, CentOS, Rocky, etc.), and OpenJDK 17 was installed by dnf/yum, set jdk_install_path to /usr/lib/jvm/java-17-openjdk

If you are using Debian-based Linux (Debian, Ubuntu, Kali, etc.), and OpenJDK 17 was installed by apt, set jdk_install_path to /usr/lib/jvm/java-17-openjdk-amd64

If you are using macOS, set jdk_install_path to /Library/Java/JavaVirtualMachines/openjdk.jdk/Contents/Home and replace the third line (gcc …) with:
clang ByteBufferTest.c -I$jdk_install_path/include -I$jdk_install_path/openjdk.jdk/Contents/Home/include/darwin -shared -o libbytebuffertest.dylib

If gcc or clang cannot find jni.h or jni_md.h, set jdk_install_path to the correct installation path.
;;;","2023-01-05 22:29;tongwan;The observations on Ubuntu:
JDK 11: Failed, IllegalArgumentException thrown.
JDK 17: Failed.
JDK 19: Failed.
JDK 20ea+9: Failed.;;;","2023-01-23 09:16;dukebot;Changeset: a56598f5
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-01-23 17:12:49 +0000
URL:       https://git.openjdk.org/jdk/commit/a56598f5a534cc9223367e7faa8433ea38661db9
;;;",,,,,,,,,,,,,,
[S390X] Problems with -XX:+VerifyStack,JDK-8299683,5090781,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsteele,tsteele,tsteele,2023-01-05 08:33,2023-02-13 11:05,2023-10-01 09:56,2023-02-06 05:50,21,,,,,,,21,hotspot,,0,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,,"Created on behalf of Sidraya Jayagond.

When running the following tests:
- compiler/interpreter/TestVerifyStackAfterDeopt.java
- compiler/interpreter/VerifyStackWithUnreachableBlock.java

The VM crashes with ""guarantee(last != NULL) failed: last may not be null"" when running with -XX:+VerifyStack (debug build only).

The failure is similar to the PPC bug JDK-8288105.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288105,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,linux,,,,,,"0|i2zsy3:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-05 15:19;dlong;ILW = assert in debug build; with -XX:+VerifyStack only; no workaround = MMH = P3;;;","2023-01-05 22:40;thartmann;Should this go to hotspot/runtime like JDK-8288105?;;;","2023-01-26 15:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12161
Date: 2023-01-24 06:40:37 +0000;;;","2023-02-06 05:50;dukebot;Changeset: 9c80b8ad
Author:    Sidraya <sidraya.jayagond@ibm.com>
Committer: Lutz Schmidt <lucy@openjdk.org>
Date:      2023-02-06 13:48:26 +0000
URL:       https://git.openjdk.org/jdk/commit/9c80b8ad99910e250447e39d8391d1dbd015add0
;;;",,,,,,,,,,,,,,,,,
Formatter.format might take a long time to format an integer or floating-point,JDK-8299677,5090723,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rgiulietti,webbuggrp,webbuggrp,2023-01-04 15:12,2023-09-07 11:19,2023-10-01 09:56,2023-01-12 11:24,11,17,19,20,8,,,21,core-libs,,0,amazon-interest,dcsaw,jdk17u-fix-request,jdk17u-fix-yes,reproducer-yes,webbug,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Any OS (tested on Ubuntu, and MacOS) and also tested on JDK8 and JDK17

A DESCRIPTION OF THE PROBLEM :
String.format takes tens of minutes to format a floating point if format specifies that it should be prepended with large number of 0. e.g. String.format(""%09000000d"", 2);

 

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
The code below took 1693 seconds  (28 minutes) to return a string with 9 millions of chars. Same happens for 'f' format specifier. Time spent in format seems to increase quadric with the width of the generated string. 

String s = String.format(""%09000000d"", 2);

However, the code below, that use 'x' as specifier returns way faster

String s = String.format(""%09000000x"", 2);


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
I expect the String.format to take similar amount of time regardless of formatter. 


ACTUAL -
Returns correct result but very slow for 'd' and 'f' format specifier. Works as expected on for 'x' format specifier

---------- BEGIN SOURCE ----------
public class SystemFormat {
    public static void main(String[] args) {
        long t1 = System.currentTimeMillis();
        String sd = String.format(""%0500000d"", 2);
        long t2 = System.currentTimeMillis();
        String sx = String.format(""%0500000x"", 2);
        long t3 = System.currentTimeMillis();
        long diff1 = t2 - t1;
        long diff2 = t3 - t2;
        System.out.format(""diff1 = %d%n"", diff1);
        System.out.format(""diff2 = %d%n"", diff2);
    }
}

// outputs
// diff1 = 5927
// diff2 = 10
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
do not use String.format with larger specifier and prepend it with '0'. 

FREQUENCY : always


",,,,,,,,,,JDK-8315858,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313307,,,,,,,,,,,,"2023-01-05 07:18;tongwan;Main.java;https://bugs.openjdk.org/secure/attachment/102210/Main.java",,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zsl7:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@38ded199,,,,,,,Verified,,"2023-01-05 07:23;tongwan;The observations on Windows 10:
JDK 8: Failed, very slow for 'd' format
JDK 11: Failed.
JDK 17: Failed.
JDK 19: Failed.
JDK 20ea+23: Failed.
;;;","2023-01-09 09:24;rgiulietti;I can confirm the observations of the reporter.;;;","2023-01-11 02:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11939
Date: 2023-01-11 10:47:03 +0000;;;","2023-01-12 11:24;dukebot;Changeset: 33412c10
Author:    Raffaello Giulietti <rgiulietti@openjdk.org>
Date:      2023-01-12 19:21:09 +0000
URL:       https://git.openjdk.org/jdk/commit/33412c102ce799ff2de3512df77e6e07d76acd36
;;;","2023-01-17 09:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1077
Date: 2023-01-17 17:11:04 +0000;;;","2023-01-17 11:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1667
Date: 2023-01-17 18:17:08 +0000;;;","2023-09-06 07:54;phh;Fix Request (17u).

Simple almost clean backport of a potential DOS attack vector fix, has been running in production at Amazon for over a year, low risk.
;;;","2023-09-06 08:32;phh;Fix Request (11u).

Clean backport from 17u of a potential DOS attack vector fix.;;;",,,,,,,,,,,,,
/proc/self/stat parsing in libmanagement broken by execname with spaces,JDK-8299665,5090761,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kevinw,kevinw,kevinw,2023-01-05 01:52,2023-05-31 23:27,2023-10-01 09:56,2023-05-26 03:53,,,,,,,,21,core-svc,,0,,,,,,,,,,,,,,,,"Parsing ""/proc/self/stat"" by simply breaking the line on spaces will fall down if the executable name contains spaces.

This is a problem in src/jdk.management/unix/native/libmanagement_ext/OperatingSystemImpl.c where the committed virtual memory size (shown by OperatingSystem MXBean) is extracted.  An exec name with a space means we return the wrong value.

UnixOperatingSystem.c / vread_statdata() does better, it uses strrchr() to find the last occurring ')'.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zstn:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-05-24 04:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14107
Date: 2023-05-23 20:54:42 +0000;;;","2023-05-26 03:53;dukebot;Changeset: 17ef8a44
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-05-26 10:51:39 +0000
URL:       https://git.openjdk.org/jdk/commit/17ef8a44a90a74724508a91abda3686e5123d1cd
;;;",,,,,,,,,,,,,,,,,,,
Fix the test case tools/javac/TryWithResources/WeirdTwr.java broken after 8299656,JDK-8299663,5090759,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rgangadhar,rgangadhar,rgangadhar,2023-01-05 01:40,2023-02-26 23:44,2023-10-01 09:56,2023-01-05 02:32,11.0.19-oracle,,,,,,,11.0.19-oracle,tools,,0,jdk11u-na,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zst7:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2023-02-26 23:44;goetz;[11u-na] 
Backport of 8299656 to OpenJDK 11 did not break WeirdTwr.;;;",,,,,,,,,,,,,,,,,,,,
C1 compilation crashes in LinearScan::resolve_exception_edge,JDK-8299658,5090548,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mdoerr,webbuggrp,webbuggrp,2023-01-02 06:31,2023-09-18 23:09,2023-10-01 09:56,2023-08-28 03:15,11,17,21,22,8u172,,,22,hotspot,,0,additional-information-not-received,amazon-interest,c1,dcsswa,jdk11u-critical-request,jdk11u-critical-yes,jdk17u-critical-request,jdk17u-critical-yes,jdk21u-fix-request,jdk21u-fix-SQE-ok,jdk21u-fix-yes,noreg-hard,oracle-triage-22,reproducer-yes,webbug,"# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f604221467f, pid=596545, tid=596560
#
# JRE version: Java(TM) SE Runtime Environment (22.0+8) (fastdebug build 22-ea+8-534)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+8-534, mixed mode, sharing, tiered, jvmci, jvmci compiler, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7e867f]  LinearScan::resolve_exception_edge(XHandler*, int, int, Phi*, MoveResolver&) [clone .part.0]+0x6f

Current CompileTask:
C1:   1395  137   !b  3       AbstractDecoratingResourcePoolKt::readHttpBody (888 bytes)

Stack: [0x00007f6018d6b000,0x00007f6018e6c000],  sp=0x00007f6018e695c0,  free space=1017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x7e867f]  LinearScan::resolve_exception_edge(XHandler*, int, int, Phi*, MoveResolver&) [clone .part.0]+0x6f
V  [libjvm.so+0x7e948c]  LinearScan::resolve_exception_edge(XHandler*, int, MoveResolver&)+0x47c
V  [libjvm.so+0x7eb30e]  LinearScan::resolve_exception_handlers()+0x29e
V  [libjvm.so+0x7ec48e]  LinearScan::do_linear_scan()+0x31e
V  [libjvm.so+0x727fc6]  Compilation::emit_lir()+0x966
V  [libjvm.so+0x72a407]  Compilation::compile_java_method()+0x247
V  [libjvm.so+0x72adbb]  Compilation::compile_method()+0x14b
V  [libjvm.so+0x72b564]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x2b4
V  [libjvm.so+0x72cfde]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xde
V  [libjvm.so+0x9f9530]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa00
V  [libjvm.so+0x9fa3b8]  CompileBroker::compiler_thread_loop()+0x618
V  [libjvm.so+0xeb457c]  JavaThread::thread_main_inner()+0xcc
V  [libjvm.so+0x17952da]  Thread::call_run()+0xba
V  [libjvm.so+0x1495dd1]  thread_native_entry(Thread*)+0x121",,,,,,,,,,JDK-8315659,JDK-8315837,JDK-8315859,JDK-8316248,JDK-8316405,JDK-8316485,JDK-8315707,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8214352,JDK-8151818,,,,"2023-08-15 08:35;thartmann;AbstractDecoratingResourcePoolKt.class;https://bugs.openjdk.org/secure/attachment/105109/AbstractDecoratingResourcePoolKt.class","2023-08-15 08:42;thartmann;replay_pid434227.log;https://bugs.openjdk.org/secure/attachment/105111/replay_pid434227.log",,,,,,,,x86_64,,,,,,,,,,,,,,,"0|i2zrib:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-05 00:35;sswsharm;additional information requested:
================================
To understand the issue better, could you please provide a standalone test case or steps to reproduce this issue?
Also, this crash is reported in JDK 8u172 which is very old, it is recommended that you test this issue in the latest JDK and share results.
https://www.oracle.com/java/technologies/downloads/#java8
================================;;;","2023-01-16 04:32;sswsharm;There is no response from submitter, closing this as incomplete. This can be reopened if we receive any information in future.;;;","2023-08-15 08:35;thartmann;To reproduce run the following command with attached AbstractDecoratingResourcePoolKt.class and https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-stdlib/1.9.0 on the classpath:
java -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler -XX:+ReplayIgnoreInitErrors -XX:+ReplayCompiles -XX:ReplayDataFile=replay_pid434227.log -cp kotlin-stdlib-1.9.0.jar:.;;;","2023-08-15 08:43;thartmann;We crash because operand 6 of phi a678 is null but a678 is not marked as illegal:

__bci__use__tid____instr____________________________________
. 852  0     1     B1 (EbV) [852, 1] -> B144 B143 dom B5 pred: B47 B137 B46 B43
Locals:
 0  a670 [ a640 a640 a640 a640 a657 a657 a685 a685 a685 a685 a685 a685 a685 a685] 
 1  a671 [ a49 a49 a49 a49 a658 a658 a686 a686 a686 a686 a686 a686 a686 a686] 
 2  a672 [ a50 a50 a50 a50 a659 a659 a687 a687 a687 a687 a687 a687 a687 a687] 
 4  a673 [ a638 a638 a638 a638 a660 a660 a688 a688 a688 a688 a688 a688 a688 a688] 
 6  i674 [ i52 i52 i52 i52 i661 i661 i689 i689 i689 i689 i689 i689 i689 i689] 
 7  a675 [ a636 a636 a636 a636 a662 a662 a690 a690 a690 a690 a690 a690 a690 a690] 
 8  a676 [ a634 a634 a634 a634 a663 a663 a691 a691 a691 a691 a691 a691 a691 a691] 
 9  i677 [ i52 i52 i52 i52 i664 i664 i692 i692 i692 i692 i692 i692 i692 i692] 
10  a678 [ a632 a632 a632 a632 a665 a665 null a697 a697 a697 a697 a697 a697 a697] 
14  a679 [ a70 a70 a70 a70 a666 a666 a694 a694 a694 a694 a694 a694 a694 a694] 
15  a680 [ a69 a69 a69 a69 a667 a667 a695 a695 a695 a695 a695 a695 a695 a695] 
16  a681 [ a76 a76 a76 a76 a668 a668 a696 a696 a696 a696 a696 a696 a696 a696] 

Earlier state:

B1 (EbV) [852, 1] -> B144 B143 dom B5 pred: B47 B137 B46 B43
Locals:
 0  a670 [ a640 a640 a640 a640 a657 a657 a685 a685 a685 a685 a685 a685 a685 a685] 
 1  a671 [ a49 a49 a49 a49 a658 a658 a686 a686 a686 a686 a686 a686 a686 a686] 
 2  a672 [ a50 a50 a50 a50 a659 a659 a687 a687 a687 a687 a687 a687 a687 a687] 
 4  a673 [ a638 a638 a638 a638 a660 a660 a688 a688 a688 a688 a688 a688 a688 a688] 
 6  i674 [ i52 i52 i52 i52 i661 i661 i689 i689 i689 i689 i689 i689 i689 i689] 
 7  a675 [ a636 a636 a636 a636 a662 a662 a690 a690 a690 a690 a690 a690 a690 a690] 
 8  a676 [ a634 a634 a634 a634 a663 a663 a691 a691 a691 a691 a691 a691 a691 a691] 
 9  i677 [ i52 i52 i52 i52 i664 i664 i692 i692 i692 i692 i692 i692 i692 i692] 
10  a678 [ a632 a632 a632 a632 a665 a665  693 a697 a697 a697 a697 a697 a697 a697] 
14  a679 [ a70 a70 a70 a70 a666 a666 a694 a694 a694 a694 a694 a694 a694 a694] 
15  a680 [ a69 a69 a69 a69 a667 a667 a695 a695 a695 a695 a695 a695 a695 a695] 
16  a681 [ a76 a76 a76 a76 a668 a668 a696 a696 a696 a696 a696 a696 a696 a696] 

'LIRGenerator::state_for then' calls 'invalidate_local' because local 10 has value->type()->is_illegal() set. This comes from the code added by JDK-8214352:
https://hg.openjdk.org/jdk/jdk/rev/b3830528df29#l1.17

I think the original report with JDK 8u172 is actually a duplicate of JDK-8151818 which was fixed in JDK 9 and the new report is a regression from JDK-8214352.

ILW = Crash during C1 compilation, rare but reproducible with Kotlin and JVMTI (JvmtiExport can_access_local_variables 1), no workaround but disable compilation of affected method = HLM = P3

[~mdoerr], could you please have a look?;;;","2023-08-17 13:19;mdoerr;Thanks for analyzing it! Ideally, the phi should get invalidated (make_illegal). Seems like this does not work by the normal way because exception edges are treated differently. A quick workaround would be ""if (from_value == nullptr) return;"". We already skip unused phi functions, too.;;;","2023-08-18 00:26;thartmann;Right, I thought that maybe there's a way to propagate the ""illegal"" state from the a693 phi to the a678 phi but couldn't figure it out from skimming through the code.

Do you have time to take this bug or should we assign to someone else? Would also be good to have a regression test for this.;;;","2023-08-18 13:20;mdoerr;I've published a possible solution: https://github.com/openjdk/jdk/pull/15348
If somebody finds a better solution, I'll be glad to close it. A regression test would be really good, but I don't think I can get that done within a reasonable amount of time. I'll appreciate any help in this regard.;;;","2023-08-18 13:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15348
Date: 2023-08-18 20:17:52 +0000;;;","2023-08-28 03:15;dukebot;Changeset: cf2d33ca
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2023-08-28 10:14:19 +0000
URL:       https://git.openjdk.org/jdk/commit/cf2d33ca2ee08c61596ab10b7602500a6931fa31
;;;","2023-08-28 07:52;mdoerr;We are shipping the fix with the next EA build. Would be great if it could be verified with the original workload. Is there a need for a backport in any LTS OpenJDK release for that?
[~thartmann] Backporting doesn't really have any risk. We only handle a case in which the VM would crash without the fix. Do you think I should start backporting it right now?;;;","2023-08-29 23:01;shade;I think it makes sense to backport. As you said, without a fix we would crash the compiler, since the `nullptr` `from_value` that new code checks would be dereferenced in the old code very soon.;;;","2023-08-31 12:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/119
Date: 2023-08-31 19:15:15 +0000;;;","2023-08-31 12:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1716
Date: 2023-08-31 19:19:35 +0000;;;","2023-08-31 12:26;mdoerr;Fix Request (21u, 17u):
21 and 17 are affected by this bug. The VM may crash without the fix. Applies cleanly. Risk: Very low because we only catch ""from_value == nullptr"" and avoid an immediate crash by nullptr dereferencing.;;;","2023-09-01 00:13;thartmann;> We are shipping the fix with the next EA build. Would be great if it could be verified with the original workload. Is there a need for a backport in any LTS OpenJDK release for that?

[~mdoerr], the original reporter of this bug is unresponsive but maybe the submitter of the new report (https://github.com/oracle/graal/issues/6994) could verify. [~aoubidar], could you reach out to him?

> [~thartmann] Backporting doesn't really have any risk. We only handle a case in which the VM would crash without the fix. Do you think I should start backporting it right now?

Sounds reasonable to me.;;;","2023-09-01 00:49;mdoerr;Thanks for the feedback! I've started backporting.

 [~aoubidar] It would really be great if you could verify the fix with the original workload. It's resolved in JDK22 with build b13.
;;;","2023-09-01 02:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/378
Date: 2023-09-01 09:16:29 +0000;;;","2023-09-04 01:57;aoubidar;[~thartmann] Sure, could you please share with me a link to the dev build of OpenJDK containing the fix? I'll make sure to share it with the user.;;;","2023-09-04 02:03;thartmann;[~aoubidar] Thanks! The fix is in JDK 22 b13. Builds can be found here: https://jdk.java.net/22/;;;","2023-09-05 09:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/82
Date: 2023-09-05 16:42:05 +0000;;;","2023-09-06 02:37;mdoerr;Fix Request (11u):
Same as for 21u and 17u except that it requires a trivial adaptation (reviewed in PR).;;;"
sun/tools/jhsdb/SAGetoptTest.java fails after 8299470,JDK-8299657,5090754,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-01-05 00:29,2023-01-18 02:50,2023-10-01 09:56,2023-01-05 01:33,21,,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,"Looks like the exception/error message changed with 8299470 so we have to adjust the test.

Unexpected error 'Successor argument without leading - is expected for 'd' but we got '-c''
java.lang.RuntimeException: Bad option test 4 failed
	at SAGetoptTest.badOptionsTest(SAGetoptTest.java:124)
	at SAGetoptTest.main(SAGetoptTest.java:149)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
",,,,,,,,,,JDK-8300445,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299700,,,,,,,,,JDK-8299470,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zss3:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2023-01-05 01:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11860
Date: 2023-01-05 08:55:32 +0000;;;","2023-01-05 01:33;dukebot;Changeset: 1ca31d34
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-01-05 09:31:38 +0000
URL:       https://git.openjdk.org/jdk/commit/1ca31d34fcba5e9861104402466b5dd4cccdbafd
;;;","2023-01-16 00:56;mbaesken;jdk17 backport request
I would like to have the change in jdk17 as well (needed as a follow up of backport of JDK-8299470). The backport is low risk and clean.;;;","2023-01-16 01:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1069
Date: 2023-01-16 08:54:50 +0000;;;",,,,,,,,,,,,,,,,,
CurrencySymbols.properties is missing the copyright notice,JDK-8299617,5090710,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,jlu,jlu,2023-01-04 09:17,2023-07-25 23:59,2023-10-01 09:56,2023-01-06 18:22,,,,,,,,21,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,,,Copyright header missing from file. ,,,,,,,,,,JDK-8312566,JDK-8312734,JDK-8313152,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zsib:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,,,"2023-01-05 14:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11854
Date: 2023-01-04 21:48:26 +0000;;;","2023-01-06 18:22;dukebot;Changeset: d5b80abc
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2023-01-07 02:20:12 +0000
URL:       https://git.openjdk.org/jdk/commit/d5b80abcbfff57c7728d3e42a696a762f08bc7ad
;;;","2023-07-24 04:18;goetz;Fix request [17u]

I backport this for parity with 17.0.9-oracle.
No risk, only a comment change.
Clean backport.
Testing pointless.;;;","2023-07-24 04:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1621
Date: 2023-07-24 11:21:19 +0000;;;",,,,,,,,,,,,,,,,,
[11u] Bootcycle build fails after JDK-8257679 backport,JDK-8299616,5090709,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,shade,shade,shade,2023-01-04 09:06,2023-02-08 03:38,2023-10-01 09:56,2023-01-04 13:59,11.0.18,,,,,,,11.0.19,infrastructure,,0,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,,,,,,,,,,,,,"Currently, JDK 11u `make bootcycle-images` fails with:

```
 bootcycle-spec.gmk:32: *** non-numeric first argument to `word' function: ''.  Stop.
```

The apparent reason is JDK-8257679 that did the following change:
 https://github.com/openjdk/jdk11u-dev/commit/40f4fc2da8532252a1660c7f082eb19046f4bc70#diff-935527b393cb4625a8874febf5fe39d43479a2228ef437f4e104ba3001e1e30fL31-L40

Note that the left-over hunk uses `JAVA_EXEC_POS`, which is defined in the hunk that was removed. ",,,,,,,,,,JDK-8300481,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8257679,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zsi3:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2023-01-04 09:10;shade;Fix Request (11u)

Fixes the bootcycle build. See PR for testing details.;;;","2023-01-04 09:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1639
Date: 2023-01-04 17:09:57 +0000;;;","2023-01-04 13:59;dukebot;Changeset: 60732964
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-01-04 21:57:28 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/60732964fda512ef03d0107c1e8226aaa123ed7e
;;;","2023-01-18 04:26;dukebot;Changeset: a288e74b
Author:    Aleksey Shipilev <shade@openjdk.org>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-01-04 21:57:28 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/a288e74b70674db3862e82d6ae9d16c006af3f35
;;;","2023-02-08 03:37;dukebot;Changeset: 60732964
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-01-04 21:57:28 +0000
URL:       https://git.openjdk.org/jdk11u/commit/60732964fda512ef03d0107c1e8226aaa123ed7e
;;;",,,,,,,,,,,,,,,,
Shenandoah: STW mark should keep nmethod/oops referenced from stack chunk alive,JDK-8299614,5090707,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,shade,ngasson,ngasson,2023-01-04 08:11,2023-09-19 00:17,2023-10-01 09:56,2023-09-12 23:05,21,22,,,,,,22,hotspot,,0,aarch64-related,amazon-interest,gc-shenandoah,jdk21u-fix-request,jdk21u-fix-yes,loom,,,,,,,,,,"#
#  Internal Error (/home/nicgas01/jdk/src/hotspot/share/code/codeCache.inline.hpp:49), pid=674258, tid=674369
#  assert(cb != __null) failed: must be
#
# JRE version: OpenJDK Runtime Environment (21.0) (slowdebug build 21-internal-adhoc.nicgas01.jdk)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 21-internal-adhoc.nicgas01.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x130a680]  CodeCache::find_blob_and_oopmap(void*, int&)+0x11c
#

(Full log file attached.)

We've seen this failure intermittently on AArch64 when running the jtreg tests with Shenandoah but it's easy to reproduce if you run the Skynet test directly with a small heap size. E.g.

$ java -Xmx256m -XX:+UseShenandoahGC  --enable-preview Skynet 100

This seems to be related to method unloading since if you run with -Xlog:codecache=debug there's a log line like the following corresponding to the PC value which asserts in CodeCache::find_blob_and_oopmap() moments later:

[20.239s][debug][codecache] *flushing  nmethod 591/0x0000ffffe1138990. Live blobs:1510/Free CodeCache:117454Kb 

If I run it with -XX:-MethodFlushing I don't see the assertion failure.
",,,,,,,,,,JDK-8316495,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-04 08:10;ngasson;hs_err_pid674258.log;https://bugs.openjdk.org/secure/attachment/102201/hs_err_pid674258.log",,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2zshn:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-09-09 19:11;serb;I can reproduce the crash of this test, but in a different place:
  StackChunkFrameStream<(ChunkFrames)1>::handle_deopted() const+0x7a;;;","2023-09-11 04:30;shade;Easily reproducible on current mainline with:

% macosx-aarch64-server-fastdebug/images/jdk/bin/java -Xmx256m -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive -Xlog:gc -Xlog:gc+start Skynet.java 100

[0.002s][info][gc] Min heap equals to max heap, disabling ShenandoahUncommit
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahPacing
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahLoadRefBarrier
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahSATBBarrier
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahCASBarrier
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahCloneBarrier
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahNMethodBarrier
[0.010s][info][gc] Heuristics ergonomically sets -XX:-ShenandoahStackWatermarkBarrier
[0.010s][info][gc] Using Shenandoah
[1.330s][info][gc] Failed to allocate TLAB, 256K
[1.330s][info][gc] Cancelling GC: Allocation Failure
[1.330s][info][gc] Trigger: Handle Allocation Failure
[1.331s][info][gc,start] GC(0) Pause Degenerated GC (Outside of Cycle)
[thread 27139 also had an error]#
[thread 33027 also had an error]
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/Users/shipilev/Work/shipilev-jdk/src/hotspot/share/code/codeCache.inline.hpp:49), pid=39848, tid=15107
#  assert(cb != nullptr) failed: must be
#
# JRE version: OpenJDK Runtime Environment (22.0) (fastdebug build 22-internal-adhoc.shipilev.shipilev-jdk)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 22-internal-adhoc.shipilev.shipilev-jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, bsd-aarch64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /Users/shipilev/Work/shipilev-jdk/test/jdk/java/lang/Thread/virtual/stress/hs_err_pid39848.log
;;;","2023-09-11 05:11;shade;I think there is an interaction with JDK-8290025. If I pass -XX:-ClassUnloading, the reproducer starts to pass. This patch also makes it pass (although it is probably too pessimistic):

```
diff --git a/src/hotspot/share/gc/shenandoah/shenandoahRootProcessor.inline.hpp b/src/hotspot/share/gc/shenandoah/shenandoahRootProcessor.inline.hpp
index 8bbc742a556..907066d5413 100644
--- a/src/hotspot/share/gc/shenandoah/shenandoahRootProcessor.inline.hpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahRootProcessor.inline.hpp
@@ -158,6 +158,7 @@ void ShenandoahSTWRootScanner::roots_do(T* oops, uint worker_id) {
 
   if (_unload_classes) {
     _thread_roots.oops_do(oops, &blobs_cl, worker_id);
+    _code_roots.code_blobs_do(&blobs_cl, worker_id);
     _cld_roots.always_strong_cld_do(&clds, worker_id);
   } else {
     _thread_roots.oops_do(oops, nullptr, worker_id);
```;;;","2023-09-11 08:58;shade;I think I understand. When doing marking, we need to mark nmethod oops in stackChunks. This happens via extension in OopClosures. In Shenandoah, the salient part is ShenandoahMarkRefsSuperClosure::do_nmethod, that calls into nmethod barriers. But, nmethod barriers only act when armed. So concurrent mark arms the nmethod barriers at very beginning. But STW mark (degenerated/full GC) does not! So if we have oops referenced only from the stackChunk-reachable nmethod, we miss them during mark.

Then class unloading comes in and discovers an nmethod with ""dead"" oop and forces its unloading. Then GC code comes in and iterates over all objects, which includes the stackChunk stack walking, which PC references the nmethod that is now unloaded. This we see as the failing assert while looking up CodeBlob from PC.

It means this is a Shenandoah+Loom specific bug.

This patch seems to fix the reproducer:

```
diff --git a/src/hotspot/share/gc/shenandoah/shenandoahSTWMark.cpp b/src/hotspot/share/gc/shenandoah/shenandoahSTWMark.cpp
index eaf5b8f27ad..1c12a6fc67e 100644
--- a/src/hotspot/share/gc/shenandoah/shenandoahSTWMark.cpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahSTWMark.cpp
@@ -89,6 +89,9 @@ ShenandoahSTWMark::ShenandoahSTWMark(bool full_gc) :
 }
 
 void ShenandoahSTWMark::mark() {
+  // Arm all nmethods, so we visit nmethod oops
+  ShenandoahCodeRoots::arm_nmethods();
+
   // Weak reference processing
   ShenandoahHeap* const heap = ShenandoahHeap::heap();
   ShenandoahReferenceProcessor* rp = heap->ref_processor();
```;;;","2023-09-11 11:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15669
Date: 2023-09-11 18:21:28 +0000;;;","2023-09-12 23:05;dukebot;Changeset: ece9bdfc
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-09-13 06:04:10 +0000
URL:       https://git.openjdk.org/jdk/commit/ece9bdfc838a5c419c789319ff794f1ae29b0256
;;;","2023-09-15 01:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk21u/pull/163
Date: 2023-09-15 08:13:31 +0000;;;","2023-09-15 01:20;roboduke;[jdk21u-fix-request] Approval Request from Aleksey Shipilëv
;;;",,,,,,,,,,,,,
[17u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 17.0.7,JDK-8299597,5090687,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-01-04 06:04,2023-07-05 00:00,2023-10-01 09:56,2023-04-18 14:42,17.0.7,,,,,,,17.0.7,infrastructure,,0,,,,,,,,,,,,,,,,"As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.",,,,,,,,,,JDK-8306537,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zsd7:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2023-04-18 14:42;dukebot;Changeset: 22cdf79d
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-04-12 22:11:03 +0000
URL:       https://git.openjdk.org/jdk17u/commit/22cdf79dce8b2ec7c68e3ba71550d70e4eeb2c48
;;;",,,,,,,,,,,,,,,,,,,,
[11u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 11.0.19,JDK-8299596,5090686,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2023-01-04 06:01,2023-07-05 00:00,2023-10-01 09:56,2023-04-18 14:56,11.0.19,,,,,,,11.0.19,infrastructure,,0,,,,,,,,,,,,,,,,"As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.",,,,,,,,,,JDK-8306558,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zscz:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2023-04-18 14:56;dukebot;Changeset: 2081c007
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-04-12 22:16:12 +0000
URL:       https://git.openjdk.org/jdk11u/commit/2081c00707d17c0445cd119ecc25dffeb604e01c
;;;",,,,,,,,,,,,,,,,,,,,
"[Lilliput] Revert ""Replace stack-locking with fast-locking""",JDK-8299594,5090684,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-01-04 05:41,2023-01-04 10:03,2023-10-01 09:56,2023-01-04 10:03,repo-lilliput,,,,,,,,hotspot,,0,,,,,,,,,,,,,,,,"I'd like to revert the original fast-locking change and later replace it with the reworked fast-locking (https://github.com/openjdk/jdk/pull/10590). This new version can be turned on/off by a runtime flag, and is also more efficient.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zscj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-04 05:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput/pull/60
Date: 2023-01-04 13:49:21 +0000;;;",,,,,,,,,,,,,,,,,,,,
getprotobyname should not be used,JDK-8299593,5090683,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2023-01-04 05:14,2023-01-11 23:03,2023-10-01 09:56,2023-01-08 23:37,,,,,,,,21,core-svc,,0,noreg-hard,,,,,,,,,,,,,,,"The function getprotobyname is not thread-safe; it returns a pointer to a statically allocated structure. It should not be used.

The function is used to retrieve protocol number for TCP. There's a compile-time constant IPPROTO_TCP that can be used instead. While the protocol number for TCP could theoretically be changed, this is something we have never observed in practice, and it probably doesn't make sense to test.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-4647546,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zscb:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-01-04 06:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11842
Date: 2023-01-04 12:56:18 +0000;;;","2023-01-08 23:37;dukebot;Changeset: d03a5d95
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2023-01-09 07:32:55 +0000
URL:       https://git.openjdk.org/jdk/commit/d03a5d9580ef3b9be4d766ff9a11d6fd5fa133f9
;;;",,,,,,,,,,,,,,,,,,,
ZoneRulesProvider.registerProvider() can leave inconsistent state on failure,JDK-8299571,5090618,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,naoto,webbuggrp,webbuggrp,2023-01-03 06:54,2023-08-04 12:48,2023-10-01 09:56,2023-01-11 09:04,21,,,,,,,21,core-libs,,0,21ea,dcsaw,reproducer-yes,webbug,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
openjdk version ""21-ea"" 2023-09-19
OpenJDK Runtime Environment (build 21-ea+3-124)
OpenJDK 64-Bit Server VM (build 21-ea+3-124, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
When registering a `java.time.zone.ZoneRulesProvider` via the `registerProvider()` method the call can fail when a zone id is already registered with another provider. The zone ids of the provider are registered one by one until the first failure. The thrown `ZoneRulesException` then prevents subsequent update code of `ZONE_IDS` and `PROVIDERS` to run and update the caches leaving the whole class in an inconsistent state where some new zone ids are registered but not given out with `getAvailableZoneIds()`.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Register a ZoneRulesProvider with new zone id and already registered zone id.
It will fail with an exception but the new zone id will nevertheless be registered with the provider but not appear in aviabale zone ids.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Either the registering needs to fail completely, then neither of `ZONE_IDS`, `PROVIDERS` nor `ZONES` are allowed to change and also none of the ZoneIds are then available XOR the registering can fail for single zone ids but non-present are registered and all caches are updated properly
ACTUAL -
New zone ids are registered but caches are not updated.

---------- BEGIN SOURCE ----------
import java.time.zone.*;
import java.time.*;
import java.util.*;
public class ZoneRulesProviderTest {
  static abstract class CustomZoneRulesProvider extends ZoneRulesProvider {
    public ZoneRules provideRules(String zoneId, boolean forCaching){ return null; }
    public NavigableMap<String, ZoneRules> provideVersions(String zoneId) { return new TreeMap<>(); }
  }
  
  public static void main(String... args) {
    
  Set<String> zoneIds = new LinkedHashSet<>();
  zoneIds.add(""MyZoneId""); zoneIds.add(""CET"");
  try {
    ZoneRulesProvider.registerProvider(new CustomZoneRulesProvider() {
      public Set<String> provideZoneIds() { return zoneIds; }
    });
  } catch(ZoneRulesException e) { e.printStackTrace(); } // Unable to register zone as one already registered with that ID: CET
  ZoneId.getAvailableZoneIds().contains(""MyZoneId""); // false
  ZoneId.of(""MyZoneId""); // returns a ZoneId, no exception
  
  // now registering another Provider will update the ZONE_IDS cache
  ZoneRulesProvider.registerProvider(new CustomZoneRulesProvider() {
    public Set<String> provideZoneIds() { return Set.of(""AnotherZoneId""); }
  });
  ZoneId.getAvailableZoneIds().contains(""MyZoneId""); // true
  ZoneId.getAvailableZoneIds().contains(""AnotherZoneId""); // true
  
  ZoneRulesProvider.refresh(); // will not call the first Provider as it is not stored in PROVIDERS
}}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Register another ZoneRulesProvider to force at least an update of the cached `ZONE_IDS`.

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302983,,,,,,,,,,,,"2023-01-03 22:30;tongwan;ZoneRulesProviderTest.java;https://bugs.openjdk.org/secure/attachment/102199/ZoneRulesProviderTest.java",,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zrxv:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@a9a7756,,,,,,,Verified,,"2023-01-03 22:31;tongwan;The observations on Windows 10:
JDK 21ea+3: Passed.  ZoneRulesException thrown.;;;","2023-01-06 11:23;naoto;Since it is spec'ed to throw a `ZoneRulesException` on a duplicated zone, the registration should fail without any zones from the provider.;;;","2023-01-10 09:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11928
Date: 2023-01-10 17:17:41 +0000;;;","2023-01-11 09:03;dukebot;Changeset: c7716a01
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-01-11 17:01:48 +0000
URL:       https://git.openjdk.org/jdk/commit/c7716a0101d337ec75ffdbcc3d18058a03c2373f
;;;",,,,,,,,,,,,,,,,,
[JVMCI] Insufficient error handling when CodeBuffer is exhausted,JDK-8299570,5090655,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnsimon,thartmann,thartmann,2023-01-03 22:29,2023-05-08 03:45,2023-10-01 09:56,2023-03-08 14:35,11,17,20,21,,,,21,hotspot,,0,jdk11u-jvmci-defer,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,jvmci,oracle-triage-21,,,,,,,,"This is a follow-up from JDK-8298720.

When CodeBuffer::expand fails, MacroAssembler::emit_trampoline_stub fails on Aarch64. The following call chain does not handle this properly:

CodeInstaller::site_Call -> CodeInstaller::pd_relocate_JavaMethod -> NativeCall::trampoline_jump -> MacroAssembler::emit_trampoline_stub

Similar, CompiledStaticCall::emit_to_interp_stub can fail as well and needs to be handled in CodeInstaller::site_Call.",,,,,,,,,,JDK-8305145,JDK-8307037,JDK-8305558,JDK-8305135,JDK-8306176,JDK-8307614,,,,,,,,,,,,,,,,,,,,,,JDK-8298720,JDK-8305163,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,,,,,,,"0|i2zs63:",9223372036854775807,b13,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-03 22:30;thartmann;ILW = Same as JDK-8298720 = P3;;;","2023-01-11 06:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11945
Date: 2023-01-11 14:29:43 +0000;;;","2023-03-08 14:35;dukebot;Changeset: ad326fc6
Author:    Doug Simon <dnsimon@openjdk.org>
Date:      2023-03-08 22:33:42 +0000
URL:       https://git.openjdk.org/jdk/commit/ad326fc62be9fa29438fb4b59a51c38dd94afd68
;;;","2023-03-29 04:52;thartmann;Fix Request (JDK 20u)
Resolves an issue with insufficient error handling in JVMCI. The fix is low risk, was already backported to Oracle JDK 17u  / 11u and tested in the JDK 21 and 17u / 11u CIs. The backport applies cleanly.;;;","2023-03-29 04:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/44
Date: 2023-03-29 11:51:49 +0000;;;","2023-04-28 04:01;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Medium risk, basically touches JVMCI and aarch64.
I had to resolve three files due to context and NULL/nullptr.
SAP nighlty testing passed.;;;","2023-05-03 02:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1308
Date: 2023-04-28 11:03:36 +0000;;;",,,,,,,,,,,,,,
VaList.empty() doesn't return a list associated with the global scope,JDK-8299561,5090638,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,mcimadamore,lkuskov,lkuskov,2023-01-03 13:59,2023-01-23 11:28,2023-10-01 09:56,2023-01-05 01:46,20,,,,,,,20,core-libs,,0,conformance,tck-red,,,,,,,,,,,,,,"The test case 
assertEquals(SegmentScope.global(), VaList.empty().segment().scope());
which is written to cover the assertion - 

static VaList empty()
Returns an empty variable argument list, associated with the global scope.....

fails: 

Expected equal to : “jdk.internal.foreign.GlobalSession@726f3b58"", was given: “jdk.internal.foreign.ImplicitSession@442d9b6e”",,,,,,,,,,JDK-8299763,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,b20,,,,,,,,,"0|i2zs2b:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,Verified,,"2023-01-04 02:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/82
Date: 2023-01-04 10:49:09 +0000;;;","2023-01-05 01:46;dukebot;Changeset: 9c4ed16b
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2023-01-05 09:44:16 +0000
URL:       https://git.openjdk.org/jdk20/commit/9c4ed16be2fdb20f2917a6e8efacfbb30d3118b1
;;;",,,,,,,,,,,,,,,,,,,
Assertion failed: currentQueryIndex >= 0 && currentQueryIndex < numberOfJavaProcessesAtInitialization,JDK-8299560,5090637,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kevinw,dholmes,dholmes,2023-01-03 13:27,2023-09-27 08:58,2023-10-01 09:56,2023-09-27 08:56,21,,,,,,,22,core-svc,,0,tier5,,,,,,,,,,,,,,,"Test: com/sun/management/OperatingSystemMXBean/GetProcessCpuLoad.java

Log shows:

----------stderr:(2/1617)*----------
A\u0000s\u0000s\u0000e\u0000r\u0000t\u0000i\u0000o\u0000n\u0000 \u0000f\u0000a\u0000i\u0000l\u0000e\u0000d\u0000:\u0000 \u0000c\u0000u\u0000r\u0000r\u0000e\u0000n\u0000t\u0000Q\u0000u\u0000e\u0000r\u0000y\u0000I\u0000n\u0000d\u0000e\u0000x\u0000 \u0000>\u0000=\u0000 \u00000\u0000 \u0000&\u0000&\u0000 \u0000c\u0000u\u0000r\u0000r\u0000e\u0000n\u0000t\u0000Q\u0000u\u0000e\u0000r\u0000y\u0000I\u0000n\u0000d\u0000e\u0000x\u0000 \u0000<\u0000 \u0000n\u0000u\u0000m\u0000b\u0000e\u0000r\u0000O\u0000f\u0000J\u0000a\u0000v\u0000a\u0000P\u0000r\u0000o\u0000c\u0000e\u0000s\u0000s\u0000e\u0000s\u0000A\u0000t\u0000I\u0000n\u0000i\u0000t\u0000i\u0000a\u0000l\u0000i\u0000z\u0000a\u0000t\u0000i\u0000o\u0000n\u0000,\u0000 \u0000f\u0000i\u0000l\u0000e\u0000 \u0000c\u0000:\u0000\\\u0000s\u0000b\u0000\\\u0000p\u0000r\u0000o\u0000d\u0000\\\u00001\u00006\u00007\u00002\u00007\u00004\u00007\u00007\u00006\u00005\u0000\\\u0000w\u0000o\u0000r\u0000k\u0000s\u0000p\u0000a\u0000c\u0000e\u0000\\\u0000o\u0000p\u0000e\u0000n\u0000\\\u0000s\u0000r\u0000c\u0000\\\u0000j\u0000d\u0000k\u0000.\u0000m\u0000a\u0000n\u0000a\u0000g\u0000e\u0000m\u0000e\u0000n\u0000t\u0000\\\u0000w\u0000i\u0000n\u0000d\u0000o\u0000w\u0000s\u0000\\\u0000n\u0000a\u0000t\u0000i\u0000v\u0000e\u0000\\\u0000l\u0000i\u0000b\u0000m\u0000a\u0000n\u0000a\u0000g\u0000e\u0000m\u0000e\u0000n\u0000t\u0000_\u0000e\u0000x\u0000t\u0000\\\u0000O\u0000p\u0000e\u0000r\u0000a\u0000t\u0000i\u0000n\u0000g\u0000S\u0000y\u0000s\u0000t\u0000e\u0000m\u0000I\u0000m\u0000p\u0000l\u0000.\u0000c\u0000,\u0000 \u0000l\u0000i\u0000n\u0000e\u0000 \u00007\u00007\u00009\u0000
\u0000
result: Error. Agent communication error: java.net.SocketException: Connection reset; 

But if we get rid of all those embedded nuls (where did they come from??) we get:

Assertion failed: currentQueryIndex >= 0 && currentQueryIndex < numberOfJavaProcessesAtInitialization, file c:\\sb\\prod\\1672747765\\workspace\\open\\src\\jdk.management\\windows\\native\\libmanagement_ext\\OperatingSystemImpl.c, line 779",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8316047,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zs23:",9223372036854775807,master,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2023-01-05 13:44;kevinw;Failure while using the Windows Performance Data Helper (PDH) API in src/jdk.management/windows/native/libmanagement_ext/OperatingSystemImpl.c

currentQueryIndexForProcess(void) must be failing, could be returning -1 but we don't log that or any more detail.;;;","2023-09-13 03:54;kevinw;The duplicate incident 8316047 was running on:
javatestOS=Windows Server 2019 10.0 (amd64)
(I think we no longer have the exact OS version for this failure in 8299560);;;","2023-09-13 05:26;kevinw;
getCurrentQueryIndexForProcess comments that it can return -1, but it asserts that the value is >=0


allocateAndInitializePdhConstants() handles a -1 return value from currentQueryIndexForProcess():


perfGetProcessCPULoad() calls:
	currentQueryIndex = getCurrentQueryIndexForProcess();
..and uses the index returned directly as an array index, without checking it, because
getCurrentQueryIndexForProcess() asserts that the index >=0 and <numberOfJavaProcessesAtInitialization
	
	
But there must be some conditions where currentQueryIndexForProcess(void) can return -1.


currentQueryIndexForProcess(void) can return the default -1 IF:

	openQuery(&tmpQuery) != 0
		which calls PdhOpenQueryA, return value is a system error code or a PDH error code.
		
	addCounter fails, returns -1. addCounter calls PdhAddCounterA which has documented failure return values.
		
	PdhCollectQueryData_i(tmpQuery) fails
		we do check the two documented return values for PdhCollectQueryData and break.
		this looks expected to fail sometimes, but MUST not fail for the iteration we are about
		
	PdhGetFormattedCounterValue_i fails.  This is called with no retvalue check
		 PdhGetFormattedCounterValue has 3 documented error return values.

		 ;;;","2023-09-15 01:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15750
Date: 2023-09-14 17:24:39 +0000;;;","2023-09-27 08:56;dukebot;Changeset: 5350fd61
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2023-09-27 15:55:12 +0000
URL:       https://git.openjdk.org/jdk/commit/5350fd617390aaaedf8dd8821418c796cb1c38b3
;;;",,,,,,,,,,,,,,,,
[Lilliput/JDK17] Fix 32bit builds,JDK-8299552,5090626,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-01-03 10:25,2023-01-13 11:07,2023-10-01 09:56,2023-01-13 11:07,repo-lilliput,,,,,,,,hotspot,,0,oracle-gc-triage-seen,,,,,,,,,,,,,,,"32bit builds in Lilliput/JDK17 are broken:

* For target hotspot_variant-server_libjvm_objs_space.o:
/home/runner/work/lilliput-jdk17u/lilliput-jdk17u/src/hotspot/share/gc/shared/space.cpp: In member function 'virtual void ContiguousSpace::object_iterate_from(HeapWordImpl**, ObjectClosure*)':
/home/runner/work/lilliput-jdk17u/lilliput-jdk17u/src/hotspot/share/gc/shared/space.cpp:489:77: error: 'class markWord' has no member named 'narrow_klass'
  489 |     if (obj->is_forwarded() && CompressedKlassPointers::is_null(obj->mark().narrow_klass())) {
      |                                                                             ^~~~~~~~~~~~
/home/runner/work/lilliput-jdk17u/lilliput-jdk17u/src/hotspot/share/gc/shared/space.cpp: In member function 'void ContiguousSpace::allocate_temporary_filler(int)':
/home/runner/work/lilliput-jdk17u/lilliput-jdk17u/src/hotspot/share/gc/shared/space.cpp:615:10: error: 'class instanceOopDesc' has no member named 'set_klass_gap'; did you mean 'set_klass'?
  615 |     obj->set_klass_gap(0);
      |          ^~~~~~~~~~~~~
      |          set_klass",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,generic,,,,,,"0|i2zrzn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-01-13 00:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/2
Date: 2023-01-03 18:27:22 +0000;;;",,,,,,,,,,,,,,,,,,,,
Fix hotspot/test/runtime/Metaspace/MaxMetaspaceSizeTest.java in 8u,JDK-8299548,5090621,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,zzambers,zzambers,zzambers,2023-01-03 08:13,2023-01-30 20:32,2023-10-01 09:56,2023-01-09 08:16,8,,,,,,,openjdk8u372,hotspot,,0,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,,,,,"It was discovered [1] that following test is always skipped in 8u:
hotspot/test/runtime/Metaspace/MaxMetaspaceSizeTest.java

Test comes from JDK-8087291 [2] backport. Test is for 64-bit JDK only and uses following jtreg tag to test that:
@requires vm.bits == ""64""

However vm.bits is not supported on 8u, where condition evaluates as always false, which results in test being skipped on all systems.

Fix:
Fixed by doing explicit check in test instead of using jtreg tag.

Testing:
Tested using github actions as test is part of hotspot/tier1.

[1] https://github.com/openjdk/jdk8u-dev/pull/182#discussion_r1024395333
[2] https://bugs.openjdk.org/browse/JDK-8087291",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zryj:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@78d03d9a,,,,,,,,,"2023-01-03 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/222
Date: 2023-01-03 16:14:11 +0000;;;","2023-01-03 08:25;zzambers;Fix request (8u):

Fixed hotspot/test/runtime/Metaspace/MaxMetaspaceSizeTest.java (so it is not being skipped)
test only, passed testing in GHA;;;","2023-01-09 08:16;dukebot;Changeset: 0f698dae
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-01-09 16:14:56 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/0f698dae3bfee354de3c9bea32f881b4d7d5c73e
;;;","2023-01-30 20:32;dukebot;Changeset: 0f698dae
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-01-09 16:14:56 +0000
URL:       https://git.openjdk.org/jdk8u/commit/0f698dae3bfee354de3c9bea32f881b4d7d5c73e
;;;",,,,,,,,,,,,,,,,,
C2: MulLNode::mul_ring() wrongly returns bottom type due to casting errors with large numbers,JDK-8299546,5090619,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,chagedorn,chagedorn,chagedorn,2023-01-03 07:01,2023-05-01 23:55,2023-10-01 09:56,2023-03-14 08:00,11,17,19,20,21,8,,21,hotspot,,0,c2,javafuzzer,oracle-triage-21,performance,,,,,,,,,,,,"This was found by fuzzing (hitting the assert ""Missed optimization opportunity in PhaseCCP"") when multiplying two longs resulting in a large number. The current logic in MulLNode::mul_ring() tries to cast the longs to doubles to check for overflows. However, when the product is too large (but still small enough to not overflow the 64-bit long range), we could get precision errors and wrongly bottom type even though there is no overflow. This should be fixed.

Moreover, the code in MulLNode::mul_ring() is very similar to MulINode::mul_ring() and should be shared.

Reproduce original fuzzer test:
$ java -XX:-TieredCompilation  -XX:+StressCCP -XX:+StressIGVN -XX:StressSeed=1110788490 -Xcomp -XX:CompileOnly=Test Test.java
$ java -XX:-TieredCompilation  -Xcomp -XX:CompileOnly=Reduced -XX:CompileCommand=dontinline,*::* Reduced.java


# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94926/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/bf8be942-093f-4c3a-ad5c-419b5b32f8e9/runs/fa071043-b451-4ecc-b392-0071c325cf84/workspace/open/src/hotspot/share/opto/phaseX.cpp:1859), pid=131032, tid=131045
#  assert(!failure) failed: Missed optimization opportunity in PhaseCCP
#
# JRE version: Java(TM) SE Runtime Environment (21.0+4) (fastdebug build 21-ea+4-LTS-164)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+4-LTS-164, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1796324]  PhaseCCP::verify_analyze(Unique_Node_List&)+0x414

Current CompileTask:
C2:   1151  111    b        Test::vMeth1 (257 bytes)

Stack: [0x00007f4b3ef19000,0x00007f4b3f019000],  sp=0x00007f4b3f013fd0,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1796324]  PhaseCCP::verify_analyze(Unique_Node_List&)+0x414  (phaseX.cpp:1859)
V  [libjvm.so+0x179a2f8]  PhaseCCP::analyze()+0x3d8
V  [libjvm.so+0xafe0c1]  Compile::Optimize()+0x701
V  [libjvm.so+0xb0294e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x18ce
V  [libjvm.so+0x9167f7]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7
V  [libjvm.so+0xb0f9dc]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c
V  [libjvm.so+0xb10798]  CompileBroker::compiler_thread_loop()+0x5d8
V  [libjvm.so+0x107cf06]  JavaThread::thread_main_inner()+0x206
V  [libjvm.so+0x1a72710]  Thread::call_run()+0x100
V  [libjvm.so+0x1712613]  thread_native_entry(Thread*)+0x103
Registers:",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8307197,,,,,,,JDK-8257197,,,,,"2023-01-03 06:57;chagedorn;FuzzerUtils.class;https://bugs.openjdk.org/secure/attachment/102186/FuzzerUtils.class","2023-01-03 07:00;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/102184/Reduced.java","2023-01-03 06:57;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/102187/Test.java","2023-01-03 06:57;chagedorn;hs_err_pid131032.log;https://bugs.openjdk.org/secure/attachment/102185/hs_err_pid131032.log",,,,,,,,,,,,,,,,,,,,,"0|i2zry3:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-03 07:05;chagedorn;ILW = Imprecise type information leading to missed optimization opportunities and could hit assertion in CCP verification code, rare, no workaround = MLH = P4;;;","2023-01-09 08:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11907
Date: 2023-01-09 16:19:46 +0000;;;","2023-03-14 08:00;dukebot;Changeset: c466cdf9
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-03-14 14:57:47 +0000
URL:       https://git.openjdk.org/jdk/commit/c466cdf973ca9c4ecec1a28f158ebf366386024e
;;;",,,,,,,,,,,,,,,,,,
 IR test: TestEor3AArch64.java fails on aarch64,JDK-8299528,5090600,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,bkilambi,bkilambi,bkilambi,2023-01-03 05:34,2023-01-11 22:56,2023-10-01 09:56,2023-01-06 02:06,20,21,,,,,,20,hotspot,,0,noreg-self,oracle-triage-21,,,,,,,,,,,,,,"There have been IR violations when TestEor3AArch64.java IR test is run since the IR nodes to be matched have not been updated to the newer IR framework introduced. 

Errors observed :

Violations (2)
--------------
 - ""veor3_neon"" is not an IR node defined in class IRNode and has therefore no default compile phase specified.
   If your regex represents a C2 IR node, consider adding an entry to class IRNode together with a static initializer block that adds a mapping to IRNode.IR_NODE_MAPPINGS.
   Otherwise, set the @IR ""phase"" attribute to a compile phase different from CompilePhase.DEFAULT to explicitly tell the IR framework on which compile phase your rule should be applied on.
   Violation for IR rule 1 at public static void compiler.vectorization.TestEor3AArch64.testLongEor3().
 - ""veor3_neon"" is not an IR node defined in class IRNode and has therefore no default compile phase specified.
   If your regex represents a C2 IR node, consider adding an entry to class IRNode together with a static initializer block that adds a mapping to IRNode.IR_NODE_MAPPINGS.
   Otherwise, set the @IR ""phase"" attribute to a compile phase different from CompilePhase.DEFAULT to explicitly tell the IR framework on which compile phase your rule should be applied on.
   Violation for IR rule 1 at public static void compiler.vectorization.TestEor3AArch64.testIntEor3().
/============/
	at compiler.lib.ir_framework.shared.TestFormat.throwIfAnyFailures(TestFormat.java:85)
	at compiler.lib.ir_framework.driver.irmatching.parser.HotSpotPidFileParser.parse(HotSpotPidFileParser.java:76)
	at compiler.lib.ir_framework.driver.irmatching.parser.MethodCompilationParser.parse(MethodCompilationParser.java:54)
	at compiler.lib.ir_framework.TestFramework.runTestVM(TestFramework.java:751)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:719)
	at compiler.lib.ir_framework.TestFramework.start(TestFramework.java:339)
	at compiler.lib.ir_framework.TestFramework.run(TestFramework.java:223)
	at compiler.lib.ir_framework.TestFramework.run(TestFramework.java:212)
	at compiler.vectorization.TestEor3AArch64.main(TestEor3AArch64.java:116)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: compiler.lib.ir_framework.shared.TestFormatException
JavaTest Message: shutting down test ",,,,,,,,,,JDK-8299765,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8280378,,,,,,,,,,,,,,aarch64,,,,,,,20,,generic,,,,,,"0|i2zrtv:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-03 07:25;chagedorn;ILW = IR test fails because it misses the compile phase IR framework update, single test, no workaround = MLH = P4;;;","2023-01-05 02:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/83
Date: 2023-01-05 10:37:43 +0000;;;","2023-01-06 02:06;dukebot;Changeset: 136f5db0
Author:    Bhavana Kilambi <bkilambi@openjdk.org>
Committer: Nick Gasson <ngasson@openjdk.org>
Date:      2023-01-06 10:04:04 +0000
URL:       https://git.openjdk.org/jdk20/commit/136f5db03d664fd77f8042c6f0875dea964ca5e9
;;;",,,,,,,,,,,,,,,,,,
Incorrect size of Approve button in custom JFileChooser,JDK-8299522,5090595,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,tr,tr,2023-01-03 03:31,2023-02-22 23:17,2023-10-01 09:56,2023-02-20 21:20,17,19,20,,,,,21,client-libs,,0,sn_135,sn_136,sn_137,sn_138,,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM:
When JFileChooser is added to a JFrame, the open button is not shown properly. The button size is smaller compared to its actual size. The issue is observed in Metal, Nimbus and Motif look and feel and when custom Dialogue type is set without setting Approve Button Text. 

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM:
Compile and run the code below under Metal Look and Feel (Default Look and feel in windows and Linux is Metal, whereas in MacOS the look and feel has to be set).

EXPECTED VERSUS ACTUAL BEHAVIOR:
EXPECTED -
The Open button to be seen properly as Cancel button, without reducing its size.
ACTUAL -
The Open button size is smaller compared to its actual size.

---------- BEGIN SOURCE ----------
import java.awt.*;
import javax.swing.*;
public class FileChooserTest {
    public static void main(String[] args) throws UnsupportedLookAndFeelException, ClassNotFoundException, InstantiationException, IllegalAccessException {
        UIManager.setLookAndFeel(""javax.swing.plaf.metal.MetalLookAndFeel"");
        JFileChooser fc = new JFileChooser();
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        fc.setDialogType(JFileChooser.CUSTOM_DIALOG);
        frame.add(fc, BorderLayout.CENTER);
        frame.pack();
        frame.setVisible(true);
    }
}
---------- END SOURCE ----------

FREQUENCY : always

",,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300549,JDK-8300084,,,,,,,,,,,,,,,,,,,,,,,"2023-01-10 06:28;tr;Snap_Metal_Laf.png;https://bugs.openjdk.org/secure/attachment/102262/Snap_Metal_Laf.png","2023-01-10 06:28;tr;Snap_Nimbus_Laf.png;https://bugs.openjdk.org/secure/attachment/102263/Snap_Nimbus_Laf.png","2023-01-10 06:28;tr;Snap_Windows_laf.png;https://bugs.openjdk.org/secure/attachment/102264/Snap_Windows_laf.png",,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zrsr:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2023-01-09 06:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11901
Date: 2023-01-09 10:24:49 +0000;;;","2023-01-10 05:17;aivanov;Attaching a screenshot from JDK-8299306 to this bug would be helpful as it clearly demonstrates the problem reported.;;;","2023-02-20 21:20;dukebot;Changeset: 29f392e4
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-02-21 05:19:07 +0000
URL:       https://git.openjdk.org/jdk/commit/29f392e4344e467882c36b5737d432b2d0ee7ebb
;;;",,,,,,,,,,,,,,,,,,
findVirtual on array classes incorrectly restricts the receiver type,JDK-8299505,5090495,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,liach,webbuggrp,webbuggrp,2022-12-31 00:56,2023-06-04 20:16,2023-10-01 09:56,2023-05-31 09:30,11,17,19,20,8,,,21,core-libs,,1,additional-information-received,amazon-interest,dcsaw,reproducer-yes,webbug,,,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
Calling lookup.findVirtual(int[].class, ""clone"", MethodType.methodType(Object.class)) with a lookup that is not in the package java.lang will give a MethodHandle with the type (<lookup.lookupClass()>)Ljava/lang/Object; instead of ([I)Ljava/lang/Object;

Using the publicLookup works correctly because its lookupClass is java.lang.Object. This is why the tests added in JDK-8001105 pass.

https://github.com/openjdk/jdk/blob/c2e3d7284814cd6b49f44b4de18e0f92310422b0/src/java.base/share/classes/java/lang/invoke/MethodHandles.java#L3940

Additionally, you can use a lookup from Lookup.in(Class) and it will give you a MethodHandle to clone an object that doesn't have a public clone method, or implement Clonable, however this is not particularly useful because JVM_Clone will throw CloneNotSupported if it doesn't implement Clonable

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the following class

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

class Scratch
{
	public static void main(String[] args) throws Throwable
	{
		MethodHandles.Lookup lookup = MethodHandles.lookup();
		MethodHandle mh = lookup.findVirtual(int[].class, ""clone"", MethodType.methodType(Object.class));
		System.out.println(mh.type());
		mh.invoke(new int[]{});
	}
}


EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
it should print `(int[])Object` and complete normally
ACTUAL -
it prints `(Scratch)Object` and throws a ClassCastException

---------- BEGIN SOURCE ----------
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

class Scratch
{
	public static void main(String[] args) throws Throwable
	{
		MethodHandles.Lookup lookup = MethodHandles.lookup();
		MethodHandle mh = lookup.findVirtual(int[].class, ""clone"", MethodType.methodType(Object.class));
		mh.invoke(new int[]{});
	}
}
---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Use a publicLookup, or a lookup from a class in java.lang

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-02 21:43;tongwan;Scratch.java;https://bugs.openjdk.org/secure/attachment/102182/Scratch.java",,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zr6j:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2023-01-02 21:42;tongwan;The observations on Windows 10:
JDK 8: Failed, observed ClassCastException.
JDK 11: Failed.
JDK 17: Failed.
JDK 19: Failed.
JDK 20ea+23: Failed.;;;","2023-01-03 17:43;mchung;All arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type.   findVirtual on an array type to look up the ""clone"" method should return a method handle of method type ""()T[]"".;;;","2023-01-04 21:05;pnarayanaswa;Additional Information from submitter:
============================
> findVirtual on an array type to look up the ""clone"" method should return a method handle of method type ""()T[]"". 

While the language behavior is that T[].clone is ()T[], the actual method in bytecode is clone()Ljava/lang/Object; and the method handle should reflect that, returning ([T)Ljava/lang/Object;, especially if looked up with methodType(Object.class);;;","2023-05-04 14:06;liach;When looking for T[].clone, lookup always delegate the declaring class to Object. However, clone is protected in Object, so findVirtual might have lost the original T[] receiver class information and resolves for a super.clone() instead for the lookup class. This is somewhat similar to JDK-8155106.;;;","2023-05-06 11:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13855
Date: 2023-05-06 18:15:56 +0000;;;","2023-05-30 16:33;mchung;> While the language behavior is that T[].clone is ()T[], the actual method in bytecode is clone()Ljava/lang/Object; and the method handle should reflect that, returning ([T)Ljava/lang/Object;, especially if looked up with methodType(Object.class) 

Agreed.  Method handle invocation follows the bytecode behavior and so the return type is not adjusted.

;;;","2023-05-31 09:30;dukebot;Changeset: 78aa5f3f
Author:    Chen Liang <liach@openjdk.org>
Committer: Mandy Chung <mchung@openjdk.org>
Date:      2023-05-31 16:28:26 +0000
URL:       https://git.openjdk.org/jdk/commit/78aa5f3fc1c7fc7929e0d2b5d94da0827483b7c5
;;;",,,,,,,,,,,,,,
Usage of constructors of primitive wrapper classes should be avoided in java.desktop API docs,JDK-8299497,5090572,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,prr,tongwan,tongwan,2023-01-02 21:14,2023-08-07 14:12,2023-10-01 09:56,2023-01-23 17:27,17,,,,,,,21,client-libs,,0,amazon-interest,dcsaw,jdk17u-fix-request,jdk17u-fix-yes,noreg-doc,reproducer-other,webbug,,,,,,,,,"A DESCRIPTION OF THE PROBLEM :
There are several code samples in the Java SE API documentation still using constructors of primitive wrapper classes, which are deprecated for removal. They should be replaced by valueOf factory methods or auto-boxing.

Here's what I found:

java.awt.image.renderable.ParameterBlock
java.awt.font.LineBreakMeasurer



",,,,,,,,,,JDK-8305472,JDK-8301100,,,,,,,,,,,,,,,,,,,,,JDK-8299502,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zrnn:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2023-01-02 21:17;tongwan;Moved to JDK as the enhancement for more evaluations.;;;","2023-01-04 11:26;prr;I think the submitter is referring to a couple of extremely minor doc usages as below

https://docs.oracle.com/en/java/javase/19/docs/api/java.desktop/java/awt/font/LineBreakMeasurer.html

where the sample code has
penPositions.addElement(new Float(horizontalPos));

and the text in the class comment here
https://docs.oracle.com/en/java/javase/19/docs/api/java.desktop/java/awt/image/renderable/ParameterBlock.html

""There is no way to distinguish between the results of ""short s; add(s)"" and ""add(new Short(s))"".

Its a bit ironic that ParameterBlock has equivalent primitive and object methods for convenience from before the days of auto-boxing .. ;;;","2023-01-20 18:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12127
Date: 2023-01-21 02:28:52 +0000;;;","2023-01-20 19:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12128
Date: 2023-01-21 02:55:29 +0000;;;","2023-01-23 17:27;dukebot;Changeset: b5ee3d1f
Author:    Tingjun Yuan <yuantj1999@outlook.com>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2023-01-24 01:25:29 +0000
URL:       https://git.openjdk.org/jdk/commit/b5ee3d1f2abf5af86438ac4c9e3da3cc026dffd3
;;;","2023-01-23 19:55;vrudomet;[Fix request 17u]

Clean backport, simple fix. 
;;;","2023-01-23 20:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1104
Date: 2023-01-24 03:55:13 +0000;;;",,,,,,,,,,,,,,
Test vmTestbase/nsk/stress/except/except011.java failed: ExceptionInInitializerError: target class not found,JDK-8299494,5090569,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,dholmes,dholmes,2023-01-02 20:48,2023-05-07 20:41,2023-10-01 09:56,2023-03-21 06:20,20,21,,,,,,21,hotspot,,0,classloading,intermittent,tier8,zgc,,,,,,,,,,,,"----------messages:(6/301)----------
command: main -Xms50M -Xmx200M nsk.stress.except.except011
reason: User specified action: run main/othervm -Xms50M -Xmx200M nsk.stress.except.except011 
started: Sun Dec 25 22:18:35 UTC 2022
Mode: othervm [/othervm specified]
finished: Sun Dec 25 22:18:38 UTC 2022
elapsed time (seconds): 3.078
----------configuration:(0/0)----------
----------System.out:(20/978)----------
# While printing this message, JVM seems to initiate the output
# stream, so that it will not need more memory to print later,
# when the heap would fail to provide more memory.
# 
# Note, that the test maintains especial static log[] field in
# order to avoid printing when the heap seems exhausted.
# Nevertheless, printing could arise OutOfMemoryError even
# after all the memory allocated by the test is released.
# 
# That problem is caused by the known JDK/HotSpot bugs:
#     4239841 (P1/S5) 1.1: poor garbage collector performance
#     4245060 (P4/S5) poor garbage collector performance
# 
# This message is just intended to work-around that problem.
# If printing should fail even so, the test will try to return
# the exit status 96 instead of 97 to indicate the problem.
# However, the test may fail or even crash on some platforms
# suffering the bug 4239841 or 4245060.
Failure: ExceptionInInitializerError: target class not found
Test failed.
----------System.err:(0/0)----------

Looks like it may have been a OOME during class loading.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297977,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zrmz:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-03-20 10:47;coleenp;This test is essentially:

       // eat all the memory
        try {
            oops = Class.forName(className);
            log[messages++] = ""Failure: ExceptionInInitializerError failed to throw"";
            exitCode = 2;
        catch (ExceptionInInitializerError eiie) // expected
        catch (ClassNotFoundException) // intermittent failure mode
       catch (OutOfMemoryError) {
            Skipped: ExceptionInInitializerError: thrown OutOfMemoryError (pass)
       }

Class.forName() calls JVM_FindClassFromCaller in the VM with a char* for the class name, and the VM gets the OOM allocating the java.lang.String to use for the following loadClass call. So the test always passes with OOM.

Sometimes ZGC is able to free up a little bit of memory.  In this case, the test gets the unexpected ClassNotFoundException because except011oops.java was never compiled, so there is no except011oops.class to find.

Adding @compile except011oops.java would fix this but this test will rarely (never) test what it is expecting to test: that the exception oops may be pre-allocated (which they're not, they're only pre-loaded).   We should just remove this test.;;;","2023-03-20 17:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13110
Date: 2023-03-21 00:28:51 +0000;;;","2023-03-21 06:19;dukebot;Changeset: bbde2158
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-03-21 13:18:44 +0000
URL:       https://git.openjdk.org/jdk/commit/bbde2158d1d11be909292d0c8625211e6cf5359e
;;;",,,,,,,,,,,,,,,,,,
[Lilliput/JDK17] Fix Windows build,JDK-8299478,5090555,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rkennke,rkennke,rkennke,2023-01-02 12:58,2023-01-03 10:05,2023-10-01 09:56,2023-01-03 10:05,repo-lilliput,,,,,,,repo-lilliput,hotspot,,0,,,,,,,,,,,,,,,,As subject says.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,windows,,,,,,"0|i2zrjv:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-03 09:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/lilliput-jdk17u/pull/1
Date: 2023-01-02 19:21:24 +0000;;;",,,,,,,,,,,,,,,,,,,,
PPC64 Zero build fails after JDK-8286302,JDK-8299476,5090553,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,shade,shade,shade,2023-01-02 09:48,2023-04-03 06:50,2023-10-01 09:56,2023-01-04 02:48,20,21,,,,,,20,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,"```
/home/shade/trunks/shipilev-jdk20/src/hotspot/share/runtime/continuationFreezeThaw.cpp: In constructor 'FreezeBase::FreezeBase(JavaThread*, ContinuationWrapper&, intptr_t*)':
/home/shade/trunks/shipilev-jdk20/src/hotspot/share/runtime/continuationFreezeThaw.cpp:487:64: error: 'abi_reg_args_size' is not a member of 'frame'
  487 |                                              PPC64_ONLY(frame::abi_reg_args_size >> LogBytesPerWord);
      |                                                                ^~~~~~~~~~~~~~~~~
```",,,,,,,,,,JDK-8299613,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298655,,JDK-8286302,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zrjf:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-02 10:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/79
Date: 2023-01-02 17:56:41 +0000;;;","2023-01-04 02:48;dukebot;Changeset: a17f505d
Author:    Aleksey Shipilev <shade@openjdk.org>
Date:      2023-01-04 10:46:34 +0000
URL:       https://git.openjdk.org/jdk20/commit/a17f505d7351b0031d17c3ce8df3723b121a301e
;;;",,,,,,,,,,,,,,,,,,,
sun/jvm/hotspot/SALauncher.java handling of negative rmiport args,JDK-8299470,5090544,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2023-01-02 05:50,2023-01-18 00:24,2023-10-01 09:56,2023-01-05 00:01,21,,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,"The test serviceability/sa/sadebugd/SADebugDTest.java  can pass under some circumstances a negative rmiport (--rmiport -1) to  SALauncher.java.
This leads to a somewhat misleading message [debugd] Argument is expected for 'rmiport'  (we have an argument but probably not what is really expected) and additionally the real exception is not shown.
Probably also a warning in case of negative rmiport values might be printed because they seem to lead to errors.",,,,,,,,,,JDK-8300444,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299657,,,,,,,JDK-8299700,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zrhf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2846162a,,,,,,,,,"2023-01-02 06:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11811
Date: 2023-01-02 14:31:14 +0000;;;","2023-01-05 00:01;dukebot;Changeset: 2ccdefc8
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-01-05 07:59:41 +0000
URL:       https://git.openjdk.org/jdk/commit/2ccdefc81c0ea2ea5c4380bb045aa82ad1eb8205
;;;","2023-01-16 00:48;mbaesken;jdk17 backport request
I would like to have the change in jdk17 as well because it would be beneficial there too. The backport is low risk and clean.;;;","2023-01-16 00:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1068
Date: 2023-01-16 08:47:26 +0000;;;",,,,,,,,,,,,,,,,,
EndingDotHostname.java fails because of compilation errors,JDK-8299445,5090518,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rmarchenko,rmarchenko,rmarchenko,2023-01-02 02:36,2023-07-16 23:13,2023-10-01 09:56,2023-01-03 02:18,11,,,,,,,11.0.19,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,,,"EndingDotHostname.java faileswith the following errors:

----------System.err:(230/15355)*----------
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:85: error: unclosed string literal
        """"""
          ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:85: error: '}' expected
        """"""
           ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:107: error: unclosed string literal
            -----END CERTIFICATE-----"""""",
                                       ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:109: error: unclosed string literal
        """"""
          ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:138: error: unclosed string literal
            """"""),
              ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:152: error: unclosed string literal
        """"""
          ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:173: error: unclosed string literal
            -----END CERTIFICATE-----"""""",
                                       ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:175: error: unclosed string literal
        """"""
          ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:202: error: unclosed string literal
            """"""),
              ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:217: error: unclosed string literal
        """"""
          ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:238: error: unclosed string literal
            -----END CERTIFICATE-----"""""",
                                       ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:240: error: unclosed string literal
        """"""
          ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:263: error: malformed floating point literal
            6eBtOTAJsop/Ja+v3DD1laC0Wq+w+orEU2ISgiWnAoGBAK9/9m3RCYPNYzS/PQ2B
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:267: error: unclosed string literal
            """""");
              ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:269: error: class, interface, or enum expected
    final String keyAlgo;
          ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:270: error: class, interface, or enum expected
    final String certStr;
          ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:271: error: class, interface, or enum expected
    final String privateKeyStr;
          ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:274: error: class, interface, or enum expected
    private final static SSLExampleCert[] TRUSTED_CERTS = {
                         ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:279: error: class, interface, or enum expected
    private final static SSLExampleCert[] SERVER_CERTS = {
                         ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:284: error: class, interface, or enum expected
    private final static SSLExampleCert[] CLIENT_CERTS = {
                         ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:289: error: class, interface, or enum expected
    static {
           ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:291: error: class, interface, or enum expected
        String loopbackHostname =
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:294: error: class, interface, or enum expected
        try (FileWriter writer= new FileWriter(hostsFileName, false)) {
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:296: error: class, interface, or enum expected
        } catch (IOException ioe) {
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:303: error: class, interface, or enum expected
        this.certStr = certStr;
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:304: error: class, interface, or enum expected
        this.privateKeyStr = privateKeyStr;
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:305: error: class, interface, or enum expected
    }
    ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:307: error: class, interface, or enum expected
    public static SSLContext createClientSSLContext() throws Exception {
                  ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:309: error: class, interface, or enum expected
    }
    ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:311: error: class, interface, or enum expected
    public static SSLContext createServerSSLContext() throws Exception {
                  ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:313: error: class, interface, or enum expected
    }
    ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:321: error: class, interface, or enum expected
        CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:324: error: class, interface, or enum expected
        KeyStore ts = null;     // trust store
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:325: error: class, interface, or enum expected
        if (trustedCerts != null && trustedCerts.length != 0) {
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:327: error: class, interface, or enum expected
            ts.load(null, null);
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:329: error: class, interface, or enum expected
            Certificate[] trustedCert = new Certificate[trustedCerts.length];
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:330: error: class, interface, or enum expected
            for (int i = 0; i < trustedCerts.length; i++) {
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:330: error: class, interface, or enum expected
            for (int i = 0; i < trustedCerts.length; i++) {
                            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:330: error: class, interface, or enum expected
            for (int i = 0; i < trustedCerts.length; i++) {
                                                     ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:334: error: class, interface, or enum expected
                }
                ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:338: error: class, interface, or enum expected
            }
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:343: error: class, interface, or enum expected
        if (endEntityCerts != null && endEntityCerts.length != 0) {
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:345: error: class, interface, or enum expected
            ks.load(null, null);
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:347: error: class, interface, or enum expected
            for (SSLExampleCert endEntityCert : endEntityCerts) {
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:352: error: class, interface, or enum expected
                KeyFactory kf =
                ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:355: error: class, interface, or enum expected
                PrivateKey priKey = kf.generatePrivate(priKeySpec);
                ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:358: error: class, interface, or enum expected
                Certificate keyCert;
                ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:359: error: class, interface, or enum expected
                try (ByteArrayInputStream is = new ByteArrayInputStream(
                ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:362: error: class, interface, or enum expected
                }
                ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:367: error: class, interface, or enum expected
                ks.setKeyEntry(""end-entity-cert-"" +
                ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:370: error: class, interface, or enum expected
            }
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:375: error: class, interface, or enum expected
        Date verifyingDate = df.parse(""02/02/2023"");
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:378: error: class, interface, or enum expected
        TrustManagerFactory tmf =
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:380: error: class, interface, or enum expected
        if (ts != null) {
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:383: error: class, interface, or enum expected
            pkixParams.setDate(verifyingDate);
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:384: error: class, interface, or enum expected
            pkixParams.setRevocationEnabled(false);
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:385: error: class, interface, or enum expected
            ManagerFactoryParameters managerFactoryParameters =
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:387: error: class, interface, or enum expected
            tmf.init(managerFactoryParameters);
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:388: error: class, interface, or enum expected
        } else {
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:390: error: class, interface, or enum expected
        }
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:393: error: class, interface, or enum expected
        if (endEntityCerts != null && endEntityCerts.length != 0) {
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:396: error: class, interface, or enum expected
            kmf.init(ks, passphrase);
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:398: error: class, interface, or enum expected
            KeyManager[] kms = kmf.getKeyManagers();
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:399: error: class, interface, or enum expected
            if (kms != null && kms.length != 0) {
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:401: error: class, interface, or enum expected
                Field verificationDateField =
                ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:403: error: class, interface, or enum expected
                verificationDateField.setAccessible(true);
                ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:404: error: class, interface, or enum expected
                verificationDateField.set(km, verifyingDate);
                ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:405: error: class, interface, or enum expected
            }
            ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:408: error: class, interface, or enum expected
        } else {
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:410: error: class, interface, or enum expected
        }
        ^
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:413: error: class, interface, or enum expected
    }
    ^
test\\jdk\\javax\\net\\ssl\\ServerName\\EndingDotHostname.java:134: error: cannot find symbol
        SSLContext context = SSLExampleCert.createServerSSLContext();
                                           ^
  symbol:   method createServerSSLContext()
  location: class SSLExampleCert
test\\jdk\\javax\\net\\ssl\\ServerName\\EndingDotHostname.java:218: error: cannot find symbol
        SSLContext context = SSLExampleCert.createClientSSLContext();
                                           ^
  symbol:   method createClientSSLContext()
  location: class SSLExampleCert
test\\jdk\\javax\\net\\ssl\\templates\\SSLExampleCert.java:84: error: constructor SSLExampleCert in enum SSLExampleCert cannot be applied to given types;
    CA_RSA(""RSA"",
          ^
  required: no arguments
  found: String,String
  reason: actual and formal argument lists differ in length
74 errors
result: Failed. Compilation failed: Compilation failed


test result: Failed. Compilation failed: Compilation failed
",,,,,,,,,,JDK-8302296,JDK-8312144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8065422,JDK-8299084,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zrbn:",9223372036854775807,b01,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-01-02 02:38;rmarchenko;The issue was introduced in https://github.com/openjdk/jdk11u-dev/pull/1574;;;","2023-01-02 02:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1626
Date: 2023-01-02 10:53:14 +0000;;;","2023-01-03 02:18;dukebot;Changeset: f9f3fcb9
Author:    Roman Marchenko <rmarchenko@openjdk.org>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2023-01-03 10:16:25 +0000
URL:       https://git.openjdk.org/jdk11u-dev/commit/f9f3fcb9e5fb5050008d72b5c7c37ea4a0ebccfa
;;;","2023-02-07 22:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/207
Date: 2022-12-09 09:59:40 +0000;;;","2023-02-08 03:32;dukebot;Changeset: f9f3fcb9
Author:    Roman Marchenko <rmarchenko@openjdk.org>
Committer: Martin Doerr <mdoerr@openjdk.org>
Date:      2023-01-03 10:16:25 +0000
URL:       https://git.openjdk.org/jdk11u/commit/f9f3fcb9e5fb5050008d72b5c7c37ea4a0ebccfa
;;;",,,,,,,,,,,,,,,,
Fix typos in some test files under core-libs component,JDK-8299441,5090514,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mernst,jpai,jpai,2023-01-02 01:49,2023-01-05 03:03,2023-10-01 09:56,2023-01-02 18:00,,,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,"A PR has been open https://github.com/openjdk/jdk/pull/10029 to fix typos in various areas/files in the JDK. Most of them have been addressed as separate PRs. There's just a few more remaining which belong to the test files under the core-libs component. This issue is to track those typo fixes.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zrar:",9223372036854775807,b04,,,,,,,,,,,"2023-01-02 01:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11810
Date: 2023-01-02 09:52:59 +0000;;;","2023-01-02 18:00;dukebot;Changeset: 417d01ea
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2023-01-03 01:58:49 +0000
URL:       https://git.openjdk.org/jdk/commit/417d01ea63261afb4fb29b4d11de799f2c0846d7
;;;",,,,,,,,,,,,,,,,,,,
java/text/Format/NumberFormat/CurrencyFormat.java fails for hr_HR,JDK-8299439,5090512,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,ostuart,mbaesken,mbaesken,2023-01-02 01:22,2023-08-08 14:06,2023-10-01 09:56,2023-01-04 14:01,11.0.19-oracle,17,20,21,8u361,,,21,core-libs,,0,8bpr-critical-approved,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk8u-fix-request,jdk8u-fix-yes,ProblemList,,,,,,,"The test java/text/Format/NumberFormat/CurrencyFormat.java fails since start of 2023 :
java.lang.RuntimeException: Wrong currency symbol for locale hr_HR, expected: Kn, got: EUR
       at CurrencyFormat.testSymbols(CurrencyFormat.java:159)
       at CurrencyFormat.main(CurrencyFormat.java:51)

Most likely this is because of the switch of Croatia to Euro.

Croatia joined the Euro Currency with effect of 1.1.2023 as reflected in JDK-8296239.
The test only checks a single currency, the one valid at the date at which the test runs. 
Therefore the test broke just when the years changed.",,,,,,,,,,JDK-8300438,JDK-8300022,JDK-8300057,JDK-8299668,JDK-8299814,JDK-8299669,JDK-8300374,JDK-8299809,JDK-8300483,JDK-8300426,JDK-8304655,JDK-8304678,JDK-8299670,JDK-8300353,JDK-8300466,,,,,,,,,JDK-8299438,,,,JDK-8299438,,,,,,,JDK-8296239,JDK-8304513,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zrab:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6fc9e792,,,,,,,Verified,,"2023-01-02 14:47;naoto;Possibly a regression caused by the fix to JDK-8296239;;;","2023-01-02 21:37;dholmes;Deleted: I was reading the test condition backwards.;;;","2023-01-03 00:33;mbaesken;Adjusting  the test properties file fixes this for us.

--- a/test/jdk/java/text/Format/NumberFormat/CurrencySymbols.properties
+++ b/test/jdk/java/text/Format/NumberFormat/CurrencySymbols.properties
@@ -79,7 +79,7 @@ fr_FR=\u20AC
 fr_LU=\u20AC
 hi_IN=\u0930\u0942
 hr=\u00A4
-hr_HR=Kn
+hr_HR=EUR
;;;","2023-01-03 09:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11833
Date: 2023-01-03 17:40:42 +0000;;;","2023-01-03 14:24;naoto;Please note that the replacement value should be `\u20AC`, not `EUR`, as this has to be the EURO SIGN symbol.;;;","2023-01-04 02:05;goetz;Hi [~naoto]
Why should the test use the EURO Sign if the ISO Ammendmend uses ""EUR""?
Also, the test is passing with Matthias' patch.
... I got it ...;;;","2023-01-04 06:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11844
Date: 2023-01-04 14:21:53 +0000;;;","2023-01-04 06:47;alanb;I've restored the JBS description to match PR 11833.;;;","2023-01-04 14:01;dukebot;Changeset: 3b374c01
Author:    Justin Lu <justin.lu@oracle.com>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-01-04 21:59:02 +0000
URL:       https://git.openjdk.org/jdk/commit/3b374c0153950ab193f3a188b57d3404b4ce2fe2
;;;","2023-01-05 13:38;goetz;Fix request [11u, 17u]

I backport this as follow up of 8296239.
Very low risk, trivial change.
Clean backport except for ProblemList.
Test passes. SAP nightly testing passed.;;;","2023-01-05 13:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1039
Date: 2023-01-05 21:39:58 +0000;;;","2023-01-09 07:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1643
Date: 2023-01-09 14:50:35 +0000;;;","2023-01-10 19:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/228
Date: 2023-01-11 02:56:01 +0000;;;","2023-01-11 01:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/96
Date: 2023-01-11 09:21:18 +0000;;;","2023-01-11 08:25;andrew;Fix Request [8u]

Same follow-up from the Croatia fix as with later releases. Patch is clean other than dropping the ProblemList.txt change (copyright header change doesn't apply and no need to bump it when there are no other changes to the file). Patch reviewed by Severin Gehwolf & Dmitry Cherepanov.;;;","2023-01-12 14:27;dukebot;Changeset: 752a3701
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2023-01-12 08:02:58 +0000
URL:       https://git.openjdk.org/jdk/commit/752a37016f49ef8f2405dd74f96f58f80d606cd3
;;;",,,,,
Cleanup: delete unnecessary semicolons in java.desktop module,JDK-8299430,5090503,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2023-01-01 22:49,2023-01-11 23:00,2023-10-01 09:56,2023-01-05 00:48,17,21,,,,,,21,client-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,The java.desktop module has many duplicate or unnecessary semicolons which can be deleted.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zr8b:",9223372036854775807,b05,,,,,,,,,,,"2023-01-01 23:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11807
Date: 2023-01-02 07:20:43 +0000;;;","2023-01-05 00:48;dukebot;Changeset: e7361cb7
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-01-05 08:47:21 +0000
URL:       https://git.openjdk.org/jdk/commit/e7361cb746cf00984dd5193ec8a8cc90e1e5a39b
;;;",,,,,,,,,,,,,,,,,,,
containers/docker/TestMemoryWithCgroupV1.java fails on SLES12 ppc64le when testing Memory and Swap Limit,JDK-8299424,5090490,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-12-30 03:28,2023-06-27 08:22,2023-10-01 09:56,2023-01-02 03:18,11,17,21,,,,,21,hotspot,,0,containers,docker,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,"On the old SLES12 machine we do not have memory.memsw.limit_in_bytes :
ls -alL /sys/fs/cgroup/memory/memory.memsw.limit_in_bytes
ls: cannot access /sys/fs/cgroup/memory/memory.memsw.limit_in_bytes: No such file or directory

This leads to

[0.163s][trace][os,container] Memory and Swap Limit is: 18446744073709551614
memory_and_swap_limit_in_bytes: not supported

And the check in containers/docker/TestMemoryWithCgroupV1.java fails :

java.lang.RuntimeException: 'Memory and Swap Limit is: 157286400' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at TestMemoryWithCgroupV1.testMemoryLimitWithSwappiness(TestMemoryWithCgroupV1.java:88)
	at TestMemoryWithCgroupV1.main(TestMemoryWithCgroupV1.java:61)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)",,,,,,,,,,JDK-8304238,JDK-8304243,JDK-8310973,JDK-8304237,JDK-8304610,JDK-8300104,,,,,,,,,,,,,,,,,,JDK-8297274,,,,,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,,"0|i2zr5f:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-30 03:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11805
Date: 2022-12-30 11:47:03 +0000;;;","2023-01-02 03:18;dukebot;Changeset: 95d4db3a
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2023-01-02 11:16:18 +0000
URL:       https://git.openjdk.org/jdk/commit/95d4db3a92228d0211fa369c7d12d54234b22f72
;;;","2023-01-11 00:15;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well because the issue is present there too. The patch is low risk and backport is clean.;;;","2023-01-11 00:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1054
Date: 2023-01-11 08:13:03 +0000;;;","2023-01-19 03:08;sgehwolf;Coping this here for posterity:

While investigating a duplicate bug (JDK-8297274), I've noticed that since JDK-8194232 on systems with swap-account=0 the memory.memsw.limit_in_bytes file doesn't exist and since the GET_CONTAINER_INFO macro reads values as julong it actually prints something like this (when it returns OS_CONTAINER_ERROR == -2) with debug logging:

[0.261s][debug][os,container] Open of file /sys/fs/cgroup/memory/memory.memsw.limit_in_bytes failed, No such file or directory
[0.261s][trace][os,container] Memory and Swap Limit is: 18446744073709551614
memory_and_swap_limit_in_bytes: not supported

Note the huge value for ""Memory and Swap Limit is:"". 18446744073709551614 == ((julong)-2). After the macro its converted back to jlong and, thus shows up as -2 (not supported).  That explains the huge integer. I've filed JDK-8300645 to correct this situation.;;;","2023-06-22 08:32;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed;;;","2023-06-22 08:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1997
Date: 2023-06-22 15:33:33 +0000;;;",,,,,,,,,,,,,,
JVMTI FollowReferences should support references from VirtualThread stack,JDK-8299414,5090386,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,webbuggrp,webbuggrp,2022-12-23 12:38,2023-05-31 23:25,2023-10-01 09:56,2023-05-24 13:27,19,20,,,,,,21,hotspot,,0,capbug,loom,,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
Ubunu 22.10 x86_64 
openjdk version ""20-ea"" 2023-03-21
OpenJDK Runtime Environment (build 20-ea+29-2280)
OpenJDK 64-Bit Server VM (build 20-ea+29-2280, mixed mode, sharing)

A DESCRIPTION OF THE PROBLEM :
Objects only referenced by the stack of unmounted VirtualThreads are not visit in any way. Maybe this could be done as a new kind of instance reference of StackChunk or as a new synthetic root. This functionality would be necessary for a JVMTI-based heap dump.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
With the attached sources and JAVA_HOME set to a JDK 20:

g++ -shared -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC VThreadStackRefTest.cpp -o libVThreadStackRefTest.so 

$JAVA_HOME/bin/javac --enable-preview --release=20 VThreadStackRefTest.java

LD_LIBRARY_PATH=. $JAVA_HOME/bin/java --enable-preview -agentlib:VThreadStackRefTest VThreadStackRefTest 

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The test should exit with 0.
ACTUAL -
The test shows ""did not find expected references: VThreadReferenced: 0, PThreadReferenced: 1"" and exits with 1.

---------- BEGIN SOURCE ----------
-- VThreadStackRefTest.java ----------------------------------------------------------- 
import java.util.concurrent.CountDownLatch;

public class VThreadStackRefTest {
    private static native int[] getReferenceCount(Class<?>... classes);

    public static void main(String[] args) throws InterruptedException {
        CountDownLatch dumpedLatch = new CountDownLatch(1);
        Thread vthread = Thread.ofVirtual().start(() -> {
            Object referenced = new VThreadReferenced();
            System.out.println(referenced.getClass());
            await(dumpedLatch);
            System.out.println(referenced.getClass());
        });
        Thread pthread = Thread.ofPlatform().start(() -> {
            Object referenced = new PThreadReferenced();
            System.out.println(referenced.getClass());
            await(dumpedLatch);
            System.out.println(referenced.getClass());
        });
        Thread.sleep(2000); // wait for reference and unmount
        int[] count = getReferenceCount(VThreadReferenced.class, PThreadReferenced.class);
        dumpedLatch.countDown();
        vthread.join();
        pthread.join();
        if (count[0] != 1 || count[1] != 1) {
            System.err.println(""did not find expected references: VThreadReferenced: "" + count[0] + "", PThreadReferenced: "" + count[1]);
            System.exit(1);
        }
    }

    private static void await(CountDownLatch dumpedLatch) {
        try {
            dumpedLatch.await();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    public static class VThreadReferenced {
    }
    public static class PThreadReferenced {
    }
}
--------------------------------------------------------------------------------------
-- VThreadStackRefTest.cpp -----------------------------------------------------------
#include <jvmti.h>
#include <cstdlib>
#include <cstring>

namespace {
    jvmtiEnv *jvmti = nullptr;

    void checkJvmti(int code, const char* message) {
        if (code != JVMTI_ERROR_NONE) {
            printf(""Error %s: %d\n"", message, code);
            abort();
        }
    }

    const int TAG_START = 100;
}

jint JNICALL testJvmtiHeapReferenceCallback(jvmtiHeapReferenceKind reference_kind, const jvmtiHeapReferenceInfo* reference_info,
    jlong class_tag, jlong referrer_class_tag, jlong size, jlong* tag_ptr, jlong* referrer_tag_ptr, jint length, void* user_data) {
    if (class_tag >= TAG_START) {
        ((jint*)user_data)[class_tag - TAG_START]++;
    }
    return JVMTI_VISIT_OBJECTS;
}

extern ""C"" JNIEXPORT jintArray JNICALL Java_VThreadStackRefTest_getReferenceCount(JNIEnv* env, jclass clazz, jobjectArray classes) {
    int classesCount = env->GetArrayLength(classes);
    for (int i=0; i<classesCount; i++) {
        jvmti->SetTag(env->GetObjectArrayElement(classes, i), TAG_START + i);
    }
    jint* counter = new jint[classesCount];
    jvmtiHeapCallbacks heapCallBacks;
    memset(&heapCallBacks, 0, sizeof(jvmtiHeapCallbacks));
    heapCallBacks.heap_reference_callback = testJvmtiHeapReferenceCallback;
    checkJvmti(jvmti->FollowReferences(0, nullptr, nullptr, &heapCallBacks, counter), ""follow references"");
    jintArray result = env->NewIntArray(classesCount);
    env->SetIntArrayRegion(result, 0, classesCount, counter);
    return result;
}

extern ""C"" JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *options, void *reserved) {
    if (vm->GetEnv(reinterpret_cast<void **>(&jvmti), JVMTI_VERSION) != JNI_OK || !jvmti) {
        printf(""Could not initialize JVMTI\n"");
        abort();
    }
    jvmtiCapabilities capabilities;
    memset(&capabilities, 0, sizeof(capabilities));
    capabilities.can_tag_objects = 1;
    checkJvmti(jvmti->AddCapabilities(&capabilities), ""adding capabilities"");
    return JVMTI_ERROR_NONE;
}

--------------------------------------------------------------------------------------

---------- END SOURCE ----------

FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299426,JDK-8306027,JDK-8308978,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zqib:",9223372036854775807,b25,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-12-29 09:21;alanb;This is currently missing from the JVMTI support so FollowReference does not currently report stack local references from unmounted virtual threads.;;;","2023-01-05 09:10;sspitsyn;Targeted to 21 for now to keep it under radar. ;;;","2023-05-06 02:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13254
Date: 2023-03-30 22:58:12 +0000;;;","2023-05-24 13:27;dukebot;Changeset: 207fbcb0
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2023-05-24 20:26:10 +0000
URL:       https://git.openjdk.org/jdk/commit/207fbcb08319c4cae976fc5248780d4b438ae5f9
;;;",,,,,,,,,,,,,,,,,
JNI call of getAccessibleActionCount on a wrong thread,JDK-8299412,5090477,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenov,asemenov,asemenov,2022-12-29 06:36,2023-01-11 23:01,2023-10-01 09:56,2023-01-05 23:10,19,20,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,"[CommonComponentAccessibility getActionsWithEnv:] defines the getAccessibleActionCount method on the AccessibleAction class, however the call should go through CAccessibility so that it is executed on the Event Dispatch thread.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2zr2j:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-12-29 08:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11803
Date: 2022-12-29 15:54:43 +0000;;;","2023-01-05 23:10;dukebot;Changeset: 775da84a
Author:    Artem Semenov <asemenov@openjdk.org>
Date:      2023-01-06 07:09:05 +0000
URL:       https://git.openjdk.org/jdk/commit/775da84a84770696495561277eb040f53260ecaf
;;;",,,,,,,,,,,,,,,,,,,
[11u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 11.0.18,JDK-8299393,5090452,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-12-28 13:56,2023-01-18 04:28,2023-10-01 09:56,2023-01-18 02:00,11.0.18,,,,,,,11.0.18,infrastructure,,0,,,,,,,,,,,,,,,,"As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.",,,,,,,,,,JDK-8300521,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zqwz:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2023-01-18 02:00;dukebot;Changeset: 50b30394
Author:    Christoph Langer <christoph.langer@sap.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-01-10 09:32:35 +0000
URL:       https://git.openjdk.org/jdk11u/commit/50b3039415616831fdd96c36df0a42f00fea60ea
;;;",,,,,,,,,,,,,,,,,,,,
[17u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 17.0.6,JDK-8299392,5090451,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,clanger,clanger,clanger,2022-12-28 13:55,2023-01-19 02:16,2023-10-01 09:56,2023-01-18 01:42,17.0.6,,,,,,,17.0.6,infrastructure,,0,,,,,,,,,,,,,,,,"As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels. ",,,,,,,,,,JDK-8300511,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300642,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zqwr:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@271b8dfc,,,,,,,,,"2023-01-18 01:42;dukebot;Changeset: 2fe42855
Author:    Christoph Langer <christoph.langer@sap.com>
Committer: Christoph Langer <clanger@openjdk.org>
Date:      2023-01-10 14:21:55 +0000
URL:       https://git.openjdk.org/jdk17u/commit/2fe42855c48c49b515b97312ce64a5a8ef3af407
;;;",,,,,,,,,,,,,,,,,,,,
java/util/regex/NegativeArraySize.java fails on Alpine and sometimes Windows,JDK-8299388,5090445,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-12-28 01:02,2023-03-24 07:05,2023-10-01 09:56,2022-12-29 23:46,20,21,,,,,,21,core-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,ursqe-triaged,,,,,,,,,,,,"The test java/util/regex/NegativeArraySize.java seems to have high memory requirements, and these requirements lead to some errors.
On Alpine Linux we run regularly into this error when executing the test:
result: Failed. Unexpected exit from test [exit code: 137]
This seems to be OOM related.
Maybe we should avoid running the test on Alpine.

On Windows the test usually works, but seems to depend as well on the memory situation of the machine.
Once we got this error recently :
OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000006c0000000, 5368709120, 0) failed; error='The paging file is too small for this operation to complete' (DOS error/errno=1455)
OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000006c0000000, 5368709120, 0) failed; error='The paging file is too small for this operation to complete' (DOS error/errno=1455)
result: Failed. Unexpected exit from test [exit code: 1]

The hs_err file generated  showed :
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 5368709120 bytes for G1 virtual space
# Possible reasons:
#   The system is out of physical RAM or swap space
#   The process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap",,,,,,,,,,JDK-8299573,JDK-8300045,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zqvf:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@557d5cff,,,,,,,,,"2022-12-28 04:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11796
Date: 2022-12-28 12:19:16 +0000;;;","2022-12-29 23:46;dukebot;Changeset: c2e3d728
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-12-30 07:43:32 +0000
URL:       https://git.openjdk.org/jdk/commit/c2e3d7284814cd6b49f44b4de18e0f92310422b0
;;;","2023-01-10 07:54;mbaesken;jdk17 backport request
I would like to have the patch in jdk17 as well because the issue is present there too (and to be on the same level Oracle JDK17 has).  The patch is low risk and backport is clean.;;;","2023-01-10 08:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1050
Date: 2023-01-10 15:47:42 +0000;;;",,,,,,,,,,,,,,,,,
CompressedClassPointers.java still fails on ppc with 'Narrow klass shift: 0' missing,JDK-8299387,5090444,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-12-28 00:21,2023-01-05 03:03,2023-10-01 09:56,2022-12-28 06:25,20,21,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,"We see the following error on ppc64 :
java.lang.RuntimeException: 'Narrow klass shift: 0' missing from stdout/stderr
	at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:221)
	at CompressedClassPointers.largeHeapAbove32GTest(CompressedClassPointers.java:130)

This seems to be related to the issue discussed here https://bugs.openjdk.org/browse/JDK-8283249",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283249,,,,,,,,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,,"0|i2zqv7:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-28 00:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11795
Date: 2022-12-28 08:45:16 +0000;;;","2022-12-28 06:24;dukebot;Changeset: 6f85a9c9
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-12-28 14:22:43 +0000
URL:       https://git.openjdk.org/jdk/commit/6f85a9c9a8ea3f76575acb4964cd80219822f073
;;;",,,,,,,,,,,,,,,,,,,
[PPC64] GetStackTraceSuspendedStressTest tries to deoptimize frame with invalid fp,JDK-8299375,5090432,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rrich,mdoerr,mdoerr,2022-12-27 08:13,2023-04-27 04:28,2023-10-01 09:56,2023-03-17 01:46,20,21,,,,,,21,hotspot,,0,c1,deoptimization,loom,oraclejdk-na,oracle-triage-21,,,,,,,,,,,"Symptom
========

The VM runs into the following assertion:
#  Internal Error (jdk/src/hotspot/cpu/ppc/frame_ppc.inline.hpp:80), pid=32736, tid=32774
#  assert(_on_heap || (is_aligned(_sp, alignment_in_bytes) || is_interpreted_frame()) && is_aligned(_fp, alignment_in_bytes)) failed: invalid alignment ... fp:0xfffffffffffffffe (which matches ""badAddress"")

Stack:
V  [libjvm.so+0x6976d8]  frame::setup()+0x3b0  (frame_ppc.inline.hpp:80)
V  [libjvm.so+0x6978b8]  frame::frame(long*, unsigned char*, long*, long*, CodeBlob*)+0x9c  (frame_ppc.inline.hpp:97)
V  [libjvm.so+0xac5f34]  frame::patch_pc(Thread*, unsigned char*)+0x45c  (frame_ppc.cpp:266)
V  [libjvm.so+0xab748c]  frame::deoptimize(JavaThread*)+0x228  (frame.cpp:350)
V  [libjvm.so+0x8eedbc]  ThawBase::recurse_thaw_compiled_frame(frame const&, frame&, int, bool)+0x838  (continuationFreezeThaw.cpp:2241)
V  [libjvm.so+0x8ed8b4]  ThawBase::recurse_thaw(frame const&, frame&, int, bool)+0x29c  (continuationFreezeThaw.cpp:2018)
V  [libjvm.so+0x8fe4a8]  bool ThawBase::recurse_thaw_java_frame<ContinuationHelper::InterpretedFrame>(frame&, int)+0x2b4  (continuationFreezeThaw.cpp:2046)
V  [libjvm.so+0x8edf94]  ThawBase::recurse_thaw_interpreted_frame(frame const&, frame&, int)+0xf0  (continuationFreezeThaw.cpp:2135)
V  [libjvm.so+0x8ed8d0]  ThawBase::recurse_thaw(frame const&, frame&, int, bool)+0x2b8  (continuationFreezeThaw.cpp:2020)
V  [libjvm.so+0x8ed4ec]  ThawBase::thaw_slow(stackChunkOopDesc*, bool)+0x2ec  (continuationFreezeThaw.cpp:1994)
V  [libjvm.so+0x90df1c]  Thaw<Config<(oop_kind)0, CardTableBarrierSet> >::thaw(Continuation::thaw_kind)+0x24c  (continuationFreezeThaw.cpp:1788)
V  [libjvm.so+0x904908]  long* thaw_internal<Config<(oop_kind)0, CardTableBarrierSet> >(JavaThread*, Continuation::thaw_kind)+0x3c4  (continuationFreezeThaw.cpp:2392)
V  [libjvm.so+0x9034a0]  Config<(oop_kind)0, CardTableBarrierSet>::thaw(JavaThread*, Continuation::thaw_kind)+0x38  (continuationFreezeThaw.cpp:270)
V  [libjvm.so+0x8f1050]  long* thaw<Config<(oop_kind)0, CardTableBarrierSet> >(JavaThread*, int)+0x74  (continuationFreezeThaw.cpp:247)
v  ~BufferBlob::StubRoutines (3) 0x0000200010376844
J 489 c1 jdk.internal.vm.Continuation.run()V java.base@21-internal (586 bytes) @ 0x0000200010d93084 [0x0000200010d92e80+0x0000000000000204]

Issue is reproducible (not always, but most of the time) with JDK 20 and 21:
make run-test TEST=""serviceability/jvmti/stress/StackTrace/Suspended/GetStackTraceSuspendedStressTest.java"" JTREG=""VM_OPTIONS=-XX:TieredStopAtLevel=1""

JDK-8286302 uses ""patch_callee_link(hf, (intptr_t*)badAddress);"" which doesn't work for the usage given by the stack trace.

Analysis
========

- The frame that get's deoptimized is not fully initialized.

- The backlink will be initialized later because it is not yet known if the frame will be extended for its callee

- The backlink was set to `badAddress` (0xfffffffffffffffe) when the frame was frozen

- `badAddress` is not 16 byte aligned which causes the assertion

- can be reproduce with the following command
  make test TEST=serviceability/jvmti/stress/StackTrace/Suspended/GetStackTraceSuspendedStressTest.java \
                 TEST_VM_OPTS=""-Xcomp -XX:CompileCommand=compileonly,GetStackTraceSuspendedStressTest::*""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286302,,,,,,,,,,,,,,ppc,,,,,,,,,,,,,,,"0|i2zqsj:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-03 00:40;chagedorn;ILW = Deoptimizing frame with invalid fp in stress test on PPC with C1, only one test and with PPC and intermittent, no workaround = MLH = P4;;;","2023-01-11 22:43;thartmann;Hi [~mdoerr], do you intend to work on this or should it be assigned to someone else? (We just try to keep all targeted bugs assigned).;;;","2023-01-17 20:54;mdoerr;Hi [~rrich], I think you wanted to work on this issue. (Correct me if I'm wrong.) I just assigned it to you.;;;","2023-01-18 00:39;rrich;Hi Martin,
sorry, I should have assigned the ticket to me as I've already started to work on it.
I think the problem is that the frame just copied from the heap to the stack is not yet complete (missing backlink) when it gets deoptimized.
Unfortunately I haven't been able to reproduce the issue yet.
Cheers, Richard.;;;","2023-03-14 03:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12941
Date: 2023-03-09 10:46:05 +0000;;;","2023-03-17 01:46;dukebot;Changeset: 9d518c52
Author:    Richard Reingruber <rrich@openjdk.org>
Date:      2023-03-17 08:45:17 +0000
URL:       https://git.openjdk.org/jdk/commit/9d518c528b11953b556aa7585fc69ff9c9a22435
;;;",,,,,,,,,,,,,,,
Size-restricted window can be observed with incorrect dimensions,JDK-8299348,5090404,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mstrauss,mstrauss,mstrauss,2022-12-25 18:55,2023-06-24 08:42,2023-10-01 09:56,2023-06-21 09:11,jfx19,,,,,,,jfx21,javafx,,0,,,,,,,,,,,,,,,,"On Windows, a `Stage` that is restricted by minimum and maximum sizes can briefly be observed to appear with incorrect dimensions when it is first shown.

Visually, this can manifest in incorrect window dimensions (see frame1a.jpg) or incorrect `Scene` dimensions (see frame1b.jpg) for the first few frames of the window opening animation. After a few frames, the window is rendered correctly (see frame2.jpg).

Programmatically, the bug can be observed when the current window size is queried from `Window.onShowing` and `Window.onShown` event handlers.

Here is a test program:

    @Override
    public void start(Stage stage) {
        var root = new BorderPane();
        var rect1 = new Rectangle(20, 20, Color.BLUE);
        root.setRight(rect1);
        var rect2 = new Rectangle(20, 20, Color.GREEN);
        root.setLeft(rect2);
        var rect3 = new Rectangle(20, 20, Color.PURPLE);
        BorderPane.setAlignment(rect3, Pos.BOTTOM_RIGHT);
        root.setBottom(rect3);

        stage.initStyle(StageStyle.DECORATED);
        stage.setMinWidth(300);
        stage.setMinHeight(200);
        stage.setScene(new Scene(root));
        stage.setOnShowing(event -> System.out.println(""width on showing: "" + stage.getWidth()));
        stage.setOnShown(event -> System.out.println(""width on shown: "" + stage.getWidth()));
        stage.show();
    }

This is the output of the program:
    width on showing: NaN
    width on shown: 56.0

Whereas this is the expected output:
    width on showing: NaN
    width on shown: 300.0

The root cause of this bug is that the native WinWindow._setBounds method doesn't respect min/max sizes when calculating the window rect.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8310846,JDK-8310845,,,,"2022-12-25 17:38;mstrauss;frame1a.jpg;https://bugs.openjdk.org/secure/attachment/102168/frame1a.jpg","2022-12-25 17:38;mstrauss;frame1b.jpg;https://bugs.openjdk.org/secure/attachment/102167/frame1b.jpg","2022-12-25 17:38;mstrauss;frame2.jpg;https://bugs.openjdk.org/secure/attachment/102166/frame2.jpg",,,,,,,,,,,,,,,,,,,,,,"0|i2zqmb:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2022-12-25 19:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/984
Date: 2022-12-26 03:03:50 +0000;;;","2023-06-21 09:11;dukebot;Changeset: a17a7145
Author:    Michael Strauß <mstrauss@openjdk.org>
Date:      2023-06-21 16:10:32 +0000
URL:       https://git.openjdk.org/jfx/commit/a17a71458def91d206844b7d64e185af75a3c6e0
;;;",,,,,,,,,,,,,,,,,,,
AssertionError in ResponseSubscribers$HttpResponseInputStream::onSubscribe,JDK-8299338,5090394,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dcubed,dcubed,2022-12-23 19:56,2023-07-21 07:35,2023-10-01 09:56,2023-02-22 04:45,21,,,,,,,21,core-libs,,0,hhtpclient,tier2,,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

java/net/httpclient/AsyncExecutorShutdown.java

Here's a snippet from the log file:

---- starting (http://localhost:63763/http2/exec/retry) ----
Iteration 0 request: http://localhost:63763/http2/exec/retry/concurrent/iteration-0
0: sleeping 2 ms
Iteration 1 request: http://localhost:63763/http2/exec/retry/concurrent/iteration-1
1: sleeping 3 ms
Iteration 2 request: http://localhost:63763/http2/exec/retry/concurrent/iteration-2
2: sleeping 4 ms
Http2TestContext::handle Http2TestExchangeImpl: Http2TestExchangeImpl@1e1c07a9
Http2TestContext::handle Http2TestExchangeImpl: Http2TestExchangeImpl@779c9ed
ServerRequestHandler for: http://localhost:63763/http2/exec/retry/concurrent/iteration-0
ServerRequestHandler for: http://localhost:63763/http2/exec/retry/concurrent/iteration-1
2: shutting down executor now
0: Got expected exception: java.util.concurrent.RejectedExecutionException: Task jdk.internal.net.http.SocketTube$InternalWriteSubscriber$$Lambda$268/0x0000000801139d98@21cf1474 rejected from java.util.concurrent.ThreadPoolExecutor@48624fcc[Shutting down, pool size = 3, active threads = 3, queued tasks = 0, completed tasks = 17]
0: checking java.util.concurrent.RejectedExecutionException: Task jdk.internal.net.http.SocketTube$InternalWriteSubscriber$$Lambda$268/0x0000000801139d98@21cf1474 rejected from java.util.concurrent.ThreadPoolExecutor@48624fcc[Shutting down, pool size = 3, active threads = 3, queued tasks = 0, completed tasks = 17]
0: Got expected RejectedExecutionException in cause: java.util.concurrent.RejectedExecutionException: Task jdk.internal.net.http.SocketTube$InternalWriteSubscriber$$Lambda$268/0x0000000801139d98@21cf1474 rejected from java.util.concurrent.ThreadPoolExecutor@48624fcc[Shutting down, pool size = 3, active threads = 3, queued tasks = 0, completed tasks = 17]
1:  Got response: (GET http://localhost:63763/http2/exec/retry/concurrent/iteration-1) 200
1: Got expected exception: java.io.UncheckedIOException: java.io.IOException: closed
1: Got expected exception: java.io.UncheckedIOException: java.io.IOException: closed
1: checking java.io.IOException: closed
2: Got expected exception: java.util.concurrent.RejectedExecutionException: Task jdk.internal.net.http.SocketTube$InternalWriteSubscriber$$Lambda$268/0x0000000801139d98@21cf1474 rejected from java.util.concurrent.ThreadPoolExecutor@48624fcc[Shutting down, pool size = 3, active threads = 3, queued tasks = 0, completed tasks = 17]
1: checking java.lang.AssertionError
2: checking java.util.concurrent.RejectedExecutionException: Task jdk.internal.net.http.SocketTube$InternalWriteSubscriber$$Lambda$268/0x0000000801139d98@21cf1474 rejected from java.util.concurrent.ThreadPoolExecutor@48624fcc[Shutting down, pool size = 3, active threads = 3, queued tasks = 0, completed tasks = 17]
2: Got expected RejectedExecutionException in cause: java.util.concurrent.RejectedExecutionException: Task jdk.internal.net.http.SocketTube$InternalWriteSubscriber$$Lambda$268/0x0000000801139d98@21cf1474 rejected from java.util.concurrent.ThreadPoolExecutor@48624fcc[Shutting down, pool size = 3, active threads = 3, queued tasks = 0, completed tasks = 17]
test AsyncExecutorShutdown.testConcurrent(""http://localhost:63763/http2/exec/retry""): failure
java.util.concurrent.ExecutionException: java.lang.AssertionError: 1: Unexpected exception: java.io.IOException: closed
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:396)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2073)
	at AsyncExecutorShutdown.testConcurrent(AsyncExecutorShutdown.java:226)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.lang.AssertionError: 1: Unexpected exception: java.io.IOException: closed
	at AsyncExecutorShutdown.checkCause(AsyncExecutorShutdown.java:160)
	at AsyncExecutorShutdown.lambda$testConcurrent$2(AsyncExecutorShutdown.java:221)
	at java.base/java.util.concurrent.CompletableFuture.uniExceptionally(CompletableFuture.java:990)
	at java.base/java.util.concurrent.CompletableFuture$UniExceptionally.tryFire(CompletableFuture.java:974)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.postFire(CompletableFuture.java:614)
	at java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:653)
	at java.base/java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:482)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	... 1 more
Caused by: java.io.IOException: closed
	at java.net.http/jdk.internal.net.http.ResponseSubscribers$HttpResponseInputStream.current(ResponseSubscribers.java:448)
	at java.net.http/jdk.internal.net.http.ResponseSubscribers$HttpResponseInputStream.read(ResponseSubscribers.java:508)
	at java.base/java.io.InputStream.readNBytes(InputStream.java:409)
	at java.base/java.io.InputStream.readAllBytes(InputStream.java:346)
	at AsyncExecutorShutdown.readBody(AsyncExecutorShutdown.java:134)
	at java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:646)
	... 7 more
Caused by: java.lang.AssertionError
	at java.net.http/jdk.internal.net.http.ResponseSubscribers$HttpResponseInputStream.onSubscribe(ResponseSubscribers.java:560)
	at java.net.http/jdk.internal.net.http.common.HttpBodySubscriberWrapper.onSubscribe(HttpBodySubscriberWrapper.java:200)
	at java.net.http/jdk.internal.net.http.Stream.schedule(Stream.java:180)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.Stream.receiveData(Stream.java:423)
	at java.net.http/jdk.internal.net.http.Stream.readBodyAsync(Stream.java:328)
	at java.net.http/jdk.internal.net.http.Exchange.readBodyAsync(Exchange.java:211)
	at java.net.http/jdk.internal.net.http.MultiExchange.lambda$responseAsync0$4(MultiExchange.java:354)
	at java.base/java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:1150)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2179)
	at java.net.http/jdk.internal.net.http.Stream.completeResponse(Stream.java:1148)
	at java.net.http/jdk.internal.net.http.Stream.handleResponse(Stream.java:530)
	at java.net.http/jdk.internal.net.http.Stream.incoming(Stream.java:469)
	at java.net.http/jdk.internal.net.http.Http2Connection.processFrame(Http2Connection.java:871)
	at java.net.http/jdk.internal.net.http.frame.FramesDecoder.decode(FramesDecoder.java:155)
	at java.net.http/jdk.internal.net.http.Http2Connection$FramesController.processReceivedData(Http2Connection.java:265)
	at java.net.http/jdk.internal.net.http.Http2Connection.asyncReceive(Http2Connection.java:714)
	at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.processQueue(Http2Connection.java:1440)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	... 3 more",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302852,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2zqk3:",9223372036854775807,b11,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-02-20 02:31;dfuchs;Here is a more informative assertion:

Caused by: java.lang.AssertionError: buffers capacity: 1 closed: false failed: java.io.IOException: selector manager closed
	at java.net.http/jdk.internal.net.http.ResponseSubscribers$HttpResponseInputStream.onSubscribe(ResponseSubscribers.java:564)
	at java.net.http/jdk.internal.net.http.common.HttpBodySubscriberWrapper.onSubscribe(HttpBodySubscriberWrapper.java:387)
	at java.net.http/jdk.internal.net.http.Stream.schedule(Stream.java:181)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.Stream.receiveData(Stream.java:424)
	at java.net.http/jdk.internal.net.http.Stream.readBodyAsync(Stream.java:329)
	at java.net.http/jdk.internal.net.http.Exchange.readBodyAsync(Exchange.java:211)
	at java.net.http/jdk.internal.net.http.MultiExchange.lambda$responseAsync0$4(MultiExchange.java:354)
	at java.base/java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:1150)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2179)
	at java.net.http/jdk.internal.net.http.Stream.completeResponse(Stream.java:1163)
	at java.net.http/jdk.internal.net.http.Stream.handleResponse(Stream.java:536)
	at java.net.http/jdk.internal.net.http.Stream.incoming(Stream.java:470)
	at java.net.http/jdk.internal.net.http.Http2Connection.processFrame(Http2Connection.java:877)
	at java.net.http/jdk.internal.net.http.frame.FramesDecoder.decode(FramesDecoder.java:155)
	at java.net.http/jdk.internal.net.http.Http2Connection$FramesController.processReceivedData(Http2Connection.java:267)
	at java.net.http/jdk.internal.net.http.Http2Connection.asyncReceive(Http2Connection.java:721)
	at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.processQueue(Http2Connection.java:1450)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	... 3 more
;;;","2023-02-20 11:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12677
Date: 2023-02-20 19:48:19 +0000;;;","2023-02-22 04:45;dukebot;Changeset: 57548480
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-02-22 12:43:55 +0000
URL:       https://git.openjdk.org/jdk/commit/575484806ce11634d4fa8bef6c0c5987e4e0a1c7
;;;",,,,,,,,,,,,,,,,,,
The java.awt.image.ColorModel#pData field is unused,JDK-8299337,5090392,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-12-23 19:47,2023-02-06 05:46,2023-10-01 09:56,2023-01-06 15:10,17,21,,,,,,21,client-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,"I have found that we store the native pointer in the ""java.awt.image.ColorModel#pData"" field and never update/clean it. We can check how and when the native data is deallocated and reset the pointer, but it will be easy just to delete the field as unused.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8301869,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zqjn:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-12-24 03:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11785
Date: 2022-12-24 03:49:38 +0000;;;","2023-01-06 15:10;dukebot;Changeset: 73101314
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-01-06 23:09:07 +0000
URL:       https://git.openjdk.org/jdk/commit/7310131409d3be351e780696173e7354ab51e467
;;;",,,,,,,,,,,,,,,,,,,
Unify exceptions used by all variants of ICC_Profile.getInstance(null),JDK-8299333,5090384,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-12-23 11:33,2023-04-05 23:16,2023-10-01 09:56,2023-03-30 09:14,17,21,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,"We have 3 ""ICC_Profile.getInstance()""  methods which throw 3 different exceptions when null is passed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300804,,,,,JDK-6211108,JDK-6211105,,,,,,,,JDK-8305328,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zqhv:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-12-23 19:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11784
Date: 2022-12-23 23:32:45 +0000;;;","2023-03-30 09:14;dukebot;Changeset: d2df36b0
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-03-30 16:12:25 +0000
URL:       https://git.openjdk.org/jdk/commit/d2df36b073943fc85b169f09e32747ebe2ad0bfb
;;;",,,,,,,,,,,,,,,,,,,
Minor improvements in MSYS2 Workflow handling,JDK-8299330,5090381,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jwaters,jwaters,jwaters,2022-12-23 09:54,2023-08-31 08:09,2023-10-01 09:56,2023-01-12 06:34,11,17,21,,,,,21,infrastructure,,0,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,"MSYS2 should be more appropriately installed into the runner's temporary directory rather than inside the newly checked out repository containing all the JDK's source code, as doing so may interfere with the build process and cause weird corner cases in the submitted actions workflow. On windows, the bash it uses is also not run properly, which we should address",,,,,,,,,,JDK-8314398,JDK-8315472,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zqh7:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-12-23 10:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11782
Date: 2022-12-23 17:53:05 +0000;;;","2023-01-12 06:34;dukebot;Changeset: cf00d09c
Author:    Julian Waters <jwaters@openjdk.org>
Date:      2023-01-12 14:32:14 +0000
URL:       https://git.openjdk.org/jdk/commit/cf00d09c8c37ee301e1c6657df45777647a834e9
;;;","2023-08-14 01:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1659
Date: 2023-08-14 08:37:38 +0000;;;","2023-08-14 06:58;shade;Fix Request (17u)

Improves GHA stability. Applies cleanly.;;;","2023-08-30 02:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2103
Date: 2023-08-30 09:49:22 +0000;;;","2023-08-30 10:04;shade;Fix Request (11u)

Same reason as for 17u: improves GHA reliability. Applies cleanly. GHA passes.;;;",,,,,,,,,,,,,,,
Assertion failure with fastdebug build when trying to use CDS without classpath,JDK-8299329,5090379,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asmehra,asmehra,asmehra,2022-12-23 08:44,2023-01-11 23:00,2023-10-01 09:56,2023-01-05 08:12,21,,,,,,,21,hotspot,,0,cds,,,,,,,,,,,,,,,"Steps to reproduce:

1. Create a CDS archive using a classpath:
$ java -Xshare:dump -Xlog:cds=info -XX:SharedArchiveFile=testcds.jsa -XX:ExtraSharedClassListFile=classlist -cp hello.jar HelloWorld

2. Try to use it without specifying any classpath:
$ java -Xshare:on -XX:SharedArchiveFile=testcds.jsa -Xlog:cds=info HelloWorld

# To suppress the following error report, specify this argument
# after -XX: or in .hotspotrc:  SuppressErrorAt=/filemap.cpp:905
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/work/jdk/src/hotspot/share/cds/filemap.cpp:905), pid=526339, tid=526340
#  assert(strlen(rp_array->at(i)) > (size_t)runtime_prefix_len) failed: sanity
#
# JRE version:  (21.0) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.asmehra.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xc17085]  FileMapInfo::check_paths(int, int, GrowableArray<char const*>*, unsigned int, unsigned int) [clone .constprop.159]+0x305
#
# Core dump will be written. Default location: /work/jdk/core.526339
#
# An error report file with more information is saved as:
# /work/jdk/hs_err_pid526339.log
#
#
Aborted (core dumped)

Assertion failure happens at jdk/src/hotspot/share/cds/filemap.cpp:905
assert(strlen(rp_array->at(i)) > (size_t)runtime_prefix_len)

Reason for the failure is runtime_prefix_len is incorrectly computed to be 1 by longest_common_app_classpath_prefix_len() but it should be 0 when the classpath is not specified.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299699,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zqgr:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-23 08:51;dcubed;Why is Affects Version/s set to ""20"" when the report is for 21?

> # JRE version: (21.0) (fastdebug build )
> # Java VM: OpenJDK 64-Bit Server VM (fastdebug 21-internal-adhoc.asmehra.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64) ;;;","2022-12-23 08:58;asmehra;Updated the ""Affect Version"" to 21.;;;","2022-12-23 09:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11781
Date: 2022-12-23 17:11:28 +0000;;;","2023-01-05 08:12;dukebot;Changeset: be64bf8c
Author:    Ashutosh Mehra <asmehra@redhat.com>
Committer: Calvin Cheung <ccheung@openjdk.org>
Date:      2023-01-05 16:09:28 +0000
URL:       https://git.openjdk.org/jdk/commit/be64bf8cf085c17b8e405b9447357ae59ef21765
;;;",,,,,,,,,,,,,,,,,
"java/net/httpclient/CancelRequestTest.java fails ""test CancelRequestTest.testGetSendAsync(""https://localhost:46509/https1/x/same/interrupt"", true, true)""",JDK-8299325,5090374,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dcubed,dcubed,2022-12-23 05:59,2023-08-04 12:48,2023-10-01 09:56,2023-01-30 06:43,21,,,,,,,21,core-libs,,0,tier2,,,,,,,,,,,,,,,"The following test failed in the JDK21 CI:

java/net/httpclient/CancelRequestTest.java

Here's a snippet from the log file:

[1 s, 303 ms, 231796 ns]  testGetSendAsync(https://localhost:46509/https1/x/same/interrupt/get, true, true)
response: jdk.internal.net.http.common.MinimalFuture@671dc8b1[Not completed, 1 dependents] (id=830)
cf1: jdk.internal.net.http.common.MinimalFuture@6bf6d795[Not completed, 1 dependents] (id=832)
cf2: jdk.internal.net.http.common.MinimalFuture@9fd74fb[Not completed] (id=833)
client delay: 61
Server wrote 12 bytes
HTTPSlowHandler received request to /https1/x/same/interrupt/get
java.util.concurrent.CompletionException: java.util.concurrent.CancellationException: Request cancelled
response after cancel: jdk.internal.net.http.common.MinimalFuture@671dc8b1[Completed exceptionally: java.util.concurrent.CompletionException: java.util.concurrent.CancellationException: Request cancelled] (id=830)
cf1 after cancel: jdk.internal.net.http.common.MinimalFuture@6bf6d795[Completed exceptionally: java.util.concurrent.CompletionException: java.util.concurrent.CancellationException: Request cancelled] (id=832)
cf2 after cancel: jdk.internal.net.http.common.MinimalFuture@9fd74fb[Completed exceptionally: java.util.concurrent.CompletionException: java.util.concurrent.CancellationException: Request cancelled] (id=833)
Got expected exception: java.util.concurrent.ExecutionException: java.util.concurrent.CancellationException: Request cancelled
Got expected exception: java.util.concurrent.ExecutionException: java.util.concurrent.CancellationException: Request cancelled
CancellationException cause: java.util.concurrent.ExecutionException: java.util.concurrent.CancellationException: Request cancelled
Got expected exception: java.util.concurrent.CancellationException: Request cancelled
	cause: java.io.IOException: Request cancelled
Waiting for HTTP operations to terminate...
	gracedelay: 200 ms, iterations: 20, wait/iteration: 10ms
Server wrote 12 bytes
Server wrote 12 bytes
HTTPSlowHandler: unexpected exception: java.io.IOException: Broken pipe
HTTPSlowHandler reply sent: /http1/x/same/interrupt/get
WARNING: exception caught in HttpTestHandler::handle java.io.IOException: Broken pipe
java.io.IOException: Broken pipe
	at java.base/sun.nio.ch.SocketDispatcher.write0(Native Method)
	at java.base/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:62)
	at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:137)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:102)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:58)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:542)
	at jdk.httpserver/sun.net.httpserver.Request$WriteStream.write(Request.java:390)
	at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.writeChunk(ChunkedOutputStream.java:125)
	at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.flush(ChunkedOutputStream.java:159)
	at jdk.httpserver/sun.net.httpserver.PlaceholderOutputStream.flush(ExchangeImpl.java:469)
	at CancelRequestTest$HTTPSlowHandler.handle(CancelRequestTest.java:660)
	at HttpServerAdapters$HttpTestHandler.doHandle(HttpServerAdapters.java:382)
	at HttpServerAdapters$HttpTestHandler.lambda$toHttpHandler$0(HttpServerAdapters.java:375)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
	at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:101)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:868)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:835)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:204)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:567)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:533)
	at java.base/java.lang.Thread.run(Thread.java:1623)
	Suppressed: java.io.IOException: Broken pipe
		at java.base/sun.nio.ch.SocketDispatcher.write0(Native Method)
		at java.base/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:62)
		at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:137)
		at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:102)
		at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:58)
		at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:542)
		at jdk.httpserver/sun.net.httpserver.Request$WriteStream.write(Request.java:390)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.writeChunk(ChunkedOutputStream.java:125)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.flush(ChunkedOutputStream.java:159)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.close(ChunkedOutputStream.java:134)
		at jdk.httpserver/sun.net.httpserver.PlaceholderOutputStream.close(ExchangeImpl.java:474)
		at CancelRequestTest$HTTPSlowHandler.handle(CancelRequestTest.java:651)
		... 12 more
Server wrote 12 bytes
HTTPSlowHandler: unexpected exception: java.io.IOException: Broken pipe
HTTPSlowHandler reply sent: /https1/x/same/interrupt/get
WARNING: exception caught in HttpTestHandler::handle java.io.IOException: Broken pipe
java.io.IOException: Broken pipe
	at java.base/sun.nio.ch.SocketDispatcher.write0(Native Method)
	at java.base/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:62)
	at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:137)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:102)
	at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:58)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:542)
	at jdk.httpserver/sun.net.httpserver.SSLStreams$EngineWrapper.wrapAndSendX(SSLStreams.java:296)
	at jdk.httpserver/sun.net.httpserver.SSLStreams$EngineWrapper.wrapAndSend(SSLStreams.java:269)
	at jdk.httpserver/sun.net.httpserver.SSLStreams.sendData(SSLStreams.java:377)
	at jdk.httpserver/sun.net.httpserver.SSLStreams$OutputStream.write(SSLStreams.java:639)
	at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.writeChunk(ChunkedOutputStream.java:125)
	at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.flush(ChunkedOutputStream.java:159)
	at jdk.httpserver/sun.net.httpserver.PlaceholderOutputStream.flush(ExchangeImpl.java:469)
	at CancelRequestTest$HTTPSlowHandler.handle(CancelRequestTest.java:660)
	at HttpServerAdapters$HttpTestHandler.doHandle(HttpServerAdapters.java:382)
	at HttpServerAdapters$HttpTestHandler.lambda$toHttpHandler$0(HttpServerAdapters.java:375)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
	at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:101)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:868)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:833)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:204)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:567)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:533)
	at java.base/java.lang.Thread.run(Thread.java:1623)
	Suppressed: java.io.IOException: Broken pipe
		at java.base/sun.nio.ch.SocketDispatcher.write0(Native Method)
		at java.base/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:62)
		at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:137)
		at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:102)
		at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:58)
		at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:542)
		at jdk.httpserver/sun.net.httpserver.SSLStreams$EngineWrapper.wrapAndSendX(SSLStreams.java:296)
		at jdk.httpserver/sun.net.httpserver.SSLStreams$EngineWrapper.wrapAndSend(SSLStreams.java:269)
		at jdk.httpserver/sun.net.httpserver.SSLStreams.sendData(SSLStreams.java:377)
		at jdk.httpserver/sun.net.httpserver.SSLStreams$OutputStream.write(SSLStreams.java:639)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.writeChunk(ChunkedOutputStream.java:125)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.flush(ChunkedOutputStream.java:159)
		at jdk.httpserver/sun.net.httpserver.ChunkedOutputStream.close(ChunkedOutputStream.java:134)
		at jdk.httpserver/sun.net.httpserver.PlaceholderOutputStream.close(ExchangeImpl.java:474)
		at CancelRequestTest$HTTPSlowHandler.handle(CancelRequestTest.java:651)
		... 12 more
WARNING: tracker for HttpClientImpl(13) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 0
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true
AssertionError: Found some subscribers for testGetSendAsync(https://localhost:46509/https1/x/same/interrupt/get)
	 step [0] in HttpClientImpl(13) after 20 iterations and 494 ms, waited 200 ms
test CancelRequestTest.testGetSendAsync(""https://localhost:46509/https1/x/same/interrupt"", true, true): failure

<snip>

=========================

[1 s, 905 ms, 508531 ns] Created 4 servers and 13 clients
Failed tests: 
	testGetSendAsync[https://localhost:46509/https1/x/same/interrupt, true, true]: java.lang.AssertionError: WARNING: tracker for HttpClientImpl(13) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 0
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(13) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 0
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true
	at ReferenceTracker.check(ReferenceTracker.java:243)
	at CancelRequestTest.testGetSendAsync(CancelRequestTest.java:384)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

=========================

config CancelRequestTest.printFailedTests(org.testng.TestRunner@dd3e330): success
Waiting for HTTP operations to terminate...
	gracedelay: 500 ms, iterations: 50, wait/iteration: 10ms
No outstanding HTTP operations remaining after 1/50 iterations and 10/500 ms, (wait/iteration 10 ms)
PASSED: No outstanding operations or unreleased resources found in 13 clients in 26 ms
Http1TestServer: stop
Http1TestServer: stop
Http2TestServerImpl: stop
Http2TestServerImpl: stop
config CancelRequestTest.teardown(): success

===============================================
java/net/httpclient/CancelRequestTest.java
Total tests run: 56, Passes: 5, Failures: 1, Skips: 50
===============================================

----------System.err:(4828/508046)----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i2zqfn:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2023-01-26 11:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12233
Date: 2023-01-26 19:37:52 +0000;;;","2023-01-30 06:43;dukebot;Changeset: a74ebd04
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2023-01-30 14:41:59 +0000
URL:       https://git.openjdk.org/jdk/commit/a74ebd048ae569296619c112c23169c46b571863
;;;",,,,,,,,,,,,,,,,,,,
inline_native_setCurrentThread lacks GC barrier for Shenandoah,JDK-8299324,5090373,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,wkemper,eosterlund,eosterlund,2022-12-23 05:49,2023-08-01 04:44,2023-10-01 09:56,2023-02-06 11:55,20,21,,,,,,21,hotspot,,0,gc-shenandoah,loom,oracle-triage-21,,,,,,,,,,,,,"inline_native_setCurrentThread was added for loom. It should have been the first IN_NATIVE oop store in C2. Instead of interfacing this properly, a raw store was used. For Shenandoah, this is not enough. Shenandoah scans OopStorage concurrently, and therefore, SATB barriers are required, so the root snapshot is kept consistent.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313248,,,,,,,JDK-8299032,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zqff:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2023-01-03 00:35;chagedorn;ILW = inconsistent root snapshot for Shenandoah with Loom, only Shenandoah, no workaround = MLH = P4;;;","2023-01-03 03:24;rkennke;William, could you look at this, please?;;;","2023-01-09 14:02;wkemper;I've tried the naive change of just removing the assert from `BarrierSetC2::store_at_resolved`. I've run `hotspot_gc` and `hotspot_loom` tests without any errors. None of the gc jtreg tests exercise this code. Was the original assert meant to prevent card tables from seeing an oop that wouldn't be covered by any card? or?;;;","2023-01-25 16:42;wkemper;Shenandoah already overrides `store_at_resolved` which is  now invoked for `inline_native_setCurrentThread` after the changes for JDK-8299032 (https://github.com/openjdk/jdk/commit/e7fa150bc15b1bf5ab8921bfdf1a628ae08f5624).;;;","2023-01-25 21:29;eosterlund;While it’s true that Shenandoah does indeed override store_at_resolved, the very first thing that function does is to bail out if the access isn’t IN_HEAP, which an IN_NATIVE access is not. That implies that Shenandoah will just generate a raw access, which is kind of the problem I’m getting at. Even if tests are passing, this is wrong as long as these IN_NATIVE roots are scanned concurrently. For G1 it’s okay, because they are scanned STW. Getting the JVM to crash though because of this is exceptionally hard. For the missed barrier to cause a crash, this edge would have to be the last edge in the graph to a virtual thread, so that when the thread is set to the new current thread, the previous current thread isn’t kept alive, even though it’s part of the snapshot-at-the-beginning. And while that is a violation of the constraints of the concurrent marking algorithm, someone would have to store Thread.currentThread() into a field during concurrent marking as well, and the last edge in the Java heap to said thread would have to be removed just before marking started, so that it’s really just the root having a reference to the thread. I believe that is all possible, and that hence this isn’t sound unless the contract for SATB marking is honoured, and pre-write barriers are emitted as required by concurrent root processing.;;;","2023-01-25 23:05;chagedorn;I've changed the status to ""closed as dup"" instead of ""resolved"" as there is no change set. But please feel free to open this again as there seem to be more problems as pointed out by [~eosterlund].;;;","2023-01-26 10:49;wkemper;Reopening to address the issues pointed out by Erik. This isn't really a duplicate of JDK-8299032, but it is related.;;;","2023-01-30 14:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12300
Date: 2023-01-30 22:32:05 +0000;;;","2023-02-06 11:55;dukebot;Changeset: 3ac2bedd
Author:    William Kemper <wkemper@openjdk.org>
Committer: Paul Hohensee <phh@openjdk.org>
Date:      2023-02-06 19:53:20 +0000
URL:       https://git.openjdk.org/jdk/commit/3ac2beddbaa4e974f6d16d578505473a2e1d2a75
;;;",,,,,,,,,,,,
"Test ""java/awt/Dialog/ModalDialogTest/ModalDialogTest.java"" fails because new frame was not displayed when ""New Frame"" button was clicked",JDK-8299309,5090358,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,imttrieunq,imttrieunq,2022-12-23 02:05,2023-07-03 22:37,2023-10-01 09:56,2023-01-10 23:36,17.0.1,20,21,,,,,21,client-libs,,0,imt,testbug,ursqe-triaged,,,,,,,,,,,,,"OS:
Windows

Environments:
Operating System: Windows 10 Pro 64-bit
Language: English (Regional Setting: English)
Processor: Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz (4 CPUs), ~2.5GHz
Memory: 8 GB

Reproducible: Always

Failed on Release/Build: JDK 20 b27 
Is it a Regression in JDK 20 release: No
[If Regression] Regression introduced in JDK 20 release/build: N/A
Test result on the last GAed release for this train: Failed on JDK 19 b33
Is it a platform-specific issue: NO. This issue happens on Windows. Not tested on macOS and Linux yet.

General description of the problem:
Test ""java/awt/Dialog/ModalDialogTest/ModalDialogTest.java"" fails on Windows 10 x64 because New frame was not displayed when ""New Frame"" button was clicked

Affected tests:
java/awt/Dialog/ModalDialogTest/ModalDialogTest.java

Steps to reproduce:
1. Run command:  ksh /cygdrive/c/jtreg/bin/jtreg -testjdk:/cygdrive/c/jdk-20 -exclude:/cygdrive/c/reg/open/test/jdk/ProblemList.txt -verbose -gui -w resultsopen/JTwork -r resultsopen/report -manual /cygdrive/c/reg/open/test/jdk/:jdk_desktop
2. Run test case: java/awt/Dialog/ModalDialogTest/ModalDialogTest.java
3. Wait for the test to run completely

Expected behavior:
A new frame will display when the ""New Frame"" button is clicked

Actual behavior:
A new frame was not displayed when the ""New Frame"" button was clicked

Any non-default VM flags
-Dtest.vm.opts= \\
        -Dtest.tool.vm.opts= \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts= \\
        -Dtest.jdk='c:\\jdk-20' \\
        -Dcompile.jdk='c:\\jdk-20' \\
        -Dtest.timeout.factor=1.0 \\
        -Dtest.root='C:\\reg\\open\\test\\jdk' \\
        -Dtest.name=java/awt/Dialog/ModalDialogTest/ModalDialogTest.java \\
        -Dtest.file='C:\\reg\\open\\test\\jdk\\java\\awt\\Dialog\\ModalDialogTest\\ModalDialogTest.java' \\
        -Dtest.src='C:\\reg\\open\\test\\jdk\\java\\awt\\Dialog\\ModalDialogTest' \\
        -Dtest.src.path='C:\\reg\\open\\test\\jdk\\java\\awt\\Dialog\\ModalDialogTest;C:\\reg\\open\\test\\jdk\\java\\awt\\regtesthelpers' \\
        -Dtest.classes='C:\\cygwin64\\home\\trieunq\\resultsopen\\JTwork\\classes\\java\\awt\\Dialog\\ModalDialogTest\\ModalDialogTest.d' \\
        -Dtest.class.path='C:\\cygwin64\\home\\trieunq\\resultsopen\\JTwork\\classes\\java\\awt\\Dialog\\ModalDialogTest\\ModalDialogTest.d;C:\\cygwin64\\home\\trieunq\\resultsopen\\JTwork\\classes\\java\\awt\\regtesthelpers' \\
        -Dtest.modules=java.desktop \\
        --add-modules java.desktop \\
        com.sun.javatest.regtest.agent.MainWrapper 'C:\\cygwin64\\home\\trieunq\\resultsopen\\JTwork\\java\\awt\\Dialog\\ModalDialogTest\\ModalDialogTest.d\\main.0.jta'
result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Test failed! : Failure Reason:",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-12-23 01:54;imttrieunq;ModalDialogTest.jtr;https://bugs.openjdk.org/secure/attachment/102155/ModalDialogTest.jtr","2022-12-23 01:54;imttrieunq;ModalDialogTest.mp4;https://bugs.openjdk.org/secure/attachment/102156/ModalDialogTest.mp4",,,,,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2zqc3:",9223372036854775807,b05,,,,,,,,,,,"2022-12-23 03:45;aghaisas;Clicking the ""New Frame"" does not result in a new Frame being displayed. Observed on Windows & macOS as well.;;;","2023-01-05 09:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11859
Date: 2023-01-05 05:26:26 +0000;;;","2023-01-10 23:36;dukebot;Changeset: 95b102c9
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-01-11 07:35:30 +0000
URL:       https://git.openjdk.org/jdk/commit/95b102c9b1e6a46771f4bea0ca2101c05476172d
;;;",,,,,,,,,,,,,,,,,,
"Test ""javax/swing/JFileChooser/FileSystemView/CustomFSVLinkTest.java"" fails on Windows 10 x64 because there are some buttons did not display button name",JDK-8299306,5090355,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tr,imttrieunq,imttrieunq,2022-12-23 01:42,2023-08-08 21:23,2023-10-01 09:56,2023-01-05 23:53,19,20,,,,,,21,client-libs,,0,imt,sn_134,testbug,ursqe-triaged,,,,,,,,,,,,"OS:
Windows

Environments:
Operating System: Windows 10 Pro 64-bit
Language: English (Regional Setting: English)
Processor: Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz (4 CPUs), ~2.5GHz
Memory: 8 GB

Reproducible: Always

Failed on Release/Build: JDK 20 b27 
Is it a Regression in JDK 20 release: No
[If Regression] Regression introduced in JDK 20 release/build: N/A
Test result on the last GAed release for this train: Failed on JDK 19 b33
Is it a platform-specific issue: YES. This issue happens on Windows only.

General description of the problem:
Test ""javax/swing/JFileChooser/FileSystemView/CustomFSVLinkTest.java"" fails on Windows 10 x64 because there are some buttons did not display the button name.

Affected tests:
javax/swing/JFileChooser/FileSystemView/CustomFSVLinkTest.java

Steps to reproduce:
1. Run command:  ksh /cygdrive/c/jtreg/bin/jtreg -testjdk:/cygdrive/c/jdk-20 -exclude:/cygdrive/c/reg/open/test/jdk/ProblemList.txt -verbose -gui -w resultsopen/JTwork -r resultsopen/report -manual /cygdrive/c/reg/open/test/jdk/:jdk_desktop
2. Run test case: javax/swing/JFileChooser/FileSystemView/CustomFSVLinkTest.java
3. Wait for the test to run completely

Expected behavior:
Display the content of the buttons

Actual behavior:
The buttons did not display the button name

Any non-default VM flags
-Dtest.vm.opts= \\
        -Dtest.tool.vm.opts= \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts= \\
        -Dtest.jdk='c:\\jdk-20' \\
        -Dcompile.jdk='c:\\jdk-20' \\
        -Dtest.timeout.factor=1.0 \\
        -Dtest.root='C:\\reg\\open\\test\\jdk' \\
        -Dtest.name=javax/swing/JFileChooser/FileSystemView/CustomFSVLinkTest.java \\
        -Dtest.file='C:\\reg\\open\\test\\jdk\\javax\\swing\\JFileChooser\\FileSystemView\\CustomFSVLinkTest.java' \\
        -Dtest.src='C:\\reg\\open\\test\\jdk\\javax\\swing\\JFileChooser\\FileSystemView' \\
        -Dtest.src.path='C:\\reg\\open\\test\\jdk\\javax\\swing\\JFileChooser\\FileSystemView;C:\\reg\\open\\test\\jdk\\java\\awt\\regtesthelpers' \\
        -Dtest.classes='C:\\cygwin64\\home\\trieunq\\resultsopen\\JTwork\\classes\\javax\\swing\\JFileChooser\\FileSystemView\\CustomFSVLinkTest.d' \\
        -Dtest.class.path='C:\\cygwin64\\home\\trieunq\\resultsopen\\JTwork\\classes\\javax\\swing\\JFileChooser\\FileSystemView\\CustomFSVLinkTest.d;C:\\cygwin64\\home\\trieunq\\resultsopen\\JTwork\\classes\\java\\awt\\regtesthelpers' \\
        -Dtest.modules=java.desktop \\
        --add-modules java.desktop \\
        com.sun.javatest.regtest.agent.MainWrapper 'C:\\cygwin64\\home\\trieunq\\resultsopen\\JTwork\\javax\\swing\\JFileChooser\\FileSystemView\\CustomFSVLinkTest.d\\main.0.jta'
result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Test failed! : Failure Reason:",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-12-23 01:16;imttrieunq;CustomFSVLinkTest.jtr;https://bugs.openjdk.org/secure/attachment/102151/CustomFSVLinkTest.jtr","2022-12-23 01:16;imttrieunq;CustomFSVLinkTest.png;https://bugs.openjdk.org/secure/attachment/102154/CustomFSVLinkTest.png","2022-12-23 01:16;imttrieunq;CustomFSVLinkTest_manual-laf-Nimbus-Dark.png;https://bugs.openjdk.org/secure/attachment/102153/CustomFSVLinkTest_manual-laf-Nimbus-Dark.png","2022-12-23 01:16;imttrieunq;CustomFSVLinkTest_manual-laf-Windows-Dark.png;https://bugs.openjdk.org/secure/attachment/102152/CustomFSVLinkTest_manual-laf-Windows-Dark.png","2022-12-23 07:53;landrews;Screen Recording 2022-12-23 at 9.52.12 AM.mov;https://bugs.openjdk.org/secure/attachment/102160/Screen+Recording+2022-12-23+at+9.52.12+AM.mov",,,,,x86_64,,,,,,,,,windows_10,,,,,,"0|i2zqbf:",9223372036854775807,b05,,,,,,,,,,,"2023-01-02 22:52;tr;Issue is reproducible as mentioned. Since JFilechooser is added to frame, the control buttons are not required as seen in other test samples. Removing the confidential security as an open PR to be raised.;;;","2023-01-02 23:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11821
Date: 2023-01-03 07:08:13 +0000;;;","2023-01-05 23:53;dukebot;Changeset: 99be7408
Author:    Tejesh R <tr@openjdk.org>
Date:      2023-01-06 07:50:33 +0000
URL:       https://git.openjdk.org/jdk/commit/99be74088eec3e7974642c8aa5792377d32ebe67
;;;",,,,,,,,,,,,,,,,,,
Missing elements in aliased String array,JDK-8299292,5090334,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2022-12-22 14:39,2023-01-11 23:00,2023-10-01 09:56,2023-01-05 09:52,,,,,,,,21,core-libs,,0,cldr,noreg-build,,,,,,,,,,,,,,"With the fix to CLDR's this issue: https://unicode-org.atlassian.net/browse/CLDR-15054 , now some elements in an XML structure can be aliased, i.e., AM/PM narrow strings are derived from their abbreviated siblings. But the existing CLDRConverter implementation simply checks the entire structure is missing or not, then copy whole array if it is missing. Thus it cannot handle such a case. For example,

In the current JDK:
```
jshell> DateFormatSymbols.getInstance(Locale.forLanguageTag(""ar"")).getAmPmStrings()[0]
$178 ==> ""ص""
```
JDK built with CLDR 43(pre-alpha):
```
jshell> DateFormatSymbols.getInstance(Locale.forLanguageTag(""ar"")).getAmPmStrings()[0]
$178 ==> ""AM""
```
The above example demonstrates that the missing ""am"" string is derived from its parent locale (ie root), instead of its abbreviated sibling, which does have real string.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296248,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zq6r:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2023-01-04 12:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11851
Date: 2023-01-04 19:57:56 +0000;;;","2023-01-05 09:51;dukebot;Changeset: a49ccb95
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2023-01-05 17:49:24 +0000
URL:       https://git.openjdk.org/jdk/commit/a49ccb959b7e50ee67b1ab4feca47c34bdbc14fe
;;;",,,,,,,,,,,,,,,,,,,
tools/jpackage/share/AddLauncherTest.java#id1 failed AddLauncherTest.bug8230933,JDK-8299278,5090314,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,dcubed,dcubed,2022-12-22 07:45,2023-02-13 10:45,2023-10-01 09:56,2023-01-10 10:04,20,,,,,,,21,tools,,0,sn_134,sn_135,tier8,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

tools/jpackage/share/AddLauncherTest.java#id1

Here's a snippet from the log file:

[10:35:56.736] [==========] 6 tests ran
[10:35:56.736] [  PASSED  ] 5 tests
[10:35:56.767] [  FAILED  ] 1 test, listed below
[10:35:56.767] [  FAILED  ] AddLauncherTest.bug8230933; workDir=[.\\bug8230933]
[10:35:56.783] 1 FAILED TEST
The process cannot access the file because it is being used by another process.
----------System.err:(65/4780)*----------
java.lang.RuntimeException: Failed to update icon for C:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+29-2264\\src.full\\open\\test\\jdk\\tools\\jpackage\\resources\\icon.ico
	at jdk.jpackage/jdk.jpackage.internal.ExecutableRebrander.iconSwapWrapper(ExecutableRebrander.java:232)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at jdk.jpackage.test.LauncherIconVerifier$WinIconVerifier.setIcon(LauncherIconVerifier.java:247)
	at jdk.jpackage.test.LauncherIconVerifier$WinIconVerifier.lambda$verifyLauncherIcon$0(LauncherIconVerifier.java:97)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.TKit.withTempDirectory(TKit.java:341)
	at jdk.jpackage.test.LauncherIconVerifier$WinIconVerifier.verifyLauncherIcon(LauncherIconVerifier.java:89)
	at jdk.jpackage.test.LauncherIconVerifier.applyTo(LauncherIconVerifier.java:70)
	at jdk.jpackage.test.AdditionalLauncher.verifyIcon(AdditionalLauncher.java:286)
	at jdk.jpackage.test.AdditionalLauncher.verify(AdditionalLauncher.java:322)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at jdk.jpackage.test.PackageTest$Handler.lambda$verifyPackageInstalled$5(PackageTest.java:658)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest$Handler.verifyPackageInstalled(PackageTest.java:658)
	at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:592)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:504)
	at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:411)
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at jdk.jpackage.test.PackageTest.lambda$runActions$24(PackageTest.java:381)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.lambda$runActions$25(PackageTest.java:380)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:379)
	at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:58)
	at AddLauncherTest.bug8230933(AddLauncherTest.java:128)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
	at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
	at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
	at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.TKit.runTests(TKit.java:122)
	at jdk.jpackage.test.Main.runTests(Main.java:79)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
java.lang.RuntimeException: 1 FAILED TEST
	at jdk.jpackage.test.Main.reportSummary(Main.java:130)
	at jdk.jpackage.test.Main.runTests(Main.java:90)
	at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
	at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
	at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
	at jdk.jpackage.test.Main.main(Main.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException: 1 FAILED TEST
JavaTest Message: shutting down test",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302349,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2zq2b:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-01-05 11:36;asemenyuk;Implement retry logic to WinIconVerifier.setIcon() to workaround the issue with antivirus locking executables.;;;","2023-01-05 12:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11868
Date: 2023-01-05 20:10:45 +0000;;;","2023-01-10 10:04;dukebot;Changeset: c595f965
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2023-01-10 18:03:42 +0000
URL:       https://git.openjdk.org/jdk/commit/c595f965abcf0ea80ace87b8f2180feebbb8984e
;;;",,,,,,,,,,,,,,,,,,
C2: Div/Mod nodes without zero check could be split through iv phi of loop resulting in SIGFPE,JDK-8299259,5090292,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,chagedorn,chagedorn,2022-12-22 01:02,2023-05-30 02:17,2023-10-01 09:56,2023-01-10 06:37,11,17,19,20,21,,,21,hotspot,,0,c2,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-21,,,,,,,"JDK-8248552 added bailout code when trying to split DivI/ModI nodes without zero check (control is NULL) through an iv phi which has an input that contains zero in its type range.

However, the fix is not complete in two regards:

1) We could have an ""iv phi -> X -> DivI/ModI"" chain where we want to split X and DivI/ModI through the iv phi. In this case, we first split X and create a new phi to merge the newly created nodes for X. When splitting the DivI/ModI node afterwards, the bailout code finds the newly created phi as divisor input which is not the iv phi and we do not bail out. We should change that.
2) Since JDK-8256655, we also optimize iv phis of long counted loops. The earlier added bailout code, however, only handles int divisions/modulo. We should extend the bailout code to additionally handle DivL/ModL. ",,,,,,,,,,JDK-8306509,JDK-8309091,JDK-8307021,JDK-8301956,JDK-8301946,JDK-8305541,JDK-8302409,,,,,,,,,,,,,,,,,,,,,JDK-8299857,JDK-8256655,JDK-8248552,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zpxf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-22 01:03;chagedorn;ILW = SIGFPE in C2 compiled code when wrongly splitting Div/Mod nodes through a iv phi, rare, use -XX:-SplitIfBlocks = HLM = P3;;;","2023-01-09 06:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11900
Date: 2023-01-09 09:39:55 +0000;;;","2023-01-10 06:37;dukebot;Changeset: 8b0133f2
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2023-01-10 14:35:46 +0000
URL:       https://git.openjdk.org/jdk/commit/8b0133f2760f67cd968528c041a600408cc26978
;;;","2023-03-29 03:35;thartmann;Fix Request (JDK 20u)
Resolves an issue with a SIGFPE in C2 compiled code. The fix is low risk (bailout), was already backported to Oracle JDK 11u and 17u and tested in the JDK 21, 17u and 11u CIs. The backport applies cleanly.;;;","2023-03-29 03:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/25
Date: 2023-03-29 10:35:30 +0000;;;","2023-04-18 08:26;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Typical risk of a C2 fix. Well reproducible, so we should take it. 
Clean backport except for Copyright.
Test passes and fails witout the fix. SAP nightly testing passed.;;;","2023-04-18 08:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1261
Date: 2023-04-18 15:27:04 +0000;;;","2023-05-29 12:18;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
I had to resolve and adapt code and test.
Typical risk of a C2 fix. 
Test failes without the fix, and passes with it, so a good repro case exists.
SAP nightly testing passed.
;;;","2023-05-29 12:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1910
Date: 2023-05-29 19:17:05 +0000;;;",,,,,,,,,,,,
Unexpected round errors in FreetypeFontScaler,JDK-8299255,5090288,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tnakamura,tnakamura,tnakamura,2022-12-21 23:09,2023-09-15 03:46,2023-10-01 09:56,2022-12-24 06:29,11,17,21,,,,,21,client-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,"In 'Java_sun_font_FreetypeFontScaler_createScalerContextNative', 'context->transform.xx' and '.yy' values are sometimes 65535 instead of 65536.

Problem case:
context->transform.xx=65535 yx=0 xy=0 yy=65535 ptsz=46.590909 dmat[0]=46.590909 (float)dmat[0]=46.590908

Normal case:
context->transform.xx=65536 yx=0 xy=0 yy=65536 ptsz=18.000000 dmat[0]=18.000000 (float)dmat[0]=18.000000",,,,,,,,,,JDK-8315168,JDK-8314645,JDK-8314646,JDK-8316351,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zpwj:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-12-22 03:31;tnakamura;Labeled noreg-hard since it's too small change to detect.;;;","2022-12-22 03:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11763
Date: 2022-12-22 07:20:03 +0000;;;","2022-12-22 23:24;tnakamura;Deleted noreg-hard label since I could find a way to test it.;;;","2022-12-24 06:29;dukebot;Changeset: 26868c1a
Author:    Toshio Nakamura <tnakamura@openjdk.org>
Date:      2022-12-24 14:26:42 +0000
URL:       https://git.openjdk.org/jdk/commit/26868c1ac471c3b305b1d15e3075de0baa9319d2
;;;","2023-09-13 04:23;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
Low risk, small font issue.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.;;;","2023-09-13 05:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1732
Date: 2023-09-13 11:54:07 +0000;;;",,,,,,,,,,,,,,,
jdk/jfr/api/consumer/streaming/TestJVMCrash.java generates unnecessary core file,JDK-8299241,5090271,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2022-12-21 14:00,2023-01-05 03:06,2023-10-01 09:56,2022-12-23 05:53,20,21,,,,,,20,hotspot,,0,noreg-self,,,,,,,,,,,,,,,"The following test:

jdk/jfr/api/consumer/streaming/TestJVMCrash.java 

intentionally crashes the VM in order to test proper ending or closing
of a JFR event stream. The test also generates a core file because
the test process is not invoked with the '-XX:-CreateCoredumpOnCrash'
option.

I could be missing something, but with core dumps disabled, the test
still passes in 'release', 'fastdebug' and 'slowdebug' configs.
",,,,,,,,,,JDK-8299344,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zpsr:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-22 15:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/75
Date: 2022-12-22 22:33:58 +0000;;;","2022-12-23 05:53;dukebot;Changeset: 188911c9
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-12-23 13:51:58 +0000
URL:       https://git.openjdk.org/jdk20/commit/188911c925e4067c7f912c5ddb6f715bad7a3892
;;;",,,,,,,,,,,,,,,,,,,
Fix Bad Copyright introduced in 8299223,JDK-8299238,5090265,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,rgangadhar,rgangadhar,rgangadhar,2022-12-21 11:21,2023-02-24 02:31,2023-10-01 09:56,2022-12-21 17:43,11.0.19-oracle,,,,,,,11.0.19-oracle,core-libs,,0,jdk11u-na,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zprf:",9223372036854775807,b01,,,,,,,,,Verified,,,,,,,,,,,,,,,,,,,,,,
broken link referencing missing id,JDK-8299235,5090262,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,jjg,jjg,2022-12-21 11:01,2023-05-26 05:59,2023-10-01 09:56,2023-01-03 07:43,20,,,,,,,20,security-libs,,0,noreg-doc,,,,,,,,,,,,,,,"From a broken-links report


Missing Anchors: There's only one missing anchor: 

specs/security/standard-names.html#cipher-algorithm-names 
    [used in 2 files] 
    api/java.base/javax/crypto/Cipher.html 
    api/java.base/java/security/KeyStore.PasswordProtection.html ",,,,,,,,,,JDK-8299610,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295909,JDK-8293334,JDK-8296228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zpqr:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-12-21 11:03;jjg;Using grep, here are a list of the ids defined in the standard-names.html file

$ grep -o 'id=""[^""]*""' build/macosx-aarch64/images/docs/specs/security/standard-names.html | sed -e 's/id=""//' -e 's/""$//' | sort
TOC
additional-jsse-standard-names
algorithm-specifications
algorithmparametergenerator-algorithms
algorithmparameters-algorithms
authentication-types
certificatefactory-types
certpath-encodings
certpathbuilder-algorithms
certpathvalidator-algorithms
certstore-types
cipher-algorithm-modes
cipher-algorithm-paddings
cipher-algorithms
configuration-types
endpoint-identification-algorithms
exemption-mechanisms
gssapi-mechanisms
jsse-cipher-suite-names
key-encodings
key-types
keyagreement-algorithms
keyfactory-algorithms
keygenerator-algorithms
keymanagerfactory-algorithms
keypairgenerator-algorithms
keystore-types
mac-algorithms
messagedigest-algorithms
named-groups
parameterspec-names
policy-types
protocols
saslclient-mechanisms
saslserver-mechanisms
secretkeyfactory-algorithms
securerandom-number-generation-algorithms
security-algorithm-implementation-requirements
security-algorithm-specification
service-attributes
signature-algorithms
signature-schemes
specification-template
sslcontext-algorithms
title-block-header
toc-additional-jsse-standard-names
toc-algorithm-specifications
toc-algorithmparametergenerator-algorithms
toc-algorithmparameters-algorithms
toc-authentication-types
toc-certificatefactory-types
toc-certpath-encodings
toc-certpathbuilder-algorithms
toc-certpathvalidator-algorithms
toc-certstore-types
toc-cipher-algorithm-modes
toc-cipher-algorithm-paddings
toc-cipher-algorithms
toc-configuration-types
toc-endpoint-identification-algorithms
toc-exemption-mechanisms
toc-gssapi-mechanisms
toc-jsse-cipher-suite-names
toc-key-encodings
toc-key-types
toc-keyagreement-algorithms
toc-keyfactory-algorithms
toc-keygenerator-algorithms
toc-keymanagerfactory-algorithms
toc-keypairgenerator-algorithms
toc-keystore-types
toc-mac-algorithms
toc-messagedigest-algorithms
toc-named-groups
toc-parameterspec-names
toc-policy-types
toc-protocols
toc-saslclient-mechanisms
toc-saslserver-mechanisms
toc-secretkeyfactory-algorithms
toc-securerandom-number-generation-algorithms
toc-security-algorithm-implementation-requirements
toc-security-algorithm-specification
toc-service-attributes
toc-signature-algorithms
toc-signature-schemes
toc-specification-template
toc-sslcontext-algorithms
toc-trustmanagerfactory-algorithms
toc-xml-signature-algorithms
toc-xml-signature-transform-transformservice-algorithms
toc-xml-signature-xmlsignaturefactorykeyinfofactorytransformservice-mechanisms
trustmanagerfactory-algorithms
xml-signature-algorithms
xml-signature-transform-transformservice-algorithms
xml-signature-xmlsignaturefactorykeyinfofactorytransformservice-mechanisms
;;;","2022-12-23 13:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/77
Date: 2022-12-23 21:22:00 +0000;;;","2023-01-03 07:43;dukebot;Changeset: 3eb85d19
Author:    Mark Powers <mpowers@openjdk.org>
Committer: Sean Mullan <mullan@openjdk.org>
Date:      2023-01-03 15:41:55 +0000
URL:       https://git.openjdk.org/jdk20/commit/3eb85d19ec80105bcbc5ad5422d694c29a9029d2
;;;",,,,,,,,,,,,,,,,,,
Use https: in links,JDK-8299230,5090257,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mpowers,jjg,jjg,2022-12-21 10:13,2023-01-05 03:06,2023-10-01 09:56,2022-12-22 07:32,20,,,,,,,20,security-libs,,0,noreg-doc,,,,,,,,,,,,,,,"From a broken-links report:


FYI: These links work, but they use HTTP instead of HTTPS: 

http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.140-2.pdf 
    [used in 1 file] 
    api/java.base/java/security/SecureRandom.html 
http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf 
    [used in 1 file] 
    api/java.base/java/security/DrbgParameters.html ",,,,,,,,,,JDK-8299319,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zppn:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-12-21 13:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/69
Date: 2022-12-21 21:38:22 +0000;;;","2022-12-22 07:32;dukebot;Changeset: a80c91d0
Author:    Mark Powers <mpowers@openjdk.org>
Committer: Sean Mullan <mullan@openjdk.org>
Date:      2022-12-22 15:29:53 +0000
URL:       https://git.openjdk.org/jdk20/commit/a80c91d0360864e34569b684cf159e2dcdebeaaf
;;;",,,,,,,,,,,,,,,,,,,
host `exif.org` not found in link in doc comment,JDK-8299227,5090254,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,abhiscxk,jjg,jjg,2022-12-21 09:48,2023-01-17 15:57,2023-10-01 09:56,2023-01-10 23:44,20,,,,,,,20,client-libs,,0,noreg-doc,sn_134,sn_135,,,,,,,,,,,,,"From a broken-links report:

Broken Remote Links: There are 11 in the report but only one is actually broken: 

http://www.exif.org/Exif2-2.PDF 
    [used in 1 file] 
    api/java.desktop/javax/imageio/metadata/doc-files/tiff_metadata.html ",,,,,,,,,,JDK-8300367,JDK-8300006,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zpoz:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@377c353d,,,,,,,,,"2022-12-21 09:50;jjg;Looks like `exif.org` no longer exists.;;;","2022-12-21 11:59;prr;Hmm this was supposed to be fixed as part of
https://bugs.openjdk.org/browse/JDK-8288528
Its the #2 item in the bug description there.;;;","2022-12-21 13:06;jjg;OK, it may have been fixed in the public API (which is enough).

grep finds the remaining references, which you might want to clean up, but they (probably) don't leak into the public API.

$ grep -r exif.org open/src/java.desktop
open/src/java.desktop/share/native/libjavajpeg/imageioJPEG.c: * (see http://www.exif.org/Exif2-2.PDF, section 4.7, page 58)
open/src/java.desktop/share/native/libjavajpeg/imageioJPEG.c:             *     Must be YCbCr (see http://www.exif.org/Exif2-2.PDF, section 4.7, page 63)
open/src/java.desktop/share/classes/javax/imageio/metadata/doc-files/tiff_metadata.html:<td><a href=""http://www.exif.org/Exif2-2.PDF"">Exif 2.2 Specification</a>
open/src/java.desktop/share/classes/com/sun/imageio/plugins/tiff/TIFFImageWriteParam.java: * <td><a href=""http://www.exif.org/Exif2-2.PDF"">Exif 2.2 Specification</a>;;;","2022-12-21 13:16;jjg;To confirm, it does appear, just once, in the most generated API documentation for an up-to-date repo.

$ grep -r exif.org build/macosx-aarch64/images/docs/api
build/macosx-aarch64/images/docs/api/java.desktop/javax/imageio/metadata/doc-files/tiff_metadata.html:<td><a href=""http://www.exif.org/Exif2-2.PDF"">Exif 2.2 Specification</a>;;;","2022-12-21 13:33;prr;You misunderstand me - I am saying it SHOULD have been fixed by 8288528 but clearly it WAS NOT.
So I've assigned to the RE for that bug to have another go .. and do something about the non-API cases  you point out as well.;;;","2022-12-22 09:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11768
Date: 2022-12-22 17:07:44 +0000;;;","2022-12-22 13:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/74
Date: 2022-12-22 21:32:05 +0000;;;","2023-01-10 23:44;dukebot;Changeset: 0abb87a4
Author:    Abhishek Kumar <abhiscxk@openjdk.org>
Committer: Tejesh R <tr@openjdk.org>
Date:      2023-01-11 07:42:42 +0000
URL:       https://git.openjdk.org/jdk20/commit/0abb87a488e99cdbc418e14411a6bbf7a3f28079
;;;",,,,,,,,,,,,,
TestReporterStreams.java has bad indentation for legal header,JDK-8299224,5090250,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-12-21 08:58,2023-01-23 15:45,2023-10-01 09:56,2023-01-17 15:46,21,,,,,,,21,tools,,0,noreg-self,,,,,,,,,,,,,,,"The legal header on this file is indented by an extra space.

Not a big deal, but it is inconsistent with the standard.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zpo3:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-12-21 09:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11757
Date: 2022-12-21 17:06:37 +0000;;;","2023-01-17 15:46;dukebot;Changeset: 7071397e
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2023-01-17 23:43:35 +0000
URL:       https://git.openjdk.org/jdk/commit/7071397ed92fb70a52723b4b753c943c010e0fb2
;;;",,,,,,,,,,,,,,,,,,,
[Testbug] Add back test/jdk/java/awt/Graphics2D/DrawPrimitivesTest.java,JDK-8299207,5090215,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,aghaisas,aghaisas,aghaisas,2022-12-21 05:14,2023-07-10 08:22,2023-10-01 09:56,2022-12-22 02:39,20,,,,,,,20,client-libs,,0,noreg-self,sn_134,testbug,,,,,,,,,,,,,"Regression test test/jdk/java/awt/Graphics2D/DrawPrimitivesTest.java was added as part of JDK-8291266.

We had to revert JDK-8291266 while fixing JDK-8298217.

Although the JDK-8291266 fix is no more needed, this test is good and can be added back to detect future regressions.
",,,,,,,,,,JDK-8299318,JDK-8304560,JDK-8305013,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291266,JDK-8298217,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,,,os_x,,,,,,"0|i2zpj7:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-12-21 21:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/72
Date: 2022-12-22 05:39:54 +0000;;;","2022-12-22 02:39;dukebot;Changeset: 5e001d6f
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2022-12-22 10:38:12 +0000
URL:       https://git.openjdk.org/jdk20/commit/5e001d6ff34e2cc954f824117a73dd39f09a81c1
;;;",,,,,,,,,,,,,,,,,,,
CustomTzIDCheckDST.java may fail at future date,JDK-8299194,5090200,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,itakiguchi,itakiguchi,itakiguchi,2022-12-21 02:19,2023-07-27 21:32,2023-10-01 09:56,2022-12-22 13:08,21,,,,,,,21,core-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok,jdk20u-fix-yes,noreg-self,ursqe-triaged,,,,,,,"test/jdk/java/util/TimeZone/CustomTzIDCheckDST.java may fail at future date.
I created small testcase (CheckDST.java) from CustomTzIDCheckDST.java
$ cat CheckDST.java
import java.util.Calendar;
import java.util.Date;
import java.util.SimpleTimeZone;

public class CheckDST {
    private static String CUSTOM_TZ = ""MEZ-1MESZ,M3.5.0,M10.5.0"";
    public static void main(String args[]) throws Throwable {
        runTZTest();
    }

    /* TZ code will always be set to ""MEZ-1MESZ,M3.5.0,M10.5.0"".
     * This ensures the transition periods for Daylights Savings should be at March's last
     * Sunday and October's last Sunday.
     */
    private static void runTZTest() {
        Date time = new Date();
        if (new SimpleTimeZone(3600000, ""MEZ-1MESZ"", Calendar.MARCH, -1, Calendar.SUNDAY, 0,
                Calendar.OCTOBER, -1, Calendar.SUNDAY, 0).inDaylightTime(time)) {
            // We are in Daylight savings period.
            if (time.toString().endsWith(""GMT+02:00 "" + Integer.toString(time.getYear() + 1900)))
                return;
        } else {
            if (time.toString().endsWith(""GMT+01:00 "" + Integer.toString(time.getYear() + 1900)))
                return;
        }

        // Reaching here means time zone did not match up as expected.
        throw new RuntimeException(""Got unexpected timezone information: "" + time);
    }
}

I tested CheckDST with faketime, then I got following results
$ TZ=GMT faketime -m ""2023-03-25 22:59:59"" env TZ=""MEZ-1MESZ,M3.5.0,M10.5.0"" $HOME/jdk-21-b02/bin/java CheckDST
$ TZ=GMT faketime -m ""2023-03-25 23:00:00"" env TZ=""MEZ-1MESZ,M3.5.0,M10.5.0"" $HOME/jdk-21-b02/bin/java CheckDST
Exception in thread ""main"" java.lang.RuntimeException: Got unexpected timezone information: Sun Mar 26 00:00:00 GMT+01:00 2023
        at CheckDST.runTZTest(CheckDST.java:28)
        at CheckDST.main(CheckDST.java:8)
",,,,,,,,,,JDK-8301976,JDK-8313288,JDK-8301816,JDK-8301817,JDK-8313286,JDK-8301815,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2zpfv:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-12-21 08:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11756
Date: 2022-12-21 15:57:29 +0000;;;","2022-12-22 13:08;dukebot;Changeset: 5e2de896
Author:    Ichiroh Takiguchi <itakiguchi@openjdk.org>
Date:      2022-12-22 21:07:01 +0000
URL:       https://git.openjdk.org/jdk/commit/5e2de89628aaf6acb8e458fb417426ca5e477bea
;;;","2023-01-31 17:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1140
Date: 2023-02-01 00:57:10 +0000;;;","2023-01-31 18:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1703
Date: 2023-02-01 01:54:27 +0000;;;","2023-01-31 23:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/3
Date: 2023-02-01 07:21:55 +0000;;;","2023-02-01 00:01;itakiguchi;Fix request (11u, 17u, 20u):
This fix may avoid jtreg failures on Mar. 26, 2023.
Applies cleanly and tests are passed. ;;;",,,,,,,,,,,,,,,
Invokers.checkExactType passes parameters to create WMTE in opposite order,JDK-8299183,5090189,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mchung,pminborg,pminborg,2022-12-21 00:47,2023-01-17 12:04,2023-10-01 09:56,2023-01-10 09:06,,,,,,,,21,core-libs,,0,,,,,,,,,,,,,,,,"The throw clause in the `checkExactType()` method appears to have swapped the `expected` and `actual` parameter order.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zpdf:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@1cfeb1de,,,,,,,,,"2023-01-05 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11870
Date: 2023-01-05 20:45:20 +0000;;;","2023-01-10 09:06;dukebot;Changeset: a86b6f6f
Author:    Mandy Chung <mchung@openjdk.org>
Date:      2023-01-10 17:05:33 +0000
URL:       https://git.openjdk.org/jdk/commit/a86b6f6fde11a1cb27f926c43d53585049fed5e4
;;;",,,,,,,,,,,,,,,,,,,
PaddingLayout unable to return byteAlignment value,JDK-8299181,5090187,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pminborg,pminborg,pminborg,2022-12-21 00:22,2023-01-17 03:57,2023-10-01 09:56,2023-01-17 03:57,20,,,,,,,21,core-libs,,0,foreign-memaccess+abi,,,,,,,,,,,,,,,"Reproduce:

MemoryLayout.paddingLayout(8).byteAlignment()
|  Exception java.lang.UnsupportedOperationException: Cannot compute byte alignment; bit alignment is not a multiple of 8
|        at MemoryLayout.lambda$byteAlignment$0 (MemoryLayout.java:234)
|        at Utils.bitsToBytesOrThrow (Utils.java:97)
|        at MemoryLayout.byteAlignment (MemoryLayout.java:233)
|        at (#5:1)

Also, the allowed valued for bit alignments shall be specified in both javadoc and impl.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zpcz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2023-01-16 05:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/panama-foreign/pull/766
Date: 2023-01-11 10:25:47 +0000;;;",,,,,,,,,,,,,,,,,,,,
ArrayFill with store on backedge needs to reduce length by 1,JDK-8299179,5090184,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,chagedorn,chagedorn,2022-12-20 23:48,2023-04-27 06:58,2023-10-01 09:56,2023-01-11 23:26,16,17,19,20,21,,,21,hotspot,,0,atr,c2,javafuzzer,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,oracle-triage-11,oracle-triage-21,,,,,,"Please change the generic bug title to something more descriptive once the root cause is known.

The attached Java Fuzzer test results in a wrong execution with C2 compared to a run with the interpreter/C1 after JDK-8247307 on aarch64 and x64:
- aarch64: fails after JDK-8247307 since -XX:+OptimizeFill is set by default
- x64: only fails with -XX:UseAVX=3 (and before JDK-8275047, -XX:+OptimizeFill must be set as it was false by default):

To reproduce:
$ java -Xint Test.java > interpreter.log
$ java -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Test (-XX:UseAVX=3) Test.java > c2_test.log
$ java -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Reduced (-XX:UseAVX=3) Reduced.java > c2_reduced.log

$ diff interpreter.log c2_test.log:
7c7
< vMeth1_check_sum: 585775794890188912
---
> vMeth1_check_sum: 585775794890188648
16c16
< vMeth1_check_sum: 1171551947176573060
---
> vMeth1_check_sum: 1171551947176572796
25c25
< vMeth1_check_sum: 1757328099462957208
---
> vMeth1_check_sum: 1757328099462956944
34c34
< vMeth1_check_sum: 2343104251749341356
---
> vMeth1_check_sum: 2343104251749341092
43c43
< vMeth1_check_sum: 2928880404035725504
---
> vMeth1_check_sum: 2928880404035725240
52c52
< vMeth1_check_sum: 3514656556322109652
---
> vMeth1_check_sum: 3514656556322109388
61c61
< vMeth1_check_sum: 4100432708608493800
---
> vMeth1_check_sum: 4100432708608493536
70c70
< vMeth1_check_sum: 4686208860894877948
---
> vMeth1_check_sum: 4686208860894877684
79c79
< vMeth1_check_sum: 5271985013181262096
---
> vMeth1_check_sum: 5271985013181261832
88c88
< vMeth1_check_sum: 5857761165467646244
---
> vMeth1_check_sum: 5857761165467645980

$ diff interpreter.log c2_reduced.log:
134c134
< iArrFld[63]: 0
---
> iArrFld[63]: 4
204c204
< iArrFld[63]: 0
---
> iArrFld[63]: 4
274c274
< iArrFld[63]: 0
---
> iArrFld[63]: 4
344c344
< iArrFld[63]: 0
---
> iArrFld[63]: 4
414c414
< iArrFld[63]: 0
---
> iArrFld[63]: 4
484c484
< iArrFld[63]: 0
---
> iArrFld[63]: 4
554c554
< iArrFld[63]: 0
---
> iArrFld[63]: 4
624c624
< iArrFld[63]: 0
---
> iArrFld[63]: 4
694c694
< iArrFld[63]: 0
---
> iArrFld[63]: 4
",,,,,,,,,,JDK-8305130,JDK-8307020,JDK-8306511,JDK-8306163,JDK-8305540,,,,,,,,,,,,,,,,,,,,,,,JDK-8275047,JDK-8247307,,,,,,JDK-8299808,,,,,"2022-12-20 23:46;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/102122/FuzzerUtils.java","2022-12-20 23:46;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/102123/Reduced.java","2022-12-20 23:47;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/102121/Test.java",,,,,,,,,,,,,,,,,,,,,,"0|i2zpcb:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-20 23:49;chagedorn;ILW = Wrong execution of C2 compiled array stub, single Java Fuzzer test, use -XX:-OptimizeFill = HLM = P3;;;","2022-12-21 00:07;chagedorn;JDK-8247307 has probably just revealed an existing issue as it just enables more patterns to use array fill stub.;;;","2023-01-10 00:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11904
Date: 2023-01-09 14:48:00 +0000;;;","2023-01-11 23:26;dukebot;Changeset: d716ec5d
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-01-12 07:23:19 +0000
URL:       https://git.openjdk.org/jdk/commit/d716ec5d3034240b7dd0aed86d9bb371bc3e5f5a
;;;","2023-03-29 03:33;thartmann;Fix Request (JDK 20u)
Resolves an issue with incorrect execution of C2 compiled code. The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-03-29 03:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/24
Date: 2023-03-29 10:33:42 +0000;;;","2023-04-19 00:57;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Typical risk of a C2 change. Rather local. Nice reproducible.
Clean backport.
Test passes and fails without the fix. SAP nightly testing passed.
;;;","2023-04-19 01:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1269
Date: 2023-04-19 08:02:52 +0000;;;",,,,,,,,,,,,,
RISC-V: [TESTBUG] Fix stack alignment logic in jvmci RISCV64TestAssembler.java,JDK-8299172,5090177,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-12-20 22:02,2023-01-05 03:02,2023-10-01 09:56,2022-12-23 03:56,21,,,,,,,21,hotspot,,0,jvmci,noreg-self,oracle-triage-21,,,,,,,,,,,,,"We observed a failure in JVMCI tests after `-ea -esa` turns on when running `./test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/NativeCallTest.java`.

```
java.lang.AssertionError
	at jdk.vm.ci.code.test.riscv64.RISCV64TestAssembler.emitGrowStack(RISCV64TestAssembler.java:203)
	at jdk.vm.ci.code.test.riscv64.RISCV64TestAssembler.emitCallPrologue(RISCV64TestAssembler.java:239)
...
...
````",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-12-20 22:02;xlinzheng;testfailure.txt;https://bugs.openjdk.org/secure/attachment/102120/testfailure.txt",,,,,,,,,riscv,,,,,,,21,,linux,,,,,,"0|i2zpar:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-20 22:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11751
Date: 2022-12-21 06:13:04 +0000;;;","2022-12-20 23:58;chagedorn;ILW =JVMCI test failure with -ea -esa, single test and riscv only, no workaround = MLH = P4;;;","2022-12-23 03:56;dukebot;Changeset: da75de31
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-12-23 11:54:00 +0000
URL:       https://git.openjdk.org/jdk/commit/da75de31841e4b50477774e9efc4f554e1f3e4c0
;;;",,,,,,,,,,,,,,,,,,
RISC-V: Fix MachNode size mismatch for MacroAssembler::_verify_oops*,JDK-8299168,5090174,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,xlinzheng,xlinzheng,xlinzheng,2022-12-20 20:43,2023-07-09 19:25,2023-10-01 09:56,2022-12-23 01:24,21,,,,,,,21,hotspot,,0,c2,oraclejdk-na,oracle-triage-21,,,,,,,,,,,,,"Nearly the same as JDK-8285437. MachNode size should match in scratch emission and real emission phases. The address of the local char buffer is a random value, but when RVC is enabled, the `movptr`, containing `lui+addi+slli+addi+slli`, with another dangling `addi` at last to load the immediate address of the special local char buffer may get compressed depending on the char buffer's different addresses. So the size may at last mismatch. Due to this part containing implicit fixed-length semantics, it shall be a reasonable fix to add an ImcompressibleRegion for this special position.

`test/hotspot/jtreg/testlibrary_tests/ir_framework/tests/TestDFlags.java` in hotspot tier4 can reflect this issue. It contains a `vm.flagless` so it didn't run in my local environment until recently.",,,,,,,,,,JDK-8311743,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8285437,,,,,"2022-12-20 20:46;xlinzheng;hs_err_pid5496.log;https://bugs.openjdk.org/secure/attachment/102119/hs_err_pid5496.log",,,,,,,,,riscv,,,,,,,21,,linux,,,,,,"0|i2zpa3:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-20 20:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11750
Date: 2022-12-21 04:47:51 +0000;;;","2022-12-20 23:56;chagedorn;ILW = Same as JDK-8285437 = P4;;;","2022-12-23 01:24;dukebot;Changeset: 2f4098e1
Author:    Xiaolin Zheng <xlinzheng@openjdk.org>
Committer: Fei Yang <fyang@openjdk.org>
Date:      2022-12-23 09:22:39 +0000
URL:       https://git.openjdk.org/jdk/commit/2f4098e1dc9c97e706d70008e473f9c4496cbc8a
;;;","2023-03-30 23:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/riscv-port-jdk17u/pull/32
Date: 2023-03-31 06:52:26 +0000;;;","2023-06-19 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1427
Date: 2023-06-13 09:43:25 +0000;;;",,,,,,,,,,,,,,,,
Broken link in jdk.compiler/module-info.java,JDK-8299156,5090164,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-12-20 13:18,2023-01-03 11:35,2023-10-01 09:56,2022-12-20 14:53,20,,,,,,,20,tools,,0,noreg-doc,,,,,,,,,,,,,,,"There is a `../` missing in the URL in this text:

 The full set of options and environment variables supported by <em>javac</em>
 * is given in the <a href=""../specs/man/javac.html""><em>javac Tool Guide</em></a>.
 * However, there are some restrictions when the compiler is invoked through
 * its API.",,,,,,,,,,JDK-8299248,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zp7v:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-12-20 14:53;dukebot;Changeset: f7be5b53
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-12-20 22:53:09 +0000
URL:       https://git.openjdk.org/jdk20/commit/f7be5b530d10005ba928309870c9adc42afdf66a
;;;","2022-12-20 14:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/67
Date: 2022-12-20 21:31:55 +0000;;;",,,,,,,,,,,,,,,,,,,
C2: SubTypeCheckNode::verify() should not produce dependencies / oop pool entries,JDK-8299155,5090163,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,roland,rrich,rrich,2022-12-20 13:10,2023-02-08 23:39,2023-10-01 09:56,2023-02-03 00:00,17,18,19,20,21,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-21,,,,,,,,,,,,,"C2's SubTypeCheckNode::verify() produce dependencies which in turn produce entries in the oop pool which affect the unloading behaviour of the nmethod. This can hide issues of the release build which will not have the dependencies and oop pool entries.

The attachment CallFinalVirtualFromOtherLoader.java is a reproducer. ClassA_LVL_1.testMethod_dojit() has a virtual call that can be statically bound because the target method is final. It is loaded by a subclassloader though. SubTypeCheckNode::verify() adds a dependency to the subclassloader 'CallFinalVirtualFromOtherLoader$DirectLeveledClassLoader$Level2' (see attachment output.log:1411). This is redundant as a dependency is added by ClassLoaderData::record_dependency().

Without calling SubTypeCheckNode::verify() the dependency is not added (see output_UseNewCode.log:1406)
The run was produced with the following patch:

diff --git a/src/hotspot/share/opto/subtypenode.cpp b/src/hotspot/share/opto/subtypenode.cpp
index 8ef50b73be9..04ccf6ae674 100644
--- a/src/hotspot/share/opto/subtypenode.cpp
+++ b/src/hotspot/share/opto/subtypenode.cpp
@@ -110,7 +110,7 @@ Node *SubTypeCheckNode::Ideal(PhaseGVN* phase, bool can_reshape) {
 
   // Verify that optimizing the subtype check to a simple code pattern
   // when possible would not constant fold better
-  assert(verify(phase), ""missing Value() optimization"");
+  assert(UseNewCode || verify(phase), ""missing Value() optimization"");
 
   return NULL;
 }

The redundant dependency is added here:

#0  Dependencies::assert_leaf_type (this=0x7fe266d3fbe0 <Compile::dependencies()+36>, ctxk=0x7fe20baf7010) at .../jdk/src/hotspot/share/code/dependencies.cpp:84
#1  0x00007fe267ba6799 in TypeInstPtr::as_klass_type (this=0x7fe1ec036978, try_for_exact=true) at .../jdk/src/hotspot/share/opto/type.cpp:4328
#2  0x00007fe2677aad4d in LoadNode::klass_value_common (this=0x7fe1ec054d28, phase=0x7fe20baf8040) at .../jdk/src/hotspot/share/opto/memnode.cpp:2340
#3  0x00007fe2677ab273 in LoadNKlassNode::Value (this=0x7fe1ec054d28, phase=0x7fe20baf8040) at .../jdk/src/hotspot/share/opto/memnode.cpp:2449
#4  0x00007fe2678dc8cc in PhaseGVN::transform_no_reclaim (this=0x7fe20baf8040, n=0x7fe1ec054d28) at .../jdk/src/hotspot/share/opto/phaseX.cpp:862
#5  0x00007fe2678dc77b in PhaseGVN::transform (this=0x7fe20baf8040, n=0x7fe1ec054d28) at .../jdk/src/hotspot/share/opto/phaseX.cpp:829
#6  0x00007fe2677aa989 in LoadKlassNode::make (gvn=..., ctl=0x0, mem=0x7fe1ec0521e8, adr=0x7fe1ec054c88, at=0x7fe1ec023b28, tk=0x7fe1ec0269a8) at .../jdk/src/hotspot/share/opto/memnode.cpp:2276
#7  0x00007fe267b0ac79 in SubTypeCheckNode::verify (this=0x7fe1ec054b80, phase=0x7fe20baf8040) at .../jdk/src/hotspot/share/opto/subtypenode.cpp:173
#8  0x00007fe267b0a763 in SubTypeCheckNode::Ideal (this=0x7fe1ec054b80, phase=0x7fe20baf8040, can_reshape=false) at .../jdk/src/hotspot/share/opto/subtypenode.cpp:113
#9  0x00007fe2678dc74a in PhaseGVN::apply_ideal (this=0x7fe20baf8040, k=0x7fe1ec054b80, can_reshape=false) at .../jdk/src/hotspot/share/opto/phaseX.cpp:820
#10 0x00007fe2678dc7bf in PhaseGVN::transform_no_reclaim (this=0x7fe20baf8040, n=0x7fe1ec054b80) at .../jdk/src/hotspot/share/opto/phaseX.cpp:840
#11 0x00007fe2678dc77b in PhaseGVN::transform (this=0x7fe20baf8040, n=0x7fe1ec054b80) at .../jdk/src/hotspot/share/opto/phaseX.cpp:829
#12 0x00007fe2673354d0 in GraphKit::gen_subtype_check (this=0x7fe20baf75d0, obj_or_subklass=0x7fe1ec054a70, superklass=0x7fe1ec054b10) at .../jdk/src/hotspot/share/opto/graphKit.cpp:2834
#13 0x00007fe2673359db in GraphKit::subtype_check_receiver (this=0x7fe20baf75d0, receiver=0x7fe1ec054a70, klass=0x7fe1ec02dec8, casted_receiver=0x7fe20baf7510) at .../jdk/src/hotspot/share/opto/graphKit.cpp:2879
#14 0x00007fe266ef5a34 in PredictedCallGenerator::generate (this=0x7fe1ec056008, jvms=0x7fe1ec055d00) at .../jdk/src/hotspot/share/opto/callGenerator.cpp:885
#15 0x00007fe267191119 in Parse::do_call (this=0x7fe20baf7b90) at .../jdk/src/hotspot/share/opto/doCall.cpp:662
#16 0x00007fe2678c91c1 in Parse::do_one_bytecode (this=0x7fe20baf7b90) at .../jdk/src/hotspot/share/opto/parse2.cpp:2704
#17 0x00007fe2678b8226 in Parse::do_one_block (this=0x7fe20baf7b90) at .../jdk/src/hotspot/share/opto/parse1.cpp:1555
#18 0x00007fe2678b44c3 in Parse::do_all_blocks (this=0x7fe20baf7b90) at .../jdk/src/hotspot/share/opto/parse1.cpp:707
#19 0x00007fe2678b400b in Parse::Parse (this=0x7fe20baf7b90, caller=0x7fe1ec055a70, parse_method=0x7fe1ec02c078, expected_uses=6784) at .../jdk/src/hotspot/share/opto/parse1.cpp:614

This was noticed while working on JDK-8296440. The intention there was to assert during call resolution that the loader of a statically bound callee is reachable from the caller.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296440,,,,,,,JDK-8238691,,,,,"2022-12-20 13:14;rrich;CallFinalVirtualFromOtherLoader.java;https://bugs.openjdk.org/secure/attachment/102116/CallFinalVirtualFromOtherLoader.java","2022-12-20 13:14;rrich;output.log;https://bugs.openjdk.org/secure/attachment/102117/output.log","2022-12-20 13:14;rrich;output_UseNewCode.log;https://bugs.openjdk.org/secure/attachment/102118/output_UseNewCode.log",,,,,,,,,,,,,,,,,,,,,,"0|i2zp7n:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-21 00:40;thartmann;While the problematic verification code is in there since JDK-8238691 in JDK 15, I can only reproduce this after JDK 18 b3, probably because of changes like JDK-8268405.

ILW = Redundant leaf_type dependency in C2 compiled code, only with debug builds, no workaround = MLH = P4;;;","2022-12-21 00:43;thartmann;[~roland], [~vlivanov], maybe you want to have a look at this.;;;","2022-12-21 06:43;roland;That seems to fix it:

https://github.com/rwestrel/jdk/tree/JDK-8299155

Can you verify [~rrich]? That one was straightforward. Are there other issues that show up with this one fixed?;;;","2022-12-21 07:28;rrich;I cannot reproduce the issue with your fix, thanks!

  > Are there other issues that show up with this one fixed? 

None I'd be aware of at the moment.;;;","2023-02-02 01:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12383
Date: 2023-02-02 09:07:39 +0000;;;","2023-02-03 00:00;dukebot;Changeset: cf68d9fb
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-02-03 07:58:29 +0000
URL:       https://git.openjdk.org/jdk/commit/cf68d9fb8e55e461fa717f1443094300de8feacb
;;;",,,,,,,,,,,,,,,
Minor accessibility errors in the specs and man index pages,JDK-8299147,5090155,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-12-20 11:50,2023-01-03 11:35,2023-10-01 09:56,2022-12-20 13:36,20,,,,,,,20,infrastructure,,0,noreg-doc,,,,,,,,,,,,,,,"Although it doesn't affect final GA docs, accessibility testing reports an issue with the ""Draft Specification"" header at the top of the specs/index.html and specs/man/index.html pages.

The `<header>` element should specify `role=""banner""`

While it doesn't affect GA docs, it would be good to eliminate the unnecessary noise from there A11Y reports.",,,,,,,,,,JDK-8299246,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zp5v:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-12-20 13:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/66
Date: 2022-12-20 21:00:35 +0000;;;","2022-12-20 13:36;dukebot;Changeset: e85d00f6
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-12-20 21:33:53 +0000
URL:       https://git.openjdk.org/jdk20/commit/e85d00f6c32c9938fbc9529b055d90082f565fa3
;;;",,,,,,,,,,,,,,,,,,,
[REDO] JDK-8213562 Test javax/swing/text/DefaultCaret/HidingSelection/MultiSelectionTest.java fails,JDK-8299128,5090135,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,dcubed,dcubed,2022-12-20 09:16,2023-03-15 01:43,2023-10-01 09:56,2022-12-21 16:13,11,17,19,20,,,,20,client-libs,,0,noreg-self,sn_134,testbug,ursqe-triaged,,,,,,,,,,,,"This is a redo of the following fix: 

JDK-8213562
Test javax/swing/text/DefaultCaret/HidingSelection/MultiSelectionTest.java fails

The original fix was backed out via: 

JDK-8299123 [BACKOUT] 4512626 Non-editable JTextArea provides no visual indication of keyboard focus",,,,,,,,,,JDK-8299316,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8213562,,,,,,,JDK-8299123,JDK-8299077,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zp1f:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-12-20 10:37;kizune;Test affected by the fix for JDK-8299077;;;","2022-12-20 15:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/68
Date: 2022-12-20 23:38:31 +0000;;;","2022-12-21 16:13;dukebot;Changeset: fef70d78
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-12-22 00:12:15 +0000
URL:       https://git.openjdk.org/jdk20/commit/fef70d78baec9ce11d50b9a4c1fb26a1b854ccbf
;;;",,,,,,,,,,,,,,,,,,
[REDO] JDK-8194048 Regression automated test '/open/test/jdk/javax/swing/text/DefaultCaret/HidingSelection/HidingSelectionTest.java' fails,JDK-8299127,5090134,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,kizune,dcubed,dcubed,2022-12-20 09:12,2023-03-16 00:02,2023-10-01 09:56,2022-12-21 16:13,10,11,17,19,20,,,20,client-libs,,0,noreg-self,sn_134,testbug,ursqe-triaged,,,,,,,,,,,,"This is a redo of the following fix:

JDK-8194048 Regression automated test '/open/test/jdk/javax/swing/text/DefaultCaret/HidingSelection/HidingSelectionTest.java' fails

The original fix was backed out via:

JDK-8299123 [BACKOUT] 4512626 Non-editable JTextArea provides no visual indication of keyboard focus",,,,,,,,,,JDK-8299315,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8194048,JDK-8299123,JDK-8299077,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zp17:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-12-20 10:38;kizune;Test affected by the fix for JDK-8299077;;;","2022-12-20 15:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/68
Date: 2022-12-20 23:38:31 +0000;;;","2022-12-21 16:13;dukebot;Changeset: fef70d78
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-12-22 00:12:15 +0000
URL:       https://git.openjdk.org/jdk20/commit/fef70d78baec9ce11d50b9a4c1fb26a1b854ccbf
;;;",,,,,,,,,,,,,,,,,,
Document assigning of JMX's third port,JDK-8299126,5090133,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ssatish,ksrini,ksrini,2022-12-20 09:09,2023-03-01 09:33,2023-10-01 09:56,2023-03-01 09:33,openjdk8u,,,,,,,20,docs,,0,,,,,,,,,,,,,,,,"The third port of JMX can be defined as documented in jdk15 release notes the verbiage for this is described here:
https://bugs.openjdk.org/browse/JDK-8248353

With the back-port to jdk8u, jdk8 Release notes must indicate the above and perhaps the associated Management and Monitoring Document.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8263231,JDK-8297987,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zp0z:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7ef194ba,,,,,,,,,"2023-02-21 07:59;ssatish;Hi [~ksrini]

I'm getting this reviewed internally. 

Thanks,
Savitha;;;","2023-03-01 09:33;ssatish;Reviewed and approved by [~kevinw];;;",,,,,,,,,,,,,,,,,,,
 ClassLoader::defineClass2 throws OOME but JNI exception pending thrown by getUTF,JDK-8299088,5090093,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jlu,lancea,lancea,2022-12-20 03:30,2023-03-16 00:20,2023-10-01 09:56,2023-03-10 09:41,,,,,,,,21,core-libs,,0,noreg-trivial,,,,,,,,,,,,,,,JNI exception pending defect groups in ClassLoader.c,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299056,,,,JDK-8294252,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zos3:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2023-03-08 14:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12934
Date: 2023-03-08 22:02:22 +0000;;;","2023-03-10 09:41;dukebot;Changeset: 6f54eda4
Author:    Justin Lu <jlu@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2023-03-10 17:40:10 +0000
URL:       https://git.openjdk.org/jdk/commit/6f54eda4a42a7c27c8eabbdc1c989de7cf246bdb
;;;",,,,,,,,,,,,,,,,,,,
[REDO] JDK-4512626 Non-editable JTextArea provides no visual indication of keyboard focus,JDK-8299077,5090081,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kizune,aghaisas,aghaisas,2022-12-19 23:51,2023-02-07 07:07,2023-10-01 09:56,2022-12-21 16:11,20,21,,,,,,20,client-libs,,0,a11y,bugdb_34470414,regression,regression_4512626,sn_134,tier3,tier4,tier5,vpat,vpat-11u,vpat-17u,vpat-8u,,,,"The fix for JDK-4512626 caused test failures* in tier3, tier4 and tier5.
It was backed out.

Thus the fix for JDK-4512626 is to be redone.

There are too many failures to list them all, among them:
javax/swing/text/StyledEditorKit/8016833/bug8016833.java (tier3)
javax/swing/text/html/Test4783068.java (tier4)",,,,,,,,,,JDK-8299313,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-4512626,JCK-7318607,JDK-8299128,JDK-8299127,,,,JCK-7318607,JDK-8301989,,,,,,,,,,,,,generic,,,,,,,20,,generic,,,,,,"0|i2zopf:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-12-20 04:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/61
Date: 2022-12-20 10:54:16 +0000;;;","2022-12-20 08:31;dcubed;Converting this bug into the [REDO] and changed the priority
to match the original bug.;;;","2022-12-20 13:51;kizune;Looks like all but JCK test failures are caused by the changed behaviour of the text caret painter - before it started with caret invisible, waited for the blinkRate and then painted caret for the first time. With my changes it starts with caret painted, waits for the blinkRate and then makes it invisible. That affected all the tests that take screenshot of the text component and analyze them pixel by pixel - they do not expect the caret in the image and fail. By removing the extra flasher reset the tests are passing.;;;","2022-12-20 15:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/68
Date: 2022-12-20 23:38:31 +0000;;;","2022-12-20 16:02;kizune;Fix causes JCK failure;;;","2022-12-21 16:13;dukebot;Changeset: fef70d78
Author:    Alexander Zuev <kizune@openjdk.org>
Date:      2022-12-22 00:12:15 +0000
URL:       https://git.openjdk.org/jdk20/commit/fef70d78baec9ce11d50b9a4c1fb26a1b854ccbf
;;;",,,,,,,,,,,,,,,
TestStringDeduplicationInterned.java fails because extra deduplication,JDK-8299075,5090080,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,stefank,enikitin,enikitin,2022-12-19 23:40,2023-09-27 23:32,2023-10-01 09:56,2023-05-16 09:05,20,21,,,,,,21,hotspot,,0,atr,genzgc,noreg-self,tier2,-Xcomp,zgc,,,,,,,,,,"Has only been seen in linux-aarch64 and macosx-aarch64 so far (not with debug builds). A repetition of JDK-8278127 in main repo?

The additional VM arguments seem to be pre-requisite also:

-Xcomp -XX:+CreateCoredumpOnCrash -XX:TieredStopAtLevel=3

The stacktrace:

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at gc.stringdedup.TestStringDeduplicationTools.testInterned(TestStringDeduplicationTools.java:517)
	at gc.stringdedup.TestStringDeduplicationInterned.main(TestStringDeduplicationInterned.java:94)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)
",,,,,,,,,,JDK-8317138,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8278127,,,,,,,,,JDK-8299023,JDK-8278127,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zop7:",9223372036854775807,b23,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-12-21 07:50;tschatzl;Seems to be an issue with the extra GCs due to code cache exhaustion with -Xcomp that the tests do not handle well;;;","2023-05-16 02:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14005
Date: 2023-05-16 09:39:04 +0000;;;","2023-05-16 09:05;dukebot;Changeset: 682359cb
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-05-16 16:04:18 +0000
URL:       https://git.openjdk.org/jdk/commit/682359cb4871d779425a9468e8a307169b3651d6
;;;",,,,,,,,,,,,,,,,,,
nmethod marked for deoptimization is not deoptimized,JDK-8299074,5090079,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,enikitin,enikitin,2022-12-19 23:24,2023-02-07 00:03,2023-10-01 09:56,2023-01-18 00:17,17,19,20,21,,,,21,hotspot,,0,atr,intermittent,oracle-triage-11,oracle-triage-21,,,,,,,,,,,,"Has only been seen on linux-aarch64 so far, debug versions seem to be not affected. The VM had additional arguments:

-Xcomp -XX:+CreateCoredumpOnCrash -XX:TieredStopAtLevel=1

We've got a stack trace:

java.lang.Error: Exception occurred during test execution
	at compiler.codecache.stress.CodeCacheStressRunner.runTest(CodeCacheStressRunner.java:42)
	at compiler.codecache.stress.UnexpectedDeoptimizationAllTest.main(UnexpectedDeoptimizationAllTest.java:67)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.lang.NullPointerException: Cannot invoke ""[Ljava.lang.Class;.clone()"" because ""this.parameterTypes"" is null
	at java.base/java.lang.reflect.Method.getParameterTypes(Method.java:316)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.slotCount(MethodHandleAccessorFactory.java:348)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.useNativeAccessor(MethodHandleAccessorFactory.java:332)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(MethodHandleAccessorFactory.java:96)
	at java.base/jdk.internal.reflect.ReflectionFactory.newConstructorAccessor(ReflectionFactory.java:200)
	at java.base/java.lang.reflect.Constructor.acquireConstructorAccessor(Constructor.java:547)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:497)
	at java.base/java.lang.reflect.ReflectAccess.newInstance(ReflectAccess.java:128)
	at java.base/jdk.internal.reflect.ReflectionFactory.newInstance(ReflectionFactory.java:304)
	at java.base/java.lang.Class.newInstance(Class.java:685)
	at compiler.codecache.stress.Helper$TestCase.get(Helper.java:124)
	at compiler.codecache.stress.CodeCacheStressRunner.test(CodeCacheStressRunner.java:47)
	at jdk.test.lib.TimeLimitedRunner.call(TimeLimitedRunner.java:71)
	at compiler.codecache.stress.CodeCacheStressRunner.runTest(CodeCacheStressRunner.java:40)
	... 5 more

Different failure mode:

java.lang.Error: Exception occurred during test execution
	at compiler.codecache.stress.CodeCacheStressRunner.runTest(CodeCacheStressRunner.java:42)
	at compiler.codecache.stress.UnexpectedDeoptimizationAllTest.main(UnexpectedDeoptimizationAllTest.java:67)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.lang.NullPointerException: Cannot read the array length because ""this.parameterTypes"" is null
	at java.base/java.lang.reflect.Method.getParameterCount(Method.java:323)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.useNativeAccessor(MethodHandleAccessorFactory.java:324)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(MethodHandleAccessorFactory.java:96)
	at java.base/jdk.internal.reflect.ReflectionFactory.newConstructorAccessor(ReflectionFactory.java:200)
	at java.base/java.lang.reflect.Constructor.acquireConstructorAccessor(Constructor.java:547)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:497)
	at java.base/java.lang.reflect.ReflectAccess.newInstance(ReflectAccess.java:128)
	at java.base/jdk.internal.reflect.ReflectionFactory.newInstance(ReflectionFactory.java:304)
	at java.base/java.lang.Class.newInstance(Class.java:685)
	at compiler.codecache.stress.Helper$TestCase.get(Helper.java:124)
	at compiler.codecache.stress.CodeCacheStressRunner.test(CodeCacheStressRunner.java:47)
	at jdk.test.lib.TimeLimitedRunner.call(TimeLimitedRunner.java:71)
	at compiler.codecache.stress.CodeCacheStressRunner.runTest(CodeCacheStressRunner.java:40)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8221734,JDK-8300926,,,,"2023-01-08 22:30;thartmann;8299074.diff;https://bugs.openjdk.org/secure/attachment/102238/8299074.diff","2023-01-08 23:40;thartmann;hs_err_pid985220.log;https://bugs.openjdk.org/secure/attachment/102241/hs_err_pid985220.log","2023-01-08 23:46;thartmann;hs_err_pid987126.log;https://bugs.openjdk.org/secure/attachment/102242/hs_err_pid987126.log",,,,,,,,,,,,,,,,,,,,,,"0|i2zooz:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-20 10:05;chagedorn;ILW = Test failure with C1, only on linux-aarch64 product seen so far and single test, no workaround = MLH = P4;;;","2023-01-05 06:58;thartmann;I can reproduce this and it fails first with JDK 20 b3 (jdk-20+3-101).

EDIT: It also reproduces with earlier versions (1/100) but just triggers much more often after JDK-8288425 in JDK 20 b3 (3/10).;;;","2023-01-06 07:46;thartmann;This also reproduces with JDK 19 but only with --enable-preview -DhelperVirtualThread=true which uses virtual threads in the test (Virtual Threads were added in JDK 19 b21 with JDK-8284161). This might therefore well be a Loom related issue.

Attached 8299074.diff modifies the test to reproduce the issue more reliably (still needs to be executed in a loop with ""-Xcomp -XX:TieredStopAtLevel=1"").;;;","2023-01-11 07:56;thartmann;We SIGSEGV at 0x0000fffd19c45a68 in C1 compiled method 'useNativeAccessor(Executable member)' (see attached hs_err_pid985220.log) because the field 'Method::parameterTypes' appears to be NULL when calling 'getParameterCount()' on the 'member' argument:

  0x0000fffd19c45a5c:   ldr	x1, [sp,#96]    // Load 'member' argument from stack
  0x0000fffd19c45a60:   ldr	w0, [x1,#48]    // Load 'parameterTypes' field from 'member' which is a 'Method'
  0x0000fffd19c45a64:   lsl	x0, x0, #3      // Load parameterTypes.length
  0x0000fffd19c45a68:   ldr	w2, [x0,#12]        ; implicit exception: dispatches to 0x0000fffd19c45bfc
  
  [...]
  
  0x0000fffd19c45bfc:   bl	0x0000fffd190cfc80  ; ImmutableOopMap {c_rarg1=Oop c_rarg0=Oop [96]=Oop }
                                                    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                    ; - java.lang.reflect.Method::getParameterCount@4 (line 323)
                                                    ; - jdk.internal.reflect.MethodHandleAccessorFactory::useNativeAccessor@29 (line 324)
                                                    ;   {runtime_call throw_null_pointer_exception Runtime1 stub}

Looking at the stack trace, 'useNativeAccessor' was called with a 'java/lang/reflect/Constructor' argument but we are in inlined 'java.lang.reflect.Method::getParameterCount' instead of 'java.lang.reflect.Constructor::getParameterCount' and therefore load garbage:

J 510 c1 jdk.internal.reflect.MethodHandleAccessorFactory.useNativeAccessor(Ljava/lang/reflect/Executable;)Z java.base@20-ea (74 bytes)
J 2909 c1 jdk.internal.reflect.MethodHandleAccessorFactory.newConstructorAccessor(Ljava/lang/reflect/Constructor;)Ljdk/internal/reflect/ConstructorAccessorImpl; java.base@20-ea (84 bytes)

Looks like at compile time, 'Method' was the only implementer of 'Executable' and we therefore speculatively inlined 'java.lang.reflect.Method::getParameterCount' at the virtual call site. A dependency should ensure that the nmethod is deoptimized when class loading invalidates that assumption. For some reason, that didn't work in this case.

UPDATE:
I verified that the dependencies are there in the nmethod:

Dependencies:
Dependency of type unique_concrete_method_4
  context = *java.lang.reflect.Executable
  method  = {method} {0x0000000800043198} 'getModifiers' '()I' in 'java/lang/reflect/Method'
  class   = java.lang.reflect.Executable
  method  = *{method} {0x0000000800433620} 'getModifiers' '()I' in 'java/lang/reflect/Executable'
Dependency of type unique_concrete_method_4
  context = *java.lang.reflect.Executable
  method  = {method} {0x00000008000434b0} 'getParameterCount' '()I' in 'java/lang/reflect/Method'
  class   = java.lang.reflect.Executable
  method  = *{method} {0x0000000800433990} 'getParameterCount' '()I' in 'java/lang/reflect/Executable'
Dependency of type unique_concrete_method_4
  context = *java.lang.reflect.Executable
  method  = {method} {0x0000000800043400} 'isVarArgs' '()Z' in 'java/lang/reflect/Method'
  class   = java.lang.reflect.Executable
  method  = {method} {0x00000008004338e0} 'isVarArgs' '()Z' in 'java/lang/reflect/Executable'
Dependency of type unique_concrete_method_4
  context = *java.lang.reflect.Executable
  method  = {method} {0x00000008000432a0} 'getParameterTypes' '()[Ljava/lang/Class;' in 'java/lang/reflect/Method'
  class   = java.lang.reflect.Executable
  method  = *{method} {0x0000000800433728} 'getParameterTypes' '()[Ljava/lang/Class;' in 'java/lang/reflect/Executable'
;;;","2023-01-11 07:58;thartmann;Updated ILW = Incorrect execution of C1 compiled code, reproducible with test that stresses deoptimization, disable CHA = HLM = P3;;;","2023-01-12 07:55;thartmann;The problem is a race condition between one thread repeatedly calling WB_DeoptimizeAll and the main thread checking nmethod dependencies on class loading and also attempting marking/deoptimization of nmethods due to dependency violations. Details below.

Thread1: useNativeAccessor is compiled under the assumption that java.lang.reflect.Executable has only one implementer java.lang.reflect.Method. A corresponding dependency is registered in the nmethod.

Thread2: Calls Whitebox API method WB_DeoptimizeAll -> CodeCache::mark_all_nmethods_for_deoptimization() that marks useNativeAccessor for deoptimization. 

Thread1: Triggers class loading of java.lang.reflect.Constructor and CodeCache::flush_dependents_on -> CodeCache::mark_for_deoptimization -> ... -> DependencyContext::mark_dependent_nmethods detects that useNativeAccessor needs to be deoptimized now that java.lang.reflect.Executable has more than one implementer. However, the nmethod is already marked for deoptimization (most nmethods are) and therefore ignored. The marked counter is 0 and therefore Deoptimization::deoptimize_all_marked() is not executed either. The thread continues execution and ends up crashing because a java.lang.reflect.Constructor object is passed to compiled useNativeAccessor which can not handle it.

Thread2: Is still in WB_DeoptimizeAll, marking nmethods for deoptimization but didn't get a chance to call Deoptimization::deoptimize_all_marked() yet.

Before JDK-8221734 in JDK 13, WB_DeoptimizeAll acquired the Compile_lock but it got removed:
http://hg.openjdk.java.net/jdk/jdk/rev/9b70ebd131b4#l15.7

I think it should be restored. [~rehn] what do you think?;;;","2023-01-13 00:30;rehn;It seems like logical issue to assume that something marked for deopt can be assumed to also *be* deopt.
(probably me that introduced this logical issue since we used to barrier this with a safepoint)
I think your assessment for the bug in question is correct and your suggested fix would fix this case.

But anytime the code make Deoptimization::deoptimize_all_marked() depended on if we marked anything and do not consider if it was already marked we could have a bug.

So for a more general solution we should either always call Deoptimization::deoptimize_all_marked(), I don't think that would be noticeable performance-wise in general workload (maybe in some test).

A better solution might be to make the call to Deoptimization::deoptimize_all_marked() dependent on if we marked or anyone else marked the nmethod we are concerned about.

Yes could also use a lock and serialize the marked+deopt stage, but I'm a bit worried that when we do thread local deopts would need to grab the global lock.;;;","2023-01-13 00:47;rehn;I find only DependencyContext that consider if the method is already marked or not.
Thus can return 0 if the method is already marked and then caller skips calling  Deoptimization::deoptimize_all_marked().
If the caller now assumes that the methods are already deoptimiaezd we have a bug.

I find these suspicious places:
MethodHandles::flush_dependent_nmethods()
MHN_clearCallSiteContext
CodeCache::flush_dependents_on

Non-problematic use-cases, but if someone clever adds a check to already marked it may create a bug:
CodeCache::flush_dependents_on_method;;;","2023-01-13 04:23;thartmann;Thanks Robbin, I think I'll go with the solution of calling Deoptimization::deoptimize_all_marked() when we observed a marked nmethod (no matter if we marked it ourselves or another thread did). I'll look at the other methods as well.;;;","2023-01-16 07:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12012
Date: 2023-01-16 15:51:28 +0000;;;","2023-01-18 00:17;dukebot;Changeset: 66f7387b
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-01-18 08:15:19 +0000
URL:       https://git.openjdk.org/jdk/commit/66f7387b5ffa53861b92b068fb9832fc433d9f79
;;;","2023-01-19 03:54;mbaesken;We see today some timeouts in the test compiler/jsr292/ContinuousCallSiteTargetChange.java . Could this be related ?
(some timeout issues of this test were addressed in https://bugs.openjdk.org/browse/JDK-8234146 previously);;;","2023-01-19 04:07;thartmann;I think it could be that we are now calling Deoptimization::deoptimize_all_marked more often in scenarios like ContinuousCallSiteTargetChange.java where multiple threads mark nmethods for deoptimization. That could of course affect the tests runtime negatively due to the overhead of handshakes etc.

We haven't seen any timeouts with that test yet though. Can you reproduce it and is the test just slower or running forever?;;;","2023-01-19 06:04;mbaesken;We only observed the timeouts in our fastdebug nightly tests, not in the  release nightly tests. So I think most likely with even higher timeouts the test would come to a successful end as well in fastdebug.
However also in the release nightly tests  compiler/jsr292/ContinuousCallSiteTargetChange.java  got much slower compared to the previous days (factor  20 - 100, dependent on platform and build type).;;;","2023-01-23 23:55;thartmann;[~mbaesken], thanks for the details, we observed the issue as well now, see JDK-8300926. I'll take a look.;;;","2023-01-24 01:11;mbaesken;WIth changing the test timeout to
- * @run driver compiler.jsr292.ContinuousCallSiteTargetChange
+ * @run driver/timeout=1500 compiler.jsr292.ContinuousCallSiteTargetChange

we do not observe the issue any longer. But I guess with the startup regressions observed and reported in JDK-8300926 ,   you plan some kind of fix so adjusting the test timeout is not desired ?
;;;","2023-01-24 01:31;thartmann;Yes, [~rehn] is investigating.;;;","2023-01-31 01:19;rehn;Before bug fix did we do 10 deopt handshakes during jetty startup benchmark, now 39 instead.
I think the best option is do somekind of epoch based deoptimization and remove locks held while performing the actual stack deopt.;;;",,,
ViewportOverlapping test fails intermittently on Win10 & Win11,JDK-8299052,5090060,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,honkar,honkar,honkar,2022-12-19 14:17,2023-07-12 13:01,2023-10-01 09:56,2023-06-12 16:14,17,19,20,,,,,22,client-libs,,0,intermittent,problemlist,sn_131,sn_132,sn_133,sn_134,sn_141,sn_143,sn_144,sn_145,sn_146,,,,,"Here's a snippet from the log file:

#section:main
----------messages:(7/429)----------
command: main ViewportOverlapping
reason: User specified action: run main ViewportOverlapping
started: Sat Oct 22 05:23:21 UTC 2022
Mode: othervm [test or library overrides a system module]
Additional options from @modules: --add-modules java.desktop --add-exports java.desktop/sun.awt=ALL-UNNAMED --add-exports java.desktop/java.awt.peer=ALL-UNNAMED
finished: Sat Oct 22 05:23:32 UTC 2022
elapsed time (seconds): 10.946
----------configuration:(6/345)*----------
Boot Layer
  add modules: java.desktop
  add exports: java.desktop/java.awt.peer ALL-UNNAMED
               java.desktop/sun.awt ALL-UNNAMED
  patch: java.desktop C:\\sb\\prod\\1666412082\\testoutput\\test-support\\jtreg_open_test_jdk_jdk_desktop_part2\\classes\\java\\awt\\patchlib\\java.desktop

----------System.out:(6/413)----------
Color will be compared with java.awt.Color[r=21,g=244,b=54] instead of java.awt.Color[r=21,g=244,b=54]
Testing Button
C&B. color: java.awt.Color[r=238,g=238,b=238] compare with java.awt.Color[r=21,g=244,b=54]
C&B. color: java.awt.Color[r=238,g=238,b=238] compare with java.awt.Color[r=21,g=244,b=54]
The test failed: The LW component did not received the click.
The test is over, hit Ctl-C to stop Java VM
----------System.err:(17/1067)----------
do not skipTestingEmbeddedFrame
java.lang.RuntimeException: The LW component did not received the click.
at OverlappingTestBase.fail(OverlappingTestBase.java:661)
at OverlappingTestBase.testComponent(OverlappingTestBase.java:479)
at OverlappingTestBase.testAwtControls(OverlappingTestBase.java:521)
at OverlappingTestBase.init(OverlappingTestBase.java:555)
at OverlappingTestBase.doMain(OverlappingTestBase.java:583)
at ViewportOverlapping.main(ViewportOverlapping.java:156)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException: The LW component did not received the click.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: The LW component did not received the click.
----------rerun:(50/5724)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295813,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2zokr:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-12-20 12:36;honkar;[~prr] Earlier we faced the problem of multiple windows caused by tests running concurrently when the entire test folder was executed. This was resolved by adding test args - JTREG_JOBS=1. Additionally, [~aivanov] suggested that it would be good to include awt & swing to exclusiveAccess.dirs in TEST.ROOT which would prevent anyone trying to execute test folder concurrently by chance. 

[~prr] Tested the changes, it works as expected. Would it be a good idea to add these folders to exclusiveAccess.dirs unless it was excluded for a reason?;;;","2022-12-20 15:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11747
Date: 2022-12-20 23:25:30 +0000;;;","2022-12-22 10:00;honkar;[~jpai] Thank you for testing it out. I will revert the changes.;;;","2023-06-02 11:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/14289
Date: 2023-06-02 17:56:42 +0000;;;","2023-06-12 16:14;dukebot;Changeset: 2dca5ae4
Author:    Harshitha Onkar <honkar@openjdk.org>
Date:      2023-06-12 23:11:52 +0000
URL:       https://git.openjdk.org/jdk/commit/2dca5ae4fdc0a2232a0ca3cd295d57a9e362e64c
;;;",,,,,,,,,,,,,,,,
tools/doclint/BadPackageCommentTest.java fails after JDK-8298943,JDK-8299045,5090053,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,jjg,dcubed,dcubed,2022-12-19 12:16,2023-01-03 11:31,2023-10-01 09:56,2022-12-19 13:10,21,,,,,,,21,tools,,0,noreg-self,regression,tier1,tier4,,,,,,,,,,,,"The following test failed in the JDK21 CI:

tools/doclint/BadPackageCommentTest.java

Here's a snippet from the log file:

----------System.err:(55/1598)----------
Output:
BadPackageCommentTest.java:14: warning: documentation comment not expected here
package p;
^
BadPackageCommentTest.java:12: error: no tag name after '@'
 * @@@
   ^
BadPackageCommentTest.java:12: error: no tag name after '@'
 * @@@
    ^
BadPackageCommentTest.java:12: error: no tag name after '@'
 * @@@
     ^
3 errors
1 warning
Error: expected output not found
EXPECT>>BadPackageCommentTest.java:14: warning: documentation comment not expected here
package p;
^
BadPackageCommentTest.java:12: error: no tag name after @
 * @@@
   ^
BadPackageCommentTest.java:12: error: no tag name after @
 * @@@
    ^
BadPackageCommentTest.java:12: error: no tag name after @
 * @@@
     ^
3 errors
1 warning<<
 FOUND>>BadPackageCommentTest.java:14: warning: documentation comment not expected here
package p;
^
BadPackageCommentTest.java:12: error: no tag name after '@'
 * @@@
   ^
BadPackageCommentTest.java:12: error: no tag name after '@'
 * @@@
    ^
BadPackageCommentTest.java:12: error: no tag name after '@'
 * @@@
     ^
3 errors
1 warning<<
java.lang.Exception: 1 errors occurred
	at DocLintTester.run(DocLintTester.java:75)
	at DocLintTester.main(DocLintTester.java:42)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: 1 errors occurred",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298943,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zoj7:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-12-19 12:20;dcubed;[~jjg]  - Looks like this fix:
JDK-8298943 Missing escapes for single quote marks in compiler.properties
is causing a Tier1 test to fail...;;;","2022-12-19 12:35;jjg;Golden file/text needs to be updated
;;;","2022-12-19 13:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11732
Date: 2022-12-19 20:56:14 +0000;;;","2022-12-19 13:10;dukebot;Changeset: 5d330f52
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-12-19 21:09:01 +0000
URL:       https://git.openjdk.org/jdk/commit/5d330f5285b535b37dde5cd4e42374d92fafb550
;;;","2022-12-20 10:45;dcubed;The fix for this bug is integrated in jdk-21+3-105.;;;",,,,,,,,,,,,,,,,
test/jdk/javax/swing/JComboBox/JComboBoxBorderTest.java fails on non mac ,JDK-8299044,5090052,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-12-19 11:08,2023-01-03 11:31,2023-10-01 09:56,2022-12-19 15:27,20,,,,,,,21,client-libs,,0,atr,,,,,,,,,,,,,,,"test/jdk/javax/swing/JComboBox/JComboBoxBorderTest.java fails on Ubuntu 

----------System.err:(19/1250)----------
java.lang.ClassNotFoundException: com.apple.laf.AquaLookAndFeel
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:496)
	at java.base/java.lang.Class.forName(Class.java:475)
	at java.desktop/javax.swing.SwingUtilities.loadSystemClass(SwingUtilities.java:2036)
	at java.desktop/javax.swing.UIManager.setLookAndFeel(UIManager.java:637)
	at JComboBoxBorderTest.main(JComboBoxBorderTest.java:86)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.ClassNotFoundException: com.apple.laf.AquaLookAndFeel
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.ClassNotFoundException: com.apple.laf.AquaLookAndFeel",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299186,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux,,,,,,"0|i2zoiz:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-12-19 11:10;landrews;The test will fails on non mac since the test tries load UIManager.setLookAndFeel(""com.apple.laf.AquaLookAndFeel""); which is for mac os look and feel. This test is added a part of https://bugs.openjdk.org/browse/JDK-8054572 
This is a test bug adding the following will solve the problem where we specify the test to run only on mac os.
@requires (os.family == ""mac"");;;","2022-12-19 11:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11730
Date: 2022-12-19 19:34:21 +0000;;;","2022-12-19 15:27;dukebot;Changeset: abc12976
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Harshitha Onkar <honkar@openjdk.org>
Date:      2022-12-19 23:26:01 +0000
URL:       https://git.openjdk.org/jdk/commit/abc1297643b03ea9b4a03a12ce681971784774fb
;;;",,,,,,,,,,,,,,,,,,
test/jdk/javax/swing/AbstractButton/5049549/bug5049549.java fails with java.lang.NullPointerException,JDK-8299043,5090051,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,landrews,landrews,landrews,2022-12-19 10:44,2023-01-03 11:31,2023-10-01 09:56,2022-12-19 17:18,19,20,,,,,,21,client-libs,,0,atr,,,,,,,,,,,,,,,"test/jdk/javax/swing/AbstractButton/5049549/bug5049549.java fails with java.lang.NullPointerException


----------System.err:(15/1129)----------
java.lang.ExceptionInInitializerError
	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized0(Native Method)
	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized(Unsafe.java:1160)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.ensureClassInitialized(MethodHandleAccessorFactory.java:300)
	at java.base/jdk.internal.reflect.MethodHandleAccessorFactory.newMethodAccessor(MethodHandleAccessorFactory.java:71)
	at java.base/jdk.internal.reflect.ReflectionFactory.newMethodAccessor(ReflectionFactory.java:159)
	at java.base/java.lang.reflect.Method.acquireMethodAccessor(Method.java:724)
	at java.base/java.lang.reflect.Method.invoke(Method.java:575)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.lang.NullPointerException: Cannot invoke ""java.net.URL.toExternalForm()"" because ""location"" is null
	at java.desktop/javax.swing.ImageIcon.<init>(ImageIcon.java:232)
	at bug5049549.<clinit>(bug5049549.java:44)
	... 9 more
STATUS:Failed.`main' threw exception: java.lang.ExceptionInInitializerError",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299188,,,,,,,,,,,,,,,,,,,,,,,x86,,,,,,,,,linux_ubuntu,,,,,,"0|i2zoir:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-12-19 11:58;landrews;Found the issue actually the image file extension is small case (.gif) https://github.com/openjdk/jdk/tree/master/test/jdk/javax/swing/AbstractButton/5049549/ but the test has upper case (GIF) 
https://github.com/openjdk/jdk/blob/master/test/jdk/javax/swing/AbstractButton/5049549/bug5049549.java#L44-L50 . Test works as expected in mac but fails in Ubuntu . Fixed the image file extension to lower case and  java.lang.NullPointerException is not seen any more. ;;;","2022-12-19 12:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11731
Date: 2022-12-19 20:20:11 +0000;;;","2022-12-19 17:18;dukebot;Changeset: dd15d306
Author:    lawrence.andrews <lawrence.andrews@oracle.com>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2022-12-20 01:16:37 +0000
URL:       https://git.openjdk.org/jdk/commit/dd15d306a68caa02659dd95d16b71d0f1a437bc6
;;;",,,,,,,,,,,,,,,,,,
Runtime::exec clarification of inherited environment,JDK-8299034,5090040,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rriggs,kganapureddy,kganapureddy,2022-12-19 07:05,2023-01-18 23:22,2023-10-01 09:56,2023-01-12 06:55,,,,,,,,20,core-libs,,0,conformance,noreg-sqe,,,,,,,,,,,,,,"The spec of 
https://download.java.net/java/early_access/jdk20/docs/api/java.base/java/lang/Runtime.html#exec(java.lang.String%5B%5D,java.lang.String%5B%5D,java.io.File) mention that
""If envp is null, the subprocess inherits the environment settings of the current process.""

Here the term ""inherits"" looks ambiguous, It would be helpful to clarify/enhance this further in the spec.
",,,,,,,,,,JDK-8300092,JDK-8300376,,,,,,,,,,,,,,,,,,,JDK-8299157,,,,,,,JCK-7318586,,,,,,,,,,,,,,,,,,,,,,,,,,,,1.3.0,,,,,,,,"0|i2zogb:",9223372036854775807,b32,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-12-20 13:39;rriggs;The description of the method in java.lang.Runtime `public Process exec(String[] cmdarray, String[] envp, File dir)`
inheriting the environment in the case of envp == null could use a qualification such as:

""The minimal set of system dependent environment variables may override the values provided in the environment."";;;","2023-01-11 10:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/98
Date: 2023-01-11 18:31:06 +0000;;;","2023-01-12 06:55;dukebot;Changeset: 6a4a8743
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-01-12 14:54:39 +0000
URL:       https://git.openjdk.org/jdk20/commit/6a4a8743562bd8f937542cdeb6557b3fe60e9a23
;;;",,,,,,,,,,,,,,,,,,
BMPImageReader.java readColorPalette could use staggeredReadByteStream,JDK-8299025,5090029,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mbaesken,mbaesken,mbaesken,2022-12-19 05:25,2023-01-03 11:34,2023-10-01 09:56,2022-12-21 00:07,11,17,19,20,21,,,21,client-libs,,0,,,,,,,,,,,,,,,,"Looks like the coding in jdk/src/java.desktop/share/classes/com/sun/imageio/plugins/bmp/BMPImageReader.java readColorPalette  is rather close to what  staggeredReadByteStream does, so we could instead use staggeredReadByteStream and do not duplicate the coding.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zodv:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@377c353d,,,,,,,,,"2022-12-19 05:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11720
Date: 2022-12-19 13:49:18 +0000;;;","2022-12-21 00:07;dukebot;Changeset: f36e1449
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-12-21 08:05:37 +0000
URL:       https://git.openjdk.org/jdk/commit/f36e144923da431a9c47faf5ae6577714fcf3adf
;;;",,,,,,,,,,,,,,,,,,,
Linux ppc64le and s390x build issues after JDK-8160404,JDK-8299022,5090026,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mbaesken,mbaesken,mbaesken,2022-12-19 03:50,2023-01-03 11:31,2023-10-01 09:56,2022-12-19 08:21,21,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,"Looks like JDK-8160404 caused issues in the Linux ppc64le build.
We now run into

/openjdk/nb/linuxppc64le/jdk/src/hotspot/cpu/ppc/assembler_ppc.hpp:98:49: error: no matching function for call to 'RelocationHolder::RelocationHolder(NULL)'
   AddressLiteral() : _address(NULL), _rspec(NULL) {}

Looks like a constructor of RelocationHolder was removed/replaced.

Linux s390x has similar coding so most likely needs adjustment too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8160404,,,,,,,,,,,,,,ppc,,,,,,,,,linux,,,,,,"0|i2zod7:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@11336cca,,,,,,,,,"2022-12-19 04:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11719
Date: 2022-12-19 12:12:00 +0000;;;","2022-12-19 08:21;dukebot;Changeset: 756a06d4
Author:    Matthias Baesken <mbaesken@openjdk.org>
Date:      2022-12-19 16:20:12 +0000
URL:       https://git.openjdk.org/jdk/commit/756a06d4c239966ed68bbbe8ee4c6b6d02154c02
;;;",,,,,,,,,,,,,,,,,,,
java/net/httpclient/HttpsTunnelAuthTest.java fails with java.io.IOException: HTTP/1.1 header parser received no bytes,JDK-8299018,5090021,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dfuchs,dfuchs,dfuchs,2022-12-19 01:39,2023-02-13 06:46,2023-10-01 09:56,2022-12-20 03:09,,,,,,,,21,core-libs,,0,httpclient,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,,"This is due to the ProxyServer abruptly closing the connection. The exception seems to be caused by a debug statement trying to printf a string has a number (%d and passing a string argument)

Testing HTTP_2, http, /foo/http2
Proxy is: [HTTP @ /127.0.0.1:51144]

Posting to HTTP_1_1 server at: http://localhost:51028/foo/http2 POST
Proxy: accepted new connection: Proxy connection 3, client sock:java.nio.channels.SocketChannel[connected local=/127.0.0.1:51144 remote=/127.0.0.1:51218]
POST http://localhost:51028/foo/http2 HTTP/1.1
Content-Length: 316
Host: localhost:51028
User-Agent: Java-http-client/21-internal

Proxy: unauthorized; 407 sent (112/112), linger: 2, nodelay: true
Proxy: content-length: Proxy: bad content-length, closing connection
Proxy: 	content-length: 316
Proxy: 	java.util.IllegalFormatConversionException: d != java.lang.String
Proxy: closing connection id=3, linger: 2, nodelay: true
Checking response: (POST http://localhost:51028/foo/http2) 407

Posting with Proxy-Authorization to HTTP_1_1 server at: http://localhost:51028/foo/http2 POST
Proxy: drained: 316
Unexpected exception: exiting: java.io.IOException: HTTP/1.1 header parser received no bytes
java.io.IOException: HTTP/1.1 header parser received no bytes
	at java.net.http/jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:909)
	at java.net.http/jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:133)
	at HttpsTunnelAuthTest.test(HttpsTunnelAuthTest.java:280)
	at HttpsTunnelAuthTest.main(HttpsTunnelAuthTest.java:194)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.io.IOException: HTTP/1.1 header parser received no bytes
	at java.net.http/jdk.internal.net.http.common.Utils.wrapWithExtraDetail(Utils.java:348)
	at java.net.http/jdk.internal.net.http.Http1Response$HeadersReader.onReadError(Http1Response.java:574)
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.checkForErrors(Http1AsyncReceiver.java:302)
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.flush(Http1AsyncReceiver.java:268)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	... 1 more
Caused by: java.io.IOException: connection closed locally
	at java.net.http/jdk.internal.net.http.SocketTube.signalClosed(SocketTube.java:159)
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.close(PlainHttpConnection.java:405)
	at java.net.http/jdk.internal.net.http.ConnectionPool.cleanup(ConnectionPool.java:501)
	at java.net.http/jdk.internal.net.http.ConnectionPool$CleanupTrigger.triggerCleanup(ConnectionPool.java:524)
	at java.net.http/jdk.internal.net.http.ConnectionPool$CleanupTrigger.onComplete(ConnectionPool.java:537)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadSubscription.signalCompletion(SocketTube.java:648)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.read(SocketTube.java:853)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowTask.run(SocketTube.java:181)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:303)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:256)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable(SocketTube.java:782)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadEvent.signalEvent(SocketTube.java:965)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowEvent.handle(SocketTube.java:253)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.handleEvent(HttpClientImpl.java:1390)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.lambda$run$3(HttpClientImpl.java:1335)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:1335)
Http1TestServer: stop
Http1TestServer: stop
Http2TestServerImpl: stop
",,,,,,,,,,JDK-8299267,JDK-8302334,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zoc3:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-12-19 02:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11717
Date: 2022-12-19 10:24:39 +0000;;;","2022-12-20 03:09;dukebot;Changeset: e5edb10d
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-12-20 11:06:36 +0000
URL:       https://git.openjdk.org/jdk/commit/e5edb10dc56d9edac8e050e0f8e6c116743975d6
;;;","2023-02-09 23:47;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
No risk, only a test change.
Clean backport.
Mentioned test passes. SAP nightly testing passed.;;;","2023-02-09 23:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1162
Date: 2023-02-10 07:51:34 +0000;;;",,,,,,,,,,,,,,,,,
Ensure that HttpResponse.BodySubscribers.ofFile writes all bytes ,JDK-8299015,5090018,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,chegar,chegar,chegar,2022-12-19 01:22,2023-08-08 14:08,2023-10-01 09:56,2022-12-21 04:21,11,17,19,,,,,21,core-libs,,0,hgupdate-sync,httpclient,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"The implementation of PathSubscriber should ensure that all bytes from the given buffers are written. Specifically, this method in PathSubscriber:

@Override
public void onNext(List<ByteBuffer> items) {
    try {
        out.write(items.toArray(Utils.EMPTY_BB_ARRAY));
...

the implementation assumes out.write(ByteBuffer[]) always writes the content of all buffers - this isn't the case and the method can write a lesser number of bytes from input buffers.

See https://mail.openjdk.org/pipermail/net-dev/2022-December/019883.html
",,,,,,,,,,JDK-8299270,JDK-8313843,JDK-8299353,JDK-8313289,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zobf:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-12-19 06:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11722
Date: 2022-12-19 14:02:41 +0000;;;","2022-12-21 04:21;dukebot;Changeset: a7d6de71
Author:    Chris Hegarty <chegar@openjdk.org>
Date:      2022-12-21 12:19:06 +0000
URL:       https://git.openjdk.org/jdk/commit/a7d6de71bb83c8715654f61dd166aad6e8dab847
;;;","2022-12-21 15:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/70
Date: 2022-12-21 23:08:08 +0000;;;","2022-12-22 01:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/964
Date: 2022-12-22 09:08:03 +0000;;;","2022-12-22 01:36;chegar;Fix request for jdk17u 

I'd like to backport this change to 17u as it fixes a potential for data loss in the fie subscriber. The changes are small and localised, and the backport is clean.;;;","2022-12-23 03:28;dukebot;Changeset: 9863f59e
Author:    Chris Hegarty <chegar@openjdk.org>
Date:      2022-12-22 12:49:25 +0000
URL:       https://git.openjdk.org/jdk/commit/9863f59e1db84f55dc9a1670cd73ec4bfc07bcb0
;;;",,,,,,,,,,,,,,,
"tools/jpackage/share/AddLauncherTest.java#id1 failed ""AddLauncherTest.test; checks=53""",JDK-8298995,5089994,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,almatvee,dcubed,dcubed,2022-12-17 20:11,2023-03-23 00:33,2023-10-01 09:56,2023-03-17 17:04,20,,,,,,,21,tools,,0,macos,sn_134,sn_139,tier8,,,,,,,,,,,,"The following test failed in the JDK20 CI:

tools/jpackage/share/AddLauncherTest.java#id1

Here's the test case that failed:

[17:28:00.918] [ RUN      ] AddLauncherTest.test
[17:28:02.195] TRACE: Not running file associations test because running in headless environment
[17:28:02.208] TRACE: Actions: [[initialize], [create], [unpack], [verify-install], [finalize]]
[17:28:02.214] TRACE: Create [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/fa.properties] properties file...
[17:28:02.215] TRACE: description=jpackage test extension
[17:28:02.215] TRACE: extension=AddLauncherTest
[17:28:02.216] TRACE: mime-type=application/x-jpackage-AddLauncherTest
[17:28:02.218] TRACE: Done
[17:28:02.223] TRACE: Create [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/Baz2.properties] properties file...
[17:28:02.224] TRACE: arguments=
[17:28:02.228] TRACE: description=Baz2 Description
[17:28:02.246] TRACE: Done
[17:28:02.247] TRACE: Create [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/foo.properties] properties file...
[17:28:02.247] TRACE: arguments=yep!
[17:28:02.247] TRACE: description=foo Description
[17:28:02.264] TRACE: Done
[17:28:02.265] TRACE: Create [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/Bar.properties] properties file...
[17:28:02.266] TRACE: arguments=one two three
[17:28:02.266] TRACE: icon=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/src.full/open/test/jdk/tools/jpackage/resources/icon.icns
[17:28:02.266] TRACE: description=Bar Description
[17:28:02.288] TRACE: Done
[17:28:02.295] TRACE: exec: Execute tool provider [javac -d ./test/jar-workdir /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/src.full/open/test/jdk/tools/jpackage/apps/Hello.java](4)...
[17:28:03.612] TRACE: exec: Done. Exit code: 0
[17:28:03.613] TRACE: assertEquals(0): Check command tool provider [javac -d ./test/jar-workdir /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/src.full/open/test/jdk/tools/jpackage/apps/Hello.java](4) exited with 0 code
[17:28:03.615] TRACE: exec: Execute tool provider [jar -c -f ./test/input/hello.jar -C ./test/jar-workdir .](7)...
[17:28:03.634] TRACE: exec: Done. Exit code: 0
[17:28:03.635] TRACE: assertEquals(0): Check command tool provider [jar -c -f ./test/input/hello.jar -C ./test/jar-workdir .](7) exited with 0 code
[17:28:03.637] TRACE: exec: Execute [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/macosx-x64-debug.jdk/jdk-20/fastdebug/bin/jpackage --input ./test/input --dest ./test/output --name AddLauncherTest --type pkg --main-jar hello.jar --main-class Hello --arguments Duke --arguments is --arguments the --arguments King --description ""AddLauncherTest Description"" --file-associations ./test/fa.properties --add-launcher Baz2=./test/Baz2.properties --add-launcher foo=./test/foo.properties --add-launcher Bar=./test/Bar.properties -J-Djlink.debug=true --verbose](33); inherit I/O...
[17:28:05.238] Building PKG package for AddLauncherTest.
[17:28:47.291] Command [PID: -1]:
    jlink --output /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/images/image-16587551705934258511/AddLauncherTest.app/Contents/runtime/Contents/Home --module-path /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/macosx-x64-debug.jdk/jdk-20/fastdebug/jmods --add-modules java.rmi,jdk.management.jfr,jdk.jdi,jdk.charsets,jdk.xml.dom,java.xml,java.datatransfer,jdk.jstatd,jdk.httpserver,java.desktop,java.security.sasl,jdk.zipfs,java.base,jdk.crypto.ec,jdk.javadoc,jdk.management.agent,jdk.jshell,jdk.editpad,jdk.sctp,java.sql.rowset,jdk.jsobject,jdk.unsupported,jdk.jlink,java.smartcardio,java.security.jgss,java.compiler,jdk.nio.mapmode,jdk.dynalink,jdk.unsupported.desktop,jdk.accessibility,jdk.security.jgss,jdk.incubator.vector,java.sql,java.xml.crypto,java.logging,java.transaction.xa,jdk.jfr,jdk.crypto.cryptoki,jdk.net,jdk.random,java.naming,jdk.internal.ed,java.prefs,java.net.http,jdk.compiler,jdk.naming.rmi,jdk.internal.opt,jdk.jconsole,jdk.attach,jdk.incubator.concurrent,jdk.internal.le,java.management,jdk.jdwp.agent,jdk.internal.jvmstat,java.instrument,jdk.management,jdk.security.auth,java.scripting,jdk.jdeps,jdk.jartool,jdk.jpackage,java.management.rmi,jdk.naming.dns,jdk.localedata --strip-native-commands --strip-debug --no-man-pages --no-header-files
[17:28:47.292] Output:
    WARNING: Using incubator modules: jdk.incubator.vector, jdk.incubator.concurrent

[17:28:47.293] Returned: 0

[17:28:48.390] Using default package resource JavaApp.icns [icon] (add AddLauncherTest.icns to the resource-dir to customize).
[17:28:48.397] Preparing Info.plist: /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/images/image-16587551705934258511/AddLauncherTest.app/Contents/Info.plist.
[17:28:48.427] Using default package resource Info-lite.plist.template [Application Info.plist] (add Info.plist to the resource-dir to customize).
[17:28:48.489] Using default package resource Runtime-Info.plist.template [Java Runtime Info.plist] (add Runtime-Info.plist to the resource-dir to customize).
[17:28:48.582] Running /usr/bin/codesign
[17:28:49.018] Running /usr/bin/codesign
[17:28:49.082] Running /usr/bin/codesign
[17:28:49.138] Running /usr/bin/codesign
[17:28:49.215] Running /usr/bin/codesign
[17:28:49.301] Running /usr/bin/codesign
[17:28:49.375] Running /usr/bin/codesign
[17:28:49.432] Running /usr/bin/codesign
[17:28:49.500] Running /usr/bin/codesign
[17:28:49.562] Running /usr/bin/codesign
[17:28:49.629] Running /usr/bin/codesign
[17:28:49.683] Running /usr/bin/codesign
[17:28:49.746] Running /usr/bin/codesign
[17:28:49.819] Running /usr/bin/codesign
[17:28:49.918] Running /usr/bin/codesign
[17:28:49.982] Running /usr/bin/codesign
[17:28:50.080] Running /usr/bin/codesign
[17:28:50.135] Running /usr/bin/codesign
[17:28:50.192] Running /usr/bin/codesign
[17:28:50.253] Running /usr/bin/codesign
[17:28:50.326] Running /usr/bin/codesign
[17:28:50.376] Running /usr/bin/codesign
[17:28:50.429] Running /usr/bin/codesign
[17:28:50.477] Running /usr/bin/codesign
[17:28:50.543] Running /usr/bin/codesign
[17:28:50.590] Running /usr/bin/codesign
[17:28:50.640] Running /usr/bin/codesign
[17:28:50.694] Running /usr/bin/codesign
[17:28:50.753] Running /usr/bin/codesign
[17:28:50.809] Running /usr/bin/codesign
[17:28:50.865] Running /usr/bin/codesign
[17:28:50.923] Running /usr/bin/codesign
[17:28:50.975] Running /usr/bin/codesign
[17:28:51.023] Running /usr/bin/codesign
[17:28:51.148] Running /usr/bin/codesign
[17:28:51.223] Running /usr/bin/codesign
[17:28:51.285] Running /usr/bin/codesign
[17:28:51.330] Running /usr/bin/codesign
[17:28:51.402] Running /usr/bin/codesign
[17:28:51.469] Running /usr/bin/codesign
[17:28:51.574] Running /usr/bin/codesign
[17:28:51.728] Running /usr/bin/codesign
[17:28:52.187] Running /usr/bin/codesign
[17:28:52.230] Running /usr/bin/codesign
[17:28:52.351] Running /usr/bin/codesign
[17:28:52.397] Running /usr/bin/codesign
[17:28:52.479] Running /usr/bin/codesign
[17:28:52.525] Running /usr/bin/codesign
[17:28:52.608] Running /usr/bin/codesign
[17:28:52.656] Running /usr/bin/codesign
[17:28:52.713] Running /usr/bin/codesign
[17:28:52.761] Running /usr/bin/codesign
[17:28:52.827] Running /usr/bin/codesign
[17:28:52.876] Running /usr/bin/codesign
[17:28:52.926] Running /usr/bin/codesign
[17:28:52.985] Running /usr/bin/codesign
[17:28:53.034] Running /usr/bin/codesign
[17:28:53.085] Running /usr/bin/codesign
[17:28:53.134] Running /usr/bin/codesign
[17:28:53.182] Running /usr/bin/codesign
[17:28:53.232] Running /usr/bin/codesign
[17:28:53.290] Running /usr/bin/codesign
[17:28:53.340] Running /usr/bin/codesign
[17:28:53.388] Running /usr/bin/codesign
[17:28:53.439] Running /usr/bin/codesign
[17:28:53.495] Running /usr/bin/codesign
[17:28:53.599] Running /usr/bin/codesign
[17:28:53.644] Running /usr/bin/codesign
[17:28:53.695] Running /usr/bin/codesign
[17:28:53.738] Running /usr/bin/codesign
[17:28:53.785] Running /usr/bin/codesign
[17:28:53.823] Running /usr/bin/codesign
[17:28:53.869] Running /usr/bin/codesign
[17:28:53.913] Running /usr/bin/codesign
[17:28:53.973] Running /usr/bin/codesign
[17:28:54.023] Running /usr/bin/codesign
[17:28:54.089] Running /usr/bin/codesign
[17:28:54.130] Running /usr/bin/codesign
[17:28:54.193] Running /usr/bin/codesign
[17:28:54.241] Running /usr/bin/codesign
[17:28:54.286] Running /usr/bin/codesign
[17:28:54.335] Running /usr/bin/codesign
[17:28:54.385] Running /usr/bin/codesign
[17:28:54.429] Running /usr/bin/codesign
[17:28:54.498] Running /usr/bin/codesign
[17:28:54.579] Running /usr/bin/codesign
[17:28:54.635] Running /usr/bin/codesign
[17:28:54.686] Running /usr/bin/codesign
[17:28:54.825] Running /usr/bin/codesign
[17:28:54.872] Running /usr/bin/codesign
[17:28:56.197] Running /usr/bin/codesign
[17:28:57.260] Command [PID: 59390]:
    /usr/bin/codesign -s - -vvvv --force /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/images/image-16587551705934258511/AddLauncherTest.app/Contents/runtime
[17:28:57.260] Output:
    /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/images/image-16587551705934258511/AddLauncherTest.app/Contents/runtime: replacing existing signature
    /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/images/image-16587551705934258511/AddLauncherTest.app/Contents/runtime: signed bundle with Mach-O thin (x86_64) [com.oracle.java.Hello]
[17:28:57.260] Returned: 0

[17:28:57.260] Running /usr/bin/codesign
[17:28:58.093] Command [PID: 59422]:
    /usr/bin/codesign -s - -vvvv --force /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/images/image-16587551705934258511/AddLauncherTest.app
[17:28:58.093] Output:
    /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/images/image-16587551705934258511/AddLauncherTest.app: replacing existing signature
    /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/images/image-16587551705934258511/AddLauncherTest.app: signed app bundle with Mach-O thin (x86_64) [Hello-555549445e1954da08e5390b89781dbfbb8a2540]
[17:28:58.093] Returned: 0

[17:28:58.094] Using default package resource background_pkg.png [pkg background image] (add AddLauncherTest-background.png to the resource-dir to customize).
[17:28:58.095] Using default package resource background_pkg.png [pkg background image] (add AddLauncherTest-background-darkAqua.png to the resource-dir to customize).
[17:28:58.096] Using default package resource product-def.plist [project definition file] (add product-def.plist to the resource-dir to customize).
[17:28:58.099] Preparing distribution.dist: /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/config/distribution.dist.
[17:28:58.294] Running /usr/bin/pkgbuild
[17:28:58.574] Command [PID: 59427]:
    /usr/bin/pkgbuild --root /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/images/image-16587551705934258511 --install-location /Applications --analyze /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/config/cpl.plist
[17:28:58.575] Output:
    pkgbuild: Inferring bundle components from contents of /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/images/image-16587551705934258511
    pkgbuild: Writing new component property list to /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/config/cpl.plist
[17:28:58.575] Returned: 0

[17:28:58.585] Preparing package scripts.
[17:28:58.637] Using default package resource preinstall.template [PKG preinstall script] (add preinstall to the resource-dir to customize).
[17:28:58.655] Using default package resource postinstall.template [PKG postinstall script] (add postinstall to the resource-dir to customize).
[17:28:58.668] Running /usr/bin/pkgbuild
[17:29:11.998] Command [PID: 59430]:
    /usr/bin/pkgbuild --root /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/images/image-16587551705934258511 --install-location /Applications --component-plist /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/config/cpl.plist --scripts /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/config/scripts --identifier Hello /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/packages/AddLauncherTest-app.pkg
[17:29:11.999] Output:
    pkgbuild: Reading components from /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/config/cpl.plist
    pkgbuild: Adding component at AddLauncherTest.app
    pkgbuild: Adding top-level preinstall script
    pkgbuild: Adding top-level postinstall script
    pkgbuild: Wrote package to /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/packages/AddLauncherTest-app.pkg
[17:29:11.999] Returned: 0

[17:29:12.012] Running /usr/bin/productbuild
[17:29:12.377] Command [PID: 59453]:
    /usr/bin/productbuild --resources /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/config --distribution /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/config/distribution.dist --package-path /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage2101493163054743007/packages /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/./test/output/AddLauncherTest-1.0.pkg
[17:29:12.377] Output:
    productbuild: Wrote product to /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/./test/output/AddLauncherTest-1.0.pkg
[17:29:12.377] Returned: 0

[17:29:12.378] Succeeded in building Mac PKG Package package
[17:29:16.586] TRACE: exec: Done. Exit code: 0
[17:29:16.589] TRACE: assertEquals(0): Check command [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/macosx-x64-debug.jdk/jdk-20/fastdebug/bin/jpackage --input ./test/input --dest ./test/output --name AddLauncherTest --type pkg --main-jar hello.jar --main-class Hello --arguments Duke --arguments is --arguments the --arguments King --description ""AddLauncherTest Description"" --file-associations ./test/fa.properties --add-launcher Baz2=./test/Baz2.properties --add-launcher foo=./test/foo.properties --add-launcher Bar=./test/Bar.properties -J-Djlink.debug=true --verbose](33) exited with 0 code
[17:29:16.595] TRACE: assertTrue(): Check [./test/output/AddLauncherTest-1.0.pkg] path exists
[17:29:16.596] TRACE: assertTrue(): Check [./test/output/AddLauncherTest-1.0.pkg] is a file
[17:29:16.599] TRACE: exec: Execute [pkgutil --expand ./test/output/AddLauncherTest-1.0.pkg ./test/unpacked-pkg/data](4); discard I/O...
[17:29:16.949] TRACE: exec: Done. Exit code: 0
[17:29:16.949] TRACE: assertEquals(0): Check command [pkgutil --expand ./test/output/AddLauncherTest-1.0.pkg ./test/unpacked-pkg/data](4) exited with 0 code
[17:29:16.996] TRACE: exec: Execute [tar -C ./test/unpacked-pkg/unpacked/Applications -xvf ./test/unpacked-pkg/data/AddLauncherTest-app.pkg/Payload](5); discard I/O...
[17:29:17.867] TRACE: exec: Done. Exit code: 0
[17:29:17.867] TRACE: assertEquals(0): Check command [tar -C ./test/unpacked-pkg/unpacked/Applications -xvf ./test/unpacked-pkg/data/AddLauncherTest-app.pkg/Payload](5) exited with 0 code
[17:29:17.869] TRACE: Verify unpacked: [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/macosx-x64-debug.jdk/jdk-20/fastdebug/bin/jpackage --input ./test/input --dest ./test/output --name AddLauncherTest --type pkg --main-jar hello.jar --main-class Hello --arguments Duke --arguments is --arguments the --arguments King --description ""AddLauncherTest Description"" --file-associations ./test/fa.properties --add-launcher Baz2=./test/Baz2.properties --add-launcher foo=./test/foo.properties --add-launcher Bar=./test/Bar.properties jpt-unpacked-folder ./test/unpacked-pkg/unpacked](33)
[17:29:17.873] TRACE: assertEquals(1): Check the package has 1 top installation directories
[17:29:17.877] TRACE: assertFalse(): Check [./test/unpacked-pkg/unpacked/Library/Application Support/AddLauncherTest/uninstall.command] path doesn't exist
[17:29:17.877] TRACE: assertFalse(): Check [./test/unpacked-pkg/unpacked/Library/LaunchDaemons] path doesn't exist
[17:29:17.906] TRACE: assertStringListEquals(): Check there is only one file with [.jpackage.xml] name in the package
[17:29:17.906] TRACE: assertStringListEquals(1, ./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/app/.jpackage.xml)
[17:29:17.924] TRACE: assertTrue(): Unexptected value in app image file for <signed>
[17:29:17.938] TRACE: assertTrue(): Unexptected value in app image file for <app-store>
[17:29:17.962] TRACE: assertStringListEquals(): Check there is only one file with [.package] name in the package
[17:29:17.962] TRACE: assertStringListEquals(1, ./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/app/.package)
[17:29:17.963] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/runtime] path exists
[17:29:17.963] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/runtime] is a directory
[17:29:17.964] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/AddLauncherTest] path exists
[17:29:17.964] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/AddLauncherTest] is a file
[17:29:17.965] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/AddLauncherTest] file is executable
[17:29:17.965] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/app/AddLauncherTest.cfg] path exists
[17:29:17.966] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/app/AddLauncherTest.cfg] is a file
[17:29:17.966] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/runtime/Contents/MacOS/libjli.dylib] path exists
[17:29:17.966] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/runtime/Contents/MacOS/libjli.dylib] is a file
[17:29:17.968] TRACE: Clearing PATH in environment
[17:29:17.968] TRACE: exec: Execute [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/AddLauncherTest](1); inherit I/O; in directory [./test]...
[0x0044,0x0075,0x006b,0x0065]
[0x0069,0x0073]
[0x0074,0x0068,0x0065]
[0x004b,0x0069,0x006e,0x0067]
jpackage test application
args.length: 4
Duke
is
the
King
hello: Output file: [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt]
[17:29:21.324] TRACE: exec: Done. Exit code: 0
[17:29:21.325] TRACE: assertTrue(): Check [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt] path exists
[17:29:21.325] TRACE: assertTrue(): Check [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt] is a file
[17:29:21.380] TRACE: assertStringListEquals(): Check contents of [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt] file
[17:29:21.381] TRACE: assertStringListEquals(1, jpackage test application)
[17:29:21.381] TRACE: assertStringListEquals(2, args.length: 4)
[17:29:21.382] TRACE: assertStringListEquals(3, Duke)
[17:29:21.382] TRACE: assertStringListEquals(4, is)
[17:29:21.382] TRACE: assertStringListEquals(5, the)
[17:29:21.383] TRACE: assertStringListEquals(6, King)
[17:29:21.383] TRACE: assertFalse(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/Resources/Baz2.icns] path doesn't exist
[17:29:21.384] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/Baz2] path exists
[17:29:21.384] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/Baz2] is a file
[17:29:21.385] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/Baz2] file is executable
[17:29:21.409] TRACE: exec: Execute [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/Baz2](1); inherit I/O; in directory [./test]...
jpackage test application
args.length: 0
hello: Output file: [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt]
[17:29:21.877] TRACE: exec: Done. Exit code: 0
[17:29:21.877] TRACE: assertTrue(): Check [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt] path exists
[17:29:21.878] TRACE: assertTrue(): Check [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt] is a file
[17:29:21.878] TRACE: assertStringListEquals(): Check contents of [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt] file
[17:29:21.879] TRACE: assertStringListEquals(1, jpackage test application)
[17:29:21.879] TRACE: assertStringListEquals(2, args.length: 0)
[17:29:21.880] TRACE: assertFalse(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/Resources/foo.icns] path doesn't exist
[17:29:21.880] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/foo] path exists
[17:29:21.881] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/foo] is a file
[17:29:21.881] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/foo] file is executable
[17:29:21.884] TRACE: exec: Execute [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/foo](1); inherit I/O; in directory [./test]...
[0x0079,0x0065,0x0070,0x0021]
jpackage test application
args.length: 1
yep!
hello: Output file: [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt]
[17:29:22.382] TRACE: exec: Done. Exit code: 0
[17:29:22.382] TRACE: assertTrue(): Check [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt] path exists
[17:29:22.383] TRACE: assertTrue(): Check [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt] is a file
[17:29:22.383] TRACE: assertStringListEquals(): Check contents of [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt] file
[17:29:22.384] TRACE: assertStringListEquals(1, jpackage test application)
[17:29:22.384] TRACE: assertStringListEquals(2, args.length: 1)
[17:29:22.384] TRACE: assertStringListEquals(3, yep!)
[17:29:22.385] TRACE: assertFalse(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/Resources/Bar.icns] path doesn't exist
[17:29:22.386] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/Bar] path exists
[17:29:22.386] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/Bar] is a file
[17:29:22.386] TRACE: assertTrue(): Check [./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/Bar] file is executable
[17:29:22.388] TRACE: exec: Execute [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/./test/unpacked-pkg/unpacked/Applications/AddLauncherTest.app/Contents/MacOS/Bar](1); inherit I/O; in directory [./test]...
[0x006f,0x006e,0x0065]
[0x0074,0x0077,0x006f]
[0x0074,0x0068,0x0072,0x0065,0x0065]
jpackage test application
args.length: 3
one
two
three
hello: Output file: [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt]
[17:29:22.909] TRACE: exec: Done. Exit code: 0
[17:29:22.910] TRACE: assertTrue(): Check [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt] path exists
[17:29:22.910] TRACE: assertTrue(): Check [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt] is a file
[17:29:22.911] TRACE: assertStringListEquals(): Check contents of [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/appOutput.txt] file
[17:29:22.911] TRACE: assertStringListEquals(1, jpackage test application)
[17:29:22.912] TRACE: assertStringListEquals(2, args.length: 3)
[17:29:22.912] TRACE: assertStringListEquals(3, one)
[17:29:22.912] TRACE: assertStringListEquals(4, two)
[17:29:22.913] TRACE: assertStringListEquals(5, three)
[17:29:22.914] TRACE: Create [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/Baz2.0.properties] properties file...
[17:29:22.915] TRACE: arguments=
[17:29:22.915] TRACE: description=Baz2 Description
[17:29:22.928] TRACE: Done
[17:29:22.929] TRACE: Create [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/foo.0.properties] properties file...
[17:29:22.929] TRACE: arguments=yep!
[17:29:22.930] TRACE: description=foo Description
[17:29:22.943] TRACE: Done
[17:29:22.945] TRACE: Create [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/test/Bar.0.properties] properties file...
[17:29:22.945] TRACE: arguments=one two three
[17:29:22.946] TRACE: icon=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/src.full/open/test/jdk/tools/jpackage/resources/icon.icns
[17:29:22.946] TRACE: description=Bar Description
[17:29:22.961] TRACE: Done
[17:29:22.986] TRACE: exec: Execute tool provider [javac -d ./test/jar-workdir /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/src.full/open/test/jdk/tools/jpackage/apps/Hello.java](4)...
[17:29:23.790] TRACE: exec: Done. Exit code: 0
[17:29:23.790] TRACE: assertEquals(0): Check command tool provider [javac -d ./test/jar-workdir /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/src.full/open/test/jdk/tools/jpackage/apps/Hello.java](4) exited with 0 code
[17:29:23.811] TRACE: Delete [./test/input/hello.jar] existing jar file
[17:29:23.814] TRACE: exec: Execute tool provider [jar -c -f ./test/input/hello.jar -C ./test/jar-workdir .](7)...
[17:29:23.872] TRACE: exec: Done. Exit code: 0
[17:29:23.873] TRACE: assertEquals(0): Check command tool provider [jar -c -f ./test/input/hello.jar -C ./test/jar-workdir .](7) exited with 0 code
[17:29:23.891] TRACE: exec: Execute [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/macosx-x64-debug.jdk/jdk-20/fastdebug/bin/jpackage --input ./test/input --dest ./test/output --name AddLauncherTest --type dmg --main-jar hello.jar --main-class Hello --arguments Duke --arguments is --arguments the --arguments King --description ""AddLauncherTest Description"" --add-launcher Baz2=./test/Baz2.0.properties --add-launcher foo=./test/foo.0.properties --add-launcher Bar=./test/Bar.0.properties -J-Djlink.debug=true --verbose](31); inherit I/O...
[17:29:25.345] Building DMG package for AddLauncherTest.
[17:29:58.402] Command [PID: -1]:
    jlink --output /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/image-2237066463105007940/AddLauncherTest.app/Contents/runtime/Contents/Home --module-path /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/macosx-x64-debug.jdk/jdk-20/fastdebug/jmods --add-modules java.rmi,jdk.management.jfr,jdk.jdi,jdk.charsets,jdk.xml.dom,java.xml,java.datatransfer,jdk.jstatd,jdk.httpserver,java.desktop,java.security.sasl,jdk.zipfs,java.base,jdk.crypto.ec,jdk.javadoc,jdk.management.agent,jdk.jshell,jdk.editpad,jdk.sctp,java.sql.rowset,jdk.jsobject,jdk.jlink,java.smartcardio,jdk.unsupported,java.security.jgss,java.compiler,jdk.nio.mapmode,jdk.dynalink,jdk.unsupported.desktop,jdk.accessibility,jdk.security.jgss,jdk.incubator.vector,java.sql,java.logging,java.transaction.xa,java.xml.crypto,jdk.jfr,jdk.crypto.cryptoki,jdk.net,jdk.random,java.naming,jdk.internal.ed,java.prefs,java.net.http,jdk.compiler,jdk.naming.rmi,jdk.internal.opt,jdk.jconsole,jdk.attach,jdk.incubator.concurrent,jdk.internal.le,java.management,jdk.jdwp.agent,jdk.internal.jvmstat,java.instrument,jdk.management,jdk.security.auth,java.scripting,jdk.jdeps,jdk.jartool,java.management.rmi,jdk.jpackage,jdk.naming.dns,jdk.localedata --strip-native-commands --strip-debug --no-man-pages --no-header-files
[17:29:58.403] Output:
    WARNING: Using incubator modules: jdk.incubator.vector, jdk.incubator.concurrent

[17:29:58.403] Returned: 0

[17:29:59.047] Using default package resource JavaApp.icns [icon] (add AddLauncherTest.icns to the resource-dir to customize).
[17:29:59.054] Preparing Info.plist: /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/image-2237066463105007940/AddLauncherTest.app/Contents/Info.plist.
[17:29:59.061] Using default package resource Info-lite.plist.template [Application Info.plist] (add Info.plist to the resource-dir to customize).
[17:29:59.113] Using default package resource Runtime-Info.plist.template [Java Runtime Info.plist] (add Runtime-Info.plist to the resource-dir to customize).
[17:29:59.258] Running /usr/bin/codesign
[17:29:59.823] Running /usr/bin/codesign
[17:29:59.903] Running /usr/bin/codesign
[17:29:59.998] Running /usr/bin/codesign
[17:30:00.084] Running /usr/bin/codesign
[17:30:00.171] Running /usr/bin/codesign
[17:30:00.266] Running /usr/bin/codesign
[17:30:00.357] Running /usr/bin/codesign
[17:30:00.534] Running /usr/bin/codesign
[17:30:00.620] Running /usr/bin/codesign
[17:30:00.790] Running /usr/bin/codesign
[17:30:00.937] Running /usr/bin/codesign
[17:30:01.123] Running /usr/bin/codesign
[17:30:01.205] Running /usr/bin/codesign
[17:30:01.262] Running /usr/bin/codesign
[17:30:01.355] Running /usr/bin/codesign
[17:30:01.481] Running /usr/bin/codesign
[17:30:01.567] Running /usr/bin/codesign
[17:30:01.688] Running /usr/bin/codesign
[17:30:01.769] Running /usr/bin/codesign
[17:30:01.879] Running /usr/bin/codesign
[17:30:01.964] Running /usr/bin/codesign
[17:30:02.050] Running /usr/bin/codesign
[17:30:02.165] Running /usr/bin/codesign
[17:30:02.238] Running /usr/bin/codesign
[17:30:02.337] Running /usr/bin/codesign
[17:30:02.494] Running /usr/bin/codesign
[17:30:02.650] Running /usr/bin/codesign
[17:30:02.710] Running /usr/bin/codesign
[17:30:02.832] Running /usr/bin/codesign
[17:30:02.902] Running /usr/bin/codesign
[17:30:03.037] Running /usr/bin/codesign
[17:30:03.124] Running /usr/bin/codesign
[17:30:03.212] Running /usr/bin/codesign
[17:30:03.254] Running /usr/bin/codesign
[17:30:03.312] Running /usr/bin/codesign
[17:30:03.428] Running /usr/bin/codesign
[17:30:03.497] Running /usr/bin/codesign
[17:30:03.576] Running /usr/bin/codesign
[17:30:03.687] Running /usr/bin/codesign
[17:30:03.810] Running /usr/bin/codesign
[17:30:04.222] Running /usr/bin/codesign
[17:30:05.047] Running /usr/bin/codesign
[17:30:05.184] Running /usr/bin/codesign
[17:30:05.258] Running /usr/bin/codesign
[17:30:05.402] Running /usr/bin/codesign
[17:30:05.487] Running /usr/bin/codesign
[17:30:05.560] Running /usr/bin/codesign
[17:30:05.659] Running /usr/bin/codesign
[17:30:05.698] Running /usr/bin/codesign
[17:30:05.767] Running /usr/bin/codesign
[17:30:05.856] Running /usr/bin/codesign
[17:30:05.907] Running /usr/bin/codesign
[17:30:06.007] Running /usr/bin/codesign
[17:30:06.098] Running /usr/bin/codesign
[17:30:06.145] Running /usr/bin/codesign
[17:30:06.188] Running /usr/bin/codesign
[17:30:06.291] Running /usr/bin/codesign
[17:30:06.355] Running /usr/bin/codesign
[17:30:06.422] Running /usr/bin/codesign
[17:30:06.548] Running /usr/bin/codesign
[17:30:06.615] Running /usr/bin/codesign
[17:30:06.654] Running /usr/bin/codesign
[17:30:06.706] Running /usr/bin/codesign
[17:30:06.778] Running /usr/bin/codesign
[17:30:06.934] Running /usr/bin/codesign
[17:30:07.071] Running /usr/bin/codesign
[17:30:07.154] Running /usr/bin/codesign
[17:30:07.237] Running /usr/bin/codesign
[17:30:07.353] Running /usr/bin/codesign
[17:30:07.459] Running /usr/bin/codesign
[17:30:07.562] Running /usr/bin/codesign
[17:30:07.628] Running /usr/bin/codesign
[17:30:07.686] Running /usr/bin/codesign
[17:30:07.805] Running /usr/bin/codesign
[17:30:07.926] Running /usr/bin/codesign
[17:30:08.043] Running /usr/bin/codesign
[17:30:08.197] Running /usr/bin/codesign
[17:30:08.305] Running /usr/bin/codesign
[17:30:08.437] Running /usr/bin/codesign
[17:30:08.525] Running /usr/bin/codesign
[17:30:08.602] Running /usr/bin/codesign
[17:30:08.729] Running /usr/bin/codesign
[17:30:08.797] Running /usr/bin/codesign
[17:30:08.955] Running /usr/bin/codesign
[17:30:08.992] Running /usr/bin/codesign
[17:30:09.059] Running /usr/bin/codesign
[17:30:09.139] Running /usr/bin/codesign
[17:30:09.232] Running /usr/bin/codesign
[17:30:09.268] Running /usr/bin/codesign
[17:30:10.243] Running /usr/bin/codesign
[17:30:11.520] Command [PID: 59682]:
    /usr/bin/codesign -s - -vvvv --force /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/image-2237066463105007940/AddLauncherTest.app/Contents/runtime
[17:30:11.520] Output:
    /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/image-2237066463105007940/AddLauncherTest.app/Contents/runtime: replacing existing signature
    /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/image-2237066463105007940/AddLauncherTest.app/Contents/runtime: signed bundle with Mach-O thin (x86_64) [com.oracle.java.Hello]
[17:30:11.520] Returned: 0

[17:30:11.521] Running /usr/bin/codesign
[17:30:12.458] Command [PID: 59685]:
    /usr/bin/codesign -s - -vvvv --force /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/image-2237066463105007940/AddLauncherTest.app
[17:30:12.458] Output:
    /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/image-2237066463105007940/AddLauncherTest.app: replacing existing signature
    /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/image-2237066463105007940/AddLauncherTest.app: signed app bundle with Mach-O thin (x86_64) [Hello-555549445e1954da08e5390b89781dbfbb8a2540]
[17:30:12.459] Returned: 0

[17:30:12.460] Using default package resource background_dmg.tiff [dmg background] (add AddLauncherTest-background.tiff to the resource-dir to customize).
[17:30:12.462] Using default package resource JavaApp.icns [volume icon] (add AddLauncherTest-volume.icns to the resource-dir to customize).
[17:30:12.464] Preparing dmg setup: /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/config/AddLauncherTest-dmg-setup.scpt.
[17:30:12.466] Using default package resource DMGsetup.scpt [DMG setup script] (add AddLauncherTest-dmg-setup.scpt to the resource-dir to customize).
[17:30:12.470] Creating DMG file: /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/./test/output/AddLauncherTest-1.0.dmg.
[17:30:12.501] Running /usr/bin/hdiutil
[17:30:20.804] Command [PID: 59687]:
    /usr/bin/hdiutil create -verbose -srcfolder /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/image-2237066463105007940 -volname AddLauncherTest -ov /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/AddLauncherTest-tmp.dmg -fs HFS+ -format UDRW
[17:30:20.806] Output:
    2022-12-17 17:30:12.584 diskimages-helper[59689:159227145] *useEffectiveIDs**** euid/egid changed to 502,10668 (uid/gid is 502,10668)
    2022-12-17 17:30:12.584 diskimages-helper[59689:159227145] *useRealIDs******** euid/egid changed to 502,10668 (uid/gid is 502,10668)
    Initializing?
    2022-12-17 17:30:12.597 diskimages-helper[59689:159227145] *useEffectiveIDs**** euid/egid changed to 502,10668 (uid/gid is 502,10668)
    2022-12-17 17:30:12.605 copy-helper[59690:159227146] estimating /private/var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/image-2237066463105007940
    2022-12-17 17:30:13.796 diskimages-helper[59689:159227145] *useRealIDs******** euid/egid changed to 502,10668 (uid/gid is 502,10668)
    Creating?
    DIDiskImageCreatorProbe: interface  1, score    -1000, CSparseBundleDiskImage
    DIDiskImageCreatorProbe: interface  2, score    -1000, CSparseDiskImage
    DIDiskImageCreatorProbe: interface  3, score     1000, CRawDiskImage
    DIDiskImageCreatorProbe: interface  7, score    -1000, CWOUDIFDiskImage
    DIDiskImageCreateWithCFURL: CRawDiskImage
    DIFileEncodingCreatorProbe: interface  2, score    -1000, CEncryptedEncoding
    DIBackingStoreCreatorProbe: interface  0, score      100, CBSDBackingStore
    DIBackingStoreCreatorProbe: interface  1, score    -1000, CBundleBackingStore
    DIBackingStoreCreatorProbe: interface  2, score        0, CRAMBackingStore
    DIBackingStoreCreatorProbe: interface  3, score      300, CCarbonBackingStore
    DIBackingStoreCreatorProbe: interface  5, score     -100, CCURLBackingStore
    DIBackingStoreCreateWithCFURL: CCarbonBackingStore
    DIBackingStoreCreateWithCFURL: creator returned 0
    DIDiskImageCreateWithCFURL: creator returned 0
    DI_kextWaitQuiet: about to call IOServiceWaitQuiet...
    DI_kextWaitQuiet: IOServiceWaitQuiet took 0.000005 seconds
    DI_kextWaitQuiet: about to call IOServiceWaitQuiet...
    DI_kextWaitQuiet: IOServiceWaitQuiet took 0.000005 seconds
    2022-12-17 17:30:15.440 diskimages-helper[59689:159227188] DIHelperHDID serveImage: attaching drive
    {
        autodiskmount = 1;
        ""hdiagent-drive-identifier"" = ""0A14E5B5-4031-42CF-90E2-3334336E337C"";
        ""skip-auto-fsck-for-system-images"" = 1;
        ""system-image"" = 1;
        ""unmount-timeout"" = 0;
    }
    2022-12-17 17:30:15.441 diskimages-helper[59689:159227188] DIHelperHDID serveImage: connecting to myDrive 0x3E0F
    2022-12-17 17:30:15.441 diskimages-helper[59689:159227188] DIHelperHDID serveImage: register _readBuffer 0x7fba84740000
    2022-12-17 17:30:15.441 diskimages-helper[59689:159227188] DIHelperHDID serveImage: activating drive port 15627
    2022-12-17 17:30:15.441 diskimages-helper[59689:159227188] DIHelperHDID serveImage: set cache enabled=TRUE returned FAILURE.
    2022-12-17 17:30:15.454 diskimages-helper[59689:159227188] DIHelperHDID serveImage: set on IO thread=TRUE returned SUCCESS.
    2022-12-17 17:30:15.454 diskimages-helper[59689:159227188] -processKernelRequest: will sleep received
    2022-12-17 17:30:16.027 diskimages-helper[59689:159227145] _mountDevEntries: disk3s1 aborting mountpoint postflight because disk image has no band size specified.
    2022-12-17 17:30:16.040 diskimages-helper[59689:159227142] _postflightMountPointsAfterDAMount: disk3s1 aborting because disk image has no band size specified.
    2022-12-17 17:30:16.046 diskimages-helper[59689:159227142] _postflightMountPointsAfterDAMount: disk3 aborting because no mount point found.
    2022-12-17 17:30:16.047 diskimages-helper[59689:159227145] *useEffectiveIDs**** euid/egid changed to 502,10668 (uid/gid is 502,10668)
    2022-12-17 17:30:16.296 diskimages-helper[59689:159227145] *useRealIDs******** euid/egid changed to 502,10668 (uid/gid is 502,10668)
    Copying?
    2022-12-17 17:30:16.301 diskimages-helper[59689:159227145] *useEffectiveIDs**** euid/egid changed to 502,10668 (uid/gid is 502,10668)
    2022-12-17 17:30:16.347 copy-helper[59705:159227234] copying /private/var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/image-2237066463105007940 to /Volumes/AddLauncherTest
    2022-12-17 17:30:16.353 copy-helper[59705:159227234] About to copy ""/var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/image-2237066463105007940"".
    2022-12-17 17:30:18.335 copy-helper[59705:159227234] Copy finished.
    2022-12-17 17:30:20.194 diskimages-helper[59689:159227188] -processKernelRequest: flush received
    2022-12-17 17:30:20.217 diskimages-helper[59689:159227145] *useRealIDs******** euid/egid changed to 502,10668 (uid/gid is 502,10668)
    Finishing?
    2022-12-17 17:30:20.323 diskimages-helper[59689:159227145] *useEffectiveIDs**** euid/egid changed to 502,10668 (uid/gid is 502,10668)
    created: /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/AddLauncherTest-tmp.dmghdiutil: create: returning 0
    
[17:30:20.807] Returned: 0

[17:30:20.809] Running /usr/bin/hdiutil
[17:30:21.606] Command [PID: 59709]:
    /usr/bin/hdiutil attach /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/AddLauncherTest-tmp.dmg -verbose -mountroot /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images
[17:30:21.608] Output:
    Initializing?
    DIBackingStoreInstantiatorProbe: interface  0, score      100, CBSDBackingStore
    DIBackingStoreInstantiatorProbe: interface  1, score    -1000, CBundleBackingStore
    DIBackingStoreInstantiatorProbe: interface  2, score    -1000, CRAMBackingStore
    DIBackingStoreInstantiatorProbe: interface  3, score      100, CCarbonBackingStore
    DIBackingStoreInstantiatorProbe: interface  4, score    -1000, CDevBackingStore
    DIBackingStoreInstantiatorProbe: interface  5, score    -1000, CCURLBackingStore
    DIBackingStoreInstantiatorProbe: interface  6, score    -1000, CVectoredBackingStore
    DIBackingStoreInstantiatorProbe: interface  0, score      100, CBSDBackingStore
    DIBackingStoreInstantiatorProbe: interface  1, score    -1000, CBundleBackingStore
    DIBackingStoreInstantiatorProbe: interface  2, score    -1000, CRAMBackingStore
    DIBackingStoreInstantiatorProbe: interface  3, score      100, CCarbonBackingStore
    DIBackingStoreInstantiatorProbe: interface  4, score    -1000, CDevBackingStore
    DIBackingStoreInstantiatorProbe: interface  5, score    -1000, CCURLBackingStore
    DIBackingStoreInstantiatorProbe: interface  6, score    -1000, CVectoredBackingStore
    DIFileEncodingInstantiatorProbe: interface  0, score    -1000, CMacBinaryEncoding
    DIFileEncodingInstantiatorProbe: interface  1, score    -1000, CAppleSingleEncoding
    DIFileEncodingInstantiatorProbe: interface  2, score    -1000, CEncryptedEncoding
    DIFileEncodingInstantiatorProbe: interface  0, score    -1000, CUDIFEncoding
    DIFileEncodingInstantiatorProbe: interface  0, score    -1000, CSegmentedNDIFEncoding
    DIFileEncodingInstantiatorProbe: interface  1, score    -1000, CSegmentedUDIFEncoding
    CBSDBackingStore::newProbe stat() failed.  No such file or directory.
    DIBackingStoreInstantiatorProbe: interface  0, score        1, CBSDBackingStore
    DIBackingStoreInstantiatorProbe: interface  1, score    -1000, CBundleBackingStore
    DIBackingStoreInstantiatorProbe: interface  2, score    -1000, CRAMBackingStore
    DIBackingStoreInstantiatorProbe: interface  3, score    -1000, CCarbonBackingStore
    DIBackingStoreInstantiatorProbe: interface  4, score    -1000, CDevBackingStore
    DIBackingStoreInstantiatorProbe: interface  5, score    -1000, CCURLBackingStore
    DIBackingStoreInstantiatorProbe: interface  6, score    -1000, CVectoredBackingStore
    DIFileEncodingInstantiatorProbe: interface  2, score    -1000, CSegmentedUDIFRawEncoding
    DIDiskImageInstantiatorProbe: interface  0, score    -1000, CUDIFDiskImage
    DIDiskImageInstantiatorProbe: interface  1, score        0, CSparseBundleDiskImage
    DIDiskImageInstantiatorProbe: interface  2, score        0, CSparseDiskImage
    DIDiskImageInstantiatorProbe: interface  3, score      100, CRawDiskImage
    DIDiskImageInstantiatorProbe: interface  4, score        0, CDARTDiskImage
    DIDiskImageInstantiatorProbe: interface  5, score        0, CDiskCopy42DiskImage
    DIDiskImageInstantiatorProbe: interface  6, score    -1000, CNDIFDiskImage
    DIDiskImageInstantiatorProbe: interface  8, score     -100, CShadowedDiskImage
    DIDiskImageInstantiatorProbe: interface  9, score     -100, CWrappedDiskImage
    DIDiskImageNewWithBackingStore: CRawDiskImage
    DIDiskImageNewWithBackingStore: instantiator returned 0
    Attaching?
    DI_kextWaitQuiet: about to call IOServiceWaitQuiet...
    DI_kextWaitQuiet: IOServiceWaitQuiet took 0.000005 seconds
    2022-12-17 17:30:21.102 diskimages-helper[59712:159227300] DIHelperHDID serveImage: attaching drive
    {
        autodiskmount = 1;
        ""hdiagent-drive-identifier"" = ""7386F6BE-C801-4358-B1A5-CFFABC911C4C"";
        ""unmount-timeout"" = 0;
    }
    2022-12-17 17:30:21.104 diskimages-helper[59712:159227300] DIHelperHDID serveImage: connecting to myDrive 0x380F
    2022-12-17 17:30:21.104 diskimages-helper[59712:159227300] DIHelperHDID serveImage: register _readBuffer 0x7ffe2bd00000
    2022-12-17 17:30:21.104 diskimages-helper[59712:159227300] DIHelperHDID serveImage: activating drive port 13835
    2022-12-17 17:30:21.104 diskimages-helper[59712:159227300] DIHelperHDID serveImage: set cache enabled=TRUE returned FAILURE.
    2022-12-17 17:30:21.114 diskimages-helper[59712:159227300] DIHelperHDID serveImage: set on IO thread=TRUE returned SUCCESS.
    2022-12-17 17:30:21.115 diskimages-helper[59712:159227300] -processKernelRequest: will sleep received
    Mounting?
    2022-12-17 17:30:21.578 diskimages-helper[59712:159227285] _postflightMountPointsAfterDAMount: disk3s1 aborting because disk image has no band size specified.
    2022-12-17 17:30:21.579 diskimages-helper[59712:159227289] _mountDevEntries: disk3s1 aborting mountpoint postflight because disk image has no band size specified.
    2022-12-17 17:30:21.580 diskimages-helper[59712:159227285] _postflightMountPointsAfterDAMount: disk3 aborting because no mount point found.
    Finishing?
    Finishing?
    /dev/disk3          	GUID_partition_scheme          	
    /dev/disk3s1        	Apple_HFS                      	/private/var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/AddLauncherTest
[17:30:21.611] Returned: 0

[17:30:21.850] Running /usr/bin/osascript
[17:32:23.928] Command [PID: 59721]:
    /usr/bin/osascript /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/config/AddLauncherTest-dmg-setup.scpt
[17:32:23.929] Output:
    /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/config/AddLauncherTest-dmg-setup.scpt:415:457: execution error: Finder got an error: AppleEvent timed out. (-1712)
[17:32:23.931] Returned: 1

[17:32:24.080] java.io.IOException: Command [/usr/bin/osascript, /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/config/AddLauncherTest-dmg-setup.scpt] exited with 1 code
	at jdk.jpackage/jdk.jpackage.internal.Executor.executeExpectSuccess(Executor.java:90)
	at jdk.jpackage/jdk.jpackage.internal.IOUtils.exec(IOUtils.java:227)
	at jdk.jpackage/jdk.jpackage.internal.IOUtils.exec(IOUtils.java:205)
	at jdk.jpackage/jdk.jpackage.internal.IOUtils.exec(IOUtils.java:184)
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.buildDMG(MacDmgBundler.java:403)
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.bundle(MacDmgBundler.java:90)
	at jdk.jpackage/jdk.jpackage.internal.MacDmgBundler.execute(MacDmgBundler.java:578)
	at jdk.jpackage/jdk.jpackage.internal.Arguments.generateBundle(Arguments.java:700)
	at jdk.jpackage/jdk.jpackage.internal.Arguments.processArguments(Arguments.java:565)
	at jdk.jpackage/jdk.jpackage.main.Main.execute(Main.java:92)
	at jdk.jpackage/jdk.jpackage.main.Main.main(Main.java:53)
[17:32:25.327] Running /usr/bin/SetFile
[17:32:25.378] Command [PID: 59832]:
    /usr/bin/SetFile -c icnC /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/AddLauncherTest/.VolumeIcon.icns
[17:32:25.379] Returned: 0

[17:32:25.382] Running /usr/bin/SetFile
[17:32:25.436] Command [PID: 59833]:
    /usr/bin/SetFile -a C /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/AddLauncherTest
[17:32:25.436] Returned: 0

[17:32:25.704] Running /usr/bin/hdiutil
[17:32:29.184] Command [PID: 59834]:
    /usr/bin/hdiutil detach -verbose /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/AddLauncherTest
[17:32:29.184] Output:
    hdiutil: detach: processing ""/var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/AddLauncherTest""
    LetDIDriverSettleDown: calling IOServiceWaitQuiet...
    DI_kextWaitQuiet: about to call IOServiceWaitQuiet...
    DI_kextWaitQuiet: IOServiceWaitQuiet took 0.000004 seconds
    LetDiskImageDriverSettleDown: wait took 0.000056 seconds
    ""disk3"" ejected.
[17:32:29.185] Returned: 0

[17:32:29.185] Running /usr/bin/hdiutil
[17:32:35.303] Command [PID: 59838]:
    /usr/bin/hdiutil convert /var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/AddLauncherTest-tmp.dmg -verbose -format UDZO -o /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/./test/output/AddLauncherTest-1.0.dmg
[17:32:35.304] Output:
    hdiutil: convert: processing ""/var/folders/53/1kmdvlgd27l3c4fp5xn7wflr0000gp/T/jdk.jpackage6658869772089967753/images/AddLauncherTest-tmp.dmg""
    DIBackingStoreInstantiatorProbe: interface  0, score      100, CBSDBackingStore
    DIBackingStoreInstantiatorProbe: interface  1, score    -1000, CBundleBackingStore
    DIBackingStoreInstantiatorProbe: interface  2, score    -1000, CRAMBackingStore
    DIBackingStoreInstantiatorProbe: interface  3, score      100, CCarbonBackingStore
    DIBackingStoreInstantiatorProbe: interface  4, score    -1000, CDevBackingStore
    DIBackingStoreInstantiatorProbe: interface  5, score    -1000, CCURLBackingStore
    DIBackingStoreInstantiatorProbe: interface  6, score    -1000, CVectoredBackingStore
    DIFileEncodingInstantiatorProbe: interface  0, score    -1000, CMacBinaryEncoding
    DIFileEncodingInstantiatorProbe: interface  1, score    -1000, CAppleSingleEncoding
    DIFileEncodingInstantiatorProbe: interface  2, score    -1000, CEncryptedEncoding
    DIFileEncodingInstantiatorProbe: interface  0, score    -1000, CUDIFEncoding
    DIFileEncodingInstantiatorProbe: interface  0, score    -1000, CSegmentedNDIFEncoding
    DIFileEncodingInstantiatorProbe: interface  1, score    -1000, CSegmentedUDIFEncoding
    CBSDBackingStore::newProbe stat() failed.  No such file or directory.
    DIBackingStoreInstantiatorProbe: interface  0, score        1, CBSDBackingStore
    DIBackingStoreInstantiatorProbe: interface  1, score    -1000, CBundleBackingStore
    DIBackingStoreInstantiatorProbe: interface  2, score    -1000, CRAMBackingStore
    DIBackingStoreInstantiatorProbe: interface  3, score    -1000, CCarbonBackingStore
    DIBackingStoreInstantiatorProbe: interface  4, score    -1000, CDevBackingStore
    DIBackingStoreInstantiatorProbe: interface  5, score    -1000, CCURLBackingStore
    DIBackingStoreInstantiatorProbe: interface  6, score    -1000, CVectoredBackingStore
    DIFileEncodingInstantiatorProbe: interface  2, score    -1000, CSegmentedUDIFRawEncoding
    DIDiskImageInstantiatorProbe: interface  0, score    -1000, CUDIFDiskImage
    DIDiskImageInstantiatorProbe: interface  1, score        0, CSparseBundleDiskImage
    DIDiskImageInstantiatorProbe: interface  2, score        0, CSparseDiskImage
    DIDiskImageInstantiatorProbe: interface  3, score      100, CRawDiskImage
    DIDiskImageInstantiatorProbe: interface  4, score        0, CDARTDiskImage
    DIDiskImageInstantiatorProbe: interface  5, score        0, CDiskCopy42DiskImage
    DIDiskImageInstantiatorProbe: interface  6, score    -1000, CNDIFDiskImage
    DIDiskImageInstantiatorProbe: interface  8, score     -100, CShadowedDiskImage
    DIDiskImageInstantiatorProbe: interface  9, score     -100, CWrappedDiskImage
    DIDiskImageNewWithBackingStore: CRawDiskImage
    DIDiskImageNewWithBackingStore: instantiator returned 0
    DIDiskImageConvertProbe: probing interface 0 CUDIFDiskImage
                           : score 100
    DIDiskImageConvertProbe: probing interface 1 CSparseBundleDiskImage
                           : score -1000
    DIDiskImageConvertProbe: probing interface 2 CSparseDiskImage
                           : score -1000
    DIDiskImageConvertProbe: probing interface 3 CRawDiskImage
                           : score -1000
    DIDiskImageConvertProbe: probing interface 6 CNDIFDiskImage
    CNDIFDiskImage::convertProbe: format is OZDU
    CNDIFDiskImage::convertProbe: format not recognized.
                           : score -1000
    DIDiskImageConvertProbe: selecting index 0 CUDIFDiskImage
    DIDiskImageConvertWithDiskImage: CUDIFDiskImage
    Preparing imaging engine?
    Reading Protective Master Boot Record (MBR : 0)?
    DIFileEncodingCreatorProbe: interface  2, score    -1000, CEncryptedEncoding
    DIBackingStoreCreatorProbe: interface  0, score      100, CBSDBackingStore
    DIBackingStoreCreatorProbe: interface  1, score    -1000, CBundleBackingStore
    DIBackingStoreCreatorProbe: interface  2, score        0, CRAMBackingStore
    DIBackingStoreCreatorProbe: interface  3, score      300, CCarbonBackingStore
    DIBackingStoreCreatorProbe: interface  5, score     -100, CCURLBackingStore
    DIBackingStoreCreateWithCFURL: CCarbonBackingStore
    DIBackingStoreCreateWithCFURL: creator returned 0
    CUDIFFileAccess::createWithCFURL: kUDIFFileWithFooter
    __compressThread(0): ABORT trying to dequeue work
    __compressThread(2): ABORT trying to dequeue work
    __compressThread(3): ABORT trying to dequeue work
    __compressThread(4): ABORT trying to dequeue work
    __compressThread(1): ABORT trying to dequeue work
       (CRC32 $EADAFCD3: Protective Master Boot Record (MBR : 0))
    Reading GPT Header (Primary GPT Header : 1)?
    __compressThread(1): ABORT trying to dequeue work
    __compressThread(2): ABORT trying to dequeue work
    __compressThread(4): ABORT trying to dequeue work
    __compressThread(0): ABORT trying to dequeue work
    __compressThread(3): ABORT trying to dequeue work
       (CRC32 $9752872B: GPT Header (Primary GPT Header : 1))
    Reading GPT Partition Data (Primary GPT Table : 2)?
    __compressThread(0): ABORT trying to dequeue work
    __compressThread(2): ABORT trying to dequeue work
    __compressThread(3): ABORT trying to dequeue work
    __compressThread(4): ABORT trying to dequeue work
    __compressThread(1): ABORT trying to dequeue work
       (CRC32 $47DBCAB8: GPT Partition Data (Primary GPT Table : 2))
    Reading  (Apple_Free : 3)?
    __compressThread(1): ABORT trying to dequeue work
    __compressThread(2): ABORT trying to dequeue work
    __compressThread(0): ABORT trying to dequeue work
    __compressThread(3): ABORT trying to dequeue work
    __compressThread(4): ABORT trying to dequeue work
       (CRC32 $00000000:  (Apple_Free : 3))
    Reading disk image (Apple_HFS : 4)?
    __compressThread(2): ABORT trying to dequeue work
    __compressThread(0): ABORT trying to dequeue work
    __compressThread(4): ABORT trying to dequeue work
    __compressThread(1): ABORT trying to dequeue work
    __compressThread(3): ABORT trying to dequeue work
       (CRC32 $464AF711: disk image (Apple_HFS : 4))
    Reading GPT Partition Data (Backup GPT Table : 5)?
    __compressThread(2): ABORT trying to dequeue work
    __compressThread(0): ABORT trying to dequeue work
    __compressThread(1): ABORT trying to dequeue work
    __compressThread(4): ABORT trying to dequeue work
    __compressThread(3): ABORT trying to dequeue work
       (CRC32 $47DBCAB8: GPT Partition Data (Backup GPT Table : 5))
    Reading GPT Header (Backup GPT Header : 6)?
    __compressThread(4): ABORT trying to dequeue work
    __compressThread(3): ABORT trying to dequeue work
    __compressThread(1): ABORT trying to dequeue work
    __compressThread(0): ABORT trying to dequeue work
    __compressThread(2): ABORT trying to dequeue work
       (CRC32 $E6DC1FF0: GPT Header (Backup GPT Header : 6))
    Adding resources?
    DIDiskImageInstantiatorProbe: interface  0, score     1000, CUDIFDiskImage
    DIDiskImageInstantiatorProbe: interface  1, score        0, CSparseBundleDiskImage
    DIDiskImageInstantiatorProbe: interface  2, score        0, CSparseDiskImage
    CRawDiskImage: data fork length 0x0000000003AF6BEB (61828075) not a multiple of 512.
    DIDiskImageInstantiatorProbe: interface  3, score     -100, CRawDiskImage
    DIDiskImageInstantiatorProbe: interface  4, score        0, CDARTDiskImage
    DIDiskImageInstantiatorProbe: interface  5, score        0, CDiskCopy42DiskImage
    DIDiskImageInstantiatorProbe: interface  6, score    -1000, CNDIFDiskImage
    DIDiskImageInstantiatorProbe: interface  8, score     -100, CShadowedDiskImage
    DIDiskImageInstantiatorProbe: interface  9, score     -100, CWrappedDiskImage
    DIDiskImageNewWithBackingStore: CUDIFDiskImage
    DIDiskImageNewWithBackingStore: instantiator returned 0
    Elapsed Time:  5.803s
    File size: 61845294 bytes, Checksum: CRC32 $AA6AEB64
    Sectors processed: 375553, 316004 compressed
    Speed: 26.6Mbytes/sec
    Savings: 67.8%
    DIDiskImageConvertWithDiskImage: converter returned 0
    created: /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/./test/output/AddLauncherTest-1.0.dmghdiutil: convert: result: 0
    
[17:32:35.309] Returned: 0

[17:32:35.341] Result DMG installer for AddLauncherTest: /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/./test/output/AddLauncherTest-1.0.dmg.
[17:32:35.345] Succeeded in building Mac DMG Package package
[17:32:39.444] TRACE: exec: Done. Exit code: 0
[17:32:39.478] TRACE: assertEquals(0): Check command [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/macosx-x64-debug.jdk/jdk-20/fastdebug/bin/jpackage --input ./test/input --dest ./test/output --name AddLauncherTest --type dmg --main-jar hello.jar --main-class Hello --arguments Duke --arguments is --arguments the --arguments King --description ""AddLauncherTest Description"" --add-launcher Baz2=./test/Baz2.0.properties --add-launcher foo=./test/foo.0.properties --add-launcher Bar=./test/Bar.0.properties -J-Djlink.debug=true --verbose](31) exited with 0 code
[17:32:39.482] TRACE: assertTrue(): Check [./test/output/AddLauncherTest-1.0.dmg] path exists
[17:32:39.483] TRACE: assertTrue(): Check [./test/output/AddLauncherTest-1.0.dmg] is a file
[17:32:39.554] TRACE: exec: Execute [sh -c ""yes | /usr/bin/hdiutil attach ./test/output/AddLauncherTest-1.0.dmg -plist""](3); save output...
hdiutil: attach failed - No child processes
[17:32:40.424] TRACE: exec: Done. Exit code: 1
[17:32:40.468] ERROR: Expected [0]. Actual [1]: Check command [sh -c ""yes | /usr/bin/hdiutil attach ./test/output/AddLauncherTest-1.0.dmg -plist""](3) exited with 0 code
[17:32:40.563] [  FAILED  ] AddLauncherTest.test; checks=53


Out of all that verbosity, it looks like the relevant failure is:

[17:32:35.341] Result DMG installer for AddLauncherTest: /System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S8505/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/fae80b4e-1fee-42db-880e-d54a3b09a5f2/runs/5ed6fdf8-3306-48b1-bd9d-9485bb9b4bf6/testoutput/test-support/jtreg_open_test_jdk_core_tools/scratch/0/./test/output/AddLauncherTest-1.0.dmg.
[17:32:35.345] Succeeded in building Mac DMG Package package
[17:32:39.444] TRACE: exec: Done. Exit code: 0
[17:32:39.478] TRACE: assertEquals(0): Check command [/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2229/macosx-x64-debug.jdk/jdk-20/fastdebug/bin/jpackage --input ./test/input --dest ./test/output --name AddLauncherTest --type dmg --main-jar hello.jar --main-class Hello --arguments Duke --arguments is --arguments the --arguments King --description ""AddLauncherTest Description"" --add-launcher Baz2=./test/Baz2.0.properties --add-launcher foo=./test/foo.0.properties --add-launcher Bar=./test/Bar.0.properties -J-Djlink.debug=true --verbose](31) exited with 0 code
[17:32:39.482] TRACE: assertTrue(): Check [./test/output/AddLauncherTest-1.0.dmg] path exists
[17:32:39.483] TRACE: assertTrue(): Check [./test/output/AddLauncherTest-1.0.dmg] is a file
[17:32:39.554] TRACE: exec: Execute [sh -c ""yes | /usr/bin/hdiutil attach ./test/output/AddLauncherTest-1.0.dmg -plist""](3); save output...
hdiutil: attach failed - No child processes
[17:32:40.424] TRACE: exec: Done. Exit code: 1
[17:32:40.468] ERROR: Expected [0]. Actual [1]: Check command [sh -c ""yes | /usr/bin/hdiutil attach ./test/output/AddLauncherTest-1.0.dmg -plist""](3) exited with 0 code
[17:32:40.563] [  FAILED  ] AddLauncherTest.test; checks=53",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2zo63:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-03-16 16:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13002
Date: 2023-03-13 16:50:51 +0000;;;","2023-03-17 17:04;dukebot;Changeset: c56f011b
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2023-03-18 00:02:23 +0000
URL:       https://git.openjdk.org/jdk/commit/c56f011baa4ce7f44661f6ade8e313f812730c02
;;;",,,,,,,,,,,,,,,,,,,
(process) java/lang/ProcessBuilder/UnblockSignals.java fails,JDK-8298993,5089992,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,rriggs,dcubed,dcubed,2022-12-17 19:52,2023-08-04 12:48,2023-10-01 09:56,2023-04-27 13:38,20,21,,,,,,21,core-libs,,0,intermittent,tier8,,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/lang/ProcessBuilder/UnblockSignals.java

Here's a snippet from the log file:

#section:main
----------messages:(6/236)----------
command: main UnblockSignals
reason: User specified action: run main/othervm UnblockSignals 
started: Sat Dec 17 20:13:15 GMT 2022
Mode: othervm [/othervm specified]
finished: Sat Dec 17 20:14:42 GMT 2022
elapsed time (seconds): 86.496
----------configuration:(0/0)----------
----------System.out:(2/59)----------
Child 6587, [sleep, 30]
Child 6590, [kill, -s, QUIT, 6587]
----------System.err:(11/663)----------
java.lang.RuntimeException: Kill process failed, exit status: 1
	at UnblockSignals.main(UnblockSignals.java:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Kill process failed, exit status: 1
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Kill process failed, exit status: 1
----------rerun:(45/6493)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2zo5n:",9223372036854775807,b21,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,Verified,,"2023-04-25 14:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13660
Date: 2023-04-25 21:43:54 +0000;;;","2023-04-27 08:04;msheppar;One would expect that Xcomp execution would honour the logical semantics of the Java code. It's been observed with a number of these test failure, in Xcomp mode, that this is not the case. Shouldn't this be a concern? and as such result in a bug rasied against the Xcomp compiler ?

The exit status for the kill process is 1, ( not 100% sure of its meaning,) which I think alludes to either the target process doesn't exist, or the effective uid of the killer doesn't match that of the target so is prohibited.

test elapse times for failed scenarios are > 60 seconds suggesting that kill process started after the sleep process had completed (i.e. after 30 seconds). Typical successful execution results in elapsed times  < 1 sec.

An open question, why would Xcomp cause such a significant delay in execution ?

;;;","2023-04-27 13:38;dukebot;Changeset: b827ce83
Author:    Roger Riggs <rriggs@openjdk.org>
Date:      2023-04-27 20:36:40 +0000
URL:       https://git.openjdk.org/jdk/commit/b827ce8334c568d72990985ff6077db8334e2754
;;;","2023-04-27 18:46;dholmes;> An open question, why would Xcomp cause such a significant delay in execution ? 

Because  Xcomp performs upfront compilation of every single Java method that would be executed by the test.

Many tests experience timing issues if run under Xcomp and so are not run in that mode.;;;",,,,,,,,,,,,,,,,,
"runtime/NMT/SummarySanityCheck.java failed with ""Total committed (MMMMMM) did not match the summarized committed (NNNNNN)""",JDK-8298992,5089991,Bug,Closed,JDK,JDK,software,duke,,,P4,Fixed,azafari,dcubed,dcubed,2022-12-17 19:45,2023-09-12 11:17,2023-10-01 09:56,2023-08-30 04:13,20,21,,,,,,22,hotspot,,0,amazon-interest,intermittent,nmt,tier7,tier8,,,,,,,,,,,"The following test failed in the JDK20 CI:

runtime/NMT/SummarySanityCheck.java

Here's a snippet from the log file:

#section:main
----------messages:(7/573)----------
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:NativeMemoryTracking=summary -XX:+WhiteBoxAPI SummarySanityCheck
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:NativeMemoryTracking=summary -XX:+WhiteBoxAPI SummarySanityCheck 
started: Sun Dec 18 01:30:57 UTC 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.management --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
finished: Sun Dec 18 01:31:21 UTC 2022
elapsed time (seconds): 24.51
----------configuration:(4/111)----------

<snip>

----------System.out:(1/70)----------
[2022-12-18T01:31:17.676993882Z] Gathering output for process 1500379
----------System.err:(198/11516)----------
java.lang.Exception: Total committed (126251) did not match the summarized committed (126325) . Stdout is :
1500070:

Native Memory Tracking:

(Omitting categories weighting less than 1KB)

Total: reserved=2327235KB, committed=126251KB
       malloc: 50751KB #345243
       mmap:   reserved=2276484KB, committed=75500KB

-                 Java Heap (reserved=1013760KB, committed=14336KB)
                            (mmap: reserved=1013760KB, committed=14336KB) 
 
-                     Class (reserved=1048756KB, committed=372KB)
                            (classes #1098)
                            (  instance classes #959, array classes #139)
                            (malloc=180KB #4663) (peak=180KB #4660) 
                            (mmap: reserved=1048576KB, committed=192KB) 
                            (  Metadata:   )
                            (    reserved=65536KB, committed=2816KB)
                            (    used=2767KB)
                            (    waste=49KB =1.73%)
                            (  Class space:)
                            (    reserved=1048576KB, committed=192KB)
                            (    used=91KB)
                            (    waste=101KB =52.38%)
 
-                    Thread (reserved=27920KB, committed=1308KB)
                            (thread #28)
                            (stack: reserved=27844KB, committed=1232KB)
                            (malloc=44KB #172) (peak=52KB #176) 
                            (arena=32KB #55) (peak=435KB #51)
 
-                      Code (reserved=55095KB, committed=15815KB)
                            (malloc=5559KB #170440) (peak=5559KB #170447) 
                            (mmap: reserved=49536KB, committed=10256KB) 
                            (arena=0KB #0) (peak=33KB #1)
 
-                        GC (reserved=76858KB, committed=55398KB)
                            (malloc=22054KB #3448) (at peak) 
                            (mmap: reserved=54804KB, committed=33344KB) 
 
-                 GCCardSet (reserved=85KB, committed=85KB)
                            (malloc=85KB #1125) (at peak) 
 
-                  Compiler (reserved=851KB, committed=851KB)
                            (malloc=61KB #115) (peak=75KB #120) 
                            (arena=791KB #10) (peak=58749KB #10)
 
-                  Internal (reserved=8694KB, committed=8694KB)
                            (malloc=8658KB #157677) (at peak) 
                            (mmap: reserved=36KB, committed=36KB) 
 
-                     Other (reserved=2KB, committed=2KB)
                            (malloc=2KB #1) (at peak) 
 
-                    Symbol (reserved=1200KB, committed=1200KB)
                            (malloc=840KB #3351) (at peak) 
                            (arena=360KB #1) (at peak)
 
-    Native Memory Tracking (reserved=5403KB, committed=5403KB)
                            (malloc=9KB #84) (at peak) 
                            (tracking overhead=5394KB)
 
-        Shared class space (reserved=16384KB, committed=13280KB)
                            (mmap: reserved=16384KB, committed=13280KB) 
 
-               Arena Chunk (reserved=6311KB, committed=6311KB)
                            (malloc=6311KB #284) (peak=59179KB #1446) 
 
-                    Module (reserved=195KB, committed=195KB)
                            (malloc=195KB #2033) (at peak) 
 
-                 Safepoint (reserved=8KB, committed=8KB)
                            (mmap: reserved=8KB, committed=8KB) 
 
-           Synchronization (reserved=213KB, committed=213KB)
                            (malloc=213KB #1782) (at peak) 
 
-            Serviceability (reserved=17KB, committed=17KB)
                            (malloc=17KB #9) (at peak) 
 
-                 Metaspace (reserved=65554KB, committed=2834KB)
                            (malloc=18KB #27) (at peak) 
                            (mmap: reserved=65536KB, committed=2816KB) 
 
-      String Deduplication (reserved=1KB, committed=1KB)
                            (malloc=1KB #8) (at peak) 
 
-           Object Monitors (reserved=2KB, committed=2KB)
                            (malloc=2KB #9) (at peak) 
 

	at SummarySanityCheck.throwTestException(SummarySanityCheck.java:116)
	at SummarySanityCheck.main(SummarySanityCheck.java:106)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Exception: Total committed (126251) did not match the summarized committed (126325) . Stdout is :
1500070:

Native Memory Tracking:

(Omitting categories weighting less than 1KB)

Total: reserved=2327235KB, committed=126251KB
       malloc: 50751KB #345243
       mmap:   reserved=2276484KB, committed=75500KB

-                 Java Heap (reserved=1013760KB, committed=14336KB)
                            (mmap: reserved=1013760KB, committed=14336KB) 
 
-                     Class (reserved=1048756KB, committed=372KB)
                            (classes #1098)
                            (  instance classes #959, array classes #139)
                            (malloc=180KB #4663) (peak=180KB #4660) 
                            (mmap: reserved=1048576KB, committed=192KB) 
                            (  Metadata:   )
                            (    reserved=65536KB, committed=2816KB)
                            (    used=2767KB)
                            (    waste=49KB =1.73%)
                            (  Class space:)
                            (    reserved=1048576KB, committed=192KB)
                            (    used=91KB)
                            (    waste=101KB =52.38%)
 
-                    Thread (reserved=27920KB, committed=1308KB)
                            (thread #28)
                            (stack: reserved=27844KB, committed=1232KB)
                            (malloc=44KB #172) (peak=52KB #176) 
                            (arena=32KB #55) (peak=435KB #51)
 
-                      Code (reserved=55095KB, committed=15815KB)
                            (malloc=5559KB #170440) (peak=5559KB #170447) 
                            (mmap: reserved=49536KB, committed=10256KB) 
                            (arena=0KB #0) (peak=33KB #1)
 
-                        GC (reserved=76858KB, committed=55398KB)
                            (malloc=22054KB #3448) (at peak) 
                            (mmap: reserved=54804KB, committed=33344KB) 
 
-                 GCCardSet (reserved=85KB, committed=85KB)
                            (malloc=85KB #1125) (at peak) 
 
-                  Compiler (reserved=851KB, committed=851KB)
                            (malloc=61KB #115) (peak=75KB #120) 
                            (arena=791KB #10) (peak=58749KB #10)
 
-                  Internal (reserved=8694KB, committed=8694KB)
                            (malloc=8658KB #157677) (at peak) 
                            (mmap: reserved=36KB, committed=36KB) 
 
-                     Other (reserved=2KB, committed=2KB)
                            (malloc=2KB #1) (at peak) 
 
-                    Symbol (reserved=1200KB, committed=1200KB)
                            (malloc=840KB #3351) (at peak) 
                            (arena=360KB #1) (at peak)
 
-    Native Memory Tracking (reserved=5403KB, committed=5403KB)
                            (malloc=9KB #84) (at peak) 
                            (tracking overhead=5394KB)
 
-        Shared class space (reserved=16384KB, committed=13280KB)
                            (mmap: reserved=16384KB, committed=13280KB) 
 
-               Arena Chunk (reserved=6311KB, committed=6311KB)
                            (malloc=6311KB #284) (peak=59179KB #1446) 
 
-                    Module (reserved=195KB, committed=195KB)
                            (malloc=195KB #2033) (at peak) 
 
-                 Safepoint (reserved=8KB, committed=8KB)
                            (mmap: reserved=8KB, committed=8KB) 
 
-           Synchronization (reserved=213KB, committed=213KB)
                            (malloc=213KB #1782) (at peak) 
 
-            Serviceability (reserved=17KB, committed=17KB)
                            (malloc=17KB #9) (at peak) 
 
-                 Metaspace (reserved=65554KB, committed=2834KB)
                            (malloc=18KB #27) (at peak) 
                            (mmap: reserved=65536KB, committed=2816KB) 
 
-      String Deduplication (reserved=1KB, committed=1KB)
                            (malloc=1KB #8) (at peak) 
 
-           Object Monitors (reserved=2KB, committed=2KB)
                            (malloc=2KB #9) (at peak) 
 

JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Total committed (126251) did not match the summarized committed (126325) . Stdout is : 1500070: Native Memory Tracking: (Omitting categories weighting less than 1KB) Total: reserved=2327235KB, committed=126251KB malloc: 50751KB #345243 mmap: reserved=2276484KB, committed=75500KB - Java Heap (reserved=1013760KB, committed=14336KB) (mmap: reserved=1013760KB, committed=14336KB) - Class (reserved=1048756KB, committed=372KB) (classes #1098) ( instance classes #959, array classes #139) (malloc=180KB #4663) (peak=180KB #4660) (mmap: reserved=1048576KB, committed=192KB) ( Metadata: ) ( reserved=65536KB, committed=2816KB) ( used=2767KB) ( waste=49KB =1.73%) ( Class space:) ( reserved=1048576KB, committed=192KB) ( used=91KB) ( waste=101KB =52.38%) - Thread (reserved=27920KB, committed=1308KB) (thread #28) (stack: reserved=27844KB, committed=1232KB) (malloc=44KB #172) (peak=52KB #176) (arena=32KB #55) (peak=435KB #51) - Code (reserved=55095KB, committed=15815KB) (malloc=5559KB #170440) (peak=5559KB #170447) (mmap: reserved=49536KB, committed=10256KB) (arena=0KB #0) (peak=33KB #1) - GC (reserved=76858KB, committed=55398KB) (malloc=22054KB #3448) (at peak) (mmap: reserved=54804KB, committed=33344KB) - GCCardSet (reserved=85KB, committed=85KB) (malloc=85KB #1125) (at peak) - Compiler (reserved=851KB, committed=851KB) (malloc=61KB #115) (peak=75KB #120) (arena=791KB #10) (peak=58749KB #10) - Internal (reserved=8694KB, committed=8694KB) (malloc=8658KB #157677) (at peak) (mmap: reserved=36KB, committed=36KB) - Other (reserved=2KB, committed=2KB) (malloc=2KB #1) (at peak) - Symbol (reserved=1200KB, committed=1200KB) (malloc=840KB #3351) (at peak) (arena=360KB #1) (at peak) - Native Memory Tracking (reserved=5403KB, committed=5403KB) (malloc=9KB #84) (at peak) (tracking overhead=5394KB) - Shared class space (reserved=16384KB, committed=13280KB) (mmap: reserved=16384KB, committed=13280KB) - Arena Chunk (reserved=6311KB, committed=6311KB) (malloc=6311KB #284) (peak=59179KB #1446) - Module (reserved=195KB, committed=195KB) (malloc=195KB #2033) (at peak) - Safepoint (reserved=8KB, committed=8KB) (mmap: reserved=8KB, committed=8KB) - Synchronization (reserved=213KB, committed=213KB) (malloc=213KB #1782) (at peak) - Serviceability (reserved=17KB, committed=17KB) (malloc=17KB #9) (at peak) - Metaspace (reserved=65554KB, committed=2834KB) (malloc=18KB #27) (at peak) (mmap: reserved=65536KB, committed=2816KB) - String Deduplication (reserved=1KB, committed=1KB) (malloc=1KB #8) (at peak) - Object Monitors (reserved=2KB, committed=2KB) (malloc=2KB #9) (at peak)
----------rerun:(51/7740)*----------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8315462,,,,,,,,,,,,,JDK-8315378,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,os_x,,,,,"0|i2zo5f:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,Fix failed,,"2022-12-18 23:22;dholmes;Two failures seen since Dec 2 in our CI testing. In both cases it is an Xcomp run:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -XX:+VerifyOops 

Seen once on Windows x64 and once of Linux x64.

It doesn't reproduce locally for me on Linux.


;;;","2023-04-27 06:32;dcubed;Here's a log file snippet from the jdk-21+20-1608-tier8 sighting:

runtime/NMT/SummarySanityCheck.java

#section:main
----------messages:(7/574)----------
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:NativeMemoryTracking=summary -XX:+WhiteBoxAPI SummarySanityCheck
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:NativeMemoryTracking=summary -XX:+WhiteBoxAPI SummarySanityCheck 
started: Thu Apr 27 00:48:06 GMT 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.management --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
finished: Thu Apr 27 00:48:41 GMT 2023
elapsed time (seconds): 35.145
----------configuration:(4/111)----------
Boot Layer
  add modules: java.base java.management   
  add exports: java.base/jdk.internal.misc ALL-UNNAMED

----------System.out:(1/65)----------
[2023-04-27T00:48:36.116715Z] Gathering output for process 56484
----------System.err:(198/11627)----------
java.lang.Exception: Total committed (146457) did not match the summarized committed (146543) . Stdout is :
56469:

Native Memory Tracking:

(Omitting categories weighting less than 1KB)

Total: reserved=2716437KB, committed=146457KB
       malloc: 47441KB #287194
       mmap:   reserved=2668996KB, committed=99016KB

-                 Java Heap (reserved=1398784KB, committed=10240KB)
                            (mmap: reserved=1398784KB, committed=10240KB) 
 
-                     Class (reserved=1048744KB, committed=360KB)
                            (classes #1090)
                            (  instance classes #949, array classes #141)
                            (malloc=168KB #4342) (peak=168KB #4343) 
                            (mmap: reserved=1048576KB, committed=192KB) 
                            (  Metadata:   )
                            (    reserved=65536KB, committed=2688KB)
                            (    used=2588KB)
                            (    waste=100KB =3.74%)
                            (  Class space:)
                            (    reserved=1048576KB, committed=192KB)
                            (    used=89KB)
                            (    waste=103KB =53.64%)
 
-                    Thread (reserved=29769KB, committed=29769KB)
                            (thread #29)
                            (stack: reserved=29696KB, committed=29696KB)
                            (malloc=40KB #178) (peak=49KB #182) 
                            (arena=33KB #57) (peak=405KB #55)
 
-                      Code (reserved=54064KB, committed=14012KB)
                            (malloc=4528KB #137312) (peak=4528KB #137319) 
                            (mmap: reserved=49536KB, committed=9484KB) 
                            (arena=0KB #0) (peak=33KB #1)
 
-                        GC (reserved=82957KB, committed=55845KB)
                            (malloc=22513KB #3594) (peak=22527KB #3758) 
                            (mmap: reserved=60444KB, committed=33332KB) 
 
-                 GCCardSet (reserved=118KB, committed=118KB)
                            (malloc=118KB #1552) (at peak) 
 
-                  Compiler (reserved=242KB, committed=242KB)
                            (malloc=47KB #112) (peak=61KB #117) 
                            (arena=195KB #3) (peak=61333KB #10)
 
-                  Internal (reserved=6263KB, committed=6263KB)
                            (malloc=6231KB #125027) (at peak) 
                            (mmap: reserved=32KB, committed=32KB) 
 
-                     Other (reserved=2KB, committed=2KB)
                            (malloc=2KB #1) (at peak) 
 
-                    Symbol (reserved=1186KB, committed=1186KB)
                            (malloc=826KB #1018) (at peak) 
                            (arena=360KB #1) (at peak)
 
-    Native Memory Tracking (reserved=4494KB, committed=4494KB)
                            (malloc=7KB #65) (at peak) 
                            (tracking overhead=4487KB)
 
-        Shared class space (reserved=16384KB, committed=13344KB, readonly=8223KB)
                            (mmap: reserved=16384KB, committed=13344KB) 
 
-               Arena Chunk (reserved=7010KB, committed=7010KB)
                            (malloc=7010KB #290) (peak=61732KB #1517) 
 
-                    Module (reserved=198KB, committed=198KB)
                            (malloc=198KB #2067) (at peak) 
 
-                 Safepoint (reserved=8KB, committed=8KB)
                            (mmap: reserved=8KB, committed=8KB) 
 
-           Synchronization (reserved=728KB, committed=728KB)
                            (malloc=728KB #11576) (at peak) 
 
-            Serviceability (reserved=17KB, committed=17KB)
                            (malloc=17KB #9) (peak=17KB #13) 
 
-                 Metaspace (reserved=65552KB, committed=2704KB)
                            (malloc=16KB #22) (at peak) 
                            (mmap: reserved=65536KB, committed=2688KB) 
 
-      String Deduplication (reserved=1KB, committed=1KB)
                            (malloc=1KB #8) (at peak) 
 
-           Object Monitors (reserved=2KB, committed=2KB)
                            (malloc=2KB #9) (at peak) 
 

	at SummarySanityCheck.throwTestException(SummarySanityCheck.java:126)
	at SummarySanityCheck.main(SummarySanityCheck.java:116)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1592)

JavaTest Message: Test threw exception: java.lang.Exception: Total committed (146457) did not match the summarized committed (146543) . Stdout is :
56469:

Native Memory Tracking:

(Omitting categories weighting less than 1KB)

Total: reserved=2716437KB, committed=146457KB
       malloc: 47441KB #287194
       mmap:   reserved=2668996KB, committed=99016KB

-                 Java Heap (reserved=1398784KB, committed=10240KB)
                            (mmap: reserved=1398784KB, committed=10240KB) 
 
-                     Class (reserved=1048744KB, committed=360KB)
                            (classes #1090)
                            (  instance classes #949, array classes #141)
                            (malloc=168KB #4342) (peak=168KB #4343) 
                            (mmap: reserved=1048576KB, committed=192KB) 
                            (  Metadata:   )
                            (    reserved=65536KB, committed=2688KB)
                            (    used=2588KB)
                            (    waste=100KB =3.74%)
                            (  Class space:)
                            (    reserved=1048576KB, committed=192KB)
                            (    used=89KB)
                            (    waste=103KB =53.64%)
 
-                    Thread (reserved=29769KB, committed=29769KB)
                            (thread #29)
                            (stack: reserved=29696KB, committed=29696KB)
                            (malloc=40KB #178) (peak=49KB #182) 
                            (arena=33KB #57) (peak=405KB #55)
 
-                      Code (reserved=54064KB, committed=14012KB)
                            (malloc=4528KB #137312) (peak=4528KB #137319) 
                            (mmap: reserved=49536KB, committed=9484KB) 
                            (arena=0KB #0) (peak=33KB #1)
 
-                        GC (reserved=82957KB, committed=55845KB)
                            (malloc=22513KB #3594) (peak=22527KB #3758) 
                            (mmap: reserved=60444KB, committed=33332KB) 
 
-                 GCCardSet (reserved=118KB, committed=118KB)
                            (malloc=118KB #1552) (at peak) 
 
-                  Compiler (reserved=242KB, committed=242KB)
                            (malloc=47KB #112) (peak=61KB #117) 
                            (arena=195KB #3) (peak=61333KB #10)
 
-                  Internal (reserved=6263KB, committed=6263KB)
                            (malloc=6231KB #125027) (at peak) 
                            (mmap: reserved=32KB, committed=32KB) 
 
-                     Other (reserved=2KB, committed=2KB)
                            (malloc=2KB #1) (at peak) 
 
-                    Symbol (reserved=1186KB, committed=1186KB)
                            (malloc=826KB #1018) (at peak) 
                            (arena=360KB #1) (at peak)
 
-    Native Memory Tracking (reserved=4494KB, committed=4494KB)
                            (malloc=7KB #65) (at peak) 
                            (tracking overhead=4487KB)
 
-        Shared class space (reserved=16384KB, committed=13344KB, readonly=8223KB)
                            (mmap: reserved=16384KB, committed=13344KB) 
 
-               Arena Chunk (reserved=7010KB, committed=7010KB)
                            (malloc=7010KB #290) (peak=61732KB #1517) 
 
-                    Module (reserved=198KB, committed=198KB)
                            (malloc=198KB #2067) (at peak) 
 
-                 Safepoint (reserved=8KB, committed=8KB)
                            (mmap: reserved=8KB, committed=8KB) 
 
-           Synchronization (reserved=728KB, committed=728KB)
                            (malloc=728KB #11576) (at peak) 
 
-            Serviceability (reserved=17KB, committed=17KB)
                            (malloc=17KB #9) (peak=17KB #13) 
 
-                 Metaspace (reserved=65552KB, committed=2704KB)
                            (malloc=16KB #22) (at peak) 
                            (mmap: reserved=65536KB, committed=2688KB) 
 
-      String Deduplication (reserved=1KB, committed=1KB)
                            (malloc=1KB #8) (at peak) 
 
-           Object Monitors (reserved=2KB, committed=2KB)
                            (malloc=2KB #9) (at peak) 
 

JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.Exception: Total committed (146457) did not match the summarized committed (146543) . Stdout is : 56469: Native Memory Tracking: (Omitting categories weighting less than 1KB) Total: reserved=2716437KB, committed=146457KB malloc: 47441KB #287194 mmap: reserved=2668996KB, committed=99016KB - Java Heap (reserved=1398784KB, committed=10240KB) (mmap: reserved=1398784KB, committed=10240KB) - Class (reserved=1048744KB, committed=360KB) (classes #1090) ( instance classes #949, array classes #141) (malloc=168KB #4342) (peak=168KB #4343) (mmap: reserved=1048576KB, committed=192KB) ( Metadata: ) ( reserved=65536KB, committed=2688KB) ( used=2588KB) ( waste=100KB =3.74%) ( Class space:) ( reserved=1048576KB, committed=192KB) ( used=89KB) ( waste=103KB =53.64%) - Thread (reserved=29769KB, committed=29769KB) (thread #29) (stack: reserved=29696KB, committed=29696KB) (malloc=40KB #178) (peak=49KB #182) (arena=33KB #57) (peak=405KB #55) - Code (reserved=54064KB, committed=14012KB) (malloc=4528KB #137312) (peak=4528KB #137319) (mmap: reserved=49536KB, committed=9484KB) (arena=0KB #0) (peak=33KB #1) - GC (reserved=82957KB, committed=55845KB) (malloc=22513KB #3594) (peak=22527KB #3758) (mmap: reserved=60444KB, committed=33332KB) - GCCardSet (reserved=118KB, committed=118KB) (malloc=118KB #1552) (at peak) - Compiler (reserved=242KB, committed=242KB) (malloc=47KB #112) (peak=61KB #117) (arena=195KB #3) (peak=61333KB #10) - Internal (reserved=6263KB, committed=6263KB) (malloc=6231KB #125027) (at peak) (mmap: reserved=32KB, committed=32KB) - Other (reserved=2KB, committed=2KB) (malloc=2KB #1) (at peak) - Symbol (reserved=1186KB, committed=1186KB) (malloc=826KB #1018) (at peak) (arena=360KB #1) (at peak) - Native Memory Tracking (reserved=4494KB, committed=4494KB) (malloc=7KB #65) (at peak) (tracking overhead=4487KB) - Shared class space (reserved=16384KB, committed=13344KB, readonly=8223KB) (mmap: reserved=16384KB, committed=13344KB) - Arena Chunk (reserved=7010KB, committed=7010KB) (malloc=7010KB #290) (peak=61732KB #1517) - Module (reserved=198KB, committed=198KB) (malloc=198KB #2067) (at peak) - Safepoint (reserved=8KB, committed=8KB) (mmap: reserved=8KB, committed=8KB) - Synchronization (reserved=728KB, committed=728KB) (malloc=728KB #11576) (at peak) - Serviceability (reserved=17KB, committed=17KB) (malloc=17KB #9) (peak=17KB #13) - Metaspace (reserved=65552KB, committed=2704KB) (malloc=16KB #22) (at peak) (mmap: reserved=65536KB, committed=2688KB) - String Deduplication (reserved=1KB, committed=1KB) (malloc=1KB #8) (at peak) - Object Monitors (reserved=2KB, committed=2KB) (malloc=2KB #9) (at peak)
----------rerun:(50/8054)*----------;;;","2023-08-30 04:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/15306
Date: 2023-08-16 12:18:35 +0000;;;","2023-08-30 04:13;dukebot;Changeset: bf63945a
Author:    Afshin Zafari <azafari@openjdk.org>
Date:      2023-08-30 11:11:44 +0000
URL:       https://git.openjdk.org/jdk/commit/bf63945ad1542dbdcbaf652a518a2381868244d8
;;;","2023-08-31 07:01;azafari;The added assert raises frequently and breaks other tasks in CI.
So a REDO issue (JDK-8315462) is cloned for this one.;;;",,,,,,,,,,,,,,,,
Remove duplicated serviceability/jvmti/thread/GetAllThreads/allthr01/allthr01.java,JDK-8298979,5089965,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lmesnik,amenkov,amenkov,2022-12-16 12:46,2023-02-08 23:37,2023-10-01 09:56,2023-02-02 07:12,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,"This is follow-up for JDK-8294486
serviceability/jvmti/thread/GetAllThreads/allthr01/allthr01.java duplicates vmTestbase/nsk/jvmti/GetAllThreads/allthr001/
nsk test was fixed later to properly handle VM internal threads",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8284027,JDK-8294486,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2znzn:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2023-01-26 21:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12240
Date: 2023-01-27 05:06:25 +0000;;;","2023-02-02 07:12;dukebot;Changeset: 2d50c7d4
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-02-02 15:10:27 +0000
URL:       https://git.openjdk.org/jdk/commit/2d50c7d477b4141d58ae4ad01c254cde03050373
;;;",,,,,,,,,,,,,,,,,,,
Add ftcolor.c to imported freetype sources,JDK-8298974,5089960,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,prr,prr,prr,2022-12-16 11:40,2023-07-04 23:36,2023-10-01 09:56,2022-12-19 15:34,,,,,,,,21,client-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-other,sn_134,,,,,,,,,,"OpenJDK imports freetype sources, but only the ones needed.
In order to support Color Glyphs (eg Emoji glyphs) we need
to import ftcolor.c",,,,,,,,,,JDK-8310895,JDK-8311153,JDK-8311420,JDK-8310337,JDK-8310496,,,,,,,,,,,,,JDK-8269806,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2znyj:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-12-19 10:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11728
Date: 2022-12-19 18:21:44 +0000;;;","2022-12-19 15:34;dukebot;Changeset: 05f9e767
Author:    Phil Race <prr@openjdk.org>
Date:      2022-12-19 23:32:58 +0000
URL:       https://git.openjdk.org/jdk/commit/05f9e7676ea457cd5ef44acca9a1706b5dd0d093
;;;","2023-06-23 08:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1496
Date: 2023-06-23 15:48:59 +0000;;;","2023-06-26 01:56;mdoerr;Fix Request (17u):
Should get backported for parity with 17.0.9-oracle. Applies cleanly.;;;","2023-06-29 08:17;goetz;Fix request [11u]

I backport this for parity with 11.0.21-oracle.
Low risk, only adding a file to libfreetype.
Clean backport.  SAP nightly testing passed.;;;","2023-06-29 08:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2008
Date: 2023-06-29 15:20:33 +0000;;;",,,,,,,,,,,,,,,
Move Console implementation into jdk internal package,JDK-8298971,5089957,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2022-12-16 09:38,2023-01-11 14:11,2023-10-01 09:56,2022-12-21 10:11,,,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,"With the fix to JDK-8298416, `java.io.Console` became effectively an abstract class, and its original implementation went into `ConsoleImpl` class. Thus it would be desirable to move the impl class into `jdk.internal.io` package.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8300010,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2znxv:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2022-12-19 12:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11729
Date: 2022-12-19 19:23:25 +0000;;;","2022-12-21 10:11;dukebot;Changeset: 7e59a0ec
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-12-21 18:09:21 +0000
URL:       https://git.openjdk.org/jdk/commit/7e59a0ecb672292814abdf7f2e31a5f5868c43d8
;;;",,,,,,,,,,,,,,,,,,,
G1: Incorrect merged remset stats,JDK-8298968,5089954,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ayang,ayang,ayang,2022-12-16 08:18,2023-01-03 11:33,2023-10-01 09:56,2022-12-20 04:45,20,21,,,,,,20,hotspot,,0,gc-g1,,,,,,,,,,,,,,,"In `G1FlushHumongousCandidateRemSets`, `_merge_stats` is never updated, so remset stats from eager-reclaim regions are lost.

In `G1MergeCardSetClosure`, the stat cache is flushed in the destructor, but the stats are retrieved in `stats()` before the destructor is called, resulting into partial stats.",,,,,,,,,,JDK-8299151,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2znx7:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-12-19 05:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/53
Date: 2022-12-19 12:57:15 +0000;;;","2022-12-20 04:45;dukebot;Changeset: 65fc0588
Author:    Albert Mingkun Yang <ayang@openjdk.org>
Date:      2022-12-20 12:43:53 +0000
URL:       https://git.openjdk.org/jdk20/commit/65fc05884bc96ce0b6f572034ae085c933f85c61
;;;",,,,,,,,,,,,,,,,,,,
compiler/codecache/MHIntrinsicAllocFailureTest.java fails intermittently,JDK-8298947,5089931,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdoerr,enikitin,enikitin,2022-12-16 05:12,2023-01-03 11:35,2023-10-01 09:56,2022-12-20 14:05,20,,,,,,,20,hotspot,,0,atr,intermittent,noreg-self,oracle-triage-21,regression,testbug,,,,,,,,,,"Happens intermittently on all platforms. The stacktrace:

Java HotSpot(TM) 64-Bit Server VM warning: CodeHeap 'non-profiled nmethods' is full. Compiler has been disabled.
Java HotSpot(TM) 64-Bit Server VM warning: Try increasing the code heap size using -XX:NonProfiledCodeHeapSize=
java.lang.NullPointerException: Cannot invoke ""java.lang.management.MemoryPoolMXBean.getUsage()"" because ""<local1>"" is null
	at compiler.codecache.MHIntrinsicAllocFailureTest.fillCodeCacheSegment(MHIntrinsicAllocFailureTest.java:61)
	at compiler.codecache.MHIntrinsicAllocFailureTest.main(MHIntrinsicAllocFailureTest.java:71)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

Slightly modified code snippet:

   // type is a BlobType.MethodProfiled
   MemoryPoolMXBean bean = type.getMemoryPool();
   int size = (int) (bean.getUsage().getMax() >> 7);

No usage object initialised for the said MemoryPool?",,,,,,,,,,JDK-8299516,JDK-8299247,JDK-8299428,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295724,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2znsj:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-16 05:54;thartmann;That looks like a regression / test bug from JDK-8295724 which introduced that test.;;;","2022-12-16 05:57;thartmann;[~mdoerr], could you please have a look?;;;","2022-12-16 06:06;thartmann;Looks similar to the issue that Vladimir already reported in the PR but was subsequently fixed by disabling the test when TieredCompilation is off:
https://github.com/openjdk/jdk/pull/10933#issuecomment-1338608466

In the failing cases, the test is executed with -XX:TieredStopAtLevel=1. That's probably the issue. I think a ""& (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel==4)"" is missing.;;;","2022-12-16 06:10;thartmann;ILW = Test fails (probably test bug), intermittent with single test and TieredStopAtLevel=1, no workaround = MLH = P4;;;","2022-12-19 08:21;mdoerr;Thanks for reporting and the investigation. I think we should fix it in JDK 20. PR is created.;;;","2022-12-19 08:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/55
Date: 2022-12-19 16:17:34 +0000;;;","2022-12-20 14:05;dukebot;Changeset: 3d4d9fd6
Author:    Martin Doerr <mdoerr@openjdk.org>
Date:      2022-12-20 22:02:34 +0000
URL:       https://git.openjdk.org/jdk20/commit/3d4d9fd6e6de037950f94482d4e33f178eb15daa
;;;","2022-12-20 14:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/951
Date: 2022-12-13 11:58:23 +0000;;;","2022-12-20 22:16;thartmann;Thanks for quickly fixing, [~mdoerr]. Just FYI, the `testbug` label is deprecated, `noreg-self` should be used:
""The labels test, test-only, and testbug are deprecated and should no longer be used. Use noreg-self to indicate that an issue is a bug in test code.""
https://openjdk.org/guide/;;;","2022-12-31 03:55;mdoerr;Fix Request
Backported as part of JDK-8295724 (review and approval is there).;;;",,,,,,,,,,,
Missing escapes for single quote marks in compiler.properties,JDK-8298943,5089605,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,acobbs,webbuggrp,webbuggrp,2022-12-13 14:43,2023-01-10 19:26,2023-10-01 09:56,2022-12-19 11:49,20,,,,,,,21,tools,,0,dcsad,reproducer-yes,webbug,,,,,,,,,,,,,"ADDITIONAL SYSTEM INFORMATION :
jdk-20+26-151-g3aa4070d4ca


A DESCRIPTION OF THE PROBLEM :
The source file compiler.properties contains the English message bundle for compiler warnings, errors, etc.

Since the strings in this file are format strings, any single quotes must be escaped by doubling them.

An example of a properly encoded entry is:

compiler.err.cant.assign.val.to.this=\
    cannot assign to ''this''

There are three entries that appear to be not escaped when they should be. These are:

compiler.err.dc.no.tag.name=\
   no tag name after '@'

compiler.warn.leaks.not.accessible.not.required.transitive=\
   {0} {1} in module {2} is not indirectly exported using 'requires transitive'

compiler.err.cant.inherit.from.sealed=\
    class is not allowed to extend sealed class: {0} \
    (as it is not listed in its 'permits' clause)

The (fairly harmless) result is that the single quote marks are missing from the compiler output.

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Generate any of the warnings or errors and notice they are missing single quote marks.

EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
B.java:1: error: class is not allowed to extend sealed class: A (as it is not listed in its 'permits' clause)

ACTUAL -
B.java:1: error: class is not allowed to extend sealed class: A (as it is not listed in its permits clause)


---------- BEGIN SOURCE ----------
$ cat > A.java
public sealed class A {
}

$ cat > B.java
public class B extends A {
}

$ javac A.java B.java
A.java:1: error: sealed class must have subclasses
public sealed class A {
              ^
B.java:1: error: class is not allowed to extend sealed class: A (as it is not listed in its permits clause)
public class B extends A {
       ^
2 errors

---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
diff --git a/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties b/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
index 13c3099c790..ef2409641e4 100644
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
@@ -3337,7 +3337,7 @@ compiler.err.dc.no.content=\
     no content
 
 compiler.err.dc.no.tag.name=\
-    no tag name after '@'
+    no tag name after ''@''
 
 compiler.err.dc.no.url=\
     no URL
@@ -3601,7 +3601,7 @@ compiler.warn.leaks.not.accessible.unexported=\
     {0} {1} in module {2} is not exported
 # 0: kind name, 1: symbol, 2: symbol
 compiler.warn.leaks.not.accessible.not.required.transitive=\
-    {0} {1} in module {2} is not indirectly exported using 'requires transitive'
+    {0} {1} in module {2} is not indirectly exported using ''requires transitive''
 # 0: kind name, 1: symbol, 2: symbol
 compiler.warn.leaks.not.accessible.unexported.qualified=\
     {0} {1} in module {2} may not be visible to all clients that require this module
@@ -3663,7 +3663,7 @@ compiler.err.sealed.class.must.have.subclasses=\
 # 0: symbol
 compiler.err.cant.inherit.from.sealed=\
     class is not allowed to extend sealed class: {0} \
-    (as it is not listed in its 'permits' clause)
+    (as it is not listed in its ''permits'' clause)
 
 # 0: symbol
 compiler.err.class.in.unnamed.module.cant.extend.sealed.in.diff.package=\


FREQUENCY : always


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299045,,,,,"2022-12-16 04:27;adev;A.java;https://bugs.openjdk.org/secure/attachment/102102/A.java","2022-12-16 04:27;adev;B.java;https://bugs.openjdk.org/secure/attachment/102103/B.java",,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zlzv:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-12-16 04:26;adev;I am really not sure if this is an issue. Actual usage involves the following:

To seal a class, add the sealed modifier to its declaration. Then, after any extends and implements clauses, add the permits clause. This clause specifies the classes that may extend the sealed class. 
https://docs.oracle.com/en/java/javase/15/language/sealed-classes-and-interfaces.html

In the given reproducer, A.java does not use permits clause.;;;","2022-12-16 07:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11712
Date: 2022-12-16 15:11:18 +0000;;;","2022-12-16 13:13;jjg;[~adev] This is a real issue; the example given is just to provoke specific error messages.;;;","2022-12-19 11:49;dukebot;Changeset: 40cb431f
Author:    Archie L. Cobbs <archie.cobbs@gmail.com>
Committer: Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-12-19 19:48:13 +0000
URL:       https://git.openjdk.org/jdk/commit/40cb431fee7c1f193b2f445c397c1444ed2e0015
;;;",,,,,,,,,,,,,,,,,
fix independence bug in create_pack logic in SuperWord::find_adjacent_refs,JDK-8298935,5089917,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,epeter,chagedorn,chagedorn,2022-12-16 03:04,2023-07-24 00:13,2023-10-01 09:56,2023-03-15 07:05,11,17,18,19,20,21,8,21,hotspot,,0,atr,c2,c2-superword,javafuzzer,oracle-triage-21,,,,,,,,,,,"Please change the generic bug title to something more descriptive once the root cause is known. 

The attached Java Fuzzer test results in a wrong execution with C2 compared to a run with the interpreter/C1:

To reproduce:
$ java -Xint Test.java > interpreter.log
$ java -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Test Test.java > c2.log
$ diff interpreter.log c2.log

$ java -Xint Reduced.java > interpreter.log
$ java -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Reduced Reduced.java > c2.log
$ diff interpreter.log c2.log

Output of Test.java diff:
0a1
> CompileCommand: compileonly Test.* bool compileonly = true
10c11
< vMeth_check_sum: 2660033801921391608
---
> vMeth_check_sum: 2660033801921192200
21c22
< vMeth_check_sum: 5320067603842783216
---
> vMeth_check_sum: 5320067603842332488
32c33
< vMeth_check_sum: 7980101405764174824
---
> vMeth_check_sum: 7980101405763472776
43c44
< vMeth_check_sum: -7806608866023985184
---
> vMeth_check_sum: -7806608866024938552
54c55
< vMeth_check_sum: -5146575064102593576
---
> vMeth_check_sum: -5146575064103798264
65c66
< vMeth_check_sum: -2486541262181201968
---
> vMeth_check_sum: -2486541262182657976
76c77
< vMeth_check_sum: 173492539740189640
---
> vMeth_check_sum: 173492539738482312
87c88
< vMeth_check_sum: 2833526341661581248
---
> vMeth_check_sum: 2833526341659622600
98c99
< vMeth_check_sum: 5493560143582972856
---
> vMeth_check_sum: 5493560143580771093
109c110
< vMeth_check_sum: 8153593945504364464
---
> vMeth_check_sum: 8153593945501923741
",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8303827,,,,,,,,,,JDK-8303466,JDK-8305055,,,,,,JDK-8303113,JDK-8312570,JDK-8304042,,,"2022-12-16 03:04;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/102100/FuzzerUtils.java","2023-01-23 02:07;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/102376/Reduced.java","2023-01-26 03:55;epeter;Reduced2.0_before.png;https://bugs.openjdk.org/secure/attachment/102420/Reduced2.0_before.png","2023-01-26 03:55;epeter;Reduced2.1_after.png;https://bugs.openjdk.org/secure/attachment/102419/Reduced2.1_after.png","2023-01-26 04:08;epeter;Reduced2.java;https://bugs.openjdk.org/secure/attachment/102423/Reduced2.java","2022-12-16 03:04;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/102101/Test.java","2023-03-20 07:17;epeter;generator.py;https://bugs.openjdk.org/secure/attachment/103063/generator.py","2023-01-26 03:56;epeter;verification_patch.diff;https://bugs.openjdk.org/secure/attachment/102421/verification_patch.diff",,,,,,,,,,,,,,,,,"0|i2znpf:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-16 03:06;chagedorn;ILW = Wrong execution of C2 compiled code, single Java Fuzzer testcase, use -XX:-UseSuperWord or disable compilation of affected method = HLM = P3;;;","2023-01-23 02:47;epeter;Thanks [~chagedorn] for reducing the test!

./java -Xint Reduced.java > interpreter.log
./java -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Reduced Reduced.java > c2.log
diff interpreter.log c2.log

1c1,2
< x -32958
---
> CompileCommand: compileonly Reduced.* bool compileonly = true
> x -37468;;;","2023-01-23 04:01;epeter;I reduced it a bit further down, and restricted comilation:

./java -Xint Reduced2.java
""sum 0""
./java -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Reduced2::test -XX:CompileCommand=printcompilation,Reduced2::* -XX:+PrintInlining Reduced2.java
""sum 60"";;;","2023-01-24 09:10;epeter;It looks like the pack algo created cyclic dependencies.
I am working on a verifier to catch cycles.;;;","2023-01-26 04:19;epeter;I summarize what I have found so far.

As far as I understand, at the time when we do SuperWord::schedule, there should be no cyclic dependencies between the packs (except for reduction packs, they have self-cycles).

I added some verification code between SuperWord::filter_packs and SuperWord::schedule, that builds a pack-dependency-graph, and detects cycles (see verification_patch.diff). It seems to pass for the tests we have from tier1-3, but triggers for Reduced2.java.

./java -XX:-TieredCompilation -Xcomp -XX:CompileOnly=Reduced2::test -XX:CompileCommand=printcompilation,Reduced2::* -XX:+PrintInlining -XX:+TraceSuperWord -XX:LoopMaxUnroll=5 Reduced2.java

(LoopMaxUnroll=5 is not necessary, but it makes the example a bitter smaller)
(see also Reduced2.0_before.png and Reduced2.1_after.png to see the graph before and after SuperWord)

When one turns on -XX:+TraceSuperWord, one can see how the packset develops.

This is the function that creates issues:

    static void test() {
        for (int i = 4; i < 100; i++) {
            int v = iArr[i];
            iArr[i + 2] = v; // write 2 ahead (relative offset)
            fArr[i] = v; // seems required, but leads to wrong result
        }
    }

Basically, we take values from the int-array, and write them back with a relative offset of 2, and also write them to the float-array. With an unrolling factor of 4, we see that we read the values from the int-array of positions [i, i+1, i+2, i+3] and write to positions [i+2, i+3, i+4, i+5] in the int-array. But when we sequentially execute the function, we see that when we read position i+2, it has already been overwritten when we read (i) and wrote it into (i+2). So there is a cyclic dependency in the LoadI and StoreI pack. However, we don't detect it because the relative offset is 2 (also works for relative offset of 3, and if we let it unroll to 16x, any relative offset from 2..15 works).

Sadly, we don't seem to pick up on that cyclic dependency. SuperWord::schedule assumes there is no cyclic dependency, and schedules all LoadI before the StoreI, leading to wrong results.

Analysis:
After SuperWord::find_adjacent_refs we find the pack-pairs for LoadI, StoreI and StoreF.
During SuperWord::extend_packlist we also get the ConvI2F pack-pairs.
In SuperWord::combine_packs, we combine the pairs to vectors of length 4 (one per StoreF, StoreI, LoadI, ConvI2F).
This seems to be a problematic step - before the pair-packs did not have any aliasing issues, as long as we had a relative offset of at least 2, pairs cannot detect that.
SuperWord::filter_packs does not remove any of the packs.

Modified test 1:
If I use relative offset 1, then the pair-packs detect that they are dependent on their peer in the pair -> pair is not formed. Should we not do this check when we combine the pairs?

Modified test 2
If I modify the function, and turn the float-array into a second int-array, then I can see that the StoreI for the first int-array does not generate the necessary 3 pack-pairs, but only 2 (the middle one is missing). That way, it is not made into a length 4 vector, and filtered out. That leads to everything else being filtered out - vectorisation fails as it should.

Current working hypothesis:
We need to check independence of the packs we combine in SuperWord::combine_packs. I have a verification-patch that checks this, and am now running testing to see if it passes on all other tests.;;;","2023-02-09 00:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12350
Date: 2023-01-31 18:26:52 +0000;;;","2023-03-15 07:05;dukebot;Changeset: 01e69205
Author:    Emanuel Peter <epeter@openjdk.org>
Date:      2023-03-15 14:02:45 +0000
URL:       https://git.openjdk.org/jdk/commit/01e6920581407bc3bd69db495fc694629ef01262
;;;",,,,,,,,,,,,,,
java/net/httpclient/CancelStreamedBodyTest.java fails with AssertionError due to Pending TCP connections: 1,JDK-8298931,5089913,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,dfuchs,dfuchs,2022-12-16 02:38,2023-08-04 12:48,2023-10-01 09:56,2022-12-20 03:07,21,,,,,,,21,core-libs,,0,httpclient,intermittent,tier2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2znoj:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-12-16 02:42;dfuchs;AssertionError: Found some outstanding operations or unreleased resources in HttpClientImpl(24) after 532 ms, waited 100 ms
test CancelStreamedBodyTest.testInputStream(""https://localhost:63265/https2/x/new"", false): failure
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(24) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
	at ReferenceTracker.check(ReferenceTracker.java:240)
	at ReferenceTracker.check(ReferenceTracker.java:103)
	at CancelStreamedBodyTest.testInputStream(CancelStreamedBodyTest.java:332)

[19 s, 15 ms, 406254 ns] Created 4 servers and 24 clients
Failed tests: 
	testInputStream[https://localhost:63265/https2/x/new, false]: java.lang.AssertionError: WARNING: tracker for HttpClientImpl(24) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
;;;","2022-12-19 07:26;dfuchs;Similar failure observed in java/net/httpclient/ISO_8859_1_Test.java:

The traces hint at the tracker not waiting long enough:

config ISO_8859_1_Test.teardown(): failure
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(5) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 1
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
WARNING: tracker for HttpClientImpl(6) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 6
	Pending Subscribers: 0
	Total pending operations: 0
	Facade referenced: false
	Selector alive: true
Found 0 client still active, with 0 operations still pending out of 6 tracked clients.
	at ReferenceTracker.check(ReferenceTracker.java:283)
	at ReferenceTracker.check(ReferenceTracker.java:113)
	at ISO_8859_1_Test.teardown(ISO_8859_1_Test.java:450)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:61)
	at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:366)
	at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:320)
	at org.testng.TestRunner.invokeTestConfigurations(TestRunner.java:617)
	at org.testng.TestRunner.afterRun(TestRunner.java:847)
	at org.testng.TestRunner.run(TestRunner.java:588)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

;;;","2022-12-19 07:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11725
Date: 2022-12-19 15:22:03 +0000;;;","2022-12-20 03:07;dukebot;Changeset: 5df00d34
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-12-20 11:05:38 +0000
URL:       https://git.openjdk.org/jdk/commit/5df00d34fe83648fb833dac738a45653865ca426
;;;",,,,,,,,,,,,,,,,,
Create a regression test for JDK-8139581,JDK-8298921,5089903,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smandalika,smandalika,smandalika,2022-12-16 01:42,2023-06-29 23:13,2023-10-01 09:56,2023-01-08 01:12,11,17,19,20,8,,,21,client-libs,,0,colocation,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,"Create a regression test for JDK-8139581

As described in JDK-8139581, when an AWT panel with AWT components, for example ""java.awt.Button"", is removed from AWT frame and added again to the same frame, then some AWT components contained in the panel are not drawn, however, clicking in the area of not drawn button leads to drawing of the button.

Test has a swing and awt component in a panel. It then removes and adds back the panel from/into the frame, to verify that they are redrawn properly.
 ",,,,,,,,,,JDK-8310119,JDK-8304189,JDK-8311143,JDK-8303806,JDK-8304583,JDK-8303807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2znmb:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-12-19 00:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11707
Date: 2022-12-16 10:21:35 +0000;;;","2023-01-08 01:12;dukebot;Changeset: 834e50e9
Author:    Srinivas Mandalika <smandalika@openjdk.org>
Committer: Sergey Bylokhov <serb@openjdk.org>
Date:      2023-01-08 09:08:04 +0000
URL:       https://git.openjdk.org/jdk/commit/834e50e9efc16effad7469cae99ab8f918a30e86
;;;","2023-06-13 11:26;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-06-13 11:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1429
Date: 2023-06-13 18:29:02 +0000;;;","2023-06-25 06:57;goetz;Fix request [11u]

I backport this for parity with 11.0.20-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nighlty testing passed;;;","2023-06-25 07:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/2001
Date: 2023-06-25 14:07:15 +0000;;;",,,,,,,,,,,,,,,
Add a regression test for JDK-8298520,JDK-8298919,5089900,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,thartmann,thartmann,thartmann,2022-12-16 01:12,2023-01-03 11:32,2023-10-01 09:56,2022-12-16 06:41,20,,,,,,,20,hotspot,,0,javafuzzer,noreg-self,oracle-triage-21,,,,,,,,,,,,,The fix for JDK-8298520 misses a regression test. In the meantime the JavaFuzzer found one. Let's add it.,,,,,,,,,,JDK-8299091,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298520,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2znln:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-16 01:20;thartmann;ILW = Missing test coverage, issue occurred quite frequent in the CI but was hard to reproduce, no workaround = LMH = P5;;;","2022-12-16 01:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/44
Date: 2022-12-16 09:36:44 +0000;;;","2022-12-16 06:41;dukebot;Changeset: 9e10f00e
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-12-16 14:39:48 +0000
URL:       https://git.openjdk.org/jdk20/commit/9e10f00edbf37e5e5db8efc4f1e0c2a76541aab2
;;;",,,,,,,,,,,,,,,,,,
nsk JDI tests pass if the debuggee failed to launch,JDK-8298907,5089851,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,lmesnik,cjplummer,cjplummer,2022-12-15 20:23,2023-02-06 10:39,2023-10-01 09:56,2023-01-30 09:34,21,,,,,,,21,core-svc,,0,noreg-self,,,,,,,,,,,,,,,"I've seen at least at least a few tests in vmTestbase/nsk/jdi that pass even if the debuggee fails to launch. I intentionally passed an illegal argument to the debuggee, and log for stepreq002 contained:

--> debugger:        test cancelled
TEST FAILED
#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: ##> debugger: ERROR: Exception : nsk.share.Failure: Caught exception while starting debugee VM:
# ERROR: 	com.sun.jdi.connect.VMStartException: VM initialization failed for: /scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/images/jdk/bin/java -XX:MaxRAMPercentage=1.78571 -Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/19/36/bundles/linux-x64/jdk-19_linux-x64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi_EventRequestManager_stepRequests_stepreq002/tmp -Dmain.wrapper=Virtual --enabl-preview -Djdk.defaultScheduler.parallelism=10 -Xdebug -Xrunjdwp:transport=dt_socket,address=localhost:38905,suspend=y,includevirtualthreads=y nsk.share.MainWrapper Virtual nsk.jdi.EventRequestManager.stepRequests.stepreq002a -vbs -verbose -arch=linux-x64 -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys=""-XX:MaxRAMPercentage=1.78571 -Dtest.boot.jdk=/scratch/cplummer/jib/install/jdk/19/36/bundles/linux-x64/jdk-19_linux-x64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/scratch/cplummer/ws/jdk/jdk.clean/build/linux-x64-debug/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdi_EventRequestManager_stepRequests_stepreq002/tmp -Dmain.wrapper=Virtual "" -pipe.port=41351
# ERROR: 	stdout: 
# ERROR: 	stderr: Unrecognized option: --enabl-preview
# ERROR: Error: Could not create the Java Virtual Machine.
# ERROR: Error: A fatal exception has occurred. Program will exit.

However, the test passed. This is the run() method for stepreq002 

    public static int run (String argv[], PrintStream out) {
        int exitCode = new stepreq002().runThis(argv, out);
        if (exitCode != PASSED) {
            System.out.println(""TEST FAILED"");
        }
        return testExitCode;
     }

In this failing test run the code returning to run() is:

        } catch ( Exception e ) {
            log3(""ERROR: Exception : "" + e);
            log2(""       test cancelled"");
            return FAILED;
        }

The problem is testExitCode never got set. I'm not so sure it should be in this case. I think we should just be returning exitCode from run(). Usually we return testExitCode to run(), so exitCode and testExitCode are the same. The problem is when we directly return FAILED instead of setting testExitCode to FAILED and then returning testExitCode.

This issue seems pervasive in the jdi tests. It could possibly be hiding a lot of test failures. This is especially true if you are experimenting with arguments passed to the debuggee like I was. I knew I was passing an invalid arg, yet the test was still passing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2znij:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2023-01-27 15:31;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12270
Date: 2023-01-27 23:24:43 +0000;;;","2023-01-30 09:34;dukebot;Changeset: a91143cc
Author:    Leonid Mesnik <lmesnik@openjdk.org>
Date:      2023-01-30 17:32:45 +0000
URL:       https://git.openjdk.org/jdk/commit/a91143cc93fe3810ecca4b04c9f81c1b967db0ed
;;;",,,,,,,,,,,,,,,,,,,
"Test ""java/awt/print/PrinterJob/ImagePrinting/PrintARGBImage.java"" fails because the frames of instruction does not display",JDK-8298905,5089847,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azvegint,imtloclnp,imtloclnp,2022-12-15 19:57,2023-08-16 23:11,2023-10-01 09:56,2022-12-17 05:33,20,,,,,,,20,client-libs,,0,imt,sn_133,testbug,ursqe-triaged,,,,,,,,,,,,"OS:
macOS

Environments:
Operating System: macOS 13.0
Language: English (Regional Setting: English)
Chip: Apple M1
E2219HN Display: 21,5-inch (1920 x 1080)
Macintosh HD: 245,11 GB
Memory: 16 GB

Reproducible: Always

Failed on Release/Build: JDK 20 b27 
Is it a Regression in JDK 20 release: YES, Not yet tested on JDK 20 earlier builds
[If Regression] Regression introduced in JDK 20 release/build: Not yet tested on JDK 20 earlier builds
Test result on the last GAed release for this train: Passed on JDK 19 b33
Is it a platform-specific issue: This issue happens on macOS. Will be check on Windows Linux later

General description of the problem:
The jtreg icon displays on the system tray. It is not clickable.

Affected tests:
java/awt/print/PrinterJob/ImagePrinting/PrintARGBImage.java
java/awt/print/PrinterJob/PageRangesDlgTest.java
javax/swing/ProgressMonitor/ProgressTest.java

Steps to reproduce:
1. Run command: bash /Users/mac13/Desktop/regression_jdk20/jtreg/bin/jtreg -testjdk:/Users/mac13/Desktop/regression_jdk20/jdk-20-b27/Contents/Home -exclude:/Users/mac13/Desktop/regression_jdk20/open/test/jdk/ProblemList.txt -verbose -gui -r results/report -w results/JTwork -manual /Users/mac13/Desktop/regression_jdk20/open/test/jdk/:jdk_desktop
2. Run test case: java/awt/print/PrinterJob/ImagePrinting/PrintARGBImage.java
3. Wait for test run to complete

Expected behavior:
Test case should display frames of instructions 
(See Screenshots from JDK 19)

Actual behavior:
Test case does not display frames of instructions
(see log files and video file attached)

Any non-default VM flags
-Dtest.vm.opts= \\
        -Dtest.tool.vm.opts= \\
        -Dtest.compiler.opts= \\
        -Dtest.java.opts= \\
        -Dtest.jdk=/Users/mac13/Desktop/regression_jdk20/jdk-20-b27/Contents/Home \\
        -Dcompile.jdk=/Users/mac13/Desktop/regression_jdk20/jdk-20-b27/Contents/Home \\
        -Dtest.timeout.factor=1.0 \\
        -Dtest.root=/Users/mac13/Desktop/regression_jdk20/open/test/jdk \\
        -Dtest.name=javax/swing/ProgressMonitor/ProgressTest.java \\
        -Dtest.file=/Users/mac13/Desktop/regression_jdk20/open/test/jdk/javax/swing/ProgressMonitor/ProgressTest.java \\
        -Dtest.src=/Users/mac13/Desktop/regression_jdk20/open/test/jdk/javax/swing/ProgressMonitor \\
        -Dtest.src.path=/Users/mac13/Desktop/regression_jdk20/open/test/jdk/javax/swing/ProgressMonitor:/Users/mac13/Desktop/regression_jdk20/open/test/jdk/java/awt/regtesthelpers \\
        -Dtest.classes=/Users/mac13/Desktop/regression_jdk20/results/JTwork/classes/javax/swing/ProgressMonitor/ProgressTest.d \\
        -Dtest.class.path=/Users/mac13/Desktop/regression_jdk20/results/JTwork/classes/javax/swing/ProgressMonitor/ProgressTest.d:/Users/mac13/Desktop/regression_jdk20/results/JTwork/classes/java/awt/regtesthelpers \\
        -Dtest.modules=java.desktop \\
        --add-modules java.desktop \\
        com.sun.javatest.regtest.agent.MainWrapper /Users/mac13/Desktop/regression_jdk20/results/JTwork/javax/swing/ProgressMonitor/ProgressTest.d/main.0.jta
result: Failed. Unexpected exit from test [exit code: 0]",,,,,,,,,,JDK-8314493,JDK-8299098,JDK-8313857,JDK-8313868,JDK-8314341,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-12-15 19:55;imtloclnp;ClippedImages.jtr;https://bugs.openjdk.org/secure/attachment/102077/ClippedImages.jtr","2022-12-15 19:56;imtloclnp;Failed_on_JDK_20.mov;https://bugs.openjdk.org/secure/attachment/102074/Failed_on_JDK_20.mov","2022-12-15 19:55;imtloclnp;ImageTypes.jtr;https://bugs.openjdk.org/secure/attachment/102076/ImageTypes.jtr","2022-12-15 19:56;imtloclnp;Passed_on_JDK_19.png;https://bugs.openjdk.org/secure/attachment/102073/Passed_on_JDK_19.png","2022-12-15 19:55;imtloclnp;PrintARGBImage.jtr;https://bugs.openjdk.org/secure/attachment/102075/PrintARGBImage.jtr",,,,,aarch64,,,,,,,,,other,,,,,,"0|i2znhn:",9223372036854775807,b29,,,,,,,,,,,"2022-12-16 05:51;azvegint;Test issue for all platforms.

The JDK-8290469 has changed the PassFailJFrame class and removed setVisible() call from createUI() (which is called from constructor)

https://github.com/openjdk/jdk/commit/568be58e8521e5e87baca1872ba8cc1941607bb7#diff-b1cbfd9042cb693b23dbead14bb6dfec13f738252c978551a983826453586410L173-L175

So the instruction window will not appear.

Can be fixed by adding 
PassFailJFrame.positionTestWindow(null, PassFailJFrame.Position.HORIZONTAL);;;;","2022-12-16 07:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/46
Date: 2022-12-16 14:55:13 +0000;;;","2022-12-17 05:33;dukebot;Changeset: d1026720
Author:    Alexander Zvegintsev <azvegint@openjdk.org>
Date:      2022-12-17 13:30:24 +0000
URL:       https://git.openjdk.org/jdk20/commit/d1026720d323d0acd9bd8d85d5caba7185107863
;;;",,,,,,,,,,,,,,,,,,
java/lang/Thread/virtual/stress/Skynet.java timed out and threw OutOfMemoryError,JDK-8298894,5089834,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,dcubed,dcubed,2022-12-15 16:05,2023-03-05 21:41,2023-10-01 09:56,2022-12-19 10:07,20,,,,,,,20,core-libs,,0,noreg-self,problemlist,tier8,zgc,,,,,,,,,,,,"The following test failed in the JDK20 CI:

java/lang/Thread/virtual/stress/Skynet.java#id1

Here's a snippet from the log file:

#section:main
----------messages:(8/440)----------
command: main -XX:+UnlockDiagnosticVMOptions -XX:+ZVerifyViews -XX:ZCollectionInterval=0.01 Skynet
reason: User specified action: run main/othervm/timeout=300 -XX:+UnlockDiagnosticVMOptions -XX:+ZVerifyViews -XX:ZCollectionInterval=0.01 Skynet 
started: Thu Dec 15 22:08:55 GMT 2022
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Thu Dec 15 23:02:39 GMT 2022
elapsed time (seconds): 3223.784
----------configuration:(0/0)----------
----------System.out:(1362/89123)----------
Result: 499999500000 in 35984 ms
Timeout refired 3000 times
Exception in VM (AttachListener::init) : 
java.lang.OutOfMemoryError: Java heap space
Exception in VM (AttachListener::init) : 
java.lang.OutOfMemoryError: Java heap space
Exception in VM (AttachListener::init) : 
java.lang.OutOfMemoryError: Java heap space
Exception in VM (AttachListener::init) : 
java.lang.OutOfMemoryError: Java heap space
Exception in VM (AttachListener::init) : 
java.lang.OutOfMemoryError: Java heap space
Exception in VM (AttachListener::init) : 
java.lang.OutOfMemoryError: Java heap space
Exception in VM (AttachListener::init) : 
java.lang.OutOfMemoryError: Java heap space
Exception in VM (AttachListener::init) : 
java.lang.OutOfMemoryError: Java heap space
Exception in VM (AttachListener::init) : 
java.lang.OutOfMemoryError: Java heap space
Exception in VM (AttachListener::init) : 
java.lang.OutOfMemoryError: Java heap space
Exception in VM (AttachListener::init) : 
java.lang.OutOfMemoryError: Java heap space
2022-12-15 23:00:15
Full thread dump Java HotSpot(TM) 64-Bit Server VM (20-ea+28-2221 compiled mode, sharing):

Threads class SMR info:
_java_thread_list=0x00007fec2cd32370, length=13, elements={
0x00007fec2d809610, 0x00007fec2d010210, 0x00007fec2f00a410, 0x00007fec2d82b610,
0x00007fec2f00b010, 0x00007fec2d81fe10, 0x00007fec2d82c610, 0x00007fec2d196410,
0x00007fec2e8a5610, 0x00007fec2d01c410, 0x00007fec2d828810, 0x00007fec2d829010,
0x00007fec2e812410
}
_to_delete_list=0x00007fec2ccd9610, length=14, elements={
0x00007fec2d809610, 0x00007fec2d010210, 0x00007fec2f00a410, 0x00007fec2d82b610,
0x00007fec2f00b010, 0x00007fec2d81fe10, 0x00007fec2d82c610, 0x00007fec2d196410,
0x00007fec2e8a5610, 0x00007fec2d01c410, 0x00007fec2d828810, 0x00007fec2d829010,
0x00007fec2e812410, 0x00007fec3200fa10
}

<snip>

""VM Periodic Task Thread"" os_prio=31 cpu=529.46ms elapsed=3073.43s tid=0x00007fec2ff33210 nid=39943 waiting on condition  

JNI global refs: 9, weak refs: 0

Heap
 ZHeap           used 768M, capacity 768M, max capacity 768M
 Metaspace       used 2951K, committed 3136K, reserved 1114112K
  class space    used 94K, committed 192K, reserved 1048576K

----------System.err:(23/2079)----------
Exception in thread """" java.lang.AssertionError
	at java.base/java.lang.VirtualThread.park(VirtualThread.java:571)
	at java.base/java.lang.System$2.parkVirtualThread(System.java:2630)
	at java.base/jdk.internal.misc.VirtualThreads.park(VirtualThreads.java:54)
	at java.base/java.util.concurrent.locks.LockSupport.park(LockSupport.java:369)
	at java.base/java.util.concurrent.SynchronousQueue$TransferStack$SNode.block(SynchronousQueue.java:288)
	at java.base/java.util.concurrent.ForkJoinPool.unmanagedBlock(ForkJoinPool.java:3780)
	at java.base/java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3725)
	at java.base/java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:397)
	at java.base/java.util.concurrent.SynchronousQueue.put(SynchronousQueue.java:839)
	at Skynet$Channel.send(Skynet.java:94)
	at Skynet.skynet(Skynet.java:68)
	at Skynet.lambda$skynet$1(Skynet.java:73)
	at java.base/java.lang.VirtualThread.run(VirtualThread.java:305)
	at java.base/java.lang.VirtualThread$VThreadContinuation.lambda$new$0(VirtualThread.java:177)
	at java.base/jdk.internal.vm.Continuation.enter0(Continuation.java:327)
	at java.base/jdk.internal.vm.Continuation.enter(Continuation.java:320)
Exception in thread """" java.lang.AssertionError
Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" java.lang.OutOfMemoryError: Java heap space
Exception in thread """" Exception in thread """" java.lang.AssertionError
Exception in thread """" Exception in thread """" Exception in thread """" java.lang.OutOfMemoryError: Java heap space
Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" java.lang.AssertionError
Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" Exception in thread """" 
----------rerun:(45/6511)*----------

<snip>

result: Error. Program `/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-20+28-2221/macosx-x64-debug.jdk/jdk-20/fastdebug/bin/java' timed out (timeout set to 3000000ms, elapsed time including timeout handling was 3223773ms).
",,,,,,,,,,JDK-8299102,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298594,,,,,,,,,JDK-8298594,JDK-8303635,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2zner:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-12-18 12:55;alanb;The Skynet test uses a SynchronousQueue as a channel, and SQ uses Thread.yield to avoid parking. The SQ implementation does need to be re-examined but I think the issue is that the change to use externalSubmit (JDK-8296896) means the test requires a bit more heap than it did previously. The test passes consistently with -Xmx1g but fails intermittently on a macOS debug build and -Xmx768m (the current default).

In passing, the assert triggered in park appears to be Continuation.yield failing with OOME, leading to an attempt to park on the carrier thread and an attempt to emit a JFR event. If the allocation of the event object fails then it will unwind without resetting the thread state. As it happens, Robbin spotted this issue very recently too.;;;","2022-12-19 02:04;eosterlund;Looking at the GC log when running this locally, it seems like the heap is indeed too tight. There is some garbage showing up, but very little worth reclaiming with the default ZFragmentationLimit. Sometimes it simply doesn't have enough memory, and FJ pool workers end up being hit by OOM, which inevitably can be problematic. I think you are right [~alanb], the test just needs a bit more memory.;;;","2022-12-19 07:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/54
Date: 2022-12-19 14:24:28 +0000;;;","2022-12-19 10:07;dukebot;Changeset: 2c69c41d
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-12-19 18:06:19 +0000
URL:       https://git.openjdk.org/jdk20/commit/2c69c41d48fddcbeb40a374f691b7e5faba3c99a
;;;","2022-12-22 15:21;dcubed;The fix for this bug is integrated in jdk-21+3-111.;;;",,,,,,,,,,,,,,,,
ProblemList vmTestbase/nsk/monitoring/MemoryPoolMBean/isCollectionUsageThresholdExceeded/isexceeded002/TestDescription.java with ZGC,JDK-8298891,5089831,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2022-12-15 14:57,2022-12-21 17:11,2023-10-01 09:56,2022-12-15 16:03,20,21,,,,,,20,core-svc,,0,tier8,zgc,,,,,,,,,,,,,,"In order to reduce noise in the JDK20 and JDK21 CIs, I'm ProblemListing:

vmTestbase/nsk/monitoring/MemoryPoolMBean/isCollectionUsageThresholdExceeded/isexceeded002/TestDescription.java

with ZGC.",,,,,,,,,,JDK-8298961,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zne3:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,,,"2022-12-15 14:59;dcubed;Here's the context diff for the proposed fix:

$ git diff
diff --git a/test/hotspot/jtreg/ProblemList-zgc.txt b/test/hotspot/jtreg/ProblemList-zgc.txt
index 887eb36e0d4..c15d5eccc42 100644
--- a/test/hotspot/jtreg/ProblemList-zgc.txt
+++ b/test/hotspot/jtreg/ProblemList-zgc.txt
@@ -86,3 +86,4 @@ vmTestbase/nsk/monitoring/stress/lowmem/lowmem036/TestDescription.java 8297979 g
 
 vmTestbase/nsk/jdi/ExceptionRequest/addInstanceFilter/instancefilter001/TestDescription.java 8298059 generic-x64
 vmTestbase/nsk/jdi/ExceptionRequest/addInstanceFilter/instancefilter004/TestDescription.java 8298059 generic-x64
+vmTestbase/nsk/monitoring/MemoryPoolMBean/isCollectionUsageThresholdExceeded/isexceeded002/TestDescription.java 8298302 generic-all;;;","2022-12-15 15:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/42
Date: 2022-12-15 23:13:30 +0000;;;","2022-12-15 16:03;dukebot;Changeset: c7d7e7e3
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-12-16 00:01:08 +0000
URL:       https://git.openjdk.org/jdk20/commit/c7d7e7e3be768b35447d65661ec328204aeb40e4
;;;",,,,,,,,,,,,,,,,,,
On the latest macOS+XCode the Robot API may report wrong colors,JDK-8298887,5089827,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,serb,serb,serb,2022-12-15 13:42,2023-08-07 14:55,2023-10-01 09:56,2022-12-21 23:21,11,17,20,21,,,,21,client-libs,,0,11-bp,17-bp,20-bp,8-bp,amazon-interest,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,,,,"After upgrading to the latest xcode(14.2)+macOS(12.6.1 or 13.0.1) I have found that some of the robot related tests start to fail.

The root cause is here:
https://github.com/openjdk/jdk/blob/master/src/java.desktop/macosx/native/libawt_lwawt/awt/CRobot.m#L352

Note that we would like to get from native kCGBitmapByteOrder32Host and kCGImageAlphaPremultipliedFirst
    CGContextRef jPicContextRef = CGBitmapContextCreate(
                                            jPixelData,
                                            picWidth, picHeight,
                                            8, picWidth * sizeof(jint),
                                            picColorSpace,
                                            kCGBitmapByteOrder32Host |
                                            kCGImageAlphaPremultipliedFirst);

But kCGBitmapByteOrder32Host might not be what we expected in the java.
And looks like the kCGImageAlphaPremultipliedFirst is always wrong:
https://github.com/openjdk/jdk/blob/master/src/java.desktop/share/classes/java/awt/Robot.java#L521",,,,,,,,,,JDK-8308062,JDK-8307052,JDK-8307004,JDK-8307552,JDK-8306479,JDK-8307763,JDK-8306478,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2znd7:",9223372036854775807,b04,,,,,,,,,,,"2022-12-15 13:44;serb;platform to platform regression.;;;","2022-12-15 16:08;serb;The culprit is the XCode 14.2;;;","2022-12-19 21:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11733
Date: 2022-12-19 21:48:54 +0000;;;","2022-12-21 23:21;dukebot;Changeset: 50120396
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2022-12-22 07:20:06 +0000
URL:       https://git.openjdk.org/jdk/commit/50120396b6cca1219fb5dd42a11e4b29b79bd3bd
;;;","2023-04-05 00:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/47
Date: 2023-04-04 03:32:15 +0000;;;","2023-04-13 01:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1233
Date: 2023-04-04 03:57:05 +0000;;;","2023-04-13 16:52;serb;Fix request (20u)

Clean backport. The patch needed to support XCode 14.2+.
The fix was verified by the test. all other ""java_desktop"" tests are green, tested with XCode 14.3 and XCode 12.5.1.

Review 20u: https://github.com/openjdk/jdk20u/pull/47;;;","2023-04-13 16:55;serb;Fix request (17u)

The patch needed to support XCode 14.2+.
Mostly clean backport. The update of the WindowAlphaCompositeTest is skipped since the JDK-8266079 is not present in jdk17u, and I do not plan to backport it now since it causes some regressions.

The fix was verified by the test. all other ""java_desktop"" tests are green, tested with XCode 14.3 and XCode 12.5.1.

Review 17u-dev: https://github.com/openjdk/jdk17u-dev/pull/1233;;;","2023-04-20 15:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1822
Date: 2023-04-04 03:59:59 +0000;;;","2023-05-03 23:22;serb;Fix request (11u)

The patch needed to support XCode 14.2+.
Mostly clean backport. The update of the WindowAlphaCompositeTest is skipped since the JDK-8266079 is not present in jdk11u, and I do not plan to backport it now since it causes some regressions.

The fix was verified by the test. all other ""java_desktop"" tests are green, tested with XCode 14.3 and XCode 12.5.1.

Review 11u-dev: https://github.com/openjdk/jdk11u-dev/pull/1822;;;",,,,,,,,,,,
VectorLogicalOpIdentityTest.java IR test incorrectly use avx3 instead of avx512,JDK-8298880,5089809,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,dfenacci,kvn,kvn,2022-12-15 09:35,2023-02-14 06:56,2023-10-01 09:56,2023-02-02 06:34,20,21,,,,,,21,hotspot,,0,c2-vector,noreg-self,oracle-triage-21,starter,,,,,,,,,,,,"JDK-8292675 added some subtests to compiler/vectorapi/VectorLogicalOpIdentityTest.java test and incorrectly use avx3 cpu feature for filter `applyIfCPUFeatureOr`. There is no avx3 on x86. The name is used internally in VM for all avx512 features.

The test should be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8302459,,,,,,,JDK-8292675,,,,,,,,,,,,,,x86,,,,,,,,,,,,,,,"0|i2zn97:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-16 02:05;chagedorn;ILW = Wrongly used avx3 instead of avx512 to filter IR matching of tests, single test, no workaround = LLH = P5;;;","2023-02-01 01:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12358
Date: 2023-02-01 07:45:24 +0000;;;","2023-02-02 06:34;dukebot;Changeset: 5b1584b9
Author:    Damon Fenacci <damon.fenacci@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-02-02 14:33:28 +0000
URL:       https://git.openjdk.org/jdk/commit/5b1584b92c9a469dd5928ae9a795d5e823050229
;;;",,,,,,,,,,,,,,,,,,
Swing applications do not get repainted coming out of sleep on Windows 10,JDK-8298876,5089804,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,psadhukhan,angorya,angorya,2022-12-15 08:07,2023-01-11 23:03,2023-10-01 09:56,2023-01-09 02:17,19,,,,,,,21,client-libs,,0,regression,regression_8275715,sn_134,sn_135,windows,,,,,,,,,,,"Upgraded to java 19 on Windows 10.

Noticed that after coming out of sleep mode (overnight), some of my Swing applications do not get repainted, showing empty panels instead (screenshots to follow).

Dragging other windows over the affected applications produce no change, but minimizing and subsequent restore does help.

works correctly -
jdk-11.0.16.1
jdk-17.0.5
jdk-18.0.2.1

fails -
jdk-19.0.1
jdk-20",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299436,,,,,,,JDK-8275715,,,,,"2022-12-15 08:34;angorya;after mouse over.png;https://bugs.openjdk.org/secure/attachment/102060/after+mouse+over.png","2022-12-15 08:15;angorya;after.png;https://bugs.openjdk.org/secure/attachment/102058/after.png","2022-12-15 08:15;angorya;before.png;https://bugs.openjdk.org/secure/attachment/102059/before.png",,,,,,,x86,,,,,,,,,windows_10,,,,,,"0|i2zn83:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-12-15 09:58;angorya;system/driver details:

Processor    Intel(R) Xeon(R) CPU           X5650  @ 2.67GHz   2.66 GHz  (2 processors)
System type    64-bit operating system, x64-based processor
Pen and touch    No pen or touch input is available for this display

Edition    Windows 10 Pro
Version    20H2
Installed on    ‎2021-‎06-‎22
OS build    19042.1052
Experience    Windows Feature Experience Pack 120.2212.2020.0

NVidia GeForce GTX760
driver NVIDIA
driver date 2020-09-30
driver version 27.21.14.5671;;;","2022-12-15 13:26;prr;I have Windows 11 with an Nvidia Quadro P2000.
I launched SwingSet2 with a recent JDK mainline build, then put my PC to sleep
Start Menu->Power->Sleep

On rewaking the PC SwingSet2 repainted just fine.  So I cannot reproduce this.;;;","2022-12-15 14:05;angorya;edit: even a short sleep results in an issue on my machine.  I will test this with java 11 and 17 later.;;;","2022-12-19 08:47;angorya;Tried with several versions of oracle jdk:

works -
jdk-11.0.16.1
jdk-17.0.5
jdk-18.0.2.1

fails -
jdk-19.0.1
jdk-20;;;","2022-12-19 08:58;prr;In that case (although I can't reproduce) I suspect
https://bugs.openjdk.org/browse/JDK-8275715 : D3D pipeline processes multiple PaintEvent at initial drawing

That fix reduces the number of repaints with D3D which could well be relevant.

Can you run the app with -Dsun.java2d.d3d=false and see if the problem goes away - or persists ? ;;;","2022-12-19 09:14;angorya;Specifying `-Dsun.java2d.d3d=false` fixes the issue in both jdk-19.0.1 and jdk-20.;;;","2022-12-19 09:40;prr;So it is probably the above fix.
But muddying the waters a little, JDK 19 also contained an upgrade of Visual Studio used to build :
https://bugs.openjdk.org/browse/JDK-8283723 
Such updates have been known to have unexpected side effects discovered much later ..
But the compiler update was also backported to 17.0.5 .. and you report no problems there, so it seems the D3D fix is favourite.;;;","2022-12-19 09:44;angorya;I think you are right: JDK-8275715 looks like a culprit, considering the fact that turning off D3D fixed the issue.  Looking at the problem statement, I could not figure out the actual problem or performance issue that the code change was supposed to fix.

Would it be possible to revert JDK-8275715 ?;;;","2022-12-19 09:48;prr;That's up to the owner of this bug to decide the best course of action.
FWIW the test provided with that fix sometimes failed and maybe problem listed .. suggesting that the fix may not have been the best anyway.;;;","2022-12-19 11:03;angorya;I would rather see it reverted, since the fix created a regression.

Is the problem limited to Windows, or a subset of video cards on Windows?;;;","2022-12-19 11:14;prr;Its a D3D issue, so that means Windows. 
We don't do anything video card specific so I don't know about that although I could not reproduce it so perhaps.
But I don't think that will help as any kind of predictor of which cards are affected.;;;","2023-01-02 00:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11808
Date: 2023-01-02 08:24:44 +0000;;;","2023-01-05 02:05;psadhukhan;[~angorya] Please mention in the PR if the revert of  JDK-8275715 fixes your issue..;;;","2023-01-05 08:00;angorya;[~psadhukhan]:
could you please provide a link to download the windows jdk zip with the fix?;;;","2023-01-05 09:25;angorya;the issue does not occur when tested with the mach5 build you provided [~psadhukhan]
thanks!;;;","2023-01-09 02:17;dukebot;Changeset: 4072412c
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2023-01-09 10:14:06 +0000
URL:       https://git.openjdk.org/jdk/commit/4072412c1fd1e28febff71c6b37a9813f22bdc4b
;;;",,,,,
"A module requiring ""java.base"" with flags ACC_SYNTHETIC should be rejected",JDK-8298875,5089802,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,alanb,pgundarlahal,pgundarlahal,2022-12-15 07:37,2023-01-24 00:49,2023-10-01 09:56,2022-12-26 23:51,20,9,,,,,,21,core-libs,,0,conformance,tck-exclude-20,,,,,,,,,,,,,,"mod/pkg/X.java ->
public class X {
    public static void main(String[] args) {
        System.out.println(""Module mod's pkg.X.main"");
    }
}

mod/module-info.java ->
module mod {
}

javac -d mod/module-info.java mod/pkg/X.java
java -p mod -m mod/pkg.X --> ""Module mod's pkg.X.main"" (Works as expected)

Now try changing the mod's requires flag:
java --jar <asmtools.jar> jdec mod/module-info.class > mod/module-info.jcod
Modify from 'requires' table (jcod line:42) 0x8000 to 0x1000 (ACC_MANDATED to ACC_SYNTHETIC)
Recompile jcod to classfile:
java --jar <asmtools.jar> jcoder mod/module-info.jcod
cp module-info.class mod/

Now that module 'mod' has requires table as ""java.base"" and access flag as ACC_SYNTHETIC(0x1000). Below command is not expected to run successfully
java -p mod -m mod/pkg.X

As per jvms 4.7.25. The Module Attribute (assertion id: jvms-4.7.25-300-D-G.1-B), above illustrated example should throw error.
 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299769,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zn7n:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@34132c1c,,,,,,,,,"2022-12-15 08:34;alanb;An oversight in JDK 9, the requires_flags for java.base can't have ACC_SYNTHETIC set.;;;","2022-12-18 23:51;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11714
Date: 2022-12-16 19:30:24 +0000;;;","2022-12-26 23:51;dukebot;Changeset: 11fd651a
Author:    Alan Bateman <alanb@openjdk.org>
Date:      2022-12-27 07:51:04 +0000
URL:       https://git.openjdk.org/jdk/commit/11fd651ab1820770e3c65cd49589416098987a87
;;;",,,,,,,,,,,,,,,,,,
Update TestAllSuites.java for TLS v1.2 and 1.3,JDK-8298874,5089800,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdonovan,mdonovan,mdonovan,2022-12-15 07:11,2023-08-01 00:09,2023-10-01 09:56,2023-02-01 09:22,,,,,,,,21,security-libs,,0,noreg-self,problemlist,,,,,,,,,,,,,,"This test is very out of date. Add support for TLS versions 1.2 and 1.3.


javax.net.ssl.SSLHandshakeException: No appropriate protocol (protocol is disabled or cipher suites are inappropriate)
	at java.base/sun.security.ssl.HandshakeContext.<init>(HandshakeContext.java:162)
	at java.base/sun.security.ssl.ClientHandshakeContext.<init>(ClientHandshakeContext.java:103)
	at java.base/sun.security.ssl.TransportContext.kickstart(TransportContext.java:240)
	at java.base/sun.security.ssl.SSLEngineImpl.writeRecord(SSLEngineImpl.java:185)
	at java.base/sun.security.ssl.SSLEngineImpl.wrap(SSLEngineImpl.java:146)
	at java.base/sun.security.ssl.SSLEngineImpl.wrap(SSLEngineImpl.java:123)
	at java.base/javax.net.ssl.SSLEngine.wrap(SSLEngine.java:524)
	at TestAllSuites.runTest(TestAllSuites.java:153)
	at TestAllSuites.test(TestAllSuites.java:99)
	at TestAllSuites.main(TestAllSuites.java:251)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)",,,,,,,,,,JDK-8313490,JDK-8313180,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249826,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zn77:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-12-23 09:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11780
Date: 2022-12-23 17:08:03 +0000;;;","2023-02-01 09:22;dukebot;Changeset: 3361a26d
Author:    Matthew Donovan <matthew.p.donovan@oracle.com>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2023-02-01 17:20:24 +0000
URL:       https://git.openjdk.org/jdk/commit/3361a26df4dafa134181263cc5c81bda6ba8d21e
;;;",,,,,,,,,,,,,,,,,,,
Update IllegalRecordVersion.java for changes to TLS implementation,JDK-8298873,5089799,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdonovan,mdonovan,mdonovan,2022-12-15 07:05,2023-09-29 03:41,2023-10-01 09:56,2023-01-26 10:39,,,,,,,,21,security-libs,,0,jdk17u-fix-request,noreg-self,problemlist,,,,,,,,,,,,,"This test fails due to changes in the underlying TLS implementation. Verify the test is still valid and update accordingly.

command: main IllegalRecordVersion
reason: User specified action: run main/othervm IllegalRecordVersion 
started: Thu Dec 15 10:02:18 EST 2022
Mode: othervm [/othervm specified]
finished: Thu Dec 15 10:02:19 EST 2022
elapsed time (seconds): 0.181
----------configuration:(0/0)----------
----------System.out:(3/161)----------
client hello (record version(0xa9, 0xa2))
Client wrap result: Status = OK HandshakeStatus = NEED_UNWRAP
bytesConsumed = 0 bytesProduced = 440 sequenceNumber = 0
----------System.err:(11/696)----------
java.lang.Exception: Cannot catch the unsupported record version issue
	at IllegalRecordVersion.main(IllegalRecordVersion.java:70)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)",,,,,,,,,,JDK-8313184,JDK-8313492,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8299870,JDK-8301189,,,,,,JDK-8249826,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zn6z:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-01-10 14:41;rhalade;JDK-8299870 addresses the bug found with this test so this fix will address test fix as well.;;;","2023-01-26 10:14;rhalade;Re-opening as the product fix is closed as not an issue.;;;","2023-01-26 10:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11929
Date: 2023-01-10 18:59:30 +0000;;;","2023-01-26 10:39;dukebot;Changeset: fc26d3e5
Author:    Matthew Donovan <matthew.p.donovan@oracle.com>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2023-01-26 18:36:29 +0000
URL:       https://git.openjdk.org/jdk/commit/fc26d3e5770ca3440105d3904a6e4af9af4860fa
;;;","2023-09-28 05:39;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport, PR includes follow-up JDK-8301189, clean too. Marked clean.
Test passes. SAP nighlty testing passed.;;;","2023-09-28 07:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1814
Date: 2023-09-28 12:39:12 +0000;;;",,,,,,,,,,,,,,,
Update CheckStatus.java for changes to TLS implementation,JDK-8298872,5089798,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdonovan,mdonovan,mdonovan,2022-12-15 07:00,2023-08-01 00:12,2023-10-01 09:56,2023-02-03 11:56,,,,,,,,21,security-libs,,0,noreg-self,problemlist,,,,,,,,,,,,,,"This test fails due to changes in the underlying implementation. Verify the test is still valid and update accordingly.

ommand: main -Djsse.enableCBCProtection=false CheckStatus
reason: User specified action: run main/othervm -Djsse.enableCBCProtection=false CheckStatus 
started: Thu Dec 15 09:57:44 EST 2022
Mode: othervm [/othervm specified]
finished: Thu Dec 15 09:57:44 EST 2022
elapsed time (seconds): 0.172
----------configuration:(0/0)----------
----------System.out:(23/601)----------
AppOut1 = java.nio.HeapByteBuffer[pos=0 lim=26 cap=26]
AppOut2 = java.nio.HeapByteBuffer[pos=0 lim=29 cap=29]

================
unexpected empty unwrap
======================================
client hello
running delegated task...
Check for unwrap when wrap needed
======================================
ServerHello
running delegated task...
======================================
Key Exchange
running delegated task...
======================================
CCS
======================================
Finished
======================================
CCS
======================================
FINISHED
----------System.err:(13/781)----------
java.lang.Exception: Unexpected hsStatus: need = FINISHED got = NEED_WRAP
	at CheckStatus.checkResult(CheckStatus.java:101)
	at CheckStatus.test(CheckStatus.java:245)
	at CheckStatus.main(CheckStatus.java:620)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)",,,,,,,,,,JDK-8313186,JDK-8313496,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249826,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zn6r:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-01-05 10:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11857
Date: 2023-01-05 01:18:55 +0000;;;","2023-02-03 11:56;dukebot;Changeset: e7247b10
Author:    Matthew Donovan <matthew.p.donovan@oracle.com>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2023-02-03 19:55:54 +0000
URL:       https://git.openjdk.org/jdk/commit/e7247b10ccd2bf1ad6809395a1b63aa5046d5b1d
;;;",,,,,,,,,,,,,,,,,,,
Update ConnectionTest.java for changes to TLS implementation,JDK-8298869,5089796,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdonovan,mdonovan,mdonovan,2022-12-15 06:54,2023-09-29 03:08,2023-10-01 09:56,2023-01-26 13:38,,,,,,,,21,security-libs,,0,jdk17u-fix-request,noreg-self,problemlist,,,,,,,,,,,,,"This test fails due to changes in the underlying implementation. Verify the test is still valid and update accordingly.

Doing close
===========
LAST UNWRAP
unwrap1 = Status = BUFFER_UNDERFLOW HandshakeStatus = NEED_WRAP
bytesConsumed = 0 bytesProduced = 0
unwrap2 = Status = BUFFER_UNDERFLOW HandshakeStatus = NEED_WRAP
bytesConsumed = 0 bytesProduced = 0
LAST WRAP
----------System.err:(13/826)----------
java.lang.Exception: Unexpected hsStatus: need = NEED_UNWRAP got = NOT_HANDSHAKING
	at ConnectionTest.checkResult(ConnectionTest.java:154)
	at ConnectionTest.test(ConnectionTest.java:551)
	at ConnectionTest.main(ConnectionTest.java:682)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Exception: Unexpected hsStatus: need = NEED_UNWRAP got = NOT_HANDSHAKING
JavaTest Message: shutting down test",,,,,,,,,,JDK-8313506,JDK-8313234,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249826,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zn6b:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-01-06 04:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11871
Date: 2023-01-05 21:55:42 +0000;;;","2023-01-26 13:38;dukebot;Changeset: d6007a35
Author:    Matthew Donovan <matthew.p.donovan@oracle.com>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2023-01-26 21:36:36 +0000
URL:       https://git.openjdk.org/jdk/commit/d6007a356f8081290cc745481af160a4cad8a9bb
;;;","2023-09-28 05:49;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport.
Test passes.SAP nightly testing passed.;;;","2023-09-28 06:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1815
Date: 2023-09-28 12:54:12 +0000;;;",,,,,,,,,,,,,,,,,
Update EngineCloseOnAlert.java for changes to TLS implementation,JDK-8298868,5089795,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdonovan,mdonovan,mdonovan,2022-12-15 06:26,2023-08-01 00:16,2023-10-01 09:56,2023-02-09 10:22,,,,,,,,21,security-libs,,0,noreg-self,problemlist,,,,,,,,,,,,,,"This test fails due to changes in the underlying implementation. Verify the test is still valid and and update accordingly.

Test failures:

=======================================
Test: Client receives alert from server
=======================================
Client handshake status: NEED_UNWRAP, inDone = false, outDone = false
Client-to-Server:
-----------------
16:03:03:01:B7:01:00:01:B3:03:03:1F:38:63:41:5A
C7:E1:3E:71:B1:AF:86:EE:4B:CE:7B:50:15:94:C0:67
3B:CD:27:AC:A8:A0:B5:2E:69:A2:A7:20:4C:98:D8:6F
B2:8C:3D:5B:37:DB:DB:CD:15:09:FC:70:F5:F8:71:FF
6B:FA:63:1D:16:5F:85:86:A5:B5:9A:AC:00:4A:13:02
13:01:13:03:C0:2C:C0:2B:CC:A9:C0:30:CC:A8:C0:2F
00:9F:CC:AA:00:A3:00:9E:00:A2:C0:24:C0:28:C0:23
C0:27:00:6B:00:6A:00:67:00:40:C0:0A:C0:14:C0:09
C0:13:00:39:00:38:00:33:00:32:00:9D:00:9C:00:3D
00:3C:00:35:00:2F:00:FF:01:00:01:20:00:05:00:05
01:00:00:00:00:00:0A:00:16:00:14:00:1D:00:17:00
18:00:19:00:1E:01:00:01:01:01:02:01:03:01:04:00
0B:00:02:01:00:00:11:00:09:00:07:02:00:04:00:00
00:00:00:17:00:00:00:23:00:00:00:0D:00:2C:00:2A
04:03:05:03:06:03:08:07:08:08:08:04:08:05:08:06
08:09:08:0A:08:0B:04:01:05:01:06:01:04:02:03:03
03:01:03:02:02:03:02:01:02:02:00:2B:00:09:08:03
04:03:03:03:02:03:01:00:2D:00:02:01:01:00:32:00
2C:00:2A:04:03:05:03:06:03:08:07:08:08:08:04:08
05:08:06:08:09:08:0A:08:0B:04:01:05:01:06:01:04
02:03:03:03:01:03:02:02:03:02:01:02:02:00:33:00
6B:00:69:00:1D:00:20:12:83:DD:C0:21:7C:65:EE:13
3C:C6:A5:05:9B:D5:0E:0D:91:8C:B9:93:CB:A5:4F:7B
CA:89:60:8B:FC:68:1C:00:17:00:41:04:1F:09:66:AE
72:20:38:03:68:97:10:C5:7B:ED:1A:E6:A2:C9:70:D7
A8:F3:9B:87:EE:F8:B4:37:90:9D:1E:70:7A:F8:38:A9
36:F3:91:27:0F:6D:30:41:99:5D:99:7A:B7:94:58:FF
C7:57:16:18:56:77:95:41:2A:07:F2:53
Server handshake status: NEED_TASK, inDone = false, outDone = false
Server result: Status = OK HandshakeStatus = NEED_TASK
bytesConsumed = 444 bytesProduced = 0
    running delegated task...
    new HandshakeStatus: NEED_WRAP
Server handshake status: NEED_WRAP, inDone = true, outDone = false
Server throws exception: javax.net.ssl.SSLHandshakeException: No available authentication scheme
Server engine state: isInboundDone = true, isOutboundDone = false, handshake status = NEED_WRAP
Server handshake status: NEED_WRAP, inDone = true, outDone = false
Server result (wrap after exception): Status = OK HandshakeStatus = NEED_WRAP
bytesConsumed = 0 bytesProduced = 127 sequenceNumber = 0
Server engine closure state: isInboundDone=true, isOutboundDone=false
Exception in test:
java.lang.RuntimeException: Error: engine not in expected state
Expected: state = NEED_UNWRAP, inDone = true, outDone = true
Actual: state = NEED_WRAP, inDone = true, outDone = false
java.lang.RuntimeException: Error: engine not in expected state
Expected: state = NEED_UNWRAP, inDone = true, outDone = true
Actual: state = NEED_WRAP, inDone = true, outDone = false
    at EngineCloseOnAlert.checkEngineState(EngineCloseOnAlert.java:368)
    at EngineCloseOnAlert$2.runTest(EngineCloseOnAlert.java:162)
    at EngineCloseOnAlert.main(EngineCloseOnAlert.java:82)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
    at java.base/java.lang.Thread.run(Thread.java:1623)

=======================================
Test: Server receives alert from client
=======================================
Client handshake status: NOT_HANDSHAKING, inDone = false, outDone = false
Client handshake status: NEED_UNWRAP, inDone = false, outDone = false
Client-to-Server:
-----------------
16:03:03:00:B9:01:00:00:B5:03:03:80:20:E9:05:F7
E5:F6:93:BB:32:D9:39:9F:04:ED:B1:C7:30:B2:C1:17
72:1F:19:90:1A:88:7F:7A:EB:8A:65:00:00:02:00:2F
01:00:00:8A:00:05:00:05:01:00:00:00:00:00:11:00
09:00:07:02:00:04:00:00:00:00:00:17:00:00:00:23
00:00:00:0D:00:2C:00:2A:04:03:05:03:06:03:08:07
08:08:08:04:08:05:08:06:08:09:08:0A:08:0B:04:01
05:01:06:01:04:02:03:03:03:01:03:02:02:03:02:01
02:02:00:2B:00:03:02:03:03:00:32:00:2C:00:2A:04
03:05:03:06:03:08:07:08:08:08:04:08:05:08:06:08
09:08:0A:08:0B:04:01:05:01:06:01:04:02:03:03:03
01:03:02:02:03:02:01:02:02:FF:01:00:01:00
Server handshake status: NEED_TASK, inDone = false, outDone = false
    running delegated task...
    new HandshakeStatus: NEED_WRAP
Exception in test:
java.lang.RuntimeException: Error: engine not in expected state
Expected: state = NEED_WRAP, inDone = false, outDone = false
Actual: state = NEED_WRAP, inDone = true, outDone = false
java.lang.RuntimeException: Error: engine not in expected state
Expected: state = NEED_WRAP, inDone = false, outDone = false
Actual: state = NEED_WRAP, inDone = true, outDone = false
    at EngineCloseOnAlert.checkEngineState(EngineCloseOnAlert.java:368)
    at EngineCloseOnAlert$3.runTest(EngineCloseOnAlert.java:228)
    at EngineCloseOnAlert.main(EngineCloseOnAlert.java:82)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
    at java.base/java.lang.Thread.run(Thread.java:1623)
Total tests: 2, passed: 0, failed: 2
----------System.err:(11/641)----------
java.lang.RuntimeException: One or more tests failed.
    at EngineCloseOnAlert.main(EngineCloseOnAlert.java:93)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
    at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException: One or more tests failed.
JavaTest Message: shutting down test",,,,,,,,,,JDK-8313225,JDK-8313503,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249826,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zn63:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2023-01-09 06:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11903
Date: 2023-01-09 12:19:27 +0000;;;","2023-02-09 10:22;dukebot;Changeset: 7fd440d9
Author:    Matthew Donovan <matthew.p.donovan@oracle.com>
Committer: Rajan Halade <rhalade@openjdk.org>
Date:      2023-02-09 18:21:38 +0000
URL:       https://git.openjdk.org/jdk/commit/7fd440d97c2bb7b7a6cd7094e7339d65d23e7815
;;;",,,,,,,,,,,,,,,,,,,
Basics.java fails with SSL handshake exception,JDK-8298867,5089792,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mdonovan,mdonovan,mdonovan,2022-12-15 05:52,2023-09-28 07:06,2023-10-01 09:56,2023-01-16 20:43,,,,,,,,21,security-libs,,0,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,problemlist,,,,,,,,,,,,"This test needs to either be updated for TLSv1.3 or updated to explicitly specify TLSv1.2 cipher suite and protocol.

javax.net.ssl.SSLHandshakeException: No appropriate protocol (protocol is disabled or cipher suites are inappropriate)
    at java.base/sun.security.ssl.HandshakeContext.<init>(HandshakeContext.java:163)
    at java.base/sun.security.ssl.ClientHandshakeContext.<init>(ClientHandshakeContext.java:103)
    at java.base/sun.security.ssl.TransportContext.kickstart(TransportContext.java:240)
    at java.base/sun.security.ssl.SSLEngineImpl.writeRecord(SSLEngineImpl.java:185)
    at java.base/sun.security.ssl.SSLEngineImpl.wrap(SSLEngineImpl.java:146)
    at java.base/sun.security.ssl.SSLEngineImpl.wrap(SSLEngineImpl.java:123)
    at java.base/javax.net.ssl.SSLEngine.wrap(SSLEngine.java:524)
    at Basics.main(Basics.java:172)
    at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
    at java.base/java.lang.reflect.Method.invoke(Method.java:578)
    at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
    at java.base/java.lang.Thread.run(Thread.java:1599)",,,,,,,,,,JDK-8317251,JDK-8313489,JDK-8313171,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8249826,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zn5f:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,,,"2022-12-21 15:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11760
Date: 2022-12-21 23:42:48 +0000;;;","2023-01-16 20:43;dukebot;Changeset: 06f9374e
Author:    Matthew Donovan <matthew.p.donovan@oracle.com>
Committer: Julian Waters <jwaters@openjdk.org>
Date:      2023-01-17 04:41:55 +0000
URL:       https://git.openjdk.org/jdk/commit/06f9374e0c59fa666e6f120749d9170f65fadc4f
;;;","2023-09-27 01:36;goetz;ix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport.
Test passes. SAP nightly testing passed.;;;","2023-09-27 01:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1800
Date: 2023-09-27 08:39:03 +0000;;;",,,,,,,,,,,,,,,,,
Excessive memory allocation in CipherOutputStream AEAD decryption,JDK-8298865,5089790,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,djelinski,djelinski,djelinski,2022-12-15 05:41,2023-05-25 07:16,2023-10-01 09:56,2022-12-20 02:29,17,20,21,,,,,21,security-libs,,0,amazon-interest,noreg-perf,,,,,,,,,,,,,,"When CipherOutputStream is used to decrypt data compressed with AEAD cipher like AES/GCM, all data written to the stream is buffered until the stream is closed. 

During every write operation, a new buffer large enough to hold the entire decrypted data is allocated. If the writes are frequent, this puts GC under pressure.

This issue was noticed while investigating JDK-8298249, which reported a similar case with CipherInputStream.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zn4z:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@35a9b277,,,,,,,,,"2022-12-15 06:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11693
Date: 2022-12-15 14:05:43 +0000;;;","2022-12-20 02:29;dukebot;Changeset: 36de61c4
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-12-20 10:27:33 +0000
URL:       https://git.openjdk.org/jdk/commit/36de61c460d7038019294293143e420dfcce2936
;;;",,,,,,,,,,,,,,,,,,,
JvmtiVTMSTransitionDisabler should support disabling one virtual thread transitions,JDK-8298853,5089776,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sspitsyn,sspitsyn,sspitsyn,2022-12-15 02:47,2023-02-22 12:27,2023-10-01 09:56,2023-02-13 17:30,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,Now the JvmtiVTMSTransitionDisabler mechanism supports disabling VTMS transitions for all virtual threads only. It should also support disabling transitions for any specific virtual thread as well. This will improve scalability of the JVMTI functions operating on target virtual threads as the functions can be executed concurrently without blocking each other execution when target virtual threads are different.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zn1v:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-12-15 04:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11690
Date: 2022-12-15 11:51:10 +0000;;;","2023-02-13 17:30;dukebot;Changeset: 13b1ebba
Author:    Serguei Spitsyn <sspitsyn@openjdk.org>
Date:      2023-02-14 01:28:42 +0000
URL:       https://git.openjdk.org/jdk/commit/13b1ebba276940ff83e53b8ec3659280b3574204
;;;",,,,,,,,,,,,,,,,,,,
Use of uninitialized memory in MetadataFactory::free_metadata,JDK-8298852,5089775,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jcking,jcking,jcking,2022-12-15 02:12,2023-01-03 11:31,2023-10-01 09:56,2022-12-16 06:02,,,,,,,,21,hotspot,,0,hgupdate-sync,,,,,,,,,,,,,,,I just realized that the fix for JDK-8298084 still has undefined behavior. The destructor is called and then a member function is called after. This is undefined behavior. The member function should be called before the destructor and the result saved to a variable.,,,,,,,,,,JDK-8298948,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zn1n:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-15 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11688
Date: 2022-12-15 10:19:05 +0000;;;","2022-12-16 06:02;dukebot;Changeset: f4caaca1
Author:    Justin King <jcking@openjdk.org>
Committer: Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-12-16 14:00:56 +0000
URL:       https://git.openjdk.org/jdk/commit/f4caaca100d334b671eed56287dfe7a1009c47d7
;;;","2022-12-16 06:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/45
Date: 2022-12-16 14:04:55 +0000;;;","2022-12-20 03:43;dukebot;Changeset: b14794db
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-12-16 14:09:55 +0000
URL:       https://git.openjdk.org/jdk/commit/b14794db00ded878dbfc7080f9d57a0f65c02dee
;;;",,,,,,,,,,,,,,,,,
C2: clone all of (CmpP (LoadKlass (AddP down at split if,JDK-8298848,5089769,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,roland,roland,2022-12-15 01:12,2023-02-06 00:16,2023-10-01 09:56,2023-01-05 01:35,21,,,,,,,21,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,,,,,,,"This is related to JDK-8297933 and only triggers with it:

The crash occurs because a (If (Bool (CmpP (LoadKlass ..))))
only has a single projection. It lost the other projection because of
a CheckCastPP that becomes top. Initially the pattern is, in pseudo
code,:

if (obj.klass == some_class) {
obj = CheckCastPP#1(obj);
}

obj itself is a CheckCastPP that's pinned at a dominating if. That
dominating if goes through split through phi. The LoadKlass for the
pseudo code above also has control set to the dominating if being
transformed. This result in:

if (phi1 == some_class) {
obj = CheckCastPP#1(phi2);
}

with phi1 = (Phi (LoadKlass obj) (LoadKlass obj)) and phi2 = (Phi obj obj)
with obj = (CheckCastPP#2 obj')

PhiNode::Ideal() transforms phi2 into a new CheckCastPP:
(CheckCastPP#3 obj' obj') with control set to the region right above
the if in the pseudo code above. There happens to be another
CheckCastPP at the same control which casts obj' to a narrower
type. So the new CheckCastPP#3 is replaced by that one (because of
ConstraintCastNode::dominating_cast())and pseudo code becomes:

if (phi1 == some_class) {
obj = CheckCastPP#1(CheckCastPP#4(obj'));
}

and then:

if (phi1 == some_class) {
obj = top;
}

because the types of the 2 CheckCastPPs conflict. That would be ok if:

phi1 == some_class

would constant fold. It would if the test was:

if (CheckCastPP#4(obj').klass == some_klass) {

but because of split if, the (CmpP (LoadKlass ..)) and the
CheckCastPP#1 ended up with 2 different object inputs that then were
transformed differently. The fix I propose is to have split if clone the entire:

(Bool (CmpP (LoadKlass (AddP ..))))

down the same way (Bool (CmpP ..)) is cloned down. After split if, the
pseudo code becomes:

if (phi.klass == some_class) {
obj = CheckCastPP#1(phi);
}

The bug can't occur because the CheckCastPP and (CmpP (LoadKlass ..))
operate on the same phi input. The change in split_if.cpp implements
that.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297933,JDK-8297345,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zn0b:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-15 02:29;chagedorn;ILW = Segfault in split if but only happens with new code added by JDK-8297933 (not in mainline, yet), never observed without JDK-8297933, -XX:-SplitIfBlocks = MLM = P4;;;","2022-12-15 03:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11689
Date: 2022-12-15 10:53:37 +0000;;;","2023-01-05 01:35;dukebot;Changeset: 87238470
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2023-01-05 09:33:14 +0000
URL:       https://git.openjdk.org/jdk/commit/872384707e89d03ede655aad16f360dc94f10152
;;;",,,,,,,,,,,,,,,,,,
C2 crash: assert(is_Bool()) failed: invalid node class: ConI,JDK-8298824,5089744,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,chagedorn,dholmes,dholmes,2022-12-14 22:58,2022-12-21 17:22,2023-10-01 09:56,2022-12-18 23:11,21,,,,,,,21,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-21,tier4,tier6,,,,,,,,,"Running test: jdk/javadoc/tool/TestScriptInComment.java

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94976/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/23e5b5c8-20fe-4f9f-b446-e66f34a14a4b/runs/386993cb-973b-42c3-b836-552d6c7d71be/workspace/open/src/hotspot/share/opto/node.hpp:851), pid=2132407, tid=2156340
#  assert(is_Bool()) failed: invalid node class: ConI
#
# JRE version: Java(TM) SE Runtime Environment (21.0+2) (fastdebug build 21-ea+2-LTS-61)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-ea+2-LTS-61, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x19b7c00]  BoolNode::Ideal(PhaseGVN*, bool)+0x10c0
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b3c8f057-ed6b-4b96-9663-c303d7e01748/runs/652c44e0-c58f-4cc5-a1f0-b1d60d7e3dea/testoutput/test-support/jtreg_open_test_langtools_tier1/scratch/5/core.2132407)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

---------------  S U M M A R Y ------------

Command Line: -Xmx768m -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/19/36/bundles/linux-x64/jdk-19_linux-x64_bin.tar.gz/jdk-19 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b3c8f057-ed6b-4b96-9663-c303d7e01748/runs/652c44e0-c58f-4cc5-a1f0-b1d60d7e3dea/testoutput/test-support/jtreg_open_test_langtools_tier1/tmp -ea -esa -Xcheck:jni --patch-module=java.base=/opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b3c8f057-ed6b-4b96-9663-c303d7e01748/runs/652c44e0-c58f-4cc5-a1f0-b1d60d7e3dea/testoutput/test-support/jtreg_open_test_langtools_tier1/patches/java.base -Djava.security.policy=file:/opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b3c8f057-ed6b-4b96-9663-c303d7e01748/runs/652c44e0-c58f-4cc5-a1f0-b1d60d7e3dea/./testoutput/test-support/jtreg_open_test_langtools_tier1/jtreg.policy com.sun.javatest.regtest.agent.AgentServer -id 10 -logfile /opt/mach5/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S17394/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b3c8f057-ed6b-4b96-9663-c303d7e01748/runs/652c44e0-c58f-4cc5-a1f0-b1d60d7e3dea/testoutput/test-support/jtreg_open_test_langtools_tier1/jtData/agentServer.10.trace -allowSetSecurityManager -port 33469 -timeoutFactor 4.0

Host: AMD EPYC 7742 64-Core Processor, 12 cores, 23G, Oracle Linux Server release 8.6
Time: Thu Dec 15 02:21:10 2022 UTC elapsed time: 343.117161 seconds (0d 0h 5m 43s)

---------------  T H R E A D  ---------------

Current thread (0x00007f6aaa98caa0):  JavaThread ""C2 CompilerThread1"" daemon [_thread_in_native, id=2156340, stack(0x00007f6acc166000,0x00007f6acc267000)]


Current CompileTask:
C2: 343117 19181       4       jdk.javadoc.internal.doclets.formats.html.HelpWriter$$Lambda$1328/0x0000000100515b78::accept (12 bytes)

Stack: [0x00007f6acc166000,0x00007f6acc267000],  sp=0x00007f6acc2620f0,  free space=1008k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x19b7c00]  BoolNode::Ideal(PhaseGVN*, bool)+0x10c0  (node.hpp:851)
V  [libjvm.so+0x1782173]  PhaseIterGVN::transform_old(Node*)+0xc3  (phaseX.cpp:1261)
V  [libjvm.so+0x177a3e5]  PhaseIterGVN::optimize()+0x75  (phaseX.cpp:1203)
V  [libjvm.so+0xae39a8]  Compile::Optimize()+0x978  (compile.cpp:2374)
V  [libjvm.so+0xae7fbe]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x18ce  (compile.cpp:830)
V  [libjvm.so+0x8fb387]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7  (c2compiler.cpp:113)
V  [libjvm.so+0xaf504c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xaf5e08]  CompileBroker::compiler_thread_loop()+0x5d8  (compileBroker.cpp:1916)
V  [libjvm.so+0x1061e66]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:709)
V  [libjvm.so+0x1a63a20]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x16f9383]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8292289,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zmur:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-15 05:08;chagedorn;ILW = Assertion in IGVN when trying to convert a constant node to a BoolNode, single test intermittent, disable compilation of affected method = HLM = P3;;;","2022-12-15 06:47;chagedorn;Starts to happen after JDK-8292289.;;;","2022-12-16 01:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11705
Date: 2022-12-16 09:37:26 +0000;;;","2022-12-18 23:11;dukebot;Changeset: 5e678f75
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-12-19 07:10:12 +0000
URL:       https://git.openjdk.org/jdk/commit/5e678f7500e514f04637c546959613d4688f989c
;;;",,,,,,,,,,,,,,,,,
[C2] Converting double to float  cause a loss of precision and resulting crypto.aes scores fluctuate,JDK-8298813,5089731,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,sguoyun,sguoyun,sguoyun,2022-12-14 18:32,2022-12-21 17:22,2023-10-01 09:56,2022-12-18 23:58,11,17,20,21,,,,21,hotspot,,0,c2,oracle-triage-21,performance,,,,,,,,,,,,,"For C2, convert double to float  cause a loss of precision,

./chaitin.cpp:221
_high_frequency_lrg = MIN2(double(OPTO_LRG_HIGH_FREQ), _cfg.get_outer_loop_frequency());

Here, _high_frequency_lrg type is float, so maybe has a loss of precision. when it be used:

./coalesce.cpp:379
if( lrg._maxfreq >= _phc.high_frequency_lrg() ) {
   ...
}

Here, lrg._maxfreq type is double, so _high_frequency_lrg will be convert double again. But now, due to the loss of precision of _high_frequency_lrg, the conditions here may be true or false.

There are two cases that I tested for SPECjvm2008 crypto.aes.
case 1:
//chaitin.cpp:221 
// fcvt.s.d    $f0,$f0  #double->float
d = 16.994714324523816
f = 16.9947147

//coalesce.cpp:379
// fcvt.d.s    $f0,$f0       #float->double
// fcmp.sle.d    $fcc2,$f0,$f1
(gdb) i r fa0
fa0            {f = 0x0, d = 0x10} {f = -1.08420217e-19, d = 16.994714736938477} 
(gdb) i r fa1
fa1            {f = 0x0, d = 0x10} {f = -7.68722312e-24, d = 16.994714324523816}

case2:
//chaitin.cpp:221 
// fcvt.s.d    $f0,$f0
d = 16.996332681816536
f = 16.9963322

//coalesce.cpp
// fcvt.d.s    $f0,$f0
// fcmp.sle.d    $fcc2,$f0,$f1
(gdb) i r fa0
fa0            {f = 0x0, d = 0x10} {f = -1.08420217e-19, d = 16.996332168579102}
(gdb) i r fa1
fa1            {f = 0x0, d = 0x10} {f = -1.73570044e-14, d = 16.996332681816536}

The above two cases result in different block generation（case2 can insert new SpillCopyNodes), and resulting score on cryto.aes is fluctuate.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i2zmrv:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-14 19:01;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11685
Date: 2022-12-15 02:52:51 +0000;;;","2022-12-16 02:10;chagedorn;ILW = Using floats instead of doubles could result in loss of precision in GCM for frequency fields could result in different code shapes/fluctuations in benchmarks, low, no workaround = LLH = P5;;;","2022-12-18 23:58;dukebot;Changeset: 36376605
Author:    sunguoyun <sunguoyun@loongson.cn>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-12-19 07:56:36 +0000
URL:       https://git.openjdk.org/jdk/commit/36376605215ba3380bfc07752eec043af04a5c29
;;;",,,,,,,,,,,,,,,,,,
Check `script` code on detecting the base locales,JDK-8298808,5089725,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,naoto,naoto,naoto,2022-12-14 13:53,2022-12-22 14:26,2023-10-01 09:56,2022-12-16 09:18,,,,,,,,21,core-libs,,0,cldr,noreg-build,,,,,,,,,,,,,,"In CLDR 43, two new locales (`en_Dsrt.xml` and `en_Shaw.xml`) are added among others (https://github.com/unicode-org/cldr/pull/2508/files#diff-94cbefde02914335da884f768063a06a84ad651ee4e56cdb1cb90625d7776731). Those locales are incorrectly recognized as `base locale`s by CLDRConverter buildtool, thus they go into the `java.base` module and the test build/translations/VerifyTranslations.java fails with:
```
Unsupported translation found in lib/modules: java.base/sun/text/resources/cldr/FormatData_en_Dsrt.class
Unsupported translation found in lib/modules: java.base/sun/text/resources/cldr/FormatData_en_Shaw.class
Unsupported translation found in lib/modules: java.base/sun/util/resources/cldr/CurrencyNames_en_Dsrt.class
Unsupported translation found in lib/modules: java.base/sun/util/resources/cldr/LocaleNames_en_Dsrt.class
Unsupported translation found in lib/modules: java.base/sun/util/resources/cldr/TimeZoneNames_en_Dsrt.class
Unsupported translation found in lib/src.zip: java.base/sun/text/resources/cldr/FormatData_en_Dsrt.java
Unsupported translation found in lib/src.zip: java.base/sun/text/resources/cldr/FormatData_en_Shaw.java
Unsupported translation found in lib/src.zip: java.base/sun/util/resources/cldr/CurrencyNames_en_Dsrt.java
Unsupported translation found in lib/src.zip: java.base/sun/util/resources/cldr/LocaleNames_en_Dsrt.java
Unsupported translation found in lib/src.zip: java.base/sun/util/resources/cldr/TimeZoneNames_en_Dsrt.java
```
CLDRConverter tool needs to be corrected so that those resource bundles go into `jdk.localedata` module.",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296248,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zmqj:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7644fb4c,,,,,,,,,"2022-12-14 15:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11684
Date: 2022-12-14 23:08:16 +0000;;;","2022-12-16 09:18;dukebot;Changeset: 0eeaeb8e
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-12-16 17:16:20 +0000
URL:       https://git.openjdk.org/jdk/commit/0eeaeb8e7ba40be5e93eb87c7e3dc94230062746
;;;",,,,,,,,,,,,,,,,,,,
Specification of some restricted methods is incorrect,JDK-8298797,5089712,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mcimadamore,mcimadamore,mcimadamore,2022-12-14 11:11,2022-12-21 17:11,2023-10-01 09:56,2022-12-16 02:51,,,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,"The javadoc of two restricted methods is incorrect:
* One overload of MemorySegment::ofAddress is missing the ""this is a restricted method"" narrative text
* ValueLayout.OfAddress::asUnbounded has the narrative text, but is missing the various exceptions",,,,,,,,,,JDK-8298965,,,,,,,,,,,,,,,,,,,,JDK-8298854,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zmnn:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@28ce6b78,,,,,,,,,"2022-12-15 02:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/40
Date: 2022-12-15 10:43:35 +0000;;;","2022-12-16 02:51;dukebot;Changeset: f771c56e
Author:    Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-12-16 10:49:22 +0000
URL:       https://git.openjdk.org/jdk20/commit/f771c56e16a39724712ca0d8c2dd55b9ce260f4d
;;;",,,,,,,,,,,,,,,,,,,
Remove JVM_ACC_PROMOTED_FLAGS breaks minimal build,JDK-8298794,5089709,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,coleenp,coleenp,2022-12-14 10:36,2022-12-21 17:17,2023-10-01 09:56,2022-12-14 15:10,21,,,,,,,21,hotspot,,0,classloading,,,,,,,,,,,,,,,"I put the assert_is_safe code under #if INCLUDE_CDS by mistake.

https://github.com/coleenp/jdk/actions/runs/3688244328/jobs/6242819853",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298475,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zmmz:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-14 10:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11680
Date: 2022-12-14 18:38:38 +0000;;;","2022-12-14 15:10;dukebot;Changeset: 3ef38241
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-12-14 23:08:32 +0000
URL:       https://git.openjdk.org/jdk/commit/3ef382416f5ff38cd44fa8d4e552f1935156e765
;;;",,,,,,,,,,,,,,,,,,,
"gc/TestFullGCCount.java fails with ""invalid boolean value: `null' for expression `vm.opt.ExplicitGCInvokesConcurrent'""",JDK-8298785,5089699,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kbarrett,dcubed,dcubed,2022-12-14 08:12,2023-01-20 19:37,2023-10-01 09:56,2022-12-14 13:59,20,21,,,,,,20,hotspot,,0,regression,tier2,tier6,tier7,,,,,,,,,,,,"The following test failed in the JDK20 CI:

gc/TestFullGCCount.java

Here's a snippet from linux-x64-debug log file:

#-----testdescription-----
$file=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+28-2237/src.full/open/test/hotspot/jtreg/gc/TestFullGCCount.java
$root=/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+28-2237/src.full/open/test/hotspot/jtreg
keywords=bug7072527 othervm
modules=java.management
requires=((\!(vm.gc \=\= ""Shenandoah"" & vm.opt.ExplicitGCInvokesConcurrent \!\= false)) & (\!(vm.gc \=\= ""G1"" & vm.opt.ExplicitGCInvokesConcurrent))) & (vm.gc \!\= ""Z"")
run=USER_SPECIFIED main/othervm -Xlog\:gc gc.TestFullGCCount\n
source=TestFullGCCount.java
title=JMM GC counters overcount in some cases

#-----environment-----

#-----testresult-----
description=file\:/opt/mach5/mesos/work_dir/jib-master/install/jdk-20+28-2237/src.full/open/test/hotspot/jtreg/gc/TestFullGCCount.java
end=Wed Dec 14 16\:01\:53 UTC 2022
environment=regtest
execStatus=Error. Error evaluating expression\: invalid boolean value\: `null' for expression `vm.opt.ExplicitGCInvokesConcurrent'
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
javatestOS=Linux 5.4.17-2136.306.1.3.el7uek.x86_64 (amd64)
javatestVersion=6.0-ea+b24-2022-09-27-9149bb7
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages
start=Wed Dec 14 16\:01\:53 UTC 2022
test=gc/TestFullGCCount.java
totalTime=0
work=/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S94857/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7b7789ac-d8be-4c51-b9a8-328e7e834a09/runs/c8740748-0f26-4b9a-8f79-9a1733869edb/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_gc/gc

#section:script_messages
----------messages:(0/0)----------


test result: Error. Error evaluating expression: invalid boolean value: `null' for expression `vm.opt.ExplicitGCInvokesConcurrent'

I'm starting this as a P2 since it looks like a regression due to:

JDK-8298296 gc/TestFullGCCount.java fails with ""System.gc collections miscounted.""",,,,,,,,,,JDK-8298822,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298296,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zmkr:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2022-12-14 08:13;dcubed;[~kbarrett] - Please take a look at these failures.;;;","2022-12-14 12:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/34
Date: 2022-12-14 20:29:51 +0000;;;","2022-12-14 13:59;dukebot;Changeset: 80cadd40
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2022-12-14 21:57:55 +0000
URL:       https://git.openjdk.org/jdk20/commit/80cadd40103cf1f490a5d70be784652e27588114
;;;",,,,,,,,,,,,,,,,,,
JFR: Test chunk integrity,JDK-8298784,5089698,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-12-14 07:51,2023-01-03 11:33,2023-10-01 09:56,2022-12-20 02:53,,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,"The JDK parser caches data when parsing, for example, if a thread with a particular ID exists in two chunks, it only reads the data for the ID once.

This reduces overhead, but it can also hide issues where an ID is not written in the second chunk. This can become visible in JMC, since the JMC parser lacks this optimization.

To find issues where an ID is not written, it would be good to create a test that records data in multiple chunks, but compares the result of parsing chunks individually with the result of parsing them all together. It can also check that constants are not null, which is what happens if a constant is not written in the correct chunk.",,,,,,,,,,JDK-8299110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zmkj:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-16 03:34;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/43
Date: 2022-12-16 08:44:50 +0000;;;","2022-12-20 02:53;dukebot;Changeset: 3dd2cfab
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-12-20 10:52:11 +0000
URL:       https://git.openjdk.org/jdk20/commit/3dd2cfabdcd91cf9e53d977ef76d0c81b3a072eb
;;;",,,,,,,,,,,,,,,,,,,
8296772 backport to jdk11u caused build error on sparc,JDK-8298737,5089645,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,avoitylov,avoitylov,avoitylov,2022-12-14 03:54,2022-12-21 01:11,2023-10-01 09:56,2022-12-19 00:17,11.0.18,,,,,,,11.0.18,hotspot,,0,jdk11u-critical-request,jdk11u-critical-yes,,,,,,,,,,,,,,"Here is what we get with SS12u4:

./configure --with-version-opt=LTS --with-jvm-variants=server --with-boot-jdk=/export/ws/bellsoft/jdk-11.0.14.1 --with-harfbuzz=system --disable-warnings-as-errors --disable-hotspot-gtest 

gmake product-images legacy-jre-image
Creating support/modules_libs/java.base/server/libjvm_dtrace.so from 1 file(s)
Creating support/modules_libs/java.base/server/libjvm_db.so from 1 file(s)
Undefined			first referenced
 symbol  			    in file
long*frame::link_or_null()const      /export/ws/workspace/11.0.18/jdk-11.0.18/CT/std/label/solaris-sparcv9/type/b11/b/build/b/hotspot/variant-server/libjvm/objs/os.o
ld: fatal: symbol referencing errors
lib/CompileJvm.gmk:153: recipe for target '/export/ws/workspace/11.0.18/jdk-11.0.18/CT/std/label/solaris-sparcv9/type/b11/b/build/b/support/modules_libs/java.base/server/libjvm.so' failed
gmake[3]: *** [/export/ws/workspace/11.0.18/jdk-11.0.18/CT/std/label/solaris-sparcv9/type/b11/b/build/b/support/modules_libs/java.base/server/libjvm.so] Error 1
make/Main.gmk:272: recipe for target 'hotspot-server-libs' failed
gmake[2]: *** [hotspot-server-libs] Error 1",,,,,,,,,,JDK-8299185,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296772,,,,,,,,,,,,,,sparc_64,,,,,,,,,solaris,,,,,,"0|i2zm8r:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-14 04:17;avoitylov;Requesting a build bug fix specific to 11u. Sparc port does not exist in 17 or master.;;;","2022-12-14 04:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1594
Date: 2022-12-14 12:11:33 +0000;;;","2022-12-14 05:10;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u/pull/64
Date: 2022-12-14 13:03:35 +0000;;;","2022-12-19 00:17;dukebot;Changeset: 88954e1e
Author:    Aleksei Voitylov <avoitylov@openjdk.org>
Committer: Goetz Lindenmaier <goetz@openjdk.org>
Date:      2022-12-19 08:16:53 +0000
URL:       https://git.openjdk.org/jdk11u/commit/88954e1e812296abb4e876ed1f37cd6458d00c89
;;;",,,,,,,,,,,,,,,,,
Revisit usages of log10 in compiler code,JDK-8298736,5089644,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,dfenacci,thartmann,thartmann,2022-12-14 03:34,2022-12-21 17:23,2023-10-01 09:56,2022-12-19 00:49,20,21,,,,,,21,hotspot,,0,c2,cleanup,oracle-triage-11,oracle-triage-17,oracle-triage-21,starter,,,,,,,,,,"The log10 usage added by JDK-8286800 causes build failures on SPARC (Oracle JDK 11u):
src/hotspot/share/opto/loopnode.cpp"", line 4771: Error: Overloading ambiguity between ""std::log10(double)"" and ""std::log10(float)"".

For the backport to Oracle JDK 11u, I added a static_cast<double> of the argument. We should also fix this in mainline.

While browsing the code, I noticed that JDK-8283775 added a new implementation of ""log10 rounded down"" in node.cpp. I think we could simply use std::log10 there.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283775,JDK-8286800,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zm8j:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-14 03:37;thartmann;ILW = Overloading ambiguity, not an issue with current build configuration but may lead to warnings/errors with different flags, no workaround = LLH = P5;;;","2022-12-16 01:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11686
Date: 2022-12-15 07:54:18 +0000;;;","2022-12-19 00:49;dukebot;Changeset: ec959914
Author:    Damon Fenacci <damon.fenacci@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-12-19 08:47:04 +0000
URL:       https://git.openjdk.org/jdk/commit/ec95991470a99c917f757614fc6d2cd883bdb39b
;;;",,,,,,,,,,,,,,,,,,
Some tools/jpackage/windows/* tests fails with jtreg test timeout,JDK-8298735,5089643,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenyuk,msheppar,msheppar,2022-12-14 03:19,2023-09-27 01:22,2023-10-01 09:56,2023-01-10 10:04,20,,,,,,,21,tools,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,sbr,sn_134,sn_135,sqe,,,,,,,,"log extracts

00:34:57.249] TRACE: Delete [.\\test.a6bdff68\\input\\hello.jar] existing jar file
[00:34:57.255] TRACE: exec: Execute tool provider [jar -c -f .\\test.a6bdff68\\input\\hello.jar -C .\\test.a6bdff68\\jar-workdir .](7)...
[00:34:57.259] TRACE: exec: Done. Exit code: 0
[00:34:57.259] TRACE: assertEquals(0): Check command tool provider [jar -c -f .\\test.a6bdff68\\input\\hello.jar -C .\\test.a6bdff68\\jar-workdir .](7) exited with 0 code
[00:34:57.259] TRACE: Init fake runtime in [.\\test.a6bdff68\\fake_runtime] directory
[00:34:57.262] TRACE: exec: Execute [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-20+24-1795\\windows-x64.jdk\\jdk-20\\bin\\jpackage.exe --input .\\test.a6bdff68\\input --dest .\\test.a6bdff68\\output --name WinUrlTestWithAbout --type exe --main-jar hello.jar --main-class Hello --win-console --about-url http://localhost/about --runtime-image .\\test.a6bdff68\\fake_runtime -J-Djlink.debug=true --verbose](20); inherit I/O...
----------System.err:(0/0)----------

...

test result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-20+24-1795\windows-x64.jdk\jdk-20\bin\java' timed out (timeout set to 1440000ms, elapsed time including timeout handling was 1627479ms).",,,,,,,,,,JDK-8317028,JDK-8316787,JDK-8316854,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2zm8b:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2023-01-09 10:21;asemenyuk;The fix will increase timeout in reported tests.;;;","2023-01-09 15:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11914
Date: 2023-01-09 22:53:18 +0000;;;","2023-01-10 10:04;dukebot;Changeset: 3c99e786
Author:    Alexey Semenyuk <asemenyuk@openjdk.org>
Date:      2023-01-10 18:02:34 +0000
URL:       https://git.openjdk.org/jdk/commit/3c99e786ab4f89448f8d2a6eaf532255a8a560bf
;;;","2023-09-26 02:33;goetz;Fix request [17u]

I backport this for parity with 17.0.10-oracle.
No risk, only a test change.
Clean backport.
SAP nightly testing passed including this test.;;;","2023-09-26 02:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1794
Date: 2023-09-26 09:36:37 +0000;;;",,,,,,,,,,,,,,,,
Cells in VirtualFlow jump after resizing,JDK-8298728,5089635,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jvos,jvos,jvos,2022-12-14 01:36,2023-09-06 00:39,2023-10-01 09:56,2023-01-05 12:20,jfx19,,,,,,,jfx20,javafx,,0,,,,,,,,,,,,,,,,"When the cells in a control that is using VirtualFlow are resized, the total size of the cells is changed. This reflects in the scrollbar thumb size and position. 
If we want the position of the thumb constant, this implies the coordinates of the cells need to change. This can lead to annoying side effects, where a cell is no longer inside the visible viewport.
The current VirtualFlow implementation already makes sure that during the layoutChildren() phase no changes in the positioning of the cells can happen due to cell resize or estimate changes in general.
However, when applying a scroll action immediately after a cell resize, the positioning calculations are based on the new values (new cell dimensions and estimates, that is), which can be very different from the old values. Therefore, a cell that is e.g. 40 pixels inside the viewport before a resize happens can be outside the viewport, even if we only asked to scroll 20 pixels up.

An approach to fix this is to allow the positioning calculations to fix 2 values before and after the calculations:
1. the current index (the index of the first cell that is at least partially visible) should be the same before/after
2. the current offset (the position of this first cell relative to the offset) should be the same before/after

A consequence of this suggested approach is that the scrollbar thumb might show a jump, as by fixing the 2 parameters above, the relative position might change. 

",,,,,,,,,,JDK-8315748,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-12-14 14:03;angorya;ATableViewTester.java;https://bugs.openjdk.org/secure/attachment/102047/ATableViewTester.java","2022-12-14 14:06;angorya;does not page back to the same spot.mov;https://bugs.openjdk.org/secure/attachment/102048/does+not+page+back+to+the+same+spot.mov",,,,,,,,,,,,,,,,,,,,,,,"0|i2zm6j:",9223372036854775807,b14,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@67282485,,,,,,,,,"2022-12-14 02:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/974
Date: 2022-12-14 10:03:29 +0000;;;","2022-12-14 12:55;angorya;Cannot see the behavioral difference between this branch and the current master with the attached test (ATableViewTester). ;;;","2022-12-14 14:03;angorya;looks like page up/page down using scroll bar is broken with the new code... cannot attach the video due to its size 398MB > 50MB.

to reproduce:
- using the demo code, click on a cell in the middle somewhere
- (possibly resize)
- click on the scrollbar to page up
- click on the other side of the scroll bar to page down
expected: the cell appears in the same position
actual: cell is in a different vertical position, sometimes outside of the view.;;;","2022-12-14 14:06;angorya;downsamples video clip down to 6.7 MB

;;;","2023-01-05 12:20;dukebot;Changeset: ca29cc61
Author:    Johan Vos <jvos@openjdk.org>
Date:      2023-01-05 20:19:15 +0000
URL:       https://git.openjdk.org/jfx/commit/ca29cc6122010e4b94778cc658efd4fdddc8af67
;;;","2023-09-05 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/149
Date: 2023-09-05 09:22:58 +0000;;;","2023-09-05 16:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/154
Date: 2023-09-05 23:36:25 +0000;;;",,,,,,,,,,,,,,
Trees.getPath may crash for unnamed package,JDK-8298727,5089634,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-12-14 01:35,2022-12-21 17:10,2023-10-01 09:56,2022-12-15 03:36,20,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,"Running this test:
```
/*
 * Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/**
 * @test
 * @bug 9999999
 * @summary XXX
 * @library /tools/lib
 * @modules jdk.compiler/com.sun.tools.javac.api
 *          jdk.compiler/com.sun.tools.javac.main
 * @build toolbox.TestRunner toolbox.ToolBox EmptyPackageInfo
 * @run main EmptyPackageInfo
 */

import com.sun.source.tree.Tree;
import com.sun.source.util.JavacTask;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import com.sun.source.util.Trees;
import javax.tools.ToolProvider;
import toolbox.TestRunner;
import toolbox.TestRunner.Test;
import toolbox.ToolBox;

public class EmptyPackageInfo extends TestRunner {

    public static void main(String... args) throws Exception {
        new EmptyPackageInfo().runTests(m -> new Object[] { Paths.get(m.getName()) });
    }

    private final ToolBox tb = new ToolBox();

    public EmptyPackageInfo() {
        super(System.err);
    }

    @Test
    public void testEmptyPackageInfo(Path outerBase) throws Exception {
        Path src = outerBase.resolve(""src"");
        Path classes = outerBase.resolve(""classes"");
        Path packInfo = src.resolve(""package-info.java"");

        tb.writeFile(packInfo, ""/**javadoc*/\n"");
        Files.createDirectories(classes);

        var compiler = ToolProvider.getSystemJavaCompiler();

        try (var fm = compiler.getStandardFileManager(null,
                                                      null,
                                                      null)) {
            var task =
                    (JavacTask) compiler.getTask(null,
                                                 fm,
                                                 null,
                                                 null,
                                                 null,
                                                 fm.getJavaFileObjects(packInfo));
            task.analyze();
            var pack = task.getElements().getPackageElement("""");
            var trees = Trees.instance(task);
            var packPath = trees.getPath(pack);
            var packTree = packPath.getLeaf();
            if (packTree.getKind() != Tree.Kind.COMPILATION_UNIT) {
                throw new AssertionError(""Unexpected tree kind: "" + packTree.getKind());
            }
            var actualJavadoc = trees.getDocComment(packPath);
            var expectedJavadoc = ""javadoc"";
            if (!expectedJavadoc.equals(actualJavadoc)) {
                throw new AssertionError(""Unexpected javadoc, "" +
                                         ""expected: "" + expectedJavadoc +
                                         "", got: "" + actualJavadoc);
            }
        }
    }

}
```

crashes with:
```
Exception running test testEmptyPackageInfo: java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.tree.JCTree.accept(com.sun.tools.javac.tree.JCTree$Visitor)"" because ""tree"" is null
java.lang.NullPointerException: Cannot invoke ""com.sun.tools.javac.tree.JCTree.accept(com.sun.tools.javac.tree.JCTree$Visitor)"" because ""tree"" is null
	at jdk.compiler/com.sun.tools.javac.tree.TreeInfo.declarationFor(TreeInfo.java:811)
	at jdk.compiler/com.sun.tools.javac.model.JavacElements.getTreeAndTopLevel(JavacElements.java:779)
	at jdk.compiler/com.sun.tools.javac.model.JavacElements.getTreeAndTopLevel(JavacElements.java:799)
	at jdk.compiler/com.sun.tools.javac.api.JavacTrees.getPath(JavacTrees.java:331)
	at jdk.compiler/com.sun.tools.javac.api.JavacTrees.getPath(JavacTrees.java:321)
	at EmptyPackageInfo.testEmptyPackageInfo(EmptyPackageInfo.java:82)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at toolbox.TestRunner.runTests(TestRunner.java:89)
	at EmptyPackageInfo.main(EmptyPackageInfo.java:49)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at java.base/java.lang.Thread.run(Thread.java:1623)
```",,,,,,,,,,JDK-8298957,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zm6b:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-12-14 03:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/31
Date: 2022-12-14 11:08:16 +0000;;;","2022-12-15 03:36;dukebot;Changeset: 22a6b591
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-12-15 11:33:56 +0000
URL:       https://git.openjdk.org/jdk20/commit/22a6b5910290cb8a3876f94213ba60db86e60718
;;;",,,,,,,,,,,,,,,,,,,
Insufficient error handling when CodeBuffer is exhausted,JDK-8298720,5089623,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,thartmann,jcherian,jcherian,2022-12-13 23:32,2023-04-03 01:32,2023-10-01 09:56,2023-01-06 00:30,11,17,20,21,,,,21,hotspot,,0,c2,oracle-triage-21,,,,,,,,,,,,,,"# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x000000010906423c, pid=26207, tid=22019
#
# JRE version: Java(TM) SE Runtime Environment 18.9 (11.0.19+1) (fastdebug build 11.0.19-ea+1-LTS-101)
# Java VM: Java HotSpot(TM) 64-Bit Server VM 18.9 (fastdebug 11.0.19-ea+1-LTS-101, compiled mode, compressed oops, g1 gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0x6423c]  Assembler::emit_long(int)+0x34

Current CompileTask:
C2:   1602  487    b        java.lang.String::indexOf (113 bytes)

Stack: [0x000000016cadc000,0x000000016ccdf000],  sp=0x000000016ccdac10,  free space=2043k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x6423c]  Assembler::emit_long(int)+0x34
V  [libjvm.dylib+0x641b0]  Assembler::emit()+0x1c
V  [libjvm.dylib+0x67720]  Assembler::b(unsigned char*)+0xb8
V  [libjvm.dylib+0x7bbd0c]  MacroAssembler::string_indexof(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, int)+0x14b8
V  [libjvm.dylib+0x4dc04]  string_indexofLLNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x33c
V  [libjvm.dylib+0x8a6f20]  Compile::fill_buffer(CodeBuffer*, unsigned int*)+0xe00
V  [libjvm.dylib+0x2ea25c]  Compile::Code_Gen()+0x3c8
V  [libjvm.dylib+0x2e7cb4]  Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)+0xa18
V  [libjvm.dylib+0x1fdcf0]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)+0x154
V  [libjvm.dylib+0x2fafec]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x434
V  [libjvm.dylib+0x2faa24]  CompileBroker::compiler_thread_loop()+0x1ec
V  [libjvm.dylib+0xa2c568]  JavaThread::thread_main_inner()+0x1f8
V  [libjvm.dylib+0xa2c020]  JavaThread::run()+0x32c
V  [libjvm.dylib+0xa28b90]  Thread::call_run()+0x90
V  [libjvm.dylib+0x896874]  thread_native_entry(Thread*)+0x11c
C  [libsystem_pthread.dylib+0x7878]  _pthread_start+0x140


Test: TestStressCodeBuffers.java
OS: macosx-aarch64-debug
Where: 11.0.19-oracle

#-----testresult-----
description=file\:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-11.0.19+1-101/src.full/open/test/hotspot/jtreg/compiler/codecache/TestStressCodeBuffers.java
elapsed=4570 0\:00\:04.570
end=Tue Dec 13 12\:22\:05 GMT 2022
environment=regtest
execStatus=Failed. Unexpected exit from test [exit code\: 134]
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=jpg-mac-arm-27.oraclecorp.com
javatestOS=Mac OS X 11.6.6 (aarch64)
javatestVersion=6.0-ea+b11-2020-05-19
jtregVersion=jtreg 5.1 ea b01
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages build compile main
start=Tue Dec 13 12\:22\:00 GMT 2022
test=compiler/codecache/TestStressCodeBuffers.java
testJDK=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-11.0.19+1-101/macosx-aarch64-debug.jdk/jdk-11.0.19/fastdebug",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8287129,JDK-8248411,JDK-8299570,JDK-8130309,JDK-8272094,"2022-12-23 02:29;thartmann;8298720.diff;https://bugs.openjdk.org/secure/attachment/102157/8298720.diff","2022-12-13 23:31;jcherian;console_log.txt;https://bugs.openjdk.org/secure/attachment/102018/console_log.txt","2022-12-14 05:55;thartmann;hs_err_pid26207.log;https://bugs.openjdk.org/secure/attachment/102034/hs_err_pid26207.log","2022-12-14 05:55;thartmann;replay_pid26207.log;https://bugs.openjdk.org/secure/attachment/102032/replay_pid26207.log",,,,,,aarch64,,,,,,,,,,,,,,,"0|i2zm3v:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-14 07:41;thartmann;This was already reported by JDK-8287129 with an earlier version and closed as duplicate of JDK-8272094. Now that we have the fix for JDK-8272094 in JDK 11.0.18-oracle, it must be a different issue.;;;","2022-12-14 08:01;thartmann;This looks suspicious:

  enum ScratchBufferBlob {
#if defined(PPC64)
    MAX_inst_size       = 2048,
#else
    MAX_inst_size       = 1024,
#endif

In mainline, since JDK-8230565, we always have MAX_inst_size = 2048

I'll take a closer look.

Update:
If the ScratchBufferBlob is too small, we would fail with an assert:

#  Internal Error (workspace/open/src/hotspot/share/asm/codeBuffer.hpp:184), pid=5551, tid=43267
#  assert(allocates2(pc)) failed: not in CodeBuffer memory: 0x000000011816a140 <= 0x000000011816a2c4 <= 0x000000011816a2c0

V  [libjvm.dylib+0xab2c80]  VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x5b0
V  [libjvm.dylib+0xab33f8]  VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x40
V  [libjvm.dylib+0x379354]  report_vm_error(char const*, int, char const*, char const*, ...)+0x74
V  [libjvm.dylib+0x63c9c]  CodeSection::set_end(unsigned char*)+0x84
V  [libjvm.dylib+0x63b78]  Assembler::emit()+0x1c
V  [libjvm.dylib+0x64b90]  Assembler::ld_st2(RegisterImpl*, Address const&, int, int, int)+0x1b8
V  [libjvm.dylib+0x7bb520]  MacroAssembler::string_indexof(RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, int)+0xfe8
V  [libjvm.dylib+0x4d5cc]  string_indexofLLNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x33c
V  [libjvm.dylib+0x8a6c04]  Compile::fill_buffer(CodeBuffer*, unsigned int*)+0xe00

So this must be something else.;;;","2022-12-15 00:11;chagedorn;ILW = Segfault in C2 code generation, single test on mac aarch64, disable compilation of affected method = HLM = P3;;;","2022-12-19 06:16;thartmann;We are in CodeSection::emit_int32 and somehow CodeSection::_end ended up being x8=0xfffffffffffffffe which is #define       badAddress        ((address)::badAddressVal)

    0x1065c0234 <+44>: ldr    x0, [x8, #0x18]
    0x1065c0238 <+48>: ldr    x8, [x0, #0x10]
    0x1065c023c <+52>: str    w1, [x8];;;","2022-12-19 07:53;thartmann;My current working hypothesis is that, similar to JDK-8257513, we miss a compilation bailout when StressCodeBuffers simulates an occasional allocation failure. Below log shows that we are compiling task 487 which then triggers an allocation failure but the hs_err file shows that we continued to emit code because we are still compiling task 487 when we fail.

   1445 0  487    b        java.lang.String::indexOf([BBILjava/lang/String;I)I (113 bytes)
- java.lang.String::coder()B (15 bytes)
- java.lang.String::length()I (11 bytes)
- java.lang.String::coder()B (15 bytes)

    Values: 295 nodes ---> 0/0 (0)

    Values: 295 nodes ---> 4/27 (0)  ratio 0.148148
expanding CodeBuffer:CodeBuffer:
  consts.code = 0x000000010db2ae00 : 0x000000010db2ae00 : 0x000000010db2ae18 (0 of 24)
  consts.locs = 0x00000001193f8ea0 : 0x00000001193f8ea0 : 0x00000001193f8ea8 (0 of 4) point=0
   insts.code = 0x000000010db2abc0 : 0x000000010db2abc0 : 0x000000010db2ad40 (0 of 384)
   insts.locs = 0x00000001193f8e00 : 0x00000001193f8e00 : 0x00000001193f8e9a (0 of 77) point=0
   stubs.code = 0x000000010db2ad80 : 0x000000010db2ad80 : 0x000000010db2adc0 (0 of 64)
   stubs.locs = 0x00000001193f8eb0 : 0x00000001193f8eb0 : 0x00000001193f8eb8 (0 of 4) point=0
expanded CodeBuffer:CodeBuffer:
  consts.code = 0x000000010db30ac0 : 0x000000010db30ac0 : 0x000000010db30b00 (0 of 64)
  consts.locs = 0x00000001193f8ea0 : 0x00000001193f8ea0 : 0x00000001193f8ea8 (0 of 4) point=0
   insts.code = 0x000000010db304c0 : 0x000000010db304c0 : 0x000000010db30a80 (0 of 1472)
   insts.locs = 0x00000001193f8e00 : 0x00000001193f8e00 : 0x00000001193f8e9a (0 of 77) point=0
   stubs.code = 0x000000010db30b40 : 0x000000010db30b40 : 0x000000010db30b80 (0 of 64)
   stubs.locs = 0x00000001193f8eb0 : 0x00000001193f8eb0 : 0x00000001193f8eb8 (0 of 4) point=0
expanding CodeBuffer:CodeBuffer:
  consts.code = 0x000000010db30ac0 : 0x000000010db30ac0 : 0x000000010db30b00 (0 of 64)
  consts.locs = 0x00000001193f8ea0 : 0x00000001193f8ea0 : 0x00000001193f8ea8 (0 of 4) point=0
   insts.code = 0x000000010db304c0 : 0x000000010db3067c : 0x000000010db30a80 (444 of 1472)
   insts.locs = 0x00000001193f8e00 : 0x00000001193f8e04 : 0x00000001193f8e9a (2 of 77) point=136
   stubs.code = 0x000000010db30b40 : 0x000000010db30b50 : 0x000000010db30b80 (16 of 64)
   stubs.locs = 0x0000000119321b50 : 0x0000000119321b56 : 0x0000000119321b6e (3 of 15) point=0
StressCodeBuffers: have expanded 1024 times

Current CompileTask:
C2:   1448 2 2  487    b        java.lang.String::indexOf([BBILjava/lang/String;I)I (113 bytes)

Stack: [0x0000000170a10000,0x0000000170c13000],  sp=0x0000000170c0ec10,  free space=2043k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0x6423c]  Assembler::emit_long(int)+0x34
V  [libjvm.dylib+0x641b0]  Assembler::emit()+0x1c
V  [libjvm.dylib+0x67720]  Assembler::b(unsigned char*)+0xb8;;;","2022-12-21 04:42;thartmann;If found the root cause which is missing checks of the return value of trampoline_call in MacroAssembler::string_indexof. This was missed by JDK-8248411 which fixed many other similar places.;;;","2022-12-22 05:48;thartmann;After strengthening -XX:+StressCodeBuffers, I can reproduce the issue in mainline with a slightly different stack trace:

# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00000001048abf44, pid=71594, tid=41475
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (fastdebug build 21-internal-LTS-2022-12-22-1203593.tohartma...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 21-internal-LTS-2022-12-22-1203593.tohartma..., compiled mode, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# V  [libjvm.dylib+0xf3f44]  Assembler::b(unsigned char*)+0xb8

Current CompileTask:
C2:   2369   26    b        java.lang.String::indexOf (113 bytes)

Stack: [0x000000016ec0c000,0x000000016ee0f000],  sp=0x000000016ee09cc0,  free space=2039k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.dylib+0xf3f44]  Assembler::b(unsigned char*)+0xb8
V  [libjvm.dylib+0x3bc9b0]  C2_MacroAssembler::string_indexof(Register, Register, Register, Register, Register, Register, Register, Register, Register, Register, int, Register, int)+0x13dc
V  [libjvm.dylib+0x78b8c]  string_indexofULNode::emit(CodeBuffer&, PhaseRegAlloc*) const+0x6bc
V  [libjvm.dylib+0xdb27f0]  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)+0x13d0
V  [libjvm.dylib+0x4d822c]  Compile::Code_Gen()+0x3b4
V  [libjvm.dylib+0x4d5eb0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15b4
V  [libjvm.dylib+0x3cc09c]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x180
V  [libjvm.dylib+0x4f2260]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x56c
V  [libjvm.dylib+0x4f1b20]  CompileBroker::compiler_thread_loop()+0x288
V  [libjvm.dylib+0x89c520]  JavaThread::thread_main_inner()+0x20c
V  [libjvm.dylib+0xfda94c]  Thread::call_run()+0x220
V  [libjvm.dylib+0xda0eb0]  thread_native_entry(Thread*)+0x160
C  [libsystem_pthread.dylib+0x74ec]  _pthread_start+0x94
;;;","2022-12-23 02:28;thartmann;I attached a prototype patch. Will complete this after the winter break.;;;","2023-01-03 23:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11839
Date: 2023-01-04 06:31:16 +0000;;;","2023-01-06 00:30;dukebot;Changeset: cc4936a7
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-01-06 08:28:09 +0000
URL:       https://git.openjdk.org/jdk/commit/cc4936a79e1c1723542d575a2596edd29248817e
;;;",,,,,,,,,,,
Fix typos in src/java.desktop/ and various test classes of client component,JDK-8298709,5089613,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,mernst,jpai,jpai,2022-12-13 21:57,2022-12-21 17:19,2023-10-01 09:56,2022-12-15 23:12,11,17,21,,,,,21,client-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,A contributor has opened a PR to fix typos in multiple different areas of the JDK https://github.com/openjdk/jdk/pull/10029. That PR will be split into different area-specific PRs. This specific JBS issue is to address typos in the client component.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zm1n:",9223372036854775807,b03,,,,,,,,,,,"2022-12-13 22:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11661
Date: 2022-12-14 06:00:43 +0000;;;","2022-12-15 23:12;dukebot;Changeset: fa322e40
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-12-16 07:10:36 +0000
URL:       https://git.openjdk.org/jdk/commit/fa322e40b68abf0a253040d14414d41f4e01e028
;;;",,,,,,,,,,,,,,,,,,,
Cleanup SA entries in ProblemList-zgc.txt.,JDK-8298701,5089603,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,cjplummer,cjplummer,cjplummer,2022-12-13 14:16,2023-01-03 11:31,2023-10-01 09:56,2022-12-19 10:04,21,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,"The following ProblemList-zgc.txt entries need a lot of cleanup.

serviceability/sa/ClhsdbCDSCore.java                          8268722   macosx-x64
serviceability/sa/ClhsdbFindPC.java#xcomp-core                8268722,8284045   macosx-x64,generic-all
serviceability/sa/ClhsdbFindPC.java#no-xcomp-core             8268722   macosx-x64
serviceability/sa/ClhsdbFindPC.java#xcomp-process             8276402   generic-all
serviceability/sa/ClhsdbJstack.java#id0                       8276402   generic-all
serviceability/sa/ClhsdbPmap.java#core                        8268722   macosx-x64
serviceability/sa/ClhsdbPstack.java#core                      8268722   macosx-x64
serviceability/sa/TestJmapCore.java                           8268722,8268283,8270202   macosx-x64,linux-aarch64,linux-x64
serviceability/sa/TestJmapCoreMetaspace.java                  8268722,8268636   generic-all

JDK-8268722 entries can be removed. It was closed as WNF. It doesn't really impact macosx-aarch64 (core files are reasonably small there), and on macosx-x64 all these core file tests are (probably indefinitely) problem listed for other reasons in the main problem list, so no need to problem list them here with a closed CR.

JDK-8276402 has been closed as dup of a bug that is now fixed.

Lastly, TestJmapCore.java does fail on macosx-aarch64 due to JDK-8268283, so its problem list entry needs to be updated to reflect that.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8268722,,,,,,,JDK-8268283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zlzf:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-12-13 14:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11658
Date: 2022-12-13 22:34:06 +0000;;;","2022-12-19 10:04;dukebot;Changeset: 9194e915
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-12-19 18:02:34 +0000
URL:       https://git.openjdk.org/jdk/commit/9194e915495434c154ff4cf142d527b163026b3c
;;;",,,,,,,,,,,,,,,,,,,
Typo in DocTree comment,JDK-8298700,5089601,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jjg,jjg,jjg,2022-12-13 14:03,2022-12-19 12:40,2023-10-01 09:56,2022-12-13 15:23,20,,,,,,,20,tools,,0,noreg-doc,,,,,,,,,,,,,,,"
        /**
         * Used for instances of {@link EndElementTree}
         * representing the start of an HTML element.
         */
        START_ELEMENT,",,,,,,,,,,JDK-8298801,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zlyz:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-12-13 14:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/28
Date: 2022-12-13 22:27:05 +0000;;;","2022-12-13 15:23;dukebot;Changeset: 61ab16f7
Author:    Jonathan Gibbons <jjg@openjdk.org>
Date:      2022-12-13 23:20:43 +0000
URL:       https://git.openjdk.org/jdk20/commit/61ab16f79a735a98b3c095daf1b541f4fc5413c0
;;;",,,,,,,,,,,,,,,,,,,
java/lang/reflect/IllegalArgumentsTest.java times out with slowdebug bits,JDK-8298699,5089600,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2022-12-13 13:45,2023-01-03 11:33,2023-10-01 09:56,2022-12-19 15:11,20,,,,,,,20,hotspot,,0,intermittent,,,,,,,,,,,,,,,"The following test has been timing out with slowdebug bits during
my stress testing runs:

java/lang/reflect/IllegalArgumentsTest.java

For several of the sightings, the test PASSed while the timeout handler
is running which might indicate that a slightly longer timeout value will
help the situation.

Here's the sightings from my stress testing notes:

# jdk-20+8_1_linux - observed in jdk-20+8 testing on 2022.07.28 on
# linux-x64 in slowdebug config:
#   - timeout at 1525.234 PASSED while timeout handler was running
# jdk-20+20_1_macosx-aarch64 - observed in jdk-20+20 testing on 2022.10.20 on
# macosx-aarch64 in slowdebug config:
#   - timeout at 1615.671
# jdk-20+20_2_macosx-aarch64 - observed in jdk-20+20 testing on 2022.10.21 on
# macosx-aarch64 in slowdebug config:
#   - timeout at 1634.416
# jdk-20+20_3_macosx-aarch64 - observed in jdk-20+20 testing on 2022.10.22 on
# macosx-aarch64 in slowdebug config:
#   - timeout at 1658.501
# jdk-20+26_1_macosx-aarch64 - observed in jdk-20+26 testing on 2022.12.01 on
# macosx-aarch64 in slowdebug config:
#   - timeout at 1614.38
# jdk-20+26_2_macosx-aarch64 - observed in jdk-20+26 testing on 2022.12.02 on
# macosx-aarch64 in slowdebug config:
#   - timeout at 1821.214
#   - This run PASSed while the timeout handler was running.
# jdk-20+27_1_macosx-aarch64 - observed in jdk-20+27 testing on 2022.12.09 on
# macosx-aarch64 in slowdebug config:
#   - timeout at 1593.926
# jdk-20+27_2_macosx-aarch64 - observed in jdk-20+27 testing on 2022.12.10 on
# macosx-aarch64 in slowdebug config:
#   - timeout at 1748.29
#   - This run PASSed while the timeout handler was running.
# jdk-20+27_3_macosx-aarch64 - observed in jdk-20+27 testing on 2022.12.11 on
# macosx-aarch64 in slowdebug config:
#   - timeout at 1787.431
#   - This run PASSed while the timeout handler was running.",,,,,,,,,,JDK-8299107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-12-13 13:47;dcubed;jdk-20+27_macosx-aarch64.8298699.zip;https://bugs.openjdk.org/secure/attachment/102014/jdk-20%2B27_macosx-aarch64.8298699.zip",,,,,,,,,aarch64,x86_64,,,,,,,,linux,os_x,,,,,"0|i2zlyr:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-13 13:47;dcubed;Spotted in my macosx-aarch64 stress run with jdk-20+27 bits:

$ unzip -l jdk-20+27_macosx-aarch64.8298699.zip
Archive:  jdk-20+27_macosx-aarch64.8298699.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    16455  12-09-2022 04:08   jdk-20+27_1/failures.macosx-aarch64/IllegalArgumentsTest.jtr.slowdebug
    16773  12-10-2022 02:58   jdk-20+27_2/failures.macosx-aarch64/IllegalArgumentsTest.jtr.slowdebug
    16783  12-11-2022 01:44   jdk-20+27_3/failures.macosx-aarch64/IllegalArgumentsTest.jtr.slowdebug
---------                     -------
    50011                     3 files;;;","2022-12-19 14:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/60
Date: 2022-12-19 22:20:08 +0000;;;","2022-12-19 15:11;dukebot;Changeset: f07acfc1
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-12-19 23:08:56 +0000
URL:       https://git.openjdk.org/jdk20/commit/f07acfc166e1261f830e63629e76303ec6235377
;;;",,,,,,,,,,,,,,,,,,
JFR: RemoteRecordingStream support for checkpoint event sizes beyond u4,JDK-8298649,5089543,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,egahlin,egahlin,egahlin,2022-12-13 05:20,2023-01-31 06:02,2023-10-01 09:56,2022-12-14 05:42,,,,,,,,20,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,,,This is a follow up to JDK-8298129 where support was not added when transferring event data over JMX.,,,,,,,,,,JDK-8298807,JDK-8301547,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298501,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zlm3:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-14 02:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/30
Date: 2022-12-14 09:40:28 +0000;;;","2022-12-14 05:42;dukebot;Changeset: 0eeaf6b2
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-12-14 13:40:15 +0000
URL:       https://git.openjdk.org/jdk20/commit/0eeaf6b219758563712d951b3c6ff160ebeff52d
;;;","2023-01-27 07:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1121
Date: 2023-01-27 15:35:27 +0000;;;","2023-01-30 03:08;evergizova;Fix Request [17u]
I'd like to backport it as a small follow up fix for JDK-8298129 which is already approved for 17u.
The third hunk doesn't apply cleanly (JDK-8286396 is not in 17u), reapplied manually.
Tested with tier1 and jdk/jfr.;;;",,,,,,,,,,,,,,,,,
GenShen require heap size 2MB granularity ,JDK-8298647,5089538,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,smonteith,smonteith,smonteith,2022-12-13 03:32,2023-06-02 10:05,2023-10-01 09:56,2023-01-23 16:43,,,,,,,,,hotspot,,0,gc-shenandoah,,,,,,,,,,,,,,,"enerational Shenandoah requires 2MB granularity in order for card tables to cover the allocated heap. Each byte in a page of card table represents 512 heap bytes. As card tables are allocated 4KB at a time,   4KB * 512 = 2MB.

There is a circular dependency between the region calculations and the heap size calculations. This unconditionally rounds up the heap size to 2MB. It might be preferable to do this only when generational mode is enabled.                                                                 

Running with:
  java -Xlog:gc*=trace -XX:+UseShenandoahGC -mx495m \
       -XX:ShenandoahGCMode=generational -version

on a debug build is sufficient to reproduce this problem",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8309322,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zlkz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2023-01-16 13:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/shenandoah/pull/202
Date: 2023-01-16 21:41:35 +0000;;;",,,,,,,,,,,,,,,,,,,,
JNI works with accessibleSelection on a wrong thread,JDK-8298645,5089536,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenov,asemenov,asemenov,2022-12-13 02:05,2023-01-05 03:02,2023-10-01 09:56,2022-12-23 14:30,11,17,19,20,21,,,21,client-libs,,0,,,,,,,,,,,,,,,,"[ComboBoxAccessibility accessibilityValue] works with the accessibleSelection object directly, however the work should go through CAccessibility so that it is executed on the Event Dispatch thread.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zlkj:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-12-13 08:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11653
Date: 2022-12-13 15:59:53 +0000;;;","2022-12-23 14:30;dukebot;Changeset: 5e861e39
Author:    Artem Semenov <asemenov@openjdk.org>
Date:      2022-12-23 22:28:41 +0000
URL:       https://git.openjdk.org/jdk/commit/5e861e3965ce110889c8a1782ab0260937dee6ee
;;;",,,,,,,,,,,,,,,,,,,
JNI call of getCurrentComponent on a wrong thread,JDK-8298644,5089535,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenov,asemenov,asemenov,2022-12-13 02:03,2023-01-23 15:37,2023-10-01 09:56,2023-01-13 11:41,11,17,21,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,"[OutlineRowAccessibility currentAccessibleWithENV:] defines the getCurrentComponent method on the AccessibleContext instance of AccessibleJTreeNode class, however the call should go through CAccessibility so that it is executed on the Event Dispatch thread.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zlkb:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-12-14 02:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11670
Date: 2022-12-14 10:47:09 +0000;;;","2023-01-13 11:41;dukebot;Changeset: 8cb25d3d
Author:    Artem Semenov <asemenov@openjdk.org>
Date:      2023-01-13 19:39:56 +0000
URL:       https://git.openjdk.org/jdk/commit/8cb25d3de494c6d9357a1c199e1a9dbff9be9948
;;;",,,,,,,,,,,,,,,,,,,
JNI call of getAccessibleRowWithIndex and getAccessibleColumnWithIndex on a wrong thread,JDK-8298643,5089534,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenov,asemenov,asemenov,2022-12-13 01:59,2023-01-05 03:02,2023-10-01 09:56,2022-12-23 14:09,11,17,19,20,21,,,21,client-libs,,0,,,,,,,,,,,,,,,,"[TableAccessibility accessibleRowWithIndex] and [TableAccessibility accessibleColumnWithIndex] defines the getAccessibleRowWithIndex and getAccessibleColumnWithIndex methods on the AccessibleContext instance of AccessibleJTable class, however the call should go through CAccessibility so that it is executed on the Event Dispatch thread.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2zlk3:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-12-13 05:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11649
Date: 2022-12-13 13:30:45 +0000;;;","2022-12-23 14:09;dukebot;Changeset: fd746a2f
Author:    Artem Semenov <asemenov@openjdk.org>
Date:      2022-12-23 22:07:14 +0000
URL:       https://git.openjdk.org/jdk/commit/fd746a2fe0e4c1c056065da93e2be2d8bb4e5428
;;;",,,,,,,,,,,,,,,,,,,
ParallelGC -XX:+UseNUMA eden spaces allocated on wrong node,JDK-8298642,5089533,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ngasson,ngasson,ngasson,2022-12-13 01:56,2023-01-03 11:36,2023-10-01 09:56,2022-12-21 03:02,19,20,,,,,,20,hotspot,,0,parallel,,,,,,,,,,,,,,,"I noticed this when implementing JDK-8298482. If UseAdaptiveSizePolicy and/or UseAdaptiveNUMAChunkSizing are enabled and UseLargePages is *not* enabled, part of the eden spaces managed by MutableNUMASpace end up bound to the wrong node. This seems to be a regression caused by JDK-8283935, specifically the addition of

  set_page_size(alignment());

to MutableNUMASpace::initialize(). Previously the page size would have been equal to os::vm_page_size() unless UseLargePages was enabled.

In bias_region() we call os::free_memory() to uncommit a range of pages so that they can be later allocated on a different node. We pass page_size() as the alignment_hint argument. However on Linux this does nothing if alignment_hint is greater than os::vm_page_size() and THP is not enabled, so the pages always remain bound to their original node (see os::pd_free_memory() in os_linux.cpp).

I think the solution here is to pass os::vm_page_size() as the alignment_hint when UseLargePages is disabled.",,,,,,,,,,JDK-8299249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283935,,,,,,,,,,,,,,,,,,,,,,,linux,,,,,,"0|i2zljv:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-12-14 06:29;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/33
Date: 2022-12-14 14:23:01 +0000;;;","2022-12-21 03:02;dukebot;Changeset: 81933b7a
Author:    Nick Gasson <ngasson@openjdk.org>
Date:      2022-12-21 11:00:48 +0000
URL:       https://git.openjdk.org/jdk20/commit/81933b7a927c1579eda7b6678901e5d2bc1c1aed
;;;",,,,,,,,,,,,,,,,,,,
java/io/File/GetXSpace.java is failing,JDK-8298619,5089509,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,bpb,dholmes,dholmes,2022-12-12 19:01,2023-09-25 08:17,2023-10-01 09:56,2023-04-04 08:58,11,17,20,21,,,,21,core-libs,,0,intermittent,noreg-self,sust-test-stabilization,tier2,,,,,,,,,,,,"FAILED: 'c:\\sb\\prod\\1670897315\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\tmp\\5545770776958884423\\10856438924569857750\\foo11530941174951796680.tmp total space': 26401810644992 > 161051996160
4 tests: 1 failure(s); first: java.lang.RuntimeException: 'c:\\sb\\prod\\1670897315\\testoutput\\test-support\\jtreg_open_test_jdk_tier2_part2\\tmp\\5545770776958884423\\10856438924569857750\\foo11530941174951796680.tmp total space': 26401810644992 > 161051996160
java.lang.RuntimeException: 1 test(s) failed
	at GetXSpace.main(GetXSpace.java:491)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)",,,,,,,,,,JDK-8313910,JDK-8314346,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305646,JDK-8309216,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2zlej:",9223372036854775807,b17,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2023-01-26 17:08;bpb;The failures listed so far appear to have occurred for the same reason: `File::getTotalSpace` returned a value (much) less than that indicated by the output of `df`. This is presumably because quotas are in effect for the current user. From the documentation of `GetDiskFreeSpaceExW`:

""If per-user quotas are being used, this value may be less than the total number of bytes on a disk.""

It is possible that `GetDiskSpaceInformationW` might be useful for this problem, either in the test or in the implementation itself.;;;","2023-02-02 18:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12397
Date: 2023-02-03 02:02:39 +0000;;;","2023-02-03 09:01;bpb;This particular failure occurred because the conditional s.total() > ts was true where s.total() is the total space on the disk as derived from df and ts is the total space on the disk as derived by getTotalSpace(). The former value does not recognize quotas whereas the latter value does, do if there is a quota in place for the volume then the conditional will always be true and the test will always fail.

If however the value of s.total() is derived from fsutil volume diskFree, then it will account for any quota and the conditional should instead be ts > s.total() instead and should always be false unless there is truly an error.;;;","2023-03-29 11:42;bpb;I expect that a quota is in effect and 161051996160 is CallerTotalAllocationUnits and 26401810382848 is ActualTotalAllocationUnits. I was unable to run the revised test in Mach 5 on the same node which I suppose is not in the machine pool.;;;","2023-04-04 08:58;dukebot;Changeset: 3ef834fc
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2023-04-04 15:56:51 +0000
URL:       https://git.openjdk.org/jdk/commit/3ef834fc6fc245accffc41da714358fc82f22657
;;;","2023-04-05 00:28;mbaesken;On Alpine Linux, using gcc12, we run now into this compile warning as error :
In file included from /openjdk/linuxmuslx86_64/jdk/test/jdk/java/io/File/libGetXSpace.c:31:
/usr/include/sys/errno.h:1:2: error: #warning redirecting incorrect #include <sys/errno.h> to <errno.h> [-Werror=cpp]
    1 | #warning redirecting incorrect #include <sys/errno.h> to <errno.h>
      |  ^~~~~~~
cc1: all warnings being treated as errors

Not sure if this warning makes a lot of sense, but we probably better just include <errno.h> like it is done at almost all other places in the codebase ?


;;;","2023-09-25 08:17;goetz;[17u note]
Depends on 8291911 which is not yet in 17.;;;",,,,,,,,,,,,,,
Typo in JPEGImageReader and JPEGImageWriter,JDK-8298618,5089508,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,psadhukhan,psadhukhan,2022-12-12 18:29,2022-12-19 12:38,2023-10-01 09:56,2022-12-13 02:23,,,,,,,,21,client-libs,,0,sn_133,,,,,,,,,,,,,,,"typo should be 
form wrong thread -> from wrong thread",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zleb:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@377c353d,,,,,,,,,"2022-12-12 18:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11640
Date: 2022-12-13 02:31:22 +0000;;;","2022-12-13 02:23;dukebot;Changeset: 3b1142a2
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-12-13 10:21:57 +0000
URL:       https://git.openjdk.org/jdk/commit/3b1142a280d66b2f5f7b4afbc76e940fdc30b463
;;;",,,,,,,,,,,,,,,,,,,
"vmTestbase/nsk/sysdict/vm/stress/chain/chain008/chain008.java fails with ""NoClassDefFoundError: Could not initialize class java.util.concurrent.ThreadLocalRandom""",JDK-8298596,5089475,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,coleenp,dcubed,dcubed,2022-12-12 10:13,2023-01-23 15:48,2023-10-01 09:56,2023-01-18 07:20,20,21,,,,,,21,hotspot,,0,classloading,noreg-self,problemlist,tier8,zgc,,,,,,,,,,,"The following test failed in the JDK21 CI:

vmTestbase/nsk/sysdict/vm/stress/chain/chain008/chain008.java

Here's a snippet from the log file:

#section:main
----------messages:(6/433)----------
command: main -XX:-UseGCOverheadLimit nsk.sysdict.share.ChainTest -stressHeap -useFatClass -jarpath leans.jar:fats.jar
reason: User specified action: run main/othervm -XX:-UseGCOverheadLimit nsk.sysdict.share.ChainTest -stressHeap -useFatClass -jarpath leans.jar${path.separator}fats.jar 
started: Mon Dec 12 06:13:57 UTC 2022
Mode: othervm [/othervm specified]
finished: Mon Dec 12 06:19:21 UTC 2022
elapsed time (seconds): 323.956
----------configuration:(0/0)----------
----------System.out:(79/5718)----------
name=nsk.sysdict.share.FatsInfo
The classHeight = 5 the loadersHeight = 90
Stress time: 300 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 1038090240
Sleep time: 500
Iterations: 0
Number of threads: 24
Run GC thread: false
Run mem diag thread: false
Run forever: false
Starting Thread[#33,nsk.sysdict.share.SysDictTest$Worker@6a43faaa,5,MainThreadGroup]
Starting Thread[#34,nsk.sysdict.share.SysDictTest$Worker@622fedf6,5,MainThreadGroup]
Starting Thread[#35,nsk.sysdict.share.SysDictTest$Worker@174ccdb3,5,MainThreadGroup]
Starting Thread[#36,nsk.sysdict.share.SysDictTest$Worker@6d418b15,5,MainThreadGroup]
Starting Thread[#37,nsk.sysdict.share.SysDictTest$Worker@711e8929,5,MainThreadGroup]
Starting Thread[#38,nsk.sysdict.share.SysDictTest$Worker@6cc38aa1,5,MainThreadGroup]
Starting Thread[#39,nsk.sysdict.share.SysDictTest$Worker@1d93f3df,5,MainThreadGroup]
Starting Thread[#40,nsk.sysdict.share.SysDictTest$Worker@7c6bca5b,5,MainThreadGroup]
Starting Thread[#41,nsk.sysdict.share.SysDictTest$Worker@7939433e,5,MainThreadGroup]
Starting Thread[#42,nsk.sysdict.share.SysDictTest$Worker@9df483a,5,MainThreadGroup]
Starting Thread[#43,nsk.sysdict.share.SysDictTest$Worker@b505fd5,5,MainThreadGroup]
Starting Thread[#44,nsk.sysdict.share.SysDictTest$Worker@29cb75f6,5,MainThreadGroup]
Starting Thread[#45,nsk.sysdict.share.SysDictTest$Worker@1ad8f342,5,MainThreadGroup]
Starting Thread[#46,nsk.sysdict.share.SysDictTest$Worker@6935e6bb,5,MainThreadGroup]
Starting Thread[#47,nsk.sysdict.share.SysDictTest$Worker@6012a2bf,5,MainThreadGroup]
Starting Thread[#48,nsk.sysdict.share.SysDictTest$Worker@12840f8e,5,MainThreadGroup]
Starting Thread[#49,nsk.sysdict.share.SysDictTest$Worker@4f9bbc7f,5,MainThreadGroup]
Starting Thread[#50,nsk.sysdict.share.SysDictTest$Worker@9dd9b09,5,MainThreadGroup]
Starting Thread[#51,nsk.sysdict.share.SysDictTest$Worker@7c2fd7d7,5,MainThreadGroup]
Starting Thread[#52,nsk.sysdict.share.SysDictTest$Worker@4e655fa3,5,MainThreadGroup]
Starting Thread[#53,nsk.sysdict.share.SysDictTest$Worker@5c0f7a54,5,MainThreadGroup]
Starting Thread[#54,nsk.sysdict.share.SysDictTest$Worker@396fb70f,5,MainThreadGroup]
Starting Thread[#55,nsk.sysdict.share.SysDictTest$Worker@3bfc5e9a,5,MainThreadGroup]
Starting Thread[#56,nsk.sysdict.share.SysDictTest$Worker@5f809601,5,MainThreadGroup]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298991,,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2zl6z:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-12 10:19;dcubed;I can't paste this part into the description note for some reason:

Exception in 
nsk.sysdict.share.SysDictTest$Worker@174ccdb3
java.lang.RuntimeException: java.lang.NoClassDefFoundError: Could not initialize class java.util.concurrent.ThreadLocalRandom
	at nsk.share.gc.gp.GarbageUtils.eatMemory(GarbageUtils.java:246)
	at nsk.share.gc.gp.GarbageUtils.eatMemory(GarbageUtils.java:196)
	at nsk.sysdict.share.SysDictTest$Worker.run(SysDictTest.java:159)
	at nsk.share.runner.ThreadsRunner$ManagedThread.run(ThreadsRunner.java:128)
	at java.base/java.lang.Thread.run(Thread.java:1623)
java.lang.RuntimeException: java.lang.NoClassDefFoundError: Could not initialize class java.util.concurrent.ThreadLocalRandom
	at nsk.share.gc.gp.GarbageUtils.eatMemory(GarbageUtils.java:246)
	at nsk.share.gc.gp.GarbageUtils.eatMemory(GarbageUtils.java:196)
	at nsk.sysdict.share.SysDictTest$Worker.run(SysDictTest.java:159)
	at nsk.share.runner.ThreadsRunner$ManagedThread.run(ThreadsRunner.java:128)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Failures summary:
java.lang.RuntimeException: java.lang.NoClassDefFoundError: Could not initialize class java.util.concurrent.ThreadLocalRandom
	at nsk.share.gc.gp.GarbageUtils.eatMemory(GarbageUtils.java:246)
	at nsk.share.gc.gp.GarbageUtils.eatMemory(GarbageUtils.java:196)
	at nsk.sysdict.share.SysDictTest$Worker.run(SysDictTest.java:159)
	at nsk.share.runner.ThreadsRunner$ManagedThread.run(ThreadsRunner.java:128)
	at java.base/java.lang.Thread.run(Thread.java:1623)
Caused by: java.lang.NoClassDefFoundError: Could not initialize class java.util.concurrent.ThreadLocalRandom
	at java.base/java.util.concurrent.ConcurrentHashMap.fullAddCount(ConcurrentHashMap.java:2584)
	at java.base/java.util.concurrent.ConcurrentHashMap.addCount(ConcurrentHashMap.java:2334)
	at java.base/java.util.concurrent.ConcurrentHashMap.replaceNode(ConcurrentHashMap.java:1173)
	at java.base/java.util.concurrent.ConcurrentHashMap.remove(ConcurrentHashMap.java:1102)
	at java.base/java.lang.invoke.MethodType$ConcurrentWeakInternSet.expungeStaleElements(MethodType.java:1459)
	at java.base/java.lang.invoke.MethodType$ConcurrentWeakInternSet.get(MethodType.java:1418)
	at java.base/java.lang.invoke.MethodType.makeImpl(MethodType.java:393)
	at java.base/java.lang.invoke.MethodType.insertParameterTypes(MethodType.java:500)
	at java.base/java.lang.invoke.MethodType.appendParameterTypes(MethodType.java:513)
	at java.base/java.lang.invoke.DirectMethodHandle.makePreparedLambdaForm(DirectMethodHandle.java:254)
	at java.base/java.lang.invoke.DirectMethodHandle.preparedLambdaForm(DirectMethodHandle.java:231)
	at java.base/java.lang.invoke.DirectMethodHandle.preparedLambdaForm(DirectMethodHandle.java:216)
	at java.base/java.lang.invoke.DirectMethodHandle.preparedLambdaForm(DirectMethodHandle.java:225)
	at java.base/java.lang.invoke.DirectMethodHandle.make(DirectMethodHandle.java:106)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(MethodHandles.java:4018)
	at java.base/java.lang.invoke.MethodHandles$Lookup.getDirectMethod(MethodHandles.java:3962)
	at java.base/java.lang.invoke.MethodHandles$Lookup.findStatic(MethodHandles.java:2598)
	at nsk.share.gc.gp.GarbageUtils.eatMemory(GarbageUtils.java:241)
	... 4 more
Caused by: java.lang.ExceptionInInitializerError: Exception java.lang.OutOfMemoryError: Java heap space [in thread ""nsk.sysdict.share.SysDictTest$Worker@1ad8f342""]
----------System.err:(18/833)----------
field = HEIGHT
field = WEIGHT
field = rootName
field = nodeNames
nsk.share.TestFailure: Test exit code: 97
	at nsk.share.test.Tests$TestRunner.execute(Tests.java:90)
	at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
	at nsk.share.test.Tests.runTest(Tests.java:102)
	at nsk.sysdict.share.ChainTest.main(ChainTest.java:42)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: nsk.share.TestFailure: Test exit code: 97
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: nsk.share.TestFailure: Test exit code: 97
----------rerun:(38/7965)*----------

Since this is a system dictionary test, I'm starting this bug in hotspot/runtime
for initial triage.;;;","2022-12-12 18:18;dholmes;Caused by: java.lang.ExceptionInInitializerError: Exception java.lang.OutOfMemoryError: Java heap space [in thread ""nsk.sysdict.share.SysDictTest$Worker@1ad8f342""] 

Looks like a simple OOM situation when running the test.;;;","2022-12-20 06:27;coleenp;These last two results have:
java.lang.OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects
And these are all ZGC.  I think ZGC should have a look first.
;;;","2022-12-21 07:32;tschatzl;Test also fails with ""failed reallocation of scalar objects"" like JDK-8298991.
;;;","2022-12-22 07:04;rcastanedalo;Closing this one as a duplicate of JDK-8298991, since the underlying cause of all failures appears to be the same (test runs out of memory).;;;","2022-12-22 07:07;coleenp;We should probably fix the test to have more memory or handle OOM better.  I'm going to open and send it back to runtime.  Oh fun.;;;","2022-12-22 07:07;coleenp;We need to fix this test then.  Help [~mseledtsov] !;;;","2022-12-22 07:16;coleenp;I still don't know why it only runs out of memory with ZGC.;;;","2022-12-22 07:18;rcastanedalo;Fair enough, setting back to 'runtime'. Please keep in mind that JDK-8298991 might address the same issue, to avoid work duplication.;;;","2022-12-22 07:22;rcastanedalo;[~coleenp] since you took on this bug, would you like to also look at JDK-8298991 which is a superset? (the same problem seems to exist in other vmTestbase/nsk/sysdict tests).;;;","2023-01-02 20:30;dholmes;Fixed up ""Duplicates"" link as this is no longer considered a duplicate as the test will also be modified.

Very unclear which bug to link CI test failures to.;;;","2023-01-17 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12043
Date: 2023-01-17 14:37:41 +0000;;;","2023-01-17 10:26;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12046
Date: 2023-01-17 18:12:51 +0000;;;","2023-01-18 07:20;dukebot;Changeset: c3242ee4
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2023-01-18 15:19:30 +0000
URL:       https://git.openjdk.org/jdk/commit/c3242ee452c25b5038283c68e65541122a10df0d
;;;",,,,,,,
Add java man page documentation for ChaCha20 and Poly1305 intrinsics,JDK-8298592,5089459,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jnimeh,jnimeh,jnimeh,2022-12-12 09:47,2023-01-05 03:05,2023-10-01 09:56,2022-12-29 14:36,,,,,,,,20,docs,,0,noreg-doc,,,,,,,,,,,,,,,"The recently-added intrinsics for the ChaCha20 and Poly1305 algorithms were integrated without changes to the java man page.  In the past this was done for other algorithms such as AES and the SHA2, and the same should be done for these two new algorithm intrinsics.",,,,,,,,,,JDK-8299527,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298893,JDK-8288047,JDK-8247645,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zl3f:",9223372036854775807,b30,,,,,,,,,,,"2022-12-28 08:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/78
Date: 2022-12-28 15:54:49 +0000;;;","2022-12-29 14:36;dukebot;Changeset: 37f8b059
Author:    Jamil Nimeh <jnimeh@openjdk.org>
Date:      2022-12-29 22:34:53 +0000
URL:       https://git.openjdk.org/jdk20/commit/37f8b059c1c9245e7f3af90d6ed47c862fee54a3
;;;",,,,,,,,,,,,,,,,,,,
java/net/SctpSanity.java fail with NoClassDefFoundError: sun/nio/ch/sctp/UnsupportedUtil,JDK-8298589,5089455,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,pminborg,dfuchs,dfuchs,2022-12-12 08:15,2023-08-08 14:10,2023-10-01 09:56,2022-12-12 09:23,21,,,,,,,21,core-libs,,0,regression,tier2,,,,,,,,,,,,,,"----------System.out:(0/0)----------
----------System.err:(14/852)----------
java.lang.NoClassDefFoundError: sun/nio/ch/sctp/UnsupportedUtil
	at jdk.sctp/sun.nio.ch.sctp.SctpChannelImpl.<init>(SctpChannelImpl.java:48)
	at jdk.sctp/com.sun.nio.sctp.SctpChannel.open(SctpChannel.java:170)
	at SctpSanity.testSctpChannel(SctpSanity.java:58)
	at SctpSanity.main(SctpSanity.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297822,,,,,,,,,,,,,,,,,,,,,,,os_x,,,,,,"0|i2zl2j:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-12-12 08:21;dfuchs;Probably a regression caused by JDK-8297822;;;","2022-12-12 09:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11636
Date: 2022-12-12 16:56:22 +0000;;;","2022-12-12 09:23;dukebot;Changeset: 9ff85f65
Author:    Per Minborg <pminborg@openjdk.org>
Committer: Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-12-12 17:22:17 +0000
URL:       https://git.openjdk.org/jdk/commit/9ff85f65774c0a81ed10500d3591cd79b440aed0
;;;","2022-12-12 11:58;dcubed;This fix has been integrated in jdk-21+2-32.;;;",,,,,,,,,,,,,,,,,
WebSockets: HandshakeUrlEncodingTest unnecessarily depends on a response body,JDK-8298588,5089454,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,sgehwolf,sgehwolf,2022-12-12 07:59,2023-01-03 11:35,2023-10-01 09:56,2022-12-16 04:31,,,,,,,,21,core-libs,,0,hgupdate-sync,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,,,,,,,,,,"According to rfc6455[1], the close frame MAY contain a body, i.e. it is considered optional. Although, due to JDK-8240666, in most recent JDKs the request body is being populated. HandshakeUrlEncodingTest.java introduced with JDK-8245245 relies on the fact that a body is being populated and parses its contents.

However, older JDKs (e.g. JDK 11) do not populate the body and the test wrongly fails for that reason. It would be better to model the test according to the optional nature of a content body being present or not, without sacrificing assertions the test was meant to do (verify a fix of JDK-8245245 is present).

[1] https://www.rfc-editor.org/rfc/rfc6455.html#section-5.5.1",,,,,,,,,,JDK-8299382,JDK-8299262,JDK-8299195,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zl2b:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-12-12 07:59;sgehwolf;Assigning to myself on behalf of Karm Babacek who is working on this.;;;","2022-12-12 23:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11486
Date: 2022-12-02 15:55:30 +0000;;;","2022-12-16 04:31;dukebot;Changeset: 909d0cb4
Author:    Michal Karm Babacek <karm@redhat.com>
Committer: Jaikiran Pai <jpai@openjdk.org>
Date:      2022-12-16 12:28:39 +0000
URL:       https://git.openjdk.org/jdk/commit/909d0cb4d9475fd367b8bc64a6b50c5a324e9a01
;;;","2022-12-18 09:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1558
Date: 2022-11-30 01:52:47 +0000;;;","2022-12-20 08:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/63
Date: 2022-12-20 16:09:05 +0000;;;","2022-12-20 08:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/958
Date: 2022-12-20 16:09:12 +0000;;;","2022-12-21 02:59;clanger;Fix request (17u)
Backport this test enhancement for symmetry with desired backport of JDK-8245245, which would incorporate this test fix, too. Patch applies cleanly. GHA and SAP nightlies successful.;;;","2022-12-21 11:19;phh;Fix Request (11u).

On behalf of Michal Karm Babacek.

Integrated into https://git.openjdk.org/jdk11u-dev/pull/1558 per Severin Gehwolf.;;;","2022-12-21 15:52;dukebot;Changeset: 92fe304f
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-12-21 10:57:24 +0000
URL:       https://git.openjdk.org/jdk/commit/92fe304f08b406cb0f87cf32497aea2f5ce9c5ea
;;;",,,,,,,,,,,,
Fastdebug build fails after JDK-8296389,JDK-8298568,5089433,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,fyang,fyang,fyang,2022-12-12 04:25,2023-04-27 07:11,2023-10-01 09:56,2022-12-12 16:59,17,21,,,,,,21,hotspot,,0,jdk17u-fix-request,jdk17u-fix-yes,jdk20u-fix-request,jdk20u-fix-SQE-ok-next,jdk20u-fix-yes,noreg-build,oraclejdk-na,oracle-triage-11,oracle-triage-17,oracle-triage-21,,,,,,"Compiling up to 330 files for java.management
Updating support/src.zip
Updating support/modules_libs/java.base/server/libjvm.so due to 8 file(s)
/home/realfyang/openjdk-jdk/src/hotspot/share/gc/shenandoah/c2/shenandoahSupport.cpp: In function 'bool has_never_branch(Node*)':
/home/realfyang/openjdk-jdk/src/hotspot/share/gc/shenandoah/c2/shenandoahSupport.cpp:2005:92: error: 'class Node' has no member named 'isNeverBranch'; did you mean 'is_NeverBranch'?
 2005 |     if (in != NULL && in->Opcode() == Op_Halt && in->in(0)->is_Proj() && in->in(0)->in(0)->isNeverBranch()) {
      |                                                                                            ^~~~~~~~~~~~~
      |                                                                                            is_NeverBranch
make[3]: *** [lib/CompileJvm.gmk:147: /home/realfyang/openjdk-jdk/build/linux-aarch64-server-slowdebug/hotspot/variant-server/libjvm/objs/shenandoahSupport.o] Error 1
make[3]: *** Waiting for unfinished jobs....
make[2]: *** [make/Main.gmk:252: hotspot-server-libs] Error 2

ERROR: Build failed for target 'images' in configuration 'linux-aarch64-server-slowdebug' (exit code 2)
Stopping javac server

=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_shenandoahSupport.o:
/home/realfyang/openjdk-jdk/src/hotspot/share/gc/shenandoah/c2/shenandoahSupport.cpp: In function 'bool has_never_branch(Node*)':
/home/realfyang/openjdk-jdk/src/hotspot/share/gc/shenandoah/c2/shenandoahSupport.cpp:2005:92: error: 'class Node' has no member named 'isNeverBranch'; did you mean 'is_NeverBranch'?
 2005 |     if (in != NULL && in->Opcode() == Op_Halt && in->in(0)->is_Proj() && in->in(0)->in(0)->isNeverBranch()) {
      |                                                                                            ^~~~~~~~~~~~~
      |                                                                                            is_NeverBranch

* All command lines available in /home/realfyang/openjdk-jdk/build/linux-aarch64-server-slowdebug/make-support/failure-logs.
=== End of repeated output ===

No indication of failed target found.
HELP: Try searching the build log for '] Error'.
HELP: Run 'make doctor' to diagnose build problems.

make[1]: *** [/home/realfyang/openjdk-jdk/make/Init.gmk:320: main] Error 2
make: *** [/home/realfyang/openjdk-jdk/make/Init.gmk:186: images] Error 2

Proposed fix is trivial:
diff --git a/src/hotspot/share/gc/shenandoah/c2/shenandoahSupport.cpp b/src/hotspot/share/gc/shenandoah/c2/shenandoahSupport.cpp
index 31c480a488a..d443bb8aa33 100644
--- a/src/hotspot/share/gc/shenandoah/c2/shenandoahSupport.cpp
+++ b/src/hotspot/share/gc/shenandoah/c2/shenandoahSupport.cpp
@@ -2002,7 +2002,7 @@ Node* ShenandoahIUBarrierNode::Identity(PhaseGVN* phase) {
 static bool has_never_branch(Node* root) {
   for (uint i = 1; i < root->req(); i++) {
     Node* in = root->in(i);
-    if (in != NULL && in->Opcode() == Op_Halt && in->in(0)->is_Proj() && in->in(0)->in(0)->isNeverBranch()) {
+    if (in != NULL && in->Opcode() == Op_Halt && in->in(0)->is_Proj() && in->in(0)->in(0)->is_NeverBranch()) {
       return true;
     }
   }",,,,,,,,,,JDK-8305850,JDK-8307042,JDK-8300221,JDK-8299033,,,,,,,,,,,,,,,,,,,,,,JDK-8298582,,,,,,,,,JDK-8296389,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zkxn:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-12 04:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11631
Date: 2022-12-12 12:37:51 +0000;;;","2022-12-12 16:59;dukebot;Changeset: 173778e2
Author:    Fei Yang <fyang@openjdk.org>
Date:      2022-12-13 00:57:02 +0000
URL:       https://git.openjdk.org/jdk/commit/173778e2fee58e47d35197b78eb23f46154b5b2b
;;;","2022-12-12 21:13;dlong;ILW = build failure; shenandoah only; no workaround = MMH = P3;;;","2023-01-11 07:39;goetz;Fix request [17u]

I backport this for parity with 17.0.7-oracle.
Included in backport of 8296389.;;;","2023-01-11 07:50;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1059
Date: 2023-01-11 15:29:29 +0000;;;","2023-04-04 06:28;thartmann;Fix Request (JDK 20u)
Fixes a build issue The fix is low risk, was already backported to Oracle JDK 17u and tested in the JDK 21 and 17u CIs. The backport applies cleanly.;;;","2023-04-04 06:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20u/pull/50
Date: 2023-04-04 13:28:13 +0000;;;","2023-04-07 02:40;shade;Current jdk20u is broken without this backport. I think JDK-8296389 went into jdk20u, but this one is still in approval queue.
Going forward, please make sure that dependent fixes are approved too, and push all of them together? Thanks!;;;","2023-04-10 23:08;thartmann;Yes, I missed that one initially. Sorry for that.;;;",,,,,,,,,,,,
Clean up raw type warnings in base in bindings and collections packages,JDK-8298528,5089388,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2022-12-11 12:10,2023-09-12 07:14,2023-10-01 09:56,2023-02-14 07:12,jfx19,,,,,,,jfx21,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,Fix raw type warnings and related clean-ups.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297300,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zknn:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2022-12-11 12:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/972
Date: 2022-12-11 20:12:17 +0000;;;","2023-02-14 07:12;dukebot;Changeset: d1572f40
Author:    John Hendrikx <jhendrikx@openjdk.org>
Date:      2023-02-14 15:10:47 +0000
URL:       https://git.openjdk.org/jfx/commit/d1572f40b0cf65a34d30963c0b93b79c9ab91a8c
;;;",,,,,,,,,,,,,,,,,,,
Cygwin's uname -m returns different string than before,JDK-8298527,5089387,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,clanger,clanger,clanger,2022-12-11 06:09,2022-12-23 00:50,2023-10-01 09:56,2022-12-13 23:33,,,,,,,,20,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"After updating cygwin to the latest version, I get a different for uname -m than before which breaks configure.

See:

$ cygcheck -V
cygcheck (cygwin) 3.3.6
System Checker for Cygwin
Copyright (C) 1998 - 2022 Cygwin Authors
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

$ uname -m
x86_64

Versus

$ cygcheck -V
cygcheck (cygwin) 3.4.1
System Checker for Cygwin
Copyright (C) 1998 - 2022 Cygwin Authors
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

$ uname -m
.x86_64

Update: It has been fixed in the subsequent version of cygwin:

$ cygcheck -V
cygcheck (cygwin) 3.4.2
System Checker for Cygwin
Copyright (C) 1998 - 2022 Cygwin Authors
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

$ uname -m
x86_64
",,,,,,,,,,JDK-8299303,JDK-8298802,JDK-8299263,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zknf:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-12-11 06:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/15
Date: 2022-12-11 14:13:14 +0000;;;","2022-12-13 23:33;dukebot;Changeset: 51f0a1ce
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-12-14 07:32:28 +0000
URL:       https://git.openjdk.org/jdk20/commit/51f0a1ce4b0d72cf7e82e01f7014274d8b7d1575
;;;","2022-12-14 01:21;clanger;Fix request (17u)
Fixes a potential build breakage. Patch is tested in GHA and SAP's nightlies.;;;","2022-12-14 01:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/106
Date: 2022-12-14 09:19:23 +0000;;;","2022-12-14 01:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u/pull/362
Date: 2022-12-14 09:30:07 +0000;;;","2022-12-20 09:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/959
Date: 2022-12-20 17:09:53 +0000;;;","2022-12-22 02:41;clanger;Fix request (11u)
Same reasoning as for 17u. The 17u patch applies cleanly. Low risk, tested GHA and SAP nightlies.;;;","2022-12-22 02:44;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1607
Date: 2022-12-22 10:34:35 +0000;;;",,,,,,,,,,,,,
JFR: Generate missing filename for time-bound recordings,JDK-8298526,5089386,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,pxie,pxie,2022-12-10 23:32,2023-01-03 11:33,2023-10-01 09:56,2022-12-20 05:09,,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,"start jfr with duration
```
jcmd 31514 JFR.start duration=30s
31514:
Started recording 1.

Use jcmd 31514 JFR.stop name=1 filename=FILEPATH to copy recording data to file.
```


use JFR.check after 30s
```
jcmd 31514 JFR.check
31514:
Recording 1: name=1 duration=30s (stopped)
```

Unable to close the stopped jfr
```
jcmd 31514 JFR.stop name=1 
31514:
Can't stop an already stopped recording.
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zkn7:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-10 23:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11625
Date: 2022-12-11 07:49:45 +0000;;;","2022-12-19 06:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11721
Date: 2022-12-19 14:00:14 +0000;;;","2022-12-20 05:09;dukebot;Changeset: de8153ca
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-12-20 13:07:25 +0000
URL:       https://git.openjdk.org/jdk/commit/de8153cab76606350eb0ecc4302b23c52f0565a6
;;;","2022-12-28 04:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/992
Date: 2022-12-28 11:56:11 +0000;;;","2022-12-28 04:53;pxie;Fix request jdk17u

I'd like to backport this patch to jdk17u.
It will generate  filename for time-bound recordings
The patch apply clean.
This risk is low.
I've already run the test case in jdk17u ;;;","2022-12-28 05:34;egahlin;This is more of an enhancement than a bug as it changes how -XX:StartFlightRecording and icmd JFR.start work. This is not a low risk fix as it may impact scripts. There is also a very simple workaround, specify the filename manually, i.e -XX:StartFlightRecording:filename=recording.jfr

If backporting this issue at all, we should wait until we are sure it works as expected in customer installations, which means waiting at least 6 months after JDK 21 has been released. ;;;","2022-12-28 06:33;pxie;hi,Erik
-XX:StartFlightRecording: New and old changes in the scene is whether the file is generated
The Jcmd returns different information

Your suggestion is more reasonable.
Thanks;;;",,,,,,,,,,,,,,
"javadoc crashes with ""UnsupportedOperationException: Not yet implemented"" in SeeTaglet.inherit",JDK-8298525,5089385,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,prappo,jpai,jpai,2022-12-10 22:30,2023-01-11 22:56,2023-10-01 09:56,2023-01-05 14:45,20,,,,,,,20,tools,,0,apache-ant-found,,,,,,,,,,,,,,,"Building Apache Ant project against the latest EA version of JDK 20, results in the following stacktrace:

 java.lang.UnsupportedOperationException: Not yet implemented
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.SeeTaglet.inherit(SeeTaglet.java:54)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.InheritDocTaglet.retrieveInheritedDocumentation(InheritDocTaglet.java:106)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.InheritDocTaglet.getInlineTagOutput(InheritDocTaglet.java:136)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.TagletWriter.getInlineTagOutput(TagletWriter.java:358)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.getInlineTagOutput(HtmlDocletWriter.java:372)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitInheritDoc(HtmlDocletWriter.java:1345)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter$2.visitInheritDoc(HtmlDocletWriter.java:1225)
   	at jdk.compiler/com.sun.tools.javac.tree.DCTree$DCInheritDoc.accept(DCTree.java:731)
   	at jdk.compiler/com.sun.source.util.SimpleDocTreeVisitor.visit(SimpleDocTreeVisitor.java:79)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.commentTagsToContent(HtmlDocletWriter.java:1454)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.TagletWriterImpl.seeTagOutput(TagletWriterImpl.java:444)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.TagletWriterImpl.seeTagOutput(TagletWriterImpl.java:360)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.SeeTaglet.getAllBlockTagOutput(SeeTaglet.java:72)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.taglets.TagletWriter.getBlockTagOutput(TagletWriter.java:321)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.getBlockTagOutput(HtmlDocletWriter.java:355)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.getBlockTagOutput(HtmlDocletWriter.java:341)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter.addTagsInfo(HtmlDocletWriter.java:327)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.MethodWriterImpl.addTags(MethodWriterImpl.java:164)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MethodBuilder.buildTagInfo(MethodBuilder.java:185)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MethodBuilder.buildMethodDoc(MethodBuilder.java:125)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.MethodBuilder.build(MethodBuilder.java:103)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildMethodDetails(ClassBuilder.java:370)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildMemberDetails(ClassBuilder.java:318)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.buildClassDoc(ClassBuilder.java:122)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.builders.ClassBuilder.build(ClassBuilder.java:98)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:383)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.generateClassFiles(AbstractDoclet.java:281)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:199)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.startGeneration(AbstractDoclet.java:207)
   	at jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.AbstractDoclet.run(AbstractDoclet.java:110)
   	at jdk.javadoc/jdk.javadoc.doclet.StandardDoclet.run(StandardDoclet.java:103)
   	at jdk.javadoc/jdk.javadoc.internal.tool.Start.parseAndExecute(Start.java:574)
   	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:397)
   	at jdk.javadoc/jdk.javadoc.internal.tool.Start.begin(Start.java:346)
   	at jdk.javadoc/jdk.javadoc.internal.tool.Main.execute(Main.java:57)
   	at jdk.javadoc/jdk.javadoc.internal.tool.Main.main(Main.java:46)

Building the same project against previous versions of Java, including Java 19, works fine.

Steps to reproduce:
- Clone the Ant project from https://github.com/apache/ant/
- Set JAVA_HOME environment variable to the JDK 20 EA:
export JAVA_HOME=/path/to/jdk-20
- Run the following commands from the root of the cloned repo:
./bootstrap.sh
./build.sh clean javadocs

You will notice the exception stacktrace. To try against any other version of Java, just (re)set the JAVA_HOME environment variable and redo the build steps.

","The issue happens on all OS (tried on macos, windows and linux).",,,,,,,,,JDK-8299764,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zkmz:",9223372036854775807,b31,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7900061a,,,,,,,,,"2022-12-10 22:32;jpai;Debugging the latest mainline code of JDK (it's reproducible on that too), it appears the javadoc in Ant that triggers this exception is this https://github.com/apache/ant/blob/master/src/main/org/apache/tools/ant/listener/AnsiColorLogger.java#L202 which looks like:

    /**
     * @see DefaultLogger#printMessage
     * {@inheritDoc}.
     */
    @Override
    protected void printMessage(final String message,
                                final PrintStream stream,
                                final int priority) {
...
;;;","2022-12-10 22:57;jpai;Here's the simplest reproducer which reproduces this against JDK 20 EA and passes in older versions.

Create A.java:

public class A {

	/**
	 * Foo method
	 */
	 public void foo() {
		System.out.println(""A.foo()"");
	 }
}

Create B.java

public class B extends A {


	/**
	 * @see A#foo
	 * {@inheritDoc}
	 */
	@Override
	public void foo() {
		System.out.println(""B.foo()"");
	}
}

Run the following command:

<path-to-jdk>/bin/javadoc ./*.java

Against JDK 20 EA (and latest mainline), this throws the exception noted in this issue's description.;;;","2022-12-14 08:25;prappo;While this needs to be an error, not a crash, that doc comment is corrupted.

What's the semantics of that doc comment? The way that doc comment is composed indicates that {@inheritDoc} belongs to the @see tag, which it is not allowed to. That {@inheritDoc} cannot possibly belong to the method main description, because the main description cannot continue after block tags.;;;","2022-12-14 08:35;prappo;https://github.com/apache/ant/blame/cf6965b58b83f647640c0d9dc4f18683078de6f8/src/main/org/apache/tools/ant/listener/AnsiColorLogger.java suggests that two comments were merged into one:

    /**
     * @see DefaultLogger#printMessage
     */

    /** {@inheritDoc}. */
    @Override
    protected void printMessage(final String message,

It would've been harmless, if they had been arranged the other way around:

    /**
     * {@inheritDoc} 
     * @see DefaultLogger#printMessage
     */;;;","2023-01-05 07:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/84
Date: 2023-01-05 15:25:45 +0000;;;","2023-01-05 14:45;dukebot;Changeset: 284c94e2
Author:    Pavel Rappo <prappo@openjdk.org>
Date:      2023-01-05 22:43:20 +0000
URL:       https://git.openjdk.org/jdk20/commit/284c94e20d49b6b6a09b1daa398abbbe4d049de3
;;;",,,,,,,,,,,,,,,
C2: assert(found_opaque == res) failed: wrong pattern,JDK-8298520,5089376,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,dlong,dlong,2022-12-09 23:51,2022-12-19 12:40,2023-10-01 09:56,2022-12-14 02:05,20,21,,,,,,20,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-21,regression,tier8,,,,,,,,,"java/util/Arrays/Sorting.java crashed with:

#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S8428/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1445d165-80b5-4b14-92d8-7aae86fb614c/runs/014b3580-b150-4560-8dbb-4e817bd2c9ad/workspace/open/src/hotspot/share/opto/loopnode.cpp:5488), pid=3005243, tid=3005258
#  assert(found_opaque == res) failed: wrong pattern
#
# JRE version: Java(TM) SE Runtime Environment (20.0+27) (fastdebug build 20-ea+27-2213)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+27-2213, compiled mode, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x1499d75]  CountedLoopNode::is_canonical_loop_entry()+0x1e5

This is after the fix for JDK-8269820, which is a dup for JDK-8284301, which had the same error message.

VM options in one of the crashes:

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -XX:+DeoptimizeALot",,,,,,,,,,JDK-8298803,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298919,,,,,,,JDK-8269820,,,,,"2022-12-12 03:38;thartmann;hs_err_pid24526.log;https://bugs.openjdk.org/secure/attachment/101995/hs_err_pid24526.log","2022-12-11 23:50;thartmann;hs_err_pid3005243.log;https://bugs.openjdk.org/secure/attachment/101991/hs_err_pid3005243.log","2022-12-12 03:38;thartmann;replay_pid24526.log;https://bugs.openjdk.org/secure/attachment/101994/replay_pid24526.log","2022-12-11 23:50;thartmann;replay_pid3005243.log;https://bugs.openjdk.org/secure/attachment/101990/replay_pid3005243.log",,,,,,,,,,,,b27,20,,,,,,,,"0|i2zkkz:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-11 23:51;thartmann;I attached replay and hs_err files. Roland, could you please have a look?;;;","2022-12-12 03:35;thartmann;This does not reproduce anymore after JDK-8292289 in jdk-21+1-5 but it does reproduce with latest JDK 20 (jdk-20+28-2221).

open/test/jdk/java/util/Arrays/Sorting.java

-Xcomp -XX:+CreateCoredumpOnCrash -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:-TieredCompilation -XX:+DeoptimizeALot

I attached another hs_err/replay from latest JDK 20 (replay_pid24526.log).;;;","2022-12-12 03:40;thartmann;ILW = Assert during C2 compilation, with single test and stress flags, no workaround but disable compilation of affected method = HMM = P3;;;","2022-12-12 03:54;thartmann;I verified that this is a regression from JDK-8269820 in JDK 20 (jdk-20+27-2173).;;;","2022-12-13 06:56;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/24
Date: 2022-12-13 14:49:31 +0000;;;","2022-12-14 02:05;dukebot;Changeset: 27d49711
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-12-14 10:03:36 +0000
URL:       https://git.openjdk.org/jdk20/commit/27d4971182ab1cbe7e6bc40cd22c1c70661a3ab2
;;;","2022-12-14 10:12;dcubed;This bug is fixed in jdk-20+28-2233.;;;",,,,,,,,,,,,,,
vmTestbase/nsk/jdi/EventRequestManager/threadDeathRequests/thrdeathreq002/TestDescription.java fails with usage tracker,JDK-8298514,5089366,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,amenkov,amenkov,2022-12-09 14:26,2022-12-19 12:39,2023-10-01 09:56,2022-12-13 11:50,,,,,,,,21,core-svc,,0,noreg-self,,,,,,,,,,,,,,,"=> nsk/jdi/EventRequestManager/threadDeathRequests/thrdeathreq002      TESTING BEGINS
--> debugger: breakpointForCommunication
debugee.stderr> **> debuggee: debuggee started!

=> nsk/jdi/EventRequestManager/threadDeathRequests/thrdeathreq002 :::::: case: # 0
--> debugger: ......creating ThreadDeathRequests
--> debugger: ......checking up on returned List after creating new ThreadDeathRequest
--> debugger:       enabling created ThreadDeathRequest
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger: ......checking up on returned List after creating new ThreadDeathRequest
--> debugger:       enabling created ThreadDeathRequest
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger: ......checking up on returned List after creating new ThreadDeathRequest
--> debugger:       enabling created ThreadDeathRequest
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger: ......checking up on returned List after creating new ThreadDeathRequest
--> debugger:       enabling created ThreadDeathRequest
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger: ......checking up on returned List after creating new ThreadDeathRequest
--> debugger:       enabling created ThreadDeathRequest
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger: ......checking up on returned List after creating new ThreadDeathRequest
--> debugger:       enabling created ThreadDeathRequest
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger: ......checking up on returned List after creating new ThreadDeathRequest
--> debugger:       enabling created ThreadDeathRequest
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger: ......checking up on returned List after creating new ThreadDeathRequest
--> debugger:       enabling created ThreadDeathRequest
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger: ......checking up on returned List after creating new ThreadDeathRequest
--> debugger:       enabling created ThreadDeathRequest
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger: ......checking up on returned List after creating new ThreadDeathRequest
--> debugger:       enabling created ThreadDeathRequest
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger: ......deleting ThreadDeathRequests
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger:       removing item from the List; UnsupportedOperationException is expected
--> debugger:         UnsupportedOperationException 
--> debugger: breakpointForCommunication
# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** event 'ThreadDeathEvent in thread UsageTracker' IS NOT a breakpoint **
The following stacktrace is for failure analysis.
nsk.share.TestFailure: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** event 'ThreadDeathEvent in thread UsageTracker' IS NOT a breakpoint **
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.JDIBase.log3(JDIBase.java:69)
	at nsk.jdi.EventRequestManager.threadDeathRequests.thrdeathreq002.runTest(thrdeathreq002.java:214)
	at nsk.jdi.EventRequestManager.threadDeathRequests.thrdeathreq002.runThis(thrdeathreq002.java:144)
	at nsk.jdi.EventRequestManager.threadDeathRequests.thrdeathreq002.run(thrdeathreq002.java:90)
	at nsk.jdi.EventRequestManager.threadDeathRequests.thrdeathreq002.main(thrdeathreq002.java:83)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
# ERROR: ##> debugger: test phase has not finished normally: debuggee is still alive
--> debugger: ......forcing: vm.exit();
TEST FAILED
# ERROR: binder> Debugee VM has not exited correctly: trying to kill it
The following stacktrace is for failure analysis.
nsk.share.TestFailure: binder> Debugee VM has not exited correctly: trying to kill it
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jpda.DebugeeProcess.complain(DebugeeProcess.java:455)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:435)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:464)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
------------ Try to print debuggee threads before killing process ------------
The following stacktrace is for failure analysis.
nsk.share.TestFailure: 
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.Debugee.printThreadsInfo(Debugee.java:626)
	at nsk.share.jdi.Debugee.killDebugee(Debugee.java:637)
	at nsk.share.jdi.LocalLaunchedDebugee.killDebugee(Binder.java:1038)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:436)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:464)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
com.sun.jdi.VMDisconnectedException: connection is closed
	at jdk.jdi/com.sun.tools.jdi.TargetVM.send(TargetVM.java:293)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.sendToTarget(VirtualMachineImpl.java:1168)
	at jdk.jdi/com.sun.tools.jdi.PacketStream.send(PacketStream.java:79)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$AllThreads.enqueueCommand(JDWP.java:314)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$AllThreads.process(JDWP.java:305)
	at jdk.jdi/com.sun.tools.jdi.VMState.allThreads(VMState.java:207)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.allThreads(VirtualMachineImpl.java:458)
	at nsk.share.jdi.Debugee.printThreadsInfo(Debugee.java:595)
	at nsk.share.jdi.Debugee.killDebugee(Debugee.java:637)
	at nsk.share.jdi.LocalLaunchedDebugee.killDebugee(Binder.java:1038)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:436)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:464)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
binder> Killing debuggee by forcing target VM to exit
binder> Ignore VMDisconnectedException while forcing debuggee VM to exit:
	com.sun.jdi.VMDisconnectedException: connection is closed
Killing debugee VM process


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** event 'ThreadDeathEvent in thread UsageTracker' IS NOT a breakpoint **
# ERROR: ##> debugger: test phase has not finished normally: debuggee is still alive
# ERROR: binder> Debugee VM has not exited correctly: trying to kill it",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279359,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zkir:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-12-09 15:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11621
Date: 2022-12-09 23:21:04 +0000;;;","2022-12-10 11:30;iris;The set of ""noreg-"" suffixes is defined here:  https://openjdk.org/guide/#noreg ,  Based on the PR, I'm guessing that ""noreg-self"" was the intent.  Please modify as necessary.;;;","2022-12-13 11:50;dukebot;Changeset: a120764c
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-12-13 19:49:16 +0000
URL:       https://git.openjdk.org/jdk/commit/a120764cc4636b3b0cd128d43de148bdc3f4513b
;;;",,,,,,,,,,,,,,,,,,
vmTestbase/nsk/jdi/EventSet/suspendPolicy/suspendpolicy009/TestDescription.java fails with usage tracker,JDK-8298513,5089365,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,amenkov,amenkov,amenkov,2022-12-09 14:24,2022-12-19 12:39,2023-10-01 09:56,2022-12-13 11:52,,,,,,,,21,core-svc,,0,noreg-self,,,,,,,,,,,,,,,"=> nsk/jdi/EventSet/suspendPolicy/suspendpolicy009      TESTING BEGINS
--> debugger: breakpointForCommunication
debugee.stderr> **> debuggee: debuggee started!

=> nsk/jdi/EventSet/suspendPolicy/suspendpolicy009 :::::: case: # 0
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread0
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread0
--> debugger: ......got : instanceof ThreadDeathEvent
--> debugger: breakpointForCommunication

=> nsk/jdi/EventSet/suspendPolicy/suspendpolicy009 :::::: case: # 1
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread1
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread1
--> debugger: ......got : instanceof ThreadDeathEvent
--> debugger: breakpointForCommunication

=> nsk/jdi/EventSet/suspendPolicy/suspendpolicy009 :::::: case: # 2
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread2
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread2
--> debugger: ......got : instanceof ThreadDeathEvent
--> debugger: breakpointForCommunication

=> nsk/jdi/EventSet/suspendPolicy/suspendpolicy009 :::::: case: # 3
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread3
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread3
--> debugger: ......got : instanceof ThreadDeathEvent
--> debugger: breakpointForCommunication

=> nsk/jdi/EventSet/suspendPolicy/suspendpolicy009 :::::: case: # 4
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread4
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread4
# ERROR: ##> debugger: ERROR: new event is not ThreadDeathEvent
The following stacktrace is for failure analysis.
nsk.share.TestFailure: ##> debugger: ERROR: new event is not ThreadDeathEvent
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.JDIBase.log3(JDIBase.java:69)
	at nsk.jdi.EventSet.suspendPolicy.suspendpolicy009.testRun(suspendpolicy009.java:377)
	at nsk.jdi.EventSet.suspendPolicy.suspendpolicy009.runTest(suspendpolicy009.java:208)
	at nsk.jdi.EventSet.suspendPolicy.suspendpolicy009.runThis(suspendpolicy009.java:151)
	at nsk.jdi.EventSet.suspendPolicy.suspendpolicy009.run(suspendpolicy009.java:94)
	at nsk.jdi.EventSet.suspendPolicy.suspendpolicy009.main(suspendpolicy009.java:87)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
	at java.base/java.lang.Thread.run(Thread.java:833)
debugee.stderr> **> debuggee:   'run': enter  :: threadName == thread5
debugee.stderr> **> debuggee:   'run': exit   :: threadName == thread5
--> debugger: breakpointForCommunication
# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** event 'ThreadDeathEvent in thread thread5' IS NOT a breakpoint **
# ERROR: ##> debugger: test phase has not finished normally: debuggee is still alive
--> debugger: ......forcing: vm.exit();
TEST FAILED
# ERROR: binder> Debugee VM has not exited correctly: trying to kill it
The following stacktrace is for failure analysis.
nsk.share.TestFailure: binder> Debugee VM has not exited correctly: trying to kill it
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jpda.DebugeeProcess.complain(DebugeeProcess.java:455)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:435)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:464)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
------------ Try to print debuggee threads before killing process ------------
The following stacktrace is for failure analysis.
nsk.share.TestFailure: 
	at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:432)
	at nsk.share.Log.complain(Log.java:403)
	at nsk.share.jdi.Debugee.printThreadsInfo(Debugee.java:626)
	at nsk.share.jdi.Debugee.killDebugee(Debugee.java:637)
	at nsk.share.jdi.LocalLaunchedDebugee.killDebugee(Binder.java:1038)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:436)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:464)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
com.sun.jdi.VMDisconnectedException: connection is closed
	at jdk.jdi/com.sun.tools.jdi.TargetVM.send(TargetVM.java:293)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.sendToTarget(VirtualMachineImpl.java:1168)
	at jdk.jdi/com.sun.tools.jdi.PacketStream.send(PacketStream.java:79)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$AllThreads.enqueueCommand(JDWP.java:314)
	at jdk.jdi/com.sun.tools.jdi.JDWP$VirtualMachine$AllThreads.process(JDWP.java:305)
	at jdk.jdi/com.sun.tools.jdi.VMState.allThreads(VMState.java:207)
	at jdk.jdi/com.sun.tools.jdi.VirtualMachineImpl.allThreads(VirtualMachineImpl.java:458)
	at nsk.share.jdi.Debugee.printThreadsInfo(Debugee.java:595)
	at nsk.share.jdi.Debugee.killDebugee(Debugee.java:637)
	at nsk.share.jdi.LocalLaunchedDebugee.killDebugee(Binder.java:1038)
	at nsk.share.jpda.DebugeeProcess.close(DebugeeProcess.java:436)
	at nsk.share.jpda.DebugeeProcess.finalize(DebugeeProcess.java:464)
	at nsk.share.FinalizableObject.finalizeAtExit(FinalizableObject.java:48)
	at nsk.share.Finalizer$FinalizerThread.run(Finalizer.java:122)
binder> Killing debuggee by forcing target VM to exit
binder> Ignore VMDisconnectedException while forcing debuggee VM to exit:
	com.sun.jdi.VMDisconnectedException: connection is closed
Killing debugee VM process


#>  
#>  SUMMARY: Following errors occured
#>      during test execution:
#>  
# ERROR: ##> debugger: ERROR: new event is not ThreadDeathEvent
# ERROR: ##> debugger: ERROR: Exception : nsk.share.jdi.JDITestRuntimeException: JDITestRuntimeException : ** event 'ThreadDeathEvent in thread thread5' IS NOT a breakpoint **
# ERROR: ##> debugger: test phase has not finished normally: debuggee is still alive
# ERROR: binder> Debugee VM has not exited correctly: trying to kill it",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8279359,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zkij:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3397f701,,,,,,,,,"2022-12-09 15:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11620
Date: 2022-12-09 23:18:23 +0000;;;","2022-12-10 11:31;iris;The set of ""noreg-"" suffixes is defined here:  https://openjdk.org/guide/#noreg ,  Based on the PR, I'm guessing that ""noreg-self"" was the intent.  Please modify as necessary.
;;;","2022-12-13 11:52;dukebot;Changeset: 220781fa
Author:    Alex Menkov <amenkov@openjdk.org>
Date:      2022-12-13 19:50:09 +0000
URL:       https://git.openjdk.org/jdk/commit/220781fa56a9c8d3b64c5c6578ffd76b9edb795c
;;;",,,,,,,,,,,,,,,,,,
"Create test to initially show stage with various attributes (iconified, maximized, full screen)",JDK-8298500,5089347,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,lkostyra,kcr,kcr,2022-12-09 10:52,2023-09-30 05:53,2023-10-01 09:56,2023-09-21 01:51,jfx19,,,,,,,jfx22,javafx,,0,noreg-self,sn_142,sn_152,test_sprint,testbug,,,,,,,,,,,"While testing the fix for JDK-8260528, I discovered that we didn't have a test that displayed an initially iconified Stage and verified that it was, in fact, iconified. A recently added test has now accidentally done this, but we should have a more explicit test for all of these attributes. At least the following are needed: iconified, maximized, fullscreen.

The tests can probably go in javafx.graphics in the test.javafx.stage package (unless some robot interaction is needed).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8260528,JDK-8305675,,,,,,JDK-8316419,JDK-8310029,JDK-8316425,JDK-8316423,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zkej:",9223372036854775807,b10,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2023-09-13 04:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1240
Date: 2023-09-13 11:37:39 +0000;;;","2023-09-21 01:51;dukebot;Changeset: 658c8331
Author:    Lukasz Kostyra <lkostyra@openjdk.org>
Date:      2023-09-21 08:48:39 +0000
URL:       https://git.openjdk.org/jfx/commit/658c833179dffb68893375b8bad90b7906f479b3
;;;",,,,,,,,,,,,,,,,,,,
"sun/net/www/http/KeepAliveCache/B8291637.java fails with ""Server exception terminating: java.net.SocketException: Socket closed""",JDK-8298498,5089345,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,djelinski,dcubed,dcubed,2022-12-09 10:38,2023-09-07 22:13,2023-10-01 09:56,2022-12-15 00:08,17.0.10-oracle,21,,,,,,21,core-libs,,0,intermittent,noreg-self,tier2,ursqe-triaged,,,,,,,,,,,,"The following test failed in the JDK21 CI:

sun/net/www/http/KeepAliveCache/B8291637.java

Here's a snippet from the log file:

#section:main
----------messages:(6/319)----------
command: main -Dhttp.keepAlive.time.server=20 -esa -ea B8291637 max
reason: User specified action: run main/othervm -Dhttp.keepAlive.time.server=20 -esa -ea B8291637 max 
started: Fri Dec 09 18:33:49 UTC 2022
Mode: othervm [/othervm specified]
finished: Fri Dec 09 18:33:49 UTC 2022
elapsed time (seconds): 0.245
----------configuration:(0/0)----------
----------System.out:(2/24)----------
Time diff = 0
Read 11
----------System.err:(12/662)----------
Server exception terminating: java.net.SocketException: Socket closed
java.lang.RuntimeException: Test failed
	at B8291637.main(B8291637.java:131)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Test failed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2zke3:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,,,"2022-12-13 02:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11647
Date: 2022-12-13 10:34:16 +0000;;;","2022-12-15 00:08;dukebot;Changeset: 3ae71872
Author:    Daniel Jeliński <djelinski@openjdk.org>
Date:      2022-12-15 06:55:25 +0000
URL:       https://git.openjdk.org/jdk/commit/3ae718725a72cc2758331e932130d846cfba64e4
;;;",,,,,,,,,,,,,,,,,,,
IconifyTest fails intermittently on Linux,JDK-8298496,5089343,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kcr,kcr,kcr,2022-12-09 10:26,2022-12-23 08:22,2023-10-01 09:56,2022-12-15 08:28,jfx19,,,,,,,jfx20,javafx,,0,intermittent,noreg-self,sn_133,testbug,,,,,,,,,,,,"IconifyTest is not robust on Linux. It fails occasionally on most distros and frequently on others. The problem is related to the way the Stages are created. The test creates a bottom stage and a top stage to verify that the top stage is not visible when that stage is iconfied (meaning that the bottom stage will be visible), and is visible when not iconified.

The problem arises on Linux due to the fact that both stages are created always-on-top. This sometimes causes the bottom stage to actually be on top. One potential problem is definitely a testbug, in that both stages are shown one after another -- meaning that the top stage doesn't wait for the bottom stage to be shown. There seems to also be a product bug where even if we do wait for the bottom stage to be shown before creating the top stage, it sometimes will still end up on top (I'll file a separate bug).

Since this test doesn't need to rely on having both stages be always-on-top, the fix is to change the bottom stage to not set that property. See the attached patch (which also removed the call to topStage.toFront() which was likely there as an earlier attempt to workaround this problem, but is not needed if topStage is the only always-on-top stage).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298499,JDK-8260528,,,,"2022-12-09 10:26;kcr;IconifyTest.patch;https://bugs.openjdk.org/secure/attachment/101982/IconifyTest.patch",,,,,,,,,,,,,,,,,,,,,,,,"0|i2zkdn:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4f591050,,,,,,,,,"2022-12-09 10:28;kcr;NOTE: I made this a P3 since it is interfering with the evaluation of various Linux changes (e.g., JDK-8260528), and will cause problems with Linux headful test runs, which we hope to start doing on a regular basis soon.;;;","2022-12-14 06:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/975
Date: 2022-12-14 13:48:21 +0000;;;","2022-12-15 08:28;dukebot;Changeset: 30147d2f
Author:    Kevin Rushforth <kcr@openjdk.org>
Date:      2022-12-15 16:27:34 +0000
URL:       https://git.openjdk.org/jfx/commit/30147d2f8dfd3fe32f9ea6e70431efe90b015080
;;;",,,,,,,,,,,,,,,,,,
"[macos13] tools/jpackage tests failing with ""Exit code: 137"" on macOS",JDK-8298488,5089333,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,almatvee,dcubed,dcubed,2022-12-09 08:25,2023-08-07 17:30,2023-10-01 09:56,2022-12-12 14:52,17.0.8-oracle,20,21,,,,,20,tools,,0,intermittent,jdk17u-fix-request,jdk17u-fix-yes,macos,macos13,sn_133,tier2,,,,,,,,,"34 tools/jpackage tests are failing on macosx. I have not checked all
of the failures, but a random selection are failing with ""Exit code: 137"":

tools/jpackage/share/SimplePackageTest.java
tools/jpackage/share/PerUserCfgTest.java
tools/jpackage/share/MultiLauncherTwoPhaseTest.java
tools/jpackage/share/LicenseTest.java#id0
tools/jpackage/share/InstallDirTest.java#id0
tools/jpackage/share/EmptyFolderTest.java
tools/jpackage/share/EmptyFolderPackageTest.java
tools/jpackage/share/ArgumentsTest.java
tools/jpackage/share/AppLauncherEnvTest.java
tools/jpackage/share/AppContentTest.java
tools/jpackage/share/AddLShortcutTest.java
tools/jpackage/share/AddLauncherTest.java#id1
tools/jpackage/share/jdk/jpackage/tests/NoMPathRuntimeTest.java
tools/jpackage/share/jdk/jpackage/tests/MultipleJarAppTest.java
tools/jpackage/share/jdk/jpackage/tests/ModulePathTest3.java
tools/jpackage/share/jdk/jpackage/tests/ModulePathTest2.java
tools/jpackage/share/jdk/jpackage/tests/ModulePathTest.java
tools/jpackage/share/jdk/jpackage/tests/MainClassTest.java
tools/jpackage/share/jdk/jpackage/tests/JLinkOptionsTest.java
tools/jpackage/share/jdk/jpackage/tests/JavaOptionsTest.java
tools/jpackage/share/jdk/jpackage/tests/JavaOptionsEqualsTest.java#id0
tools/jpackage/share/jdk/jpackage/tests/JavaOptionsEqualsTest.java#id1
tools/jpackage/share/jdk/jpackage/tests/DotInNameTest.java
tools/jpackage/share/jdk/jpackage/tests/CookedRuntimeTest.java
tools/jpackage/share/jdk/jpackage/tests/BasicTest.java
tools/jpackage/share/jdk/jpackage/tests/AppVersionTest.java
tools/jpackage/macosx/NameWithSpaceTest.java
tools/jpackage/macosx/MacPropertiesTest.java
tools/jpackage/macosx/MacFileAssociationsTest.java
tools/jpackage/macosx/MacAppStoreRuntimeTest.java
tools/jpackage/macosx/MacAppStoreJlinkOptionsTest.java
tools/jpackage/macosx/HostArchPkgTest.java
tools/jpackage/macosx/DmgContentTest.java
tools/jpackage/macosx/ArgumentsFilteringTest.java


Here's a snippet from the tools/jpackage/share/SimplePackageTest.jtr file:

[13:07:57.733] TRACE: assertTrue(): Check [./test/unpacked-dmg/Applications/SimplePackageTest.app/Contents/app/SimplePackageTest.cfg] is a file
[13:07:57.734] TRACE: assertTrue(): Check [./test/unpacked-dmg/Applications/SimplePackageTest.app/Contents/runtime/Contents/MacOS/libjli.dylib] path exists
[13:07:57.734] TRACE: assertTrue(): Check [./test/unpacked-dmg/Applications/SimplePackageTest.app/Contents/runtime/Contents/MacOS/libjli.dylib] is a file
[13:07:57.740] TRACE: Clearing PATH in environment
[13:07:57.741] TRACE: exec: Execute [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S30243/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c74e261c-2e66-4f55-93f3-f3d93da6e6d7/runs/4318a60a-fc2c-4ab2-940f-878c0a63ec6b/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/5/./test/unpacked-dmg/Applications/SimplePackageTest.app/Contents/MacOS/SimplePackageTest](1); inherit I/O; in directory [./test]...
[13:07:58.869] TRACE: exec: Done. Exit code: 137
[13:08:04.008] TRACE: Clearing PATH in environment
[13:08:04.009] TRACE: exec: Execute [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S30243/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c74e261c-2e66-4f55-93f3-f3d93da6e6d7/runs/4318a60a-fc2c-4ab2-940f-878c0a63ec6b/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/5/./test/unpacked-dmg/Applications/SimplePackageTest.app/Contents/MacOS/SimplePackageTest](1); inherit I/O; in directory [./test]...
[13:08:04.025] TRACE: exec: Done. Exit code: 137
[13:08:09.153] TRACE: Clearing PATH in environment
[13:08:09.154] TRACE: exec: Execute [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S30243/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c74e261c-2e66-4f55-93f3-f3d93da6e6d7/runs/4318a60a-fc2c-4ab2-940f-878c0a63ec6b/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/5/./test/unpacked-dmg/Applications/SimplePackageTest.app/Contents/MacOS/SimplePackageTest](1); inherit I/O; in directory [./test]...
[13:08:09.178] TRACE: exec: Done. Exit code: 137
[13:08:14.326] ERROR: Expected [0]. Actual [137]: Check command [/System/Volumes/Data/mesos/work_dir/slaves/91e16c40-06d4-468a-9fc3-7198a5bb7d5a-S30243/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/c74e261c-2e66-4f55-93f3-f3d93da6e6d7/runs/4318a60a-fc2c-4ab2-940f-878c0a63ec6b/testoutput/test-support/jtreg_open_test_jdk_tier2_part2/scratch/5/./test/unpacked-dmg/Applications/SimplePackageTest.app/Contents/MacOS/SimplePackageTest](1) exited with 0 code
[13:08:14.327] [  FAILED  ] SimplePackageTest.test; checks=25
[13:08:14.329] [==========] 1 tests ran
[13:08:14.329] [  PASSED  ] 0 tests
[13:08:14.331] [  FAILED  ] 1 test, listed below
[13:08:14.331] [  FAILED  ] SimplePackageTest.test; workDir=[./test]
[13:08:14.331] 1 FAILED TEST
----------System.err:(62/4624)----------",,,,,,,,,,JDK-8298664,JDK-8302956,JDK-8306505,JDK-8302805,,,,,,,,,,,,,,,,,,,,,,JDK-8301058,,,,,,,,,JDK-8313904,JDK-8277493,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2zkbf:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@3656b41f,,,,,,,,,"2022-12-09 09:52;vdyakov;please evaluate;;;","2022-12-09 10:45;vdyakov;Alexander, please look at this failures affecting JDK 20 stabilization ;;;","2022-12-11 13:21;dholmes;There seems to be a pattern that the first failing test is tools/jpackage/macosx/MacAppStoreJlinkOptionsTest.java which can either show the Exit code 137 or simply timeout - and then all subsequent tests seem to fail the same way.;;;","2022-12-12 14:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/20
Date: 2022-12-12 21:23:50 +0000;;;","2022-12-12 14:52;dukebot;Changeset: 8962c723
Author:    Alexander Matveev <almatvee@openjdk.org>
Date:      2022-12-12 22:51:02 +0000
URL:       https://git.openjdk.org/jdk20/commit/8962c723a8ae62a8638e9e0a89c20001aea1549a
;;;","2023-04-18 01:13;goetz;Fix request [17u]

I backport this for parity with 17.0.8-oracle.
Low risk, simple fix.
Clean backport except for patch of a test not in 17.
SAP nightly testing passed.;;;","2023-04-18 01:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1258
Date: 2023-04-18 08:13:06 +0000;;;",,,,,,,,,,,,,,
tools/javac/modules/EdgeCases.java fails on Windows after JDK-8297988,JDK-8298463,5089306,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,jlahoda,jlahoda,jlahoda,2022-12-09 04:43,2022-12-15 00:11,2023-10-01 09:56,2022-12-09 08:43,20,,,,,,,20,tools,,0,noreg-self,regression,tier1,,,,,,,,,,,,,"The following test failed in the JDK20 CI:

tools/javac/modules/EdgeCases.java

Here's a snippet from the log file:

----------System.err:(175/8934)*----------
test: testUnnamedPackage
[STDOUT]:
noModule
[DIRECT]:
warning: [options] bootstrap class path not set in conjunction with -source 8
warning: [options] source value 8 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
warning: No SupportedSourceVersion annotation found on EdgeCases$UnnamedPackageProcessor, returning RELEASE_6.
warning: Supported source version 'RELEASE_6' from annotation processor 'EdgeCases$UnnamedPackageProcessor' less than -source '8'
5 warnings
[STDOUT]:
unnamedModule
[DIRECT]:
warning: No SupportedSourceVersion annotation found on EdgeCases$UnnamedPackageProcessor, returning RELEASE_6.
warning: Supported source version 'RELEASE_6' from annotation processor 'EdgeCases$UnnamedPackageProcessor' less than -source '20'
2 warnings
[STDOUT]:
m
[DIRECT]:
warning: No SupportedSourceVersion annotation found on EdgeCases$UnnamedPackageProcessor, returning RELEASE_6.
warning: Supported source version 'RELEASE_6' from annotation processor 'EdgeCases$UnnamedPackageProcessor' less than -source '20'
2 warnings
[STDOUT]:
null
m1x: true
m2x: true
[DIRECT]:
testUnnamedPackage\\srcNamed2\\m1x\\Test.java:1: error: unnamed package is not allowed in named modules
public class Test {}
^
testUnnamedPackage\\srcNamed2\\m2x\\Test.java:1: error: unnamed package is not allowed in named modules
public class Test {}
^
warning: No SupportedSourceVersion annotation found on EdgeCases$UnnamedPackageProcessor, returning RELEASE_6.
warning: Supported source version 'RELEASE_6' from annotation processor 'EdgeCases$UnnamedPackageProcessor' less than -source '20'
Note: Multiple elements named '' in modules 'm1x, m2x' were found by javax.lang.model.util.Elements.getPackageElement.
2 errors
2 warnings

test: testEmptyInExportedPackage
file explicitly specified:
[DIRECT]:
module-info.java:1:20: compiler.err.package.empty.or.not.found: api
1 error
file not specified:
[DIRECT]:
module-info.java:1:20: compiler.err.package.empty.or.not.found: api
1 error

test: testMisnamedModuleInfoClass
[DIRECT]:
module-info.java:1:28: compiler.err.doesnt.exist: com.example
1 error

test: testWrongPackageInExportedPackage
file explicitly specified:
[DIRECT]:
module-info.java:1:20: compiler.err.package.empty.or.not.found: api
1 error
file not specified:
[DIRECT]:
module-info.java:1:20: compiler.err.package.empty.or.not.found: api
1 error

test: testDependOnUnnamedAccessibility
compiling unnamed sources:
compiling test module:

test: testJustPackageInExportedPackage
file explicitly specified:
file not specified:

test: testParseEnterAnalyze

test: testStripUnknownRequired
[STDOUT]:
from directives:
java.base
from requires:
java.base
[DIRECT]:
testStripUnknownRequired\\src\\test\\module-info.java:1: error: module not found: m1x
module test { requires m1x; requires m2x; requires java.base; requires m3x; requires m4x; }
^
1 error

test: testAddExportUndefinedModule
[DIRECT]:
- compiler.warn.module.for.option.not.found: --add-exports, undefModule
Test.java:1:34: compiler.err.doesnt.exist: undefPackage
1 error
1 warning

test: testModuleSymbolOutterMostClass

test: testModuleImplicitModuleBoundaries
[DIRECT]:
Test.java:1:52: compiler.err.not.def.access.class.intf.cant.access.reason: call(), api1.Api1, api1, (compiler.misc.not.def.access.does.not.read: m3x, api1, m1x)
Test.java:1:76: compiler.err.not.def.access.class.intf.cant.access: toString(), java.lang.Object
2 errors

test: testAssignClassToAutomaticModule

test: testClassPackageClash
[DIRECT]:
m1x.java:2:8: compiler.err.clash.with.pkg.of.same.name: kindname.class, test.m1x
1 error

test: testEmptyImplicitModuleInfo
[DIRECT]:
- compiler.err.cant.access: module-info, (compiler.misc.bad.source.file.header: module-info.java, (compiler.misc.file.does.not.contain.module))
1 error

test: testImplicitJavaBase
[DIRECT]:
- compiler.err.cant.access: <error>.module-info, (compiler.misc.bad.class.file.header: module-info.class, (compiler.misc.illegal.start.of.class.file))
1 error
[DIRECT]:
- compiler.err.cant.access: module-info, (compiler.misc.bad.source.file.header: module-info.java, (compiler.misc.file.does.not.contain.module))
1 error

test: testModuleInfoNameMismatchSource
[DIRECT]:
module-info.java:1:1: compiler.err.module.name.mismatch: other, m1x
- compiler.err.cant.access: m1x.module-info, (compiler.misc.cant.resolve.modules)
2 errors

test: testModuleInfoNameMismatchClass
[DIRECT]:
- compiler.err.cant.access: m1x.module-info, (compiler.misc.bad.class.file.header: module-info.class, (compiler.misc.module.name.mismatch: other, m1x))
module-info.java:1:1: compiler.err.module.not.found: m1x
2 errors

test: testGetDirectivesComplete

test: testPackageInModuleInfo
[DIRECT]:
module-info.java:1:1: compiler.err.no.pkg.in.module-info.java
1 error

test: testOnDemandCompletionModuleInfoJava
[DIRECT]:
module-info.java:1:23: compiler.warn.has.been.deprecated.module: m1x
module-info.java:1:37: compiler.warn.has.been.deprecated.module: m1x
2 warnings

test: testInvisibleClassVisiblePackageClash

test: testExportedNameCheckFromSourceNoEvent
Exception running test testExportedNameCheckFromSourceNoEvent: java.lang.AssertionError: Unexpected log, got: [COMPILATION:started:<none>, PARSE:started:testExportedNameCheckFromSourceNoEvent\\src\\m\\module-info.java, PARSE:finished:testExportedNameCheckFromSourceNoEvent\\src\\m\\module-info.java, ENTER:started:testExportedNameCheckFromSourceNoEvent\\src\\m\\module-info.java, ENTER:finished:testExportedNameCheckFromSourceNoEvent\\src\\m\\module-info.java, ANALYZE:started:testExportedNameCheckFromSourceNoEvent\\src\\m\\module-info.java, ANALYZE:finished:testExportedNameCheckFromSourceNoEvent\\src\\m\\module-info.java, COMPILATION:finished:<none>], expected: [COMPILATION:started:<none>, PARSE:started:testExportedNameCheckFromSourceNoEvent/src/m/module-info.java, PARSE:finished:testExportedNameCheckFromSourceNoEvent/src/m/module-info.java, ENTER:started:testExportedNameCheckFromSourceNoEvent/src/m/module-info.java, ENTER:finished:testExportedNameCheckFromSourceNoEvent/src/m/module-info.java, ANALYZE:started:testExportedNameCheckFromSourceNoEvent/src/m/module-info.java, ANALYZE:finished:testExportedNameCheckFromSourceNoEvent/src/m/module-info.java, COMPILATION:finished:<none>]
java.lang.AssertionError: Unexpected log, got: [COMPILATION:started:<none>, PARSE:started:testExportedNameCheckFromSourceNoEvent\\src\\m\\module-info.java, PARSE:finished:testExportedNameCheckFromSourceNoEvent\\src\\m\\module-info.java, ENTER:started:testExportedNameCheckFromSourceNoEvent\\src\\m\\module-info.java, ENTER:finished:testExportedNameCheckFromSourceNoEvent\\src\\m\\module-info.java, ANALYZE:started:testExportedNameCheckFromSourceNoEvent\\src\\m\\module-info.java, ANALYZE:finished:testExportedNameCheckFromSourceNoEvent\\src\\m\\module-info.java, COMPILATION:finished:<none>], expected: [COMPILATION:started:<none>, PARSE:started:testExportedNameCheckFromSourceNoEvent/src/m/module-info.java, PARSE:finished:testExportedNameCheckFromSourceNoEvent/src/m/module-info.java, ENTER:started:testExportedNameCheckFromSourceNoEvent/src/m/module-info.java, ENTER:finished:testExportedNameCheckFromSourceNoEvent/src/m/module-info.java, ANALYZE:started:testExportedNameCheckFromSourceNoEvent/src/m/module-info.java, ANALYZE:finished:testExportedNameCheckFromSourceNoEvent/src/m/module-info.java, COMPILATION:finished:<none>]
	at EdgeCases.testExportedNameCheckFromSourceNoEvent(EdgeCases.java:1147)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at toolbox.TestRunner.runTests(TestRunner.java:89)
	at ModuleTestBase.runTests(ModuleTestBase.java:49)
	at EdgeCases.main(EdgeCases.java:85)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

22 tests, 1 errors
java.lang.Exception: 1 errors found
	at toolbox.TestRunner.runTests(TestRunner.java:116)
	at ModuleTestBase.runTests(ModuleTestBase.java:49)
	at EdgeCases.main(EdgeCases.java:85)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.Exception: 1 errors found",,,,,,,,,,JDK-8298511,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zk5f:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-12-09 06:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/12
Date: 2022-12-09 14:04:08 +0000;;;","2022-12-09 08:43;dukebot;Changeset: 52fffdd2
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-12-09 16:41:26 +0000
URL:       https://git.openjdk.org/jdk20/commit/52fffdd2c8426e98d3a0198ef4607750732bab93
;;;",,,,,,,,,,,,,,,,,,,
Fix msys2 linking and handling out of tree build directory for source zip creation,JDK-8298459,5089304,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,clanger,clanger,clanger,2022-12-09 03:20,2022-12-19 14:32,2023-10-01 09:56,2022-12-11 05:52,,,,,,,,20,infrastructure,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"The MSYS2 ln command does not create links on windows but in fact does a deep copy of the filesystem that is to be linked. There doesn't seem to be an imminent issue with that currently in OpenJDK head but using MSYS2 in JDK11 updates which includes the graal compiler projects will lead to errors like:

/usr/bin/ln: failed to create symbolic link '/d/a/jdk11u-dev/jdk11u-dev/build/windows-x64/support/src/src/jdk.internal.vm.compiler.management/share/classes/jdk.internal.vm.compiler.management' -> '../../../../../../../../src/jdk.internal.vm.compiler.management/share/classes': File name too long

Here, the reported filenames actually aren't too long but somehow during copying the subtree ln probably encounters files with a name too long for msys.

We could overcome this by setting a Windows file system junction instead of using ln. Maybe that's even better for build performance.

While debugging this I also found that the handling of file relativity to the top directory does not account for a build directory that could reside outside the source tree.",,,,,,,,,,JDK-8298792,JDK-8298661,JDK-8298787,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zk4z:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-12-09 03:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/9
Date: 2022-12-09 11:26:46 +0000;;;","2022-12-11 05:52;dukebot;Changeset: d624debe
Author:    Christoph Langer <clanger@openjdk.org>
Date:      2022-12-11 13:50:39 +0000
URL:       https://git.openjdk.org/jdk20/commit/d624debe23f60d778d7be43f28d06e9454057217
;;;","2022-12-11 22:55;clanger;Fix request (17u, 19u)
Requesting backport of this build system fix to make builds in Windows MSYS2 environment, that is used in GHA, more stable. Applies clean. Testing: SAP nightlies and GHA.;;;","2022-12-11 22:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk19u/pull/104
Date: 2022-12-12 06:52:58 +0000;;;","2022-12-11 23:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/950
Date: 2022-12-12 06:53:34 +0000;;;","2022-12-11 23:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1586
Date: 2022-12-12 07:48:29 +0000;;;","2022-12-13 08:13;clanger;Fix request (11u)
Same applies as for 17u and 19u. Backport is not clean there, PR reviewed by [~mdoerr], testing green.;;;",,,,,,,,,,,,,,
Instructions in a11y manual tests need to be updated,JDK-8298457,5089303,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,asemenov,asemenov,asemenov,2022-12-09 02:11,2022-12-15 00:03,2023-10-01 09:56,2022-12-09 12:08,,,,,,,,21,client-libs,,0,,,,,,,,,,,,,,,,"Test instructions:
- Accessible Actions Test;
- AccessibleJTabbedPaneTest;
- Accessible Text Test.
contain inaccurate indications of actions in different screen readers.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zk4r:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4785f47c,,,,,,,,,"2022-12-09 03:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11607
Date: 2022-12-09 11:02:09 +0000;;;","2022-12-09 12:08;dukebot;Changeset: 9749a436
Author:    Artem Semenov <asemenov@openjdk.org>
Date:      2022-12-09 20:05:19 +0000
URL:       https://git.openjdk.org/jdk/commit/9749a436418a2e2bcd1571e2fd6f16e3461cf883
;;;","2022-12-09 13:23;asemenov;jdk17u-fix-request
pr: https://github.com/openjdk/jdk17u-dev/pull/948;;;","2022-12-12 07:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/948
Date: 2022-12-09 21:18:59 +0000;;;",,,,,,,,,,,,,,,,,
Incorrectly escaped html ,JDK-8298456,5089302,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,gbierman,gbierman,gbierman,2022-12-09 01:54,2022-12-14 23:59,2023-10-01 09:56,2022-12-09 08:23,,,,,,,,21,specification,,0,noreg-doc,,,,,,,,,,,,,,,"Building the spec generates a transient error:

/Users/$USER/Work/jdk/jdk.8298405.doclet-markdown/build/macosx-aarch64/support/markdown/SPECS_TO_HTML_java.se_.._closed_src_java.se_share_specs_patterns-switch-record-patterns-jls.md_patterns-switch-record-patterns-jls.md_post.tmp:2732: bad html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zk4j:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7441ef8d,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
System.console().readLine() hangs in jshell,JDK-8298425,5089268,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,naoto,naoto,2022-12-08 14:31,2022-12-19 12:40,2023-10-01 09:56,2022-12-14 03:37,20,,,,,,,20,tools,,0,,,,,,,,,,,,,,,,"Now that Console defaults to jline implementation and `System.console()` returns it, jshell needs to either disable `jline` implementation by specifying `-Djdk.console=java.base` in the launcher command argument, or implement its own JdkConsole. Since it is past RDP1 for JDK20, the former solution is doable in JDK20.",,,,,,,,,,JDK-8298804,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8296454,JDK-8295803,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zjwz:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@ef6d34f,,,,,,,,,"2022-12-09 05:21;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/11
Date: 2022-12-09 13:14:59 +0000;;;","2022-12-14 03:37;dukebot;Changeset: 9bcdfc42
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-12-14 11:36:04 +0000
URL:       https://git.openjdk.org/jdk20/commit/9bcdfc428597e1465c8a014d816ef671420d22df
;;;",,,,,,,,,,,,,,,,,,,
Console should be declared `sealed`,JDK-8298416,5089259,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,naoto,naoto,naoto,2022-12-08 11:36,2022-12-21 17:18,2023-10-01 09:56,2022-12-15 11:22,20,,,,,,,21,core-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,"Per review comments:
https://github.com/openjdk/jdk/pull/11421#discussion_r1040531698",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298502,,,,,,,JDK-8298322,,,,,,,JDK-8295803,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zjur:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5f132e58,,,,,,,,,"2022-12-12 15:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11615
Date: 2022-12-09 20:14:53 +0000;;;","2022-12-15 11:22;dukebot;Changeset: 0ef35392
Author:    Naoto Sato <naoto@openjdk.org>
Date:      2022-12-15 19:20:12 +0000
URL:       https://git.openjdk.org/jdk/commit/0ef353925e645dd519e17aeb7a83e927271f8b95
;;;",,,,,,,,,,,,,,,,,,,
[s390] CPUInfoTest fails due to uppercase feature string,JDK-8298413,5089256,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,tsteele,tsteele,tsteele,2022-12-08 11:15,2023-02-13 11:07,2023-10-01 09:56,2023-02-07 00:39,21,,,,,,,21,hotspot,,0,oraclejdk-na,,,,,,,,,,,,,,,"Creating on behalf of Amit Kumar.

CPUInfoTest.java is failing on s390 due to an incorrect feature string. Feature Vector Enhancement is shown as VEnh2 instead of venh2. This contradicts the guidance specified in vm_version_s390.cpp:361.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s390x,,,,,,,,,,,,,,,"0|i2zju3:",9223372036854775807,b09,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-12 05:57;ihse;Even if the build fails, this is not a build issue. Changing component to hotspot, if this is incorrect, please pass it on. :-);;;","2023-01-13 11:29;tsteele;Noted Magnus. Thanks for catching that.;;;","2023-01-30 01:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12286
Date: 2023-01-30 09:34:18 +0000;;;","2023-02-07 00:39;dukebot;Changeset: 9dad874f
Author:    Amit Kumar <amitlocham09@icloud.com>
Committer: Lutz Schmidt <lucy@openjdk.org>
Date:      2023-02-07 08:38:07 +0000
URL:       https://git.openjdk.org/jdk/commit/9dad874ff9f03f5891aa8b37e7826a67c851f06d
;;;",,,,,,,,,,,,,,,,,
Virtual thread instability when stack overflows,JDK-8298400,5089241,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rpressler,aph,aph,2022-12-08 08:41,2023-01-31 05:13,2023-10-01 09:56,2023-01-19 12:03,20,,,,,,,20,hotspot,,0,loom,,,,,,,,,,,,,,,"First, apply 1.patch.

Then run the test like this:

`CONF=slow make CONF_CHECK=auto LOG=info test TEST=test/jdk/jdk/incubator/concurrent/ScopedValue/StressStackOverflow.java`

You'll see:

```
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/local/theRealAph-jdk/src/hotspot/share/gc/shared/memAllocator.cpp:148), pid=3032125, tid=3032149
#  assert(!(((ThreadShadow*)__the_thread__)->has_pending_exception())) failed: Should not allocate with exception pending
#
# JRE version: OpenJDK Runtime Environment (20.0) (slowdebug build 20-internal-adhoc.aph.theRealAph-jdk)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 20-internal-adhoc.aph.theRealAph-jdk, mixed mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xff1c64]  MemAllocator::Allocation::verify_before()+0x32
```
",,,,,,,,,,JDK-8300702,JDK-8301523,JDK-8301537,JDK-8300666,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-12-08 08:42;aph;1.patch;https://bugs.openjdk.org/secure/attachment/101969/1.patch",,,,,,,,,generic,,,,,,,,,,,,,,,"0|i2zjqr:",9223372036854775807,b33,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-08 09:05;aph;AArch64, same test, tends to deadlock instead.;;;","2022-12-15 12:38;rpressler;Reproduced the hangup on AArch64;;;","2023-01-17 16:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/101
Date: 2023-01-12 12:12:42 +0000;;;","2023-01-19 12:00;rpressler;Changeset: 1c840506
Author: Ron Pressler <rpressler@openjdk.org>
Date: 2023-01-19 15:34:01 +0000
URL: https://git.openjdk.org/jdk20/commit/1c84050610e778010a2ce3a25d48fceee87af6cc;;;","2023-01-19 12:01;rpressler;Fix was pushed while main bug was targeted to 21. Reset the main bug to fixed in 20 and copied the Robo Duke entry here.;;;",,,,,,,,,,,,,,,,
JFR: GenerateJfrFiles.java lacks copyright header,JDK-8298383,5089222,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,egahlin,egahlin,egahlin,2022-12-08 05:18,2022-12-12 14:02,2023-10-01 09:56,2022-12-08 06:43,,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zjmj:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-08 05:46;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11591
Date: 2022-12-08 13:19:18 +0000;;;","2022-12-08 06:43;dukebot;Changeset: e555d547
Author:    Erik Gahlin <egahlin@openjdk.org>
Date:      2022-12-08 14:42:04 +0000
URL:       https://git.openjdk.org/jdk/commit/e555d5470536b8379179879ec7343e004be95e36
;;;",,,,,,,,,,,,,,,,,,,
JavaFX ChartArea Accessibility Reader,JDK-8298382,5089221,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,kizune,shadowbug,shadowbug,2022-12-08 05:08,2023-02-23 08:42,2023-10-01 09:56,2023-02-03 13:39,jfx17,,,,,,,jfx21,javafx,,0,a11y,accessibility,bugdb_34858162,esc_acc,Internal,sn_133,sn_134,sn_135,sn_136,,,,,,,"In Ensemble app open the first demo - Stacked Area Chart. Turn on the voice assistant (like VoiceOver on Mac) and navigate to data points on chart using the navigation shortcuts. When voice assistant reads the element it reads (for example) X Axis is 5 Y Axis is 10 - despite the actual labels of the axis that can be edited in the demo properties.

The axis name should be provided to the a11y API instead of the predefined text.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,windows,,,,,,"0|i2zjmb:",9223372036854775807,b04,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@7a09e639,,,,,,,,,"2023-01-30 14:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/1016
Date: 2023-01-30 21:56:45 +0000;;;","2023-01-31 11:51;kizune;XYChart is a base class for all the 2D charts and it creates a Node representation for all of the subcomponents it has - including the individual data points. In doing so it assigns to each subcomponent an accessible text string that should be passed to a narrator in case of it requesting the spoken description of what is currently selected. This text should include all the information that is required to identify the component and its state. Unfortunately when it is doing so the Node accessible string is constructed from the data point value and a statically defined string like this:

String seriesName = series != null ? series.getName() : """";
return seriesName + "" X Axis is "" + getCurrentX() + "" Y Axis is "" + getCurrentY();

which has two problems: this can not be localized and the actual names of the axes are replaced with generic ""X Axis"" and ""Y Axis"".

The idea of the fix is to replace the accessible string generation by the code that
- is internationalized
- takes into account the axes configuration
- tracks change of the axes configuration and updates the accessible string accordingly

In doing so couple of private properties has to be added to facilitate easier binding and access to said information.;;;","2023-02-03 13:39;dukebot;Changeset: 33f1f629
Author:    Alexander Zuev <kizune@openjdk.org>
Committer: Andy Goryachev <angorya@openjdk.org>
Date:      2023-02-03 21:37:15 +0000
URL:       https://git.openjdk.org/jfx/commit/33f1f629c5df9f8e03e81e360730536cde0a8f53
;;;","2023-02-23 08:42;vdyakov;Submitter confirmed successful verification:
> I can confirm, after testing build #5 of JavaFX 21, that the bug is fixed.;;;",,,,,,,,,,,,,,,,,
Improve handling of session tickets for multiple SSLContexts,JDK-8298381,5089219,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,simonis,simonis,simonis,2022-12-08 05:00,2023-08-29 04:50,2023-10-01 09:56,2023-01-10 04:55,13,17,20,,,,,21,security-libs,,0,amazon-interest,,,,,,,,,,,,,,,"Currently, TLS session tickets introduced by [JDK-8211018](https://bugs.openjdk.org/browse/JDK-8211018) in JDK 13 (i.e. `SessionTicketExtension$StatelessKey`) are generated in the class `SessionTicketExtension` and they use a single, global key ID (`currentKeyID`) for all `SSLContext`s.

This is problematic if more than one `SSLContext` is used, because every context which requests a session ticket will increment the global id `currentKeyID` when it creates a ticket. This means that in turn all the other contexts won't be able to find a ticket under the new id in their `SSLContextImpl` and create a new one (again incrementing `currentKeyID`). In fact, every time a ticket is requested from a different context, this will transitively trigger a new ticket creation in all the other contexts. We've observed millions of session ticket accumulating for some workloads.

Another issue with the curent implementation is that cleanup is racy because the underlying data structure (i.e. `keyHashMap` in `SSLContextImpl`) as well as the cleanup code itself are not threadsafe.

I therefor propose to move `currentKeyID` into the `SSLContextImpl` to solve these issues.

The following test program (contributed by Steven Collison (https://raycoll.com/)) can be used to demonstrate the current behaviour. It outputs the number of `StatelessKey` instances at the end of the program. Opening 1000 connections with a single `SSLContext` results in a single `StatelessKey` instance being created:
```
$ java -XX:+UseSerialGC -Xmx16m -cp ~/Java/ SSLSocketServerMultipleSSLContext 9999 1 1000
605:             1             32  sun.security.ssl.SessionTicketExtension$StatelessKey (java.base@20-internal)
```
The same example with the 1000 connections being opened alternatively on thwo different contexts will instead create 1000 `StatelessKey` instances:
```
$ java -XX:+UseSerialGC -Xmx16m -cp ~/Java/ SSLSocketServerMultipleSSLContext 9999 2 1000
  11:          1000          32000  sun.security.ssl.SessionTicketExtension$StatelessKey (java.base@20-internal)
```
With my proposed patch, the numbers goes back to two instances again:
```
$ java -XX:+UseSerialGC -Xmx16m -cp ~/Java/ SSLSocketServerMultipleSSLContext 9999 2 1000
611:             2             64  sun.security.ssl.SessionTicketExtension$StatelessKey (java.base@20-internal)
```


```
// Contributed by Steven Collison (https://raycoll.com/)
//
// Requires the trust store 'testkeys.jks' in the current working directory which can be created as follows:
//
//  keytool -genkey -alias test -keyalg RSA -keypass testkeys -storepass testkeys -keystore testkeys.jks -keysize 2048 -validity 1461
//
// When prompted for input always press <return> and answer the last question with ""yes""
// The newly created, self signed certificate can be verified with (use 'testkeys' as password):
//   keytool -list -v -keystore testkeys.jks

import java.net.*;
import java.io.*;
import javax.net.ssl.*;
import javax.security.cert.*;
import java.util.Enumeration;
import java.util.ArrayList;
import java.util.List;

import java.security.SecureRandom;
import javax.net.ServerSocketFactory;
import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLServerSocketFactory;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;

import java.security.KeyStore;

/**
 * A basic TLS server that allows multiple SSLContexts to be attached to the same port.
 * This is used to demonstrate a memory leak when session tickets are used and handshakes are
 * processed by multiple SSLContexts objects.
 * Usage: SSLSocketServerMultipleSSLContext port num_ssl_contexts num_connections_to_accept
 */
public class SSLSocketServerMultipleSSLContext {

    private static final String trustFilename = ""testkeys.jks"";
    private static final String password = ""testkeys"";
    private static final boolean debug = Boolean.getBoolean(""debug"");

    public static void main(String[] args) throws Exception {

        System.setProperty(""javax.net.ssl.trustStore"", trustFilename);
        System.setProperty(""javax.net.ssl.trustStorePassword"", password);
        System.setProperty(""jdk.tls.client.protocols"", ""TLSv1.2"");

        int port = Integer.parseInt(args[0]);
        int num_contexts = Integer.parseInt(args[1]);
        int iterations = Integer.parseInt(args[2]);

        // Create the requested number of SocketFactories. Each of these use a unique SSLContext instance.
        ArrayList<SSLSocketFactory> sslSocketFactories = new ArrayList<SSLSocketFactory>();
        for (int i = 0; i < num_contexts; i++) {
            sslSocketFactories.add(getSocketFactory(""TLS""));
        }
        // Create the plain serversocket(we'll wrap convert to SSLSocket with the chosen SSLSocketFactory after accept).
        ServerSocket serverSocket = new ServerSocket(port);
        for (int i = 0; i < iterations; i++) {
            // The following line can be commented out to run this test from the command line with:
            // echo ""Q"" | openssl s_client -tls1_2 -sess_in sess_1.sess -sess_out sess_2.sess -connect localhost:9999
            startClient(port, i);
            try (Socket socket = serverSocket.accept()) {
                if (debug) {
                    System.out.println(""accepted"");
                }
                // Wrap plain socket in SSL, round robin across the list of SSLSocketFactories we have.
                SSLSocketFactory selectedFactory = sslSocketFactories.get(i % sslSocketFactories.size());
                SSLSocket sslSocket = (SSLSocket) selectedFactory.createSocket(socket, null, true);
                sslSocket.startHandshake();
                InputStream is = new BufferedInputStream(sslSocket.getInputStream());
                OutputStream os = new BufferedOutputStream(sslSocket.getOutputStream());
                byte[] data = new byte[2048];
                int len = is.read(data);
                if (debug) {
                    System.out.println(""Received: "" + new String(data));
                }
                socket.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (debug) {
            System.out.println(""server stopped"");
        }
        long pid = ProcessHandle.current().pid();
        String jdkPath = System.getProperty(""java.home"");
        ProcessBuilder pb = new ProcessBuilder(jdkPath + ""/bin/jcmd"", Long.toString(pid), "" GC.class_histogram"");
        Process jcmd = pb.start();
        List<String> line = jcmd.inputReader().lines().filter(l -> l.contains(""StatelessKey"")).toList();
        if (line.size() == 1) {
            System.out.println(line.get(0));
        }
    }

    private static void startClient(int port, int iteration) {
        new Thread() {
            public void run() {
                try {
                    SSLSocket socket = (SSLSocket)SSLContext.getDefault().getSocketFactory().createSocket();
                    socket.connect(new InetSocketAddress(""localhost"", port));
                    OutputStream os = new BufferedOutputStream(socket.getOutputStream());
                    os.write(new byte[] {'h', 'e', 'l', 'l', 'o'});
                    os.flush();
                    long creationTime = socket.getSession().getCreationTime();
                    if (debug) {
                        System.out.println(String.format(""creationTime (%d) = %d"", iteration, creationTime));
                    }
                    socket.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } . start();
    }

    private static SSLSocketFactory getSocketFactory(String type) {
        if (type.equals(""TLS"")) {
            SSLSocketFactory ssf = null;
            try {
                // set up key manager to do server authentication
                SSLContext ctx;
                KeyManagerFactory kmf;
                KeyStore ks;
                char[] passphrase = password.toCharArray();

                ctx = SSLContext.getInstance(""TLS"");
                kmf = KeyManagerFactory.getInstance(""SunX509"");
                ks = KeyStore.getInstance(""JKS"");

                ks.load(new FileInputStream(trustFilename), passphrase);
                kmf.init(ks, passphrase);
                ctx.init(kmf.getKeyManagers(), null, null);

                ssf = ctx.getSocketFactory();
                return ssf;
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            return null;
	}

	return null;
    }
}
```
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8211018,,,,,,,,,,,,"2022-12-08 05:02;simonis;SSLSocketServerMultipleSSLContext.java;https://bugs.openjdk.org/secure/attachment/101964/SSLSocketServerMultipleSSLContext.java",,,,,,,,,,,,,,,,13,,,,,,,,"0|i2zjlv:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@39d9862,,,,,,,Verified,,"2022-12-08 05:16;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11590
Date: 2022-12-08 13:09:11 +0000;;;","2023-01-10 04:54;dukebot;Changeset: debe5879
Author:    Volker Simonis <simonis@openjdk.org>
Date:      2023-01-10 11:49:36 +0000
URL:       https://git.openjdk.org/jdk/commit/debe5879aa7118a114ff6fcf8d15951757ae70a8
;;;",,,,,,,,,,,,,,,,,,,
JFR: Some UNTIMED events only sets endTime,JDK-8298379,5089217,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,mgronlun,mgronlun,mgronlun,2022-12-08 03:40,2022-12-12 14:02,2023-10-01 09:56,2022-12-08 06:38,19,20,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,"It was pointed out that some UNTIMED events only call set_endtime(), for example some events in jfrPeriodic.cpp. There has been some changes in the logic for timestamps, and this can have caused some weird effects, for example:

  // Write allocation statistics to buffer.
  for(int i = 0; i < thread_ids.length(); i++) {
    EventThreadAllocationStatistics event(UNTIMED);
    event.set_allocated(allocated.at(i));
    event.set_thread(thread_ids.at(i));
    event.set_endtime(time_stamp);
    event.commit();
  }

This event will not have the declared time_stamp, but will instead get a new timestamp because set_starttime() is not called.

Revise usages to ensure they are correct in relation to timestamping.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zjlf:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-08 05:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11592
Date: 2022-12-08 13:22:35 +0000;;;","2022-12-08 06:38;dukebot;Changeset: c084431f
Author:    Markus Grönlund <mgronlun@openjdk.org>
Date:      2022-12-08 14:37:18 +0000
URL:       https://git.openjdk.org/jdk/commit/c084431fae8c9f9b5a157cdaca484f63cbd6691a
;;;",,,,,,,,,,,,,,,,,,,
JfrVframeStream causes deadlocks in ZGC,JDK-8298377,5089214,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,stefank,stefank,stefank,2022-12-08 03:16,2023-06-29 14:43,2023-10-01 09:56,2023-01-19 05:50,20,21,,,,,,21,hotspot,,0,hgupdate-sync,jdk20-fix-request,jdk20-fix-yes,loom,noreg-hard,zgc,,,,,,,,,,"The JfrVFrameStream is used while generating stack traces for events. One of the events are the ZPage allocation event. This event is sometimes sent when ZGC is relocating. The current implementation of JfrVFrameStream uses WalkContinuation::include, which causes JFR to walk the continuation and perform GC barriers. This is problematic, since ZGC has a requirement that we never perform load barriers while running the relocation code. If we do, we might end up performing other reloctions from the the relocation code, and in some cases that causes dead locks.

I propose that JFR doesn't walk the continuations when sending events. An alternative could be to limit this to ZGC, but I'd like to get some feedback around that from JFR / Loom devs.",,,,,,,,,,JDK-8301974,JDK-8301978,JDK-8300660,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298058,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zjkr:",9223372036854775807,b07,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-08 03:33;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11586
Date: 2022-12-08 11:23:57 +0000;;;","2022-12-23 06:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11778
Date: 2022-12-23 14:06:07 +0000;;;","2023-01-19 05:50;dukebot;Changeset: 453dbd12
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-01-19 13:49:14 +0000
URL:       https://git.openjdk.org/jdk/commit/453dbd12ee42731d7ebfd1a856338099429277c8
;;;","2023-01-29 23:43;stefank;Fix Request JDK 20:

I'd like to request a backport of this bug from JDK 21 to JDK 20. It causes deadlocks and crashes when running Loom with ZGC with JFR. The fix is small, but has two parts to it:

1) Prevent JFR from walking the Loom heap stacks if ZGC hasn't even started to process the current thread, or if ZGC is currently in progress of starting the processing the thread. All other GCs will continue as before.

2) Update to JFR's async profiler. Make sure that we start GC processing of a thread before it is sampled. This ensures that we get the full stack traces even after (1).

This is a small patch, that only affects ZGC when running with the Loom preview, so I would like to consider this a low risk fix.

The original bug was found in Oracle's tier8 CI runs. This has been tested with a manual reproducer which increases the reproducibility of the bug. The fix for JDK 21 has been running in the CI pipeline for about a week.

Reviewed and discussed with ErikÖ and MarkusG. ;;;","2023-01-30 09:09;kvn;Fix request for JDK 20 approved.;;;","2023-02-01 02:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/120
Date: 2023-02-01 10:31:00 +0000;;;","2023-02-01 14:37;dukebot;Changeset: 1330d4ea
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2023-02-01 13:19:26 +0000
URL:       https://git.openjdk.org/jdk/commit/1330d4eaa54790b468f69e61574b3c5d522be120
;;;",,,,,,,,,,,,,,
ZGC: thaws stackChunk with stale oops,JDK-8298376,5089213,Bug,Resolved,JDK,JDK,software,duke,,,P1,Fixed,stefank,stefank,stefank,2022-12-08 03:02,2023-01-31 08:43,2023-10-01 09:56,2022-12-15 03:25,20,,,,,,,21,hotspot,,0,hgupdate-sync,loom,,,,,,,,,,,,,,"During the recent ZGC + Loom rewrites (JDK-8296875) a bug was introduced, which causes Loom to thaw stackChunks with stale oops.

Before that change we made sure that only the GC performed load barriers on the cont oop in stackChunk, so that we could use the oop state as an indication of the age of the stackChunk. That information was then used in ZCollectedHeap::requires_barriers.

In Generational ZGC we changed the implementation of requires_barriers, so that the rest of the JVM didn't need to have special-handling of the cont oop. However, when upstreaming the changes in JDK-8296875 we purposefully didn't update requires_barriers, but we incorrectly brought over the removal of the special-handling of the cont oop.

To limit the fix for this bug, I propose that we restore the special-handling of the cont oop.",,,,,,,,,,JDK-8298780,,,,,,,,,,,,,,,,,,,,,,,JDK-8298058,,,,,,,,,,,JDK-8298058,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zjkj:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-12-08 03:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11585
Date: 2022-12-08 11:05:10 +0000;;;","2022-12-15 01:42;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/37
Date: 2022-12-15 09:34:17 +0000;;;","2022-12-15 03:24;stefank;The bots created a backport bug even though this bug was already targeted to 21. Don't know if it was because it had two fix versions, or if this happens because the affects version is 20. Here's the duke bot commit message:
Changeset: ed8a2120
Author: Stefan Karlsson <stefank@openjdk.org>
Date: 2022-12-14 14:34:24 +0000
URL: https://git.openjdk.org/jdk/commit/ed8a2120ca1e9756c6ab5eeebfe24c15d549f04e;;;","2022-12-16 07:51;dukebot;Changeset: 48f61273
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2022-12-15 11:44:21 +0000
URL:       https://git.openjdk.org/jdk/commit/48f6127325108e573b41d19213e65af99956a31f
;;;",,,,,,,,,,,,,,,,,
Bad copyright header in test/jdk/java/lang/Character/Supplementary.java,JDK-8298375,5089212,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jpai,jpai,jpai,2022-12-08 02:43,2022-12-12 14:00,2023-10-01 09:56,2022-12-08 03:03,20,,,,,,,20,core-libs,,0,noreg-doc,,,,,,,,,,,,,,,A recent commit missed a comma after the 2022 year in test/jdk/java/lang/Character/Supplementary.java causing the copyright validation task to fail,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298033,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zjkb:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4c088d55,,,,,,,,,"2022-12-08 02:58;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11583
Date: 2022-12-08 10:48:40 +0000;;;","2022-12-08 03:03;dukebot;Changeset: 2f426cd6
Author:    Jaikiran Pai <jpai@openjdk.org>
Date:      2022-12-08 11:02:21 +0000
URL:       https://git.openjdk.org/jdk/commit/2f426cd68b28c8bf50b7102f961b15fd47b63b6a
;;;",,,,,,,,,,,,,,,,,,,
monitors_on_stack extracts unprocessed oops,JDK-8298371,5089205,Bug,Resolved,JDK,JDK,software,duke,,,P2,Fixed,stefank,stefank,stefank,2022-12-08 02:20,2023-06-29 13:48,2023-10-01 09:56,2022-12-14 05:24,20,,,,,,,21,hotspot,,0,hgupdate-sync,loom,noreg-hard,,,,,,,,,,,,,"While investigating JDK-8298058 we've found that monitors_on_stack extracts oops without setting up the RegisterMap to process oops. This then leaks out stale oops.

A simple fix is to change the RegisterMap to perform oops processing. However, monitors_on_stack is only used in an assert, so this means that we'll get a difference in behavior between release builds and debug builds. This has the potential to hide bugs in debug builds. It has been suggested to me that it might be better to simply remove the assert:
```
  assert(monitors_on_stack(current) == ((current->held_monitor_count() - current->jni_monitor_count()) > 0),
         ""Held monitor count and locks on stack invariant: "" INT64_FORMAT "" JNI: "" INT64_FORMAT, (int64_t)current->held_monitor_count(), (int64_t)current->jni_monitor_count());
```",,,,,,,,,,JDK-8298734,,,,,,,,,,,,,,,,,,,,,,,JDK-8298058,,,,JDK-8298058,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zjir:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-08 02:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11582
Date: 2022-12-08 10:27:31 +0000;;;","2022-12-13 11:24;mseledtsov;ILW = MLM = P4;;;","2022-12-14 00:28;stefank;We need to be able to test ZGC + Loom in JDK 20, can't defer this to JDK 21 IMHO.;;;","2022-12-14 05:23;stefank;The bug had wrong fix version. Copying the duke bot message:
Changeset: b754aa5e
Author: Stefan Karlsson <stefank@openjdk.org>
Date: 2022-12-14 11:04:49 +0000
URL: https://git.openjdk.org/jdk/commit/b754aa5e3f231aea8da5274c330dc55dd78b0f67;;;","2022-12-14 05:44;stefank;Updated to P2, since we can't run ZGC + Loom testing without this fix.;;;","2022-12-14 06:07;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/32
Date: 2022-12-14 13:42:15 +0000;;;","2022-12-16 07:51;dukebot;Changeset: 323e574a
Author:    Stefan Karlsson <stefank@openjdk.org>
Date:      2022-12-15 11:28:06 +0000
URL:       https://git.openjdk.org/jdk/commit/323e574a50520735f41549f36907563e1b4a1040
;;;",,,,,,,,,,,,,,
C2 fails with assert(opaq->outcnt() == 1 && opaq->in(1) == limit) failed,JDK-8298353,5089187,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,thartmann,thartmann,2022-12-07 22:17,2023-03-09 13:15,2023-10-01 09:56,2022-12-09 07:35,20,21,,,,,,20,hotspot,,0,c2,intermittent,oracle-triage-11,oracle-triage-17,oracle-triage-20,test-bigapps-Renaissance,tier5,tier8,,,,,,,,"Happened once with test/langtools/tools/javac/MethodParameters/LegacyOutputTest/LegacyOutputTest.java and several times with an internal test suite.

# Internal Error (/workspace/open/src/hotspot/share/opto/loopTransform.cpp:2228), pid=781540, tid=787403
# Error: assert(opaq->outcnt() == 1 && opaq->in(1) == limit) failed
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (fastdebug build 20-internal-2022-12-07-2029099.coleen.phillimore.jdk-ks)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-internal-2022-12-07-2029099.coleen.phillimore.jdk-ks, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V [libjvm.so+0x12a6000] PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&, bool)+0x230

Stack: [0x0000fffd3e200000,0x0000fffd3e400000], sp=0x0000fffd3e3f99d0, free space=2022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [libjvm.so+0x12a6000] PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&, bool)+0x230 (loopTransform.cpp:2228)
V [libjvm.so+0x12b0100] IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x530 (loopTransform.cpp:3870)
V [libjvm.so+0x12b02e8] IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x108 (loopTransform.cpp:3906)
V [libjvm.so+0x12b022c] IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x4c (loopTransform.cpp:3890)
V [libjvm.so+0x12dd958] PhaseIdealLoop::build_and_optimize()+0xc64 (loopnode.cpp:4543)
V [libjvm.so+0x9a6e00] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x1e0 (loopnode.hpp:1082)
V [libjvm.so+0x9a29a8] Compile::Optimize()+0xde8 (compile.cpp:2146)
V [libjvm.so+0x9a527c] Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x11cc (compile.cpp:830)
V [libjvm.so+0x7c4578] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1b4 (c2compiler.cpp:113)
V [libjvm.so+0x9b1ac4] CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa10 (compileBroker.cpp:2237)
V [libjvm.so+0x9b2528] CompileBroker::compiler_thread_loop()+0x5b8 (compileBroker.cpp:1916)
V [libjvm.so+0xed2350] JavaThread::thread_main_inner()+0x21c (javaThread.cpp:709)
V [libjvm.so+0x17d6548] Thread::call_run()+0xf8 (thread.cpp:224)
V [libjvm.so+0x14eed44] thread_native_entry(Thread*)+0x100 (os_linux.cpp:739)
C [libpthread.so.0+0x7908] start_thread+0x188",,,,,,,,,,JDK-8298510,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298337,,,,,,,,,JDK-8269820,,,,,"2022-12-07 22:25;thartmann;hs_err_pid2487114.log;https://bugs.openjdk.org/secure/attachment/101955/hs_err_pid2487114.log","2022-12-08 00:02;thartmann;hs_err_pid781540.log;https://bugs.openjdk.org/secure/attachment/101958/hs_err_pid781540.log","2022-12-08 00:00;thartmann;replay_pid781540.log;https://bugs.openjdk.org/secure/attachment/101957/replay_pid781540.log",,,,,,,,,,,,,,,,,,,,,,"0|i2zjer:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-07 22:21;thartmann;ILW = Assert during C2 compilation, intermittent on aarch64 only so far, no workaround = MMH = P3;;;","2022-12-07 22:22;thartmann;Though the failure is similar to JDK-8294540, looking at the failure history, I think this is likely a regression from JDK-8269820.;;;","2022-12-08 06:39;dcubed;Here's the crashing thread's stack for the jdk-20+27-2189-tier5 sighting:

applications/renaissance/RenaissanceStressTest.java

---------------  T H R E A D  ---------------

Current thread (0x0000fffe8c2fc4f0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=3425845, stack(0x0000fffe5adc0000,0x0000fffe5afc0000)]


Current CompileTask:
C2: 904578 55475       4       jdk.nio.zipfs.ZipFileSystem::makeParentDirs (141 bytes)

Stack: [0x0000fffe5adc0000,0x0000fffe5afc0000],  sp=0x0000fffe5afb99d0,  free space=2022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12a7260]  PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&, bool)+0x230  (loopTransform.cpp:2228)
V  [libjvm.so+0x12b1360]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x530  (loopTransform.cpp:3870)
V  [libjvm.so+0x12b1548]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x108  (loopTransform.cpp:3906)
V  [libjvm.so+0x12b148c]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x4c  (loopTransform.cpp:3890)
V  [libjvm.so+0x12debb8]  PhaseIdealLoop::build_and_optimize()+0xc64  (loopnode.cpp:4543)
V  [libjvm.so+0x9a7020]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x1e0  (loopnode.hpp:1082)
V  [libjvm.so+0x9a2bc8]  Compile::Optimize()+0xde8  (compile.cpp:2146)
V  [libjvm.so+0x9a549c]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x11cc  (compile.cpp:830)
V  [libjvm.so+0x7c4618]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1b4  (c2compiler.cpp:113)
V  [libjvm.so+0x9b1ce4]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa10  (compileBroker.cpp:2237)
V  [libjvm.so+0x9b2748]  CompileBroker::compiler_thread_loop()+0x5b8  (compileBroker.cpp:1916)
V  [libjvm.so+0xed23f0]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:709)
V  [libjvm.so+0x17d78a8]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x14f00a4]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:739)
C  [libpthread.so.0+0x7908]  start_thread+0x188;;;","2022-12-08 08:14;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11596
Date: 2022-12-08 16:04:16 +0000;;;","2022-12-09 00:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/6
Date: 2022-12-09 08:43:20 +0000;;;","2022-12-09 07:35;dukebot;Changeset: b7b996cb
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-12-09 15:33:09 +0000
URL:       https://git.openjdk.org/jdk20/commit/b7b996cb9475f8191d4085a2f7f68187b6f015d5
;;;","2022-12-09 07:43;dcubed;Here's the failing thread's stack trace from the jdk-21+1-2-tier5 CI sighting:

applications/renaissance/RenaissanceStressTest.java

---------------  T H R E A D  ---------------

Current thread (0x0000fffb6db0e2b0):  JavaThread ""C2 CompilerThread2"" daemon [_thread_in_native, id=1984452, stack(0x0000fffb7ec00000,0x0000fffb7ee00000)]


Current CompileTask:
C2: 905821 59163       4       jdk.nio.zipfs.ZipFileSystem::makeParentDirs (141 bytes)

Stack: [0x0000fffb7ec00000,0x0000fffb7ee00000],  sp=0x0000fffb7edf99d0,  free space=2022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12a7710]  PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&, bool)+0x230  (loopTransform.cpp:2228)
V  [libjvm.so+0x12b1810]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x530  (loopTransform.cpp:3870)
V  [libjvm.so+0x12b19f8]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x108  (loopTransform.cpp:3906)
V  [libjvm.so+0x12b193c]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x4c  (loopTransform.cpp:3890)
V  [libjvm.so+0x12defb8]  PhaseIdealLoop::build_and_optimize()+0xc64  (loopnode.cpp:4538)
V  [libjvm.so+0x9a7660]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x1e0  (loopnode.hpp:1082)
V  [libjvm.so+0x9a3208]  Compile::Optimize()+0xde8  (compile.cpp:2146)
V  [libjvm.so+0x9a5adc]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x11cc  (compile.cpp:830)
V  [libjvm.so+0x7c4c38]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1b4  (c2compiler.cpp:113)
V  [libjvm.so+0x9b2324]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa10  (compileBroker.cpp:2237)
V  [libjvm.so+0x9b2d88]  CompileBroker::compiler_thread_loop()+0x5b8  (compileBroker.cpp:1916)
V  [libjvm.so+0xed2990]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:709)
V  [libjvm.so+0x17d8118]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x14f0914]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:739)
C  [libpthread.so.0+0x7908]  start_thread+0x188;;;","2022-12-09 07:52;dcubed;This fix is integrated in jdk-20+28-2217. The fix has not yet been sync'ed to jdk-21.;;;","2022-12-10 20:04;dcubed;The fix for this bug was synced into jdk/jdk in jdk-21+2-23.;;;",,,,,,,,,,,,
/usr/java/latest points to wrong JDK,JDK-8298349,5089181,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,asemenyuk,asemenyuk,2022-12-07 21:29,2023-01-25 06:06,2023-10-01 09:56,2022-12-07 22:24,11,17,20,,,,,20,install,,0,jdk11u-na,jdk17u-na,sn_133,,,,,,,,,,,,,"Install jdk17 rpm with JDK-8297520
Install jdk11 rpm with JDK-8297520

Expected: /usr/java/latest symbolic link points to /usr/lib/jvm/jdk-17-oracle-x64
Actual: /usr/java/latest symbolic link points to /usr/lib/jvm/jdk-11-oracle-x64

Didn't happen before JDK-8297520",,,,,,,,,,JDK-8298408,JDK-8298412,JDK-8298409,,,,,,,,,,,,,,,,,,,,JDK-8298330,,,,,JDK-8297520,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i2zjdf:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6d4c575e,,,,,,,Verified,,"2023-01-11 01:59;goetz;[11u-na, 17u-na]
Install not maintained in OpenJDK;;;","2023-01-25 06:06;nperminov;Tested with builds: 
8u371: https://jpg-data.us.oracle.com/artifactory/re-release-local/jdk/8u371/b03/bundles/linux-x64/ 
11.0.9: https://jpg-data.us.oracle.com/artifactory/re-release-local/jdk/11.0.19/3/bundles/linux-x64/ 
17.0.7: https://jpg-data.us.oracle.com/artifactory/re-release-local/jdk/17.0.7/3/bundles/linux-x64/ ;;;",,,,,,,,,,,,,,,,,,,
Fix another two C2 IR matching tests for RISC-V,JDK-8298345,5089176,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,gcao,gcao,gcao,2022-12-07 19:14,2022-12-15 00:02,2023-10-01 09:56,2022-12-09 04:45,20,,,,,,,21,hotspot,,0,noreg-self,oracle-triage-20,,,,,,,,,,,,,,"Fix two IR matching tests that failed on RISC-V.

Vector api Node will be matched only when UseRVV is enabled:
- test/hotspot/jtreg/compiler/c2/irTests/TestAutoVectorization2DArray.java
- test/hotspot/jtreg/compiler/vectorization/TestAutoVecIntMinMax.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,riscv,,,,,,,,,,,,,,,"0|i2zjcb:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-07 19:53;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11577
Date: 2022-12-08 03:26:38 +0000;;;","2022-12-08 01:48;rcastanedalo;ILW = test bug due to relaxed precondition; on RISC-V with UseRVV disabled; ignore test failure = MMM = P3 ;;;","2022-12-08 01:50;rcastanedalo;Hi [~gcao], I updated the issue type to 'Bug' since that seems to match better your description (test failures due to wrong test expectations). Please feel free to change back to 'RFE' if you disagree.;;;","2022-12-09 04:45;dukebot;Changeset: 33d955ad
Author:    Gui Cao <gcao@openjdk.org>
Committer: Julian Waters <jwaters@openjdk.org>
Date:      2022-12-09 12:43:47 +0000
URL:       https://git.openjdk.org/jdk/commit/33d955ad6e46eecd947e958ce295f6a6c348b2a6
;;;",,,,,,,,,,,,,,,,,
"""Could not confirm if TargetJDK is hardened."" warning for SA tests on macosx-aarch64-debug",JDK-8298343,5089174,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,cjplummer,cjplummer,cjplummer,2022-12-07 18:21,2022-12-19 12:38,2023-10-01 09:56,2022-12-12 10:31,20,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,"In the log for most SA tests on macos-aarch64-debug, you will see something like:

STDOUT: Executable=/System/Volumes/Data/mesos/work_dir/jib-master/install/2022-12-07-2219530.chris.plummer.jdk/macosx-aarch64-debug.jdk/jdk-20/fastdebug/bin/java
...
STDOUT: CodeDirectory v=20400 size=758 flags=0x2(adhoc) hashes=13+7 location=embedded
STDOUT: Signature=adhoc
...
Could not confirm if TargetJDK is hardened. Assuming not hardened.

The message at the end shouldn't be happening. The problem is in Platform.isHardenedOSX(), which is searching for ""flags=0x20002(adhoc,linker-signed)"", but instead we are seeing ""flags=0x2(adhoc)"". This is due to JDK-8293550, which is now explicitly adding adhoc signing. Previously we just allowed the linker to just do the default adhoc signing, which is why you would also see the ""linker-signed"" flag. Since we explicitly do adhoc signing now, ""linker-signed"" is missing.

The fix is to just allow either form. Since it is possible to build without the explicitly adhoc signing, we still need to support the old form that includes ""linker-signed"".

There seems to be no adverse affects from this bug, since the conclusion that the JDK is not hardened is the correct one.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8293550,,,,,,,,,,,,,,,,,,,,,aarch64,,,,,,,,,os_x,,,,,,"0|i2zjbv:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@714e388c,,,,,,,,,"2022-12-09 14:25;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11619
Date: 2022-12-09 22:16:44 +0000;;;","2022-12-12 10:31;dukebot;Changeset: 781a2e0b
Author:    Chris Plummer <cjplummer@openjdk.org>
Date:      2022-12-12 18:29:58 +0000
URL:       https://git.openjdk.org/jdk/commit/781a2e0b2d7d0f36387837de6f50ff087502d317
;;;",,,,,,,,,,,,,,,,,,,
Ensure heap growth in TestNativeMemoryUsageEvents.java,JDK-8298341,5089172,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sjohanss,dholmes,dholmes,2022-12-07 16:20,2023-07-05 15:31,2023-10-01 09:56,2022-12-08 01:34,20,,,,,,,20,hotspot,,0,intermittent,tier3,tier6,,,,,,,,,,,,,"The new test added by JDK-8157023 failed on macOS Aarch64:

----------System.out:(24/1867)----------
[0.002s][info][gc] Using G1
[0.141s][info][gc] GC(0) Pause Young (Normal) (G1 Evacuation Pause) 8M->2M(18M) 2.106ms
[0.181s][info][gc] GC(1) Pause Young (Normal) (G1 Evacuation Pause) 8M->4M(18M) 1.742ms
[0.218s][info][gc] GC(2) Pause Young (Normal) (G1 Evacuation Pause) 10M->6M(18M) 1.507ms
[0.219s][info][gc] GC(3) Pause Young (Normal) (G1 Evacuation Pause) 10M->11M(18M) 0.836ms
[0.221s][info][gc] GC(4) Pause Young (Concurrent Start) (G1 Evacuation Pause) 14M->14M(20M) 0.858ms
[0.221s][info][gc] GC(5) Concurrent Mark Cycle
[0.222s][info][gc] GC(6) Pause Young (Normal) (G1 Evacuation Pause) 16M->16M(63M) 0.798ms
[0.227s][info][gc] GC(7) Pause Young (Normal) (G1 Evacuation Pause) 31M->31M(63M) 1.996ms
[0.228s][info][gc] GC(5) Pause Remark 32M->32M(63M) 1.263ms
[0.232s][info][gc] GC(8) Pause Young (Normal) (G1 Evacuation Pause) 40M->42M(63M) 1.577ms
[0.233s][info][gc] GC(5) Pause Cleanup 42M->42M(63M) 0.030ms
[0.236s][info][gc] GC(9) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 47M->48M(63M) 1.493ms
[0.237s][info][gc] GC(5) Concurrent Mark Cycle 16.137ms
[0.238s][info][gc] GC(10) Pause Young (Mixed) (G1 Evacuation Pause) 52M->52M(63M) 0.633ms
[0.240s][info][gc] GC(11) Pause Young (Concurrent Start) (G1 Evacuation Pause) 56M->56M(89M) 0.716ms
[0.240s][info][gc] GC(12) Concurrent Mark Cycle
[0.246s][info][gc] GC(13) Pause Young (Normal) (G1 Evacuation Pause) 65M->66M(89M) 3.184ms
[0.250s][info][gc] GC(14) Pause Young (Normal) (G1 Evacuation Pause) 71M->72M(89M) 1.044ms
[0.253s][info][gc] GC(15) Pause Young (Normal) (G1 Evacuation Pause) 76M->76M(89M) 0.864ms
[0.255s][info][gc] GC(12) Pause Remark 76M->76M(128M) 1.250ms
[0.261s][info][gc] GC(12) Pause Cleanup 76M->76M(128M) 0.076ms
[0.262s][info][gc] GC(12) Concurrent Mark Cycle 21.914ms
[0.363s][info][gc] GC(16) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 79M->78M(128M) 1.571ms
----------System.err:(14/1056)----------
java.lang.RuntimeException: heap should have grown and NMT should show that: expected 18874368 > 18874368
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertGreaterThan(Asserts.java:343)
	at jdk.jfr.event.runtime.TestNativeMemoryUsageEvents.verifyHeapGrowth(TestNativeMemoryUsageEvents.java:138)
	at jdk.jfr.event.runtime.TestNativeMemoryUsageEvents.main(TestNativeMemoryUsageEvents.java:160)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8157023,JDK-8311536,,,,,,,,,,,,,,,,,,,,aarch64,x86_64,,,,,,20,,linux,os_x,,,,,"0|i2zjbf:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-07 20:12;dholmes;Also failing on linux-x64.;;;","2022-12-07 20:14;dholmes;Fails intermittently about 50% of the time in tier3. Not seen failing on Windows yet.;;;","2022-12-07 23:17;sjohanss;For some reason the recording sometimes seems to be instant only including events from a single timestamp. There are still two events as expected (beginChunk and endChunk) but they are from the same point in time. And that point seem to be before the heap has expanded, need to see if I need to guarantee that the recording is running for the full run.;;;","2022-12-07 23:33;sjohanss;The problem is the AgeThreshold that is used to let the two different event (total and the different types) use the same NMTUsage data. If the test is to quick, we will not only re-use the NMTUsage for both events, but for both the first and last event. 

Simple fix is to just add a short sleep to the test. The real fix is to let the NMTEvents use the new feature in: https://bugs.openjdk.org/browse/JDK-8298175

There is already a RFE filed for this, not sure if that RFE should be included in 20. Will add a sleep to the test for now to get rid of the noise.;;;","2022-12-08 00:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11579
Date: 2022-12-08 07:58:39 +0000;;;","2022-12-08 01:34;dukebot;Changeset: 46cd457b
Author:    Stefan Johansson <sjohanss@openjdk.org>
Date:      2022-12-08 09:33:06 +0000
URL:       https://git.openjdk.org/jdk/commit/46cd457b0f78996a3f26e44452de8f8a66041f58
;;;","2022-12-08 08:39;dcubed;The fix for this bug is integrated in jdk-20+27-2198.;;;",,,,,,,,,,,,,,
java/net/httpclient/CancelRequestTest.java fails with AssertionError: Found some subscribers for testPostInterrupt,JDK-8298340,5089171,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,dfuchs,msheppar,msheppar,2022-12-07 16:18,2023-02-01 07:41,2023-10-01 09:56,2022-12-09 07:24,18,19,20,,,,,20,core-libs,,0,CI,httpclient,intermittent,tier2,,,,,,,,,,,,"
[11 s, 261 ms, 651241 ns] Created 4 servers and 49 clients
Failed tests: 
	testPostInterrupt[http://localhost:36991/http1/x/same/interruptThread, true]: java.lang.AssertionError: WARNING: tracker for HttpClientImpl(13) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 2
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(13) has outstanding operations:
	Pending HTTP Requests: 0
	Pending HTTP/1.1 operations: 0
	Pending HTTP/2 streams: 0
	Pending WebSocket operations: 0
	Pending TCP connections: 2
	Pending Subscribers: 1
	Total pending operations: 0
	Facade referenced: true
	Selector alive: true
	at ReferenceTracker.check(ReferenceTracker.java:240)
	at CancelRequestTest.testPostInterrupt(CancelRequestTest.java:560)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.testng.TestRunner.privateRun(TestRunner.java:764)
	at org.testng.TestRunner.run(TestRunner.java:585)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.runSuites(TestNG.java:1069)
	at org.testng.TestNG.run(TestNG.java:1037)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:93)
	at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:53)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

=========================

config CancelRequestTest.printFailedTests(org.testng.TestRunner@e561f27): success
Waiting for HTTP operations to terminate...
PASSED: No outstanding operations or unreleased resources found in 49 clients
Http1TestServer: stop
Http1TestServer: stop
Http2TestServerImpl: stop
Http2TestServerImpl: stop
config CancelRequestTest.teardown(): success

===============================================
java/net/httpclient/CancelRequestTest.java
Total tests run: 56, Passes: 28, Failures: 1, Skips: 27
===============================================
",,,,,,,,,,JDK-8298509,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8277969,JDK-8294916,JDK-8296889,,,,,,,,,,,,aarch64,,,,,,,,,linux,,,,,,"0|i2zjb7:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@446e124a,,,,,,,Verified,,"2022-12-08 07:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11595
Date: 2022-12-08 15:02:34 +0000;;;","2022-12-08 08:05;dfuchs;Note: The code causing this was added in 18 by JDK-8277969. I thought I had nailed it down with JDK-8296889 but I apparently missed yet one corner case in the HTTP/2 stack.;;;","2022-12-08 10:36;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/3
Date: 2022-12-08 18:28:43 +0000;;;","2022-12-09 07:24;dukebot;Changeset: 05d67f69
Author:    Daniel Fuchs <dfuchs@openjdk.org>
Date:      2022-12-09 15:23:22 +0000
URL:       https://git.openjdk.org/jdk20/commit/05d67f69e34a76702406b36436ddb5db18e8fa68
;;;",,,,,,,,,,,,,,,,,
/usr/java/latest is missing after one of JDK rpms is uninstalled,JDK-8298330,5089161,Bug,Closed,JDK,JDK,software,duke,,,P3,Fixed,asemenyuk,asemenyuk,asemenyuk,2022-12-07 14:47,2023-01-26 09:38,2023-10-01 09:56,2022-12-07 21:15,11,17,20,,,,,20,install,,0,jdk11u-na,jdk17u-na,sn_133,,,,,,,,,,,,,"Install jdk11 rpm with JDK-8297520
Install jdk17 rpm with JDK-8297520
Uninstall jdk11
Expected: /usr/java/latest symbolic link points to /usr/lib/jvm/jdk-17-oracle-x64
Actual: /usr/java/latest symbolic link is missing

Didn't happen before JDK-8297520",,,,,,,,,,JDK-8298407,JDK-8298411,JDK-8298406,,,,,,,,,,,,,,,,,,,JDK-8298349,,,,,,JDK-8297520,,,,,,,JDK-8301186,,,,,,,,,,,,,,generic,,,,,,,,,linux,,,,,,"0|i2zj8z:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6d4c575e,,,,,,,Verified,,"2023-01-11 01:59;goetz;[11u-na, 17u-na]
Install not maintained in OpenJDK;;;","2023-01-25 06:00;nperminov;Tested with builds:
8u371: https://jpg-data.us.oracle.com/artifactory/re-release-local/jdk/8u371/b03/bundles/linux-x64/
11.0.9: https://jpg-data.us.oracle.com/artifactory/re-release-local/jdk/11.0.19/3/bundles/linux-x64/
17.0.7: https://jpg-data.us.oracle.com/artifactory/re-release-local/jdk/17.0.7/3/bundles/linux-x64/
;;;",,,,,,,,,,,,,,,,,,,
Unable to run shell test with make,JDK-8298324,5089154,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,erikj,rhalade,rhalade,2022-12-07 13:10,2023-01-09 11:14,2023-10-01 09:56,2023-01-03 13:08,20,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,"Running a shell test with make fails as it tries to find test files with additional "".sh"" suffix.

$ make test TEST=open/test/jdk/sun/security/tools/keytool/ListKeychainStore.sh
Building target 'test' in configuration 'linux-x64'
Test selection 'open/test/jdk/sun/security/tools/keytool/ListKeychainStore.sh', will run:
* jtreg:open/test/jdk/sun/security/tools/keytool/ListKeychainStore.sh.sh

Running test 'jtreg:open/test/jdk/sun/security/tools/keytool/ListKeychainStore.sh.sh'
Error: Cannot find file: open/test/jdk/sun/security/tools/keytool/ListKeychainStore.sh.sh",,,,,,,,,,JDK-8299611,,,,,,,,,,,,,,,,,JDK-8156889,,,,,,,,,,,,,,,,,JDK-8287828,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zj7f:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-12-07 14:24;erikj;It looks like the logic for extracting the TestID from JDK-8287828 is the culprit. I'm trying to fix it, but don't want to break the TestID support. However, I can't figure out if the TestId support is working currently, at least it isn't for me.

The current implementation:

TestID = \
    $(subst .java,,$(suffix $(notdir $1)))

A simple fix would be:

TestID = \
    $(subst .sh,,$(subst .java,,$(suffix $(notdir $1))))

I tried for a more elegant solution:

TestID = \
    $(if $(findstring $(HASH), $1), $(HASH)$(lastword $(subst $(HASH), , $1)), )

But I can't get a TEST argument through with a #TestID with any of them.;;;","2022-12-08 07:48;erikj;After thinking on this some more, I'm going with the simple solution. Looking at https://openjdk.org/jtreg/tag-spec.html#LEADING_COMMENTS, the valid suffixes for Jtreg tests seem to be .java, .sh and .html, so making sure each of those are substed out should be a good enough fix for now.;;;","2022-12-08 12:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/5
Date: 2022-12-08 20:38:59 +0000;;;","2023-01-03 13:08;dukebot;Changeset: 031829d8
Author:    Erik Joelsson <erikj@openjdk.org>
Date:      2023-01-03 21:07:19 +0000
URL:       https://git.openjdk.org/jdk20/commit/031829d8854f2eae5f04d74bca515d58aab801ef
;;;",,,,,,,,,,,,,,,,,
trivial typo in JOptionPane.OK_OPTION,JDK-8298323,5089153,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,psadhukhan,jjg,jjg,2022-12-07 13:01,2022-12-14 14:00,2023-10-01 09:56,2022-12-07 23:16,20,,,,,,,20,client-libs,,0,noreg-doc,sn_133,,,,,,,,,,,,,,"""form"" should be ""from""

OK_OPTIONCopy URL
public static final int OK_OPTION
Return value form class method if OK is chosen.
See Also:
Constant Field Values

See https://download.java.net/java/early_access/jdk20/docs/api/java.desktop/javax/swing/JOptionPane.html#OK_OPTION",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zj77:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@568a5b31,,,,,,,,,"2022-12-07 20:39;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11578
Date: 2022-12-08 04:31:06 +0000;;;","2022-12-07 23:16;dukebot;Changeset: 51759650
Author:    Prasanta Sadhukhan <psadhukhan@openjdk.org>
Date:      2022-12-08 07:15:02 +0000
URL:       https://git.openjdk.org/jdk/commit/51759650e5593f48ce616a1a8abf51f5f8fd5302
;;;",,,,,,,,,,,,,,,,,,,
2 File Leak defect groups in 2 files,JDK-8298321,5089151,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,ccheung,shadowbug,shadowbug,2022-12-07 12:08,2023-01-17 12:07,2023-10-01 09:56,2023-01-11 09:51,21,,,,,,,21,hotspot,,0,,,,,,,,,,,,,,,,"Fixing 2 file leak warnings:
1) DirectivesParser::parse_from_file_inner() in open/src/hotspot/share/compiler/directivesParser.cpp
2) mmap_attach_shared() in open/src/hotspot/os/posix/perfMemory_posix.cpp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8291067,,,,,,,,,,,,,,,,,,,,,,,other,,,,,,"0|i2zj6r:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2023-01-06 15:56;ccheung;More details on the 2 issues mentioned in the description:

1)
bool DirectivesParser::parse_from_file_inner(const char* filename, outputStream* stream) {
  struct stat st;
  ResourceMark rm;
  if (os::stat(filename, &st) == 0) {
    // found file, open it
    int file_handle = os::open(filename, 0, 0);
    if (file_handle != -1) {
      // read contents into resource array
      char* buffer = NEW_RESOURCE_ARRAY(char, st.st_size+1);
      ssize_t num_read = ::read(file_handle, (char*) buffer, st.st_size);
      if (num_read >= 0) {
        buffer[num_read] = '\0';
        // close file
        ::close(file_handle);
        return parse_string(buffer, stream) > 0;
      }
    }
  }
  return false;
}

The file_handle should also be closed for the case (num_read < 0).

2)
static void mmap_attach_shared(int vmid, char** addr, size_t* sizep, TRAPS) {
  ...
  // We don't use CHECK as we need to free the strings even if an exception occurred.
  int fd = open_sharedmem_file(filename, file_flags, THREAD);

  // free the c heap resources that are no longer needed
  FREE_C_HEAP_ARRAY(char, luser);
  FREE_C_HEAP_ARRAY(char, dirname);
  FREE_C_HEAP_ARRAY(char, filename);

  if (fd == OS_ERR || HAS_PENDING_EXCEPTION) {
    return;
  }

  ...
}

A static analysis tool gives a warning that the fd is not closed under the conditions HAS_PENDING_EXCEPTION and fd != OS_ERR.
It is ok because in open_sharedmem_file(), if there's an exception, fd always equals OS_ERR.
For clarity, the HAS_PENDING_EXCEPTION condition should be removed from the ""if"" statement.

;;;","2023-01-09 11:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11909
Date: 2023-01-09 19:34:55 +0000;;;","2023-01-11 09:51;dukebot;Changeset: 9c1e98da
Author:    Calvin Cheung <ccheung@openjdk.org>
Date:      2023-01-11 17:48:36 +0000
URL:       https://git.openjdk.org/jdk/commit/9c1e98dac54ed2ce169f3f3df05bc80052f6a217
;;;",,,,,,,,,,,,,,,,,,
Typo in the comment block of  catch_inline_exception,JDK-8298320,5089150,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,xliu,xliu,xliu,2022-12-07 12:01,2022-12-16 02:34,2023-10-01 09:56,2022-12-09 08:52,11,17,20,21,8,,,21,hotspot,,0,c2,cleanup,noreg-doc,oracle-triage-20,,,,,,,,,,,,"The following comment makes reference to 'Deutsch-Shiffman'.  I believe it's a typo. it should be 'Schiffman' if the author intent to cite this paper:

Deutsch, L. Peter, and Allan M. Schiffman. ""Efficient implementation of the Smalltalk-80 system."" Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of programming languages. 1984.

I ask 'Deutsch-Shiffman' to google and this is what google answers me. seems reasonable. 

// Case 2: we have some handlers, with loaded exception klasses that have
// no subklasses.  We do a Deutsch-Shiffman style type-check on the incoming
// exception oop and branch to the handler directly.
...
void Parse::catch_inline_exceptions(SafePointNode* ex_map) {

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zj6j:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-07 20:27;dlong;ILW = Typo in comments = LLL = P5 ;;;","2022-12-08 09:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11598
Date: 2022-12-08 17:09:03 +0000;;;","2022-12-09 08:52;dukebot;Changeset: 93465354
Author:    Xin Liu <xliu@openjdk.org>
Date:      2022-12-09 16:49:47 +0000
URL:       https://git.openjdk.org/jdk/commit/9346535415b158aaaa679ef8c3c147595b5206e9
;;;",,,,,,,,,,,,,,,,,,
Enable hotspot/tier1 for 32-bit builds in GHA for 8u,JDK-8298307,5089136,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,sgehwolf,zzambers,zzambers,2022-12-07 10:24,2023-01-30 20:20,2023-10-01 09:56,2022-12-12 01:44,openjdk8u362,,,,,,,openjdk8u372,infrastructure,,0,jdk8u-fix-request,jdk8u-fix-yes,noreg-self,,,,,,,,,,,,,"All issues in hotspot/tier1 affecting 32-bit builds are now resolved so these configurations can now be enabled in GHA. This is the last piece to have full tier1 testing on all platforms we have in GHA.

Notes:
- hotspot/tier1 on linux requires working C/C++ compiler for some tests (gcc multilib packages are required for linux-x86)
- hotspot/tier1 contains some container tests, but ubuntu:latest does not include 32-bit libs by default. Multilib image needs to be created.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zj3f:",9223372036854775807,b01,,,,,,,,,,,"2022-12-07 10:35;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/204
Date: 2022-12-07 18:26:53 +0000;;;","2022-12-07 10:38;zzambers;Fix request (8u):

Enable hotspot/tier1 for 32-bit builds in GHA for 8u
Modifies GHA workflow file only. All tests passed. ;;;","2022-12-12 01:44;dukebot;Changeset: c84a5b28
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-12-12 09:42:32 +0000
URL:       https://git.openjdk.org/jdk8u-dev/commit/c84a5b2857aacff54ad0bf31d4bdd3747451d92f
;;;","2023-01-30 20:20;dukebot;Changeset: c84a5b28
Author:    Zdenek Zambersky <zzambers@redhat.com>
Committer: Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-12-12 09:42:32 +0000
URL:       https://git.openjdk.org/jdk8u/commit/c84a5b2857aacff54ad0bf31d4bdd3747451d92f
;;;",,,,,,,,,,,,,,,,,
C2: assert(main_cmp->in(2)->Opcode() == Op_Opaque1) failed: main loop has no opaque node?,JDK-8298301,5089128,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,chagedorn,chagedorn,chagedorn,2022-12-07 08:49,2023-01-23 17:32,2023-10-01 09:56,2022-12-07 10:34,20,,,,,,,20,hotspot,,0,c2,oracle-triage-11,oracle-triage-17,oracle-triage-20,regression,tier3,,,,,,,,,,"Starts to fail after JDK-8269820.

Reproduce:
Run compiler/c2/TestFoldCompares.java with -XX:+UseParallelGC

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/christian/jdk/open/src/hotspot/share/opto/loopTransform.cpp:3581), pid=806142, tid=806151
#  assert(main_cmp->in(2)->Opcode() == Op_Opaque1) failed: main loop has no opaque node?
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-12-07-1633265.christian...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-12-07-1633265.christian..., mixed mode, tiered, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xf569ca]  IdealLoopTree::remove_main_post_loops(CountedLoopNode*, PhaseIdealLoop*)+0x1ea",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8269820,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zj1n:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,Verified,,"2022-12-07 09:09;chagedorn;ILW = C2 assertion when removing a main loop, various tests, disable compilation of affected method = HMM = P2;;;","2022-12-07 09:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11567
Date: 2022-12-07 17:03:08 +0000;;;","2022-12-07 10:34;dukebot;Changeset: e86f31b5
Author:    Christian Hagedorn <chagedorn@openjdk.org>
Date:      2022-12-07 18:32:28 +0000
URL:       https://git.openjdk.org/jdk/commit/e86f31b5e71af00fea9cd989a86c1e75e3df1821
;;;","2022-12-07 15:19;dcubed;The fix for this bug is integrated in jdk-20+27-2181.;;;","2023-01-23 17:32;epavlova;Failed tests passed in JDK 20 ATR.;;;",,,,,,,,,,,,,,,,
NMT: count deltas are printed with 32-bit signed size,JDK-8298298,5089125,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,stuefe,stuefe,stuefe,2022-12-07 08:32,2023-05-25 06:34,2023-10-01 09:56,2022-12-09 09:48,17,20,21,,,,,21,hotspot,,0,amazon-interest,,,,,,,,,,,,,,,"Count deltas in diff reports (number of things, e.g. malloc blocks or class count) are shown as signed int, restricting them to +-2g. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zj0z:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-07 09:59;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11568
Date: 2022-12-07 17:10:18 +0000;;;","2022-12-09 09:48;dukebot;Changeset: f729f5b6
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-12-09 17:46:28 +0000
URL:       https://git.openjdk.org/jdk/commit/f729f5b6d01b0d3a0ee21f50199ca30935c8237a
;;;",,,,,,,,,,,,,,,,,,,
"gc/TestFullGCCount.java fails with ""System.gc collections miscounted.""",JDK-8298296,5089123,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,kbarrett,dcubed,dcubed,2022-12-07 08:27,2023-05-30 23:14,2023-10-01 09:56,2022-12-14 05:38,20,21,8,,,,,20,hotspot,,0,gc-g1,gc-pending-review,noreg-self,problemlist,tier7,,,,,,,,,,,"The following test failed in the JDK20 CI:

gc/TestFullGCCount.java

Here's a snippet from the log file:

#section:main
----------messages:(7/325)----------
command: main -Xlog:gc gc.TestFullGCCount
reason: User specified action: run main/othervm -Xlog:gc gc.TestFullGCCount 
started: Wed Dec 07 12:33:02 UTC 2022
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.management
finished: Wed Dec 07 12:33:03 UTC 2022
elapsed time (seconds): 1.117
----------configuration:(3/43)----------
Boot Layer
  add modules: java.management

----------System.out:(104/6390)----------
[0.032s][info][gc] Using G1
[0.603s][info][gc] GC(0) Pause Young (Concurrent Start) (System.gc()) 3M->1M(372M) 78.863ms
[0.603s][info][gc] GC(1) Concurrent Mark Cycle
[0.629s][info][gc] GC(1) Pause Remark 2M->2M(14M) 1.880ms
[0.630s][info][gc] GC(1) Pause Cleanup 2M->2M(14M) 0.039ms
[0.630s][info][gc] GC(1) Concurrent Mark Cycle 26.648ms
[0.637s][info][gc] GC(2) Pause Young (Concurrent Start) (System.gc()) 2M->1M(14M) 2.838ms
[0.637s][info][gc] GC(3) Concurrent Mark Cycle
[0.642s][info][gc] GC(3) Pause Remark 1M->1M(10M) 1.592ms
[0.643s][info][gc] GC(3) Pause Cleanup 1M->1M(10M) 0.034ms
[0.643s][info][gc] GC(3) Concurrent Mark Cycle 6.077ms
[0.646s][info][gc] GC(4) Pause Young (Concurrent Start) (System.gc()) 1M->1M(10M) 3.533ms
[0.646s][info][gc] GC(5) Concurrent Mark Cycle
[0.658s][info][gc] GC(5) Pause Remark 1M->1M(10M) 3.093ms
[0.660s][info][gc] GC(5) Pause Cleanup 1M->1M(10M) 0.072ms
[0.660s][info][gc] GC(5) Concurrent Mark Cycle 13.624ms
[0.662s][info][gc] GC(6) Pause Young (Concurrent Start) (System.gc()) 1M->1M(10M) 1.342ms
[0.662s][info][gc] GC(7) Concurrent Mark Cycle
[0.669s][info][gc] GC(7) Pause Remark 1M->1M(10M) 2.324ms
[0.672s][info][gc] GC(7) Pause Cleanup 1M->1M(10M) 0.087ms
[0.672s][info][gc] GC(7) Concurrent Mark Cycle 9.233ms
[0.674s][info][gc] GC(8) Pause Young (Concurrent Start) (System.gc()) 1M->1M(190M) 1.999ms
[0.674s][info][gc] GC(9) Concurrent Mark Cycle
[0.682s][info][gc] GC(9) Pause Remark 1M->1M(14M) 2.208ms
[0.684s][info][gc] GC(9) Pause Cleanup 1M->1M(14M) 0.069ms
[0.684s][info][gc] GC(9) Concurrent Mark Cycle 10.534ms
[0.693s][info][gc] GC(10) Pause Young (Concurrent Start) (System.gc()) 1M->1M(14M) 8.582ms
[0.693s][info][gc] GC(11) Concurrent Mark Cycle
[0.714s][info][gc] GC(11) Pause Remark 1M->1M(14M) 9.284ms
[0.716s][info][gc] GC(11) Pause Cleanup 1M->1M(14M) 0.105ms
[0.716s][info][gc] GC(11) Concurrent Mark Cycle 23.064ms
[0.719s][info][gc] GC(12) Pause Young (Concurrent Start) (System.gc()) 1M->1M(14M) 2.824ms
[0.719s][info][gc] GC(13) Concurrent Mark Cycle
[0.727s][info][gc] GC(13) Pause Remark 1M->1M(14M) 2.196ms
[0.739s][info][gc] GC(13) Pause Cleanup 1M->1M(14M) 0.090ms
[0.739s][info][gc] GC(13) Concurrent Mark Cycle 20.239ms
[0.741s][info][gc] GC(14) Pause Young (Concurrent Start) (System.gc()) 1M->1M(14M) 1.231ms
[0.741s][info][gc] GC(15) Concurrent Mark Cycle
[0.762s][info][gc] GC(15) Pause Remark 1M->1M(14M) 2.136ms
[0.776s][info][gc] GC(15) Pause Cleanup 1M->1M(14M) 0.087ms
[0.776s][info][gc] GC(15) Concurrent Mark Cycle 35.388ms
[0.778s][info][gc] GC(16) Pause Young (Concurrent Start) (System.gc()) 1M->1M(14M) 1.360ms
[0.778s][info][gc] GC(17) Concurrent Mark Cycle
[0.784s][info][gc] GC(17) Pause Remark 1M->1M(14M) 2.048ms
[0.788s][info][gc] GC(17) Pause Cleanup 1M->1M(14M) 0.088ms
[0.790s][info][gc] GC(17) Concurrent Mark Cycle 12.094ms
[0.792s][info][gc] GC(18) Pause Young (Concurrent Start) (System.gc()) 1M->1M(14M) 1.495ms
[0.792s][info][gc] GC(19) Concurrent Mark Cycle
[0.803s][info][gc] GC(19) Pause Remark 1M->1M(14M) 1.875ms
[0.806s][info][gc] GC(19) Pause Cleanup 1M->1M(14M) 0.074ms
[0.806s][info][gc] GC(19) Concurrent Mark Cycle 14.634ms
[0.808s][info][gc] GC(20) Pause Young (Concurrent Start) (System.gc()) 1M->1M(192M) 1.825ms
[0.808s][info][gc] GC(21) Concurrent Mark Cycle
[0.820s][info][gc] GC(21) Pause Remark 1M->1M(14M) 4.792ms
[0.824s][info][gc] GC(21) Pause Cleanup 1M->1M(14M) 1.035ms
[0.824s][info][gc] GC(21) Concurrent Mark Cycle 15.157ms
[0.826s][info][gc] GC(22) Pause Young (Concurrent Start) (System.gc()) 1M->1M(14M) 2.122ms
[0.826s][info][gc] GC(23) Concurrent Mark Cycle
[0.845s][info][gc] GC(23) Pause Remark 1M->1M(14M) 1.462ms
[0.847s][info][gc] GC(23) Pause Cleanup 1M->1M(14M) 0.072ms
[0.847s][info][gc] GC(23) Concurrent Mark Cycle 20.912ms
[0.849s][info][gc] GC(24) Pause Young (Concurrent Start) (System.gc()) 1M->1M(14M) 1.353ms
[0.849s][info][gc] GC(25) Concurrent Mark Cycle
[0.860s][info][gc] GC(25) Pause Remark 1M->1M(14M) 3.916ms
[0.865s][info][gc] GC(25) Pause Cleanup 1M->1M(14M) 0.083ms
[0.865s][info][gc] GC(25) Concurrent Mark Cycle 16.646ms
[0.867s][info][gc] GC(26) Pause Young (Concurrent Start) (System.gc()) 1M->1M(14M) 1.359ms
[0.867s][info][gc] GC(27) Concurrent Mark Cycle
[0.887s][info][gc] GC(27) Pause Remark 1M->1M(14M) 1.954ms
[0.889s][info][gc] GC(27) Pause Cleanup 1M->1M(14M) 0.071ms
[0.889s][info][gc] GC(27) Concurrent Mark Cycle 21.804ms
[0.891s][info][gc] GC(28) Pause Young (Concurrent Start) (System.gc()) 1M->1M(192M) 2.433ms
[0.891s][info][gc] GC(29) Concurrent Mark Cycle
[0.897s][info][gc] GC(29) Pause Remark 1M->1M(14M) 1.866ms
[0.899s][info][gc] GC(29) Pause Cleanup 1M->1M(14M) 0.075ms
[0.899s][info][gc] GC(29) Concurrent Mark Cycle 8.231ms
[0.901s][info][gc] GC(30) Pause Young (Concurrent Start) (System.gc()) 1M->1M(14M) 0.935ms
[0.901s][info][gc] GC(31) Concurrent Mark Cycle
[0.920s][info][gc] GC(31) Pause Remark 1M->1M(14M) 16.175ms
[0.926s][info][gc] GC(31) Pause Cleanup 1M->1M(14M) 0.090ms
[0.927s][info][gc] GC(31) Concurrent Mark Cycle 26.918ms
[0.929s][info][gc] GC(32) Pause Young (Concurrent Start) (System.gc()) 1M->1M(14M) 1.123ms
[0.929s][info][gc] GC(33) Concurrent Mark Cycle
[0.950s][info][gc] GC(33) Pause Remark 1M->1M(14M) 2.920ms
[0.953s][info][gc] GC(33) Pause Cleanup 1M->1M(14M) 0.079ms
[0.953s][info][gc] GC(33) Concurrent Mark Cycle 23.972ms
[0.954s][info][gc] GC(34) Pause Young (Concurrent Start) (System.gc()) 1M->1M(14M) 1.282ms
[0.954s][info][gc] GC(35) Concurrent Mark Cycle
[0.960s][info][gc] GC(35) Pause Remark 1M->1M(14M) 1.618ms
[0.961s][info][gc] GC(35) Pause Cleanup 1M->1M(14M) 0.096ms
[0.961s][info][gc] GC(35) Concurrent Mark Cycle 7.062ms
[0.963s][info][gc] GC(36) Pause Young (Concurrent Start) (System.gc()) 1M->1M(192M) 1.511ms
[0.963s][info][gc] GC(37) Concurrent Mark Cycle
[0.967s][info][gc] GC(37) Pause Remark 1M->1M(14M) 1.354ms
[0.969s][info][gc] GC(37) Pause Cleanup 1M->1M(14M) 0.086ms
[0.969s][info][gc] GC(37) Concurrent Mark Cycle 6.450ms
[0.976s][info][gc] GC(38) Pause Young (Concurrent Start) (System.gc()) 1M->1M(14M) 6.280ms
[0.976s][info][gc] GC(39) Concurrent Mark Cycle
[0.996s][info][gc] GC(39) Pause Remark 1M->1M(14M) 2.758ms
[0.998s][info][gc] GC(39) Pause Cleanup 1M->1M(14M) 0.303ms
[0.999s][info][gc] GC(39) Concurrent Mark Cycle 23.000ms
Checking: G1 Young Generation
Checking: G1 Old Generation
Checking: G1 Concurrent GC
----------System.err:(31/1836)----------
Collector 'G1 Concurrent GC' has increment 2 at iteration 0
Collector 'G1 Concurrent GC' has increment 2 at iteration 1
Collector 'G1 Concurrent GC' has increment 2 at iteration 2
Collector 'G1 Concurrent GC' has increment 2 at iteration 3
Collector 'G1 Concurrent GC' has increment 2 at iteration 4
Collector 'G1 Concurrent GC' has increment 2 at iteration 5
Collector 'G1 Concurrent GC' has increment 2 at iteration 6
Collector 'G1 Concurrent GC' has increment 2 at iteration 7
Collector 'G1 Concurrent GC' has increment 2 at iteration 8
Collector 'G1 Concurrent GC' has increment 2 at iteration 9
Collector 'G1 Concurrent GC' has increment 2 at iteration 10
Collector 'G1 Concurrent GC' has increment 2 at iteration 11
Collector 'G1 Concurrent GC' has increment 2 at iteration 12
Collector 'G1 Concurrent GC' has increment 2 at iteration 13
Collector 'G1 Concurrent GC' has increment 2 at iteration 14
Collector 'G1 Concurrent GC' has increment 2 at iteration 15
Collector 'G1 Concurrent GC' has increment 2 at iteration 16
Collector 'G1 Concurrent GC' has increment 2 at iteration 17
Collector 'G1 Concurrent GC' has increment 2 at iteration 18

java.lang.RuntimeException: FAILED: System.gc collections miscounted.
	at gc.TestFullGCCount.main(TestFullGCCount.java:89)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1599)

JavaTest Message: Test threw exception: java.lang.RuntimeException: FAILED: System.gc collections miscounted.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: FAILED: System.gc collections miscounted.
----------rerun:(40/5993)*----------",,,,,,,,,,JDK-8298806,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297247,JDK-8298785,,,,,,,,,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2zj0j:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-12-08 06:45;dcubed;This failure has happened in 3 Tier7 job sets in a row, so far...;;;","2022-12-09 06:37;kbarrett;Likely introduced by JDK-8297247.  Our first CI failure is the first time (and every time thereafter) with the relevant configuration (`-XX:+ExplicitGCInvokesConcurrent`).;;;","2022-12-09 06:47;kbarrett;Looks like the test was not updated for JDK-8297247.  I think the fix is to adjust one of the test's `@requires` to `@requires !vm.opt.ExplicitGCInvokesConcurrent`.
;;;","2022-12-09 19:32;dcubed;Here's a log file snippet from the jdk-21+1-2-tier7 sighting:

gc/TestFullGCCount.java


----------System.err:(31/1836)----------
Collector 'G1 Concurrent GC' has increment 2 at iteration 0
Collector 'G1 Concurrent GC' has increment 2 at iteration 1
Collector 'G1 Concurrent GC' has increment 2 at iteration 2
Collector 'G1 Concurrent GC' has increment 2 at iteration 3
Collector 'G1 Concurrent GC' has increment 2 at iteration 4
Collector 'G1 Concurrent GC' has increment 2 at iteration 5
Collector 'G1 Concurrent GC' has increment 2 at iteration 6
Collector 'G1 Concurrent GC' has increment 2 at iteration 7
Collector 'G1 Concurrent GC' has increment 2 at iteration 8
Collector 'G1 Concurrent GC' has increment 2 at iteration 9
Collector 'G1 Concurrent GC' has increment 2 at iteration 10
Collector 'G1 Concurrent GC' has increment 2 at iteration 11
Collector 'G1 Concurrent GC' has increment 2 at iteration 12
Collector 'G1 Concurrent GC' has increment 2 at iteration 13
Collector 'G1 Concurrent GC' has increment 2 at iteration 14
Collector 'G1 Concurrent GC' has increment 2 at iteration 15
Collector 'G1 Concurrent GC' has increment 2 at iteration 16
Collector 'G1 Concurrent GC' has increment 2 at iteration 17
Collector 'G1 Concurrent GC' has increment 2 at iteration 18

java.lang.RuntimeException: FAILED: System.gc collections miscounted.
	at gc.TestFullGCCount.main(TestFullGCCount.java:89)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException: FAILED: System.gc collections miscounted.;;;","2022-12-13 02:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/16
Date: 2022-12-12 04:48:06 +0000;;;","2022-12-14 05:38;dukebot;Changeset: 27917014
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2022-12-14 13:36:36 +0000
URL:       https://git.openjdk.org/jdk20/commit/279170147a10ec2da2242b4dcb3279c41c471000
;;;",,,,,,,,,,,,,,,
"Replace ""session"" with ""scope"" for FFM access",JDK-8298277,5089102,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,pminborg,pminborg,pminborg,2022-12-07 06:42,2022-12-21 17:10,2023-10-01 09:56,2022-12-14 13:42,,,,,,,,20,core-libs,,0,,,,,,,,,,,,,,,,"When the JEP 434 PR was merged, ""session"" was renamed to ""scope"". There are a large number of places in the JDK where there was no renaming.

Old FFM ""session"" references should be replaced with ""scope"".

Renaming will impact several subcomponents.",,,,,,,,,,JDK-8298821,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zivv:",9223372036854775807,b29,,,,,,,,,,,"2022-12-07 14:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11573
Date: 2022-12-07 21:55:43 +0000;;;","2022-12-08 06:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11593
Date: 2022-12-08 14:11:29 +0000;;;","2022-12-14 01:37;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/29
Date: 2022-12-14 09:30:21 +0000;;;","2022-12-14 13:42;dukebot;Changeset: ebc47104
Author:    Per Minborg <pminborg@openjdk.org>
Committer: Maurizio Cimadamore <mcimadamore@openjdk.org>
Date:      2022-12-14 21:40:29 +0000
URL:       https://git.openjdk.org/jdk20/commit/ebc471040e03dc41829d57e1280cabd75b2ad53a
;;;",,,,,,,,,,,,,,,,,
Clean up ProblemList,JDK-8298272,5089097,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,thartmann,thartmann,thartmann,2022-12-07 06:23,2022-12-13 01:17,2023-10-01 09:56,2022-12-08 04:09,20,,,,,,,20,hotspot,,0,cleanup,noreg-self,oracle-triage-20,ursqe-triaged,,,,,,,,,,,,"The following two tests on test/hotspot/jtreg/ProblemList.txt should be removed or updated:

JDK-8204459 Not an Issue
compiler/jvmci/compilerToVM/GetFlagValueTest.java

JDK-8067651 Fixed
compiler/tiered/LevelTransitionTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8204459,JDK-8067651,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2ziur:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-07 06:27;thartmann;ILW = Tests on problem list although bug is fixed, two tests, no workaround = MLH = P4;;;","2022-12-07 07:12;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11561
Date: 2022-12-07 15:03:52 +0000;;;","2022-12-08 04:09;dukebot;Changeset: d8ef60b4
Author:    Tobias Hartmann <thartmann@openjdk.org>
Date:      2022-12-08 12:06:24 +0000
URL:       https://git.openjdk.org/jdk/commit/d8ef60b406a9e8fe6cc6b7be0b74e45de38604c5
;;;",,,,,,,,,,,,,,,,,,
java/security/SignedJar/spi-calendar-provider/TestSPISigned.java failing on Windows,JDK-8298271,5089096,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,sgehwolf,mullan,mullan,2022-12-07 06:16,2023-07-13 00:29,2023-10-01 09:56,2022-12-12 07:52,20,,,,,,,20,security-libs,,0,jdk11u-fix-request,jdk11u-fix-yes,jdk17u-fix-request,jdk17u-fix-yes,noreg-self,ProblemList,tier2,,,,,,,,,"The following test failed in the JDK20 CI:

java/security/SignedJar/spi-calendar-provider/TestSPISigned.java

The test was added with JDK-8298108.

Here's a snippet from the log file:

----------System.err:(25/1266)----------
 stdout: [Debug: Running test
];
 stderr: [Exception in thread ""main"" java.lang.RuntimeException: Test failed with signed jar and  argument java.locale.providers=SPI
	at TestSPISigned.doRunTest(TestSPISigned.java:115)
	at TestSPISigned.main(TestSPISigned.java:75)
Caused by: java.lang.RuntimeException: Expected calendar from SPI to be in effect: expected 4 to equal 1
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at TestSPISigned.check(TestSPISigned.java:121)
	at TestSPISigned.doRunTest(TestSPISigned.java:112)
	... 1 more
]
 exitValue = 1

java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
	at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:490)
	at TestSPISigned.main(TestSPISigned.java:103)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1623)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]",,,,,,,,,,JDK-8299294,JDK-8312008,JDK-8308890,JDK-8298662,JDK-8299871,JDK-8299866,,,,,,,,,,,,,,,,,,,,,,JDK-8298108,JDK-8298274,JDK-8280890,,,,,,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2ziuj:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2ec284e3,,,,,,,,,"2022-12-07 06:22;mullan;[~sgehwolf] I would advise ProblemListing this test ASAP for the Windows platforms if a fix is not imminent as JDK 20 RDP is tomorrow. ;;;","2022-12-07 06:31;sgehwolf;[~mullan] OK.;;;","2022-12-07 06:42;sgehwolf;[~mullan] https://github.com/openjdk/jdk/pull/11560 is the problem list PR.;;;","2022-12-07 07:46;sgehwolf;[~mullan] With the problem list in place the priority (P2) of this can be lowered, now?;;;","2022-12-07 08:14;mullan;[~sgehwolf] Yes, I think it is ok to lower the priority to P3 now that it is on the ProblemList. I took a look at the test. My best guess is that the classpath separator used in the test ("":"") is Unix specific, and you should be using the ""path.separator"" system property.;;;","2022-12-07 09:46;sgehwolf;OK, thanks! I need to find someone to test this for me. I'll post a PR with a fix as soon as we have something verified.;;;","2022-12-08 07:14;mullan;[~sgehwolf] The following change should fix the issue. I just tested it and it passes on Windows platforms. Please submit a PR when you have a chance and also remove the test from the ProblemList.

diff --git a/test/jdk/java/security/SignedJar/spi-calendar-provider/TestSPISigned.java b/test/jdk/java/security/SignedJar/spi-calendar-provider/TestSPISigned.java
index e7cf5146252..1c882100fab 100644
--- a/test/jdk/java/security/SignedJar/spi-calendar-provider/TestSPISigned.java
+++ b/test/jdk/java/security/SignedJar/spi-calendar-provider/TestSPISigned.java
@@ -26,6 +26,7 @@ import jdk.test.lib.SecurityTools;
 import jdk.test.lib.Asserts;
 import jdk.test.lib.process.ProcessTools;
 import jdk.test.lib.process.OutputAnalyzer;
+import java.io.File;
 import java.util.Calendar;
 import java.util.Locale;
 import java.util.List;
@@ -95,7 +96,8 @@ public class TestSPISigned {
             testRun.add(""-Djava.locale.providers=SPI"");
             testRun.add(""-cp"");
             String classPath = System.getProperty(""java.class.path"");
-            classPath = classPath + "":"" + SIGNED_JAR.toAbsolutePath().toString();
+            classPath = classPath + File.pathSeparator +
+                    SIGNED_JAR.toAbsolutePath().toString();
             testRun.add(classPath);
             testRun.add(TestSPISigned.class.getSimpleName());
             testRun.add(""run-test"");;;;","2022-12-09 02:19;sgehwolf;Thanks, posted for review!;;;","2022-12-09 02:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11606
Date: 2022-12-09 10:18:36 +0000;;;","2022-12-12 02:43;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/18
Date: 2022-12-12 10:37:18 +0000;;;","2022-12-12 07:52;dukebot;Changeset: cf93933e
Author:    Severin Gehwolf <sgehwolf@openjdk.org>
Date:      2022-12-12 15:49:31 +0000
URL:       https://git.openjdk.org/jdk20/commit/cf93933e21d146fe296b1e4b8e2ef06b699175d6
;;;","2022-12-22 09:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/978
Date: 2022-12-22 17:18:26 +0000;;;","2022-12-22 09:32;sgehwolf;Fix Request (17u):

Please approve this follow-up for JDK-8298108 in order to fix the test on Windows. The patch is not clean (only omits ProblemList.txt) as this is the fix for the original problem list. The test verifies the fix of JDK-8280890 which got integrated today (Dec 23, 2022). Test only patch, little risk. I intend to integrate only once JDK-8280890 and JDK-8298108 are both in the 17u-dev tree.;;;","2022-12-23 09:12;sgehwolf;Fix Request (11u):

Please approve this follow-up for JDK-8298108 in order to fix the test on Windows. The patch is not clean as it omits the ProblemList.txt change. The test verifies the fix of JDK-8280890 which got integrated today (Dec 23, 2022). Test only patch, little risk. I intend to integrate only once JDK-8280890 and JDK-8298108 are both in the 11u-dev tree.;;;","2022-12-23 09:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk11u-dev/pull/1609
Date: 2022-12-23 17:10:24 +0000;;;","2023-04-04 12:13;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk8u-dev/pull/269
Date: 2023-02-27 19:13:58 +0000;;;",,,,,
Limit sscanf output width in cgroup file parsers,JDK-8298248,5089069,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-12-06 23:38,2022-12-12 13:56,2023-10-01 09:56,2022-12-07 03:14,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,"GET_CONTAINER_INFO_CPTR should not be called without a limit for the output buffers (even though the usual 1K provided should be large enough, so this would only cause overwriters for intentionally bad input)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zioj:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-07 00:30;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11554
Date: 2022-12-07 07:50:20 +0000;;;","2022-12-07 03:14;dukebot;Changeset: 3e041eb9
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-12-07 11:12:51 +0000
URL:       https://git.openjdk.org/jdk/commit/3e041eb9093275bc658c02ae74cd39b4a74684ee
;;;",,,,,,,,,,,,,,,,,,,
Replace the usage of ImageLayoutException by the CMMException,JDK-8298240,5089062,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,serb,serb,serb,2022-12-06 20:05,2023-01-11 23:01,2023-10-01 09:56,2023-01-06 00:07,11,17,20,,,,,21,client-libs,,0,noreg-cleanup,,,,,,,,,,,,,,,"ImageLayoutException exception was added by the next change to report any issues with image layout calculation:
https://github.com/openjdk/jdk/commit/33184bb4131df574b9ac4028429ccb8e0bb1323d
But since we cannot throw the unspecified exception to the application, all usage of ImageLayoutException was wrapped by the CMMException. And now if such CMMException occurs we have lost at what point the initial exception was raised. 

We can pass some additional data around, but it looks like we can just delete the ImageLayoutException and use CMMException instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zimz:",9223372036854775807,b05,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-12-07 02:45;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11552
Date: 2022-12-07 04:07:45 +0000;;;","2023-01-06 00:07;dukebot;Changeset: b5b7948d
Author:    Sergey Bylokhov <serb@openjdk.org>
Date:      2023-01-06 08:04:51 +0000
URL:       https://git.openjdk.org/jdk/commit/b5b7948d9b4870d9e84ec8d8b544b252f9053785
;;;",,,,,,,,,,,,,,,,,,,
[AIX] Disable PPC64LE continuations on AIX,JDK-8298225,5089046,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsteele,tsteele,tsteele,2022-12-06 16:02,2022-12-15 00:11,2023-10-01 09:56,2022-12-09 09:05,,,,,,,,20,hotspot,,0,loom,,,,,,,,,,,,,,,"After JDK-8286302, AIX build fails with the following error:

ad_ppc.cpp:22493:47: error: use of undeclared identifier 'Continuations'
  assert(VerifyOops || MachNode::size(ra_) <= Continuations::enabled() ? 8 : 4, ""bad fixed size"");

The generated ad_ppc.cpp file does not import continuations.hpp.",,,,,,,,,,JDK-8298512,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8286302,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,"0|i2zijf:",9223372036854775807,b28,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-06 16:15;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11550
Date: 2022-12-07 00:05:43 +0000;;;","2022-12-08 11:08;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/4
Date: 2022-12-08 18:56:10 +0000;;;","2022-12-09 09:05;dukebot;Changeset: a8946490
Author:    Tyler Steele <tsteele@openjdk.org>
Date:      2022-12-09 17:04:11 +0000
URL:       https://git.openjdk.org/jdk20/commit/a8946490e2b362d241c61cc459dbaba93fc93ca4
;;;",,,,,,,,,,,,,,,,,,
ProblemList java/awt/Mixing/AWT_Mixing/ViewportOverlapping.java on windows-x64,JDK-8298222,5089041,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dcubed,dcubed,dcubed,2022-12-06 13:20,2022-12-12 13:53,2023-10-01 09:56,2022-12-06 14:03,20,,,,,,,20,client-libs,,0,tier4,,,,,,,,,,,,,,,"In order to reduce the noise in the JDK20 CI, I'm ProblemListing:

java/awt/Mixing/AWT_Mixing/ViewportOverlapping.java

on windows-x64.

This test has failed 6 times in the JDK20 CI since 2022.11.16
under two different ""misc windows bugs"":

JDK-8253184 [TEST_BUG] client tests failing on Windows_10_pro
JDK-8295813 misc client tests failing on Windows_11_Pro

The test has been linked by itself and in combination with other
tests. It's a mess to say the least, but one of the noisiest of the
""misc windows bugs"" offenders.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8295813,,,,,,,JDK-8253184,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2ziib:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-12-06 13:22;dcubed;Here's the context diffs for the proposed fix:

$ git diff
diff --git a/test/jdk/ProblemList.txt b/test/jdk/ProblemList.txt
index 67520093616..26b21389474 100644
--- a/test/jdk/ProblemList.txt
+++ b/test/jdk/ProblemList.txt
@@ -672,6 +672,7 @@ java/awt/Mouse/EnterExitEvents/DragWindowTest.java 8297296 macosx-all
 javax/swing/JFileChooser/8046391/bug8046391.java 8293862 windows-x64
 java/awt/Focus/NonFocusableWindowTest/NonfocusableOwnerTest.java 8280392 windows-x64
 java/awt/Mixing/AWT_Mixing/OpaqueOverlapping.java 8294264 windows-x64
+java/awt/Mixing/AWT_Mixing/ViewportOverlapping.java 8253184,8295813 windows-x64
 
 sanity/client/SwingSet/src/ToolTipDemoTest.java 8293001 linux-all
 sanity/client/SwingSet/src/ButtonDemoScreenshotTest.java 8265770 macosx-all;;;","2022-12-06 13:49;dcubed;Bump from P4 -> P3 to match the higher of the two related bugs.;;;","2022-12-06 13:55;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11548
Date: 2022-12-06 21:38:45 +0000;;;","2022-12-06 14:03;dukebot;Changeset: 16a59018
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-12-06 22:01:45 +0000
URL:       https://git.openjdk.org/jdk/commit/16a5901845de170e2e6f9ea13f19bb2a34c1da85
;;;",,,,,,,,,,,,,,,,,
ProblemList java/awt/Mixing/AWT_Mixing/OpaqueOverlapping.java on windows-x64,JDK-8298220,5089039,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,dcubed,dcubed,dcubed,2022-12-06 13:07,2022-12-12 13:53,2023-10-01 09:56,2022-12-06 14:03,20,,,,,,,20,client-libs,,0,tier4,,,,,,,,,,,,,,,"In order to reduce noise in the JDK20 CI, I'm ProblemListing:

java/awt/Mixing/AWT_Mixing/OpaqueOverlapping.java

on windows-x64.

There have been 8 sightings in the JDK20 CI since 2022.11.15.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294264,,,,,,,,,,,,,,x86_64,,,,,,,,,windows,,,,,,"0|i2zihv:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a9b3fd3,,,,,,,,,"2022-12-06 13:08;dcubed;Here's the context diffs for the proposed fix:

$ git diff
diff --git a/test/jdk/ProblemList.txt b/test/jdk/ProblemList.txt
index e50ae4748cf..67520093616 100644
--- a/test/jdk/ProblemList.txt
+++ b/test/jdk/ProblemList.txt
@@ -671,6 +671,7 @@ javax/swing/JFrame/8175301/ScaledFrameBackgroundTest.java 8274106 macosx-aarch64
 java/awt/Mouse/EnterExitEvents/DragWindowTest.java 8297296 macosx-all
 javax/swing/JFileChooser/8046391/bug8046391.java 8293862 windows-x64
 java/awt/Focus/NonFocusableWindowTest/NonfocusableOwnerTest.java 8280392 windows-x64
+java/awt/Mixing/AWT_Mixing/OpaqueOverlapping.java 8294264 windows-x64
 
 sanity/client/SwingSet/src/ToolTipDemoTest.java 8293001 linux-all
 sanity/client/SwingSet/src/ButtonDemoScreenshotTest.java 8265770 macosx-all;;;","2022-12-06 14:03;dukebot;Changeset: 16a59018
Author:    Daniel D. Daugherty <dcubed@openjdk.org>
Date:      2022-12-06 22:01:45 +0000
URL:       https://git.openjdk.org/jdk/commit/16a5901845de170e2e6f9ea13f19bb2a34c1da85
;;;","2022-12-06 14:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11548
Date: 2022-12-06 21:38:45 +0000;;;",,,,,,,,,,,,,,,,,,
"Regressions 30-110% in SwingMark on MacOS, more so on aarch64",JDK-8298217,5089036,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,aghaisas,ecaspole,ecaspole,2022-12-06 12:56,2023-01-03 11:32,2023-10-01 09:56,2022-12-16 22:38,20,,,,,,,20,client-libs,,0,lanai,macos,perf-regression,regression,sn_133,,,,,,,,,,,"We see regressions on both Mac cpu platforms in 20-b7, but much worse on aarch64.

This seems to be related to JDK-8288948",,,,,,,,,,JDK-8299096,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8288948,,,,,,,JDK-8299207,,,,,"2022-12-16 06:51;aghaisas;J2DBench and Swingmark results.png;https://bugs.openjdk.org/secure/attachment/102105/J2DBench+and+Swingmark+results.png","2022-12-16 07:02;aghaisas;RenderPerfTest results.png;https://bugs.openjdk.org/secure/attachment/102106/RenderPerfTest+results.png",,,,,,,,aarch64,,,,,,b07,20,,os_x,,,,,,"0|i2zih7:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4b09ce31,,,,,,,,,"2022-12-08 04:13;lbourges;I suppose calling drawPrimitives(batch) is only helpful when the batch size > threshold to boost performance but slower if size is 1 when the application uses different primitive types or mixes AA & non AA primitives... as it flushes the batch queue too (sync ?)

I will test with smaller batch size in native code to figure out what is the good threshold to use batches or not.
Ideally, primitives should be grouped by batches only when performance is better (size > threshold) or use previous approach instead.;;;","2022-12-16 06:29;aghaisas;The nature of data plays an important part in rendering performance as noted in the comment made on JDK-8288948 -
https://bugs.openjdk.org/browse/JDK-8288948?focusedCommentId=14504772&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14504772 

Although the fix JDK-8288948 is logical, it seems to have an adverse impact on SwingMark test numbers especially on aarch64.

The SwingMark tests closely depict the UI operations in real-world applications as compared to the J2DBench and RenderPerfTest tests. Hence, it is decided to revert the regression causing commits JDK-8288948 (and dependent JDK-8291266).

After reverting the changesets, there is still a difference in SwingMark ""Tree"" test numbers for Metal pipeline as compared to OpenGL pipeline. It needs to be addressed separately.;;;","2022-12-16 07:05;aghaisas;See the attached screenshots showing performance difference after reverting regression causing change-sets.
Thanks [~jdv] for running RenderPerfTest on M1 Mac system.;;;","2022-12-16 07:28;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/47
Date: 2022-12-16 15:20:14 +0000;;;","2022-12-16 22:38;dukebot;Changeset: 3b7970ca
Author:    Ajit Ghaisas <aghaisas@openjdk.org>
Date:      2022-12-17 06:37:18 +0000
URL:       https://git.openjdk.org/jdk20/commit/3b7970cab39a67eabcde331822f0432f71d9186b
;;;",,,,,,,,,,,,,,,,
"gc/g1/TestVerifyGCType.java failed with ""Missing expected verification pattern Verifying After GC for: Pause Young (Prepare Mixed): expected true, was false""",JDK-8298215,5089034,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kbarrett,dcubed,dcubed,2022-12-06 12:48,2023-01-20 19:31,2023-10-01 09:56,2022-12-19 16:15,20,21,,,,,,20,hotspot,,0,gc-g1,gc-pending-review,problemlist,tier1,tier2,tier3,,,,,,,,,,"The following test failed in the JDK20 CI:

gc/g1/TestVerifyGCType.java

Here's a snippet from the log file:

----------System.err:(15/939)----------
java.lang.RuntimeException: Missing expected verification pattern Verifying After GC for: Pause Young (Prepare Mixed): expected true, was false
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertTrue(Asserts.java:486)
	at gc.g1.TestVerifyGCType.verifyType(TestVerifyGCType.java:202)
	at gc.g1.TestVerifyGCType.verifyCollection(TestVerifyGCType.java:197)
	at gc.g1.TestVerifyGCType.testYoungEvacFail(TestVerifyGCType.java:135)
	at gc.g1.TestVerifyGCType.main(TestVerifyGCType.java:57)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1599)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Missing expected verification pattern Verifying After GC for: Pause Young (Prepare Mixed): expected true, was false

Starting this as a P2 since this is Tier1 failure.",,,,,,,,,,JDK-8299109,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8298702,,,,,,,JDK-8297186,,,,,"2022-12-13 13:37;dcubed;jdk-20+27_macosx-aarch64.8298215.zip;https://bugs.openjdk.org/secure/attachment/102013/jdk-20%2B27_macosx-aarch64.8298215.zip",,,,,,,,,aarch64,x86_64,,,,,,,,linux,os_x,,,,,"0|i2zigr:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,Verified,,"2022-12-13 13:37;dcubed;Spotted in my macosx-aarch64 stress run with jdk-20+27 bits:

$ unzip -l jdk-20+27_macosx-aarch64.8298215.zip
Archive:  jdk-20+27_macosx-aarch64.8298215.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    40104  12-11-2022 10:47   jdk-20+27_3/failures.macosx-aarch64/TestVerifyGCType.jtr.fastdebug
---------                     -------
    40104                     1 file;;;","2022-12-13 19:41;kbarrett;The failure seems to be pretty rare.  Only 3 occurrences in Oracle's CI (20/21) so far (1 week since the first occurrence).  I've run the test 700 times each on linux-x64 and linux-aarch64 without any failures.

Not sure what might have triggered it to start failing, as the obviously relevant code seems to have been stable for a while. One possibility is a subtle effect of JDK-8297186, which was pushed a few hours before the first CI occurrence.

The failures I have all look the same, failing with -XX:VerifyGCAfter=young-evac-fail.  It turns out my in-development changes to fix JDK-8293824 make this test fail pretty reliably.

I changed the output from a failure in the verifyType helper to include the log data, to get more information about what might be going wrong.  It looks like what is happening is that after the concurrent cycle completes there is an ""ordinary"" young GC (not triggered by the test program via WhiteBox) that takes the ""Prepare Mixed"" slot, and this young GC doesn't have any evacuation failures.  Because it doesn't have any evacuation failures (even though command line arguments try to ensure all young GCs will have some), it doesn't print the expected verification log message for that GC, failing the test.

Not sure yet why this unrequested GC doesn't produce any evacuation failures.
;;;","2022-12-17 15:00;kbarrett;The problem is a related to the policy change from JDK-8297186.

The test is failing because there isn't a verification step at the end of the ""Prepare Mixed"" collection when the test is only requesting verification after an evacuation failure. This is happening because there wasn't an evacuation failure.  There wasn't an evacuation failure because the mutator didn't allocate anything before triggering another GC.

The GC set the young length to include an eden regions.  However, we now (as of JDK-8137022) revise the young length almost immediately after coming out of the GC, and JDK-8297186 allows there to be no eden regions in that case.  So we revise the young length to have no eden regions, then allocate and trigger a GC.  That GC doesn't have anything to evacuate, so doesn't have any evacuation failures.  And so doesn't do the verification step, causing the test to fail.

This situation seems to very intermittent.  However, with my proposed changes for JDK-8293824 (https://github.com/openjdk/jdk/pull/11435) this failure becomes very consistent.

This can be fixed by ensuring the desired young length always includes at least one eden region, regardless of whether the update is occurring at the end of a GC or during the mutator phase.
;;;","2022-12-18 14:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/52
Date: 2022-12-18 22:42:11 +0000;;;","2022-12-19 16:15;dukebot;Changeset: ea40f299
Author:    Kim Barrett <kbarrett@openjdk.org>
Date:      2022-12-20 00:13:25 +0000
URL:       https://git.openjdk.org/jdk20/commit/ea40f299397f19f1bbedd4eeb4d24802a709a912
;;;","2023-01-20 19:31;lmesnik;Stop failing in CI.;;;",,,,,,,,,,,,,,,
[AIX] Dead code elimination removed jfr constructor used by AIX,JDK-8298202,5089021,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,tsteele,tsteele,tsteele,2022-12-06 10:13,2022-12-12 13:57,2023-10-01 09:56,2022-12-07 08:26,,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,Recent dead code elimination in JDK-8297864 removed the 5 argument SystemProcess constructor used on AIX.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297864,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,aix,,,,,,"0|i2zidv:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@42995637,,,,,,,,,"2022-12-06 10:49;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11546
Date: 2022-12-06 18:31:21 +0000;;;","2022-12-07 08:26;dukebot;Changeset: dd7385d1
Author:    Tyler Steele <tsteele@openjdk.org>
Date:      2022-12-07 16:24:51 +0000
URL:       https://git.openjdk.org/jdk/commit/dd7385d1e86afe8af79587e80c5046af5c84b5cd
;;;",,,,,,,,,,,,,,,,,,,
Clean up raw type warnings in javafx.beans.property.* and com.sun.javafx.property.*,JDK-8298200,5089019,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,jhendrikx,jhendrikx,jhendrikx,2022-12-06 10:10,2023-03-10 15:23,2023-10-01 09:56,2022-12-14 04:25,jfx19,,,,,,,jfx20,javafx,,0,noreg-cleanup,,,,,,,,,,,,,,,"Fix raw type warnings and related clean-ups.

Note: some raw types have leaked into public API (specifically in JavaBeanObjectPropertyBuilder).

Fixing them would be a backwards compatible change just like when generics were first introduced. The Javadoc however would change slightly (""<T>"" would be added to the method signature).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297300,,,,,,,JDK-8298391,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zidf:",9223372036854775807,b12,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@233f6319,,,,,,,,,"2022-12-06 11:38;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/969
Date: 2022-12-06 18:12:39 +0000;;;","2022-12-14 04:25;dukebot;Changeset: f217d5e9
Author:    John Hendrikx <jhendrikx@openjdk.org>
Committer: Nir Lisker <nlisker@openjdk.org>
Date:      2022-12-14 12:24:33 +0000
URL:       https://git.openjdk.org/jfx/commit/f217d5e9564e87eb573b7990fa9bfb395f75c070
;;;",,,,,,,,,,,,,,,,,,,
Regression in SPECjvm2008-MonteCarlo for pre-Cascade Lake Intel processors,JDK-8298189,5089006,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,rcastanedalo,ecaspole,ecaspole,2022-12-06 08:50,2023-05-01 10:11,2023-10-01 09:56,2023-04-26 01:27,20,21,,,,,,21,hotspot,,0,oracle-triage-11,oracle-triage-17,oracle-triage-20,perf-regression,,,,,,,,,,,,"Appeared in retriage of 20-b19.
I did CI build by build testing, this is related to JDK-8283699.

We run with the options:
-server -XX:+UnlockExperimentalVMOptions -XX:+UseZGC

scimark.monte_carlo -ikv",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8283699,,,,,,,,,,,,,,,,,,,,,x86,,,,,,b19,20,,os_x,,,,,,"0|i2ziaj:",9223372036854775807,b20,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-06 09:00;ecaspole;FYI we test using Minis with 12.6
$ sw_vers
ProductName:	macOS
ProductVersion:	12.6
BuildVersion:	21G115;;;","2022-12-06 09:36;rcastanedalo;ILW = slight performance regression in standard benchmark; reproducible reliably on macOS with ZGC; no known workaround = MMH = P3;;;","2022-12-06 09:41;rcastanedalo;[~qamai] It seems RFE JDK-8283699 caused this performance regression, could you please have a look and see if you can reproduce it in your environment? Thanks!;;;","2022-12-23 08:53;rcastanedalo;The following peephole rule adding by JDK-8283699 to src/hotspot/cpu/x86/x86_64.ad is the culprit of the performance regression:

peephole
%{
  peeppredicate(VM_Version::supports_fast_2op_lea());
  peepmatch (incI_rReg);
  peepprocedure (lea_coalesce_imm);
  peepreplace (leaI_rReg_immI_peep());
%}

Disabling it leads to the original (before JDK-8283699) throughput for the affected benchmark.;;;","2023-01-02 23:32;thartmann;Good catch, [~rcastanedalo]. Given that there are similar (leal related) rules in the patch, I'm wondering if we should backout the entire patch to be on the safe side for JDK 20 and re-investigate for JDK 21?;;;","2023-01-09 03:29;rcastanedalo;Hi [~thartmann], good point. I will test the performance effect of reverting the whole patch vs. reverting the above rule only. If reverting the whole patch does not cause any regression elsewhere, this might indeed be the safest option.;;;","2023-01-13 04:36;rcastanedalo;A more extensive performance study shows that JDK-8283699, and even the individual peephole rule causing this particular regression, has an otherwise overall positive effect on a broader set of benchmarks and for different x86-64 platforms. Hence any (partial or full) reversal of JDK-8283699 is likely to do more harm than good. Furthermore, it was not possible to reproduce the reported regression consistently across a range of theoretically equivalent Mac x64 machines. Based on these results, I will adjust the priority of this issue and defer it to JDK 21.

Thanks to [~thartmann] and [~ecaspole] for discussions and benchmarking assistance.;;;","2023-01-13 04:37;rcastanedalo;ILW = slight performance regression in standard benchmark; reproducible on some macOS x86 platforms with ZGC; no known workaround = MLH = P4;;;","2023-01-13 04:43;rcastanedalo;[~qamai]  Would you mind looking at this again for JDK 21? (see my comments above). In the best of worlds, we might be able to reduce the scope of the peephole rules so that they only apply in the platforms where they are indeed profitable. As I mentioned offline, I am happy to assist you in running experiments and providing relevant details about our macOS x86-64 benchmarking platforms.;;;","2023-04-24 00:18;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/13605
Date: 2023-04-24 06:05:21 +0000;;;","2023-04-26 01:27;dukebot;Changeset: 8d899925
Author:    Roberto Castañeda Lozano <rcastanedalo@openjdk.org>
Date:      2023-04-26 08:25:11 +0000
URL:       https://git.openjdk.org/jdk/commit/8d899925dc281c5dabbef14d85a6df807f8d300e
;;;",,,,,,,,,,
(fs) BsdFileAttributeViews::setTimes does not support lastAccessTime on HFS+,JDK-8298187,5089003,Bug,Resolved,JDK,JDK,software,duke,,,P5,Fixed,bpb,tzezula,tzezula,2022-12-06 08:21,2022-12-21 17:19,2023-10-01 09:56,2022-12-15 14:48,20,,,,,,,21,core-libs,,0,noreg-hard,,,,,,,,,,,,,,,"The BasicFileAttributeView.setTimes(null, time, null) does not work when the file is on the ""hfs"" file store. The call does not throw any exception but the last access time is not updated. It works fine on the ""apfs"" file store. On the JDK-19 it used to work both on ""hfs"" and ""apfs"". The problem is caused by the fix of JDK-8151430.","Darwin 21.6.0 Darwin Kernel Version 21.6.0: Mon Aug 22 20:17:10 PDT 2022; root:xnu-8020.140.49~2/RELEASE_X86_64 x86_64

openjdk version ""20-ea"" 2023-03-21
OpenJDK Runtime Environment (build 20-ea+23-1677)
OpenJDK 64-Bit Server VM (build 20-ea+23-1677, mixed mode, sharing)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-12-06 08:20;tzezula;Main.java;https://bugs.openjdk.org/secure/attachment/101919/Main.java","2022-12-06 09:26;tzezula;main.cpp;https://bugs.openjdk.org/secure/attachment/101920/main.cpp","2022-12-07 15:00;bpb;modtime.c;https://bugs.openjdk.org/secure/attachment/101945/modtime.c",,,,,,,x86,,,,,,,,,os_x,,,,,,"0|i2zi9v:",9223372036854775807,b03,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@674604a9,,,,,,,,,"2022-12-06 08:35;alanb;I wonder if this is a macOS issue with setattrlist rather than a JDK issue.;;;","2022-12-06 09:26;tzezula;I think that's more Apple's bug. The problem can be reproduced by the attached C++ program.;;;","2022-12-06 09:56;bpb;[~tzezula] Given the above statement ""The problem is caused by the fix of JDK-8151430"", was it actually verified that the problem does not occur in JDK 19? Thanks.;;;","2022-12-06 09:59;tzezula;[~bpb] Yes, in the JDK 19 it works fine. ;;;","2022-12-06 10:05;bpb;[~tzezula] Thanks for the corroboration.;;;","2022-12-07 15:07;bpb;As I had problems compiling the attached main.cpp program, I created the attached program modtime,c from some C code I wrote when testing setattrlist(2) earlier this year. This code also verifies that setting the last access time does not work on HFS. Hence the root problem is an Apple bug as stated above. It appears that the last access time is being set to the time when setattrlist modifies the file attributes instead of to the time specified by the ATTR_CMN_ACCTIME bit(s).

A workaround is possible if we think that this is worth fixing.;;;","2022-12-08 00:34;tzezula;>  I had problems compiling the attached main.cpp program

The main.cpp requires at least C++ 17.
c++ --std=c++17 -o main main.cpp
;;;","2022-12-08 08:51;bpb;Thanks [~tzezula]. That worked, of course, and verified the problem:

$ ./main
Unexpected time: 1670461380, expected: 1670517204

C++ is not one of my strengths.;;;","2022-12-08 11:23;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11600
Date: 2022-12-08 19:13:03 +0000;;;","2022-12-15 14:48;dukebot;Changeset: 54124394
Author:    Brian Burkhalter <bpb@openjdk.org>
Date:      2022-12-15 22:47:29 +0000
URL:       https://git.openjdk.org/jdk/commit/5412439445fadcf66101018a9bd051f8e5d751e8
;;;",,,,,,,,,,,
Incorrect record component type in record patterns,JDK-8298184,5089000,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,jlahoda,jlahoda,jlahoda,2022-12-06 07:41,2022-12-12 13:56,2023-10-01 09:56,2022-12-07 04:07,20,,,,,,,20,tools,,0,conformance,tck-red-20,,,,,,,,,,,,,,"Consider code like this:
---
public class Test7 {

    interface Intf<A> {
    }

    record Rec<T>(T a) implements Intf<T> {

    }

    static boolean test(Intf<? super String> p) {
        return p instanceof Rec<? super String>(var a);
    }

    public static void main(String... args) {
        boolean res = test(new Rec<>(new Object()));
        if (!res) throw new AssertionError();
    }

}
---

Compiling this code and running it fails, as the matching fails.

The reason matching fails is that the type of `var a` is determined to be `String`, but should be `Object`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zi97:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@4dca67bd,,,,,,,,,"2022-12-06 09:06;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11543
Date: 2022-12-06 16:56:29 +0000;;;","2022-12-07 04:07;dukebot;Changeset: cf63f2e3
Author:    Jan Lahoda <jlahoda@openjdk.org>
Date:      2022-12-07 12:03:50 +0000
URL:       https://git.openjdk.org/jdk/commit/cf63f2e3ea93cf339d08e2865034e128d683e515
;;;",,,,,,,,,,,,,,,,,,,
Update to use jtreg 7.1.1,JDK-8298178,5088994,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,cstein,cstein,cstein,2022-12-06 07:18,2023-03-24 10:30,2023-10-01 09:56,2022-12-06 12:49,20,,,,,,,20,infrastructure,,0,,,,,,,,,,,,,,,,"We should update the tests to use jtreg 7.1.1 - a bugfix release for jtreg 7.1 with a fix for https://bugs.openjdk.org/browse/CODETOOLS-7903390

",,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8294403,,,,JDK-8304896,JDK-8296710,,,,,,,,,,,,CODETOOLS-7903390,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zi7v:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@429c566,,,,,,,,,"2022-12-06 08:19;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11542
Date: 2022-12-06 16:07:44 +0000;;;","2022-12-06 12:53;dukebot;Changeset: 2cdc0195
Author:    Christian Stein <cstein@openjdk.org>
Date:      2022-12-06 20:51:06 +0000
URL:       https://git.openjdk.org/jdk/commit/2cdc0195655317cb0b04f76fd8dce5e40bf52774
;;;",,,,,,,,,,,,,,,,,,,
remove OpaqueZeroTripGuardPostLoop once main-loop disappears,JDK-8298176,5088992,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,roland,dcubed,dcubed,2022-12-06 06:47,2023-09-22 03:25,2023-10-01 09:56,2022-12-22 00:58,20,21,,,,,,20,hotspot,,0,c2,javafuzzer,oracle-triage-11,oracle-triage-17,oracle-triage-20,problemlist,regression,tier6,tier8,,,,,,,"The following test failed in the JDK20 CI:

applications/javafuzzer/MediumTest.java

Here's a snippet from the log file:

Summary of the JavaFuzzer run:
------------------------------
Host:     ol8-aarch64-590460
Tests:    8 x 50
Args:     -conf config.yml

Started  at: Tue Dec  6 04:36:43 UTC 2022


r1- 50: 42 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 8 Reference Java failures
r2- 50: 36 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 14 Reference Java failures
r4- 50: 33 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 17 Reference Java failures
r8- 50: 31 passed, 2 crashes, 0 fails, 0 hangs, 0 incorrect tests, 18 Reference Java failures
r3- 50: 31 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 19 Reference Java failures
r5- 50: 30 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 20 Reference Java failures
r7- 50: 31 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 19 Reference Java failures
r6- 50: 30 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 20 Reference Java failures

Finished at: Tue Dec  6 05:48:49 UTC 2022


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151540/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/39ad2c2e-f413-4e8e-b682-799b5d3d5239/runs/86b033bb-f00d-44c5-9f7f-ca18450e04df/workspace/open/src/hotspot/share/opto/multnode.cpp:77), pid=2551483, tid=2551499
#  assert((Opcode() != Op_If && Opcode() != Op_RangeCheck) || outcnt() == 2) failed: bad if #1
#
# JRE version: Java(TM) SE Runtime Environment (20.0+27) (fastdebug build 20-ea+27-2114)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+27-2114, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x14443ec]  MultiNode::proj_out(unsigned int) const+0x9c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /tmp/fuzzer.tmp.RxSrez9WZc/core.2551483)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S151540/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/39ad2c2e-f413-4e8e-b682-799b5d3d5239/runs/86b033bb-f00d-44c5-9f7f-ca18450e04df/workspace/open/src/hotspot/share/opto/multnode.cpp:77), pid=2551923, tid=2551937
#  assert((Opcode() != Op_If && Opcode() != Op_RangeCheck) || outcnt() == 2) failed: bad if #1
#
# JRE version: Java(TM) SE Runtime Environment (20.0+27) (fastdebug build 20-ea+27-2114)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+27-2114, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x14443ec]  MultiNode::proj_out(unsigned int) const+0x9c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /tmp/fuzzer.tmp.RxSrez9WZc/core.2551923)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

[2022-12-06T05:48:49.293374139Z] Waiting for completion for process 2503650
[2022-12-06T05:48:49.293578780Z] Waiting for completion finished for process 2503650
----------System.err:(13/728)----------
java.lang.RuntimeException: assertEquals: expected 1 to equal 2
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:189)
	at applications.javafuzzer.JavaFuzzerRunner.main(JavaFuzzerRunner.java:245)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1599)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: assertEquals: expected 1 to equal 2


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x0000fffd10355010):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=2551499, stack(0x0000fffce91e0000,0x0000fffce93e0000)]


Current CompileTask:
C2:    195   12    b  4       Test::vMeth (369 bytes)

Stack: [0x0000fffce91e0000,0x0000fffce93e0000],  sp=0x0000fffce93d9a90,  free space=2022k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14443ec]  MultiNode::proj_out(unsigned int) const+0x9c  (multnode.cpp:77)
V  [libjvm.so+0x128e3bc]  PhaseIdealLoop::get_skeleton_predicates(Node*, Unique_Node_List&, bool)+0x1c8  (loopPredicate.cpp:381)
V  [libjvm.so+0x12c822c]  PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&)+0x19c  (loopnode.cpp:4056)
V  [libjvm.so+0x12c8658]  PhaseIdealLoop::eliminate_useless_predicates()+0x3c8  (loopnode.cpp:4077)
V  [libjvm.so+0x12de720]  PhaseIdealLoop::build_and_optimize()+0x8bc  (loopnode.cpp:4427)
V  [libjvm.so+0x9a8100]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x1e0  (loopnode.hpp:1082)
V  [libjvm.so+0x9a3ca8]  Compile::Optimize()+0xde8  (compile.cpp:2146)
V  [libjvm.so+0x9a657c]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x11cc  (compile.cpp:830)
V  [libjvm.so+0x7c5858]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1b4  (c2compiler.cpp:113)
V  [libjvm.so+0x9b2dc4]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa10  (compileBroker.cpp:2237)
V  [libjvm.so+0x9b3828]  CompileBroker::compiler_thread_loop()+0x5b8  (compileBroker.cpp:1916)
V  [libjvm.so+0xed3a20]  JavaThread::thread_main_inner()+0x21c  (javaThread.cpp:696)
V  [libjvm.so+0x17d48e8]  Thread::call_run()+0xf8  (thread.cpp:224)
V  [libjvm.so+0x14ed344]  thread_native_entry(Thread*)+0x100  (os_linux.cpp:739)
C  [libpthread.so.0+0x7908]  start_thread+0x188",,,,,,,,,,JDK-8299317,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8305189,JDK-8297752,JDK-8316361,,,,,JDK-8294540,JDK-8298890,JDK-8298940,,,"2022-12-06 07:20;chagedorn;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/101915/FuzzerUtils.java","2022-12-06 07:37;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/101918/Reduced.java","2022-12-06 07:20;chagedorn;Test.java;https://bugs.openjdk.org/secure/attachment/101916/Test.java","2022-12-06 07:21;chagedorn;hs_err_pid2551483.log;https://bugs.openjdk.org/secure/attachment/101917/hs_err_pid2551483.log",,,,,,,,,,,,,,,,,,,,,"0|i2zi7f:",9223372036854775807,b30,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-06 07:23;chagedorn;Starts to fail after the removal of Opaque2 nodes (JDK-8294540). We most likely just revealed an existing problem because we are not preventing optimizations anymore with Opaque2 nodes.;;;","2022-12-06 07:27;chagedorn;ILW = C2 assertion due to broken graph which was not cleaned up properly (If node with 1 projection only), single Java Fuzzer test case, disable compilation of affected method = HLM = P3;;;","2022-12-06 07:37;chagedorn;Attached reduced test case Reduced.java:

$ java -Xcomp -XX:CompileOnly=Reduced Reduced.java;;;","2022-12-09 07:51;dcubed;Here's the crashing thread's stack from the jdk-21+1-2-tier6 sighting:

applications/javafuzzer/MediumTest.java

---------------  T H R E A D  ---------------

Current thread (0x00007fb9ec343aa0):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=3617415, stack(0x00007fb9d0374000,0x00007fb9d0475000)]


Current CompileTask:
C2:    765   88    b  4       Test::vMeth (495 bytes)

Stack: [0x00007fb9d0374000,0x00007fb9d0475000],  sp=0x00007fb9d046efd0,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x1653bf4]  MultiNode::proj_out(unsigned int) const+0x74  (multnode.cpp:77)
V  [libjvm.so+0x1457161]  PhaseIdealLoop::get_skeleton_predicates(Node*, Unique_Node_List&, bool)+0x1b1  (loopPredicate.cpp:395)
V  [libjvm.so+0x149312c]  PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&)+0x1ac  (loopnode.cpp:4066)
V  [libjvm.so+0x14935ab]  PhaseIdealLoop::eliminate_useless_predicates()+0x3eb  (loopnode.cpp:4087)
V  [libjvm.so+0x14ab02f]  PhaseIdealLoop::build_and_optimize()+0x97f  (loopnode.cpp:4432)
V  [libjvm.so+0xaeeee1]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x261  (loopnode.hpp:1082)
V  [libjvm.so+0xae8faf]  Compile::Optimize()+0xe2f  (compile.cpp:2146)
V  [libjvm.so+0xaed10e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x18ce  (compile.cpp:830)
V  [libjvm.so+0x8fec67]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7  (c2compiler.cpp:113)
V  [libjvm.so+0xafa22c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xafafe8]  CompileBroker::compiler_thread_loop()+0x5d8  (compileBroker.cpp:1916)
V  [libjvm.so+0x1067896]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:709)
V  [libjvm.so+0x1a6a770]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x16fef13]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739);;;","2022-12-13 00:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/22
Date: 2022-12-13 07:08:59 +0000;;;","2022-12-19 05:11;epeter;Thanks [~roland] for taking this on!;;;","2022-12-20 10:54;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/65
Date: 2022-12-20 18:47:26 +0000;;;","2022-12-22 00:57;dukebot;Changeset: a0a09d56
Author:    Roland Westrelin <roland@openjdk.org>
Date:      2022-12-22 08:56:00 +0000
URL:       https://git.openjdk.org/jdk20/commit/a0a09d56ba4fc6133b423ad29d86fc99dd6dc19b
;;;",,,,,,,,,,,,,
GarbageCollectionNotificationContentTest test failed: no decrease in Eden usage,JDK-8298173,5088989,Bug,Closed,JDK,JDK,software,duke,,,P2,Fixed,kevinw,tr,tr,2022-12-06 05:44,2022-12-14 13:17,2023-10-01 09:56,2022-12-08 04:11,20,,,,,,,20,core-svc,,0,intermittent,noreg-self,regression,tier3,tier5,tier8,,,,,,,,,,"The following test failed in the JDK20 CI:

com/sun/management/GarbageCollectorMXBean/GarbageCollectionNotificationContentTest.java

Here's a snippet from the log file:

java.lang.RuntimeException: Used size at Eden Space should be decreased.
	at GarbageCollectionNotificationContentTest.checkMemoryUsage(GarbageCollectionNotificationContentTest.java:170)
	at GarbageCollectionNotificationContentTest.checkGarbageCollectionNotificationInfoContent(GarbageCollectionNotificationContentTest.java:153)
	at GarbageCollectionNotificationContentTest.main(GarbageCollectionNotificationContentTest.java:123)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
	at java.base/java.lang.Thread.run(Thread.java:1599)

JavaTest Message: Test threw exception: java.lang.RuntimeException: Used size at Eden Space should be decreased.
JavaTest Message: shutting down test

STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Used size at Eden Space should be decreased.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297247,,,,,,,,,,,,,,x86_64,,,,,,,,,os_x,,,,,,"0|i2zi6r:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@411d4af6,,,,,,,Verified,,"2022-12-07 00:23;kevinw;Eden is unchanged, triggering the failure, after a GC described as:
Action: end of concurrent GC pause Cause: No GC

Previous GCs are tested and show that eden space was cleared out.  Causes logged were:
Action: end of minor GC Cause: G1 Evacuation Pause
Action: end of major GC Cause: System.gc()

The test does not run when vm.opt.ExplicitGCInvokesConcurrent is true.
The explicit System.gc is invoking a collection which is tested, but a concurrent collection happens as well.

We should not test for the eden space decrease when cause is ""No GC"".
;;;","2022-12-07 14:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11572
Date: 2022-12-07 21:50:11 +0000;;;","2022-12-07 15:07;dcubed;The following fix modified the test in this bug:

JDK-8297247 Add GarbageCollectorMXBean for Remark and Cleanup pause time in G1

That fix was integrated in jdk-20+27-2133 and
jdk-20+27-2133-tier3 is the first build-ID in which
this failure was seen.;;;","2022-12-07 15:09;dcubed;This bug appears to be a regression caused by:

JDK-8297247 Add GarbageCollectorMXBean for Remark and Cleanup pause time in G1

so I have bumped the priority from P4 -> P2 (because it is a
regression) and I've also changed the targeted release from
'21' -> '20'.;;;","2022-12-08 04:11;dukebot;Changeset: fbe7b007
Author:    Kevin Walls <kevinw@openjdk.org>
Date:      2022-12-08 12:10:26 +0000
URL:       https://git.openjdk.org/jdk/commit/fbe7b007383b034589e93d398706bebeb24461ee
;;;","2022-12-08 07:39;dcubed;The fix for this bug is integrated in jdk-20+27-2205.;;;",,,,,,,,,,,,,,,
Missing newline in the example output of -Xlog:help,JDK-8298171,5088987,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ddong,ddong,ddong,2022-12-06 05:35,2022-12-12 13:54,2023-10-01 09:56,2022-12-06 22:40,20,,,,,,,20,hotspot,,0,logging,,,,,,,,,,,,,,,"The current output of -Xlog:help is as follows:

```
 -Xlog:gc::uptime,tid
	 Log messages tagged with 'gc' tag up to 'info' level to output 'stdout', using 'uptime' and 'tid' decorations.

 -Xlog:gc*=info,safepoint*=off
	 Log messages tagged with at least 'gc' up to 'info' level, but turn off logging of messages tagged with 'safepoint'.
	 (Messages tagged with both 'gc' and 'safepoint' will not be logged.)

 -Xlog:disable -Xlog:safepoint=trace:safepointtrace.txt
	 Turn off all logging, including warnings and errors,
	 and then enable messages tagged with 'safepoint' up to 'trace' level to file 'safepointtrace.txt'.
 -Xlog:async -Xlog:gc=debug:file=gc.log -Xlog:safepoint=trace
	 Write logs asynchronously. Enable messages tagged with 'safepoint' up to 'trace' level to stdout
	 and messages tagged with 'gc' up to 'debug' level to file 'gc.log'.

```

It seems that a newline is missing before the last example.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zi6b:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-06 05:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11537
Date: 2022-12-06 13:40:23 +0000;;;","2022-12-06 11:21;dcubed;Moving to hotspot/runtime for initial triage.;;;","2022-12-06 22:40;dukebot;Changeset: 8ea369af
Author:    Denghui Dong <ddong@openjdk.org>
Date:      2022-12-07 06:37:54 +0000
URL:       https://git.openjdk.org/jdk/commit/8ea369afe6b23618086d074f1fad61effce3beec
;;;",,,,,,,,,,,,,,,,,,
Opacity in WebView not working anymore,JDK-8298167,5088979,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,rmarchenko,oschmidtmer,oschmidtmer,2022-12-06 04:17,2023-02-11 07:44,2023-10-01 09:56,2023-01-12 05:20,jfx18.0.1,jfx19,,,,,,jfx20,javafx,,0,regression,,,,,,,,,,,,,,,"This HTML code should produce a grey rectangle and is now black:

<html>
<body style=""background-color: #FFFFFF; margin: 0px;"">
<div style=""color: #FFFFFF; background-color: #000000; opacity: 0.5; width:100px; height:100px;""> </div>
</body>
</html>

Last worked in 18.
Failing since 18.0.1 / 19
Might be related to the SVG problem from JDK-8294011

    @Test public void testOpacityRendering() {
        loadContent(""<html>\n"" +
                ""<body style=\""background-color: #FFFFFF; margin: 0px;\"">\n"" +
                ""<div style=\""color: #FFFFFF; background-color: #000000; opacity: 0.5; width:100px; height:100px;\""> </div>\n"" +
                ""</body>\n"" +
                ""</html>"");
        submit(() -> {
            final WebPage webPage = WebEngineShim.getPage(getEngine());
            assertNotNull(webPage);
            final BufferedImage img = WebPageShim.paint(webPage, 0, 0, 800, 600);
            assertNotNull(img);

            final Color pixelAt50x50 = new Color(img.getRGB(50, 50), true);
            assertTrue(""Color should be gray:"" + pixelAt50x50, isColorsSimilar(Color.GRAY, pixelAt50x50, 1));
        });
    }",,,,,,,,,,JDK-8300681,JDK-8302273,JDK-8302277,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,jfx18.0.1,,,,,,,,"0|i2zi4j:",9223372036854775807,b15,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@5a8b92bd,,,,,,,,,"2023-01-10 09:39;rmarchenko;I'd like to fix this, if no one minds.;;;","2023-01-10 10:01;kcr;[~rmarchenko] No one is actively working on this bug, so you can submit a pull request if you want, and we can evaluate it. Please read the JavaFX CONTRIBUTING guidelines, if you haven't already done so, at:

https://github.com/openjdk/jfx/blob/master/CONTRIBUTING.md
;;;","2023-01-10 23:27;rmarchenko;The issue is related to JDK-8278980
WebKit sources were updated to v613, but these changes were not adapted properly for GraphicsContext class refactoring: https://github.com/WebKit/WebKit/commit/1733b8bc3dff7595ab8e42561fc0f20a2b8fee63

GraphicsContextJava's methods begin/endPlatformTransparencyLayers weren't adapted, as the result, the methods were not invoked, so TransparencyLayer couldn't be added to a rendering queue.;;;","2023-01-10 23:40;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx/pull/992
Date: 2023-01-11 07:32:20 +0000;;;","2023-01-12 05:20;dukebot;Changeset: 8136b11f
Author:    Roman Marchenko <rmarchenko@openjdk.org>
Committer: Kevin Rushforth <kcr@openjdk.org>
Date:      2023-01-12 13:18:25 +0000
URL:       https://git.openjdk.org/jfx/commit/8136b11fdc75aba64d8b77cf286097db3e12d6c9
;;;","2023-02-11 06:17;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx11u/pull/131
Date: 2023-02-11 14:11:14 +0000;;;","2023-02-11 06:48;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jfx17u/pull/111
Date: 2023-02-11 14:42:57 +0000;;;",,,,,,,,,,,,,,
Test PrintClasses hits assert when run with code that retransform classes,JDK-8298162,5088970,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,coleenp,sjohanss,sjohanss,2022-12-06 02:25,2023-01-03 11:34,2023-10-01 09:56,2022-12-20 06:12,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,"The test PrintClasses runs two jcmd on its own process and if run with JFR the second jcmd triggers an assertion in the JVM:
assert(field_holder() == ik) failed: must be already initialized to this class

Can be reproduced with:
test TEST=runtime/CommandLine/PrintClasses.java JTREG=""JAVA_OPTIONS=-XX:StartFlightRecording""


",,,,,,,,,,JDK-8299153,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zi2j:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@661b156a,,,,,,,,,"2022-12-14 06:24;mgronlun;The reason this happens when run with StartFlightRecording is that JFR retransforms a few classes on startup. This leaves scratch klasses in the ClassLoaderDataGraph.

 kb
 # RetAddr               : Args to Child                                                           : Call Site
00 00007ff8`5feada88     : 00000000`00000001 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!NtTerminateProcess+0x14
01 00007ff8`5ef5e0ab     : 00000000`00000001 00000000`00000000 00007ff8`5db9d3a0 000000be`95ffee20 : ntdll!RtlExitUserProcess+0xb8
02 00007ff8`5db005bc     : 00000000`00000001 00000000`00000000 000000be`95ffee08 00007ff8`5dbd0e40 : KERNEL32!ExitProcessImplementation+0xb
03 00007ff8`5db0045f     : 00000000`00000001 00000000`00000000 000000be`95ffee10 000000be`95ffee00 : ucrtbase!exit_or_terminate_process+0x44
04 00007fff`bf6ed170     : 0000024a`0b11d9b0 00000000`00000000 0000024a`00000000 00000000`00000001 : ucrtbase!common_exit+0x6f
05 00007fff`bf6e8268     : ffffffff`00000001 00007fff`00000001 00000000`00000614 00007fff`00001826 : jvm!os::win32::exit_process_or_thread+0x610 [d:\dev\github\jdk\open\src\hotspot\os\windows\os_windows.cpp @ 4142] 
06 00007fff`bf990a09     : 000000be`e0000001 00000000`00000000 00000000`00000000 00000000`00000000 : jvm!os::abort+0x188 [d:\dev\github\jdk\open\src\hotspot\os\windows\os_windows.cpp @ 1233] 
07 00007fff`bf990b31     : 000000be`e0000000 00007fff`bfece288 00007fff`bfece828 000000be`95fff380 : jvm!VMError::report_and_die+0xd19 [d:\dev\github\jdk\open\src\hotspot\share\utilities\vmError.cpp @ 1691] 
08 00007fff`bef0e88d     : 0000024a`0b153370 00000000`00000000 00007fff`bfece890 0000024a`00000069 : jvm!VMError::report_and_die+0x81 [d:\dev\github\jdk\open\src\hotspot\share\utilities\vmError.cpp @ 1352] 
09 00007fff`bf0c3e70     : 00007fff`bfece890 000000be`00000069 00007fff`bfece288 00007fff`bfece828 : jvm!report_vm_error+0x9d [d:\dev\github\jdk\open\src\hotspot\share\utilities\debug.cpp @ 287] 
0a 00007fff`bf247036     : 000000be`95fff400 00000008`00100800 0000024a`00000006 0000024a`0b430b90 : jvm!fieldDescriptor::reinitialize+0xb0 [d:\dev\github\jdk\open\src\hotspot\share\runtime\fieldDescriptor.cpp @ 105] 
0b 00007fff`bf24bdc6     : 00000008`00100800 000000be`95fff5c0 00000000`00000000 00007ff8`28261404 : jvm!InstanceKlass::print_nonstatic_fields+0x1e6 [d:\dev\github\jdk\open\src\hotspot\share\oops\instanceKlass.cpp @ 1687] 
0c 00007fff`bf24d8ce     : 00000008`00100800 000000be`963ff800 0000024a`7ecaf4d0 2aaaaaa9`ff646b61 : jvm!InstanceKlass::print_on+0xcd6 [d:\dev\github\jdk\open\src\hotspot\share\oops\instanceKlass.cpp @ 3471] 
0d 00007fff`bee4b261     : 000000be`95fff790 00000008`00100800 00000000`00000000 0000024a`0b153370 : jvm!PrintClassClosure::do_klass+0x2ce [d:\dev\github\jdk\open\src\hotspot\share\oops\instanceKlass.cpp @ 2074] 
0e 00007fff`bee4e61f     : 0000024a`7ebea370 000000be`95fff790 00043f90`6448eec1 00007fff`bf24d5e8 : jvm!ClassLoaderData::classes_do+0x51 [d:\dev\github\jdk\open\src\hotspot\share\classfile\classLoaderData.cpp @ 341] 
0f 00007fff`bf07a220     : 000000be`95fff790 000000be`963ff800 0000024a`6b5c6701 00007fff`bf99a7b6 : jvm!ClassLoaderDataGraph::classes_do+0x3f [d:\dev\github\jdk\open\src\hotspot\share\classfile\classLoaderDataGraph.cpp @ 385] 
10 00007fff`bf9993c2     : 000000be`963ff648 00007fff`bec76a30 ffffffff`ffffffff 00007fff`be92cee3 : jvm!VM_PrintClasses::doit+0x30 [d:\dev\github\jdk\open\src\hotspot\share\services\diagnosticCommand.cpp @ 963] 
11 00007fff`bf9af0de     : 000000be`963ff648 0000024a`00000001 000000be`95000000 00000000`00000000 : jvm!VM_Operation::evaluate+0xa2 [d:\dev\github\jdk\open\src\hotspot\share\runtime\vmOperations.cpp @ 72] 
12 00007fff`bf9af433     : 0000024a`0b153370 000000be`963ff648 00007fff`c072d4a5 00007fff`c06e0548 : jvm!VMThread::evaluate_operation+0x5e [d:\dev\github\jdk\open\src\hotspot\share\runtime\vmThread.cpp @ 282] 
13 00007fff`bf9af7a1     : 0000024a`0b153370 000000be`963ff648 00000001`0b11dc01 10000000`00000000 : jvm!VMThread::inner_execute+0x2e3 [d:\dev\github\jdk\open\src\hotspot\share\runtime\vmThread.cpp @ 430] 
14 00007fff`bf9afa69     : 0000024a`0b153370 0000024a`00000002 0000024a`00000000 0000024a`0b1535b4 : jvm!VMThread::loop+0xe1 [d:\dev\github\jdk\open\src\hotspot\share\runtime\vmThread.cpp @ 496] 
15 00007fff`bf8f7cbc     : 0000024a`0b153370 00000000`00000003 00000000`00000000 00007fff`bf8f7a94 : jvm!VMThread::run+0xd9 [d:\dev\github\jdk\open\src\hotspot\share\runtime\vmThread.cpp @ 180] 
16 00007fff`bf6ec1d8     : 0000024a`0b153370 00000000`00000000 0000024a`7eaf6ef0 00007ff8`5daf3036 : jvm!Thread::call_run+0x15c [d:\dev\github\jdk\open\src\hotspot\share\runtime\thread.cpp @ 229] 
17 00007ff8`5db01bb2     : 0000024a`0b153370 00000000`00000000 00000000`00000000 00000000`00000000 : jvm!thread_native_entry+0x108 [d:\dev\github\jdk\open\src\hotspot\os\windows\os_windows.cpp @ 547] 
18 00007ff8`5ef57034     : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ucrtbase!thread_start<unsigned int (__cdecl*)(void *),1>+0x42
19 00007ff8`5fea26a1     : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : KERNEL32!BaseThreadInitThunk+0x14
1a 00000000`00000000     : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x21

void fieldDescriptor::reinitialize(InstanceKlass* ik, int index) {
  if (_cp.is_null() || field_holder() != ik) {
    _cp = constantPoolHandle(Thread::current(), ik->constants());
    // _cp should now reference ik's constant pool; i.e., ik is now field_holder.
    assert(field_holder() == ik, ""must be already initialized to this class""); <<------
  }

dx -r1 (*((jvm!InstanceKlassMiscStatus *)0x80010092e))
(*((jvm!InstanceKlassMiscStatus *)0x80010092e))                 [Type: InstanceKlassMiscStatus]
    [+0x000] _flags           : 0x4202 [Type: unsigned short]

  Binary:  00000000 00000000 00000000 00000000 00000000 00000000 01000010 00000010

Bit value 0n512 == 0x200 is set, this implies the InstanceKlass is a scratch klass. And a scratch klass constant pool holder is != ik, because it is it is pointing to the original InstanceKlass of the retransform (i.e. not the scratch klass itself).

Should VM_PrintClasses also print scratch klasses? It happens when the ""verbose"" option is set.

I could workaround this issue by updating the assert like:

    assert(ik->is_scratch_class() || field_holder() == ik, ""must be already initialized to this class"");

but I think the more accurate question is whether scratch klasses should be printed at all? ;;;","2022-12-16 11:55;coleenp;I don't think scratch classes should be printed.  The user shouldn't be interested in them. They're supposed to be removed once they're not needed any longer, but maybe they haven't been removed yet.

Maybe it is better to fix the assert to allow ik->is_scratch_class().  Excluding scratch classes for ClassLoaderDataGraph::classes_do() is a bit more complicated because the call in RedefineClasses wants to walk the scratch classes and there might be some MethodData cleanup that needs to walk the scratch classes from the CLD. The other callers aren't interested in the scratch classes.  The scratch classes were originally left on the CLD::_klasses list so GC could find them when they pointed directly to oops.  Given that this is no longer the case, maybe we can do something different.  Not for JDK 20 though.;;;","2022-12-19 11:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/57
Date: 2022-12-19 18:56:57 +0000;;;","2022-12-20 06:12;dukebot;Changeset: 03afec16
Author:    Coleen Phillimore <coleenp@openjdk.org>
Date:      2022-12-20 14:09:22 +0000
URL:       https://git.openjdk.org/jdk20/commit/03afec16f8abecb845eb14db5b51eaac9131a3c8
;;;",,,,,,,,,,,,,,,,,
Clang warns about pointless comparisons,JDK-8298147,5088953,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-12-06 00:05,2022-12-12 13:54,2023-10-01 09:56,2022-12-06 23:33,20,,,,,,,20,hotspot,,0,containers,,,,,,,,,,,,,,,"```
/cgroupV1Subsystem_linux.cpp:290:7: warning: comparison of array 'pidsmax' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if (pidsmax == NULL) {
      ^~~~~~~    ~~~~
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/os/linux/cgroupV2Subsystem_linux.cpp:95:7: warning: comparison of array 'cpus' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if (cpus == NULL) {
      ^~~~    ~~~~
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/os/linux/cgroupV2Subsystem_linux.cpp:104:7: warning: comparison of array 'quota' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if (quota == NULL) {
      ^~~~~    ~~~~
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/os/linux/cgroupV2Subsystem_linux.cpp:113:7: warning: comparison of array 'mems' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if (mems == NULL) {
      ^~~~    ~~~~
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/os/linux/cgroupV2Subsystem_linux.cpp:154:7: warning: comparison of array 'mem_soft_limit_str' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if (mem_soft_limit_str == NULL) {
      ^~~~~~~~~~~~~~~~~~    ~~~~
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/os/linux/cgroupV2Subsystem_linux.cpp:179:7: warning: comparison of array 'mem_swp_limit_str' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if (mem_swp_limit_str == NULL) {
      ^~~~~~~~~~~~~~~~~    ~~~~
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/os/linux/cgroupV2Subsystem_linux.cpp:189:7: warning: comparison of array 'mem_swp_current_str' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if (mem_swp_current_str == NULL) {
      ^~~~~~~~~~~~~~~~~~~    ~~~~
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/os/linux/cgroupV2Subsystem_linux.cpp:219:7: warning: comparison of array 'mem_limit_str' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if (mem_limit_str == NULL) {
      ^~~~~~~~~~~~~    ~~~~
/shared/projects/openjdk/jdk-jdk/source/src/hotspot/os/linux/cgroupV2Subsystem_linux.cpp:248:7: warning: comparison of array 'pidsmax' equal to a null pointer is always false [-Wtautological-pointer-compare]
  if (pidsmax == NULL) {
      ^~~~~~~    ~~~~
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zhyr:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-06 11:32;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11544
Date: 2022-12-06 17:44:07 +0000;;;","2022-12-06 23:33;dukebot;Changeset: 1c2a0939
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-12-07 07:31:29 +0000
URL:       https://git.openjdk.org/jdk/commit/1c2a093988c69ae0b2c0030835d11469fa9fb852
;;;",,,,,,,,,,,,,,,,,,,
"Shenandoah: HdrSeq asserts ""sub-bucket index (512) overflow for value (    1.00)""",JDK-8298138,5088943,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,ysr,ysr,ysr,2022-12-05 19:37,2023-05-31 07:12,2023-10-01 09:56,2022-12-08 13:55,17,18,19,20,,,,21,hotspot,,0,amazon-interest,gc-shenandoah,jdk17u-fix-request,jdk17u-fix-yes,,,,,,,,,,,,"HdrSeq in shenandoahNumberSeq.cpp asserts:

# after -XX: or in .hotspotrc:  SuppressErrorAt=/shenandoahNumberSeq.cpp:91
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/ysr/workplace/ysr/github/ysr-jdk/jdk/src/hotspot/share/gc/shenandoah/shenandoahNumberSeq.cpp:91), pid=46750, tid=46750
#  assert(false) failed: sub-bucket index (512) overflow for value (    1.00)
#
# JRE version: OpenJDK Runtime Environment (20.0) (slowdebug build 20-internal-adhoc.ysr.jdk)
# Java VM: OpenJDK 64-Bit Server VM (slowdebug 20-internal-adhoc.ysr.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x159950c]  HdrSeq::add(double)+0x23a
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
",,,,,,,,,,JDK-8309212,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8297796,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zhwj:",9223372036854775807,b02,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6b00f96c,,,,,,,,,"2022-12-05 19:57;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11524
Date: 2022-12-06 03:46:12 +0000;;;","2022-12-08 13:55;dukebot;Changeset: c16eb89c
Author:    Y. Srinivas Ramakrishna <ysr@openjdk.org>
Date:      2022-12-08 21:54:16 +0000
URL:       https://git.openjdk.org/jdk/commit/c16eb89ce0d59f2ff83b6db0bee3e384ec8d5efe
;;;","2023-05-30 03:00;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk17u-dev/pull/1408
Date: 2023-05-30 09:55:03 +0000;;;","2023-05-30 03:32;shade;Fix Request (17u)

Fixes a corner case in Shenandoah accounting. Applies cleanly. Tests pass.;;;",,,,,,,,,,,,,,,,,
JDK 20 RDP1 L10n resource files update - msgdrop 10,JDK-8298133,5088936,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dnguyen,dnguyen,dnguyen,2022-12-05 15:47,2023-01-03 11:32,2023-10-01 09:56,2022-12-16 13:16,20,,,,,,,20,globalization,,0,sn_133,,,,,,,,,,,,,,,This bug is to track the message drop 10 for JDK 20 RDP1. ,,,,,,,,,,JDK-8299092,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zhuz:",9223372036854775807,b29,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@52b4192d,,,,,,,,,"2022-12-14 15:47;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk20/pull/35
Date: 2022-12-14 23:40:52 +0000;;;","2022-12-16 13:16;dukebot;Changeset: c997b5bf
Author:    Damon Nguyen <dnguyen@openjdk.org>
Committer: Naoto Sato <naoto@openjdk.org>
Date:      2022-12-16 21:15:29 +0000
URL:       https://git.openjdk.org/jdk20/commit/c997b5bffd0ebbd6d68332572639c8cea05ccdb1
;;;",,,,,,,,,,,,,,,,,,,
runtime/ErrorHandling/TestSigInfoInHsErrFile.java fails to find pattern with slowdebug,JDK-8298128,5088929,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,azafari,dcubed,dcubed,2022-12-05 13:57,2023-01-30 09:48,2023-10-01 09:56,2023-01-16 04:38,20,,,,,,,21,hotspot,,0,hs_err,,,,,,,,,,,,,,,"The following test failed in my jdk-20+26 stress testing runs:

runtime/ErrorHandling/TestSigInfoInHsErrFile.java

Here's a snippet from a log file:

----------System.out:(949/66901)----------
Command line: [/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/build/linux-x86_64-normal-server-slowdebug/images/jdk/bin/java -cp /work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_tier1/classes/15/runtime/ErrorHandling/TestSigInfoInHsErrFile.d:/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/open/test/hotspot/jtreg/runtime/ErrorHandling:/work/shared/bug_hunt/thread_SMR_stress/jdk20_exp.git/build/linux-x86_64-normal-server-slowdebug/test-support/jtreg_open_test_hotspot_jtreg_tier1/classes/15/test/lib:/work/local/jib-dcubed/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/jtreg.jar:/work/local/jib-dcubed/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/junit-platform-console-standalone-1.8.2.jar:/work/local/jib-dcubed/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/testng-7.3.0.jar:/work/local/jib-dcubed/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/jcommander-1.78.jar:/work/local/jib-dcubed/install/jtreg/7/1/bundles/jtreg-7+1.zip/jtreg/lib/guice-4.2.3.jar -XX:+UnlockDiagnosticVMOptions -Xmx100M -XX:-CreateCoredumpOnCrash -XX:ErrorHandlerTest=14 -version ]
[2022-12-02T03:10:50.063277667Z] Gathering output for process 366943
[2022-12-02T03:10:50.151244940Z] Waiting for completion for process 366943
[2022-12-02T03:10:51.831016001Z] Waiting for completion finished for process 366943
#
# A fatal error has been detected by the Java Runtime Environment:
^^^ Matches # A fatal error has been detected.* at line 1^^^
#
#  SIGSEGV (0xb) at pc=0x00007f516e2ee045, pid=366943, tid=366947
^^^ Matches # *SIGSEGV.* at line 3^^^
#
# JRE version: Java(TM) SE Runtime Environment (20.0) (slowdebug build 20-internal-2022-12-01-1634314.dcubed...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (slowdebug 20-internal-2022-12-01-1634314.dcubed..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
^^^ Matches # *Problematic frame.* at line 7^^^
# V  [libjvm.so+0x13df045]  crash_with_segfault()+0x10
#
# CreateCoredumpOnCrash turned off, no core file dumped
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

<snip>

---------------  T H R E A D  ---------------

Current thread (0x00007f516802da30):  JavaThread ""main"" [_thread_in_vm, id=366947, stack(0x00007f516ccb5000,0x00007f516cdb6000)]

Stack: [0x00007f516ccb5000,0x00007f516cdb6000],  sp=0x00007f516cdb4c20,  free space=1023k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x13df045]  crash_with_segfault()+0x10  (vmError.cpp:1804)
V  [libjvm.so+0x13df164]  VMError::controlled_crash(int)+0x116  (vmError.cpp:1834)
V  [libjvm.so+0xd21ff5]  JNI_CreateJavaVM_inner(JavaVM_**, void**, void*)+0x307  (jni.cpp:3662)
V  [libjvm.so+0xd2211c]  JNI_CreateJavaVM+0x32  (jni.cpp:3710)
C  [libjli.so+0x7677]  InitializeJVM+0x14c  (java.c:1459)
C  [libjli.so+0x4397]  JavaMain+0xdc  (java.c:413)
C  [libjli.so+0xb108]  ThreadJavaMain+0x27  (java_md.c:650)


siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000400

Registers:

<snip>

----------System.err:(12/785)*----------
java.lang.RuntimeException: hs-err file incomplete (first missing pattern: siginfo: si_signo: \\d+ \\(SIGSEGV\\), si_code: \\d+ \\(SEGV_.*\\), si_addr: 0x0*400.*)
        at HsErrFileUtils.checkHsErrFileContent(HsErrFileUtils.java:135)
        at HsErrFileUtils.checkHsErrFileContent(HsErrFileUtils.java:71)
        at TestSigInfoInHsErrFile.main(TestSigInfoInHsErrFile.java:74)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
        at java.base/java.lang.Thread.run(Thread.java:1591)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: hs-err file incomplete (first missing pattern: siginfo: si_signo: \d+ \(SIGSEGV\), si_code: \d+ \(SEGV_.*\), si_addr: 0x0*400.*)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-12-05 14:02;dcubed;jdk-20+26_linux-x64.8298128.zip;https://bugs.openjdk.org/secure/attachment/101902/jdk-20%2B26_linux-x64.8298128.zip","2022-12-05 14:21;dcubed;jdk-20+26_macosx-aarch64.8298128.zip;https://bugs.openjdk.org/secure/attachment/101903/jdk-20%2B26_macosx-aarch64.8298128.zip","2023-01-30 09:48;dcubed;jdk-20+33_macosx-aarch64.8298128.zip;https://bugs.openjdk.org/secure/attachment/102448/jdk-20%2B33_macosx-aarch64.8298128.zip",,,,,,,generic,,,,,,,,,generic,,,,,,"0|i2zhtf:",9223372036854775807,b06,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-05 14:02;dcubed;Here's the logs from my jdk-20+26 stress testing sighting on linux-x64:

$ unzip -l jdk-20+26_linux-x64.8298128.zip
Archive:  jdk-20+26_linux-x64.8298128.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    65346  2022-12-01 22:10   jdk-20+26_1/failures.linux-x86_64/hs_err_pid366943.log
    85706  2022-12-01 22:10   jdk-20+26_1/failures.linux-x86_64/TestSigInfoInHsErrFile.jtr.slowdebug
    65317  2022-12-02 19:49   jdk-20+26_2/failures.linux-x86_64/hs_err_pid1392781.log
    85677  2022-12-02 19:49   jdk-20+26_2/failures.linux-x86_64/TestSigInfoInHsErrFile.jtr.slowdebug
    64408  2022-12-03 17:36   jdk-20+26_3/failures.linux-x86_64/hs_err_pid3840268.log
    84748  2022-12-03 17:36   jdk-20+26_3/failures.linux-x86_64/TestSigInfoInHsErrFile.jtr.slowdebug
---------                     -------
   451202                     6 files;;;","2022-12-05 14:21;dcubed;Here's the logs from my jdk-20+26 stress testing sighting on macosx-aarch64:

$ unzip -l jdk-20+26_macosx-aarch64.8298128.zip
Archive:  jdk-20+26_macosx-aarch64.8298128.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    90064  12-01-2022 22:25   jdk-20+26_1/failures.macosx-aarch64/TestSigInfoInHsErrFile.jtr.slowdebug
    67950  12-01-2022 22:25   jdk-20+26_1/failures.macosx-aarch64/hs_err_pid50653.log
    90135  12-02-2022 21:11   jdk-20+26_2/failures.macosx-aarch64/TestSigInfoInHsErrFile.jtr.slowdebug
    68043  12-02-2022 21:11   jdk-20+26_2/failures.macosx-aarch64/hs_err_pid32629.log
---------                     -------
   316192                     4 files;;;","2022-12-05 17:55;dholmes;I'm not a regex guru by any means but AFAICS this line:

siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000400

matches this pattern:

siginfo: si_signo: \d+ \(SIGSEGV\), si_code: \d+ \(SEGV_.*\), si_addr: 0x0*400.*

???;;;","2022-12-08 07:08;azafari;[~stuefe], [~dholmes]
Some findings after investigating the error:
The pattern that does not match is not the 'siginfo..' (the 5th pattern) but it is the 'VMError::..' (the 4th pattern). This happens because the way that mismatched patterns are reported does not work as expected.
Let's go through this scenario:
- pattern list PL contains [p1,p2,p3,p4,p5]
- p1 and p2 are matched, PL becomes [p3,p4,p5]
- p3 is being tested against every line from the file, PL becomes [p4,p5]
- p3 never matches with any line of the file
- message for an error is constructed with PL.peek() which is p4 now, while the mismatched pattern is p3.

ALSO,
the '# .*VMError::..' does not match as expected, since there is no '#' at the start of the error line.

Are these reasonable? I can fix the errors based on the explanation above. Shall I?;;;","2022-12-08 17:15;dholmes;Great find [~azafari]! Yes please fix this.

IIUC the failures were all on slowdebug and in that case I'm guessing what we see in the hs_err file is:

# Problematic frame:
# V  [libjvm.so+0x13df045]  crash_with_segfault()+0x10

instead of the ""expected""

# Problematic frame:
# V  [libjvm.so+0xNNNNN]  VMError::controlled_crash;;;","2022-12-15 06:53;dcubed;The test faillures did not reproduce in my jdk-20+27 stress testing on either
linux-x64 or macosx-aarch64. Did some other recent fix solve this problem?;;;","2022-12-15 07:31;azafari;The crash_with_segfault is a tiny function which is inlined on compiler optimizations. So the latest call on stack will be the caller VMError::controlled_crash, when a crash occurs. The symptom is seen in my tests on fastdebug builds. The solution is under mach5 tests tiers 1-5.;;;","2022-12-16 00:04;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11704
Date: 2022-12-16 07:56:39 +0000;;;","2023-01-16 04:38;dukebot;Changeset: 289aed46
Author:    Afshin Zafari <afshin.zafari@oracle.com>
Committer: Robbin Ehn <rehn@openjdk.org>
Date:      2023-01-16 12:36:45 +0000
URL:       https://git.openjdk.org/jdk/commit/289aed465e9b8449938d4cdb515748e7aca1d070
;;;","2023-01-30 09:48;dcubed;Here's the logs from my jdk-20+33 stress testing sighting on macosx-aarch64:

$ unzip -l jdk-20+33_macosx-aarch64.8298128.zip
Archive:  jdk-20+33_macosx-aarch64.8298128.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
    90494  01-27-2023 04:51   jdk-20+33_1/failures.macosx-aarch64/TestSigInfoInHsErrFile.jtr.slowdebug
    68293  01-27-2023 04:51   jdk-20+33_1/failures.macosx-aarch64/hs_err_pid33691.log
---------                     -------
   158787                     2 files

Please note that this bug was fixed in jdk-21+06 and that the fix has not been backported to JDK20.;;;",,,,,,,,,,,
split-if optimization causes empty loop to temporarily have more than one phi ,JDK-8298118,5088919,Bug,Resolved,JDK,JDK,software,duke,,,P3,Fixed,dfenacci,dcubed,dcubed,2022-12-05 11:57,2023-02-01 22:45,2023-10-01 09:56,2023-01-25 23:42,11,17,19,20,21,8,,21,hotspot,,0,c2,javafuzzer,oracle-triage-20,tier8,,,,,,,,,,,,"The following test failed in the JDK20 CI:

applications/javafuzzer/BigTest.java

Here's a snippet from the log file:

Summary of the JavaFuzzer run:
------------------------------
Host:     ol9-x64-653811
Tests:    12 x 300
Args:     -conf config.yml

Started  at: Mon Dec  5 07:26:26 UTC 2022


r7- 300: 183 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 117 Reference Java failures
r5- 300: 178 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 122 Reference Java failures
r1- 300: 184 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 116 Reference Java failures
r11- 300: 175 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 125 Reference Java failures
r10- 300: 170 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 130 Reference Java failures
r8- 300: 194 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 106 Reference Java failures
r6- 300: 174 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 126 Reference Java failures
r12- 300: 181 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 119 Reference Java failures
r2- 300: 172 passed, 0 crashes, 0 fails, 1 hangs, 0 incorrect tests, 127 Reference Java failures
r9- 300: 180 passed, 2 crashes, 0 fails, 0 hangs, 0 incorrect tests, 119 Reference Java failures
r4- 300: 186 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 114 Reference Java failures
r3- 300: 179 passed, 0 crashes, 0 fails, 0 hangs, 0 incorrect tests, 121 Reference Java failures

Finished at: Mon Dec  5 15:34:04 UTC 2022


#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S137551/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d38ec7f3-948d-490e-9c1f-f54015d7f963/runs/14cf096c-70f7-49b6-b667-8e738b11d2c0/workspace/open/src/hotspot/share/opto/loopTransform.cpp:3641), pid=2082216, tid=2082233
#  assert(iv == __null) failed: Too many phis
#
# JRE version: Java(TM) SE Runtime Environment (20.0+27) (fastdebug build 20-ea+27-2094)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+27-2094, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x148d3bc]  IdealLoopTree::do_remove_empty_loop(PhaseIdealLoop*) [clone .part.0]+0x36c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /tmp/fuzzer.tmp.ZMKvo9CUBY/core.2082216)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0c72054a-24ab-4dbb-944f-97f9341a1b96-S137551/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d38ec7f3-948d-490e-9c1f-f54015d7f963/runs/14cf096c-70f7-49b6-b667-8e738b11d2c0/workspace/open/src/hotspot/share/opto/loopTransform.cpp:3641), pid=2082457, tid=2082478
#  assert(iv == __null) failed: Too many phis
#
# JRE version: Java(TM) SE Runtime Environment (20.0+27) (fastdebug build 20-ea+27-2094)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 20-ea+27-2094, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x148d3bc]  IdealLoopTree::do_remove_empty_loop(PhaseIdealLoop*) [clone .part.0]+0x36c
#
# Core dump will be written. Default location: Core dumps may be processed with ""/opt/core.sh %p"" (or dumping to /tmp/fuzzer.tmp.ZMKvo9CUBY/core.2082457)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#

[2022-12-05T15:34:04.490226215Z] Waiting for completion for process 2036310
[2022-12-05T15:34:04.490407488Z] Waiting for completion finished for process 2036310
----------System.err:(13/728)----------
java.lang.RuntimeException: assertEquals: expected 1 to equal 2
	at jdk.test.lib.Asserts.fail(Asserts.java:594)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
	at jdk.test.lib.Asserts.assertEquals(Asserts.java:189)
	at applications.javafuzzer.JavaFuzzerRunner.main(JavaFuzzerRunner.java:245)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
	at java.base/java.lang.Thread.run(Thread.java:1599)

JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test

result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: assertEquals: expected 1 to equal 2


Here's the crashing thread's stack:

---------------  T H R E A D  ---------------

Current thread (0x00007f62c0341180):  JavaThread ""C2 CompilerThread0"" daemon [_thread_in_native, id=2082233, stack(0x00007f62a8cfe000,0x00007f62a8dfe000)]


Current CompileTask:
C2:    392   12   !b  4       Test::vMeth1 (259 bytes)

Stack: [0x00007f62a8cfe000,0x00007f62a8dfe000],  sp=0x00007f62a8df7f40,  free space=999k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x148d3bc]  IdealLoopTree::do_remove_empty_loop(PhaseIdealLoop*) [clone .part.0]+0x36c  (loopTransform.cpp:3641)
V  [libjvm.so+0x1490fcf]  IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&)+0x6f  (loopTransform.cpp:3616)
V  [libjvm.so+0x1491639]  IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&)+0x109  (loopTransform.cpp:3931)
V  [libjvm.so+0x14c0951]  PhaseIdealLoop::build_and_optimize()+0xc61  (loopnode.cpp:4533)
V  [libjvm.so+0xb00b21]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x261  (loopnode.hpp:1082)
V  [libjvm.so+0xafc8b3]  Compile::Optimize()+0xe13  (compile.cpp:2146)
V  [libjvm.so+0xafef6e]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x18ce  (compile.cpp:830)
V  [libjvm.so+0x90f0a7]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x4e7  (c2compiler.cpp:113)
V  [libjvm.so+0xb0be4c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xa7c  (compileBroker.cpp:2237)
V  [libjvm.so+0xb0cc38]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1916)
V  [libjvm.so+0x107d1b6]  JavaThread::thread_main_inner()+0x206  (javaThread.cpp:697)
V  [libjvm.so+0x1a81520]  Thread::call_run()+0x100  (thread.cpp:224)
V  [libjvm.so+0x1713773]  thread_native_entry(Thread*)+0x103  (os_linux.cpp:739)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2022-12-05 20:07;dlong;FuzzerUtils.java;https://bugs.openjdk.org/secure/attachment/101909/FuzzerUtils.java","2022-12-06 01:44;chagedorn;Reduced.java;https://bugs.openjdk.org/secure/attachment/101912/Reduced.java","2022-12-05 20:07;dlong;Test.java;https://bugs.openjdk.org/secure/attachment/101908/Test.java","2023-01-20 06:28;dfenacci;cl-dead-phi.png;https://bugs.openjdk.org/secure/attachment/102366/cl-dead-phi.png",,,,,,x86_64,,,,,,,,,linux,,,,,,"0|i2zhr7:",9223372036854775807,b08,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@6a4709f4,,,,,,,,,"2022-12-05 20:02;dlong;ILW = Assert during C2 compilation (bailout in product), reproducible with generated test, no workaround = MMM = P3 ;;;","2022-12-05 20:15;dlong;Reproduces with jdk-19+36, jdk-17+35, ""11.0.17.0.3+1-LTS-3"" builds, so it seems to be an old bug.;;;","2022-12-06 01:44;chagedorn;Attached reduced test case Reduced.java:

$ java -Xcomp -XX:CompileOnly=Reduced Reduced.java;;;","2023-01-20 07:36;dfenacci;A preliminary analysis shows that the issue is caused by an assert that checks that only one phi node can be attached to an empty counted loop when trying to remove it (the one of the induction variable).
We get to this situation because a split-if block optimization leaves the graph as shown in the ""cl-dead-phi.png"" attachment, with counted loop node 397 with 2 phi nodes, one for the induction variable (398) and another one with no uses (495).
Then, while doing loop optimization, the body of that counted loop gets ""cleaned"" (IdealLoopTree::DCE_loop_body) by removing dead nodes from the body (one of this nodes is phi node 495, since it has no uses). This in the end reveals that the loop is actually empty and can therefore be removed, but phi node 495 is still referenced by counted loop node 397.
;;;","2023-01-24 00:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/12148
Date: 2023-01-23 17:41:01 +0000;;;","2023-01-25 23:42;dukebot;Changeset: 4b0e656b
Author:    Damon Fenacci <damon.fenacci@oracle.com>
Committer: Tobias Hartmann <thartmann@openjdk.org>
Date:      2023-01-26 07:41:15 +0000
URL:       https://git.openjdk.org/jdk/commit/4b0e656bb6a823f50507039df7855183ab98cd83
;;;",,,,,,,,,,,,,,,
Cleanups after UseMallocOnly removal,JDK-8298111,5088910,Bug,Resolved,JDK,JDK,software,duke,,,P4,Fixed,stuefe,stuefe,stuefe,2022-12-05 08:56,2022-12-12 13:50,2023-10-01 09:56,2022-12-05 22:32,20,,,,,,,20,hotspot,,0,,,,,,,,,,,,,,,,"There are some unused prototypes left after UseMallocOnly was removed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zhp7:",9223372036854775807,b27,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@762b8a4b,,,,,,,,,"2022-12-05 10:02;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jdk/pull/11516
Date: 2022-12-05 16:57:29 +0000;;;","2022-12-05 22:32;dukebot;Changeset: 04012c43
Author:    Thomas Stuefe <stuefe@openjdk.org>
Date:      2022-12-06 06:30:59 +0000
URL:       https://git.openjdk.org/jdk/commit/04012c4310806bb638737b577351851242950298
;;;",,,,,,,,,,,,,,,,,,,
It is not possible to build jtreg 6.1 branch using jdk 11.0.18,CODETOOLS-7903418,5092607,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P2,Fixed,serb,serb,serb,2023-01-26 19:16,2023-01-27 09:45,2023-10-01 09:56,2023-01-27 09:45,jtreg6.2,,,,,,,TBD_Minor,tools,,0,,,,,,,,,,,,,,,,"The next line does not work well if jdk11.0.18 is used:
SUPPORT_OLD_SOURCE_TARGET = $(shell $(JDKJAVAC) -version 2>&1 | grep '[8]' > /dev/null && echo true )",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,generic,,,,,,,,,generic,,,,,,"0|i3047v:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2023-01-26 19:22;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/146
Date: 2023-01-27 03:01:40 +0000;;;",,,,,,,,,,,,,,,,,,,,
JMH: Safepoint profiler should parse JDK 13+ -Xlog:safepoint,CODETOOLS-7903413,5091496,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2023-01-17 01:47,2023-01-18 01:27,2023-10-01 09:56,2023-01-18 01:27,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,"JDK-8219436 changed the -Xlog:safepoint logging, and JMH's parser breaks. We need to capture the new format.

Note this was further improved by JDK-8297154, and needs to be tested with more modern JDKs too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8219436,JDK-8297154,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zxcz:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@b978723,,,,,,,,,"2023-01-17 02:05;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jmh/pull/93
Date: 2023-01-17 09:55:45 +0000;;;","2023-01-18 01:27;shade;https://github.com/openjdk/jmh/commit/8bcb470d46ddfdf81eccc2e2661dfae2f0323d12;;;","2023-01-18 01:27;roboduke;Changeset: 8bcb470d
Author:    Aleksey Shipilëv <shade@redhat.com>
Committer: GitHub <noreply@github.com>
Date:      2023-01-18 10:26:35 +0000
URL:       https://git.openjdk.org/jmh/commit/8bcb470d46ddfdf81eccc2e2661dfae2f0323d12
;;;",,,,,,,,,,,,,,,,,,
jcstress: Main cannot compile with -Werror due to URL deprecation,CODETOOLS-7903407,5091269,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,shade,shade,shade,2023-01-12 04:59,2023-01-12 07:56,2023-10-01 09:56,2023-01-12 07:56,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,"```
Warning:  COMPILATION WARNING : 
[INFO] -------------------------------------------------------------
Warning:  /home/runner/work/jcstress/jcstress/jcstress-core/src/main/java/org/openjdk/jcstress/Main.java:[74,22] URL(java.lang.String) in java.net.URL has been deprecated
```",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zvyj:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@50120698,,,,,,,,,"2023-01-12 05:09;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jcstress/pull/125
Date: 2023-01-12 13:03:10 +0000;;;","2023-01-12 07:56;shade;https://github.com/openjdk/jcstress/commit/8b8b812fa0606e8fcbe42b82f3a490eab3e1ea45;;;",,,,,,,,,,,,,,,,,,,
compiler does not warn about instruction arguments that exceed allowed limits,CODETOOLS-7903405,5090878,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,lkuskov,lkuskov,lkuskov,2023-01-06 13:36,2023-01-13 13:33,2023-10-01 09:56,2023-01-13 13:33,asm_tools_7.0,asm_tools_8.0,,,,,,asm_tools_8.0,tools,,0,,,,,,,,,,,,,,,,"The attached jasm source has a set of nop instructions between the jfqe instruction and the ""SKIP"" label that is used by it. The length of the set is 0x8FFF which exceeds allowed by JVMS - signed 16-bit value 0x8000. The jasm silently produces a class file that is declined by JVM: 

>java Test
Error: Unable to initialize main class Test
Caused by: java.lang.VerifyError: (class: Test, method: test_1 signature: ()V) Illegal target of jump or branch

Since jasm allows to generate a ""defect"" binaries,  it would be nice if the jasm assembler warns that already, and not just the class file verifier.

Expected warning should be like:

jasm   -  WARN: test_1()V The 'ifge' instruction uses the argument 0x8000 that exceeds allowed signed 16-bit value 0x7FFF
1 warning(s)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"2023-01-06 13:35;lkuskov;Test.jasm;https://bugs.openjdk.org/secure/attachment/102233/Test.jasm",,,,,,,,,,,,,,,,,,,,,,,,"0|i2ztjn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@47358cbe,,,,,,,,,"2023-01-09 15:27;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/asmtools/pull/54
Date: 2023-01-09 23:17:36 +0000;;;","2023-01-13 13:33;lkuskov;Commit to the branch at8: https://github.com/openjdk/asmtools/commit/6e6006665f22cd8e097938cf9425df3a035b442a;;;",,,,,,,,,,,,,,,,,,,
jdis: tool writes incorrect StackMapTable if the first same_frame has type 0,CODETOOLS-7903402,5089607,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,lkuskov,lkuskov,lkuskov,2022-12-13 16:15,2023-01-17 21:09,2023-10-01 09:56,2023-01-17 21:09,asm_tools_7.0,asm_tools_8.0,,,,,,asm_tools_8.0,tools,,0,,,,,,,,,,,,,,,,"if StackMapTable: number_of_entries = 6
        frame_type = 0 /* same */
        frame_type = 55 /* same */
        frame_type = 23 /* same */
        frame_type = 23 /* same */
        frame_type = 23 /* same */
        frame_type = 7 /* same */
the output jasm file is:
  private Method #294:#6                       // recoverField:""()V"" 
    throws #80, #371                           // org/openjdk/asmtools/common/SyntaxError, java/io/IOException
    stack  3 locals  1
  {
           var               0 #429:#430;      // this:""Lorg/openjdk/asmtools/jcoder/Jcoder;""
     0:    stack_frame_type  same;
           getstatic         #87;              // Field Jcoder$1.$SwitchMap$org$openjdk$asmtools$jcoder$JcodTokens$Token:""[I""
     3:    aload_0;
     4:    getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
     7:    getfield          #46;              // Field Scanner.token:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    10:    invokevirtual     #93;              // Method JcodTokens$Token.ordinal:""()I""
    13:    iaload;
    14:    tableswitch       {                 // 1 to 7
                1:      56;
                2:      80;
                3:      104;
                4:      128;
                5:      128;
                6:      128;
                7:      128;
               default: 136  };
    56:    aload_0;
    57:    getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    60:    getstatic         #96;              // Field JcodTokens$Token.LBRACE:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    63:    getstatic         #99;              // Field JcodTokens$Token.RBRACE:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    66:    invokevirtual     #102;             // Method Scanner.match:""(Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;)V""
    69:    aload_0;
    70:    getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    73:    invokevirtual     #83;              // Method Scanner.scan:""()I""
    76:    pop;
    77:    goto              0;
    80:    aload_0;
    81:    getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    84:    getstatic         #106;             // Field JcodTokens$Token.LPAREN:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    87:    getstatic         #109;             // Field JcodTokens$Token.RPAREN:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    90:    invokevirtual     #102;             // Method Scanner.match:""(Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;)V""
    93:    aload_0;
    94:    getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    97:    invokevirtual     #83;              // Method Scanner.scan:""()I""
    100:   pop;
    101:   goto              0;
    104:   aload_0;
    105:   getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    108:   getstatic         #112;             // Field JcodTokens$Token.LSQBRACKET:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    111:   getstatic         #115;             // Field JcodTokens$Token.RSQBRACKET:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    114:   invokevirtual     #102;             // Method Scanner.match:""(Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;)V""
    117:   aload_0;
    118:   getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    121:   invokevirtual     #83;              // Method Scanner.scan:""()I""
    124:   pop;
    125:   goto              0;
    128:   new               #80;              // class org/openjdk/asmtools/common/SyntaxError
    131:   dup;
    132:   invokespecial     #82;              // Method org/openjdk/asmtools/common/SyntaxError.""<init>"":""()V""
    135:   stack_frame_type  same;
           athrow;
    136:   aload_0;
    137:   getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    140:   invokevirtual     #83;              // Method Scanner.scan:""()I""
    143:   pop;
    144:   goto              0;
           endvar            0;
  }
although expected method should be:

private Method #294:#6                       // recoverField:""()V"" 
    throws #80, #371                           // org/openjdk/asmtools/common/SyntaxError, java/io/IOException
    stack  3 locals  1
  {
           var               0 #429:#430;      // this:""Lorg/openjdk/asmtools/jcoder/Jcoder;""
     0:    stack_frame_type  same;
           getstatic         #87;              // Field Jcoder$1.$SwitchMap$org$openjdk$asmtools$jcoder$JcodTokens$Token:""[I""
     3:    aload_0;
     4:    getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
     7:    getfield          #46;              // Field Scanner.token:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    10:    invokevirtual     #93;              // Method JcodTokens$Token.ordinal:""()I""
    13:    iaload;
    14:    tableswitch       {                 // 1 to 7
                1:      56;
                2:      80;
                3:      104;
                4:      128;
                5:      128;
                6:      128;
                7:      128;
               default: 136  };
    56:    stack_frame_type  same;
           aload_0;
    57:    getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    60:    getstatic         #96;              // Field JcodTokens$Token.LBRACE:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    63:    getstatic         #99;              // Field JcodTokens$Token.RBRACE:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    66:    invokevirtual     #102;             // Method Scanner.match:""(Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;)V""
    69:    aload_0;
    70:    getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    73:    invokevirtual     #83;              // Method Scanner.scan:""()I""
    76:    pop;
    77:    goto              0;
    80:    stack_frame_type  same;
           aload_0;
    81:    getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    84:    getstatic         #106;             // Field JcodTokens$Token.LPAREN:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    87:    getstatic         #109;             // Field JcodTokens$Token.RPAREN:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    90:    invokevirtual     #102;             // Method Scanner.match:""(Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;)V""
    93:    aload_0;
    94:    getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    97:    invokevirtual     #83;              // Method Scanner.scan:""()I""
    100:   pop;
    101:   goto              0;
    104:   stack_frame_type  same;
           aload_0;
    105:   getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    108:   getstatic         #112;             // Field JcodTokens$Token.LSQBRACKET:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    111:   getstatic         #115;             // Field JcodTokens$Token.RSQBRACKET:""Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;""
    114:   invokevirtual     #102;             // Method Scanner.match:""(Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;Lorg/openjdk/asmtools/jcoder/JcodTokens$Token;)V""
    117:   aload_0;
    118:   getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    121:   invokevirtual     #83;              // Method Scanner.scan:""()I""
    124:   pop;
    125:   goto              0;
    128:   stack_frame_type  same;
           new               #80;              // class org/openjdk/asmtools/common/SyntaxError
    131:   dup;
    132:   invokespecial     #82;              // Method org/openjdk/asmtools/common/SyntaxError.""<init>"":""()V""
    135:   athrow;
    136:   stack_frame_type  same;
           aload_0;
    137:   getfield          #31;              // Field scanner:""Lorg/openjdk/asmtools/jcoder/Scanner;""
    140:   invokevirtual     #83;              // Method Scanner.scan:""()I""
    143:   pop;
    144:   goto              0;
            endvar            0;
  }
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,asm_tools_7.0,,,,,,,,"0|i2zm0b:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@47358cbe,,,,,,,,,"2022-12-14 13:20;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/asmtools/pull/51
Date: 2022-12-14 21:12:22 +0000;;;","2023-01-17 21:09;lkuskov;The fix integrated: https://github.com/openjdk/asmtools/pull/51/commits/9f58f74e5c0bc4bd8abf7ee286af94e9ef4efec7;;;",,,,,,,,,,,,,,,,,,,
"jtreg fails if set of jdk tests process jasm,jdis files with defects   ",CODETOOLS-7903401,5089496,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P2,Fixed,lkuskov,lkuskov,lkuskov,2022-12-12 14:45,2023-01-17 21:13,2023-10-01 09:56,2023-01-17 21:13,asm_tools_8.0,,,,,,,asm_tools_8.0,tools,,0,regression,,,,,,,,,,,,,,,"jib make -- test TEST=test/hotspot/jtreg/runtime
Passed: runtime/classFileParserBug/BadInitMethod.java
nonvoidinit.jasm (29:20) Warning: <init> method cannot be an interface method
    public abstract Method ""<init>"":""()I"";
                    ^
Passed: runtime/cds/SharedBaseAddress.java#id1
Passed: runtime/classFileParserBug/FakeMethodAcc.java
switch from jcoder to jcoder
1 warning(s)
jcoder- ERROR: (I18NResourceBundle) The warning message 'warn.init.in_int' not found
1 error(s)
--------------------------------------------------
TEST: runtime/classFileParserBug/InitInInterface.java
TEST JDK: /Users/lkuskov/dev/openjdk/build/macosx-x64/images/jdk

ACTION: compile -- Failed. jasm failed
REASON: User specified action: run compile nonvoidinit.jasm voidinit.jasm
TIME:   0.257 seconds
messages:
command: compile /Users/lkuskov/dev/openjdk/test/hotspot/jtreg/runtime/classFileParserBug/nonvoidinit.jasm /Users/lkuskov/dev/openjdk/test/hotspot/jtreg/runtime/classFileParserBug/voidinit.jasm
reason: User specified action: run compile nonvoidinit.jasm voidinit.jasm
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zlbn:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@47358cbe,,,,,,,,,"2023-01-11 13:18;lkuskov;The jtreg uses a single instance of asmtool during a test run that leads to error in switching between jasm and jcoder environment. I.e. the environment is set to Jcod while jasm is processing sources ant therefore jasm can't find jasm-specific message in Jcoder environment.;;;","2023-01-17 21:13;lkuskov;Fix integrated: https://github.com/openjdk/asmtools/commit/b806d16e99fbb92263dc7f1a7155a8c09be65790;;;",,,,,,,,,,,,,,,,,,,
DEFAULT_UNIX_ENV_VARS needs to be updated,CODETOOLS-7903400,5089485,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,prr,prr,2022-12-12 12:32,2023-08-14 15:16,2023-10-01 09:56,2023-05-02 15:57,jtreg7.2,,,,,,,jtreg7.3,tools,,0,,,,,,,,,,,,,,,,"Tools.java currently defines the following list of variables to be preserved

    private static final String[] DEFAULT_UNIX_ENV_VARS = {
        ""DISPLAY"", ""GNOME_DESKTOP_SESSION_ID"", ""HOME"", ""LANG"",
        ""LC_ALL"", ""LC_CTYPE"", ""LPDEST"", ""PRINTER"", ""TZ"", ""XMODIFIERS""
    };

But modern Linux systems need some others preserved
XDG_RUNTIME_DIR
and
DBUS_SESSION_BUS_ADDRESS

are two that are set in all login environments (ie ssh etc not just desktop)
and seem important to default correct functioning of some platform libraries

If your UID is 1000 then typical values on Ubuntu 22.04 look like
XDG_RUNTIME_DIR=/run/user/1000
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus

There are other XDG* variables set in desktop sessions but I do not know how important they are. for example
XDG_SESSION_TYPE=x11  (I think wayland is the other likely value)
XDG_CURRENT_DESKTOP=ubuntu:GNOME
We can worry about those later if they are shown to be needed.

BTW Although we still need to run on older Linuxes on ubuntu 22.04 we have
GNOME_DESKTOP_SESSION_ID=this_is_deprecated

So some day (not yet) we could dispense with that",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,JDK-8313903,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zl97:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2023-04-27 10:22;prr;Additionally, in order to support the Wayland display server on Linux, we need to preserve WAYLAND_DISPLAY
A fuller list would include all of these desktop related ones with the first 4 the most critical
DISPLAY=:0.0
WAYLAND_DISPLAY=wayland-0 
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus
XDG_RUNTIME_DIR=/run/user/1000 
XDG_SESSION_TYPE=wayland
XDG_SESSION_DESKTOP=ubuntu-wayland
XDG_CURRENT_DESKTOP=ubuntu:GNOME
DESKTOP_SESSION=ubuntu-wayland
GDMSESSION=ubuntu-wayland
GNOME_SHELL_SESSION_MODE=ubuntu
;;;","2023-04-27 12:11;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/152
Date: 2023-04-27 19:06:54 +0000;;;",,,,,,,,,,,,,,,,,,,
sync panama branch of jextract for jdk 21,CODETOOLS-7903399,5089449,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,sundar,sundar,sundar,2022-12-12 07:23,2022-12-13 00:22,2023-10-01 09:56,2022-12-13 00:22,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,sync panama branch of jextract for jdk 21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zl17:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@2791a97a,,,,,,,,,"2022-12-12 09:41;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jextract/pull/97
Date: 2022-12-12 17:35:41 +0000;;;",,,,,,,,,,,,,,,,,,,,
Incorrect format for version in error message,CODETOOLS-7903398,5089159,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P4,Fixed,jjg,jjg,jjg,2022-12-07 14:04,2023-02-06 09:47,2023-10-01 09:56,2023-02-06 09:47,,,,,,,,,tools,,0,,,,,,,,,,,,,,,,"In Version.java, `getVersionBuildString` uses the old ` b` notation, instead of the new `+` notation.

    String getVersionBuildString() {
        return versionString != null
                ? versionString
                : String.format(""%s b%s"", version, build);
    }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zj8j:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-12-07 14:52;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/143
Date: 2022-12-07 22:46:26 +0000;;;",,,,,,,,,,,,,,,,,,,,
Update version to 7.1.1,CODETOOLS-7903394,5088915,Bug,Resolved,CODETOOLS,Code Tools,software,duke,,,P3,Fixed,cstein,cstein,cstein,2022-12-05 10:47,2022-12-06 02:20,2023-10-01 09:56,2022-12-06 02:20,jtreg7.1,,,,,,,jtreg7.1,tools,,0,,,,,,,,,,,,,,,,The next promoted bugfix version will be 7.1.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,CODETOOLS-7903226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"0|i2zhqb:",9223372036854775807,,,com.oracle.jira.customfield.subcomponent.service.impl.SubComponentCacheImpl@41617238,,,,,,,,,"2022-12-05 12:03;roboduke;A pull request was submitted for review.
URL: https://git.openjdk.org/jtreg/pull/141
Date: 2022-12-05 19:10:13 +0000;;;",,,,,,,,,,,,,,,,,,,,
